/*
 * Generated code file by Il2CppInspector - http://www.djkaty.com - https://github.com/djkaty
 */

using System;
using System.Collections;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Configuration;
using System.Configuration.Assemblies;
using System.Diagnostics;
using System.Diagnostics.Tracing;
using System.Globalization;
using System.IO;
using System.Net;
using System.Net.NetworkInformation;
using System.Net.Security;
using System.Net.Sockets;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.ConstrainedExecution;
using System.Runtime.ExceptionServices;
using System.Runtime.InteropServices;
using System.Runtime.Remoting;
using System.Runtime.Remoting.Activation;
using System.Runtime.Remoting.Contexts;
using System.Runtime.Remoting.Lifetime;
using System.Runtime.Remoting.Messaging;
using System.Runtime.Remoting.Metadata;
using System.Runtime.Remoting.Proxies;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters;
using System.Runtime.Serialization.Formatters.Binary;
using System.Security;
using System.Security.Authentication;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using System.Security.Policy;
using System.Security.Principal;
using System.Security.Util;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Xml;
using System.Xml.XPath;
using DG.Tweening;
using DG.Tweening.Core;
using DG.Tweening.Core.Enums;
using DG.Tweening.Plugins.Core;
using DG.Tweening.Plugins.Core.PathCore;
using DG.Tweening.Plugins.Options;
using Facebook.Unity;
using Facebook.Unity.Canvas;
using Facebook.Unity.Editor;
using Facebook.Unity.Mobile;
using Facebook.Unity.Mobile.Android;
using ImaginationOverflow.UniversalDeepLinking;
using Microsoft.Win32;
using Microsoft.Win32.SafeHandles;
using Mono;
using Mono.Globalization.Unicode;
using Mono.Math;
using Mono.Math.Prime;
using Mono.Net.Security;
using Mono.Security;
using Mono.Security.Cryptography;
using Mono.Security.Interface;
using Mono.Security.X509;
using Mono.Xml;
using Obfuscator.Attribute;
using UnityEngine;
using UnityEngine.Animations;
using UnityEngine.Bindings;
using UnityEngine.Events;
using UnityEngine.EventSystems;
using UnityEngine.Experimental;
using UnityEngine.Experimental.Rendering;
using UnityEngine.Internal;
using UnityEngine.Networking;
using UnityEngine.Networking.Match;
using UnityEngine.Networking.NetworkSystem;
using UnityEngine.Networking.Types;
using UnityEngine.Playables;
using UnityEngine.Rendering;
using UnityEngine.SceneManagement;
using UnityEngine.Scripting;
using UnityEngine.Scripting.APIUpdating;
using UnityEngine.Serialization;
using UnityEngine.U2D;
using UnityEngine.UI;
using UnityEngine.UI.Collections;
using UnityEngine.UI.CoroutineTween;
using UnityEngineInternal;
using Vuforia;
using Vuforia.UnityCompiled;

// Image 0: mscorlib.dll - Assembly: mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089 - Types 0-1445
[assembly: AllowPartiallyTrustedCallers] // 0x0039FDE0-0x003A014C
[assembly: AssemblyCompany] // 0x0039FDE0-0x003A014C
[assembly: AssemblyCopyright] // 0x0039FDE0-0x003A014C
[assembly: AssemblyDefaultAlias] // 0x0039FDE0-0x003A014C
[assembly: AssemblyDelaySign] // 0x0039FDE0-0x003A014C
[assembly: AssemblyDescription] // 0x0039FDE0-0x003A014C
[assembly: AssemblyFileVersion] // 0x0039FDE0-0x003A014C
[assembly: AssemblyInformationalVersion] // 0x0039FDE0-0x003A014C
[assembly: AssemblyKeyFile] // 0x0039FDE0-0x003A014C
[assembly: AssemblyProduct] // 0x0039FDE0-0x003A014C
[assembly: AssemblyTitle] // 0x0039FDE0-0x003A014C
[assembly: CLSCompliant] // 0x0039FDE0-0x003A014C
[assembly: ComCompatibleVersion] // 0x0039FDE0-0x003A014C
[assembly: CompilationRelaxations] // 0x0039FDE0-0x003A014C
[assembly: ComVisible] // 0x0039FDE0-0x003A014C
[assembly: Debuggable] // 0x0039FDE0-0x003A014C
[assembly: DefaultDependency] // 0x0039FDE0-0x003A014C
[assembly: Guid] // 0x0039FDE0-0x003A014C
[assembly: InternalsVisibleTo] // 0x0039FDE0-0x003A014C
[assembly: InternalsVisibleTo] // 0x0039FDE0-0x003A014C
[assembly: InternalsVisibleTo] // 0x0039FDE0-0x003A014C
[assembly: InternalsVisibleTo] // 0x0039FDE0-0x003A014C
[assembly: InternalsVisibleTo] // 0x0039FDE0-0x003A014C
[assembly: NeutralResourcesLanguage] // 0x0039FDE0-0x003A014C
[assembly: RuntimeCompatibility] // 0x0039FDE0-0x003A014C
[assembly: SatelliteContractVersion] // 0x0039FDE0-0x003A014C
[assembly: StringFreezing] // 0x0039FDE0-0x003A014C

// Image 1: Mono.Security.dll - Assembly: Mono.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756 - Types 1446-1456
[assembly: AssemblyCompany] // 0x003A01B4-0x003A0358
[assembly: AssemblyCopyright] // 0x003A01B4-0x003A0358
[assembly: AssemblyDelaySign] // 0x003A01B4-0x003A0358
[assembly: AssemblyDescription] // 0x003A01B4-0x003A0358
[assembly: AssemblyProduct] // 0x003A01B4-0x003A0358
[assembly: AssemblyTitle] // 0x003A01B4-0x003A0358
[assembly: CLSCompliant] // 0x003A01B4-0x003A0358
[assembly: CompilationRelaxations] // 0x003A01B4-0x003A0358
[assembly: ComVisible] // 0x003A01B4-0x003A0358
[assembly: Debuggable] // 0x003A01B4-0x003A0358
[assembly: InternalsVisibleTo] // 0x003A01B4-0x003A0358
[assembly: NeutralResourcesLanguage] // 0x003A01B4-0x003A0358
[assembly: RuntimeCompatibility] // 0x003A01B4-0x003A0358

// Image 2: System.dll - Assembly: System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e - Types 1457-1728
[assembly: AssemblyCompany] // 0x003A13CC-0x003A169C
[assembly: AssemblyCopyright] // 0x003A13CC-0x003A169C
[assembly: AssemblyDefaultAlias] // 0x003A13CC-0x003A169C
[assembly: AssemblyDelaySign] // 0x003A13CC-0x003A169C
[assembly: AssemblyDescription] // 0x003A13CC-0x003A169C
[assembly: AssemblyFileVersion] // 0x003A13CC-0x003A169C
[assembly: AssemblyInformationalVersion] // 0x003A13CC-0x003A169C
[assembly: AssemblyKeyFile] // 0x003A13CC-0x003A169C
[assembly: AssemblyProduct] // 0x003A13CC-0x003A169C
[assembly: AssemblyTitle] // 0x003A13CC-0x003A169C
[assembly: CLSCompliant] // 0x003A13CC-0x003A169C
[assembly: CompilationRelaxations] // 0x003A13CC-0x003A169C
[assembly: ComVisible] // 0x003A13CC-0x003A169C
[assembly: Debuggable] // 0x003A13CC-0x003A169C
[assembly: InternalsVisibleTo] // 0x003A13CC-0x003A169C
[assembly: InternalsVisibleTo] // 0x003A13CC-0x003A169C
[assembly: InternalsVisibleTo] // 0x003A13CC-0x003A169C
[assembly: InternalsVisibleTo] // 0x003A13CC-0x003A169C
[assembly: NeutralResourcesLanguage] // 0x003A13CC-0x003A169C
[assembly: RuntimeCompatibility] // 0x003A13CC-0x003A169C
[assembly: SatelliteContractVersion] // 0x003A13CC-0x003A169C

// Image 3: System.Configuration.dll - Assembly: System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a - Types 1729-1736
[assembly: AllowPartiallyTrustedCallers] // 0x003A1720-0x003A1984
[assembly: AssemblyCompany] // 0x003A1720-0x003A1984
[assembly: AssemblyCopyright] // 0x003A1720-0x003A1984
[assembly: AssemblyDefaultAlias] // 0x003A1720-0x003A1984
[assembly: AssemblyDescription] // 0x003A1720-0x003A1984
[assembly: AssemblyFileVersion] // 0x003A1720-0x003A1984
[assembly: AssemblyInformationalVersion] // 0x003A1720-0x003A1984
[assembly: AssemblyProduct] // 0x003A1720-0x003A1984
[assembly: AssemblyTitle] // 0x003A1720-0x003A1984
[assembly: CLSCompliant] // 0x003A1720-0x003A1984
[assembly: ComCompatibleVersion] // 0x003A1720-0x003A1984
[assembly: CompilationRelaxations] // 0x003A1720-0x003A1984
[assembly: ComVisible] // 0x003A1720-0x003A1984
[assembly: Debuggable] // 0x003A1720-0x003A1984
[assembly: DefaultDllImportSearchPaths] // 0x003A1720-0x003A1984
[assembly: NeutralResourcesLanguage] // 0x003A1720-0x003A1984
[assembly: RuntimeCompatibility] // 0x003A1720-0x003A1984
[assembly: SatelliteContractVersion] // 0x003A1720-0x003A1984
[assembly: SecurityRules] // 0x003A1720-0x003A1984

// Image 4: System.Xml.dll - Assembly: System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e - Types 1737-1743
[assembly: AssemblyCompany] // 0x003A19E4-0x003A1CE8
[assembly: AssemblyCopyright] // 0x003A19E4-0x003A1CE8
[assembly: AssemblyDefaultAlias] // 0x003A19E4-0x003A1CE8
[assembly: AssemblyDelaySign] // 0x003A19E4-0x003A1CE8
[assembly: AssemblyDescription] // 0x003A19E4-0x003A1CE8
[assembly: AssemblyFileVersion] // 0x003A19E4-0x003A1CE8
[assembly: AssemblyInformationalVersion] // 0x003A19E4-0x003A1CE8
[assembly: AssemblyKeyFile] // 0x003A19E4-0x003A1CE8
[assembly: AssemblyProduct] // 0x003A19E4-0x003A1CE8
[assembly: AssemblyTitle] // 0x003A19E4-0x003A1CE8
[assembly: CLSCompliant] // 0x003A19E4-0x003A1CE8
[assembly: CompilationRelaxations] // 0x003A19E4-0x003A1CE8
[assembly: ComVisible] // 0x003A19E4-0x003A1CE8
[assembly: Debuggable] // 0x003A19E4-0x003A1CE8
[assembly: InternalsVisibleTo] // 0x003A19E4-0x003A1CE8
[assembly: InternalsVisibleTo] // 0x003A19E4-0x003A1CE8
[assembly: InternalsVisibleTo] // 0x003A19E4-0x003A1CE8
[assembly: InternalsVisibleTo] // 0x003A19E4-0x003A1CE8
[assembly: InternalsVisibleTo] // 0x003A19E4-0x003A1CE8
[assembly: NeutralResourcesLanguage] // 0x003A19E4-0x003A1CE8
[assembly: RuntimeCompatibility] // 0x003A19E4-0x003A1CE8
[assembly: SatelliteContractVersion] // 0x003A19E4-0x003A1CE8

// Image 5: System.Core.dll - Assembly: System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e - Types 1744-1764
[assembly: AssemblyCompany] // 0x003A213C-0x003A237C
[assembly: AssemblyCopyright] // 0x003A213C-0x003A237C
[assembly: AssemblyDefaultAlias] // 0x003A213C-0x003A237C
[assembly: AssemblyDelaySign] // 0x003A213C-0x003A237C
[assembly: AssemblyDescription] // 0x003A213C-0x003A237C
[assembly: AssemblyFileVersion] // 0x003A213C-0x003A237C
[assembly: AssemblyInformationalVersion] // 0x003A213C-0x003A237C
[assembly: AssemblyKeyFile] // 0x003A213C-0x003A237C
[assembly: AssemblyProduct] // 0x003A213C-0x003A237C
[assembly: AssemblyTitle] // 0x003A213C-0x003A237C
[assembly: CLSCompliant] // 0x003A213C-0x003A237C
[assembly: CompilationRelaxations] // 0x003A213C-0x003A237C
[assembly: ComVisible] // 0x003A213C-0x003A237C
[assembly: Debuggable] // 0x003A213C-0x003A237C
[assembly: NeutralResourcesLanguage] // 0x003A213C-0x003A237C
[assembly: RuntimeCompatibility] // 0x003A213C-0x003A237C
[assembly: SatelliteContractVersion] // 0x003A213C-0x003A237C

// Image 6: UnityEngine.SharedInternalsModule.dll - Assembly: UnityEngine.SharedInternalsModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 1765-1801
[assembly: Debuggable] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: InternalsVisibleTo] // 0x003A3168-0x003A4268
[assembly: RuntimeCompatibility] // 0x003A3168-0x003A4268
[assembly: UnityEngineModuleAssembly] // 0x003A3168-0x003A4268

// Image 7: UnityEngine.CoreModule.dll - Assembly: UnityEngine.CoreModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 1802-2259
[assembly: Debuggable] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: InternalsVisibleTo] // 0x003B2308-0x003B3550
[assembly: RuntimeCompatibility] // 0x003B2308-0x003B3550
[assembly: UnityEngineModuleAssembly] // 0x003B2308-0x003B3550

// Image 8: UnityEngine.PhysicsModule.dll - Assembly: UnityEngine.PhysicsModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2260-2275
[assembly: Debuggable] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: InternalsVisibleTo] // 0x003B4380-0x003B5490
[assembly: RuntimeCompatibility] // 0x003B4380-0x003B5490
[assembly: UnityEngineModuleAssembly] // 0x003B4380-0x003B5490

// Image 9: UnityEngine.UnityAnalyticsModule.dll - Assembly: UnityEngine.UnityAnalyticsModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2276-2285
[assembly: Debuggable] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: InternalsVisibleTo] // 0x003B58D8-0x003B69D8
[assembly: RuntimeCompatibility] // 0x003B58D8-0x003B69D8
[assembly: UnityEngineModuleAssembly] // 0x003B58D8-0x003B69D8

// Image 10: UnityEngine.AudioModule.dll - Assembly: UnityEngine.AudioModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2286-2309
[assembly: Debuggable] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: InternalsVisibleTo] // 0x003B7398-0x003B84BC
[assembly: RuntimeCompatibility] // 0x003B7398-0x003B84BC
[assembly: UnityEngineModuleAssembly] // 0x003B7398-0x003B84BC

// Image 11: UnityEngine.ImageConversionModule.dll - Assembly: UnityEngine.ImageConversionModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2310-2311
[assembly: Debuggable] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: InternalsVisibleTo] // 0x003B8680-0x003B9790
[assembly: RuntimeCompatibility] // 0x003B8680-0x003B9790
[assembly: UnityEngineModuleAssembly] // 0x003B8680-0x003B9790

// Image 12: UnityEngine.JSONSerializeModule.dll - Assembly: UnityEngine.JSONSerializeModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2312-2313
[assembly: Debuggable] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: InternalsVisibleTo] // 0x003B9828-0x003BA928
[assembly: RuntimeCompatibility] // 0x003B9828-0x003BA928
[assembly: UnityEngineModuleAssembly] // 0x003B9828-0x003BA928

// Image 13: UnityEngine.TextRenderingModule.dll - Assembly: UnityEngine.TextRenderingModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2314-2326
[assembly: Debuggable] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: InternalsVisibleTo] // 0x003BABA8-0x003BBCA8
[assembly: RuntimeCompatibility] // 0x003BABA8-0x003BBCA8
[assembly: UnityEngineModuleAssembly] // 0x003BABA8-0x003BBCA8

// Image 14: UnityEngine.UnityWebRequestModule.dll - Assembly: UnityEngine.UnityWebRequestModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2327-2339
[assembly: Debuggable] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: InternalsVisibleTo] // 0x003BC45C-0x003BD5F4
[assembly: RuntimeCompatibility] // 0x003BC45C-0x003BD5F4
[assembly: UnityEngineModuleAssembly] // 0x003BC45C-0x003BD5F4

// Image 15: UnityEngine.XRModule.dll - Assembly: UnityEngine.XRModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2340-2384
[assembly: Debuggable] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: InternalsVisibleTo] // 0x003BEBDC-0x003BFCDC
[assembly: RuntimeCompatibility] // 0x003BEBDC-0x003BFCDC
[assembly: UnityEngineModuleAssembly] // 0x003BEBDC-0x003BFCDC

// Image 16: UnityEngine.AnimationModule.dll - Assembly: UnityEngine.AnimationModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2385-2416
[assembly: Debuggable] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: InternalsVisibleTo] // 0x003C13BC-0x003C24CC
[assembly: RuntimeCompatibility] // 0x003C13BC-0x003C24CC
[assembly: UnityEngineModuleAssembly] // 0x003C13BC-0x003C24CC

// Image 17: UnityEngine.IMGUIModule.dll - Assembly: UnityEngine.IMGUIModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2417-2453
[assembly: Debuggable] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: InternalsVisibleTo] // 0x003C4EC8-0x003C5FEC
[assembly: RuntimeCompatibility] // 0x003C4EC8-0x003C5FEC
[assembly: UnityEngineModuleAssembly] // 0x003C4EC8-0x003C5FEC

// Image 18: UnityEngine.InputModule.dll - Assembly: UnityEngine.InputModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2454-2456
[assembly: Debuggable] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: InternalsVisibleTo] // 0x003C60B0-0x003C71B0
[assembly: RuntimeCompatibility] // 0x003C60B0-0x003C71B0
[assembly: UnityEngineModuleAssembly] // 0x003C60B0-0x003C71B0

// Image 19: UnityEngine.ParticleSystemModule.dll - Assembly: UnityEngine.ParticleSystemModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2457-2466
[assembly: Debuggable] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: InternalsVisibleTo] // 0x003C7AA8-0x003C8BB8
[assembly: RuntimeCompatibility] // 0x003C7AA8-0x003C8BB8
[assembly: UnityEngineModuleAssembly] // 0x003C7AA8-0x003C8BB8

// Image 20: UnityEngine.Physics2DModule.dll - Assembly: UnityEngine.Physics2DModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2467-2473
[assembly: Debuggable] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: InternalsVisibleTo] // 0x003C98C8-0x003CA9D8
[assembly: RuntimeCompatibility] // 0x003C98C8-0x003CA9D8
[assembly: UnityEngineModuleAssembly] // 0x003C98C8-0x003CA9D8

// Image 21: UnityEngine.ScreenCaptureModule.dll - Assembly: UnityEngine.ScreenCaptureModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2474-2476
[assembly: Debuggable] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: InternalsVisibleTo] // 0x003CAA80-0x003CBB80
[assembly: RuntimeCompatibility] // 0x003CAA80-0x003CBB80
[assembly: UnityEngineModuleAssembly] // 0x003CAA80-0x003CBB80

// Image 22: UnityEngine.UIModule.dll - Assembly: UnityEngine.UIModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2477-2486
[assembly: Debuggable] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: InternalsVisibleTo] // 0x003CC170-0x003CD270
[assembly: RuntimeCompatibility] // 0x003CC170-0x003CD270
[assembly: UnityEngineModuleAssembly] // 0x003CC170-0x003CD270

// Image 23: UnityEngine.UNETModule.dll - Assembly: UnityEngine.UNETModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2487-2535
[assembly: Debuggable] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: InternalsVisibleTo] // 0x003CFDDC-0x003D0EDC
[assembly: RuntimeCompatibility] // 0x003CFDDC-0x003D0EDC
[assembly: UnityEngineModuleAssembly] // 0x003CFDDC-0x003D0EDC

// Image 24: UnityEngine.UnityWebRequestWWWModule.dll - Assembly: UnityEngine.UnityWebRequestWWWModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2536-2537
[assembly: Debuggable] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: InternalsVisibleTo] // 0x003D0F14-0x003D2024
[assembly: RuntimeCompatibility] // 0x003D0F14-0x003D2024
[assembly: UnityEngineModuleAssembly] // 0x003D0F14-0x003D2024

// Image 25: UnityEngine.VRModule.dll - Assembly: UnityEngine.VRModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2538-2540
[assembly: Debuggable] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: InternalsVisibleTo] // 0x003D2260-0x003D3360
[assembly: RuntimeCompatibility] // 0x003D2260-0x003D3360
[assembly: UnityEngineModuleAssembly] // 0x003D2260-0x003D3360

// Image 27: ImaginationOverflow.UniversalDeepLinking.Core.dll - Assembly: ImaginationOverflow.UniversalDeepLinking.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2542-2545
[assembly: AssemblyCompany] // 0x003D3440-0x003D35FC
[assembly: AssemblyConfiguration] // 0x003D3440-0x003D35FC
[assembly: AssemblyCopyright] // 0x003D3440-0x003D35FC
[assembly: AssemblyDescription] // 0x003D3440-0x003D35FC
[assembly: AssemblyFileVersion] // 0x003D3440-0x003D35FC
[assembly: AssemblyProduct] // 0x003D3440-0x003D35FC
[assembly: AssemblyTitle] // 0x003D3440-0x003D35FC
[assembly: AssemblyTrademark] // 0x003D3440-0x003D35FC
[assembly: CompilationRelaxations] // 0x003D3440-0x003D35FC
[assembly: ComVisible] // 0x003D3440-0x003D35FC
[assembly: Debuggable] // 0x003D3440-0x003D35FC
[assembly: Guid] // 0x003D3440-0x003D35FC
[assembly: RuntimeCompatibility] // 0x003D3440-0x003D35FC

// Image 28: ImaginationOverflow.UniversalDeepLinking.Platform.dll - Assembly: ImaginationOverflow.UniversalDeepLinking.Platform, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2546-2548
[assembly: AssemblyCompany] // 0x003D363C-0x003D37F8
[assembly: AssemblyConfiguration] // 0x003D363C-0x003D37F8
[assembly: AssemblyCopyright] // 0x003D363C-0x003D37F8
[assembly: AssemblyDescription] // 0x003D363C-0x003D37F8
[assembly: AssemblyFileVersion] // 0x003D363C-0x003D37F8
[assembly: AssemblyProduct] // 0x003D363C-0x003D37F8
[assembly: AssemblyTitle] // 0x003D363C-0x003D37F8
[assembly: AssemblyTrademark] // 0x003D363C-0x003D37F8
[assembly: CompilationRelaxations] // 0x003D363C-0x003D37F8
[assembly: ComVisible] // 0x003D363C-0x003D37F8
[assembly: Debuggable] // 0x003D363C-0x003D37F8
[assembly: Guid] // 0x003D363C-0x003D37F8
[assembly: RuntimeCompatibility] // 0x003D363C-0x003D37F8

// Image 31: Facebook.Unity.Settings.dll - Assembly: Facebook.Unity.Settings, Version=7.17.2.0, Culture=neutral, PublicKeyToken=null - Types 2551-2555
[assembly: CompilationRelaxations] // 0x003D3C28-0x003D3C8C
[assembly: Debuggable] // 0x003D3C28-0x003D3C8C
[assembly: RuntimeCompatibility] // 0x003D3C28-0x003D3C8C

// Image 32: ImaginationOverflow.UniversalDeepLinking.dll - Assembly: ImaginationOverflow.UniversalDeepLinking, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2556-2561
[assembly: AssemblyCompany] // 0x003D3DFC-0x003D3FB8
[assembly: AssemblyConfiguration] // 0x003D3DFC-0x003D3FB8
[assembly: AssemblyCopyright] // 0x003D3DFC-0x003D3FB8
[assembly: AssemblyDescription] // 0x003D3DFC-0x003D3FB8
[assembly: AssemblyFileVersion] // 0x003D3DFC-0x003D3FB8
[assembly: AssemblyProduct] // 0x003D3DFC-0x003D3FB8
[assembly: AssemblyTitle] // 0x003D3DFC-0x003D3FB8
[assembly: AssemblyTrademark] // 0x003D3DFC-0x003D3FB8
[assembly: CompilationRelaxations] // 0x003D3DFC-0x003D3FB8
[assembly: ComVisible] // 0x003D3DFC-0x003D3FB8
[assembly: Debuggable] // 0x003D3DFC-0x003D3FB8
[assembly: Guid] // 0x003D3DFC-0x003D3FB8
[assembly: RuntimeCompatibility] // 0x003D3DFC-0x003D3FB8

// Image 33: UnityEngine.UI.dll - Assembly: UnityEngine.UI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2562-2748
[assembly: AssemblyCompany] // 0x003D817C-0x003D8370
[assembly: AssemblyConfiguration] // 0x003D817C-0x003D8370
[assembly: AssemblyCopyright] // 0x003D817C-0x003D8370
[assembly: AssemblyDescription] // 0x003D817C-0x003D8370
[assembly: AssemblyFileVersion] // 0x003D817C-0x003D8370
[assembly: AssemblyProduct] // 0x003D817C-0x003D8370
[assembly: AssemblyTitle] // 0x003D817C-0x003D8370
[assembly: AssemblyTrademark] // 0x003D817C-0x003D8370
[assembly: ComVisible] // 0x003D817C-0x003D8370
[assembly: Debuggable] // 0x003D817C-0x003D8370
[assembly: Guid] // 0x003D817C-0x003D8370
[assembly: InternalsVisibleTo] // 0x003D817C-0x003D8370
[assembly: RuntimeCompatibility] // 0x003D817C-0x003D8370
[assembly: UnityAPICompatibilityVersion] // 0x003D817C-0x003D8370

// Image 35: DOTween.dll - Assembly: DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2750-2937
[assembly: AssemblyCompany] // 0x003D9B20-0x003D9DA4
[assembly: AssemblyConfiguration] // 0x003D9B20-0x003D9DA4
[assembly: AssemblyCopyright] // 0x003D9B20-0x003D9DA4
[assembly: AssemblyDescription] // 0x003D9B20-0x003D9DA4
[assembly: AssemblyFileVersion] // 0x003D9B20-0x003D9DA4
[assembly: AssemblyProduct] // 0x003D9B20-0x003D9DA4
[assembly: AssemblyTitle] // 0x003D9B20-0x003D9DA4
[assembly: AssemblyTrademark] // 0x003D9B20-0x003D9DA4
[assembly: CompilationRelaxations] // 0x003D9B20-0x003D9DA4
[assembly: ComVisible] // 0x003D9B20-0x003D9DA4
[assembly: Debuggable] // 0x003D9B20-0x003D9DA4
[assembly: Guid] // 0x003D9B20-0x003D9DA4
[assembly: InternalsVisibleTo] // 0x003D9B20-0x003D9DA4
[assembly: InternalsVisibleTo] // 0x003D9B20-0x003D9DA4
[assembly: InternalsVisibleTo] // 0x003D9B20-0x003D9DA4
[assembly: InternalsVisibleTo] // 0x003D9B20-0x003D9DA4
[assembly: InternalsVisibleTo] // 0x003D9B20-0x003D9DA4
[assembly: RuntimeCompatibility] // 0x003D9B20-0x003D9DA4

// Image 36: Facebook.Unity.dll - Assembly: Facebook.Unity, Version=7.17.2.0, Culture=neutral, PublicKeyToken=null - Types 2938-3061
[assembly: CompilationRelaxations] // 0x003DAB64-0x003DACD4
[assembly: Debuggable] // 0x003DAB64-0x003DACD4
[assembly: InternalsVisibleTo] // 0x003DAB64-0x003DACD4
[assembly: InternalsVisibleTo] // 0x003DAB64-0x003DACD4
[assembly: InternalsVisibleTo] // 0x003DAB64-0x003DACD4
[assembly: InternalsVisibleTo] // 0x003DAB64-0x003DACD4
[assembly: InternalsVisibleTo] // 0x003DAB64-0x003DACD4
[assembly: InternalsVisibleTo] // 0x003DAB64-0x003DACD4
[assembly: RuntimeCompatibility] // 0x003DAB64-0x003DACD4
[assembly: UnityAPICompatibilityVersion] // 0x003DAB64-0x003DACD4

// Image 37: UnityEngine.Networking.dll - Assembly: UnityEngine.Networking, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null - Types 3062-3160
[assembly: AssemblyCompany] // 0x003DC78C-0x003DC9B8
[assembly: AssemblyConfiguration] // 0x003DC78C-0x003DC9B8
[assembly: AssemblyCopyright] // 0x003DC78C-0x003DC9B8
[assembly: AssemblyDescription] // 0x003DC78C-0x003DC9B8
[assembly: AssemblyFileVersion] // 0x003DC78C-0x003DC9B8
[assembly: AssemblyProduct] // 0x003DC78C-0x003DC9B8
[assembly: AssemblyTitle] // 0x003DC78C-0x003DC9B8
[assembly: AssemblyTrademark] // 0x003DC78C-0x003DC9B8
[assembly: ComVisible] // 0x003DC78C-0x003DC9B8
[assembly: Debuggable] // 0x003DC78C-0x003DC9B8
[assembly: Guid] // 0x003DC78C-0x003DC9B8
[assembly: InternalsVisibleTo] // 0x003DC78C-0x003DC9B8
[assembly: InternalsVisibleTo] // 0x003DC78C-0x003DC9B8
[assembly: RuntimeCompatibility] // 0x003DC78C-0x003DC9B8
[assembly: UnityAPICompatibilityVersion] // 0x003DC78C-0x003DC9B8

// Image 38: Vuforia.UnityExtensions.dll - Assembly: Vuforia.UnityExtensions, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 3161-3517
[assembly: CompilationRelaxations] // 0x003DECBC-0x003DEE50
[assembly: Debuggable] // 0x003DECBC-0x003DEE50
[assembly: InternalsVisibleTo] // 0x003DECBC-0x003DEE50
[assembly: InternalsVisibleTo] // 0x003DECBC-0x003DEE50
[assembly: InternalsVisibleTo] // 0x003DECBC-0x003DEE50
[assembly: InternalsVisibleTo] // 0x003DECBC-0x003DEE50
[assembly: InternalsVisibleTo] // 0x003DECBC-0x003DEE50
[assembly: InternalsVisibleTo] // 0x003DECBC-0x003DEE50
[assembly: InternalsVisibleTo] // 0x003DECBC-0x003DEE50
[assembly: InternalsVisibleTo] // 0x003DECBC-0x003DEE50
[assembly: RuntimeCompatibility] // 0x003DECBC-0x003DEE50

// Image 39: Facebook.Unity.Android.dll - Assembly: Facebook.Unity.Android, Version=7.17.2.0, Culture=neutral, PublicKeyToken=null - Types 3518-3519
[assembly: CompilationRelaxations] // 0x003DEE60-0x003DEEC4
[assembly: Debuggable] // 0x003DEE60-0x003DEEC4
[assembly: RuntimeCompatibility] // 0x003DEE60-0x003DEEC4

// Image 40: Facebook.Unity.IOS.dll - Assembly: Facebook.Unity.IOS, Version=7.17.2.0, Culture=neutral, PublicKeyToken=null - Types 3520-3521
[assembly: CompilationRelaxations] // 0x003DEEC4-0x003DEF28
[assembly: Debuggable] // 0x003DEEC4-0x003DEF28
[assembly: RuntimeCompatibility] // 0x003DEEC4-0x003DEF28

// Image 41: Unity.PlayerPrefsEditor.Samples.SampleScene.dll - Assembly: Unity.PlayerPrefsEditor.Samples.SampleScene, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 3522-3523
[assembly: CompilationRelaxations] // 0x003DEF28-0x003DEF8C
[assembly: Debuggable] // 0x003DEF28-0x003DEF8C
[assembly: RuntimeCompatibility] // 0x003DEF28-0x003DEF8C

// Image 42: VuforiaScripts.dll - Assembly: VuforiaScripts, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 3524-3531
[assembly: CompilationRelaxations] // 0x003DF0A8-0x003DF10C
[assembly: Debuggable] // 0x003DF0A8-0x003DF10C
[assembly: RuntimeCompatibility] // 0x003DF0A8-0x003DF10C

// Image 43: Assembly-CSharp-firstpass.dll - Assembly: Assembly-CSharp-firstpass, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 3532-3538
[assembly: CompilationRelaxations] // 0x003DF144-0x003DF1A8
[assembly: Debuggable] // 0x003DF144-0x003DF1A8
[assembly: RuntimeCompatibility] // 0x003DF144-0x003DF1A8

// Image 44: Assembly-CSharp.dll - Assembly: Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 3539-3785
[assembly: CompilationRelaxations] // 0x003E2500-0x003E2564
[assembly: Debuggable] // 0x003E2500-0x003E2564
[assembly: RuntimeCompatibility] // 0x003E2500-0x003E2564

internal sealed class Locale // TypeDefIndex: 1
{
	// Methods
	public static string GetText(string msg); // 0x007D8DE8-0x007D8DEC
	public static string GetText(string fmt, params /* 0x0039F878-0x0039F888 */ object[] args); // 0x007D8DEC-0x007D8DF4
}

internal static class SR // TypeDefIndex: 2
{
	// Methods
	internal static string Format(string resourceFormat, object p1); // 0x006E2998-0x006E2A18
	internal static string Format(string resourceFormat, object p1, object p2); // 0x006E2A18-0x006E2AAC
}

namespace Microsoft.Win32
{
	internal interface IRegistryApi // TypeDefIndex: 3
	{
		// Methods
		RegistryKey OpenSubKey(RegistryKey rkey, string keyname, bool writtable);
		void Flush(RegistryKey rkey);
		void Close(RegistryKey rkey);
		object GetValue(RegistryKey rkey, string name, object default_value, RegistryValueOptions options);
		string[] GetSubKeyNames(RegistryKey rkey);
		string ToString(RegistryKey rkey);
		IntPtr GetHandle(RegistryKey key);
	}

	[ComVisible] // 0x00393888-0x0039389C
	public static class Registry // TypeDefIndex: 4
	{
		// Fields
		public static readonly RegistryKey ClassesRoot; // 0x00
		public static readonly RegistryKey CurrentConfig; // 0x08
		public static readonly RegistryKey CurrentUser; // 0x10
		[Obsolete] // 0x0039B7A4-0x0039B7DC
		public static readonly RegistryKey DynData; // 0x18
		public static readonly RegistryKey LocalMachine; // 0x20
		public static readonly RegistryKey PerformanceData; // 0x28
		public static readonly RegistryKey Users; // 0x30
	
		// Constructors
		static Registry(); // 0x007DDD0C-0x007DDF44
	}

	[Serializable]
	[ComVisible] // 0x0039389C-0x003938B0
	public enum RegistryHive // TypeDefIndex: 5
	{
		ClassesRoot = -2147483648,
		CurrentUser = -2147483647,
		LocalMachine = -2147483646,
		Users = -2147483645,
		PerformanceData = -2147483644,
		CurrentConfig = -2147483643,
		DynData = -2147483642
	}

	[ComVisible] // 0x003938B0-0x003938C4
	public sealed class RegistryKey : MarshalByRefObject, IDisposable // TypeDefIndex: 6
	{
		// Fields
		private object handle; // 0x18
		private SafeRegistryHandle safe_handle; // 0x20
		private object hive; // 0x28
		private readonly string qname; // 0x30
		private readonly bool isRemoteRoot; // 0x38
		private readonly bool isWritable; // 0x39
		private static readonly IRegistryApi RegistryApi; // 0x00
	
		// Properties
		public string Name { get; } // 0x007DB094-0x007DB09C 
		[ComVisible] // 0x0039FA88-0x0039FAD8
		[MonoTODO] // 0x0039FA88-0x0039FAD8
		public SafeRegistryHandle Handle { get; } // 0x007DE5CC-0x007DE708 
		internal bool IsRoot { get; } // 0x007DC138-0x007DC148 
		internal RegistryHive Hive { get; } // 0x007DC148-0x007DC1DC 
		internal object InternalHandle { get; } // 0x007DECAC-0x007DECB4 
	
		// Constructors
		static RegistryKey(); // 0x007DDF90-0x007DE04C
		internal RegistryKey(RegistryHive hiveId); // 0x007DDF44-0x007DDF90
		internal RegistryKey(RegistryHive hiveId, IntPtr keyHandle, bool remoteRoot); // 0x007DE0CC-0x007DE1B0
		internal RegistryKey(object data, string keyName, bool writable); // 0x007DA9E4-0x007DAA2C
	
		// Methods
		internal static bool IsEquals(RegistryKey a, RegistryKey b); // 0x007DE2B8-0x007DE370
		public void Dispose(); // 0x007DE370-0x007DE3E0
		public void Flush(); // 0x007DE4E8-0x007DE5CC
		public void Close(); // 0x007DE3E0-0x007DE4E8
		public RegistryKey OpenSubKey(string name); // 0x007DE7C8-0x007DE7D0
		public RegistryKey OpenSubKey(string name, bool writable); // 0x007DE7D0-0x007DE920
		public object GetValue(string name); // 0x007DE9C4-0x007DE9CC
		public object GetValue(string name, object defaultValue); // 0x007DE9CC-0x007DEAD4
		public string[] GetSubKeyNames(); // 0x007DEAD4-0x007DEBC0
		public override string ToString(); // 0x007DEBC0-0x007DECAC
		private void AssertKeyStillValid(); // 0x007DE708-0x007DE794
		private void AssertKeyNameLength(string name); // 0x007DE920-0x007DE9C4
		internal static string DecodeString(byte[] data); // 0x007DECB4-0x007DED84
		internal static IOException CreateMarkedForDeletionException(); // 0x007DED84-0x007DEDF8
		private static string GetHiveName(RegistryHive hive); // 0x007DE1B0-0x007DE2B8
	}

	[ComVisible] // 0x003938C4-0x003938D8
	public enum RegistryValueKind // TypeDefIndex: 7
	{
		None = -1,
		Unknown = 0,
		String = 1,
		ExpandString = 2,
		Binary = 3,
		DWord = 4,
		MultiString = 7,
		QWord = 11
	}

	[Flags] // 0x003938D8-0x003938E8
	public enum RegistryValueOptions // TypeDefIndex: 8
	{
		None = 0,
		DoNotExpandEnvironmentNames = 1
	}

	internal class ExpandString // TypeDefIndex: 9
	{
		// Fields
		private string value; // 0x10
	
		// Constructors
		public ExpandString(string s); // 0x007D8DF4-0x007D8E20
	
		// Methods
		public override string ToString(); // 0x007D8E20-0x007D8E28
		public string Expand(); // 0x007D8E28-0x007D9058
	}

	internal class RegistryKeyComparer : IEqualityComparer // TypeDefIndex: 10
	{
		// Constructors
		public RegistryKeyComparer(); // 0x007D914C-0x007D9154
	
		// Methods
		public new bool Equals(object x, object y); // 0x007DEDF8-0x007DEF34
		public int GetHashCode(object obj); // 0x007DEF34-0x007DF048
	}

	internal class KeyHandler // TypeDefIndex: 11
	{
		// Fields
		private static Hashtable key_to_handler; // 0x00
		private static Hashtable dir_to_handler; // 0x08
		public string Dir; // 0x10
		private string ActualDir; // 0x18
		public bool IsVolatile; // 0x20
		private Hashtable values; // 0x28
		private string file; // 0x30
		private bool dirty; // 0x38
		private static string user_store; // 0x10
		private static string machine_store; // 0x18
	
		// Properties
		public bool IsMarkedForDeletion { get; } // 0x007DC854-0x007DC8F0 
		private static string UserStore { get; } // 0x007DB7F4-0x007DB900 
		private static string MachineStore { get; } // 0x007DB900-0x007DBAD4 
	
		// Constructors
		static KeyHandler(); // 0x007D9058-0x007D914C
		private KeyHandler(RegistryKey rkey, string basedir); // 0x007D93C0-0x007D93C8
		private KeyHandler(RegistryKey rkey, string basedir, bool is_volatile); // 0x007D93C8-0x007D95A0
	
		// Methods
		public void Load(); // 0x007D9670-0x007D9D34
		private void LoadKey(SecurityElement se); // 0x007D9D34-0x007DA5EC
		public RegistryKey Ensure(RegistryKey rkey, string extra, bool writable, bool is_volatile); // 0x007DA5EC-0x007DA92C
		public RegistryKey Probe(RegistryKey rkey, string extra, bool writable); // 0x007DAA2C-0x007DAE44
		private static string CombineName(RegistryKey rkey, string extra); // 0x007DA92C-0x007DA9E4
		private static long GetSystemBootTime(); // 0x007DB09C-0x007DB36C
		private static long GetRegisteredBootTime(string path); // 0x007DB36C-0x007DB5F8
		private static void SaveRegisteredBootTime(string path, long btime); // 0x007DB5F8-0x007DB7F4
		private static void CleanVolatileKeys(); // 0x007D9154-0x007D93C0
		public static bool VolatileKeyExists(string dir); // 0x007DAE44-0x007DB094
		public static string GetVolatileDir(string dir); // 0x007D95A0-0x007D9670
		public static KeyHandler Lookup(RegistryKey rkey, bool createNonExisting); // 0x007DBC44-0x007DC138
		private static string GetRootFromDir(string dir); // 0x007DBAD4-0x007DBC44
		public static void Drop(RegistryKey rkey); // 0x007DC1DC-0x007DC6B8
		public object GetValue(string name, RegistryValueOptions options); // 0x007DC6B8-0x007DC854
		public string[] GetSubKeyNames(); // 0x007DC8F0-0x007DCE2C
		public void Flush(); // 0x007DCE2C-0x007DCF3C
		public bool ValueExists(string name); // 0x007DDB80-0x007DDC98
		~KeyHandler(); // 0x007DDC98-0x007DDD0C
		private void Save(); // 0x007DCF3C-0x007DDB80
	}

	internal class UnixRegistryApi : IRegistryApi // TypeDefIndex: 12
	{
		// Constructors
		public UnixRegistryApi(); // 0x007DE0C4-0x007DE0CC
	
		// Methods
		private static string ToUnix(string keyname); // 0x007DF2C0-0x007DF334
		private static bool IsWellKnownKey(string parentKeyName, string keyname); // 0x007DF334-0x007DF46C
		public RegistryKey OpenSubKey(RegistryKey rkey, string keyname, bool writable); // 0x007DF46C-0x007DF550
		public void Flush(RegistryKey rkey); // 0x007DF55C-0x007DF5D8
		public void Close(RegistryKey rkey); // 0x007DF5D8-0x007DF63C
		public object GetValue(RegistryKey rkey, string name, object default_value, RegistryValueOptions options); // 0x007DF63C-0x007DF700
		public string[] GetSubKeyNames(RegistryKey rkey); // 0x007DF700-0x007DF77C
		public string ToString(RegistryKey rkey); // 0x007DF77C-0x007DF7A8
		private RegistryKey CreateSubKey(RegistryKey rkey, string keyname, bool writable); // 0x007DF550-0x007DF55C
		private RegistryKey CreateSubKey(RegistryKey rkey, string keyname, bool writable, bool is_volatile); // 0x007DF7A8-0x007DF8E8
		public IntPtr GetHandle(RegistryKey key); // 0x007DF8E8-0x007DF950
	}

	internal class Win32RegistryApi : IRegistryApi // TypeDefIndex: 13
	{
		// Fields
		private readonly int NativeBytesPerCharacter; // 0x10
	
		// Constructors
		public Win32RegistryApi(); // 0x007DE04C-0x007DE0C4
	
		// Methods
		private static extern int RegCloseKey(IntPtr keyHandle); // 0x007DF9E0-0x007DFA7C
		private static extern int RegFlushKey(IntPtr keyHandle); // 0x007DFA7C-0x007DFB18
		private static extern int RegOpenKeyEx(IntPtr keyBase, string keyName, IntPtr reserved, int access, out IntPtr keyHandle); // 0x007DFB18-0x007DFBE8
		internal static unsafe extern int RegEnumKeyEx(IntPtr keyHandle, int dwIndex, char* lpName, ref int lpcbName, int[] lpReserved, out StringBuilder lpClass, int[] lpcbClass, long[] lpftLastWriteTime); // 0x007DFBE8-0x007DFD10
		private static extern int RegQueryValueEx(IntPtr keyBase, string valueName, IntPtr reserved, ref RegistryValueKind type, IntPtr zero, ref int dataSize); // 0x007DFD10-0x007DFDF4
		private static extern int RegQueryValueEx(IntPtr keyBase, string valueName, IntPtr reserved, ref RegistryValueKind type, out byte[] data, ref int dataSize); // 0x007DFDF4-0x007DFF70
		private static extern int RegQueryValueEx(IntPtr keyBase, string valueName, IntPtr reserved, ref RegistryValueKind type, ref int data, ref int dataSize); // 0x007DFF70-0x007E0054
		private static extern int RegQueryValueEx(IntPtr keyBase, string valueName, IntPtr reserved, ref RegistryValueKind type, ref long data, ref int dataSize); // 0x007E0054-0x007E0138
		internal static extern int RegQueryInfoKey(IntPtr hKey, out StringBuilder lpClass, int[] lpcbClass, IntPtr lpReserved_MustBeZero, ref int lpcSubKeys, int[] lpcbMaxSubKeyLen, int[] lpcbMaxClassLen, ref int lpcValues, int[] lpcbMaxValueNameLen, int[] lpcbMaxValueLen, int[] lpcbSecurityDescriptor, int[] lpftLastWriteTime); // 0x007E0138-0x007E02A0
		public IntPtr GetHandle(RegistryKey key); // 0x007E02A0-0x007E0304
		private static bool IsHandleValid(RegistryKey key); // 0x007E0304-0x007E0334
		public object GetValue(RegistryKey rkey, string name, object defaultValue, RegistryValueOptions options); // 0x007E0334-0x007E06C8
		private int GetBinaryValue(RegistryKey rkey, string name, RegistryValueKind type, out byte[] data, int size); // 0x007E0844-0x007E08E0
		public int SubKeyCount(RegistryKey rkey); // 0x007E08E0-0x007E096C
		public RegistryKey OpenSubKey(RegistryKey rkey, string keyName, bool writable); // 0x007E096C-0x007E0A84
		public void Flush(RegistryKey rkey); // 0x007E0AF4-0x007E0B38
		public void Close(RegistryKey rkey); // 0x007E0B38-0x007E0B98
		public string[] GetSubKeyNames(RegistryKey rkey); // 0x007E0B98-0x007E0D3C
		private void GenerateException(int errorCode); // 0x007E06C8-0x007E0844
		public string ToString(RegistryKey rkey); // 0x007E0D3C-0x007E0D68
		internal static string CombineName(RegistryKey rkey, string localName); // 0x007E0A84-0x007E0AF4
	}

	internal static class Win32Native // TypeDefIndex: 14
	{
		// Nested types
		internal class WIN32_FIND_DATA // TypeDefIndex: 15
		{
			// Fields
			internal int dwFileAttributes; // 0x10
			internal string cFileName; // 0x18
	
			// Constructors
			public WIN32_FIND_DATA(); // 0x007DF9D8-0x007DF9E0
		}
	
		// Methods
		public static string GetMessage(int hr); // 0x007DF950-0x007DF9CC
		public static int MakeHRFromErrorCode(int errorCode); // 0x007DF9CC-0x007DF9D8
	}
}

namespace Microsoft.Win32.SafeHandles
{
	public sealed class SafeFileHandle : SafeHandleZeroOrMinusOneIsInvalid // TypeDefIndex: 16
	{
		// Constructors
		public SafeFileHandle(IntPtr preexistingHandle, bool ownsHandle); // 0x007DF048-0x007DF07C
	
		// Methods
		protected override bool ReleaseHandle(); // 0x007DF0D8-0x007DF164
	}

	internal sealed class SafeFindHandle : SafeHandleZeroOrMinusOneIsInvalid // TypeDefIndex: 17
	{
		// Constructors
		internal SafeFindHandle(IntPtr preexistingHandle); // 0x007DF164-0x007DF198
	
		// Methods
		protected override bool ReleaseHandle(); // 0x007DF198-0x007DF204
	}

	public sealed class SafeRegistryHandle : SafeHandleZeroOrMinusOneIsInvalid // TypeDefIndex: 18
	{
		// Constructors
		public SafeRegistryHandle(IntPtr preexistingHandle, bool ownsHandle); // 0x007DE794-0x007DE7C8
	
		// Methods
		protected override bool ReleaseHandle(); // 0x007DF264-0x007DF26C
	}

	public sealed class SafeWaitHandle : SafeHandleZeroOrMinusOneIsInvalid // TypeDefIndex: 19
	{
		// Constructors
		[ReliabilityContract] // 0x0039C8F4-0x0039C90C
		public SafeWaitHandle(IntPtr existingHandle, bool ownsHandle); // 0x007DF26C-0x007DF2A0
	
		// Methods
		protected override bool ReleaseHandle(); // 0x007DF2A0-0x007DF2C0
	}

	public abstract class SafeHandleZeroOrMinusOneIsInvalid : SafeHandle // TypeDefIndex: 20
	{
		// Properties
		public override bool IsInvalid { get; } // 0x007DF204-0x007DF264 
	
		// Constructors
		[ReliabilityContract] // 0x0039C90C-0x0039C924
		protected SafeHandleZeroOrMinusOneIsInvalid(bool ownsHandle); // 0x007DF07C-0x007DF0D8
	}
}

namespace Mono
{
	public static class Runtime // TypeDefIndex: 21
	{
		// Methods
		private static void mono_runtime_install_handlers(); // 0x007F2700-0x007F2704
		public static void InstallSignalHandlers(); // 0x007F2704-0x007F2708
		private static void mono_runtime_cleanup_handlers(); // 0x007F2708-0x007F2760
		public static void RemoveSignalHandlers(); // 0x007F2760-0x007F2764
		public static string GetDisplayName(); // 0x007F2764-0x007F2768
		private static string GetNativeStackTrace(Exception exception); // 0x007F2768-0x007F276C
		public static bool SetGCAllowSynchronousMajor(bool flag); // 0x007F276C-0x007F2774
	}

	internal struct RuntimeClassHandle // TypeDefIndex: 22
	{
		// Fields
		private unsafe RuntimeStructs.MonoClass* value; // 0x00
	
		// Properties
		internal unsafe RuntimeStructs.MonoClass* Value { get; } // 0x007F27D4-0x007F28D8 
	
		// Constructors
		internal unsafe RuntimeClassHandle(RuntimeStructs.MonoClass* value); // 0x007F2774-0x007F27A8
		internal unsafe RuntimeClassHandle(IntPtr ptr); // 0x007F27A8-0x007F27D4
	
		// Methods
		public override bool Equals(object obj); // 0x007F28D8-0x007F28E0
		public override int GetHashCode(); // 0x007F28E0-0x007F2914
		internal static unsafe IntPtr GetTypeFromClass(RuntimeStructs.MonoClass* klass); // 0x007F2914-0x007F2950
		internal RuntimeTypeHandle GetTypeHandle(); // 0x007F2950-0x007F2990
	}

	internal struct RuntimeRemoteClassHandle // TypeDefIndex: 23
	{
		// Fields
		private unsafe RuntimeStructs.RemoteClass* value; // 0x00
	
		// Properties
		internal RuntimeClassHandle ProxyClass { get; } // 0x007F32E0-0x007F3338 
	}

	internal struct RuntimeGenericParamInfoHandle // TypeDefIndex: 24
	{
		// Fields
		private unsafe RuntimeStructs.GenericParamInfo* value; // 0x00
	
		// Properties
		internal Type[] Constraints { get; } // 0x007F2DE0-0x007F2E14 
		internal GenericParameterAttributes Attributes { get; } // 0x007F2E14-0x007F2E90 
	
		// Constructors
		internal unsafe RuntimeGenericParamInfoHandle(IntPtr ptr); // 0x007F2C3C-0x007F2DE0
	
		// Methods
		private Type[] GetConstraints(); // 0x007F2E90-0x007F2E98
		private int GetConstraintsCount(); // 0x007F2E98-0x007F2EA0
	}

	internal struct RuntimeEventHandle // TypeDefIndex: 25
	{
		// Fields
		private IntPtr value; // 0x00
	
		// Properties
		public IntPtr Value { get; } // 0x007F29A0-0x007F2AAC 
	
		// Constructors
		internal RuntimeEventHandle(IntPtr v); // 0x007F2990-0x007F29A0
	
		// Methods
		public override bool Equals(object obj); // 0x007F2AAC-0x007F2AB4
		public override int GetHashCode(); // 0x007F2AB4-0x007F2AC0
	}

	internal struct RuntimePropertyHandle // TypeDefIndex: 26
	{
		// Fields
		private IntPtr value; // 0x00
	
		// Properties
		public IntPtr Value { get; } // 0x007F3194-0x007F32A0 
	
		// Constructors
		internal RuntimePropertyHandle(IntPtr v); // 0x007F3184-0x007F3194
	
		// Methods
		public override bool Equals(object obj); // 0x007F32A0-0x007F32A8
		public override int GetHashCode(); // 0x007F32A8-0x007F32E0
	}

	internal struct RuntimeGPtrArrayHandle // TypeDefIndex: 27
	{
		// Fields
		private unsafe RuntimeStructs.GPtrArray* value; // 0x00
	
		// Properties
		internal int Length { get; } // 0x007F2AEC-0x007F2BD4 
		internal IntPtr this[int i] { get => default; } // 0x007F2BD4-0x007F2BDC 
	
		// Constructors
		internal unsafe RuntimeGPtrArrayHandle(IntPtr ptr); // 0x007F2AC0-0x007F2AEC
	
		// Methods
		internal IntPtr Lookup(int i); // 0x007F2BDC-0x007F2BE4
		private static unsafe void GPtrArrayFree(RuntimeStructs.GPtrArray* value); // 0x007F2BE4-0x007F2BE8
		internal static void DestroyAndFree(ref RuntimeGPtrArrayHandle h); // 0x007F2BE8-0x007F2C3C
	}

	internal static class RuntimeMarshal // TypeDefIndex: 28
	{
		// Methods
		internal static string PtrToUtf8String(IntPtr ptr); // 0x007F2EA0-0x007F2F70
		internal static SafeStringMarshal MarshalString(string str); // 0x007F2F70-0x007F3008
		private static int DecodeBlobSize(IntPtr in_ptr, out IntPtr out_ptr); // 0x007F3008-0x007F3088
		internal static byte[] DecodeBlobArray(IntPtr ptr); // 0x007F3088-0x007F3144
		internal static int AsciHexDigitValue(int c); // 0x007F3144-0x007F3174
		internal static void FreeAssemblyName(ref MonoAssemblyName name, bool freeStruct); // 0x007F3174-0x007F3184
	}

	internal static class RuntimeStructs // TypeDefIndex: 29
	{
		// Nested types
		internal struct RemoteClass // TypeDefIndex: 30
		{
			// Fields
			internal IntPtr default_vtable; // 0x00
			internal IntPtr xdomain_vtable; // 0x08
			internal unsafe MonoClass* proxy_class; // 0x10
			internal IntPtr proxy_class_name; // 0x18
			internal uint interface_count; // 0x20
		}
	
		internal struct MonoClass // TypeDefIndex: 31
		{
		}
	
		internal struct GenericParamInfo // TypeDefIndex: 32
		{
			// Fields
			internal unsafe MonoClass* pklass; // 0x00
			internal IntPtr name; // 0x08
			internal ushort flags; // 0x10
			internal uint token; // 0x14
			internal unsafe MonoClass** constraints; // 0x18
		}
	
		internal struct GPtrArray // TypeDefIndex: 33
		{
			// Fields
			internal unsafe IntPtr* data; // 0x00
			internal int len; // 0x08
		}
	
		private struct HandleStackMark // TypeDefIndex: 34
		{
			// Fields
			private int size; // 0x00
			private int interior_size; // 0x04
			private IntPtr chunk; // 0x08
		}
	
		private struct MonoError // TypeDefIndex: 35
		{
			// Fields
			private ushort error_code; // 0x00
			private ushort hidden_0; // 0x02
			private IntPtr hidden_1; // 0x08
			private IntPtr hidden_2; // 0x10
			private IntPtr hidden_3; // 0x18
			private IntPtr hidden_4; // 0x20
			private IntPtr hidden_5; // 0x28
			private IntPtr hidden_6; // 0x30
			private IntPtr hidden_7; // 0x38
			private IntPtr hidden_8; // 0x40
			private IntPtr hidden_11; // 0x48
			private IntPtr hidden_12; // 0x50
			private IntPtr hidden_13; // 0x58
			private IntPtr hidden_14; // 0x60
			private IntPtr hidden_15; // 0x68
			private IntPtr hidden_16; // 0x70
			private IntPtr hidden_17; // 0x78
			private IntPtr hidden_18; // 0x80
		}
	}

	internal struct MonoAssemblyName // TypeDefIndex: 36
	{
		// Fields
		internal IntPtr name; // 0x00
		internal IntPtr culture; // 0x08
		internal IntPtr hash_value; // 0x10
		internal IntPtr public_key; // 0x18
		internal unsafe fixed /* 0x0039B7DC-0x0039B844 */ byte public_key_token[0]; // 0x20
		internal uint hash_alg; // 0x34
		internal uint hash_len; // 0x38
		internal uint flags; // 0x3C
		internal ushort major; // 0x40
		internal ushort minor; // 0x42
		internal ushort build; // 0x44
		internal ushort revision; // 0x46
		internal ushort arch; // 0x48
	
		// Nested types
		[CompilerGenerated] // 0x00393920-0x00393958
		[UnsafeValueType] // 0x00393920-0x00393958
		public struct <public_key_token>e__FixedBuffer // TypeDefIndex: 37
		{
			// Fields
			public byte FixedElementField; // 0x00
		}
	}

	internal struct SafeGPtrArrayHandle : IDisposable // TypeDefIndex: 38
	{
		// Fields
		private RuntimeGPtrArrayHandle handle; // 0x00
	
		// Properties
		internal int Length { get; } // 0x007F33E0-0x007F3410 
		internal IntPtr this[int i] { get => default; } // 0x007F3410-0x007F34A8 
	
		// Constructors
		internal SafeGPtrArrayHandle(IntPtr ptr); // 0x007F3338-0x007F338C
	
		// Methods
		public void Dispose(); // 0x007F338C-0x007F33E0
	}

	internal struct SafeStringMarshal : IDisposable // TypeDefIndex: 39
	{
		// Fields
		private readonly string str; // 0x00
		private IntPtr marshaled_string; // 0x08
	
		// Properties
		public IntPtr Value { get; } // 0x007F3568-0x007F35D0 
	
		// Constructors
		public SafeStringMarshal(string str); // 0x007F34B0-0x007F3568
	
		// Methods
		public static IntPtr StringToUtf8(string str); // 0x007F34A8-0x007F34AC
		public static void GFree(IntPtr ptr); // 0x007F34AC-0x007F34B0
		public void Dispose(); // 0x007F35D0-0x007F35D8
	}
}

namespace Mono.Xml
{
	internal class SecurityParser : SmallXmlParser, IContentHandler // TypeDefIndex: 40
	{
		// Fields
		private SecurityElement root; // 0x68
		private SecurityElement current; // 0x70
		private Stack stack; // 0x78
	
		// Constructors
		public SecurityParser(); // 0x006CC0CC-0x006CC134
	
		// Methods
		public void LoadXml(string xml); // 0x006CC134-0x006CC1D0
		public SecurityElement ToXml(); // 0x006CC1D0-0x006CC1D8
		public void OnStartParsing(SmallXmlParser parser); // 0x006E0460-0x006E0464
		public void OnProcessingInstruction(string name, string text); // 0x006E0464-0x006E0468
		public void OnIgnorableWhitespace(string s); // 0x006E0468-0x006E046C
		public void OnStartElement(string name, IAttrList attrs); // 0x006E046C-0x006E07FC
		public void OnEndElement(string name); // 0x006E07FC-0x006E08D0
		public void OnChars(string ch); // 0x006E08D0-0x006E0968
		public void OnEndParsing(SmallXmlParser parser); // 0x006E0968-0x006E096C
	}

	internal class SmallXmlParser // TypeDefIndex: 41
	{
		// Fields
		private IContentHandler handler; // 0x10
		private TextReader reader; // 0x18
		private Stack elementNames; // 0x20
		private Stack xmlSpaces; // 0x28
		private string xmlSpace; // 0x30
		private StringBuilder buffer; // 0x38
		private char[] nameBuffer; // 0x40
		private bool isWhitespace; // 0x48
		private AttrListImpl attributes; // 0x50
		private int line; // 0x58
		private int column; // 0x5C
		private bool resetColumn; // 0x60
	
		// Nested types
		public interface IContentHandler // TypeDefIndex: 42
		{
			// Methods
			void OnStartParsing(SmallXmlParser parser);
			void OnEndParsing(SmallXmlParser parser);
			void OnStartElement(string name, IAttrList attrs);
			void OnEndElement(string name);
			void OnProcessingInstruction(string name, string text);
			void OnChars(string text);
			void OnIgnorableWhitespace(string text);
		}
	
		public interface IAttrList // TypeDefIndex: 43
		{
			// Properties
			int Length { get; }
			string[] Names { get; }
			string[] Values { get; }
	
			// Methods
			string GetName(int i);
			string GetValue(int i);
			string GetValue(string name);
		}
	
		private class AttrListImpl : IAttrList // TypeDefIndex: 44
		{
			// Fields
			private List<string> attrNames; // 0x10
			private List<string> attrValues; // 0x18
	
			// Properties
			public int Length { get; } // 0x006E26AC-0x006E270C 
			public string[] Names { get; } // 0x006E28D8-0x006E2938 
			public string[] Values { get; } // 0x006E2938-0x006E2998 
	
			// Constructors
			public AttrListImpl(); // 0x006E096C-0x006E09FC
	
			// Methods
			public string GetName(int i); // 0x006E270C-0x006E277C
			public string GetValue(int i); // 0x006E277C-0x006E27EC
			public string GetValue(string name); // 0x006E27EC-0x006E28D8
			internal void Clear(); // 0x006E2050-0x006E20D4
			internal void Add(string name, string value); // 0x006E2610-0x006E26AC
		}
	
		// Constructors
		public SmallXmlParser(); // 0x006E0170-0x006E0258
	
		// Methods
		private Exception Error(string msg); // 0x006E09FC-0x006E0A78
		private Exception UnexpectedEndError(); // 0x006E0B40-0x006E0C2C
		private bool IsNameChar(char c, bool start); // 0x006E0C2C-0x006E0D44
		private bool IsWhitespace(int c); // 0x006E0D44-0x006E0D74
		public void SkipWhitespaces(); // 0x006E0D74-0x006E0D7C
		private void HandleWhitespaces(); // 0x006E0E54-0x006E0F44
		public void SkipWhitespaces(bool expected); // 0x006E0D7C-0x006E0E54
		private int Peek(); // 0x006E0FC0-0x006E0FF4
		private int Read(); // 0x006E0F44-0x006E0FC0
		public void Expect(int c); // 0x006E0FF4-0x006E10E0
		private string ReadUntil(char until, bool handleReferences); // 0x006E10E0-0x006E1218
		public string ReadName(); // 0x006E13E4-0x006E15C8
		public void Parse(TextReader input, IContentHandler handler); // 0x006E0258-0x006E0460
		private void Cleanup(); // 0x006E1FA8-0x006E2050
		public void ReadContent(); // 0x006E15C8-0x006E1E30
		private void HandleBufferedContent(); // 0x006E1E30-0x006E1FA8
		private void ReadCharacters(); // 0x006E2450-0x006E24F4
		private void ReadReference(); // 0x006E1218-0x006E13E4
		private int ReadCharacterReference(); // 0x006E24F4-0x006E2610
		private void ReadAttribute(AttrListImpl a); // 0x006E22D0-0x006E2450
		private void ReadCDATASection(); // 0x006E20D4-0x006E221C
		private void ReadComment(); // 0x006E221C-0x006E22D0
	}

	internal class SmallXmlParserException : SystemException // TypeDefIndex: 45
	{
		// Fields
		private int line; // 0x88
		private int column; // 0x8C
	
		// Constructors
		public SmallXmlParserException(string msg, int line, int column); // 0x006E0A78-0x006E0B40
	}
}

namespace Mono.Globalization.Unicode
{
	internal class CodePointIndexer // TypeDefIndex: 46
	{
		// Fields
		private readonly TableRange[] ranges; // 0x10
		public readonly int TotalCount; // 0x18
		private int defaultIndex; // 0x1C
		private int defaultCP; // 0x20
	
		// Nested types
		[Serializable]
		internal struct TableRange // TypeDefIndex: 47
		{
			// Fields
			public readonly int Start; // 0x00
			public readonly int End; // 0x04
			public readonly int Count; // 0x08
			public readonly int IndexStart; // 0x0C
			public readonly int IndexEnd; // 0x10
	
			// Constructors
			public TableRange(int start, int end, int indexStart); // 0x007E1138-0x007E1150
		}
	
		// Constructors
		public CodePointIndexer(int[] starts, int[] ends, int defaultIndex, int defaultCP); // 0x007E0D68-0x007E0FE0
	
		// Methods
		public int ToIndex(int cp); // 0x007E0FE0-0x007E1138
	}

	internal class TailoringInfo // TypeDefIndex: 48
	{
		// Fields
		public readonly int LCID; // 0x10
		public readonly int TailoringIndex; // 0x14
		public readonly int TailoringCount; // 0x18
		public readonly bool FrenchSort; // 0x1C
	
		// Constructors
		public TailoringInfo(int lcid, int tailoringIndex, int tailoringCount, bool frenchSort); // 0x007E3AD8-0x007E3B2C
	}

	internal class Contraction // TypeDefIndex: 49
	{
		// Fields
		public int Index; // 0x10
		public readonly char[] Source; // 0x18
		public readonly string Replacement; // 0x20
		public readonly byte[] SortKey; // 0x28
	
		// Constructors
		public Contraction(int index, char[] source, string replacement, byte[] sortkey); // 0x007E1150-0x007E11A0
	}

	internal class ContractionComparer : IComparer<Contraction> // TypeDefIndex: 50
	{
		// Fields
		public static readonly ContractionComparer Instance; // 0x00
	
		// Constructors
		public ContractionComparer(); // 0x007E131C-0x007E1324
		static ContractionComparer(); // 0x007E1324-0x007E1388
	
		// Methods
		public int Compare(Contraction c1, Contraction c2); // 0x007E11A0-0x007E131C
	}

	internal class Level2Map // TypeDefIndex: 51
	{
		// Fields
		public byte Source; // 0x10
		public byte Replace; // 0x11
	
		// Constructors
		public Level2Map(byte source, byte replace); // 0x007E1388-0x007E13C4
	}

	internal class MSCompatUnicodeTable // TypeDefIndex: 52
	{
		// Fields
		public static int MaxExpansionLength; // 0x00
		private static readonly unsafe byte* ignorableFlags; // 0x08
		private static readonly unsafe byte* categories; // 0x10
		private static readonly unsafe byte* level1; // 0x18
		private static readonly unsafe byte* level2; // 0x20
		private static readonly unsafe byte* level3; // 0x28
		private static unsafe byte* cjkCHScategory; // 0x30
		private static unsafe byte* cjkCHTcategory; // 0x38
		private static unsafe byte* cjkJAcategory; // 0x40
		private static unsafe byte* cjkKOcategory; // 0x48
		private static unsafe byte* cjkCHSlv1; // 0x50
		private static unsafe byte* cjkCHTlv1; // 0x58
		private static unsafe byte* cjkJAlv1; // 0x60
		private static unsafe byte* cjkKOlv1; // 0x68
		private static unsafe byte* cjkKOlv2; // 0x70
		private static readonly char[] tailoringArr; // 0x78
		private static readonly TailoringInfo[] tailoringInfos; // 0x80
		private static object forLock; // 0x88
		public static readonly bool isReady; // 0x90
	
		// Properties
		public static bool IsReady { get; } // 0x007E3620-0x007E3688 
	
		// Nested types
		[Serializable]
		[CompilerGenerated] // 0x00393990-0x003939A0
		private sealed class <>c // TypeDefIndex: 53
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static Comparison<Level2Map> <>9__17_0; // 0x08
	
			// Constructors
			static <>c(); // 0x007E412C-0x007E4190
			public <>c(); // 0x007E4190-0x007E4198
	
			// Methods
			internal int <BuildTailoringTables>b__17_0(Level2Map a, Level2Map b); // 0x007E4198-0x007E41DC
		}
	
		// Constructors
		static MSCompatUnicodeTable(); // 0x007E3748-0x007E3AD8
	
		// Methods
		public static TailoringInfo GetTailoringInfo(int lcid); // 0x007E13C4-0x007E1530
		public static void BuildTailoringTables(CultureInfo culture, TailoringInfo t, ref Contraction[] contractions, ref Level2Map[] diacriticals); // 0x007E1530-0x007E1B8C
		private static unsafe void SetCJKReferences(string name, ref CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref CodePointIndexer lv2Indexer, ref byte* lv2Table); // 0x007E1B8C-0x007E1E1C
		public static byte Category(int cp); // 0x007E1E1C-0x007E1EDC
		public static byte Level1(int cp); // 0x007E1EDC-0x007E1F9C
		public static byte Level2(int cp); // 0x007E1F9C-0x007E305C
		public static byte Level3(int cp); // 0x007E305C-0x007E311C
		public static bool IsIgnorable(int cp, byte flag); // 0x007E311C-0x007E3250
		public static bool IsIgnorableNonSpacing(int cp); // 0x007E3250-0x007E32B8
		public static int ToKanaTypeInsensitive(int i); // 0x007E32B8-0x007E32D8
		public static int ToWidthCompat(int i); // 0x007E32D8-0x007E3470
		public static bool HasSpecialWeight(char c); // 0x007E3470-0x007E3504
		public static bool IsHalfWidthKana(char c); // 0x007E3504-0x007E3518
		public static bool IsHiragana(char c); // 0x007E3518-0x007E3530
		public static bool IsJapaneseSmallLetter(char c); // 0x007E3530-0x007E3620
		private static IntPtr GetResource(string name); // 0x007E3688-0x007E3718
		private static unsafe uint UInt32FromBytePtr(byte* raw, uint idx); // 0x007E3718-0x007E3748
		public static unsafe void FillCJK(string culture, ref CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref CodePointIndexer lv2Indexer, ref byte* lv2Table); // 0x007E3B2C-0x007E3C8C
		private static unsafe void FillCJKCore(string culture, ref CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref CodePointIndexer cjkLv2Indexer, ref byte* lv2Table); // 0x007E3C8C-0x007E412C
	}

	internal class MSCompatUnicodeTableUtil // TypeDefIndex: 54
	{
		// Fields
		public static readonly CodePointIndexer Ignorable; // 0x00
		public static readonly CodePointIndexer Category; // 0x08
		public static readonly CodePointIndexer Level1; // 0x10
		public static readonly CodePointIndexer Level2; // 0x18
		public static readonly CodePointIndexer Level3; // 0x20
		public static readonly CodePointIndexer CjkCHS; // 0x28
		public static readonly CodePointIndexer Cjk; // 0x30
	
		// Constructors
		static MSCompatUnicodeTableUtil(); // 0x007E41DC-0x007E45A8
	}

	internal class NormalizationTableUtil // TypeDefIndex: 55
	{
		// Fields
		public static readonly CodePointIndexer Prop; // 0x00
		public static readonly CodePointIndexer Map; // 0x08
		public static readonly CodePointIndexer Combining; // 0x10
		public static readonly CodePointIndexer Composite; // 0x18
		public static readonly CodePointIndexer Helper; // 0x20
	
		// Constructors
		static NormalizationTableUtil(); // 0x007E45A8-0x007E4868
	
		// Methods
		public static int PropIdx(int cp); // 0x007E4868-0x007E48E8
		public static int MapIdx(int cp); // 0x007E48E8-0x007E4968
	}

	internal class SimpleCollator // TypeDefIndex: 56
	{
		// Fields
		private static bool QuickCheckDisabled; // 0x00
		private static SimpleCollator invariant; // 0x08
		private readonly TextInfo textInfo; // 0x10
		private readonly CodePointIndexer cjkIndexer; // 0x18
		private readonly Contraction[] contractions; // 0x20
		private readonly Level2Map[] level2Maps; // 0x28
		private readonly byte[] unsafeFlags; // 0x30
		private readonly unsafe byte* cjkCatTable; // 0x38
		private readonly unsafe byte* cjkLv1Table; // 0x40
		private readonly unsafe byte* cjkLv2Table; // 0x48
		private readonly CodePointIndexer cjkLv2Indexer; // 0x50
		private readonly int lcid; // 0x58
		private readonly bool frenchSort; // 0x5C
	
		// Nested types
		internal struct Context // TypeDefIndex: 57
		{
			// Fields
			public readonly CompareOptions Option; // 0x00
			public readonly unsafe byte* NeverMatchFlags; // 0x08
			public readonly unsafe byte* AlwaysMatchFlags; // 0x10
			public unsafe byte* Buffer1; // 0x18
			public unsafe byte* Buffer2; // 0x20
			public int PrevCode; // 0x28
			public unsafe byte* PrevSortKey; // 0x30
	
			// Constructors
			public unsafe Context(CompareOptions opt, byte* alwaysMatchFlags, byte* neverMatchFlags, byte* buffer1, byte* buffer2, byte* prev1); // 0x007EB194-0x007EB270
		}
	
		private struct PreviousInfo // TypeDefIndex: 58
		{
			// Fields
			public int Code; // 0x00
			public unsafe byte* SortKey; // 0x08
	
			// Constructors
			public unsafe PreviousInfo(bool dummy); // 0x007EB270-0x007EB280
		}
	
		private struct Escape // TypeDefIndex: 59
		{
			// Fields
			public string Source; // 0x00
			public int Index; // 0x08
			public int Start; // 0x0C
			public int End; // 0x10
			public int Optional; // 0x14
		}
	
		private enum ExtenderType // TypeDefIndex: 60
		{
			None = 0,
			Simple = 1,
			Voiced = 2,
			Conditional = 3,
			Buggy = 4
		}
	
		// Constructors
		public SimpleCollator(CultureInfo culture); // 0x007E4968-0x007E4D98
		static SimpleCollator(); // 0x007EB0C0-0x007EB194
	
		// Methods
		private unsafe void SetCJKTable(CultureInfo culture, ref CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref CodePointIndexer lv2Indexer, ref byte* lv2Table); // 0x007E4D98-0x007E4E88
		private static CultureInfo GetNeutralCulture(CultureInfo info); // 0x007E4E88-0x007E4F10
		private byte Category(int cp); // 0x007E4F10-0x007E4FC8
		private byte Level1(int cp); // 0x007E4FC8-0x007E5080
		private byte Level2(int cp, ExtenderType ext); // 0x007E5080-0x007E527C
		private static bool IsHalfKana(int cp, CompareOptions opt); // 0x007E527C-0x007E5304
		private Contraction GetContraction(string s, int start, int end); // 0x007E5304-0x007E53E4
		private Contraction GetContraction(string s, int start, int end, Contraction[] clist); // 0x007E53E4-0x007E5570
		private Contraction GetTailContraction(string s, int start, int end); // 0x007E5570-0x007E5650
		private Contraction GetTailContraction(string s, int start, int end, Contraction[] clist); // 0x007E5650-0x007E590C
		private int FilterOptions(int i, CompareOptions opt); // 0x007E590C-0x007E5A48
		private ExtenderType GetExtenderType(int i); // 0x007E5A48-0x007E5B5C
		private static byte ToDashTypeValue(ExtenderType ext, CompareOptions opt); // 0x007E5B5C-0x007E5B7C
		private int FilterExtender(int i, ExtenderType ext, CompareOptions opt); // 0x007E5B7C-0x007E5DB0
		private static bool IsIgnorable(int i, CompareOptions opt); // 0x007E5DB0-0x007E5E44
		private bool IsSafe(int i); // 0x007E5E44-0x007E5F00
		public SortKey GetSortKey(string s, CompareOptions options); // 0x007E5F00-0x007E5F58
		public SortKey GetSortKey(string s, int start, int length, CompareOptions options); // 0x007E5F58-0x007E6084
		private void GetSortKey(string s, int start, int end, SortKeyBuffer buf, CompareOptions opt); // 0x007E6254-0x007E664C
		private void FillSortKeyRaw(int i, ExtenderType ext, SortKeyBuffer buf, CompareOptions opt); // 0x007E6698-0x007E6A8C
		private void FillSurrogateSortKeyRaw(int i, SortKeyBuffer buf); // 0x007E6CBC-0x007E6D90
		internal int Compare(string s1, int idx1, int len1, string s2, int idx2, int len2, CompareOptions options); // 0x007E6E80-0x007E6F40
		private unsafe void ClearBuffer(byte* buffer, int size); // 0x007E667C-0x007E6698
		private int CompareInternal(string s1, int idx1, int len1, string s2, int idx2, int len2, out bool targetConsumed, out bool sourceConsumed, bool skipHeadingExtenders, bool immediateBreakup, ref Context ctx); // 0x007E6F40-0x007E85B0
		private int CompareFlagPair(bool b1, bool b2); // 0x007E85B0-0x007E85D0
		public bool IsPrefix(string src, string target, CompareOptions opt); // 0x007E85D0-0x007E8630
		public bool IsPrefix(string s, string target, int start, int length, CompareOptions opt); // 0x007E8630-0x007E8734
		private bool IsPrefix(string s, string target, int start, int length, bool skipHeadingExtenders, ref Context ctx); // 0x007E8734-0x007E87EC
		public bool IsSuffix(string src, string target, CompareOptions opt); // 0x007E87EC-0x007E8880
		public bool IsSuffix(string s, string target, int start, int length, CompareOptions opt); // 0x007E8880-0x007E897C
		private int QuickIndexOf(string s, string target, int start, int length, out bool testWasUnable); // 0x007E8B60-0x007E8D34
		public int IndexOf(string s, string target, int start, int length, CompareOptions opt); // 0x007E8D34-0x007E8F28
		private int IndexOfOrdinal(string s, string target, int start, int length); // 0x007E94F8-0x007E9628
		private int IndexOfOrdinal(string s, char target, int start, int length); // 0x007E9628-0x007E969C
		private unsafe int IndexOfSortKey(string s, int start, int length, byte* sortkey, char target, int ti, bool noLv4, ref Context ctx); // 0x007E969C-0x007E973C
		private unsafe int IndexOf(string s, string target, int start, int length, byte* targetSortKey, ref Context ctx); // 0x007E8F28-0x007E94F8
		public int LastIndexOf(string s, string target, int start, int length, CompareOptions opt); // 0x007E897C-0x007E8B60
		private int LastIndexOfOrdinal(string s, string target, int start, int length); // 0x007E9920-0x007E9B78
		private unsafe int LastIndexOfSortKey(string s, int start, int orgStart, int length, byte* sortkey, int ti, bool noLv4, ref Context ctx); // 0x007EA1E4-0x007EA294
		private unsafe int LastIndexOf(string s, string target, int start, int length, byte* targetSortKey, ref Context ctx); // 0x007E9B78-0x007EA1E4
		private unsafe bool MatchesForward(string s, ref int idx, int end, int ti, byte* sortkey, bool noLv4, ref Context ctx); // 0x007E973C-0x007E9920
		private unsafe bool MatchesForwardCore(string s, ref int idx, int end, int ti, byte* sortkey, bool noLv4, ExtenderType ext, ref Contraction ct, ref Context ctx); // 0x007EA484-0x007EA8E4
		private unsafe bool MatchesPrimitive(CompareOptions opt, byte* source, int si, ExtenderType ext, byte* target, int ti, bool noLv4); // 0x007EA8E4-0x007EAB40
		private unsafe bool MatchesBackward(string s, ref int idx, int end, int orgStart, int ti, byte* sortkey, bool noLv4, ref Context ctx); // 0x007EA294-0x007EA484
		private unsafe bool MatchesBackwardCore(string s, ref int idx, int end, int orgStart, int ti, byte* sortkey, bool noLv4, ExtenderType ext, ref Contraction ct, ref Context ctx); // 0x007EAB40-0x007EB0C0
	}

	internal class SortKeyBuffer // TypeDefIndex: 61
	{
		// Fields
		private byte[] l1b; // 0x10
		private byte[] l2b; // 0x18
		private byte[] l3b; // 0x20
		private byte[] l4sb; // 0x28
		private byte[] l4tb; // 0x30
		private byte[] l4kb; // 0x38
		private byte[] l4wb; // 0x40
		private byte[] l5b; // 0x48
		private string source; // 0x50
		private int l1; // 0x58
		private int l2; // 0x5C
		private int l3; // 0x60
		private int l4s; // 0x64
		private int l4t; // 0x68
		private int l4k; // 0x6C
		private int l4w; // 0x70
		private int l5; // 0x74
		private int lcid; // 0x78
		private CompareOptions options; // 0x7C
		private bool processLevel2; // 0x80
		private bool frenchSort; // 0x81
		private bool frenchSorted; // 0x82
	
		// Constructors
		public SortKeyBuffer(int lcid); // 0x007E6084-0x007E608C
	
		// Methods
		public void Reset(); // 0x007EB280-0x007EB294
		internal void Initialize(CompareOptions options, int lcid, string s, bool frenchSort); // 0x007E608C-0x007E6254
		internal void AppendCJKExtension(byte lv1msb, byte lv1lsb); // 0x007E6C1C-0x007E6CBC
		internal void AppendKana(byte category, byte lv1, byte lv2, byte lv3, bool isSmallKana, byte markType, bool isKatakana, bool isHalfWidth); // 0x007E6D90-0x007E6E80
		internal void AppendNormal(byte category, byte lv1, byte lv2, byte lv3); // 0x007E6A8C-0x007E6C1C
		private void AppendLevel5(byte category, byte lv1); // 0x007EB390-0x007EB43C
		private void AppendBufferPrimitive(byte value, ref byte[] buf, ref int bidx); // 0x007EB294-0x007EB390
		public SortKey GetResultAndReset(); // 0x007E664C-0x007E667C
		private int GetOptimizedLength(byte[] data, int len, byte defaultValue); // 0x007EBA18-0x007EBAAC
		public SortKey GetResult(); // 0x007EB43C-0x007EBA18
	}
}

namespace Mono.Security
{
	internal class ASN1 // TypeDefIndex: 62
	{
		// Fields
		private byte m_nTag; // 0x10
		private byte[] m_aValue; // 0x18
		private ArrayList elist; // 0x20
	
		// Properties
		public int Count { get; } // 0x007F3938-0x007F3954 
		public byte Tag { get; } // 0x007F3954-0x007F395C 
		public int Length { get; } // 0x007F395C-0x007F3974 
		public byte[] Value { get; set; } // 0x007F3974-0x007F3A64 0x007F3A64-0x007F3B38
		public ASN1 this[int index] { get => default; } // 0x007F4674-0x007F480C 
	
		// Constructors
		public ASN1(byte tag); // 0x007F35D8-0x007F3608
		public ASN1(byte tag, byte[] data); // 0x007F3608-0x007F3644
		public ASN1(byte[] data); // 0x007F3644-0x007F3800
	
		// Methods
		private bool CompareArray(byte[] array1, byte[] array2); // 0x007F3B38-0x007F3C08
		public bool CompareValue(byte[] value); // 0x007F3C08-0x007F3C1C
		public ASN1 Add(ASN1 asn1); // 0x007F3C1C-0x007F3CBC
		public virtual byte[] GetBytes(); // 0x007F3CBC-0x007F4504
		protected void Decode(byte[] asn1, ref int anPos, int anLength); // 0x007F3800-0x007F3938
		protected void DecodeTLV(byte[] asn1, ref int pos, out byte tag, out int length, out byte[] content); // 0x007F4504-0x007F4674
		public ASN1 Element(int index, byte anTag); // 0x007F480C-0x007F49D0
		public override string ToString(); // 0x007F49D0-0x007F4C84
	}

	internal static class ASN1Convert // TypeDefIndex: 63
	{
		// Methods
		public static ASN1 FromInt32(int value); // 0x007F4C84-0x007F4DF8
		public static ASN1 FromOid(string oid); // 0x007F4DF8-0x007F4EB4
		public static int ToInt32(ASN1 asn1); // 0x007F4EB4-0x007F4FFC
		public static string ToOid(ASN1 asn1); // 0x007F4FFC-0x007F534C
		public static DateTime ToDateTime(ASN1 time); // 0x007F534C-0x007F59D0
	}

	internal sealed class BitConverterLE // TypeDefIndex: 64
	{
		// Methods
		private static unsafe byte[] GetUIntBytes(byte* bytes); // 0x006C6EA0-0x006C704C
		private static unsafe byte[] GetULongBytes(byte* bytes); // 0x006C704C-0x006C7318
		internal static byte[] GetBytes(int value); // 0x006C7318-0x006C733C
		internal static byte[] GetBytes(float value); // 0x006C733C-0x006C7360
		internal static byte[] GetBytes(double value); // 0x006C7360-0x006C7384
		private static unsafe void UIntFromBytes(byte* dst, byte[] src, int startIndex); // 0x006C7384-0x006C7570
		private static unsafe void ULongFromBytes(byte* dst, byte[] src, int startIndex); // 0x006C7570-0x006C769C
		internal static float ToSingle(byte[] value, int startIndex); // 0x006C769C-0x006C76D4
		internal static double ToDouble(byte[] value, int startIndex); // 0x006C76D4-0x006C770C
	}

	internal sealed class PKCS7 // TypeDefIndex: 65
	{
		// Nested types
		public class ContentInfo // TypeDefIndex: 66
		{
			// Fields
			private string contentType; // 0x10
			private ASN1 content; // 0x18
	
			// Properties
			public ASN1 ASN1 { get; } // 0x006D4A78-0x006D4A7C 
			public ASN1 Content { get; set; } // 0x006D4B4C-0x006D4B54 0x006D4B54-0x006D4B5C
			public string ContentType { get; set; } // 0x006D4B5C-0x006D4B64 0x006D4B64-0x006D4B6C
	
			// Constructors
			public ContentInfo(); // 0x006D4730-0x006D47A0
			public ContentInfo(string oid); // 0x006D47A0-0x006D47C8
			public ContentInfo(byte[] data); // 0x006D47C8-0x006D483C
			public ContentInfo(ASN1 asn1); // 0x006D483C-0x006D4A78
	
			// Methods
			internal ASN1 GetASN1(); // 0x006D4A7C-0x006D4B4C
		}
	
		public class EncryptedData // TypeDefIndex: 67
		{
			// Fields
			private byte _version; // 0x10
			private ContentInfo _content; // 0x18
			private ContentInfo _encryptionAlgorithm; // 0x20
			private byte[] _encrypted; // 0x28
	
			// Properties
			public ContentInfo EncryptionAlgorithm { get; } // 0x006D4F7C-0x006D4F84 
			public byte[] EncryptedContent { get; } // 0x006D4F84-0x006D5050 
	
			// Constructors
			public EncryptedData(); // 0x006D4B6C-0x006D4B94
			public EncryptedData(ASN1 asn1); // 0x006D4B94-0x006D4F7C
		}
	}
}

namespace Mono.Security.X509
{
	internal class SafeBag // TypeDefIndex: 68
	{
		// Fields
		private string _bagOID; // 0x10
		private ASN1 _asn1; // 0x18
	
		// Properties
		public string BagOID { get; } // 0x006D6F74-0x006D6F7C 
		public ASN1 ASN1 { get; } // 0x006D6F7C-0x006D6F84 
	
		// Constructors
		public SafeBag(string bagOID, ASN1 asn1); // 0x006D8C4C-0x006D8C84
	}

	internal class PKCS12 : ICloneable // TypeDefIndex: 69
	{
		// Fields
		private byte[] _password; // 0x10
		private ArrayList _keyBags; // 0x18
		private ArrayList _secretBags; // 0x20
		private Mono.Security.X509.X509CertificateCollection _certs; // 0x28
		private bool _keyBagsChanged; // 0x30
		private bool _secretBagsChanged; // 0x31
		private bool _certsChanged; // 0x32
		private int _iterations; // 0x34
		private ArrayList _safeBags; // 0x38
		private RandomNumberGenerator _rng; // 0x40
		private static int password_max_length; // 0x00
	
		// Properties
		public string Password { set; } // 0x006D5164-0x006D52E4
		public int IterationCount { get; set; } // 0x006D67C0-0x006D67C8 0x006D67C8-0x006D67D0
		public ArrayList Keys { get; } // 0x006D67D0-0x006D6F74 
		public Mono.Security.X509.X509CertificateCollection Certificates { get; } // 0x006D7124-0x006D756C 
		internal RandomNumberGenerator RNG { get; } // 0x006D77D0-0x006D77FC 
		public static int MaximumPasswordLength { get; } // 0x006D6758-0x006D67C0 
	
		// Nested types
		public class DeriveBytes // TypeDefIndex: 70
		{
			// Fields
			private static byte[] keyDiversifier; // 0x00
			private static byte[] ivDiversifier; // 0x08
			private static byte[] macDiversifier; // 0x10
			private string _hashName; // 0x10
			private int _iterations; // 0x18
			private byte[] _password; // 0x20
			private byte[] _salt; // 0x28
	
			// Properties
			public string HashName { set; } // 0x006D7FFC-0x006D8004
			public int IterationCount { set; } // 0x006D7FF4-0x006D7FFC
			public byte[] Password { set; } // 0x006D7E34-0x006D7F20
			public byte[] Salt { set; } // 0x006D7F20-0x006D7FF4
	
			// Constructors
			public DeriveBytes(); // 0x006D7E2C-0x006D7E34
			static DeriveBytes(); // 0x006DD278-0x006DD35C
	
			// Methods
			private void Adjust(byte[] a, int aOff, byte[] b); // 0x006DCAE4-0x006DCC90
			private byte[] Derive(byte[] diversifier, int n); // 0x006DCC90-0x006DD278
			public byte[] DeriveKey(int size); // 0x006D8004-0x006D8084
			public byte[] DeriveIV(int size); // 0x006D8084-0x006D8104
			public byte[] DeriveMAC(int size); // 0x006D9A04-0x006D9A84
		}
	
		// Constructors
		public PKCS12(); // 0x006D5050-0x006D5124
		public PKCS12(byte[] data); // 0x006D512C-0x006D5164
		public PKCS12(byte[] data, string password); // 0x006D5AF0-0x006D5B34
		static PKCS12(); // 0x006DCA90-0x006DCAE4
	
		// Methods
		private void Decode(byte[] data); // 0x006D52E4-0x006D5AF0
		~PKCS12(); // 0x006D66CC-0x006D6758
		private bool Compare(byte[] expected, byte[] actual); // 0x006D5D10-0x006D5DE0
		private SymmetricAlgorithm GetSymmetricAlgorithm(string algorithmOid, byte[] salt, int iterationCount); // 0x006D77FC-0x006D7E2C
		public byte[] Decrypt(string algorithmOid, byte[] salt, int iterationCount, byte[] encryptedData); // 0x006D6F84-0x006D7124
		public byte[] Decrypt(PKCS7.EncryptedData ed); // 0x006D65D4-0x006D66CC
		public byte[] Encrypt(string algorithmOid, byte[] salt, int iterationCount, byte[] data); // 0x006D8104-0x006D82F4
		private DSAParameters GetExistingParameters(out bool found); // 0x006D82F4-0x006D8510
		private void AddPrivateKey(PKCS8.PrivateKeyInfo pki); // 0x006D8AB4-0x006D8C4C
		private void ReadSafeBag(ASN1 safeBag); // 0x006D5DE0-0x006D65D4
		private ASN1 CertificateSafeBag(Mono.Security.X509.X509Certificate x509, IDictionary attributes); // 0x006D8C84-0x006D9A04
		private byte[] MAC(byte[] password, byte[] salt, int iterations, byte[] data); // 0x006D5B34-0x006D5D10
		public byte[] GetBytes(); // 0x006D9A84-0x006DBC64
		private PKCS7.ContentInfo EncryptedContentInfo(ASN1 safeBags, string algorithmOid); // 0x006DBC74-0x006DC01C
		public void AddCertificate(Mono.Security.X509.X509Certificate cert); // 0x006DBC6C-0x006DBC74
		public void AddCertificate(Mono.Security.X509.X509Certificate cert, IDictionary attributes); // 0x006DC01C-0x006DC310
		public void RemoveCertificate(Mono.Security.X509.X509Certificate cert); // 0x006DBC64-0x006DBC6C
		public void RemoveCertificate(Mono.Security.X509.X509Certificate cert, IDictionary attrs); // 0x006DC310-0x006DC9A4
		public object Clone(); // 0x006DC9A4-0x006DCA90
	}

	internal sealed class X501 // TypeDefIndex: 71
	{
		// Fields
		private static byte[] countryName; // 0x00
		private static byte[] organizationName; // 0x08
		private static byte[] organizationalUnitName; // 0x10
		private static byte[] commonName; // 0x18
		private static byte[] localityName; // 0x20
		private static byte[] stateOrProvinceName; // 0x28
		private static byte[] streetAddress; // 0x30
		private static byte[] domainComponent; // 0x38
		private static byte[] userid; // 0x40
		private static byte[] email; // 0x48
		private static byte[] dnQualifier; // 0x50
		private static byte[] title; // 0x58
		private static byte[] surname; // 0x60
		private static byte[] givenName; // 0x68
		private static byte[] initial; // 0x70
	
		// Constructors
		static X501(); // 0x006DDD40-0x006DE064
	
		// Methods
		public static string ToString(ASN1 seq); // 0x006DD35C-0x006DD4A8
		private static void AppendEntry(StringBuilder sb, ASN1 entry, bool quotes); // 0x006DD4A8-0x006DDD40
	}

	internal class X509Certificate : ISerializable // TypeDefIndex: 72
	{
		// Fields
		private ASN1 decoder; // 0x10
		private byte[] m_encodedcert; // 0x18
		private DateTime m_from; // 0x20
		private DateTime m_until; // 0x28
		private ASN1 issuer; // 0x30
		private string m_issuername; // 0x38
		private string m_keyalgo; // 0x40
		private byte[] m_keyalgoparams; // 0x48
		private ASN1 subject; // 0x50
		private string m_subject; // 0x58
		private byte[] m_publickey; // 0x60
		private byte[] signature; // 0x68
		private string m_signaturealgo; // 0x70
		private byte[] m_signaturealgoparams; // 0x78
		private RSA _rsa; // 0x80
		private DSA _dsa; // 0x88
		private int version; // 0x90
		private byte[] serialnumber; // 0x98
		private byte[] issuerUniqueID; // 0xA0
		private byte[] subjectUniqueID; // 0xA8
		private X509ExtensionCollection extensions; // 0xB0
		private static string encoding_error; // 0x00
	
		// Properties
		public DSA DSA { get; } // 0x006D86B4-0x006D8A00 
		public virtual byte[] KeyAlgorithmParameters { get; } // 0x006DEEEC-0x006DEFB8 
		public virtual RSA RSA { get; } // 0x006DEFB8-0x006DF1AC 
		public virtual byte[] RawData { get; } // 0x006DF1AC-0x006DF278 
	
		// Constructors
		public X509Certificate(byte[] data); // 0x006D756C-0x006D7710
		static X509Certificate(); // 0x006DF2EC-0x006DF350
	
		// Methods
		private void Parse(byte[] data); // 0x006DE064-0x006DEB54
		private byte[] GetUnsignedBigInteger(byte[] integer); // 0x006DEE34-0x006DEEEC
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x006DF278-0x006DF2EC
		private static byte[] PEM(string type, byte[] data); // 0x006DECB0-0x006DEE34
	}

	[Serializable]
	internal class X509CertificateCollection : CollectionBase, IEnumerable // TypeDefIndex: 73
	{
		// Properties
		public Mono.Security.X509.X509Certificate this[int index] { get => default; } // 0x006DF350-0x006DF44C 
	
		// Nested types
		public class X509CertificateEnumerator : IEnumerator // TypeDefIndex: 74
		{
			// Fields
			private IEnumerator enumerator; // 0x10
	
			// Properties
			public Mono.Security.X509.X509Certificate Current { get; } // 0x006D8570-0x006D86B4 
			object IEnumerator.Current { get; } // 0x006DF590-0x006DF648 
	
			// Constructors
			public X509CertificateEnumerator(X509CertificateCollection mappings); // 0x006DF44C-0x006DF51C
	
			// Methods
			bool IEnumerator.MoveNext(); // 0x006DF648-0x006DF6FC
			void IEnumerator.Reset(); // 0x006DF6FC-0x006DF7B4
			public bool MoveNext(); // 0x006D8A00-0x006D8AB4
		}
	
		// Constructors
		public X509CertificateCollection(); // 0x006D5124-0x006D512C
	
		// Methods
		public int Add(Mono.Security.X509.X509Certificate value); // 0x006D7710-0x006D77D0
		public new X509CertificateEnumerator GetEnumerator(); // 0x006D8510-0x006D8570
		IEnumerator IEnumerable.GetEnumerator(); // 0x006DF51C-0x006DF558
		public override int GetHashCode(); // 0x006DF558-0x006DF590
	}

	internal class X509Extension // TypeDefIndex: 75
	{
		// Fields
		protected string extnOid; // 0x10
		protected bool extnCritical; // 0x18
		protected ASN1 extnValue; // 0x20
	
		// Constructors
		public X509Extension(ASN1 asn1); // 0x006DF7B4-0x006DFBA0
	
		// Methods
		protected virtual void Decode(); // 0x006DFBA0-0x006DFBA4
		public override bool Equals(object obj); // 0x006DFBA4-0x006DFD48
		public override int GetHashCode(); // 0x006DFD48-0x006DFD7C
		private void WriteLine(StringBuilder sb, int n, int pos); // 0x006DFD7C-0x006E001C
		public override string ToString(); // 0x006E001C-0x006E012C
	}

	[DefaultMember] // 0x00393A10-0x00393A48
	internal sealed class X509ExtensionCollection : CollectionBase, IEnumerable // TypeDefIndex: 76
	{
		// Fields
		private bool readOnly; // 0x18
	
		// Constructors
		public X509ExtensionCollection(); // 0x006E012C-0x006E0134
		public X509ExtensionCollection(ASN1 asn1); // 0x006DEB54-0x006DECB0
	
		// Methods
		IEnumerator IEnumerable.GetEnumerator(); // 0x006E0134-0x006E0170
	}
}

namespace Mono.Security.Cryptography
{
	internal class ARC4Managed : RC4, ICryptoTransform // TypeDefIndex: 77
	{
		// Fields
		private byte[] key; // 0x48
		private byte[] state; // 0x50
		private byte x; // 0x58
		private byte y; // 0x59
		private bool m_disposed; // 0x5A
	
		// Properties
		public override byte[] Key { get; set; } // 0x006C796C-0x006C7A60 0x006C7A60-0x006C7B88
		public bool CanTransformMultipleBlocks { get; } // 0x006C7EE0-0x006C7EE8 
		public int InputBlockSize { get; } // 0x006C7EE8-0x006C7EF0 
		public int OutputBlockSize { get; } // 0x006C7EF0-0x006C7EF8 
	
		// Constructors
		public ARC4Managed(); // 0x006C770C-0x006C7790
	
		// Methods
		~ARC4Managed(); // 0x006C7828-0x006C78A8
		protected override void Dispose(bool disposing); // 0x006C78A8-0x006C796C
		public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgvIV); // 0x006C7D6C-0x006C7D98
		public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgvIV); // 0x006C7D98-0x006C7DD0
		public override void GenerateIV(); // 0x006C7DD0-0x006C7E34
		public override void GenerateKey(); // 0x006C7E34-0x006C7E60
		private void KeySetup(byte[] key); // 0x006C7B88-0x006C7D6C
		private void CheckInput(byte[] inputBuffer, int inputOffset, int inputCount); // 0x006C7EF8-0x006C8054
		public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset); // 0x006C8054-0x006C81D4
		private int InternalTransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset); // 0x006C81D4-0x006C848C
		public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x006C848C-0x006C8530
	}

	internal sealed class KeyBuilder // TypeDefIndex: 78
	{
		// Fields
		private static RandomNumberGenerator rng; // 0x00
	
		// Properties
		private static RandomNumberGenerator Rng { get; } // 0x006CA440-0x006CA4B0 
	
		// Methods
		public static byte[] Key(int size); // 0x006C7E60-0x006C7EE0
		public static byte[] IV(int size); // 0x006CA4B0-0x006CA530
	}

	internal class KeyPairPersistence // TypeDefIndex: 79
	{
		// Fields
		private static bool _userPathExists; // 0x00
		private static string _userPath; // 0x08
		private static bool _machinePathExists; // 0x10
		private static string _machinePath; // 0x18
		private CspParameters _params; // 0x10
		private string _keyvalue; // 0x18
		private string _filename; // 0x20
		private string _container; // 0x28
		private static object lockobj; // 0x20
	
		// Properties
		public string Filename { get; } // 0x006CA704-0x006CA8AC 
		public string KeyValue { get; set; } // 0x006CB568-0x006CB570 0x006CB570-0x006CB584
		private static string UserPath { get; } // 0x006CAFE8-0x006CB568 
		private static string MachinePath { get; } // 0x006CAA6C-0x006CAFE8 
		private bool CanChange { get; } // 0x006CB584-0x006CB594 
		private bool UseDefaultKeyContainer { get; } // 0x006CC094-0x006CC0CC 
		private bool UseMachineKeyStore { get; } // 0x006CAA34-0x006CAA6C 
		private string ContainerName { get; } // 0x006CA8AC-0x006CAA34 
	
		// Constructors
		public KeyPairPersistence(CspParameters parameters); // 0x006CA530-0x006CA538
		public KeyPairPersistence(CspParameters parameters, string keyPair); // 0x006CA538-0x006CA5E8
		static KeyPairPersistence(); // 0x006CC1D8-0x006CC244
	
		// Methods
		public bool Load(); // 0x006CB594-0x006CB6E4
		public void Save(); // 0x006CB86C-0x006CBA74
		public void Remove(); // 0x006CBE58-0x006CBE70
		internal static bool _CanSecure(string root); // 0x006CBFA0-0x006CBFA4
		internal static bool _ProtectUser(string path); // 0x006CBFA4-0x006CBFA8
		internal static bool _ProtectMachine(string path); // 0x006CBFA8-0x006CBFAC
		internal static bool _IsUserProtected(string path); // 0x006CBFAC-0x006CBFB0
		internal static bool _IsMachineProtected(string path); // 0x006CBFB0-0x006CBFB4
		private static bool CanSecure(string path); // 0x006CBFB4-0x006CC094
		private static bool ProtectUser(string path); // 0x006CBDC0-0x006CBE58
		private static bool ProtectMachine(string path); // 0x006CBD28-0x006CBDC0
		private static bool IsUserProtected(string path); // 0x006CBE70-0x006CBF08
		private static bool IsMachineProtected(string path); // 0x006CBF08-0x006CBFA0
		private CspParameters Copy(CspParameters p); // 0x006CA5E8-0x006CA704
		private void FromXml(string xml); // 0x006CB6E4-0x006CB86C
		private string ToXml(); // 0x006CBA74-0x006CBD28
	}

	internal abstract class MD2 : HashAlgorithm // TypeDefIndex: 80
	{
		// Constructors
		protected MD2(); // 0x006CC244-0x006CC270
	
		// Methods
		public static MD2 Create(); // 0x006CC270-0x006CC2C8
	}

	internal class MD2Managed : MD2 // TypeDefIndex: 81
	{
		// Fields
		private byte[] state; // 0x28
		private byte[] checksum; // 0x30
		private byte[] buffer; // 0x38
		private int count; // 0x40
		private byte[] x; // 0x48
		private static readonly byte[] PI_SUBST; // 0x00
	
		// Constructors
		public MD2Managed(); // 0x006CC2C8-0x006CC374
		static MD2Managed(); // 0x006CCA1C-0x006CCA98
	
		// Methods
		private byte[] Padding(int nLength); // 0x006CC374-0x006CC430
		public override void Initialize(); // 0x006CC430-0x006CC49C
		protected override void HashCore(byte[] array, int ibStart, int cbSize); // 0x006CC49C-0x006CC570
		protected override byte[] HashFinal(); // 0x006CC8D4-0x006CCA1C
		private void MD2Transform(byte[] state, byte[] checksum, byte[] block, int index); // 0x006CC570-0x006CC8D4
	}

	internal abstract class MD4 : HashAlgorithm // TypeDefIndex: 82
	{
		// Constructors
		protected MD4(); // 0x006CCA98-0x006CCAC4
	
		// Methods
		public static MD4 Create(); // 0x006CCAC4-0x006CCB1C
	}

	internal class MD4Managed : MD4 // TypeDefIndex: 83
	{
		// Fields
		private uint[] state; // 0x28
		private byte[] buffer; // 0x30
		private uint[] count; // 0x38
		private uint[] x; // 0x40
		private byte[] digest; // 0x48
	
		// Constructors
		public MD4Managed(); // 0x006CCB1C-0x006CCBE8
	
		// Methods
		public override void Initialize(); // 0x006CCBE8-0x006CCD60
		protected override void HashCore(byte[] array, int ibStart, int cbSize); // 0x006CCD60-0x006CCF3C
		protected override byte[] HashFinal(); // 0x006CDEB8-0x006CDFD4
		private byte[] Padding(int nLength); // 0x006CE190-0x006CE224
		private uint F(uint x, uint y, uint z); // 0x006CE224-0x006CE234
		private uint G(uint x, uint y, uint z); // 0x006CE234-0x006CE248
		private uint H(uint x, uint y, uint z); // 0x006CE248-0x006CE254
		private uint ROL(uint x, byte n); // 0x006CE254-0x006CE264
		private void FF(ref uint a, uint b, uint c, uint d, uint x, byte s); // 0x006CE264-0x006CE290
		private void GG(ref uint a, uint b, uint c, uint d, uint x, byte s); // 0x006CE290-0x006CE2CC
		private void HH(ref uint a, uint b, uint c, uint d, uint x, byte s); // 0x006CE2CC-0x006CE300
		private void Encode(byte[] output, uint[] input); // 0x006CDFD4-0x006CE190
		private void Decode(uint[] output, byte[] input, int index); // 0x006CE300-0x006CE458
		private void MD4Transform(uint[] state, byte[] block, int index); // 0x006CCF3C-0x006CDEB8
	}

	internal sealed class PKCS1 // TypeDefIndex: 84
	{
		// Fields
		private static byte[] emptySHA1; // 0x00
		private static byte[] emptySHA256; // 0x08
		private static byte[] emptySHA384; // 0x10
		private static byte[] emptySHA512; // 0x18
	
		// Constructors
		static PKCS1(); // 0x006CF230-0x006CF344
	
		// Methods
		private static bool Compare(byte[] array1, byte[] array2); // 0x006CE458-0x006CE524
		public static byte[] I2OSP(byte[] x, int size); // 0x006CE524-0x006CE5D0
		public static byte[] OS2IP(byte[] x); // 0x006CE5D0-0x006CE6B8
		public static byte[] RSAVP1(RSA rsa, byte[] s); // 0x006CE6B8-0x006CE6F0
		internal static bool Verify_v15(RSA rsa, string hashName, byte[] hashValue, byte[] signature); // 0x006CE6F0-0x006CE86C
		public static bool Verify_v15(RSA rsa, HashAlgorithm hash, byte[] hashValue, byte[] signature, bool tryNonStandardEncoding); // 0x006CEC40-0x006CEE8C
		public static byte[] Encode_v15(HashAlgorithm hash, byte[] hashValue, int emLength); // 0x006CEE8C-0x006CF228
		internal static HashAlgorithm CreateFromName(string name); // 0x006CE86C-0x006CEC40
	}

	internal sealed class PKCS8 // TypeDefIndex: 85
	{
		// Nested types
		public class PrivateKeyInfo // TypeDefIndex: 86
		{
			// Fields
			private int _version; // 0x10
			private string _algorithm; // 0x18
			private byte[] _key; // 0x20
			private ArrayList _list; // 0x28
	
			// Properties
			public byte[] PrivateKey { get; } // 0x006CFCE4-0x006CFDB0 
	
			// Constructors
			public PrivateKeyInfo(); // 0x006CF914-0x006CF984
			public PrivateKeyInfo(byte[] data); // 0x006CF984-0x006CF9B0
	
			// Methods
			private void Decode(byte[] data); // 0x006CF9B0-0x006CFCE4
			private static byte[] RemoveLeadingZero(byte[] bigInt); // 0x006CFDB0-0x006CFE84
			private static byte[] Normalize(byte[] bigInt, int length); // 0x006CFE84-0x006CFF3C
			public static RSA DecodeRSA(byte[] keypair); // 0x006CFF3C-0x006D0410
			public static DSA DecodeDSA(byte[] privateKey, DSAParameters dsaParameters); // 0x006D0410-0x006D0570
		}
	
		public class EncryptedPrivateKeyInfo // TypeDefIndex: 87
		{
			// Fields
			private string _algorithm; // 0x10
			private byte[] _salt; // 0x18
			private int _iterations; // 0x20
			private byte[] _data; // 0x28
	
			// Properties
			public string Algorithm { get; } // 0x006CF70C-0x006CF714 
			public byte[] EncryptedData { get; } // 0x006CF714-0x006CF7E0 
			public byte[] Salt { get; } // 0x006CF7E0-0x006CF90C 
			public int IterationCount { get; } // 0x006CF90C-0x006CF914 
	
			// Constructors
			public EncryptedPrivateKeyInfo(); // 0x006CF344-0x006CF34C
			public EncryptedPrivateKeyInfo(byte[] data); // 0x006CF34C-0x006CF37C
	
			// Methods
			private void Decode(byte[] data); // 0x006CF37C-0x006CF70C
		}
	}

	internal abstract class RC4 : SymmetricAlgorithm // TypeDefIndex: 88
	{
		// Fields
		private static KeySizes[] s_legalBlockSizes; // 0x00
		private static KeySizes[] s_legalKeySizes; // 0x08
	
		// Properties
		public override byte[] IV { get; set; } // 0x006D0570-0x006D05BC 0x006D05BC-0x006D05C0
	
		// Constructors
		public RC4(); // 0x006C7790-0x006C7828
		static RC4(); // 0x006D0618-0x006D07AC
	
		// Methods
		public static RC4 Create(); // 0x006D05C0-0x006D0618
	}

	internal class RSAManaged : RSA // TypeDefIndex: 89
	{
		// Fields
		private bool isCRTpossible; // 0x20
		private bool keyBlinding; // 0x21
		private bool keypairGenerated; // 0x22
		private bool m_disposed; // 0x23
		private BigInteger d; // 0x28
		private BigInteger p; // 0x30
		private BigInteger q; // 0x38
		private BigInteger dp; // 0x40
		private BigInteger dq; // 0x48
		private BigInteger qInv; // 0x50
		private BigInteger n; // 0x58
		private BigInteger e; // 0x60
		[CompilerGenerated] // 0x0039B844-0x0039B854
		private KeyGeneratedEventHandler KeyGenerated; // 0x68
	
		// Properties
		public override int KeySize { get; } // 0x006D13C4-0x006D14AC 
		public bool PublicOnly { get; } // 0x006D14AC-0x006D1578 
	
		// Events
		public event KeyGeneratedEventHandler KeyGenerated {
			add; // 0x006D2358-0x006D2444
			remove; // 0x006D2444-0x006D2530
		}
	
		// Nested types
		public delegate void KeyGeneratedEventHandler(object sender, EventArgs e); // TypeDefIndex: 90; 0x006D0C44-0x006D13C4
	
		// Constructors
		public RSAManaged(int keySize); // 0x006D07AC-0x006D08B4
	
		// Methods
		~RSAManaged(); // 0x006D08B4-0x006D0934
		private void GenerateKeyPair(); // 0x006D0934-0x006D0C44
		public override byte[] EncryptValue(byte[] rgb); // 0x006D1578-0x006D16BC
		public override RSAParameters ExportParameters(bool includePrivateParameters); // 0x006D1788-0x006D1B44
		public override void ImportParameters(RSAParameters parameters); // 0x006D1B44-0x006D2070
		protected override void Dispose(bool disposing); // 0x006D2070-0x006D2358
		public override string ToXmlString(bool includePrivateParameters); // 0x006D2530-0x006D2C64
		private byte[] GetPaddedValue(BigInteger value, int length); // 0x006D16BC-0x006D1788
	}

	internal abstract class SymmetricTransform : ICryptoTransform // TypeDefIndex: 91
	{
		// Fields
		protected SymmetricAlgorithm algo; // 0x10
		protected bool encrypt; // 0x18
		protected int BlockSizeByte; // 0x1C
		protected byte[] temp; // 0x20
		protected byte[] temp2; // 0x28
		private byte[] workBuff; // 0x30
		private byte[] workout; // 0x38
		protected PaddingMode padmode; // 0x40
		protected int FeedBackByte; // 0x44
		private bool m_disposed; // 0x48
		protected bool lastBlock; // 0x49
		private RandomNumberGenerator _rng; // 0x50
	
		// Properties
		public virtual bool CanTransformMultipleBlocks { get; } // 0x006D3154-0x006D315C 
		public virtual int InputBlockSize { get; } // 0x006D315C-0x006D3164 
		public virtual int OutputBlockSize { get; } // 0x006D3164-0x006D316C 
		private bool KeepLastBlock { get; } // 0x006D3C04-0x006D3C30 
	
		// Constructors
		public SymmetricTransform(SymmetricAlgorithm symmAlgo, bool encryption, byte[] rgbIV); // 0x006D2CB0-0x006D2FF8
	
		// Methods
		~SymmetricTransform(); // 0x006D2FF8-0x006D3078
		void IDisposable.Dispose(); // 0x006D3078-0x006D30F4
		protected virtual void Dispose(bool disposing); // 0x006D30F4-0x006D3154
		protected virtual void Transform(byte[] input, byte[] output); // 0x006D316C-0x006D3360
		protected abstract void ECB(byte[] input, byte[] output);
		protected virtual void CBC(byte[] input, byte[] output); // 0x006D3360-0x006D353C
		protected virtual void CFB(byte[] input, byte[] output); // 0x006D353C-0x006D37A0
		protected virtual void OFB(byte[] input, byte[] output); // 0x006D37A0-0x006D3814
		protected virtual void CTS(byte[] input, byte[] output); // 0x006D3814-0x006D3888
		private void CheckInput(byte[] inputBuffer, int inputOffset, int inputCount); // 0x006D3888-0x006D39E4
		public virtual int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset); // 0x006D39E4-0x006D3C04
		private int InternalTransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset); // 0x006D3C30-0x006D3E18
		private void Random(byte[] buffer, int start, int length); // 0x006D3E18-0x006D3EDC
		private void ThrowBadPaddingException(PaddingMode padding, int length, int position); // 0x006D3EDC-0x006D4050
		protected virtual byte[] FinalEncrypt(byte[] inputBuffer, int inputOffset, int inputCount); // 0x006D4050-0x006D4340
		protected virtual byte[] FinalDecrypt(byte[] inputBuffer, int inputOffset, int inputCount); // 0x006D4340-0x006D4648
		public virtual byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x006D4648-0x006D4730
	}

	internal class DSAManaged : DSA // TypeDefIndex: 92
	{
		// Fields
		private bool keypairGenerated; // 0x20
		private bool m_disposed; // 0x21
		private BigInteger p; // 0x28
		private BigInteger q; // 0x30
		private BigInteger g; // 0x38
		private BigInteger x; // 0x40
		private BigInteger y; // 0x48
		private BigInteger j; // 0x50
		private BigInteger seed; // 0x58
		private int counter; // 0x60
		private bool j_missing; // 0x64
		private RandomNumberGenerator rng; // 0x68
		[CompilerGenerated] // 0x0039B854-0x0039B864
		private KeyGeneratedEventHandler KeyGenerated; // 0x70
	
		// Properties
		private RandomNumberGenerator Random { get; } // 0x006C97F8-0x006C9824 
		public override int KeySize { get; } // 0x006C9824-0x006C9864 
		public bool PublicOnly { get; } // 0x006C9864-0x006C98EC 
	
		// Events
		public event KeyGeneratedEventHandler KeyGenerated {
			add; // 0x006CA21C-0x006CA308
			remove; // 0x006CA308-0x006CA3F4
		}
	
		// Nested types
		public delegate void KeyGeneratedEventHandler(object sender, EventArgs e); // TypeDefIndex: 93; 0x006C8F4C-0x006C96CC
	
		// Constructors
		public DSAManaged(int dwKeySize); // 0x006C8530-0x006C8628
	
		// Methods
		~DSAManaged(); // 0x006C8628-0x006C86A8
		private void Generate(); // 0x006C86A8-0x006C8704
		private void GenerateKeyPair(); // 0x006C8E20-0x006C8F4C
		private void add(byte[] a, byte[] b, int value); // 0x006C96CC-0x006C97F8
		private void GenerateParams(int keyLength); // 0x006C8704-0x006C8E20
		private byte[] NormalizeArray(byte[] array); // 0x006C98EC-0x006C99A4
		public override DSAParameters ExportParameters(bool includePrivateParameters); // 0x006C99A4-0x006C9C9C
		public override void ImportParameters(DSAParameters parameters); // 0x006C9C9C-0x006C9F84
		protected override void Dispose(bool disposing); // 0x006C9F84-0x006CA21C
	}
}

namespace Mono.Math
{
	internal class BigInteger // TypeDefIndex: 94
	{
		// Fields
		private uint length; // 0x10
		private uint[] data; // 0x18
		internal static readonly uint[] smallPrimes; // 0x00
		private static RandomNumberGenerator rng; // 0x08
	
		// Properties
		private static RandomNumberGenerator Rng { get; } // 0x007EE07C-0x007EE144 
	
		// Nested types
		public enum Sign // TypeDefIndex: 95
		{
			Negative = -1,
			Zero = 0,
			Positive = 1
		}
	
		internal sealed class ModulusRing // TypeDefIndex: 96
		{
			// Fields
			private BigInteger mod; // 0x10
			private BigInteger constant; // 0x18
	
			// Constructors
			public ModulusRing(BigInteger modulus); // 0x007EFB5C-0x007EFC64
	
			// Methods
			public void BarrettReduction(BigInteger x); // 0x007F0DA8-0x007F10EC
			public BigInteger Multiply(BigInteger a, BigInteger b); // 0x007F10EC-0x007F12BC
			public BigInteger Difference(BigInteger a, BigInteger b); // 0x007F0B80-0x007F0DA8
			public BigInteger Pow(BigInteger a, BigInteger k); // 0x007EFC64-0x007EFD90
			public BigInteger Pow(uint b, BigInteger exp); // 0x007F12BC-0x007F1334
		}
	
		private sealed class Kernel // TypeDefIndex: 97
		{
			// Methods
			public static BigInteger Subtract(BigInteger big, BigInteger small); // 0x007EC920-0x007ECBCC
			public static void MinusEq(BigInteger big, BigInteger small); // 0x007F0268-0x007F0444
			public static void PlusEq(BigInteger bi1, BigInteger bi2); // 0x007F0444-0x007F0724
			public static Sign Compare(BigInteger bi1, BigInteger bi2); // 0x007EC654-0x007EC920
			public static uint SingleByteDivideInPlace(BigInteger n, uint d); // 0x007EEFE4-0x007EF0D8
			public static uint DwordMod(BigInteger n, uint d); // 0x007ECBD0-0x007ECC80
			public static BigInteger[] DwordDivMod(BigInteger n, uint d); // 0x007F0724-0x007F097C
			public static BigInteger[] multiByteDivide(BigInteger bi1, BigInteger bi2); // 0x007ECCC8-0x007ED590
			public static BigInteger LeftShift(BigInteger bi, int n); // 0x007EDB88-0x007EDE48
			public static BigInteger RightShift(BigInteger bi, int n); // 0x007EDE4C-0x007EE07C
			public static BigInteger MultiplyByDword(BigInteger n, uint f); // 0x007EDA18-0x007EDB84
			public static void Multiply(uint[] x, uint xOffset, uint xLen, uint[] y, uint yOffset, uint yLen, uint[] d, uint dOffset); // 0x007ED80C-0x007ED90C
			public static void MultiplyMod2p32pmod(uint[] x, int xOffset, int xLen, uint[] y, int yOffest, int yLen, uint[] d, int dOffset, int mod); // 0x007F097C-0x007F0AB8
			public static uint modInverse(BigInteger bi, uint modulus); // 0x007F0AB8-0x007F0B80
			public static BigInteger modInverse(BigInteger bi, BigInteger modulus); // 0x007EF32C-0x007EFAD8
		}
	
		// Constructors
		public BigInteger(Sign sign, uint len); // 0x007EBAAC-0x007EBB28
		public BigInteger(BigInteger bi); // 0x007EBB28-0x007EBC38
		public BigInteger(BigInteger bi, uint len); // 0x007EBC38-0x007EBD50
		public BigInteger(byte[] inData); // 0x007EBD50-0x007EC214
		public BigInteger(uint ui); // 0x007EC2A0-0x007EC340
		static BigInteger(); // 0x007F01EC-0x007F0268
	
		// Methods
		public static implicit operator BigInteger(uint value); // 0x007EC340-0x007EC3A0
		public static implicit operator BigInteger(int value); // 0x007EC3A0-0x007EC448
		public static BigInteger operator -(BigInteger bi1, BigInteger bi2); // 0x007EC448-0x007EC5D0
		public static uint operator %(BigInteger bi, uint ui); // 0x007ECBCC-0x007ECBD0
		public static BigInteger operator %(BigInteger bi1, BigInteger bi2); // 0x007ECC80-0x007ECCC8
		public static BigInteger operator /(BigInteger bi1, BigInteger bi2); // 0x007ED590-0x007ED5D4
		public static BigInteger operator *(BigInteger bi1, BigInteger bi2); // 0x007ED5D4-0x007ED80C
		public static BigInteger operator *(BigInteger bi, int i); // 0x007ED90C-0x007EDA18
		public static BigInteger operator <<(BigInteger bi1, int shiftVal); // 0x007EDB84-0x007EDB88
		public static BigInteger operator >>(BigInteger bi1, int shiftVal); // 0x007EDE48-0x007EDE4C
		public static BigInteger GenerateRandom(int bits, RandomNumberGenerator rng); // 0x007EE144-0x007EE324
		public static BigInteger GenerateRandom(int bits); // 0x007EE324-0x007EE390
		public void Randomize(RandomNumberGenerator rng); // 0x007EE390-0x007EE594
		public void Randomize(); // 0x007EE630-0x007EE69C
		public int BitCount(); // 0x007EE594-0x007EE630
		public bool TestBit(uint bitNum); // 0x007EE69C-0x007EE70C
		public bool TestBit(int bitNum); // 0x007EE70C-0x007EE830
		public void SetBit(uint bitNum); // 0x007EE830-0x007EE838
		public void SetBit(uint bitNum, bool value); // 0x007EE838-0x007EE8CC
		public int LowestSetBit(); // 0x007EE8CC-0x007EE958
		public byte[] GetBytes(); // 0x007EE958-0x007EEADC
		public static bool operator ==(BigInteger bi1, uint ui); // 0x007EC5D0-0x007EC654
		public static bool operator !=(BigInteger bi1, uint ui); // 0x007EEADC-0x007EEB60
		public static bool operator ==(BigInteger bi1, BigInteger bi2); // 0x007EEB60-0x007EEC30
		public static bool operator !=(BigInteger bi1, BigInteger bi2); // 0x007EEC30-0x007EED00
		public static bool operator >(BigInteger bi1, BigInteger bi2); // 0x007EED00-0x007EED1C
		public static bool operator <(BigInteger bi1, BigInteger bi2); // 0x007EED1C-0x007EED34
		public static bool operator >=(BigInteger bi1, BigInteger bi2); // 0x007EED34-0x007EED50
		public static bool operator <=(BigInteger bi1, BigInteger bi2); // 0x007EED50-0x007EED6C
		public string ToString(uint radix); // 0x007EED6C-0x007EEDCC
		public string ToString(uint radix, string characterSet); // 0x007EEDCC-0x007EEFE4
		private void Normalize(); // 0x007EC214-0x007EC2A0
		public void Clear(); // 0x007EF0D8-0x007EF150
		public override int GetHashCode(); // 0x007EF150-0x007EF1E4
		public override string ToString(); // 0x007EF1E4-0x007EF1EC
		public override bool Equals(object o); // 0x007EF1EC-0x007EF328
		public BigInteger ModInverse(BigInteger modulus); // 0x007EF328-0x007EF32C
		public BigInteger ModPow(BigInteger exp, BigInteger n); // 0x007EFAD8-0x007EFB5C
		public bool IsProbablePrime(); // 0x007EFD90-0x007EFFE0
		public static BigInteger GeneratePseudoPrime(int bits); // 0x007F0034-0x007F00AC
		public void Incr2(); // 0x007F00B4-0x007F01EC
	}
}

namespace Mono.Math.Prime
{
	internal enum ConfidenceFactor // TypeDefIndex: 98
	{
		ExtraLow = 0,
		Low = 1,
		Medium = 2,
		High = 3,
		ExtraHigh = 4,
		Provable = 5
	}

	internal delegate bool PrimalityTest(BigInteger bi, ConfidenceFactor confidence); // TypeDefIndex: 99; 0x007F1790-0x007F1F28

	internal sealed class PrimalityTests // TypeDefIndex: 100
	{
		// Methods
		private static int GetSPPRounds(BigInteger bi, ConfidenceFactor confidence); // 0x007F2008-0x007F21C8
		public static bool Test(BigInteger n, ConfidenceFactor confidence); // 0x007EFFE0-0x007F0034
		public static bool RabinMillerTest(BigInteger n, ConfidenceFactor confidence); // 0x007F23D8-0x007F2700
		public static bool SmallPrimeSppTest(BigInteger bi, ConfidenceFactor confidence); // 0x007F21C8-0x007F23D8
	}
}

namespace Mono.Math.Prime.Generator
{
	internal abstract class PrimeGeneratorBase // TypeDefIndex: 101
	{
		// Properties
		public virtual ConfidenceFactor Confidence { get; } // 0x007F1334-0x007F133C 
		public virtual PrimalityTest PrimalityTest { get; } // 0x007F133C-0x007F13A0 
		public virtual int TrialDivisionBounds { get; } // 0x007F13B0-0x007F13B8 
	
		// Constructors
		protected PrimeGeneratorBase(); // 0x007F13B8-0x007F13C0
	
		// Methods
		public abstract BigInteger GenerateNewPrime(int bits);
	}

	internal class SequentialSearchPrimeGeneratorBase : PrimeGeneratorBase // TypeDefIndex: 102
	{
		// Constructors
		public SequentialSearchPrimeGeneratorBase(); // 0x007F00AC-0x007F00B4
	
		// Methods
		protected virtual BigInteger GenerateSearchBase(int bits, object context); // 0x007F13C0-0x007F1448
		public override BigInteger GenerateNewPrime(int bits); // 0x007F1448-0x007F1458
		public virtual BigInteger GenerateNewPrime(int bits, object context); // 0x007F1458-0x007F1790
		protected virtual bool IsPrimeAcceptable(BigInteger bi, object context); // 0x007F1F28-0x007F1F30
	}
}

namespace System
{
	internal static class ThrowHelper // TypeDefIndex: 103
	{
		// Methods
		internal static void ThrowArgumentNullException(ExceptionArgument argument); // 0x004AD810-0x004AD864
		private static Exception CreateArgumentNullException(ExceptionArgument argument); // 0x004AD864-0x004AD920
		internal static void ThrowArgumentOutOfRangeException(); // 0x004AD920-0x004AD934
		internal static void ThrowWrongValueTypeArgumentException(object value, Type targetType); // 0x004ADA28-0x004ADB80
		internal static void ThrowArgumentException(ExceptionResource resource); // 0x004ADB80-0x004ADC08
		internal static void ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource); // 0x004AD934-0x004ADA28
		internal static void ThrowInvalidOperationException(ExceptionResource resource); // 0x004ADCE0-0x004ADD68
		internal static void ThrowNotSupportedException(ExceptionResource resource); // 0x004ADD68-0x004ADDF8
		internal static void IfNullAndNullsAreIllegalThenThrow<T>(object value, ExceptionArgument argName);
		internal static string GetArgumentName(ExceptionArgument argument); // 0x004ADC74-0x004ADCE0
		internal static string GetResourceName(ExceptionResource resource); // 0x004ADC08-0x004ADC74
	}

	internal interface IValueTupleInternal : ITuple // TypeDefIndex: 104
	{
	}

	[Serializable]
	public struct ValueTuple : IEquatable<ValueTuple>, IStructuralEquatable, IStructuralComparable, IComparable, IComparable<ValueTuple>, IValueTupleInternal // TypeDefIndex: 105
	{
		// Methods
		public override bool Equals(object obj); // 0x00BD0A68-0x00BD0ACC
		public bool Equals(ValueTuple other); // 0x00BD0ACC-0x00BD0AD4
		bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer); // 0x00BD0AD4-0x00BD0C5C
		int IComparable.CompareTo(object other); // 0x00BD0C5C-0x00BD0C64
		public int CompareTo(ValueTuple other); // 0x00BD0C64-0x00BD0D90
		int IStructuralComparable.CompareTo(object other, IComparer comparer); // 0x00BD0D90-0x00BD0D98
		public override int GetHashCode(); // 0x00BD0D98-0x00BD0DA0
		int IStructuralEquatable.GetHashCode(IEqualityComparer comparer); // 0x00BD0DA0-0x00BD0DA8
		public override string ToString(); // 0x00BD0DA8-0x00BD0DF0
		internal static int CombineHashCodes(int h1, int h2); // 0x00BD0DF0-0x00BD0E88
	}

	[Serializable]
	public struct ValueTuple<T1, T2> : IEquatable<ValueTuple<T1, T2>>, IStructuralEquatable, IStructuralComparable, IComparable, IComparable<ValueTuple<T1, T2>>, IValueTupleInternal // TypeDefIndex: 106
	{
		// Fields
		public T1 Item1;
		public T2 Item2;
	
		// Methods
		public override bool Equals(object obj);
		public bool Equals(ValueTuple<T1, T2> other);
		bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer);
		int IComparable.CompareTo(object other);
		public int CompareTo(ValueTuple<T1, T2> other);
		int IStructuralComparable.CompareTo(object other, IComparer comparer);
		public override int GetHashCode();
		int IStructuralEquatable.GetHashCode(IEqualityComparer comparer);
		private int GetHashCodeCore(IEqualityComparer comparer);
		public override string ToString();
	}

	public abstract class Array : IList, IStructuralComparable, IStructuralEquatable, ICloneable // TypeDefIndex: 107
	{
		// Properties
		int ICollection.Count { get; } // 0x00920744-0x00920748 
		bool IList.IsReadOnly { get; } // 0x009207B4-0x009207BC 
		object IList.this[int index] { get => default; set {} } // 0x009207BC-0x009207C0 0x00920968-0x00920978
		public long LongLength { get; } // 0x009222E8-0x00922358 
		public bool IsFixedSize { get; } // 0x0092296C-0x00922974 
		public bool IsReadOnly { get; } // 0x00922974-0x0092297C 
		public bool IsSynchronized { get; } // 0x0092297C-0x00922984 
		public object SyncRoot { get; } // 0x00922984-0x00922988 
		public int Length { [ReliabilityContract] /* 0x0039C964-0x0039C97C */ get; } // 0x00920748-0x009207B4 
		public int Rank { [ReliabilityContract] /* 0x0039C97C-0x0039C994 */ get; } // 0x0092101C-0x00921020 
	
		// Nested types
		private sealed class ArrayEnumerator : IEnumerator, ICloneable // TypeDefIndex: 108
		{
			// Fields
			private Array _array; // 0x10
			private int _index; // 0x18
			private int _endIndex; // 0x1C
	
			// Properties
			public object Current { get; } // 0x00924D7C-0x00924F20 
	
			// Constructors
			internal ArrayEnumerator(Array array); // 0x00924230-0x0092427C
	
			// Methods
			public bool MoveNext(); // 0x00924D40-0x00924D68
			public void Reset(); // 0x00924D68-0x00924D74
			public object Clone(); // 0x00924D74-0x00924D7C
		}
	
		internal struct InternalEnumerator<T> : IEnumerator<T> // TypeDefIndex: 109
		{
			// Fields
			private readonly Array array;
			private int idx;
	
			// Properties
			public T Current { get; }
			object IEnumerator.Current { get; }
	
			// Constructors
			internal InternalEnumerator(Array array);
	
			// Methods
			public void Dispose();
			public bool MoveNext();
			void IEnumerator.Reset();
		}
	
		internal class EmptyInternalEnumerator<T> : IEnumerator<T> // TypeDefIndex: 110
		{
			// Fields
			public static readonly EmptyInternalEnumerator<T> Value;
	
			// Properties
			public T Current { get; }
			object IEnumerator.Current { get; }
	
			// Constructors
			public EmptyInternalEnumerator();
			static EmptyInternalEnumerator();
	
			// Methods
			public void Dispose();
			public bool MoveNext();
			void IEnumerator.Reset();
		}
	
		private struct SorterObjectArray // TypeDefIndex: 111
		{
			// Fields
			private object[] keys; // 0x00
			private object[] items; // 0x08
			private IComparer comparer; // 0x10
	
			// Constructors
			internal SorterObjectArray(object[] keys, object[] items, IComparer comparer); // 0x00925F68-0x00926300
	
			// Methods
			internal void SwapIfGreaterWithItems(int a, int b); // 0x00926300-0x0092657C
			private void Swap(int i, int j); // 0x0092657C-0x00926710
			internal void Sort(int left, int length); // 0x00926710-0x00926844
			private void IntrospectiveSort(int left, int length); // 0x00926844-0x00926F44
			private void IntroSort(int lo, int hi, int depthLimit); // 0x00926F44-0x00926F4C
			private int PickPivotAndPartition(int lo, int hi); // 0x00926F4C-0x00927408
			private void Heapsort(int lo, int hi); // 0x00927408-0x00927410
			private void DownHeap(int i, int n, int lo); // 0x00927410-0x00927418
			private void InsertionSort(int lo, int hi); // 0x00927418-0x00927420
		}
	
		private struct SorterGenericArray // TypeDefIndex: 112
		{
			// Fields
			private Array keys; // 0x00
			private Array items; // 0x08
			private IComparer comparer; // 0x10
	
			// Constructors
			internal SorterGenericArray(Array keys, Array items, IComparer comparer); // 0x00924F20-0x0092516C
	
			// Methods
			internal void SwapIfGreaterWithItems(int a, int b); // 0x0092516C-0x009252C4
			private void Swap(int i, int j); // 0x009252C4-0x0092545C
			internal void Sort(int left, int length); // 0x0092545C-0x00925464
			private void IntrospectiveSort(int left, int length); // 0x00925650-0x00925B94
			private void IntroSort(int lo, int hi, int depthLimit); // 0x00925B94-0x00925B9C
			private int PickPivotAndPartition(int lo, int hi); // 0x00925B9C-0x00925F04
			private void Heapsort(int lo, int hi); // 0x00925F04-0x00925F0C
			private void DownHeap(int i, int n, int lo); // 0x00925F0C-0x00925F14
			private void InsertionSort(int lo, int hi); // 0x00925F14-0x00925F68
		}
	
		// Constructors
		private Array(); // 0x0092427C-0x00924284
	
		// Methods
		public static Array CreateInstance(Type elementType, params /* 0x0039F888-0x0039F898 */ long[] lengths); // 0x00920310-0x009204B0
		public static ReadOnlyCollection<T> AsReadOnly<T>(T[] array);
		public static void Resize<T>(ref T[] array, int newSize);
		int IList.Add(object value); // 0x00920B30-0x00920BA4
		bool IList.Contains(object value); // 0x00920BA4-0x00920BC0
		void IList.Clear(); // 0x00920C78-0x00920CB4
		int IList.IndexOf(object value); // 0x00920DEC-0x00920DF0
		void IList.Insert(int index, object value); // 0x00920DF0-0x00920E64
		void IList.Remove(object value); // 0x00920E64-0x00920ED8
		void IList.RemoveAt(int index); // 0x00920ED8-0x00920F4C
		public void CopyTo(Array array, int index); // 0x00920F4C-0x0092101C
		public object Clone(); // 0x00921510-0x00921518
		int IStructuralComparable.CompareTo(object other, IComparer comparer); // 0x00921518-0x009216F8
		bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer); // 0x009216F8-0x009218AC
		internal static int CombineHashCodes(int h1, int h2); // 0x009218AC-0x009218B8
		int IStructuralEquatable.GetHashCode(IEqualityComparer comparer); // 0x009218B8-0x00921A30
		public static int BinarySearch(Array array, object value); // 0x00921A30-0x00921AEC
		public static TOutput[] ConvertAll<TInput, TOutput>(TInput[] array, Converter<TInput, TOutput> converter);
		public static void Copy(Array sourceArray, Array destinationArray, long length); // 0x00921F6C-0x00922024
		public static void Copy(Array sourceArray, long sourceIndex, Array destinationArray, long destinationIndex, long length); // 0x00922108-0x00922230
		public void CopyTo(Array array, long index); // 0x00922230-0x009222E8
		public static void ForEach<T>(T[] array, Action<T> action);
		public long GetLongLength(int dimension); // 0x0092235C-0x00922374
		public object GetValue(long index); // 0x00922374-0x00922424
		public object GetValue(long index1, long index2); // 0x00922424-0x00922508
		public object GetValue(long index1, long index2, long index3); // 0x009225BC-0x009226DC
		public object GetValue(params /* 0x0039F898-0x0039F8A8 */ long[] indices); // 0x009227BC-0x00922968
		public static int BinarySearch(Array array, int index, int length, object value); // 0x00922988-0x00922990
		public static int BinarySearch(Array array, object value, IComparer comparer); // 0x00922990-0x00922A50
		public static int BinarySearch(Array array, int index, int length, object value, IComparer comparer); // 0x00921AEC-0x00921F6C
		private static int GetMedian(int low, int hi); // 0x00922A50-0x00922A5C
		public static int BinarySearch<T>(T[] array, T value);
		public static int BinarySearch<T>(T[] array, T value, IComparer<T> comparer);
		public static int BinarySearch<T>(T[] array, int index, int length, T value);
		public static int BinarySearch<T>(T[] array, int index, int length, T value, IComparer<T> comparer);
		public static int IndexOf(Array array, object value); // 0x00920BC0-0x00920C78
		public static int IndexOf(Array array, object value, int startIndex); // 0x00922CE4-0x00922DA4
		public static int IndexOf(Array array, object value, int startIndex, int count); // 0x00922A5C-0x00922CE4
		public static int IndexOf<T>(T[] array, T value);
		public static int IndexOf<T>(T[] array, T value, int startIndex);
		public static int IndexOf<T>(T[] array, T value, int startIndex, int count);
		public static int LastIndexOf(Array array, object value); // 0x00922DA4-0x00922E58
		public static int LastIndexOf(Array array, object value, int startIndex); // 0x009230EC-0x00923190
		public static int LastIndexOf(Array array, object value, int startIndex, int count); // 0x00922E58-0x009230EC
		public static int LastIndexOf<T>(T[] array, T value);
		public static int LastIndexOf<T>(T[] array, T value, int startIndex);
		public static int LastIndexOf<T>(T[] array, T value, int startIndex, int count);
		public static void Reverse(Array array); // 0x00923190-0x00923238
		public static void Reverse(Array array, int index, int length); // 0x00923238-0x00923530
		public static void Reverse<T>(T[] array);
		public static void Reverse<T>(T[] array, int index, int length);
		public void SetValue(object value, long index); // 0x00923530-0x009235E8
		public void SetValue(object value, long index1, long index2); // 0x009235E8-0x009236DC
		public void SetValue(object value, long index1, long index2, long index3); // 0x009237A0-0x009238C8
		public void SetValue(object value, params /* 0x0039F8A8-0x0039F8B8 */ long[] indices); // 0x009239B0-0x00923B6C
		public static void Sort(Array array); // 0x00923B70-0x00923C20
		public static void Sort(Array array, int index, int length); // 0x00923E54-0x00923E70
		public static void Sort(Array array, IComparer comparer); // 0x00923E70-0x00923F2C
		public static void Sort(Array array, int index, int length, IComparer comparer); // 0x00923F2C-0x00923F4C
		public static void Sort(Array keys, Array items); // 0x00923F4C-0x00924008
		public static void Sort(Array keys, Array items, IComparer comparer); // 0x00924008-0x009240C8
		public static void Sort(Array keys, Array items, int index, int length); // 0x009240C8-0x009240D0
		public static void Sort(Array keys, Array items, int index, int length, IComparer comparer); // 0x00923C20-0x00923E54
		public static void Sort<T>(T[] array);
		public static void Sort<T>(T[] array, int index, int length);
		public static void Sort<T>(T[] array, IComparer<T> comparer);
		public static void Sort<T>(T[] array, int index, int length, IComparer<T> comparer);
		public static void Sort<T>(T[] array, Comparison<T> comparison);
		public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items);
		public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, int index, int length);
		public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, IComparer<TKey> comparer);
		public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, int index, int length, IComparer<TKey> comparer);
		public static bool Exists<T>(T[] array, Predicate<T> match);
		public static void Fill<T>(T[] array, T value);
		public static void Fill<T>(T[] array, T value, int startIndex, int count);
		public static T Find<T>(T[] array, Predicate<T> match);
		public static T[] FindAll<T>(T[] array, Predicate<T> match);
		public static int FindIndex<T>(T[] array, Predicate<T> match);
		public static int FindIndex<T>(T[] array, int startIndex, Predicate<T> match);
		public static int FindIndex<T>(T[] array, int startIndex, int count, Predicate<T> match);
		public static T FindLast<T>(T[] array, Predicate<T> match);
		public static int FindLastIndex<T>(T[] array, Predicate<T> match);
		public static int FindLastIndex<T>(T[] array, int startIndex, Predicate<T> match);
		public static int FindLastIndex<T>(T[] array, int startIndex, int count, Predicate<T> match);
		public static bool TrueForAll<T>(T[] array, Predicate<T> match);
		public IEnumerator GetEnumerator(); // 0x009241D0-0x00924230
		internal int InternalArray__ICollection_get_Count(); // 0x00924284-0x00924288
		internal bool InternalArray__ICollection_get_IsReadOnly(); // 0x00924288-0x00924290
		internal IEnumerator<T> InternalArray__IEnumerable_GetEnumerator<T>();
		internal void InternalArray__ICollection_Clear(); // 0x00924290-0x00924304
		internal void InternalArray__ICollection_Add<T>(T item);
		internal bool InternalArray__ICollection_Remove<T>(T item);
		internal bool InternalArray__ICollection_Contains<T>(T item);
		internal void InternalArray__ICollection_CopyTo<T>(T[] array, int arrayIndex);
		internal T InternalArray__IReadOnlyList_get_Item<T>(int index);
		internal int InternalArray__IReadOnlyCollection_get_Count(); // 0x00924304-0x00924308
		internal void InternalArray__Insert<T>(int index, T item);
		internal void InternalArray__RemoveAt(int index); // 0x00924308-0x0092437C
		internal int InternalArray__IndexOf<T>(T item);
		internal T InternalArray__get_Item<T>(int index);
		internal void InternalArray__set_Item<T>(int index, T item);
		internal void GetGenericValueImpl<T>(int pos, out T value);
		internal void SetGenericValueImpl<T>(int pos, ref T value);
		private int GetRank(); // 0x0092437C-0x00924380
		public int GetLength(int dimension); // 0x00922358-0x0092235C
		[ReliabilityContract] // 0x0039C994-0x0039C9AC
		public int GetLowerBound(int dimension); // 0x00920CB4-0x00920CB8
		public object GetValue(params /* 0x0039F8B8-0x0039F8C8 */ int[] indices); // 0x00922968-0x0092296C
		public void SetValue(object value, params /* 0x0039F8C8-0x0039F8D8 */ int[] indices); // 0x00923B6C-0x00923B70
		internal object GetValueImpl(int pos); // 0x00924380-0x00924384
		internal void SetValueImpl(object value, int pos); // 0x00924384-0x00924388
		internal static bool FastCopy(Array source, int source_idx, Array dest, int dest_idx, int length); // 0x00924388-0x0092438C
		internal static Array CreateInstanceImpl(Type elementType, int[] lengths, int[] bounds); // 0x0092438C-0x00924390
		[ReliabilityContract] // 0x0039C9AC-0x0039C9C4
		public int GetUpperBound(int dimension); // 0x00924390-0x009243D4
		public object GetValue(int index); // 0x009207C0-0x00920968
		public object GetValue(int index1, int index2); // 0x00922508-0x009225BC
		public object GetValue(int index1, int index2, int index3); // 0x009226DC-0x009227BC
		public void SetValue(object value, int index); // 0x00920978-0x00920B30
		public void SetValue(object value, int index1, int index2); // 0x009236DC-0x009237A0
		public void SetValue(object value, int index1, int index2, int index3); // 0x009238C8-0x009239B0
		internal static Array UnsafeCreateInstance(Type elementType, int[] lengths, int[] lowerBounds); // 0x009243D4-0x009243D8
		internal static Array UnsafeCreateInstance(Type elementType, int length1, int length2); // 0x009247F0-0x009247F4
		internal static Array UnsafeCreateInstance(Type elementType, params /* 0x0039F8D8-0x0039F8E8 */ int[] lengths); // 0x009248A8-0x009248AC
		public static Array CreateInstance(Type elementType, int length); // 0x009248AC-0x0092493C
		public static Array CreateInstance(Type elementType, int length1, int length2); // 0x009247F4-0x009248A8
		public static Array CreateInstance(Type elementType, int length1, int length2, int length3); // 0x0092493C-0x00924A1C
		public static Array CreateInstance(Type elementType, params /* 0x0039F8E8-0x0039F8F8 */ int[] lengths); // 0x009204B0-0x00920744
		public static Array CreateInstance(Type elementType, int[] lengths, int[] lowerBounds); // 0x009243D8-0x009247F0
		[ReliabilityContract] // 0x0039C9C4-0x0039C9DC
		public static void Clear(Array array, int index, int length); // 0x00920CB8-0x00920DEC
		private static void ClearInternal(Array a, int index, int count); // 0x00924A1C-0x00924A20
		[ReliabilityContract] // 0x0039C9DC-0x0039C9F4
		public static void Copy(Array sourceArray, Array destinationArray, int length); // 0x00922024-0x00922108
		[ReliabilityContract] // 0x0039C9F4-0x0039CA0C
		public static void Copy(Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length); // 0x00921020-0x00921510
		private static Exception CreateArrayTypeMismatchException(); // 0x00924A20-0x00924A78
		private static bool CanAssignArrayElement(Type source, Type target); // 0x00924A78-0x00924B9C
		[ReliabilityContract] // 0x0039CA0C-0x0039CA24
		public static void ConstrainedCopy(Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length); // 0x00924C10-0x00924C14
		public static T[] Empty<T>();
		public void Initialize(); // 0x00924C14-0x00924D40
		private static int IndexOfImpl<T>(T[] array, T value, int startIndex, int count);
		private static int LastIndexOfImpl<T>(T[] array, T value, int startIndex, int count);
		private static void SortImpl(Array keys, Array items, int index, int length, IComparer comparer); // 0x009240D0-0x009241D0
		internal static T UnsafeLoad<T>(T[] array, int index);
		internal static void UnsafeStore<T>(T[] array, int index, T value);
		internal static R UnsafeMov<S, R>(S instance);
	}

	internal interface ITupleInternal : ITuple // TypeDefIndex: 113
	{
		// Methods
		string ToString(StringBuilder sb);
	}

	public static class Tuple // TypeDefIndex: 114
	{
		// Methods
		public static Tuple<T1, T2> Create<T1, T2>(T1 item1, T2 item2);
		internal static int CombineHashCodes(int h1, int h2); // 0x00BC4334-0x00BC4340
		internal static int CombineHashCodes(int h1, int h2, int h3); // 0x00BC4340-0x00BC4354
		internal static int CombineHashCodes(int h1, int h2, int h3, int h4); // 0x00BC4354-0x00BC4370
	}

	[Serializable]
	public class Tuple<T1, T2> : IStructuralEquatable, IStructuralComparable, IComparable, ITupleInternal // TypeDefIndex: 115
	{
		// Fields
		private readonly T1 m_Item1;
		private readonly T2 m_Item2;
	
		// Properties
		public T1 Item1 { get; }
		public T2 Item2 { get; }
	
		// Constructors
		public Tuple(T1 item1, T2 item2);
	
		// Methods
		public override bool Equals(object obj);
		bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer);
		int IComparable.CompareTo(object obj);
		int IStructuralComparable.CompareTo(object other, IComparer comparer);
		public override int GetHashCode();
		int IStructuralEquatable.GetHashCode(IEqualityComparer comparer);
		public override string ToString();
		string ITupleInternal.ToString(StringBuilder sb);
	}

	[Serializable]
	public class Tuple<T1, T2, T3> : IStructuralEquatable, IStructuralComparable, IComparable, ITupleInternal // TypeDefIndex: 116
	{
		// Fields
		private readonly T1 m_Item1;
		private readonly T2 m_Item2;
		private readonly T3 m_Item3;
	
		// Properties
		public T1 Item1 { get; }
		public T2 Item2 { get; }
		public T3 Item3 { get; }
	
		// Constructors
		public Tuple(T1 item1, T2 item2, T3 item3);
	
		// Methods
		public override bool Equals(object obj);
		bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer);
		int IComparable.CompareTo(object obj);
		int IStructuralComparable.CompareTo(object other, IComparer comparer);
		public override int GetHashCode();
		int IStructuralEquatable.GetHashCode(IEqualityComparer comparer);
		public override string ToString();
		string ITupleInternal.ToString(StringBuilder sb);
	}

	[Serializable]
	public class Tuple<T1, T2, T3, T4> : IStructuralEquatable, IStructuralComparable, IComparable, ITupleInternal // TypeDefIndex: 117
	{
		// Fields
		private readonly T1 m_Item1;
		private readonly T2 m_Item2;
		private readonly T3 m_Item3;
		private readonly T4 m_Item4;
	
		// Properties
		public T1 Item1 { get; }
		public T2 Item2 { get; }
		public T3 Item3 { get; }
		public T4 Item4 { get; }
	
		// Methods
		public override bool Equals(object obj);
		bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer);
		int IComparable.CompareTo(object obj);
		int IStructuralComparable.CompareTo(object other, IComparer comparer);
		public override int GetHashCode();
		int IStructuralEquatable.GetHashCode(IEqualityComparer comparer);
		public override string ToString();
		string ITupleInternal.ToString(StringBuilder sb);
	}

	[AttributeUsage] // 0x00393A48-0x00393A84
	internal class MonoTODOAttribute : Attribute // TypeDefIndex: 118
	{
		// Fields
		private string comment; // 0x10
	
		// Constructors
		public MonoTODOAttribute(); // 0x004EC68C-0x004EC6E0
		public MonoTODOAttribute(string comment); // 0x004EC660-0x004EC68C
	}

	[AttributeUsage] // 0x00393A84-0x00393AC0
	internal class MonoLimitationAttribute : MonoTODOAttribute // TypeDefIndex: 119
	{
		// Constructors
		public MonoLimitationAttribute(string comment); // 0x004EC634-0x004EC660
	}

	[Serializable]
	[DebuggerDisplay] // 0x00393AC0-0x00393AF8
	public class AggregateException : Exception // TypeDefIndex: 120
	{
		// Fields
		private ReadOnlyCollection<Exception> m_innerExceptions; // 0x88
	
		// Properties
		public ReadOnlyCollection<Exception> InnerExceptions { get; } // 0x006E42A0-0x006E42A8 
	
		// Constructors
		public AggregateException(); // 0x006E3318-0x006E33F4
		public AggregateException(IEnumerable<Exception> innerExceptions); // 0x006E33F4-0x006E3460
		public AggregateException(params /* 0x0039F8F8-0x0039F908 */ Exception[] innerExceptions); // 0x006E3524-0x006E3590
		public AggregateException(string message, IEnumerable<Exception> innerExceptions); // 0x006E3460-0x006E3524
		public AggregateException(string message, params /* 0x0039F908-0x0039F918 */ Exception[] innerExceptions); // 0x006E3590-0x006E3594
		private AggregateException(string message, IList<Exception> innerExceptions); // 0x006E3594-0x006E3994
		internal AggregateException(IEnumerable<ExceptionDispatchInfo> innerExceptionInfos); // 0x006E3994-0x006E3A00
		internal AggregateException(string message, IEnumerable<ExceptionDispatchInfo> innerExceptionInfos); // 0x006E3A00-0x006E3AC4
		private AggregateException(string message, IList<ExceptionDispatchInfo> innerExceptionInfos); // 0x006E3AC4-0x006E3F64
		protected AggregateException(SerializationInfo info, StreamingContext context); // 0x006E3F64-0x006E4124
	
		// Methods
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x006E4124-0x006E42A0
		public AggregateException Flatten(); // 0x006E42A8-0x006E45A4
		public override string ToString(); // 0x006E45A4-0x006E4918
	}

	internal static class AppContextSwitches // TypeDefIndex: 121
	{
		// Fields
		public static readonly bool ThrowExceptionIfDisposedCancellationTokenSource; // 0x00
	
		// Constructors
		static AppContextSwitches(); // 0x006E4918-0x006E4968
	}

	[Serializable]
	internal class __Filters // TypeDefIndex: 122
	{
		// Fields
		internal static readonly __Filters Instance; // 0x00
	
		// Constructors
		public __Filters(); // 0x00BD5860-0x00BD5868
		static __Filters(); // 0x00BD5868-0x00BD58CC
	
		// Methods
		internal virtual bool FilterAttribute(MemberInfo m, object filterCriteria); // 0x00BD4E50-0x00BD5370
		internal virtual bool FilterName(MemberInfo m, object filterCriteria); // 0x00BD5370-0x00BD55E0
		internal virtual bool FilterIgnoreCase(MemberInfo m, object filterCriteria); // 0x00BD55E0-0x00BD5860
	}

	internal sealed class LocalDataStoreHolder // TypeDefIndex: 123
	{
		// Fields
		private LocalDataStore m_Store; // 0x10
	
		// Properties
		public LocalDataStore Store { get; } // 0x004E7D5C-0x004E7D64 
	
		// Constructors
		public LocalDataStoreHolder(LocalDataStore store); // 0x004E7CB4-0x004E7CE0
	
		// Methods
		~LocalDataStoreHolder(); // 0x004E7CE0-0x004E7D5C
	}

	internal sealed class LocalDataStoreElement // TypeDefIndex: 124
	{
		// Fields
		private object m_value; // 0x10
		private long m_cookie; // 0x18
	
		// Properties
		public object Value { get; set; } // 0x004E7730-0x004E7738 0x004E7B88-0x004E7B90
		public long Cookie { get; } // 0x004E7720-0x004E7728 
	
		// Constructors
		public LocalDataStoreElement(long cookie); // 0x004E7C88-0x004E7CB4
	}

	internal sealed class LocalDataStore // TypeDefIndex: 125
	{
		// Fields
		private LocalDataStoreElement[] m_DataTable; // 0x10
		private LocalDataStoreMgr m_Manager; // 0x18
	
		// Constructors
		public LocalDataStore(LocalDataStoreMgr mgr, int InitialCapacity); // 0x004E738C-0x004E7404
	
		// Methods
		internal void Dispose(); // 0x004E7404-0x004E7438
		public object GetData(LocalDataStoreSlot slot); // 0x004E7524-0x004E7664
		public void SetData(LocalDataStoreSlot slot, object data); // 0x004E7738-0x004E7890
		internal void FreeData(int slot, long cookie); // 0x004E7B90-0x004E7C5C
		private LocalDataStoreElement PopulateElement(LocalDataStoreSlot slot); // 0x004E7890-0x004E7B88
	}

	[ComVisible] // 0x00393AF8-0x00393B0C
	public sealed class LocalDataStoreSlot // TypeDefIndex: 126
	{
		// Fields
		private LocalDataStoreMgr m_mgr; // 0x10
		private int m_slot; // 0x18
		private long m_cookie; // 0x20
	
		// Properties
		internal LocalDataStoreMgr Manager { get; } // 0x004E861C-0x004E8624 
		internal int Slot { get; } // 0x004E7718-0x004E7720 
		internal long Cookie { get; } // 0x004E7728-0x004E7730 
	
		// Constructors
		internal LocalDataStoreSlot(LocalDataStoreMgr mgr, int slot, long cookie); // 0x004E8120-0x004E8164
	
		// Methods
		~LocalDataStoreSlot(); // 0x004E86D4-0x004E887C
	}

	internal sealed class LocalDataStoreMgr // TypeDefIndex: 127
	{
		// Fields
		private bool[] m_SlotInfoTable; // 0x10
		private int m_FirstAvailableSlot; // 0x18
		private List<LocalDataStore> m_ManagedLocalDataStores; // 0x20
		private Dictionary<string, LocalDataStoreSlot> m_KeyToSlotMap; // 0x28
		private long m_CookieGenerator; // 0x30
	
		// Constructors
		public LocalDataStoreMgr(); // 0x004E8624-0x004E86D4
	
		// Methods
		public LocalDataStoreHolder CreateLocalDataStore(); // 0x004E7D64-0x004E7EAC
		public void DeleteLocalDataStore(LocalDataStore store); // 0x004E7438-0x004E7524
		public LocalDataStoreSlot AllocateDataSlot(); // 0x004E7EAC-0x004E8120
		public LocalDataStoreSlot AllocateNamedDataSlot(string name); // 0x004E8164-0x004E8270
		public LocalDataStoreSlot GetNamedDataSlot(string name); // 0x004E8270-0x004E8378
		public void FreeNamedDataSlot(string name); // 0x004E8378-0x004E8464
		internal void FreeDataSlot(int slot, long cookie); // 0x004E8464-0x004E861C
		public void ValidateSlot(LocalDataStoreSlot slot); // 0x004E7664-0x004E7718
		internal int GetSlotTableLength(); // 0x004E7C5C-0x004E7C88
	}

	public delegate void Action<in T>(T obj); // TypeDefIndex: 128; 0x00000000-0x00000000

	[TypeForwardedFrom] // 0x00393B0C-0x00393B44
	public delegate void Action(); // TypeDefIndex: 129; 0x006E2ABC-0x006E2EBC

	[TypeForwardedFrom] // 0x00393B44-0x00393B7C
	public delegate void Action<in T1, in T2>(T1 arg1, T2 arg2); // TypeDefIndex: 130; 0x00000000-0x00000000

	[TypeForwardedFrom] // 0x00393B7C-0x00393BB4
	public delegate void Action<in T1, in T2, in T3>(T1 arg1, T2 arg2, T3 arg3); // TypeDefIndex: 131; 0x00000000-0x00000000

	[TypeForwardedFrom] // 0x00393BB4-0x00393BEC
	public delegate TResult Func<out TResult>(); // TypeDefIndex: 132; 0x00000000-0x00000000

	[TypeForwardedFrom] // 0x00393BEC-0x00393C24
	public delegate TResult Func<in T, out TResult>(T arg); // TypeDefIndex: 133; 0x00000000-0x00000000

	[TypeForwardedFrom] // 0x00393C24-0x00393C5C
	public delegate TResult Func<in T1, in T2, out TResult>(T1 arg1, T2 arg2); // TypeDefIndex: 134; 0x00000000-0x00000000

	[TypeForwardedFrom] // 0x00393C5C-0x00393C94
	public delegate TResult Func<in T1, in T2, in T3, out TResult>(T1 arg1, T2 arg2, T3 arg3); // TypeDefIndex: 135; 0x00000000-0x00000000

	[TypeForwardedFrom] // 0x00393C94-0x00393CCC
	public delegate TResult Func<in T1, in T2, in T3, in T4, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4); // TypeDefIndex: 136; 0x00000000-0x00000000

	public delegate int Comparison<in T>(T x, T y); // TypeDefIndex: 137; 0x00000000-0x00000000

	public delegate TOutput Converter<in TInput, out TOutput>(TInput input); // TypeDefIndex: 138; 0x00000000-0x00000000

	public delegate bool Predicate<in T>(T obj); // TypeDefIndex: 139; 0x00000000-0x00000000

	[ClassInterface] // 0x00393CCC-0x00393D58
	[ComDefaultInterface] // 0x00393CCC-0x00393D58
	[ComVisible] // 0x00393CCC-0x00393D58
	public sealed class Activator : _Activator // TypeDefIndex: 140
	{
		// Methods
		public static object CreateInstance(Type type, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture); // 0x006E2EFC-0x006E2F04
		public static object CreateInstance(Type type, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes); // 0x006E2F04-0x006E3130
		public static object CreateInstance(Type type, params /* 0x0039F918-0x0039F928 */ object[] args); // 0x006E3130-0x006E314C
		public static object CreateInstance(Type type, object[] args, object[] activationAttributes); // 0x006E314C-0x006E316C
		public static object CreateInstance(Type type); // 0x006CF228-0x006CF230
		public static object CreateInstance(Type type, bool nonPublic); // 0x006E316C-0x006E3318
		public static T CreateInstance<T>();
	}

	[Serializable]
	[ComVisible] // 0x00393D58-0x00393D6C
	public class AppDomainUnloadedException : SystemException // TypeDefIndex: 141
	{
		// Constructors
		public AppDomainUnloadedException(); // 0x0091F454-0x0091F4C8
		protected AppDomainUnloadedException(SerializationInfo info, StreamingContext context); // 0x0091F4C8-0x0091F4D0
	}

	[Serializable]
	[ComVisible] // 0x00393D6C-0x00393D80
	public class ApplicationException : Exception // TypeDefIndex: 142
	{
		// Constructors
		public ApplicationException(); // 0x0091F4D0-0x0091F56C
		public ApplicationException(string message); // 0x0091F56C-0x0091F5F8
		public ApplicationException(string message, Exception innerException); // 0x0091F5F8-0x0091F68C
		protected ApplicationException(SerializationInfo info, StreamingContext context); // 0x0091F68C-0x0091F7A4
	}

	[Serializable]
	[ComVisible] // 0x00393D80-0x00393D94
	public class ArgumentException : SystemException, ISerializable // TypeDefIndex: 143
	{
		// Fields
		private string m_paramName; // 0x88
	
		// Properties
		public override string Message { get; } // 0x0091F970-0x0091FA8C 
	
		// Constructors
		public ArgumentException(); // 0x0091F7BC-0x0091F830
		public ArgumentException(string message); // 0x0091F830-0x0091F864
		public ArgumentException(string message, Exception innerException); // 0x0091F864-0x0091F898
		public ArgumentException(string message, string paramName); // 0x0091F898-0x0091F8D4
		protected ArgumentException(SerializationInfo info, StreamingContext context); // 0x0091F8D4-0x0091F970
	
		// Methods
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0091FA8C-0x0091FB9C
	}

	[Serializable]
	[ComVisible] // 0x00393D94-0x00393DA8
	public class ArgumentNullException : ArgumentException // TypeDefIndex: 144
	{
		// Constructors
		public ArgumentNullException(); // 0x0091FC34-0x0091FCBC
		public ArgumentNullException(string paramName); // 0x0091FB9C-0x0091FC34
		public ArgumentNullException(string paramName, string message); // 0x0091FCBC-0x0091FD10
		protected ArgumentNullException(SerializationInfo info, StreamingContext context); // 0x0091FD10-0x0091FD14
	}

	[Serializable]
	[ComVisible] // 0x00393DA8-0x00393DBC
	public class ArgumentOutOfRangeException : ArgumentException, ISerializable // TypeDefIndex: 145
	{
		// Fields
		private static string _rangeMessage; // 0x00
		private object m_actualValue; // 0x90
	
		// Properties
		private static string RangeMessage { get; } // 0x0091FD14-0x0091FDA8 
		public override string Message { get; } // 0x0091FF10-0x00920048 
	
		// Constructors
		public ArgumentOutOfRangeException(); // 0x0091FDA8-0x0091FDFC
		public ArgumentOutOfRangeException(string paramName); // 0x0091FDFC-0x0091FE58
		public ArgumentOutOfRangeException(string paramName, string message); // 0x0091FE58-0x0091FEAC
		public ArgumentOutOfRangeException(string paramName, object actualValue, string message); // 0x0091FEAC-0x0091FF10
		protected ArgumentOutOfRangeException(SerializationInfo info, StreamingContext context); // 0x00920154-0x0092022C
	
		// Methods
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00920048-0x00920154
	}

	[Serializable]
	[ComVisible] // 0x00393DBC-0x00393DD0
	public class ArithmeticException : SystemException // TypeDefIndex: 146
	{
		// Constructors
		public ArithmeticException(); // 0x0092022C-0x009202A0
		public ArithmeticException(string message); // 0x009202A0-0x009202D4
		public ArithmeticException(string message, Exception innerException); // 0x009202D4-0x00920308
		protected ArithmeticException(SerializationInfo info, StreamingContext context); // 0x00920308-0x00920310
	}

	[Serializable]
	public struct ArraySegment<T> : IList<T>, IReadOnlyList<T> // TypeDefIndex: 147
	{
		// Fields
		private T[] _array;
		private int _offset;
		private int _count;
	
		// Properties
		public T[] Array { get; }
		public int Offset { get; }
		public int Count { get; }
		T IList<T>.this[int index] { get => default; set {} }
		T IReadOnlyList<T>.this[int index] { get => default; }
		bool ICollection<T>.IsReadOnly { get; }
	
		// Nested types
		[Serializable]
		private sealed class ArraySegmentEnumerator : IEnumerator<T> // TypeDefIndex: 148
		{
			// Fields
			private T[] _array;
			private int _start;
			private int _end;
			private int _current;
	
			// Properties
			public T Current { get; }
			object IEnumerator.Current { get; }
	
			// Constructors
			internal ArraySegmentEnumerator(ArraySegment<T> arraySegment);
	
			// Methods
			public bool MoveNext();
			void IEnumerator.Reset();
			public void Dispose();
		}
	
		// Constructors
		public ArraySegment(T[] array, int offset, int count);
	
		// Methods
		public override int GetHashCode();
		public override bool Equals(object obj);
		public bool Equals(ArraySegment<T> obj);
		int IList<T>.IndexOf(T item);
		void IList<T>.Insert(int index, T item);
		void IList<T>.RemoveAt(int index);
		void ICollection<T>.Add(T item);
		void ICollection<T>.Clear();
		bool ICollection<T>.Contains(T item);
		void ICollection<T>.CopyTo(T[] array, int arrayIndex);
		bool ICollection<T>.Remove(T item);
		IEnumerator<T> IEnumerable<T>.GetEnumerator();
		IEnumerator IEnumerable.GetEnumerator();
	}

	[Serializable]
	[ComVisible] // 0x00393DD0-0x00393DE4
	public class ArrayTypeMismatchException : SystemException // TypeDefIndex: 149
	{
		// Constructors
		public ArrayTypeMismatchException(); // 0x00924B9C-0x00924C10
		protected ArrayTypeMismatchException(SerializationInfo info, StreamingContext context); // 0x00927648-0x00927650
	}

	[Serializable]
	[ComVisible] // 0x00393DE4-0x00393DF8
	public delegate void AsyncCallback(IAsyncResult ar); // TypeDefIndex: 150; 0x00927EA8-0x009285DC

	[Serializable]
	[AttributeUsage] // 0x00393DF8-0x00393E44
	public abstract class Attribute : _Attribute // TypeDefIndex: 151
	{
		// Constructors
		protected Attribute(); // 0x009293F4-0x009293FC
	
		// Methods
		private static Attribute[] InternalGetCustomAttributes(PropertyInfo element, Type type, bool inherit); // 0x0092860C-0x0092870C
		private static Attribute[] InternalGetCustomAttributes(EventInfo element, Type type, bool inherit); // 0x0092870C-0x0092880C
		private static bool InternalIsDefined(PropertyInfo element, Type attributeType, bool inherit); // 0x0092880C-0x0092888C
		private static bool InternalIsDefined(EventInfo element, Type attributeType, bool inherit); // 0x0092888C-0x0092890C
		public static Attribute[] GetCustomAttributes(MemberInfo element, Type type, bool inherit); // 0x0092890C-0x00928C60
		public static bool IsDefined(MemberInfo element, Type attributeType); // 0x00928C60-0x00928C68
		public static bool IsDefined(MemberInfo element, Type attributeType, bool inherit); // 0x00928C68-0x00928FC0
		public static Attribute GetCustomAttribute(MemberInfo element, Type attributeType, bool inherit); // 0x00928FC0-0x00929098
		public static Attribute[] GetCustomAttributes(Assembly element, Type attributeType, bool inherit); // 0x00929098-0x00929314
		public static Attribute GetCustomAttribute(Assembly element, Type attributeType); // 0x00929314-0x0092931C
		public static Attribute GetCustomAttribute(Assembly element, Type attributeType, bool inherit); // 0x0092931C-0x009293F4
		public override bool Equals(object obj); // 0x009293FC-0x00929868
		private static bool AreFieldValuesEqual(object thisValue, object thatValue); // 0x00929868-0x00929A64
		public override int GetHashCode(); // 0x00929A64-0x00929C9C
	}

	[Serializable]
	[ComVisible] // 0x00393E44-0x00393E80
	[Flags] // 0x00393E44-0x00393E80
	public enum AttributeTargets // TypeDefIndex: 152
	{
		Assembly = 1,
		Module = 2,
		Class = 4,
		Struct = 8,
		Enum = 16,
		Constructor = 32,
		Method = 64,
		Property = 128,
		Field = 256,
		Event = 512,
		Interface = 1024,
		Parameter = 2048,
		Delegate = 4096,
		ReturnValue = 8192,
		GenericParameter = 16384,
		All = 32767
	}

	[Serializable]
	[AttributeUsage] // 0x00393E80-0x00393ED4
	[ComVisible] // 0x00393E80-0x00393ED4
	public sealed class AttributeUsageAttribute : Attribute // TypeDefIndex: 153
	{
		// Fields
		internal AttributeTargets m_attributeTarget; // 0x10
		internal bool m_allowMultiple; // 0x14
		internal bool m_inherited; // 0x15
		internal static AttributeUsageAttribute Default; // 0x00
	
		// Properties
		public bool AllowMultiple { get; set; } // 0x00929CD8-0x00929CE0 0x00929CE0-0x00929CEC
		public bool Inherited { get; set; } // 0x00929CEC-0x00929CF4 0x00929CF4-0x00929D00
	
		// Constructors
		public AttributeUsageAttribute(AttributeTargets validOn); // 0x00929C9C-0x00929CD8
		static AttributeUsageAttribute(); // 0x00929D00-0x00929D80
	}

	[Serializable]
	[ComVisible] // 0x00393ED4-0x00393EE8
	public class BadImageFormatException : SystemException // TypeDefIndex: 154
	{
		// Fields
		private string _fileName; // 0x88
		private string _fusionLog; // 0x90
	
		// Properties
		public override string Message { get; } // 0x00929E9C-0x00929EC0 
		public string FusionLog { get; } // 0x0092A26C-0x0092A274 
	
		// Constructors
		public BadImageFormatException(); // 0x00929D80-0x00929DF4
		public BadImageFormatException(string message); // 0x00929DF4-0x00929E28
		public BadImageFormatException(string message, Exception inner); // 0x00929E28-0x00929E5C
		public BadImageFormatException(string message, string fileName); // 0x00929E5C-0x00929E9C
		protected BadImageFormatException(SerializationInfo info, StreamingContext context); // 0x0092A274-0x0092A3C8
	
		// Methods
		private void SetMessageField(); // 0x00929EC0-0x00929F68
		public override string ToString(); // 0x00929F68-0x0092A26C
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0092A3C8-0x0092A584
	}

	public static class BitConverter // TypeDefIndex: 155
	{
		// Fields
		public static readonly bool IsLittleEndian; // 0x00
	
		// Constructors
		static BitConverter(); // 0x0092B2D4-0x0092B338
	
		// Methods
		private static bool AmILittleEndian(); // 0x0092A584-0x0092A58C
		public static byte[] GetBytes(short value); // 0x0092A58C-0x0092A640
		public static byte[] GetBytes(int value); // 0x0092A640-0x0092A6F4
		public static byte[] GetBytes(float value); // 0x0092A6F4-0x0092A758
		public static short ToInt16(byte[] value, int startIndex); // 0x0092A758-0x0092A874
		public static int ToInt32(byte[] value, int startIndex); // 0x0092A874-0x0092A9AC
		public static long ToInt64(byte[] value, int startIndex); // 0x0092A9AC-0x0092AB10
		[CLSCompliant] // 0x0039CA24-0x0039CA38
		public static ushort ToUInt16(byte[] value, int startIndex); // 0x0092AB10-0x0092ABD8
		[CLSCompliant] // 0x0039CA38-0x0039CA4C
		public static uint ToUInt32(byte[] value, int startIndex); // 0x0092ABD8-0x0092ACA0
		[CLSCompliant] // 0x0039CA4C-0x0039CA60
		public static ulong ToUInt64(byte[] value, int startIndex); // 0x0092ACA0-0x0092AD68
		public static float ToSingle(byte[] value, int startIndex); // 0x0092AD68-0x0092AE38
		private static char GetHexValue(int i); // 0x0092AE38-0x0092AE50
		public static string ToString(byte[] value, int startIndex, int length); // 0x0092AE50-0x0092B214
		public static string ToString(byte[] value); // 0x0092B214-0x0092B2C4
		public static long DoubleToInt64Bits(double value); // 0x0092B2C4-0x0092B2CC
		public static double Int64BitsToDouble(long value); // 0x0092B2CC-0x0092B2D4
	}

	[Serializable]
	[ComVisible] // 0x00393EE8-0x00393EFC
	public struct Boolean : IComparable, IConvertible, IComparable<bool>, IEquatable<bool> // TypeDefIndex: 156
	{
		// Fields
		private bool m_value; // 0x00
		internal const int True = 1; // Metadata: 0x00203178
		internal const int False = 0; // Metadata: 0x0020317C
		internal const string TrueLiteral = "True"; // Metadata: 0x00203180
		internal const string FalseLiteral = "False"; // Metadata: 0x00203188
		public static readonly string TrueString; // 0x00
		public static readonly string FalseString; // 0x08
	
		// Constructors
		static Boolean(); // 0x0092D374-0x0092D3E8
	
		// Methods
		public override int GetHashCode(); // 0x0092B338-0x0092B3A8
		public override string ToString(); // 0x0092B3A8-0x0092B408
		public string ToString(IFormatProvider provider); // 0x0092B408-0x0092B4F0
		public override bool Equals(object obj); // 0x0092B4F0-0x0092B50C
		public bool Equals(bool obj); // 0x0092B50C-0x0092B614
		public int CompareTo(object obj); // 0x0092B614-0x0092B644
		public int CompareTo(bool value); // 0x0092B644-0x0092B664
		public static bool Parse(string value); // 0x0092B664-0x0092B778
		public static bool TryParse(string value, out bool result); // 0x0092B778-0x0092B8BC
		private static string TrimWhiteSpaceAndNull(string value); // 0x0092B8BC-0x0092BA64
		public TypeCode GetTypeCode(); // 0x0092BB5C-0x0092BB64
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x0092BB64-0x0092BC74
		char IConvertible.ToChar(IFormatProvider provider); // 0x0092BC74-0x0092BCF0
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x0092BCF0-0x0092BD68
		byte IConvertible.ToByte(IFormatProvider provider); // 0x0092BD68-0x0092BDE0
		short IConvertible.ToInt16(IFormatProvider provider); // 0x0092BDE0-0x0092BE58
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x0092BE58-0x0092BED0
		int IConvertible.ToInt32(IFormatProvider provider); // 0x0092BED0-0x0092BF48
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x0092BF48-0x0092BFC0
		long IConvertible.ToInt64(IFormatProvider provider); // 0x0092BFC0-0x0092D038
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x0092D038-0x0092D0B0
		float IConvertible.ToSingle(IFormatProvider provider); // 0x0092D0B0-0x0092D128
		double IConvertible.ToDouble(IFormatProvider provider); // 0x0092D128-0x0092D1A0
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x0092D1A0-0x0092D2A8
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x0092D2A8-0x0092D36C
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x0092D36C-0x0092D374
	}

	[ComVisible] // 0x00393EFC-0x00393F10
	public static class Buffer // TypeDefIndex: 157
	{
		// Methods
		internal static bool InternalBlockCopy(Array src, int srcOffsetBytes, Array dst, int dstOffsetBytes, int byteCount); // 0x0092D3E8-0x0092D3EC
		internal static unsafe int IndexOfByte(byte* src, byte value, int index, int count); // 0x0092D3EC-0x0092D518
		private static int _ByteLength(Array array); // 0x0092D518-0x0092D51C
		internal static unsafe void ZeroMemory(byte* src, long len); // 0x0092D51C-0x0092D540
		[ReliabilityContract] // 0x0039CA60-0x0039CA78
		internal static unsafe void Memcpy(byte[] dest, int destIndex, byte* src, int srcIndex, int len); // 0x0092D540-0x0092D570
		[ReliabilityContract] // 0x0039CA78-0x0039CA90
		internal static unsafe void Memcpy(byte* pDest, int destIndex, byte[] src, int srcIndex, int len); // 0x0092D5CC-0x0092D5FC
		public static int ByteLength(Array array); // 0x0092D5FC-0x0092D6D4
		public static void BlockCopy(Array src, int srcOffset, Array dst, int dstOffset, int count); // 0x0092D6D4-0x0092D8E8
		internal static unsafe void memcpy4(byte* dest, byte* src, int size); // 0x0092D8E8-0x0092D974
		internal static unsafe void memcpy2(byte* dest, byte* src, int size); // 0x0092D974-0x0092D9F0
		private static unsafe void memcpy1(byte* dest, byte* src, int size); // 0x0092D9F0-0x0092DB74
		internal static unsafe void Memcpy(byte* dest, byte* src, int size); // 0x0092D570-0x0092D5CC
	}

	[Serializable]
	[ComVisible] // 0x00393F10-0x00393F24
	public struct Byte : IComparable, IFormattable, IConvertible, IComparable<byte>, IEquatable<byte> // TypeDefIndex: 158
	{
		// Fields
		private byte m_value; // 0x00
		public const byte MaxValue = 255; // Metadata: 0x00203191
		public const byte MinValue = 0; // Metadata: 0x00203192
	
		// Methods
		public int CompareTo(object value); // 0x0092DB74-0x0092DB88
		public int CompareTo(byte value); // 0x0092DB88-0x0092DC1C
		public override bool Equals(object obj); // 0x0092DC1C-0x0092DC34
		public bool Equals(byte obj); // 0x0092DC34-0x0092DC4C
		public override int GetHashCode(); // 0x0092DC4C-0x0092DC54
		public static byte Parse(string s, IFormatProvider provider); // 0x0092DC54-0x0092DC88
		public static byte Parse(string s, NumberStyles style, IFormatProvider provider); // 0x0092DE00-0x0092DE50
		private static byte Parse(string s, NumberStyles style, NumberFormatInfo info); // 0x0092DC88-0x0092DE00
		public override string ToString(); // 0x0092DE50-0x0092DEBC
		public string ToString(string format); // 0x0092DEBC-0x0092DF2C
		public string ToString(IFormatProvider provider); // 0x0092DF2C-0x0092DFA0
		public string ToString(string format, IFormatProvider provider); // 0x0092DFA0-0x0092DFDC
		public TypeCode GetTypeCode(); // 0x0092DFDC-0x0092E050
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x0092E050-0x0092E0C4
		char IConvertible.ToChar(IFormatProvider provider); // 0x0092E0C4-0x0092E138
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x0092E138-0x0092E140
		byte IConvertible.ToByte(IFormatProvider provider); // 0x0092E140-0x0092E1B4
		short IConvertible.ToInt16(IFormatProvider provider); // 0x0092E1B4-0x0092E228
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x0092E228-0x0092E29C
		int IConvertible.ToInt32(IFormatProvider provider); // 0x0092E29C-0x0092E310
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x0092E310-0x0092E384
		long IConvertible.ToInt64(IFormatProvider provider); // 0x0092E384-0x0092E3F8
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x0092E3F8-0x0092E46C
		float IConvertible.ToSingle(IFormatProvider provider); // 0x0092E46C-0x0092E4E0
		double IConvertible.ToDouble(IFormatProvider provider); // 0x0092E4E0-0x0092E554
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x0092E554-0x0092E65C
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x0092E65C-0x0092E718
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x0092E718-0x0092E720
	}

	[Serializable]
	[ComVisible] // 0x00393F24-0x00393F38
	public class CannotUnloadAppDomainException : SystemException // TypeDefIndex: 159
	{
		// Constructors
		public CannotUnloadAppDomainException(); // 0x0092EE38-0x0092EEAC
		public CannotUnloadAppDomainException(string message); // 0x0092EEAC-0x0092EEE0
		protected CannotUnloadAppDomainException(SerializationInfo info, StreamingContext context); // 0x0092EEE0-0x0092EEE8
	}

	[Serializable]
	[ComVisible] // 0x00393F38-0x00393F4C
	public struct Char : IComparable, IConvertible, IComparable<char>, IEquatable<char> // TypeDefIndex: 160
	{
		// Fields
		internal char m_value; // 0x00
		public const char MaxValue = '\xffff'; // Metadata: 0x00203193
		public const char MinValue = '\x0000'; // Metadata: 0x00203195
		private static readonly byte[] categoryForLatin1; // 0x00
		internal const int UNICODE_PLANE00_END = 65535; // Metadata: 0x00203197
		internal const int UNICODE_PLANE01_START = 65536; // Metadata: 0x0020319B
		internal const int UNICODE_PLANE16_END = 1114111; // Metadata: 0x0020319F
		internal const int HIGH_SURROGATE_START = 55296; // Metadata: 0x002031A3
		internal const int LOW_SURROGATE_END = 57343; // Metadata: 0x002031A7
	
		// Constructors
		static Char(); // 0x00931098-0x00931114
	
		// Methods
		private static bool IsLatin1(char ch); // 0x0092EEE8-0x0092EEF8
		private static bool IsAscii(char ch); // 0x0092EEF8-0x0092EF08
		private static UnicodeCategory GetLatin1UnicodeCategory(char ch); // 0x0092EF08-0x0092EFB4
		public override int GetHashCode(); // 0x0092EFB4-0x0092F048
		public override bool Equals(object obj); // 0x0092F048-0x0092F060
		public bool Equals(char obj); // 0x0092F060-0x0092F148
		public int CompareTo(object value); // 0x0092F148-0x0092F15C
		public int CompareTo(char value); // 0x0092F15C-0x0092F1DC
		public override string ToString(); // 0x0092F1F4-0x0092F270
		public string ToString(IFormatProvider provider); // 0x0092F270-0x0092F278
		public static string ToString(char c); // 0x0092F1DC-0x0092F1F4
		public static char Parse(string s); // 0x0092F278-0x0092F368
		public static bool IsDigit(char c); // 0x0092F368-0x0092F41C
		internal static bool CheckLetter(UnicodeCategory uc); // 0x0092F41C-0x0092F428
		public static bool IsLetter(char c); // 0x0092F428-0x0092F548
		private static bool IsWhiteSpaceLatin1(char c); // 0x0092F548-0x0092F58C
		public static bool IsWhiteSpace(char c); // 0x0092BA64-0x0092BB5C
		public static bool IsUpper(char c); // 0x0092F58C-0x0092F688
		public static bool IsLower(char c); // 0x0092F688-0x0092F784
		internal static bool CheckLetterOrDigit(UnicodeCategory uc); // 0x0092F784-0x0092F7A0
		public static bool IsLetterOrDigit(char c); // 0x0092F7A0-0x0092F894
		public static char ToUpper(char c, CultureInfo culture); // 0x0092F894-0x0092F950
		public static char ToUpper(char c); // 0x0092F950-0x0092F9E8
		public static char ToUpperInvariant(char c); // 0x0092F9E8-0x0092FA80
		public static char ToLower(char c, CultureInfo culture); // 0x0092FA80-0x0092FB3C
		public static char ToLower(char c); // 0x0092FB3C-0x0092FBD4
		public static char ToLowerInvariant(char c); // 0x0092FBD4-0x0092FC6C
		public TypeCode GetTypeCode(); // 0x0092FC6C-0x0092FD74
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x0092FD74-0x0092FD80
		char IConvertible.ToChar(IFormatProvider provider); // 0x0092FD80-0x0092FDF4
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x0092FDF4-0x0092FE68
		byte IConvertible.ToByte(IFormatProvider provider); // 0x0092FE68-0x0092FEDC
		short IConvertible.ToInt16(IFormatProvider provider); // 0x0092FEDC-0x0092FF50
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x0092FF50-0x0092FFC4
		int IConvertible.ToInt32(IFormatProvider provider); // 0x0092FFC4-0x00930038
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x00930038-0x009300AC
		long IConvertible.ToInt64(IFormatProvider provider); // 0x009300AC-0x00930120
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x00930120-0x00930228
		float IConvertible.ToSingle(IFormatProvider provider); // 0x00930228-0x00930334
		double IConvertible.ToDouble(IFormatProvider provider); // 0x00930334-0x00930440
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x00930440-0x0093054C
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x0093054C-0x00930608
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x00930608-0x00930610
		public static bool IsLetterOrDigit(string s, int index); // 0x00930610-0x009307AC
		internal static bool CheckNumber(UnicodeCategory uc); // 0x009307AC-0x009307BC
		public static bool IsNumber(char c); // 0x009307BC-0x009308DC
		public static bool IsSurrogate(char c); // 0x009308DC-0x009308EC
		public static bool IsSurrogate(string s, int index); // 0x009308EC-0x009309FC
		public static bool IsWhiteSpace(string s, int index); // 0x009309FC-0x00930BB8
		public static UnicodeCategory GetUnicodeCategory(char c); // 0x00930BB8-0x00930C74
		public static UnicodeCategory GetUnicodeCategory(string s, int index); // 0x00930C74-0x00930DF4
		public static bool IsHighSurrogate(char c); // 0x00930DF4-0x00930E04
		public static bool IsHighSurrogate(string s, int index); // 0x00930E04-0x00930F18
		public static bool IsLowSurrogate(char c); // 0x00930F18-0x00930F28
		public static bool IsSurrogatePair(char highSurrogate, char lowSurrogate); // 0x00930F28-0x00930F4C
		public static int ConvertToUtf32(char highSurrogate, char lowSurrogate); // 0x00930F4C-0x00931098
	}

	[Serializable]
	[ComVisible] // 0x00393F4C-0x00393F60
	public sealed class CharEnumerator : ICloneable, IEnumerator<char> // TypeDefIndex: 161
	{
		// Fields
		private string str; // 0x10
		private int index; // 0x18
		private char currentElement; // 0x1C
	
		// Properties
		object IEnumerator.Current { get; } // 0x00931234-0x0093132C 
		public char Current { get; } // 0x0093132C-0x0093140C 
	
		// Constructors
		internal CharEnumerator(string str); // 0x00931114-0x00931148
	
		// Methods
		public object Clone(); // 0x00931148-0x00931150
		public bool MoveNext(); // 0x00931150-0x00931200
		public void Dispose(); // 0x00931200-0x00931234
		public void Reset(); // 0x0093140C-0x0093141C
	}

	[Serializable]
	[AttributeUsage] // 0x00393F60-0x00393FC4
	[ComVisible] // 0x00393F60-0x00393FC4
	public sealed class CLSCompliantAttribute : Attribute // TypeDefIndex: 162
	{
		// Fields
		private bool m_compliant; // 0x10
	
		// Constructors
		public CLSCompliantAttribute(bool isCompliant); // 0x0092EE08-0x0092EE38
	}

	public delegate void ConsoleCancelEventHandler(object sender, ConsoleCancelEventArgs e); // TypeDefIndex: 163; 0x0054C284-0x0054CA04

	[Serializable]
	public sealed class ConsoleCancelEventArgs : EventArgs // TypeDefIndex: 164
	{
		// Fields
		private ConsoleSpecialKey _type; // 0x10
		private bool _cancel; // 0x14
	
		// Properties
		public bool Cancel { get; } // 0x0054CA04-0x0054CA18 
	
		// Constructors
		internal ConsoleCancelEventArgs(ConsoleSpecialKey type); // 0x0054C204-0x0054C284
	}

	[Serializable]
	public enum ConsoleColor // TypeDefIndex: 165
	{
		Black = 0,
		DarkBlue = 1,
		DarkGreen = 2,
		DarkCyan = 3,
		DarkRed = 4,
		DarkMagenta = 5,
		DarkYellow = 6,
		Gray = 7,
		DarkGray = 8,
		Blue = 9,
		Green = 10,
		Cyan = 11,
		Red = 12,
		Magenta = 13,
		Yellow = 14,
		White = 15
	}

	[Serializable]
	public enum ConsoleKey // TypeDefIndex: 166
	{
		Backspace = 8,
		Tab = 9,
		Clear = 12,
		Enter = 13,
		Pause = 19,
		Escape = 27,
		Spacebar = 32,
		PageUp = 33,
		PageDown = 34,
		End = 35,
		Home = 36,
		LeftArrow = 37,
		UpArrow = 38,
		RightArrow = 39,
		DownArrow = 40,
		Select = 41,
		Print = 42,
		Execute = 43,
		PrintScreen = 44,
		Insert = 45,
		Delete = 46,
		Help = 47,
		D0 = 48,
		D1 = 49,
		D2 = 50,
		D3 = 51,
		D4 = 52,
		D5 = 53,
		D6 = 54,
		D7 = 55,
		D8 = 56,
		D9 = 57,
		A = 65,
		B = 66,
		C = 67,
		D = 68,
		E = 69,
		F = 70,
		G = 71,
		H = 72,
		I = 73,
		J = 74,
		K = 75,
		L = 76,
		M = 77,
		N = 78,
		O = 79,
		P = 80,
		Q = 81,
		R = 82,
		S = 83,
		T = 84,
		U = 85,
		V = 86,
		W = 87,
		X = 88,
		Y = 89,
		Z = 90,
		LeftWindows = 91,
		RightWindows = 92,
		Applications = 93,
		Sleep = 95,
		NumPad0 = 96,
		NumPad1 = 97,
		NumPad2 = 98,
		NumPad3 = 99,
		NumPad4 = 100,
		NumPad5 = 101,
		NumPad6 = 102,
		NumPad7 = 103,
		NumPad8 = 104,
		NumPad9 = 105,
		Multiply = 106,
		Add = 107,
		Separator = 108,
		Subtract = 109,
		Decimal = 110,
		Divide = 111,
		F1 = 112,
		F2 = 113,
		F3 = 114,
		F4 = 115,
		F5 = 116,
		F6 = 117,
		F7 = 118,
		F8 = 119,
		F9 = 120,
		F10 = 121,
		F11 = 122,
		F12 = 123,
		F13 = 124,
		F14 = 125,
		F15 = 126,
		F16 = 127,
		F17 = 128,
		F18 = 129,
		F19 = 130,
		F20 = 131,
		F21 = 132,
		F22 = 133,
		F23 = 134,
		F24 = 135,
		BrowserBack = 166,
		BrowserForward = 167,
		BrowserRefresh = 168,
		BrowserStop = 169,
		BrowserSearch = 170,
		BrowserFavorites = 171,
		BrowserHome = 172,
		VolumeMute = 173,
		VolumeDown = 174,
		VolumeUp = 175,
		MediaNext = 176,
		MediaPrevious = 177,
		MediaStop = 178,
		MediaPlay = 179,
		LaunchMail = 180,
		LaunchMediaSelect = 181,
		LaunchApp1 = 182,
		LaunchApp2 = 183,
		Oem1 = 186,
		OemPlus = 187,
		OemComma = 188,
		OemMinus = 189,
		OemPeriod = 190,
		Oem2 = 191,
		Oem3 = 192,
		Oem4 = 219,
		Oem5 = 220,
		Oem6 = 221,
		Oem7 = 222,
		Oem8 = 223,
		Oem102 = 226,
		Process = 229,
		Packet = 231,
		Attention = 246,
		CrSel = 247,
		ExSel = 248,
		EraseEndOfFile = 249,
		Play = 250,
		Zoom = 251,
		NoName = 252,
		Pa1 = 253,
		OemClear = 254
	}

	[Serializable]
	public struct ConsoleKeyInfo // TypeDefIndex: 167
	{
		// Fields
		private char _keyChar; // 0x00
		private ConsoleKey _key; // 0x04
		private ConsoleModifiers _mods; // 0x08
	
		// Properties
		public char KeyChar { get; } // 0x0054E958-0x0054E968 
		public ConsoleKey Key { get; } // 0x0054E968-0x0054EA18 
	
		// Constructors
		public ConsoleKeyInfo(char keyChar, ConsoleKey key, bool shift, bool alt, bool control); // 0x0054E93C-0x0054E958
	
		// Methods
		public override bool Equals(object value); // 0x0054EA18-0x0054EA20
		public bool Equals(ConsoleKeyInfo obj); // 0x0054EA20-0x0054EA54
		public override int GetHashCode(); // 0x0054EA54-0x0054EA64
	}

	[Serializable]
	[Flags] // 0x00393FC4-0x00393FD4
	public enum ConsoleModifiers // TypeDefIndex: 168
	{
		Alt = 1,
		Shift = 2,
		Control = 4
	}

	[Serializable]
	public enum ConsoleSpecialKey // TypeDefIndex: 169
	{
		ControlC = 0,
		ControlBreak = 1
	}

	[Serializable]
	[ComVisible] // 0x00393FD4-0x00393FE8
	public abstract class ContextBoundObject : MarshalByRefObject // TypeDefIndex: 170
	{
		// Constructors
		protected ContextBoundObject(); // 0x0054EA64-0x0054EA6C
	}

	[Serializable]
	[AttributeUsage] // 0x00393FE8-0x0039403C
	[ComVisible] // 0x00393FE8-0x0039403C
	public class ContextStaticAttribute : Attribute // TypeDefIndex: 171
	{
		// Constructors
		public ContextStaticAttribute(); // 0x0054EA6C-0x0054EA74
	}

	[Flags] // 0x0039403C-0x0039404C
	public enum Base64FormattingOptions // TypeDefIndex: 172
	{
		None = 0,
		InsertLineBreaks = 1
	}

	public static class Convert // TypeDefIndex: 173
	{
		// Fields
		internal static readonly RuntimeType[] ConvertTypes; // 0x00
		private static readonly RuntimeType EnumType; // 0x08
		internal static readonly char[] base64Table; // 0x10
		public static readonly object DBNull; // 0x18
	
		// Constructors
		static Convert(); // 0x0055AE90-0x0055C800
	
		// Methods
		public static TypeCode GetTypeCode(object value); // 0x0054EA74-0x0054EB48
		public static object ChangeType(object value, TypeCode typeCode, IFormatProvider provider); // 0x0054EB48-0x0054F3D8
		internal static object DefaultToType(IConvertible value, Type targetType, IFormatProvider provider); // 0x0054F3D8-0x00550880
		public static object ChangeType(object value, Type conversionType, IFormatProvider provider); // 0x00550880-0x005519E8
		public static bool ToBoolean(object value, IFormatProvider provider); // 0x005519E8-0x00551B88
		[CLSCompliant] // 0x0039CA90-0x0039CAA4
		public static bool ToBoolean(sbyte value); // 0x00551B88-0x00551B94
		public static bool ToBoolean(byte value); // 0x00551B94-0x00551BA0
		public static bool ToBoolean(short value); // 0x00551BA0-0x00551BAC
		[CLSCompliant] // 0x0039CAA4-0x0039CAB8
		public static bool ToBoolean(ushort value); // 0x00551BAC-0x00551BB8
		public static bool ToBoolean(int value); // 0x00551BB8-0x00551BC4
		[CLSCompliant] // 0x0039CAB8-0x0039CACC
		public static bool ToBoolean(uint value); // 0x00551BC4-0x00551BD0
		public static bool ToBoolean(long value); // 0x00551BD0-0x00551BDC
		[CLSCompliant] // 0x0039CACC-0x0039CAE0
		public static bool ToBoolean(ulong value); // 0x00551BDC-0x00551BE8
		public static bool ToBoolean(string value); // 0x00551BE8-0x00551C64
		public static bool ToBoolean(string value, IFormatProvider provider); // 0x00551C64-0x00551CE0
		public static bool ToBoolean(float value); // 0x00551CE0-0x00551CEC
		public static bool ToBoolean(double value); // 0x00551CEC-0x00551CF8
		public static bool ToBoolean(decimal value); // 0x00551CF8-0x00551D7C
		public static char ToChar(object value, IFormatProvider provider); // 0x00551D7C-0x00551F18
		[CLSCompliant] // 0x0039CAE0-0x0039CAF4
		public static char ToChar(sbyte value); // 0x00551F18-0x00551FB8
		public static char ToChar(byte value); // 0x00551FB8-0x00551FC0
		public static char ToChar(short value); // 0x00551FC0-0x00552064
		[CLSCompliant] // 0x0039CAF4-0x0039CB08
		public static char ToChar(ushort value); // 0x00552064-0x00552068
		public static char ToChar(int value); // 0x00552068-0x0055210C
		[CLSCompliant] // 0x0039CB08-0x0039CB1C
		public static char ToChar(uint value); // 0x0055210C-0x005521B0
		public static char ToChar(long value); // 0x005521B0-0x00552254
		[CLSCompliant] // 0x0039CB1C-0x0039CB30
		public static char ToChar(ulong value); // 0x00552254-0x005522F8
		public static char ToChar(string value, IFormatProvider provider); // 0x005522F8-0x005523EC
		[CLSCompliant] // 0x0039CB30-0x0039CB44
		public static sbyte ToSByte(object value, IFormatProvider provider); // 0x005523EC-0x00552588
		[CLSCompliant] // 0x0039CB44-0x0039CB58
		public static sbyte ToSByte(bool value); // 0x00552588-0x00552590
		[CLSCompliant] // 0x0039CB58-0x0039CB6C
		public static sbyte ToSByte(char value); // 0x00552590-0x00552638
		[CLSCompliant] // 0x0039CB6C-0x0039CB80
		public static sbyte ToSByte(byte value); // 0x00552638-0x005526DC
		[CLSCompliant] // 0x0039CB80-0x0039CB94
		public static sbyte ToSByte(short value); // 0x005526DC-0x00552788
		[CLSCompliant] // 0x0039CB94-0x0039CBA8
		public static sbyte ToSByte(ushort value); // 0x00552788-0x00552830
		[CLSCompliant] // 0x0039CBA8-0x0039CBBC
		public static sbyte ToSByte(int value); // 0x00552830-0x005528D8
		[CLSCompliant] // 0x0039CBBC-0x0039CBD0
		public static sbyte ToSByte(uint value); // 0x005528D8-0x0055297C
		[CLSCompliant] // 0x0039CBD0-0x0039CBE4
		public static sbyte ToSByte(long value); // 0x0055297C-0x00552A24
		[CLSCompliant] // 0x0039CBE4-0x0039CBF8
		public static sbyte ToSByte(ulong value); // 0x00552A24-0x00552AC8
		[CLSCompliant] // 0x0039CBF8-0x0039CC0C
		public static sbyte ToSByte(float value); // 0x00552AC8-0x00552B34
		[CLSCompliant] // 0x0039CC0C-0x0039CC20
		public static sbyte ToSByte(double value); // 0x00552B34-0x00552BA4
		[CLSCompliant] // 0x0039CC20-0x0039CC34
		public static sbyte ToSByte(decimal value); // 0x00552CCC-0x00552D50
		[CLSCompliant] // 0x0039CC34-0x0039CC48
		public static sbyte ToSByte(string value, IFormatProvider provider); // 0x00552D50-0x00552D64
		public static byte ToByte(object value, IFormatProvider provider); // 0x00552D64-0x00552F00
		public static byte ToByte(bool value); // 0x00552F00-0x00552F08
		public static byte ToByte(char value); // 0x00552F08-0x00552FB0
		[CLSCompliant] // 0x0039CC48-0x0039CC5C
		public static byte ToByte(sbyte value); // 0x00552FB0-0x00554054
		public static byte ToByte(short value); // 0x00554054-0x005540FC
		[CLSCompliant] // 0x0039CC5C-0x0039CC70
		public static byte ToByte(ushort value); // 0x005540FC-0x005541A4
		public static byte ToByte(int value); // 0x005541A4-0x00554248
		[CLSCompliant] // 0x0039CC70-0x0039CC84
		public static byte ToByte(uint value); // 0x00554248-0x005542EC
		public static byte ToByte(long value); // 0x005542EC-0x00554390
		[CLSCompliant] // 0x0039CC84-0x0039CC98
		public static byte ToByte(ulong value); // 0x00554390-0x00554434
		public static byte ToByte(float value); // 0x00554434-0x005544A0
		public static byte ToByte(double value); // 0x005544A0-0x00554510
		public static byte ToByte(decimal value); // 0x00554510-0x00554594
		public static byte ToByte(string value); // 0x00554594-0x0055461C
		public static byte ToByte(string value, IFormatProvider provider); // 0x0055461C-0x00554638
		public static short ToInt16(object value, IFormatProvider provider); // 0x00554638-0x005547D4
		public static short ToInt16(bool value); // 0x005547D4-0x005547DC
		public static short ToInt16(char value); // 0x005547DC-0x00554880
		[CLSCompliant] // 0x0039CC98-0x0039CCAC
		public static short ToInt16(sbyte value); // 0x00554880-0x00554888
		public static short ToInt16(byte value); // 0x00554888-0x00554890
		[CLSCompliant] // 0x0039CCAC-0x0039CCC0
		public static short ToInt16(ushort value); // 0x00554890-0x00554934
		public static short ToInt16(int value); // 0x00554934-0x005549DC
		[CLSCompliant] // 0x0039CCC0-0x0039CCD4
		public static short ToInt16(uint value); // 0x005549DC-0x00554A80
		public static short ToInt16(long value); // 0x00554A80-0x00554B28
		[CLSCompliant] // 0x0039CCD4-0x0039CCE8
		public static short ToInt16(ulong value); // 0x00554B28-0x00554BCC
		public static short ToInt16(float value); // 0x00554BCC-0x00554C38
		public static short ToInt16(double value); // 0x00554C38-0x00554CA8
		public static short ToInt16(decimal value); // 0x00554CA8-0x00554D2C
		public static short ToInt16(string value, IFormatProvider provider); // 0x00554D2C-0x00554D48
		[CLSCompliant] // 0x0039CCE8-0x0039CCFC
		public static ushort ToUInt16(object value, IFormatProvider provider); // 0x00554D48-0x00554EE4
		[CLSCompliant] // 0x0039CCFC-0x0039CD10
		public static ushort ToUInt16(bool value); // 0x00554EE4-0x00554EEC
		[CLSCompliant] // 0x0039CD10-0x0039CD24
		public static ushort ToUInt16(char value); // 0x00554EEC-0x00554EF0
		[CLSCompliant] // 0x0039CD24-0x0039CD38
		public static ushort ToUInt16(sbyte value); // 0x00554EF0-0x00554F90
		[CLSCompliant] // 0x0039CD38-0x0039CD4C
		public static ushort ToUInt16(byte value); // 0x00554F90-0x00554F98
		[CLSCompliant] // 0x0039CD4C-0x0039CD60
		public static ushort ToUInt16(short value); // 0x00554F98-0x0055603C
		[CLSCompliant] // 0x0039CD60-0x0039CD74
		public static ushort ToUInt16(int value); // 0x0055603C-0x005560E0
		[CLSCompliant] // 0x0039CD74-0x0039CD88
		public static ushort ToUInt16(uint value); // 0x005560E0-0x00556184
		[CLSCompliant] // 0x0039CD88-0x0039CD9C
		public static ushort ToUInt16(long value); // 0x00556184-0x00556228
		[CLSCompliant] // 0x0039CD9C-0x0039CDB0
		public static ushort ToUInt16(ulong value); // 0x00556228-0x005562CC
		[CLSCompliant] // 0x0039CDB0-0x0039CDC4
		public static ushort ToUInt16(float value); // 0x005562CC-0x00556338
		[CLSCompliant] // 0x0039CDC4-0x0039CDD8
		public static ushort ToUInt16(double value); // 0x00556338-0x005563A8
		[CLSCompliant] // 0x0039CDD8-0x0039CDEC
		public static ushort ToUInt16(decimal value); // 0x005563A8-0x0055642C
		[CLSCompliant] // 0x0039CDEC-0x0039CE00
		public static ushort ToUInt16(string value, IFormatProvider provider); // 0x0055642C-0x00556448
		public static int ToInt32(object value); // 0x00556448-0x005565D8
		public static int ToInt32(object value, IFormatProvider provider); // 0x005565D8-0x00556774
		public static int ToInt32(bool value); // 0x00556774-0x0055677C
		public static int ToInt32(char value); // 0x0055677C-0x00556784
		public static int ToInt32(byte value); // 0x00556784-0x0055678C
		public static int ToInt32(short value); // 0x0055678C-0x00556794
		[CLSCompliant] // 0x0039CE00-0x0039CE14
		public static int ToInt32(ushort value); // 0x00556794-0x0055679C
		[CLSCompliant] // 0x0039CE14-0x0039CE28
		public static int ToInt32(uint value); // 0x0055679C-0x0055683C
		public static int ToInt32(long value); // 0x0055683C-0x005568E8
		[CLSCompliant] // 0x0039CE28-0x0039CE3C
		public static int ToInt32(ulong value); // 0x005568E8-0x0055698C
		public static int ToInt32(float value); // 0x0055698C-0x005569F8
		public static int ToInt32(double value); // 0x00552BA4-0x00552CCC
		public static int ToInt32(decimal value); // 0x005569F8-0x00556A70
		public static int ToInt32(string value); // 0x00556A70-0x00556AF8
		public static int ToInt32(string value, IFormatProvider provider); // 0x00556AF8-0x00556B14
		[CLSCompliant] // 0x0039CE3C-0x0039CE50
		public static uint ToUInt32(object value); // 0x00556B14-0x00556CA4
		[CLSCompliant] // 0x0039CE50-0x0039CE64
		public static uint ToUInt32(object value, IFormatProvider provider); // 0x00556CA4-0x00556E40
		[CLSCompliant] // 0x0039CE64-0x0039CE78
		public static uint ToUInt32(bool value); // 0x00556E40-0x00556E48
		[CLSCompliant] // 0x0039CE78-0x0039CE8C
		public static uint ToUInt32(char value); // 0x00556E48-0x00556E50
		[CLSCompliant] // 0x0039CE8C-0x0039CEA0
		public static uint ToUInt32(sbyte value); // 0x00556E50-0x00556EF0
		[CLSCompliant] // 0x0039CEA0-0x0039CEB4
		public static uint ToUInt32(byte value); // 0x00556EF0-0x00556EF8
		[CLSCompliant] // 0x0039CEB4-0x0039CEC8
		public static uint ToUInt32(short value); // 0x00556EF8-0x00556F98
		[CLSCompliant] // 0x0039CEC8-0x0039CEDC
		public static uint ToUInt32(ushort value); // 0x00556F98-0x00556FA0
		[CLSCompliant] // 0x0039CEDC-0x0039CEF0
		public static uint ToUInt32(int value); // 0x00556FA0-0x00558040
		[CLSCompliant] // 0x0039CEF0-0x0039CF04
		public static uint ToUInt32(long value); // 0x00558040-0x005580E4
		[CLSCompliant] // 0x0039CF04-0x0039CF18
		public static uint ToUInt32(ulong value); // 0x005580E4-0x00558188
		[CLSCompliant] // 0x0039CF18-0x0039CF2C
		public static uint ToUInt32(float value); // 0x00558188-0x005581F4
		[CLSCompliant] // 0x0039CF2C-0x0039CF40
		public static uint ToUInt32(double value); // 0x005581F4-0x005582D8
		[CLSCompliant] // 0x0039CF40-0x0039CF54
		public static uint ToUInt32(decimal value); // 0x005582D8-0x0055835C
		[CLSCompliant] // 0x0039CF54-0x0039CF68
		public static uint ToUInt32(string value, IFormatProvider provider); // 0x0055835C-0x00558378
		public static long ToInt64(object value, IFormatProvider provider); // 0x00558378-0x00558514
		public static long ToInt64(bool value); // 0x00558514-0x0055851C
		public static long ToInt64(char value); // 0x0055851C-0x00558524
		[CLSCompliant] // 0x0039CF68-0x0039CF7C
		public static long ToInt64(sbyte value); // 0x00558524-0x0055852C
		public static long ToInt64(byte value); // 0x0055852C-0x00558534
		public static long ToInt64(short value); // 0x00558534-0x0055853C
		[CLSCompliant] // 0x0039CF7C-0x0039CF90
		public static long ToInt64(ushort value); // 0x0055853C-0x00558544
		public static long ToInt64(int value); // 0x00558544-0x0055854C
		[CLSCompliant] // 0x0039CF90-0x0039CFA4
		public static long ToInt64(uint value); // 0x0055854C-0x00558554
		[CLSCompliant] // 0x0039CFA4-0x0039CFB8
		public static long ToInt64(ulong value); // 0x00558554-0x005585F4
		public static long ToInt64(float value); // 0x005585F4-0x00558660
		public static long ToInt64(double value); // 0x00558660-0x0055876C
		public static long ToInt64(decimal value); // 0x0055876C-0x005587F0
		public static long ToInt64(string value); // 0x005587F0-0x00558878
		public static long ToInt64(string value, IFormatProvider provider); // 0x00558878-0x00558894
		[CLSCompliant] // 0x0039CFB8-0x0039CFCC
		public static ulong ToUInt64(object value, IFormatProvider provider); // 0x00558894-0x00558A30
		[CLSCompliant] // 0x0039CFCC-0x0039CFE0
		public static ulong ToUInt64(bool value); // 0x00558A30-0x00558A38
		[CLSCompliant] // 0x0039CFE0-0x0039CFF4
		public static ulong ToUInt64(char value); // 0x00558A38-0x00558A40
		[CLSCompliant] // 0x0039CFF4-0x0039D008
		public static ulong ToUInt64(sbyte value); // 0x00558A40-0x00558AE4
		[CLSCompliant] // 0x0039D008-0x0039D01C
		public static ulong ToUInt64(byte value); // 0x00558AE4-0x00558AEC
		[CLSCompliant] // 0x0039D01C-0x0039D030
		public static ulong ToUInt64(short value); // 0x00558AEC-0x00558B90
		[CLSCompliant] // 0x0039D030-0x0039D044
		public static ulong ToUInt64(ushort value); // 0x00558B90-0x00558B98
		[CLSCompliant] // 0x0039D044-0x0039D058
		public static ulong ToUInt64(int value); // 0x00558B98-0x00558C38
		[CLSCompliant] // 0x0039D058-0x0039D06C
		public static ulong ToUInt64(uint value); // 0x00558C38-0x00558C40
		[CLSCompliant] // 0x0039D06C-0x0039D080
		public static ulong ToUInt64(long value); // 0x00558C40-0x00558CE0
		[CLSCompliant] // 0x0039D080-0x0039D094
		public static ulong ToUInt64(float value); // 0x00558CE0-0x00558D4C
		[CLSCompliant] // 0x0039D094-0x0039D0A8
		public static ulong ToUInt64(double value); // 0x00558D4C-0x00558E4C
		[CLSCompliant] // 0x0039D0A8-0x0039D0BC
		public static ulong ToUInt64(decimal value); // 0x00558E4C-0x00558ED0
		[CLSCompliant] // 0x0039D0BC-0x0039D0D0
		public static ulong ToUInt64(string value, IFormatProvider provider); // 0x00558ED0-0x00558EEC
		public static float ToSingle(object value, IFormatProvider provider); // 0x00558EEC-0x00559088
		[CLSCompliant] // 0x0039D0D0-0x0039D0E4
		public static float ToSingle(sbyte value); // 0x00559088-0x00559094
		public static float ToSingle(byte value); // 0x00559094-0x005590A0
		public static float ToSingle(short value); // 0x005590A0-0x005590AC
		[CLSCompliant] // 0x0039D0E4-0x0039D0F8
		public static float ToSingle(ushort value); // 0x005590AC-0x005590B8
		public static float ToSingle(int value); // 0x005590B8-0x005590C0
		[CLSCompliant] // 0x0039D0F8-0x0039D10C
		public static float ToSingle(uint value); // 0x005590C0-0x005590CC
		public static float ToSingle(long value); // 0x005590CC-0x005590D4
		[CLSCompliant] // 0x0039D10C-0x0039D120
		public static float ToSingle(ulong value); // 0x005590D4-0x005590E0
		public static float ToSingle(double value); // 0x005590E0-0x005590E8
		public static float ToSingle(decimal value); // 0x005590E8-0x00559160
		public static float ToSingle(string value, IFormatProvider provider); // 0x00559160-0x00559180
		public static float ToSingle(bool value); // 0x00559180-0x00559194
		public static double ToDouble(object value, IFormatProvider provider); // 0x00559194-0x00559330
		[CLSCompliant] // 0x0039D120-0x0039D134
		public static double ToDouble(sbyte value); // 0x00559330-0x0055933C
		public static double ToDouble(byte value); // 0x0055933C-0x00559348
		public static double ToDouble(short value); // 0x00559348-0x00559354
		[CLSCompliant] // 0x0039D134-0x0039D148
		public static double ToDouble(ushort value); // 0x00559354-0x00559360
		public static double ToDouble(int value); // 0x00559360-0x00559368
		[CLSCompliant] // 0x0039D148-0x0039D15C
		public static double ToDouble(uint value); // 0x00559368-0x00559370
		public static double ToDouble(long value); // 0x00559370-0x00559378
		[CLSCompliant] // 0x0039D15C-0x0039D170
		public static double ToDouble(ulong value); // 0x00559378-0x00559380
		public static double ToDouble(float value); // 0x00559380-0x00559388
		public static double ToDouble(decimal value); // 0x00559388-0x00559400
		public static double ToDouble(string value, IFormatProvider provider); // 0x00559400-0x00559494
		public static double ToDouble(bool value); // 0x00559494-0x005594A8
		public static decimal ToDecimal(object value, IFormatProvider provider); // 0x005594A8-0x0055966C
		[CLSCompliant] // 0x0039D170-0x0039D184
		public static decimal ToDecimal(sbyte value); // 0x0055966C-0x005596D4
		public static decimal ToDecimal(byte value); // 0x005596D4-0x0055973C
		public static decimal ToDecimal(short value); // 0x0055973C-0x005597A4
		[CLSCompliant] // 0x0039D184-0x0039D198
		public static decimal ToDecimal(ushort value); // 0x005597A4-0x0055980C
		public static decimal ToDecimal(int value); // 0x0055980C-0x00559874
		[CLSCompliant] // 0x0039D198-0x0039D1AC
		public static decimal ToDecimal(uint value); // 0x00559874-0x005598DC
		public static decimal ToDecimal(long value); // 0x005598DC-0x00559944
		[CLSCompliant] // 0x0039D1AC-0x0039D1C0
		public static decimal ToDecimal(ulong value); // 0x00559944-0x005599AC
		public static decimal ToDecimal(float value); // 0x005599AC-0x00559A1C
		public static decimal ToDecimal(double value); // 0x00559A1C-0x00559A8C
		public static decimal ToDecimal(string value, IFormatProvider provider); // 0x00559A8C-0x00559B3C
		public static decimal ToDecimal(bool value); // 0x00559B3C-0x00559BA8
		public static DateTime ToDateTime(string value, IFormatProvider provider); // 0x00559BA8-0x00559D24
		public static string ToString(object value, IFormatProvider provider); // 0x00559DD0-0x00559F70
		public static string ToString(char value, IFormatProvider provider); // 0x00559F70-0x00559F98
		public static string ToString(int value, IFormatProvider provider); // 0x00559F98-0x00559FC0
		public static int ToInt32(string value, int fromBase); // 0x00559FC0-0x0055A098
		public static string ToString(byte value, int toBase); // 0x0055A098-0x0055A178
		public static string ToString(int value, int toBase); // 0x0055A178-0x0055A258
		public static string ToBase64String(byte[] inArray); // 0x0055A258-0x0055A310
		[ComVisible] // 0x0039D1C0-0x0039D1D4
		public static string ToBase64String(byte[] inArray, int offset, int length, Base64FormattingOptions options); // 0x0055A310-0x0055A5D8
		private static unsafe int ConvertToBase64Array(char* outChars, byte* inData, int offset, int length, bool insertLineBreaks); // 0x0055A6D0-0x0055A918
		private static int ToBase64_CalculateAndValidateOutputLength(int inputLength, bool insertLineBreaks); // 0x0055A5D8-0x0055A6D0
		public static byte[] FromBase64String(string s); // 0x0055A918-0x0055A9E8
		private static unsafe byte[] FromBase64CharPtr(char* inputPtr, int inputLength); // 0x0055A9E8-0x0055AB20
		private static unsafe int FromBase64_Decode(char* startInputPtr, int inputLength, byte* startDestPtr, int destLength); // 0x0055AC2C-0x0055AE90
		private static unsafe int FromBase64_ComputeResultLength(char* inputPtr, int inputLength); // 0x0055AB20-0x0055AC2C
	}

	[Serializable]
	public struct DateTime : IComparable, IFormattable, IConvertible, ISerializable, IComparable<DateTime>, IEquatable<DateTime> // TypeDefIndex: 174
	{
		// Fields
		private const long TicksPerMillisecond = 10000; // Metadata: 0x00203447
		private const long TicksPerSecond = 10000000; // Metadata: 0x0020344F
		private const long TicksPerMinute = 600000000; // Metadata: 0x00203457
		private const long TicksPerHour = 36000000000; // Metadata: 0x0020345F
		private const long TicksPerDay = 864000000000; // Metadata: 0x00203467
		private const int MillisPerSecond = 1000; // Metadata: 0x0020346F
		private const int MillisPerMinute = 60000; // Metadata: 0x00203473
		private const int MillisPerHour = 3600000; // Metadata: 0x00203477
		private const int MillisPerDay = 86400000; // Metadata: 0x0020347B
		private const int DaysPerYear = 365; // Metadata: 0x0020347F
		private const int DaysPer4Years = 1461; // Metadata: 0x00203483
		private const int DaysPer100Years = 36524; // Metadata: 0x00203487
		private const int DaysPer400Years = 146097; // Metadata: 0x0020348B
		private const int DaysTo1601 = 584388; // Metadata: 0x0020348F
		private const int DaysTo1899 = 693593; // Metadata: 0x00203493
		internal const int DaysTo1970 = 719162; // Metadata: 0x00203497
		private const int DaysTo10000 = 3652059; // Metadata: 0x0020349B
		internal const long MinTicks = 0; // Metadata: 0x0020349F
		internal const long MaxTicks = 3155378975999999999; // Metadata: 0x002034A7
		private const long MaxMillis = 315537897600000; // Metadata: 0x002034AF
		private const long FileTimeOffset = 504911232000000000; // Metadata: 0x002034B7
		private const long DoubleDateOffset = 599264352000000000; // Metadata: 0x002034BF
		private const long OADateMinAsTicks = 31241376000000000; // Metadata: 0x002034C7
		private const double OADateMinAsDouble = -657435; // Metadata: 0x002034CF
		private const double OADateMaxAsDouble = 2958466; // Metadata: 0x002034D7
		private const int DatePartYear = 0; // Metadata: 0x002034DF
		private const int DatePartDayOfYear = 1; // Metadata: 0x002034E3
		private const int DatePartMonth = 2; // Metadata: 0x002034E7
		private const int DatePartDay = 3; // Metadata: 0x002034EB
		private static readonly int[] DaysToMonth365; // 0x00
		private static readonly int[] DaysToMonth366; // 0x08
		public static readonly DateTime MinValue; // 0x10
		public static readonly DateTime MaxValue; // 0x18
		private const ulong TicksMask = 4611686018427387903; // Metadata: 0x002034EF
		private const ulong FlagsMask = 13835058055282163712; // Metadata: 0x002034F7
		private const ulong LocalMask = 9223372036854775808; // Metadata: 0x002034FF
		private const long TicksCeiling = 4611686018427387904; // Metadata: 0x00203507
		private const ulong KindUnspecified = 0; // Metadata: 0x0020350F
		private const ulong KindUtc = 4611686018427387904; // Metadata: 0x00203517
		private const ulong KindLocal = 9223372036854775808; // Metadata: 0x0020351F
		private const ulong KindLocalAmbiguousDst = 13835058055282163712; // Metadata: 0x00203527
		private const int KindShift = 62; // Metadata: 0x0020352F
		private const string TicksField = "ticks"; // Metadata: 0x00203533
		private const string DateDataField = "dateData"; // Metadata: 0x0020353C
		private ulong dateData; // 0x00
	
		// Properties
		internal long InternalTicks { get; } // 0x0055E3EC-0x0055E3F8 
		private ulong InternalKind { get; } // 0x0055E3F8-0x0055E4F4 
		public DateTime Date { get; } // 0x0055F64C-0x0055F688 
		public int Day { get; } // 0x0055F698-0x0055F6F8 
		public DayOfWeek DayOfWeek { get; } // 0x0055F6F8-0x0055F74C 
		public int DayOfYear { get; } // 0x0055F74C-0x0055F768 
		public int Hour { get; } // 0x0055F7B4-0x0055F7F0 
		public DateTimeKind Kind { get; } // 0x0055F804-0x0055F828 
		public int Millisecond { get; } // 0x0055F828-0x0055F870 
		public int Minute { get; } // 0x0055F870-0x0055F8B4 
		public int Month { get; } // 0x0055F8B4-0x0055F8C0 
		public static DateTime Now { get; } // 0x0055F8C0-0x0055F9FC 
		public static DateTime UtcNow { get; } // 0x0055F9FC-0x0055FA70 
		public int Second { get; } // 0x0055FA74-0x0055FAB0 
		public long Ticks { get; } // 0x0055FAB0-0x0055FB18 
		public TimeSpan TimeOfDay { get; } // 0x0055FB18-0x0055FB7C 
		public int Year { get; } // 0x0055FB7C-0x0055FB88 
	
		// Constructors
		public DateTime(long ticks); // 0x0055D6D4-0x0055D6DC
		private DateTime(ulong dateData); // 0x0055D6DC-0x0055D80C
		public DateTime(long ticks, DateTimeKind kind); // 0x0055D80C-0x0055D8F8
		internal DateTime(long ticks, DateTimeKind kind, bool isAmbiguousDst); // 0x0055D8F8-0x0055D994
		public DateTime(int year, int month, int day); // 0x0055DBE0-0x0055DCA4
		public DateTime(int year, int month, int day, int hour, int minute, int second); // 0x0055DD98-0x0055DED8
		public DateTime(int year, int month, int day, int hour, int minute, int second, DateTimeKind kind); // 0x0055DED8-0x0055E114
		public DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond); // 0x0055E114-0x0055E3E4
		private DateTime(SerializationInfo info, StreamingContext context); // 0x0055E3E4-0x0055E3EC
		static DateTime(); // 0x00561FC8-0x005630C4
	
		// Methods
		public DateTime Add(TimeSpan value); // 0x0055E4F4-0x0055E6A8
		private DateTime Add(double value, int scale); // 0x0055E6A8-0x0055E6BC
		public DateTime AddDays(double value); // 0x0055E6BC-0x0055E6D4
		public DateTime AddMilliseconds(double value); // 0x0055E6D4-0x0055EB90
		public DateTime AddMonths(int months); // 0x0055ED28-0x0055ED38
		public DateTime AddSeconds(double value); // 0x0055ED38-0x0055ED44
		public DateTime AddTicks(long value); // 0x0055ED44-0x0055EE1C
		public DateTime AddYears(int value); // 0x0055EE1C-0x0055EF10
		public int CompareTo(object value); // 0x0055EF10-0x0055EF3C
		public int CompareTo(DateTime value); // 0x0055EF3C-0x0055EF58
		private static long DateToTicks(int year, int month, int day); // 0x0055D994-0x0055DBE0
		private static long TimeToTicks(int hour, int minute, int second); // 0x0055DCA4-0x0055DD98
		public static int DaysInMonth(int year, int month); // 0x0055EB90-0x0055ED28
		public override bool Equals(object value); // 0x0055F0E0-0x0055F0E8
		public bool Equals(DateTime value); // 0x0055F0E8-0x0055F0FC
		public static DateTime FromBinary(long dateData); // 0x0055F0FC-0x0055F320
		internal static DateTime FromBinaryRaw(long dateData); // 0x0055F320-0x0055F4B0
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x0055F4B0-0x0055F540
		public bool IsDaylightSavingTime(); // 0x0055F540-0x0055F548
		public static DateTime SpecifyKind(DateTime value, DateTimeKind kind); // 0x0055F548-0x0055F5F8
		public long ToBinary(); // 0x0055F5F8-0x0055F608
		internal long ToBinaryRaw(); // 0x0055F608-0x0055F64C
		private int GetDatePart(int part); // 0x0055F688-0x0055F698
		public override int GetHashCode(); // 0x0055F768-0x0055F7B4
		internal bool IsAmbiguousDaylightSavingTime(); // 0x0055F7F0-0x0055F804
		internal static long GetSystemTimeAsFileTime(); // 0x0055FA70-0x0055FA74
		public static bool IsLeapYear(int year); // 0x0055EF58-0x0055F0E0
		public static DateTime Parse(string s, IFormatProvider provider); // 0x00559D24-0x00559DD0
		public static DateTime ParseExact(string s, string format, IFormatProvider provider, DateTimeStyles style); // 0x0055FC70-0x0055FD48
		private static double TicksToOADate(long value); // 0x0055FE40-0x00560018
		public double ToOADate(); // 0x00560018-0x00560108
		public long ToFileTime(); // 0x00560108-0x0056013C
		public long ToFileTimeUtc(); // 0x0056013C-0x00560300
		public DateTime ToLocalTime(); // 0x00560300-0x0056030C
		internal DateTime ToLocalTime(bool throwOnOverflow); // 0x0056030C-0x005603BC
		public string ToLongDateString(); // 0x00560444-0x005604F0
		public string ToLongTimeString(); // 0x005604F0-0x0056059C
		public string ToShortDateString(); // 0x0056059C-0x00560648
		public string ToShortTimeString(); // 0x00560648-0x005606EC
		public override string ToString(); // 0x005606EC-0x0056079C
		public string ToString(string format); // 0x0056079C-0x00560850
		public string ToString(IFormatProvider provider); // 0x00560850-0x00560908
		public string ToString(string format, IFormatProvider provider); // 0x00560908-0x00560910
		public DateTime ToUniversalTime(); // 0x00560910-0x00560920
		public static DateTime operator +(DateTime d, TimeSpan t); // 0x00560920-0x00560A08
		public static DateTime operator -(DateTime d, TimeSpan t); // 0x00560A08-0x00560AE8
		public static TimeSpan operator -(DateTime d1, DateTime d2); // 0x00560AE8-0x00560B20
		public static bool operator ==(DateTime d1, DateTime d2); // 0x00560B20-0x00560B30
		public static bool operator <(DateTime t1, DateTime t2); // 0x00560B30-0x00560B44
		public static bool operator <=(DateTime t1, DateTime t2); // 0x00560B44-0x00560B58
		public static bool operator >(DateTime t1, DateTime t2); // 0x00560B58-0x00560B6C
		public static bool operator >=(DateTime t1, DateTime t2); // 0x00560B6C-0x00560C98
		public string[] GetDateTimeFormats(); // 0x00560C98-0x00560CA0
		public string[] GetDateTimeFormats(IFormatProvider provider); // 0x00560EEC-0x00560EF4
		public TypeCode GetTypeCode(); // 0x00560EF4-0x00560FFC
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x00560FFC-0x00561108
		char IConvertible.ToChar(IFormatProvider provider); // 0x00561108-0x00561214
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x00561214-0x00561320
		byte IConvertible.ToByte(IFormatProvider provider); // 0x00561320-0x0056142C
		short IConvertible.ToInt16(IFormatProvider provider); // 0x0056142C-0x00561538
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x00561538-0x00561644
		int IConvertible.ToInt32(IFormatProvider provider); // 0x00561644-0x00561750
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x00561750-0x0056185C
		long IConvertible.ToInt64(IFormatProvider provider); // 0x0056185C-0x00561968
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x00561968-0x00561A74
		float IConvertible.ToSingle(IFormatProvider provider); // 0x00561A74-0x00561B80
		double IConvertible.ToDouble(IFormatProvider provider); // 0x00561B80-0x00561C8C
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x00561C8C-0x00561C98
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x00561C98-0x00561D4C
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x00561D4C-0x00561D54
		internal static bool TryCreate(int year, int month, int day, int hour, int minute, int second, int millisecond, out DateTime result); // 0x00561D54-0x00561FC8
	}

	[Serializable]
	[ComVisible] // 0x0039404C-0x00394060
	public enum DateTimeKind // TypeDefIndex: 175
	{
		Unspecified = 0,
		Utc = 1,
		Local = 2
	}

	[Serializable]
	[ComVisible] // 0x00394060-0x00394074
	public enum DayOfWeek // TypeDefIndex: 176
	{
		Sunday = 0,
		Monday = 1,
		Tuesday = 2,
		Wednesday = 3,
		Thursday = 4,
		Friday = 5,
		Saturday = 6
	}

	[Serializable]
	[ComVisible] // 0x00394074-0x00394088
	public sealed class DBNull : ISerializable, IConvertible // TypeDefIndex: 177
	{
		// Fields
		public static readonly DBNull Value; // 0x00
	
		// Constructors
		private DBNull(); // 0x0055CC14-0x0055CC1C
		private DBNull(SerializationInfo info, StreamingContext context); // 0x0055CC1C-0x0055CCB4
		static DBNull(); // 0x0055D564-0x0055D6CC
	
		// Methods
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0055CCB4-0x0055CCD0
		public override string ToString(); // 0x0055CCD0-0x0055CD20
		public string ToString(IFormatProvider provider); // 0x0055CD20-0x0055CD70
		public TypeCode GetTypeCode(); // 0x0055CD70-0x0055CD78
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x0055CD78-0x0055CE00
		char IConvertible.ToChar(IFormatProvider provider); // 0x0055CE00-0x0055CE88
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x0055CE88-0x0055CF10
		byte IConvertible.ToByte(IFormatProvider provider); // 0x0055CF10-0x0055CF98
		short IConvertible.ToInt16(IFormatProvider provider); // 0x0055CF98-0x0055D020
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x0055D020-0x0055D0A8
		int IConvertible.ToInt32(IFormatProvider provider); // 0x0055D0A8-0x0055D130
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x0055D130-0x0055D1B8
		long IConvertible.ToInt64(IFormatProvider provider); // 0x0055D1B8-0x0055D240
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x0055D240-0x0055D2C8
		float IConvertible.ToSingle(IFormatProvider provider); // 0x0055D2C8-0x0055D350
		double IConvertible.ToDouble(IFormatProvider provider); // 0x0055D350-0x0055D3D8
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x0055D3D8-0x0055D460
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x0055D460-0x0055D4E8
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x0055D4E8-0x0055D564
	}

	[Serializable]
	[ComVisible] // 0x00394088-0x0039409C
	public struct Decimal : IFormattable, IComparable, IConvertible, IDeserializationCallback, IComparable<decimal>, IEquatable<decimal> // TypeDefIndex: 178
	{
		// Fields
		private const int SignMask = -2147483648; // Metadata: 0x00203570
		private const byte DECIMAL_NEG = 128; // Metadata: 0x00203574
		private const byte DECIMAL_ADD = 0; // Metadata: 0x00203575
		private const int ScaleMask = 16711680; // Metadata: 0x00203576
		private const int ScaleShift = 16; // Metadata: 0x0020357A
		private const int MaxInt32Scale = 9; // Metadata: 0x0020357E
		private static uint[] Powers10; // 0x00
		[DecimalConstant] // 0x0039B864-0x0039B888
		public static readonly decimal Zero; // 0x08
		[DecimalConstant] // 0x0039B888-0x0039B8AC
		public static readonly decimal One; // 0x18
		[DecimalConstant] // 0x0039B8AC-0x0039B8D0
		public static readonly decimal MinusOne; // 0x28
		[DecimalConstant] // 0x0039B8D0-0x0039B8F4
		public static readonly decimal MaxValue; // 0x38
		[DecimalConstant] // 0x0039B8F4-0x0039B918
		public static readonly decimal MinValue; // 0x48
		[DecimalConstant] // 0x0039B918-0x0039B93C
		private static readonly decimal NearNegativeZero; // 0x58
		[DecimalConstant] // 0x0039B93C-0x0039B960
		private static readonly decimal NearPositiveZero; // 0x68
		private int flags; // 0x00
		private int hi; // 0x04
		private int lo; // 0x08
		private int mid; // 0x0C
	
		// Constructors
		public Decimal(int value); // 0x0074256C-0x00742590
		[CLSCompliant] // 0x0039D1D4-0x0039D1E8
		public Decimal(uint value); // 0x00742590-0x0074259C
		public Decimal(long value); // 0x0074259C-0x007425C4
		[CLSCompliant] // 0x0039D1E8-0x0039D1FC
		public Decimal(ulong value); // 0x007425C4-0x007425D4
		public Decimal(float value); // 0x007425D4-0x007425DC
		public Decimal(double value); // 0x007425DC-0x0074272C
		public Decimal(int[] bits); // 0x00742730-0x00742880
		public Decimal(int lo, int mid, int hi, bool isNegative, byte scale); // 0x00742970-0x00742AB4
		private Decimal(int lo, int mid, int hi, int flags); // 0x00742DB8-0x00742DC0
		static Decimal(); // 0x00744B6C-0x00744C7C
	
		// Methods
		private void SetBits(int[] bits); // 0x00742880-0x00742970
		[OnSerializing] // 0x0039D1FC-0x0039D20C
		private void OnSerializing(StreamingContext ctx); // 0x00742BA8-0x00742CE8
		void IDeserializationCallback.OnDeserialization(object sender); // 0x00742CE8-0x00742DB8
		private static void FCallAddSub(ref decimal d1, ref decimal d2, byte bSign); // 0x00742DC0-0x00742DC4
		[ReliabilityContract] // 0x0039D20C-0x0039D224
		private static int FCallCompare(ref decimal d1, ref decimal d2); // 0x00742DC4-0x00742EC0
		public int CompareTo(object value); // 0x00742EC0-0x00742F40
		public int CompareTo(decimal value); // 0x00742F40-0x00743000
		public override bool Equals(object value); // 0x00743000-0x00743088
		public bool Equals(decimal value); // 0x00743088-0x00743090
		public override int GetHashCode(); // 0x00743090-0x007430D0
		public override string ToString(); // 0x007430D0-0x00743144
		public string ToString(IFormatProvider provider); // 0x00743144-0x00743180
		public string ToString(string format, IFormatProvider provider); // 0x00743180-0x007431C0
		public static decimal Parse(string s, IFormatProvider provider); // 0x007431C0-0x007431F8
		public static decimal Parse(string s, NumberStyles style, IFormatProvider provider); // 0x007431F8-0x0074324C
		public static int[] GetBits(decimal d); // 0x00742AB4-0x00742BA8
		internal static decimal ToDecimal(byte[] buffer); // 0x0074324C-0x007434FC
		private static void FCallMultiply(ref decimal d1, ref decimal d2); // 0x007434FC-0x00743500
		public static decimal Round(decimal d, int decimals); // 0x00743500-0x0074357C
		private static void FCallRound(ref decimal d, int decimals); // 0x0074357C-0x00743580
		public static byte ToByte(decimal value); // 0x00743580-0x007436EC
		[CLSCompliant] // 0x0039D224-0x0039D238
		public static sbyte ToSByte(decimal value); // 0x007437DC-0x0074394C
		public static short ToInt16(decimal value); // 0x00743A48-0x00743BB8
		public static double ToDouble(decimal d); // 0x00743BB8-0x00743BBC
		internal static int FCallToInt32(decimal d); // 0x00743BBC-0x00743BC0
		public static int ToInt32(decimal d); // 0x0074394C-0x00743A48
		public static long ToInt64(decimal d); // 0x00743BC4-0x00743CB8
		[CLSCompliant] // 0x0039D238-0x0039D24C
		public static ushort ToUInt16(decimal value); // 0x00743CB8-0x00743E24
		[CLSCompliant] // 0x0039D24C-0x0039D260
		public static uint ToUInt32(decimal d); // 0x007436EC-0x007437DC
		[CLSCompliant] // 0x0039D260-0x0039D274
		public static ulong ToUInt64(decimal d); // 0x00743E24-0x00743F0C
		public static float ToSingle(decimal d); // 0x00743F0C-0x00743F10
		private static void FCallTruncate(ref decimal d); // 0x00743BC0-0x00743BC4
		public static implicit operator decimal(byte value); // 0x00743F10-0x00743F1C
		[CLSCompliant] // 0x0039D274-0x0039D288
		public static implicit operator decimal(sbyte value); // 0x00743F1C-0x00743F34
		public static implicit operator decimal(short value); // 0x00743F34-0x00743F4C
		[CLSCompliant] // 0x0039D288-0x0039D29C
		public static implicit operator decimal(ushort value); // 0x00743F4C-0x00743F58
		public static implicit operator decimal(int value); // 0x00743F58-0x00743F68
		[CLSCompliant] // 0x0039D29C-0x0039D2B0
		public static implicit operator decimal(uint value); // 0x00743F68-0x00743F74
		public static implicit operator decimal(long value); // 0x00743F74-0x00743F88
		[CLSCompliant] // 0x0039D2B0-0x0039D2C4
		public static implicit operator decimal(ulong value); // 0x00743F88-0x00743F98
		public static explicit operator decimal(float value); // 0x00743F98-0x00743FC0
		public static explicit operator decimal(double value); // 0x00743FC0-0x00743FE8
		[CLSCompliant] // 0x0039D2C4-0x0039D2D8
		public static explicit operator ulong(decimal value); // 0x00743FE8-0x0074405C
		public static explicit operator float(decimal value); // 0x0074405C-0x007440D0
		public static explicit operator double(decimal value); // 0x007440D0-0x00744144
		public static decimal operator +(decimal d1, decimal d2); // 0x00744144-0x007441C4
		public static decimal operator *(decimal d1, decimal d2); // 0x007441C4-0x00744240
		public static bool operator ==(decimal d1, decimal d2); // 0x00744240-0x007442C0
		public static bool operator !=(decimal d1, decimal d2); // 0x007442C0-0x00744340
		public TypeCode GetTypeCode(); // 0x00744340-0x007443B0
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x007443B0-0x007444B4
		char IConvertible.ToChar(IFormatProvider provider); // 0x00744534-0x007445A8
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x007445A8-0x00744618
		byte IConvertible.ToByte(IFormatProvider provider); // 0x00744618-0x00744688
		short IConvertible.ToInt16(IFormatProvider provider); // 0x00744688-0x007446F8
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x007446F8-0x00744768
		int IConvertible.ToInt32(IFormatProvider provider); // 0x00744768-0x007447D8
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x007447D8-0x00744848
		long IConvertible.ToInt64(IFormatProvider provider); // 0x00744848-0x007448B8
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x007448B8-0x00744928
		float IConvertible.ToSingle(IFormatProvider provider); // 0x00744928-0x00744998
		double IConvertible.ToDouble(IFormatProvider provider); // 0x00744998-0x007449A0
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x007449A0-0x00744AA8
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x00744AA8-0x00744B64
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x00744B64-0x00744B6C
	}

	[Serializable]
	internal class DefaultBinder : Binder // TypeDefIndex: 179
	{
		// Nested types
		internal class BinderState // TypeDefIndex: 180
		{
			// Fields
			internal int[] m_argsMap; // 0x10
			internal int m_originalSize; // 0x18
			internal bool m_isParamArray; // 0x1C
	
			// Constructors
			internal BinderState(int[] argsMap, int originalSize, bool isParamArray); // 0x0074819C-0x007481E4
		}
	
		[Serializable]
		[CompilerGenerated] // 0x0039409C-0x003940AC
		private sealed class <>c // TypeDefIndex: 181
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static Predicate<Type> <>9__3_0; // 0x08
	
			// Constructors
			static <>c(); // 0x0074BE20-0x0074BE84
			public <>c(); // 0x0074BE84-0x0074BE8C
	
			// Methods
			internal bool <SelectProperty>b__3_0(Type t); // 0x0074BE8C-0x0074BF44
		}
	
		// Constructors
		public DefaultBinder(); // 0x0074BE18-0x0074BE20
	
		// Methods
		public override MethodBase BindToMethod(BindingFlags bindingAttr, MethodBase[] match, ref object[] args, ParameterModifier[] modifiers, CultureInfo cultureInfo, string[] names, out object state); // 0x00744C7C-0x00747D18
		public override FieldInfo BindToField(BindingFlags bindingAttr, FieldInfo[] match, object value, CultureInfo cultureInfo); // 0x007484E8-0x00748A3C
		public override MethodBase SelectMethod(BindingFlags bindingAttr, MethodBase[] match, Type[] types, ParameterModifier[] modifiers); // 0x00748AF4-0x00749410
		public override PropertyInfo SelectProperty(BindingFlags bindingAttr, PropertyInfo[] match, Type returnType, Type[] indexes, ParameterModifier[] modifiers); // 0x00749658-0x0074A3A4
		public override object ChangeType(object value, Type type, CultureInfo cultureInfo); // 0x0074AE90-0x0074AF08
		public override void ReorderArgumentArray(ref object[] args, object state); // 0x0074AF08-0x0074B40C
		public static MethodBase ExactBinding(MethodBase[] match, Type[] types, ParameterModifier[] modifiers); // 0x0074B40C-0x0074B6F8
		public static PropertyInfo ExactPropertyBinding(PropertyInfo[] match, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x0074B850-0x0074BB9C
		private static int FindMostSpecific(ParameterInfo[] p1, int[] paramOrder1, Type paramArrayType1, ParameterInfo[] p2, int[] paramOrder2, Type paramArrayType2, Type[] types, object[] args); // 0x0074A8F4-0x0074ADD8
		private static int FindMostSpecificType(Type c1, Type c2, Type t); // 0x0074A3A4-0x0074A8F4
		private static int FindMostSpecificMethod(MethodBase m1, int[] paramOrder1, Type paramArrayType1, MethodBase m2, int[] paramOrder2, Type paramArrayType2, Type[] types, object[] args); // 0x007483CC-0x007484E8
		private static int FindMostSpecificField(FieldInfo cur1, FieldInfo cur2); // 0x00748A3C-0x00748AF4
		private static int FindMostSpecificProperty(PropertyInfo cur1, PropertyInfo cur2); // 0x0074ADD8-0x0074AE90
		internal static bool CompareMethodSigAndName(MethodBase m1, MethodBase m2); // 0x0074BB9C-0x0074BD68
		internal static int GetHierarchyDepth(Type t); // 0x0074BD68-0x0074BE18
		internal static MethodBase FindMostDerivedNewSlotMeth(MethodBase[] match, int cMatches); // 0x0074B6F8-0x0074B850
		private static void ReorderParams(int[] paramOrder, object[] vars); // 0x007481E4-0x007483CC
		private static bool CreateParamOrder(int[] paramOrder, ParameterInfo[] pars, string[] names); // 0x00747D18-0x0074806C
		private static bool CanConvertPrimitive(RuntimeType source, RuntimeType target); // 0x00749410-0x00749658
		private static bool CanConvertPrimitiveObjectToType(object source, RuntimeType type); // 0x0074806C-0x0074819C
	}

	[Serializable]
	[ComVisible] // 0x003940AC-0x003940C0
	public class DivideByZeroException : ArithmeticException // TypeDefIndex: 182
	{
		// Constructors
		public DivideByZeroException(); // 0x00750B7C-0x00750BE0
		protected DivideByZeroException(SerializationInfo info, StreamingContext context); // 0x00750BE8-0x00750BF0
	}

	[Serializable]
	[ComVisible] // 0x003940C0-0x003940D4
	public class DllNotFoundException : TypeLoadException // TypeDefIndex: 183
	{
		// Constructors
		public DllNotFoundException(); // 0x00750BF0-0x00750C54
		public DllNotFoundException(string message); // 0x00750C54-0x00750C84
		protected DllNotFoundException(SerializationInfo info, StreamingContext context); // 0x00750C84-0x00750C8C
	}

	[Serializable]
	[ComVisible] // 0x003940D4-0x003940E8
	public struct Double : IComparable, IFormattable, IConvertible, IComparable<double>, IEquatable<double> // TypeDefIndex: 184
	{
		// Fields
		internal double m_value; // 0x00
		public const double MinValue = -1.7976931348623157E+308; // Metadata: 0x00203582
		public const double MaxValue = 1.7976931348623157E+308; // Metadata: 0x0020358A
		public const double Epsilon = 5E-324; // Metadata: 0x00203592
		public const double NegativeInfinity = -1D / 0D; // Metadata: 0x0020359A
		public const double PositiveInfinity = 1D / 0D; // Metadata: 0x002035A2
		public const double NaN = 0D / 0D; // Metadata: 0x002035AA
		internal static double NegativeZero; // 0x00
	
		// Constructors
		static Double(); // 0x00751B70-0x00751BEC
	
		// Methods
		public static bool IsPositiveInfinity(double d); // 0x00750C8C-0x00750CA0
		[ReliabilityContract] // 0x0039D2D8-0x0039D2F0
		public static bool IsNaN(double d); // 0x00750CA0-0x00750E0C
		public int CompareTo(object value); // 0x00750E0C-0x00750EF8
		public int CompareTo(double value); // 0x00750EF8-0x00750FF4
		public override bool Equals(object obj); // 0x00750FF4-0x007510C8
		public bool Equals(double obj); // 0x007510C8-0x007510D0
		public override int GetHashCode(); // 0x007510D0-0x007510DC
		public override string ToString(); // 0x007510DC-0x00751110
		public string ToString(IFormatProvider provider); // 0x00751110-0x00751148
		public string ToString(string format, IFormatProvider provider); // 0x00751148-0x0075118C
		public static double Parse(string s); // 0x0075118C-0x0075120C
		public static double Parse(string s, IFormatProvider provider); // 0x00751214-0x007512A4
		public static double Parse(string s, NumberStyles style, IFormatProvider provider); // 0x007512A4-0x00751344
		private static double Parse(string s, NumberStyles style, NumberFormatInfo info); // 0x0075120C-0x00751214
		public TypeCode GetTypeCode(); // 0x00751344-0x007513C0
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x007513C0-0x007514C4
		char IConvertible.ToChar(IFormatProvider provider); // 0x007514C4-0x00751544
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x00751544-0x007515C0
		byte IConvertible.ToByte(IFormatProvider provider); // 0x007515C0-0x0075163C
		short IConvertible.ToInt16(IFormatProvider provider); // 0x0075163C-0x007516B8
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x007516B8-0x00751734
		int IConvertible.ToInt32(IFormatProvider provider); // 0x00751734-0x007517B0
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x007517B0-0x0075182C
		long IConvertible.ToInt64(IFormatProvider provider); // 0x0075182C-0x007518A8
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x007518A8-0x00751924
		float IConvertible.ToSingle(IFormatProvider provider); // 0x00751924-0x0075192C
		double IConvertible.ToDouble(IFormatProvider provider); // 0x0075192C-0x007519A8
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x007519A8-0x00751AAC
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x00751AAC-0x00751B68
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x00751B68-0x00751B70
	}

	[Serializable]
	internal sealed class Empty : ISerializable // TypeDefIndex: 185
	{
		// Fields
		public static readonly Empty Value; // 0x00
	
		// Constructors
		private Empty(); // 0x00751BEC-0x00751BF4
		static Empty(); // 0x00751CE0-0x00751D44
	
		// Methods
		public override string ToString(); // 0x00751BF4-0x00751C44
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00751C44-0x00751CE0
	}

	[Serializable]
	[ComVisible] // 0x003940E8-0x003940FC
	public class EntryPointNotFoundException : TypeLoadException // TypeDefIndex: 186
	{
		// Constructors
		public EntryPointNotFoundException(); // 0x00751D44-0x00751DA8
		public EntryPointNotFoundException(string message); // 0x00751DA8-0x00751DD8
		protected EntryPointNotFoundException(SerializationInfo info, StreamingContext context); // 0x00751DD8-0x00751DEC
	}

	[Serializable]
	[ComVisible] // 0x003940FC-0x00394110
	public abstract struct Enum : IComparable, IFormattable, IConvertible // TypeDefIndex: 187
	{
		// Fields
		private static readonly char[] enumSeperatorCharArray; // 0x00
		private const string enumSeperator = ", "; // Metadata: 0x002035B2
	
		// Nested types
		private enum ParseFailureKind // TypeDefIndex: 188
		{
			None = 0,
			Argument = 1,
			ArgumentNull = 2,
			ArgumentWithParameter = 3,
			UnhandledException = 4
		}
	
		private struct EnumResult // TypeDefIndex: 189
		{
			// Fields
			internal object parsedEnum; // 0x00
			internal bool canThrow; // 0x08
			internal ParseFailureKind m_failure; // 0x0C
			internal string m_failureMessageID; // 0x10
			internal string m_failureParameter; // 0x18
			internal object m_failureMessageFormatArgument; // 0x20
			internal Exception m_innerException; // 0x28
	
			// Methods
			internal void Init(bool canMethodThrow); // 0x007573F4-0x00757400
			internal void SetFailure(Exception unhandledException); // 0x00757400-0x00757410
			internal void SetFailure(ParseFailureKind failure, string failureParameter); // 0x00757410-0x00757418
			internal void SetFailure(ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument); // 0x00757418-0x00757420
			internal Exception GetEnumParseException(); // 0x00757420-0x00757428
		}
	
		private class ValuesAndNames // TypeDefIndex: 190
		{
			// Fields
			public ulong[] Values; // 0x10
			public string[] Names; // 0x18
	
			// Constructors
			public ValuesAndNames(ulong[] values, string[] names); // 0x00751F44-0x00751F7C
		}
	
		// Constructors
		protected Enum(); // 0x00757310-0x00757318
		static Enum(); // 0x00757318-0x007573F4
	
		// Methods
		private static ValuesAndNames GetCachedValuesAndNames(RuntimeType enumType, bool getNames); // 0x00751DEC-0x00751F40
		private static string InternalFormattedHexString(object value); // 0x00751F7C-0x00752294
		private static string InternalFormat(RuntimeType eT, object value); // 0x00752294-0x007523D0
		private static string InternalFlagsFormat(RuntimeType eT, object value); // 0x007524B4-0x007527B8
		internal static ulong ToUInt64(object value); // 0x007527B8-0x00752948
		private static int InternalCompareTo(object o1, object o2); // 0x00752948-0x0075294C
		internal static RuntimeType InternalGetUnderlyingType(RuntimeType enumType); // 0x0075294C-0x00752950
		private static bool GetEnumValuesAndNames(RuntimeType enumType, out ulong[] values, out string[] names); // 0x00751F40-0x00751F44
		private static object InternalBoxEnum(RuntimeType enumType, long value); // 0x00752950-0x00752954
		[ComVisible] // 0x0039D2F0-0x0039D304
		public static object Parse(Type enumType, string value, bool ignoreCase); // 0x00752954-0x00752A90
		private static bool TryParseEnum(Type enumType, string value, bool ignoreCase, ref EnumResult parseResult); // 0x00752A90-0x0075346C
		[ComVisible] // 0x0039D304-0x0039D318
		public static Type GetUnderlyingType(Type enumType); // 0x0074C13C-0x0074C210
		[ComVisible] // 0x0039D318-0x0039D32C
		public static Array GetValues(Type enumType); // 0x00753A84-0x00753B58
		internal static ulong[] InternalGetValues(RuntimeType enumType); // 0x00753B58-0x00753BD4
		[ComVisible] // 0x0039D32C-0x0039D340
		public static string GetName(Type enumType, object value); // 0x007523D0-0x007524B4
		internal static string[] InternalGetNames(RuntimeType enumType); // 0x00753BD4-0x00753C50
		[ComVisible] // 0x0039D340-0x0039D354
		public static object ToObject(Type enumType, object value); // 0x0075346C-0x007538BC
		[ComVisible] // 0x0039D354-0x0039D368
		public static bool IsDefined(Type enumType, object value); // 0x00754C5C-0x00754D40
		private object get_value(); // 0x00754D40-0x00754D44
		internal object GetValue(); // 0x00754D44-0x00754D48
		private bool InternalHasFlag(Enum flags); // 0x00754D48-0x00754D4C
		private int get_hashcode(); // 0x00754D4C-0x00754D50
		public override bool Equals(object obj); // 0x00754D50-0x00754D58
		public override int GetHashCode(); // 0x00754D58-0x00754D5C
		public override string ToString(); // 0x00754D5C-0x00754E78
		[Obsolete] // 0x0039D368-0x0039D3A0
		public string ToString(string format, IFormatProvider provider); // 0x00754E78-0x00754E7C
		public int CompareTo(object target); // 0x007550F4-0x00755308
		public string ToString(string format); // 0x00754E7C-0x007550F4
		[Obsolete] // 0x0039D3A0-0x0039D3D8
		public string ToString(IFormatProvider provider); // 0x00755338-0x00755344
		public bool HasFlag(Enum flag); // 0x00755344-0x00755508
		public TypeCode GetTypeCode(); // 0x00755508-0x007558D8
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x007558D8-0x00755984
		char IConvertible.ToChar(IFormatProvider provider); // 0x00755984-0x00755A30
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x00755A30-0x00755ADC
		byte IConvertible.ToByte(IFormatProvider provider); // 0x00755ADC-0x00755B88
		short IConvertible.ToInt16(IFormatProvider provider); // 0x00755B88-0x00755C34
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x00755C34-0x00755CE0
		int IConvertible.ToInt32(IFormatProvider provider); // 0x00755CE0-0x00755D8C
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x00755D8C-0x00755E38
		long IConvertible.ToInt64(IFormatProvider provider); // 0x00755E38-0x00755EE4
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x00755EE4-0x00755F90
		float IConvertible.ToSingle(IFormatProvider provider); // 0x00755F90-0x0075703C
		double IConvertible.ToDouble(IFormatProvider provider); // 0x0075703C-0x007570E8
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x007570E8-0x00757194
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x00757194-0x00757290
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x00757290-0x00757310
		[CLSCompliant] // 0x0039D3D8-0x0039D418
		[ComVisible] // 0x0039D3D8-0x0039D418
		public static object ToObject(Type enumType, sbyte value); // 0x00753E18-0x00753FE0
		[ComVisible] // 0x0039D418-0x0039D42C
		public static object ToObject(Type enumType, short value); // 0x00753FE0-0x007541A8
		[ComVisible] // 0x0039D42C-0x0039D440
		public static object ToObject(Type enumType, int value); // 0x00753C50-0x00753E18
		[ComVisible] // 0x0039D440-0x0039D454
		public static object ToObject(Type enumType, byte value); // 0x00754538-0x00754700
		[CLSCompliant] // 0x0039D454-0x0039D494
		[ComVisible] // 0x0039D454-0x0039D494
		public static object ToObject(Type enumType, ushort value); // 0x00754700-0x007548C8
		[CLSCompliant] // 0x0039D494-0x0039D4D4
		[ComVisible] // 0x0039D494-0x0039D4D4
		public static object ToObject(Type enumType, uint value); // 0x00754370-0x00754538
		[ComVisible] // 0x0039D4D4-0x0039D4E8
		public static object ToObject(Type enumType, long value); // 0x007541A8-0x00754370
		[CLSCompliant] // 0x0039D4E8-0x0039D528
		[ComVisible] // 0x0039D4E8-0x0039D528
		public static object ToObject(Type enumType, ulong value); // 0x007538BC-0x00753A84
		private static object ToObject(Type enumType, char value); // 0x007548C8-0x00754A90
		private static object ToObject(Type enumType, bool value); // 0x00754A90-0x00754C5C
	}

	[Serializable]
	[ComVisible] // 0x00394110-0x00394124
	public class EventArgs // TypeDefIndex: 191
	{
		// Fields
		public static readonly EventArgs Empty; // 0x00
	
		// Constructors
		public EventArgs(); // 0x00758880-0x00758888
		static EventArgs(); // 0x00758888-0x007588EC
	}

	[Serializable]
	[ComVisible] // 0x00394124-0x00394138
	public delegate void EventHandler(object sender, EventArgs e); // TypeDefIndex: 192; 0x007588FC-0x0075907C

	[Serializable]
	public delegate void EventHandler<TEventArgs>(object sender, TEventArgs e); // TypeDefIndex: 193; 0x00000000-0x00000000

	[Serializable]
	[ClassInterface] // 0x00394138-0x003941C4
	[ComDefaultInterface] // 0x00394138-0x003941C4
	[ComVisible] // 0x00394138-0x003941C4
	public class Exception : ISerializable, _Exception // TypeDefIndex: 194
	{
		// Fields
		[OptionalField] // 0x0039B960-0x0039B970
		private static object s_EDILock; // 0x00
		private string _className; // 0x10
		internal string _message; // 0x18
		private IDictionary _data; // 0x20
		private Exception _innerException; // 0x28
		private string _helpURL; // 0x30
		private object _stackTrace; // 0x38
		private string _stackTraceString; // 0x40
		private string _remoteStackTraceString; // 0x48
		private int _remoteStackIndex; // 0x50
		private object _dynamicMethods; // 0x58
		internal int _HResult; // 0x60
		private string _source; // 0x68
		[OptionalField] // 0x0039B970-0x0039B9A8
		private SafeSerializationManager _safeSerializationManager; // 0x70
		internal StackTrace[] captured_traces; // 0x78
		private IntPtr[] native_trace_ips; // 0x80
		private const int _COMPlusExceptionCode = -532462766; // Metadata: 0x002035CC
	
		// Properties
		public virtual string Message { get; } // 0x007595FC-0x007596DC 
		public Exception InnerException { get; } // 0x00759734-0x0075973C 
		public virtual string StackTrace { get; } // 0x0075973C-0x00759744 
		public virtual string Source { get; } // 0x0075979C-0x007598F0 
		public int HResult { get; protected set; } // 0x007595F4-0x007595FC 0x0075917C-0x00759184
	
		// Nested types
		internal enum ExceptionMessageKind // TypeDefIndex: 195
		{
			ThreadAbort = 1,
			ThreadInterrupted = 2,
			OutOfMemory = 3
		}
	
		// Constructors
		public Exception(); // 0x00759184-0x007591AC
		public Exception(string message); // 0x007591AC-0x007591E0
		public Exception(string message, Exception innerException); // 0x007591E0-0x00759224
		protected Exception(SerializationInfo info, StreamingContext context); // 0x00759224-0x007595F4
		static Exception(); // 0x0075A29C-0x0075A308
	
		// Methods
		private void Init(); // 0x00759104-0x0075917C
		private string GetClassName(); // 0x007596DC-0x0075972C
		private string GetStackTrace(bool needFileInfo); // 0x00759744-0x00759794
		[FriendAccessAllowed] // 0x0039D528-0x0039D538
		internal void SetErrorCode(int hr); // 0x00750BE0-0x00750BE8
		public override string ToString(); // 0x007598F0-0x007598FC
		private string ToString(bool needFileLineInfo, bool needMessage); // 0x007598FC-0x00759C28
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00759C28-0x0075A000
		[OnDeserialized] // 0x0039D538-0x0039D548
		private void OnDeserialized(StreamingContext context); // 0x0075A000-0x0075A080
		private string StripFileInfo(string stackTrace, bool isRemoteStackTrace); // 0x00759794-0x0075979C
		internal void RestoreExceptionDispatchInfo(ExceptionDispatchInfo exceptionDispatchInfo); // 0x0075A080-0x0075A160
		public new Type GetType(); // 0x0075972C-0x00759734
		internal static string GetMessageFromNativeResources(ExceptionMessageKind kind); // 0x0075A160-0x0075A1BC
		internal Exception FixRemotingException(); // 0x0075A1BC-0x0075A29C
	}

	[Serializable]
	[ComVisible] // 0x003941C4-0x00394214
	[Obsolete] // 0x003941C4-0x00394214
	public sealed class ExecutionEngineException : SystemException // TypeDefIndex: 196
	{
		// Constructors
		public ExecutionEngineException(); // 0x0075A308-0x0075A36C
		public ExecutionEngineException(string message); // 0x0075A36C-0x0075A39C
		public ExecutionEngineException(string message, Exception innerException); // 0x00758780-0x007587B0
		internal ExecutionEngineException(SerializationInfo info, StreamingContext context); // 0x0075A39C-0x0075A3A4
	}

	[Serializable]
	[ComVisible] // 0x00394214-0x00394228
	public class FieldAccessException : MemberAccessException // TypeDefIndex: 197
	{
		// Constructors
		public FieldAccessException(); // 0x0075A3A4-0x0075A408
		public FieldAccessException(string message); // 0x0075A408-0x0075A438
		protected FieldAccessException(SerializationInfo info, StreamingContext context); // 0x0075A438-0x0075A440
	}

	[Serializable]
	[AttributeUsage] // 0x00394228-0x0039427C
	[ComVisible] // 0x00394228-0x0039427C
	public class FlagsAttribute : Attribute // TypeDefIndex: 198
	{
		// Constructors
		public FlagsAttribute(); // 0x0075A440-0x0075A448
	}

	[Serializable]
	[ComVisible] // 0x0039427C-0x00394290
	public class FormatException : SystemException // TypeDefIndex: 199
	{
		// Constructors
		public FormatException(); // 0x0075A448-0x0075A4AC
		public FormatException(string message); // 0x00755308-0x00755338
		public FormatException(string message, Exception innerException); // 0x0075A4AC-0x0075A4DC
		protected FormatException(SerializationInfo info, StreamingContext context); // 0x0075A4DC-0x0075A4E4
	}

	public static class GC // TypeDefIndex: 200
	{
		// Fields
		internal static readonly object EPHEMERON_TOMBSTONE; // 0x00
	
		// Constructors
		static GC(); // 0x0075A5A4-0x0075A5F8
	
		// Methods
		internal static void register_ephemeron_array(Ephemeron[] array); // 0x0075A4E4-0x0075A4E8
		private static object get_ephemeron_tombstone(); // 0x0075A4E8-0x0075A4EC
		[ReliabilityContract] // 0x0039D548-0x0039D560
		public static void KeepAlive(object obj); // 0x0075A4EC-0x0075A4F0
		[ReliabilityContract] // 0x0039D560-0x0039D578
		private static void _SuppressFinalize(object o); // 0x0075A4F0-0x0075A4F4
		[ReliabilityContract] // 0x0039D578-0x0039D590
		public static void SuppressFinalize(object obj); // 0x007509DC-0x00750A88
		private static void _ReRegisterForFinalize(object o); // 0x0075A4F4-0x0075A4F8
		public static void ReRegisterForFinalize(object obj); // 0x0075A4F8-0x0075A5A4
	}

	internal static class DateTimeFormat // TypeDefIndex: 201
	{
		// Fields
		internal static readonly TimeSpan NullOffset; // 0x00
		internal static char[] allStandardFormats; // 0x08
		internal static string[] fixedNumberFormats; // 0x10
	
		// Constructors
		static DateTimeFormat(); // 0x00565DA0-0x005660D0
	
		// Methods
		internal static void FormatDigits(StringBuilder outputBuffer, int value, int len); // 0x005630C4-0x00563144
		internal static void FormatDigits(StringBuilder outputBuffer, int value, int len, bool overrideLengthLimit); // 0x00563144-0x00563240
		private static void HebrewFormatDigits(StringBuilder outputBuffer, int digits); // 0x00563240-0x005632D4
		internal static int ParseRepeatPattern(string format, int pos, char patternChar); // 0x005632D4-0x00563364
		private static string FormatDayOfWeek(int dayOfWeek, int repeat, DateTimeFormatInfo dtfi); // 0x00563364-0x005633C4
		private static string FormatMonth(int month, int repeatCount, DateTimeFormatInfo dtfi); // 0x005633C4-0x00563424
		private static string FormatHebrewMonthName(DateTime time, int month, int repeatCount, DateTimeFormatInfo dtfi); // 0x00563424-0x00563568
		internal static int ParseQuoteString(string format, int pos, StringBuilder result); // 0x00563568-0x005637AC
		internal static int ParseNextChar(string format, int pos); // 0x005637AC-0x00563814
		private static bool IsUseGenitiveForm(string format, int index, int tokenLen, char patternToMatch); // 0x00563814-0x005639AC
		private static string FormatCustomized(DateTime dateTime, string format, DateTimeFormatInfo dtfi, TimeSpan offset); // 0x005639AC-0x00564920
		private static void FormatCustomizedTimeZone(DateTime dateTime, TimeSpan offset, string format, int tokenLen, bool timeOnly, StringBuilder result); // 0x00564920-0x00564C9C
		private static void FormatCustomizedRoundripTimeZone(DateTime dateTime, TimeSpan offset, StringBuilder result); // 0x00564C9C-0x00564EF0
		internal static string GetRealFormat(string format, DateTimeFormatInfo dtfi); // 0x00564EF4-0x00565230
		private static string ExpandPredefinedFormat(string format, ref DateTime dateTime, ref DateTimeFormatInfo dtfi, ref TimeSpan offset); // 0x00565230-0x005656A8
		internal static string Format(DateTime dateTime, string format, DateTimeFormatInfo dtfi); // 0x005603BC-0x00560444
		internal static string Format(DateTime dateTime, string format, DateTimeFormatInfo dtfi, TimeSpan offset); // 0x005656AC-0x0056592C
		internal static string[] GetAllDateTimes(DateTime dateTime, char format, DateTimeFormatInfo dtfi); // 0x0056592C-0x00565DA0
		internal static string[] GetAllDateTimes(DateTime dateTime, DateTimeFormatInfo dtfi); // 0x00560CA0-0x00560EEC
		internal static void InvalidFormatForLocal(string format, DateTime dateTime); // 0x005656A8-0x005656AC
		internal static void InvalidFormatForUtc(string format, DateTime dateTime); // 0x00564EF0-0x00564EF4
	}

	internal static class DateTimeParse // TypeDefIndex: 202
	{
		// Fields
		internal static MatchNumberDelegate m_hebrewNumberParser; // 0x00
		private static DS[][] dateParsingStates; // 0x08
	
		// Nested types
		internal delegate bool MatchNumberDelegate(ref __DTString str, int digitLen, out int result); // TypeDefIndex: 203; 0x00741D70-0x00742230
	
		internal enum DTT // TypeDefIndex: 204
		{
			End = 0,
			NumEnd = 1,
			NumAmpm = 2,
			NumSpace = 3,
			NumDatesep = 4,
			NumTimesep = 5,
			MonthEnd = 6,
			MonthSpace = 7,
			MonthDatesep = 8,
			NumDatesuff = 9,
			NumTimesuff = 10,
			DayOfWeek = 11,
			YearSpace = 12,
			YearDateSep = 13,
			YearEnd = 14,
			TimeZone = 15,
			Era = 16,
			NumUTCTimeMark = 17,
			Unk = 18,
			NumLocalTimeMark = 19,
			Max = 20
		}
	
		internal enum TM // TypeDefIndex: 205
		{
			NotSet = -1,
			AM = 0,
			PM = 1
		}
	
		internal enum DS // TypeDefIndex: 206
		{
			BEGIN = 0,
			N = 1,
			NN = 2,
			D_Nd = 3,
			D_NN = 4,
			D_NNd = 5,
			D_M = 6,
			D_MN = 7,
			D_NM = 8,
			D_MNd = 9,
			D_NDS = 10,
			D_Y = 11,
			D_YN = 12,
			D_YNd = 13,
			D_YM = 14,
			D_YMd = 15,
			D_S = 16,
			T_S = 17,
			T_Nt = 18,
			T_NNt = 19,
			ERROR = 20,
			DX_NN = 21,
			DX_NNN = 22,
			DX_MN = 23,
			DX_NM = 24,
			DX_MNN = 25,
			DX_DS = 26,
			DX_DSN = 27,
			DX_NDS = 28,
			DX_NNDS = 29,
			DX_YNN = 30,
			DX_YMN = 31,
			DX_YN = 32,
			DX_YM = 33,
			TX_N = 34,
			TX_NN = 35,
			TX_NNN = 36,
			TX_TS = 37,
			DX_NNY = 38
		}
	
		// Constructors
		static DateTimeParse(); // 0x0056F198-0x0056FACC
	
		// Methods
		internal static DateTime ParseExact(string s, string format, DateTimeFormatInfo dtfi, DateTimeStyles style); // 0x0055FD48-0x0055FE40
		internal static bool TryParseExact(string s, string format, DateTimeFormatInfo dtfi, DateTimeStyles style, ref DateTimeResult result); // 0x005660D0-0x00566214
		private static bool MatchWord(ref __DTString str, string target); // 0x00566A80-0x00566C5C
		private static bool GetTimeZoneName(ref __DTString str); // 0x00566C5C-0x00566D0C
		internal static bool IsDigit(char ch); // 0x00566D0C-0x00566D20
		private static bool ParseFraction(ref __DTString str, out double result); // 0x00566D20-0x00566E04
		private static bool ParseTimeZone(ref __DTString str, ref TimeSpan result); // 0x00566E04-0x00567098
		private static bool HandleTimeZone(ref __DTString str, ref DateTimeResult result); // 0x00567098-0x00567234
		private static bool Lex(DS dps, ref __DTString str, ref DateTimeToken dtok, ref DateTimeRawInfo raw, ref DateTimeResult result, ref DateTimeFormatInfo dtfi, DateTimeStyles styles); // 0x00567234-0x005680F8
		private static bool VerifyValidPunctuation(ref __DTString str); // 0x005684F8-0x00568694
		private static bool GetYearMonthDayOrder(string datePattern, DateTimeFormatInfo dtfi, out int order); // 0x00568694-0x0056897C
		private static bool GetYearMonthOrder(string pattern, DateTimeFormatInfo dtfi, out int order); // 0x0056897C-0x00568B7C
		private static bool GetMonthDayOrder(string pattern, DateTimeFormatInfo dtfi, out int order); // 0x00568B7C-0x00568D94
		private static bool TryAdjustYear(ref DateTimeResult result, int year, out int adjustedYear); // 0x00568D94-0x00568E98
		private static bool SetDateYMD(ref DateTimeResult result, int year, int month, int day); // 0x00568E98-0x00568F30
		private static bool SetDateMDY(ref DateTimeResult result, int month, int day, int year); // 0x00568F30-0x00568FBC
		private static bool SetDateDMY(ref DateTimeResult result, int day, int month, int year); // 0x00568FBC-0x00569048
		private static bool SetDateYDM(ref DateTimeResult result, int year, int day, int month); // 0x00569048-0x005690D4
		private static void GetDefaultYear(ref DateTimeResult result, ref DateTimeStyles styles); // 0x005690D4-0x00569188
		private static bool GetDayOfNN(ref DateTimeResult result, ref DateTimeStyles styles, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x00569288-0x00569444
		private static bool GetDayOfNNN(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x00569444-0x00569750
		private static bool GetDayOfMN(ref DateTimeResult result, ref DateTimeStyles styles, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x00569750-0x005699C8
		private static bool GetHebrewDayOfNM(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x005699C8-0x00569B58
		private static bool GetDayOfNM(ref DateTimeResult result, ref DateTimeStyles styles, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x00569B58-0x00569DD0
		private static bool GetDayOfMNN(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x00569DD0-0x0056A148
		private static bool GetDayOfYNN(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x0056A148-0x0056A2D4
		private static bool GetDayOfNNY(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x0056A2D4-0x0056A488
		private static bool GetDayOfYMN(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x0056A488-0x0056A568
		private static bool GetDayOfYN(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x0056A568-0x0056A648
		private static bool GetDayOfYM(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x0056A648-0x0056A710
		private static void AdjustTimeMark(DateTimeFormatInfo dtfi, ref DateTimeRawInfo raw); // 0x0056A710-0x0056A85C
		private static bool AdjustHour(ref int hour, TM timeMark); // 0x0056A85C-0x0056A8A4
		private static bool GetTimeOfN(DateTimeFormatInfo dtfi, ref DateTimeResult result, ref DateTimeRawInfo raw); // 0x0056A8A4-0x0056A950
		private static bool GetTimeOfNN(DateTimeFormatInfo dtfi, ref DateTimeResult result, ref DateTimeRawInfo raw); // 0x0056A950-0x0056AA08
		private static bool GetTimeOfNNN(DateTimeFormatInfo dtfi, ref DateTimeResult result, ref DateTimeRawInfo raw); // 0x0056AA08-0x0056AAD4
		private static bool GetDateOfDSN(ref DateTimeResult result, ref DateTimeRawInfo raw); // 0x0056AAD4-0x0056AB78
		private static bool GetDateOfNDS(ref DateTimeResult result, ref DateTimeRawInfo raw); // 0x0056AB78-0x0056AC58
		private static bool GetDateOfNNDS(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x0056AC58-0x0056AEC0
		private static bool ProcessDateTimeSuffix(ref DateTimeResult result, ref DateTimeRawInfo raw, ref DateTimeToken dtok); // 0x0056AEC0-0x0056AFB8
		internal static bool ProcessHebrewTerminalState(DS dps, ref DateTimeResult result, ref DateTimeStyles styles, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x0056AFB8-0x0056B2DC
		internal static bool ProcessTerminaltState(DS dps, ref DateTimeResult result, ref DateTimeStyles styles, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x005680F8-0x005684F8
		internal static DateTime Parse(string s, DateTimeFormatInfo dtfi, DateTimeStyles styles); // 0x0055FB88-0x0055FC70
		internal static bool TryParse(string s, DateTimeFormatInfo dtfi, DateTimeStyles styles, ref DateTimeResult result); // 0x0056B2DC-0x0056BAC0
		private static bool DetermineTimeZoneAdjustments(ref DateTimeResult result, DateTimeStyles styles, bool bTimeOnly); // 0x0056C2B8-0x0056C4B0
		private static bool DateTimeOffsetTimeZonePostProcessing(ref DateTimeResult result, DateTimeStyles styles); // 0x0056C4B0-0x0056C6A0
		private static bool AdjustTimeZoneToUniversal(ref DateTimeResult result); // 0x0056C6A0-0x0056C778
		private static bool AdjustTimeZoneToLocal(ref DateTimeResult result, bool bTimeOnly); // 0x0056C778-0x0056C99C
		private static bool ParseISO8601(ref DateTimeRawInfo raw, ref __DTString str, DateTimeStyles styles, ref DateTimeResult result); // 0x0056BAC0-0x0056C004
		internal static bool MatchHebrewDigits(ref __DTString str, int digitLen, out int number); // 0x0056CA48-0x0056CB34
		internal static bool ParseDigits(ref __DTString str, int digitLen, out int result); // 0x0056C99C-0x0056CA48
		internal static bool ParseDigits(ref __DTString str, int minDigitLen, int maxDigitLen, out int result); // 0x0056CB34-0x0056CBE8
		private static bool ParseFractionExact(ref __DTString str, int maxDigitLen, ref double result); // 0x0056CBE8-0x0056CD14
		private static bool ParseSign(ref __DTString str, ref bool result); // 0x0056CD14-0x0056CD7C
		private static bool ParseTimeZoneOffset(ref __DTString str, int len, ref TimeSpan result); // 0x0056CD7C-0x0056CF3C
		private static bool MatchAbbreviatedMonthName(ref __DTString str, DateTimeFormatInfo dtfi, ref int result); // 0x0056CF3C-0x0056D0F4
		private static bool MatchMonthName(ref __DTString str, DateTimeFormatInfo dtfi, ref int result); // 0x0056D0F4-0x0056D300
		private static bool MatchAbbreviatedDayName(ref __DTString str, DateTimeFormatInfo dtfi, ref int result); // 0x0056D300-0x0056D42C
		private static bool MatchDayName(ref __DTString str, DateTimeFormatInfo dtfi, ref int result); // 0x0056D42C-0x0056D558
		private static bool MatchEraName(ref __DTString str, DateTimeFormatInfo dtfi, ref int result); // 0x0056D558-0x0056D704
		private static bool MatchTimeMark(ref __DTString str, DateTimeFormatInfo dtfi, ref TM result); // 0x0056D704-0x0056D8CC
		private static bool MatchAbbreviatedTimeMark(ref __DTString str, DateTimeFormatInfo dtfi, ref TM result); // 0x0056D8CC-0x0056D9CC
		private static bool CheckNewValue(ref int currentValue, int newValue, char patternChar, ref DateTimeResult result); // 0x0056D9CC-0x0056DA84
		private static DateTime GetDateTimeNow(ref DateTimeResult result, ref DateTimeStyles styles); // 0x00569188-0x00569288
		private static bool CheckDefaultDateTime(ref DateTimeResult result, ref Calendar cal, DateTimeStyles styles); // 0x0056C004-0x0056C2B8
		private static string ExpandPredefinedFormat(string format, ref DateTimeFormatInfo dtfi, ref ParsingInfo parseInfo, ref DateTimeResult result); // 0x0056DA84-0x0056DF20
		private static bool ParseByFormat(ref __DTString str, ref __DTString format, ref ParsingInfo parseInfo, DateTimeFormatInfo dtfi, ref DateTimeResult result); // 0x0056DF20-0x0056F034
		internal static bool TryParseQuoteString(string format, int pos, StringBuilder result, out int returnValue); // 0x0056F034-0x0056F198
		private static bool DoStrictParse(string s, string formatParam, DateTimeStyles styles, DateTimeFormatInfo dtfi, ref DateTimeResult result); // 0x005663A0-0x00566A80
		private static Exception GetDateTimeParseException(ref DateTimeResult result); // 0x00566214-0x005663A0
	}

	internal struct __DTString // TypeDefIndex: 207
	{
		// Fields
		internal string Value; // 0x00
		internal int Index; // 0x08
		internal int len; // 0x0C
		internal char m_current; // 0x10
		private CompareInfo m_info; // 0x18
		private bool m_checkDigitToken; // 0x20
		private static char[] WhiteSpaceChecks; // 0x00
	
		// Properties
		internal CompareInfo CompareInfo { get; } // 0x00BD3678-0x00BD36E8 
	
		// Constructors
		internal __DTString(string str, DateTimeFormatInfo dtfi, bool checkDigitToken); // 0x00BD3638-0x00BD3668
		internal __DTString(string str, DateTimeFormatInfo dtfi); // 0x00BD3668-0x00BD3678
		static __DTString(); // 0x00BD4D9C-0x00BD4E50
	
		// Methods
		internal bool GetNext(); // 0x00BD36E8-0x00BD3700
		internal bool AtEnd(); // 0x00BD3700-0x00BD3778
		internal bool Advance(int count); // 0x00BD3778-0x00BD3A4C
		internal void GetRegularToken(out TokenType tokenType, out int tokenValue, DateTimeFormatInfo dtfi); // 0x00BD3A4C-0x00BD3C28
		internal TokenType GetSeparatorToken(DateTimeFormatInfo dtfi, out int indexBeforeSeparator, out char charBeforeSeparator); // 0x00BD3C28-0x00BD3D3C
		internal bool MatchSpecifiedWord(string target); // 0x00BD3D3C-0x00BD3D44
		internal bool MatchSpecifiedWord(string target, int endIndex); // 0x00BD3D44-0x00BD41E0
		internal bool MatchSpecifiedWords(string target, bool checkWordBoundary, ref int matchLength); // 0x00BD41E0-0x00BD4354
		internal bool Match(string str); // 0x00BD4354-0x00BD43E8
		internal bool Match(char ch); // 0x00BD43E8-0x00BD44CC
		internal int MatchLongestWords(string[] words, ref int maxMatchStrLen); // 0x00BD44CC-0x00BD4578
		internal int GetRepeatCount(); // 0x00BD4578-0x00BD4634
		internal bool GetNextDigit(); // 0x00BD4634-0x00BD4674
		internal char GetChar(); // 0x00BD4674-0x00BD46C0
		internal int GetDigit(); // 0x00BD46C0-0x00BD4790
		internal void SkipWhiteSpaces(); // 0x00BD4790-0x00BD4798
		internal bool SkipWhiteSpaceCurrent(); // 0x00BD4798-0x00BD489C
		internal void TrimTail(); // 0x00BD489C-0x00BD4A60
		internal void RemoveTrailingInQuoteSpaces(); // 0x00BD4A60-0x00BD4BB0
		internal void RemoveLeadingInQuoteSpaces(); // 0x00BD4BB0-0x00BD4D00
		internal DTSubString GetSubString(); // 0x00BD4D00-0x00BD4D68
		internal void ConsumeSubString(DTSubString sub); // 0x00BD4D68-0x00BD4D9C
	}

	internal enum DTSubStringType // TypeDefIndex: 208
	{
		Unknown = 0,
		Invalid = 1,
		Number = 2,
		End = 3,
		Other = 4
	}

	internal struct DTSubString // TypeDefIndex: 209
	{
		// Fields
		internal string s; // 0x00
		internal int index; // 0x08
		internal int length; // 0x0C
		internal DTSubStringType type; // 0x10
		internal int value; // 0x14
	
		// Properties
		internal char this[int relativeIndex] { get => default; } // 0x0055D6CC-0x0055D6D4 
	}

	internal struct DateTimeToken // TypeDefIndex: 210
	{
		// Fields
		internal DateTimeParse.DTT dtt; // 0x00
		internal TokenType suffix; // 0x04
		internal int num; // 0x08
	}

	internal struct DateTimeRawInfo // TypeDefIndex: 211
	{
		// Fields
		private unsafe int* num; // 0x00
		internal int numCount; // 0x08
		internal int month; // 0x0C
		internal int year; // 0x10
		internal int dayOfWeek; // 0x14
		internal int era; // 0x18
		internal DateTimeParse.TM timeMark; // 0x1C
		internal double fraction; // 0x20
		internal bool hasSameDateAndTimeSeparators; // 0x28
		internal bool timeZone; // 0x29
	
		// Methods
		internal unsafe void Init(int* numberBuffer); // 0x00742424-0x00742460
		internal void AddNumber(int value); // 0x00742460-0x00742484
		internal int GetNumber(int index); // 0x00742484-0x007424FC
	}

	internal enum ParseFailureKind // TypeDefIndex: 212
	{
		None = 0,
		ArgumentNull = 1,
		Format = 2,
		FormatWithParameter = 3,
		FormatBadDateTimeCalendar = 4
	}

	[Flags] // 0x003942C8-0x003942D8
	internal enum ParseFlags // TypeDefIndex: 213
	{
		HaveYear = 1,
		HaveMonth = 2,
		HaveDay = 4,
		HaveHour = 8,
		HaveMinute = 16,
		HaveSecond = 32,
		HaveTime = 64,
		HaveDate = 128,
		TimeZoneUsed = 256,
		TimeZoneUtc = 512,
		ParsedMonthName = 1024,
		CaptureOffset = 2048,
		YearDefault = 4096,
		Rfc1123Pattern = 8192,
		UtcSortPattern = 16384
	}

	internal struct DateTimeResult // TypeDefIndex: 214
	{
		// Fields
		internal int Year; // 0x00
		internal int Month; // 0x04
		internal int Day; // 0x08
		internal int Hour; // 0x0C
		internal int Minute; // 0x10
		internal int Second; // 0x14
		internal double fraction; // 0x18
		internal int era; // 0x20
		internal ParseFlags flags; // 0x24
		internal TimeSpan timeZoneOffset; // 0x28
		internal Calendar calendar; // 0x30
		internal DateTime parsedDate; // 0x38
		internal ParseFailureKind failure; // 0x40
		internal string failureMessageID; // 0x48
		internal object failureMessageFormatArgument; // 0x50
		internal string failureArgumentName; // 0x58
	
		// Methods
		internal void Init(); // 0x007424FC-0x00742528
		internal void SetDate(int year, int month, int day); // 0x00742528-0x00742540
		internal void SetFailure(ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument); // 0x00742540-0x0074255C
		internal void SetFailure(ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument, string failureArgumentName); // 0x0074255C-0x0074256C
	}

	internal struct ParsingInfo // TypeDefIndex: 215
	{
		// Fields
		internal Calendar calendar; // 0x00
		internal int dayOfWeek; // 0x08
		internal DateTimeParse.TM timeMark; // 0x0C
		internal bool fUseHour12; // 0x10
		internal bool fUseTwoDigitYear; // 0x11
		internal bool fAllowInnerWhite; // 0x12
		internal bool fAllowTrailingWhite; // 0x13
		internal bool fCustomNumberParser; // 0x14
		internal DateTimeParse.MatchNumberDelegate parseNumberDelegate; // 0x18
	
		// Methods
		internal void Init(); // 0x00909FF8-0x0090A004
	}

	internal enum TokenType // TypeDefIndex: 216
	{
		NumberToken = 1,
		YearNumberToken = 2,
		Am = 3,
		Pm = 4,
		MonthToken = 5,
		EndOfString = 6,
		DayOfWeekToken = 7,
		TimeZoneToken = 8,
		EraToken = 9,
		DateWordToken = 10,
		UnknownToken = 11,
		HebrewNumber = 12,
		JapaneseEraToken = 13,
		TEraToken = 14,
		IgnorableSymbol = 15,
		RegularTokenMask = 255,
		SEP_Unk = 256,
		SEP_End = 512,
		SEP_Space = 768,
		SEP_Am = 1024,
		SEP_Pm = 1280,
		SEP_Date = 1536,
		SEP_Time = 1792,
		SEP_YearSuff = 2048,
		SEP_MonthSuff = 2304,
		SEP_DaySuff = 2560,
		SEP_HourSuff = 2816,
		SEP_MinuteSuff = 3072,
		SEP_SecondSuff = 3328,
		SEP_LocalTimeMark = 3584,
		SEP_DateOrOffset = 3840,
		SeparatorTokenMask = 65280
	}

	[Serializable]
	[ComVisible] // 0x003942D8-0x003942EC
	public struct Guid : IFormattable, IComparable, IComparable<Guid>, IEquatable<Guid> // TypeDefIndex: 217
	{
		// Fields
		public static readonly Guid Empty; // 0x00
		private int _a; // 0x00
		private short _b; // 0x04
		private short _c; // 0x06
		private byte _d; // 0x08
		private byte _e; // 0x09
		private byte _f; // 0x0A
		private byte _g; // 0x0B
		private byte _h; // 0x0C
		private byte _i; // 0x0D
		private byte _j; // 0x0E
		private byte _k; // 0x0F
		private static object _rngAccess; // 0x10
		private static RandomNumberGenerator _rng; // 0x18
	
		// Nested types
		[Flags] // 0x003942EC-0x003942FC
		private enum GuidStyles // TypeDefIndex: 218
		{
			None = 0,
			NumberFormat = 0,
			AllowParenthesis = 1,
			AllowBraces = 2,
			AllowDashes = 4,
			AllowHexPrefix = 8,
			Any = 15,
			RequireParenthesis = 16,
			RequireBraces = 32,
			RequireDashes = 64,
			DigitFormat = 64,
			ParenthesisFormat = 80,
			BraceFormat = 96,
			RequireHexPrefix = 128,
			HexFormat = 160
		}
	
		private enum GuidParseThrowStyle // TypeDefIndex: 219
		{
			None = 0,
			All = 1,
			AllButOverflow = 2
		}
	
		private enum ParseFailureKind // TypeDefIndex: 220
		{
			None = 0,
			ArgumentNull = 1,
			Format = 2,
			FormatWithParameter = 3,
			NativeException = 4,
			FormatWithInnerException = 5
		}
	
		private struct GuidResult // TypeDefIndex: 221
		{
			// Fields
			internal Guid parsedGuid; // 0x00
			internal GuidParseThrowStyle throwStyle; // 0x10
			internal ParseFailureKind m_failure; // 0x14
			internal string m_failureMessageID; // 0x18
			internal object m_failureMessageFormatArgument; // 0x20
			internal string m_failureArgumentName; // 0x28
			internal Exception m_innerException; // 0x30
	
			// Methods
			internal void Init(GuidParseThrowStyle canThrow); // 0x00633A18-0x00633A20
			internal void SetFailure(Exception nativeException); // 0x00633A20-0x00633A30
			internal void SetFailure(ParseFailureKind failure, string failureMessageID); // 0x00633A30-0x00633A44
			internal void SetFailure(ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument); // 0x00633A44-0x00633A54
			internal void SetFailure(ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument, string failureArgumentName, Exception innerException); // 0x00633A54-0x00633A5C
			internal Exception GetGuidParseException(); // 0x00633A5C-0x00633A64
		}
	
		// Constructors
		public Guid(byte[] b); // 0x00630AD0-0x00630C88
		public Guid(string g); // 0x006310D4-0x006310DC
		static Guid(); // 0x00633954-0x00633A18
	
		// Methods
		public static Guid Parse(string input); // 0x006310DC-0x006311E8
		private static bool TryParseGuid(string g, GuidStyles flags, ref GuidResult result); // 0x00630C88-0x006310D4
		private static bool TryParseGuidWithHexPrefix(string guidString, ref GuidResult result); // 0x00631604-0x00631CE0
		private static bool TryParseGuidWithNoStyle(string guidString, ref GuidResult result); // 0x00631CE0-0x00632120
		private static bool TryParseGuidWithDashes(string guidString, ref GuidResult result); // 0x006311E8-0x00631604
		private static bool StringToShort(string str, int requiredLength, int flags, out short result, ref GuidResult parseResult); // 0x0063244C-0x006324E4
		private static unsafe bool StringToShort(string str, int* parsePos, int requiredLength, int flags, out short result, ref GuidResult parseResult); // 0x0063261C-0x006326D8
		private static bool StringToInt(string str, int requiredLength, int flags, out int result, ref GuidResult parseResult); // 0x006323B4-0x0063244C
		private static bool StringToInt(string str, ref int parsePos, int requiredLength, int flags, out int result, ref GuidResult parseResult); // 0x00632578-0x0063261C
		private static unsafe bool StringToInt(string str, int* parsePos, int requiredLength, int flags, out int result, ref GuidResult parseResult); // 0x006326D8-0x006328EC
		private static bool StringToLong(string str, ref int parsePos, int flags, out long result, ref GuidResult parseResult); // 0x006324E4-0x00632578
		private static unsafe bool StringToLong(string str, int* parsePos, int flags, out long result, ref GuidResult parseResult); // 0x006328EC-0x0063307C
		private static string EatAllWhitespace(string str); // 0x00632120-0x00632280
		private static bool IsHexPrefix(string str, int i); // 0x00632280-0x006323B4
		public override string ToString(); // 0x0063307C-0x00633084
		public override int GetHashCode(); // 0x00633084-0x006331D4
		public override bool Equals(object o); // 0x006331D4-0x0063328C
		public bool Equals(Guid g); // 0x0063328C-0x00633294
		private int GetResult(uint me, uint them); // 0x00633294-0x00633438
		public int CompareTo(object value); // 0x00633438-0x0063354C
		public int CompareTo(Guid value); // 0x0063354C-0x00633558
		public static bool operator ==(Guid a, Guid b); // 0x0062C0E0-0x0062C18C
		public string ToString(string format); // 0x00633558-0x00633560
		private static char HexToChar(int a); // 0x00633560-0x0063357C
		private static unsafe int HexsToChars(char* guidChars, int offset, int a, int b); // 0x0063357C-0x0063360C
		private static unsafe int HexsToChars(char* guidChars, int offset, int a, int b, bool hex); // 0x0063360C-0x00633770
		public string ToString(string format, IFormatProvider provider); // 0x00633770-0x00633778
		public static Guid NewGuid(); // 0x00633778-0x00633954
	}

	[CLSCompliant] // 0x003942FC-0x00394374
	[ComVisible] // 0x003942FC-0x00394374
	[Guid] // 0x003942FC-0x00394374
	[InterfaceType] // 0x003942FC-0x00394374
	public interface _AppDomain // TypeDefIndex: 222
	{
	}

	[ComVisible] // 0x00394374-0x003943D8
	[Guid] // 0x00394374-0x003943D8
	[InterfaceType] // 0x00394374-0x003943D8
	public interface IAppDomainSetup // TypeDefIndex: 223
	{
	}

	[ComVisible] // 0x003943D8-0x003943EC
	public interface IAsyncResult // TypeDefIndex: 224
	{
		// Properties
		WaitHandle AsyncWaitHandle { get; }
		object AsyncState { get; }
		bool CompletedSynchronously { get; }
	}

	[ComVisible] // 0x003943EC-0x00394400
	public interface ICloneable // TypeDefIndex: 225
	{
		// Methods
		object Clone();
	}

	[ComVisible] // 0x00394400-0x00394414
	public interface IComparable // TypeDefIndex: 226
	{
		// Methods
		int CompareTo(object obj);
	}

	public interface IComparable<in T> // TypeDefIndex: 227
	{
		// Methods
		int CompareTo(T other);
	}

	[CLSCompliant] // 0x00394414-0x00394454
	[ComVisible] // 0x00394414-0x00394454
	public interface IConvertible // TypeDefIndex: 228
	{
		// Methods
		TypeCode GetTypeCode();
		bool ToBoolean(IFormatProvider provider);
		char ToChar(IFormatProvider provider);
		sbyte ToSByte(IFormatProvider provider);
		byte ToByte(IFormatProvider provider);
		short ToInt16(IFormatProvider provider);
		ushort ToUInt16(IFormatProvider provider);
		int ToInt32(IFormatProvider provider);
		uint ToUInt32(IFormatProvider provider);
		long ToInt64(IFormatProvider provider);
		ulong ToUInt64(IFormatProvider provider);
		float ToSingle(IFormatProvider provider);
		double ToDouble(IFormatProvider provider);
		decimal ToDecimal(IFormatProvider provider);
		DateTime ToDateTime(IFormatProvider provider);
		string ToString(IFormatProvider provider);
		object ToType(Type conversionType, IFormatProvider provider);
	}

	[ComVisible] // 0x00394454-0x00394468
	public interface ICustomFormatter // TypeDefIndex: 229
	{
		// Methods
		string Format(string format, object arg, IFormatProvider formatProvider);
	}

	[ComVisible] // 0x00394468-0x0039447C
	public interface IDisposable // TypeDefIndex: 230
	{
		// Methods
		void Dispose();
	}

	public interface IEquatable<T> // TypeDefIndex: 231
	{
		// Methods
		bool Equals(T other);
	}

	[ComVisible] // 0x0039447C-0x00394490
	public interface IFormatProvider // TypeDefIndex: 232
	{
		// Methods
		object GetFormat(Type formatType);
	}

	[ComVisible] // 0x00394490-0x003944A4
	public interface IFormattable // TypeDefIndex: 233
	{
		// Methods
		string ToString(string format, IFormatProvider formatProvider);
	}

	[Serializable]
	[ComVisible] // 0x003944A4-0x003944B8
	public sealed class IndexOutOfRangeException : SystemException // TypeDefIndex: 234
	{
		// Constructors
		public IndexOutOfRangeException(); // 0x004E3FD4-0x004E4048
		public IndexOutOfRangeException(string message); // 0x004E245C-0x004E2490
		internal IndexOutOfRangeException(SerializationInfo info, StreamingContext context); // 0x004E4048-0x004E41D8
	}

	[Serializable]
	[ComVisible] // 0x003944B8-0x003944CC
	public struct Int16 : IComparable, IFormattable, IConvertible, IComparable<short>, IEquatable<short> // TypeDefIndex: 235
	{
		// Fields
		internal short m_value; // 0x00
		public const short MaxValue = 32767; // Metadata: 0x0020381C
		public const short MinValue = -32768; // Metadata: 0x0020381E
	
		// Methods
		public int CompareTo(object value); // 0x004E41D8-0x004E41E0
		public int CompareTo(short value); // 0x004E41E0-0x004E4274
		public override bool Equals(object obj); // 0x004E4274-0x004E428C
		public bool Equals(short obj); // 0x004E428C-0x004E42A8
		public override int GetHashCode(); // 0x004E42A8-0x004E42B4
		public override string ToString(); // 0x004E4330-0x004E4360
		public string ToString(IFormatProvider provider); // 0x004E4360-0x004E4440
		public string ToString(string format, IFormatProvider provider); // 0x004E4440-0x004E4478
		private string ToString(string format, NumberFormatInfo info); // 0x004E44F4-0x004E44FC
		public static short Parse(string s, IFormatProvider provider); // 0x004E44FC-0x004E4530
		public static short Parse(string s, NumberStyles style, IFormatProvider provider); // 0x004E46B4-0x004E4704
		private static short Parse(string s, NumberStyles style, NumberFormatInfo info); // 0x004E4530-0x004E46B4
		public TypeCode GetTypeCode(); // 0x004E4878-0x004E48EC
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x004E48EC-0x004E4960
		char IConvertible.ToChar(IFormatProvider provider); // 0x004E4960-0x004E49D4
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x004E49D4-0x004E4A48
		byte IConvertible.ToByte(IFormatProvider provider); // 0x004E4A48-0x004E4A50
		short IConvertible.ToInt16(IFormatProvider provider); // 0x004E4A50-0x004E4AC4
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x004E4AC4-0x004E4B38
		int IConvertible.ToInt32(IFormatProvider provider); // 0x004E4B38-0x004E4BAC
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x004E4BAC-0x004E4C20
		long IConvertible.ToInt64(IFormatProvider provider); // 0x004E4C20-0x004E4C94
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x004E4C94-0x004E4D08
		float IConvertible.ToSingle(IFormatProvider provider); // 0x004E4D08-0x004E4D7C
		double IConvertible.ToDouble(IFormatProvider provider); // 0x004E4D7C-0x004E4DF0
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x004E4DF0-0x004E4EF4
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x004E4F28-0x004E4FE4
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x004E4FE4-0x004E50D8
	}

	[Serializable]
	[ComVisible] // 0x003944CC-0x003944E0
	public struct Int32 : IComparable, IFormattable, IConvertible, IComparable<int>, IEquatable<int> // TypeDefIndex: 236
	{
		// Fields
		internal int m_value; // 0x00
		public const int MaxValue = 2147483647; // Metadata: 0x00203820
		public const int MinValue = -2147483648; // Metadata: 0x00203824
	
		// Methods
		public int CompareTo(object value); // 0x004E50D8-0x004E50FC
		public int CompareTo(int value); // 0x004E50FC-0x004E5198
		public override bool Equals(object obj); // 0x004E5198-0x004E51B0
		public bool Equals(int obj); // 0x004E51B0-0x004E51C8
		public override int GetHashCode(); // 0x004E51C8-0x004E5200
		public override string ToString(); // 0x004E5200-0x004E5264
		public string ToString(string format); // 0x004E5264-0x004E52CC
		public string ToString(IFormatProvider provider); // 0x004E52CC-0x004E5338
		public string ToString(string format, IFormatProvider provider); // 0x004E5338-0x004E5370
		public static int Parse(string s); // 0x004E5370-0x004E53A0
		public static int Parse(string s, IFormatProvider provider); // 0x004E53A0-0x004E53D4
		public static int Parse(string s, NumberStyles style, IFormatProvider provider); // 0x004E53D4-0x004E5424
		public static bool TryParse(string s, out int result); // 0x004E5424-0x004E545C
		public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out int result); // 0x004E5594-0x004E55EC
		public TypeCode GetTypeCode(); // 0x004E55EC-0x004E5660
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x004E5660-0x004E56D4
		char IConvertible.ToChar(IFormatProvider provider); // 0x004E56D4-0x004E5748
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x004E5748-0x004E57BC
		byte IConvertible.ToByte(IFormatProvider provider); // 0x004E57BC-0x004E5830
		short IConvertible.ToInt16(IFormatProvider provider); // 0x004E5830-0x004E58A4
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x004E58A4-0x004E58AC
		int IConvertible.ToInt32(IFormatProvider provider); // 0x004E58AC-0x004E5920
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x004E5920-0x004E5994
		long IConvertible.ToInt64(IFormatProvider provider); // 0x004E5994-0x004E5A08
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x004E5A08-0x004E5A7C
		float IConvertible.ToSingle(IFormatProvider provider); // 0x004E5A7C-0x004E5AF0
		double IConvertible.ToDouble(IFormatProvider provider); // 0x004E5AF0-0x004E5B64
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x004E5B64-0x004E5C68
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x004E5C68-0x004E5D24
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x004E5D24-0x004E5E18
	}

	[Serializable]
	[ComVisible] // 0x003944E0-0x003944F4
	public struct Int64 : IComparable, IFormattable, IConvertible, IComparable<long>, IEquatable<long> // TypeDefIndex: 237
	{
		// Fields
		internal long m_value; // 0x00
		public const long MaxValue = 9223372036854775807; // Metadata: 0x00203828
		public const long MinValue = -9223372036854775808; // Metadata: 0x00203830
	
		// Methods
		public int CompareTo(object value); // 0x004E5E18-0x004E5E20
		public int CompareTo(long value); // 0x004E5E20-0x004E5EBC
		public override bool Equals(object obj); // 0x004E5EBC-0x004E5ED4
		public bool Equals(long obj); // 0x004E5ED4-0x004E5EF0
		public override int GetHashCode(); // 0x004E5EF0-0x004E5F2C
		public override string ToString(); // 0x004E5FA8-0x004E600C
		public string ToString(IFormatProvider provider); // 0x004E600C-0x004E6078
		public string ToString(string format, IFormatProvider provider); // 0x004E6078-0x004E60B0
		public static long Parse(string s); // 0x004E60B0-0x004E60E0
		public static long Parse(string s, IFormatProvider provider); // 0x004E6254-0x004E6288
		public static long Parse(string s, NumberStyles style, IFormatProvider provider); // 0x004E6288-0x004E62D8
		public static bool TryParse(string s, out long result); // 0x004E62D8-0x004E6310
		public TypeCode GetTypeCode(); // 0x004E6440-0x004E64B4
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x004E64B4-0x004E6528
		char IConvertible.ToChar(IFormatProvider provider); // 0x004E6528-0x004E659C
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x004E659C-0x004E6610
		byte IConvertible.ToByte(IFormatProvider provider); // 0x004E6610-0x004E6684
		short IConvertible.ToInt16(IFormatProvider provider); // 0x004E6684-0x004E66F8
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x004E66F8-0x004E676C
		int IConvertible.ToInt32(IFormatProvider provider); // 0x004E676C-0x004E67E0
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x004E67E0-0x004E67E8
		long IConvertible.ToInt64(IFormatProvider provider); // 0x004E67E8-0x004E685C
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x004E685C-0x004E68D0
		float IConvertible.ToSingle(IFormatProvider provider); // 0x004E68D0-0x004E6944
		double IConvertible.ToDouble(IFormatProvider provider); // 0x004E6944-0x004E69B8
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x004E69B8-0x004E6ABC
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x004E6ABC-0x004E6B78
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x004E6B78-0x004E6B8C
	}

	[Serializable]
	[ComVisible] // 0x003944F4-0x00394508
	public class InvalidCastException : SystemException // TypeDefIndex: 238
	{
		// Constructors
		public InvalidCastException(); // 0x004E6E7C-0x004E6EF0
		public InvalidCastException(string message); // 0x004E4EF4-0x004E4F28
		protected InvalidCastException(SerializationInfo info, StreamingContext context); // 0x004E6EF0-0x004E6EF8
	}

	[Serializable]
	[ComVisible] // 0x00394508-0x0039451C
	public class InvalidOperationException : SystemException // TypeDefIndex: 239
	{
		// Constructors
		public InvalidOperationException(); // 0x004E6EF8-0x004E6F6C
		public InvalidOperationException(string message); // 0x004D801C-0x004D8050
		public InvalidOperationException(string message, Exception innerException); // 0x004E6F6C-0x004E6FA0
		protected InvalidOperationException(SerializationInfo info, StreamingContext context); // 0x004E6FA0-0x004E6FA8
	}

	[Serializable]
	[ComVisible] // 0x0039451C-0x00394530
	public sealed class InvalidProgramException : SystemException // TypeDefIndex: 240
	{
		// Constructors
		public InvalidProgramException(); // 0x004E6FA8-0x004E701C
		public InvalidProgramException(string message); // 0x004E701C-0x004E7050
		internal InvalidProgramException(SerializationInfo info, StreamingContext context); // 0x004E7050-0x004E7058
	}

	[Serializable]
	[TypeForwardedFrom] // 0x00394530-0x00394568
	public class InvalidTimeZoneException : Exception // TypeDefIndex: 241
	{
		// Constructors
		public InvalidTimeZoneException(string message); // 0x004E7058-0x004E70D0
		public InvalidTimeZoneException(string message, Exception innerException); // 0x004E70D0-0x004E7150
		protected InvalidTimeZoneException(SerializationInfo info, StreamingContext context); // 0x004E7150-0x004E71E0
		public InvalidTimeZoneException(); // 0x004E71E0-0x004E7248
	}

	public static class Math // TypeDefIndex: 242
	{
		// Fields
		private static double doubleRoundLimit; // 0x00
		private const int maxRoundingDigits = 15; // Metadata: 0x00203838
		private static double[] roundPower10Double; // 0x08
		public const double PI = 3.141592653589793; // Metadata: 0x0020383C
		public const double E = 2.718281828459045; // Metadata: 0x00203844
	
		// Constructors
		static Math(); // 0x004E8F34-0x004E8FCC
	
		// Methods
		public static double Acos(double d); // 0x004E8A80-0x004E8A84
		public static double Asin(double d); // 0x004E8A84-0x004E8A88
		public static double Atan(double d); // 0x004E8A88-0x004E8A8C
		public static double Atan2(double y, double x); // 0x004E8A8C-0x004E8A90
		public static double Ceiling(double a); // 0x004E8A90-0x004E8A98
		public static double Cos(double d); // 0x004E8A98-0x004E8A9C
		public static double Floor(double d); // 0x004E8A9C-0x004E8AA4
		private static double InternalTruncate(double d); // 0x004E8AA4-0x004E8B10
		public static double Sin(double a); // 0x004E8B14-0x004E8B18
		public static double Tan(double a); // 0x004E8B18-0x004E8B1C
		public static double Round(double a); // 0x004E8B1C-0x004E8B9C
		private static unsafe double SplitFractionDouble(double* value); // 0x004E8B10-0x004E8B14
		public static double Truncate(double d); // 0x004E8B9C-0x004E8C08
		[ReliabilityContract] // 0x0039D590-0x0039D5A8
		public static double Sqrt(double d); // 0x004E8C08-0x004E8C20
		public static double Log(double d); // 0x004E8C20-0x004E8C24
		public static double Pow(double x, double y); // 0x004E8C24-0x004E8C28
		public static int Abs(int value); // 0x004E8C28-0x004E8CA0
		private static int AbsHelper(int value); // 0x004E8CA0-0x004E8D48
		public static float Abs(float value); // 0x004E8D48-0x004E8D50
		[ReliabilityContract] // 0x0039D5A8-0x0039D5C0
		public static int Max(int val1, int val2); // 0x004E8D50-0x004E8D5C
		[ReliabilityContract] // 0x0039D5C0-0x0039D5D8
		public static float Max(float val1, float val2); // 0x004E8D5C-0x004E8DA0
		[ReliabilityContract] // 0x0039D5D8-0x0039D5F0
		public static int Min(int val1, int val2); // 0x004E8DA0-0x004E8DAC
		[ReliabilityContract] // 0x0039D5F0-0x0039D608
		public static float Min(float val1, float val2); // 0x004E8DAC-0x004E8DF0
		public static double Log(double a, double newBase); // 0x004E8DF0-0x004E8F34
	}

	[Serializable]
	[ComVisible] // 0x00394568-0x0039457C
	public class MemberAccessException : SystemException // TypeDefIndex: 243
	{
		// Constructors
		public MemberAccessException(); // 0x004E8FCC-0x004E9040
		public MemberAccessException(string message); // 0x004E9040-0x004E9074
		protected MemberAccessException(SerializationInfo info, StreamingContext context); // 0x004E9074-0x004E907C
	}

	[Serializable]
	[ComVisible] // 0x0039457C-0x00394590
	public class MethodAccessException : MemberAccessException // TypeDefIndex: 244
	{
		// Constructors
		public MethodAccessException(); // 0x004E907C-0x004E9108
		public MethodAccessException(string message); // 0x004E9108-0x004E9154
		protected MethodAccessException(SerializationInfo info, StreamingContext context); // 0x004E9154-0x004E915C
	}

	[Serializable]
	[ComVisible] // 0x00394590-0x003945A4
	public class MissingFieldException : MissingMemberException, ISerializable // TypeDefIndex: 245
	{
		// Properties
		public override string Message { get; } // 0x004E9408-0x004E953C 
	
		// Constructors
		public MissingFieldException(); // 0x004E915C-0x004E91CC
		public MissingFieldException(string message); // 0x004E9218-0x004E9248
		protected MissingFieldException(SerializationInfo info, StreamingContext context); // 0x004E9248-0x004E924C
		public MissingFieldException(string className, string fieldName); // 0x004E969C-0x004E96D0
	}

	[Serializable]
	[ComVisible] // 0x003945A4-0x003945B8
	public class MissingMemberException : MemberAccessException, ISerializable // TypeDefIndex: 246
	{
		// Fields
		protected string ClassName; // 0x88
		protected string MemberName; // 0x90
		protected byte[] Signature; // 0x98
	
		// Properties
		public override string Message { get; } // 0x004E953C-0x004E9698 
	
		// Constructors
		public MissingMemberException(); // 0x004E96D0-0x004E975C
		public MissingMemberException(string message); // 0x004E91CC-0x004E9218
		protected MissingMemberException(SerializationInfo info, StreamingContext context); // 0x004E924C-0x004E9408
	
		// Methods
		internal static string FormatSignature(byte[] signature); // 0x004E9698-0x004E969C
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x004E975C-0x004E98D8
	}

	[Serializable]
	[ComVisible] // 0x003945B8-0x003945CC
	public class MissingMethodException : MissingMemberException, ISerializable // TypeDefIndex: 247
	{
		// Fields
		[NonSerialized]
		private string signature; // 0xA0
	
		// Properties
		public override string Message { get; } // 0x004E997C-0x004E9A78 
	
		// Constructors
		public MissingMethodException(); // 0x004E98D8-0x004E9948
		public MissingMethodException(string message); // 0x004E9948-0x004E9978
		protected MissingMethodException(SerializationInfo info, StreamingContext context); // 0x004E9978-0x004E997C
		public MissingMethodException(string className, string methodName); // 0x004E9A78-0x004E9AAC
		private MissingMethodException(string className, string methodName, string signature, string message); // 0x004E9AAC-0x004E9E5C
	}

	[Serializable]
	[ComVisible] // 0x003945CC-0x003945E0
	public sealed class MulticastNotSupportedException : SystemException // TypeDefIndex: 248
	{
		// Constructors
		public MulticastNotSupportedException(); // 0x004ED724-0x004ED798
		public MulticastNotSupportedException(string message); // 0x004ED798-0x004ED7CC
		internal MulticastNotSupportedException(SerializationInfo info, StreamingContext context); // 0x004ED7CC-0x004ED7D4
	}

	[AttributeUsage] // 0x003945E0-0x00394634
	[ComVisible] // 0x003945E0-0x00394634
	public sealed class NonSerializedAttribute : Attribute // TypeDefIndex: 249
	{
		// Constructors
		public NonSerializedAttribute(); // 0x004ED7D4-0x004ED7DC
	}

	[Serializable]
	[ComVisible] // 0x00394634-0x00394648
	public class NotImplementedException : SystemException // TypeDefIndex: 250
	{
		// Constructors
		public NotImplementedException(); // 0x004ED7DC-0x004ED850
		public NotImplementedException(string message); // 0x004ED850-0x004ED884
		protected NotImplementedException(SerializationInfo info, StreamingContext context); // 0x004ED884-0x004ED88C
	}

	[Serializable]
	[ComVisible] // 0x00394648-0x0039465C
	public class NotSupportedException : SystemException // TypeDefIndex: 251
	{
		// Constructors
		public NotSupportedException(); // 0x004E88E0-0x004E8954
		public NotSupportedException(string message); // 0x004E2428-0x004E245C
		protected NotSupportedException(SerializationInfo info, StreamingContext context); // 0x004ED88C-0x004ED894
	}

	[Serializable]
	[ComVisible] // 0x0039465C-0x00394670
	public class NullReferenceException : SystemException // TypeDefIndex: 252
	{
		// Constructors
		public NullReferenceException(); // 0x004ED994-0x004EDA08
		public NullReferenceException(string message); // 0x004EDA08-0x004EDA3C
		protected NullReferenceException(SerializationInfo info, StreamingContext context); // 0x004EDA3C-0x004EDA44
	}

	[FriendAccessAllowed] // 0x00394670-0x00394680
	internal class Number // TypeDefIndex: 253
	{
		// Nested types
		[FriendAccessAllowed] // 0x00394680-0x00394690
		internal struct NumberBuffer // TypeDefIndex: 254
		{
			// Fields
			public static readonly int NumberBufferBytes; // 0x00
			private unsafe byte* baseAddress; // 0x00
			public unsafe char* digits; // 0x08
			public int precision; // 0x10
			public int scale; // 0x14
			public bool sign; // 0x18
	
			// Constructors
			public unsafe NumberBuffer(byte* stackBuffer); // 0x004F0004-0x004F0018
			static NumberBuffer(); // 0x004F003C-0x004F0090
	
			// Methods
			public unsafe byte* PackForNative(); // 0x004F0018-0x004F003C
		}
	
		// Methods
		public static unsafe bool NumberBufferToDecimal(byte* number, ref decimal value); // 0x004EDBEC-0x004EDBF0
		internal static unsafe bool NumberBufferToDouble(byte* number, ref double value); // 0x004EDBF0-0x004EDBF4
		public static string FormatDecimal(decimal value, string format, NumberFormatInfo info); // 0x004EDBF4-0x004EDC80
		public static string FormatDouble(double value, string format, NumberFormatInfo info); // 0x004EDD80-0x004EDE04
		public static string FormatInt32(int value, string format, NumberFormatInfo info); // 0x004E42B4-0x004E4330
		public static string FormatUInt32(uint value, string format, NumberFormatInfo info); // 0x004E4478-0x004E44F4
		public static string FormatInt64(long value, string format, NumberFormatInfo info); // 0x004E5F2C-0x004E5FA8
		public static string FormatUInt64(ulong value, string format, NumberFormatInfo info); // 0x004EE258-0x004EE2D4
		public static string FormatSingle(float value, string format, NumberFormatInfo info); // 0x004EE3C0-0x004EE444
		private static bool HexNumberToInt32(ref NumberBuffer number, ref int value); // 0x004EE5C4-0x004EE5F8
		private static bool HexNumberToInt64(ref NumberBuffer number, ref long value); // 0x004EE698-0x004EE6CC
		private static bool HexNumberToUInt32(ref NumberBuffer number, ref uint value); // 0x004EE5F8-0x004EE698
		private static bool HexNumberToUInt64(ref NumberBuffer number, ref ulong value); // 0x004EE6CC-0x004EE770
		private static bool IsWhite(char ch); // 0x004EE770-0x004EE798
		private static bool NumberToInt32(ref NumberBuffer number, ref int value); // 0x004EE798-0x004EE824
		private static bool NumberToInt64(ref NumberBuffer number, ref long value); // 0x004EE824-0x004EE8A8
		private static bool NumberToUInt32(ref NumberBuffer number, ref uint value); // 0x004EE8A8-0x004EE938
		private static bool NumberToUInt64(ref NumberBuffer number, ref ulong value); // 0x004EE938-0x004EE9C8
		private static unsafe char* MatchChars(char* p, string str); // 0x004EE9C8-0x004EEA3C
		private static unsafe char* MatchChars(char* p, char* str); // 0x004EEA3C-0x004EEA88
		internal static decimal ParseDecimal(string value, NumberStyles options, NumberFormatInfo numfmt); // 0x004EEA88-0x004EEBEC
		internal static double ParseDouble(string value, NumberStyles options, NumberFormatInfo numfmt); // 0x004EED50-0x004EF020
		internal static int ParseInt32(string s, NumberStyles style, NumberFormatInfo info); // 0x004E4704-0x004E4878
		internal static long ParseInt64(string value, NumberStyles options, NumberFormatInfo numfmt); // 0x004E60E0-0x004E6254
		private static unsafe bool ParseNumber(ref char* str, NumberStyles options, ref NumberBuffer number, StringBuilder sb, NumberFormatInfo numfmt, bool parseDecimal); // 0x004EF034-0x004EF65C
		internal static float ParseSingle(string value, NumberStyles options, NumberFormatInfo numfmt); // 0x004EF65C-0x004EF948
		internal static uint ParseUInt32(string value, NumberStyles options, NumberFormatInfo numfmt); // 0x004EF948-0x004EFA9C
		internal static ulong ParseUInt64(string value, NumberStyles options, NumberFormatInfo numfmt); // 0x004EFA9C-0x004EFBF0
		private static void StringToNumber(string str, NumberStyles options, ref NumberBuffer number, NumberFormatInfo info, bool parseDecimal); // 0x004EEBEC-0x004EED50
		private static bool TrailingZeros(string s, int index); // 0x004EFBF0-0x004EFC64
		internal static bool TryParseInt32(string s, NumberStyles style, NumberFormatInfo info, out int result); // 0x004E545C-0x004E5594
		internal static bool TryParseInt64(string s, NumberStyles style, NumberFormatInfo info, out long result); // 0x004E6310-0x004E6440
		internal static bool TryParseSingle(string value, NumberStyles options, NumberFormatInfo numfmt, out float result); // 0x004EFC64-0x004EFDBC
		internal static bool TryParseUInt32(string s, NumberStyles style, NumberFormatInfo info, out uint result); // 0x004EFDBC-0x004EFEE0
		internal static bool TryStringToNumber(string str, NumberStyles options, ref NumberBuffer number, NumberFormatInfo numfmt, bool parseDecimal); // 0x004EF020-0x004EF034
		[FriendAccessAllowed] // 0x0039D608-0x0039D618
		internal static bool TryStringToNumber(string str, NumberStyles options, ref NumberBuffer number, StringBuilder sb, NumberFormatInfo numfmt, bool parseDecimal); // 0x004EFEE0-0x004F0004
	}

	[Serializable]
	[ComVisible] // 0x00394690-0x003946A4
	public class ObjectDisposedException : InvalidOperationException // TypeDefIndex: 255
	{
		// Fields
		private string objectName; // 0x88
	
		// Properties
		public override string Message { get; } // 0x0090629C-0x009063C0 
		public string ObjectName { get; } // 0x009063C0-0x0090644C 
	
		// Constructors
		private ObjectDisposedException(); // 0x00906154-0x009061D0
		public ObjectDisposedException(string objectName); // 0x00906214-0x0090629C
		public ObjectDisposedException(string objectName, string message); // 0x009061D0-0x00906214
		protected ObjectDisposedException(SerializationInfo info, StreamingContext context); // 0x0090644C-0x009064E8
	
		// Methods
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x009064E8-0x009065D0
	}

	[Serializable]
	[AttributeUsage] // 0x003946A4-0x003946F8
	[ComVisible] // 0x003946A4-0x003946F8
	public sealed class ObsoleteAttribute : Attribute // TypeDefIndex: 256
	{
		// Fields
		private string _message; // 0x10
		private bool _error; // 0x18
	
		// Constructors
		public ObsoleteAttribute(); // 0x009065D0-0x009065FC
		public ObsoleteAttribute(string message); // 0x009065FC-0x0090662C
		public ObsoleteAttribute(string message, bool error); // 0x0090662C-0x0090666C
	}

	[Serializable]
	[ComVisible] // 0x003946F8-0x0039470C
	public class OperationCanceledException : SystemException // TypeDefIndex: 257
	{
		// Fields
		[NonSerialized]
		private CancellationToken _cancellationToken; // 0x88
	
		// Properties
		public CancellationToken CancellationToken { get; private set; } // 0x00906C78-0x00906C80 0x00906C80-0x00906C88
	
		// Constructors
		public OperationCanceledException(); // 0x00906C88-0x00906CFC
		public OperationCanceledException(string message); // 0x00906CFC-0x00906D30
		public OperationCanceledException(string message, CancellationToken token); // 0x00906D30-0x00906D70
		protected OperationCanceledException(SerializationInfo info, StreamingContext context); // 0x00906D70-0x00906D78
	}

	[Serializable]
	[ComVisible] // 0x0039470C-0x00394720
	public class OutOfMemoryException : SystemException // TypeDefIndex: 258
	{
		// Constructors
		public OutOfMemoryException(); // 0x009070D4-0x00907160
		public OutOfMemoryException(string message); // 0x00907160-0x00907194
		protected OutOfMemoryException(SerializationInfo info, StreamingContext context); // 0x00907194-0x0090719C
	}

	[Serializable]
	[ComVisible] // 0x00394720-0x00394734
	public class OverflowException : ArithmeticException // TypeDefIndex: 259
	{
		// Constructors
		public OverflowException(); // 0x0090719C-0x00907210
		public OverflowException(string message); // 0x00907210-0x00907244
		public OverflowException(string message, Exception innerException); // 0x00907244-0x00907278
		protected OverflowException(SerializationInfo info, StreamingContext context); // 0x00907278-0x00907280
	}

	[AttributeUsage] // 0x00394734-0x00394798
	[ComVisible] // 0x00394734-0x00394798
	public sealed class ParamArrayAttribute : Attribute // TypeDefIndex: 260
	{
		// Constructors
		public ParamArrayAttribute(); // 0x00907280-0x00907288
	}

	internal struct ParamsArray // TypeDefIndex: 261
	{
		// Fields
		private static readonly object[] oneArgArray; // 0x00
		private static readonly object[] twoArgArray; // 0x08
		private static readonly object[] threeArgArray; // 0x10
		private readonly object arg0; // 0x00
		private readonly object arg1; // 0x08
		private readonly object arg2; // 0x10
		private readonly object[] args; // 0x18
	
		// Properties
		public int Length { get; } // 0x00908CF8-0x00908DAC 
		public object this[int index] { get => default; } // 0x00908DAC-0x00908DC0 
	
		// Constructors
		public ParamsArray(object arg0); // 0x00908AD4-0x00908B64
		public ParamsArray(object arg0, object arg1); // 0x00908B64-0x00908C00
		public ParamsArray(object arg0, object arg1, object arg2); // 0x00908C00-0x00908CC4
		public ParamsArray(object[] args); // 0x00908CC4-0x00908CF8
		static ParamsArray(); // 0x00908DC8-0x00908E5C
	
		// Methods
		private object GetAtSlow(int index); // 0x00908DC0-0x00908DC8
	}

	[Serializable]
	[ComVisible] // 0x003947D0-0x003947E4
	public class PlatformNotSupportedException : NotSupportedException // TypeDefIndex: 262
	{
		// Constructors
		public PlatformNotSupportedException(); // 0x0090A004-0x0090A078
		protected PlatformNotSupportedException(SerializationInfo info, StreamingContext context); // 0x0090A078-0x0090A080
	}

	[Serializable]
	[ComVisible] // 0x003947E4-0x003947F8
	public class Random // TypeDefIndex: 263
	{
		// Fields
		private int inext; // 0x10
		private int inextp; // 0x14
		private int[] SeedArray; // 0x18
	
		// Constructors
		public Random(); // 0x00906094-0x009060C0
		public Random(int Seed); // 0x0090A1B4-0x0090A494
	
		// Methods
		protected virtual double Sample(); // 0x0090A494-0x0090A4B8
		private int InternalSample(); // 0x0090A4B8-0x0090A5DC
		private double GetSampleForLargeRange(); // 0x0090A5DC-0x0090A62C
		public virtual int Next(int minValue, int maxValue); // 0x0090A62C-0x0090A7AC
		public virtual int Next(int maxValue); // 0x0090A7AC-0x0090A8BC
		public virtual void NextBytes(byte[] buffer); // 0x0090A8BC-0x0090A9A4
	}

	[Serializable]
	[ComVisible] // 0x003947F8-0x0039480C
	public class RankException : SystemException // TypeDefIndex: 264
	{
		// Constructors
		public RankException(); // 0x0090A9A4-0x0090AA18
		public RankException(string message); // 0x0090AA18-0x0090AA4C
		protected RankException(SerializationInfo info, StreamingContext context); // 0x0090AA4C-0x0090AA54
	}

	internal enum TypeNameFormatFlags // TypeDefIndex: 265
	{
		FormatBasic = 0,
		FormatNamespace = 1,
		FormatFullInst = 2,
		FormatAssembly = 4,
		FormatSignature = 8,
		FormatNoVersion = 16,
		FormatAngleBrackets = 64,
		FormatStubInfo = 128,
		FormatGenericParam = 256,
		FormatSerialization = 259
	}

	internal enum TypeNameKind // TypeDefIndex: 266
	{
		Name = 0,
		ToString = 1,
		SerializationName = 2,
		FullName = 3
	}

	[Serializable]
	internal class RuntimeType : System.Reflection.TypeInfo, ISerializable, ICloneable // TypeDefIndex: 267
	{
		// Fields
		internal static readonly RuntimeType ValueType; // 0x00
		internal static readonly RuntimeType EnumType; // 0x08
		private static readonly RuntimeType ObjectType; // 0x10
		private static readonly RuntimeType StringType; // 0x18
		private static readonly RuntimeType DelegateType; // 0x20
		private static Type[] s_SICtorParamTypes; // 0x28
		private const BindingFlags MemberBindingMask = BindingFlags.Default | BindingFlags.IgnoreCase | BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy; // Metadata: 0x00203884
		private const BindingFlags InvocationMask = BindingFlags.Default | BindingFlags.InvokeMethod | BindingFlags.CreateInstance | BindingFlags.GetField | BindingFlags.SetField | BindingFlags.GetProperty | BindingFlags.SetProperty | BindingFlags.PutDispProperty | BindingFlags.PutRefDispProperty; // Metadata: 0x00203888
		private const BindingFlags BinderNonCreateInstance = BindingFlags.Default | BindingFlags.InvokeMethod | BindingFlags.GetField | BindingFlags.SetField | BindingFlags.GetProperty | BindingFlags.SetProperty; // Metadata: 0x0020388C
		private const BindingFlags BinderGetSetProperty = BindingFlags.Default | BindingFlags.GetProperty | BindingFlags.SetProperty; // Metadata: 0x00203890
		private const BindingFlags BinderSetInvokeProperty = BindingFlags.Default | BindingFlags.InvokeMethod | BindingFlags.SetProperty; // Metadata: 0x00203894
		private const BindingFlags BinderGetSetField = BindingFlags.Default | BindingFlags.GetField | BindingFlags.SetField; // Metadata: 0x00203898
		private const BindingFlags BinderSetInvokeField = BindingFlags.Default | BindingFlags.InvokeMethod | BindingFlags.SetField; // Metadata: 0x0020389C
		private const BindingFlags BinderNonFieldGetSet = BindingFlags.Default | BindingFlags.InvokeMethod | BindingFlags.CreateInstance | BindingFlags.GetProperty | BindingFlags.SetProperty | BindingFlags.PutDispProperty | BindingFlags.PutRefDispProperty | BindingFlags.ExactBinding | BindingFlags.SuppressChangeType | BindingFlags.OptionalParamBinding; // Metadata: 0x002038A0
		private const BindingFlags ClassicBindingMask = BindingFlags.Default | BindingFlags.InvokeMethod | BindingFlags.GetProperty | BindingFlags.SetProperty | BindingFlags.PutDispProperty | BindingFlags.PutRefDispProperty; // Metadata: 0x002038A4
		private static RuntimeType s_typedRef; // 0x30
		[NonSerialized]
		private MonoTypeInfo type_info; // 0x18
		internal object GenericCache; // 0x20
		private RuntimeConstructorInfo m_serializationCtor; // 0x28
	
		// Properties
		public override Module Module { get; } // 0x0062167C-0x00621680 
		public override Assembly Assembly { get; } // 0x00621688-0x0062168C 
		public override RuntimeTypeHandle TypeHandle { get; } // 0x00621694-0x006216F0 
		public override Type BaseType { get; } // 0x00621A4C-0x00621A50 
		public override Type UnderlyingSystemType { get; } // 0x00621A58-0x00621A5C 
		public override bool IsEnum { get; } // 0x00621C54-0x00621CD8 
		public override GenericParameterAttributes GenericParameterAttributes { get; } // 0x00621D20-0x00621DD4 
		internal override bool IsSzArray { get; } // 0x00621E18-0x00621E1C 
		public override bool IsGenericTypeDefinition { get; } // 0x00623148-0x0062314C 
		public override bool IsGenericParameter { get; } // 0x00623150-0x00623154 
		public override int GenericParameterPosition { get; } // 0x00623154-0x00623208 
		public override bool IsGenericType { get; } // 0x006232C4-0x006232C8 
		public override MemberTypes MemberType { get; } // 0x00624F04-0x00624F50 
		public override Type ReflectedType { get; } // 0x00624F50-0x00624F5C 
		public override int MetadataToken { get; } // 0x00624F5C-0x00624F60 
		public override bool ContainsGenericParameters { get; } // 0x00626F88-0x006270B8 
		public override MethodBase DeclaringMethod { get; } // 0x0062745C-0x00627460 
		public override string AssemblyQualifiedName { get; } // 0x00627478-0x00627484 
		public override Type DeclaringType { get; } // 0x00627484-0x00627488 
		public override string Name { get; } // 0x00627488-0x0062748C 
		public override string Namespace { get; } // 0x0062748C-0x00627490 
		public override string FullName { get; } // 0x0062758C-0x0062768C 
	
		// Nested types
		internal enum MemberListType // TypeDefIndex: 268
		{
			All = 0,
			CaseSensitive = 1,
			CaseInsensitive = 2,
			HandleToInfo = 3
		}
	
		private struct ListBuilder<T> // TypeDefIndex: 269
			where T : class
		{
			// Fields
			private T[] _items;
			private T _item;
			private int _count;
			private int _capacity;
	
			// Properties
			public T this[int index] { get => default; }
			public int Count { get; }
	
			// Constructors
			public ListBuilder(int capacity);
	
			// Methods
			public T[] ToArray();
			public void CopyTo(object[] array, int index);
			public void Add(T item);
		}
	
		// Constructors
		internal RuntimeType(); // 0x0061CC08-0x0061CC80
		static RuntimeType(); // 0x0062768C-0x00627A60
	
		// Methods
		private static void ThrowIfTypeNeverValidGenericArgument(RuntimeType type); // 0x0061BCA8-0x0061BE28
		internal static void SanityCheckGenericArguments(RuntimeType[] genericArguments, RuntimeType[] genericParamters); // 0x0061BE28-0x0061C08C
		private static void SplitName(string fullname, out string name, out string ns); // 0x0061C08C-0x0061C198
		private static void FilterHelper(BindingFlags bindingFlags, ref string name, bool allowPrefixLookup, out bool prefixLookup, out bool ignoreCase, out MemberListType listType); // 0x0061C198-0x0061C300
		private static void FilterHelper(BindingFlags bindingFlags, ref string name, out bool ignoreCase, out MemberListType listType); // 0x0061C300-0x0061C39C
		private static bool FilterApplyPrefixLookup(MemberInfo memberInfo, string name, bool ignoreCase); // 0x0061C39C-0x0061C420
		private static bool FilterApplyBase(MemberInfo memberInfo, BindingFlags bindingFlags, bool isPublic, bool isNonProtectedInternal, bool isStatic, string name, bool prefixLookup); // 0x0061C420-0x0061C630
		private static bool FilterApplyType(Type type, BindingFlags bindingFlags, string name, bool prefixLookup, string ns); // 0x0061C630-0x0061C798
		private static bool FilterApplyMethodInfo(RuntimeMethodInfo method, BindingFlags bindingFlags, CallingConventions callConv, Type[] argumentTypes); // 0x0061C798-0x0061C83C
		private static bool FilterApplyConstructorInfo(RuntimeConstructorInfo constructor, BindingFlags bindingFlags, CallingConventions callConv, Type[] argumentTypes); // 0x0061CB64-0x0061CC08
		private static bool FilterApplyMethodBase(MethodBase methodBase, BindingFlags methodFlags, BindingFlags bindingFlags, CallingConventions callConv, Type[] argumentTypes); // 0x0061C83C-0x0061CB64
		internal bool IsSpecialSerializableType(); // 0x0061CC80-0x0061CD68
		private ListBuilder<MethodInfo> GetMethodCandidates(string name, BindingFlags bindingAttr, CallingConventions callConv, Type[] types, bool allowPrefixLookup); // 0x0061CFDC-0x0061E1C8
		private ListBuilder<ConstructorInfo> GetConstructorCandidates(string name, BindingFlags bindingAttr, CallingConventions callConv, Type[] types, bool allowPrefixLookup); // 0x0061E534-0x0061E7B4
		private ListBuilder<PropertyInfo> GetPropertyCandidates(string name, BindingFlags bindingAttr, Type[] types, bool allowPrefixLookup); // 0x0061EA68-0x0061ECB4
		private ListBuilder<EventInfo> GetEventCandidates(string name, BindingFlags bindingAttr, bool allowPrefixLookup); // 0x0061F038-0x0061F23C
		private ListBuilder<FieldInfo> GetFieldCandidates(string name, BindingFlags bindingAttr, bool allowPrefixLookup); // 0x0061F5B8-0x0061F7BC
		private ListBuilder<Type> GetNestedTypeCandidates(string fullname, BindingFlags bindingAttr, bool allowPrefixLookup); // 0x0061FB20-0x0061FCE4
		public override MethodInfo[] GetMethods(BindingFlags bindingAttr); // 0x006200E4-0x00620174
		[ComVisible] // 0x0039D618-0x0039D62C
		public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr); // 0x00620174-0x00620214
		public override FieldInfo[] GetFields(BindingFlags bindingAttr); // 0x00620214-0x0062029C
		protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConv, Type[] types, ParameterModifier[] modifiers); // 0x0062029C-0x0062054C
		protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x0062054C-0x00620774
		protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x00620774-0x00620A04
		public override EventInfo GetEvent(string name, BindingFlags bindingAttr); // 0x00620A04-0x00620C00
		public override FieldInfo GetField(string name, BindingFlags bindingAttr); // 0x00620C00-0x00620F88
		public override Type GetNestedType(string fullname, BindingFlags bindingAttr); // 0x00620F88-0x00621194
		public override MemberInfo[] GetMember(string name, MemberTypes type, BindingFlags bindingAttr); // 0x00621194-0x0062167C
		internal RuntimeModule GetRuntimeModule(); // 0x00621680-0x00621684
		internal RuntimeAssembly GetRuntimeAssembly(); // 0x0062168C-0x00621690
		public override bool IsInstanceOfType(object o); // 0x006216F0-0x006216F4
		[ComVisible] // 0x0039D62C-0x0039D640
		public override bool IsSubclassOf(Type type); // 0x006216F8-0x00621898
		public override bool IsAssignableFrom(Type c); // 0x00621898-0x00621988
		public override bool IsEquivalentTo(Type other); // 0x00621998-0x00621A44
		private RuntimeType GetBaseType(); // 0x0061CD68-0x0061CFD0
		protected override TypeAttributes GetAttributeFlagsImpl(); // 0x00621A5C-0x00621A60
		protected override bool IsContextfulImpl(); // 0x00621A64-0x00621A68
		protected override bool IsByRefImpl(); // 0x00621B00-0x00621B04
		protected override bool IsPrimitiveImpl(); // 0x00621B08-0x00621B0C
		protected override bool IsPointerImpl(); // 0x00621B10-0x00621B14
		protected override bool IsCOMObjectImpl(); // 0x00621B18-0x00621B1C
		protected override bool IsValueTypeImpl(); // 0x00621B2C-0x00621C54
		protected override bool HasElementTypeImpl(); // 0x00621CD8-0x00621CDC
		protected override bool IsArrayImpl(); // 0x00621E70-0x00621E74
		public override int GetArrayRank(); // 0x00621E78-0x00621F2C
		public override Type GetElementType(); // 0x00621F30-0x00621F34
		public override string[] GetEnumNames(); // 0x00621F38-0x00622068
		public override Array GetEnumValues(); // 0x00622068-0x00622268
		public override Type GetEnumUnderlyingType(); // 0x00622268-0x0062234C
		public override bool IsEnumDefined(object value); // 0x0062234C-0x0062294C
		public override string GetEnumName(object value); // 0x0062294C-0x00622B54
		internal RuntimeType[] GetGenericArgumentsInternal(); // 0x00622B54-0x00622C1C
		public override Type[] GetGenericArguments(); // 0x00622C24-0x00622CA0
		public override Type MakeGenericType(params /* 0x0039F928-0x0039F938 */ Type[] instantiation); // 0x00622CA0-0x00623144
		public override Type GetGenericTypeDefinition(); // 0x0062320C-0x006232C0
		[DebuggerHidden] // 0x0039D640-0x0039D678
		[DebuggerStepThrough] // 0x0039D640-0x0039D678
		public override object InvokeMember(string name, BindingFlags bindingFlags, Binder binder, object target, object[] providedArgs, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParams); // 0x006232CC-0x00624678
		public override bool Equals(object obj); // 0x00624818-0x00624824
		public static bool operator ==(RuntimeType left, RuntimeType right); // 0x006169BC-0x006169C8
		public static bool operator !=(RuntimeType left, RuntimeType right); // 0x0061CFD0-0x0061CFDC
		public object Clone(); // 0x00624824-0x00624828
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00624828-0x006248C8
		public override object[] GetCustomAttributes(bool inherit); // 0x006248C8-0x00624974
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00624974-0x00624B04
		public override bool IsDefined(Type attributeType, bool inherit); // 0x00624B04-0x00624C94
		public override IList<CustomAttributeData> GetCustomAttributesData(); // 0x00624C94-0x00624C9C
		internal override string FormatTypeName(bool serialization); // 0x00624C9C-0x00624E6C
		private void CreateInstanceCheckThis(); // 0x00624F64-0x00625180
		internal object CreateInstanceImpl(BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes, ref StackCrawlMark stackMark); // 0x00625180-0x00625BFC
		[DebuggerHidden] // 0x0039D678-0x0039D6B0
		[DebuggerStepThrough] // 0x0039D678-0x0039D6B0
		internal object CreateInstanceDefaultCtor(bool publicOnly, bool skipCheckThis, bool fillCache, ref StackCrawlMark stackMark); // 0x00625C04-0x00625D2C
		internal MonoCMethod GetDefaultConstructor(); // 0x00625D64-0x00625F68
		private string GetDefaultMemberName(); // 0x00624678-0x00624818
		internal RuntimeConstructorInfo GetSerializationCtor(); // 0x00614560-0x00614754
		internal object CreateInstanceSlow(bool publicOnly, bool skipCheckThis, bool fillCache, ref StackCrawlMark stackMark); // 0x00625D2C-0x00625D64
		private object CreateInstanceMono(bool nonPublic); // 0x00625F68-0x00626278
		internal object CheckValue(object value, Binder binder, CultureInfo culture, BindingFlags invokeAttr); // 0x0062627C-0x00626410
		private object TryConvertToType(object value, ref bool failed); // 0x00626410-0x00626684
		private static object IsConvertibleToPrimitiveType(object value, Type targetType); // 0x00626684-0x00626DE0
		private string GetCachedName(TypeNameKind kind); // 0x00624E6C-0x00624F04
		private Type make_array_type(int rank); // 0x00626DE0-0x00626DE4
		public override Type MakeArrayType(); // 0x00626DE4-0x00626DEC
		public override Type MakeArrayType(int rank); // 0x00626DEC-0x00626E84
		private Type make_byref_type(); // 0x00626E84-0x00626E88
		public override Type MakeByRefType(); // 0x00626E88-0x00626F20
		private static Type MakePointerType(Type type); // 0x00626F20-0x00626F24
		public override Type MakePointerType(); // 0x00626F24-0x00626F88
		public override Type[] GetGenericParameterConstraints(); // 0x006270B8-0x006271C8
		internal static object CreateInstanceForAnotherGenericParameter(Type genericType, RuntimeType genericArgument); // 0x006271CC-0x006273C8
		private static Type MakeGenericType(Type gt, Type[] types); // 0x00623144-0x00623148
		internal IntPtr GetMethodsByName_native(IntPtr namePtr, BindingFlags bindingAttr, bool ignoreCase); // 0x006273C8-0x006273D0
		internal RuntimeMethodInfo[] GetMethodsByName(string name, BindingFlags bindingAttr, bool ignoreCase, RuntimeType reflectedType); // 0x0061E1C8-0x0061E534
		private IntPtr GetPropertiesByName_native(IntPtr name, BindingFlags bindingAttr, bool icase); // 0x006273D0-0x006273D8
		private IntPtr GetConstructors_native(BindingFlags bindingAttr); // 0x006273D8-0x006273DC
		private RuntimeConstructorInfo[] GetConstructors_internal(BindingFlags bindingAttr, RuntimeType reflectedType); // 0x0061E7B4-0x0061EA68
		private RuntimePropertyInfo[] GetPropertiesByName(string name, BindingFlags bindingAttr, bool icase, RuntimeType reflectedType); // 0x0061ECB4-0x0061F038
		protected override TypeCode GetTypeCodeImpl(); // 0x006273DC-0x00627440
		private static TypeCode GetTypeCodeImplInternal(Type type); // 0x00627440-0x00627444
		public override string ToString(); // 0x00627444-0x00627450
		private bool IsGenericCOMObjectImpl(); // 0x00625BFC-0x00625C04
		private static object CreateInstanceInternal(Type type); // 0x00626278-0x0062627C
		internal string getFullName(bool full_name, bool assembly_qualified); // 0x00627450-0x0062745C
		private Type[] GetGenericArgumentsInternal(bool runtimeArray); // 0x00622C1C-0x00622C24
		private GenericParameterAttributes GetGenericParameterAttributes(); // 0x00621DD4-0x00621E18
		private int GetGenericParameterPosition(); // 0x00623208-0x0062320C
		private IntPtr GetEvents_native(IntPtr name, BindingFlags bindingAttr); // 0x00627460-0x00627464
		private IntPtr GetFields_native(IntPtr name, BindingFlags bindingAttr); // 0x00627464-0x00627468
		private RuntimeFieldInfo[] GetFields_internal(string name, BindingFlags bindingAttr, RuntimeType reflectedType); // 0x0061F7BC-0x0061FB20
		private RuntimeEventInfo[] GetEvents_internal(string name, BindingFlags bindingAttr, RuntimeType reflectedType); // 0x0061F23C-0x0061F5B8
		public override Type[] GetInterfaces(); // 0x00627468-0x0062746C
		private IntPtr GetNestedTypes_native(IntPtr name, BindingFlags bindingAttr); // 0x0062746C-0x00627478
		private RuntimeType[] GetNestedTypes_internal(string displayName, BindingFlags bindingAttr); // 0x0061FCE4-0x006200E4
		public override int GetHashCode(); // 0x00627490-0x0062758C
	}

	[Serializable]
	internal class ReflectionOnlyType : RuntimeType // TypeDefIndex: 270
	{
		// Properties
		public override RuntimeTypeHandle TypeHandle { get; } // 0x004F87FC-0x004F8884 
	
		// Constructors
		private ReflectionOnlyType(); // 0x004F8794-0x004F87FC
	}

	[Serializable]
	[CLSCompliant] // 0x00394844-0x00394884
	[ComVisible] // 0x00394844-0x00394884
	public struct SByte : IComparable, IFormattable, IConvertible, IComparable<sbyte>, IEquatable<sbyte> // TypeDefIndex: 271
	{
		// Fields
		private sbyte m_value; // 0x00
		public const sbyte MaxValue = 127; // Metadata: 0x002038B8
		public const sbyte MinValue = 128; // Metadata: 0x002038B9
	
		// Methods
		public int CompareTo(object obj); // 0x00628038-0x00628040
		public int CompareTo(sbyte value); // 0x00628040-0x006280D4
		public override bool Equals(object obj); // 0x006280D4-0x006280DC
		public bool Equals(sbyte obj); // 0x006280DC-0x006280EC
		public override int GetHashCode(); // 0x006280EC-0x006280F8
		public override string ToString(); // 0x006280F8-0x0062812C
		public string ToString(IFormatProvider provider); // 0x0062812C-0x00628218
		public string ToString(string format, IFormatProvider provider); // 0x00628218-0x00628250
		private string ToString(string format, NumberFormatInfo info); // 0x00628250-0x00628258
		[CLSCompliant] // 0x0039D6B0-0x0039D6C4
		public static sbyte Parse(string s, IFormatProvider provider); // 0x00628258-0x0062828C
		[CLSCompliant] // 0x0039D6C4-0x0039D6D8
		public static sbyte Parse(string s, NumberStyles style, IFormatProvider provider); // 0x00628414-0x00628464
		private static sbyte Parse(string s, NumberStyles style, NumberFormatInfo info); // 0x0062828C-0x00628414
		public TypeCode GetTypeCode(); // 0x00628464-0x006284D8
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x006284D8-0x0062854C
		char IConvertible.ToChar(IFormatProvider provider); // 0x0062854C-0x00628554
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x00628554-0x006285C8
		byte IConvertible.ToByte(IFormatProvider provider); // 0x006285C8-0x0062863C
		short IConvertible.ToInt16(IFormatProvider provider); // 0x0062863C-0x006286B0
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x006286B0-0x006286B8
		int IConvertible.ToInt32(IFormatProvider provider); // 0x006286B8-0x0062872C
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x0062872C-0x006287A0
		long IConvertible.ToInt64(IFormatProvider provider); // 0x006287A0-0x00628814
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x00628814-0x00628888
		float IConvertible.ToSingle(IFormatProvider provider); // 0x00628888-0x006288FC
		double IConvertible.ToDouble(IFormatProvider provider); // 0x006288FC-0x00628970
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x00628970-0x00628A78
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x00628A78-0x00628B34
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x00628B34-0x00628B3C
	}

	[AttributeUsage] // 0x00394884-0x003948D8
	[ComVisible] // 0x00394884-0x003948D8
	public sealed class SerializableAttribute : Attribute // TypeDefIndex: 272
	{
		// Constructors
		public SerializableAttribute(); // 0x00793674-0x0079367C
	}

	internal sealed class SharedStatics // TypeDefIndex: 273
	{
		// Fields
		private static readonly SharedStatics _sharedStatics; // 0x00
		private Tokenizer.StringMaker _maker; // 0x10
	
		// Constructors
		private SharedStatics(); // 0x0079367C-0x00793684
		static SharedStatics(); // 0x00793684-0x007936E8
	
		// Methods
		public static Tokenizer.StringMaker GetSharedStringMaker(); // 0x0078CD90-0x0078CF5C
		public static void ReleaseSharedStringMaker(ref Tokenizer.StringMaker maker); // 0x0078D2B4-0x0078D3EC
	}

	[Serializable]
	[ComVisible] // 0x003948D8-0x003948EC
	public struct Single : IComparable, IFormattable, IConvertible, IComparable<float>, IEquatable<float> // TypeDefIndex: 274
	{
		// Fields
		internal float m_value; // 0x00
		public const float MinValue = -3.4028235E+38f; // Metadata: 0x002038BA
		public const float Epsilon = 1E-45f; // Metadata: 0x002038BE
		public const float MaxValue = 3.4028235E+38f; // Metadata: 0x002038C2
		public const float PositiveInfinity = 1F / 0F; // Metadata: 0x002038C6
		public const float NegativeInfinity = -1F / 0F; // Metadata: 0x002038CA
		public const float NaN = 0F / 0F; // Metadata: 0x002038CE
	
		// Methods
		public static bool IsInfinity(float f); // 0x007936E8-0x00793700
		[ReliabilityContract] // 0x0039D6D8-0x0039D6F0
		public static bool IsNaN(float f); // 0x00793700-0x0079383C
		public int CompareTo(object value); // 0x0079383C-0x007938A0
		public int CompareTo(float value); // 0x007938A0-0x007939B8
		public override bool Equals(object obj); // 0x007939B8-0x00793A0C
		public bool Equals(float obj); // 0x00793A0C-0x00793A6C
		public override int GetHashCode(); // 0x00793A6C-0x00793AB4
		public override string ToString(); // 0x00793AB4-0x00793B20
		public string ToString(IFormatProvider provider); // 0x00793B20-0x00793B98
		public string ToString(string format); // 0x00793B98-0x00793C1C
		public string ToString(string format, IFormatProvider provider); // 0x00793C1C-0x00793C60
		public static float Parse(string s); // 0x00793C60-0x00793C94
		public static float Parse(string s, IFormatProvider provider); // 0x00793C9C-0x00793CD4
		public static float Parse(string s, NumberStyles style, IFormatProvider provider); // 0x00793CD4-0x00793D28
		private static float Parse(string s, NumberStyles style, NumberFormatInfo info); // 0x00793C94-0x00793C9C
		public static bool TryParse(string s, out float result); // 0x00793D28-0x00793D60
		private static bool TryParse(string s, NumberStyles style, NumberFormatInfo info, out float result); // 0x00793D60-0x00793E98
		public TypeCode GetTypeCode(); // 0x00793EA0-0x00793F1C
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x00793F1C-0x00794024
		char IConvertible.ToChar(IFormatProvider provider); // 0x00794024-0x007940A4
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x007940A4-0x00794120
		byte IConvertible.ToByte(IFormatProvider provider); // 0x00794120-0x0079419C
		short IConvertible.ToInt16(IFormatProvider provider); // 0x0079419C-0x00794218
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x00794218-0x00794294
		int IConvertible.ToInt32(IFormatProvider provider); // 0x00794294-0x00794310
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x00794310-0x0079438C
		long IConvertible.ToInt64(IFormatProvider provider); // 0x0079438C-0x00794408
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x00794408-0x00794410
		float IConvertible.ToSingle(IFormatProvider provider); // 0x00794410-0x0079448C
		double IConvertible.ToDouble(IFormatProvider provider); // 0x0079448C-0x00794508
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x00794508-0x00794610
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x00794610-0x007946CC
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x007946CC-0x007946D4
	}

	[Serializable]
	[ComVisible] // 0x003948EC-0x00394900
	public sealed class StackOverflowException : SystemException // TypeDefIndex: 275
	{
		// Constructors
		public StackOverflowException(); // 0x007946D4-0x00794748
		public StackOverflowException(string message); // 0x00794748-0x0079477C
		internal StackOverflowException(SerializationInfo info, StreamingContext context); // 0x0079477C-0x00794784
	}

	[Serializable]
	[ComVisible] // 0x00394900-0x00394950
	public sealed class String : IComparable, ICloneable, IConvertible, IComparable<string>, IEnumerable<char>, IEquatable<string> // TypeDefIndex: 276
	{
		// Fields
		[NonSerialized]
		private int m_stringLength; // 0x10
		[NonSerialized]
		private char m_firstChar; // 0x14
		private const int TrimHead = 0; // Metadata: 0x002038D2
		private const int TrimTail = 1; // Metadata: 0x002038D6
		private const int TrimBoth = 2; // Metadata: 0x002038DA
		public static readonly string Empty; // 0x00
		private const int charPtrAlignConst = 1; // Metadata: 0x002038DE
		private const int alignConst = 3; // Metadata: 0x002038E2
	
		// Properties
		public char Cthis[int index] { get => default; } // 0x0078A160-0x0078A1FC 
		public int Length { get; } // 0x00789FA0-0x00789FA8 
	
		// Constructors
		[CLSCompliant] // 0x0039D790-0x0039D7A4
		public unsafe String(char* value); // 0x00796A28-0x00796A2C
		[CLSCompliant] // 0x0039D7A4-0x0039D7B8
		public unsafe String(char* value, int startIndex, int length); // 0x00796A2C-0x00796A30
		[CLSCompliant] // 0x0039D7B8-0x0039D7CC
		public unsafe String(sbyte* value, int startIndex, int length, Encoding enc); // 0x00796A30-0x00796A34
		public String(char[] value, int startIndex, int length); // 0x00796CBC-0x00796CC0
		public String(char[] value); // 0x00796CC0-0x00796CC4
		public String(char c, int count); // 0x007973CC-0x007973D0
	
		// Methods
		public static string Join(string separator, params /* 0x0039F938-0x0039F948 */ string[] value); // 0x00794784-0x00794828
		public static string Join(string separator, string[] value, int startIndex, int count); // 0x00794828-0x00794B50
		private static int CompareOrdinalIgnoreCaseHelper(string strA, string strB); // 0x00794B54-0x00794C64
		[ReliabilityContract] // 0x0039D6F0-0x0039D708
		private static bool EqualsHelper(string strA, string strB); // 0x00794C64-0x00794DD4
		private static int CompareOrdinalHelper(string strA, string strB); // 0x00794DD4-0x00794F8C
		[ReliabilityContract] // 0x0039D708-0x0039D720
		public override bool Equals(object obj); // 0x00794F8C-0x0079507C
		[ReliabilityContract] // 0x0039D720-0x0039D738
		public bool Equals(string value); // 0x0078FB68-0x0078FC30
		public bool Equals(string value, StringComparison comparisonType); // 0x0079507C-0x00795360
		public static bool Equals(string a, string b); // 0x007953A0-0x007953DC
		public static bool Equals(string a, string b, StringComparison comparisonType); // 0x007953DC-0x007956C8
		public static bool operator ==(string a, string b); // 0x0078BAE8-0x0078BAEC
		public static bool operator !=(string a, string b); // 0x007956C8-0x007956E4
		public void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count); // 0x007956E4-0x007958C8
		public char[] ToCharArray(); // 0x007958D4-0x0079596C
		public static bool IsNullOrEmpty(string value); // 0x0079596C-0x00795988
		public static bool IsNullOrWhiteSpace(string value); // 0x00795988-0x00795A44
		[ReliabilityContract] // 0x0039D738-0x0039D750
		public override int GetHashCode(); // 0x00795A44-0x00795ABC
		[ReliabilityContract] // 0x0039D750-0x0039D768
		internal int GetLegacyNonRandomizedHashCode(); // 0x00795ABC-0x00795B34
		public string[] Split(params /* 0x0039F948-0x0039F958 */ char[] separator); // 0x00795B34-0x00795B40
		[ComVisible] // 0x0039D768-0x0039D77C
		public string[] Split(char[] separator, StringSplitOptions options); // 0x00795DBC-0x00795DCC
		[ComVisible] // 0x0039D77C-0x0039D790
		internal string[] SplitInternal(char[] separator, int count, StringSplitOptions options); // 0x00795B40-0x00795DBC
		private string[] InternalSplitKeepEmptyEntries(int[] sepList, int[] lengthList, int numReplaces, int count); // 0x007963E0-0x007966B0
		private string[] InternalSplitOmitEmptyEntries(int[] sepList, int[] lengthList, int numReplaces, int count); // 0x00795FDC-0x007963E0
		private int MakeSeparatorList(char[] separator, ref int[] sepList); // 0x00795DCC-0x00795FDC
		public string Substring(int startIndex); // 0x007966B0-0x007966BC
		public string Substring(int startIndex, int length); // 0x0078BCFC-0x0078BE64
		private string InternalSubString(int startIndex, int length); // 0x007966BC-0x00796718
		public string Trim(params /* 0x0039F958-0x0039F968 */ char[] trimChars); // 0x00796718-0x00796734
		public string TrimEnd(params /* 0x0039F968-0x0039F978 */ char[] trimChars); // 0x00796A0C-0x00796A28
		internal static unsafe string CreateStringFromEncoding(byte* bytes, int byteLength, Encoding encoding); // 0x00796A34-0x00796B18
		public string Normalize(NormalizationForm normalizationForm); // 0x00796B18-0x00796BF0
		internal static string FastAllocateString(int length); // 0x00794B50-0x00794B54
		private static void FillStringChecked(string dest, int destPos, string src); // 0x00796BF0-0x00796CBC
		internal static unsafe void wstrcpy(char* dmem, char* smem, int charCount); // 0x007958C8-0x007958D4
		private string CtorCharArray(char[] value); // 0x00796CC4-0x00796D7C
		private string CtorCharArrayStartLength(char[] value, int startIndex, int length); // 0x00796D7C-0x00796F44
		private static unsafe int wcslen(char* ptr); // 0x00796F44-0x00796FC4
		private unsafe string CtorCharPtr(char* ptr); // 0x00796FC4-0x0079718C
		private unsafe string CtorCharPtrStartLength(char* ptr, int startIndex, int length); // 0x0079718C-0x007973CC
		public static int Compare(string strA, string strB); // 0x007973D0-0x00797484
		public static int Compare(string strA, string strB, StringComparison comparisonType); // 0x00791F9C-0x007922D4
		public static int Compare(string strA, string strB, bool ignoreCase, CultureInfo culture); // 0x00797484-0x0079755C
		public static int Compare(string strA, int indexA, string strB, int indexB, int length, CultureInfo culture, CompareOptions options); // 0x0079755C-0x00797694
		public static int Compare(string strA, int indexA, string strB, int indexB, int length, StringComparison comparisonType); // 0x00792CF0-0x00793134
		public int CompareTo(object value); // 0x0079781C-0x007978F4
		public int CompareTo(string strB); // 0x007978F4-0x007979C0
		public static int CompareOrdinal(string strA, string strB); // 0x007979C0-0x00797A08
		public static int CompareOrdinal(string strA, int indexA, string strB, int indexB, int length); // 0x00797A08-0x00797A34
		public bool Contains(string value); // 0x00797A34-0x00797A5C
		public bool EndsWith(string value); // 0x00797A70-0x00797A78
		[ComVisible] // 0x0039D7CC-0x0039D7E0
		public bool EndsWith(string value, StringComparison comparisonType); // 0x0078FC30-0x0078FEF0
		internal bool EndsWith(char value); // 0x00797A78-0x00797ABC
		public int IndexOf(char value); // 0x00797ABC-0x00797AC8
		public int IndexOf(char value, int startIndex); // 0x00797C18-0x00797C24
		public int IndexOfAny(char[] anyOf); // 0x0078EBAC-0x0078EBB8
		public int IndexOfAny(char[] anyOf, int startIndex); // 0x00797D44-0x00797D50
		public int IndexOf(string value); // 0x0078BCDC-0x0078BCEC
		public int IndexOf(string value, int startIndex); // 0x0078BCEC-0x0078BCFC
		public int IndexOf(string value, StringComparison comparisonType); // 0x00797A5C-0x00797A70
		public int IndexOf(string value, int startIndex, StringComparison comparisonType); // 0x00797D50-0x00797D64
		public int IndexOf(string value, int startIndex, int count, StringComparison comparisonType); // 0x00797D64-0x00798144
		public int LastIndexOf(char value); // 0x00798144-0x00798150
		public int LastIndexOf(char value, int startIndex); // 0x007982A0-0x007982A8
		public int LastIndexOfAny(char[] anyOf); // 0x007982A8-0x007982B4
		public int LastIndexOfAny(char[] anyOf, int startIndex); // 0x00798420-0x00798428
		public int LastIndexOf(string value); // 0x00798428-0x00798438
		public int LastIndexOf(string value, StringComparison comparisonType); // 0x00798888-0x0079889C
		public int LastIndexOf(string value, int startIndex, int count, StringComparison comparisonType); // 0x00798438-0x00798888
		public string PadLeft(int totalWidth, char paddingChar); // 0x0079889C-0x007988A4
		public string PadRight(int totalWidth, char paddingChar); // 0x007989FC-0x00798A04
		public bool StartsWith(string value); // 0x00798A04-0x00798AA4
		[ComVisible] // 0x0039D7E0-0x0039D7F4
		public bool StartsWith(string value, StringComparison comparisonType); // 0x00798AA4-0x00798D6C
		public string ToLower(); // 0x00798D6C-0x00798DDC
		public string ToLower(CultureInfo culture); // 0x00798DDC-0x00798E9C
		public string ToLowerInvariant(); // 0x00798E9C-0x00798F0C
		public string ToUpper(); // 0x00798F0C-0x00798F7C
		public string ToUpper(CultureInfo culture); // 0x00798F7C-0x0079A03C
		public string ToUpperInvariant(); // 0x0079A03C-0x0079A0AC
		public override string ToString(); // 0x0079A0AC-0x0079A0B0
		public string ToString(IFormatProvider provider); // 0x0079A0B0-0x0079A0B4
		public object Clone(); // 0x0079A0B4-0x0079A0B8
		private static bool IsBOMWhitespace(char c); // 0x0079A0B8-0x0079A0C0
		public string Trim(); // 0x00793E98-0x00793EA0
		private string TrimHelper(int trimType); // 0x00796734-0x00796898
		private string TrimHelper(char[] trimChars, int trimType); // 0x00796898-0x00796A0C
		private string CreateTrimmedString(int start, int end); // 0x0079A0C0-0x0079A158
		public string Insert(int startIndex, string value); // 0x0079A158-0x0079A2C0
		public string Replace(char oldChar, char newChar); // 0x0079A2C0-0x0079A2C4
		public string Replace(string oldValue, string newValue); // 0x0079A3B8-0x0079A45C
		public string Remove(int startIndex, int count); // 0x0079A568-0x0079A6F0
		public static string Format(string format, object arg0); // 0x0078BC8C-0x0078BCDC
		public static string Format(string format, object arg0, object arg1); // 0x0079361C-0x0079366C
		public static string Format(string format, object arg0, object arg1, object arg2); // 0x0079A7F0-0x0079A840
		public static string Format(string format, params /* 0x0039F978-0x0039F988 */ object[] args); // 0x0079A840-0x0079A920
		public static string Format(IFormatProvider provider, string format, object arg0); // 0x0079A920-0x0079A978
		public static string Format(IFormatProvider provider, string format, object arg0, object arg1); // 0x0079A978-0x0079A9D4
		public static string Format(IFormatProvider provider, string format, object arg0, object arg1, object arg2); // 0x0079A9D4-0x0079AA34
		public static string Format(IFormatProvider provider, string format, params /* 0x0039F988-0x0039F998 */ object[] args); // 0x0079AA34-0x0079AB18
		private static string FormatHelper(IFormatProvider provider, string format, ParamsArray args); // 0x0079A6F0-0x0079A7F0
		public static string Copy(string str); // 0x0079AB18-0x0079ABD8
		public static string Concat(object arg0); // 0x0079ABD8-0x0079AC48
		public static string Concat(object arg0, object arg1); // 0x0079AC48-0x0079AD18
		public static string Concat(object arg0, object arg1, object arg2); // 0x0079AD18-0x0079AE2C
		public static string Concat(params /* 0x0039F998-0x0039F9A8 */ object[] args); // 0x0079AE2C-0x0079B090
		public static string Concat(string str0, string str1); // 0x0078E740-0x0078E838
		public static string Concat(string str0, string str1, string str2); // 0x0078DBB8-0x0078DCE8
		public static string Concat(string str0, string str1, string str2, string str3); // 0x0079B158-0x0079B2EC
		private static string ConcatArray(string[] values, int totalLength); // 0x0079B090-0x0079B158
		public static string Concat(params /* 0x0039F9A8-0x0039F9B8 */ string[] values); // 0x0079B2EC-0x0079B4C8
		public TypeCode GetTypeCode(); // 0x0079B4C8-0x0079B4D0
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x0079B4D0-0x0079B548
		char IConvertible.ToChar(IFormatProvider provider); // 0x0079B548-0x0079B5C0
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x0079B5C0-0x0079B638
		byte IConvertible.ToByte(IFormatProvider provider); // 0x0079B638-0x0079B6B0
		short IConvertible.ToInt16(IFormatProvider provider); // 0x0079B6B0-0x0079B728
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x0079B728-0x0079B7A0
		int IConvertible.ToInt32(IFormatProvider provider); // 0x0079B7A0-0x0079B818
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x0079B818-0x0079B890
		long IConvertible.ToInt64(IFormatProvider provider); // 0x0079B890-0x0079B908
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x0079B908-0x0079B980
		float IConvertible.ToSingle(IFormatProvider provider); // 0x0079B980-0x0079B9F8
		double IConvertible.ToDouble(IFormatProvider provider); // 0x0079B9F8-0x0079BA70
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x0079BA70-0x0079BAE8
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x0079BAE8-0x0079BB60
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x0079BB60-0x0079BBE0
		IEnumerator<char> IEnumerable<char>.GetEnumerator(); // 0x0079BBE0-0x0079BC44
		IEnumerator IEnumerable.GetEnumerator(); // 0x0079BC44-0x0079BCA8
		internal static int CompareOrdinalUnchecked(string strA, int indexA, int lenA, string strB, int indexB, int lenB); // 0x0079BCA8-0x0079BE2C
		public int IndexOf(char value, int startIndex, int count); // 0x00797AC8-0x00797C18
		internal int IndexOfUnchecked(char value, int startIndex, int count); // 0x0079BE2C-0x0079BFF0
		internal int IndexOfUnchecked(string value, int startIndex, int count); // 0x0079BFF0-0x0079C114
		public int IndexOfAny(char[] anyOf, int startIndex, int count); // 0x00797C24-0x00797D44
		private int IndexOfAnyUnchecked(char[] anyOf, int startIndex, int count); // 0x0079C114-0x0079C244
		public int LastIndexOf(char value, int startIndex, int count); // 0x00798150-0x007982A0
		internal int LastIndexOfUnchecked(char value, int startIndex, int count); // 0x0079C244-0x0079C410
		public int LastIndexOfAny(char[] anyOf, int startIndex, int count); // 0x007982B4-0x00798420
		private int LastIndexOfAnyUnchecked(char[] anyOf, int startIndex, int count); // 0x0079C410-0x0079C4F0
		internal static int nativeCompareOrdinalEx(string strA, int indexA, string strB, int indexB, int count); // 0x00797694-0x0079781C
		private string ReplaceInternal(char oldChar, char newChar); // 0x0079A2C4-0x0079A3B8
		internal string ReplaceInternal(string oldValue, string newValue); // 0x0079A45C-0x0079A568
		private string ReplaceUnchecked(string oldValue, string newValue); // 0x0079C538-0x0079C90C
		private string ReplaceFallback(string oldValue, string newValue, int testedCount); // 0x0079C90C-0x0079CAA8
		private string PadHelper(int totalWidth, char paddingChar, bool isRightPadded); // 0x007988A4-0x007989FC
		internal bool StartsWithOrdinalUnchecked(string value); // 0x0079CAA8-0x0079CB14
		internal bool IsAscii(); // 0x00795360-0x007953A0
		internal static unsafe void CharCopy(char* dest, char* src, int count); // 0x0079C4F0-0x0079C538
		private static unsafe void memset(byte* dest, int val, int len); // 0x0079CB14-0x0079CBCC
		private static unsafe void memcpy(byte* dest, byte* src, int size); // 0x0079CBCC-0x0079CBD4
		internal static unsafe void bzero(byte* dest, int len); // 0x0079CBD4-0x0079CBE4
		internal static unsafe void bzero_aligned_1(byte* dest, int len); // 0x0079CBE4-0x0079CBEC
		internal static unsafe void bzero_aligned_2(byte* dest, int len); // 0x0079CBEC-0x0079CBF4
		internal static unsafe void bzero_aligned_4(byte* dest, int len); // 0x0079CBF4-0x0079CBFC
		internal static unsafe void bzero_aligned_8(byte* dest, int len); // 0x0079CBFC-0x0079CC04
		internal static unsafe void memcpy_aligned_1(byte* dest, byte* src, int size); // 0x0079CC04-0x0079CC10
		internal static unsafe void memcpy_aligned_2(byte* dest, byte* src, int size); // 0x0079CC10-0x0079CC1C
		internal static unsafe void memcpy_aligned_4(byte* dest, byte* src, int size); // 0x0079CC1C-0x0079CC28
		internal static unsafe void memcpy_aligned_8(byte* dest, byte* src, int size); // 0x0079CC28-0x0079CC34
		private unsafe string CreateString(sbyte* value); // 0x0079CC34-0x0079CCC8
		private unsafe string CreateString(sbyte* value, int startIndex, int length); // 0x0079CF80-0x0079CF88
		private unsafe string CreateString(char* value); // 0x0079CF88-0x0079CF8C
		private unsafe string CreateString(char* value, int startIndex, int length); // 0x0079CF8C-0x0079CF90
		private string CreateString(char[] val, int startIndex, int length); // 0x00793558-0x0079355C
		private string CreateString(char[] val); // 0x0078A1FC-0x0078A200
		private string CreateString(char c, int count); // 0x00792AB0-0x00792B9C
		private unsafe string CreateString(sbyte* value, int startIndex, int length, Encoding enc); // 0x0079CCC8-0x0079CF80
	}

	[ComVisible] // 0x00394950-0x0039498C
	[Flags] // 0x00394950-0x0039498C
	public enum StringSplitOptions // TypeDefIndex: 277
	{
		None = 0,
		RemoveEmptyEntries = 1
	}

	[Serializable]
	[ComVisible] // 0x0039498C-0x003949A0
	public abstract class StringComparer : IComparer, IEqualityComparer, IComparer<string>, IEqualityComparer<string> // TypeDefIndex: 278
	{
		// Fields
		private static readonly StringComparer _invariantCulture; // 0x00
		private static readonly StringComparer _invariantCultureIgnoreCase; // 0x08
		private static readonly StringComparer _ordinal; // 0x10
		private static readonly StringComparer _ordinalIgnoreCase; // 0x18
	
		// Properties
		public static StringComparer InvariantCultureIgnoreCase { get; } // 0x008B392C-0x008B3994 
		public static StringComparer CurrentCultureIgnoreCase { get; } // 0x008B3994-0x008B3A28 
		public static StringComparer Ordinal { get; } // 0x008B3A28-0x008B3A90 
		public static StringComparer OrdinalIgnoreCase { get; } // 0x008B3A90-0x008B3AF8 
	
		// Constructors
		protected StringComparer(); // 0x008B3E3C-0x008B3E44
		static StringComparer(); // 0x008B3E44-0x008B3F78
	
		// Methods
		public int Compare(object x, object y); // 0x008B3AF8-0x008B3C98
		public new bool Equals(object x, object y); // 0x008B3C98-0x008B3D68
		public int GetHashCode(object obj); // 0x008B3D68-0x008B3E3C
		public abstract int Compare(string x, string y);
		public abstract bool Equals(string x, string y);
		public abstract int GetHashCode(string obj);
	}

	[Serializable]
	internal sealed class CultureAwareComparer : StringComparer // TypeDefIndex: 279
	{
		// Fields
		private CompareInfo _compareInfo; // 0x10
		private bool _ignoreCase; // 0x18
		[OptionalField] // 0x0039B9A8-0x0039B9B8
		private CompareOptions _options; // 0x1C
	
		// Constructors
		internal CultureAwareComparer(CultureInfo culture, bool ignoreCase); // 0x0055C800-0x0055C8B4
	
		// Methods
		public override int Compare(string x, string y); // 0x0055C8B4-0x0055C93C
		public override bool Equals(string x, string y); // 0x0055C93C-0x0055C9BC
		public override int GetHashCode(string obj); // 0x0055C9BC-0x0055CA74
		public override bool Equals(object obj); // 0x0055CA74-0x0055CB50
		public override int GetHashCode(); // 0x0055CB50-0x0055CB98
	}

	[Serializable]
	internal sealed class OrdinalComparer : StringComparer // TypeDefIndex: 280
	{
		// Fields
		private bool _ignoreCase; // 0x10
	
		// Constructors
		internal OrdinalComparer(bool ignoreCase); // 0x00906D78-0x00906DF8
	
		// Methods
		public override int Compare(string x, string y); // 0x00906DF8-0x00906E50
		public override bool Equals(string x, string y); // 0x00906E50-0x00906F04
		public override int GetHashCode(string obj); // 0x00906F04-0x00906FC4
		public override bool Equals(object obj); // 0x00906FC4-0x00907064
		public override int GetHashCode(); // 0x00907064-0x009070D4
	}

	[Serializable]
	[ComVisible] // 0x003949A0-0x003949B4
	public class SystemException : Exception // TypeDefIndex: 281
	{
		// Constructors
		public SystemException(); // 0x008B3F78-0x008B4014
		public SystemException(string message); // 0x008B4014-0x008B40A0
		public SystemException(string message, Exception innerException); // 0x008B40A0-0x008B4134
		protected SystemException(SerializationInfo info, StreamingContext context); // 0x008B4134-0x008B41C4
	}

	[AttributeUsage] // 0x003949B4-0x003949F4
	[ComVisible] // 0x003949B4-0x003949F4
	public sealed class STAThreadAttribute : Attribute // TypeDefIndex: 282
	{
		// Constructors
		public STAThreadAttribute(); // 0x00628B3C-0x00628B44
	}

	[Serializable]
	[AttributeUsage] // 0x003949F4-0x00394A48
	[ComVisible] // 0x003949F4-0x00394A48
	public class ThreadStaticAttribute : Attribute // TypeDefIndex: 283
	{
		// Constructors
		public ThreadStaticAttribute(); // 0x0082B93C-0x0082B944
	}

	internal enum ExceptionArgument // TypeDefIndex: 284
	{
		obj = 0,
		dictionary = 1,
		dictionaryCreationThreshold = 2,
		array = 3,
		info = 4,
		key = 5,
		collection = 6,
		list = 7,
		match = 8,
		converter = 9,
		queue = 10,
		stack = 11,
		capacity = 12,
		index = 13,
		startIndex = 14,
		value = 15,
		count = 16,
		arrayIndex = 17,
		name = 18,
		mode = 19,
		item = 20,
		options = 21,
		view = 22,
		sourceBytesToCopy = 23,
		start = 24,
		pointer = 25,
		ownedMemory = 26,
		text = 27
	}

	internal enum ExceptionResource // TypeDefIndex: 285
	{
		Argument_ImplementIComparable = 0,
		Argument_InvalidType = 1,
		Argument_InvalidArgumentForComparison = 2,
		Argument_InvalidRegistryKeyPermissionCheck = 3,
		ArgumentOutOfRange_NeedNonNegNum = 4,
		Arg_ArrayPlusOffTooSmall = 5,
		Arg_NonZeroLowerBound = 6,
		Arg_RankMultiDimNotSupported = 7,
		Arg_RegKeyDelHive = 8,
		Arg_RegKeyStrLenBug = 9,
		Arg_RegSetStrArrNull = 10,
		Arg_RegSetMismatchedKind = 11,
		Arg_RegSubKeyAbsent = 12,
		Arg_RegSubKeyValueAbsent = 13,
		Argument_AddingDuplicate = 14,
		Serialization_InvalidOnDeser = 15,
		Serialization_MissingKeys = 16,
		Serialization_NullKey = 17,
		Argument_InvalidArrayType = 18,
		NotSupported_KeyCollectionSet = 19,
		NotSupported_ValueCollectionSet = 20,
		ArgumentOutOfRange_SmallCapacity = 21,
		ArgumentOutOfRange_Index = 22,
		Argument_InvalidOffLen = 23,
		Argument_ItemNotExist = 24,
		ArgumentOutOfRange_Count = 25,
		ArgumentOutOfRange_InvalidThreshold = 26,
		ArgumentOutOfRange_ListInsert = 27,
		NotSupported_ReadOnlyCollection = 28,
		InvalidOperation_CannotRemoveFromStackOrQueue = 29,
		InvalidOperation_EmptyQueue = 30,
		InvalidOperation_EnumOpCantHappen = 31,
		InvalidOperation_EnumFailedVersion = 32,
		InvalidOperation_EmptyStack = 33,
		ArgumentOutOfRange_BiggerThanCollection = 34,
		InvalidOperation_EnumNotStarted = 35,
		InvalidOperation_EnumEnded = 36,
		NotSupported_SortedListNestedWrite = 37,
		InvalidOperation_NoValue = 38,
		InvalidOperation_RegRemoveSubKey = 39,
		Security_RegistryPermission = 40,
		UnauthorizedAccess_RegistryNoWrite = 41,
		ObjectDisposed_RegKeyClosed = 42,
		NotSupported_InComparableType = 43,
		Argument_InvalidRegistryOptionsCheck = 44,
		Argument_InvalidRegistryViewCheck = 45
	}

	[Serializable]
	[ComVisible] // 0x00394A48-0x00394A5C
	public class TimeoutException : SystemException // TypeDefIndex: 286
	{
		// Constructors
		public TimeoutException(); // 0x00BC4284-0x00BC42F8
		public TimeoutException(string message); // 0x00BC42F8-0x00BC432C
		protected TimeoutException(SerializationInfo info, StreamingContext context); // 0x00BC432C-0x00BC4334
	}

	[Serializable]
	[ComVisible] // 0x00394A5C-0x00394A70
	public struct TimeSpan : IComparable, IComparable<TimeSpan>, IEquatable<TimeSpan>, IFormattable // TypeDefIndex: 287
	{
		// Fields
		public static readonly TimeSpan Zero; // 0x00
		public static readonly TimeSpan MaxValue; // 0x08
		public static readonly TimeSpan MinValue; // 0x10
		internal long _ticks; // 0x00
		private static bool _legacyConfigChecked; // 0x18
		private static bool _legacyMode; // 0x19
	
		// Properties
		public long Ticks { get; } // 0x004ADF98-0x004ADFE8 
		public int Hours { get; } // 0x004ADFE8-0x004AE078 
		public int Minutes { get; } // 0x004AE078-0x004AE0C0 
		public double TotalHours { get; } // 0x004AE0C0-0x004AE0D8 
		public double TotalMilliseconds { get; } // 0x004AE0D8-0x004AE10C 
		public double TotalMinutes { get; } // 0x004AE10C-0x004AE13C 
		public double TotalSeconds { get; } // 0x004AE13C-0x004AE210 
		private static bool LegacyMode { get; } // 0x004AEAD8-0x004AEBB8 
	
		// Constructors
		public TimeSpan(long ticks); // 0x004ADDF8-0x004ADE90
		public TimeSpan(int hours, int minutes, int seconds); // 0x004ADF80-0x004ADF88
		public TimeSpan(int days, int hours, int minutes, int seconds, int milliseconds); // 0x004ADF88-0x004ADF98
		static TimeSpan(); // 0x004AECB8-0x004AED24
	
		// Methods
		public TimeSpan Add(TimeSpan ts); // 0x004AE210-0x004AE2FC
		public int CompareTo(object value); // 0x004AE2FC-0x004AE304
		public int CompareTo(TimeSpan value); // 0x004AE304-0x004AE318
		public static TimeSpan FromDays(double value); // 0x004AE318-0x004AE38C
		public override bool Equals(object value); // 0x004AE570-0x004AE578
		public bool Equals(TimeSpan obj); // 0x004AE578-0x004AE588
		public override int GetHashCode(); // 0x004AE588-0x004AE594
		public static TimeSpan FromHours(double value); // 0x004AE594-0x004AE608
		private static TimeSpan Interval(double value, int scale); // 0x004AE38C-0x004AE570
		public static TimeSpan FromMilliseconds(double value); // 0x004AE608-0x004AE678
		public static TimeSpan FromMinutes(double value); // 0x004AE678-0x004AE7C8
		public TimeSpan Negate(); // 0x004AE7C8-0x004AE7D0
		public static TimeSpan FromSeconds(double value); // 0x004AE7D0-0x004AE8FC
		public TimeSpan Subtract(TimeSpan ts); // 0x004AE8FC-0x004AE904
		public static TimeSpan FromTicks(long value); // 0x004AE904-0x004AE978
		internal static long TimeToTicks(int hour, int minute, int second); // 0x004ADE90-0x004ADF80
		public override string ToString(); // 0x004AE978-0x004AE9FC
		public string ToString(string format); // 0x004AE9FC-0x004AEAD8
		public string ToString(string format, IFormatProvider formatProvider); // 0x004AEBB8-0x004AEBC0
		public static TimeSpan operator -(TimeSpan t1, TimeSpan t2); // 0x004AEBC0-0x004AEBE4
		public static TimeSpan operator +(TimeSpan t1, TimeSpan t2); // 0x004AEBE4-0x004AEC08
		public static bool operator ==(TimeSpan t1, TimeSpan t2); // 0x004AEC08-0x004AEC14
		public static bool operator !=(TimeSpan t1, TimeSpan t2); // 0x004AEC14-0x004AEC20
		public static bool operator <(TimeSpan t1, TimeSpan t2); // 0x004AEC20-0x004AEC2C
		public static bool operator <=(TimeSpan t1, TimeSpan t2); // 0x004AEC2C-0x004AEC38
		public static bool operator >(TimeSpan t1, TimeSpan t2); // 0x004AEC38-0x004AEC44
		public static bool operator >=(TimeSpan t1, TimeSpan t2); // 0x004AEC44-0x004AEC50
		private static bool GetLegacyFormatMode(); // 0x004AEC50-0x004AECB8
	}

	[Flags] // 0x00394A70-0x00394A80
	internal enum TimeZoneInfoOptions // TypeDefIndex: 288
	{
		None = 1,
		NoThrowOnInvalidTime = 2
	}

	[Serializable]
	[TypeForwardedFrom] // 0x00394A80-0x00394AB8
	public sealed class TimeZoneInfo : IEquatable<TimeZoneInfo>, ISerializable, IDeserializationCallback // TypeDefIndex: 289
	{
		// Fields
		private TimeSpan baseUtcOffset; // 0x10
		private string daylightDisplayName; // 0x18
		private string displayName; // 0x20
		private string id; // 0x28
		private static TimeZoneInfo local; // 0x00
		private List<KeyValuePair<DateTime, TimeType>> transitions; // 0x30
		private static bool readlinkNotFound; // 0x08
		private string standardDisplayName; // 0x38
		private bool supportsDaylightSavingTime; // 0x40
		private static TimeZoneInfo utc; // 0x10
		private static string timeZoneDirectory; // 0x18
		private AdjustmentRule[] adjustmentRules; // 0x48
		private static RegistryKey timeZoneKey; // 0x20
		private static RegistryKey localZoneKey; // 0x28
		private static ReadOnlyCollection<TimeZoneInfo> systemTimeZones; // 0x30
	
		// Properties
		public TimeSpan BaseUtcOffset { get; } // 0x004B2790-0x004B2798 
		public string DisplayName { get; } // 0x004B2798-0x004B27A0 
		public string Id { get; } // 0x004B2524-0x004B252C 
		public static TimeZoneInfo Local { get; } // 0x004B26D0-0x004B2790 
		public bool SupportsDaylightSavingTime { get; } // 0x004B44CC-0x004B44D4 
		public static TimeZoneInfo Utc { get; } // 0x004B2118-0x004B21A8 
		private static string TimeZoneDirectory { get; } // 0x004B31BC-0x004B3228 
		private static bool IsWindows { get; } // 0x004B3228-0x004B3284 
		private static RegistryKey TimeZoneKey { get; } // 0x004B4398-0x004B44CC 
		private static RegistryKey LocalZoneKey { get; } // 0x004B3284-0x004B33B8 
	
		// Nested types
		[Serializable]
		[TypeForwardedFrom] // 0x00394AB8-0x00394AF0
		public sealed class AdjustmentRule : IEquatable<AdjustmentRule>, ISerializable, IDeserializationCallback // TypeDefIndex: 290
		{
			// Fields
			private DateTime m_dateStart; // 0x10
			private DateTime m_dateEnd; // 0x18
			private TimeSpan m_daylightDelta; // 0x20
			private TransitionTime m_daylightTransitionStart; // 0x28
			private TransitionTime m_daylightTransitionEnd; // 0x40
			private TimeSpan m_baseUtcOffsetDelta; // 0x58
	
			// Properties
			public DateTime DateStart { get; } // 0x00BC26B4-0x00BC26BC 
			public DateTime DateEnd { get; } // 0x00BC26BC-0x00BC26C4 
			public TimeSpan DaylightDelta { get; } // 0x00BC26C4-0x00BC26CC 
			public TransitionTime DaylightTransitionStart { get; } // 0x00BC26CC-0x00BC26E0 
			public TransitionTime DaylightTransitionEnd { get; } // 0x00BC26E0-0x00BC26F4 
	
			// Constructors
			private AdjustmentRule(); // 0x00BC297C-0x00BC2984
			private AdjustmentRule(SerializationInfo info, StreamingContext context); // 0x00BC31F0-0x00BC3438
	
			// Methods
			public bool Equals(AdjustmentRule other); // 0x00BC26F4-0x00BC2970
			public override int GetHashCode(); // 0x00BC2970-0x00BC297C
			public static AdjustmentRule CreateAdjustmentRule(DateTime dateStart, DateTime dateEnd, TimeSpan daylightDelta, TransitionTime daylightTransitionStart, TransitionTime daylightTransitionEnd); // 0x00BC2984-0x00BC2B20
			internal static AdjustmentRule CreateAdjustmentRule(DateTime dateStart, DateTime dateEnd, TimeSpan daylightDelta, TransitionTime daylightTransitionStart, TransitionTime daylightTransitionEnd, TimeSpan baseUtcOffsetDelta); // 0x00BC2E8C-0x00BC2EF0
			private static void ValidateAdjustmentRule(DateTime dateStart, DateTime dateEnd, TimeSpan daylightDelta, TransitionTime daylightTransitionStart, TransitionTime daylightTransitionEnd); // 0x00BC2B20-0x00BC2E8C
			void IDeserializationCallback.OnDeserialization(object sender); // 0x00BC2EF0-0x00BC303C
			void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00BC303C-0x00BC31F0
		}
	
		[Serializable]
		[TypeForwardedFrom] // 0x00394AF0-0x00394B28
		public struct TransitionTime : IEquatable<TransitionTime>, ISerializable, IDeserializationCallback // TypeDefIndex: 291
		{
			// Fields
			private DateTime m_timeOfDay; // 0x00
			private byte m_month; // 0x08
			private byte m_week; // 0x09
			private byte m_day; // 0x0A
			private DayOfWeek m_dayOfWeek; // 0x0C
			private bool m_isFixedDateRule; // 0x10
	
			// Properties
			public DateTime TimeOfDay { get; } // 0x00BC36F0-0x00BC3700 
			public int Month { get; } // 0x00BC3700-0x00BC3710 
			public int Week { get; } // 0x00BC3710-0x00BC3720 
			public int Day { get; } // 0x00BC3720-0x00BC3730 
			public DayOfWeek DayOfWeek { get; } // 0x00BC3730-0x00BC3740 
			public bool IsFixedDateRule { get; } // 0x00BC3740-0x00BC37E8 
	
			// Constructors
			private TransitionTime(SerializationInfo info, StreamingContext context); // 0x00BC4104-0x00BC410C
	
			// Methods
			public override bool Equals(object obj); // 0x00BC37E8-0x00BC37F0
			public static bool operator !=(TransitionTime t1, TransitionTime t2); // 0x00BC37F0-0x00BC3828
			public bool Equals(TransitionTime other); // 0x00BC3828-0x00BC3860
			public override int GetHashCode(); // 0x00BC3860-0x00BC3874
			public static TransitionTime CreateFixedDateRule(DateTime timeOfDay, int month, int day); // 0x00BC3874-0x00BC38E8
			public static TransitionTime CreateFloatingDateRule(DateTime timeOfDay, int month, int week, DayOfWeek dayOfWeek); // 0x00BC3964-0x00BC39D4
			private static TransitionTime CreateTransitionTime(DateTime timeOfDay, int month, int week, int day, DayOfWeek dayOfWeek, bool isFixedDateRule); // 0x00BC38E8-0x00BC3964
			private static void ValidateTransitionTime(DateTime timeOfDay, int month, int week, int day, DayOfWeek dayOfWeek); // 0x00BC39D4-0x00BC3D6C
			void IDeserializationCallback.OnDeserialization(object sender); // 0x00BC3D6C-0x00BC3ECC
			void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00BC3ECC-0x00BC4104
		}
	
		internal struct SYSTEMTIME // TypeDefIndex: 292
		{
			// Fields
			internal ushort wYear; // 0x00
			internal ushort wMonth; // 0x02
			internal ushort wDayOfWeek; // 0x04
			internal ushort wDay; // 0x06
			internal ushort wHour; // 0x08
			internal ushort wMinute; // 0x0A
			internal ushort wSecond; // 0x0C
			internal ushort wMilliseconds; // 0x0E
		}
	
		internal struct TIME_ZONE_INFORMATION // TypeDefIndex: 293
		{
			// Fields
			internal int Bias; // 0x00
			internal string StandardName; // 0x08
			internal SYSTEMTIME StandardDate; // 0x10
			internal int StandardBias; // 0x20
			internal string DaylightName; // 0x28
			internal SYSTEMTIME DaylightDate; // 0x30
			internal int DaylightBias; // 0x40
		}
	
		internal struct DYNAMIC_TIME_ZONE_INFORMATION // TypeDefIndex: 294
		{
			// Fields
			internal TIME_ZONE_INFORMATION TZI; // 0x00
			internal string TimeZoneKeyName; // 0x48
			internal byte DynamicDaylightTimeDisabled; // 0x50
		}
	
		[Serializable]
		[CompilerGenerated] // 0x00394B28-0x00394B38
		private sealed class <>c // TypeDefIndex: 295
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static Comparison<AdjustmentRule> <>9__19_0; // 0x08
	
			// Constructors
			static <>c(); // 0x00BC25EC-0x00BC2650
			public <>c(); // 0x00BC2650-0x00BC2658
	
			// Methods
			internal int <CreateLocalUnity>b__19_0(AdjustmentRule rule1, AdjustmentRule rule2); // 0x00BC2658-0x00BC26B4
		}
	
		// Constructors
		private TimeZoneInfo(SerializationInfo info, StreamingContext context); // 0x004B7750-0x004B7B74
		private TimeZoneInfo(string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime); // 0x004B0AC0-0x004B2014
	
		// Methods
		internal static bool UtcOffsetOutOfRange(TimeSpan offset); // 0x004AF064-0x004AF094
		private static List<AdjustmentRule> CreateAdjustmentRule(int year, out long[] data, out string[] names, string standardNameCurrentYear, string daylightNameCurrentYear); // 0x004AF094-0x004AF804
		private static TimeZoneInfo CreateLocalUnity(); // 0x004AF804-0x004AFCA0
		internal static extern uint EnumDynamicTimeZoneInformation(uint dwIndex, out DYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation); // 0x004AFD50-0x004AFE50
		internal static extern uint GetDynamicTimeZoneInformation(out DYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation); // 0x004AFE50-0x004AFF40
		internal static extern uint GetDynamicTimeZoneInformationEffectiveYears(ref DYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation, out uint FirstYear, out uint LastYear); // 0x004AFF40-0x004B0054
		internal static extern bool GetTimeZoneInformationForYear(ushort wYear, ref DYNAMIC_TIME_ZONE_INFORMATION pdtzi, out TIME_ZONE_INFORMATION ptzi); // 0x004B0054-0x004B01B0
		internal static AdjustmentRule CreateAdjustmentRuleFromTimeZoneInformation(ref DYNAMIC_TIME_ZONE_INFORMATION timeZoneInformation, DateTime startDate, DateTime endDate, int defaultBaseUtcOffset); // 0x004B01B0-0x004B0440
		private static bool TransitionTimeFromTimeZoneInformation(DYNAMIC_TIME_ZONE_INFORMATION timeZoneInformation, out TransitionTime transitionTime, bool readStartDate); // 0x004B0440-0x004B05D4
		internal static TimeZoneInfo TryCreateTimeZone(DYNAMIC_TIME_ZONE_INFORMATION timeZoneInformation); // 0x004B05D4-0x004B0AC0
		internal static TimeZoneInfo GetLocalTimeZoneInfoWinRTFallback(); // 0x004B2014-0x004B2118
		internal static TimeZoneInfo FindSystemTimeZoneByIdWinRTFallback(string id); // 0x004B21A8-0x004B2450
		internal static List<TimeZoneInfo> GetSystemTimeZonesWinRTFallback(); // 0x004B252C-0x004B26D0
		private static extern int readlink(string path, byte[] buffer, int buflen); // 0x004B2CA4-0x004B2D78
		private static string readlink(string path); // 0x004B2D78-0x004B2F2C
		private static bool TryGetNameFromPath(string path, out string name); // 0x004B2F2C-0x004B31BC
		private static TimeZoneInfo CreateLocal(); // 0x004B27A0-0x004B2CA4
		private static TimeZoneInfo FindSystemTimeZoneByIdCore(string id); // 0x004B3840-0x004B38C4
		private static void GetSystemTimeZonesCore(List<TimeZoneInfo> systemTimeZones); // 0x004B38C4-0x004B4398
		private static string TrimSpecial(string str); // 0x004B33B8-0x004B3544
		private static bool TryAddTicks(DateTime date, long ticks, out DateTime result, DateTimeKind kind = DateTimeKind.Unspecified /* Metadata: 0x00203A1E */); // 0x004B44E4-0x004B4664
		public static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo sourceTimeZone, TimeZoneInfo destinationTimeZone); // 0x004B4664-0x004B487C
		private DateTime ConvertTimeFromUtc(DateTime dateTime); // 0x004B4A94-0x004B4BFC
		public static DateTime ConvertTimeFromUtc(DateTime dateTime, TimeZoneInfo destinationTimeZone); // 0x004B49F8-0x004B4A94
		internal static DateTime ConvertTimeToUtc(DateTime dateTime, TimeZoneInfoOptions flags); // 0x004B4C20-0x004B4C50
		public static DateTime ConvertTimeToUtc(DateTime dateTime, TimeZoneInfo sourceTimeZone); // 0x004B49F0-0x004B49F8
		private static DateTime ConvertTimeToUtc(DateTime dateTime, TimeZoneInfo sourceTimeZone, TimeZoneInfoOptions flags); // 0x004B4C50-0x004B4E00
		internal static TimeSpan GetDateTimeNowUtcOffsetFromUtc(DateTime time, out bool isAmbiguousLocalDst); // 0x004B4ED0-0x004B4F14
		public static TimeZoneInfo CreateCustomTimeZone(string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName); // 0x004B44D4-0x004B44E4
		public static TimeZoneInfo CreateCustomTimeZone(string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, AdjustmentRule[] adjustmentRules); // 0x004B4F90-0x004B4F98
		public static TimeZoneInfo CreateCustomTimeZone(string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime); // 0x004AFCA0-0x004AFD50
		public override bool Equals(object obj); // 0x004B4F98-0x004B500C
		public bool Equals(TimeZoneInfo other); // 0x004B500C-0x004B505C
		public static TimeZoneInfo FindSystemTimeZoneById(string id); // 0x004B3544-0x004B36A4
		private static TimeZoneInfo FindSystemTimeZoneByFileName(string id, string filepath); // 0x004B36A4-0x004B3840
		private static TimeZoneInfo FromRegistryKey(string id, RegistryKey key); // 0x004B523C-0x004B570C
		private static void ParseRegTzi(List<AdjustmentRule> adjustmentRules, int start_year, int end_year, byte[] buffer); // 0x004B58C8-0x004B5CB8
		public AdjustmentRule[] GetAdjustmentRules(); // 0x004B5E30-0x004B5F1C
		public override int GetHashCode(); // 0x004B5F1C-0x004B5FDC
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x004B5FDC-0x004B6150
		public static ReadOnlyCollection<TimeZoneInfo> GetSystemTimeZones(); // 0x004B2450-0x004B2524
		public TimeSpan GetUtcOffset(DateTime dateTime); // 0x004B4BFC-0x004B4C20
		private TimeSpan GetUtcOffset(DateTime dateTime, out bool isDST); // 0x004B4E00-0x004B4ED0
		private static TimeSpan GetUtcOffsetHelper(DateTime dateTime, TimeZoneInfo tz, out bool isDST); // 0x004B6150-0x004B6458
		public bool HasSameRules(TimeZoneInfo other); // 0x004B505C-0x004B523C
		public bool IsAmbiguousTime(DateTime dateTime); // 0x004B6938-0x004B6B48
		private bool IsInDST(AdjustmentRule rule, DateTime dateTime); // 0x004B6898-0x004B6938
		private bool IsInDSTForYear(AdjustmentRule rule, DateTime dateTime, int year); // 0x004B6D84-0x004B70A4
		public bool IsDaylightSavingTime(DateTime dateTime); // 0x004B70A4-0x004B7194
		internal bool IsDaylightSavingTime(DateTime dateTime, TimeZoneInfoOptions flags); // 0x004B7194-0x004B7198
		public bool IsInvalidTime(DateTime dateTime); // 0x004B487C-0x004B49F0
		void IDeserializationCallback.OnDeserialization(object sender); // 0x004B7198-0x004B729C
		private static void Validate(string id, TimeSpan baseUtcOffset, AdjustmentRule[] adjustmentRules); // 0x004B729C-0x004B7748
		public override string ToString(); // 0x004B7748-0x004B7750
		private AdjustmentRule GetApplicableRule(DateTime dateTime); // 0x004B66A8-0x004B6898
		private bool TryGetTransitionOffset(DateTime dateTime, out TimeSpan offset, out bool isDst); // 0x004B6458-0x004B66A8
		private static DateTime TransitionPoint(TransitionTime transition, int year); // 0x004B6B48-0x004B6D84
		private static AdjustmentRule[] ValidateRules(List<AdjustmentRule> adjustmentRules); // 0x004B5CB8-0x004B5E30
		private static TimeZoneInfo BuildFromStream(string id, Stream stream); // 0x004B570C-0x004B58C8
		private static bool ValidTZFile(byte[] buffer, int length); // 0x004B7B74-0x004B7C84
		private static int SwapInt32(int i); // 0x004B86F4-0x004B86FC
		private static int ReadBigEndianInt32(byte[] buffer, int start); // 0x004B86FC-0x004B8790
		private static TimeZoneInfo ParseTZBuffer(string id, byte[] buffer, int length); // 0x004B7C84-0x004B86F4
		private static Dictionary<int, string> ParseAbbreviations(byte[] buffer, int index, int count); // 0x004B8790-0x004B89CC
		private static Dictionary<int, TimeType> ParseTimesTypes(byte[] buffer, int index, int count, Dictionary<int, string> abbreviations); // 0x004B89CC-0x004B8B9C
		private static List<KeyValuePair<DateTime, TimeType>> ParseTransitions(byte[] buffer, int index, int count, Dictionary<int, TimeType> time_types); // 0x004B8B9C-0x004B8D10
		private static DateTime DateTimeFromUnixTime(long unix_time); // 0x004B8D10-0x004B8D58
		internal static TimeSpan GetLocalUtcOffset(DateTime dateTime, TimeZoneInfoOptions flags); // 0x004B8D58-0x004B8DA0
		internal TimeSpan GetUtcOffset(DateTime dateTime, TimeZoneInfoOptions flags); // 0x004B8DA0-0x004B8DC4
		internal static TimeSpan GetUtcOffsetFromUtc(DateTime time, TimeZoneInfo zone, out bool isDaylightSavings, out bool isAmbiguousLocalDst); // 0x004B4F14-0x004B4F90
	}

	[Serializable]
	[TypeForwardedFrom] // 0x00394B38-0x00394B70
	public class TimeZoneNotFoundException : Exception // TypeDefIndex: 296
	{
		// Constructors
		public TimeZoneNotFoundException(string message, Exception innerException); // 0x00BC410C-0x00BC418C
		protected TimeZoneNotFoundException(SerializationInfo info, StreamingContext context); // 0x00BC418C-0x00BC421C
		public TimeZoneNotFoundException(); // 0x00BC421C-0x00BC4284
	}

	[Serializable]
	[ClassInterface] // 0x00394B70-0x00394BFC
	[ComDefaultInterface] // 0x00394B70-0x00394BFC
	[ComVisible] // 0x00394B70-0x00394BFC
	public abstract class Type : MemberInfo, _Type, IReflect // TypeDefIndex: 297
	{
		// Fields
		public static readonly MemberFilter FilterAttribute; // 0x00
		public static readonly MemberFilter FilterName; // 0x08
		public static readonly MemberFilter FilterNameIgnoreCase; // 0x10
		public static readonly object Missing; // 0x18
		public static readonly char Delimiter; // 0x20
		public static readonly Type[] EmptyTypes; // 0x28
		private static Binder defaultBinder; // 0x30
		private const BindingFlags DefaultLookup = BindingFlags.Default | BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public; // Metadata: 0x00203A22
		internal const BindingFlags DeclaredOnlyLookup = BindingFlags.Default | BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic; // Metadata: 0x00203A26
		internal RuntimeTypeHandle _impl; // 0x10
	
		// Properties
		public override MemberTypes MemberType { get; } // 0x00BC4378-0x00BC4380 
		public override Type DeclaringType { get; } // 0x00BC4380-0x00BC4388 
		public virtual MethodBase DeclaringMethod { get; } // 0x00BC4388-0x00BC4390 
		public override Type ReflectedType { get; } // 0x00BC4390-0x00BC4398 
		public static Binder DefaultBinder { get; } // 0x00BC4754-0x00BC47FC 
		public abstract Module Module { get; }
		public abstract Assembly Assembly { get; }
		public virtual RuntimeTypeHandle TypeHandle { get; } // 0x00BC48BC-0x00BC4924 
		public abstract string FullName { get; }
		public abstract string Namespace { get; }
		public abstract string AssemblyQualifiedName { get; }
		public abstract Type BaseType { get; }
		public bool IsNested { get; } // 0x00BC5558-0x00BC55D8 
		public TypeAttributes Attributes { get; } // 0x00BC55D8-0x00BC55E8 
		public virtual GenericParameterAttributes GenericParameterAttributes { get; } // 0x00BC55E8-0x00BC5650 
		public bool IsNotPublic { get; } // 0x00BC5650-0x00BC5678 
		public bool IsPublic { get; } // 0x00BC5678-0x00BC56A4 
		public bool IsNestedPublic { get; } // 0x00BC56A4-0x00BC56D0 
		public bool IsNestedAssembly { get; } // 0x00BC56D0-0x00BC56FC 
		public bool IsExplicitLayout { get; } // 0x00BC56FC-0x00BC5728 
		public bool IsClass { get; } // 0x00BC5728-0x00BC577C 
		public bool IsInterface { get; } // 0x00BC578C-0x00BC5860 
		public bool IsValueType { get; } // 0x00BC577C-0x00BC578C 
		public bool IsAbstract { get; } // 0x00BC5860-0x00BC5884 
		public bool IsSealed { get; } // 0x00BC5884-0x00BC58A8 
		public virtual bool IsEnum { get; } // 0x00BC58A8-0x00BC5924 
		public virtual bool IsSerializable { get; } // 0x00BC5924-0x00BC5A28 
		public bool IsArray { get; } // 0x00BC5A28-0x00BC5A38 
		internal virtual bool IsSzArray { get; } // 0x00BC5A38-0x00BC5A40 
		public virtual bool IsGenericType { get; } // 0x00BC5A40-0x00BC5A48 
		public virtual bool IsGenericTypeDefinition { get; } // 0x00BC5A48-0x00BC5A50 
		public virtual bool IsGenericParameter { get; } // 0x00BC5A50-0x00BC5A58 
		public virtual int GenericParameterPosition { get; } // 0x00BC5A58-0x00BC5AE0 
		public virtual bool ContainsGenericParameters { get; } // 0x00BC5AE0-0x00BC5C0C 
		public bool IsByRef { get; } // 0x00BC5D48-0x00BC5D58 
		public bool IsPointer { get; } // 0x00BC5D58-0x00BC5D68 
		public bool IsPrimitive { get; } // 0x00BC5D68-0x00BC5D78 
		public bool IsCOMObject { get; } // 0x00BC5D78-0x00BC5D88 
		public bool HasElementType { get; } // 0x00BC5C0C-0x00BC5C1C 
		public bool IsContextful { get; } // 0x00BC5D88-0x00BC5D98 
		public bool IsMarshalByRef { get; } // 0x00BC5D98-0x00BC5DA8 
		public abstract Type UnderlyingSystemType { get; }
	
		// Constructors
		protected Type(); // 0x00BC4370-0x00BC4378
		static Type(); // 0x00BC7FF4-0x00BC81C4
	
		// Methods
		public static Type GetType(string typeName, Func<AssemblyName, Assembly> assemblyResolver, Func<Assembly, string, bool, Type> typeResolver, bool throwOnError); // 0x00BC4398-0x00BC43A4
		public virtual Type MakePointerType(); // 0x00BC4400-0x00BC4468
		public virtual Type MakeByRefType(); // 0x00BC4468-0x00BC44D0
		public virtual Type MakeArrayType(); // 0x00BC44D0-0x00BC4538
		public virtual Type MakeArrayType(int rank); // 0x00BC4538-0x00BC45A0
		public static TypeCode GetTypeCode(Type type); // 0x00BC45A0-0x00BC4628
		protected virtual TypeCode GetTypeCodeImpl(); // 0x00BC4634-0x00BC4748
		private static void CreateBinder(); // 0x00BC47FC-0x00BC48BC
		public abstract object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters);
		public static RuntimeTypeHandle GetTypeHandle(object o); // 0x00BC4924-0x00BC4A74
		public virtual int GetArrayRank(); // 0x00BC4A74-0x00BC4AFC
		[ComVisible] // 0x0039D7F4-0x0039D808
		public ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x00BC4AFC-0x00BC4C44
		[ComVisible] // 0x0039D808-0x0039D81C
		public ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers); // 0x00BC4C44-0x00BC4D80
		[ComVisible] // 0x0039D81C-0x0039D830
		public ConstructorInfo GetConstructor(Type[] types); // 0x00BC4D80-0x00BC4D98
		protected abstract ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
		[ComVisible] // 0x0039D830-0x0039D844
		public abstract ConstructorInfo[] GetConstructors(BindingFlags bindingAttr);
		public MethodInfo GetMethod(string name, BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers); // 0x00BC4D98-0x00BC4F04
		public MethodInfo GetMethod(string name, Type[] types); // 0x00BC4F04-0x00BC5054
		public MethodInfo GetMethod(string name, BindingFlags bindingAttr); // 0x00BC5054-0x00BC5114
		public MethodInfo GetMethod(string name); // 0x00BC5114-0x00BC51D0
		protected abstract MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
		public MethodInfo[] GetMethods(); // 0x00BC51D0-0x00BC51E4
		public abstract MethodInfo[] GetMethods(BindingFlags bindingAttr);
		public abstract FieldInfo GetField(string name, BindingFlags bindingAttr);
		public FieldInfo GetField(string name); // 0x00BC51E4-0x00BC51F8
		public abstract FieldInfo[] GetFields(BindingFlags bindingAttr);
		public abstract Type[] GetInterfaces();
		public abstract EventInfo GetEvent(string name, BindingFlags bindingAttr);
		public PropertyInfo GetProperty(string name, Type returnType, Type[] types); // 0x00BC51F8-0x00BC52E4
		public PropertyInfo GetProperty(string name, Type returnType); // 0x00BC52E4-0x00BC53E4
		public PropertyInfo GetProperty(string name); // 0x00BC53E4-0x00BC54A0
		protected abstract PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers);
		public abstract Type GetNestedType(string name, BindingFlags bindingAttr);
		public MemberInfo[] GetMember(string name); // 0x00BC54A0-0x00BC54B4
		public virtual MemberInfo[] GetMember(string name, BindingFlags bindingAttr); // 0x00BC54B4-0x00BC54D0
		public virtual MemberInfo[] GetMember(string name, MemberTypes type, BindingFlags bindingAttr); // 0x00BC54D0-0x00BC5558
		public virtual Type[] GetGenericParameterConstraints(); // 0x00BC5C78-0x00BC5D48
		protected virtual bool IsValueTypeImpl(); // 0x00BC5DA8-0x00BC5E24
		protected abstract TypeAttributes GetAttributeFlagsImpl();
		protected abstract bool IsArrayImpl();
		protected abstract bool IsByRefImpl();
		protected abstract bool IsPointerImpl();
		protected abstract bool IsPrimitiveImpl();
		protected abstract bool IsCOMObjectImpl();
		public virtual Type MakeGenericType(params /* 0x0039F9B8-0x0039F9C8 */ Type[] typeArguments); // 0x00BC5E24-0x00BC5EAC
		protected virtual bool IsContextfulImpl(); // 0x00BC5EAC-0x00BC5F40
		protected virtual bool IsMarshalByRefImpl(); // 0x00BC5F40-0x00BC5FD4
		public abstract Type GetElementType();
		public virtual Type[] GetGenericArguments(); // 0x00BC5FD4-0x00BC605C
		public virtual Type GetGenericTypeDefinition(); // 0x00BC605C-0x00BC60E4
		protected abstract bool HasElementTypeImpl();
		internal Type GetRootElementType(); // 0x00BC5C1C-0x00BC5C78
		public virtual string[] GetEnumNames(); // 0x00BC60E4-0x00BC61C0
		public virtual Array GetEnumValues(); // 0x00BC6748-0x00BC6824
		private Array GetEnumRawConstantValues(); // 0x00BC6824-0x00BC6850
		private void GetEnumData(out string[] enumNames, out Array enumValues); // 0x00BC61C0-0x00BC6748
		public virtual Type GetEnumUnderlyingType(); // 0x00BC6850-0x00BC6960
		public virtual bool IsEnumDefined(object value); // 0x00BC6960-0x00BC6EC0
		public virtual string GetEnumName(object value); // 0x00BC729C-0x00BC74E0
		private static int BinarySearch(Array array, object value); // 0x00BC7120-0x00BC729C
		internal static bool IsIntegerType(Type t); // 0x00BC6EC0-0x00BC7120
		[ComVisible] // 0x0039D844-0x0039D858
		public virtual bool IsSubclassOf(Type c); // 0x00BC74E0-0x00BC75B8
		public virtual bool IsInstanceOfType(object o); // 0x00BC75B8-0x00BC7608
		public virtual bool IsAssignableFrom(Type c); // 0x00BC7608-0x00BC7844
		public virtual bool IsEquivalentTo(Type other); // 0x00BC79F0-0x00BC7A64
		internal bool ImplementInterface(Type ifaceType); // 0x00BC7844-0x00BC79F0
		internal string FormatTypeName(); // 0x00BC7A64-0x00BC7A78
		internal virtual string FormatTypeName(bool serialization); // 0x00BC7A78-0x00BC7AE0
		public override string ToString(); // 0x00BC7AE0-0x00BC7B48
		public override bool Equals(object o); // 0x00BC7B48-0x00BC7BF8
		public virtual bool Equals(Type o); // 0x00BC7BF8-0x00BC7C50
		public static bool operator ==(Type left, Type right); // 0x00BC4628-0x00BC4634
		public static bool operator !=(Type left, Type right); // 0x00BC4748-0x00BC4754
		public override int GetHashCode(); // 0x00BC7C50-0x00BC7CB4
		public new Type GetType(); // 0x00BC7CB4-0x00BC7CBC
		private static Type internal_from_name(string name, bool throwOnError, bool ignoreCase); // 0x00BC7CBC-0x00BC7CC8
		public static Type GetType(string typeName); // 0x00BC7CC8-0x00BC7D68
		public static Type GetType(string typeName, bool throwOnError); // 0x00BC7F08-0x00BC7FBC
		public static Type GetType(string typeName, bool throwOnError, bool ignoreCase); // 0x00BC7D68-0x00BC7F08
		public static Type GetTypeFromHandle(RuntimeTypeHandle handle); // 0x00BC3438-0x00BC36F0
		private static Type internal_from_handle(IntPtr handle); // 0x00BC7FF0-0x00BC7FF4
	}

	[CLSCompliant] // 0x00394BFC-0x00394C3C
	[ComVisible] // 0x00394BFC-0x00394C3C
	public struct TypedReference // TypeDefIndex: 298
	{
		// Fields
		private RuntimeTypeHandle type; // 0x00
		private IntPtr Value; // 0x08
		private IntPtr Type; // 0x10
	
		// Properties
		internal bool IsNull { get; } // 0x00BCC548-0x00BCC58C 
	
		// Methods
		[CLSCompliant] // 0x0039D858-0x0039D86C
		public static TypedReference MakeTypedReference(object target, FieldInfo[] flds); // 0x00BCBEC0-0x00BCC3B0
		private static TypedReference MakeTypedReferenceInternal(object target, FieldInfo[] fields); // 0x00BCC3B0-0x00BCC468
		public override int GetHashCode(); // 0x00BCC468-0x00BCC4F8
		public override bool Equals(object o); // 0x00BCC4F8-0x00BCC548
		[CLSCompliant] // 0x0039D86C-0x0039D880
		public static void SetTypedReference(TypedReference target, object value); // 0x00BCC58C-0x00BCC6DC
	}

	[Serializable]
	[ComVisible] // 0x00394C3C-0x00394C50
	public sealed class TypeInitializationException : SystemException // TypeDefIndex: 299
	{
		// Fields
		private string _typeName; // 0x88
	
		// Properties
		public string TypeName { get; } // 0x00BC8610-0x00BC866C 
	
		// Constructors
		private TypeInitializationException(); // 0x00BC8404-0x00BC8478
		public TypeInitializationException(string fullTypeName, Exception innerException); // 0x00BC8478-0x00BC8574
		internal TypeInitializationException(SerializationInfo info, StreamingContext context); // 0x00BC8574-0x00BC8610
	
		// Methods
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00BC866C-0x00BC8780
	}

	[Serializable]
	[ComVisible] // 0x00394C50-0x00394C64
	public class TypeLoadException : SystemException, ISerializable // TypeDefIndex: 300
	{
		// Fields
		private string ClassName; // 0x88
		private string AssemblyName; // 0x90
		private string MessageArg; // 0x98
		internal int ResourceId; // 0xA0
	
		// Properties
		public override string Message { get; } // 0x00BC87F4-0x00BC8818 
	
		// Constructors
		public TypeLoadException(); // 0x00BC8780-0x00BC87F4
		public TypeLoadException(string message); // 0x00BC7FBC-0x00BC7FF0
		private TypeLoadException(string className, string assemblyName); // 0x00BC891C-0x00BC8928
		private TypeLoadException(string className, string assemblyName, string messageArg, int resourceId); // 0x00BC8928-0x00BC8994
		protected TypeLoadException(SerializationInfo info, StreamingContext context); // 0x00BC8994-0x00BC8AC0
	
		// Methods
		private void SetMessageField(); // 0x00BC8818-0x00BC891C
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00BC8AC0-0x00BC8C44
	}

	[Serializable]
	[CLSCompliant] // 0x00394C64-0x00394CA4
	[ComVisible] // 0x00394C64-0x00394CA4
	public struct UInt16 : IComparable, IFormattable, IConvertible, IComparable<ushort>, IEquatable<ushort> // TypeDefIndex: 301
	{
		// Fields
		private ushort m_value; // 0x00
		public const ushort MaxValue = 65535; // Metadata: 0x00203A2A
		public const ushort MinValue = 0; // Metadata: 0x00203A2C
	
		// Methods
		public int CompareTo(object value); // 0x00BCC6DC-0x00BCC6E4
		public int CompareTo(ushort value); // 0x00BCC6E4-0x00BCC778
		public override bool Equals(object obj); // 0x00BCC778-0x00BCC790
		public bool Equals(ushort obj); // 0x00BCC790-0x00BCC7A8
		public override int GetHashCode(); // 0x00BCC7A8-0x00BCC7B0
		public override string ToString(); // 0x00BCC7B0-0x00BCC81C
		public string ToString(IFormatProvider provider); // 0x00BCC81C-0x00BCC890
		public string ToString(string format, IFormatProvider provider); // 0x00BCC890-0x00BCC8CC
		[CLSCompliant] // 0x0039D880-0x0039D894
		public static ushort Parse(string s, IFormatProvider provider); // 0x00BCC8CC-0x00BCC900
		[CLSCompliant] // 0x0039D894-0x0039D8A8
		public static ushort Parse(string s, NumberStyles style, IFormatProvider provider); // 0x00BCCA78-0x00BCCAC8
		private static ushort Parse(string s, NumberStyles style, NumberFormatInfo info); // 0x00BCC900-0x00BCCA78
		public TypeCode GetTypeCode(); // 0x00BCCAC8-0x00BCCB3C
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x00BCCB3C-0x00BCCBB0
		char IConvertible.ToChar(IFormatProvider provider); // 0x00BCCBB0-0x00BCCC24
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x00BCCC24-0x00BCCC98
		byte IConvertible.ToByte(IFormatProvider provider); // 0x00BCCC98-0x00BCCD0C
		short IConvertible.ToInt16(IFormatProvider provider); // 0x00BCCD0C-0x00BCCD14
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x00BCCD14-0x00BCCD88
		int IConvertible.ToInt32(IFormatProvider provider); // 0x00BCCD88-0x00BCCDFC
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x00BCCDFC-0x00BCCE70
		long IConvertible.ToInt64(IFormatProvider provider); // 0x00BCCE70-0x00BCCEE4
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x00BCCEE4-0x00BCCF58
		float IConvertible.ToSingle(IFormatProvider provider); // 0x00BCCF58-0x00BCCFCC
		double IConvertible.ToDouble(IFormatProvider provider); // 0x00BCCFCC-0x00BCD040
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x00BCD040-0x00BCD148
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x00BCD148-0x00BCD204
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x00BCD204-0x00BCD2F8
	}

	[Serializable]
	[CLSCompliant] // 0x00394CA4-0x00394CE4
	[ComVisible] // 0x00394CA4-0x00394CE4
	public struct UInt32 : IComparable, IFormattable, IConvertible, IComparable<uint>, IEquatable<uint> // TypeDefIndex: 302
	{
		// Fields
		private uint m_value; // 0x00
		public const uint MaxValue = 4294967295; // Metadata: 0x00203A2E
		public const uint MinValue = 0; // Metadata: 0x00203A32
	
		// Methods
		public int CompareTo(object value); // 0x00BCD2F8-0x00BCD300
		public int CompareTo(uint value); // 0x00BCD300-0x00BCD39C
		public override bool Equals(object obj); // 0x00BCD39C-0x00BCD3A4
		public bool Equals(uint obj); // 0x00BCD3A4-0x00BCD3BC
		public override int GetHashCode(); // 0x00BCD3BC-0x00BCD3F8
		public override string ToString(); // 0x00BCD3F8-0x00BCD42C
		public string ToString(IFormatProvider provider); // 0x00BCD42C-0x00BCD4A0
		public string ToString(string format, IFormatProvider provider); // 0x00BCD4A0-0x00BCD4DC
		[CLSCompliant] // 0x0039D8A8-0x0039D8BC
		public static uint Parse(string s, IFormatProvider provider); // 0x00BCD4DC-0x00BCD514
		[CLSCompliant] // 0x0039D8BC-0x0039D8D0
		public static uint Parse(string s, NumberStyles style, IFormatProvider provider); // 0x00BCD514-0x00BCD568
		[CLSCompliant] // 0x0039D8D0-0x0039D8E4
		public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out uint result); // 0x00BCD568-0x00BCD5C4
		public TypeCode GetTypeCode(); // 0x00BCD5C4-0x00BCD638
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x00BCD638-0x00BCD6AC
		char IConvertible.ToChar(IFormatProvider provider); // 0x00BCD6AC-0x00BCD720
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x00BCD720-0x00BCD794
		byte IConvertible.ToByte(IFormatProvider provider); // 0x00BCD794-0x00BCD808
		short IConvertible.ToInt16(IFormatProvider provider); // 0x00BCD808-0x00BCD87C
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x00BCD87C-0x00BCD8F0
		int IConvertible.ToInt32(IFormatProvider provider); // 0x00BCD8F0-0x00BCD8F8
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x00BCD8F8-0x00BCD96C
		long IConvertible.ToInt64(IFormatProvider provider); // 0x00BCD96C-0x00BCD9E0
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x00BCD9E0-0x00BCDA54
		float IConvertible.ToSingle(IFormatProvider provider); // 0x00BCDA54-0x00BCDAC8
		double IConvertible.ToDouble(IFormatProvider provider); // 0x00BCDAC8-0x00BCDB3C
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x00BCDB3C-0x00BCDC44
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x00BCDC44-0x00BCDD00
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x00BCDD00-0x00BCDDF4
	}

	[Serializable]
	[CLSCompliant] // 0x00394CE4-0x00394D24
	[ComVisible] // 0x00394CE4-0x00394D24
	public struct UInt64 : IComparable, IFormattable, IConvertible, IComparable<ulong>, IEquatable<ulong> // TypeDefIndex: 303
	{
		// Fields
		private ulong m_value; // 0x00
		public const ulong MaxValue = 18446744073709551615; // Metadata: 0x00203A36
		public const ulong MinValue = 0; // Metadata: 0x00203A3E
	
		// Methods
		public int CompareTo(object value); // 0x00BCDDF4-0x00BCDE18
		public int CompareTo(ulong value); // 0x00BCDE18-0x00BCDEB4
		public override bool Equals(object obj); // 0x00BCDEB4-0x00BCDEBC
		public bool Equals(ulong obj); // 0x00BCDEBC-0x00BCDED8
		public override int GetHashCode(); // 0x00BCDED8-0x00BCDF18
		public override string ToString(); // 0x00BCDF18-0x00BCDF84
		public string ToString(IFormatProvider provider); // 0x00BCDF84-0x00BCDFF4
		public string ToString(string format); // 0x00BCDFF4-0x00BCE068
		public string ToString(string format, IFormatProvider provider); // 0x00BCE068-0x00BCE0A4
		[CLSCompliant] // 0x0039D8E4-0x0039D8F8
		public static ulong Parse(string s, IFormatProvider provider); // 0x00BCE0A4-0x00BCE0DC
		[CLSCompliant] // 0x0039D8F8-0x0039D90C
		public static ulong Parse(string s, NumberStyles style, IFormatProvider provider); // 0x00BCE0DC-0x00BCE130
		public TypeCode GetTypeCode(); // 0x00BCE130-0x00BCE1A4
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x00BCE1A4-0x00BCE218
		char IConvertible.ToChar(IFormatProvider provider); // 0x00BCE218-0x00BCE28C
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x00BCE28C-0x00BCE300
		byte IConvertible.ToByte(IFormatProvider provider); // 0x00BCE300-0x00BCE374
		short IConvertible.ToInt16(IFormatProvider provider); // 0x00BCE374-0x00BCE3E8
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x00BCE3E8-0x00BCE45C
		int IConvertible.ToInt32(IFormatProvider provider); // 0x00BCE45C-0x00BCE4D0
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x00BCE4D0-0x00BCE544
		long IConvertible.ToInt64(IFormatProvider provider); // 0x00BCE544-0x00BCE54C
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x00BCE54C-0x00BCE5C0
		float IConvertible.ToSingle(IFormatProvider provider); // 0x00BCE5C0-0x00BCE634
		double IConvertible.ToDouble(IFormatProvider provider); // 0x00BCE634-0x00BCE6A8
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x00BCE6A8-0x00BCE7B0
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x00BCE7B0-0x00BCE86C
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x00BCE86C-0x00BCE874
	}

	[Serializable]
	[ComVisible] // 0x00394D24-0x00394D38
	public class UnauthorizedAccessException : SystemException // TypeDefIndex: 304
	{
		// Constructors
		public UnauthorizedAccessException(); // 0x00BCEBFC-0x00BCEC70
		public UnauthorizedAccessException(string message); // 0x00BCEC70-0x00BCECA4
		protected UnauthorizedAccessException(SerializationInfo info, StreamingContext context); // 0x00BCECA4-0x00BCECAC
	}

	[Serializable]
	[ComVisible] // 0x00394D38-0x00394D4C
	public class UnhandledExceptionEventArgs : EventArgs // TypeDefIndex: 305
	{
		// Fields
		private object _Exception; // 0x10
		private bool _IsTerminating; // 0x18
	
		// Properties
		public object ExceptionObject { [ReliabilityContract] /* 0x0039D90C-0x0039D924 */ get; } // 0x00BCED34-0x00BCED3C 
		public bool IsTerminating { [ReliabilityContract] /* 0x0039D924-0x0039D93C */ get; } // 0x00BCED3C-0x00BCED44 
	
		// Constructors
		public UnhandledExceptionEventArgs(object exception, bool isTerminating); // 0x00BCECAC-0x00BCED34
	}

	[Serializable]
	[ComVisible] // 0x00394D4C-0x00394D60
	public delegate void UnhandledExceptionEventHandler(object sender, UnhandledExceptionEventArgs e); // TypeDefIndex: 306; 0x00BCED54-0x00BCF4D4

	[Serializable]
	internal class UnitySerializationHolder : ISerializable, IObjectReference // TypeDefIndex: 307
	{
		// Fields
		private Type[] m_instantiation; // 0x10
		private int[] m_elementTypes; // 0x18
		private int m_genericParameterPosition; // 0x20
		private Type m_declaringType; // 0x28
		private MethodBase m_declaringMethod; // 0x30
		private string m_data; // 0x38
		private string m_assemblyName; // 0x40
		private int m_unityType; // 0x48
	
		// Constructors
		internal UnitySerializationHolder(SerializationInfo info, StreamingContext context); // 0x00BD0090-0x00BD039C
	
		// Methods
		internal static void GetUnitySerializationInfo(SerializationInfo info, Missing missing); // 0x00BCF510-0x00BCF5D8
		internal static RuntimeType AddElementTypes(SerializationInfo info, RuntimeType type); // 0x00BCF5D8-0x00BCF8B4
		internal Type MakeElementTypes(Type type); // 0x00BCF8B4-0x00BCFACC
		internal static void GetUnitySerializationInfo(SerializationInfo info, RuntimeType type); // 0x00BCFACC-0x00BCFEE4
		internal static void GetUnitySerializationInfo(SerializationInfo info, int unityType, string data, RuntimeAssembly assembly); // 0x00BCFEE4-0x00BD0090
		private void ThrowInsufficientInformation(string field); // 0x00BD039C-0x00BD0468
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00BD0468-0x00BD04F0
		public virtual object GetRealObject(StreamingContext context); // 0x00BD04F0-0x00BD0A68
	}

	internal struct UnSafeCharBuffer // TypeDefIndex: 308
	{
		// Fields
		private unsafe char* m_buffer; // 0x00
		private int m_totalSize; // 0x08
		private int m_length; // 0x0C
	
		// Constructors
		public unsafe UnSafeCharBuffer(char* buffer, int bufferSize); // 0x00BCEAAC-0x00BCEBF4
	
		// Methods
		public void AppendString(string stringToAppend); // 0x00BCEBF4-0x00BCEBFC
	}

	[Serializable]
	[ComVisible] // 0x00394D60-0x00394D74
	public sealed class Version : ICloneable, IComparable, IComparable<System.Version>, IEquatable<System.Version> // TypeDefIndex: 309
	{
		// Fields
		private int _Major; // 0x10
		private int _Minor; // 0x14
		private int _Build; // 0x18
		private int _Revision; // 0x1C
		private static readonly char[] SeparatorsArray; // 0x00
		private const int ZERO_CHAR_VALUE = 48; // Metadata: 0x00203A46
	
		// Properties
		public int Major { get; } // 0x00BD1960-0x00BD1968 
		public int Minor { get; } // 0x00BD1968-0x00BD1970 
		public int Build { get; } // 0x00BD1970-0x00BD1978 
		public int Revision { get; } // 0x00BD1978-0x00BD1980 
	
		// Nested types
		internal enum ParseFailureKind // TypeDefIndex: 310
		{
			ArgumentNullException = 0,
			ArgumentException = 1,
			ArgumentOutOfRangeException = 2,
			FormatException = 3
		}
	
		internal struct VersionResult // TypeDefIndex: 311
		{
			// Fields
			internal Version m_parsedVersion; // 0x00
			internal ParseFailureKind m_failure; // 0x08
			internal string m_exceptionArgument; // 0x10
			internal string m_argumentName; // 0x18
			internal bool m_canThrow; // 0x20
	
			// Methods
			internal void Init(string argumentName, bool canThrow); // 0x00BD2B98-0x00BD2BA8
			internal void SetFailure(ParseFailureKind failure); // 0x00BD2BA8-0x00BD2BB0
			internal void SetFailure(ParseFailureKind failure, string argument); // 0x00BD2BB0-0x00BD2BB8
			internal Exception GetVersionParseException(); // 0x00BD2BB8-0x00BD2BC0
		}
	
		// Constructors
		public Version(int major, int minor, int build, int revision); // 0x00BD1364-0x00BD14FC
		public Version(int major, int minor, int build); // 0x00BD14FC-0x00BD1654
		public Version(int major, int minor); // 0x00BD1654-0x00BD1760
		public Version(string version); // 0x00BD1760-0x00BD1854
		public Version(); // 0x00BD1980-0x00BD19B0
		static Version(); // 0x00BD2ABC-0x00BD2B98
	
		// Methods
		public object Clone(); // 0x00BD19B0-0x00BD1A84
		public int CompareTo(object version); // 0x00BD1A84-0x00BD1BC4
		public int CompareTo(Version value); // 0x00BD1BD8-0x00BD1CB8
		public override bool Equals(object obj); // 0x00BD1CB8-0x00BD1D94
		public bool Equals(Version obj); // 0x00BD1D94-0x00BD1E64
		public override int GetHashCode(); // 0x00BD1E64-0x00BD1E80
		public override string ToString(); // 0x00BD1E80-0x00BD1EA8
		public string ToString(int fieldCount); // 0x00BD1EA8-0x00BD22F4
		private static void AppendPositiveNumber(int num, StringBuilder sb); // 0x00BD22F4-0x00BD2394
		public static Version Parse(string input); // 0x00BD1854-0x00BD1960
		private static bool TryParseVersion(string version, ref VersionResult result); // 0x00BD2394-0x00BD28D4
		private static bool TryParseComponent(string component, string componentName, ref VersionResult result, out int parsedComponent); // 0x00BD28D4-0x00BD2A28
		public static bool operator ==(Version v1, Version v2); // 0x00BD1BC4-0x00BD1BD8
		public static bool operator !=(Version v1, Version v2); // 0x00BD2A28-0x00BD2ABC
	}

	[ClassInterface] // 0x00394D74-0x00394DB4
	[ComVisible] // 0x00394D74-0x00394DB4
	public sealed class AppDomain : MarshalByRefObject, IEvidenceFactory, _AppDomain // TypeDefIndex: 312
	{
		// Fields
		private IntPtr _mono_app_domain; // 0x18
		private static string _process_guid; // 0x00
		[ThreadStatic] // 0x0039B9B8-0x0039B9C8
		private static Dictionary<string, object> type_resolve_in_progress; // 0x80000000
		[ThreadStatic] // 0x0039B9C8-0x0039B9D8
		private static Dictionary<string, object> assembly_resolve_in_progress; // 0x80000008
		[ThreadStatic] // 0x0039B9D8-0x0039B9E8
		private static Dictionary<string, object> assembly_resolve_in_progress_refonly; // 0x80000010
		private object _evidence; // 0x20
		private object _granted; // 0x28
		private int _principalPolicy; // 0x30
		[ThreadStatic] // 0x0039B9E8-0x0039B9F8
		private static object _principal; // 0x80000018
		private static AppDomain default_domain; // 0x08
		[CompilerGenerated] // 0x0039B9F8-0x0039BA08
		private AssemblyLoadEventHandler AssemblyLoad; // 0x38
		[CompilerGenerated] // 0x0039BA08-0x0039BA18
		private ResolveEventHandler AssemblyResolve; // 0x40
		[CompilerGenerated] // 0x0039BA18-0x0039BA28
		private EventHandler DomainUnload; // 0x48
		[CompilerGenerated] // 0x0039BA28-0x0039BA38
		private EventHandler ProcessExit; // 0x50
		[CompilerGenerated] // 0x0039BA38-0x0039BA48
		private ResolveEventHandler ResourceResolve; // 0x58
		[CompilerGenerated] // 0x0039BA48-0x0039BA58
		private ResolveEventHandler TypeResolve; // 0x60
		[CompilerGenerated] // 0x0039BA58-0x0039BA68
		private UnhandledExceptionEventHandler UnhandledException; // 0x68
		[CompilerGenerated] // 0x0039BA68-0x0039BA78
		private EventHandler<FirstChanceExceptionEventArgs> FirstChanceException; // 0x70
		private object _domain_manager; // 0x78
		[CompilerGenerated] // 0x0039BA78-0x0039BA88
		private ResolveEventHandler ReflectionOnlyAssemblyResolve; // 0x80
		private object _activation; // 0x88
		private object _applicationIdentity; // 0x90
		private List<string> compatibility_switch; // 0x98
	
		// Properties
		public static AppDomain CurrentDomain { get; } // 0x006E4978-0x006E497C 
	
		// Events
		public event EventHandler DomainUnload {
			add; // 0x006E5848-0x006E5934
			remove; // 0x006E5934-0x006E5A20
		}
		public event UnhandledExceptionEventHandler UnhandledException {
			add; // 0x006E5A20-0x006E5B0C
			remove; // 0x006E5B0C-0x006E5BF8
		}
	
		// Constructors
		private AppDomain(); // 0x006E4968-0x006E4970
	
		// Methods
		private string getFriendlyName(); // 0x006E4970-0x006E4974
		private static AppDomain getCurDomain(); // 0x006E4974-0x006E4978
		private Assembly[] GetAssemblies(bool refOnly); // 0x006E497C-0x006E4984
		public Assembly[] GetAssemblies(); // 0x006E4984-0x006E498C
		public object GetData(string name); // 0x006E498C-0x006E4990
		public override object InitializeLifetimeService(); // 0x006E4990-0x006E4998
		internal Assembly LoadAssembly(string assemblyRef, Evidence securityEvidence, bool refOnly); // 0x006E4998-0x006E49A0
		public Assembly Load(string assemblyString); // 0x006E49A0-0x006E49AC
		internal Assembly Load(string assemblyString, Evidence assemblySecurity, bool refonly); // 0x006E49AC-0x006E4AEC
		private static AppDomain InternalSetDomainByID(int domain_id); // 0x006E4AEC-0x006E4AF0
		private static AppDomain InternalSetDomain(AppDomain context); // 0x006E4AF0-0x006E4AF4
		internal static void InternalPushDomainRefByID(int domain_id); // 0x006E4AF4-0x006E4AF8
		internal static void InternalPopDomainRef(); // 0x006E4AF8-0x006E4AFC
		internal static Context InternalSetContext(Context context); // 0x006E4AFC-0x006E4B00
		internal static Context InternalGetContext(); // 0x006E4B00-0x006E4B04
		internal static Context InternalGetDefaultContext(); // 0x006E4B04-0x006E4B08
		internal static string InternalGetProcessGuid(string newguid); // 0x006E4B08-0x006E4B0C
		internal static object InvokeInDomainByID(int domain_id, MethodInfo method, object obj, object[] args); // 0x006E4B0C-0x006E4D58
		internal static string GetProcessGuid(); // 0x006E4D58-0x006E4E0C
		private static bool InternalIsFinalizingForUnload(int domain_id); // 0x006E4E0C-0x006E4E10
		public bool IsFinalizingForUnload(); // 0x006E4E10-0x006E4E28
		private int getDomainID(); // 0x006E4E28-0x006E4E30
		public override string ToString(); // 0x006E4E30-0x006E4E34
		private void DoAssemblyLoad(Assembly assembly); // 0x006E4E34-0x006E4EC8
		private Assembly DoAssemblyResolve(string name, Assembly requestingAssembly, bool refonly); // 0x006E4EC8-0x006E5268
		internal Assembly DoTypeResolve(object name_or_tb); // 0x006E5268-0x006E5618
		private void DoDomainUnload(); // 0x006E5618-0x006E5638
		internal byte[] GetMarshalledDomainObjRef(); // 0x006E5638-0x006E5718
		internal void ProcessMessageInDomain(byte[] arrRequest, CADMethodCallMessage cadMsg, out byte[] arrResponse, out CADMethodReturnMessage cadMrm); // 0x006E5718-0x006E5848
	}

	[FriendAccessAllowed] // 0x00394DB4-0x00394DC4
	internal class CLRConfig // TypeDefIndex: 313
	{
		// Methods
		internal static bool CheckThrowUnobservedTaskExceptions(); // 0x0092EE04-0x0092EE08
	}

	internal static class CompatibilitySwitches // TypeDefIndex: 314
	{
		// Fields
		public static readonly bool IsAppEarlierThanSilverlight4; // 0x00
		public static readonly bool IsAppEarlierThanWindowsPhone8; // 0x01
	
		// Constructors
		static CompatibilitySwitches(); // 0x0054B120-0x0054B124
	}

	[ComVisible] // 0x00394DC4-0x00394DD8
	public static class Environment // TypeDefIndex: 315
	{
		// Fields
		private const int mono_corlib_version = 1051100001; // Metadata: 0x00203A5A
		private static string nl; // 0x00
		private static OperatingSystem os; // 0x08
	
		// Properties
		public static int CurrentManagedThreadId { get; } // 0x00757568-0x0075759C 
		public static bool HasShutdownStarted { get; } // 0x0075759C-0x007575A0 
		public static string NewLine { get; } // 0x007500AC-0x0075011C 
		private static PlatformID Platform { get; } // 0x007575A4-0x007575A8 
		public static OperatingSystem OSVersion { get; } // 0x007575AC-0x00757660 
		public static string StackTrace { get; } // 0x007578A0-0x00757914 
		public static int TickCount { get; } // 0x00757914-0x00757918 
		public static bool Is64BitProcess { get; } // 0x007587B0-0x007587D0 
		public static int ProcessorCount { get; } // 0x007587D0-0x007587D4 
		internal static bool IsRunningOnWindows { get; } // 0x00757C38-0x00757C54 
	
		// Nested types
		[ComVisible] // 0x00394DD8-0x00394DEC
		public enum SpecialFolder // TypeDefIndex: 316
		{
			Desktop = 0,
			Programs = 2,
			MyDocuments = 5,
			Personal = 5,
			Favorites = 6,
			Startup = 7,
			Recent = 8,
			SendTo = 9,
			StartMenu = 11,
			MyMusic = 13,
			MyVideos = 14,
			DesktopDirectory = 16,
			MyComputer = 17,
			NetworkShortcuts = 19,
			Fonts = 20,
			Templates = 21,
			CommonStartMenu = 22,
			CommonPrograms = 23,
			CommonStartup = 24,
			CommonDesktopDirectory = 25,
			ApplicationData = 26,
			PrinterShortcuts = 27,
			LocalApplicationData = 28,
			InternetCache = 32,
			Cookies = 33,
			History = 34,
			CommonApplicationData = 35,
			Windows = 36,
			System = 37,
			ProgramFiles = 38,
			MyPictures = 39,
			UserProfile = 40,
			SystemX86 = 41,
			ProgramFilesX86 = 42,
			CommonProgramFiles = 43,
			CommonProgramFilesX86 = 44,
			CommonTemplates = 45,
			CommonDocuments = 46,
			CommonAdminTools = 47,
			AdminTools = 48,
			CommonMusic = 53,
			CommonPictures = 54,
			CommonVideos = 55,
			Resources = 56,
			LocalizedResources = 57,
			CommonOemLinks = 58,
			CDBurning = 59
		}
	
		public enum SpecialFolderOption // TypeDefIndex: 317
		{
			None = 0,
			DoNotVerify = 16384,
			Create = 32768
		}
	
		// Methods
		internal static string GetResourceString(string key); // 0x0074272C-0x00742730
		internal static string GetResourceString(string key, params /* 0x0039F9C8-0x0039F9D8 */ object[] values); // 0x007444B4-0x00744534
		internal static string GetResourceStringEncodingName(int codePage); // 0x00757428-0x00757568
		private static string GetNewLine(); // 0x007575A0-0x007575A4
		internal static string GetOSVersionString(); // 0x007575A8-0x007575AC
		internal static System.Version CreateVersionFromString(string info); // 0x00757660-0x007578A0
		public static void Exit(int exitCode); // 0x00757918-0x0075791C
		public static string ExpandEnvironmentVariables(string name); // 0x0075791C-0x00757C34
		internal static string internalGetEnvironmentVariable_native(IntPtr variable); // 0x00757D88-0x00757D8C
		internal static string internalGetEnvironmentVariable(string variable); // 0x00757D8C-0x00757E28
		public static string GetEnvironmentVariable(string variable); // 0x00757C34-0x00757C38
		private static Hashtable GetEnvironmentVariablesNoCase(); // 0x00757C54-0x00757D88
		public static string GetFolderPath(SpecialFolder folder); // 0x00757E2C-0x00757E34
		private static string GetWindowsFolderPath(int folder); // 0x00757E78-0x00757E7C
		public static string GetFolderPath(SpecialFolder folder, SpecialFolderOption option); // 0x00757E34-0x00757E78
		private static string ReadXdgUserDir(string config_dir, string home_dir, string key, string fallback); // 0x0075829C-0x00758704
		internal static string UnixGetFolderPath(SpecialFolder folder, SpecialFolderOption option); // 0x00757E7C-0x0075829C
		public static void FailFast(string message, Exception exception); // 0x00758708-0x00758780
		private static string[] GetEnvironmentVariableNames(); // 0x00757E28-0x00757E2C
		internal static string GetMachineConfigPath(); // 0x007587D4-0x007587D8
		internal static string internalGetHome(); // 0x00758704-0x00758708
		internal static int GetPageSize(); // 0x007587D8-0x007587DC
		internal static string GetStackTrace(Exception e, bool needFileInfo); // 0x007587DC-0x00758880
	}

	internal static class ParseNumbers // TypeDefIndex: 318
	{
		// Methods
		public static int StringToInt(string value, int fromBase, int flags); // 0x00908E5C-0x00908E64
		public static unsafe int StringToInt(string value, int fromBase, int flags, int* parsePos); // 0x00908E64-0x0090928C
		public static unsafe long StringToLong(string value, int fromBase, int flags, int* parsePos); // 0x0090928C-0x009096E4
		public static string IntToString(int value, int toBase, int width, char paddingChar, int flags); // 0x009096E4-0x00909938
		private static void EndianSwap(ref byte[] value); // 0x00909E80-0x00909FF8
		private static StringBuilder ConvertToBase2(byte[] value); // 0x00909938-0x00909A9C
		private static StringBuilder ConvertToBase8(byte[] value); // 0x00909A9C-0x00909C90
		private static StringBuilder ConvertToBase16(byte[] value); // 0x00909C90-0x00909E80
	}

	internal class MonoTypeInfo // TypeDefIndex: 319
	{
		// Fields
		public string full_name; // 0x10
		public MonoCMethod default_ctor; // 0x18
	
		// Constructors
		public MonoTypeInfo(); // 0x004EC6E0-0x004EC734
	}

	internal sealed class TypeNameParser // TypeDefIndex: 320
	{
		// Methods
		internal static Type GetType(string typeName, Func<AssemblyName, Assembly> assemblyResolver, Func<Assembly, string, bool, Type> typeResolver, bool throwOnError, bool ignoreCase, ref StackCrawlMark stackMark); // 0x00BC43A4-0x00BC4400
	}

	[Serializable]
	[ClassInterface] // 0x00394DEC-0x00394E2C
	[ComVisible] // 0x00394DEC-0x00394E2C
	public sealed class AppDomainSetup : IAppDomainSetup // TypeDefIndex: 321
	{
		// Fields
		private string application_base; // 0x10
		private string application_name; // 0x18
		private string cache_path; // 0x20
		private string configuration_file; // 0x28
		private string dynamic_base; // 0x30
		private string license_file; // 0x38
		private string private_bin_path; // 0x40
		private string private_bin_path_probe; // 0x48
		private string shadow_copy_directories; // 0x50
		private string shadow_copy_files; // 0x58
		private bool publisher_policy; // 0x60
		private bool path_changed; // 0x61
		private int loader_optimization; // 0x64
		private bool disallow_binding_redirects; // 0x68
		private bool disallow_code_downloads; // 0x69
		private object _activationArguments; // 0x70
		private object domain_initializer; // 0x78
		private object application_trust; // 0x80
		private string[] domain_initializer_args; // 0x88
		private bool disallow_appbase_probe; // 0x90
		private byte[] configuration_bytes; // 0x98
		private byte[] serialized_non_primitives; // 0xA0
		[CompilerGenerated] // 0x0039BA88-0x0039BA98
		private string <TargetFrameworkName>k__BackingField; // 0xA8
	
		// Constructors
		public AppDomainSetup(); // 0x0091F44C-0x0091F454
	}

	public struct ArgIterator // TypeDefIndex: 322
	{
		// Fields
		private IntPtr sig; // 0x00
		private IntPtr args; // 0x08
		private int next_arg; // 0x10
		private int num_args; // 0x14
	
		// Methods
		public override bool Equals(object o); // 0x0091F7A4-0x0091F7B0
		public override int GetHashCode(); // 0x0091F7B0-0x0091F7BC
	}

	[ComVisible] // 0x00394E2C-0x00394E40
	public class AssemblyLoadEventArgs : EventArgs // TypeDefIndex: 323
	{
		// Fields
		private Assembly m_loadedAssembly; // 0x10
	
		// Constructors
		public AssemblyLoadEventArgs(Assembly loadedAssembly); // 0x00927650-0x009276CC
	}

	[Serializable]
	[ComVisible] // 0x00394E40-0x00394E54
	public delegate void AssemblyLoadEventHandler(object sender, AssemblyLoadEventArgs args); // TypeDefIndex: 324; 0x009276DC-0x00927E5C

	public static class Console // TypeDefIndex: 325
	{
		// Fields
		internal static TextWriter stdout; // 0x00
		private static TextWriter stderr; // 0x08
		private static TextReader stdin; // 0x10
		private static Encoding inputEncoding; // 0x18
		private static Encoding outputEncoding; // 0x20
		private static ConsoleCancelEventHandler cancel_event; // 0x28
		private static readonly InternalCancelHandler cancel_handler; // 0x30
	
		// Properties
		public static TextWriter Error { get; } // 0x0054BAF0-0x0054BB58 
		public static Encoding InputEncoding { get; } // 0x0054BD38-0x0054BDA0 
		public static Encoding OutputEncoding { get; } // 0x0054BDA0-0x0054BE08 
	
		// Nested types
		private class WindowsConsole // TypeDefIndex: 326
		{
			// Fields
			public static bool ctrlHandlerAdded; // 0x00
			private static WindowsCancelHandler cancelHandler; // 0x08
	
			// Nested types
			private delegate bool WindowsCancelHandler(int keyCode); // TypeDefIndex: 327; 0x0054E0A0-0x0054E4F8
	
			// Constructors
			static WindowsConsole(); // 0x0054CFE4-0x0054E068
	
			// Methods
			private static extern int GetConsoleCP(); // 0x0054CE58-0x0054CEE4
			private static extern int GetConsoleOutputCP(); // 0x0054CEE4-0x0054CF74
			private static bool DoWindowsConsoleCancelEvent(int keyCode); // 0x0054CF74-0x0054CFE4
			public static int GetInputCodePage(); // 0x0054B340-0x0054B39C
			public static int GetOutputCodePage(); // 0x0054B39C-0x0054B3F8
		}
	
		private delegate void InternalCancelHandler(); // TypeDefIndex: 328; 0x0054CA18-0x0054CE18
	
		// Constructors
		static Console(); // 0x0054B124-0x0054B330
	
		// Methods
		private static void SetupStreams(Encoding inputEncoding, Encoding outputEncoding); // 0x0054B3F8-0x0054B7AC
		private static Stream Open(IntPtr handle, FileAccess access, int bufferSize); // 0x0054BB58-0x0054BC84
		public static Stream OpenStandardError(int bufferSize); // 0x0054BA54-0x0054BAF0
		public static Stream OpenStandardInput(int bufferSize); // 0x0054B91C-0x0054B9B8
		public static Stream OpenStandardOutput(int bufferSize); // 0x0054B9B8-0x0054BA54
		public static void SetOut(TextWriter newOut); // 0x0054BC84-0x0054BD38
		public static ConsoleKeyInfo ReadKey(); // 0x0054BE08-0x0054BE70
		public static ConsoleKeyInfo ReadKey(bool intercept); // 0x0054BE70-0x0054BEDC
		internal static void DoConsoleCancelEvent(); // 0x0054BFC4-0x0054C204
	}

	internal static class ConsoleDriver // TypeDefIndex: 329
	{
		// Fields
		internal static IConsoleDriver driver; // 0x00
		private static bool is_console; // 0x08
		private static bool called_isatty; // 0x09
	
		// Properties
		public static bool IsConsole { get; } // 0x0054B7AC-0x0054B91C 
	
		// Constructors
		static ConsoleDriver(); // 0x0054E60C-0x0054E6CC
	
		// Methods
		private static IConsoleDriver CreateNullConsoleDriver(); // 0x0054E6CC-0x0054E728
		private static IConsoleDriver CreateWindowsConsoleDriver(); // 0x0054E728-0x0054E784
		private static IConsoleDriver CreateTermInfoDriver(string term); // 0x0054E784-0x0054E7E8
		public static ConsoleKeyInfo ReadKey(bool intercept); // 0x0054BEDC-0x0054BFC4
		private static bool Isatty(IntPtr handle); // 0x0054E7E8-0x0054E7EC
		internal static int InternalKeyAvailable(int ms_timeout); // 0x0054E7EC-0x0054E7F0
		internal static unsafe bool TtySetup(string keypadXmit, string teardown, out byte[] control_characters, out int* address); // 0x0054E7F0-0x0054E7F4
		internal static bool SetEcho(bool wantEcho); // 0x0054E7F4-0x0054E93C
	}

	internal sealed class DelegateData // TypeDefIndex: 330
	{
		// Fields
		public Type target_type; // 0x10
		public string method_name; // 0x18
		public bool curried_first_arg; // 0x20
	
		// Constructors
		public DelegateData(); // 0x0074CEA4-0x0074CEAC
	}

	[Serializable]
	[ClassInterface] // 0x00394E54-0x00394E94
	[ComVisible] // 0x00394E54-0x00394E94
	public abstract class Delegate : ICloneable, ISerializable // TypeDefIndex: 331
	{
		// Fields
		private IntPtr method_ptr; // 0x10
		private IntPtr invoke_impl; // 0x18
		private object m_target; // 0x20
		private IntPtr method; // 0x28
		private IntPtr delegate_trampoline; // 0x30
		private IntPtr extra_arg; // 0x38
		private IntPtr method_code; // 0x40
		private MethodInfo method_info; // 0x48
		private MethodInfo original_method_info; // 0x50
		private DelegateData data; // 0x58
		private bool method_is_virtual; // 0x60
	
		// Properties
		public MethodInfo Method { get; } // 0x0074BF44-0x0074BF50 
		public object Target { get; } // 0x0074BF54-0x0074BF5C 
	
		// Methods
		private MethodInfo GetVirtualMethod_internal(); // 0x0074BF50-0x0074BF54
		internal static Delegate CreateDelegate_internal(Type type, object target, MethodInfo info, bool throwOnBindFailure); // 0x0074BF5C-0x0074BF64
		private static bool arg_type_match(Type delArgType, Type argType); // 0x0074BF64-0x0074C13C
		private static bool arg_type_match_this(Type delArgType, Type argType, bool boxedThis); // 0x0074C210-0x0074C3B0
		private static bool return_type_match(Type delReturnType, Type returnType); // 0x0074C3B0-0x0074C484
		public static Delegate CreateDelegate(Type type, object firstArgument, MethodInfo method, bool throwOnBindFailure); // 0x0074C484-0x0074C490
		private static Delegate CreateDelegate(Type type, object firstArgument, MethodInfo method, bool throwOnBindFailure, bool allowClosed); // 0x0074C490-0x0074CEA4
		public static Delegate CreateDelegate(Type type, object firstArgument, MethodInfo method); // 0x0074CEAC-0x0074CEB8
		public static Delegate CreateDelegate(Type type, MethodInfo method, bool throwOnBindFailure); // 0x0074CEB8-0x0074CED0
		public static Delegate CreateDelegate(Type type, MethodInfo method); // 0x0074CED0-0x0074CEE8
		public static Delegate CreateDelegate(Type type, object target, string method); // 0x0074CEE8-0x0074CEF4
		private static MethodInfo GetCandidateMethod(Type type, Type target, string method, BindingFlags bflags, bool ignoreCase, bool throwOnBindFailure); // 0x0074CF00-0x0074D36C
		public static Delegate CreateDelegate(Type type, Type target, string method, bool ignoreCase, bool throwOnBindFailure); // 0x0074D36C-0x0074D494
		public static Delegate CreateDelegate(Type type, Type target, string method); // 0x0074D494-0x0074D4A0
		public static Delegate CreateDelegate(Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure); // 0x0074D4A0-0x0074D5A4
		public static Delegate CreateDelegate(Type type, object target, string method, bool ignoreCase); // 0x0074CEF4-0x0074CF00
		public object DynamicInvoke(params /* 0x0039F9D8-0x0039F9E8 */ object[] args); // 0x0074D5A4-0x0074D5B0
		private void InitializeDelegateData(); // 0x0074D5B0-0x0074D6D8
		protected virtual object DynamicInvokeImpl(object[] args); // 0x0074D6D8-0x0074DAC0
		public virtual object Clone(); // 0x0074DAC0-0x0074DAC8
		public override bool Equals(object obj); // 0x0074DAC8-0x0074DCA8
		public override int GetHashCode(); // 0x0074DCA8-0x0074DD30
		protected virtual MethodInfo GetMethodImpl(); // 0x0074DD30-0x0074DE5C
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0074DE5C-0x0074DE60
		public virtual Delegate[] GetInvocationList(); // 0x0074E0C8-0x0074E178
		public static Delegate Combine(Delegate a, Delegate b); // 0x0074E178-0x0074E38C
		[ComVisible] // 0x0039D97C-0x0039D990
		public static Delegate Combine(params /* 0x0039F9E8-0x0039F9F8 */ Delegate[] delegates); // 0x0074E38C-0x0074E414
		protected virtual Delegate CombineImpl(Delegate d); // 0x0074E414-0x0074E494
		public static Delegate Remove(Delegate source, Delegate value); // 0x0074E494-0x0074E6A4
		protected virtual Delegate RemoveImpl(Delegate d); // 0x0074E6A4-0x0074E6D4
		internal static Delegate CreateDelegateNoSecurityCheck(RuntimeType type, object firstArgument, MethodInfo method); // 0x0074E6D4-0x0074E6DC
		internal static MulticastDelegate AllocDelegateLike_internal(Delegate d); // 0x0074E6DC-0x0074E6E0
	}

	[Serializable]
	internal class DelegateSerializationHolder : ISerializable, IObjectReference // TypeDefIndex: 332
	{
		// Fields
		private Delegate _delegate; // 0x10
	
		// Nested types
		[Serializable]
		private class DelegateEntry // TypeDefIndex: 333
		{
			// Fields
			private string type; // 0x10
			private string assembly; // 0x18
			private object target; // 0x20
			private string targetTypeAssembly; // 0x28
			private string targetTypeName; // 0x30
			private string methodName; // 0x38
			public DelegateEntry delegateEntry; // 0x40
	
			// Constructors
			public DelegateEntry(Delegate del, string targetLabel); // 0x0074EC34-0x0074EDF4
	
			// Methods
			public Delegate DeserializeDelegate(SerializationInfo info, int index); // 0x0074E944-0x0074EC34
		}
	
		// Constructors
		private DelegateSerializationHolder(SerializationInfo info, StreamingContext ctx); // 0x0074E6E0-0x0074E944
	
		// Methods
		public static void GetDelegateData(Delegate instance, SerializationInfo info, StreamingContext ctx); // 0x0074DE60-0x0074E0C8
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0074EDF4-0x0074EE5C
		public object GetRealObject(StreamingContext context); // 0x0074EE5C-0x0074EE64
	}

	internal static class EmptyArray<T> // TypeDefIndex: 334
	{
		// Fields
		public static readonly T[] Value;
	
		// Constructors
		static EmptyArray();
	}

	internal enum SByteEnum : sbyte // TypeDefIndex: 335
	{
	
	}

	internal enum Int16Enum : short // TypeDefIndex: 336
	{
	
	}

	internal enum Int32Enum // TypeDefIndex: 337
	{
	
	}

	internal enum Int64Enum : long // TypeDefIndex: 338
	{
	
	}

	internal enum ByteEnum : byte // TypeDefIndex: 339
	{
	
	}

	internal enum UInt16Enum : ushort // TypeDefIndex: 340
	{
	
	}

	internal enum UInt32Enum : uint // TypeDefIndex: 341
	{
	
	}

	internal enum UInt64Enum : ulong // TypeDefIndex: 342
	{
	
	}

	internal interface IConsoleDriver // TypeDefIndex: 343
	{
		// Methods
		ConsoleKeyInfo ReadKey(bool intercept);
	}

	[Serializable]
	[ComVisible] // 0x00394E94-0x00394EA8
	public struct IntPtr : ISerializable // TypeDefIndex: 344
	{
		// Fields
		private unsafe void* m_value; // 0x00
		public static readonly IntPtr Zero; // 0x00
	
		// Properties
		public static int Size { [ReliabilityContract] /* 0x0039DA04-0x0039DA1C */ get; } // 0x004E6C34-0x004E6CF0 
	
		// Constructors
		[ReliabilityContract] // 0x0039D990-0x0039D9A8
		public unsafe IntPtr(int value); // 0x004E6B8C-0x004E6BA0
		[ReliabilityContract] // 0x0039D9A8-0x0039D9C0
		public unsafe IntPtr(long value); // 0x004E6BA0-0x004E6BB0
		[CLSCompliant] // 0x0039D9C0-0x0039DA04
		[ReliabilityContract] // 0x0039D9C0-0x0039DA04
		public unsafe IntPtr(void* value); // 0x004E6BB0-0x004E6C2C
		private unsafe IntPtr(SerializationInfo info, StreamingContext context); // 0x004E6C2C-0x004E6C34
	
		// Methods
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x004E6CF0-0x004E6D80
		public override bool Equals(object obj); // 0x004E6D80-0x004E6D90
		public override int GetHashCode(); // 0x004E6D90-0x004E6DA0
		[ReliabilityContract] // 0x0039DA1C-0x0039DA34
		public int ToInt32(); // 0x004E6DA0-0x004E6DA8
		[ReliabilityContract] // 0x0039DA34-0x0039DA4C
		public long ToInt64(); // 0x004E6DA8-0x004E6DB8
		[CLSCompliant] // 0x0039DA4C-0x0039DA90
		[ReliabilityContract] // 0x0039DA4C-0x0039DA90
		public unsafe void* ToPointer(); // 0x004E6DB8-0x004E6DC0
		public override string ToString(); // 0x004E6DC0-0x004E6DF4
		public string ToString(string format); // 0x004E6DF4-0x004E6E2C
		[ReliabilityContract] // 0x0039DA90-0x0039DAA8
		public static bool operator ==(IntPtr value1, IntPtr value2); // 0x004E6E2C-0x004E6E38
		[ReliabilityContract] // 0x0039DAA8-0x0039DAC0
		public static bool operator !=(IntPtr value1, IntPtr value2); // 0x004E6E38-0x004E6E44
		[ReliabilityContract] // 0x0039DAC0-0x0039DAD8
		public static explicit operator IntPtr(int value); // 0x004E6E44-0x004E6E4C
		[ReliabilityContract] // 0x0039DAD8-0x0039DAF0
		public static explicit operator IntPtr(long value); // 0x004E6E4C-0x004E6E50
		[CLSCompliant] // 0x0039DAF0-0x0039DB34
		[ReliabilityContract] // 0x0039DAF0-0x0039DB34
		public static unsafe explicit operator IntPtr(void* value); // 0x004E6E50-0x004E6E54
		public static explicit operator int(IntPtr value); // 0x004E6E54-0x004E6E58
		[CLSCompliant] // 0x0039DB34-0x0039DB48
		public static unsafe explicit operator void*(IntPtr value); // 0x004E6E58-0x004E6E6C
		[ReliabilityContract] // 0x0039DB48-0x0039DB60
		internal bool IsNull(); // 0x004E6E6C-0x004E6E7C
	}

	internal static class KnownTerminals // TypeDefIndex: 345
	{
		// Properties
		public static byte[] linux { get; } // 0x004E7248-0x004E72B4 
		public static byte[] xterm { get; } // 0x004E72B4-0x004E7320 
		public static byte[] ansi { get; } // 0x004E7320-0x004E738C 
	}

	[Serializable]
	[ComVisible] // 0x00394EA8-0x00394EBC
	public abstract class MarshalByRefObject // TypeDefIndex: 346
	{
		// Fields
		[NonSerialized]
		private object _identity; // 0x10
	
		// Properties
		internal ServerIdentity ObjectIdentity { get; set; } // 0x004E887C-0x004E88E0 0x004E8954-0x004E89B8
	
		// Constructors
		protected MarshalByRefObject(); // 0x004D8F48-0x004D8F50
	
		// Methods
		public virtual ObjRef CreateObjRef(Type requestedType); // 0x004E89B8-0x004E8A1C
		public virtual object InitializeLifetimeService(); // 0x004E8A1C-0x004E8A80
	}

	internal class MonoAsyncCall // TypeDefIndex: 347
	{
		// Fields
		private object msg; // 0x10
		private IntPtr cb_method; // 0x18
		private object cb_target; // 0x20
		private object state; // 0x28
		private object res; // 0x30
		private object out_args; // 0x38
	
		// Constructors
		public MonoAsyncCall(); // 0x004E9E5C-0x004E9E64
	}

	internal static class MonoCustomAttrs // TypeDefIndex: 348
	{
		// Fields
		private static Assembly corlib; // 0x00
		[ThreadStatic] // 0x0039BA98-0x0039BAA8
		private static Dictionary<Type, AttributeUsageAttribute> usage_cache; // 0x80000000
		private static readonly AttributeUsageAttribute DefaultAttributeUsage; // 0x08
	
		// Nested types
		private class AttributeInfo // TypeDefIndex: 349
		{
			// Fields
			private AttributeUsageAttribute _usage; // 0x10
			private int _inheritanceLevel; // 0x18
	
			// Properties
			public AttributeUsageAttribute Usage { get; } // 0x004EB7E0-0x004EB7E8 
			public int InheritanceLevel { get; } // 0x004EB7E8-0x004EB7F0 
	
			// Constructors
			public AttributeInfo(AttributeUsageAttribute usage, int inheritanceLevel); // 0x004EB7F0-0x004EB82C
		}
	
		// Constructors
		static MonoCustomAttrs(); // 0x004EC5C4-0x004EC634
	
		// Methods
		private static bool IsUserCattrProvider(object obj); // 0x004E9E64-0x004EA060
		internal static object[] GetCustomAttributesInternal(ICustomAttributeProvider obj, Type attributeType, bool pseudoAttrs); // 0x004EA060-0x004EA068
		internal static object[] GetPseudoCustomAttributes(ICustomAttributeProvider obj, Type attributeType); // 0x004EA068-0x004EA3DC
		private static object[] GetPseudoCustomAttributes(Type type); // 0x004EA3DC-0x004EA570
		internal static object[] GetCustomAttributesBase(ICustomAttributeProvider obj, Type attributeType, bool inheritedOnly); // 0x004EA570-0x004EA760
		internal static object[] GetCustomAttributes(ICustomAttributeProvider obj, Type attributeType, bool inherit); // 0x004EA760-0x004EB350
		internal static object[] GetCustomAttributes(ICustomAttributeProvider obj, bool inherit); // 0x004EB82C-0x004EB9FC
		private static CustomAttributeData[] GetCustomAttributesDataInternal(ICustomAttributeProvider obj); // 0x004EB9FC-0x004EBA00
		internal static IList<CustomAttributeData> GetCustomAttributesData(ICustomAttributeProvider obj); // 0x004EBA00-0x004EBABC
		internal static bool IsDefined(ICustomAttributeProvider obj, Type attributeType, bool inherit); // 0x004EBABC-0x004EBDB0
		internal static bool IsDefinedInternal(ICustomAttributeProvider obj, Type AttributeType); // 0x004EBDB0-0x004EBDB4
		private static PropertyInfo GetBasePropertyDefinition(MonoProperty property); // 0x004EBDB4-0x004EC108
		private static EventInfo GetBaseEventDefinition(MonoEvent evt); // 0x004EC108-0x004EC304
		private static ICustomAttributeProvider GetBase(ICustomAttributeProvider obj); // 0x004EB350-0x004EB65C
		private static AttributeUsageAttribute RetrieveAttributeUsageNoCache(Type attributeType); // 0x004EC304-0x004EC5C4
		private static AttributeUsageAttribute RetrieveAttributeUsage(Type attributeType); // 0x004EB65C-0x004EB7E0
	}

	internal sealed class MonoListItem // TypeDefIndex: 350
	{
		// Fields
		private MonoListItem next; // 0x10
		private object data; // 0x18
	}

	internal sealed class MonoType : RuntimeType // TypeDefIndex: 351
	{
	}

	[Serializable]
	[ComVisible] // 0x00394EBC-0x00394ED0
	public abstract class MulticastDelegate : Delegate // TypeDefIndex: 352
	{
		// Fields
		private Delegate[] delegates; // 0x68
	
		// Methods
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x004EC734-0x004EC73C
		protected sealed override object DynamicInvokeImpl(object[] args); // 0x004EC73C-0x004EC7FC
		public sealed override bool Equals(object obj); // 0x004EC7FC-0x004EC9F0
		public sealed override int GetHashCode(); // 0x004EC9F0-0x004EC9F8
		protected override MethodInfo GetMethodImpl(); // 0x004EC9F8-0x004ECA68
		public sealed override Delegate[] GetInvocationList(); // 0x004ECA68-0x004ECBA0
		protected sealed override Delegate CombineImpl(Delegate follow); // 0x004ECBA0-0x004ED0A4
		private int LastIndexOf(Delegate[] haystack, Delegate[] needle); // 0x004ED0A4-0x004ED264
		protected sealed override Delegate RemoveImpl(Delegate value); // 0x004ED264-0x004ED724
	}

	internal class NullConsoleDriver : IConsoleDriver // TypeDefIndex: 353
	{
		// Fields
		private static readonly ConsoleKeyInfo EmptyConsoleKeyInfo; // 0x00
	
		// Constructors
		public NullConsoleDriver(); // 0x004ED900-0x004ED908
		static NullConsoleDriver(); // 0x004ED908-0x004ED994
	
		// Methods
		public ConsoleKeyInfo ReadKey(bool intercept); // 0x004ED894-0x004ED900
	}

	[ComVisible] // 0x00394ED0-0x00394EE4
	public static class Nullable // TypeDefIndex: 354
	{
		// Methods
		public static Type GetUnderlyingType(Type nullableType); // 0x004EDA44-0x004EDBEC
	}

	[Serializable]
	[DebuggerStepThrough] // 0x00394EE4-0x00394EF4
	public struct Nullable<T> // TypeDefIndex: 355
		where T : struct
	{
		// Fields
		internal T value;
		internal bool has_value;
	
		// Properties
		public bool HasValue { get; }
		public T Value { get; }
	
		// Constructors
		public Nullable(T value);
	
		// Methods
		public override bool Equals(object other);
		private bool Equals(T? other);
		public override int GetHashCode();
		public T GetValueOrDefault();
		public override string ToString();
		private static object Box(T? o);
		private static T? Unbox(object o);
	}

	internal sealed class NumberFormatter // TypeDefIndex: 356
	{
		// Fields
		private static readonly unsafe ulong* MantissaBitsTable; // 0x00
		private static readonly unsafe int* TensExponentTable; // 0x08
		private static readonly unsafe char* DigitLowerTable; // 0x10
		private static readonly unsafe char* DigitUpperTable; // 0x18
		private static readonly unsafe long* TenPowersList; // 0x20
		private static readonly unsafe int* DecHexDigits; // 0x28
		private NumberFormatInfo _nfi; // 0x10
		private char[] _cbuf; // 0x18
		private bool _NaN; // 0x20
		private bool _infinity; // 0x21
		private bool _isCustomFormat; // 0x22
		private bool _specifierIsUpper; // 0x23
		private bool _positive; // 0x24
		private char _specifier; // 0x26
		private int _precision; // 0x28
		private int _defPrecision; // 0x2C
		private int _digitsLen; // 0x30
		private int _offset; // 0x34
		private int _decPointPos; // 0x38
		private uint _val1; // 0x3C
		private uint _val2; // 0x40
		private uint _val3; // 0x44
		private uint _val4; // 0x48
		private int _ind; // 0x4C
		[ThreadStatic] // 0x0039BAA8-0x0039BAB8
		private static NumberFormatter threadNumberFormatter; // 0x80000000
		[ThreadStatic] // 0x0039BAB8-0x0039BAC8
		private static NumberFormatter userFormatProvider; // 0x80000008
	
		// Properties
		private CultureInfo CurrentCulture { set; } // 0x004F0BC8-0x004F0C24
		private int IntegerDigits { get; } // 0x004F197C-0x004F198C 
		private int DecimalDigits { get; } // 0x004F198C-0x004F19A0 
		private bool IsFloatingSource { get; } // 0x004F19A0-0x004F19B4 
		private bool IsZero { get; } // 0x004F19B4-0x004F19C4 
		private bool IsZeroInteger { get; } // 0x004F19C4-0x004F19E4 
	
		// Nested types
		private class CustomInfo // TypeDefIndex: 357
		{
			// Fields
			public bool UseGroup; // 0x10
			public int DecimalDigits; // 0x14
			public int DecimalPointPos; // 0x18
			public int DecimalTailSharpDigits; // 0x1C
			public int IntegerDigits; // 0x20
			public int IntegerHeadSharpDigits; // 0x24
			public int IntegerHeadPos; // 0x28
			public bool UseExponent; // 0x2C
			public int ExponentDigits; // 0x30
			public int ExponentTailSharpDigits; // 0x34
			public bool ExponentNegativeSignOnly; // 0x38
			public int DividePlaces; // 0x3C
			public int Percents; // 0x40
			public int Permilles; // 0x44
	
			// Constructors
			public CustomInfo(); // 0x009055D8-0x009055EC
	
			// Methods
			public static void GetActiveSection(string format, ref bool positive, bool zero, ref int offset, ref int length); // 0x00904BA8-0x0090502C
			public static CustomInfo Parse(string format, int offset, int length, NumberFormatInfo nfi); // 0x0090502C-0x009055D8
			public string Format(string format, int offset, int length, NumberFormatInfo nfi, bool positive, StringBuilder sb_int, StringBuilder sb_dec, StringBuilder sb_exp); // 0x009055EC-0x00905FE4
		}
	
		// Constructors
		static NumberFormatter(); // 0x004F0094-0x004F00F4
		private NumberFormatter(Thread current); // 0x004F0AF8-0x004F0BC8
	
		// Methods
		private static unsafe void GetFormatterTables(out ulong* MantissaBitsTable, out int* TensExponentTable, out char* DigitLowerTable, out char* DigitUpperTable, out long* TenPowersList, out int* DecHexDigits); // 0x004F0090-0x004F0094
		private static long GetTenPowerOf(int i); // 0x004F00F4-0x004F0164
		private void InitDecHexDigits(uint value); // 0x004F0164-0x004F022C
		private void InitDecHexDigits(ulong value); // 0x004F03C0-0x004F04E4
		private void InitDecHexDigits(uint hi, ulong lo); // 0x004F04E4-0x004F06CC
		private static uint FastToDecHex(int val); // 0x004F022C-0x004F02FC
		private static uint ToDecHex(int val); // 0x004F02FC-0x004F03C0
		private static int FastDecHexLen(int val); // 0x004F06CC-0x004F06F4
		private static int DecHexLen(uint val); // 0x004F06F4-0x004F07C0
		private int DecHexLen(); // 0x004F07C0-0x004F08E4
		private static int ScaleOrder(long hi); // 0x004F08E4-0x004F0978
		private int InitialFloatingPrecision(); // 0x004F0978-0x004F0A54
		private static int ParsePrecision(string format); // 0x004F0A54-0x004F0AF8
		private void Init(string format); // 0x004F0C24-0x004F0D60
		private void InitHex(ulong value); // 0x004F0D60-0x004F0DA8
		private void Init(string format, int value, int defPrecision); // 0x004F0DA8-0x004F0E4C
		private void Init(string format, uint value, int defPrecision); // 0x004F0E4C-0x004F0ED4
		private void Init(string format, long value); // 0x004F0ED4-0x004F0F60
		private void Init(string format, ulong value); // 0x004F0F60-0x004F0FE4
		private void Init(string format, double value, int defPrecision); // 0x004F0FE4-0x004F12CC
		private void Init(string format, decimal value); // 0x004F13F0-0x004F161C
		private void ResetCharBuf(int size); // 0x004F161C-0x004F16A0
		private void Resize(int len); // 0x004F16A0-0x004F1700
		private void Append(char c); // 0x004F1700-0x004F1798
		private void Append(char c, int cnt); // 0x004F1798-0x004F185C
		private void Append(string s); // 0x004F185C-0x004F1960
		private NumberFormatInfo GetNumberFormatInstance(IFormatProvider fp); // 0x004F1960-0x004F197C
		private void RoundPos(int pos); // 0x004F19E4-0x004F19F0
		private bool RoundDecimal(int decimals); // 0x004F1B5C-0x004F1B70
		private bool RoundBits(int shift); // 0x004F19F0-0x004F1B5C
		private void RemoveTrailingZeros(); // 0x004F1CA4-0x004F1CE4
		private void AddOneToDecHex(); // 0x004F1B70-0x004F1CA4
		private static uint AddOneToDecHex(uint val); // 0x004F1CE4-0x004F1D90
		private int CountTrailingZeros(); // 0x004F12CC-0x004F13F0
		private static int CountTrailingZeros(uint val); // 0x004F1D90-0x004F1DE4
		private static NumberFormatter GetInstance(IFormatProvider fp); // 0x004F1DE4-0x004F1F88
		private void Release(); // 0x004F1F88-0x004F2028
		public static string NumberToString(string format, uint value, IFormatProvider fp); // 0x004EE078-0x004EE16C
		public static string NumberToString(string format, int value, IFormatProvider fp); // 0x004EDF84-0x004EE078
		public static string NumberToString(string format, ulong value, IFormatProvider fp); // 0x004EE2D4-0x004EE3C0
		public static string NumberToString(string format, long value, IFormatProvider fp); // 0x004EE16C-0x004EE258
		public static string NumberToString(string format, float value, IFormatProvider fp); // 0x004EE444-0x004EE5C4
		public static string NumberToString(string format, double value, IFormatProvider fp); // 0x004EDE04-0x004EDF84
		public static string NumberToString(string format, decimal value, IFormatProvider fp); // 0x004EDC80-0x004EDD80
		private string IntegerToString(string format, IFormatProvider fp); // 0x004F2028-0x004F2218
		private string NumberToString(string format, NumberFormatInfo nfi); // 0x004F22B0-0x004F2458
		private string FormatCurrency(int precision, NumberFormatInfo nfi); // 0x004F2560-0x004F2A98
		private string FormatDecimal(int precision, NumberFormatInfo nfi); // 0x004F2A98-0x004F2B70
		private string FormatHexadecimal(int precision); // 0x004F3318-0x004F3490
		private string FormatFixedPoint(int precision, NumberFormatInfo nfi); // 0x004F2BC4-0x004F2CE4
		private string FormatRoundtrip(double origval, NumberFormatInfo nfi); // 0x004F2458-0x004F2560
		private string FormatRoundtrip(float origval, NumberFormatInfo nfi); // 0x004F2218-0x004F22B0
		private string FormatGeneral(int precision, NumberFormatInfo nfi); // 0x004F2CE4-0x004F2E58
		private string FormatNumber(int precision, NumberFormatInfo nfi); // 0x004F2E58-0x004F3090
		private string FormatPercent(int precision, NumberFormatInfo nfi); // 0x004F3090-0x004F3318
		private string FormatExponential(int precision, NumberFormatInfo nfi); // 0x004F2B70-0x004F2BC4
		private string FormatExponential(int precision, NumberFormatInfo nfi, int expDigits); // 0x004F4294-0x004F438C
		private string FormatCustom(string format, NumberFormatInfo nfi); // 0x004F3490-0x004F3B0C
		private static void ZeroTrimEnd(StringBuilder sb, bool canEmpty); // 0x004F491C-0x004F4A3C
		private static bool IsZeroOnly(StringBuilder sb); // 0x004F4820-0x004F491C
		private static void AppendNonNegativeNumber(StringBuilder sb, int v); // 0x004F4648-0x004F475C
		private void AppendIntegerString(int minLength, StringBuilder sb); // 0x004F475C-0x004F47FC
		private void AppendIntegerString(int minLength); // 0x004F4170-0x004F41DC
		private void AppendDecimalString(int precision, StringBuilder sb); // 0x004F47FC-0x004F4820
		private void AppendDecimalString(int precision); // 0x004F3DC8-0x004F3DE0
		private void AppendIntegerStringWithGroupSeparator(int[] groups, string groupSeparator); // 0x004F3B0C-0x004F3DC8
		private void AppendExponent(NumberFormatInfo nfi, int exponent, int minDigits); // 0x004F44A4-0x004F4628
		private void AppendOneDigit(int start); // 0x004F43AC-0x004F44A4
		private void AppendDigits(int start, int end); // 0x004F3DE0-0x004F4170
		private void AppendDigits(int start, int end, StringBuilder sb); // 0x004F4A3C-0x004F4D0C
		private void Multiply10(int count); // 0x004F438C-0x004F43AC
		private void Divide10(int count); // 0x004F4628-0x004F4648
		private NumberFormatter GetClone(); // 0x004F41DC-0x004F4294
	}

	[Serializable]
	[ClassInterface] // 0x00394EF4-0x00394F34
	[ComVisible] // 0x00394EF4-0x00394F34
	public class Object // TypeDefIndex: 358
	{
		// Constructors
		[ReliabilityContract] // 0x0039DB60-0x0039DB78
		public Object(); // 0x00905FE4-0x00905FE8
	
		// Methods
		public virtual bool Equals(object obj); // 0x009060C0-0x009060CC
		public static bool Equals(object objA, object objB); // 0x009060CC-0x009060F8
		[ReliabilityContract] // 0x0039DB78-0x0039DB90
		~Object(); // 0x009060F8-0x009060FC
		public virtual int GetHashCode(); // 0x009060FC-0x00906100
		public Type GetType(); // 0x00906104-0x00906108
		protected object MemberwiseClone(); // 0x00906108-0x0090610C
		public virtual string ToString(); // 0x0090610C-0x00906140
		[ReliabilityContract] // 0x0039DB90-0x0039DBA8
		public static bool ReferenceEquals(object objA, object objB); // 0x00906140-0x0090614C
		internal static int InternalGetHashCode(object o); // 0x00906100-0x00906104
		private void FieldGetter(string typeName, string fieldName, ref object val); // 0x0090614C-0x00906150
		private void FieldSetter(string typeName, string fieldName, object val); // 0x00906150-0x00906154
	}

	[Serializable]
	[ComVisible] // 0x00394F34-0x00394F48
	public sealed class OperatingSystem : ICloneable, ISerializable // TypeDefIndex: 359
	{
		// Fields
		private PlatformID _platform; // 0x10
		private System.Version _version; // 0x18
		private string _servicePack; // 0x20
	
		// Properties
		public PlatformID Platform { get; } // 0x00906988-0x00906990 
		public string ServicePack { get; } // 0x00906990-0x00906998 
	
		// Constructors
		public OperatingSystem(PlatformID platform, System.Version version); // 0x0090666C-0x009067D8
		private OperatingSystem(SerializationInfo information, StreamingContext context); // 0x009067D8-0x00906988
	
		// Methods
		public object Clone(); // 0x00906998-0x00906A0C
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00906A0C-0x00906AF8
		public override string ToString(); // 0x00906AF8-0x00906C78
	}

	[Serializable]
	[ComVisible] // 0x00394F48-0x00394F5C
	public enum PlatformID // TypeDefIndex: 360
	{
		Win32S = 0,
		Win32Windows = 1,
		Win32NT = 2,
		WinCE = 3,
		Unix = 4,
		Xbox = 5,
		MacOSX = 6
	}

	[ComVisible] // 0x00394F5C-0x00394F70
	public class ResolveEventArgs : EventArgs // TypeDefIndex: 361
	{
		// Fields
		private string m_Name; // 0x10
		private Assembly m_Requesting; // 0x18
	
		// Constructors
		public ResolveEventArgs(string name); // 0x004F8884-0x004F8900
		public ResolveEventArgs(string name, Assembly requestingAssembly); // 0x004F8900-0x004F8980
	}

	[Serializable]
	[ComVisible] // 0x00394F70-0x00394F84
	public delegate Assembly ResolveEventHandler(object sender, ResolveEventArgs args); // TypeDefIndex: 362; 0x004F8990-0x004F9120

	[ComVisible] // 0x00394F84-0x00394F98
	public struct RuntimeArgumentHandle // TypeDefIndex: 363
	{
		// Fields
		internal IntPtr args; // 0x00
	}

	[Serializable]
	[ComVisible] // 0x00394F98-0x00394FAC
	public struct RuntimeFieldHandle : ISerializable // TypeDefIndex: 364
	{
		// Fields
		private IntPtr value; // 0x00
	
		// Properties
		public IntPtr Value { get; } // 0x0061B2B8-0x0061B488 
	
		// Constructors
		internal RuntimeFieldHandle(IntPtr v); // 0x0061B0CC-0x0061B2B0
		private RuntimeFieldHandle(SerializationInfo info, StreamingContext context); // 0x0061B2B0-0x0061B2B8
	
		// Methods
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0061B488-0x0061B594
		[ReliabilityContract] // 0x0039DBA8-0x0039DBC0
		public override bool Equals(object obj); // 0x0061B594-0x0061B59C
		public override int GetHashCode(); // 0x0061B59C-0x0061B5A8
		private static void SetValueInternal(FieldInfo fi, object obj, object value); // 0x0061B5A8-0x0061B5AC
		internal static void SetValue(RtFieldInfo field, object obj, object value, RuntimeType fieldType, FieldAttributes fieldAttr, RuntimeType declaringType, ref bool domainInitialized); // 0x0061B5AC-0x0061B5B0
		internal static unsafe void SetValueDirect(RtFieldInfo field, RuntimeType fieldType, void* pTypedRef, object value, RuntimeType contextType); // 0x0061B5B0-0x0061B5BC
	}

	[Serializable]
	[ComVisible] // 0x00394FAC-0x00394FC0
	public struct RuntimeMethodHandle : ISerializable // TypeDefIndex: 365
	{
		// Fields
		private IntPtr value; // 0x00
	
		// Properties
		public IntPtr Value { get; } // 0x0061B7A8-0x0061B978 
	
		// Constructors
		internal RuntimeMethodHandle(IntPtr v); // 0x0061B5BC-0x0061B7A0
		private RuntimeMethodHandle(SerializationInfo info, StreamingContext context); // 0x0061B7A0-0x0061B7A8
	
		// Methods
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0061B978-0x0061BA84
		[ReliabilityContract] // 0x0039DBC0-0x0039DBD8
		public override bool Equals(object obj); // 0x0061BA84-0x0061BA8C
		public override int GetHashCode(); // 0x0061BA8C-0x0061BA98
		internal static string ConstructInstantiation(RuntimeMethodInfo method, TypeNameFormatFlags format); // 0x0061BA98-0x0061BCA0
		internal bool IsNullHandle(); // 0x0061BCA0-0x0061BCA8
	}

	[Serializable]
	[ComVisible] // 0x00394FC0-0x00394FD4
	public struct RuntimeTypeHandle : ISerializable // TypeDefIndex: 366
	{
		// Fields
		private IntPtr value; // 0x00
	
		// Properties
		public IntPtr Value { get; } // 0x00627C78-0x00627DF4 
	
		// Constructors
		internal RuntimeTypeHandle(IntPtr val); // 0x00627A60-0x00627A68
		internal RuntimeTypeHandle(RuntimeType type); // 0x00627A68-0x00627C70
		private RuntimeTypeHandle(SerializationInfo info, StreamingContext context); // 0x00627C70-0x00627C78
	
		// Methods
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00627DF4-0x00627F00
		[ReliabilityContract] // 0x0039DBD8-0x0039DBF0
		public override bool Equals(object obj); // 0x00627F00-0x00627F08
		public override int GetHashCode(); // 0x00627F08-0x00627F14
		internal static TypeAttributes GetAttributes(RuntimeType type); // 0x00621A60-0x00621A64
		private static int GetMetadataToken(RuntimeType type); // 0x00627F14-0x00627F18
		internal static int GetToken(RuntimeType type); // 0x00624F60-0x00624F64
		private static Type GetGenericTypeDefinition_impl(RuntimeType type); // 0x00627F18-0x00627F1C
		internal static Type GetGenericTypeDefinition(RuntimeType type); // 0x006232C0-0x006232C4
		internal static bool HasElementType(RuntimeType type); // 0x00621CDC-0x00621D20
		internal static bool HasInstantiation(RuntimeType type); // 0x006232C8-0x006232CC
		internal static bool IsArray(RuntimeType type); // 0x00621E74-0x00621E78
		internal static bool IsByRef(RuntimeType type); // 0x00621B04-0x00621B08
		internal static bool IsComObject(RuntimeType type); // 0x00627F1C-0x00627F20
		internal static bool IsInstanceOfType(RuntimeType type, object o); // 0x006216F4-0x006216F8
		internal static bool IsPointer(RuntimeType type); // 0x00621B14-0x00621B18
		internal static bool IsPrimitive(RuntimeType type); // 0x00621B0C-0x00621B10
		internal static bool HasReferences(RuntimeType type); // 0x00627F20-0x00627F24
		internal static bool IsComObject(RuntimeType type, bool isGenericCOM); // 0x00621B1C-0x00621B2C
		internal static bool IsContextful(RuntimeType type); // 0x00621A68-0x00621B00
		internal static bool IsEquivalentTo(RuntimeType rtType1, RuntimeType rtType2); // 0x00621A44-0x00621A4C
		internal static bool IsSzArray(RuntimeType type); // 0x00621E1C-0x00621E70
		internal static bool IsInterface(RuntimeType type); // 0x00627F24-0x00627F58
		internal static int GetArrayRank(RuntimeType type); // 0x00621F2C-0x00621F30
		internal static RuntimeAssembly GetAssembly(RuntimeType type); // 0x00621690-0x00621694
		internal static RuntimeType GetElementType(RuntimeType type); // 0x00621F34-0x00621F38
		internal static RuntimeModule GetModule(RuntimeType type); // 0x00621684-0x00621688
		internal static bool IsGenericVariable(RuntimeType type); // 0x00621A50-0x00621A54
		internal static RuntimeType GetBaseType(RuntimeType type); // 0x00621A54-0x00621A58
		internal static bool CanCastTo(RuntimeType type, RuntimeType target); // 0x00621988-0x00621998
		private static bool type_is_assignable_from(Type a, Type b); // 0x00627F58-0x00628038
		internal static bool IsGenericTypeDefinition(RuntimeType type); // 0x0062314C-0x00623150
		internal static IntPtr GetGenericParameterInfo(RuntimeType type); // 0x006271C8-0x006271CC
	}

	[Serializable]
	[ComVisible] // 0x00394FD4-0x00394FE8
	public enum StringComparison // TypeDefIndex: 367
	{
		CurrentCulture = 0,
		CurrentCultureIgnoreCase = 1,
		InvariantCulture = 2,
		InvariantCultureIgnoreCase = 3,
		Ordinal = 4,
		OrdinalIgnoreCase = 5
	}

	internal class TermInfoDriver : IConsoleDriver // TypeDefIndex: 368
	{
		// Fields
		private static unsafe int* native_terminal_size; // 0x00
		private static int terminal_size; // 0x08
		private static readonly string[] locations; // 0x10
		private TermInfoReader reader; // 0x10
		private int cursorLeft; // 0x18
		private int cursorTop; // 0x1C
		private string title; // 0x20
		private string titleFormat; // 0x28
		private bool cursorVisible; // 0x30
		private string csrVisible; // 0x38
		private string csrInvisible; // 0x40
		private string clear; // 0x48
		private string bell; // 0x50
		private string term; // 0x58
		private StreamReader stdin; // 0x60
		private CStreamWriter stdout; // 0x68
		private int windowWidth; // 0x70
		private int windowHeight; // 0x74
		private int bufferHeight; // 0x78
		private int bufferWidth; // 0x7C
		private char[] buffer; // 0x80
		private int readpos; // 0x88
		private int writepos; // 0x8C
		private string keypadXmit; // 0x90
		private string keypadLocal; // 0x98
		private bool inited; // 0xA0
		private object initLock; // 0xA8
		private bool initKeys; // 0xB0
		private string origPair; // 0xB8
		private string origColors; // 0xC0
		private string cursorAddress; // 0xC8
		private ConsoleColor fgcolor; // 0xD0
		private string setfgcolor; // 0xD8
		private string setbgcolor; // 0xE0
		private int maxColors; // 0xE8
		private bool noGetPosition; // 0xEC
		private Hashtable keymap; // 0xF0
		private ByteMatcher rootmap; // 0xF8
		private int rl_startx; // 0x100
		private int rl_starty; // 0x104
		private byte[] control_characters; // 0x108
		private static readonly int[] _consoleColorToAnsiCode; // 0x18
		private char[] echobuf; // 0x110
		private int echon; // 0x118
	
		// Properties
		public bool Initialized { get; } // 0x008B4B70-0x008B4B78 
		public int WindowHeight { get; } // 0x008B66E0-0x008B6718 
		public int WindowWidth { get; } // 0x008B66A8-0x008B66E0 
	
		// Constructors
		public TermInfoDriver(string term); // 0x008B44CC-0x008B4828
		static TermInfoDriver(); // 0x008BA4A8-0x008BA69C
	
		// Methods
		private static string TryTermInfoDir(string dir, string term); // 0x008B41C4-0x008B42F8
		private static string SearchTerminfo(string term); // 0x008B42F8-0x008B4484
		private void WriteConsole(string str); // 0x008B4484-0x008B44CC
		public void Init(); // 0x008B4B78-0x008B6238
		private void IncrementX(); // 0x008B6638-0x008B66A8
		public void WriteSpecialKey(ConsoleKeyInfo key); // 0x008B6718-0x008B6844
		public void WriteSpecialKey(char c); // 0x008B6A2C-0x008B6A60
		public bool IsSpecialKey(ConsoleKeyInfo key); // 0x008B6BF4-0x008B6C98
		public bool IsSpecialKey(char c); // 0x008B6C98-0x008B6CCC
		private void GetCursorPosition(); // 0x008B6334-0x008B6638
		private void CheckWindowDimensions(); // 0x008B6DE0-0x008B6F48
		private void AddToBuffer(int b); // 0x008B6CCC-0x008B6DE0
		private void AdjustBuffer(); // 0x008B6F48-0x008B6F5C
		private ConsoleKeyInfo CreateKeyInfoFromInt(int n, bool alt); // 0x008B6A60-0x008B6BF4
		private object GetKeyFromBuffer(bool cooked); // 0x008B6F5C-0x008B72D4
		private ConsoleKeyInfo ReadKeyInternal(out bool fresh); // 0x008B72D4-0x008B74C8
		private bool InputPending(); // 0x008B7674-0x008B76B8
		private void QueueEcho(char c); // 0x008B76B8-0x008B77E0
		private void Echo(ConsoleKeyInfo key); // 0x008B77E0-0x008B7868
		private void EchoFlush(); // 0x008B7868-0x008B78C0
		public int Read([In, Out] char[] dest, int index, int count); // 0x008B78C0-0x008B7C44
		public ConsoleKeyInfo ReadKey(bool intercept); // 0x008B7F90-0x008B7FF8
		public string ReadLine(); // 0x008B7FF8-0x008B8000
		public string ReadToEnd(); // 0x008B8230-0x008B8238
		private string ReadUntilConditionInternal(bool haltOnNewLine); // 0x008B8000-0x008B8230
		public void SetCursorPosition(int left, int top); // 0x008B6844-0x008B6A2C
		private void CreateKeyMap(); // 0x008B8238-0x008BA394
		private void InitKeys(); // 0x008B74C8-0x008B7674
		private void AddStringMapping(TermInfoStrings s); // 0x008BA394-0x008BA410
	}

	internal static class ParameterizedStrings // TypeDefIndex: 369
	{
		// Fields
		[ThreadStatic] // 0x0039BAC8-0x0039BAD8
		private static LowLevelStack _cachedStack; // 0x80000000
	
		// Nested types
		public struct FormatParam // TypeDefIndex: 370
		{
			// Fields
			private readonly int _int32; // 0x00
			private readonly string _string; // 0x08
	
			// Properties
			public int Int32 { get; } // 0x00908998-0x009089A0 
			public string String { get; } // 0x009089A0-0x009089FC 
			public object Object { get; } // 0x009089FC-0x00908AD4 
	
			// Constructors
			public FormatParam(int value); // 0x00908980-0x0090898C
			private FormatParam(int intValue, string stringValue); // 0x0090898C-0x00908998
	
			// Methods
			public static implicit operator FormatParam(int value); // 0x009084B0-0x009084BC
		}
	
		private sealed class LowLevelStack // TypeDefIndex: 371
		{
			// Fields
			private FormatParam[] _arr; // 0x10
			private int _count; // 0x18
	
			// Constructors
			public LowLevelStack(); // 0x009073D0-0x00907428
	
			// Methods
			public FormatParam Pop(); // 0x0090801C-0x0090819C
			public void Push(FormatParam item); // 0x0090839C-0x009084B0
			public void Clear(); // 0x00907428-0x0090745C
		}
	
		// Methods
		public static string Evaluate(string format, params /* 0x0039F9F8-0x0039FA08 */ FormatParam[] args); // 0x00907288-0x009073D0
		private static string EvaluateInternal(string format, ref int pos, FormatParam[] args, LowLevelStack stack, ref FormatParam[] dynamicVars, ref FormatParam[] staticVars); // 0x0090745C-0x0090801C
		private static bool AsBool(int i); // 0x009085DC-0x009085E8
		private static int AsInt(bool b); // 0x009085D4-0x009085DC
		private static string StringFromAsciiBytes(byte[] buffer, int offset, int length); // 0x009085E8-0x00908724
		private static unsafe extern int snprintf(byte* str, IntPtr size, string format, string arg1); // 0x00908724-0x00908818
		private static unsafe extern int snprintf(byte* str, IntPtr size, string format, int arg1); // 0x00908818-0x00908980
		private static string FormatPrintF(string format, object arg); // 0x0090819C-0x0090839C
		private static FormatParam[] GetDynamicOrStaticVariables(char c, ref FormatParam[] dynamicVars, ref FormatParam[] staticVars, out int index); // 0x009084BC-0x009085D4
	}

	internal class ByteMatcher // TypeDefIndex: 372
	{
		// Fields
		private Hashtable map; // 0x10
		private Hashtable starts; // 0x18
	
		// Constructors
		public ByteMatcher(); // 0x0092ED5C-0x0092EDF8
	
		// Methods
		public void AddMapping(TermInfoStrings key, byte[] val); // 0x0092E720-0x0092E858
		public void Sort(); // 0x0092E858-0x0092E85C
		public bool StartsWith(int c); // 0x0092E85C-0x0092E8F4
		public TermInfoStrings Match(char[] buffer, int offset, int length, out int used); // 0x0092E8F4-0x0092ED5C
	}

	internal enum TermInfoNumbers // TypeDefIndex: 373
	{
		Columns = 0,
		InitTabs = 1,
		Lines = 2,
		LinesOfMemory = 3,
		MagicCookieGlitch = 4,
		PaddingBaudRate = 5,
		VirtualTerminal = 6,
		WidthStatusLine = 7,
		NumLabels = 8,
		LabelHeight = 9,
		LabelWidth = 10,
		MaxAttributes = 11,
		MaximumWindows = 12,
		MaxColors = 13,
		MaxPairs = 14,
		NoColorVideo = 15,
		BufferCapacity = 16,
		DotVertSpacing = 17,
		DotHorzSpacing = 18,
		MaxMicroAddress = 19,
		MaxMicroJump = 20,
		MicroColSize = 21,
		MicroLineSize = 22,
		NumberOfPins = 23,
		OutputResChar = 24,
		OutputResLine = 25,
		OutputResHorzInch = 26,
		OutputResVertInch = 27,
		PrintRate = 28,
		WideCharSize = 29,
		Buttons = 30,
		BitImageEntwining = 31,
		BitImageType = 32,
		Last = 33
	}

	internal class TermInfoReader // TypeDefIndex: 374
	{
		// Fields
		private short boolSize; // 0x10
		private short numSize; // 0x12
		private short strOffsets; // 0x14
		private byte[] buffer; // 0x18
		private int booleansOffset; // 0x20
	
		// Constructors
		public TermInfoReader(string term, string filename); // 0x008B4828-0x008B4AAC
		public TermInfoReader(string term, byte[] buffer); // 0x008B4AAC-0x008B4B70
	
		// Methods
		private void ReadHeader(byte[] buffer, ref int position); // 0x008BA69C-0x008BA804
		private void ReadNames(byte[] buffer, ref int position); // 0x008BA804-0x008BA858
		public int Get(TermInfoNumbers number); // 0x008B62D0-0x008B6334
		public string Get(TermInfoStrings tstr); // 0x008B6238-0x008B62D0
		public byte[] GetStringBytes(TermInfoStrings tstr); // 0x008BA410-0x008BA4A8
		private short GetInt16(byte[] buffer, int offset); // 0x008BA858-0x008BA8F0
		private string GetString(byte[] buffer, int offset); // 0x008BA8F0-0x008BA98C
		private byte[] GetStringBytes(byte[] buffer, int offset); // 0x008BA98C-0x008BAA58
	}

	internal enum TermInfoStrings // TypeDefIndex: 375
	{
		BackTab = 0,
		Bell = 1,
		CarriageReturn = 2,
		ChangeScrollRegion = 3,
		ClearAllTabs = 4,
		ClearScreen = 5,
		ClrEol = 6,
		ClrEos = 7,
		ColumnAddress = 8,
		CommandCharacter = 9,
		CursorAddress = 10,
		CursorDown = 11,
		CursorHome = 12,
		CursorInvisible = 13,
		CursorLeft = 14,
		CursorMemAddress = 15,
		CursorNormal = 16,
		CursorRight = 17,
		CursorToLl = 18,
		CursorUp = 19,
		CursorVisible = 20,
		DeleteCharacter = 21,
		DeleteLine = 22,
		DisStatusLine = 23,
		DownHalfLine = 24,
		EnterAltCharsetMode = 25,
		EnterBlinkMode = 26,
		EnterBoldMode = 27,
		EnterCaMode = 28,
		EnterDeleteMode = 29,
		EnterDimMode = 30,
		EnterInsertMode = 31,
		EnterSecureMode = 32,
		EnterProtectedMode = 33,
		EnterReverseMode = 34,
		EnterStandoutMode = 35,
		EnterUnderlineMode = 36,
		EraseChars = 37,
		ExitAltCharsetMode = 38,
		ExitAttributeMode = 39,
		ExitCaMode = 40,
		ExitDeleteMode = 41,
		ExitInsertMode = 42,
		ExitStandoutMode = 43,
		ExitUnderlineMode = 44,
		FlashScreen = 45,
		FormFeed = 46,
		FromStatusLine = 47,
		Init1string = 48,
		Init2string = 49,
		Init3string = 50,
		InitFile = 51,
		InsertCharacter = 52,
		InsertLine = 53,
		InsertPadding = 54,
		KeyBackspace = 55,
		KeyCatab = 56,
		KeyClear = 57,
		KeyCtab = 58,
		KeyDc = 59,
		KeyDl = 60,
		KeyDown = 61,
		KeyEic = 62,
		KeyEol = 63,
		KeyEos = 64,
		KeyF0 = 65,
		KeyF1 = 66,
		KeyF10 = 67,
		KeyF2 = 68,
		KeyF3 = 69,
		KeyF4 = 70,
		KeyF5 = 71,
		KeyF6 = 72,
		KeyF7 = 73,
		KeyF8 = 74,
		KeyF9 = 75,
		KeyHome = 76,
		KeyIc = 77,
		KeyIl = 78,
		KeyLeft = 79,
		KeyLl = 80,
		KeyNpage = 81,
		KeyPpage = 82,
		KeyRight = 83,
		KeySf = 84,
		KeySr = 85,
		KeyStab = 86,
		KeyUp = 87,
		KeypadLocal = 88,
		KeypadXmit = 89,
		LabF0 = 90,
		LabF1 = 91,
		LabF10 = 92,
		LabF2 = 93,
		LabF3 = 94,
		LabF4 = 95,
		LabF5 = 96,
		LabF6 = 97,
		LabF7 = 98,
		LabF8 = 99,
		LabF9 = 100,
		MetaOff = 101,
		MetaOn = 102,
		Newline = 103,
		PadChar = 104,
		ParmDch = 105,
		ParmDeleteLine = 106,
		ParmDownCursor = 107,
		ParmIch = 108,
		ParmIndex = 109,
		ParmInsertLine = 110,
		ParmLeftCursor = 111,
		ParmRightCursor = 112,
		ParmRindex = 113,
		ParmUpCursor = 114,
		PkeyKey = 115,
		PkeyLocal = 116,
		PkeyXmit = 117,
		PrintScreen = 118,
		PrtrOff = 119,
		PrtrOn = 120,
		RepeatChar = 121,
		Reset1string = 122,
		Reset2string = 123,
		Reset3string = 124,
		ResetFile = 125,
		RestoreCursor = 126,
		RowAddress = 127,
		SaveCursor = 128,
		ScrollForward = 129,
		ScrollReverse = 130,
		SetAttributes = 131,
		SetTab = 132,
		SetWindow = 133,
		Tab = 134,
		ToStatusLine = 135,
		UnderlineChar = 136,
		UpHalfLine = 137,
		InitProg = 138,
		KeyA1 = 139,
		KeyA3 = 140,
		KeyB2 = 141,
		KeyC1 = 142,
		KeyC3 = 143,
		PrtrNon = 144,
		CharPadding = 145,
		AcsChars = 146,
		PlabNorm = 147,
		KeyBtab = 148,
		EnterXonMode = 149,
		ExitXonMode = 150,
		EnterAmMode = 151,
		ExitAmMode = 152,
		XonCharacter = 153,
		XoffCharacter = 154,
		EnaAcs = 155,
		LabelOn = 156,
		LabelOff = 157,
		KeyBeg = 158,
		KeyCancel = 159,
		KeyClose = 160,
		KeyCommand = 161,
		KeyCopy = 162,
		KeyCreate = 163,
		KeyEnd = 164,
		KeyEnter = 165,
		KeyExit = 166,
		KeyFind = 167,
		KeyHelp = 168,
		KeyMark = 169,
		KeyMessage = 170,
		KeyMove = 171,
		KeyNext = 172,
		KeyOpen = 173,
		KeyOptions = 174,
		KeyPrevious = 175,
		KeyPrint = 176,
		KeyRedo = 177,
		KeyReference = 178,
		KeyRefresh = 179,
		KeyReplace = 180,
		KeyRestart = 181,
		KeyResume = 182,
		KeySave = 183,
		KeySuspend = 184,
		KeyUndo = 185,
		KeySbeg = 186,
		KeyScancel = 187,
		KeyScommand = 188,
		KeyScopy = 189,
		KeyScreate = 190,
		KeySdc = 191,
		KeySdl = 192,
		KeySelect = 193,
		KeySend = 194,
		KeySeol = 195,
		KeySexit = 196,
		KeySfind = 197,
		KeyShelp = 198,
		KeyShome = 199,
		KeySic = 200,
		KeySleft = 201,
		KeySmessage = 202,
		KeySmove = 203,
		KeySnext = 204,
		KeySoptions = 205,
		KeySprevious = 206,
		KeySprint = 207,
		KeySredo = 208,
		KeySreplace = 209,
		KeySright = 210,
		KeySrsume = 211,
		KeySsave = 212,
		KeySsuspend = 213,
		KeySundo = 214,
		ReqForInput = 215,
		KeyF11 = 216,
		KeyF12 = 217,
		KeyF13 = 218,
		KeyF14 = 219,
		KeyF15 = 220,
		KeyF16 = 221,
		KeyF17 = 222,
		KeyF18 = 223,
		KeyF19 = 224,
		KeyF20 = 225,
		KeyF21 = 226,
		KeyF22 = 227,
		KeyF23 = 228,
		KeyF24 = 229,
		KeyF25 = 230,
		KeyF26 = 231,
		KeyF27 = 232,
		KeyF28 = 233,
		KeyF29 = 234,
		KeyF30 = 235,
		KeyF31 = 236,
		KeyF32 = 237,
		KeyF33 = 238,
		KeyF34 = 239,
		KeyF35 = 240,
		KeyF36 = 241,
		KeyF37 = 242,
		KeyF38 = 243,
		KeyF39 = 244,
		KeyF40 = 245,
		KeyF41 = 246,
		KeyF42 = 247,
		KeyF43 = 248,
		KeyF44 = 249,
		KeyF45 = 250,
		KeyF46 = 251,
		KeyF47 = 252,
		KeyF48 = 253,
		KeyF49 = 254,
		KeyF50 = 255,
		KeyF51 = 256,
		KeyF52 = 257,
		KeyF53 = 258,
		KeyF54 = 259,
		KeyF55 = 260,
		KeyF56 = 261,
		KeyF57 = 262,
		KeyF58 = 263,
		KeyF59 = 264,
		KeyF60 = 265,
		KeyF61 = 266,
		KeyF62 = 267,
		KeyF63 = 268,
		ClrBol = 269,
		ClearMargins = 270,
		SetLeftMargin = 271,
		SetRightMargin = 272,
		LabelFormat = 273,
		SetClock = 274,
		DisplayClock = 275,
		RemoveClock = 276,
		CreateWindow = 277,
		GotoWindow = 278,
		Hangup = 279,
		DialPhone = 280,
		QuickDial = 281,
		Tone = 282,
		Pulse = 283,
		FlashHook = 284,
		FixedPause = 285,
		WaitTone = 286,
		User0 = 287,
		User1 = 288,
		User2 = 289,
		User3 = 290,
		User4 = 291,
		User5 = 292,
		User6 = 293,
		User7 = 294,
		User8 = 295,
		User9 = 296,
		OrigPair = 297,
		OrigColors = 298,
		InitializeColor = 299,
		InitializePair = 300,
		SetColorPair = 301,
		SetForeground = 302,
		SetBackground = 303,
		ChangeCharPitch = 304,
		ChangeLinePitch = 305,
		ChangeResHorz = 306,
		ChangeResVert = 307,
		DefineChar = 308,
		EnterDoublewideMode = 309,
		EnterDraftQuality = 310,
		EnterItalicsMode = 311,
		EnterLeftwardMode = 312,
		EnterMicroMode = 313,
		EnterNearLetterQuality = 314,
		EnterNormalQuality = 315,
		EnterShadowMode = 316,
		EnterSubscriptMode = 317,
		EnterSuperscriptMode = 318,
		EnterUpwardMode = 319,
		ExitDoublewideMode = 320,
		ExitItalicsMode = 321,
		ExitLeftwardMode = 322,
		ExitMicroMode = 323,
		ExitShadowMode = 324,
		ExitSubscriptMode = 325,
		ExitSuperscriptMode = 326,
		ExitUpwardMode = 327,
		MicroColumnAddress = 328,
		MicroDown = 329,
		MicroLeft = 330,
		MicroRight = 331,
		MicroRowAddress = 332,
		MicroUp = 333,
		OrderOfPins = 334,
		ParmDownMicro = 335,
		ParmLeftMicro = 336,
		ParmRightMicro = 337,
		ParmUpMicro = 338,
		SelectCharSet = 339,
		SetBottomMargin = 340,
		SetBottomMarginParm = 341,
		SetLeftMarginParm = 342,
		SetRightMarginParm = 343,
		SetTopMargin = 344,
		SetTopMarginParm = 345,
		StartBitImage = 346,
		StartCharSetDef = 347,
		StopBitImage = 348,
		StopCharSetDef = 349,
		SubscriptCharacters = 350,
		SuperscriptCharacters = 351,
		TheseCauseCr = 352,
		ZeroMotion = 353,
		CharSetNames = 354,
		KeyMouse = 355,
		MouseInfo = 356,
		ReqMousePos = 357,
		GetMouse = 358,
		SetAForeground = 359,
		SetABackground = 360,
		PkeyPlab = 361,
		DeviceType = 362,
		CodeSetInit = 363,
		Set0DesSeq = 364,
		Set1DesSeq = 365,
		Set2DesSeq = 366,
		Set3DesSeq = 367,
		SetLrMargin = 368,
		SetTbMargin = 369,
		BitImageRepeat = 370,
		BitImageNewline = 371,
		BitImageCarriageReturn = 372,
		ColorNames = 373,
		DefineBitImageRegion = 374,
		EndBitImageRegion = 375,
		SetColorBand = 376,
		SetPageLength = 377,
		DisplayPcChar = 378,
		EnterPcCharsetMode = 379,
		ExitPcCharsetMode = 380,
		EnterScancodeMode = 381,
		ExitScancodeMode = 382,
		PcTermOptions = 383,
		ScancodeEscape = 384,
		AltScancodeEsc = 385,
		EnterHorizontalHlMode = 386,
		EnterLeftHlMode = 387,
		EnterLowHlMode = 388,
		EnterRightHlMode = 389,
		EnterTopHlMode = 390,
		EnterVerticalHlMode = 391,
		SetAAttributes = 392,
		SetPglenInch = 393,
		Last = 394
	}

	[Serializable]
	[ComVisible] // 0x00394FE8-0x00394FFC
	public abstract class TimeZone // TypeDefIndex: 376
	{
		// Fields
		[NonSerialized]
		private static object tz_lock; // 0x00
	
		// Constructors
		protected TimeZone(); // 0x004AEFF0-0x004AEFF8
		static TimeZone(); // 0x004AEFF8-0x004AF064
	}

	[Serializable]
	internal class CurrentSystemTimeZone : TimeZone // TypeDefIndex: 377
	{
		// Fields
		private readonly TimeZoneInfo LocalTimeZone; // 0x10
	
		// Constructors
		internal CurrentSystemTimeZone(); // 0x0055CB98-0x0055CC10
	
		// Methods
		public static bool GetTimeZoneData(int year, out long[] data, out string[] names, out bool daylight_inverted); // 0x0055CC10-0x0055CC14
	}

	internal class TimeType // TypeDefIndex: 378
	{
		// Fields
		public readonly int Offset; // 0x10
		public readonly bool IsDst; // 0x14
		public string Name; // 0x18
	
		// Constructors
		public TimeType(int offset, bool is_dst, string abbrev); // 0x004AED24-0x004AED6C
	
		// Methods
		public override string ToString(); // 0x004AED6C-0x004AEFF0
	}

	[Serializable]
	[ComVisible] // 0x00394FFC-0x00395010
	public enum TypeCode // TypeDefIndex: 379
	{
		Empty = 0,
		Object = 1,
		DBNull = 2,
		Boolean = 3,
		Char = 4,
		SByte = 5,
		Byte = 6,
		Int16 = 7,
		UInt16 = 8,
		Int32 = 9,
		UInt32 = 10,
		Int64 = 11,
		UInt64 = 12,
		Single = 13,
		Double = 14,
		Decimal = 15,
		DateTime = 16,
		String = 18
	}

	internal interface TypeName : IEquatable<TypeName> // TypeDefIndex: 380
	{
		// Properties
		string DisplayName { get; }
	}

	internal interface TypeIdentifier : TypeName // TypeDefIndex: 381
	{
		// Properties
		string InternalName { get; }
	}

	internal class TypeNames // TypeDefIndex: 382
	{
		// Nested types
		internal abstract class ATypeName : TypeName // TypeDefIndex: 383
		{
			// Properties
			public abstract string DisplayName { get; }
	
			// Constructors
			protected ATypeName(); // 0x00BC8254-0x00BC825C
	
			// Methods
			public bool Equals(TypeName other); // 0x00BCA5BC-0x00BCA6A8
			public override int GetHashCode(); // 0x00BCA6A8-0x00BCA6E4
			public override bool Equals(object other); // 0x00BCA6E4-0x00BCA74C
		}
	}

	internal class TypeIdentifiers // TypeDefIndex: 384
	{
		// Nested types
		private class Display : TypeNames.ATypeName, TypeIdentifier // TypeDefIndex: 385
		{
			// Fields
			private string displayName; // 0x10
			private string internal_name; // 0x18
	
			// Properties
			public override string DisplayName { get; } // 0x00BC825C-0x00BC8264 
			public string InternalName { get; } // 0x00BC8264-0x00BC8294 
	
			// Constructors
			internal Display(string displayName); // 0x00BC8228-0x00BC8254
	
			// Methods
			private string GetInternalName(); // 0x00BC8294-0x00BC829C
		}
	
		// Methods
		internal static TypeIdentifier FromDisplay(string displayName); // 0x00BC81C4-0x00BC8228
	}

	internal interface ModifierSpec // TypeDefIndex: 386
	{
		// Methods
		Type Resolve(Type type);
		StringBuilder Append(StringBuilder sb);
	}

	internal class ArraySpec : ModifierSpec // TypeDefIndex: 387
	{
		// Fields
		private int dimensions; // 0x10
		private bool bound; // 0x14
	
		// Constructors
		internal ArraySpec(int dimensions, bool bound); // 0x00927420-0x00927460
	
		// Methods
		public Type Resolve(Type type); // 0x00927460-0x009274F4
		public StringBuilder Append(StringBuilder sb); // 0x009274F4-0x009275C8
		public override string ToString(); // 0x009275C8-0x00927648
	}

	internal class PointerSpec : ModifierSpec // TypeDefIndex: 388
	{
		// Fields
		private int pointer_level; // 0x10
	
		// Constructors
		internal PointerSpec(int pointer_level); // 0x0090A080-0x0090A088
	
		// Methods
		public Type Resolve(Type type); // 0x0090A088-0x0090A0F8
		public StringBuilder Append(StringBuilder sb); // 0x0090A0F8-0x0090A134
		public override string ToString(); // 0x0090A134-0x0090A1B4
	}

	internal class TypeSpec // TypeDefIndex: 389
	{
		// Fields
		private TypeIdentifier name; // 0x10
		private string assembly_name; // 0x18
		private List<TypeIdentifier> nested; // 0x20
		private List<TypeSpec> generic_params; // 0x28
		private List<ModifierSpec> modifier_spec; // 0x30
		private bool is_byref; // 0x38
		private string display_fullname; // 0x40
	
		// Properties
		internal bool HasModifiers { get; } // 0x00BCA74C-0x00BCA75C 
		internal string DisplayFullName { get; } // 0x00BCAC68-0x00BCAC9C 
	
		// Nested types
		[Flags] // 0x00395010-0x00395020
		internal enum DisplayNameFormat // TypeDefIndex: 390
		{
			Default = 0,
			WANT_ASSEMBLY = 1,
			NO_MODIFIERS = 2
		}
	
		// Constructors
		public TypeSpec(); // 0x00BCBEB8-0x00BCBEC0
	
		// Methods
		private string GetDisplayFullName(DisplayNameFormat flags); // 0x00BCA75C-0x00BCAC68
		private StringBuilder GetModifierString(StringBuilder sb); // 0x00BCAC9C-0x00BCAE50
		internal static TypeSpec Parse(string typeName); // 0x00BC8C44-0x00BC8D44
		internal static string UnescapeInternalName(string displayName); // 0x00BC829C-0x00BC8404
		internal Type Resolve(Func<AssemblyName, Assembly> assemblyResolver, Func<Assembly, string, bool, Type> typeResolver, bool throwOnError, bool ignoreCase); // 0x00BC8D44-0x00BCA5BC
		private void AddName(string type_name); // 0x00BCBBA8-0x00BCBC84
		private void AddModifier(ModifierSpec md); // 0x00BCBC88-0x00BCBD24
		private static void SkipSpace(string name, ref int pos); // 0x00BCBD24-0x00BCBDFC
		private static void BoundCheck(int idx, string s); // 0x00BCBDFC-0x00BCBEB8
		private static TypeIdentifier ParsedTypeIdentifier(string displayName); // 0x00BCBC84-0x00BCBC88
		private static TypeSpec Parse(string name, ref int p, bool is_recurse, bool allow_aqn); // 0x00BCAE50-0x00BCBBA8
	}

	[Serializable]
	[CLSCompliant] // 0x00395020-0x00395060
	[ComVisible] // 0x00395020-0x00395060
	public struct UIntPtr : ISerializable // TypeDefIndex: 391
	{
		// Fields
		public static readonly UIntPtr Zero; // 0x00
		private unsafe void* _pointer; // 0x00
	
		// Properties
		public static int Size { get; } // 0x00BCE994-0x00BCE99C 
	
		// Constructors
		public unsafe UIntPtr(uint value); // 0x00BCE874-0x00BCE908
		static UIntPtr(); // 0x00BCEA64-0x00BCEAAC
	
		// Methods
		public override bool Equals(object obj); // 0x00BCE908-0x00BCE910
		public override int GetHashCode(); // 0x00BCE910-0x00BCE994
		public override string ToString(); // 0x00BCE99C-0x00BCEA50
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00BCEA50-0x00BCEA58
		public static bool operator ==(UIntPtr value1, UIntPtr value2); // 0x00BCEA58-0x00BCEA64
	}

	[Serializable]
	[ComVisible] // 0x00395060-0x00395074
	public abstract class ValueType // TypeDefIndex: 392
	{
		// Constructors
		protected ValueType(); // 0x00BD0E88-0x00BD0E90
	
		// Methods
		private static bool InternalEquals(object o1, object o2, out object[] fields); // 0x00BD0E90-0x00BD0E94
		internal static bool DefaultEquals(object o1, object o2); // 0x00BD0E94-0x00BD113C
		public override bool Equals(object obj); // 0x00BD113C-0x00BD1140
		internal static int InternalGetHashCode(object o, out object[] fields); // 0x00BD1140-0x00BD1144
		public override int GetHashCode(); // 0x00BD1144-0x00BD1240
		public override string ToString(); // 0x00BD1240-0x00BD135C
	}

	internal struct Variant // TypeDefIndex: 393
	{
		// Fields
		public short vt; // 0x00
		public ushort wReserved1; // 0x02
		public ushort wReserved2; // 0x04
		public ushort wReserved3; // 0x06
		public long llVal; // 0x08
		public int lVal; // 0x08
		public byte bVal; // 0x08
		public short iVal; // 0x08
		public float fltVal; // 0x08
		public double dblVal; // 0x08
		public short boolVal; // 0x08
		public IntPtr bstrVal; // 0x08
		public sbyte cVal; // 0x08
		public ushort uiVal; // 0x08
		public uint ulVal; // 0x08
		public ulong ullVal; // 0x08
		public int intVal; // 0x08
		public uint uintVal; // 0x08
		public IntPtr pdispVal; // 0x08
		public BRECORD bRecord; // 0x08
	
		// Methods
		public void Clear(); // 0x00BD135C-0x00BD1364
	}

	internal struct BRECORD // TypeDefIndex: 394
	{
		// Fields
		private IntPtr pvRecord; // 0x00
		private IntPtr pRecInfo; // 0x08
	}

	[Serializable]
	[ComVisible] // 0x00395074-0x00395088
	public struct Void // TypeDefIndex: 395
	{
	}

	[Serializable]
	[ComVisible] // 0x00395088-0x0039509C
	public class WeakReference : ISerializable // TypeDefIndex: 396
	{
		// Fields
		private bool isLongReference; // 0x10
		private GCHandle gcHandle; // 0x14
	
		// Properties
		public virtual object Target { get; set; } // 0x00BD2DA8-0x00BD2DEC 0x00BD2DEC-0x00BD2DF8
		public virtual bool TrackResurrection { get; } // 0x00BD2DF8-0x00BD2E00 
	
		// Constructors
		protected WeakReference(); // 0x00BD2BF4-0x00BD2BFC
		public WeakReference(object target); // 0x00BD2BFC-0x00BD2C3C
		public WeakReference(object target, bool trackResurrection); // 0x00BD2C3C-0x00BD2C88
		protected WeakReference(SerializationInfo info, StreamingContext context); // 0x00BD2C88-0x00BD2DA8
	
		// Methods
		private void AllocateHandle(object target); // 0x00BD2BC0-0x00BD2BF4
		~WeakReference(); // 0x00BD2E00-0x00BD2E7C
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00BD2E7C-0x00BD3000
	}

	internal struct InputRecord // TypeDefIndex: 397
	{
		// Fields
		public short EventType; // 0x00
		public bool KeyDown; // 0x02
		public short RepeatCount; // 0x04
		public short VirtualKeyCode; // 0x06
		public short VirtualScanCode; // 0x08
		public char Character; // 0x0A
		public int ControlKeyState; // 0x0C
		private int pad1; // 0x10
		private bool pad2; // 0x14
	}

	internal struct Coord // TypeDefIndex: 398
	{
		// Fields
		public short X; // 0x00
		public short Y; // 0x02
	}

	internal struct SmallRect // TypeDefIndex: 399
	{
		// Fields
		public short Left; // 0x00
		public short Top; // 0x02
		public short Right; // 0x04
		public short Bottom; // 0x06
	}

	internal struct ConsoleScreenBufferInfo // TypeDefIndex: 400
	{
		// Fields
		public Coord Size; // 0x00
		public Coord CursorPosition; // 0x04
		public short Attribute; // 0x08
		public SmallRect Window; // 0x0A
		public Coord MaxWindowSize; // 0x12
	}

	internal enum Handles // TypeDefIndex: 401
	{
		STD_ERROR = -12,
		STD_OUTPUT = -11,
		STD_INPUT = -10
	}

	internal class WindowsConsoleDriver : IConsoleDriver // TypeDefIndex: 402
	{
		// Fields
		private IntPtr inputHandle; // 0x10
		private IntPtr outputHandle; // 0x18
		private short defaultAttribute; // 0x20
	
		// Constructors
		public WindowsConsoleDriver(); // 0x00BD3000-0x00BD3060
	
		// Methods
		public ConsoleKeyInfo ReadKey(bool intercept); // 0x00BD31C0-0x00BD3340
		private static bool IsModifierKey(short virtualKeyCode); // 0x00BD344C-0x00BD3480
		private static extern IntPtr GetStdHandle(Handles handle); // 0x00BD3060-0x00BD3104
		private static extern bool GetConsoleScreenBufferInfo(IntPtr handle, out ConsoleScreenBufferInfo info); // 0x00BD3104-0x00BD31C0
		private static extern bool ReadConsoleInput(IntPtr handle, out InputRecord record, int length, out int nread); // 0x00BD3340-0x00BD344C
	}

	internal class __ComObject // TypeDefIndex: 403
	{
		// Constructors
		private __ComObject(); // 0x00BD3480-0x00BD3638
	}
}

namespace System.Configuration.Assemblies
{
	[Serializable]
	[ComVisible] // 0x0039509C-0x003950B0
	public enum AssemblyHashAlgorithm // TypeDefIndex: 404
	{
		None = 0,
		MD5 = 32771,
		SHA1 = 32772,
		SHA256 = 32780,
		SHA384 = 32781,
		SHA512 = 32782
	}

	[Serializable]
	[ComVisible] // 0x003950B0-0x003950C4
	public enum AssemblyVersionCompatibility // TypeDefIndex: 405
	{
		SameMachine = 1,
		SameProcess = 2,
		SameDomain = 3
	}
}

namespace System.Text
{
	[Serializable]
	[ComVisible] // 0x003950C4-0x003950D8
	public class ASCIIEncoding : Encoding // TypeDefIndex: 406
	{
		// Constructors
		public ASCIIEncoding(); // 0x008BAAF4-0x008BAAFC
	
		// Methods
		internal override void SetDefaultFallbacks(); // 0x008BABB4-0x008BABE0
		public override int GetByteCount(char[] chars, int index, int count); // 0x008BAE68-0x008BB040
		public override int GetByteCount(string chars); // 0x008BB040-0x008BB108
		[CLSCompliant] // 0x0039DBF0-0x0039DC30
		[ComVisible] // 0x0039DBF0-0x0039DC30
		public override unsafe int GetByteCount(char* chars, int count); // 0x008BB108-0x008BB22C
		public override int GetBytes(string chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x008BB22C-0x008BB4AC
		public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x008BB4AC-0x008BB744
		[CLSCompliant] // 0x0039DC30-0x0039DC70
		[ComVisible] // 0x0039DC30-0x0039DC70
		public override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount); // 0x008BB744-0x008BB8B0
		public override int GetCharCount(byte[] bytes, int index, int count); // 0x008BB8B0-0x008BBA88
		[CLSCompliant] // 0x0039DC70-0x0039DCB0
		[ComVisible] // 0x0039DC70-0x0039DCB0
		public override unsafe int GetCharCount(byte* bytes, int count); // 0x008BBA88-0x008BBBAC
		public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x008BBBAC-0x008BBE44
		[CLSCompliant] // 0x0039DCB0-0x0039DCF0
		[ComVisible] // 0x0039DCB0-0x0039DCF0
		public override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount); // 0x008BBE44-0x008BBFB0
		public override string GetString(byte[] bytes, int byteIndex, int byteCount); // 0x008BBFB0-0x008BC18C
		internal override unsafe int GetByteCount(char* chars, int charCount, EncoderNLS encoder); // 0x008BC18C-0x008BC530
		internal override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, EncoderNLS encoder); // 0x008BC604-0x008BCADC
		internal override unsafe int GetCharCount(byte* bytes, int count, DecoderNLS decoder); // 0x008BCB74-0x008BCCF8
		internal override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount, DecoderNLS decoder); // 0x008BCD68-0x008BD050
		public override int GetMaxByteCount(int charCount); // 0x008BD0F0-0x008BD218
		public override int GetMaxCharCount(int byteCount); // 0x008BD218-0x008BD33C
		[ComVisible] // 0x0039DCF0-0x0039DD04
		public override Decoder GetDecoder(); // 0x008BD33C-0x008BD39C
		[ComVisible] // 0x0039DD04-0x0039DD18
		public override Encoder GetEncoder(); // 0x008BD3E8-0x008BD448
	}

	[Serializable]
	[ComVisible] // 0x003950D8-0x003950EC
	public abstract class Decoder // TypeDefIndex: 407
	{
		// Fields
		internal DecoderFallback m_fallback; // 0x10
		[NonSerialized]
		internal DecoderFallbackBuffer m_fallbackBuffer; // 0x18
	
		// Properties
		[ComVisible] // 0x0039FAD8-0x0039FAEC
		public DecoderFallback Fallback { get; } // 0x008BCD00-0x008BCD08 
		[ComVisible] // 0x0039FAEC-0x0039FB00
		public DecoderFallbackBuffer FallbackBuffer { get; } // 0x008BCD08-0x008BCD60 
		internal bool InternalHasFallbackBuffer { get; } // 0x008BD510-0x008BD520 
	
		// Constructors
		protected Decoder(); // 0x008BD508-0x008BD510
	
		// Methods
		internal void SerializeDecoder(SerializationInfo info); // 0x008BD494-0x008BD508
		[ComVisible] // 0x0039DD18-0x0039DD2C
		public virtual void Reset(); // 0x008BD520-0x008BD5F4
		public abstract int GetCharCount(byte[] bytes, int index, int count);
		[ComVisible] // 0x0039DD2C-0x0039DD40
		public virtual int GetCharCount(byte[] bytes, int index, int count, bool flush); // 0x008BD5F4-0x008BD600
		[CLSCompliant] // 0x0039DD40-0x0039DD80
		[ComVisible] // 0x0039DD40-0x0039DD80
		public virtual unsafe int GetCharCount(byte* bytes, int count, bool flush); // 0x008BD600-0x008BD794
		public abstract int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
		public virtual int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush); // 0x008BD794-0x008BD7A0
		[CLSCompliant] // 0x0039DD80-0x0039DDC0
		[ComVisible] // 0x0039DD80-0x0039DDC0
		public virtual unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount, bool flush); // 0x008BD7A0-0x008BDA10
	}

	[Serializable]
	internal sealed class InternalDecoderBestFitFallback : DecoderFallback // TypeDefIndex: 408
	{
		// Fields
		internal Encoding encoding; // 0x18
		internal char[] arrayBestFit; // 0x20
		internal char cReplacement; // 0x28
	
		// Properties
		public override int MaxCharCount { get; } // 0x008C82E0-0x008C82E8 
	
		// Constructors
		internal InternalDecoderBestFitFallback(Encoding encoding); // 0x008C1E60-0x008C1E9C
	
		// Methods
		public override DecoderFallbackBuffer CreateFallbackBuffer(); // 0x008C814C-0x008C81AC
		public override bool Equals(object value); // 0x008C82E8-0x008C83BC
		public override int GetHashCode(); // 0x008C83BC-0x008C83F4
	}

	internal sealed class InternalDecoderBestFitFallbackBuffer : DecoderFallbackBuffer // TypeDefIndex: 409
	{
		// Fields
		internal char cBestFit; // 0x20
		internal int iCount; // 0x24
		internal int iSize; // 0x28
		private InternalDecoderBestFitFallback oFallback; // 0x30
		private static object s_InternalSyncObject; // 0x00
	
		// Properties
		private static object InternalSyncObject { get; } // 0x008C83F4-0x008C8484 
	
		// Constructors
		public InternalDecoderBestFitFallbackBuffer(InternalDecoderBestFitFallback fallback); // 0x008C81AC-0x008C82E0
	
		// Methods
		public override bool Fallback(byte[] bytesUnknown, int index); // 0x008C8484-0x008C84D4
		public override char GetNextChar(); // 0x008C87A4-0x008C87E4
		public override void Reset(); // 0x008C87E4-0x008C87F4
		internal override unsafe int InternalFallback(byte[] bytes, byte* pBytes); // 0x008C87F4-0x008C87FC
		private char TryBestFit(byte[] bytesCheck); // 0x008C84D4-0x008C87A4
	}

	[Serializable]
	public sealed class DecoderExceptionFallback : DecoderFallback // TypeDefIndex: 410
	{
		// Properties
		public override int MaxCharCount { get; } // 0x008BDA84-0x008BDA8C 
	
		// Constructors
		public DecoderExceptionFallback(); // 0x008BDA10-0x008BDA18
	
		// Methods
		public override DecoderFallbackBuffer CreateFallbackBuffer(); // 0x008BDA20-0x008BDA7C
		public override bool Equals(object value); // 0x008BDA8C-0x008BDAF0
		public override int GetHashCode(); // 0x008BDAF0-0x008BDAF8
	}

	public sealed class DecoderExceptionFallbackBuffer : DecoderFallbackBuffer // TypeDefIndex: 411
	{
		// Constructors
		public DecoderExceptionFallbackBuffer(); // 0x008BDA7C-0x008BDA84
	
		// Methods
		public override bool Fallback(byte[] bytesUnknown, int index); // 0x008BDAF8-0x008BDB04
		public override char GetNextChar(); // 0x008BDD84-0x008BDD8C
		private void Throw(byte[] bytesUnknown, int index); // 0x008BDB04-0x008BDD84
	}

	[Serializable]
	public sealed class DecoderFallbackException : ArgumentException // TypeDefIndex: 412
	{
		// Fields
		private byte[] bytesUnknown; // 0x90
		private int index; // 0x98
	
		// Constructors
		public DecoderFallbackException(); // 0x008BE78C-0x008BE800
		internal DecoderFallbackException(SerializationInfo info, StreamingContext context); // 0x008BE800-0x008BE808
		public DecoderFallbackException(string message, byte[] bytesUnknown, int index); // 0x008BDF50-0x008BDF8C
	}

	[Serializable]
	public abstract class DecoderFallback // TypeDefIndex: 413
	{
		// Fields
		internal bool bIsMicrosoftBestFitFallback; // 0x10
		private static DecoderFallback replacementFallback; // 0x00
		private static DecoderFallback exceptionFallback; // 0x08
		private static object s_InternalSyncObject; // 0x10
	
		// Properties
		private static object InternalSyncObject { get; } // 0x008BDF94-0x008BE028 
		public static DecoderFallback ReplacementFallback { get; } // 0x008BAD24-0x008BAE68 
		public static DecoderFallback ExceptionFallback { get; } // 0x008BE078-0x008BE1C0 
		public abstract int MaxCharCount { get; }
	
		// Constructors
		protected DecoderFallback(); // 0x008BDA18-0x008BDA20
	
		// Methods
		public abstract DecoderFallbackBuffer CreateFallbackBuffer();
	}

	public abstract class DecoderFallbackBuffer // TypeDefIndex: 414
	{
		// Fields
		internal unsafe byte* byteStart; // 0x10
		internal unsafe char* charEnd; // 0x18
	
		// Constructors
		protected DecoderFallbackBuffer(); // 0x008BDF8C-0x008BDF94
	
		// Methods
		public abstract bool Fallback(byte[] bytesUnknown, int index);
		public abstract char GetNextChar();
		public virtual void Reset(); // 0x008BE1C0-0x008BE1F4
		internal void InternalReset(); // 0x008BD0E0-0x008BD0F0
		internal unsafe void InternalInitialize(byte* byteStart, char* charEnd); // 0x008BCD60-0x008BCD68
		internal virtual unsafe bool InternalFallback(byte[] bytes, byte* pBytes, ref char* chars); // 0x008BE1F4-0x008BE3AC
		internal virtual unsafe int InternalFallback(byte[] bytes, byte* pBytes); // 0x008BE3AC-0x008BE54C
		internal void ThrowLastBytesRecursive(byte[] bytesUnknown); // 0x008BE54C-0x008BE78C
	}

	[Serializable]
	internal class DecoderNLS : Decoder, ISerializable // TypeDefIndex: 415
	{
		// Fields
		protected Encoding m_encoding; // 0x20
		[NonSerialized]
		protected bool m_mustFlush; // 0x28
		[NonSerialized]
		internal bool m_throwOnOverflow; // 0x29
		[NonSerialized]
		internal int m_bytesUsed; // 0x2C
	
		// Properties
		public bool MustFlush { get; } // 0x008BF1B4-0x008BF1BC 
		internal virtual bool HasState { get; } // 0x008BF1BC-0x008BF1C4 
	
		// Constructors
		internal DecoderNLS(SerializationInfo info, StreamingContext context); // 0x008BE808-0x008BE8F8
		internal DecoderNLS(Encoding encoding); // 0x008BD39C-0x008BD3E8
		internal DecoderNLS(); // 0x008BE9D0-0x008BEA04
	
		// Methods
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x008BE8F8-0x008BE9D0
		public override void Reset(); // 0x008BEA04-0x008BEA1C
		public override int GetCharCount(byte[] bytes, int index, int count); // 0x008BEA1C-0x008BEA2C
		public override int GetCharCount(byte[] bytes, int index, int count, bool flush); // 0x008BEA2C-0x008BEC10
		public override unsafe int GetCharCount(byte* bytes, int count, bool flush); // 0x008BEC10-0x008BED60
		public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x008BED60-0x008BED70
		public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush); // 0x008BED70-0x008BF01C
		public override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount, bool flush); // 0x008BF01C-0x008BF1B4
		internal void ClearMustFlush(); // 0x008BF1C4-0x008BF1CC
	}

	[Serializable]
	public sealed class DecoderReplacementFallback : DecoderFallback // TypeDefIndex: 416
	{
		// Fields
		private string strDefault; // 0x18
	
		// Properties
		public string DefaultString { get; } // 0x008BD050-0x008BD058 
		public override int MaxCharCount { get; } // 0x008BF464-0x008BF494 
	
		// Constructors
		public DecoderReplacementFallback(); // 0x008BE028-0x008BE078
		public DecoderReplacementFallback(string replacement); // 0x008BF1CC-0x008BF3C0
	
		// Methods
		public override DecoderFallbackBuffer CreateFallbackBuffer(); // 0x008BF3C0-0x008BF420
		public override bool Equals(object value); // 0x008BF494-0x008BF530
		public override int GetHashCode(); // 0x008BF530-0x008BF564
	}

	public sealed class DecoderReplacementFallbackBuffer : DecoderFallbackBuffer // TypeDefIndex: 417
	{
		// Fields
		private string strDefault; // 0x20
		private int fallbackCount; // 0x28
		private int fallbackIndex; // 0x2C
	
		// Constructors
		public DecoderReplacementFallbackBuffer(DecoderReplacementFallback fallback); // 0x008BF420-0x008BF464
	
		// Methods
		public override bool Fallback(byte[] bytesUnknown, int index); // 0x008BF564-0x008BF5D8
		public override char GetNextChar(); // 0x008BF5D8-0x008BF644
		public override void Reset(); // 0x008BF644-0x008BF654
		internal override unsafe int InternalFallback(byte[] bytes, byte* pBytes); // 0x008BF654-0x008BF684
	}

	[Serializable]
	[ComVisible] // 0x003950EC-0x00395100
	public abstract class Encoder // TypeDefIndex: 418
	{
		// Fields
		internal EncoderFallback m_fallback; // 0x10
		[NonSerialized]
		internal EncoderFallbackBuffer m_fallbackBuffer; // 0x18
	
		// Properties
		[ComVisible] // 0x0039FB00-0x0039FB14
		public EncoderFallback Fallback { get; } // 0x008BC530-0x008BC538 
		[ComVisible] // 0x0039FB14-0x0039FB28
		public EncoderFallbackBuffer FallbackBuffer { get; } // 0x008BC548-0x008BC5A0 
		internal bool InternalHasFallbackBuffer { get; } // 0x008BC538-0x008BC548 
	
		// Constructors
		protected Encoder(); // 0x008BF6F8-0x008BF700
	
		// Methods
		internal void SerializeEncoder(SerializationInfo info); // 0x008BF684-0x008BF6F8
		[ComVisible] // 0x0039DDC0-0x0039DDD4
		public virtual void Reset(); // 0x008BF700-0x008BF7D4
		public abstract int GetByteCount(char[] chars, int index, int count, bool flush);
		[CLSCompliant] // 0x0039DDD4-0x0039DE14
		[ComVisible] // 0x0039DDD4-0x0039DE14
		public virtual unsafe int GetByteCount(char* chars, int count, bool flush); // 0x008BF7D4-0x008BF97C
		public abstract int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush);
		[CLSCompliant] // 0x0039DE14-0x0039DE54
		[ComVisible] // 0x0039DE14-0x0039DE54
		public virtual unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, bool flush); // 0x008BF97C-0x008BFBF0
	}

	[Serializable]
	internal class InternalEncoderBestFitFallback : EncoderFallback // TypeDefIndex: 419
	{
		// Fields
		internal Encoding encoding; // 0x18
		internal char[] arrayBestFit; // 0x20
	
		// Properties
		public override int MaxCharCount { get; } // 0x008C8990-0x008C8998 
	
		// Constructors
		internal InternalEncoderBestFitFallback(Encoding encoding); // 0x008C1E2C-0x008C1E60
	
		// Methods
		public override EncoderFallbackBuffer CreateFallbackBuffer(); // 0x008C87FC-0x008C885C
		public override bool Equals(object value); // 0x008C8998-0x008C8A88
		public override int GetHashCode(); // 0x008C8A88-0x008C8AC0
	}

	internal sealed class InternalEncoderBestFitFallbackBuffer : EncoderFallbackBuffer // TypeDefIndex: 420
	{
		// Fields
		private char cBestFit; // 0x30
		private InternalEncoderBestFitFallback oFallback; // 0x38
		private int iCount; // 0x40
		private int iSize; // 0x44
		private static object s_InternalSyncObject; // 0x00
	
		// Properties
		private static object InternalSyncObject { get; } // 0x008C8AC0-0x008C8B50 
		public override int Remaining { get; } // 0x008C9058-0x008C9064 
	
		// Constructors
		public InternalEncoderBestFitFallbackBuffer(InternalEncoderBestFitFallback fallback); // 0x008C885C-0x008C8990
	
		// Methods
		public override bool Fallback(char charUnknown, int index); // 0x008C8B50-0x008C8B8C
		public override bool Fallback(char charUnknownHigh, char charUnknownLow, int index); // 0x008C8D44-0x008C8FEC
		public override char GetNextChar(); // 0x008C8FEC-0x008C902C
		public override bool MovePrevious(); // 0x008C902C-0x008C9058
		public override void Reset(); // 0x008C9064-0x008C9078
		private char TryBestFit(char cUnknown); // 0x008C8B8C-0x008C8D44
	}

	[Serializable]
	public sealed class EncoderExceptionFallback : EncoderFallback // TypeDefIndex: 421
	{
		// Properties
		public override int MaxCharCount { get; } // 0x008BFC64-0x008BFC6C 
	
		// Constructors
		public EncoderExceptionFallback(); // 0x008BFBF0-0x008BFBF8
	
		// Methods
		public override EncoderFallbackBuffer CreateFallbackBuffer(); // 0x008BFC00-0x008BFC5C
		public override bool Equals(object value); // 0x008BFC6C-0x008BFCD0
		public override int GetHashCode(); // 0x008BFCD0-0x008BFCD8
	}

	public sealed class EncoderExceptionFallbackBuffer : EncoderFallbackBuffer // TypeDefIndex: 422
	{
		// Properties
		public override int Remaining { get; } // 0x008C04D0-0x008C04D8 
	
		// Constructors
		public EncoderExceptionFallbackBuffer(); // 0x008BFC5C-0x008BFC64
	
		// Methods
		public override bool Fallback(char charUnknown, int index); // 0x008BFCE0-0x008BFE20
		public override bool Fallback(char charUnknownHigh, char charUnknownLow, int index); // 0x008BFE5C-0x008C0200
		public override char GetNextChar(); // 0x008C04C0-0x008C04C8
		public override bool MovePrevious(); // 0x008C04C8-0x008C04D0
	}

	[Serializable]
	public sealed class EncoderFallbackException : ArgumentException // TypeDefIndex: 423
	{
		// Fields
		private char charUnknown; // 0x90
		private char charUnknownHigh; // 0x92
		private char charUnknownLow; // 0x94
		private int index; // 0x98
	
		// Constructors
		public EncoderFallbackException(); // 0x008C0A24-0x008C0A98
		internal EncoderFallbackException(SerializationInfo info, StreamingContext context); // 0x008C0A98-0x008C0AA0
		internal EncoderFallbackException(string message, char charUnknown, int index); // 0x008BFE20-0x008BFE5C
		internal EncoderFallbackException(string message, char charUnknownHigh, char charUnknownLow, int index); // 0x008C0200-0x008C04C0
	}

	[Serializable]
	public abstract class EncoderFallback // TypeDefIndex: 424
	{
		// Fields
		internal bool bIsMicrosoftBestFitFallback; // 0x10
		private static EncoderFallback replacementFallback; // 0x00
		private static EncoderFallback exceptionFallback; // 0x08
		private static object s_InternalSyncObject; // 0x10
	
		// Properties
		private static object InternalSyncObject { get; } // 0x008C04D8-0x008C056C 
		public static EncoderFallback ReplacementFallback { get; } // 0x008BABE0-0x008BAD24 
		public static EncoderFallback ExceptionFallback { get; } // 0x008C05BC-0x008C0704 
		public abstract int MaxCharCount { get; }
	
		// Constructors
		protected EncoderFallback(); // 0x008BFBF8-0x008BFC00
	
		// Methods
		public abstract EncoderFallbackBuffer CreateFallbackBuffer();
	}

	public abstract class EncoderFallbackBuffer // TypeDefIndex: 425
	{
		// Fields
		internal unsafe char* charStart; // 0x10
		internal unsafe char* charEnd; // 0x18
		internal EncoderNLS encoder; // 0x20
		internal bool setEncoder; // 0x28
		internal bool bUsedEncoder; // 0x29
		internal bool bFallingBack; // 0x2A
		internal int iRecursionCount; // 0x2C
	
		// Properties
		public abstract int Remaining { get; }
	
		// Constructors
		protected EncoderFallbackBuffer(); // 0x008BFCD8-0x008BFCE0
	
		// Methods
		public abstract bool Fallback(char charUnknown, int index);
		public abstract bool Fallback(char charUnknownHigh, char charUnknownLow, int index);
		public abstract char GetNextChar();
		public abstract bool MovePrevious();
		public virtual void Reset(); // 0x008C0704-0x008C0738
		internal void InternalReset(); // 0x008C0738-0x008C0750
		internal unsafe void InternalInitialize(char* charStart, char* charEnd, EncoderNLS encoder, bool setEncoder); // 0x008BC5A0-0x008BC5BC
		internal char InternalGetNextChar(); // 0x008BC5C4-0x008BC604
		internal virtual unsafe bool InternalFallback(char ch, ref char* chars); // 0x008C0750-0x008C0920
		internal void ThrowLastCharRecursive(int charRecursive); // 0x008C0928-0x008C0A24
	}

	[Serializable]
	internal class EncoderNLS : Encoder, ISerializable // TypeDefIndex: 426
	{
		// Fields
		internal char charLeftOver; // 0x20
		protected Encoding m_encoding; // 0x28
		[NonSerialized]
		protected bool m_mustFlush; // 0x30
		[NonSerialized]
		internal bool m_throwOnOverflow; // 0x31
		[NonSerialized]
		internal int m_charsUsed; // 0x34
	
		// Properties
		public Encoding Encoding { get; } // 0x008C1460-0x008C1468 
		public bool MustFlush { get; } // 0x008C0920-0x008C0928 
	
		// Constructors
		internal EncoderNLS(SerializationInfo info, StreamingContext context); // 0x008C0AA0-0x008C0B90
		internal EncoderNLS(Encoding encoding); // 0x008BD448-0x008BD494
		internal EncoderNLS(); // 0x008C0C94-0x008C0CC8
	
		// Methods
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x008C0B90-0x008C0C94
		public override void Reset(); // 0x008C0CC8-0x008C0CE8
		public override int GetByteCount(char[] chars, int index, int count, bool flush); // 0x008C0CE8-0x008C0ECC
		public override unsafe int GetByteCount(char* chars, int count, bool flush); // 0x008C0ECC-0x008C101C
		public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush); // 0x008C101C-0x008C12C8
		public override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, bool flush); // 0x008C12C8-0x008C1460
		internal void ClearMustFlush(); // 0x008C1468-0x008C1470
	}

	[Serializable]
	public sealed class EncoderReplacementFallback : EncoderFallback // TypeDefIndex: 427
	{
		// Fields
		private string strDefault; // 0x18
	
		// Properties
		public string DefaultString { get; } // 0x008BCADC-0x008BCAE4 
		public override int MaxCharCount { get; } // 0x008C1738-0x008C1768 
	
		// Constructors
		public EncoderReplacementFallback(); // 0x008C056C-0x008C05BC
		public EncoderReplacementFallback(string replacement); // 0x008C1470-0x008C1664
	
		// Methods
		public override EncoderFallbackBuffer CreateFallbackBuffer(); // 0x008C1664-0x008C16C4
		public override bool Equals(object value); // 0x008C1768-0x008C1804
		public override int GetHashCode(); // 0x008C1804-0x008C1838
	}

	public sealed class EncoderReplacementFallbackBuffer : EncoderFallbackBuffer // TypeDefIndex: 428
	{
		// Fields
		private string strDefault; // 0x30
		private int fallbackCount; // 0x38
		private int fallbackIndex; // 0x3C
	
		// Properties
		public override int Remaining { get; } // 0x008C1D60-0x008C1D6C 
	
		// Constructors
		public EncoderReplacementFallbackBuffer(EncoderReplacementFallback fallback); // 0x008C16C4-0x008C1738
	
		// Methods
		public override bool Fallback(char charUnknown, int index); // 0x008C1838-0x008C19C4
		public override bool Fallback(char charUnknownHigh, char charUnknownLow, int index); // 0x008C19C4-0x008C1CC4
		public override char GetNextChar(); // 0x008C1CC4-0x008C1D30
		public override bool MovePrevious(); // 0x008C1D30-0x008C1D60
		public override void Reset(); // 0x008C1D6C-0x008C1D80
	}

	[Serializable]
	[ComVisible] // 0x00395100-0x00395114
	public abstract class Encoding : ICloneable // TypeDefIndex: 429
	{
		// Fields
		private static Encoding defaultEncoding; // 0x00
		private static Encoding unicodeEncoding; // 0x08
		private static Encoding bigEndianUnicode; // 0x10
		private static Encoding utf7Encoding; // 0x18
		private static Encoding utf8Encoding; // 0x20
		private static Encoding utf32Encoding; // 0x28
		private static Encoding asciiEncoding; // 0x30
		private static Encoding latin1Encoding; // 0x38
		private static Hashtable encodings; // 0x40
		internal int m_codePage; // 0x10
		internal CodePageDataItem dataItem; // 0x18
		[NonSerialized]
		internal bool m_deserializedFromEverett; // 0x20
		[OptionalField] // 0x0039BAD8-0x0039BB10
		private bool m_isReadOnly; // 0x21
		[OptionalField] // 0x0039BB10-0x0039BB48
		internal EncoderFallback encoderFallback; // 0x28
		[OptionalField] // 0x0039BB48-0x0039BB80
		internal DecoderFallback decoderFallback; // 0x30
		private static object s_InternalSyncObject; // 0x48
	
		// Properties
		private static object InternalSyncObject { get; } // 0x008C242C-0x008C24C0 
		public virtual string EncodingName { get; } // 0x008C3D84-0x008C3D90 
		public virtual string HeaderName { get; } // 0x008C3D90-0x008C3DD0 
		public virtual string WebName { get; } // 0x008C3DD0-0x008C3E10 
		[ComVisible] // 0x0039FB28-0x0039FB3C
		public EncoderFallback EncoderFallback { get; set; } // 0x008BC5BC-0x008BC5C4 0x008C3E10-0x008C3EFC
		[ComVisible] // 0x0039FB3C-0x0039FB50
		public DecoderFallback DecoderFallback { get; set; } // 0x008BCCF8-0x008BCD00 0x008C3F04-0x008C3FF0
		[ComVisible] // 0x0039FB50-0x0039FB64
		public bool IsReadOnly { get; } // 0x008C3EFC-0x008C3F04 
		public static Encoding ASCII { get; } // 0x008BAA58-0x008BAAF4 
		private static Encoding Latin1 { get; } // 0x008C3364-0x008C3400 
		public virtual int CodePage { get; } // 0x008C4D44-0x008C4D4C 
		public static Encoding Default { get; } // 0x008C2FB8-0x008C303C 
		public static Encoding Unicode { get; } // 0x008C303C-0x008C30E0 
		public static Encoding BigEndianUnicode { get; } // 0x008C30E0-0x008C3184 
		public static Encoding UTF7 { get; } // 0x008C3184-0x008C3220 
		public static Encoding UTF8 { get; } // 0x008C32C4-0x008C3364 
		public static Encoding UTF32 { get; } // 0x008C3220-0x008C32C4 
	
		// Nested types
		[Serializable]
		internal class DefaultEncoder : Encoder, ISerializable, IObjectReference // TypeDefIndex: 430
		{
			// Fields
			private Encoding m_encoding; // 0x20
			[NonSerialized]
			private bool m_hasInitializedEncoding; // 0x28
			[NonSerialized]
			internal char charLeftOver; // 0x2A
	
			// Constructors
			public DefaultEncoder(Encoding encoding); // 0x008C507C-0x008C50B0
			internal DefaultEncoder(SerializationInfo info, StreamingContext context); // 0x008C5BF0-0x008C5F0C
	
			// Methods
			public object GetRealObject(StreamingContext context); // 0x008C5F0C-0x008C5FEC
			void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x008C5FEC-0x008C6098
			public override int GetByteCount(char[] chars, int index, int count, bool flush); // 0x008C6098-0x008C60EC
			public override unsafe int GetByteCount(char* chars, int count, bool flush); // 0x008C60EC-0x008C6138
			public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush); // 0x008C6138-0x008C61A8
			public override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, bool flush); // 0x008C61A8-0x008C6210
		}
	
		[Serializable]
		internal class DefaultDecoder : Decoder, ISerializable, IObjectReference // TypeDefIndex: 431
		{
			// Fields
			private Encoding m_encoding; // 0x20
			[NonSerialized]
			private bool m_hasInitializedEncoding; // 0x28
	
			// Constructors
			public DefaultDecoder(Encoding encoding); // 0x008C4DB8-0x008C4DEC
			internal DefaultDecoder(SerializationInfo info, StreamingContext context); // 0x008C5670-0x008C593C
	
			// Methods
			public object GetRealObject(StreamingContext context); // 0x008C593C-0x008C59A4
			void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x008C59A4-0x008C5A50
			public override int GetCharCount(byte[] bytes, int index, int count); // 0x008C5A50-0x008C5A60
			public override int GetCharCount(byte[] bytes, int index, int count, bool flush); // 0x008C5A60-0x008C5AB8
			public override unsafe int GetCharCount(byte* bytes, int count, bool flush); // 0x008C5AB8-0x008C5B08
			public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x008C5B08-0x008C5B18
			public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush); // 0x008C5B18-0x008C5B88
			public override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount, bool flush); // 0x008C5B88-0x008C5BF0
		}
	
		internal class EncodingCharBuffer // TypeDefIndex: 432
		{
			// Fields
			private unsafe char* chars; // 0x10
			private unsafe char* charStart; // 0x18
			private unsafe char* charEnd; // 0x20
			private int charCountResult; // 0x28
			private Encoding enc; // 0x30
			private DecoderNLS decoder; // 0x38
			private unsafe byte* byteStart; // 0x40
			private unsafe byte* byteEnd; // 0x48
			private unsafe byte* bytes; // 0x50
			private DecoderFallbackBuffer fallbackBuffer; // 0x58
	
			// Properties
			internal bool MoreData { get; } // 0x008C687C-0x008C688C 
			internal int BytesUsed { get; } // 0x008C68B0-0x008C68C0 
			internal int Count { get; } // 0x008C6A88-0x008C6A90 
	
			// Constructors
			internal unsafe EncodingCharBuffer(Encoding enc, DecoderNLS decoder, char* charStart, int charCount, byte* byteStart, int byteCount); // 0x008C670C-0x008C67D8
	
			// Methods
			internal bool AddChar(char ch, int numBytes); // 0x008C67D8-0x008C6864
			internal bool AddChar(char ch); // 0x008C6864-0x008C686C
			internal void AdjustBytes(int count); // 0x008C686C-0x008C687C
			internal byte GetNextByte(); // 0x008C688C-0x008C68B0
			internal bool Fallback(byte fallbackByte); // 0x008C68C0-0x008C6950
			internal bool Fallback(byte[] byteBuffer); // 0x008C6950-0x008C6A88
		}
	
		internal class EncodingByteBuffer // TypeDefIndex: 433
		{
			// Fields
			private unsafe byte* bytes; // 0x10
			private unsafe byte* byteStart; // 0x18
			private unsafe byte* byteEnd; // 0x20
			private unsafe char* chars; // 0x28
			private unsafe char* charStart; // 0x30
			private unsafe char* charEnd; // 0x38
			private int byteCountResult; // 0x40
			private Encoding enc; // 0x48
			private EncoderNLS encoder; // 0x50
			internal EncoderFallbackBuffer fallbackBuffer; // 0x58
	
			// Properties
			internal bool MoreData { get; } // 0x008C661C-0x008C6678 
			internal int CharsUsed { get; } // 0x008C66EC-0x008C6704 
			internal int Count { get; } // 0x008C6704-0x008C670C 
	
			// Constructors
			internal unsafe EncodingByteBuffer(Encoding inEncoding, EncoderNLS inEncoder, byte* inByteStart, int inByteCount, char* inCharStart, int inCharCount); // 0x008C6210-0x008C64A8
	
			// Methods
			internal bool AddByte(byte b, int moreBytesExpected); // 0x008C64A8-0x008C64FC
			internal bool AddByte(byte b1); // 0x008C65B4-0x008C65BC
			internal bool AddByte(byte b1, byte b2); // 0x008C65BC-0x008C65C4
			internal bool AddByte(byte b1, byte b2, int moreBytesExpected); // 0x008C65C4-0x008C661C
			internal void MovePrevious(bool bThrow); // 0x008C64FC-0x008C65B4
			internal char GetNextChar(); // 0x008C6678-0x008C66EC
		}
	
		// Constructors
		protected Encoding(); // 0x008C1D80-0x008C1D88
		protected Encoding(int codePage); // 0x008BAAFC-0x008BABB4
	
		// Methods
		internal virtual void SetDefaultFallbacks(); // 0x008C1D88-0x008C1E2C
		internal void OnDeserializing(); // 0x008C1E9C-0x008C1EAC
		internal void OnDeserialized(); // 0x008C1EAC-0x008C1EF4
		[OnDeserializing] // 0x0039DE54-0x0039DE64
		private void OnDeserializing(StreamingContext ctx); // 0x008C1EF4-0x008C1F04
		[OnDeserialized] // 0x0039DE64-0x0039DE74
		private void OnDeserialized(StreamingContext ctx); // 0x008C1F04-0x008C1F4C
		[OnSerializing] // 0x0039DE74-0x0039DE84
		private void OnSerializing(StreamingContext ctx); // 0x008C1F4C-0x008C1F54
		internal void DeserializeEncoding(SerializationInfo info, StreamingContext context); // 0x008C1F54-0x008C22D8
		internal void SerializeEncoding(SerializationInfo info, StreamingContext context); // 0x008C22D8-0x008C242C
		public static Encoding GetEncoding(int codepage); // 0x008C24C0-0x008C2EA4
		public static Encoding GetEncoding(string name); // 0x008C3A20-0x008C3AC4
		public virtual byte[] GetPreamble(); // 0x008C3BD8-0x008C3C40
		private void GetDataItem(); // 0x008C3C40-0x008C3D84
		[ComVisible] // 0x0039DE84-0x0039DE98
		public virtual object Clone(); // 0x008C3FF0-0x008C40CC
		public virtual int GetByteCount(string s); // 0x008C40D4-0x008C4198
		public abstract int GetByteCount(char[] chars, int index, int count);
		[CLSCompliant] // 0x0039DE98-0x0039DED8
		[ComVisible] // 0x0039DE98-0x0039DED8
		public virtual unsafe int GetByteCount(char* chars, int count); // 0x008C4198-0x008C4330
		internal virtual unsafe int GetByteCount(char* chars, int count, EncoderNLS encoder); // 0x008C4330-0x008C433C
		public virtual byte[] GetBytes(char[] chars, int index, int count); // 0x008C433C-0x008C43FC
		public abstract int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
		public virtual byte[] GetBytes(string s); // 0x008C43FC-0x008C4518
		public virtual int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x008C4518-0x008C45FC
		internal virtual unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, EncoderNLS encoder); // 0x008C45FC-0x008C460C
		[CLSCompliant] // 0x0039DED8-0x0039DF18
		[ComVisible] // 0x0039DED8-0x0039DF18
		public virtual unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount); // 0x008C460C-0x008C486C
		public abstract int GetCharCount(byte[] bytes, int index, int count);
		[CLSCompliant] // 0x0039DF18-0x0039DF58
		[ComVisible] // 0x0039DF18-0x0039DF58
		public virtual unsafe int GetCharCount(byte* bytes, int count); // 0x008C486C-0x008C4A04
		internal virtual unsafe int GetCharCount(byte* bytes, int count, DecoderNLS decoder); // 0x008C4A04-0x008C4A14
		public virtual char[] GetChars(byte[] bytes, int index, int count); // 0x008C4A14-0x008C4AD8
		public abstract int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
		[CLSCompliant] // 0x0039DF58-0x0039DF98
		[ComVisible] // 0x0039DF58-0x0039DF98
		public virtual unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount); // 0x008C4AD8-0x008C4D34
		internal virtual unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount, DecoderNLS decoder); // 0x008C4D34-0x008C4D44
		public virtual Decoder GetDecoder(); // 0x008C4D4C-0x008C4DB8
		private static Encoding CreateDefaultEncoding(); // 0x008C4DEC-0x008C4E64
		internal void setReadOnly(bool value = true /* Metadata: 0x00204292 */); // 0x008C5004-0x008C5010
		public virtual Encoder GetEncoder(); // 0x008C5010-0x008C507C
		public abstract int GetMaxByteCount(int charCount);
		public abstract int GetMaxCharCount(int byteCount);
		public virtual string GetString(byte[] bytes); // 0x008C50B0-0x008C5180
		public virtual string GetString(byte[] bytes, int index, int count); // 0x008C5180-0x008C51AC
		public override bool Equals(object value); // 0x008C51AC-0x008C52B4
		public override int GetHashCode(); // 0x008C52B4-0x008C5328
		internal virtual char[] GetBestFitUnicodeToBytesData(); // 0x008C5328-0x008C5390
		internal virtual char[] GetBestFitBytesToUnicodeData(); // 0x008C5390-0x008C53F8
		internal void ThrowBytesOverflow(); // 0x008C53F8-0x008C5534
		internal void ThrowBytesOverflow(EncoderNLS encoder, bool nothingEncoded); // 0x008BCAE4-0x008BCB74
		internal void ThrowCharsOverflow(); // 0x008C5534-0x008C5670
		internal void ThrowCharsOverflow(DecoderNLS decoder, bool nothingDecoded); // 0x008BD058-0x008BD0E0
	}

	[Serializable]
	[ComVisible] // 0x00395114-0x00395128
	internal abstract class EncodingNLS : Encoding // TypeDefIndex: 434
	{
		// Constructors
		protected EncodingNLS(int codePage); // 0x008C6CF8-0x008C6CFC
	
		// Methods
		public override int GetByteCount(char[] chars, int index, int count); // 0x008C6CFC-0x008C6ED4
		public override int GetByteCount(string s); // 0x008C6ED4-0x008C6F9C
		public override unsafe int GetByteCount(char* chars, int count); // 0x008C6F9C-0x008C70C0
		public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x008C70C0-0x008C7340
		public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x008C7340-0x008C75D8
		public override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount); // 0x008C75D8-0x008C7744
		public override int GetCharCount(byte[] bytes, int index, int count); // 0x008C7744-0x008C791C
		public override unsafe int GetCharCount(byte* bytes, int count); // 0x008C791C-0x008C7A40
		public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x008C7A40-0x008C7CD8
		public override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount); // 0x008C7CD8-0x008C7E44
		public override string GetString(byte[] bytes, int index, int count); // 0x008C7E44-0x008C8020
		public override Decoder GetDecoder(); // 0x008C8020-0x008C8080
		public override Encoder GetEncoder(); // 0x008C8080-0x008C80E0
	}

	[ComVisible] // 0x00395128-0x0039513C
	public abstract class EncodingProvider // TypeDefIndex: 435
	{
		// Fields
		private static object s_InternalSyncObject; // 0x00
		private static EncodingProvider[] s_providers; // 0x08
	
		// Constructors
		static EncodingProvider(); // 0x008C80E0-0x008C814C
	
		// Methods
		public abstract Encoding GetEncoding(string name);
		public abstract Encoding GetEncoding(int codepage);
		internal static Encoding GetEncodingFromProvider(int codepage); // 0x008C2EA4-0x008C2FB8
		internal static Encoding GetEncodingFromProvider(string encodingName); // 0x008C3AC4-0x008C3BD8
	}

	[Serializable]
	internal class Latin1Encoding : EncodingNLS, ISerializable // TypeDefIndex: 436
	{
		// Fields
		private static readonly char[] arrayCharBestFit; // 0x00
	
		// Constructors
		public Latin1Encoding(); // 0x008C40CC-0x008C40D4
		internal Latin1Encoding(SerializationInfo info, StreamingContext context); // 0x008C9078-0x008C90A8
		static Latin1Encoding(); // 0x008C9A90-0x008C9B0C
	
		// Methods
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x008C90A8-0x008C91A8
		internal override unsafe int GetByteCount(char* chars, int charCount, EncoderNLS encoder); // 0x008C91A8-0x008C93A4
		internal override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, EncoderNLS encoder); // 0x008C93A4-0x008C9760
		internal override unsafe int GetCharCount(byte* bytes, int count, DecoderNLS decoder); // 0x008C9760-0x008C9768
		internal override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount, DecoderNLS decoder); // 0x008C9768-0x008C97DC
		public override int GetMaxByteCount(int charCount); // 0x008C97DC-0x008C9904
		public override int GetMaxCharCount(int byteCount); // 0x008C9904-0x008C9A28
		internal override char[] GetBestFitUnicodeToBytesData(); // 0x008C9A28-0x008C9A90
	}

	[Serializable]
	[ComVisible] // 0x0039513C-0x0039518C
	public sealed class StringBuilder : ISerializable // TypeDefIndex: 437
	{
		// Fields
		internal char[] m_ChunkChars; // 0x10
		internal StringBuilder m_ChunkPrevious; // 0x18
		internal int m_ChunkLength; // 0x20
		internal int m_ChunkOffset; // 0x24
		internal int m_MaxCapacity; // 0x28
		internal const int DefaultCapacity = 16; // Metadata: 0x00204293
		private const string CapacityField = "Capacity"; // Metadata: 0x00204297
		private const string MaxCapacityField = "m_MaxCapacity"; // Metadata: 0x002042A3
		private const string StringValueField = "m_StringValue"; // Metadata: 0x002042B4
		private const string ThreadIDField = "m_currentThread"; // Metadata: 0x002042C5
		internal const int MaxChunkSize = 8000; // Metadata: 0x002042D8
	
		// Properties
		public int Capacity { get; } // 0x008CD60C-0x008CD644 
		public int MaxCapacity { get; } // 0x008CD644-0x008CD64C 
		public int Length { get; set; } // 0x008B7C4C-0x008B7C58 0x008B7CF8-0x008B7E9C
		public char Cthis[int index] { get => default; set {} } // 0x008B7E9C-0x008B7F90 0x008CA9E4-0x008CAB08
	
		// Constructors
		public StringBuilder(); // 0x008B7C44-0x008B7C4C
		public StringBuilder(int capacity); // 0x008BDD8C-0x008BDDF4
		public StringBuilder(string value); // 0x008CBDA8-0x008CBDB0
		public StringBuilder(string value, int capacity); // 0x008CBD3C-0x008CBDA8
		public StringBuilder(string value, int startIndex, int length, int capacity); // 0x008CBDB0-0x008CD034
		private StringBuilder(SerializationInfo info, StreamingContext context); // 0x008CD164-0x008CD4E4
		private StringBuilder(StringBuilder from); // 0x008D0308-0x008D03B8
		private StringBuilder(int size, int maxCapacity, StringBuilder previousBlock); // 0x008D03B8-0x008D044C
	
		// Methods
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x008CD4E4-0x008CD60C
		public override string ToString(); // 0x008CD64C-0x008CD7C0
		public string ToString(int startIndex, int length); // 0x008CD7C0-0x008CDA2C
		public StringBuilder Clear(); // 0x008CDA2C-0x008CDA54
		public StringBuilder Append(char value, int repeatCount); // 0x008CDA54-0x008CDBA4
		public StringBuilder Append(char[] value, int startIndex, int charCount); // 0x008CDD80-0x008CDF58
		public StringBuilder Append(string value); // 0x008BDDF4-0x008BDF50
		private void AppendHelper(string value); // 0x008CE0CC-0x008CE128
		public StringBuilder Append(string value, int startIndex, int count); // 0x008CB118-0x008CB2D8
		[ComVisible] // 0x0039DF98-0x0039DFAC
		public StringBuilder AppendLine(); // 0x008CE128-0x008CE154
		[ComVisible] // 0x0039DFAC-0x0039DFC0
		public StringBuilder AppendLine(string value); // 0x008CE154-0x008CE184
		public StringBuilder Insert(int index, string value, int count); // 0x008CE184-0x008CE370
		public StringBuilder Remove(int startIndex, int length); // 0x008CAB08-0x008CAC98
		public StringBuilder Append(char value); // 0x008B7C58-0x008B7CF8
		public StringBuilder Append(int value); // 0x008CEABC-0x008CEB4C
		public StringBuilder Append(long value); // 0x008CEB4C-0x008CEBDC
		public StringBuilder Append(object value); // 0x008CEBDC-0x008CEC28
		public StringBuilder Insert(int index, string value); // 0x008CEC28-0x008CED20
		public StringBuilder Insert(int index, char value); // 0x008CEE3C-0x008CEE6C
		public StringBuilder AppendFormat(string format, object arg0); // 0x008CEE6C-0x008CEEC8
		public StringBuilder AppendFormat(string format, object arg0, object arg1); // 0x008CF710-0x008CF770
		public StringBuilder AppendFormat(string format, object arg0, object arg1, object arg2); // 0x008CF770-0x008CF7D4
		public StringBuilder AppendFormat(string format, params /* 0x0039FA08-0x0039FA18 */ object[] args); // 0x008CF7D4-0x008CF8BC
		public StringBuilder AppendFormat(IFormatProvider provider, string format, object arg0); // 0x008CF8BC-0x008CF924
		public StringBuilder AppendFormat(IFormatProvider provider, string format, object arg0, object arg1); // 0x008CF924-0x008CF990
		private static void FormatError(); // 0x008CF990-0x008CFA18
		internal StringBuilder AppendFormatHelper(IFormatProvider provider, string format, ParamsArray args); // 0x008CEEC8-0x008CF710
		public StringBuilder Replace(string oldValue, string newValue); // 0x008CFA18-0x008CFA28
		public StringBuilder Replace(string oldValue, string newValue, int startIndex, int count); // 0x008CFA28-0x008CFDD8
		[CLSCompliant] // 0x0039DFC0-0x0039DFD4
		public unsafe StringBuilder Append(char* value, int valueCount); // 0x008CDF58-0x008CE0CC
		private unsafe void Insert(int index, char* value, int valueCount); // 0x008CED20-0x008CEE3C
		private void ReplaceAllInChunk(int[] replacements, int replacementsCount, StringBuilder sourceChunk, int removeCount, string value); // 0x008CFEFC-0x008D014C
		private bool StartsWith(StringBuilder chunk, int indexInChunk, int count, string value); // 0x008CFDD8-0x008CFEFC
		private unsafe void ReplaceInPlaceAtChunk(ref StringBuilder chunk, ref int indexInChunk, char* value, int count); // 0x008CE7A8-0x008CE8D8
		private static unsafe void ThreadSafeCopy(char* sourcePtr, char[] destination, int destinationIndex, int count); // 0x008CD034-0x008CD164
		private static void ThreadSafeCopy(char[] source, int sourceIndex, char[] destination, int destinationIndex, int count); // 0x008D01D4-0x008D0308
		private StringBuilder FindChunkForIndex(int index); // 0x008CDBA4-0x008CDBE8
		private StringBuilder Next(StringBuilder chunk); // 0x008D014C-0x008D01D4
		private void ExpandByABlock(int minBlockCharCount); // 0x008CDBE8-0x008CDD80
		private void MakeRoom(int index, int count, out StringBuilder chunk, out int indexInChunk, bool doneMoveFollowingChars); // 0x008CE370-0x008CE7A8
		private void Remove(int startIndex, int count, out StringBuilder chunk, out int indexInChunk); // 0x008CE8D8-0x008CEABC
	}

	internal static class StringBuilderCache // TypeDefIndex: 438
	{
		// Fields
		[ThreadStatic] // 0x0039BB80-0x0039BB90
		private static StringBuilder CachedInstance; // 0x80000000
	
		// Methods
		public static StringBuilder Acquire(int capacity = 16 /* Metadata: 0x002042DC */); // 0x00819C60-0x00819D24
		public static void Release(StringBuilder sb); // 0x00819D24-0x00819D9C
		public static string GetStringAndRelease(StringBuilder sb); // 0x00819D9C-0x00819DE0
	}

	[Serializable]
	[ComVisible] // 0x0039518C-0x003951A0
	public class UnicodeEncoding : Encoding // TypeDefIndex: 439
	{
		// Fields
		[OptionalField] // 0x0039BB90-0x0039BBC8
		internal bool isThrowException; // 0x38
		internal bool bigEndian; // 0x39
		internal bool byteOrderMark; // 0x3A
		private static readonly ulong highLowPatternMask; // 0x00
	
		// Nested types
		[Serializable]
		private class Decoder : DecoderNLS, ISerializable // TypeDefIndex: 440
		{
			// Fields
			internal int lastByte; // 0x30
			internal char lastChar; // 0x34
	
			// Properties
			internal override bool HasState { get; } // 0x0082B918-0x0082B93C 
	
			// Constructors
			public Decoder(UnicodeEncoding encoding); // 0x0082AC3C-0x0082AC4C
			internal Decoder(SerializationInfo info, StreamingContext context); // 0x0082B2CC-0x0082B6DC
	
			// Methods
			new void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x0082B6DC-0x0082B8F0
			public override void Reset(); // 0x0082B8F0-0x0082B918
		}
	
		// Constructors
		public UnicodeEncoding(); // 0x0082714C-0x0082715C
		public UnicodeEncoding(bool bigEndian, bool byteOrderMark); // 0x0082715C-0x0082716C
		public UnicodeEncoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes); // 0x0082716C-0x0082720C
		static UnicodeEncoding(); // 0x0082B228-0x0082B2CC
	
		// Methods
		[OnDeserializing] // 0x0039DFD4-0x0039DFE4
		private new void OnDeserializing(StreamingContext ctx); // 0x0082720C-0x00827214
		internal override void SetDefaultFallbacks(); // 0x00827214-0x008272D0
		public override int GetByteCount(char[] chars, int index, int count); // 0x008272D0-0x008274A8
		public override int GetByteCount(string s); // 0x008274A8-0x00827570
		[CLSCompliant] // 0x0039DFE4-0x0039E024
		[ComVisible] // 0x0039DFE4-0x0039E024
		public override unsafe int GetByteCount(char* chars, int count); // 0x00827570-0x00827694
		public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x00827694-0x00827914
		public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x00827914-0x00827BAC
		[CLSCompliant] // 0x0039E024-0x0039E064
		[ComVisible] // 0x0039E024-0x0039E064
		public override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount); // 0x00827BAC-0x00827D18
		public override int GetCharCount(byte[] bytes, int index, int count); // 0x00827D18-0x00827EF0
		[CLSCompliant] // 0x0039E064-0x0039E0A4
		[ComVisible] // 0x0039E064-0x0039E0A4
		public override unsafe int GetCharCount(byte* bytes, int count); // 0x00827EF0-0x00828014
		public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x00828014-0x008282AC
		[CLSCompliant] // 0x0039E0A4-0x0039E0E4
		[ComVisible] // 0x0039E0A4-0x0039E0E4
		public override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount); // 0x008282AC-0x00828418
		[ComVisible] // 0x0039E0E4-0x0039E0F8
		public override string GetString(byte[] bytes, int index, int count); // 0x00828418-0x008285F4
		internal override unsafe int GetByteCount(char* chars, int count, EncoderNLS encoder); // 0x008285F4-0x00828CD4
		internal override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, EncoderNLS encoder); // 0x00828CD4-0x008295B4
		internal override unsafe int GetCharCount(byte* bytes, int count, DecoderNLS baseDecoder); // 0x008295B4-0x00829F88
		internal override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount, DecoderNLS baseDecoder); // 0x00829F88-0x0082AB6C
		[ComVisible] // 0x0039E0F8-0x0039E10C
		public override Encoder GetEncoder(); // 0x0082AB6C-0x0082ABD0
		public override Decoder GetDecoder(); // 0x0082ABD0-0x0082AC3C
		public override byte[] GetPreamble(); // 0x0082AC4C-0x0082AD74
		public override int GetMaxByteCount(int charCount); // 0x0082AD74-0x0082AEAC
		public override int GetMaxCharCount(int byteCount); // 0x0082AEAC-0x0082AFE8
		public override bool Equals(object value); // 0x0082AFE8-0x0082B184
		public override int GetHashCode(); // 0x0082B184-0x0082B228
	}

	[Serializable]
	public sealed class UTF32Encoding : Encoding // TypeDefIndex: 441
	{
		// Fields
		private bool emitUTF32ByteOrderMark; // 0x38
		private bool isThrowException; // 0x39
		private bool bigEndian; // 0x3A
	
		// Nested types
		[Serializable]
		internal class UTF32Decoder : DecoderNLS // TypeDefIndex: 442
		{
			// Fields
			internal int iChar; // 0x30
			internal int readByteCount; // 0x34
	
			// Properties
			internal override bool HasState { get; } // 0x0081CC24-0x0081CC34 
	
			// Constructors
			public UTF32Decoder(UTF32Encoding encoding); // 0x0081C618-0x0081C620
	
			// Methods
			public override void Reset(); // 0x0081CC04-0x0081CC24
		}
	
		// Constructors
		public UTF32Encoding(); // 0x00819DE0-0x00819DF0
		public UTF32Encoding(bool bigEndian, bool byteOrderMark); // 0x00819E88-0x00819E98
		public UTF32Encoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters); // 0x00819DF0-0x00819E88
	
		// Methods
		internal override void SetDefaultFallbacks(); // 0x00819E98-0x00819F54
		public override int GetByteCount(char[] chars, int index, int count); // 0x00819F54-0x0081A12C
		public override int GetByteCount(string s); // 0x0081A12C-0x0081A1F4
		[CLSCompliant] // 0x0039E10C-0x0039E120
		public override unsafe int GetByteCount(char* chars, int count); // 0x0081A1F4-0x0081A318
		public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x0081A318-0x0081A598
		public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x0081A598-0x0081A830
		[CLSCompliant] // 0x0039E120-0x0039E134
		public override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount); // 0x0081A830-0x0081A99C
		public override int GetCharCount(byte[] bytes, int index, int count); // 0x0081A99C-0x0081AB74
		[CLSCompliant] // 0x0039E134-0x0039E148
		public override unsafe int GetCharCount(byte* bytes, int count); // 0x0081AB74-0x0081AC98
		public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x0081AC98-0x0081AF30
		[CLSCompliant] // 0x0039E148-0x0039E15C
		public override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount); // 0x0081AF30-0x0081B09C
		public override string GetString(byte[] bytes, int index, int count); // 0x0081B09C-0x0081B278
		internal override unsafe int GetByteCount(char* chars, int count, EncoderNLS encoder); // 0x0081B278-0x0081B638
		internal override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, EncoderNLS encoder); // 0x0081B638-0x0081BB38
		internal override unsafe int GetCharCount(byte* bytes, int count, DecoderNLS baseDecoder); // 0x0081BB54-0x0081C00C
		internal override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount, DecoderNLS baseDecoder); // 0x0081C00C-0x0081C594
		private uint GetSurrogate(char cHigh, char cLow); // 0x0081BB38-0x0081BB54
		private char GetHighSurrogate(uint iChar); // 0x0081C594-0x0081C5A8
		private char GetLowSurrogate(uint iChar); // 0x0081C5A8-0x0081C5B4
		public override Decoder GetDecoder(); // 0x0081C5B4-0x0081C618
		public override Encoder GetEncoder(); // 0x0081C620-0x0081C684
		public override int GetMaxByteCount(int charCount); // 0x0081C684-0x0081C7BC
		public override int GetMaxCharCount(int byteCount); // 0x0081C7BC-0x0081C8E4
		public override byte[] GetPreamble(); // 0x0081C8E4-0x0081CA14
		public override bool Equals(object value); // 0x0081CA14-0x0081CB60
		public override int GetHashCode(); // 0x0081CB60-0x0081CC04
	}

	[Serializable]
	[ComVisible] // 0x003951A0-0x003951B4
	public class UTF7Encoding : Encoding // TypeDefIndex: 443
	{
		// Fields
		private byte[] base64Bytes; // 0x38
		private sbyte[] base64Values; // 0x40
		private bool[] directEncode; // 0x48
		[OptionalField] // 0x0039BBC8-0x0039BC00
		private bool m_allowOptionals; // 0x50
	
		// Nested types
		[Serializable]
		private class Decoder : DecoderNLS, ISerializable // TypeDefIndex: 444
		{
			// Fields
			internal int bits; // 0x30
			internal int bitCount; // 0x34
			internal bool firstByte; // 0x38
	
			// Properties
			internal override bool HasState { get; } // 0x0081F5C0-0x0081F5D0 
	
			// Constructors
			public Decoder(UTF7Encoding encoding); // 0x0081F060-0x0081F068
			internal Decoder(SerializationInfo info, StreamingContext context); // 0x0081F250-0x0081F498
	
			// Methods
			new void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x0081F498-0x0081F598
			public override void Reset(); // 0x0081F598-0x0081F5C0
		}
	
		[Serializable]
		private class Encoder : EncoderNLS, ISerializable // TypeDefIndex: 445
		{
			// Fields
			internal int bits; // 0x38
			internal int bitCount; // 0x3C
	
			// Constructors
			public Encoder(UTF7Encoding encoding); // 0x0081F0CC-0x0081F0D4
			internal Encoder(SerializationInfo info, StreamingContext context); // 0x0081F808-0x0081FA08
	
			// Methods
			new void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x0081FA08-0x0081FAEC
			public override void Reset(); // 0x0081FAEC-0x0081FB10
		}
	
		[Serializable]
		internal sealed class DecoderUTF7Fallback : DecoderFallback // TypeDefIndex: 446
		{
			// Properties
			public override int MaxCharCount { get; } // 0x0081F644-0x0081F64C 
	
			// Constructors
			public DecoderUTF7Fallback(); // 0x0081D04C-0x0081D054
	
			// Methods
			public override DecoderFallbackBuffer CreateFallbackBuffer(); // 0x0081F5D0-0x0081F634
			public override bool Equals(object value); // 0x0081F64C-0x0081F6B0
			public override int GetHashCode(); // 0x0081F6B0-0x0081F6B8
		}
	
		internal sealed class DecoderUTF7FallbackBuffer : DecoderFallbackBuffer // TypeDefIndex: 447
		{
			// Fields
			private char cFallback; // 0x20
			private int iCount; // 0x24
			private int iSize; // 0x28
	
			// Constructors
			public DecoderUTF7FallbackBuffer(DecoderUTF7Fallback fallback); // 0x0081F634-0x0081F644
	
			// Methods
			public override bool Fallback(byte[] bytesUnknown, int index); // 0x0081F6B8-0x0081F71C
			public override char GetNextChar(); // 0x0081F71C-0x0081F73C
			public override void Reset(); // 0x0081F73C-0x0081F74C
			internal override unsafe int InternalFallback(byte[] bytes, byte* pBytes); // 0x0081F74C-0x0081F808
		}
	
		// Constructors
		public UTF7Encoding(); // 0x0081CC34-0x0081CC64
		public UTF7Encoding(bool allowOptionals); // 0x0081CC64-0x0081CC9C
	
		// Methods
		private void MakeTables(); // 0x0081CC9C-0x0081CFAC
		internal override void SetDefaultFallbacks(); // 0x0081CFAC-0x0081D04C
		[OnDeserializing] // 0x0039E15C-0x0039E16C
		private new void OnDeserializing(StreamingContext ctx); // 0x0081D054-0x0081D05C
		[OnDeserialized] // 0x0039E16C-0x0039E17C
		private new void OnDeserialized(StreamingContext ctx); // 0x0081D05C-0x0081D120
		[ComVisible] // 0x0039E17C-0x0039E190
		public override bool Equals(object value); // 0x0081D120-0x0081D268
		[ComVisible] // 0x0039E190-0x0039E1A4
		public override int GetHashCode(); // 0x0081D268-0x0081D2FC
		public override int GetByteCount(char[] chars, int index, int count); // 0x0081D2FC-0x0081D4D4
		[ComVisible] // 0x0039E1A4-0x0039E1B8
		public override int GetByteCount(string s); // 0x0081D4D4-0x0081D59C
		[CLSCompliant] // 0x0039E1B8-0x0039E1F8
		[ComVisible] // 0x0039E1B8-0x0039E1F8
		public override unsafe int GetByteCount(char* chars, int count); // 0x0081D59C-0x0081D6C0
		[ComVisible] // 0x0039E1F8-0x0039E20C
		public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x0081D6C0-0x0081D940
		public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x0081D940-0x0081DBD8
		[CLSCompliant] // 0x0039E20C-0x0039E24C
		[ComVisible] // 0x0039E20C-0x0039E24C
		public override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount); // 0x0081DBD8-0x0081DD44
		public override int GetCharCount(byte[] bytes, int index, int count); // 0x0081DD44-0x0081DF1C
		[CLSCompliant] // 0x0039E24C-0x0039E28C
		[ComVisible] // 0x0039E24C-0x0039E28C
		public override unsafe int GetCharCount(byte* bytes, int count); // 0x0081DF1C-0x0081E040
		public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x0081E040-0x0081E2D8
		[CLSCompliant] // 0x0039E28C-0x0039E2CC
		[ComVisible] // 0x0039E28C-0x0039E2CC
		public override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount); // 0x0081E2D8-0x0081E444
		[ComVisible] // 0x0039E2CC-0x0039E2E0
		public override string GetString(byte[] bytes, int index, int count); // 0x0081E444-0x0081E620
		internal override unsafe int GetByteCount(char* chars, int count, EncoderNLS baseEncoder); // 0x0081E620-0x0081E640
		internal override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, EncoderNLS baseEncoder); // 0x0081E640-0x0081EBC8
		internal override unsafe int GetCharCount(byte* bytes, int count, DecoderNLS baseDecoder); // 0x0081EBC8-0x0081EBE8
		internal override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount, DecoderNLS baseDecoder); // 0x0081EBE8-0x0081EFFC
		public override Decoder GetDecoder(); // 0x0081EFFC-0x0081F060
		public override Encoder GetEncoder(); // 0x0081F068-0x0081F0CC
		public override int GetMaxByteCount(int charCount); // 0x0081F0D4-0x0081F1A0
		public override int GetMaxCharCount(int byteCount); // 0x0081F1A0-0x0081F250
	}

	[Serializable]
	[ComVisible] // 0x003951B4-0x003951C8
	public class UTF8Encoding : Encoding // TypeDefIndex: 448
	{
		// Fields
		private bool emitUTF8Identifier; // 0x38
		private bool isThrowException; // 0x39
	
		// Nested types
		[Serializable]
		internal class UTF8Encoder : EncoderNLS, ISerializable // TypeDefIndex: 449
		{
			// Fields
			internal int surrogateChar; // 0x38
	
			// Constructors
			public UTF8Encoder(UTF8Encoding encoding); // 0x00826358-0x00826360
			internal UTF8Encoder(SerializationInfo info, StreamingContext context); // 0x00826CF4-0x00827008
	
			// Methods
			new void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00827008-0x0082712C
			public override void Reset(); // 0x0082712C-0x0082714C
		}
	
		[Serializable]
		internal class UTF8Decoder : DecoderNLS, ISerializable // TypeDefIndex: 450
		{
			// Fields
			internal int bits; // 0x30
	
			// Properties
			internal override bool HasState { get; } // 0x00826CE4-0x00826CF4 
	
			// Constructors
			public UTF8Decoder(UTF8Encoding encoding); // 0x008262EC-0x008262F4
			internal UTF8Decoder(SerializationInfo info, StreamingContext context); // 0x00826848-0x00826B70
	
			// Methods
			new void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00826B70-0x00826CC4
			public override void Reset(); // 0x00826CC4-0x00826CE4
		}
	
		// Constructors
		public UTF8Encoding(); // 0x0081FB10-0x0081FB3C
		public UTF8Encoding(bool encoderShouldEmitUTF8Identifier); // 0x0081FB3C-0x0081FB74
		public UTF8Encoding(bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes); // 0x0081FB74-0x0081FBDC
	
		// Methods
		internal override void SetDefaultFallbacks(); // 0x0081FBDC-0x0081FC98
		public override int GetByteCount(char[] chars, int index, int count); // 0x0081FC98-0x0081FE70
		public override int GetByteCount(string chars); // 0x0081FE70-0x0081FF38
		[CLSCompliant] // 0x0039E2E0-0x0039E320
		[ComVisible] // 0x0039E2E0-0x0039E320
		public override unsafe int GetByteCount(char* chars, int count); // 0x0081FF38-0x0082105C
		public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x0082105C-0x008212DC
		public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x008212DC-0x00821574
		[CLSCompliant] // 0x0039E320-0x0039E360
		[ComVisible] // 0x0039E320-0x0039E360
		public override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount); // 0x00821574-0x008216E0
		public override int GetCharCount(byte[] bytes, int index, int count); // 0x008216E0-0x008218B8
		[CLSCompliant] // 0x0039E360-0x0039E3A0
		[ComVisible] // 0x0039E360-0x0039E3A0
		public override unsafe int GetCharCount(byte* bytes, int count); // 0x008218B8-0x008219DC
		public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x008219DC-0x00821C74
		[CLSCompliant] // 0x0039E3A0-0x0039E3E0
		[ComVisible] // 0x0039E3A0-0x0039E3E0
		public override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount); // 0x00821C74-0x00821DE0
		[ComVisible] // 0x0039E3E0-0x0039E3F4
		public override string GetString(byte[] bytes, int index, int count); // 0x00821DE0-0x00821FBC
		internal override unsafe int GetByteCount(char* chars, int count, EncoderNLS baseEncoder); // 0x00821FBC-0x00823660
		private static unsafe int PtrDiff(char* a, char* b); // 0x00823674-0x00823680
		private static unsafe int PtrDiff(byte* a, byte* b); // 0x00823680-0x00823688
		private static bool InRange(int ch, int start, int end); // 0x00823660-0x00823674
		internal override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, EncoderNLS baseEncoder); // 0x00823688-0x00823F00
		internal override unsafe int GetCharCount(byte* bytes, int count, DecoderNLS baseDecoder); // 0x00823F00-0x008244E0
		internal override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount, DecoderNLS baseDecoder); // 0x00824538-0x00824F14
		private unsafe bool FallbackInvalidByteSequence(ref byte* pSrc, int ch, DecoderFallbackBuffer fallback, ref char* pTarget); // 0x00824F14-0x00824F9C
		private unsafe int FallbackInvalidByteSequence(byte* pSrc, int ch, DecoderFallbackBuffer fallback); // 0x008244E0-0x00824538
		private unsafe byte[] GetBytesUnknown(ref byte* pSrc, int ch); // 0x00824F9C-0x00826288
		public override Decoder GetDecoder(); // 0x00826288-0x008262EC
		public override Encoder GetEncoder(); // 0x008262F4-0x00826358
		public override int GetMaxByteCount(int charCount); // 0x00826360-0x00826498
		public override int GetMaxCharCount(int byteCount); // 0x00826498-0x008265D0
		public override byte[] GetPreamble(); // 0x008265D0-0x00826678
		public override bool Equals(object value); // 0x00826678-0x008267C0
		public override int GetHashCode(); // 0x008267C0-0x00826848
	}

	internal enum NormalizationCheck // TypeDefIndex: 451
	{
		Yes = 0,
		No = 1,
		Maybe = 2
	}

	internal class Normalization // TypeDefIndex: 452
	{
		// Fields
		private static unsafe byte* props; // 0x00
		private static unsafe int* mappedChars; // 0x08
		private static unsafe short* charMapIndex; // 0x10
		private static unsafe short* helperIndex; // 0x18
		private static unsafe ushort* mapIdxToComposite; // 0x20
		private static unsafe byte* combiningClass; // 0x28
		private static object forLock; // 0x30
		public static readonly bool isReady; // 0x38
	
		// Constructors
		static Normalization(); // 0x008CBB68-0x008CBD3C
	
		// Methods
		private static uint PropValue(int cp); // 0x008C9B0C-0x008C9BAC
		private static int CharMapIdx(int cp); // 0x008C9BAC-0x008C9C4C
		private static byte GetCombiningClass(int c); // 0x008C9C4C-0x008C9D10
		private static int GetPrimaryCompositeFromMapIndex(int src); // 0x008C9D10-0x008C9DD4
		private static int GetPrimaryCompositeHelperIndex(int cp); // 0x008C9DD4-0x008C9E98
		private static string Compose(string source, int checkType); // 0x008C9E98-0x008C9FA4
		private static StringBuilder Combine(string source, int start, int checkType); // 0x008CA124-0x008CA2CC
		private static void Combine(StringBuilder sb, int i, int checkType); // 0x008CA2CC-0x008CA3F0
		private static int CombineHangul(StringBuilder sb, string s, int current); // 0x008CA558-0x008CA738
		private static int Fetch(StringBuilder sb, string s, int i); // 0x008CA994-0x008CA9E4
		private static int TryComposeWithPreviousStarter(StringBuilder sb, string s, int current); // 0x008CA738-0x008CA994
		private static int TryCompose(int i, int starter, int candidate); // 0x008CAC98-0x008CADE8
		private static string Decompose(string source, int checkType); // 0x008CADE8-0x008CAE84
		private static void Decompose(string source, ref StringBuilder sb, int checkType); // 0x008C9FA4-0x008CA124
		private static void ReorderCanonical(string src, ref StringBuilder sb, int start); // 0x008CB2D8-0x008CB61C
		private static void DecomposeChar(ref StringBuilder sb, ref int[] buf, string s, int i, int checkType, ref int start); // 0x008CAE84-0x008CB118
		public static NormalizationCheck QuickCheck(char c, int type); // 0x008CA3F0-0x008CA558
		private static int GetCanonicalHangul(int s, int[] buf, int bufIdx); // 0x008CB850-0x008CB9C0
		private static int GetCanonical(int c, int[] buf, int bufIdx, int checkType); // 0x008CB61C-0x008CB850
		public static string Normalize(string source, NormalizationForm normalizationForm); // 0x008CB9C0-0x008CBAAC
		public static string Normalize(string source, int type); // 0x008CBAAC-0x008CBB64
		private static void load_normalization_resource(out IntPtr props, out IntPtr mappedChars, out IntPtr charMapIndex, out IntPtr helperIndex, out IntPtr mapIdxToComposite, out IntPtr combiningClass); // 0x008CBB64-0x008CBB68
	}

	internal static class EncodingHelper // TypeDefIndex: 453
	{
		// Fields
		private static Encoding utf8EncodingWithoutMarkers; // 0x00
		private static readonly object lockobj; // 0x08
		private static Assembly i18nAssembly; // 0x10
		private static bool i18nDisabled; // 0x18
	
		// Properties
		internal static Encoding UTF8Unmarked { get; } // 0x008C6A90-0x008C6C88 
	
		// Constructors
		static EncodingHelper(); // 0x008C6C8C-0x008C6CF8
	
		// Methods
		internal static string InternalCodePage(ref int code_page); // 0x008C6C88-0x008C6C8C
		internal static Encoding GetDefaultEncoding(); // 0x008C4E64-0x008C5004
		internal static object InvokeI18N(string name, params /* 0x0039FA18-0x0039FA28 */ object[] args); // 0x008C3400-0x008C3A20
	}

	[ComVisible] // 0x003951C8-0x003951DC
	public enum NormalizationForm // TypeDefIndex: 454
	{
		FormC = 1,
		FormD = 2,
		FormKC = 5,
		FormKD = 6
	}
}

namespace System.Resources
{
	internal sealed class FastResourceComparer : IComparer, IEqualityComparer, IComparer<string>, IEqualityComparer<string> // TypeDefIndex: 455
	{
		// Fields
		internal static readonly FastResourceComparer Default; // 0x00
	
		// Constructors
		public FastResourceComparer(); // 0x004F9874-0x004F987C
		static FastResourceComparer(); // 0x004F987C-0x004F98E0
	
		// Methods
		public int GetHashCode(object key); // 0x004F915C-0x004F9238
		public int GetHashCode(string key); // 0x004F9328-0x004F938C
		internal static int HashFunction(string key); // 0x004F9238-0x004F9328
		public int Compare(object a, object b); // 0x004F938C-0x004F94B4
		public int Compare(string a, string b); // 0x004F94B4-0x004F94C4
		public bool Equals(string a, string b); // 0x004F94C4-0x004F94D4
		public new bool Equals(object a, object b); // 0x004F94D4-0x004F9600
		public static int CompareOrdinal(string a, byte[] bytes, int bCharLength); // 0x004F9600-0x004F9704
		public static int CompareOrdinal(byte[] bytes, int aCharLength, string b); // 0x004F9704-0x004F9788
		internal static unsafe int CompareOrdinal(byte* a, int byteLen, string b); // 0x004F9788-0x004F9874
	}

	internal class FileBasedResourceGroveler : IResourceGroveler // TypeDefIndex: 456
	{
		// Fields
		private ResourceManager.ResourceManagerMediator _mediator; // 0x10
	
		// Constructors
		public FileBasedResourceGroveler(ResourceManager.ResourceManagerMediator mediator); // 0x004F98E0-0x004F990C
	}

	internal interface IResourceGroveler // TypeDefIndex: 457
	{
	}

	[ComVisible] // 0x003951DC-0x003951F0
	public interface IResourceReader : IEnumerable, IDisposable // TypeDefIndex: 458
	{
		// Methods
		void Close();
		IDictionaryEnumerator GetEnumerator();
	}

	internal class ManifestBasedResourceGroveler : IResourceGroveler // TypeDefIndex: 459
	{
		// Fields
		private ResourceManager.ResourceManagerMediator _mediator; // 0x10
	
		// Constructors
		public ManifestBasedResourceGroveler(ResourceManager.ResourceManagerMediator mediator); // 0x004F990C-0x004F9938
	
		// Methods
		internal static CultureInfo GetNeutralResourcesLanguage(Assembly a, ref UltimateResourceFallbackLocation fallbackLocation); // 0x004F9938-0x004F9C84
		private static bool GetNeutralResourcesLanguageAttribute(Assembly assembly, ref string cultureName, ref short fallbackLocation); // 0x004F9C84-0x004F9D00
	}

	[AttributeUsage] // 0x003951F0-0x00395244
	[ComVisible] // 0x003951F0-0x00395244
	public sealed class NeutralResourcesLanguageAttribute : Attribute // TypeDefIndex: 460
	{
		// Fields
		private string _culture; // 0x10
		private UltimateResourceFallbackLocation _fallbackLoc; // 0x18
	
		// Properties
		public string CultureName { get; } // 0x004F9D00-0x004F9D08 
		public UltimateResourceFallbackLocation Location { get; } // 0x004F9D08-0x004F9D10 
	
		// Constructors
		public NeutralResourcesLanguageAttribute(string cultureName); // 0x004F9D10-0x004F9EE0
	}

	[Serializable]
	[ComVisible] // 0x00395244-0x00395258
	public class ResourceManager // TypeDefIndex: 461
	{
		// Fields
		[Obsolete] // 0x0039BC00-0x0039BC38
		protected Hashtable ResourceSets; // 0x10
		[NonSerialized]
		private Dictionary<string, ResourceSet> _resourceSets; // 0x18
		protected Assembly MainAssembly; // 0x20
		private CultureInfo _neutralResourcesCulture; // 0x28
		[NonSerialized]
		private CultureNameResourceSetPair _lastUsedResourceCache; // 0x30
		private bool UseManifest; // 0x38
		[OptionalField] // 0x0039BC38-0x0039BC70
		private bool UseSatelliteAssem; // 0x39
		[OptionalField] // 0x0039BC70-0x0039BC80
		private UltimateResourceFallbackLocation _fallbackLoc; // 0x3C
		[OptionalField] // 0x0039BC80-0x0039BCB8
		private Assembly _callingAssembly; // 0x40
		[OptionalField] // 0x0039BCB8-0x0039BCF0
		private RuntimeAssembly m_callingAssembly; // 0x48
		[NonSerialized]
		private IResourceGroveler resourceGroveler; // 0x50
		public static readonly int MagicNumber; // 0x00
		public static readonly int HeaderVersionNumber; // 0x04
		private static readonly Type _minResourceSet; // 0x08
		internal static readonly string ResReaderTypeName; // 0x10
		internal static readonly string ResSetTypeName; // 0x18
		internal static readonly string MscorlibName; // 0x20
		internal static readonly int DEBUG; // 0x28
	
		// Nested types
		internal class CultureNameResourceSetPair // TypeDefIndex: 462
		{
			// Constructors
			public CultureNameResourceSetPair(); // 0x004FA0A0-0x004FA0A8
		}
	
		internal class ResourceManagerMediator // TypeDefIndex: 463
		{
			// Fields
			private ResourceManager _rm; // 0x10
	
			// Constructors
			internal ResourceManagerMediator(ResourceManager rm); // 0x004FA0A8-0x004FA14C
		}
	
		// Constructors
		protected ResourceManager(); // 0x004F9FE4-0x004FA0A0
		static ResourceManager(); // 0x004FA720-0x004FA8B0
	
		// Methods
		private void Init(); // 0x004F9F10-0x004F9FE4
		[OnDeserializing] // 0x0039E3F4-0x0039E404
		private void OnDeserializing(StreamingContext ctx); // 0x004FA14C-0x004FA15C
		[OnDeserialized] // 0x0039E404-0x0039E414
		private void OnDeserialized(StreamingContext ctx); // 0x004FA15C-0x004FA2FC
		[OnSerializing] // 0x0039E414-0x0039E424
		private void OnSerializing(StreamingContext ctx); // 0x004FA2FC-0x004FA36C
		internal static bool CompareNames(string asmTypeName1, string typeName2, AssemblyName asmName2); // 0x004FA36C-0x004FA720
	}

	internal struct ResourceLocator // TypeDefIndex: 464
	{
		// Fields
		internal object _value; // 0x00
		internal int _dataPos; // 0x08
	
		// Properties
		internal int DataPosition { get; } // 0x004F9EEC-0x004F9EF4 
		internal object Value { get; set; } // 0x004F9EF4-0x004F9EFC 0x004F9EFC-0x004F9F04
	
		// Constructors
		internal ResourceLocator(int dataPos, object value); // 0x004F9EE0-0x004F9EEC
	
		// Methods
		internal static bool CanCache(ResourceTypeCode value); // 0x004F9F04-0x004F9F10
	}

	[ComVisible] // 0x00395258-0x0039526C
	public sealed class ResourceReader : IResourceReader // TypeDefIndex: 465
	{
		// Fields
		private BinaryReader _store; // 0x10
		internal Dictionary<string, ResourceLocator> _resCache; // 0x18
		private long _nameSectionOffset; // 0x20
		private long _dataSectionOffset; // 0x28
		private int[] _nameHashes; // 0x30
		private unsafe int* _nameHashesPtr; // 0x38
		private int[] _namePositions; // 0x40
		private unsafe int* _namePositionsPtr; // 0x48
		private RuntimeType[] _typeTable; // 0x50
		private int[] _typeNamePositions; // 0x58
		private BinaryFormatter _objFormatter; // 0x60
		private int _numResources; // 0x68
		private UnmanagedMemoryStream _ums; // 0x70
		private int _version; // 0x78
	
		// Nested types
		internal sealed class ResourceEnumerator : IDictionaryEnumerator // TypeDefIndex: 466
		{
			// Fields
			private ResourceReader _reader; // 0x10
			private bool _currentIsValid; // 0x18
			private int _currentName; // 0x1C
			private int _dataPosition; // 0x20
	
			// Properties
			public object Key { get; } // 0x004FE8DC-0x004FE9E8 
			public object Current { get; } // 0x004FE9E8-0x004FEA54 
			internal int DataPosition { get; } // 0x004FED8C-0x004FED94 
			public DictionaryEntry Entry { get; } // 0x004FEA54-0x004FED8C 
			public object Value { get; } // 0x004FED94-0x004FEE90 
	
			// Constructors
			internal ResourceEnumerator(ResourceReader reader); // 0x004FAF98-0x004FAFCC
	
			// Methods
			public bool MoveNext(); // 0x004FE864-0x004FE8DC
			public void Reset(); // 0x004FEE90-0x004FEF4C
		}
	
		// Constructors
		internal ResourceReader(Stream stream, Dictionary<string, ResourceLocator> resCache); // 0x004FA8B0-0x004FA990
	
		// Methods
		public void Close(); // 0x004FAB08-0x004FAB54
		public void Dispose(); // 0x004FABA0-0x004FABEC
		private void Dispose(bool disposing); // 0x004FAB54-0x004FABA0
		internal static unsafe int ReadUnalignedI4(int* p); // 0x004FABEC-0x004FABF4
		private void SkipString(); // 0x004FABF4-0x004FACF4
		private int GetNameHash(int index); // 0x004FACF4-0x004FAD5C
		private int GetNamePosition(int index); // 0x004FAD5C-0x004FAEC8
		IEnumerator IEnumerable.GetEnumerator(); // 0x004FAEC8-0x004FAECC
		public IDictionaryEnumerator GetEnumerator(); // 0x004FAECC-0x004FAF98
		internal ResourceEnumerator GetEnumeratorInternal(); // 0x004FAFCC-0x004FB038
		internal int FindPosForResource(string name); // 0x004FB038-0x004FB414
		private bool CompareStringEqualsName(string name); // 0x004FB414-0x004FB664
		private string AllocateStringForNameIndex(int index, out int dataOffset); // 0x004FB664-0x004FBFEC
		private object GetValueForNameIndex(int index); // 0x004FBFEC-0x004FC2E8
		internal string LoadString(int pos); // 0x004FC568-0x004FC880
		internal object LoadObject(int pos); // 0x004FCD20-0x004FCD58
		internal object LoadObject(int pos, out ResourceTypeCode typeCode); // 0x004FCD58-0x004FCDF8
		internal object LoadObjectV1(int pos); // 0x004FC2E8-0x004FC424
		private object _LoadObjectV1(int pos); // 0x004FCDF8-0x004FD64C
		internal object LoadObjectV2(int pos, out ResourceTypeCode typeCode); // 0x004FC424-0x004FC568
		private object _LoadObjectV2(int pos, out ResourceTypeCode typeCode); // 0x004FD868-0x004FE054
		private object DeserializeObject(int typeIndex); // 0x004FD64C-0x004FD868
		private void ReadResources(); // 0x004FA990-0x004FAB08
		private void _ReadResources(); // 0x004FE054-0x004FE864
		private RuntimeType FindType(int typeIndex); // 0x004FC880-0x004FCD20
	}

	[Serializable]
	[ComVisible] // 0x0039526C-0x00395280
	public class ResourceSet : IDisposable, IEnumerable // TypeDefIndex: 467
	{
		// Fields
		[NonSerialized]
		protected IResourceReader Reader; // 0x10
		protected Hashtable Table; // 0x18
		private Hashtable _caseInsensitiveTable; // 0x20
	
		// Constructors
		protected ResourceSet(); // 0x004FEF4C-0x004FEF74
		internal ResourceSet(bool junk); // 0x004FEFD4-0x004FEFDC
	
		// Methods
		private void CommonInit(); // 0x004FEF74-0x004FEFD4
		protected virtual void Dispose(bool disposing); // 0x004FEFDC-0x004FF0A8
		public void Dispose(); // 0x004FF0A8-0x004FF0B8
		[ComVisible] // 0x0039E424-0x0039E438
		public virtual IDictionaryEnumerator GetEnumerator(); // 0x004FF0B8-0x004FF0BC
		IEnumerator IEnumerable.GetEnumerator(); // 0x004FF16C-0x004FF170
		private IDictionaryEnumerator GetEnumeratorHelper(); // 0x004FF0BC-0x004FF16C
		public virtual string GetString(string name); // 0x004FF170-0x004FF334
		public virtual string GetString(string name, bool ignoreCase); // 0x004FF430-0x004FF6D0
		public virtual object GetObject(string name); // 0x004FF9B4-0x004FF9B8
		public virtual object GetObject(string name, bool ignoreCase); // 0x004FF9B8-0x004FFA08
		private object GetObjectInternal(string name); // 0x004FF334-0x004FF430
		private object GetCaseInsensitiveObjectInternal(string name); // 0x004FF6D0-0x004FF9B4
	}

	[Serializable]
	internal enum ResourceTypeCode // TypeDefIndex: 468
	{
		Null = 0,
		String = 1,
		Boolean = 2,
		Char = 3,
		Byte = 4,
		SByte = 5,
		Int16 = 6,
		UInt16 = 7,
		Int32 = 8,
		UInt32 = 9,
		Int64 = 10,
		UInt64 = 11,
		Single = 12,
		Double = 13,
		Decimal = 14,
		DateTime = 15,
		TimeSpan = 16,
		LastPrimitive = 16,
		ByteArray = 32,
		Stream = 33,
		StartOfUserTypes = 64
	}

	internal sealed class RuntimeResourceSet : ResourceSet, IEnumerable // TypeDefIndex: 469
	{
		// Fields
		internal const int Version = 2; // Metadata: 0x00204350
		private Dictionary<string, ResourceLocator> _resCache; // 0x28
		private ResourceReader _defaultReader; // 0x30
		private Dictionary<string, ResourceLocator> _caseInsensitiveTable; // 0x38
		private bool _haveReadFromReader; // 0x40
	
		// Constructors
		internal RuntimeResourceSet(string fileName); // 0x004FFA08-0x004FFB10
		internal RuntimeResourceSet(Stream stream); // 0x004FFB10-0x004FFBE8
	
		// Methods
		protected override void Dispose(bool disposing); // 0x004FFBE8-0x004FFCFC
		public override IDictionaryEnumerator GetEnumerator(); // 0x004FFCFC-0x004FFD00
		new IEnumerator IEnumerable.GetEnumerator(); // 0x004FFE1C-0x004FFE20
		private new IDictionaryEnumerator GetEnumeratorHelper(); // 0x004FFD00-0x004FFE1C
		public override string GetString(string key); // 0x004FFE20-0x004FFEE4
		public override string GetString(string key, bool ignoreCase); // 0x00500860-0x00500930
		public override object GetObject(string key); // 0x00500930-0x0050093C
		public override object GetObject(string key, bool ignoreCase); // 0x0050093C-0x00500948
		private object GetObject(string key, bool ignoreCase, bool isString); // 0x004FFEE4-0x00500860
		private object ResolveResourceLocator(ResourceLocator resLocation, string key, Dictionary<string, ResourceLocator> copyOfCache, bool keyInWrongCase); // 0x00500948-0x00500AA4
	}

	[AttributeUsage] // 0x00395280-0x003952D4
	[ComVisible] // 0x00395280-0x003952D4
	public sealed class SatelliteContractVersionAttribute : Attribute // TypeDefIndex: 470
	{
		// Fields
		private string _version; // 0x10
	
		// Constructors
		public SatelliteContractVersionAttribute(string version); // 0x00500AA4-0x00500C80
	}

	[Serializable]
	[ComVisible] // 0x003952D4-0x003952E8
	public enum UltimateResourceFallbackLocation // TypeDefIndex: 471
	{
		MainAssembly = 0,
		Satellite = 1
	}
}

namespace System.Reflection
{
	public static class CustomAttributeExtensions // TypeDefIndex: 472
	{
		// Extension methods
		public static Attribute GetCustomAttribute(this Assembly element, Type attributeType); // 0x0090EBD8-0x0090EBE0
		public static T GetCustomAttribute<T>(this Assembly element)
			where T : Attribute;
	}

	[Serializable]
	[ComVisible] // 0x003952F8-0x0039530C
	public sealed class AmbiguousMatchException : SystemException // TypeDefIndex: 473
	{
		// Constructors
		public AmbiguousMatchException(); // 0x0090AA54-0x0090AAC8
		public AmbiguousMatchException(string message); // 0x0090AAC8-0x0090AAFC
		internal AmbiguousMatchException(SerializationInfo info, StreamingContext context); // 0x0090AAFC-0x0090AB50
	}

	[AttributeUsage] // 0x0039530C-0x00395360
	[ComVisible] // 0x0039530C-0x00395360
	public sealed class AssemblyCopyrightAttribute : Attribute // TypeDefIndex: 474
	{
		// Fields
		private string m_copyright; // 0x10
	
		// Constructors
		public AssemblyCopyrightAttribute(string copyright); // 0x0090B45C-0x0090B488
	}

	[AttributeUsage] // 0x00395360-0x003953B4
	[ComVisible] // 0x00395360-0x003953B4
	public sealed class AssemblyTrademarkAttribute : Attribute // TypeDefIndex: 475
	{
		// Fields
		private string m_trademark; // 0x10
	
		// Constructors
		public AssemblyTrademarkAttribute(string trademark); // 0x0090D054-0x0090D080
	}

	[AttributeUsage] // 0x003953B4-0x00395408
	[ComVisible] // 0x003953B4-0x00395408
	public sealed class AssemblyProductAttribute : Attribute // TypeDefIndex: 476
	{
		// Fields
		private string m_product; // 0x10
	
		// Constructors
		public AssemblyProductAttribute(string product); // 0x0090CFFC-0x0090D028
	}

	[AttributeUsage] // 0x00395408-0x0039545C
	[ComVisible] // 0x00395408-0x0039545C
	public sealed class AssemblyCompanyAttribute : Attribute // TypeDefIndex: 477
	{
		// Fields
		private string m_company; // 0x10
	
		// Constructors
		public AssemblyCompanyAttribute(string company); // 0x0090B404-0x0090B430
	}

	[AttributeUsage] // 0x0039545C-0x003954B0
	[ComVisible] // 0x0039545C-0x003954B0
	public sealed class AssemblyDescriptionAttribute : Attribute // TypeDefIndex: 478
	{
		// Fields
		private string m_description; // 0x10
	
		// Constructors
		public AssemblyDescriptionAttribute(string description); // 0x0090B4E4-0x0090B510
	}

	[AttributeUsage] // 0x003954B0-0x00395504
	[ComVisible] // 0x003954B0-0x00395504
	public sealed class AssemblyTitleAttribute : Attribute // TypeDefIndex: 479
	{
		// Fields
		private string m_title; // 0x10
	
		// Constructors
		public AssemblyTitleAttribute(string title); // 0x0090D028-0x0090D054
	}

	[AttributeUsage] // 0x00395504-0x00395558
	[ComVisible] // 0x00395504-0x00395558
	public sealed class AssemblyConfigurationAttribute : Attribute // TypeDefIndex: 480
	{
		// Fields
		private string m_configuration; // 0x10
	
		// Constructors
		public AssemblyConfigurationAttribute(string configuration); // 0x0090B430-0x0090B45C
	}

	[AttributeUsage] // 0x00395558-0x003955AC
	[ComVisible] // 0x00395558-0x003955AC
	public sealed class AssemblyDefaultAliasAttribute : Attribute // TypeDefIndex: 481
	{
		// Fields
		private string m_defaultAlias; // 0x10
	
		// Constructors
		public AssemblyDefaultAliasAttribute(string defaultAlias); // 0x0090B488-0x0090B4B4
	}

	[AttributeUsage] // 0x003955AC-0x00395600
	[ComVisible] // 0x003955AC-0x00395600
	public sealed class AssemblyInformationalVersionAttribute : Attribute // TypeDefIndex: 482
	{
		// Fields
		private string m_informationalVersion; // 0x10
	
		// Constructors
		public AssemblyInformationalVersionAttribute(string informationalVersion); // 0x0090B5B4-0x0090B5E0
	}

	[AttributeUsage] // 0x00395600-0x00395654
	[ComVisible] // 0x00395600-0x00395654
	public sealed class AssemblyFileVersionAttribute : Attribute // TypeDefIndex: 483
	{
		// Fields
		private string _version; // 0x10
	
		// Constructors
		public AssemblyFileVersionAttribute(string version); // 0x0090B510-0x0090B5B4
	}

	[AttributeUsage] // 0x00395654-0x003956A8
	[ComVisible] // 0x00395654-0x003956A8
	public sealed class AssemblyKeyFileAttribute : Attribute // TypeDefIndex: 484
	{
		// Fields
		private string m_keyFile; // 0x10
	
		// Constructors
		public AssemblyKeyFileAttribute(string keyFile); // 0x0090B5E0-0x0090B658
	}

	[AttributeUsage] // 0x003956A8-0x003956FC
	[ComVisible] // 0x003956A8-0x003956FC
	public sealed class AssemblyDelaySignAttribute : Attribute // TypeDefIndex: 485
	{
		// Fields
		private bool m_delaySign; // 0x10
	
		// Constructors
		public AssemblyDelaySignAttribute(bool delaySign); // 0x0090B4B4-0x0090B4E4
	}

	[Serializable]
	[ComVisible] // 0x003956FC-0x00395738
	[Flags] // 0x003956FC-0x00395738
	public enum AssemblyNameFlags // TypeDefIndex: 486
	{
		None = 0,
		PublicKey = 1,
		Retargetable = 256,
		EnableJITcompileOptimizer = 16384,
		EnableJITcompileTracking = 32768
	}

	[Serializable]
	[ComVisible] // 0x00395738-0x0039574C
	public enum AssemblyContentType // TypeDefIndex: 487
	{
		Default = 0,
		WindowsRuntime = 1
	}

	[Serializable]
	[ComVisible] // 0x0039574C-0x00395760
	public enum ProcessorArchitecture // TypeDefIndex: 488
	{
		None = 0,
		MSIL = 1,
		X86 = 2,
		IA64 = 3,
		Amd64 = 4,
		Arm = 5
	}

	[Serializable]
	[ClassInterface] // 0x00395760-0x003957A0
	[ComVisible] // 0x00395760-0x003957A0
	public abstract class Binder // TypeDefIndex: 489
	{
		// Constructors
		protected Binder(); // 0x0090D080-0x0090D084
	
		// Methods
		public abstract MethodBase BindToMethod(BindingFlags bindingAttr, MethodBase[] match, ref object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] names, out object state);
		public abstract FieldInfo BindToField(BindingFlags bindingAttr, FieldInfo[] match, object value, CultureInfo culture);
		public abstract MethodBase SelectMethod(BindingFlags bindingAttr, MethodBase[] match, Type[] types, ParameterModifier[] modifiers);
		public abstract PropertyInfo SelectProperty(BindingFlags bindingAttr, PropertyInfo[] match, Type returnType, Type[] indexes, ParameterModifier[] modifiers);
		public abstract object ChangeType(object value, Type type, CultureInfo culture);
		public abstract void ReorderArgumentArray(ref object[] args, object state);
	}

	[Serializable]
	[ComVisible] // 0x003957A0-0x003957DC
	[Flags] // 0x003957A0-0x003957DC
	public enum BindingFlags // TypeDefIndex: 490
	{
		Default = 0,
		IgnoreCase = 1,
		DeclaredOnly = 2,
		Instance = 4,
		Static = 8,
		Public = 16,
		NonPublic = 32,
		FlattenHierarchy = 64,
		InvokeMethod = 256,
		CreateInstance = 512,
		GetField = 1024,
		SetField = 2048,
		GetProperty = 4096,
		SetProperty = 8192,
		PutDispProperty = 16384,
		PutRefDispProperty = 32768,
		ExactBinding = 65536,
		SuppressChangeType = 131072,
		OptionalParamBinding = 262144,
		IgnoreReturn = 16777216
	}

	[Serializable]
	[ComVisible] // 0x003957DC-0x00395818
	[Flags] // 0x003957DC-0x00395818
	public enum CallingConventions // TypeDefIndex: 491
	{
		Standard = 1,
		VarArgs = 2,
		Any = 3,
		HasThis = 32,
		ExplicitThis = 64
	}

	[Serializable]
	[AttributeUsage] // 0x00395818-0x00395858
	[ComVisible] // 0x00395818-0x00395858
	public sealed class DefaultMemberAttribute : Attribute // TypeDefIndex: 492
	{
		// Fields
		private string m_memberName; // 0x10
	
		// Properties
		public string MemberName { get; } // 0x0090F3F4-0x0090F3FC 
	
		// Constructors
		public DefaultMemberAttribute(string memberName); // 0x0090F3C8-0x0090F3F4
	}

	[Serializable]
	[ComVisible] // 0x00395858-0x00395894
	[Flags] // 0x00395858-0x00395894
	public enum EventAttributes // TypeDefIndex: 493
	{
		None = 0,
		SpecialName = 512,
		ReservedMask = 1024,
		RTSpecialName = 1024
	}

	[Serializable]
	[ComVisible] // 0x00395894-0x003958D0
	[Flags] // 0x00395894-0x003958D0
	public enum FieldAttributes // TypeDefIndex: 494
	{
		PrivateScope = 0,
		Private = 1,
		FamANDAssem = 2,
		Assembly = 3,
		Family = 4,
		FamORAssem = 5,
		Public = 6,
		FieldAccessMask = 7,
		Static = 16,
		InitOnly = 32,
		Literal = 64,
		NotSerialized = 128,
		HasFieldRVA = 256,
		SpecialName = 512,
		RTSpecialName = 1024,
		HasFieldMarshal = 4096,
		PinvokeImpl = 8192,
		HasDefault = 32768,
		ReservedMask = 38144
	}

	[Flags] // 0x003958D0-0x003958E0
	public enum GenericParameterAttributes // TypeDefIndex: 495
	{
		None = 0,
		Covariant = 1,
		Contravariant = 2,
		VarianceMask = 3,
		ReferenceTypeConstraint = 4,
		NotNullableValueTypeConstraint = 8,
		DefaultConstructorConstraint = 16,
		SpecialConstraintMask = 28
	}

	[ComVisible] // 0x003958E0-0x003958F4
	public interface ICustomAttributeProvider // TypeDefIndex: 496
	{
		// Methods
		object[] GetCustomAttributes(Type attributeType, bool inherit);
		bool IsDefined(Type attributeType, bool inherit);
	}

	[Serializable]
	[ComVisible] // 0x003958F4-0x00395908
	public class InvalidFilterCriteriaException : ApplicationException // TypeDefIndex: 497
	{
		// Constructors
		public InvalidFilterCriteriaException(); // 0x00915414-0x00915488
		public InvalidFilterCriteriaException(string message); // 0x00915488-0x009154BC
		protected InvalidFilterCriteriaException(SerializationInfo info, StreamingContext context); // 0x009154BC-0x00915510
	}

	[ComVisible] // 0x00395908-0x00395958
	[Guid] // 0x00395908-0x00395958
	public interface IReflect // TypeDefIndex: 498
	{
	}

	public interface IReflectableType // TypeDefIndex: 499
	{
	}

	[Serializable]
	[Flags] // 0x00395958-0x00395968
	internal enum PInvokeAttributes // TypeDefIndex: 500
	{
		CharSetNotSpec = 0,
		BestFitUseAssem = 0,
		ThrowOnUnmappableCharUseAssem = 0,
		NoMangle = 1,
		CharSetAnsi = 2,
		CharSetUnicode = 4,
		CharSetMask = 6,
		CharSetAuto = 6,
		BestFitEnabled = 16,
		BestFitDisabled = 32,
		BestFitMask = 48,
		SupportsLastError = 64,
		CallConvWinapi = 256,
		CallConvCdecl = 512,
		CallConvStdcall = 768,
		CallConvThiscall = 1024,
		CallConvFastcall = 1280,
		CallConvMask = 1792,
		ThrowOnUnmappableCharEnabled = 4096,
		ThrowOnUnmappableCharDisabled = 8192,
		ThrowOnUnmappableCharMask = 12288,
		MaxValue = 65535
	}

	[Serializable]
	[ComVisible] // 0x00395968-0x0039597C
	public delegate bool MemberFilter(MemberInfo m, object filterCriteria); // TypeDefIndex: 501; 0x009155D4-0x00915D6C

	[Serializable]
	[ClassInterface] // 0x0039597C-0x00395A08
	[ComDefaultInterface] // 0x0039597C-0x00395A08
	[ComVisible] // 0x0039597C-0x00395A08
	public abstract class MemberInfo : ICustomAttributeProvider, _MemberInfo // TypeDefIndex: 502
	{
		// Properties
		public abstract MemberTypes MemberType { get; }
		public abstract string Name { get; }
		public abstract Type DeclaringType { get; }
		public abstract Type ReflectedType { get; }
		public virtual int MetadataToken { get; } // 0x00915E40-0x00915E44 
		public virtual Module Module { get; } // 0x00915E44-0x00915F04 
	
		// Constructors
		protected MemberInfo(); // 0x00913F68-0x00913F6C
	
		// Methods
		public abstract object[] GetCustomAttributes(bool inherit);
		public abstract object[] GetCustomAttributes(Type attributeType, bool inherit);
		public abstract bool IsDefined(Type attributeType, bool inherit);
		public virtual IList<CustomAttributeData> GetCustomAttributesData(); // 0x00915DD8-0x00915E40
		public static bool operator ==(MemberInfo left, MemberInfo right); // 0x0090ED1C-0x0090F138
		public static bool operator !=(MemberInfo left, MemberInfo right); // 0x00916208-0x00916224
		public override bool Equals(object obj); // 0x00916224-0x00916230
		public override int GetHashCode(); // 0x00913F7C-0x00913F80
	}

	[Serializable]
	internal class MemberInfoSerializationHolder : ISerializable, IObjectReference // TypeDefIndex: 503
	{
		// Fields
		private string m_memberName; // 0x10
		private RuntimeType m_reflectedType; // 0x18
		private string m_signature; // 0x20
		private string m_signature2; // 0x28
		private MemberTypes m_memberType; // 0x30
		private SerializationInfo m_info; // 0x38
	
		// Constructors
		internal MemberInfoSerializationHolder(SerializationInfo info, StreamingContext context); // 0x009164F4-0x009167D4
	
		// Methods
		public static void GetSerializationInfo(SerializationInfo info, string name, RuntimeType reflectedClass, string signature, MemberTypes type); // 0x00916230-0x00916244
		public static void GetSerializationInfo(SerializationInfo info, string name, RuntimeType reflectedClass, string signature, string signature2, MemberTypes type, Type[] genericArguments); // 0x00916244-0x009164F4
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x009167D4-0x0091685C
		public virtual object GetRealObject(StreamingContext context); // 0x0091685C-0x00917558
	}

	[Serializable]
	[ComVisible] // 0x00395A08-0x00395A44
	[Flags] // 0x00395A08-0x00395A44
	public enum MemberTypes // TypeDefIndex: 504
	{
		Constructor = 1,
		Event = 2,
		Field = 4,
		Method = 8,
		Property = 16,
		TypeInfo = 32,
		Custom = 64,
		NestedType = 128,
		All = 191
	}

	[Serializable]
	[ComVisible] // 0x00395A44-0x00395A80
	[Flags] // 0x00395A44-0x00395A80
	public enum MethodAttributes // TypeDefIndex: 505
	{
		PrivateScope = 0,
		ReuseSlot = 0,
		Private = 1,
		FamANDAssem = 2,
		Assembly = 3,
		Family = 4,
		FamORAssem = 5,
		Public = 6,
		MemberAccessMask = 7,
		UnmanagedExport = 8,
		Static = 16,
		Final = 32,
		Virtual = 64,
		HideBySig = 128,
		VtableLayoutMask = 256,
		NewSlot = 256,
		CheckAccessOnOverride = 512,
		Abstract = 1024,
		SpecialName = 2048,
		RTSpecialName = 4096,
		PinvokeImpl = 8192,
		HasSecurity = 16384,
		RequireSecObject = 32768,
		ReservedMask = 53248
	}

	[Serializable]
	[ClassInterface] // 0x00395A80-0x00395B0C
	[ComDefaultInterface] // 0x00395A80-0x00395B0C
	[ComVisible] // 0x00395A80-0x00395B0C
	public abstract class MethodBase : MemberInfo, _MethodBase // TypeDefIndex: 506
	{
		// Properties
		public abstract RuntimeMethodHandle MethodHandle { get; }
		public abstract MethodAttributes Attributes { get; }
		public virtual CallingConventions CallingConvention { get; } // 0x00917894-0x0091789C 
		public virtual bool IsGenericMethodDefinition { get; } // 0x00917924-0x0091792C 
		public virtual bool ContainsGenericParameters { get; } // 0x0091792C-0x00917934 
		public virtual bool IsGenericMethod { get; } // 0x00917934-0x0091793C 
		public virtual bool IsSecurityCritical { get; } // 0x0091793C-0x009179A4 
		public bool IsPublic { get; } // 0x009179C8-0x009179F4 
		public bool IsStatic { get; } // 0x009179F4-0x00917A18 
		public bool IsVirtual { get; } // 0x00917A18-0x00917A3C 
		public bool IsAbstract { get; } // 0x00917A3C-0x00917A60 
		[ComVisible] // 0x0039FB64-0x0039FB78
		public bool IsConstructor { get; } // 0x00917A60-0x00917B0C 
	
		// Constructors
		protected MethodBase(); // 0x0090D088-0x0090D08C
	
		// Methods
		public static MethodBase GetMethodFromHandle(RuntimeMethodHandle handle); // 0x00917638-0x00917854
		public static bool operator ==(MethodBase left, MethodBase right); // 0x00915F20-0x0091611C
		public static bool operator !=(MethodBase left, MethodBase right); // 0x00915F04-0x00915F20
		public override bool Equals(object obj); // 0x00917878-0x00917884
		public override int GetHashCode(); // 0x0090D158-0x0090D15C
		internal virtual ParameterInfo[] GetParametersNoCopy(); // 0x00917884-0x00917894
		public abstract ParameterInfo[] GetParameters();
		public abstract MethodImplAttributes GetMethodImplementationFlags();
		public abstract object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture);
		[ComVisible] // 0x0039E458-0x0039E46C
		public virtual Type[] GetGenericArguments(); // 0x0091789C-0x00917924
		[DebuggerHidden] // 0x0039E46C-0x0039E4A4
		[DebuggerStepThrough] // 0x0039E46C-0x0039E4A4
		public object Invoke(object obj, object[] parameters); // 0x009179A4-0x009179C8
		internal static string ConstructParameters(Type[] parameterTypes, CallingConventions callingConvention, bool serialization); // 0x00917B0C-0x00917D94
		internal virtual string FormatNameAndSig(bool serialization); // 0x00917D94-0x00917EF8
		internal virtual Type[] GetParameterTypes(); // 0x00917EF8-0x00918040
		internal virtual ParameterInfo[] GetParametersInternal(); // 0x00918040-0x00918050
		internal virtual int GetParametersCount(); // 0x00918050-0x00918088
		internal static MethodBase GetMethodFromHandleNoGenericCheck(RuntimeMethodHandle handle); // 0x00918088-0x009180E0
		internal static MethodBase GetMethodFromHandleNoGenericCheck(RuntimeMethodHandle handle, RuntimeTypeHandle reflectedType); // 0x009180E8-0x00918184
		private static MethodBase GetMethodFromHandleInternalType(IntPtr method_handle, IntPtr type_handle); // 0x00917854-0x0091785C
		internal static MethodBase GetMethodFromHandleInternalType_native(IntPtr method_handle, IntPtr type_handle, bool genericCheck); // 0x009180E0-0x009180E8
	}

	[ComVisible] // 0x00395B0C-0x00395B48
	[Flags] // 0x00395B0C-0x00395B48
	public enum ExceptionHandlingClauseOptions // TypeDefIndex: 507
	{
		Clause = 0,
		Filter = 1,
		Finally = 2,
		Fault = 4
	}

	[Serializable]
	[ComVisible] // 0x00395B48-0x00395B5C
	public enum MethodImplAttributes // TypeDefIndex: 508
	{
		IL = 0,
		Managed = 0,
		Native = 1,
		OPTIL = 2,
		CodeTypeMask = 3,
		Runtime = 3,
		ManagedMask = 4,
		Unmanaged = 4,
		NoInlining = 8,
		ForwardRef = 16,
		Synchronized = 32,
		NoOptimization = 64,
		PreserveSig = 128,
		AggressiveInlining = 256,
		InternalCall = 4096,
		MaxMethodImplVal = 65535
	}

	[Serializable]
	[ClassInterface] // 0x00395B5C-0x00395BE8
	[ComDefaultInterface] // 0x00395B5C-0x00395BE8
	[ComVisible] // 0x00395B5C-0x00395BE8
	public abstract class MethodInfo : MethodBase, _MethodInfo // TypeDefIndex: 509
	{
		// Properties
		public override MemberTypes MemberType { get; } // 0x00918198-0x009181A0 
		public virtual Type ReturnType { get; } // 0x009181A0-0x00918208 
	
		// Constructors
		protected MethodInfo(); // 0x00918184-0x00918188
	
		// Methods
		public static bool operator ==(MethodInfo left, MethodInfo right); // 0x00917558-0x00917638
		public static bool operator !=(MethodInfo left, MethodInfo right); // 0x0091785C-0x00917878
		public override bool Equals(object obj); // 0x00918188-0x00918194
		public override int GetHashCode(); // 0x00918194-0x00918198
		[ComVisible] // 0x0039E4A4-0x0039E4B8
		public override Type[] GetGenericArguments(); // 0x00918208-0x00918290
		[ComVisible] // 0x0039E4B8-0x0039E4CC
		public virtual MethodInfo GetGenericMethodDefinition(); // 0x00918290-0x00918318
		public virtual MethodInfo MakeGenericMethod(params /* 0x0039FA28-0x0039FA38 */ Type[] typeArguments); // 0x00918318-0x009183A0
		internal virtual MethodInfo GetBaseMethod(); // 0x009183A0-0x009183A4
	}

	[Serializable]
	[ComVisible] // 0x00395BE8-0x00395BFC
	public sealed class Missing : ISerializable // TypeDefIndex: 510
	{
		// Fields
		public static readonly Missing Value; // 0x00
	
		// Constructors
		private Missing(); // 0x009183A4-0x009183A8
		static Missing(); // 0x00918448-0x009184EC
	
		// Methods
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x009183A8-0x00918448
	}

	[Serializable]
	[ComVisible] // 0x00395BFC-0x00395C38
	[Flags] // 0x00395BFC-0x00395C38
	public enum ParameterAttributes // TypeDefIndex: 511
	{
		None = 0,
		In = 1,
		Out = 2,
		Lcid = 4,
		Retval = 8,
		Optional = 16,
		HasDefault = 4096,
		HasFieldMarshal = 8192,
		Reserved3 = 16384,
		Reserved4 = 32768,
		ReservedMask = 61440
	}

	[Serializable]
	[ComVisible] // 0x00395C38-0x00395C88
	[DefaultMember] // 0x00395C38-0x00395C88
	public struct ParameterModifier // TypeDefIndex: 512
	{
		// Fields
		private bool[] _byRef; // 0x00
	}

	[Serializable]
	[CLSCompliant] // 0x00395C88-0x00395CC8
	[ComVisible] // 0x00395C88-0x00395CC8
	public sealed class Pointer : ISerializable // TypeDefIndex: 513
	{
		// Fields
		private unsafe void* _ptr; // 0x10
		private RuntimeType _ptrType; // 0x18
	
		// Constructors
		private Pointer(); // 0x0091E884-0x0091E888
		private Pointer(SerializationInfo info, StreamingContext context); // 0x0091E888-0x0091EA30
	
		// Methods
		public static unsafe object Box(void* ptr, Type type); // 0x0091EA30-0x0091EC0C
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x0091EC0C-0x0091ECE8
	}

	[Serializable]
	[ComVisible] // 0x00395CC8-0x00395D04
	[Flags] // 0x00395CC8-0x00395D04
	public enum PropertyAttributes // TypeDefIndex: 514
	{
		None = 0,
		SpecialName = 512,
		RTSpecialName = 1024,
		HasDefault = 4096,
		Reserved2 = 8192,
		Reserved3 = 16384,
		Reserved4 = 32768,
		ReservedMask = 62464
	}

	[Serializable]
	[ComVisible] // 0x00395D04-0x00395D18
	public sealed class ReflectionTypeLoadException : SystemException, ISerializable // TypeDefIndex: 515
	{
		// Fields
		private Type[] _classes; // 0x88
		private Exception[] _exceptions; // 0x90
	
		// Constructors
		private ReflectionTypeLoadException(); // 0x0091EFF0-0x0091F064
		public ReflectionTypeLoadException(Type[] classes, Exception[] exceptions); // 0x0091F064-0x0091F0B0
		internal ReflectionTypeLoadException(SerializationInfo info, StreamingContext context); // 0x0091F0B0-0x0091F2B4
	
		// Methods
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0091F2B4-0x0091F44C
	}

	[Serializable]
	[ComVisible] // 0x00395D18-0x00395D2C
	public class TargetException : ApplicationException // TypeDefIndex: 516
	{
		// Constructors
		public TargetException(); // 0x004F7CF8-0x004F7D2C
		public TargetException(string message); // 0x004F4EDC-0x004F4F10
		protected TargetException(SerializationInfo info, StreamingContext context); // 0x004F7D2C-0x004F7D34
	}

	[Serializable]
	[ComVisible] // 0x00395D2C-0x00395D40
	public sealed class TargetInvocationException : ApplicationException // TypeDefIndex: 517
	{
		// Constructors
		private TargetInvocationException(); // 0x004F7D34-0x004F7DA8
		public TargetInvocationException(Exception inner); // 0x004F7DA8-0x004F7E2C
		public TargetInvocationException(string message, Exception inner); // 0x004F7E2C-0x004F7E60
		internal TargetInvocationException(SerializationInfo info, StreamingContext context); // 0x004F7E60-0x004F7E68
	}

	[Serializable]
	[ComVisible] // 0x00395D40-0x00395D54
	public sealed class TargetParameterCountException : ApplicationException // TypeDefIndex: 518
	{
		// Constructors
		public TargetParameterCountException(); // 0x004F7E68-0x004F7EDC
		public TargetParameterCountException(string message); // 0x004F7EDC-0x004F7F10
		internal TargetParameterCountException(SerializationInfo info, StreamingContext context); // 0x004F7F10-0x004F7F18
	}

	[Serializable]
	[ComVisible] // 0x00395D54-0x00395D90
	[Flags] // 0x00395D54-0x00395D90
	public enum TypeAttributes // TypeDefIndex: 519
	{
		NotPublic = 0,
		AutoLayout = 0,
		Class = 0,
		AnsiClass = 0,
		Public = 1,
		NestedPublic = 2,
		NestedPrivate = 3,
		NestedFamily = 4,
		NestedAssembly = 5,
		NestedFamANDAssem = 6,
		VisibilityMask = 7,
		NestedFamORAssem = 7,
		SequentialLayout = 8,
		ExplicitLayout = 16,
		LayoutMask = 24,
		ClassSemanticsMask = 32,
		Interface = 32,
		Abstract = 128,
		Sealed = 256,
		SpecialName = 1024,
		RTSpecialName = 2048,
		Import = 4096,
		Serializable = 8192,
		WindowsRuntime = 16384,
		UnicodeClass = 65536,
		AutoClass = 131072,
		StringFormatMask = 196608,
		CustomFormatClass = 196608,
		HasSecurity = 262144,
		ReservedMask = 264192,
		BeforeFieldInit = 1048576,
		CustomFormatMask = 12582912
	}

	[Serializable]
	[ComVisible] // 0x00395D90-0x00395DA4
	public delegate bool TypeFilter(Type m, object filterCriteria); // TypeDefIndex: 520; 0x004F7F28-0x004F86C0

	[Serializable]
	[ComVisible] // 0x00395DA4-0x00395DB8
	public abstract class TypeInfo : Type, IReflectableType // TypeDefIndex: 521
	{
		// Constructors
		[FriendAccessAllowed] // 0x0039E4CC-0x0039E4DC
		internal TypeInfo(); // 0x004F872C-0x004F8794
	}

	[Serializable]
	[ClassInterface] // 0x00395DB8-0x00395E44
	[ComDefaultInterface] // 0x00395DB8-0x00395E44
	[ComVisible] // 0x00395DB8-0x00395E44
	public class Assembly : ICustomAttributeProvider, ISerializable, _Assembly, IEvidenceFactory // TypeDefIndex: 522
	{
		// Fields
		internal IntPtr _mono_assembly; // 0x10
		private ResolveEventHolder resolve_event_holder; // 0x18
		private object _evidence; // 0x20
		private object _minimum; // 0x28
		private object _optional; // 0x30
		private object _refuse; // 0x38
		private object _granted; // 0x40
		private object _denied; // 0x48
		private bool fromByteArray; // 0x50
		private string assemblyName; // 0x58
	
		// Properties
		public virtual string CodeBase { get; } // 0x0090ABC0-0x0090ABC8 
		public virtual string FullName { get; } // 0x0090ABC8-0x0090ABD4 
		[MonoTODO] // 0x0039FB78-0x0039FB88
		public bool IsFullyTrusted { get; } // 0x0090B22C-0x0090B234 
	
		// Nested types
		internal class ResolveEventHolder // TypeDefIndex: 523
		{
			// Constructors
			public ResolveEventHolder(); // 0x0090ABA4-0x0090ABA8
		}
	
		// Constructors
		protected Assembly(); // 0x0090AB50-0x0090ABA4
	
		// Methods
		private string get_code_base(bool escaped); // 0x0090ABA8-0x0090ABB0
		private string get_fullname(); // 0x0090ABB0-0x0090ABB4
		internal static string GetAotId(); // 0x0090ABB4-0x0090ABB8
		private string GetCodeBase(bool escaped); // 0x0090ABB8-0x0090ABC0
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0090ABD4-0x0090AC3C
		public virtual bool IsDefined(Type attributeType, bool inherit); // 0x0090AC3C-0x0090ACBC
		public virtual object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x0090ACBC-0x0090AD3C
		internal IntPtr GetManifestResourceInternal(string name, out int size, out Module module); // 0x0090AD3C-0x0090AD40
		internal virtual Type[] GetTypes(bool exportedOnly); // 0x0090AD40-0x0090AD48
		public virtual Type[] GetTypes(); // 0x0090AD48-0x0090AD58
		public virtual Type GetType(string name); // 0x0090AD58-0x0090AD70
		internal Type InternalGetType(Module module, string name, bool throwOnError, bool ignoreCase); // 0x0090AD70-0x0090AD7C
		public virtual AssemblyName GetName(bool copiedName); // 0x0090AD7C-0x0090ADE4
		public virtual AssemblyName GetName(); // 0x0090ADE4-0x0090ADF8
		public override string ToString(); // 0x0090ADF8-0x0090AE28
		public static Assembly GetAssembly(Type type); // 0x0090AE28-0x0090AEFC
		public static Assembly Load(string assemblyString); // 0x0090AEFC-0x0090AF38
		private static Assembly load_with_partial_name(string name, Evidence e); // 0x0090AF38-0x0090AF3C
		[Obsolete] // 0x0039E4DC-0x0039E514
		public static Assembly LoadWithPartialName(string partialName, Evidence securityEvidence); // 0x0090AF3C-0x0090AF44
		internal static Assembly LoadWithPartialName(string partialName, Evidence securityEvidence, bool oldBehavior); // 0x0090AF44-0x0090AFFC
		internal virtual Module[] GetModulesInternal(); // 0x0090AFFC-0x0090B000
		public static Assembly GetExecutingAssembly(); // 0x0090B000-0x0090B054
		public static Assembly GetCallingAssembly(); // 0x0090B054-0x0090B058
		public override int GetHashCode(); // 0x0090B058-0x0090B05C
		public override bool Equals(object o); // 0x0090B05C-0x0090B1C4
		private static Exception CreateNIE(); // 0x0090B1C4-0x0090B22C
		public virtual Type GetType(string name, bool throwOnError, bool ignoreCase); // 0x0090B234-0x0090B280
		public virtual Module GetModule(string name); // 0x0090B280-0x0090B2CC
		public virtual Module[] GetModules(bool getResourceModules); // 0x0090B2CC-0x0090B318
		public static bool operator ==(Assembly left, Assembly right); // 0x0090B318-0x0090B38C
		public static bool operator !=(Assembly left, Assembly right); // 0x0090B38C-0x0090B404
	}

	[Serializable]
	[ClassInterface] // 0x00395E44-0x00395ED0
	[ComDefaultInterface] // 0x00395E44-0x00395ED0
	[ComVisible] // 0x00395E44-0x00395ED0
	public sealed class AssemblyName : ICloneable, ISerializable, IDeserializationCallback, _AssemblyName // TypeDefIndex: 524
	{
		// Fields
		private string name; // 0x10
		private string codebase; // 0x18
		private int major; // 0x20
		private int minor; // 0x24
		private int build; // 0x28
		private int revision; // 0x2C
		private CultureInfo cultureinfo; // 0x30
		private AssemblyNameFlags flags; // 0x38
		private AssemblyHashAlgorithm hashalg; // 0x3C
		private StrongNameKeyPair keypair; // 0x40
		private byte[] publicKey; // 0x48
		private byte[] keyToken; // 0x50
		private AssemblyVersionCompatibility versioncompat; // 0x58
		private System.Version version; // 0x60
		private ProcessorArchitecture processor_architecture; // 0x68
		private AssemblyContentType contentType; // 0x6C
	
		// Properties
		public string Name { get; } // 0x0090C188-0x0090C190 
		public CultureInfo CultureInfo { get; } // 0x0090C190-0x0090C198 
		public AssemblyNameFlags Flags { get; } // 0x0090C198-0x0090C1A0 
		public string FullName { get; } // 0x0090C1A0-0x0090C588 
		public System.Version Version { get; set; } // 0x0090C588-0x0090C590 0x0090C680-0x0090C7A4
		private bool IsPublicKeyValid { get; } // 0x0090C8C8-0x0090CA1C 
	
		// Constructors
		public AssemblyName(); // 0x0090B658-0x0090B664
		public AssemblyName(string assemblyName); // 0x0090B668-0x0090B8B0
		internal AssemblyName(SerializationInfo si, StreamingContext sc); // 0x0090BC4C-0x0090C188
	
		// Methods
		private static bool ParseAssemblyName(IntPtr name, out MonoAssemblyName aname, out bool is_version_definited, out bool is_token_defined); // 0x0090B664-0x0090B668
		public override string ToString(); // 0x0090C7A4-0x0090C7D8
		public byte[] GetPublicKeyToken(); // 0x0090C7D8-0x0090C8C8
		private byte[] InternalGetPublicKeyToken(); // 0x0090C590-0x0090C680
		private static unsafe void get_public_token(byte* token, byte* pubkey, int len); // 0x0090CAB4-0x0090CAB8
		private byte[] ComputePublicKeyToken(); // 0x0090CA1C-0x0090CAB4
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0090CAB8-0x0090CD28
		public object Clone(); // 0x0090CD28-0x0090CF1C
		public void OnDeserialization(object sender); // 0x0090CF1C-0x0090CF24
		private static unsafe MonoAssemblyName* GetNativeName(IntPtr assembly_ptr); // 0x0090CF24-0x0090CF28
		internal unsafe void FillName(MonoAssemblyName* native, string codeBase, bool addVersion, bool addPublickey, bool defaultToken, bool assemblyRef); // 0x0090B8B0-0x0090BC4C
		internal static AssemblyName Create(Assembly assembly, bool fillCodebase); // 0x0090CF28-0x0090CFFC
	}

	[Serializable]
	[ClassInterface] // 0x00395ED0-0x00395F5C
	[ComDefaultInterface] // 0x00395ED0-0x00395F5C
	[ComVisible] // 0x00395ED0-0x00395F5C
	public abstract class ConstructorInfo : MethodBase, _ConstructorInfo // TypeDefIndex: 525
	{
		// Fields
		[ComVisible] // 0x0039BD18-0x0039BD2C
		public static readonly string ConstructorName; // 0x00
		[ComVisible] // 0x0039BD2C-0x0039BD40
		public static readonly string TypeConstructorName; // 0x08
	
		// Properties
		[ComVisible] // 0x0039FB88-0x0039FB9C
		public override MemberTypes MemberType { get; } // 0x0090D08C-0x0090D094 
	
		// Constructors
		protected ConstructorInfo(); // 0x0090D084-0x0090D088
		static ConstructorInfo(); // 0x0090D248-0x0090D2BC
	
		// Methods
		[DebuggerHidden] // 0x0039E514-0x0039E54C
		[DebuggerStepThrough] // 0x0039E514-0x0039E54C
		public object Invoke(object[] parameters); // 0x0090D094-0x0090D148
		public abstract object Invoke(BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture);
		public override bool Equals(object obj); // 0x0090D148-0x0090D154
		public override int GetHashCode(); // 0x0090D154-0x0090D158
		public static bool operator ==(ConstructorInfo left, ConstructorInfo right); // 0x0090D15C-0x0090D1D0
		public static bool operator !=(ConstructorInfo left, ConstructorInfo right); // 0x0090D1D0-0x0090D248
	}

	[Serializable]
	[ComVisible] // 0x00395F5C-0x00395F70
	public class CustomAttributeData // TypeDefIndex: 526
	{
		// Fields
		private ConstructorInfo ctorInfo; // 0x10
		private IList<CustomAttributeTypedArgument> ctorArgs; // 0x18
		private IList<CustomAttributeNamedArgument> namedArgs; // 0x20
		private LazyCAttrData lazyData; // 0x28
	
		// Properties
		[ComVisible] // 0x0039FB9C-0x0039FBB0
		public virtual ConstructorInfo Constructor { get; } // 0x0090D49C-0x0090D4A4 
		[ComVisible] // 0x0039FBB0-0x0039FBC4
		public virtual IList<CustomAttributeTypedArgument> ConstructorArguments { get; } // 0x0090D4A4-0x0090D4C8 
		public virtual IList<CustomAttributeNamedArgument> NamedArguments { get; } // 0x0090D4C8-0x0090D4EC 
		public Type AttributeType { get; } // 0x0090D6F4-0x0090D728 
	
		// Nested types
		private class LazyCAttrData // TypeDefIndex: 527
		{
			// Fields
			internal Assembly assembly; // 0x10
			internal IntPtr data; // 0x18
			internal uint data_length; // 0x20
	
			// Constructors
			public LazyCAttrData(); // 0x0090D370-0x0090D374
		}
	
		// Constructors
		protected CustomAttributeData(); // 0x0090D2BC-0x0090D2C0
		internal CustomAttributeData(ConstructorInfo ctorInfo, Assembly assembly, IntPtr data, uint data_length); // 0x0090D2C0-0x0090D370
	
		// Methods
		private static void ResolveArgumentsInternal(ConstructorInfo ctor, Assembly assembly, IntPtr data, uint data_length, out object[] ctorArgs, out object[] namedArgs); // 0x0090D374-0x0090D378
		private void ResolveArguments(); // 0x0090D378-0x0090D49C
		public static IList<CustomAttributeData> GetCustomAttributes(Assembly target); // 0x0090D4EC-0x0090D554
		public static IList<CustomAttributeData> GetCustomAttributes(MemberInfo target); // 0x0090D554-0x0090D5BC
		internal static IList<CustomAttributeData> GetCustomAttributesInternal(RuntimeType target); // 0x0090D5BC-0x0090D624
		public static IList<CustomAttributeData> GetCustomAttributes(Module target); // 0x0090D624-0x0090D68C
		public static IList<CustomAttributeData> GetCustomAttributes(ParameterInfo target); // 0x0090D68C-0x0090D6F4
		public override string ToString(); // 0x0090D728-0x0090DF60
		private static T[] UnboxValues<T>(object[] values);
		public override bool Equals(object obj); // 0x0090DF60-0x0090E800
		public override int GetHashCode(); // 0x0090E800-0x0090EBD8
	}

	[Serializable]
	[ComVisible] // 0x00395F70-0x00395F84
	public class CustomAttributeFormatException : FormatException // TypeDefIndex: 528
	{
		// Constructors
		public CustomAttributeFormatException(); // 0x0090EBE0-0x0090EC40
		public CustomAttributeFormatException(string message); // 0x0090EC40-0x0090EC48
		protected CustomAttributeFormatException(SerializationInfo info, StreamingContext context); // 0x0090EC48-0x0090ED0C
	}

	[Serializable]
	[ComVisible] // 0x00395F84-0x00395F98
	public struct CustomAttributeNamedArgument // TypeDefIndex: 529
	{
		// Fields
		private CustomAttributeTypedArgument typedArgument; // 0x00
		private MemberInfo memberInfo; // 0x10
	
		// Constructors
		public CustomAttributeNamedArgument(MemberInfo memberInfo, object value); // 0x0090ED0C-0x0090ED14
	
		// Methods
		public override string ToString(); // 0x0090ED14-0x0090ED1C
		public override bool Equals(object obj); // 0x0090F138-0x0090F140
		public override int GetHashCode(); // 0x0090F140-0x0090F3A8
	}

	[Serializable]
	[ComVisible] // 0x00395F98-0x00395FAC
	public struct CustomAttributeTypedArgument // TypeDefIndex: 530
	{
		// Fields
		private Type argumentType; // 0x00
		private object value; // 0x08
	
		// Constructors
		public CustomAttributeTypedArgument(Type argumentType, object value); // 0x0090F3A8-0x0090F3B0
	
		// Methods
		public override string ToString(); // 0x0090F3B0-0x0090F3B8
		public override bool Equals(object obj); // 0x0090F3B8-0x0090F3C0
		public override int GetHashCode(); // 0x0090F3C0-0x0090F3C8
	}

	[Serializable]
	[ClassInterface] // 0x00395FAC-0x00396038
	[ComDefaultInterface] // 0x00395FAC-0x00396038
	[ComVisible] // 0x00395FAC-0x00396038
	public abstract class EventInfo : MemberInfo, _EventInfo // TypeDefIndex: 531
	{
		// Fields
		private AddEventAdapter cached_add_event; // 0x10
	
		// Properties
		public virtual Type EventHandlerType { get; } // 0x00913EBC-0x00913F5C 
		public override MemberTypes MemberType { get; } // 0x00913F5C-0x00913F64 
	
		// Nested types
		private delegate void AddEventAdapter(object _this, Delegate dele); // TypeDefIndex: 532; 0x00914180-0x00914900
	
		// Constructors
		protected EventInfo(); // 0x00913F64-0x00913F68
	
		// Methods
		public abstract MethodInfo GetAddMethod(bool nonPublic);
		public abstract MethodInfo GetRaiseMethod(bool nonPublic);
		public abstract MethodInfo GetRemoveMethod(bool nonPublic);
		public override bool Equals(object obj); // 0x00913F6C-0x00913F78
		public override int GetHashCode(); // 0x00913F78-0x00913F7C
		public static bool operator ==(EventInfo left, EventInfo right); // 0x00913F80-0x00913FF4
		public static bool operator !=(EventInfo left, EventInfo right); // 0x00913FF4-0x0091406C
		private static EventInfo internal_from_handle_type(IntPtr event_handle, IntPtr type_handle); // 0x0091406C-0x00914070
		internal static EventInfo GetEventFromHandle(RuntimeEventHandle handle, RuntimeTypeHandle reflectedType); // 0x00914070-0x00914170
	}

	[ComVisible] // 0x00396038-0x0039604C
	public class ExceptionHandlingClause // TypeDefIndex: 533
	{
		// Fields
		internal Type catch_type; // 0x10
		internal int filter_offset; // 0x18
		internal ExceptionHandlingClauseOptions flags; // 0x1C
		internal int try_offset; // 0x20
		internal int try_length; // 0x24
		internal int handler_offset; // 0x28
		internal int handler_length; // 0x2C
	
		// Methods
		public override string ToString(); // 0x00914988-0x00914CB0
	}

	[Serializable]
	[ClassInterface] // 0x0039604C-0x003960D8
	[ComDefaultInterface] // 0x0039604C-0x003960D8
	[ComVisible] // 0x0039604C-0x003960D8
	public abstract class FieldInfo : MemberInfo, _FieldInfo // TypeDefIndex: 534
	{
		// Properties
		public abstract FieldAttributes Attributes { get; }
		public abstract RuntimeFieldHandle FieldHandle { get; }
		public abstract Type FieldType { get; }
		public override MemberTypes MemberType { get; } // 0x00914CB4-0x00914CBC 
		public bool IsLiteral { get; } // 0x00914CBC-0x00914CE0 
		public bool IsStatic { get; } // 0x00914CE0-0x00914D04 
		public bool IsInitOnly { get; } // 0x00914D04-0x00914D28 
		public bool IsNotSerialized { get; } // 0x00914D28-0x00914D4C 
	
		// Constructors
		protected FieldInfo(); // 0x00914CB0-0x00914CB4
	
		// Methods
		public abstract object GetValue(object obj);
		public abstract void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, CultureInfo culture);
		[DebuggerHidden] // 0x0039E54C-0x0039E584
		[DebuggerStepThrough] // 0x0039E54C-0x0039E584
		public void SetValue(object obj, object value); // 0x00914D4C-0x00914D68
		private static FieldInfo internal_from_handle_type(IntPtr field_handle, IntPtr type_handle); // 0x00914D68-0x00914D6C
		public static FieldInfo GetFieldFromHandle(RuntimeFieldHandle handle); // 0x00914D6C-0x00914E20
		[ComVisible] // 0x0039E584-0x0039E598
		public static FieldInfo GetFieldFromHandle(RuntimeFieldHandle handle, RuntimeTypeHandle declaringType); // 0x00914E20-0x00914F20
		internal virtual int GetFieldOffset(); // 0x00914F94-0x00915008
		[CLSCompliant] // 0x0039E598-0x0039E5AC
		public virtual void SetValueDirect(TypedReference obj, object value); // 0x00915008-0x00915090
		private MarshalAsAttribute get_marshal_info(); // 0x00915090-0x00915094
		internal object[] GetPseudoCustomAttributes(); // 0x00915094-0x00915318
		public virtual object GetRawConstantValue(); // 0x00915318-0x0091538C
		public override bool Equals(object obj); // 0x0091538C-0x00915398
		public override int GetHashCode(); // 0x00915398-0x0091539C
		public static bool operator ==(FieldInfo left, FieldInfo right); // 0x00914F20-0x00914F94
		public static bool operator !=(FieldInfo left, FieldInfo right); // 0x0091539C-0x00915414
	}

	[ComVisible] // 0x003960D8-0x003960EC
	public class LocalVariableInfo // TypeDefIndex: 535
	{
		// Fields
		internal Type type; // 0x10
		internal bool is_pinned; // 0x18
		internal ushort position; // 0x1A
	
		// Methods
		public override string ToString(); // 0x00915510-0x009155C4
	}

	[ComVisible] // 0x003960EC-0x00396100
	public class MethodBody // TypeDefIndex: 536
	{
		// Fields
		private ExceptionHandlingClause[] clauses; // 0x10
		private LocalVariableInfo[] locals; // 0x18
		private byte[] il; // 0x20
		private bool init_locals; // 0x28
		private int sig_token; // 0x2C
		private int max_stack; // 0x30
	}

	[Serializable]
	[ClassInterface] // 0x00396100-0x0039618C
	[ComDefaultInterface] // 0x00396100-0x0039618C
	[ComVisible] // 0x00396100-0x0039618C
	public abstract class Module : ISerializable, ICustomAttributeProvider, _Module // TypeDefIndex: 537
	{
		// Fields
		public static readonly TypeFilter FilterTypeName; // 0x00
		public static readonly TypeFilter FilterTypeNameIgnoreCase; // 0x08
		internal IntPtr _impl; // 0x10
		internal Assembly assembly; // 0x18
		internal string fqname; // 0x20
		internal string name; // 0x28
		internal string scopename; // 0x30
		internal bool is_resource; // 0x38
		internal int token; // 0x3C
		private const BindingFlags defaultBindingFlags = BindingFlags.Default | BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public; // Metadata: 0x00204668
	
		// Properties
		public virtual Assembly Assembly { get; } // 0x00918A0C-0x00918A78 
		public virtual string ScopeName { get; } // 0x00918AE0-0x00918B4C 
		public virtual Guid ModuleVersionId { get; } // 0x00918B4C-0x00918BB8 
	
		// Constructors
		protected Module(); // 0x009184EC-0x009184F0
		static Module(); // 0x00918CFC-0x00918DB0
	
		// Methods
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x009184F0-0x00918558
		public override string ToString(); // 0x00918558-0x00918560
		internal virtual Guid GetModuleVersionId(); // 0x00918560-0x00918594
		private static bool filter_by_type_name(Type m, object filterCriteria); // 0x00918598-0x00918788
		private static bool filter_by_type_name_ignore_case(Type m, object filterCriteria); // 0x00918788-0x00918988
		private string GetGuidInternal(); // 0x00918594-0x00918598
		public override bool Equals(object o); // 0x00918988-0x00918994
		public override int GetHashCode(); // 0x00918994-0x00918998
		public static bool operator ==(Module left, Module right); // 0x00918998-0x00918A0C
		private static Exception CreateNIE(); // 0x00918A78-0x00918AE0
		public virtual bool IsResource(); // 0x00918BB8-0x00918C24
		public virtual object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00918C24-0x00918C90
		public virtual bool IsDefined(Type attributeType, bool inherit); // 0x00918C90-0x00918CFC
	}

	internal abstract class RuntimeAssembly : Assembly // TypeDefIndex: 538
	{
		// Constructors
		protected RuntimeAssembly(); // 0x004F6368-0x004F6370
	
		// Methods
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x004F618C-0x004F6244
		internal static RuntimeAssembly LoadWithPartialNameInternal(string partialName, Evidence securityEvidence, ref StackCrawlMark stackMark); // 0x004F6244-0x004F6320
		internal static RuntimeAssembly LoadWithPartialNameInternal(AssemblyName an, Evidence securityEvidence, ref StackCrawlMark stackMark); // 0x004F6320-0x004F635C
		public override AssemblyName GetName(bool copiedName); // 0x004F635C-0x004F6368
	}

	[Serializable]
	[ClassInterface] // 0x0039618C-0x00396218
	[ComDefaultInterface] // 0x0039618C-0x00396218
	[ComVisible] // 0x0039618C-0x00396218
	internal class MonoAssembly : RuntimeAssembly // TypeDefIndex: 539
	{
		// Constructors
		public MonoAssembly(); // 0x00919164-0x0091916C
	
		// Methods
		public override Type GetType(string name, bool throwOnError, bool ignoreCase); // 0x00918DB0-0x00918EA8
		public override Module GetModule(string name); // 0x00918EA8-0x00919010
		public override Module[] GetModules(bool getResourceModules); // 0x00919010-0x00919164
	}

	internal struct MonoEventInfo // TypeDefIndex: 540
	{
		// Fields
		public Type declaring_type; // 0x00
		public Type reflected_type; // 0x08
		public string name; // 0x10
		public MethodInfo add_method; // 0x18
		public MethodInfo remove_method; // 0x20
		public MethodInfo raise_method; // 0x28
		public EventAttributes attrs; // 0x30
		public MethodInfo[] other_methods; // 0x38
	
		// Methods
		private static void get_event_info(MonoEvent ev, out MonoEventInfo info); // 0x0091A444-0x0091A448
		internal static MonoEventInfo GetEventInfo(MonoEvent ev); // 0x00919FFC-0x0091A044
	}

	internal abstract class RuntimeEventInfo : EventInfo, ISerializable // TypeDefIndex: 541
	{
		// Properties
		internal BindingFlags BindingFlags { get; } // 0x004F6804-0x004F680C 
		public override Module Module { get; } // 0x004F680C-0x004F6810 
		private RuntimeType ReflectedTypeInternal { get; } // 0x004F6918-0x004F69F0 
	
		// Constructors
		protected RuntimeEventInfo(); // 0x004F6AB8-0x004F6AC0
	
		// Methods
		internal RuntimeType GetDeclaringTypeInternal(); // 0x004F6840-0x004F6918
		internal RuntimeModule GetRuntimeModule(); // 0x004F6810-0x004F6840
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x004F69F0-0x004F6AB8
	}

	[Serializable]
	internal sealed class MonoEvent : RuntimeEventInfo // TypeDefIndex: 542
	{
		// Fields
		private IntPtr klass; // 0x18
		private IntPtr handle; // 0x20
	
		// Properties
		public override Type DeclaringType { get; } // 0x0091A164-0x0091A194 
		public override Type ReflectedType { get; } // 0x0091A194-0x0091A1C4 
		public override string Name { get; } // 0x0091A1C4-0x0091A1F4 
	
		// Constructors
		public MonoEvent(); // 0x0091A3F0-0x0091A444
	
		// Methods
		public override MethodInfo GetAddMethod(bool nonPublic); // 0x00919F6C-0x00919FFC
		public override MethodInfo GetRaiseMethod(bool nonPublic); // 0x0091A044-0x0091A0D4
		public override MethodInfo GetRemoveMethod(bool nonPublic); // 0x0091A0D4-0x0091A164
		public override string ToString(); // 0x0091A1F4-0x0091A274
		public override bool IsDefined(Type attributeType, bool inherit); // 0x0091A274-0x0091A2F4
		public override object[] GetCustomAttributes(bool inherit); // 0x0091A2F4-0x0091A36C
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x0091A36C-0x0091A3EC
		public override IList<CustomAttributeData> GetCustomAttributesData(); // 0x0091A3EC-0x0091A3F0
	}

	internal abstract class RuntimeFieldInfo : FieldInfo, ISerializable // TypeDefIndex: 543
	{
		// Properties
		internal BindingFlags BindingFlags { get; } // 0x004F6AC0-0x004F6AC8 
		public override Module Module { get; } // 0x004F6AC8-0x004F6ACC 
		private RuntimeType ReflectedTypeInternal { get; } // 0x004F6BD4-0x004F6CAC 
	
		// Constructors
		protected RuntimeFieldInfo(); // 0x004F6184-0x004F618C
	
		// Methods
		internal RuntimeType GetDeclaringTypeInternal(); // 0x004F6AFC-0x004F6BD4
		internal RuntimeModule GetRuntimeModule(); // 0x004F6ACC-0x004F6AFC
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x004F6CAC-0x004F6D88
	}

	internal abstract class RtFieldInfo : RuntimeFieldInfo // TypeDefIndex: 544
	{
		// Constructors
		protected RtFieldInfo(); // 0x004F617C-0x004F6184
	
		// Methods
		internal object UnsafeGetValue(object obj); // 0x004F4D0C-0x004F4D10
		internal void CheckConsistency(object target); // 0x004F4D10-0x004F4EDC
		[DebuggerHidden] // 0x0039E5AC-0x0039E5E4
		[DebuggerStepThrough] // 0x0039E5AC-0x0039E5E4
		internal void UnsafeSetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, CultureInfo culture); // 0x004F4F10-0x004F4F78
		[DebuggerHidden] // 0x0039E5E4-0x0039E61C
		[DebuggerStepThrough] // 0x0039E5E4-0x0039E61C
		public override void SetValueDirect(TypedReference obj, object value); // 0x004F4F78-0x004F617C
	}

	[Serializable]
	internal class MonoField : RtFieldInfo // TypeDefIndex: 545
	{
		// Fields
		internal IntPtr klass; // 0x10
		internal RuntimeFieldHandle fhandle; // 0x18
		private string name; // 0x20
		private Type type; // 0x28
		private FieldAttributes attrs; // 0x30
	
		// Properties
		public override FieldAttributes Attributes { get; } // 0x0091A448-0x0091A450 
		public override RuntimeFieldHandle FieldHandle { get; } // 0x0091A450-0x0091A458 
		public override Type FieldType { get; } // 0x0091A45C-0x0091A4E8 
		public override Type ReflectedType { get; } // 0x0091A4F0-0x0091A4F8 
		public override Type DeclaringType { get; } // 0x0091A4F8-0x0091A500 
		public override string Name { get; } // 0x0091A500-0x0091A508 
	
		// Constructors
		public MonoField(); // 0x0091AD04-0x0091AD0C
	
		// Methods
		private Type ResolveType(); // 0x0091A458-0x0091A45C
		private Type GetParentType(bool declaring); // 0x0091A4E8-0x0091A4F0
		public override bool IsDefined(Type attributeType, bool inherit); // 0x0091A508-0x0091A588
		public override object[] GetCustomAttributes(bool inherit); // 0x0091A588-0x0091A600
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x0091A600-0x0091A680
		internal override int GetFieldOffset(); // 0x0091A680-0x0091A684
		private object GetValueInternal(object obj); // 0x0091A684-0x0091A688
		public override object GetValue(object obj); // 0x0091A688-0x0091A848
		public override string ToString(); // 0x0091A900-0x0091A970
		private static void SetValueInternal(FieldInfo fi, object obj, object value); // 0x0091A970-0x0091A974
		public override void SetValue(object obj, object val, BindingFlags invokeAttr, Binder binder, CultureInfo culture); // 0x0091A974-0x0091ACFC
		public override object GetRawConstantValue(); // 0x0091ACFC-0x0091AD00
		public override IList<CustomAttributeData> GetCustomAttributesData(); // 0x0091AD00-0x0091AD04
		private void CheckGeneric(); // 0x0091A848-0x0091A900
	}

	internal struct MonoMethodInfo // TypeDefIndex: 546
	{
		// Fields
		private Type parent; // 0x00
		private Type ret; // 0x08
		internal MethodAttributes attrs; // 0x10
		internal MethodImplAttributes iattrs; // 0x14
		private CallingConventions callconv; // 0x18
	
		// Methods
		private static void get_method_info(IntPtr handle, out MonoMethodInfo info); // 0x0091BA44-0x0091BA48
		private static int get_method_attributes(IntPtr handle); // 0x0091BA48-0x0091BA4C
		internal static MonoMethodInfo GetMethodInfo(IntPtr handle); // 0x0091B4D8-0x0091B514
		internal static Type GetDeclaringType(IntPtr handle); // 0x00919B10-0x00919B3C
		internal static Type GetReturnType(IntPtr handle); // 0x0091AD54-0x0091AD80
		internal static MethodAttributes GetAttributes(IntPtr handle); // 0x00919A38-0x00919A3C
		internal static CallingConventions GetCallingConvention(IntPtr handle); // 0x00919A6C-0x00919A98
		internal static MethodImplAttributes GetMethodImplementationFlags(IntPtr handle); // 0x0091919C-0x009191C8
		private static ParameterInfo[] get_parameter_info(IntPtr handle, MemberInfo member); // 0x0091BA4C-0x0091BA50
		internal static ParameterInfo[] GetParametersInfo(IntPtr handle, MemberInfo member); // 0x009191D8-0x009191DC
	}

	internal abstract class RuntimeMethodInfo : MethodInfo, ISerializable // TypeDefIndex: 547
	{
		// Properties
		internal BindingFlags BindingFlags { get; } // 0x004F6D88-0x004F6D90 
		public override Module Module { get; } // 0x004F6D90-0x004F6D94 
		private RuntimeType ReflectedTypeInternal { get; } // 0x004F6EF8-0x004F6FD0 
	
		// Constructors
		protected RuntimeMethodInfo(); // 0x004F73FC-0x004F7404
	
		// Methods
		internal override string FormatNameAndSig(bool serialization); // 0x004F6FD0-0x004F7160
		public override string ToString(); // 0x004F7160-0x004F7200
		internal RuntimeModule GetRuntimeModule(); // 0x004F6D94-0x004F6EF8
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x004F7200-0x004F7350
		internal string SerializationToString(); // 0x004F7350-0x004F73FC
	}

	[Serializable]
	internal class MonoMethod : RuntimeMethodInfo // TypeDefIndex: 548
	{
		// Fields
		internal IntPtr mhandle; // 0x10
		private string name; // 0x18
		private Type reftype; // 0x20
	
		// Properties
		public override Type ReturnType { get; } // 0x0091AD24-0x0091AD54 
		public override RuntimeMethodHandle MethodHandle { get; } // 0x0091B0CC-0x0091B0FC 
		public override MethodAttributes Attributes { get; } // 0x0091B0FC-0x0091B104 
		public override CallingConventions CallingConvention { get; } // 0x0091B104-0x0091B134 
		public override Type ReflectedType { get; } // 0x0091B134-0x0091B13C 
		public override Type DeclaringType { get; } // 0x0091B13C-0x0091B16C 
		public override string Name { get; } // 0x0091B16C-0x0091B194 
		public override bool IsGenericMethodDefinition { get; } // 0x0091B8E4-0x0091B8E8 
		public override bool IsGenericMethod { get; } // 0x0091B8E8-0x0091B8EC 
		public override bool ContainsGenericParameters { get; } // 0x0091B8EC-0x0091B9E4 
		public override bool IsSecurityCritical { get; } // 0x0091B9F0-0x0091BA44 
	
		// Constructors
		internal MonoMethod(); // 0x0091AD0C-0x0091AD14
	
		// Methods
		internal static string get_name(MethodBase method); // 0x00919B64-0x00919B68
		internal static MonoMethod get_base_method(MonoMethod method, bool definition); // 0x0091AD14-0x0091AD1C
		internal override MethodInfo GetBaseMethod(); // 0x0091AD1C-0x0091AD24
		public override MethodImplAttributes GetMethodImplementationFlags(); // 0x0091AD80-0x0091ADB0
		public override ParameterInfo[] GetParameters(); // 0x0091ADB0-0x0091AE4C
		internal override ParameterInfo[] GetParametersInternal(); // 0x0091AE4C-0x0091AE5C
		internal override int GetParametersCount(); // 0x0091AE5C-0x0091AE94
		internal object InternalInvoke(object obj, object[] parameters, out Exception exc); // 0x0091AE94-0x0091AE98
		[DebuggerHidden] // 0x0039E61C-0x0039E654
		[DebuggerStepThrough] // 0x0039E61C-0x0039E654
		public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x0091AE98-0x0091B0CC
		internal static void ConvertValues(Binder binder, object[] args, ParameterInfo[] pinfo, CultureInfo culture, BindingFlags invokeAttr); // 0x0091952C-0x00919868
		public override bool IsDefined(Type attributeType, bool inherit); // 0x0091B194-0x0091B214
		public override object[] GetCustomAttributes(bool inherit); // 0x0091B214-0x0091B28C
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x0091B28C-0x0091B30C
		internal void GetPInvoke(out PInvokeAttributes flags, out string entryPoint, out string dllName); // 0x0091B30C-0x0091B310
		internal object[] GetPseudoCustomAttributes(); // 0x0091B310-0x0091B4D8
		public override MethodInfo MakeGenericMethod(params /* 0x0039FA38-0x0039FA48 */ Type[] methodInstantiation); // 0x0091B514-0x0091B844
		private MethodInfo MakeGenericMethod_impl(Type[] types); // 0x0091B844-0x0091B848
		public override Type[] GetGenericArguments(); // 0x0091B848-0x0091B84C
		private MethodInfo GetGenericMethodDefinition_impl(); // 0x0091B84C-0x0091B850
		public override MethodInfo GetGenericMethodDefinition(); // 0x0091B850-0x0091B8E4
		public override IList<CustomAttributeData> GetCustomAttributesData(); // 0x0091B9E4-0x0091B9E8
		private static int get_core_clr_security_level(); // 0x0091B9E8-0x0091B9F0
	}

	internal abstract class RuntimeConstructorInfo : ConstructorInfo, ISerializable // TypeDefIndex: 549
	{
		// Properties
		public override Module Module { get; } // 0x004F6370-0x004F6374 
		internal BindingFlags BindingFlags { get; } // 0x004F6454-0x004F645C 
		private RuntimeType ReflectedTypeInternal { get; } // 0x004F645C-0x004F6534 
	
		// Constructors
		protected RuntimeConstructorInfo(); // 0x004F679C-0x004F6804
	
		// Methods
		internal RuntimeModule GetRuntimeModule(); // 0x004F6374-0x004F6454
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x004F6534-0x004F663C
		internal string SerializationToString(); // 0x004F663C-0x004F6650
		internal void SerializationInvoke(object target, SerializationInfo info, StreamingContext context); // 0x004F6650-0x004F679C
	}

	[Serializable]
	internal class MonoCMethod : RuntimeConstructorInfo // TypeDefIndex: 550
	{
		// Fields
		internal IntPtr mhandle; // 0x10
		private string name; // 0x18
		private Type reftype; // 0x20
	
		// Properties
		public override RuntimeMethodHandle MethodHandle { get; } // 0x00919A00-0x00919A30 
		public override MethodAttributes Attributes { get; } // 0x00919A30-0x00919A38 
		public override CallingConventions CallingConvention { get; } // 0x00919A3C-0x00919A6C 
		public override bool ContainsGenericParameters { get; } // 0x00919A98-0x00919AD8 
		public override Type ReflectedType { get; } // 0x00919AD8-0x00919AE0 
		public override Type DeclaringType { get; } // 0x00919AE0-0x00919B10 
		public override string Name { get; } // 0x00919B3C-0x00919B64 
		public override bool IsSecurityCritical { get; } // 0x00919F5C-0x00919F64 
	
		// Constructors
		public MonoCMethod(); // 0x00919F64-0x00919F6C
	
		// Methods
		public override MethodImplAttributes GetMethodImplementationFlags(); // 0x0091916C-0x0091919C
		public override ParameterInfo[] GetParameters(); // 0x009191C8-0x009191D8
		internal override ParameterInfo[] GetParametersInternal(); // 0x009191DC-0x009191EC
		internal override int GetParametersCount(); // 0x009191EC-0x00919214
		internal object InternalInvoke(object obj, object[] parameters, out Exception exc); // 0x00919214-0x00919218
		[DebuggerHidden] // 0x0039E654-0x0039E68C
		[DebuggerStepThrough] // 0x0039E654-0x0039E68C
		public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x00919218-0x0091934C
		private object DoInvoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x0091934C-0x0091952C
		public object InternalInvoke(object obj, object[] parameters); // 0x00919868-0x009199D8
		[DebuggerHidden] // 0x0039E68C-0x0039E6C4
		[DebuggerStepThrough] // 0x0039E68C-0x0039E6C4
		public override object Invoke(BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x009199D8-0x00919A00
		public override bool IsDefined(Type attributeType, bool inherit); // 0x00919B68-0x00919BE8
		public override object[] GetCustomAttributes(bool inherit); // 0x00919BE8-0x00919C60
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00919C60-0x00919CE0
		public override string ToString(); // 0x00919CE0-0x00919F50
		public override IList<CustomAttributeData> GetCustomAttributesData(); // 0x00919F50-0x00919F54
		private static int get_core_clr_security_level(); // 0x00919F54-0x00919F5C
	}

	internal abstract class RuntimeModule : Module // TypeDefIndex: 551
	{
		// Constructors
		protected RuntimeModule(); // 0x004F7404-0x004F746C
	}

	[Serializable]
	[ClassInterface] // 0x00396218-0x003962A4
	[ComDefaultInterface] // 0x00396218-0x003962A4
	[ComVisible] // 0x00396218-0x003962A4
	internal class MonoModule : RuntimeModule // TypeDefIndex: 552
	{
		// Properties
		public override Assembly Assembly { get; } // 0x0091BA50-0x0091BA58 
		public override string ScopeName { get; } // 0x0091BA58-0x0091BA60 
		public override Guid ModuleVersionId { get; } // 0x0091BA60-0x0091BA6C 
	
		// Constructors
		public MonoModule(); // 0x0091BD04-0x0091BD0C
	
		// Methods
		public override bool IsResource(); // 0x0091BA6C-0x0091BA74
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x0091BA74-0x0091BAF4
		public override bool IsDefined(Type attributeType, bool inherit); // 0x0091BAF4-0x0091BB74
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0091BB74-0x0091BC38
		internal RuntimeAssembly GetRuntimeAssembly(); // 0x0091BC38-0x0091BD04
	}

	internal abstract class RuntimeParameterInfo : ParameterInfo // TypeDefIndex: 553
	{
		// Constructors
		protected RuntimeParameterInfo(); // 0x004F746C-0x004F7474
	}

	[Serializable]
	[ClassInterface] // 0x003962A4-0x00396330
	[ComDefaultInterface] // 0x003962A4-0x00396330
	[ComVisible] // 0x003962A4-0x00396330
	internal class MonoParameterInfo : RuntimeParameterInfo // TypeDefIndex: 554
	{
		// Properties
		public override object DefaultValue { get; } // 0x0091BE08-0x0091C118 
	
		// Constructors
		internal MonoParameterInfo(ParameterInfo pinfo, MemberInfo member); // 0x0091BD0C-0x0091BE00
	
		// Methods
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x0091C118-0x0091C198
		public override bool IsDefined(Type attributeType, bool inherit); // 0x0091C198-0x0091C218
	}

	internal struct MonoPropertyInfo // TypeDefIndex: 555
	{
		// Fields
		public Type parent; // 0x00
		public Type declaring_type; // 0x08
		public string name; // 0x10
		public MethodInfo get_method; // 0x18
		public MethodInfo set_method; // 0x20
		public PropertyAttributes attrs; // 0x28
	
		// Methods
		internal static void get_property_info(MonoProperty prop, ref MonoPropertyInfo info, PInfo req_info); // 0x0091C260-0x0091C264
		internal static Type[] GetTypeModifiers(MonoProperty prop, bool optional); // 0x0091D500-0x0091D508
		internal static object get_default_value(MonoProperty prop); // 0x0091CAC0-0x0091CAC4
	}

	[Flags] // 0x00396330-0x00396340
	internal enum PInfo // TypeDefIndex: 556
	{
		Attributes = 1,
		GetMethod = 2,
		SetMethod = 4,
		ReflectedType = 8,
		DeclaringType = 16,
		Name = 32
	}

	internal abstract class RuntimePropertyInfo : PropertyInfo, ISerializable // TypeDefIndex: 557
	{
		// Properties
		internal BindingFlags BindingFlags { get; } // 0x004F7474-0x004F747C 
		public override Module Module { get; } // 0x004F747C-0x004F7480 
		private RuntimeType ReflectedTypeInternal { get; } // 0x004F7588-0x004F7660 
	
		// Constructors
		protected RuntimePropertyInfo(); // 0x004F793C-0x004F7944
	
		// Methods
		internal RuntimeType GetDeclaringTypeInternal(); // 0x004F74B0-0x004F7588
		internal RuntimeModule GetRuntimeModule(); // 0x004F7480-0x004F74B0
		public override string ToString(); // 0x004F7660-0x004F7668
		private string FormatNameAndSig(bool serialization); // 0x004F7668-0x004F7838
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x004F7838-0x004F7934
		internal string SerializationToString(); // 0x004F7934-0x004F793C
	}

	[Serializable]
	internal class MonoProperty : RuntimePropertyInfo // TypeDefIndex: 558
	{
		// Fields
		internal IntPtr klass; // 0x10
		internal IntPtr prop; // 0x18
		private MonoPropertyInfo info; // 0x20
		private PInfo cached; // 0x50
		private GetterAdapter cached_getter; // 0x58
	
		// Properties
		public override PropertyAttributes Attributes { get; } // 0x0091C264-0x0091C2A8 
		public override bool CanRead { get; } // 0x0091C2A8-0x0091C2FC 
		public override bool CanWrite { get; } // 0x0091C2FC-0x0091C350 
		public override Type PropertyType { get; } // 0x0091C350-0x0091C444 
		public override Type ReflectedType { get; } // 0x0091C444-0x0091C488 
		public override Type DeclaringType { get; } // 0x0091C488-0x0091C4CC 
		public override string Name { get; } // 0x0091C4CC-0x0091C510 
	
		// Nested types
		private delegate object GetterAdapter(object _this); // TypeDefIndex: 559; 0x0091D5A0-0x0091DCF0
	
		private delegate R Getter<T, R>(T _this); // TypeDefIndex: 560; 0x00000000-0x00000000
	
		private delegate R StaticGetter<R>(); // TypeDefIndex: 561; 0x00000000-0x00000000
	
		// Constructors
		public MonoProperty(); // 0x0091D588-0x0091D590
	
		// Methods
		private void CachePropertyInfo(PInfo flags); // 0x0091C218-0x0091C260
		public override MethodInfo[] GetAccessors(bool nonPublic); // 0x0091C510-0x0091C708
		public override MethodInfo GetGetMethod(bool nonPublic); // 0x0091C708-0x0091C7A4
		public override ParameterInfo[] GetIndexParameters(); // 0x0091C7A4-0x0091C9B0
		public override MethodInfo GetSetMethod(bool nonPublic); // 0x0091CA20-0x0091CABC
		public override object GetConstantValue(); // 0x0091CABC-0x0091CAC0
		public override object GetRawConstantValue(); // 0x0091CAC4-0x0091CAC8
		public override bool IsDefined(Type attributeType, bool inherit); // 0x0091CAC8-0x0091CB44
		public override object[] GetCustomAttributes(bool inherit); // 0x0091CB44-0x0091CBB0
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x0091CBB0-0x0091CC2C
		private static object GetterAdapterFrame<T, R>(Getter<T, R> getter, object obj);
		private static object StaticGetterAdapterFrame<R>(StaticGetter<R> getter, object obj);
		private static GetterAdapter CreateGetterDelegate(MethodInfo method); // 0x0091CC2C-0x0091CFF8
		public override object GetValue(object obj, object[] index); // 0x0091CFF8-0x0091D01C
		public override object GetValue(object obj, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture); // 0x0091D01C-0x0091D238
		public override void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture); // 0x0091D238-0x0091D484
		public override Type[] GetOptionalCustomModifiers(); // 0x0091D484-0x0091D500
		public override Type[] GetRequiredCustomModifiers(); // 0x0091D508-0x0091D584
		public override IList<CustomAttributeData> GetCustomAttributesData(); // 0x0091D584-0x0091D588
	}

	[Serializable]
	[ClassInterface] // 0x00396340-0x003963CC
	[ComDefaultInterface] // 0x00396340-0x003963CC
	[ComVisible] // 0x00396340-0x003963CC
	public class ParameterInfo : ICustomAttributeProvider, IObjectReference, _ParameterInfo // TypeDefIndex: 562
	{
		// Fields
		protected Type ClassImpl; // 0x10
		protected object DefaultValueImpl; // 0x18
		protected MemberInfo MemberImpl; // 0x20
		protected string NameImpl; // 0x28
		protected int PositionImpl; // 0x30
		protected ParameterAttributes AttrsImpl; // 0x34
		internal MarshalAsAttribute marshalAs; // 0x38
	
		// Properties
		public virtual Type ParameterType { get; } // 0x0091E270-0x0091E278 
		public virtual ParameterAttributes Attributes { get; } // 0x0091E278-0x0091E280 
		public bool IsIn { get; } // 0x0091E280-0x0091E2A0 
		public bool IsOptional { get; } // 0x0091E2A0-0x0091E2C0 
		public bool IsOut { get; } // 0x0091E2C0-0x0091E2E0 
		public bool IsRetval { get; } // 0x0091DFC4-0x0091DFE4 
		public virtual string Name { get; } // 0x0091E2E0-0x0091E2E8 
		public virtual int Position { get; } // 0x0091E2E8-0x0091E2F0 
		public virtual object DefaultValue { get; } // 0x0091E5D4-0x0091E63C 
	
		// Constructors
		protected ParameterInfo(); // 0x0091DDB8-0x0091DDBC
	
		// Methods
		public override string ToString(); // 0x0091DDBC-0x0091DFC4
		internal static void FormatParameters(StringBuilder sb, ParameterInfo[] p, CallingConventions callingConvention, bool serialization); // 0x0091DFE4-0x0091E270
		internal object[] GetPseudoCustomAttributes(); // 0x0091E2F0-0x0091E5D4
		internal object GetDefaultValueImpl(); // 0x0091BE00-0x0091BE08
		public virtual object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x0091E63C-0x0091E688
		public object GetRealObject(StreamingContext context); // 0x0091E688-0x0091E6F0
		public virtual bool IsDefined(Type attributeType, bool inherit); // 0x0091E6F0-0x0091E884
		internal static ParameterInfo New(ParameterInfo pinfo, MemberInfo member); // 0x0091C9B0-0x0091CA20
	}

	[Serializable]
	[ClassInterface] // 0x003963CC-0x00396458
	[ComDefaultInterface] // 0x003963CC-0x00396458
	[ComVisible] // 0x003963CC-0x00396458
	public abstract class PropertyInfo : MemberInfo, _PropertyInfo // TypeDefIndex: 563
	{
		// Properties
		public abstract PropertyAttributes Attributes { get; }
		public abstract bool CanRead { get; }
		public abstract bool CanWrite { get; }
		public override MemberTypes MemberType { get; } // 0x0091ECE8-0x0091ECF0 
		public abstract Type PropertyType { get; }
	
		// Constructors
		protected PropertyInfo(); // 0x0091ECF0-0x0091ECF4
	
		// Methods
		public abstract MethodInfo[] GetAccessors(bool nonPublic);
		public abstract MethodInfo GetGetMethod(bool nonPublic);
		public abstract ParameterInfo[] GetIndexParameters();
		public abstract MethodInfo GetSetMethod(bool nonPublic);
		[DebuggerHidden] // 0x0039E6C4-0x0039E6FC
		[DebuggerStepThrough] // 0x0039E6C4-0x0039E6FC
		public virtual object GetValue(object obj, object[] index); // 0x0091ECF4-0x0091ED18
		public abstract object GetValue(object obj, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture);
		public abstract void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture);
		public virtual Type[] GetOptionalCustomModifiers(); // 0x0091ED18-0x0091ED80
		public virtual Type[] GetRequiredCustomModifiers(); // 0x0091ED80-0x0091EDE8
		private static NotImplementedException CreateNIE(); // 0x0091EDE8-0x0091EE44
		public virtual object GetConstantValue(); // 0x0091EE44-0x0091EE90
		public virtual object GetRawConstantValue(); // 0x0091EE90-0x0091EEDC
		public override bool Equals(object obj); // 0x0091EEDC-0x0091EEE8
		public override int GetHashCode(); // 0x0091EEE8-0x0091EEEC
		public static bool operator ==(PropertyInfo left, PropertyInfo right); // 0x00916194-0x00916208
		public static bool operator !=(PropertyInfo left, PropertyInfo right); // 0x0091611C-0x00916194
		private static PropertyInfo internal_from_handle_type(IntPtr event_handle, IntPtr type_handle); // 0x0091EEEC-0x0091EEF0
		internal static PropertyInfo GetPropertyFromHandle(RuntimePropertyHandle handle, RuntimeTypeHandle reflectedType); // 0x0091EEF0-0x0091EFF0
	}

	[Serializable]
	[ComVisible] // 0x00396458-0x0039646C
	public class StrongNameKeyPair : ISerializable, IDeserializationCallback // TypeDefIndex: 564
	{
		// Fields
		private byte[] _publicKey; // 0x10
		private string _keyPairContainer; // 0x18
		private bool _keyPairExported; // 0x20
		private byte[] _keyPairArray; // 0x28
	
		// Constructors
		protected StrongNameKeyPair(SerializationInfo info, StreamingContext context); // 0x004F7944-0x004F7B9C
	
		// Methods
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x004F7B9C-0x004F7CF4
		void IDeserializationCallback.OnDeserialization(object sender); // 0x004F7CF4-0x004F7CF8
	}
}

namespace System.Reflection.Emit
{
	public class AssemblyBuilder : Assembly, _AssemblyBuilder // TypeDefIndex: 565
	{
	}

	public abstract class ConstructorBuilder : ConstructorInfo, _ConstructorBuilder // TypeDefIndex: 566
	{
		// Properties
		public override MethodAttributes Attributes { get; } // 0x0090F3FC-0x0090F460 
		public override Type DeclaringType { get; } // 0x0090F460-0x0090F4C4 
		public override string Name { get; } // 0x0090F4C4-0x0090F528 
		public override RuntimeMethodHandle MethodHandle { get; } // 0x0090F58C-0x0090F614 
		public override Type ReflectedType { get; } // 0x0090F614-0x0090F69C 
	
		// Methods
		public override ParameterInfo[] GetParameters(); // 0x0090F528-0x0090F58C
		public override object[] GetCustomAttributes(bool inherit); // 0x0090F69C-0x0090F724
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x0090F724-0x0090F7AC
		public override MethodImplAttributes GetMethodImplementationFlags(); // 0x0090F7AC-0x0090F834
		public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x0090F834-0x0090F8BC
		public override object Invoke(BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x0090F8BC-0x0090F944
		public override bool IsDefined(Type attributeType, bool inherit); // 0x0090F944-0x0090F9CC
	}

	public class CustomAttributeBuilder : _CustomAttributeBuilder // TypeDefIndex: 567
	{
	}

	public abstract class EnumBuilder : System.Reflection.TypeInfo, _EnumBuilder // TypeDefIndex: 568
	{
		// Properties
		public override Assembly Assembly { get; } // 0x0090FFA4-0x00910008 
		public override string AssemblyQualifiedName { get; } // 0x00910008-0x0091006C 
		public override Type BaseType { get; } // 0x0091006C-0x009100D0 
		public override string FullName { get; } // 0x009100D0-0x00910134 
		public override Module Module { get; } // 0x00910134-0x00910198 
		public override string Name { get; } // 0x00910198-0x009101FC 
		public override string Namespace { get; } // 0x009101FC-0x00910260 
		public override Type UnderlyingSystemType { get; } // 0x009102C4-0x0091034C 
	
		// Methods
		public override Type GetElementType(); // 0x00910260-0x009102C4
		protected override TypeAttributes GetAttributeFlagsImpl(); // 0x0091034C-0x009103D4
		protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x009103D4-0x0091045C
		[ComVisible] // 0x0039E6FC-0x0039E710
		public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr); // 0x0091045C-0x009104E4
		public override object[] GetCustomAttributes(bool inherit); // 0x009104E4-0x0091056C
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x0091056C-0x009105F4
		public override EventInfo GetEvent(string name, BindingFlags bindingAttr); // 0x009105F4-0x0091067C
		public override FieldInfo GetField(string name, BindingFlags bindingAttr); // 0x0091067C-0x00910704
		public override FieldInfo[] GetFields(BindingFlags bindingAttr); // 0x00910704-0x0091078C
		public override Type[] GetInterfaces(); // 0x0091078C-0x00910814
		protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x00910814-0x0091089C
		public override MethodInfo[] GetMethods(BindingFlags bindingAttr); // 0x0091089C-0x00910924
		public override Type GetNestedType(string name, BindingFlags bindingAttr); // 0x00910924-0x009109AC
		protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x009109AC-0x00910A34
		protected override bool HasElementTypeImpl(); // 0x00910A34-0x00910ABC
		public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters); // 0x00910ABC-0x00910B44
		protected override bool IsArrayImpl(); // 0x00910B44-0x00910BCC
		protected override bool IsByRefImpl(); // 0x00910BCC-0x00910C54
		protected override bool IsCOMObjectImpl(); // 0x00910C54-0x00910CDC
		public override bool IsDefined(Type attributeType, bool inherit); // 0x00910CDC-0x00910D64
		protected override bool IsPointerImpl(); // 0x00910D64-0x00910DEC
		protected override bool IsPrimitiveImpl(); // 0x00910DEC-0x00910E74
	}

	public class EventBuilder : _EventBuilder // TypeDefIndex: 569
	{
	}

	public abstract class FieldBuilder : FieldInfo, _FieldBuilder // TypeDefIndex: 570
	{
		// Properties
		public override FieldAttributes Attributes { get; } // 0x00910E74-0x00910ED8 
		public override Type DeclaringType { get; } // 0x00910ED8-0x00910F3C 
		public override Type FieldType { get; } // 0x00910F3C-0x00910FA0 
		public override string Name { get; } // 0x00910FA0-0x00911004 
		public override RuntimeFieldHandle FieldHandle { get; } // 0x00911068-0x009110F0 
		public override Type ReflectedType { get; } // 0x009110F0-0x00911178 
	
		// Methods
		public override object GetValue(object obj); // 0x00911004-0x00911068
		public override object[] GetCustomAttributes(bool inherit); // 0x00911178-0x00911200
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00911200-0x00911288
		public override bool IsDefined(Type attributeType, bool inherit); // 0x00911288-0x00911310
		public override void SetValue(object obj, object val, BindingFlags invokeAttr, Binder binder, CultureInfo culture); // 0x00911310-0x00911394
	}

	public abstract class GenericTypeParameterBuilder : System.Reflection.TypeInfo // TypeDefIndex: 571
	{
		// Properties
		public override Assembly Assembly { get; } // 0x00911394-0x009113F8 
		public override string AssemblyQualifiedName { get; } // 0x009113F8-0x0091145C 
		public override Type BaseType { get; } // 0x0091145C-0x009114C0 
		public override string FullName { get; } // 0x009114C0-0x00911524 
		public override Module Module { get; } // 0x00911524-0x00911588 
		public override string Name { get; } // 0x00911588-0x009115EC 
		public override string Namespace { get; } // 0x009115EC-0x00911650 
		public override Type UnderlyingSystemType { get; } // 0x009116B4-0x0091173C 
	
		// Methods
		public override Type GetElementType(); // 0x00911650-0x009116B4
		protected override TypeAttributes GetAttributeFlagsImpl(); // 0x0091173C-0x009117C4
		protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x009117C4-0x0091184C
		[ComVisible] // 0x0039E710-0x0039E724
		public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr); // 0x0091184C-0x009118D4
		public override object[] GetCustomAttributes(bool inherit); // 0x009118D4-0x0091195C
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x0091195C-0x009119E4
		public override EventInfo GetEvent(string name, BindingFlags bindingAttr); // 0x009119E4-0x00911A6C
		public override FieldInfo GetField(string name, BindingFlags bindingAttr); // 0x00911A6C-0x00911AF4
		public override FieldInfo[] GetFields(BindingFlags bindingAttr); // 0x00911AF4-0x00911B7C
		public override Type[] GetInterfaces(); // 0x00911B7C-0x00911C04
		protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x00911C04-0x00911C8C
		public override MethodInfo[] GetMethods(BindingFlags bindingAttr); // 0x00911C8C-0x00911D14
		public override Type GetNestedType(string name, BindingFlags bindingAttr); // 0x00911D14-0x00911D9C
		protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x00911D9C-0x00911E24
		protected override bool HasElementTypeImpl(); // 0x00911E24-0x00911EAC
		public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters); // 0x00911EAC-0x00911F34
		protected override bool IsArrayImpl(); // 0x00911F34-0x00911FBC
		protected override bool IsByRefImpl(); // 0x00911FBC-0x00912044
		protected override bool IsCOMObjectImpl(); // 0x00912044-0x009120CC
		public override bool IsDefined(Type attributeType, bool inherit); // 0x009120CC-0x00912154
		protected override bool IsPointerImpl(); // 0x00912154-0x009121DC
		protected override bool IsPrimitiveImpl(); // 0x009121DC-0x009122B0
	}

	public class ILGenerator : _ILGenerator // TypeDefIndex: 572
	{
	}

	[ClassInterface] // 0x0039646C-0x003964AC
	[ComVisible] // 0x0039646C-0x003964AC
	public sealed class LocalBuilder : LocalVariableInfo, _LocalBuilder // TypeDefIndex: 573
	{
		// Fields
		private string name; // 0x20
		internal ILGenerator ilgen; // 0x28
		private int startOffset; // 0x30
		private int endOffset; // 0x34
	}

	public abstract class MethodBuilder : MethodInfo, _MethodBuilder // TypeDefIndex: 574
	{
		// Properties
		public override MethodAttributes Attributes { get; } // 0x009122B0-0x00912314 
		public override Type DeclaringType { get; } // 0x00912314-0x00912378 
		public override string Name { get; } // 0x00912378-0x009123DC 
		public override RuntimeMethodHandle MethodHandle { get; } // 0x00912440-0x009124C8 
		public override Type ReflectedType { get; } // 0x009124C8-0x00912550 
	
		// Methods
		public override ParameterInfo[] GetParameters(); // 0x009123DC-0x00912440
		public override object[] GetCustomAttributes(bool inherit); // 0x00912550-0x009125D8
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x009125D8-0x00912660
		public override MethodImplAttributes GetMethodImplementationFlags(); // 0x00912660-0x009126E8
		public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x009126E8-0x00912770
		public override bool IsDefined(Type attributeType, bool inherit); // 0x00912770-0x009127F8
	}

	public abstract class ModuleBuilder : Module, _ModuleBuilder // TypeDefIndex: 575
	{
	}

	public class ParameterBuilder : _ParameterBuilder // TypeDefIndex: 576
	{
	}

	public abstract class PropertyBuilder : PropertyInfo, _PropertyBuilder // TypeDefIndex: 577
	{
		// Properties
		public override PropertyAttributes Attributes { get; } // 0x009127F8-0x0091285C 
		public override bool CanRead { get; } // 0x0091285C-0x009128C0 
		public override bool CanWrite { get; } // 0x009128C0-0x00912924 
		public override Type DeclaringType { get; } // 0x00912924-0x00912988 
		public override string Name { get; } // 0x00912988-0x009129EC 
		public override Type PropertyType { get; } // 0x009129EC-0x00912A50 
		public override Type ReflectedType { get; } // 0x00912AB4-0x00912B3C 
	
		// Methods
		public override ParameterInfo[] GetIndexParameters(); // 0x00912A50-0x00912AB4
		public override MethodInfo[] GetAccessors(bool nonPublic); // 0x00912B3C-0x00912BC4
		public override object[] GetCustomAttributes(bool inherit); // 0x00912BC4-0x00912C4C
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00912C4C-0x00912CD4
		public override MethodInfo GetGetMethod(bool nonPublic); // 0x00912CD4-0x00912D5C
		public override MethodInfo GetSetMethod(bool nonPublic); // 0x00912D5C-0x00912DE4
		public override object GetValue(object obj, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture); // 0x00912DE4-0x00912E6C
		public override bool IsDefined(Type attributeType, bool inherit); // 0x00912E6C-0x00912EF4
		public override void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture); // 0x00912EF4-0x00912F78
	}

	public class SignatureHelper : _SignatureHelper // TypeDefIndex: 578
	{
	}

	public abstract class TypeBuilder : System.Reflection.TypeInfo, _TypeBuilder // TypeDefIndex: 579
	{
		// Fields
		public const int UnspecifiedTypeSize = 0; // Metadata: 0x00204684
	
		// Properties
		public override Assembly Assembly { get; } // 0x00912F78-0x00912FDC 
		public override string AssemblyQualifiedName { get; } // 0x00912FDC-0x00913040 
		public override Type BaseType { get; } // 0x00913040-0x009130A4 
		public override string FullName { get; } // 0x009130A4-0x00913108 
		public override Module Module { get; } // 0x00913108-0x0091316C 
		public override string Name { get; } // 0x0091316C-0x009131D0 
		public override string Namespace { get; } // 0x009131D0-0x00913234 
		public override Type UnderlyingSystemType { get; } // 0x00913298-0x00913320 
	
		// Methods
		public override Type GetElementType(); // 0x00913234-0x00913298
		protected override TypeAttributes GetAttributeFlagsImpl(); // 0x00913320-0x009133A8
		protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x009133A8-0x00913430
		[ComVisible] // 0x0039E724-0x0039E738
		public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr); // 0x00913430-0x009134B8
		public override object[] GetCustomAttributes(bool inherit); // 0x009134B8-0x00913540
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00913540-0x009135C8
		public override EventInfo GetEvent(string name, BindingFlags bindingAttr); // 0x009135C8-0x00913650
		public override FieldInfo GetField(string name, BindingFlags bindingAttr); // 0x00913650-0x009136D8
		public override FieldInfo[] GetFields(BindingFlags bindingAttr); // 0x009136D8-0x00913760
		public override Type[] GetInterfaces(); // 0x00913760-0x009137E8
		protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x009137E8-0x00913870
		public override MethodInfo[] GetMethods(BindingFlags bindingAttr); // 0x00913870-0x009138F8
		public override Type GetNestedType(string name, BindingFlags bindingAttr); // 0x009138F8-0x00913980
		protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x00913980-0x00913A08
		protected override bool HasElementTypeImpl(); // 0x00913A08-0x00913A90
		public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters); // 0x00913A90-0x00913B18
		protected override bool IsArrayImpl(); // 0x00913B18-0x00913BA0
		protected override bool IsByRefImpl(); // 0x00913BA0-0x00913C28
		protected override bool IsCOMObjectImpl(); // 0x00913C28-0x00913CB0
		public override bool IsDefined(Type attributeType, bool inherit); // 0x00913CB0-0x00913D38
		protected override bool IsPointerImpl(); // 0x00913D38-0x00913DC0
		protected override bool IsPrimitiveImpl(); // 0x00913DC0-0x00913E48
	}

	internal abstract class TypeBuilderInstantiation : System.Reflection.TypeInfo // TypeDefIndex: 580
	{
		// Methods
		internal static Type MakeGenericType(Type type, Type[] typeArguments); // 0x00913E48-0x00913EBC
	}
}

namespace System.IO
{
	internal static class __Error // TypeDefIndex: 581
	{
		// Methods
		internal static void EndOfFile(); // 0x004E36B4-0x004E373C
		internal static void FileNotOpen(); // 0x004E373C-0x004E37C8
		internal static void StreamIsClosed(); // 0x004E2168-0x004E21F4
		internal static void MemoryStreamNotExpandable(); // 0x004E37C8-0x004E384C
		internal static void ReaderClosed(); // 0x004DABB4-0x004DAC40
		internal static void ReadNotSupported(); // 0x004D7834-0x004D78B8
		internal static void WrongAsyncResult(); // 0x004D9EE8-0x004D9F70
		internal static void EndReadCalledTwice(); // 0x004D9F70-0x004D9FF8
		internal static void EndWriteCalledTwice(); // 0x004D9FF8-0x004DA080
		internal static string GetDisplayablePath(string path, bool isInvalidPath); // 0x004E384C-0x004E39B4
		internal static void WinIOError(int errorCode, string maybeFullPath); // 0x004E39B4-0x004E3FD4
		internal static void WriteNotSupported(); // 0x004D84E4-0x004D8568
		internal static void WriterClosed(); // 0x004DDDB4-0x004DDE40
	}

	[ComVisible] // 0x003964AC-0x003964C0
	public class BinaryReader : IDisposable // TypeDefIndex: 582
	{
		// Fields
		private Stream m_stream; // 0x10
		private byte[] m_buffer; // 0x18
		private Decoder m_decoder; // 0x20
		private byte[] m_charBytes; // 0x28
		private char[] m_singleChar; // 0x30
		private char[] m_charBuffer; // 0x38
		private int m_maxCharsSize; // 0x40
		private bool m_2BytesPerChar; // 0x44
		private bool m_isMemoryStream; // 0x45
		private bool m_leaveOpen; // 0x46
	
		// Properties
		public virtual Stream BaseStream { get; } // 0x00633D44-0x00633D4C 
	
		// Constructors
		public BinaryReader(Stream input); // 0x00633A64-0x00633ADC
		public BinaryReader(Stream input, Encoding encoding); // 0x00633D3C-0x00633D44
		public BinaryReader(Stream input, Encoding encoding, bool leaveOpen); // 0x00633ADC-0x00633D3C
	
		// Methods
		public virtual void Close(); // 0x00633D4C-0x00633D5C
		protected virtual void Dispose(bool disposing); // 0x00633D5C-0x00633DB0
		public void Dispose(); // 0x00633DB0-0x00633DC0
		public virtual int Read(); // 0x00633DC0-0x00633DF0
		public virtual bool ReadBoolean(); // 0x00634124-0x00634188
		public virtual byte ReadByte(); // 0x00634188-0x006341E0
		[CLSCompliant] // 0x0039E738-0x0039E74C
		public virtual sbyte ReadSByte(); // 0x006341E0-0x0063423C
		public virtual char ReadChar(); // 0x0063423C-0x0063426C
		public virtual short ReadInt16(); // 0x0063426C-0x00634308
		[CLSCompliant] // 0x0039E74C-0x0039E760
		public virtual ushort ReadUInt16(); // 0x00634308-0x006343A4
		public virtual int ReadInt32(); // 0x006343A4-0x00634578
		[CLSCompliant] // 0x0039E760-0x0039E774
		public virtual uint ReadUInt32(); // 0x006346D0-0x006347D4
		public virtual long ReadInt64(); // 0x006347D4-0x006349B8
		[CLSCompliant] // 0x0039E774-0x0039E788
		public virtual ulong ReadUInt64(); // 0x006349B8-0x00634B9C
		public virtual float ReadSingle(); // 0x00634B9C-0x00634BD8
		public virtual double ReadDouble(); // 0x00634BD8-0x00634C14
		public virtual decimal ReadDecimal(); // 0x00634C14-0x00634D68
		public virtual string ReadString(); // 0x00634D9C-0x0063506C
		private int InternalReadChars(char[] buffer, int index, int count); // 0x0063517C-0x006354A4
		private int InternalReadOneChar(); // 0x00633DF0-0x00634124
		public virtual char[] ReadChars(int count); // 0x00635528-0x00635690
		public virtual int Read(byte[] buffer, int index, int count); // 0x00635690-0x00635860
		public virtual byte[] ReadBytes(int count); // 0x00635860-0x00635A10
		protected virtual void FillBuffer(int numBytes); // 0x00635A10-0x00635BB0
		protected internal int Read7BitEncodedInt(); // 0x0063506C-0x00635148
	}

	[Serializable]
	[ComVisible] // 0x003964C0-0x003964D4
	public class BinaryWriter : IDisposable // TypeDefIndex: 583
	{
		// Fields
		public static readonly BinaryWriter Null; // 0x00
		protected Stream OutStream; // 0x10
		private byte[] _buffer; // 0x18
		private Encoding _encoding; // 0x20
		private Encoder _encoder; // 0x28
		[OptionalField] // 0x0039BD40-0x0039BD50
		private bool _leaveOpen; // 0x30
		private byte[] _largeByteBuffer; // 0x38
		private int _maxChars; // 0x40
	
		// Constructors
		protected BinaryWriter(); // 0x00635BB0-0x00635C90
		public BinaryWriter(Stream output, Encoding encoding); // 0x00635C90-0x00635C98
		public BinaryWriter(Stream output, Encoding encoding, bool leaveOpen); // 0x00635C98-0x00635E04
		static BinaryWriter(); // 0x00636EFC-0x00636F5C
	
		// Methods
		protected virtual void Dispose(bool disposing); // 0x00635E04-0x00635E5C
		public void Dispose(); // 0x00635E5C-0x00635E6C
		public virtual void Flush(); // 0x00635E6C-0x00635EA4
		public virtual void Write(bool value); // 0x00635EA4-0x00635F28
		public virtual void Write(byte value); // 0x00635F28-0x00635F68
		public virtual void Write(byte[] buffer); // 0x00635F68-0x00636028
		public virtual void Write(byte[] buffer, int index, int count); // 0x00636028-0x00636080
		public virtual void Write(char ch); // 0x00636080-0x006361F8
		public virtual void Write(char[] chars); // 0x006361F8-0x006362FC
		public virtual void Write(double value); // 0x006362FC-0x0063634C
		public virtual void Write(short value); // 0x0063634C-0x00636404
		[CLSCompliant] // 0x0039E788-0x0039E79C
		public virtual void Write(ushort value); // 0x00636404-0x006364BC
		public virtual void Write(int value); // 0x006364BC-0x006365DC
		[CLSCompliant] // 0x0039E79C-0x0039E7B0
		public virtual void Write(uint value); // 0x006365DC-0x006366FC
		public virtual void Write(long value); // 0x006366FC-0x006368EC
		[CLSCompliant] // 0x0039E7B0-0x0039E7C4
		public virtual void Write(ulong value); // 0x006368EC-0x00636ADC
		public virtual void Write(float value); // 0x00636ADC-0x00636B2C
		public virtual void Write(string value); // 0x00636B2C-0x00636E9C
		protected void Write7BitEncodedInt(int value); // 0x00636E9C-0x00636EFC
	}

	[ComVisible] // 0x003964D4-0x003964E8
	public static class Directory // TypeDefIndex: 584
	{
		// Nested types
		internal sealed class SearchData // TypeDefIndex: 585
		{
			// Fields
			public readonly string fullPath; // 0x10
			public readonly string userPath; // 0x18
			public readonly SearchOption searchOption; // 0x20
	
			// Constructors
			public SearchData(string fullPath, string userPath, SearchOption searchOption); // 0x0063B064-0x0063B0A4
		}
	
		// Methods
		public static string[] GetFiles(string path); // 0x00638040-0x006380EC
		private static string[] InternalGetFiles(string path, string searchPattern, SearchOption searchOption); // 0x006380EC-0x00638110
		public static string[] GetDirectories(string path); // 0x006381EC-0x00638298
		public static string[] GetDirectories(string path, string searchPattern); // 0x006382BC-0x0063838C
		private static string[] InternalGetDirectories(string path, string searchPattern, SearchOption searchOption); // 0x00638298-0x006382BC
		internal static string[] InternalGetFileDirectoryNames(string path, string userPathOriginal, string searchPattern, bool includeFiles, bool includeDirs, SearchOption searchOption, bool checkHost); // 0x00638110-0x006381EC
		public static DirectoryInfo CreateDirectory(string path); // 0x00638460-0x00638678
		private static DirectoryInfo CreateDirectoriesInternal(string path); // 0x0063876C-0x00638900
		public static void Delete(string path); // 0x0063A14C-0x0063A354
		private static void RecursiveDelete(string path); // 0x0063A5A0-0x0063A708
		public static void Delete(string path, bool recursive); // 0x0063A964-0x0063A9F8
		public static bool Exists(string path); // 0x0063A9F8-0x0063AB24
		public static string GetCurrentDirectory(); // 0x0063AC3C-0x0063AC54
		internal static string InsecureGetCurrentDirectory(); // 0x0063AC54-0x0063AD00
		internal static string GetDemandDir(string fullPath, bool thisDirOnly); // 0x0063AE08-0x0063AFFC
	}

	[Serializable]
	[ComVisible] // 0x003964E8-0x003964FC
	public class DirectoryNotFoundException : IOException // TypeDefIndex: 586
	{
		// Constructors
		public DirectoryNotFoundException(); // 0x0063BA60-0x0063BAE8
		public DirectoryNotFoundException(string message); // 0x0063A558-0x0063A5A0
		protected DirectoryNotFoundException(SerializationInfo info, StreamingContext context); // 0x0063BAE8-0x0063BAF0
	}

	[Serializable]
	[ComVisible] // 0x003964FC-0x00396510
	public class DriveNotFoundException : IOException // TypeDefIndex: 587
	{
		// Constructors
		public DriveNotFoundException(); // 0x0063BAF8-0x0063BB80
		public DriveNotFoundException(string message); // 0x0063BB80-0x0063BBC8
		protected DriveNotFoundException(SerializationInfo info, StreamingContext context); // 0x0063BBC8-0x0063BBD0
	}

	[Serializable]
	[ComVisible] // 0x00396510-0x00396524
	public class EndOfStreamException : IOException // TypeDefIndex: 588
	{
		// Constructors
		public EndOfStreamException(); // 0x0063BBD0-0x0063BC58
		public EndOfStreamException(string message); // 0x0063BC58-0x0063BCA0
		protected EndOfStreamException(SerializationInfo info, StreamingContext context); // 0x0063BCA0-0x0063BCA8
	}

	[Serializable]
	[ComVisible] // 0x00396524-0x00396538
	public class FileLoadException : IOException // TypeDefIndex: 589
	{
		// Fields
		private string _fileName; // 0x90
		private string _fusionLog; // 0x98
	
		// Properties
		public override string Message { get; } // 0x0063C638-0x0063C65C 
		public string FusionLog { get; } // 0x0063CA1C-0x0063CA24 
	
		// Constructors
		public FileLoadException(); // 0x0063C560-0x0063C5EC
		public FileLoadException(string message); // 0x0063C5EC-0x0063C638
		protected FileLoadException(SerializationInfo info, StreamingContext context); // 0x0063CA24-0x0063CB78
	
		// Methods
		private void SetMessageField(); // 0x0063C65C-0x0063C69C
		public override string ToString(); // 0x0063C718-0x0063CA1C
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0063CB78-0x0063CD34
		internal static string FormatFileLoadExceptionMessage(string fileName, int hResult); // 0x0063C69C-0x0063C718
	}

	[Serializable]
	[ComVisible] // 0x00396538-0x0039654C
	public class FileNotFoundException : IOException // TypeDefIndex: 590
	{
		// Fields
		private string _fileName; // 0x90
		private string _fusionLog; // 0x98
	
		// Properties
		public override string Message { get; } // 0x0063CE58-0x0063CE7C 
		public string FusionLog { get; } // 0x0063D228-0x0063D230 
	
		// Constructors
		public FileNotFoundException(); // 0x0063CD34-0x0063CDBC
		public FileNotFoundException(string message); // 0x0063CDBC-0x0063CE04
		public FileNotFoundException(string message, string fileName); // 0x0063CE04-0x0063CE58
		protected FileNotFoundException(SerializationInfo info, StreamingContext context); // 0x0063D230-0x0063D384
	
		// Methods
		private void SetMessageField(); // 0x0063CE7C-0x0063CF24
		public override string ToString(); // 0x0063CF24-0x0063D228
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0063D384-0x0063D540
	}

	internal static class FileSystemEnumerableFactory // TypeDefIndex: 591
	{
		// Methods
		internal static IEnumerable<string> CreateFileNameIterator(string path, string originalUserPath, string searchPattern, bool includeFiles, bool includeDirs, SearchOption searchOption, bool checkHost); // 0x0063838C-0x00638460
	}

	internal abstract class Iterator<TSource> : IEnumerable<TSource>, IEnumerator<TSource> // TypeDefIndex: 592
	{
		// Fields
		private int threadId;
		internal int state;
		internal TSource current;
	
		// Properties
		public TSource Current { get; }
		object IEnumerator.Current { get; }
	
		// Constructors
		public Iterator();
	
		// Methods
		protected abstract Iterator<TSource> Clone();
		public void Dispose();
		protected virtual void Dispose(bool disposing);
		public IEnumerator<TSource> GetEnumerator();
		public abstract bool MoveNext();
		IEnumerator IEnumerable.GetEnumerator();
		void IEnumerator.Reset();
	}

	internal class FileSystemEnumerableIterator<TSource> : Iterator<TSource> // TypeDefIndex: 593
	{
		// Fields
		private SearchResultHandler<TSource> _resultHandler;
		private List<Directory.SearchData> searchStack;
		private Directory.SearchData searchData;
		private string searchCriteria;
		private SafeFindHandle _hnd;
		private bool needsParentPathDiscoveryDemand;
		private bool empty;
		private string userPath;
		private SearchOption searchOption;
		private string fullPath;
		private string normalizedSearchPath;
		private bool _checkHost;
	
		// Constructors
		internal FileSystemEnumerableIterator(string path, string originalUserPath, string searchPattern, SearchOption searchOption, SearchResultHandler<TSource> resultHandler, bool checkHost);
		private FileSystemEnumerableIterator(string fullPath, string normalizedSearchPath, string searchCriteria, string userPath, SearchOption searchOption, SearchResultHandler<TSource> resultHandler, bool checkHost);
	
		// Methods
		private void CommonInit();
		protected override Iterator<TSource> Clone();
		protected override void Dispose(bool disposing);
		public override bool MoveNext();
		private SearchResult CreateSearchResult(Directory.SearchData localSearchData, Win32Native.WIN32_FIND_DATA findData);
		private void HandleError(int hr, string path);
		private void AddSearchableDirsToStack(Directory.SearchData localSearchData);
		internal void DoDemand(string fullPathToDemand);
		private static string NormalizeSearchPattern(string searchPattern);
		private static string GetNormalizedSearchCriteria(string fullSearchString, string fullPathMod);
		private static string GetFullSearchString(string fullPath, string searchPattern);
	}

	internal abstract class SearchResultHandler<TSource> // TypeDefIndex: 594
	{
		// Constructors
		protected SearchResultHandler();
	
		// Methods
		internal abstract bool IsResultIncluded(SearchResult result);
		internal abstract TSource CreateObject(SearchResult result);
	}

	internal class StringResultHandler : SearchResultHandler<string> // TypeDefIndex: 595
	{
		// Fields
		private bool _includeFiles; // 0x10
		private bool _includeDirs; // 0x11
	
		// Constructors
		internal StringResultHandler(bool includeFiles, bool includeDirs); // 0x004DE914-0x004DE988
	
		// Methods
		internal override bool IsResultIncluded(SearchResult result); // 0x004DE988-0x004DEA04
		internal override string CreateObject(SearchResult result); // 0x004DEA04-0x004DEA30
	}

	internal sealed class SearchResult // TypeDefIndex: 596
	{
		// Fields
		private string fullPath; // 0x10
		private string userPath; // 0x18
		private Win32Native.WIN32_FIND_DATA findData; // 0x20
	
		// Properties
		internal string UserPath { get; } // 0x004D7470-0x004D7478 
		internal Win32Native.WIN32_FIND_DATA FindData { get; } // 0x004D7478-0x004D7480 
	
		// Constructors
		internal SearchResult(string fullPath, string userPath, Win32Native.WIN32_FIND_DATA findData); // 0x004D7430-0x004D7470
	}

	internal static class FileSystemEnumerableHelpers // TypeDefIndex: 597
	{
		// Methods
		internal static bool IsDir(Win32Native.WIN32_FIND_DATA data); // 0x00642BA0-0x00642C58
		internal static bool IsFile(Win32Native.WIN32_FIND_DATA data); // 0x00642C58-0x00642C88
	}

	[Serializable]
	[ComVisible] // 0x0039654C-0x00396560
	public abstract class FileSystemInfo : MarshalByRefObject, ISerializable // TypeDefIndex: 598
	{
		// Fields
		internal MonoIOStat _data; // 0x18
		internal int _dataInitialised; // 0x40
		protected string FullPath; // 0x48
		protected string OriginalPath; // 0x50
		private string _displayPath; // 0x58
	
		// Properties
		public virtual string FullName { get; } // 0x00642CEC-0x00642CF4 
		public abstract string Name { get; }
		public abstract bool Exists { get; }
	
		// Constructors
		protected FileSystemInfo(); // 0x0063B0AC-0x0063B10C
		protected FileSystemInfo(SerializationInfo info, StreamingContext context); // 0x0063B6B8-0x0063B7E0
	
		// Methods
		public void Refresh(); // 0x0063B838-0x0063B86C
		[ComVisible] // 0x0039E7C4-0x0039E7D8
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00642CF4-0x00642DF0
	}

	[Serializable]
	[ComVisible] // 0x00396560-0x00396574
	public class IOException : SystemException // TypeDefIndex: 599
	{
		// Fields
		[NonSerialized]
		private string _maybeFullPath; // 0x88
	
		// Constructors
		public IOException(); // 0x00641970-0x006419E4
		public IOException(string message); // 0x00635148-0x0063517C
		public IOException(string message, int hresult); // 0x00642DF0-0x00642E24
		internal IOException(string message, int hresult, string maybeFullPath); // 0x00642E24-0x00642E6C
		public IOException(string message, Exception innerException); // 0x00634D68-0x00634D9C
		protected IOException(SerializationInfo info, StreamingContext context); // 0x0063BAF0-0x0063BAF8
	}

	[Serializable]
	[ComVisible] // 0x00396574-0x00396588
	public class MemoryStream : Stream // TypeDefIndex: 600
	{
		// Fields
		private byte[] _buffer; // 0x28
		private int _origin; // 0x30
		private int _position; // 0x34
		private int _length; // 0x38
		private int _capacity; // 0x3C
		private bool _expandable; // 0x40
		private bool _writable; // 0x41
		private bool _exposable; // 0x42
		private bool _isOpen; // 0x43
		[NonSerialized]
		private Task<int> _lastReadTask; // 0x48
	
		// Properties
		public override bool CanRead { get; } // 0x00643298-0x006432A0 
		public override bool CanSeek { get; } // 0x006432A0-0x006432A8 
		public override bool CanWrite { get; } // 0x006432A8-0x006432B0 
		public virtual int Capacity { get; set; } // 0x006434A0-0x006434D8 0x006434D8-0x00643644
		public override long Length { get; } // 0x00643644-0x00643680 
		public override long Position { get; set; } // 0x00643680-0x006436B8 0x006436B8-0x006437A0
	
		// Constructors
		public MemoryStream(); // 0x00642E6C-0x00642E74
		public MemoryStream(int capacity); // 0x00642E74-0x00642F78
		public MemoryStream(byte[] buffer); // 0x00642F78-0x00642F80
		public MemoryStream(byte[] buffer, bool writable); // 0x00642F80-0x00643084
		public MemoryStream(byte[] buffer, int index, int count); // 0x00643084-0x00643090
		public MemoryStream(byte[] buffer, int index, int count, bool writable, bool publiclyVisible); // 0x00643090-0x00643298
	
		// Methods
		private void EnsureWriteable(); // 0x006432B0-0x006432DC
		protected override void Dispose(bool disposing); // 0x006432DC-0x006432F8
		private bool EnsureCapacity(int value); // 0x006432F8-0x006433F8
		public override void Flush(); // 0x006433F8-0x006433FC
		public virtual byte[] GetBuffer(); // 0x006433FC-0x006434A0
		internal byte[] InternalGetBuffer(); // 0x00635520-0x00635528
		internal int InternalGetPosition(); // 0x006354A4-0x006354D4
		internal int InternalReadInt32(); // 0x00634578-0x006346D0
		internal int InternalEmulateRead(int count); // 0x006354D4-0x00635520
		public override int Read([In, Out] byte[] buffer, int offset, int count); // 0x006437A0-0x00643A50
		[ComVisible] // 0x0039E7D8-0x0039E7EC
		public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken); // 0x00643A50-0x00643DD0
		public override int ReadByte(); // 0x00643DD0-0x00643E58
		public override long Seek(long offset, SeekOrigin loc); // 0x00643E58-0x00644000
		public virtual byte[] ToArray(); // 0x00644000-0x006440BC
		public override void Write(byte[] buffer, int offset, int count); // 0x006440BC-0x006443F0
		[ComVisible] // 0x0039E7EC-0x0039E800
		public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken); // 0x006443F0-0x00644714
		public override void WriteByte(byte value); // 0x00644714-0x00644810
	}

	[Serializable]
	[ComVisible] // 0x00396588-0x0039659C
	public class PathTooLongException : IOException // TypeDefIndex: 601
	{
		// Constructors
		public PathTooLongException(); // 0x004D6F04-0x004D6F78
		public PathTooLongException(string message); // 0x004D6F78-0x004D6FAC
		protected PathTooLongException(SerializationInfo info, StreamingContext context); // 0x004D6FAC-0x004D6FB4
	}

	internal sealed class PinnedBufferMemoryStream : UnmanagedMemoryStream // TypeDefIndex: 602
	{
		// Fields
		private byte[] _array; // 0x68
		private GCHandle _pinningHandle; // 0x70
	
		// Constructors
		internal PinnedBufferMemoryStream(byte[] array); // 0x004D6FB4-0x004D7094
	
		// Methods
		~PinnedBufferMemoryStream(); // 0x004D7364-0x004D73E8
		protected override void Dispose(bool disposing); // 0x004D73E8-0x004D7424
	}

	[Serializable]
	[ComVisible] // 0x0039659C-0x003965B0
	public abstract class Stream : MarshalByRefObject, IDisposable // TypeDefIndex: 603
	{
		// Fields
		public static readonly Stream Null; // 0x00
		[NonSerialized]
		private ReadWriteTask _activeReadWriteTask; // 0x18
		[NonSerialized]
		private SemaphoreSlim _asyncActiveSemaphore; // 0x20
	
		// Properties
		public abstract bool CanRead { get; }
		public abstract bool CanSeek { get; }
		public abstract bool CanWrite { get; }
		public abstract long Length { get; }
		public abstract long Position { get; set; }
	
		// Nested types
		private struct ReadWriteParameters // TypeDefIndex: 604
		{
			// Fields
			internal byte[] Buffer; // 0x00
			internal int Offset; // 0x08
			internal int Count; // 0x0C
		}
	
		private sealed class ReadWriteTask : Task<int>, ITaskCompletionAction // TypeDefIndex: 605
		{
			// Fields
			internal readonly bool _isRead; // 0x54
			internal Stream _stream; // 0x58
			internal byte[] _buffer; // 0x60
			internal int _offset; // 0x68
			internal int _count; // 0x6C
			private AsyncCallback _callback; // 0x70
			private ExecutionContext _context; // 0x78
			private static ContextCallback s_invokeAsyncCallback; // 0x00
	
			// Constructors
			public ReadWriteTask(bool isRead, Func<object, int> function, object state, Stream stream, byte[] buffer, int offset, int count, AsyncCallback callback); // 0x004D7A38-0x004D7B9C
	
			// Methods
			internal void ClearBeginState(); // 0x004D91E0-0x004D91E8
			private static void InvokeAsyncCallback(object completedTask); // 0x004D9B1C-0x004D9C0C
			void ITaskCompletionAction.Invoke(Task completingTask); // 0x004D9C0C-0x004D9DD4
		}
	
		[Serializable]
		private sealed class NullStream : Stream // TypeDefIndex: 606
		{
			// Fields
			private static Task<int> s_nullReadTask; // 0x00
	
			// Properties
			public override bool CanRead { get; } // 0x004D9580-0x004D9588 
			public override bool CanWrite { get; } // 0x004D9588-0x004D9590 
			public override bool CanSeek { get; } // 0x004D9590-0x004D9598 
			public override long Length { get; } // 0x004D9598-0x004D95A0 
			public override long Position { get; set; } // 0x004D95A0-0x004D95A8 0x004D95A8-0x004D95AC
	
			// Constructors
			internal NullStream(); // 0x004D8FB8-0x004D9020
	
			// Methods
			protected override void Dispose(bool disposing); // 0x004D95AC-0x004D95B0
			public override void Flush(); // 0x004D95B0-0x004D95B4
			public override IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback callback, object state); // 0x004D95B4-0x004D9624
			public override int EndRead(IAsyncResult asyncResult); // 0x004D9624-0x004D96D0
			public override IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback callback, object state); // 0x004D96D0-0x004D9740
			public override void EndWrite(IAsyncResult asyncResult); // 0x004D9740-0x004D97EC
			public override int Read([In, Out] byte[] buffer, int offset, int count); // 0x004D97EC-0x004D97F4
			[ComVisible] // 0x0039E83C-0x0039E850
			public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken); // 0x004D97F4-0x004D98C4
			public override int ReadByte(); // 0x004D98C4-0x004D98CC
			public override void Write(byte[] buffer, int offset, int count); // 0x004D98CC-0x004D98D0
			[ComVisible] // 0x0039E850-0x0039E864
			public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken); // 0x004D98D0-0x004D9974
			public override void WriteByte(byte value); // 0x004D9974-0x004D9978
			public override long Seek(long offset, SeekOrigin origin); // 0x004D9978-0x004D9B1C
		}
	
		internal sealed class SynchronousAsyncResult : IAsyncResult // TypeDefIndex: 607
		{
			// Fields
			private readonly object _stateObject; // 0x10
			private readonly bool _isWrite; // 0x18
			private ManualResetEvent _waitHandle; // 0x20
			private ExceptionDispatchInfo _exceptionInfo; // 0x28
			private bool _endXxxCalled; // 0x30
			private int _bytesRead; // 0x34
	
			// Properties
			public WaitHandle AsyncWaitHandle { get; } // 0x004D9DD4-0x004D9EC4 
			public object AsyncState { get; } // 0x004D9EC4-0x004D9ECC 
			public bool CompletedSynchronously { get; } // 0x004D9ECC-0x004D9ED4 
	
			// Nested types
			[Serializable]
			[CompilerGenerated] // 0x003965B0-0x003965C0
			private sealed class <>c // TypeDefIndex: 608
			{
				// Fields
				public static readonly <>c <>9; // 0x00
				public static Func<ManualResetEvent> <>9__12_0; // 0x08
	
				// Constructors
				static <>c(); // 0x004DA080-0x004DA0E4
				public <>c(); // 0x004DA0E4-0x004DA0EC
	
				// Methods
				internal ManualResetEvent <get_AsyncWaitHandle>b__12_0(); // 0x004DA0EC-0x004DA14C
			}
	
			// Constructors
			internal SynchronousAsyncResult(int bytesRead, object asyncStateObject); // 0x004D8D58-0x004D8D94
			internal SynchronousAsyncResult(object asyncStateObject); // 0x004D8E78-0x004D8EAC
			internal SynchronousAsyncResult(Exception ex, object asyncStateObject, bool isWrite); // 0x004D8D94-0x004D8DE8
	
			// Methods
			internal void ThrowIfError(); // 0x004D9ED4-0x004D9EE8
			internal static int EndRead(IAsyncResult asyncResult); // 0x004D8DE8-0x004D8E78
			internal static void EndWrite(IAsyncResult asyncResult); // 0x004D8EAC-0x004D8F40
		}
	
		[Serializable]
		[CompilerGenerated] // 0x003965C0-0x003965D0
		private sealed class <>c // TypeDefIndex: 609
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static Func<SemaphoreSlim> <>9__4_0; // 0x08
			public static Func<object, int> <>9__39_0; // 0x10
			public static Func<Stream, ReadWriteParameters, AsyncCallback, object, IAsyncResult> <>9__43_0; // 0x18
			public static Func<Stream, IAsyncResult, int> <>9__43_1; // 0x20
			public static Func<object, int> <>9__46_0; // 0x28
			public static Action<Task, object> <>9__47_0; // 0x30
			public static Func<Stream, ReadWriteParameters, AsyncCallback, object, IAsyncResult> <>9__53_0; // 0x38
			public static Func<Stream, IAsyncResult, VoidTaskResult> <>9__53_1; // 0x40
	
			// Constructors
			static <>c(); // 0x004D9020-0x004D9084
			public <>c(); // 0x004D9084-0x004D908C
	
			// Methods
			internal SemaphoreSlim <EnsureAsyncActiveSemaphoreInitialized>b__4_0(); // 0x004D908C-0x004D90F0
			internal int <BeginReadInternal>b__39_0(object <p0>); // 0x004D90F0-0x004D91E0
			internal IAsyncResult <BeginEndReadAsync>b__43_0(Stream stream, ReadWriteParameters args, AsyncCallback callback, object state); // 0x004D91E8-0x004D9258
			internal int <BeginEndReadAsync>b__43_1(Stream stream, IAsyncResult asyncResult); // 0x004D9258-0x004D9298
			internal int <BeginWriteInternal>b__46_0(object <p0>); // 0x004D9298-0x004D938C
			internal void <RunReadWriteTaskWhenReady>b__47_0(Task t, object state); // 0x004D938C-0x004D94C8
			internal IAsyncResult <BeginEndWriteAsync>b__53_0(Stream stream, ReadWriteParameters args, AsyncCallback callback, object state); // 0x004D94C8-0x004D9538
			internal VoidTaskResult <BeginEndWriteAsync>b__53_1(Stream stream, IAsyncResult asyncResult); // 0x004D9538-0x004D9580
		}
	
		// Constructors
		protected Stream(); // 0x004D8F40-0x004D8F48
		static Stream(); // 0x004D8F50-0x004D8FB8
	
		// Methods
		internal SemaphoreSlim EnsureAsyncActiveSemaphoreInitialized(); // 0x004D7480-0x004D7570
		public virtual void Close(); // 0x004D7570-0x004D75F0
		public void Dispose(); // 0x004D75F0-0x004D75FC
		protected virtual void Dispose(bool disposing); // 0x004D75FC-0x004D7600
		public abstract void Flush();
		public virtual IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback callback, object state); // 0x004D7600-0x004D7608
		internal IAsyncResult BeginReadInternal(byte[] buffer, int offset, int count, AsyncCallback callback, object state, bool serializeAsynchronously); // 0x004D7608-0x004D7834
		public virtual int EndRead(IAsyncResult asyncResult); // 0x004D7DDC-0x004D8018
		[ComVisible] // 0x0039E800-0x0039E814
		public virtual Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken); // 0x004D8050-0x004D8110
		private Task<int> BeginEndReadAsync(byte[] buffer, int offset, int count); // 0x004D8110-0x004D82B0
		public virtual IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback callback, object state); // 0x004D82B0-0x004D82B8
		internal IAsyncResult BeginWriteInternal(byte[] buffer, int offset, int count, AsyncCallback callback, object state, bool serializeAsynchronously); // 0x004D82B8-0x004D84E4
		private void RunReadWriteTaskWhenReady(Task asyncWaiter, ReadWriteTask readWriteTask); // 0x004D7B9C-0x004D7D30
		private void RunReadWriteTask(ReadWriteTask readWriteTask); // 0x004D7D30-0x004D7DDC
		public virtual void EndWrite(IAsyncResult asyncResult); // 0x004D86DC-0x004D8908
		[ComVisible] // 0x0039E814-0x0039E828
		public Task WriteAsync(byte[] buffer, int offset, int count); // 0x004D890C-0x004D89B0
		[ComVisible] // 0x0039E828-0x0039E83C
		public virtual Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken); // 0x004D89B0-0x004D8A68
		private Task BeginEndWriteAsync(byte[] buffer, int offset, int count); // 0x004D8A68-0x004D8C08
		public abstract long Seek(long offset, SeekOrigin origin);
		public abstract int Read([In, Out] byte[] buffer, int offset, int count);
		public virtual int ReadByte(); // 0x004D8C08-0x004D8CB4
		public abstract void Write(byte[] buffer, int offset, int count);
		public virtual void WriteByte(byte value); // 0x004D8CB4-0x004D8D58
		internal IAsyncResult BlockingBeginRead(byte[] buffer, int offset, int count, AsyncCallback callback, object state); // 0x004D78B8-0x004D7A38
		internal static int BlockingEndRead(IAsyncResult asyncResult); // 0x004D8018-0x004D801C
		internal IAsyncResult BlockingBeginWrite(byte[] buffer, int offset, int count, AsyncCallback callback, object state); // 0x004D8568-0x004D86DC
		internal static void BlockingEndWrite(IAsyncResult asyncResult); // 0x004D8908-0x004D890C
	}

	[Serializable]
	[ComVisible] // 0x003965D0-0x003965E4
	public class StreamReader : TextReader // TypeDefIndex: 610
	{
		// Fields
		public static readonly StreamReader Null; // 0x00
		private Stream stream; // 0x18
		private Encoding encoding; // 0x20
		private Decoder decoder; // 0x28
		private byte[] byteBuffer; // 0x30
		private char[] charBuffer; // 0x38
		private byte[] _preamble; // 0x40
		private int charPos; // 0x48
		private int charLen; // 0x4C
		private int byteLen; // 0x50
		private int bytePos; // 0x54
		private int _maxCharsPerBuffer; // 0x58
		private bool _detectEncoding; // 0x5C
		private bool _checkPreamble; // 0x5D
		private bool _isBlocked; // 0x5E
		private bool _closable; // 0x5F
		[NonSerialized]
		private Task _asyncReadTask; // 0x60
	
		// Properties
		internal static int DefaultBufferSize { get; } // 0x004DA14C-0x004DA154 
		public virtual Encoding CurrentEncoding { get; } // 0x004DAB04-0x004DAB0C 
		public virtual Stream BaseStream { get; } // 0x004DAB0C-0x004DAB14 
		internal bool LeaveOpen { get; } // 0x004DAAF0-0x004DAB00 
	
		// Nested types
		private class NullStreamReader : StreamReader // TypeDefIndex: 611
		{
			// Properties
			public override Stream BaseStream { get; } // 0x004DBF4C-0x004DBFB4 
			public override Encoding CurrentEncoding { get; } // 0x004DBFB4-0x004DBFBC 
	
			// Constructors
			internal NullStreamReader(); // 0x004DBEAC-0x004DBF4C
	
			// Methods
			protected override void Dispose(bool disposing); // 0x004DBFBC-0x004DBFC0
			public override int Peek(); // 0x004DBFC0-0x004DBFC8
			public override int Read(); // 0x004DBFC8-0x004DBFD0
			public override int Read(char[] buffer, int index, int count); // 0x004DBFD0-0x004DBFD8
			public override string ReadLine(); // 0x004DBFD8-0x004DBFE0
			public override string ReadToEnd(); // 0x004DBFE0-0x004DD030
			internal override int ReadBuffer(); // 0x004DD030-0x004DD038
		}
	
		// Constructors
		internal StreamReader(); // 0x004DA204-0x004DA26C
		public StreamReader(Stream stream); // 0x004DA274-0x004DA27C
		public StreamReader(Stream stream, bool detectEncodingFromByteOrderMarks); // 0x004DA27C-0x004DA314
		public StreamReader(Stream stream, Encoding encoding); // 0x004DA4D8-0x004DA560
		public StreamReader(Stream stream, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool leaveOpen); // 0x004DA314-0x004DA4D8
		public StreamReader(string path); // 0x004DA6B4-0x004DA6BC
		public StreamReader(string path, bool detectEncodingFromByteOrderMarks); // 0x004DA6BC-0x004DA754
		public StreamReader(string path, Encoding encoding); // 0x004DA760-0x004DA7E8
		public StreamReader(string path, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize); // 0x004DA754-0x004DA760
		internal StreamReader(string path, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool checkHost); // 0x004DA7E8-0x004DAA2C
		static StreamReader(); // 0x004DBE44-0x004DBEAC
	
		// Methods
		private void CheckAsyncTaskInProgress(); // 0x004DA154-0x004DA204
		private void Init(Stream stream, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool leaveOpen); // 0x004DA560-0x004DA6B4
		internal void Init(Stream stream); // 0x004DAA2C-0x004DAA3C
		protected override void Dispose(bool disposing); // 0x004DAA3C-0x004DAAF0
		public override int Peek(); // 0x004DAB14-0x004DABB4
		internal bool DataAvailable(); // 0x004DAC40-0x004DAC50
		public override int Read(); // 0x004DAC50-0x004DACFC
		public override int Read([In, Out] char[] buffer, int index, int count); // 0x004DACFC-0x004DAF38
		public override string ReadToEnd(); // 0x004DB208-0x004DB300
		private void CompressBuffer(int n); // 0x004DB300-0x004DB348
		private void DetectEncoding(); // 0x004DB348-0x004DB820
		private bool IsPreamble(); // 0x004DB820-0x004DB9C8
		internal virtual int ReadBuffer(); // 0x004DB9C8-0x004DBBC4
		private int ReadBuffer(char[] userBuffer, int userOffset, int desiredChars, out bool readToUserBuffer); // 0x004DAF38-0x004DB208
		public override string ReadLine(); // 0x004DBBC4-0x004DBE44
	}

	[Serializable]
	[ComVisible] // 0x003965E4-0x003965F8
	public class StreamWriter : TextWriter // TypeDefIndex: 612
	{
		// Fields
		internal const int DefaultBufferSize = 1024; // Metadata: 0x00204688
		private const int DefaultFileStreamBufferSize = 4096; // Metadata: 0x0020468C
		private const int MinBufferSize = 128; // Metadata: 0x00204690
		private const int DontCopyOnWriteLineThreshold = 512; // Metadata: 0x00204694
		public static readonly StreamWriter Null; // 0x00
		private Stream stream; // 0x28
		private Encoding encoding; // 0x30
		private Encoder encoder; // 0x38
		private byte[] byteBuffer; // 0x40
		private char[] charBuffer; // 0x48
		private int charPos; // 0x50
		private int charLen; // 0x54
		private bool autoFlush; // 0x58
		private bool haveWrittenPreamble; // 0x59
		private bool closable; // 0x5A
		[NonSerialized]
		private Task _asyncWriteTask; // 0x60
		private static Encoding _UTF8NoBOM; // 0x08
	
		// Properties
		internal static Encoding UTF8NoBOM { [FriendAccessAllowed] /* 0x0039E864-0x0039E874 */ get; } // 0x004DD0E8-0x004DD1DC 
		public virtual bool AutoFlush { set; } // 0x004DDE40-0x004DDE94
		internal bool LeaveOpen { get; } // 0x004DDB88-0x004DDB98 
	
		// Constructors
		internal StreamWriter(); // 0x004DD1DC-0x004DD244
		public StreamWriter(Stream stream); // 0x004DD2E4-0x004DD368
		public StreamWriter(Stream stream, Encoding encoding); // 0x004DD51C-0x004DD528
		public StreamWriter(Stream stream, Encoding encoding, int bufferSize, bool leaveOpen); // 0x004DD368-0x004DD51C
		public StreamWriter(string path, bool append); // 0x004DD67C-0x004DD708
		public StreamWriter(string path, bool append, Encoding encoding); // 0x004DD714-0x004DD724
		public StreamWriter(string path, bool append, Encoding encoding, int bufferSize); // 0x004DD708-0x004DD714
		internal StreamWriter(string path, bool append, Encoding encoding, int bufferSize, bool checkHost); // 0x004DD724-0x004DD918
		static StreamWriter(); // 0x004DE348-0x004DE410
	
		// Methods
		private void CheckAsyncTaskInProgress(); // 0x004DD038-0x004DD0E8
		private void Init(Stream streamArg, Encoding encodingArg, int bufferSize, bool shouldLeaveOpen); // 0x004DD528-0x004DD67C
		private static Stream CreateFile(string path, bool append, bool checkHost); // 0x004DD918-0x004DDA08
		public override void Close(); // 0x004DDA08-0x004DDA84
		protected override void Dispose(bool disposing); // 0x004DDA84-0x004DDB88
		public override void Flush(); // 0x004DDD88-0x004DDDB4
		private void Flush(bool flushStream, bool flushEncoder); // 0x004DDB98-0x004DDD84
		public override void Write(char value); // 0x004DDE94-0x004DDF48
		public override void Write(char[] buffer); // 0x004DDF48-0x004DE024
		public override void Write(char[] buffer, int index, int count); // 0x004DE024-0x004DE264
		public override void Write(string value); // 0x004DE264-0x004DE348
	}

	[Serializable]
	[ComVisible] // 0x003965F8-0x0039660C
	public class StringReader : TextReader // TypeDefIndex: 613
	{
		// Fields
		private string _s; // 0x18
		private int _pos; // 0x20
		private int _length; // 0x24
	
		// Constructors
		public StringReader(string s); // 0x004DE410-0x004DE4F4
	
		// Methods
		protected override void Dispose(bool disposing); // 0x004DE4F4-0x004DE4FC
		public override int Peek(); // 0x004DE4FC-0x004DE540
		public override int Read(); // 0x004DE540-0x004DE588
		public override int Read([In, Out] char[] buffer, int index, int count); // 0x004DE588-0x004DE770
		public override string ReadToEnd(); // 0x004DE770-0x004DE7B8
		public override string ReadLine(); // 0x004DE7B8-0x004DE914
	}

	[Serializable]
	[ComVisible] // 0x0039660C-0x00396620
	public abstract class TextReader : MarshalByRefObject, IDisposable // TypeDefIndex: 614
	{
		// Fields
		[NonSerialized]
		private static Func<object, string> _ReadLineDelegate; // 0x00
		[NonSerialized]
		private static Func<object, int> _ReadDelegate; // 0x08
		public static readonly TextReader Null; // 0x10
	
		// Nested types
		[Serializable]
		private sealed class NullTextReader : TextReader // TypeDefIndex: 615
		{
			// Constructors
			public NullTextReader(); // 0x004DF144-0x004DF1AC
	
			// Methods
			public override int Read(char[] buffer, int index, int count); // 0x004DF534-0x004DF53C
			public override string ReadLine(); // 0x004DF53C-0x004DF544
		}
	
		[Serializable]
		internal sealed class SyncTextReader : TextReader // TypeDefIndex: 616
		{
			// Fields
			internal TextReader _in; // 0x18
	
			// Constructors
			internal SyncTextReader(TextReader t); // 0x004DEFA0-0x004DF01C
	
			// Methods
			protected override void Dispose(bool disposing); // 0x004DF544-0x004DF618
			public override int Peek(); // 0x004DF618-0x004DF64C
			public override int Read(); // 0x004DF64C-0x004DF680
			public override int Read([In, Out] char[] buffer, int index, int count); // 0x004DF680-0x004DF6D4
			public override string ReadLine(); // 0x004DF6D4-0x004DF708
			public override string ReadToEnd(); // 0x004DF708-0x004DF73C
		}
	
		[Serializable]
		[CompilerGenerated] // 0x00396620-0x00396630
		private sealed class <>c // TypeDefIndex: 617
		{
			// Fields
			public static readonly <>c <>9; // 0x00
	
			// Constructors
			static <>c(); // 0x004DF1AC-0x004DF210
			public <>c(); // 0x004DF210-0x004DF218
	
			// Methods
			internal string <.cctor>b__22_0(object state); // 0x004DF218-0x004DF370
			internal int <.cctor>b__22_1(object state); // 0x004DF370-0x004DF534
		}
	
		// Constructors
		protected TextReader(); // 0x004DA26C-0x004DA274
		static TextReader(); // 0x004DF01C-0x004DF144
	
		// Methods
		public void Dispose(); // 0x004DEA30-0x004DEAAC
		protected virtual void Dispose(bool disposing); // 0x004DAB00-0x004DAB04
		public virtual int Peek(); // 0x004DEAAC-0x004DEAB4
		public virtual int Read(); // 0x004DEAB4-0x004DEABC
		public virtual int Read([In, Out] char[] buffer, int index, int count); // 0x004DEABC-0x004DECD4
		public virtual string ReadToEnd(); // 0x004DECD4-0x004DEDBC
		public virtual string ReadLine(); // 0x004DEDBC-0x004DEEE8
		public static TextReader Synchronized(TextReader reader); // 0x004DEEE8-0x004DEFA0
	}

	[Serializable]
	[ComVisible] // 0x00396630-0x00396644
	public abstract class TextWriter : MarshalByRefObject, IDisposable // TypeDefIndex: 618
	{
		// Fields
		public static readonly TextWriter Null; // 0x00
		[NonSerialized]
		private static Action<object> _WriteCharDelegate; // 0x08
		[NonSerialized]
		private static Action<object> _WriteStringDelegate; // 0x10
		[NonSerialized]
		private static Action<object> _WriteCharArrayRangeDelegate; // 0x18
		[NonSerialized]
		private static Action<object> _WriteLineCharDelegate; // 0x20
		[NonSerialized]
		private static Action<object> _WriteLineStringDelegate; // 0x28
		[NonSerialized]
		private static Action<object> _WriteLineCharArrayRangeDelegate; // 0x30
		[NonSerialized]
		private static Action<object> _FlushDelegate; // 0x38
		protected char[] CoreNewLine; // 0x18
		private IFormatProvider InternalFormatProvider; // 0x20
	
		// Properties
		private static string InitialNewLine { get; } // 0x004DF73C-0x004DF744 
		public virtual IFormatProvider FormatProvider { get; } // 0x004DF7D8-0x004DF818 
	
		// Nested types
		[Serializable]
		private sealed class NullTextWriter : TextWriter // TypeDefIndex: 619
		{
			// Constructors
			internal NullTextWriter(); // 0x004E02F8-0x004E0390
	
			// Methods
			public override void Write(char[] buffer, int index, int count); // 0x004E0DFC-0x004E0E00
			public override void Write(string value); // 0x004E0E00-0x004E0E04
			public override void WriteLine(); // 0x004E0E04-0x004E0E08
			public override void WriteLine(string value); // 0x004E0E08-0x004E0E0C
		}
	
		[Serializable]
		internal sealed class SyncTextWriter : TextWriter, IDisposable // TypeDefIndex: 620
		{
			// Fields
			private TextWriter _out; // 0x28
	
			// Properties
			public override IFormatProvider FormatProvider { get; } // 0x004E0E0C-0x004E0E40 
	
			// Constructors
			internal SyncTextWriter(TextWriter t); // 0x004DF9CC-0x004DFA64
	
			// Methods
			public override void Close(); // 0x004E0E40-0x004E0E74
			protected override void Dispose(bool disposing); // 0x004E0E74-0x004E0F48
			public override void Flush(); // 0x004E0F48-0x004E0F7C
			public override void Write(char value); // 0x004E0F7C-0x004E0FB8
			public override void Write(char[] buffer); // 0x004E0FB8-0x004E0FF4
			public override void Write(char[] buffer, int index, int count); // 0x004E0FF4-0x004E1048
			public override void Write(string value); // 0x004E1048-0x004E1088
			public override void WriteLine(); // 0x004E1088-0x004E10C0
			public override void WriteLine(char value); // 0x004E10C0-0x004E1100
			public override void WriteLine(char[] buffer, int index, int count); // 0x004E1100-0x004E1158
			public override void WriteLine(string value); // 0x004E1158-0x004E1198
			public override void WriteLine(string format, object arg0); // 0x004E1198-0x004E11E8
			public override void WriteLine(string format, object arg0, object arg1); // 0x004E11E8-0x004E1240
			public override void WriteLine(string format, object arg0, object arg1, object arg2); // 0x004E1240-0x004E12A8
		}
	
		[Serializable]
		[CompilerGenerated] // 0x00396644-0x00396654
		private sealed class <>c // TypeDefIndex: 621
		{
			// Fields
			public static readonly <>c <>9; // 0x00
	
			// Constructors
			static <>c(); // 0x004E0390-0x004E03F4
			public <>c(); // 0x004E03F4-0x004E03FC
	
			// Methods
			internal void <.cctor>b__73_0(object state); // 0x004E03FC-0x004E0540
			internal void <.cctor>b__73_1(object state); // 0x004E0540-0x004E0688
			internal void <.cctor>b__73_2(object state); // 0x004E0688-0x004E084C
			internal void <.cctor>b__73_3(object state); // 0x004E084C-0x004E0994
			internal void <.cctor>b__73_4(object state); // 0x004E0994-0x004E0ADC
			internal void <.cctor>b__73_5(object state); // 0x004E0ADC-0x004E0CA4
			internal void <.cctor>b__73_6(object state); // 0x004E0CA4-0x004E0DFC
		}
	
		// Constructors
		protected TextWriter(); // 0x004DF744-0x004DF7D8
		protected TextWriter(IFormatProvider formatProvider); // 0x004DD244-0x004DD2E4
		static TextWriter(); // 0x004E00AC-0x004E02F8
	
		// Methods
		public virtual void Close(); // 0x004DF818-0x004DF894
		protected virtual void Dispose(bool disposing); // 0x004DDD84-0x004DDD88
		public void Dispose(); // 0x004DF894-0x004DF910
		public virtual void Flush(); // 0x004DF910-0x004DF914
		public static TextWriter Synchronized(TextWriter writer); // 0x004DF914-0x004DF9CC
		public virtual void Write(char value); // 0x004DFA64-0x004DFA68
		public virtual void Write(char[] buffer); // 0x004DFA68-0x004DFA84
		public virtual void Write(char[] buffer, int index, int count); // 0x004DFA84-0x004DFC7C
		public virtual void Write(string value); // 0x004DFC7C-0x004DFCC4
		public virtual void WriteLine(); // 0x004DFCC4-0x004DFCD4
		public virtual void WriteLine(char value); // 0x004DFCD4-0x004DFD0C
		public virtual void WriteLine(char[] buffer, int index, int count); // 0x004DFD0C-0x004DFD44
		public virtual void WriteLine(string value); // 0x004DFD44-0x004DFF6C
		public virtual void WriteLine(string format, object arg0); // 0x004DFF6C-0x004DFFCC
		public virtual void WriteLine(string format, object arg0, object arg1); // 0x004DFFCC-0x004E0034
		public virtual void WriteLine(string format, object arg0, object arg1, object arg2); // 0x004E0034-0x004E00AC
	}

	public class UnmanagedMemoryStream : Stream // TypeDefIndex: 622
	{
		// Fields
		private SafeBuffer _buffer; // 0x28
		private unsafe byte* _mem; // 0x30
		private long _length; // 0x38
		private long _capacity; // 0x40
		private long _position; // 0x48
		private long _offset; // 0x50
		private FileAccess _access; // 0x58
		internal bool _isOpen; // 0x5C
		[NonSerialized]
		private Task<int> _lastReadTask; // 0x60
	
		// Properties
		public override bool CanRead { get; } // 0x004E2110-0x004E212C 
		public override bool CanSeek { get; } // 0x004E212C-0x004E2134 
		public override bool CanWrite { get; } // 0x004E2134-0x004E2150 
		public override long Length { get; } // 0x004E21F4-0x004E2214 
		public override long Position { get; set; } // 0x004E2214-0x004E224C 0x004E224C-0x004E2324
		[CLSCompliant] // 0x0039FBC4-0x0039FBD8
		public unsafe byte* PositionPointer { get; } // 0x004E2324-0x004E2428 
	
		// Constructors
		protected UnmanagedMemoryStream(); // 0x004D7094-0x004D7108
		internal unsafe UnmanagedMemoryStream(byte* pointer, long length, long capacity, FileAccess access, bool skipSecurityCheck); // 0x004E206C-0x004E2110
	
		// Methods
		internal unsafe void Initialize(byte* pointer, long length, long capacity, FileAccess access, bool skipSecurityCheck); // 0x004D7108-0x004D7364
		protected override void Dispose(bool disposing); // 0x004D7424-0x004D7430
		public override void Flush(); // 0x004E2150-0x004E2168
		public override int Read([In, Out] byte[] buffer, int offset, int count); // 0x004E2490-0x004E27B0
		[ComVisible] // 0x0039E874-0x0039E888
		public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken); // 0x004E27B0-0x004E2AD8
		public override int ReadByte(); // 0x004E2AD8-0x004E2C34
		public override long Seek(long offset, SeekOrigin loc); // 0x004E2C34-0x004E2D98
		public override void Write(byte[] buffer, int offset, int count); // 0x004E2D98-0x004E3180
		[ComVisible] // 0x0039E888-0x0039E89C
		public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken); // 0x004E3180-0x004E3454
		public override void WriteByte(byte value); // 0x004E3454-0x004E36B4
	}

	internal static class PathInternal // TypeDefIndex: 623
	{
		// Methods
		public static bool IsPartiallyQualified(string path); // 0x004D6E6C-0x004D6E74
		public static bool HasIllegalCharacters(string path, bool checkAdditional); // 0x004D6E74-0x004D6F04
	}

	[Serializable]
	[ComVisible] // 0x00396654-0x00396668
	public sealed class DirectoryInfo : FileSystemInfo // TypeDefIndex: 624
	{
		// Fields
		private string current; // 0x60
		private string parent; // 0x68
	
		// Properties
		public override bool Exists { get; } // 0x0063B7E0-0x0063B838 
		public override string Name { get; } // 0x0063B86C-0x0063B874 
		public DirectoryInfo Parent { get; } // 0x006389D0-0x00638A54 
	
		// Constructors
		public DirectoryInfo(string path); // 0x0063B0A4-0x0063B0AC
		internal DirectoryInfo(string path, bool simpleOriginalPath); // 0x00638900-0x006389D0
		private DirectoryInfo(SerializationInfo info, StreamingContext context); // 0x0063B694-0x0063B6B8
	
		// Methods
		private void Initialize(); // 0x0063B398-0x0063B694
		public void Create(); // 0x00638A54-0x00638A5C
		public DirectoryInfo[] GetDirectories(); // 0x0063B874-0x0063B8C4
		public DirectoryInfo[] GetDirectories(string searchPattern); // 0x0063B8C4-0x0063BA58
		public override string ToString(); // 0x0063BA58-0x0063BA60
		internal void CheckPath(string path); // 0x0063B10C-0x0063B270
	}

	[ComVisible] // 0x00396668-0x0039667C
	public static class File // TypeDefIndex: 625
	{
		// Methods
		public static FileStream Create(string path); // 0x0063BCA8-0x0063BCB0
		public static FileStream Create(string path, int bufferSize); // 0x0063BCB0-0x0063BD3C
		public static StreamWriter CreateText(string path); // 0x0063BD60-0x0063BDC8
		public static void Delete(string path); // 0x0063A708-0x0063A964
		public static bool Exists(string path); // 0x00638678-0x0063876C
		public static FileStream Open(string path, FileMode mode); // 0x0063C220-0x0063C2B8
		public static FileStream OpenRead(string path); // 0x0063C2E0-0x0063C360
		public static StreamReader OpenText(string path); // 0x0063C360-0x0063C3C4
		internal static int FillAttributeInfo(string path, ref MonoIOStat data, bool tryagain, bool returnErrorOnNotFound); // 0x0063C3C4-0x0063C4D4
	}

	[Serializable]
	[ComVisible] // 0x0039667C-0x003966B8
	[Flags] // 0x0039667C-0x003966B8
	public enum FileAccess // TypeDefIndex: 626
	{
		Read = 1,
		Write = 2,
		ReadWrite = 3
	}

	[Serializable]
	[ComVisible] // 0x003966B8-0x003966F4
	[Flags] // 0x003966B8-0x003966F4
	public enum FileAttributes // TypeDefIndex: 627
	{
		ReadOnly = 1,
		Hidden = 2,
		System = 4,
		Directory = 16,
		Archive = 32,
		Device = 64,
		Normal = 128,
		Temporary = 256,
		SparseFile = 512,
		ReparsePoint = 1024,
		Compressed = 2048,
		Offline = 4096,
		NotContentIndexed = 8192,
		Encrypted = 16384,
		IntegrityStream = 32768,
		NoScrubData = 131072
	}

	[Serializable]
	[ComVisible] // 0x003966F4-0x00396708
	public enum FileMode // TypeDefIndex: 628
	{
		CreateNew = 1,
		Create = 2,
		Open = 3,
		OpenOrCreate = 4,
		Truncate = 5,
		Append = 6
	}

	[Serializable]
	[ComVisible] // 0x00396708-0x00396744
	[Flags] // 0x00396708-0x00396744
	public enum FileOptions // TypeDefIndex: 629
	{
		WriteThrough = -2147483648,
		None = 0,
		Encrypted = 16384,
		DeleteOnClose = 67108864,
		SequentialScan = 134217728,
		RandomAccess = 268435456,
		Asynchronous = 1073741824
	}

	[Serializable]
	[ComVisible] // 0x00396744-0x00396780
	[Flags] // 0x00396744-0x00396780
	public enum FileShare // TypeDefIndex: 630
	{
		None = 0,
		Read = 1,
		Write = 2,
		ReadWrite = 3,
		Delete = 4,
		Inheritable = 16
	}

	[ComVisible] // 0x00396780-0x00396794
	public class FileStream : Stream // TypeDefIndex: 631
	{
		// Fields
		private static byte[] buf_recycle; // 0x00
		private static readonly object buf_recycle_lock; // 0x08
		private byte[] buf; // 0x28
		private string name; // 0x30
		private SafeFileHandle safeHandle; // 0x38
		private bool isExposed; // 0x40
		private long append_startpos; // 0x48
		private FileAccess access; // 0x50
		private bool owner; // 0x54
		private bool async; // 0x55
		private bool canseek; // 0x56
		private bool anonymous; // 0x57
		private bool buf_dirty; // 0x58
		private int buf_size; // 0x5C
		private int buf_length; // 0x60
		private int buf_offset; // 0x64
		private long buf_start; // 0x68
	
		// Properties
		public override bool CanRead { get; } // 0x0063F14C-0x0063F160 
		public override bool CanWrite { get; } // 0x0063F160-0x0063F174 
		public override bool CanSeek { get; } // 0x0063F174-0x0063F17C 
		public override long Length { get; } // 0x0063F17C-0x0063F2FC 
		public override long Position { get; set; } // 0x0063F440-0x0063F5CC 0x0063F5CC-0x0063F698
	
		// Nested types
		private delegate int ReadDelegate(byte[] buffer, int offset, int count); // TypeDefIndex: 632; 0x00641A70-0x00642268
	
		private delegate void WriteDelegate(byte[] buffer, int offset, int count); // TypeDefIndex: 633; 0x00642268-0x00642A28
	
		// Constructors
		internal FileStream(IntPtr handle, FileAccess access, bool ownsHandle, int bufferSize, bool isAsync, bool isConsoleWrapper); // 0x0063D540-0x0063D6CC
		public FileStream(string path, FileMode mode, FileAccess access, FileShare share); // 0x0063C2B8-0x0063C2E0
		public FileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize); // 0x0063BD3C-0x0063BD60
		internal FileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, FileOptions options, string msgPath, bool bFromProxy, bool useLongPath = false /* Metadata: 0x00204730 */, bool checkHost = false /* Metadata: 0x00204731 */); // 0x0063E0A8-0x0063E0B8
		internal FileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, bool anonymous, FileOptions options); // 0x0063D9C0-0x0063E0A8
		static FileStream(); // 0x006419E4-0x00641A70
	
		// Methods
		private void Init(SafeFileHandle safeHandle, FileAccess access, bool ownsHandle, int bufferSize, bool isAsync, bool isConsoleWrapper); // 0x0063D6CC-0x0063D9C0
		private void ExposeHandle(); // 0x0063EFD4-0x0063F008
		public override int ReadByte(); // 0x0063F868-0x0063FA10
		public override void WriteByte(byte value); // 0x0063FB8C-0x0063FD3C
		public override int Read([In, Out] byte[] array, int offset, int count); // 0x0063FD3C-0x0063FF90
		private int ReadInternal(byte[] dest, int offset, int count); // 0x0063FF90-0x00640038
		public override IAsyncResult BeginRead(byte[] array, int offset, int numBytes, AsyncCallback userCallback, object stateObject); // 0x00640100-0x00640360
		public override int EndRead(IAsyncResult asyncResult); // 0x00640424-0x00640578
		public override void Write(byte[] array, int offset, int count); // 0x006405B4-0x006407E4
		private void WriteInternal(byte[] src, int offset, int count); // 0x006407E4-0x006409C0
		public override IAsyncResult BeginWrite(byte[] array, int offset, int numBytes, AsyncCallback userCallback, object stateObject); // 0x00640B90-0x00640E4C
		public override void EndWrite(IAsyncResult asyncResult); // 0x00640FCC-0x00641124
		public override long Seek(long offset, SeekOrigin origin); // 0x00641130-0x00641388
		public override void Flush(); // 0x00641388-0x00641430
		~FileStream(); // 0x00641430-0x006414B4
		protected override void Dispose(bool disposing); // 0x006414B4-0x00641808
		public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken); // 0x0064180C-0x00641814
		public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken); // 0x00641814-0x0064181C
		private int ReadSegment(byte[] dest, int dest_offset, int count); // 0x00640038-0x00640100
		private int WriteSegment(byte[] src, int src_offset, int count); // 0x00640B14-0x00640B90
		private void FlushBuffer(); // 0x0063F698-0x0063F868
		private void FlushBufferIfDirty(); // 0x0063F2FC-0x0063F30C
		private void RefillBuffer(); // 0x0063FB50-0x0063FB8C
		private int ReadData(SafeHandle safeHandle, byte[] buf, int offset, int count); // 0x0063FA10-0x0063FB50
		private void InitBuffer(int size, bool isZeroSize); // 0x0063ED6C-0x0063EFD4
		private string GetSecureFileName(string filename); // 0x0063EB98-0x0063EC38
		private string GetSecureFileName(string filename, bool full); // 0x0063EA1C-0x0063EAE4
	}

	internal class FileStreamAsyncResult : IAsyncResult // TypeDefIndex: 634
	{
		// Fields
		private object state; // 0x10
		private ManualResetEvent wh; // 0x18
		private AsyncCallback cb; // 0x20
		private bool completedSynch; // 0x28
		public int Count; // 0x2C
		public int OriginalCount; // 0x30
		public int BytesRead; // 0x34
		private AsyncCallback realcb; // 0x38
	
		// Properties
		public object AsyncState { get; } // 0x00642B88-0x00642B90 
		public bool CompletedSynchronously { get; } // 0x00642B90-0x00642B98 
		public WaitHandle AsyncWaitHandle { get; } // 0x00642B98-0x00642BA0 
	
		// Constructors
		public FileStreamAsyncResult(AsyncCallback cb, object state); // 0x00640E4C-0x00640F08
	
		// Methods
		private static void CBWrapper(IAsyncResult ares); // 0x00642A28-0x00642B88
	}

	internal enum MonoFileType // TypeDefIndex: 635
	{
		Unknown = 0,
		Disk = 1,
		Char = 2,
		Pipe = 3,
		Remote = 32768
	}

	internal static class MonoIO // TypeDefIndex: 636
	{
		// Fields
		public static readonly IntPtr InvalidHandle; // 0x00
		private static bool dump_handles; // 0x08
	
		// Properties
		public static IntPtr ConsoleOutput { get; } // 0x0064496C-0x00644970 
		public static IntPtr ConsoleInput { get; } // 0x00644970-0x00644974 
		public static IntPtr ConsoleError { get; } // 0x00644974-0x00644978 
		public static char VolumeSeparatorChar { get; } // 0x00644978-0x0064497C 
		public static char DirectorySeparatorChar { get; } // 0x0064497C-0x00644980 
		public static char AltDirectorySeparatorChar { get; } // 0x00644980-0x00644984 
		public static char PathSeparator { get; } // 0x00644984-0x00644988 
	
		// Constructors
		static MonoIO(); // 0x0064498C-0x00644A10
	
		// Methods
		public static Exception GetException(MonoIOError error); // 0x0063AD04-0x0063AE08
		public static Exception GetException(string path, MonoIOError error); // 0x00638AE0-0x0063A14C
		private static unsafe bool CreateDirectory(char* path, out MonoIOError error); // 0x00644814-0x00644818
		public static bool CreateDirectory(string path, out MonoIOError error); // 0x00638A5C-0x00638AE0
		private static unsafe bool RemoveDirectory(char* path, out MonoIOError error); // 0x00644818-0x0064481C
		public static bool RemoveDirectory(string path, out MonoIOError error); // 0x0063A4D4-0x0063A558
		public static string GetCurrentDirectory(out MonoIOError error); // 0x0063AD00-0x0063AD04
		private static unsafe bool DeleteFile(char* path, out MonoIOError error); // 0x0064481C-0x00644820
		public static bool DeleteFile(string path, out MonoIOError error); // 0x0063A450-0x0063A4D4
		private static unsafe FileAttributes GetFileAttributes(char* path, out MonoIOError error); // 0x00644820-0x00644824
		public static FileAttributes GetFileAttributes(string path, out MonoIOError error); // 0x00644824-0x006448A8
		private static MonoFileType GetFileType(IntPtr handle, out MonoIOError error); // 0x006448A8-0x006448AC
		public static MonoFileType GetFileType(SafeHandle safeHandle, out MonoIOError error); // 0x0063EC38-0x0063ED6C
		private static unsafe IntPtr FindFirstFile(char* pathWithPattern, out string fileName, out int fileAttr, out int error); // 0x006448AC-0x006448B0
		public static IntPtr FindFirstFile(string pathWithPattern, out string fileName, out int fileAttr, out int error); // 0x006448B0-0x0064494C
		public static bool FindNextFile(IntPtr hnd, out string fileName, out int fileAttr, out int error); // 0x0064494C-0x00644950
		public static bool FindCloseFile(IntPtr hnd); // 0x00644950-0x00644954
		public static bool ExistsFile(string path, out MonoIOError error); // 0x0063C190-0x0063C220
		public static bool ExistsDirectory(string path, out MonoIOError error); // 0x0063AB9C-0x0063AC3C
		public static bool ExistsSymlink(string path, out MonoIOError error); // 0x0063A3C4-0x0063A450
		private static unsafe bool GetFileStat(char* path, out MonoIOStat stat, out MonoIOError error); // 0x00644954-0x00644958
		public static bool GetFileStat(string path, out MonoIOStat stat, out MonoIOError error); // 0x0063C4D4-0x0063C560
		private static unsafe IntPtr Open(char* filename, FileMode mode, FileAccess access, FileShare share, FileOptions options, out MonoIOError error); // 0x00644958-0x0064495C
		public static IntPtr Open(string filename, FileMode mode, FileAccess access, FileShare share, FileOptions options, out MonoIOError error); // 0x0063EAE4-0x0063EB98
		public static bool Close(IntPtr handle, out MonoIOError error); // 0x00641808-0x0064180C
		private static int Read(IntPtr handle, byte[] dest, int dest_offset, int count, out MonoIOError error); // 0x0064495C-0x00644960
		public static int Read(SafeHandle safeHandle, byte[] dest, int dest_offset, int count, out MonoIOError error); // 0x0064181C-0x00641970
		private static int Write(IntPtr handle, in byte[] src, int src_offset, int count, out MonoIOError error); // 0x00644960-0x00644964
		public static int Write(SafeHandle safeHandle, byte[] src, int src_offset, int count, out MonoIOError error); // 0x006409C0-0x00640B14
		private static long Seek(IntPtr handle, long offset, SeekOrigin origin, out MonoIOError error); // 0x00644964-0x00644968
		public static long Seek(SafeHandle safeHandle, long offset, SeekOrigin origin, out MonoIOError error); // 0x0063F008-0x0063F14C
		private static long GetLength(IntPtr handle, out MonoIOError error); // 0x00644968-0x0064496C
		public static long GetLength(SafeHandle safeHandle, out MonoIOError error); // 0x0063F30C-0x0063F440
		private static void DumpHandles(); // 0x00644810-0x00644814
		public static bool RemapPath(string path, out string newPath); // 0x00644988-0x0064498C
	}

	internal enum MonoIOError // TypeDefIndex: 637
	{
		ERROR_SUCCESS = 0,
		ERROR_FILE_NOT_FOUND = 2,
		ERROR_PATH_NOT_FOUND = 3,
		ERROR_TOO_MANY_OPEN_FILES = 4,
		ERROR_ACCESS_DENIED = 5,
		ERROR_INVALID_HANDLE = 6,
		ERROR_INVALID_DRIVE = 15,
		ERROR_NOT_SAME_DEVICE = 17,
		ERROR_NO_MORE_FILES = 18,
		ERROR_NOT_READY = 21,
		ERROR_WRITE_FAULT = 29,
		ERROR_READ_FAULT = 30,
		ERROR_GEN_FAILURE = 31,
		ERROR_SHARING_VIOLATION = 32,
		ERROR_LOCK_VIOLATION = 33,
		ERROR_HANDLE_DISK_FULL = 39,
		ERROR_FILE_EXISTS = 80,
		ERROR_CANNOT_MAKE = 82,
		ERROR_INVALID_PARAMETER = 87,
		ERROR_BROKEN_PIPE = 109,
		ERROR_INVALID_NAME = 123,
		ERROR_DIR_NOT_EMPTY = 145,
		ERROR_ALREADY_EXISTS = 183,
		ERROR_FILENAME_EXCED_RANGE = 206,
		ERROR_DIRECTORY = 267,
		ERROR_ENCRYPTION_FAILED = 6000
	}

	internal struct MonoIOStat // TypeDefIndex: 638
	{
		// Fields
		public FileAttributes fileAttributes; // 0x00
		public long Length; // 0x08
		public long CreationTime; // 0x10
		public long LastAccessTime; // 0x18
		public long LastWriteTime; // 0x20
	}

	[ComVisible] // 0x00396794-0x003967A8
	public static class Path // TypeDefIndex: 639
	{
		// Fields
		[Obsolete] // 0x0039BD50-0x0039BD88
		public static readonly char[] InvalidPathChars; // 0x00
		public static readonly char AltDirectorySeparatorChar; // 0x08
		public static readonly char DirectorySeparatorChar; // 0x0A
		public static readonly char PathSeparator; // 0x0C
		internal static readonly string DirectorySeparatorStr; // 0x10
		public static readonly char VolumeSeparatorChar; // 0x18
		internal static readonly char[] PathSeparatorChars; // 0x20
		private static readonly bool dirEqualsVolume; // 0x28
		internal static readonly char[] trimEndCharsWindows; // 0x30
		internal static readonly char[] trimEndCharsUnix; // 0x38
	
		// Properties
		internal static string DirectorySeparatorCharAsString { get; } // 0x0063AFFC-0x0063B064 
		internal static char[] TrimEndChars { get; } // 0x00647B7C-0x00647C20 
	
		// Constructors
		static Path(); // 0x00646D70-0x00646F58
	
		// Methods
		public static string ChangeExtension(string path, string extension); // 0x00644A10-0x00644C28
		public static string Combine(string path1, string path2); // 0x00644CD4-0x00644F88
		internal static string CleanPath(string s); // 0x00645174-0x00645714
		public static string GetDirectoryName(string path); // 0x0063BDC8-0x0063C190
		public static string GetFileName(string path); // 0x0063B270-0x0063B398
		public static string GetFileNameWithoutExtension(string path); // 0x00645C00-0x00645C6C
		public static string GetFullPath(string path); // 0x0063AB24-0x0063AB9C
		internal static string GetFullPathInternal(string path); // 0x00642C88-0x00642CEC
		private static extern int GetFullPathName(string path, int numBufferChars, StringBuilder buffer, ref IntPtr lpFilePartOrNull); // 0x00645C6C-0x00645D68
		internal static string GetFullPathName(string path); // 0x00645D68-0x00645F28
		internal static string WindowsDriveAdjustment(string path); // 0x00645F28-0x00646300
		internal static string InsecureGetFullPath(string path); // 0x0063E0B8-0x0063EA1C
		internal static bool IsDirectorySeparator(char c); // 0x00646300-0x006463A4
		public static string GetPathRoot(string path); // 0x00645714-0x00645C00
		public static bool IsPathRooted(string path); // 0x00644F88-0x00645174
		public static char[] GetInvalidPathChars(); // 0x00646CE0-0x00646D70
		private static int findExtension(string path); // 0x00644C28-0x00644CD4
		private static string GetServerAndShare(string path); // 0x00646F58-0x00647124
		private static bool SameRoot(string root, string path); // 0x00647124-0x006474F0
		private static string CanonicalizePath(string path); // 0x006463A4-0x00646CE0
		public static string Combine(params /* 0x0039FA48-0x0039FA58 */ string[] paths); // 0x006474F0-0x00647838
		public static string Combine(string path1, string path2, string path3); // 0x00647838-0x00647A1C
		internal static void Validate(string path); // 0x0063A354-0x0063A3C4
		internal static void Validate(string path, string parameterName); // 0x00647A1C-0x00647B7C
		internal static void CheckSearchPattern(string searchPattern); // 0x00647C20-0x00647DEC
		internal static void CheckInvalidPathChars(string path, bool checkAdditional = false /* Metadata: 0x002047AE */); // 0x00647DEC-0x00647EE0
		internal static string InternalCombine(string path1, string path2); // 0x00647EE0-0x00648180
	}

	[Serializable]
	[ComVisible] // 0x003967A8-0x003967BC
	public enum SearchOption // TypeDefIndex: 640
	{
		TopDirectoryOnly = 0,
		AllDirectories = 1
	}

	[Serializable]
	[ComVisible] // 0x003967BC-0x003967D0
	public enum SeekOrigin // TypeDefIndex: 641
	{
		Begin = 0,
		Current = 1,
		End = 2
	}

	internal class UnexceptionalStreamReader : StreamReader // TypeDefIndex: 642
	{
		// Fields
		private static bool[] newline; // 0x00
		private static char newlineChar; // 0x08
	
		// Constructors
		static UnexceptionalStreamReader(); // 0x004E12A8-0x004E1380
		public UnexceptionalStreamReader(Stream stream, Encoding encoding); // 0x004E1380-0x004E13FC
	
		// Methods
		public override int Peek(); // 0x004E13FC-0x004E14B8
		public override int Read(); // 0x004E14B8-0x004E1574
		public override int Read([In, Out] char[] dest_buffer, int index, int count); // 0x004E1574-0x004E17F0
		private bool CheckEOL(char current); // 0x004E17F0-0x004E1A48
		public override string ReadLine(); // 0x004E1A48-0x004E1B04
		public override string ReadToEnd(); // 0x004E1B04-0x004E1BC0
	}

	internal class UnexceptionalStreamWriter : StreamWriter // TypeDefIndex: 643
	{
		// Constructors
		public UnexceptionalStreamWriter(Stream stream, Encoding encoding); // 0x004E1BC0-0x004E1C44
	
		// Methods
		public override void Flush(); // 0x004E1C44-0x004E1D10
		public override void Write(char[] buffer, int index, int count); // 0x004E1D10-0x004E1DFC
		public override void Write(char value); // 0x004E1DFC-0x004E1ECC
		public override void Write(char[] value); // 0x004E1ECC-0x004E1F9C
		public override void Write(string value); // 0x004E1F9C-0x004E206C
	}

	internal class CStreamReader : StreamReader // TypeDefIndex: 644
	{
		// Fields
		private TermInfoDriver driver; // 0x68
	
		// Constructors
		public CStreamReader(Stream stream, Encoding encoding); // 0x00636F5C-0x00637098
	
		// Methods
		public override int Peek(); // 0x00637098-0x00637158
		public override int Read(); // 0x00637158-0x0063725C
		public override int Read([In, Out] char[] dest, int index, int count); // 0x0063725C-0x00637434
		public override string ReadLine(); // 0x00637434-0x00637504
		public override string ReadToEnd(); // 0x00637504-0x006375D4
	}

	internal class CStreamWriter : StreamWriter // TypeDefIndex: 645
	{
		// Fields
		private TermInfoDriver driver; // 0x68
	
		// Constructors
		public CStreamWriter(Stream stream, Encoding encoding, bool leaveOpen); // 0x006375D4-0x0063771C
	
		// Methods
		public override void Write(char[] buffer, int index, int count); // 0x0063771C-0x00637AA0
		public override void Write(char val); // 0x00637AA0-0x00637C50
		public void InternalWriteString(string val); // 0x00637D24-0x00637DF8
		public void InternalWriteChar(char val); // 0x00637C50-0x00637D24
		public void InternalWriteChars(char[] buffer, int n); // 0x00637DF8-0x00637ED8
		public override void Write(char[] val); // 0x00637ED8-0x00637F1C
		public override void Write(string val); // 0x00637F1C-0x00638040
	}
}

namespace System.Globalization
{
	public static class CharUnicodeInfo // TypeDefIndex: 646
	{
		// Fields
		private static ushort[] s_pCategoryLevel1Index; // 0x00
		private static byte[] s_pCategoriesValue; // 0x08
		private static ushort[] s_pNumericLevel1Index; // 0x10
		private static byte[] s_pNumericValues; // 0x18
		private static ushort[] s_pDigitValues; // 0x20
	
		// Nested types
		internal static class Debug // TypeDefIndex: 647
		{
			// Methods
			internal static void Assert(bool condition, string message); // 0x0075DA70-0x0075DA74
		}
	
		// Constructors
		static CharUnicodeInfo(); // 0x0075DF6C-0x0075E0B8
	
		// Methods
		internal static int InternalConvertToUtf32(string s, int index); // 0x0075D954-0x0075DA70
		internal static bool IsWhiteSpace(string s, int index); // 0x0075DA74-0x0075DB14
		internal static bool IsWhiteSpace(char c); // 0x0075DC10-0x0075DC84
		public static UnicodeCategory GetUnicodeCategory(char ch); // 0x0075DC84-0x0075DCE8
		public static UnicodeCategory GetUnicodeCategory(string s, int index); // 0x0075DB14-0x0075DC10
		internal static UnicodeCategory InternalGetUnicodeCategory(int ch); // 0x0075DCE8-0x0075DD58
		internal static byte InternalGetCategoryValue(int ch, int offset); // 0x0075DDE8-0x0075DF6C
		internal static UnicodeCategory InternalGetUnicodeCategory(string value, int index); // 0x0075DD58-0x0075DDE8
	}

	[Serializable]
	[ComVisible] // 0x003967D0-0x003967E4
	public abstract class Calendar : ICloneable // TypeDefIndex: 648
	{
		// Fields
		internal int m_currentEraValue; // 0x10
		[OptionalField] // 0x0039BD88-0x0039BDC0
		private bool m_isReadOnly; // 0x14
		internal int twoDigitYearMax; // 0x18
	
		// Properties
		[ComVisible] // 0x0039FBD8-0x0039FBEC
		public virtual DateTime MinSupportedDateTime { get; } // 0x0075AED8-0x0075AF40 
		[ComVisible] // 0x0039FBEC-0x0039FC00
		public virtual DateTime MaxSupportedDateTime { get; } // 0x0075AF40-0x0075AFA8 
		internal virtual int ID { get; } // 0x0075AFBC-0x0075AFC4 
		internal virtual int BaseCalendarID { get; } // 0x0075AFC4-0x0075AFD0 
		internal virtual int CurrentEraValue { get; } // 0x0075B12C-0x0075B1CC 
		public abstract int[] Eras { get; }
		public virtual int TwoDigitYearMax { get; } // 0x0075B5A8-0x0075B5B0 
	
		// Constructors
		protected Calendar(); // 0x0075AFA8-0x0075AFBC
	
		// Methods
		[ComVisible] // 0x0039E89C-0x0039E8B0
		public virtual object Clone(); // 0x0075AFD0-0x0075B120
		internal void SetReadOnlyState(bool readOnly); // 0x0075B120-0x0075B12C
		public abstract int GetDayOfMonth(DateTime time);
		public abstract DayOfWeek GetDayOfWeek(DateTime time);
		public abstract int GetDaysInMonth(int year, int month, int era);
		public abstract int GetEra(DateTime time);
		public abstract int GetMonth(DateTime time);
		public abstract int GetMonthsInYear(int year, int era);
		public abstract int GetYear(DateTime time);
		public virtual bool IsLeapYear(int year); // 0x0075B290-0x0075B2A4
		public abstract bool IsLeapYear(int year, int era);
		public abstract DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
		internal virtual bool TryToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era, out DateTime result); // 0x0075B2A4-0x0075B41C
		internal virtual bool IsValidYear(int year, int era); // 0x0075B41C-0x0075B4A4
		internal virtual bool IsValidMonth(int year, int month, int era); // 0x0075B4A4-0x0075B520
		internal virtual bool IsValidDay(int year, int month, int day, int era); // 0x0075B520-0x0075B5A8
		public virtual int ToFourDigitYear(int year); // 0x0075B5B0-0x0075B6CC
		internal static int GetSystemTwoDigitYearSetting(int CalID, int defaultYearValue); // 0x0075B6CC-0x0075B730
	}

	internal class CalendarData // TypeDefIndex: 649
	{
		// Fields
		internal const int MAX_CALENDARS = 23; // Metadata: 0x002047C3
		internal string sNativeName; // 0x10
		internal string[] saShortDates; // 0x18
		internal string[] saYearMonths; // 0x20
		internal string[] saLongDates; // 0x28
		internal string sMonthDay; // 0x30
		internal string[] saEraNames; // 0x38
		internal string[] saAbbrevEraNames; // 0x40
		internal string[] saAbbrevEnglishEraNames; // 0x48
		internal string[] saDayNames; // 0x50
		internal string[] saAbbrevDayNames; // 0x58
		internal string[] saSuperShortDayNames; // 0x60
		internal string[] saMonthNames; // 0x68
		internal string[] saAbbrevMonthNames; // 0x70
		internal string[] saMonthGenitiveNames; // 0x78
		internal string[] saAbbrevMonthGenitiveNames; // 0x80
		internal string[] saLeapYearMonthNames; // 0x88
		internal int iTwoDigitYearMax; // 0x90
		internal int iCurrentEra; // 0x94
		internal bool bUseUserOverrides; // 0x98
		internal static CalendarData Invariant; // 0x00
	
		// Constructors
		private CalendarData(); // 0x0075B784-0x0075B794
		static CalendarData(); // 0x0075B794-0x0075CB48
		internal CalendarData(string localeName, int calendarId, bool bUseUserOverrides); // 0x0075CB48-0x0075D174
	
		// Methods
		private void InitializeEraNames(string localeName, int calendarId); // 0x0075D1D4-0x0075D5B4
		private void InitializeAbbreviatedEraNames(string localeName, int calendarId); // 0x0075D5B4-0x0075D8E8
		internal static CalendarData GetCalendarData(int calendarId); // 0x0075B1CC-0x0075B290
		private static string CalendarIdToCultureName(int calendarId); // 0x0075D8E8-0x0075D950
		public static int nativeGetTwoDigitYearMax(int calID); // 0x0075B730-0x0075B784
		private static bool nativeGetCalendarData(CalendarData data, string localeName, int calendarId); // 0x0075D174-0x0075D1D4
		private bool fill_calendar_data(string localeName, int datetimeIndex); // 0x0075D950-0x0075D954
	}

	[Serializable]
	[ComVisible] // 0x003967E4-0x00396820
	[Flags] // 0x003967E4-0x00396820
	public enum CompareOptions // TypeDefIndex: 650
	{
		None = 0,
		IgnoreCase = 1,
		IgnoreNonSpace = 2,
		IgnoreSymbols = 4,
		IgnoreKanaType = 8,
		IgnoreWidth = 16,
		OrdinalIgnoreCase = 268435456,
		StringSort = 536870912,
		Ordinal = 1073741824
	}

	[Serializable]
	[ComVisible] // 0x00396820-0x00396834
	public class CompareInfo : IDeserializationCallback // TypeDefIndex: 651
	{
		// Fields
		private const CompareOptions ValidIndexMaskOffFlags = CompareOptions.None | CompareOptions.OrdinalIgnoreCase | CompareOptions.StringSort | CompareOptions.Ordinal; // Metadata: 0x002047EB
		private const CompareOptions ValidCompareMaskOffFlags = CompareOptions.None | CompareOptions.OrdinalIgnoreCase | CompareOptions.Ordinal; // Metadata: 0x002047EF
		private const CompareOptions ValidHashCodeOfStringMaskOffFlags = CompareOptions.None | CompareOptions.OrdinalIgnoreCase | CompareOptions.StringSort | CompareOptions.Ordinal; // Metadata: 0x002047F3
		[OptionalField] // 0x0039BDC0-0x0039BDF8
		private string m_name; // 0x10
		[NonSerialized]
		private string m_sortName; // 0x18
		[OptionalField] // 0x0039BDF8-0x0039BE30
		private int win32LCID; // 0x20
		private int culture; // 0x24
		private const int LINGUISTIC_IGNORECASE = 16; // Metadata: 0x002047F7
		private const int NORM_IGNORECASE = 1; // Metadata: 0x002047FB
		private const int NORM_IGNOREKANATYPE = 65536; // Metadata: 0x002047FF
		private const int LINGUISTIC_IGNOREDIACRITIC = 32; // Metadata: 0x00204803
		private const int NORM_IGNORENONSPACE = 2; // Metadata: 0x00204807
		private const int NORM_IGNORESYMBOLS = 4; // Metadata: 0x0020480B
		private const int NORM_IGNOREWIDTH = 131072; // Metadata: 0x0020480F
		private const int SORT_STRINGSORT = 4096; // Metadata: 0x00204813
		private const int COMPARE_OPTIONS_ORDINAL = 1073741824; // Metadata: 0x00204817
		internal const int NORM_LINGUISTIC_CASING = 134217728; // Metadata: 0x0020481B
		private const int RESERVED_FIND_ASCII_STRING = 536870912; // Metadata: 0x0020481F
		private const int SORT_VERSION_WHIDBEY = 4096; // Metadata: 0x00204823
		private const int SORT_VERSION_V4 = 393473; // Metadata: 0x00204827
		[OptionalField] // 0x0039BE30-0x0039BE68
		private SortVersion m_SortVersion; // 0x28
		[NonSerialized]
		private SimpleCollator collator; // 0x30
		private static Dictionary<string, SimpleCollator> collators; // 0x00
		private static bool managedCollation; // 0x08
		private static bool managedCollationChecked; // 0x09
	
		// Properties
		[ComVisible] // 0x0039FC00-0x0039FC14
		public virtual string Name { get; } // 0x0075E7C4-0x0075E84C 
		private static bool UseManagedCollation { get; } // 0x0075F06C-0x0075F13C 
	
		// Constructors
		internal CompareInfo(CultureInfo culture); // 0x0075E508-0x0075E56C
	
		// Methods
		public static CompareInfo GetCompareInfo(string name); // 0x0075E56C-0x0075E638
		[OnDeserializing] // 0x0039E8B0-0x0039E8C0
		private void OnDeserializing(StreamingContext ctx); // 0x0075E638-0x0075E640
		private void OnDeserialized(); // 0x0075E640-0x0075E718
		[OnDeserialized] // 0x0039E8C0-0x0039E8D0
		private void OnDeserialized(StreamingContext ctx); // 0x0075E718-0x0075E71C
		[OnSerializing] // 0x0039E8D0-0x0039E8E0
		private void OnSerializing(StreamingContext ctx); // 0x0075E71C-0x0075E7C0
		void IDeserializationCallback.OnDeserialization(object sender); // 0x0075E7C0-0x0075E7C4
		public virtual int Compare(string string1, string string2); // 0x0075E84C-0x0075E85C
		public virtual int Compare(string string1, string string2, CompareOptions options); // 0x0075E85C-0x0075E9F4
		public virtual int Compare(string string1, int offset1, int length1, string string2, int offset2, int length2, CompareOptions options); // 0x0075EAA4-0x0075EDA8
		private static int CompareOrdinal(string string1, int offset1, int length1, string string2, int offset2, int length2); // 0x0075EDA8-0x0075EDFC
		public virtual bool IsPrefix(string source, string prefix, CompareOptions options); // 0x0075EDFC-0x0075F06C
		public virtual bool IsSuffix(string source, string suffix, CompareOptions options); // 0x0075F388-0x0075F634
		public virtual int IndexOf(string source, string value, int startIndex, int count, CompareOptions options); // 0x0075F634-0x0075F890
		public virtual int LastIndexOf(string source, string value, int startIndex, int count, CompareOptions options); // 0x0075F978-0x0075FC34
		public virtual SortKey GetSortKey(string source, CompareOptions options); // 0x0075FC34-0x0075FC38
		private SortKey CreateSortKey(string source, CompareOptions options); // 0x0075FC38-0x0075FD50
		public override bool Equals(object value); // 0x0075FE2C-0x0075FF04
		public override int GetHashCode(); // 0x0075FF04-0x0075FF40
		internal int GetHashCodeOfString(string source, CompareOptions options); // 0x0075FF40-0x0075FF48
		internal int GetHashCodeOfString(string source, CompareOptions options, bool forceRandomizedHashing, long additionalEntropy); // 0x0075FF48-0x00760080
		public override string ToString(); // 0x00760080-0x007600E8
		private SimpleCollator GetCollator(); // 0x0075F13C-0x0075F388
		private SortKey CreateSortKeyCore(string source, CompareOptions options); // 0x0075FD50-0x0075FE2C
		private int internal_index_switch(string s1, int sindex, int count, string s2, CompareOptions opt, bool first); // 0x0075F890-0x0075F978
		private int internal_compare_switch(string str1, int offset1, int length1, string str2, int offset2, int length2, CompareOptions options); // 0x0075E9F4-0x0075EAA4
		private int internal_compare_managed(string str1, int offset1, int length1, string str2, int offset2, int length2, CompareOptions options); // 0x007601A8-0x00760228
		private int internal_index_managed(string s1, int sindex, int count, string s2, CompareOptions opt, bool first); // 0x007600F4-0x007601A4
		private void assign_sortkey(object key, string source, CompareOptions options); // 0x007600E8-0x007600EC
		private int internal_compare(string str1, int offset1, int length1, string str2, int offset2, int length2, CompareOptions options); // 0x007601A4-0x007601A8
		private int internal_index(string source, int sindex, int count, string value, CompareOptions options, bool first); // 0x007600EC-0x007600F4
	}

	[Serializable]
	[ComVisible] // 0x00396834-0x00396848
	public class CultureNotFoundException : ArgumentException, ISerializable // TypeDefIndex: 652
	{
		// Fields
		private string m_invalidCultureName; // 0x90
		private int? m_invalidCultureId; // 0x98
	
		// Properties
		public virtual int? InvalidCultureId { get; } // 0x00860600-0x00860608 
		public virtual string InvalidCultureName { get; } // 0x00860608-0x00860610 
		private static string DefaultMessage { get; } // 0x00860200-0x0086024C 
		private string FormatedInvalidCultureId { get; } // 0x00860610-0x00860724 
		public override string Message { get; } // 0x00860724-0x00860868 
	
		// Constructors
		public CultureNotFoundException(); // 0x008601D4-0x00860200
		public CultureNotFoundException(string paramName, string message); // 0x0085D12C-0x0085D140
		public CultureNotFoundException(string paramName, string invalidCultureName, string message); // 0x0086024C-0x00860284
		protected CultureNotFoundException(SerializationInfo info, StreamingContext context); // 0x00860284-0x00860490
	
		// Methods
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00860490-0x00860600
	}

	[Flags] // 0x00396848-0x00396858
	internal enum MonthNameStyles // TypeDefIndex: 653
	{
		Regular = 0,
		Genitive = 1,
		LeapYear = 2
	}

	[Flags] // 0x00396858-0x00396868
	internal enum DateTimeFormatFlags // TypeDefIndex: 654
	{
		NotInitialized = -1,
		None = 0,
		UseGenitiveMonth = 1,
		UseLeapYearMonth = 2,
		UseSpacesInMonthNames = 4,
		UseHebrewRule = 8,
		UseSpacesInDayNames = 16,
		UseDigitPrefixInTokens = 32
	}

	[Serializable]
	[ComVisible] // 0x00396868-0x0039687C
	public sealed class DateTimeFormatInfo : ICloneable, IFormatProvider // TypeDefIndex: 655
	{
		// Fields
		private static DateTimeFormatInfo invariantInfo; // 0x00
		[NonSerialized]
		private CultureData m_cultureData; // 0x10
		[OptionalField] // 0x0039BE68-0x0039BEA0
		internal string m_name; // 0x18
		[NonSerialized]
		private string m_langName; // 0x20
		[NonSerialized]
		private CompareInfo m_compareInfo; // 0x28
		[NonSerialized]
		private CultureInfo m_cultureInfo; // 0x30
		internal string amDesignator; // 0x38
		internal string pmDesignator; // 0x40
		[OptionalField] // 0x0039BEA0-0x0039BED8
		internal string dateSeparator; // 0x48
		[OptionalField] // 0x0039BED8-0x0039BF10
		internal string generalShortTimePattern; // 0x50
		[OptionalField] // 0x0039BF10-0x0039BF48
		internal string generalLongTimePattern; // 0x58
		[OptionalField] // 0x0039BF48-0x0039BF80
		internal string timeSeparator; // 0x60
		internal string monthDayPattern; // 0x68
		[OptionalField] // 0x0039BF80-0x0039BFB8
		internal string dateTimeOffsetPattern; // 0x70
		internal const string rfc1123Pattern = "ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'"; // Metadata: 0x00204857
		internal const string sortableDateTimePattern = "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss"; // Metadata: 0x0020487E
		internal const string universalSortableDateTimePattern = "yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'"; // Metadata: 0x0020489F
		internal Calendar calendar; // 0x78
		internal int firstDayOfWeek; // 0x80
		internal int calendarWeekRule; // 0x84
		[NonSerialized]
		[OptionalField] // 0x0039BFB8-0x0039BFF0
		internal string fullDateTimePattern; // 0x88
		internal string[] abbreviatedDayNames; // 0x90
		[OptionalField] // 0x0039BFF0-0x0039C028
		internal string[] m_superShortDayNames; // 0x98
		internal string[] dayNames; // 0xA0
		internal string[] abbreviatedMonthNames; // 0xA8
		internal string[] monthNames; // 0xB0
		[OptionalField] // 0x0039C028-0x0039C060
		internal string[] genitiveMonthNames; // 0xB8
		[OptionalField] // 0x0039C060-0x0039C098
		internal string[] m_genitiveAbbreviatedMonthNames; // 0xC0
		[OptionalField] // 0x0039C098-0x0039C0D0
		internal string[] leapYearMonthNames; // 0xC8
		internal string longDatePattern; // 0xD0
		internal string shortDatePattern; // 0xD8
		internal string yearMonthPattern; // 0xE0
		internal string longTimePattern; // 0xE8
		internal string shortTimePattern; // 0xF0
		[OptionalField] // 0x0039C0D0-0x0039C108
		private string[] allYearMonthPatterns; // 0xF8
		internal string[] allShortDatePatterns; // 0x100
		internal string[] allLongDatePatterns; // 0x108
		internal string[] allShortTimePatterns; // 0x110
		internal string[] allLongTimePatterns; // 0x118
		internal string[] m_eraNames; // 0x120
		internal string[] m_abbrevEraNames; // 0x128
		internal string[] m_abbrevEnglishEraNames; // 0x130
		internal int[] optionalCalendars; // 0x138
		private const int DEFAULT_ALL_DATETIMES_SIZE = 132; // Metadata: 0x002048C1
		internal bool m_isReadOnly; // 0x140
		[OptionalField] // 0x0039C108-0x0039C140
		internal DateTimeFormatFlags formatFlags; // 0x144
		internal static bool preferExistingTokens; // 0x08
		[OptionalField] // 0x0039C140-0x0039C178
		private int CultureID; // 0x148
		[OptionalField] // 0x0039C178-0x0039C1B0
		private bool m_useUserOverride; // 0x14C
		[OptionalField] // 0x0039C1B0-0x0039C1E8
		private bool bUseCalendarInfo; // 0x14D
		[OptionalField] // 0x0039C1E8-0x0039C220
		private int nDataItem; // 0x150
		[OptionalField] // 0x0039C220-0x0039C258
		internal bool m_isDefaultCalendar; // 0x154
		[OptionalField] // 0x0039C258-0x0039C290
		private static Hashtable s_calendarNativeNames; // 0x10
		[OptionalField] // 0x0039C290-0x0039C2C8
		internal string[] m_dateWords; // 0x158
		[NonSerialized]
		private string m_fullTimeSpanPositivePattern; // 0x160
		[NonSerialized]
		private string m_fullTimeSpanNegativePattern; // 0x168
		internal const DateTimeStyles InvalidDateTimeStyles = DateTimeStyles.None; // Metadata: 0x002048C5
		[NonSerialized]
		private TokenHashValue[] m_dtfiTokenHash; // 0x170
		private const int TOKEN_HASH_SIZE = 199; // Metadata: 0x002048C9
		private const int SECOND_PRIME = 197; // Metadata: 0x002048CD
		private const string dateSeparatorOrTimeZoneOffset = "-"; // Metadata: 0x002048D1
		private const string invariantDateSeparator = "/"; // Metadata: 0x002048D6
		private const string invariantTimeSeparator = ":"; // Metadata: 0x002048DB
		internal const string IgnorablePeriod = "."; // Metadata: 0x002048E0
		internal const string IgnorableComma = ","; // Metadata: 0x002048E5
		internal const string CJKYearSuff = "\uFFFD"; // Metadata: 0x002048EA
		internal const string CJKMonthSuff = "\uFFFD"; // Metadata: 0x002048F1
		internal const string CJKDaySuff = "\uFFFD"; // Metadata: 0x002048F8
		internal const string KoreanYearSuff = "\uFFFD"; // Metadata: 0x002048FF
		internal const string KoreanMonthSuff = "\uFFFD"; // Metadata: 0x00204906
		internal const string KoreanDaySuff = "\uFFFD"; // Metadata: 0x0020490D
		internal const string KoreanHourSuff = "\uFFFD"; // Metadata: 0x00204914
		internal const string KoreanMinuteSuff = "\uFFFD"; // Metadata: 0x0020491B
		internal const string KoreanSecondSuff = "\uFFFD"; // Metadata: 0x00204922
		internal const string CJKHourSuff = "\uFFFD"; // Metadata: 0x00204929
		internal const string ChineseHourSuff = "\uFFFD"; // Metadata: 0x00204930
		internal const string CJKMinuteSuff = "\uFFFD"; // Metadata: 0x00204937
		internal const string CJKSecondSuff = "\uFFFD"; // Metadata: 0x0020493E
		internal const string LocalTimeMark = "T"; // Metadata: 0x00204945
		internal const string KoreanLangName = "ko"; // Metadata: 0x0020494A
		internal const string JapaneseLangName = "ja"; // Metadata: 0x00204950
		internal const string EnglishLangName = "en"; // Metadata: 0x00204956
		private static DateTimeFormatInfo s_jajpDTFI; // 0x18
		private static DateTimeFormatInfo s_zhtwDTFI; // 0x20
	
		// Properties
		private string CultureName { get; } // 0x00860870-0x008608AC 
		private CultureInfo Culture { get; } // 0x008608AC-0x00860940 
		private string LanguageName { get; } // 0x00860940-0x0086097C 
		public static DateTimeFormatInfo InvariantInfo { get; } // 0x00861E80-0x00861F90 
		public static DateTimeFormatInfo CurrentInfo { get; } // 0x00861F90-0x008630D4 
		public string AMDesignator { get; } // 0x0086331C-0x00863324 
		public Calendar Calendar { get; set; } // 0x008609EC-0x008609F4 0x00860CE4-0x00860F68
		private int[] OptionalCalendars { get; } // 0x0086332C-0x0086336C 
		internal string[] EraNames { get; } // 0x0086337C-0x008633EC 
		internal string[] AbbreviatedEraNames { get; } // 0x00863524-0x00863594 
		internal string[] AbbreviatedEnglishEraNames { get; } // 0x008636FC-0x0086376C 
		public string DateSeparator { get; } // 0x0086376C-0x00863774 
		public string FullDateTimePattern { get; } // 0x00863774-0x008637F0 
		public string LongDatePattern { get; set; } // 0x00861A8C-0x00861AE4 0x00861380-0x00861490
		public string LongTimePattern { get; set; } // 0x00861A34-0x00861A8C 0x008616B0-0x008617C8
		public string MonthDayPattern { get; } // 0x008638A4-0x00863914 
		public string PMDesignator { get; } // 0x00863914-0x0086391C 
		public string RFC1123Pattern { get; } // 0x0086391C-0x00863964 
		public string ShortDatePattern { get; set; } // 0x00861B3C-0x00861B94 0x00861490-0x008615A4
		public string ShortTimePattern { get; set; } // 0x00861AE4-0x00861B3C 0x008617C8-0x008618D8
		public string SortableDateTimePattern { get; } // 0x00863A18-0x00863A60 
		internal string GeneralShortTimePattern { get; } // 0x00863A60-0x00863ADC 
		internal string GeneralLongTimePattern { get; } // 0x00863ADC-0x00863B58 
		internal string DateTimeOffsetPattern { get; } // 0x00863B58-0x00863D14 
		public string TimeSeparator { get; } // 0x00863D14-0x00863D1C 
		public string UniversalSortableDateTimePattern { get; } // 0x00863D1C-0x00863D64 
		public string YearMonthPattern { get; set; } // 0x00861B94-0x00861BEC 0x008615A4-0x008616B0
		public string[] AbbreviatedDayNames { get; } // 0x00863DD4-0x00863EB0 
		public string[] DayNames { get; } // 0x00863EB0-0x00863F8C 
		public string[] AbbreviatedMonthNames { get; } // 0x00863F8C-0x00864068 
		public string[] MonthNames { get; } // 0x00864068-0x00864144 
		internal bool HasSpacesInMonthNames { get; } // 0x00864144-0x0086415C 
		internal bool HasSpacesInDayNames { get; } // 0x008642C8-0x008642E0 
		private string[] AllYearMonthPatterns { get; } // 0x00861DFC-0x00861E80 
		private string[] AllShortDatePatterns { get; } // 0x00861D78-0x00861DFC 
		private string[] AllShortTimePatterns { get; } // 0x00861CF4-0x00861D78 
		private string[] AllLongDatePatterns { get; } // 0x00861C70-0x00861CF4 
		private string[] AllLongTimePatterns { get; } // 0x00861BEC-0x00861C70 
		private string[] UnclonedYearMonthPatterns { get; } // 0x00863D64-0x00863DD4 
		private string[] UnclonedShortDatePatterns { get; } // 0x00863964-0x008639D4 
		private string[] UnclonedLongDatePatterns { get; } // 0x008637F0-0x00863860 
		private string[] UnclonedShortTimePatterns { get; } // 0x008639D4-0x00863A18 
		private string[] UnclonedLongTimePatterns { get; } // 0x00863860-0x008638A4 
		public bool IsReadOnly { get; } // 0x00863324-0x0086332C 
		[ComVisible] // 0x0039FC14-0x0039FC28
		public string[] MonthGenitiveNames { get; } // 0x008654B4-0x00865594 
		internal string FullTimeSpanPositivePattern { get; } // 0x00865594-0x00865684 
		internal string FullTimeSpanNegativePattern { get; } // 0x00865684-0x008656F4 
		internal CompareInfo CompareInfo { get; } // 0x008656F4-0x00865764 
		internal DateTimeFormatFlags FormatFlags { get; } // 0x0086415C-0x008642C8 
		internal bool HasForceTwoDigitYears { get; } // 0x00865984-0x008659C8 
		internal bool HasYearMonthAdjustment { get; } // 0x008659C8-0x008659E0 
	
		// Constructors
		public DateTimeFormatInfo(); // 0x00860B44-0x00860C10
		internal DateTimeFormatInfo(CultureData cultureData, Calendar cal); // 0x0085CABC-0x0085CB0C
		static DateTimeFormatInfo(); // 0x00868314-0x00868364
	
		// Methods
		private static bool InitPreferExistingTokens(); // 0x00860868-0x00860870
		private string[] internalGetAbbreviatedDayOfWeekNames(); // 0x0086097C-0x008609EC
		private string[] internalGetDayOfWeekNames(); // 0x008609F4-0x00860A64
		private string[] internalGetAbbreviatedMonthNames(); // 0x00860A64-0x00860AD4
		private string[] internalGetMonthNames(); // 0x00860AD4-0x00860B44
		private void InitializeOverridableProperties(CultureData cultureData, int calendarID); // 0x00860F68-0x008610FC
		[OnDeserialized] // 0x0039E8E0-0x0039E8F0
		private void OnDeserialized(StreamingContext ctx); // 0x008610FC-0x00861380
		[OnSerializing] // 0x0039E8F0-0x0039E900
		private void OnSerializing(StreamingContext ctx); // 0x008618D8-0x00861A34
		public static DateTimeFormatInfo GetInstance(IFormatProvider provider); // 0x008630D4-0x00863280
		public object GetFormat(Type formatType); // 0x00863280-0x0086331C
		public object Clone(); // 0x0085C428-0x0085C5B0
		public string GetEraName(int era); // 0x008633EC-0x00863524
		public string GetAbbreviatedEraName(int era); // 0x00863594-0x008636FC
		internal string internalGetMonthName(int month, MonthNameStyles style, bool abbreviated); // 0x008642E0-0x008644DC
		private string[] internalGetGenitiveMonthNames(bool abbreviated); // 0x008644DC-0x008645A0
		internal string[] internalGetLeapYearMonthNames(); // 0x008645A0-0x00864610
		public string GetAbbreviatedDayName(DayOfWeek dayofweek); // 0x00864610-0x008647A4
		private static string[] GetCombinedPatterns(string[] patterns1, string[] patterns2, string connectString); // 0x008647A4-0x00864960
		public string[] GetAllDateTimePatterns(char format); // 0x00864960-0x00864CD8
		public string GetDayName(DayOfWeek dayofweek); // 0x00864CD8-0x00864E6C
		public string GetAbbreviatedMonthName(int month); // 0x00864E6C-0x00865008
		public string GetMonthName(int month); // 0x00865008-0x008651A4
		private static string[] GetMergedPatterns(string[] patterns, string defaultPattern); // 0x008651A4-0x008654B4
		internal static void ValidateStyles(DateTimeStyles style, string parameterName); // 0x00865764-0x00865844
		internal bool YearMonthAdjustment(ref int year, ref int month, bool parsedMonthName); // 0x008659E0-0x00865B48
		internal static DateTimeFormatInfo GetJapaneseCalendarDTFI(); // 0x00865B48-0x00865C80
		internal static DateTimeFormatInfo GetTaiwanCalendarDTFI(); // 0x00865D50-0x00865E8C
		private void ClearTokenHashTable(); // 0x0086336C-0x0086337C
		internal TokenHashValue[] CreateTokenHashTable(); // 0x00865E8C-0x00866D5C
		private void AddMonthNames(TokenHashValue[] temp, string monthPostfix); // 0x0086763C-0x00867710
		private static bool TryParseHebrewNumber(ref __DTString str, out bool badFormat, out int number); // 0x00867710-0x00867894
		private static bool IsHebrewChar(char ch); // 0x00867C10-0x00867C24
		internal bool Tokenize(TokenType TokenMask, out TokenType tokenType, out int tokenValue, ref __DTString str); // 0x00867C24-0x008680C4
		private void InsertAtCurrentHashNode(TokenHashValue[] hashTable, string str, char ch, TokenType tokenType, int tokenValue, int pos, int hashcode, int hashProbe); // 0x008680C4-0x00868314
		private void InsertHash(TokenHashValue[] hashTable, string str, TokenType tokenType, int tokenValue); // 0x00866D5C-0x008671FC
	}

	internal class TokenHashValue // TypeDefIndex: 656
	{
		// Fields
		internal string tokenString; // 0x10
		internal TokenType tokenType; // 0x18
		internal int tokenValue; // 0x1C
	
		// Constructors
		internal TokenHashValue(string tokenString, TokenType tokenType, int tokenValue); // 0x006307A4-0x00630AD0
	}

	internal enum FORMATFLAGS // TypeDefIndex: 657
	{
		None = 0,
		UseGenitiveMonth = 1,
		UseLeapYearMonth = 2,
		UseSpacesInMonthNames = 4,
		UseHebrewParsing = 8,
		UseSpacesInDayNames = 16,
		UseDigitPrefixInTokens = 32
	}

	internal enum CalendarId : ushort // TypeDefIndex: 658
	{
		GREGORIAN = 1,
		GREGORIAN_US = 2,
		JAPAN = 3,
		TAIWAN = 4,
		KOREA = 5,
		HIJRI = 6,
		THAI = 7,
		HEBREW = 8,
		GREGORIAN_ME_FRENCH = 9,
		GREGORIAN_ARABIC = 10,
		GREGORIAN_XLIT_ENGLISH = 11,
		GREGORIAN_XLIT_FRENCH = 12,
		JULIAN = 13,
		JAPANESELUNISOLAR = 14,
		CHINESELUNISOLAR = 15,
		SAKA = 16,
		LUNAR_ETO_CHN = 17,
		LUNAR_ETO_KOR = 18,
		LUNAR_ETO_ROKUYOU = 19,
		KOREANLUNISOLAR = 20,
		TAIWANLUNISOLAR = 21,
		PERSIAN = 22,
		UMALQURA = 23,
		LAST_CALENDAR = 23
	}

	internal class DateTimeFormatInfoScanner // TypeDefIndex: 659
	{
		// Fields
		internal List<string> m_dateWords; // 0x10
		private static Dictionary<string, string> s_knownWords; // 0x00
		private FoundDatePattern m_ymdFlags; // 0x18
	
		// Properties
		private static Dictionary<string, string> KnownWords { get; } // 0x00868364-0x00868764 
	
		// Nested types
		private enum FoundDatePattern // TypeDefIndex: 660
		{
			None = 0,
			FoundYearPatternFlag = 1,
			FoundMonthPatternFlag = 2,
			FoundDayPatternFlag = 4,
			FoundYMDPatternFlag = 7
		}
	
		// Constructors
		public DateTimeFormatInfoScanner(); // 0x008671FC-0x0086726C
	
		// Methods
		internal static int SkipWhiteSpacesAndNonLetter(string pattern, int currentIndex); // 0x00868764-0x0086889C
		internal void AddDateWordOrPostfix(string formatPostfix, string str); // 0x0086889C-0x00868B4C
		internal int AddDateWords(string pattern, int index, string formatPostfix); // 0x00868C44-0x00868E78
		internal static int ScanRepeatChar(string pattern, char ch, int index, out int count); // 0x00868E78-0x00868F0C
		internal void AddIgnorableSymbols(string text); // 0x00868B4C-0x00868C44
		internal void ScanDateWord(string pattern); // 0x00868F0C-0x00869178
		internal string[] GetDateWordsOfDTFI(DateTimeFormatInfo dtfi); // 0x0086726C-0x0086763C
		internal static FORMATFLAGS GetFormatFlagGenitiveMonth(string[] monthNames, string[] genitveMonthNames, string[] abbrevMonthNames, string[] genetiveAbbrevMonthNames); // 0x00865844-0x00865888
		internal static FORMATFLAGS GetFormatFlagUseSpaceInMonthNames(string[] monthNames, string[] genitveMonthNames, string[] abbrevMonthNames, string[] genetiveAbbrevMonthNames); // 0x00865888-0x00865938
		internal static FORMATFLAGS GetFormatFlagUseSpaceInDayNames(string[] dayNames, string[] abbrevDayNames); // 0x00865938-0x00865974
		internal static FORMATFLAGS GetFormatFlagUseHebrewCalendar(int calID); // 0x00865974-0x00865984
		private static bool EqualStringArrays(string[] array1, string[] array2); // 0x00869178-0x00869270
		private static bool ArrayElementsHaveSpace(string[] array); // 0x008696C8-0x00869810
		private static bool ArrayElementsBeginWithDigit(string[] array); // 0x00869270-0x008696C8
	}

	[Serializable]
	[ComVisible] // 0x0039687C-0x003968B8
	[Flags] // 0x0039687C-0x003968B8
	public enum DateTimeStyles // TypeDefIndex: 661
	{
		None = 0,
		AllowLeadingWhite = 1,
		AllowTrailingWhite = 2,
		AllowInnerWhite = 4,
		AllowWhiteSpaces = 7,
		NoCurrentDateDefault = 8,
		AdjustToUniversal = 16,
		AssumeLocal = 32,
		AssumeUniversal = 64,
		RoundtripKind = 128
	}

	[Serializable]
	[ComVisible] // 0x003968B8-0x003968CC
	public class GregorianCalendar : Calendar // TypeDefIndex: 662
	{
		// Fields
		internal GregorianCalendarTypes m_type; // 0x1C
		internal static readonly int[] DaysToMonth365; // 0x00
		internal static readonly int[] DaysToMonth366; // 0x08
		private static Calendar s_defaultInstance; // 0x10
	
		// Properties
		[ComVisible] // 0x0039FC28-0x0039FC3C
		public override DateTime MinSupportedDateTime { get; } // 0x008719B0-0x00871A18 
		[ComVisible] // 0x0039FC3C-0x0039FC50
		public override DateTime MaxSupportedDateTime { get; } // 0x00871A18-0x00871A80 
		internal override int ID { get; } // 0x00871A88-0x00871A90 
		public override int[] Eras { get; } // 0x008720B8-0x00872138 
		public override int TwoDigitYearMax { get; } // 0x00872748-0x00872790 
	
		// Constructors
		public GregorianCalendar(); // 0x00871A80-0x00871A88
		public GregorianCalendar(GregorianCalendarTypes type); // 0x0085FBEC-0x0085FD5C
		static GregorianCalendar(); // 0x008728F8-0x008729AC
	
		// Methods
		[OnDeserialized] // 0x0039E900-0x0039E910
		private void OnDeserialized(StreamingContext ctx); // 0x008718A8-0x008719B0
		internal static Calendar GetDefaultInstance(); // 0x00860C10-0x00860CE4
		internal virtual int GetDatePart(long ticks, int part); // 0x00871A90-0x00871D14
		public override int GetDayOfMonth(DateTime time); // 0x00871D14-0x00871D5C
		public override DayOfWeek GetDayOfWeek(DateTime time); // 0x00871D5C-0x00871DD0
		public override int GetDaysInMonth(int year, int month, int era); // 0x00871DD0-0x008720B0
		public override int GetEra(DateTime time); // 0x008720B0-0x008720B8
		public override int GetMonth(DateTime time); // 0x00872138-0x00872180
		public override int GetMonthsInYear(int year, int era); // 0x00872180-0x00872308
		public override int GetYear(DateTime time); // 0x00872308-0x00872350
		public override bool IsLeapYear(int year, int era); // 0x00872350-0x0087251C
		public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era); // 0x0087251C-0x00872638
		internal override bool TryToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era, out DateTime result); // 0x00872638-0x00872748
		public override int ToFourDigitYear(int year); // 0x00872790-0x008728F8
	}

	[Serializable]
	internal class EraInfo // TypeDefIndex: 663
	{
		// Fields
		internal int era; // 0x10
		internal long ticks; // 0x18
		internal int yearOffset; // 0x20
		internal int minEraYear; // 0x24
		internal int maxEraYear; // 0x28
		[OptionalField] // 0x0039C2C8-0x0039C300
		internal string eraName; // 0x30
		[OptionalField] // 0x0039C300-0x0039C338
		internal string abbrevEraName; // 0x38
		[OptionalField] // 0x0039C338-0x0039C370
		internal string englishEraName; // 0x40
	
		// Constructors
		internal EraInfo(int era, int startYear, int startMonth, int startDay, int yearOffset, int minEraYear, int maxEraYear); // 0x00871748-0x008717E8
		internal EraInfo(int era, int startYear, int startMonth, int startDay, int yearOffset, int minEraYear, int maxEraYear, string eraName, string abbrevEraName, string englishEraName); // 0x008717E8-0x008718A8
	}

	[Serializable]
	internal class GregorianCalendarHelper // TypeDefIndex: 664
	{
		// Fields
		internal static readonly int[] DaysToMonth365; // 0x00
		internal static readonly int[] DaysToMonth366; // 0x08
		[OptionalField] // 0x0039C370-0x0039C3A8
		internal int m_maxYear; // 0x10
		[OptionalField] // 0x0039C3A8-0x0039C3E0
		internal int m_minYear; // 0x14
		internal Calendar m_Cal; // 0x18
		[OptionalField] // 0x0039C3E0-0x0039C418
		internal EraInfo[] m_EraInfo; // 0x20
		[OptionalField] // 0x0039C418-0x0039C450
		internal int[] m_eras; // 0x28
		[OptionalField] // 0x0039C450-0x0039C488
		internal DateTime m_minDate; // 0x30
	
		// Properties
		internal int MaxYear { get; } // 0x008729AC-0x008729B4 
		public int[] Eras { get; } // 0x00873D1C-0x00873ECC 
	
		// Constructors
		internal GregorianCalendarHelper(Calendar cal, EraInfo[] eraInfo); // 0x008729B4-0x00872AD8
		static GregorianCalendarHelper(); // 0x00874240-0x008742F4
	
		// Methods
		internal int GetGregorianYear(int year, int era); // 0x00872AD8-0x00872E3C
		internal bool IsValidYear(int year, int era); // 0x00872E3C-0x00872FB8
		internal virtual int GetDatePart(long ticks, int part); // 0x00872FB8-0x0087324C
		internal static long GetAbsoluteDate(int year, int month, int day); // 0x0087343C-0x00873698
		internal static long DateToTicks(int year, int month, int day); // 0x00873698-0x00873728
		internal static long TimeToTicks(int hour, int minute, int second, int millisecond); // 0x00873728-0x008738F4
		internal void CheckTicksRange(long ticks); // 0x0087324C-0x0087343C
		public int GetDayOfMonth(DateTime time); // 0x008738F4-0x00873938
		public DayOfWeek GetDayOfWeek(DateTime time); // 0x00873938-0x008739CC
		public int GetDaysInMonth(int year, int month, int era); // 0x008739CC-0x00873BA4
		public int GetEra(DateTime time); // 0x00873BA4-0x00873D1C
		public int GetMonth(DateTime time); // 0x00873ECC-0x00873F10
		public int GetMonthsInYear(int year, int era); // 0x00873F10-0x00873F28
		public int GetYear(DateTime time); // 0x00873F28-0x008740C8
		public bool IsLeapYear(int year, int era); // 0x008740C8-0x00874130
		public DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era); // 0x00874130-0x00874240
	}

	[Serializable]
	[ComVisible] // 0x003968CC-0x003968E0
	public enum GregorianCalendarTypes // TypeDefIndex: 665
	{
		Localized = 1,
		USEnglish = 2,
		MiddleEastFrench = 9,
		Arabic = 10,
		TransliteratedEnglish = 11,
		TransliteratedFrench = 12
	}

	internal struct HebrewNumberParsingContext // TypeDefIndex: 666
	{
		// Fields
		internal HebrewNumber.HS state; // 0x00
		internal int result; // 0x04
	
		// Constructors
		public HebrewNumberParsingContext(int result); // 0x00875908-0x00875910
	}

	internal enum HebrewNumberParsingState // TypeDefIndex: 667
	{
		InvalidHebrewNumber = 0,
		NotHebrewDigit = 1,
		FoundEndOfHebrewNumber = 2,
		ContinueParsing = 3
	}

	internal class HebrewNumber // TypeDefIndex: 668
	{
		// Fields
		private static HebrewValue[] HebrewValues; // 0x00
		private static char maxHebrewNumberCh; // 0x08
		private static readonly HS[][] NumberPasingState; // 0x10
	
		// Nested types
		private enum HebrewToken // TypeDefIndex: 669
		{
			Invalid = -1,
			Digit400 = 0,
			Digit200_300 = 1,
			Digit100 = 2,
			Digit10 = 3,
			Digit1 = 4,
			Digit6_7 = 5,
			Digit7 = 6,
			Digit9 = 7,
			SingleQuote = 8,
			DoubleQuote = 9
		}
	
		private class HebrewValue // TypeDefIndex: 670
		{
			// Fields
			internal HebrewToken token; // 0x10
			internal int value; // 0x14
	
			// Constructors
			internal HebrewValue(HebrewToken token, int value); // 0x008758D0-0x00875908
		}
	
		internal enum HS // TypeDefIndex: 671
		{
			_err = -1,
			Start = 0,
			S400 = 1,
			S400_400 = 2,
			S400_X00 = 3,
			S400_X0 = 4,
			X00_DQ = 5,
			S400_X00_X0 = 6,
			X0_DQ = 7,
			X = 8,
			X0 = 9,
			X00 = 10,
			S400_DQ = 11,
			S400_400_DQ = 12,
			S400_400_100 = 13,
			S9 = 14,
			X00_S9 = 15,
			S9_DQ = 16,
			END = 100
		}
	
		// Constructors
		static HebrewNumber(); // 0x008745D8-0x008758D0
	
		// Methods
		internal static string ToString(int Number); // 0x008742F4-0x008745D8
		internal static HebrewNumberParsingState ParseByChar(char ch, ref HebrewNumberParsingContext context); // 0x008679AC-0x00867C10
		internal static bool IsDigit(char ch); // 0x00867894-0x008679AC
	}

	[Serializable]
	[ComVisible] // 0x003968E0-0x003968F4
	public class JapaneseCalendar : Calendar // TypeDefIndex: 672
	{
		// Fields
		internal static readonly DateTime calendarMinValue; // 0x00
		internal static EraInfo[] japaneseEraInfo; // 0x08
		internal static Calendar s_defaultInstance; // 0x10
		internal GregorianCalendarHelper helper; // 0x20
	
		// Properties
		[ComVisible] // 0x0039FC50-0x0039FC64
		public override DateTime MinSupportedDateTime { get; } // 0x00876E2C-0x00876E94 
		[ComVisible] // 0x0039FC64-0x0039FC78
		public override DateTime MaxSupportedDateTime { get; } // 0x00876E94-0x00876EFC 
		internal override int ID { get; } // 0x0087746C-0x00877474 
		public override int[] Eras { get; } // 0x0087790C-0x00877938 
		public override int TwoDigitYearMax { get; } // 0x00877D84-0x00877DCC 
	
		// Constructors
		public JapaneseCalendar(); // 0x008772BC-0x0087746C
		static JapaneseCalendar(); // 0x00877DCC-0x00877E3C
	
		// Methods
		internal static EraInfo[] GetEraInfo(); // 0x00876EFC-0x008772B4
		private static EraInfo[] GetErasFromRegistry(); // 0x008772B4-0x008772BC
		internal static Calendar GetDefaultInstance(); // 0x00865C80-0x00865D50
		public override int GetDaysInMonth(int year, int month, int era); // 0x00877474-0x008774C0
		public override int GetDayOfMonth(DateTime time); // 0x008774C0-0x0087751C
		public override DayOfWeek GetDayOfWeek(DateTime time); // 0x0087751C-0x00877550
		public override int GetMonthsInYear(int year, int era); // 0x00877550-0x0087759C
		public override int GetEra(DateTime time); // 0x0087759C-0x008775D0
		public override int GetMonth(DateTime time); // 0x008775D0-0x0087762C
		public override int GetYear(DateTime time); // 0x0087762C-0x00877660
		public override bool IsLeapYear(int year, int era); // 0x00877660-0x008776FC
		public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era); // 0x008776FC-0x00877788
		public override int ToFourDigitYear(int year); // 0x00877788-0x0087790C
		internal static string[] EraNames(); // 0x00877938-0x00877A90
		internal static string[] AbbrevEraNames(); // 0x00877A90-0x00877BE8
		internal static string[] EnglishEraNames(); // 0x00877BE8-0x00877D40
		internal override bool IsValidYear(int year, int era); // 0x00877D40-0x00877D84
	}

	[Serializable]
	[ComVisible] // 0x003968F4-0x00396908
	public sealed class NumberFormatInfo : ICloneable, IFormatProvider // TypeDefIndex: 673
	{
		// Fields
		private static NumberFormatInfo invariantInfo; // 0x00
		internal int[] numberGroupSizes; // 0x10
		internal int[] currencyGroupSizes; // 0x18
		internal int[] percentGroupSizes; // 0x20
		internal string positiveSign; // 0x28
		internal string negativeSign; // 0x30
		internal string numberDecimalSeparator; // 0x38
		internal string numberGroupSeparator; // 0x40
		internal string currencyGroupSeparator; // 0x48
		internal string currencyDecimalSeparator; // 0x50
		internal string currencySymbol; // 0x58
		internal string ansiCurrencySymbol; // 0x60
		internal string nanSymbol; // 0x68
		internal string positiveInfinitySymbol; // 0x70
		internal string negativeInfinitySymbol; // 0x78
		internal string percentDecimalSeparator; // 0x80
		internal string percentGroupSeparator; // 0x88
		internal string percentSymbol; // 0x90
		internal string perMilleSymbol; // 0x98
		[OptionalField] // 0x0039C488-0x0039C4C0
		internal string[] nativeDigits; // 0xA0
		[OptionalField] // 0x0039C4C0-0x0039C4F8
		internal int m_dataItem; // 0xA8
		internal int numberDecimalDigits; // 0xAC
		internal int currencyDecimalDigits; // 0xB0
		internal int currencyPositivePattern; // 0xB4
		internal int currencyNegativePattern; // 0xB8
		internal int numberNegativePattern; // 0xBC
		internal int percentPositivePattern; // 0xC0
		internal int percentNegativePattern; // 0xC4
		internal int percentDecimalDigits; // 0xC8
		[OptionalField] // 0x0039C4F8-0x0039C530
		internal int digitSubstitution; // 0xCC
		internal bool isReadOnly; // 0xD0
		[OptionalField] // 0x0039C530-0x0039C568
		internal bool m_useUserOverride; // 0xD1
		[OptionalField] // 0x0039C568-0x0039C5A0
		internal bool m_isInvariant; // 0xD2
		[OptionalField] // 0x0039C5A0-0x0039C5D8
		internal bool validForParseAsNumber; // 0xD3
		[OptionalField] // 0x0039C5D8-0x0039C610
		internal bool validForParseAsCurrency; // 0xD4
		private const NumberStyles InvalidNumberStyles = NumberStyles.None; // Metadata: 0x00204A84
	
		// Properties
		public static NumberFormatInfo InvariantInfo { get; } // 0x0062A150-0x0062A200 
		public int CurrencyDecimalDigits { get; } // 0x0062A6C4-0x0062A6CC 
		public string CurrencyDecimalSeparator { get; } // 0x0062A6CC-0x0062A6D4 
		public bool IsReadOnly { get; } // 0x0062A6D4-0x0062A6DC 
		public int[] CurrencyGroupSizes { get; } // 0x0062A6DC-0x0062A7B4 
		public int[] NumberGroupSizes { get; } // 0x0062A7B4-0x0062A88C 
		public int[] PercentGroupSizes { get; } // 0x0062A88C-0x0062A964 
		public string CurrencyGroupSeparator { get; } // 0x0062A964-0x0062A96C 
		public string CurrencySymbol { get; } // 0x0062A96C-0x0062A974 
		public static NumberFormatInfo CurrentInfo { get; } // 0x0062A4C0-0x0062A604 
		public string NaNSymbol { get; } // 0x0062A974-0x0062A97C 
		public int CurrencyNegativePattern { get; } // 0x0062A97C-0x0062A984 
		public int NumberNegativePattern { get; } // 0x0062A984-0x0062A98C 
		public int PercentPositivePattern { get; } // 0x0062A98C-0x0062A994 
		public int PercentNegativePattern { get; } // 0x0062A994-0x0062A99C 
		public string NegativeInfinitySymbol { get; } // 0x0062A99C-0x0062A9A4 
		public string NegativeSign { get; } // 0x0062A9A4-0x0062A9AC 
		public int NumberDecimalDigits { get; } // 0x0062A9AC-0x0062A9B4 
		public string NumberDecimalSeparator { get; } // 0x0062A9B4-0x0062A9BC 
		public string NumberGroupSeparator { get; } // 0x0062A9BC-0x0062A9C4 
		public int CurrencyPositivePattern { get; } // 0x0062A9C4-0x0062A9CC 
		public string PositiveInfinitySymbol { get; } // 0x0062A9CC-0x0062A9D4 
		public string PositiveSign { get; } // 0x0062A9D4-0x0062A9DC 
		public int PercentDecimalDigits { get; } // 0x0062A9DC-0x0062A9E4 
		public string PercentDecimalSeparator { get; } // 0x0062A9E4-0x0062A9EC 
		public string PercentGroupSeparator { get; } // 0x0062A9EC-0x0062A9F4 
		public string PercentSymbol { get; } // 0x0062A9F4-0x0062A9FC 
		public string PerMilleSymbol { get; } // 0x0062A9FC-0x0062AA04 
	
		// Constructors
		public NumberFormatInfo(); // 0x00629B48-0x00629B50
		internal NumberFormatInfo(CultureData cultureData); // 0x00629B50-0x0062A0C0
	
		// Methods
		[OnSerializing] // 0x0039E910-0x0039E920
		private void OnSerializing(StreamingContext ctx); // 0x0062A0C0-0x0062A148
		[OnDeserializing] // 0x0039E920-0x0039E930
		private void OnDeserializing(StreamingContext ctx); // 0x0062A148-0x0062A14C
		[OnDeserialized] // 0x0039E930-0x0039E940
		private void OnDeserialized(StreamingContext ctx); // 0x0062A14C-0x0062A150
		public static NumberFormatInfo GetInstance(IFormatProvider formatProvider); // 0x0062A31C-0x0062A4C0
		public object Clone(); // 0x0062A604-0x0062A6C4
		public object GetFormat(Type formatType); // 0x0062AA04-0x0062AAA0
		public static NumberFormatInfo ReadOnly(NumberFormatInfo nfi); // 0x0062A200-0x0062A31C
		internal static void ValidateParseStyleInteger(NumberStyles style); // 0x0062AAA0-0x0062AB9C
		internal static void ValidateParseStyleFloatingPoint(NumberStyles style); // 0x0062AB9C-0x0062AC8C
	}

	[Serializable]
	[ComVisible] // 0x00396908-0x00396944
	[Flags] // 0x00396908-0x00396944
	public enum NumberStyles // TypeDefIndex: 674
	{
		None = 0,
		AllowLeadingWhite = 1,
		AllowTrailingWhite = 2,
		AllowLeadingSign = 4,
		Integer = 7,
		AllowTrailingSign = 8,
		AllowParentheses = 16,
		AllowDecimalPoint = 32,
		AllowThousands = 64,
		Number = 111,
		AllowExponent = 128,
		Float = 167,
		AllowCurrencySymbol = 256,
		Currency = 383,
		Any = 511,
		AllowHexSpecifier = 512,
		HexNumber = 515
	}

	[Serializable]
	public sealed class SortVersion : IEquatable<SortVersion> // TypeDefIndex: 675
	{
		// Fields
		private int m_NlsVersion; // 0x10
		private Guid m_SortId; // 0x14
	
		// Methods
		public override bool Equals(object obj); // 0x0062BF44-0x0062BFD8
		public bool Equals(SortVersion other); // 0x0062BFF4-0x0062C0C0
		public override int GetHashCode(); // 0x0062C18C-0x0062C1C0
		public static bool operator ==(SortVersion left, SortVersion right); // 0x0062C0C0-0x0062C0E0
		public static bool operator !=(SortVersion left, SortVersion right); // 0x0062BFD8-0x0062BFF4
	}

	[Serializable]
	[ComVisible] // 0x00396944-0x00396958
	public class TaiwanCalendar : Calendar // TypeDefIndex: 676
	{
		// Fields
		internal static EraInfo[] taiwanEraInfo; // 0x00
		internal static Calendar s_defaultInstance; // 0x08
		internal GregorianCalendarHelper helper; // 0x20
		internal static readonly DateTime calendarMinValue; // 0x10
	
		// Properties
		[ComVisible] // 0x0039FC78-0x0039FC8C
		public override DateTime MinSupportedDateTime { get; } // 0x0062C440-0x0062C4A8 
		[ComVisible] // 0x0039FC8C-0x0039FCA0
		public override DateTime MaxSupportedDateTime { get; } // 0x0062C4A8-0x0062C510 
		internal override int ID { get; } // 0x0062C510-0x0062C518 
		public override int[] Eras { get; } // 0x0062C7A0-0x0062C7D0 
		public override int TwoDigitYearMax { get; } // 0x0062C7D0-0x0062C818 
	
		// Constructors
		public TaiwanCalendar(); // 0x0062C290-0x0062C440
		static TaiwanCalendar(); // 0x0062C9B4-0x0062CAE4
	
		// Methods
		internal static Calendar GetDefaultInstance(); // 0x0062C1C0-0x0062C290
		public override int GetDaysInMonth(int year, int month, int era); // 0x0062C518-0x0062C568
		public override int GetDayOfMonth(DateTime time); // 0x0062C568-0x0062C5A0
		public override DayOfWeek GetDayOfWeek(DateTime time); // 0x0062C5A0-0x0062C5D8
		public override int GetMonthsInYear(int year, int era); // 0x0062C5D8-0x0062C620
		public override int GetEra(DateTime time); // 0x0062C620-0x0062C658
		public override int GetMonth(DateTime time); // 0x0062C658-0x0062C690
		public override int GetYear(DateTime time); // 0x0062C690-0x0062C6C8
		public override bool IsLeapYear(int year, int era); // 0x0062C6C8-0x0062C710
		public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era); // 0x0062C710-0x0062C7A0
		public override int ToFourDigitYear(int year); // 0x0062C818-0x0062C9B4
	}

	[Serializable]
	[ComVisible] // 0x00396958-0x0039696C
	public class TextInfo : ICloneable, IDeserializationCallback // TypeDefIndex: 677
	{
		// Fields
		[OptionalField] // 0x0039C610-0x0039C648
		private bool m_isReadOnly; // 0x10
		[OptionalField] // 0x0039C648-0x0039C680
		private string m_cultureName; // 0x18
		[NonSerialized]
		private CultureData m_cultureData; // 0x20
		[NonSerialized]
		private string m_textInfoName; // 0x28
		[NonSerialized]
		private bool? m_IsAsciiCasingSameAsInvariant; // 0x30
		internal static TextInfo s_Invariant; // 0x00
		[OptionalField] // 0x0039C680-0x0039C6B8
		private string customCultureName; // 0x38
		[OptionalField] // 0x0039C6B8-0x0039C6F0
		internal bool m_useUserOverride; // 0x40
		[OptionalField] // 0x0039C6F0-0x0039C728
		internal int m_win32LangID; // 0x44
	
		// Properties
		internal static TextInfo Invariant { get; } // 0x0062CAE4-0x0062CB8C 
		[ComVisible] // 0x0039FCA0-0x0039FCB4
		public string CultureName { get; } // 0x0062D384-0x0062D38C 
		private bool IsAsciiCasingSameAsInvariant { get; } // 0x0062D560-0x0062D670 
	
		// Constructors
		internal TextInfo(CultureData cultureData); // 0x0062CB8C-0x0062CBF4
	
		// Methods
		[OnDeserializing] // 0x0039E940-0x0039E950
		private void OnDeserializing(StreamingContext ctx); // 0x0062CBF4-0x0062CBFC
		private void OnDeserialized(); // 0x0062CBFC-0x0062CD24
		[OnDeserialized] // 0x0039E950-0x0039E960
		private void OnDeserialized(StreamingContext ctx); // 0x0062CD24-0x0062CD28
		[OnSerializing] // 0x0039E960-0x0039E970
		private void OnSerializing(StreamingContext ctx); // 0x0062CD28-0x0062CDC0
		internal static int GetHashCodeOrdinalIgnoreCase(string s); // 0x0062CDC0-0x0062CDCC
		internal static int GetHashCodeOrdinalIgnoreCase(string s, bool forceRandomizedHashing, long additionalEntropy); // 0x0062CDCC-0x0062CE04
		internal static int CompareOrdinalIgnoreCase(string str1, string str2); // 0x0062CF10-0x0062CF80
		internal static int CompareOrdinalIgnoreCaseEx(string strA, int indexA, string strB, int indexB, int lengthA, int lengthB); // 0x0062D158-0x0062D15C
		internal static int IndexOfStringOrdinalIgnoreCase(string source, string value, int startIndex, int count); // 0x0062D15C-0x0062D270
		internal static int LastIndexOfStringOrdinalIgnoreCase(string source, string value, int startIndex, int count); // 0x0062D270-0x0062D384
		[ComVisible] // 0x0039E970-0x0039E984
		public virtual object Clone(); // 0x0062D38C-0x0062D4DC
		internal void SetReadOnlyState(bool readOnly); // 0x0062D4DC-0x0062D4E8
		public virtual char ToLower(char c); // 0x0062D4E8-0x0062D550
		public virtual string ToLower(string str); // 0x0062DBD8-0x0062DC74
		private static char ToLowerAsciiInvariant(char c); // 0x0062D670-0x0062D68C
		public virtual char ToUpper(char c); // 0x0062DD98-0x0062DE00
		public virtual string ToUpper(string str); // 0x0062E388-0x0062E424
		private static char ToUpperAsciiInvariant(char c); // 0x0062DE00-0x0062DE1C
		private static bool IsAscii(char c); // 0x0062D550-0x0062D560
		public override bool Equals(object obj); // 0x0062E548-0x0062E610
		public override int GetHashCode(); // 0x0062E610-0x0062E644
		public override string ToString(); // 0x0062E644-0x0062E6B8
		void IDeserializationCallback.OnDeserialization(object sender); // 0x0062E6B8-0x0062E6BC
		internal int GetCaseInsensitiveHashCode(string str); // 0x0062E6BC-0x0062E6C4
		internal int GetCaseInsensitiveHashCode(string str, bool forceRandomizedHashing, long additionalEntropy); // 0x0062CE04-0x0062CF10
		private int GetInvariantCaseInsensitiveHashCode(string str); // 0x0062E6C4-0x0062E804
		private string ToUpperInternal(string str); // 0x0062E424-0x0062E548
		private string ToLowerInternal(string str); // 0x0062DC74-0x0062DD98
		private char ToUpperInternal(char c); // 0x0062DE1C-0x0062E388
		private char ToLowerInternal(char c); // 0x0062D68C-0x0062DBD8
		private static int InternalCompareStringOrdinalIgnoreCase(string strA, int indexA, string strB, int indexB, int lenA, int lenB); // 0x0062CF80-0x0062D158
	}

	internal static class TimeSpanFormat // TypeDefIndex: 678
	{
		// Fields
		internal static readonly FormatLiterals PositiveInvariantFormatLiterals; // 0x00
		internal static readonly FormatLiterals NegativeInvariantFormatLiterals; // 0x28
	
		// Nested types
		internal enum Pattern // TypeDefIndex: 679
		{
			None = 0,
			Minimum = 1,
			Full = 2
		}
	
		internal struct FormatLiterals // TypeDefIndex: 680
		{
			// Fields
			internal string AppCompatLiteral; // 0x00
			internal int dd; // 0x08
			internal int hh; // 0x0C
			internal int mm; // 0x10
			internal int ss; // 0x14
			internal int ff; // 0x18
			private string[] literals; // 0x20
	
			// Properties
			internal string Start { get; } // 0x00630768-0x00630770 
			internal string DayHourSep { get; } // 0x00630770-0x00630778 
			internal string HourMinuteSep { get; } // 0x00630778-0x00630780 
			internal string MinuteSecondSep { get; } // 0x00630780-0x00630788 
			internal string SecondFractionSep { get; } // 0x00630788-0x00630790 
			internal string End { get; } // 0x00630790-0x00630798 
	
			// Methods
			internal static FormatLiterals InitInvariant(bool isNegative); // 0x00630478-0x00630768
			internal void Init(string format, bool useInvariantFieldLengths); // 0x00630798-0x006307A4
		}
	
		// Constructors
		static TimeSpanFormat(); // 0x006303D4-0x00630478
	
		// Methods
		private static string IntToString(int n, int digits); // 0x0062EBDC-0x0062EBF8
		internal static string Format(TimeSpan value, string format, IFormatProvider formatProvider); // 0x0062EBF8-0x0062EE84
		private static string FormatStandard(TimeSpan value, bool isInvariant, string format, Pattern pattern); // 0x0062EE84-0x0062F508
		internal static string FormatCustomized(TimeSpan value, string format, DateTimeFormatInfo dtfi); // 0x0062F508-0x006303D4
	}

	[Serializable]
	[ComVisible] // 0x0039696C-0x00396980
	public enum UnicodeCategory // TypeDefIndex: 681
	{
		UppercaseLetter = 0,
		LowercaseLetter = 1,
		TitlecaseLetter = 2,
		ModifierLetter = 3,
		OtherLetter = 4,
		NonSpacingMark = 5,
		SpacingCombiningMark = 6,
		EnclosingMark = 7,
		DecimalDigitNumber = 8,
		LetterNumber = 9,
		OtherNumber = 10,
		SpaceSeparator = 11,
		LineSeparator = 12,
		ParagraphSeparator = 13,
		Control = 14,
		Format = 15,
		Surrogate = 16,
		PrivateUse = 17,
		ConnectorPunctuation = 18,
		DashPunctuation = 19,
		OpenPunctuation = 20,
		ClosePunctuation = 21,
		InitialQuotePunctuation = 22,
		FinalQuotePunctuation = 23,
		OtherPunctuation = 24,
		MathSymbol = 25,
		CurrencySymbol = 26,
		ModifierSymbol = 27,
		OtherSymbol = 28,
		OtherNotAssigned = 29
	}

	[Serializable]
	[ComVisible] // 0x00396980-0x00396994
	public class SortKey // TypeDefIndex: 682
	{
		// Fields
		private readonly string source; // 0x10
		private readonly byte[] key; // 0x18
		private readonly CompareOptions options; // 0x20
		private readonly int lcid; // 0x24
	
		// Properties
		public virtual string OriginalString { get; } // 0x0062BB04-0x0062BB0C 
		public virtual byte[] KeyData { get; } // 0x0062BB0C-0x0062BB14 
	
		// Constructors
		internal SortKey(int lcid, string source, CompareOptions opt); // 0x0062BA78-0x0062BAB8
		internal SortKey(int lcid, string source, byte[] buffer, CompareOptions opt, int lv1Length, int lv2Length, int lv3Length, int kanaSmallLength, int markTypeLength, int katakanaLength, int kanaWidthLength, int identLength); // 0x0062BAB8-0x0062BB04
	
		// Methods
		public static int Compare(SortKey sortkey1, SortKey sortkey2); // 0x0062B848-0x0062BA78
		public override bool Equals(object value); // 0x0062BB14-0x0062BBD4
		public override int GetHashCode(); // 0x0062BBD4-0x0062BCBC
		public override string ToString(); // 0x0062BCBC-0x0062BF44
	}

	internal class CultureData // TypeDefIndex: 683
	{
		// Fields
		private string sAM1159; // 0x10
		private string sPM2359; // 0x18
		private string sTimeSeparator; // 0x20
		private string[] saLongTimes; // 0x28
		private string[] saShortTimes; // 0x30
		private int iFirstDayOfWeek; // 0x38
		private int iFirstWeekOfYear; // 0x3C
		private int[] waCalendars; // 0x40
		private CalendarData[] calendars; // 0x48
		private string sISO639Language; // 0x50
		private readonly string sRealName; // 0x58
		private bool bUseOverrides; // 0x60
		private int calendarId; // 0x64
		private int numberIndex; // 0x68
		private int iDefaultAnsiCodePage; // 0x6C
		private int iDefaultOemCodePage; // 0x70
		private int iDefaultMacCodePage; // 0x74
		private int iDefaultEbcdicCodePage; // 0x78
		private bool isRightToLeft; // 0x7C
		private string sListSeparator; // 0x80
		private static CultureData s_Invariant; // 0x00
	
		// Properties
		public static CultureData Invariant { get; } // 0x0085A060-0x0085A48C 
		internal string[] LongTimes { get; } // 0x0085A8D0-0x0085A8F4 
		internal string[] ShortTimes { get; } // 0x0085A8F4-0x0085A918 
		internal string SISO639LANGNAME { get; } // 0x0085A918-0x0085A920 
		internal int IFIRSTDAYOFWEEK { get; } // 0x0085A920-0x0085A928 
		internal int IFIRSTWEEKOFYEAR { get; } // 0x0085A928-0x0085A930 
		internal string SAM1159 { get; } // 0x0085A930-0x0085A938 
		internal string SPM2359 { get; } // 0x0085A938-0x0085A940 
		internal string TimeSeparator { get; } // 0x0085A940-0x0085A948 
		internal int[] CalendarIds { get; } // 0x0085A948-0x0085AAF8 
		internal bool IsInvariantCulture { get; } // 0x0085AAF8-0x0085AB04 
		internal string CultureName { get; } // 0x0085AB04-0x0085AB0C 
		internal string SCOMPAREINFO { get; } // 0x0085AB0C-0x0085AB54 
		internal string STEXTINFO { get; } // 0x0085AB54-0x0085AB5C 
		internal int ILANGUAGE { get; } // 0x0085AB5C-0x0085AB64 
		internal bool UseUserOverride { get; } // 0x0085AB64-0x0085AB6C 
	
		// Constructors
		private CultureData(string name); // 0x0085A034-0x0085A060
	
		// Methods
		public static CultureData GetCultureData(string cultureName, bool useUserOverride); // 0x0085A48C-0x0085A588
		public static CultureData GetCultureData(string cultureName, bool useUserOverride, int datetimeIndex, int calendarId, int numberIndex, string iso2lang, int ansiCodePage, int oemCodePage, int macCodePage, int ebcdicCodePage, bool rightToLeft, string listSeparator); // 0x0085A594-0x0085A77C
		internal static CultureData GetCultureData(int culture, bool bUseUserOverride); // 0x0085A780-0x0085A788
		private void fill_culture_data(int datetimeIndex); // 0x0085A77C-0x0085A780
		public CalendarData GetCalendar(int calendarId); // 0x0085A788-0x0085A8D0
		internal string[] EraNames(int calendarId); // 0x0085AB6C-0x0085AB98
		internal string[] AbbrevEraNames(int calendarId); // 0x0085AB98-0x0085ABC4
		internal string[] AbbreviatedEnglishEraNames(int calendarId); // 0x0085ABC4-0x0085ABF0
		internal string[] ShortDates(int calendarId); // 0x0085ABF0-0x0085AC1C
		internal string[] LongDates(int calendarId); // 0x0085AC1C-0x0085AC48
		internal string[] YearMonths(int calendarId); // 0x0085AC48-0x0085AC74
		internal string[] DayNames(int calendarId); // 0x0085AC74-0x0085ACA0
		internal string[] AbbreviatedDayNames(int calendarId); // 0x0085ACA0-0x0085ACCC
		internal string[] MonthNames(int calendarId); // 0x0085ACCC-0x0085ACF8
		internal string[] GenitiveMonthNames(int calendarId); // 0x0085ACF8-0x0085AD24
		internal string[] AbbreviatedMonthNames(int calendarId); // 0x0085AD24-0x0085AD50
		internal string[] AbbreviatedGenitiveMonthNames(int calendarId); // 0x0085AD50-0x0085AD7C
		internal string[] LeapYearMonthNames(int calendarId); // 0x0085AD7C-0x0085ADA8
		internal string MonthDay(int calendarId); // 0x0085ADA8-0x0085ADD4
		internal string DateSeparator(int calendarId); // 0x0085ADD4-0x0085AE18
		private static string GetDateSeparator(string format); // 0x0085AE18-0x0085AE68
		private static string GetSeparator(string format, string timeParts); // 0x0085AE68-0x0085AFAC
		private static int IndexOfTimePart(string format, int startIndex, string timeParts); // 0x0085AFAC-0x0085B0EC
		private static string UnescapeNlsString(string str, int start, int end); // 0x0085B0EC-0x0085B328
		internal static string[] ReescapeWin32Strings(string[] array); // 0x0085B328-0x0085B32C
		internal static string ReescapeWin32String(string str); // 0x0085B32C-0x0085B330
		internal void GetNFIValues(NumberFormatInfo nfi); // 0x0085B330-0x0085B408
		private static void fill_number_data(NumberFormatInfo nfi, int numberIndex); // 0x0085B408-0x0085B458
	}

	[Serializable]
	internal class CodePageDataItem // TypeDefIndex: 684
	{
		// Fields
		internal int m_dataIndex; // 0x10
		internal int m_uiFamilyCodePage; // 0x14
		internal string m_webName; // 0x18
		internal string m_headerName; // 0x20
		internal uint m_flags; // 0x28
		private static readonly char[] sep; // 0x00
	
		// Properties
		public string WebName { get; } // 0x0075E2B8-0x0075E398 
		public string HeaderName { get; } // 0x0075E398-0x0075E478 
	
		// Constructors
		internal CodePageDataItem(int dataIndex); // 0x0075E0B8-0x0075E1C0
		static CodePageDataItem(); // 0x0075E478-0x0075E508
	
		// Methods
		internal static string CreateString(string pStrings, uint index); // 0x0075E1C0-0x0075E2B8
	}

	internal static class EncodingTable // TypeDefIndex: 685
	{
		// Fields
		internal static InternalEncodingDataItem[] encodingDataPtr; // 0x00
		internal static InternalCodePageDataItem[] codePageDataPtr; // 0x08
		private static int lastEncodingItem; // 0x10
		private static Hashtable hashByName; // 0x18
		private static Hashtable hashByCodePage; // 0x20
	
		// Constructors
		static EncodingTable(); // 0x008698A8-0x00871028
	
		// Methods
		private static int GetNumEncodingItems(); // 0x00869810-0x00869888
		private static InternalEncodingDataItem ENC(string name, ushort cp); // 0x00869888-0x00869890
		private static InternalCodePageDataItem MapCodePageDataItem(ushort cp, ushort fcp, string names, uint flags); // 0x00869890-0x008698A8
		private static int internalGetCodePageFromName(string name); // 0x00871028-0x00871330
		internal static int GetCodePageFromName(string name); // 0x00871330-0x00871508
		internal static CodePageDataItem GetCodePageDataItem(int codepage); // 0x00871508-0x00871748
	}

	internal struct InternalEncodingDataItem // TypeDefIndex: 686
	{
		// Fields
		internal string webName; // 0x00
		internal ushort codePage; // 0x08
	}

	internal struct InternalCodePageDataItem // TypeDefIndex: 687
	{
		// Fields
		internal ushort codePage; // 0x00
		internal ushort uiFamilyCodePage; // 0x02
		internal uint flags; // 0x04
		internal string Names; // 0x08
	}

	internal static class TextInfoToUpperData // TypeDefIndex: 688
	{
		// Fields
		public static readonly char[] range_00e0_0586; // 0x00
		public static readonly char[] range_1e01_1ff3; // 0x08
		public static readonly char[] range_2170_2184; // 0x10
		public static readonly char[] range_24d0_24e9; // 0x18
		public static readonly char[] range_2c30_2ce3; // 0x20
		public static readonly char[] range_2d00_2d25; // 0x28
		public static readonly char[] range_a641_a697; // 0x30
		public static readonly char[] range_a723_a78c; // 0x38
	
		// Constructors
		static TextInfoToUpperData(); // 0x0062EA08-0x0062EBDC
	}

	internal static class TextInfoToLowerData // TypeDefIndex: 689
	{
		// Fields
		public static readonly char[] range_00c0_0556; // 0x00
		public static readonly char[] range_10a0_10c5; // 0x08
		public static readonly char[] range_1e00_1ffc; // 0x10
		public static readonly char[] range_2160_216f; // 0x18
		public static readonly char[] range_24b6_24cf; // 0x20
		public static readonly char[] range_2c00_2c2e; // 0x28
		public static readonly char[] range_2c60_2ce2; // 0x30
		public static readonly char[] range_a640_a696; // 0x38
		public static readonly char[] range_a722_a78b; // 0x40
	
		// Constructors
		static TextInfoToLowerData(); // 0x0062E804-0x0062EA08
	}

	[Serializable]
	[ComVisible] // 0x00396994-0x003969A8
	public class CultureInfo : ICloneable, IFormatProvider // TypeDefIndex: 690
	{
		// Fields
		private static CultureInfo invariant_culture_info; // 0x00
		private static object shared_table_lock; // 0x08
		private static CultureInfo default_current_culture; // 0x10
		private bool m_isReadOnly; // 0x10
		private int cultureID; // 0x14
		[NonSerialized]
		private int parent_lcid; // 0x18
		[NonSerialized]
		private int datetime_index; // 0x1C
		[NonSerialized]
		private int number_index; // 0x20
		[NonSerialized]
		private int default_calendar_type; // 0x24
		private bool m_useUserOverride; // 0x28
		internal NumberFormatInfo numInfo; // 0x30
		internal DateTimeFormatInfo dateTimeInfo; // 0x38
		private TextInfo textInfo; // 0x40
		internal string m_name; // 0x48
		[NonSerialized]
		private string englishname; // 0x50
		[NonSerialized]
		private string nativename; // 0x58
		[NonSerialized]
		private string iso3lang; // 0x60
		[NonSerialized]
		private string iso2lang; // 0x68
		[NonSerialized]
		private string win3lang; // 0x70
		[NonSerialized]
		private string territory; // 0x78
		[NonSerialized]
		private string[] native_calendar_names; // 0x80
		private CompareInfo compareInfo; // 0x88
		[NonSerialized]
		private readonly unsafe void* textinfo_data; // 0x90
		private int m_dataItem; // 0x98
		private Calendar calendar; // 0xA0
		[NonSerialized]
		private CultureInfo parent_culture; // 0xA8
		[NonSerialized]
		private bool constructed; // 0xB0
		[NonSerialized]
		internal byte[] cached_serialized_form; // 0xB8
		[NonSerialized]
		internal CultureData m_cultureData; // 0xC0
		[NonSerialized]
		internal bool m_isInherited; // 0xC8
		internal const int InvariantCultureId = 127; // Metadata: 0x00204B50
		private const int CalendarTypeBits = 8; // Metadata: 0x00204B54
		private const string MSG_READONLY = "This instance is read only"; // Metadata: 0x00204B58
		private static CultureInfo s_DefaultThreadCurrentUICulture; // 0x18
		private static CultureInfo s_DefaultThreadCurrentCulture; // 0x20
		private static Dictionary<int, CultureInfo> shared_by_number; // 0x28
		private static Dictionary<string, CultureInfo> shared_by_name; // 0x30
		internal static readonly bool IsTaiwanSku; // 0x38
	
		// Properties
		public static CultureInfo InvariantCulture { get; } // 0x0085B458-0x0085B4C8 
		public static CultureInfo CurrentCulture { get; } // 0x0085B4C8-0x0085B4FC 
		public static CultureInfo CurrentUICulture { get; } // 0x0085B4FC-0x0085B530 
		internal string Territory { get; } // 0x0085BA98-0x0085BAA0 
		public virtual int LCID { get; } // 0x0085BAA0-0x0085BAA8 
		public virtual string Name { get; } // 0x0085BAA8-0x0085BAB0 
		public virtual Calendar Calendar { get; } // 0x0085BAB0-0x0085BB44 
		public virtual CultureInfo Parent { get; } // 0x0085BDB4-0x0085C00C 
		public virtual TextInfo TextInfo { get; } // 0x0085C024-0x0085C124 
		public virtual CompareInfo CompareInfo { get; } // 0x0085C6A0-0x0085C7D8 
		public virtual bool IsNeutralCulture { get; } // 0x0085C7D8-0x0085C82C 
		public virtual NumberFormatInfo NumberFormat { get; set; } // 0x0085C830-0x0085C8D4 0x0085C8D4-0x0085C9C0
		public virtual DateTimeFormatInfo DateTimeFormat { get; set; } // 0x0085C9C0-0x0085CABC 0x0085CB0C-0x0085CBF8
		public virtual string EnglishName { get; } // 0x0085CBF8-0x0085CC34 
		public bool IsReadOnly { get; } // 0x0085CC34-0x0085CC3C 
		internal int CalendarType { get; } // 0x0085D140-0x0085D1E4 
		public static CultureInfo DefaultThreadCurrentCulture { get; } // 0x0085FD5C-0x0085FDCC 
		public static CultureInfo DefaultThreadCurrentUICulture { get; } // 0x0085FDCC-0x0085FE3C 
		internal string SortName { get; } // 0x0085FE3C-0x0085FE44 
		internal static CultureInfo UserDefaultUICulture { get; } // 0x0085FE44-0x0085FEA0 
		internal static CultureInfo UserDefaultCulture { get; } // 0x0085FEA0-0x0085FEFC 
	
		// Nested types
		private struct Data // TypeDefIndex: 691
		{
			// Fields
			public int ansi; // 0x00
			public int ebcdic; // 0x04
			public int mac; // 0x08
			public int oem; // 0x0C
			public bool right_to_left; // 0x10
			public byte list_sep; // 0x11
		}
	
		// Constructors
		public CultureInfo(int culture); // 0x0085C018-0x0085C024
		public CultureInfo(int culture, bool useUserOverride); // 0x0085CEA8-0x0085CEB4
		private CultureInfo(int culture, bool useUserOverride, bool read_only); // 0x0085CEB4-0x0085D12C
		public CultureInfo(string name); // 0x0085C00C-0x0085C018
		public CultureInfo(string name, bool useUserOverride); // 0x0085A588-0x0085A594
		private CultureInfo(string name, bool useUserOverride, bool read_only); // 0x0085D1E4-0x0085D434
		private CultureInfo(); // 0x0085D4D0-0x0085D4FC
		static CultureInfo(); // 0x008600C8-0x008601D4
	
		// Methods
		internal static CultureInfo ConstructCurrentCulture(); // 0x0085B530-0x0085B6D0
		internal static CultureInfo ConstructCurrentUICulture(); // 0x0085BA3C-0x0085BA98
		public virtual object Clone(); // 0x0085C1B4-0x0085C428
		public override bool Equals(object value); // 0x0085C5B0-0x0085C674
		private Data GetTextInfoData(); // 0x0085C674-0x0085C68C
		public override int GetHashCode(); // 0x0085C68C-0x0085C698
		public override string ToString(); // 0x0085C698-0x0085C6A0
		private void CheckNeutral(); // 0x0085C82C-0x0085C830
		public virtual object GetFormat(Type formatType); // 0x0085CC3C-0x0085CD44
		private void Construct(); // 0x0085BB44-0x0085BB70
		private bool construct_internal_locale_from_lcid(int lcid); // 0x0085CD44-0x0085CD48
		private bool construct_internal_locale_from_name(string name); // 0x0085CD48-0x0085CD4C
		private static string get_current_locale_name(); // 0x0085B6D0-0x0085B6D4
		private void ConstructInvariant(bool read_only); // 0x0085CD4C-0x0085CEA8
		private TextInfo CreateTextInfo(bool readOnly); // 0x0085C124-0x0085C1B4
		private static void insert_into_shared_tables(CultureInfo c); // 0x0085D4FC-0x0085D678
		public static CultureInfo GetCultureInfo(int culture); // 0x0085D678-0x0085D89C
		public static CultureInfo GetCultureInfo(string name); // 0x0085D89C-0x0085DAB0
		internal static CultureInfo CreateCulture(string name, bool reference); // 0x0085DAB0-0x0085DB44
		public static CultureInfo CreateSpecificCulture(string name); // 0x0085B6D4-0x0085BA3C
		private static CultureInfo CreateSpecificCultureFromNeutral(string name); // 0x0085DB44-0x0085FBEC
		private static Calendar CreateCalendar(int calendarType); // 0x0085BB70-0x0085BDB4
		private static Exception CreateNotFoundException(string name); // 0x0085D434-0x0085D4D0
		internal static void CheckDomainSafetyObject(object obj, object container); // 0x0085FEFC-0x008600C8
	}

	public sealed class IdnMapping // TypeDefIndex: 692
	{
		// Fields
		private bool allow_unassigned; // 0x10
		private bool use_std3; // 0x11
		private Punycode puny; // 0x18
	
		// Constructors
		public IdnMapping(); // 0x00875910-0x00875978
	
		// Methods
		public override bool Equals(object obj); // 0x00875978-0x00875A38
		public override int GetHashCode(); // 0x00875A38-0x00875A48
		public string GetAscii(string unicode); // 0x00875A48-0x00875AF8
		public string GetAscii(string unicode, int index, int count); // 0x00875AF8-0x00875C18
		private string Convert(string input, int index, int count, bool toAscii); // 0x00875C18-0x00875ED8
		private string ToAscii(string s, int offset); // 0x00875ED8-0x00876174
		private void VerifyLength(string s, int offset); // 0x00876784-0x008768A8
		private string NamePrep(string s, int offset); // 0x0087638C-0x008764FC
		private void VerifyProhibitedCharacters(string s, int offset); // 0x008768A8-0x00876B24
		private void VerifyStd3AsciiRules(string s, int offset); // 0x008764FC-0x00876784
		public string GetUnicode(string ascii); // 0x00876B24-0x00876BD4
		public string GetUnicode(string ascii, int index, int count); // 0x00876BD4-0x00876E2C
		private string ToUnicode(string s, int offset); // 0x00876174-0x0087638C
	}

	internal class Bootstring // TypeDefIndex: 693
	{
		// Fields
		private readonly char delimiter; // 0x10
		private readonly int base_num; // 0x14
		private readonly int tmin; // 0x18
		private readonly int tmax; // 0x1C
		private readonly int skew; // 0x20
		private readonly int damp; // 0x24
		private readonly int initial_bias; // 0x28
		private readonly int initial_n; // 0x2C
	
		// Constructors
		public Bootstring(char delimiter, int baseNum, int tmin, int tmax, int skew, int damp, int initialBias, int initialN); // 0x0075A5F8-0x0075A670
	
		// Methods
		public string Encode(string s, int offset); // 0x0075A670-0x0075AAA4
		private char EncodeDigit(int d); // 0x0075AAA4-0x0075AABC
		private int DecodeDigit(char c); // 0x0075AB34-0x0075AB74
		private int Adapt(int delta, int numPoints, bool firstTime); // 0x0075AABC-0x0075AB34
		public string Decode(string s, int offset); // 0x0075AB74-0x0075AED8
	}

	internal class Punycode : Bootstring // TypeDefIndex: 694
	{
		// Constructors
		public Punycode(); // 0x0062AC8C-0x0062AE80
	}

	[Serializable]
	[ComVisible] // 0x003969A8-0x003969BC
	public class RegionInfo // TypeDefIndex: 695
	{
		// Fields
		private static RegionInfo currentRegion; // 0x00
		private int regionId; // 0x10
		private string iso2Name; // 0x18
		private string iso3Name; // 0x20
		private string win3Name; // 0x28
		private string englishName; // 0x30
		private string nativeName; // 0x38
		private string currencySymbol; // 0x40
		private string isoCurrencySymbol; // 0x48
		private string currencyEnglishName; // 0x50
		private string currencyNativeName; // 0x58
	
		// Properties
		public static RegionInfo CurrentRegion { get; } // 0x0062AE80-0x0062AF50 
		[ComVisible] // 0x0039FCB4-0x0039FCC8
		public virtual string CurrencyEnglishName { get; } // 0x0062B430-0x0062B438 
		public virtual string CurrencySymbol { get; } // 0x0062B438-0x0062B440 
		[MonoTODO] // 0x0039FCC8-0x0039FD00
		public virtual string DisplayName { get; } // 0x0062B440-0x0062B448 
		public virtual string EnglishName { get; } // 0x0062B448-0x0062B450 
		[ComVisible] // 0x0039FD00-0x0039FD14
		public virtual int GeoId { get; } // 0x0062B450-0x0062B458 
		public virtual bool IsMetric { get; } // 0x0062B458-0x0062B4E0 
		public virtual string ISOCurrencySymbol { get; } // 0x0062B4E0-0x0062B4E8 
		[ComVisible] // 0x0039FD14-0x0039FD28
		public virtual string NativeName { get; } // 0x0062B4E8-0x0062B4F0 
		[ComVisible] // 0x0039FD28-0x0039FD3C
		public virtual string CurrencyNativeName { get; } // 0x0062B4F0-0x0062B4F8 
		public virtual string Name { get; } // 0x0062B4F8-0x0062B500 
		public virtual string ThreeLetterISORegionName { get; } // 0x0062B500-0x0062B508 
		public virtual string ThreeLetterWindowsRegionName { get; } // 0x0062B508-0x0062B510 
		public virtual string TwoLetterISORegionName { get; } // 0x0062B510-0x0062B518 
	
		// Constructors
		public RegionInfo(int culture); // 0x0062B0D4-0x0062B1EC
		public RegionInfo(string name); // 0x0062B2E4-0x0062B42C
		private RegionInfo(CultureInfo ci); // 0x0062AF50-0x0062B0D4
	
		// Methods
		private bool GetByTerritory(CultureInfo ci); // 0x0062B1EC-0x0062B2E4
		private bool construct_internal_region_from_name(string name); // 0x0062B42C-0x0062B430
		public override bool Equals(object value); // 0x0062B518-0x0062B5F0
		public override int GetHashCode(); // 0x0062B5F0-0x0062B62C
		public override string ToString(); // 0x0062B62C-0x0062B638
		internal static void ClearCachedData(); // 0x0062B638-0x0062B848
	}
}

namespace System.Diagnostics
{
	[Serializable]
	[AttributeUsage] // 0x003969BC-0x00396A10
	[ComVisible] // 0x003969BC-0x00396A10
	public sealed class ConditionalAttribute : Attribute // TypeDefIndex: 696
	{
		// Fields
		private string m_conditionString; // 0x10
	
		// Constructors
		public ConditionalAttribute(string conditionString); // 0x0074EE64-0x0074EE90
	}

	[Serializable]
	[AttributeUsage] // 0x00396A10-0x00396A64
	[ComVisible] // 0x00396A10-0x00396A64
	public sealed class DebuggerStepThroughAttribute : Attribute // TypeDefIndex: 697
	{
		// Constructors
		public DebuggerStepThroughAttribute(); // 0x0074F0A8-0x0074F0B0
	}

	[Serializable]
	[AttributeUsage] // 0x00396A64-0x00396AB8
	[ComVisible] // 0x00396A64-0x00396AB8
	public sealed class DebuggerHiddenAttribute : Attribute // TypeDefIndex: 698
	{
		// Constructors
		public DebuggerHiddenAttribute(); // 0x0074F098-0x0074F0A0
	}

	[Serializable]
	[AttributeUsage] // 0x00396AB8-0x00396B0C
	[ComVisible] // 0x00396AB8-0x00396B0C
	public sealed class DebuggerNonUserCodeAttribute : Attribute // TypeDefIndex: 699
	{
		// Constructors
		public DebuggerNonUserCodeAttribute(); // 0x0074F0A0-0x0074F0A8
	}

	[AttributeUsage] // 0x00396B0C-0x00396B60
	[ComVisible] // 0x00396B0C-0x00396B60
	public sealed class DebuggableAttribute : Attribute // TypeDefIndex: 700
	{
		// Fields
		private DebuggingModes m_debuggingModes; // 0x10
	
		// Nested types
		[ComVisible] // 0x00396B60-0x00396B9C
		[Flags] // 0x00396B60-0x00396B9C
		public enum DebuggingModes // TypeDefIndex: 701
		{
			None = 0,
			Default = 1,
			IgnoreSymbolStoreSequencePoints = 2,
			EnableEditAndContinue = 4,
			DisableOptimizations = 256
		}
	
		// Constructors
		public DebuggableAttribute(DebuggingModes modes); // 0x0074EE90-0x0074EEBC
	}

	[ComVisible] // 0x00396B9C-0x00396BB0
	public enum DebuggerBrowsableState // TypeDefIndex: 702
	{
		Never = 0,
		Collapsed = 2,
		RootHidden = 3
	}

	[AttributeUsage] // 0x00396BB0-0x00396C04
	[ComVisible] // 0x00396BB0-0x00396C04
	public sealed class DebuggerBrowsableAttribute : Attribute // TypeDefIndex: 703
	{
		// Fields
		private DebuggerBrowsableState state; // 0x10
	
		// Constructors
		public DebuggerBrowsableAttribute(DebuggerBrowsableState state); // 0x0074EF7C-0x0074F024
	}

	[AttributeUsage] // 0x00396C04-0x00396C58
	[ComVisible] // 0x00396C04-0x00396C58
	public sealed class DebuggerTypeProxyAttribute : Attribute // TypeDefIndex: 704
	{
		// Fields
		private string typeName; // 0x10
	
		// Constructors
		public DebuggerTypeProxyAttribute(Type type); // 0x0074F0B0-0x0074F1F0
	}

	[AttributeUsage] // 0x00396C58-0x00396CAC
	[ComVisible] // 0x00396C58-0x00396CAC
	public sealed class DebuggerDisplayAttribute : Attribute // TypeDefIndex: 705
	{
		// Fields
		private string name; // 0x10
		private string value; // 0x18
		private string type; // 0x20
	
		// Constructors
		public DebuggerDisplayAttribute(string value); // 0x0074F024-0x0074F098
	}

	[ComVisible] // 0x00396CAC-0x00396CFC
	[MonoTODO] // 0x00396CAC-0x00396CFC
	public sealed class Debugger // TypeDefIndex: 706
	{
		// Fields
		public static readonly string DefaultCategory; // 0x00
	
		// Properties
		public static bool IsAttached { get; } // 0x0074EEBC-0x0074EF18 
	
		// Constructors
		static Debugger(); // 0x0074EF20-0x0074EF7C
	
		// Methods
		private static bool IsAttached_internal(); // 0x0074EF18-0x0074EF1C
		public static void NotifyOfCrossThreadDependency(); // 0x0074EF1C-0x0074EF20
	}

	[Serializable]
	[ComVisible] // 0x00396CFC-0x00396D4C
	[MonoTODO] // 0x00396CFC-0x00396D4C
	public class StackFrame // TypeDefIndex: 707
	{
		// Fields
		public const int OFFSET_UNKNOWN = -1; // Metadata: 0x00204B96
		private int ilOffset; // 0x10
		private int nativeOffset; // 0x14
		private long methodAddress; // 0x18
		private uint methodIndex; // 0x20
		private MethodBase methodBase; // 0x28
		private string fileName; // 0x30
		private int lineNumber; // 0x38
		private int columnNumber; // 0x3C
		private string internalMethodName; // 0x40
	
		// Constructors
		public StackFrame(); // 0x0074F1F8-0x0074F254
		public StackFrame(int skipFrames, bool fNeedFileInfo); // 0x0074F254-0x0074F2C0
	
		// Methods
		private static bool get_frame_info(int skip, bool needFileInfo, out MethodBase method, out int iloffset, out int native_offset, out string file, out int line, out int column); // 0x0074F1F0-0x0074F1F8
		public virtual int GetFileLineNumber(); // 0x0074F2C0-0x0074F2C8
		public virtual string GetFileName(); // 0x0074F2C8-0x0074F2D0
		internal string GetSecureFileName(); // 0x0074F2D0-0x0074F3AC
		public virtual int GetILOffset(); // 0x0074F3AC-0x0074F3B4
		public virtual MethodBase GetMethod(); // 0x0074F3B4-0x0074F3BC
		public virtual int GetNativeOffset(); // 0x0074F3BC-0x0074F3C4
		internal long GetMethodAddress(); // 0x0074F3C4-0x0074F3CC
		internal uint GetMethodIndex(); // 0x0074F3CC-0x0074F3D4
		internal string GetInternalMethodName(); // 0x0074F3D4-0x0074F3DC
		public override string ToString(); // 0x0074F3DC-0x0074F690
	}

	[Serializable]
	[ComVisible] // 0x00396D4C-0x00396D9C
	[MonoTODO] // 0x00396D4C-0x00396D9C
	public class StackTrace // TypeDefIndex: 708
	{
		// Fields
		public const int METHODS_TO_SKIP = 0; // Metadata: 0x00204B9A
		private StackFrame[] frames; // 0x10
		private readonly StackTrace[] captured_traces; // 0x18
		private bool debug_info; // 0x20
		private static bool isAotidSet; // 0x00
		private static string aotid; // 0x08
	
		// Properties
		public virtual int FrameCount { get; } // 0x0074F9E4-0x0074F9FC 
	
		// Nested types
		internal enum TraceFormat // TypeDefIndex: 709
		{
			Normal = 0,
			TrailingNewLine = 1,
			NoResourceLookup = 2
		}
	
		// Constructors
		public StackTrace(); // 0x0074F690-0x0074F6C0
		public StackTrace(bool fNeedFileInfo); // 0x0074F854-0x0074F888
		public StackTrace(int skipFrames, bool fNeedFileInfo); // 0x0074F888-0x0074F8C8
		public StackTrace(Exception e, bool fNeedFileInfo); // 0x0074F8D0-0x0074F8DC
		public StackTrace(Exception e, int skipFrames, bool fNeedFileInfo); // 0x0074F8DC-0x0074F9E4
	
		// Methods
		private void init_frames(int skipFrames, bool fNeedFileInfo); // 0x0074F6C0-0x0074F854
		private static StackFrame[] get_trace(Exception e, int skipFrames, bool fNeedFileInfo); // 0x0074F8C8-0x0074F8D0
		public virtual StackFrame GetFrame(int index); // 0x0074F9FC-0x0074FA78
		private static string GetAotId(); // 0x0074FA78-0x0074FB4C
		private bool AddFrames(StringBuilder sb); // 0x0074FB4C-0x007500AC
		internal void GetFullNameForStackTrace(StringBuilder sb, MethodBase mi); // 0x0075011C-0x007506C0
		public override string ToString(); // 0x007506C0-0x00750834
		internal string ToString(TraceFormat traceFormat); // 0x00750834-0x00750840
	}
}

namespace System.Diagnostics.Tracing
{
	public enum EventLevel // TypeDefIndex: 710
	{
		LogAlways = 0,
		Critical = 1,
		Error = 2,
		Warning = 3,
		Informational = 4,
		Verbose = 5
	}

	[Flags] // 0x00396D9C-0x00396DAC
	public enum EventKeywords : long // TypeDefIndex: 711
	{
		All = -1,
		None = 0,
		MicrosoftTelemetry = 562949953421312,
		WdiContext = 562949953421312,
		WdiDiagnostic = 1125899906842624,
		Sqm = 2251799813685248,
		AuditFailure = 4503599627370496,
		CorrelationHint = 4503599627370496,
		AuditSuccess = 9007199254740992,
		EventLogClassic = 36028797018963968
	}

	[AttributeUsage] // 0x00396DAC-0x00396DC0
	public sealed class EventAttribute : Attribute // TypeDefIndex: 712
	{
		// Fields
		[CompilerGenerated] // 0x0039C728-0x0039C738
		private int <EventId>k__BackingField; // 0x10
		[CompilerGenerated] // 0x0039C738-0x0039C748
		private EventLevel <Level>k__BackingField; // 0x14
	
		// Properties
		private int EventId { [CompilerGenerated] /* 0x0039E984-0x0039E994 */ set; } // 0x0075086C-0x00750874
		public EventLevel Level { [CompilerGenerated] /* 0x0039E994-0x0039E9A4 */ set; } // 0x00750874-0x0075087C
	
		// Constructors
		public EventAttribute(int eventId); // 0x00750840-0x0075086C
	}

	public class EventSource : IDisposable // TypeDefIndex: 713
	{
		// Fields
		[CompilerGenerated] // 0x0039C748-0x0039C758
		private string <Name>k__BackingField; // 0x10
	
		// Properties
		private string Name { [CompilerGenerated] /* 0x0039E9A4-0x0039E9B4 */ set; } // 0x007508CC-0x007508D4
	
		// Constructors
		protected EventSource(); // 0x0075087C-0x007508CC
	
		// Methods
		~EventSource(); // 0x007508D4-0x00750954
		public bool IsEnabled(); // 0x00750954-0x0075095C
		public bool IsEnabled(EventLevel level, EventKeywords keywords); // 0x0075095C-0x00750964
		public void Dispose(); // 0x00750964-0x007509DC
		protected virtual void Dispose(bool disposing); // 0x00750A88-0x00750A8C
		protected void WriteEvent(int eventId, int arg1); // 0x00750A8C-0x00750B60
		protected void WriteEvent(int eventId, params /* 0x0039FA58-0x0039FA68 */ object[] args); // 0x00750B60-0x00750B64
	}

	[AttributeUsage] // 0x00396DC0-0x00396DD4
	public sealed class EventSourceAttribute : Attribute // TypeDefIndex: 714
	{
		// Fields
		[CompilerGenerated] // 0x0039C758-0x0039C768
		private string <Guid>k__BackingField; // 0x10
		[CompilerGenerated] // 0x0039C768-0x0039C778
		private string <Name>k__BackingField; // 0x18
	
		// Properties
		public string Guid { [CompilerGenerated] /* 0x0039E9B4-0x0039E9C4 */ set; } // 0x00750B64-0x00750B6C
		public string Name { [CompilerGenerated] /* 0x0039E9C4-0x0039E9D4 */ set; } // 0x00750B6C-0x00750B74
	
		// Constructors
		public EventSourceAttribute(); // 0x00750B74-0x00750B7C
	}
}

namespace System.Diagnostics.Contracts
{
	public static class Contract // TypeDefIndex: 715
	{
		// Methods
		[ReliabilityContract] // 0x0039E9D4-0x0039E9EC
		public static bool ForAll<T>(IEnumerable<T> collection, Predicate<T> predicate);
	}
}

namespace System.Numerics.Hashing
{
	internal static class HashHelpers // TypeDefIndex: 716
	{
		// Fields
		public static readonly int RandomSeed; // 0x00
	
		// Constructors
		static HashHelpers(); // 0x00905FF8-0x00906094
	
		// Methods
		public static int Combine(int h1, int h2); // 0x00905FE8-0x00905FF8
	}
}

namespace System.Threading
{
	[ComVisible] // 0x00396DD4-0x00396E24
	[DebuggerDisplay] // 0x00396DD4-0x00396E24
	public struct CancellationToken // TypeDefIndex: 717
	{
		// Fields
		private CancellationTokenSource m_source; // 0x00
		private static readonly Action<object> s_ActionToActionObjShunt; // 0x00
	
		// Properties
		public static CancellationToken None { get; } // 0x0082BEB0-0x0082BEF0 
		public bool IsCancellationRequested { get; } // 0x0082BF18-0x0082BF88 
		public bool CanBeCanceled { get; } // 0x0082BFB0-0x0082BFE8 
	
		// Constructors
		internal CancellationToken(CancellationTokenSource source); // 0x0082BFE8-0x0082BFF0
		static CancellationToken(); // 0x0082CC14-0x0082CCE4
	
		// Methods
		private static void ActionToActionObjShunt(object obj); // 0x0082BFF0-0x0082C208
		internal CancellationTokenRegistration InternalRegisterWithoutEC(Action<object> callback, object state); // 0x0082C208-0x0082C218
		private CancellationTokenRegistration Register(Action<object> callback, object state, bool useSynchronizationContext, bool useExecutionContext); // 0x0082C730-0x0082C810
		public bool Equals(CancellationToken other); // 0x0082C8A4-0x0082C938
		public override bool Equals(object other); // 0x0082C938-0x0082C9C4
		public override int GetHashCode(); // 0x0082C9C4-0x0082C9CC
		public static bool operator ==(CancellationToken left, CancellationToken right); // 0x0082C9CC-0x0082C9F4
		public static bool operator !=(CancellationToken left, CancellationToken right); // 0x0082C9F4-0x0082CAEC
		public void ThrowIfCancellationRequested(); // 0x0082CAEC-0x0082CB68
		internal void ThrowIfSourceDisposed(); // 0x0082CBFC-0x0082CC04
		private void ThrowOperationCanceledException(); // 0x0082CC04-0x0082CC14
		private static void ThrowObjectDisposedException(); // 0x0082CB70-0x0082CBFC
	}

	public struct CancellationTokenRegistration : IEquatable<CancellationTokenRegistration>, IDisposable // TypeDefIndex: 718
	{
		// Fields
		private readonly CancellationCallbackInfo m_callbackInfo; // 0x00
		private readonly SparselyPopulatedArrayAddInfo<CancellationCallbackInfo> m_registrationInfo; // 0x08
	
		// Constructors
		internal CancellationTokenRegistration(CancellationCallbackInfo callbackInfo, SparselyPopulatedArrayAddInfo<CancellationCallbackInfo> registrationInfo); // 0x0082CCE4-0x0082CDD0
	
		// Methods
		[FriendAccessAllowed] // 0x0039E9EC-0x0039E9FC
		internal bool TryDeregister(); // 0x0082CDD0-0x0082CE8C
		public void Dispose(); // 0x0082CF28-0x0082E0B8
		public override bool Equals(object obj); // 0x0082E0B8-0x0082E0C0
		public bool Equals(CancellationTokenRegistration other); // 0x0082E0C0-0x0082E1F0
		public override int GetHashCode(); // 0x0082E1F0-0x0082E1F8
	}

	[ComVisible] // 0x00396E24-0x00396E38
	public class CancellationTokenSource : IDisposable // TypeDefIndex: 719
	{
		// Fields
		private static readonly CancellationTokenSource _staticSource_Set; // 0x00
		private static readonly CancellationTokenSource _staticSource_NotCancelable; // 0x08
		private static readonly int s_nLists; // 0x10
		private ManualResetEvent m_kernelEvent; // 0x10
		private SparselyPopulatedArray<CancellationCallbackInfo>[] m_registeredCallbacksLists; // 0x18
		private int m_state; // 0x20
		private int m_threadIDExecutingCallbacks; // 0x24
		private bool m_disposed; // 0x28
		private CancellationTokenRegistration[] m_linkingRegistrations; // 0x30
		private static readonly Action<object> s_LinkedTokenCancelDelegate; // 0x18
		private CancellationCallbackInfo m_executingCallback; // 0x38
		private Timer m_timer; // 0x40
		private static readonly TimerCallback s_timerCallback; // 0x20
	
		// Properties
		public bool IsCancellationRequested { get; } // 0x0082BEF0-0x0082BF18 
		internal bool IsCancellationCompleted { get; } // 0x0082CE8C-0x0082CEB4 
		internal bool IsDisposed { get; } // 0x0082CB68-0x0082CB70 
		internal int ThreadIDExecutingCallbacks { get; set; } // 0x0082CEB4-0x0082CED8 0x0082E2F0-0x0082E318
		public CancellationToken Token { get; } // 0x0082E318-0x0082E33C 
		internal bool CanBeCanceled { get; } // 0x0082BF88-0x0082BFB0 
		internal CancellationCallbackInfo ExecutingCallback { get; } // 0x0082E3A8-0x0082E3CC 
	
		// Constructors
		public CancellationTokenSource(); // 0x0082E3CC-0x0082E40C
		private CancellationTokenSource(bool set); // 0x0082E40C-0x0082E464
		static CancellationTokenSource(); // 0x0082F274-0x0082F394
	
		// Methods
		private static void LinkedTokenCancelDelegate(object source); // 0x0082E1F8-0x0082E2C8
		public void Cancel(); // 0x0082E2C8-0x0082E2F0
		public void Cancel(bool throwOnFirstException); // 0x0082E464-0x0082E490
		private static void TimerCallbackLogic(object obj); // 0x0082E610-0x0082E784
		public void Dispose(); // 0x0082E784-0x0082E800
		protected virtual void Dispose(bool disposing); // 0x0082E800-0x0082E8F4
		internal void ThrowIfDisposed(); // 0x0082E33C-0x0082E3A8
		private static void ThrowObjectDisposedException(); // 0x0082E8F4-0x0082E980
		internal static CancellationTokenSource InternalGetStaticSource(bool set); // 0x0082C810-0x0082C8A4
		internal CancellationTokenRegistration InternalRegister(Action<object> callback, object stateForCallback, SynchronizationContext targetSyncContext, ExecutionContext executionContext); // 0x0082C414-0x0082C730
		private void NotifyCancellation(bool throwOnFirstException); // 0x0082E490-0x0082E610
		private void ExecuteCallbackHandlers(bool throwOnFirstException); // 0x0082EA14-0x0082EEC8
		private void CancellationCallbackCoreWork_OnSyncContext(object obj); // 0x0082EFC4-0x0082F02C
		private void CancellationCallbackCoreWork(CancellationCallbackCoreWorkArguments args); // 0x0082EECC-0x0082EFC4
		public static CancellationTokenSource CreateLinkedTokenSource(CancellationToken token1, CancellationToken token2); // 0x0082F02C-0x0082F274
		internal void WaitForCallbackToComplete(CancellationCallbackInfo callbackInfo); // 0x0082CED8-0x0082CF28
	}

	internal struct CancellationCallbackCoreWorkArguments // TypeDefIndex: 720
	{
		// Fields
		internal SparselyPopulatedArrayFragment<CancellationCallbackInfo> m_currArrayFragment; // 0x00
		internal int m_currArrayIndex; // 0x08
	
		// Constructors
		public CancellationCallbackCoreWorkArguments(SparselyPopulatedArrayFragment<CancellationCallbackInfo> currArrayFragment, int currArrayIndex); // 0x0082BB68-0x0082BB74
	}

	internal class CancellationCallbackInfo // TypeDefIndex: 721
	{
		// Fields
		internal readonly Action<object> Callback; // 0x10
		internal readonly object StateForCallback; // 0x18
		internal readonly SynchronizationContext TargetSyncContext; // 0x20
		internal readonly ExecutionContext TargetExecutionContext; // 0x28
		internal readonly CancellationTokenSource CancellationTokenSource; // 0x30
		private static ContextCallback s_executionContextCallback; // 0x00
	
		// Constructors
		internal CancellationCallbackInfo(Action<object> callback, object stateForCallback, SynchronizationContext targetSyncContext, ExecutionContext targetExecutionContext, CancellationTokenSource cancellationTokenSource); // 0x0082BB74-0x0082BBC8
	
		// Methods
		internal void ExecuteCallback(); // 0x0082BBC8-0x0082BCAC
		private static void ExecutionContextCallback(object obj); // 0x0082BDB4-0x0082BEB0
	}

	internal class SparselyPopulatedArray<T> // TypeDefIndex: 722
		where T : class
	{
		// Fields
		private SparselyPopulatedArrayFragment<T> m_tail;
	
		// Properties
		internal SparselyPopulatedArrayFragment<T> Tail { get; }
	
		// Constructors
		internal SparselyPopulatedArray(int initialSize);
	
		// Methods
		internal SparselyPopulatedArrayAddInfo<T> Add(T element);
	}

	internal struct SparselyPopulatedArrayAddInfo<T> // TypeDefIndex: 723
		where T : class
	{
		// Fields
		private SparselyPopulatedArrayFragment<T> m_source;
		private int m_index;
	
		// Properties
		internal SparselyPopulatedArrayFragment<T> Source { get; }
		internal int Index { get; }
	
		// Constructors
		internal SparselyPopulatedArrayAddInfo(SparselyPopulatedArrayFragment<T> source, int index);
	}

	internal class SparselyPopulatedArrayFragment<T> // TypeDefIndex: 724
		where T : class
	{
		// Fields
		internal readonly T[] m_elements;
		internal int m_freeCount;
		internal SparselyPopulatedArrayFragment<T> m_next;
		internal SparselyPopulatedArrayFragment<T> m_prev;
	
		// Properties
		internal T this[int index] { get => default; }
		internal int Length { get; }
		internal SparselyPopulatedArrayFragment<T> Prev { get; }
	
		// Constructors
		internal SparselyPopulatedArrayFragment(int size);
		internal SparselyPopulatedArrayFragment(int size, SparselyPopulatedArrayFragment<T> prev);
	
		// Methods
		internal T SafeAtomicRemove(int index, T expectedElement);
	}

	public static class LazyInitializer // TypeDefIndex: 725
	{
		// Methods
		public static T EnsureInitialized<T>(ref T target, Func<T> valueFactory)
			where T : class;
		private static T EnsureInitializedCore<T>(ref T target, Func<T> valueFactory)
			where T : class;
	}

	[ComVisible] // 0x00396E70-0x00396EC0
	[DebuggerDisplay] // 0x00396E70-0x00396EC0
	public class ManualResetEventSlim : IDisposable // TypeDefIndex: 726
	{
		// Fields
		private object m_lock; // 0x10
		private ManualResetEvent m_eventObj; // 0x18
		private int m_combinedState; // 0x20
		private static Action<object> s_cancellationTokenCallback; // 0x00
	
		// Properties
		public WaitHandle WaitHandle { get; } // 0x00831A14-0x00831A54 
		public bool IsSet { get; private set; } // 0x00831C68-0x00831CD4 0x00831CDC-0x00831D18
		public int SpinCount { get; private set; } // 0x00831DB8-0x00831E24 0x00831E34-0x00831E74
		private int Waiters { get; set; } // 0x00831E74-0x00831EE0 0x00831EE0-0x00831FCC
	
		// Constructors
		public ManualResetEventSlim(bool initialState); // 0x00831FCC-0x00832000
		public ManualResetEventSlim(bool initialState, int spinCount); // 0x00832080-0x008321C8
		static ManualResetEventSlim(); // 0x00832BC0-0x00832C44
	
		// Methods
		private void Initialize(bool initialState, int spinCount); // 0x00832000-0x00832080
		private void EnsureLockObjectCreated(); // 0x008321E4-0x00832268
		private bool LazyInitializeEvent(); // 0x00831AF8-0x00831C68
		public void Set(); // 0x00832290-0x00832298
		private void Set(bool duringCancellation); // 0x00832298-0x00832414
		public bool Wait(int millisecondsTimeout, CancellationToken cancellationToken); // 0x008324A0-0x00832954
		public void Dispose(); // 0x0083295C-0x008329D8
		protected virtual void Dispose(bool disposing); // 0x008329D8-0x00832AB4
		private void ThrowIfDisposed(); // 0x00831A54-0x00831AF8
		private static void CancellationTokenCallback(object obj); // 0x00832AB4-0x00832BC0
		private void UpdateStateAtomically(int newBits, int updateBitsMask); // 0x00831D18-0x00831DB8
		private static int ExtractStatePortionAndShiftRight(int state, int mask, int rightBitShiftCount); // 0x00831E24-0x00831E34
		private static int ExtractStatePortion(int state, int mask); // 0x00831CD4-0x00831CDC
	}

	[ComVisible] // 0x00396EC0-0x00396F10
	[DebuggerDisplay] // 0x00396EC0-0x00396F10
	public class SemaphoreSlim : IDisposable // TypeDefIndex: 727
	{
		// Fields
		private int m_currentCount; // 0x10
		private readonly int m_maxCount; // 0x14
		private int m_waitCount; // 0x18
		private object m_lockObj; // 0x20
		private ManualResetEvent m_waitHandle; // 0x28
		private TaskNode m_asyncHead; // 0x30
		private TaskNode m_asyncTail; // 0x38
		private static readonly Task<bool> s_trueTask; // 0x00
		private static Action<object> s_cancellationTokenCanceledEventHandler; // 0x08
	
		// Nested types
		private sealed class TaskNode : Task<bool>, IThreadPoolWorkItem // TypeDefIndex: 728
		{
			// Fields
			internal TaskNode Prev; // 0x58
			internal TaskNode Next; // 0x60
	
			// Constructors
			internal TaskNode(); // 0x00496C28-0x00496C98
	
			// Methods
			new void IThreadPoolWorkItem.ExecuteWorkItem(); // 0x00496C98-0x00496CEC
			new void IThreadPoolWorkItem.MarkAborted(ThreadAbortException tae); // 0x00496CEC-0x00496CF0
		}
	
		[CompilerGenerated] // 0x00396F10-0x00396F20
		private struct <WaitUntilCountOrTimeoutAsync>d__31 : IAsyncStateMachine // TypeDefIndex: 729
		{
			// Fields
			public int <>1__state; // 0x00
			public AsyncTaskMethodBuilder<bool> <>t__builder; // 0x08
			public CancellationToken cancellationToken; // 0x20
			public TaskNode asyncWaiter; // 0x28
			public int millisecondsTimeout; // 0x30
			private CancellationTokenSource <cts>5__1; // 0x38
			public SemaphoreSlim <>4__this; // 0x40
			private object <>7__wrap1; // 0x48
			private ConfiguredTaskAwaitable<Task> <>u__1; // 0x50
			private ConfiguredTaskAwaitable<bool> <>u__2; // 0x60
	
			// Methods
			private void MoveNext(); // 0x00496BB8-0x00496C20
			[DebuggerHidden] // 0x0039EA60-0x0039EA70
			private void SetStateMachine(IAsyncStateMachine stateMachine); // 0x00496C20-0x00496C28
		}
	
		// Constructors
		public SemaphoreSlim(int initialCount, int maxCount); // 0x008342F8-0x008344BC
		static SemaphoreSlim(); // 0x0083550C-0x008355D0
	
		// Methods
		public void Wait(); // 0x008344C4-0x008344D0
		public bool Wait(int millisecondsTimeout, CancellationToken cancellationToken); // 0x008344D0-0x0083498C
		private bool WaitUntilCountOrTimeout(int millisecondsTimeout, uint startTime, CancellationToken cancellationToken); // 0x00834D14-0x00834DA8
		public Task WaitAsync(); // 0x00834DA8-0x00834DB4
		public Task<bool> WaitAsync(int millisecondsTimeout, CancellationToken cancellationToken); // 0x00834A50-0x00834D14
		private TaskNode CreateAndAddAsyncWaiter(); // 0x00834DB4-0x00834E5C
		private bool RemoveAsyncWaiter(TaskNode task); // 0x00834F90-0x00835034
		private async Task<bool> WaitUntilCountOrTimeoutAsync(TaskNode asyncWaiter, int millisecondsTimeout, CancellationToken cancellationToken); // 0x00834E5C-0x00834F90
		public int Release(); // 0x00835034-0x0083503C
		public int Release(int releaseCount); // 0x0083503C-0x00835324
		private static void QueueWaiterTask(TaskNode waiterTask); // 0x00835324-0x00835330
		public void Dispose(); // 0x00835330-0x008353AC
		protected virtual void Dispose(bool disposing); // 0x008353AC-0x0083540C
		private static void CancellationTokenCanceledEventHandler(object obj); // 0x0083540C-0x0083550C
		private void CheckDispose(); // 0x0083498C-0x00834A50
		private static string GetResourceString(string str); // 0x008344BC-0x008344C4
	}

	[ComVisible] // 0x00396F20-0x00396FBC
	[DebuggerDisplay] // 0x00396F20-0x00396FBC
	[DebuggerTypeProxy] // 0x00396F20-0x00396FBC
	public struct SpinLock // TypeDefIndex: 730
	{
		// Fields
		private int m_owner; // 0x00
		private static int MAXIMUM_WAITERS; // 0x00
	
		// Properties
		public bool IsHeldByCurrentThread { [ReliabilityContract] /* 0x0039EA88-0x0039EAA0 */ get; } // 0x004982D4-0x004982DC 
		public bool IsThreadOwnerTrackingEnabled { [ReliabilityContract] /* 0x0039EAA0-0x0039EAB8 */ get; } // 0x004982DC-0x00498304 
	
		// Nested types
		internal class SystemThreading_SpinLockDebugView // TypeDefIndex: 731
		{
		}
	
		// Constructors
		public SpinLock(bool enableThreadOwnerTracking); // 0x004974EC-0x00497584
		static SpinLock(); // 0x00498304-0x00498358
	
		// Methods
		public void Enter(ref bool lockTaken); // 0x00497A70-0x00497B14
		public void TryEnter(int millisecondsTimeout, ref bool lockTaken); // 0x00497B14-0x00497B1C
		private void ContinueTryEnter(int millisecondsTimeout, ref bool lockTaken); // 0x00497E90-0x00497F7C
		private void DecrementWaiters(); // 0x00497F7C-0x00497F84
		private void ContinueTryEnterWithThreadTracking(int millisecondsTimeout, uint startTime, ref bool lockTaken); // 0x0049803C-0x004981B8
		[ReliabilityContract] // 0x0039EA70-0x0039EA88
		public void Exit(bool useMemoryBarrier); // 0x004981B8-0x00498294
		private void ExitSlowPath(bool useMemoryBarrier); // 0x004982C8-0x004982D4
	}

	public struct SpinWait // TypeDefIndex: 732
	{
		// Fields
		private int m_count; // 0x00
	
		// Properties
		public bool NextSpinWillYield { get; } // 0x00498358-0x00498374 
	
		// Methods
		public void SpinOnce(); // 0x00498374-0x0049837C
	}

	internal static class PlatformHelper // TypeDefIndex: 733
	{
		// Fields
		private static int s_processorCount; // 0x00
		private static int s_lastProcessorCountRefreshTicks; // 0x04
	
		// Properties
		internal static int ProcessorCount { get; } // 0x0082F394-0x0082F450 
		internal static bool IsSingleProcessor { get; } // 0x008321C8-0x008321E4 
	}

	internal static class TimeoutHelper // TypeDefIndex: 734
	{
		// Methods
		public static uint GetTime(); // 0x00497B90-0x00497D04
		public static int UpdateTimeOut(uint startTime, int originalWaitMillisecondsTimeout); // 0x00497D04-0x00497DA8
	}

	[Serializable]
	[ComVisible] // 0x00396FBC-0x00396FD0
	public class AbandonedMutexException : SystemException // TypeDefIndex: 735
	{
		// Fields
		private int m_MutexIndex; // 0x88
		private Mutex m_Mutex; // 0x90
	
		// Constructors
		public AbandonedMutexException(); // 0x0082B944-0x0082B9C0
		public AbandonedMutexException(int location, WaitHandle handle); // 0x0082B9C0-0x0082BA98
		protected AbandonedMutexException(SerializationInfo info, StreamingContext context); // 0x0082BB0C-0x0082BB68
	
		// Methods
		private void SetupException(int location, WaitHandle handle); // 0x0082BA98-0x0082BB0C
	}

	public sealed class AsyncLocal<T> : IAsyncLocal // TypeDefIndex: 736
	{
		// Fields
		private readonly Action<AsyncLocalValueChangedArgs<T>> m_valueChangedHandler;
	
		// Methods
		void IAsyncLocal.OnValueChanged(object previousValueObj, object currentValueObj, bool contextChanged);
	}

	internal interface IAsyncLocal // TypeDefIndex: 737
	{
		// Methods
		void OnValueChanged(object previousValue, object currentValue, bool contextChanged);
	}

	public struct AsyncLocalValueChangedArgs<T> // TypeDefIndex: 738
	{
		// Fields
		[CompilerGenerated] // 0x0039C778-0x0039C788
		private T <PreviousValue>k__BackingField;
		[CompilerGenerated] // 0x0039C788-0x0039C798
		private T <CurrentValue>k__BackingField;
		[CompilerGenerated] // 0x0039C798-0x0039C7A8
		private bool <ThreadContextChanged>k__BackingField;
	
		// Properties
		private T PreviousValue { [CompilerGenerated] /* 0x0039EAB8-0x0039EAC8 */ set; }
		private T CurrentValue { [CompilerGenerated] /* 0x0039EAC8-0x0039EAD8 */ set; }
		private bool ThreadContextChanged { [CompilerGenerated] /* 0x0039EAD8-0x0039EAE8 */ set; }
	
		// Constructors
		internal AsyncLocalValueChangedArgs(T previousValue, T currentValue, bool contextChanged);
	}

	[ComVisible] // 0x00396FD0-0x00396FE4
	public enum EventResetMode // TypeDefIndex: 739
	{
		AutoReset = 0,
		ManualReset = 1
	}

	[ComVisible] // 0x00396FE4-0x00396FF8
	public class EventWaitHandle : WaitHandle // TypeDefIndex: 740
	{
		// Constructors
		public EventWaitHandle(bool initialState, EventResetMode mode); // 0x0082FBB4-0x0082FBC0
		public EventWaitHandle(bool initialState, EventResetMode mode, string name); // 0x0082FBC0-0x0082FEA8
	
		// Methods
		public bool Reset(); // 0x0082FEB4-0x0082FF44
		public bool Set(); // 0x0082E984-0x0082EA14
	}

	[ComVisible] // 0x00396FF8-0x0039700C
	public delegate void ContextCallback(object state); // TypeDefIndex: 741; 0x0082F450-0x0082FB84

	internal struct ExecutionContextSwitcher // TypeDefIndex: 742
	{
		// Fields
		internal ExecutionContext.Reader outerEC; // 0x00
		internal bool outerECBelongsToScope; // 0x08
		internal object hecsw; // 0x10
		internal Thread thread; // 0x18
	
		// Methods
		[HandleProcessCorruptedStateExceptions] // 0x0039EAE8-0x0039EB28
		[ReliabilityContract] // 0x0039EAE8-0x0039EB28
		internal bool UndoNoThrow(); // 0x008317D0-0x008317D8
		[ReliabilityContract] // 0x0039EB28-0x0039EB40
		internal void Undo(); // 0x008317D8-0x008317E0
	}

	[Serializable]
	public sealed class ExecutionContext : IDisposable, ISerializable // TypeDefIndex: 743
	{
		// Fields
		private SynchronizationContext _syncContext; // 0x10
		private SynchronizationContext _syncContextNoFlow; // 0x18
		private LogicalCallContext _logicalCallContext; // 0x20
		private IllogicalCallContext _illogicalCallContext; // 0x28
		private Flags _flags; // 0x30
		private Dictionary<IAsyncLocal, object> _localValues; // 0x38
		private List<IAsyncLocal> _localChangeNotifications; // 0x40
		private static readonly ExecutionContext s_dummyDefaultEC; // 0x00
	
		// Properties
		internal bool isNewCapture { get; set; } // 0x008300FC-0x00830110 0x00830110-0x0083012C
		internal bool isFlowSuppressed { get; set; } // 0x0083012C-0x00830138 0x00830138-0x00830154
		internal static ExecutionContext PreAllocatedDefault { get; } // 0x00830154-0x008301BC 
		internal bool IsPreAllocatedDefault { get; } // 0x008301BC-0x008301C8 
		internal LogicalCallContext LogicalCallContext { get; set; } // 0x00830688-0x008306F4 0x008306F4-0x008306FC
		internal IllogicalCallContext IllogicalCallContext { get; set; } // 0x008306FC-0x00830768 0x00830768-0x00830770
		internal SynchronizationContext SynchronizationContext { [ReliabilityContract] /* 0x0039EB80-0x0039EB98 */ get; [ReliabilityContract] /* 0x0039EB98-0x0039EBB0 */ set; } // 0x00830770-0x00830778 0x00830778-0x00830780
		internal SynchronizationContext SynchronizationContextNoFlow { [ReliabilityContract] /* 0x0039EBB0-0x0039EBC8 */ get; [ReliabilityContract] /* 0x0039EBC8-0x0039EBE0 */ set; } // 0x00830780-0x00830788 0x00830788-0x00830790
	
		// Nested types
		private enum Flags // TypeDefIndex: 744
		{
			None = 0,
			IsNewCapture = 1,
			IsFlowSuppressed = 2,
			IsPreAllocatedDefault = 4
		}
	
		internal struct Reader // TypeDefIndex: 745
		{
			// Fields
			private ExecutionContext m_ec; // 0x00
	
			// Properties
			public bool IsNull { get; } // 0x008316EC-0x008316FC 
			public bool IsFlowSuppressed { get; } // 0x00831708-0x00831724 
			public SynchronizationContext SynchronizationContext { get; } // 0x00831724-0x0083173C 
			public SynchronizationContext SynchronizationContextNoFlow { get; } // 0x0083173C-0x00831754 
			public LogicalCallContext.Reader LogicalCallContext { get; } // 0x00831754-0x0083175C 
	
			// Constructors
			public Reader(ExecutionContext ec); // 0x008316DC-0x008316E4
	
			// Methods
			public ExecutionContext DangerousGetRawExecutionContext(); // 0x008316E4-0x008316EC
			public bool IsDefaultFTContext(bool ignoreSyncCtx); // 0x008316FC-0x00831708
			public bool HasSameLocalValues(ExecutionContext other); // 0x0083175C-0x008317D0
		}
	
		[Flags] // 0x0039700C-0x0039701C
		internal enum CaptureOptions // TypeDefIndex: 746
		{
			None = 0,
			IgnoreSyncCtx = 1,
			OptimizeDefaultCase = 2
		}
	
		// Constructors
		[ReliabilityContract] // 0x0039EB40-0x0039EB58
		internal ExecutionContext(); // 0x008301C8-0x008301D0
		[ReliabilityContract] // 0x0039EB58-0x0039EB70
		internal ExecutionContext(bool isPreAllocatedDefault); // 0x008301D0-0x00830204
		private ExecutionContext(SerializationInfo info, StreamingContext context); // 0x008314C0-0x0083161C
		static ExecutionContext(); // 0x0083161C-0x008316DC
	
		// Methods
		[HandleProcessCorruptedStateExceptions] // 0x0039EB70-0x0039EB80
		internal static void OnAsyncLocalContextChanged(ExecutionContext previous, ExecutionContext current); // 0x00830204-0x00830688
		public void Dispose(); // 0x00830790-0x00830794
		public static void Run(ExecutionContext executionContext, ContextCallback callback, object state); // 0x0082BCBC-0x0082BDB4
		[FriendAccessAllowed] // 0x0039EBE0-0x0039EBF0
		internal static void Run(ExecutionContext executionContext, ContextCallback callback, object state, bool preserveSyncCtx); // 0x00830794-0x00830820
		[HandleProcessCorruptedStateExceptions] // 0x0039EBF0-0x0039EC00
		internal static void RunInternal(ExecutionContext executionContext, ContextCallback callback, object state, bool preserveSyncCtx); // 0x00830820-0x00830A5C
		internal static void EstablishCopyOnWriteScope(ref ExecutionContextSwitcher ecsw); // 0x00830DE0-0x00830F54
		private static void EstablishCopyOnWriteScope(Thread currentThread, bool knownNullWindowsIdentity, ref ExecutionContextSwitcher ecsw); // 0x00830AB8-0x00830B40
		[HandleProcessCorruptedStateExceptions] // 0x0039EC00-0x0039EC10
		internal static ExecutionContextSwitcher SetExecutionContext(ExecutionContext executionContext, bool preserveSyncCtx); // 0x00830B40-0x00830DE0
		public ExecutionContext CreateCopy(); // 0x00830F54-0x008310F4
		internal ExecutionContext CreateMutableCopy(); // 0x008310F4-0x00831278
		public static bool IsFlowSuppressed(); // 0x00831278-0x008312BC
		public static ExecutionContext Capture(); // 0x008312BC-0x0083131C
		[FriendAccessAllowed] // 0x0039EC10-0x0039EC20
		internal static ExecutionContext FastCapture(); // 0x0083131C-0x008313C0
		internal static ExecutionContext Capture(ref StackCrawlMark stackMark, CaptureOptions options); // 0x0082C218-0x0082C414
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x008313C0-0x008314C0
		internal bool IsDefaultFTContext(bool ignoreSyncCtx); // 0x00830A5C-0x00830AB8
	}

	[Serializable]
	public class LockRecursionException : Exception // TypeDefIndex: 747
	{
		// Constructors
		public LockRecursionException(); // 0x00831894-0x008318FC
		public LockRecursionException(string message); // 0x008318FC-0x00831974
		protected LockRecursionException(SerializationInfo info, StreamingContext context); // 0x00831974-0x00831A04
	}

	[ComVisible] // 0x0039701C-0x00397030
	public sealed class ManualResetEvent : EventWaitHandle // TypeDefIndex: 748
	{
		// Constructors
		public ManualResetEvent(bool initialState); // 0x00831A04-0x00831A14
	}

	[ComVisible] // 0x00397030-0x00397044
	public static class Monitor // TypeDefIndex: 749
	{
		// Methods
		public static void Enter(object obj); // 0x00832C44-0x00832C48
		public static void Enter(object obj, ref bool lockTaken); // 0x00832268-0x0083228C
		private static void ThrowLockTakenException(); // 0x00832C48-0x00832CDC
		[ReliabilityContract] // 0x0039EC20-0x0039EC38
		public static void Exit(object obj); // 0x0083228C-0x00832290
		public static bool Wait(object obj, int millisecondsTimeout, bool exitContext); // 0x00832CEC-0x00832D8C
		public static bool Wait(object obj, int millisecondsTimeout); // 0x00832954-0x0083295C
		public static void Pulse(object obj); // 0x00832E64-0x00832EF0
		public static void PulseAll(object obj); // 0x00832414-0x008324A0
		private static bool Monitor_test_synchronised(object obj); // 0x00833018-0x0083301C
		private static void Monitor_pulse(object obj); // 0x0083301C-0x00833020
		private static void ObjPulse(object obj); // 0x00832EF0-0x00832F84
		private static void Monitor_pulse_all(object obj); // 0x00833020-0x00833024
		private static void ObjPulseAll(object obj); // 0x00832F84-0x00833018
		private static bool Monitor_wait(object obj, int ms); // 0x00833024-0x00833028
		private static bool ObjWait(bool exitContext, int millisecondsTimeout, object obj); // 0x00832D8C-0x00832E64
		private static void try_enter_with_atomic_var(object obj, int millisecondsTimeout, ref bool lockTaken); // 0x00833028-0x0083302C
		private static void ReliableEnterTimeout(object obj, int timeout, ref bool lockTaken); // 0x0083302C-0x00833104
		private static void ReliableEnter(object obj, ref bool lockTaken); // 0x00832CDC-0x00832CEC
	}

	[ComVisible] // 0x00397044-0x00397058
	public delegate void ParameterizedThreadStart(object obj); // TypeDefIndex: 750; 0x00833120-0x00833854

	[Serializable]
	[ComVisible] // 0x00397058-0x003970A8
	[TypeForwardedFrom] // 0x00397058-0x003970A8
	public class SemaphoreFullException : SystemException // TypeDefIndex: 751
	{
		// Constructors
		public SemaphoreFullException(); // 0x00834290-0x008342F0
		protected SemaphoreFullException(SerializationInfo info, StreamingContext context); // 0x008342F0-0x008342F8
	}

	public delegate void SendOrPostCallback(object state); // TypeDefIndex: 752; 0x00496D00-0x00497434

	public class SynchronizationContext // TypeDefIndex: 753
	{
		// Properties
		public static SynchronizationContext Current { get; } // 0x00498584-0x004985DC 
		internal static SynchronizationContext CurrentNoFlow { [FriendAccessAllowed] /* 0x0039EC38-0x0039EC48 */ get; } // 0x00498614-0x0049866C 
	
		// Constructors
		public SynchronizationContext(); // 0x0049837C-0x00498384
	
		// Methods
		public virtual void Send(SendOrPostCallback d, object state); // 0x00498384-0x004983B8
		public virtual void Post(SendOrPostCallback d, object state); // 0x004983B8-0x00498430
		public static void SetSynchronizationContext(SynchronizationContext syncContext); // 0x00498470-0x004984E8
		private static SynchronizationContext GetThreadLocalContext(); // 0x0049860C-0x00498614
		public virtual SynchronizationContext CreateCopy(); // 0x0049866C-0x004986C8
	}

	[Serializable]
	[ComVisible] // 0x003970A8-0x003970BC
	public class SynchronizationLockException : SystemException // TypeDefIndex: 754
	{
		// Constructors
		public SynchronizationLockException(); // 0x004986C8-0x0049873C
		public SynchronizationLockException(string message); // 0x00498294-0x004982C8
		protected SynchronizationLockException(SerializationInfo info, StreamingContext context); // 0x0049873C-0x00498744
	}

	internal class ThreadHelper // TypeDefIndex: 755
	{
		// Fields
		private Delegate _start; // 0x10
		private object _startArg; // 0x18
		private ExecutionContext _executionContext; // 0x20
		internal static ContextCallback _ccb; // 0x00
	
		// Constructors
		static ThreadHelper(); // 0x004A578C-0x004A5808
		internal ThreadHelper(Delegate start); // 0x004A5334-0x004A5360
	
		// Methods
		internal void SetExecutionContextHelper(ExecutionContext ec); // 0x004A5148-0x004A5150
		private static void ThreadStart_Context(object state); // 0x004A5808-0x004A59DC
		internal void ThreadStart(object obj); // 0x004A5DDC-0x004A5F80
		internal void ThreadStart(); // 0x004A5F80-0x004A6114
	}

	[ClassInterface] // 0x003970BC-0x00397148
	[ComDefaultInterface] // 0x003970BC-0x00397148
	[ComVisible] // 0x003970BC-0x00397148
	public sealed class Thread : CriticalFinalizerObject, _Thread // TypeDefIndex: 756
	{
		// Fields
		private static LocalDataStoreMgr s_LocalDataStoreMgr; // 0x00
		[ThreadStatic] // 0x0039C7A8-0x0039C7B8
		private static LocalDataStoreHolder s_LocalDataStore; // 0x80000000
		[ThreadStatic] // 0x0039C7B8-0x0039C7C8
		internal static CultureInfo m_CurrentCulture; // 0x80000008
		[ThreadStatic] // 0x0039C7C8-0x0039C7D8
		internal static CultureInfo m_CurrentUICulture; // 0x80000010
		private static AsyncLocal<CultureInfo> s_asyncLocalCurrentCulture; // 0x08
		private static AsyncLocal<CultureInfo> s_asyncLocalCurrentUICulture; // 0x10
		private InternalThread internal_thread; // 0x10
		private object m_ThreadStartArg; // 0x18
		private object pending_exception; // 0x20
		private IPrincipal principal; // 0x28
		private int principal_version; // 0x30
		[ThreadStatic] // 0x0039C7D8-0x0039C7E8
		private static Thread current_thread; // 0x80000018
		private MulticastDelegate m_Delegate; // 0x38
		private ExecutionContext m_ExecutionContext; // 0x40
		private bool m_ExecutionContextBelongsToOuterScope; // 0x48
	
		// Properties
		internal bool ExecutionContextBelongsToCurrentScope { get; set; } // 0x004A51F4-0x004A5204 0x004A5204-0x004A5214
		public CultureInfo CurrentUICulture { get; } // 0x004A53B8-0x004A53BC 
		public CultureInfo CurrentCulture { get; } // 0x004A547C-0x004A5480 
		private InternalThread Internal { get; } // 0x004A5548-0x004A5578 
		public static Context CurrentContext { get; } // 0x004A5578-0x004A5580 
		public static Thread CurrentThread { [ReliabilityContract] /* 0x0039ECD8-0x0039ECF0 */ get; } // 0x00497F84-0x00497FE0 
		public bool IsThreadPoolThread { get; } // 0x004A3004-0x004A3008 
		internal bool IsThreadPoolThreadInternal { get; } // 0x004A5594-0x004A55D4 
		public bool IsBackground { set; } // 0x004A39EC-0x004A3A40
		public string Name { set; } // 0x004A567C-0x004A56B4
		public ThreadState ThreadState { get; } // 0x0049F8AC-0x0049F8DC 
		public int ManagedThreadId { [ReliabilityContract] /* 0x0039ED20-0x0039ED38 */ get; } // 0x00497FE0-0x0049803C 
	
		// Constructors
		public Thread(ThreadStart start); // 0x004A3DD8-0x004A3E84
		public Thread(ParameterizedThreadStart start); // 0x004A3940-0x004A39EC
	
		// Methods
		public void Start(); // 0x004A3F84-0x004A3FAC
		public void Start(object parameter); // 0x004A3A40-0x004A3B20
		private void Start(ref StackCrawlMark stackMark); // 0x004A3FAC-0x004A5148
		[ReliabilityContract] // 0x0039EC48-0x0039EC60
		internal ExecutionContext.Reader GetExecutionContextReader(); // 0x004985DC-0x0049860C
		[ReliabilityContract] // 0x0039EC60-0x0039EC78
		internal ExecutionContext GetMutableExecutionContext(); // 0x004984E8-0x00498584
		[ReliabilityContract] // 0x0039EC78-0x0039EC90
		internal void SetExecutionContext(ExecutionContext value, bool belongsToCurrentScope); // 0x004A5214-0x004A5228
		[ReliabilityContract] // 0x0039EC90-0x0039ECA8
		internal void SetExecutionContext(ExecutionContext.Reader value, bool belongsToCurrentScope); // 0x004A5228-0x004A5270
		private static void SleepInternal(int millisecondsTimeout); // 0x004A5270-0x004A5274
		public static void Sleep(int millisecondsTimeout); // 0x00497DDC-0x00497E8C
		[ReliabilityContract] // 0x0039ECA8-0x0039ECC0
		private static bool YieldInternal(); // 0x004A5274-0x004A5278
		[ReliabilityContract] // 0x0039ECC0-0x0039ECD8
		public static bool Yield(); // 0x00497E8C-0x00497E90
		private void SetStartHelper(Delegate start, int maxStackSize); // 0x004A3E84-0x004A3F84
		internal CultureInfo GetCurrentUICultureNoAppX(); // 0x004A53BC-0x004A547C
		private CultureInfo GetCurrentCultureNoAppX(); // 0x004A5480-0x004A5540
		public static void MemoryBarrier(); // 0x004A5540-0x004A5544
		private void ConstructInternalThread(); // 0x004A5544-0x004A5548
		private static Thread GetCurrentThread(); // 0x004A5580-0x004A5584
		public static int GetDomainID(); // 0x004A5584-0x004A5588
		private IntPtr Thread_internal(MulticastDelegate start); // 0x004A5588-0x004A558C
		[ReliabilityContract] // 0x0039ECF0-0x0039ED08
		~Thread(); // 0x004A558C-0x004A5594
		private static void SetName_internal(InternalThread thread, string name); // 0x004A5678-0x004A567C
		private static void SpinWait_nop(); // 0x004A56B8-0x004A56BC
		[ReliabilityContract] // 0x0039ED08-0x0039ED20
		public static void SpinWait(int iterations); // 0x00497DA8-0x00497DDC
		private void StartInternal(IPrincipal principal, ref StackCrawlMark stackMark); // 0x004A5150-0x004A51F4
		private static void SetState(InternalThread thread, ThreadState set); // 0x004A5670-0x004A5674
		private static void ClrState(InternalThread thread, ThreadState clr); // 0x004A5674-0x004A5678
		private static ThreadState GetState(InternalThread thread); // 0x004A56B4-0x004A56B8
		private static int SystemMaxStackStize(); // 0x004A56BC-0x004A56C0
		private static int GetProcessDefaultStackSize(int maxStackSize); // 0x004A5278-0x004A5334
		private void SetStart(MulticastDelegate start, int maxStackSize); // 0x004A5370-0x004A53B8
		[ReliabilityContract] // 0x0039ED38-0x0039ED50
		public static void BeginCriticalRegion(); // 0x00497584-0x00497A70
		[ReliabilityContract] // 0x0039ED50-0x0039ED68
		public static void EndCriticalRegion(); // 0x00497B1C-0x00497B90
		[ComVisible] // 0x0039ED68-0x0039ED7C
		public override int GetHashCode(); // 0x004A56C0-0x004A56C4
		private ThreadState ValidateThreadState(); // 0x004A55D4-0x004A5670
	}

	[Serializable]
	internal enum StackCrawlMark // TypeDefIndex: 757
	{
		LookForMe = 0,
		LookForMyCaller = 1,
		LookForMyCallersCaller = 2,
		LookForThread = 3
	}

	[Serializable]
	[ComVisible] // 0x00397148-0x0039715C
	public sealed class ThreadAbortException : SystemException // TypeDefIndex: 758
	{
		// Constructors
		private ThreadAbortException(); // 0x004A56F8-0x004A5784
		internal ThreadAbortException(SerializationInfo info, StreamingContext context); // 0x004A5784-0x004A578C
	}

	[Serializable]
	[ComVisible] // 0x0039715C-0x00397170
	public class ThreadInterruptedException : SystemException // TypeDefIndex: 759
	{
		// Constructors
		public ThreadInterruptedException(); // 0x004A6114-0x004A61A0
		protected ThreadInterruptedException(SerializationInfo info, StreamingContext context); // 0x004A61A0-0x004A61A8
	}

	internal interface IThreadPoolWorkItem // TypeDefIndex: 760
	{
		// Methods
		void ExecuteWorkItem();
		void MarkAborted(ThreadAbortException tae);
	}

	[ComVisible] // 0x00397170-0x00397184
	public delegate void WaitCallback(object state); // TypeDefIndex: 761; 0x004AB5B0-0x004ABCE4

	[ComVisible] // 0x00397184-0x00397198
	public delegate void WaitOrTimerCallback(object state, bool timedOut); // TypeDefIndex: 762; 0x004ACF88-0x004AD708

	internal static class ThreadPoolGlobals // TypeDefIndex: 763
	{
		// Fields
		public static uint tpQuantum; // 0x00
		public static int processorCount; // 0x04
		public static bool tpHosted; // 0x08
		public static bool vmTpInitialized; // 0x09
		public static bool enableWorkerTracking; // 0x0A
		public static ThreadPoolWorkQueue workQueue; // 0x10
	
		// Constructors
		static ThreadPoolGlobals(); // 0x004A69C0-0x004A6A60
	}

	internal sealed class ThreadPoolWorkQueue // TypeDefIndex: 764
	{
		// Fields
		internal QueueSegment queueHead; // 0x10
		internal QueueSegment queueTail; // 0x18
		internal static SparseArray<WorkStealingQueue> allThreadQueues; // 0x00
		private int numOutstandingThreadRequests; // 0x20
	
		// Nested types
		internal class SparseArray<T> // TypeDefIndex: 765
			where T : class
		{
			// Fields
			private T[] m_array;
	
			// Properties
			internal T[] Current { get; }
	
			// Constructors
			internal SparseArray(int initialSize);
	
			// Methods
			internal int Add(T e);
			internal void Remove(T e);
		}
	
		internal class WorkStealingQueue // TypeDefIndex: 766
		{
			// Fields
			internal IThreadPoolWorkItem[] m_array; // 0x10
			private int m_mask; // 0x18
			private int m_headIndex; // 0x1C
			private int m_tailIndex; // 0x20
			private SpinLock m_foreignLock; // 0x24
	
			// Constructors
			public WorkStealingQueue(); // 0x004A8478-0x004A8500
	
			// Methods
			public void LocalPush(IThreadPoolWorkItem obj); // 0x004A6DE4-0x004A723C
			public bool LocalFindAndPop(IThreadPoolWorkItem obj); // 0x004A7314-0x004A75F4
			public bool LocalPop(out IThreadPoolWorkItem obj); // 0x004A781C-0x004A7AB4
			public bool TrySteal(out IThreadPoolWorkItem obj, ref bool missedSteal); // 0x004A7C40-0x004A7C48
			private bool TrySteal(out IThreadPoolWorkItem obj, ref bool missedSteal, int millisecondsTimeout); // 0x004A8238-0x004A8478
		}
	
		internal class QueueSegment // TypeDefIndex: 767
		{
			// Fields
			internal readonly IThreadPoolWorkItem[] nodes; // 0x10
			private int indexes; // 0x18
			public QueueSegment Next; // 0x20
	
			// Constructors
			[ReliabilityContract] // 0x0039ED7C-0x0039ED94
			public QueueSegment(); // 0x004A6AD4-0x004A6B38
	
			// Methods
			private void GetIndexes(out int upper, out int lower); // 0x004A8180-0x004A81C0
			private bool CompareExchangeIndexes(ref int prevUpper, int newUpper, ref int prevLower, int newLower); // 0x004A81C0-0x004A8238
			public bool IsUsedUp(); // 0x004A7BCC-0x004A7C40
			public bool TryEnqueue(IThreadPoolWorkItem node); // 0x004A723C-0x004A7314
			public bool TryDequeue(out IThreadPoolWorkItem node); // 0x004A7AB4-0x004A7BCC
		}
	
		// Constructors
		public ThreadPoolWorkQueue(); // 0x004A6A60-0x004A6AD4
		static ThreadPoolWorkQueue(); // 0x004A8108-0x004A8180
	
		// Methods
		public ThreadPoolWorkQueueThreadLocals EnsureCurrentThreadHasQueue(); // 0x004A6B38-0x004A6BD0
		internal void EnsureThreadRequested(); // 0x004A6CDC-0x004A6D94
		internal void MarkThreadRequestSatisfied(); // 0x004A6D94-0x004A6DE4
		public void Enqueue(IThreadPoolWorkItem callback, bool forceGlobal); // 0x004A67D4-0x004A6920
		internal bool LocalFindAndPop(IThreadPoolWorkItem callback); // 0x004A6920-0x004A69A4
		public void Dequeue(ThreadPoolWorkQueueThreadLocals tl, out IThreadPoolWorkItem callback, out bool missedSteal); // 0x004A75F4-0x004A781C
		internal static bool Dispatch(); // 0x004A7C48-0x004A8108
	}

	internal sealed class ThreadPoolWorkQueueThreadLocals // TypeDefIndex: 768
	{
		// Fields
		[ThreadStatic] // 0x0039C7E8-0x0039C7F8
		public static ThreadPoolWorkQueueThreadLocals threadLocals; // 0x80000000
		public readonly ThreadPoolWorkQueue workQueue; // 0x10
		public readonly ThreadPoolWorkQueue.WorkStealingQueue workStealingQueue; // 0x18
		public readonly System.Random random; // 0x20
	
		// Constructors
		public ThreadPoolWorkQueueThreadLocals(ThreadPoolWorkQueue tpq); // 0x004A6BD0-0x004A6CDC
	
		// Methods
		private void CleanUp(); // 0x004A8500-0x004A85FC
		~ThreadPoolWorkQueueThreadLocals(); // 0x004A85FC-0x004A86B8
	}

	internal static class _ThreadPoolWaitCallback // TypeDefIndex: 769
	{
		// Methods
		internal static bool PerformWaitCallback(); // 0x004AD7B4-0x004AD810
	}

	internal sealed class QueueUserWorkItemCallback : IThreadPoolWorkItem // TypeDefIndex: 770
	{
		// Fields
		private WaitCallback callback; // 0x10
		private ExecutionContext context; // 0x18
		private object state; // 0x20
		internal static ContextCallback ccb; // 0x00
	
		// Constructors
		static QueueUserWorkItemCallback(); // 0x00833884-0x008338FC
		internal QueueUserWorkItemCallback(WaitCallback waitCallback, object stateObj, bool compressStack, ref StackCrawlMark stackMark); // 0x008338FC-0x008339BC
	
		// Methods
		void IThreadPoolWorkItem.ExecuteWorkItem(); // 0x008339BC-0x00833AA0
		void IThreadPoolWorkItem.MarkAborted(ThreadAbortException tae); // 0x00833AA0-0x00833AA4
		private static void WaitCallback_Context(object state); // 0x00833AA4-0x00833B80
	}

	public static class ThreadPool // TypeDefIndex: 771
	{
		// Methods
		private static RegisteredWaitHandle RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, object state, uint millisecondsTimeOutInterval, bool executeOnlyOnce, ref StackCrawlMark stackMark, bool compressStack); // 0x004A61A8-0x004A646C
		public static RegisteredWaitHandle RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, object state, TimeSpan timeout, bool executeOnlyOnce); // 0x004A649C-0x004A6608
		public static bool QueueUserWorkItem(WaitCallback callBack, object state); // 0x00498440-0x00498470
		public static bool UnsafeQueueUserWorkItem(WaitCallback callBack, object state); // 0x004A646C-0x004A649C
		private static bool QueueUserWorkItemHelper(WaitCallback callBack, object state, ref StackCrawlMark stackMark, bool compressStack); // 0x004A6608-0x004A6728
		internal static void UnsafeQueueCustomWorkItem(IThreadPoolWorkItem workItem, bool forceGlobal); // 0x00498EE4-0x00498F78
		internal static bool TryPopCustomWorkItem(IThreadPoolWorkItem workItem); // 0x004A3BEC-0x004A3CB0
		internal static bool RequestWorkerThread(); // 0x004A69A4-0x004A69A8
		private static void EnsureVMInitialized(); // 0x004A6728-0x004A67D4
		internal static bool NotifyWorkItemComplete(); // 0x004A69AC-0x004A69B0
		internal static void ReportThreadStatus(bool isWorking); // 0x004A69B0-0x004A69B8
		internal static void NotifyWorkItemProgress(); // 0x004A3CBC-0x004A3D54
		internal static void NotifyWorkItemProgressNative(); // 0x004A69B8-0x004A69BC
		internal static bool IsThreadPoolHosted(); // 0x004A69BC-0x004A69C0
		private static void InitializeVMTp(ref bool enableWorkerTracking); // 0x004A69A8-0x004A69AC
	}

	[ComVisible] // 0x00397198-0x003971AC
	public delegate void ThreadStart(); // TypeDefIndex: 772; 0x004A59DC-0x004A5DDC

	[Serializable]
	[ComVisible] // 0x003971AC-0x003971E8
	[Flags] // 0x003971AC-0x003971E8
	public enum ThreadState // TypeDefIndex: 773
	{
		Running = 0,
		StopRequested = 1,
		SuspendRequested = 2,
		Background = 4,
		Unstarted = 8,
		Stopped = 16,
		WaitSleepJoin = 32,
		Suspended = 64,
		AbortRequested = 128,
		Aborted = 256
	}

	[Serializable]
	[ComVisible] // 0x003971E8-0x003971FC
	public class ThreadStateException : SystemException // TypeDefIndex: 774
	{
		// Constructors
		public ThreadStateException(); // 0x004A86F8-0x004A876C
		public ThreadStateException(string message); // 0x004A56C4-0x004A56F8
		protected ThreadStateException(SerializationInfo info, StreamingContext context); // 0x004A876C-0x004A8774
	}

	[ComVisible] // 0x003971FC-0x00397210
	public static class Timeout // TypeDefIndex: 775
	{
		// Fields
		[ComVisible] // 0x0039C7F8-0x0039C80C
		public static readonly TimeSpan InfiniteTimeSpan; // 0x00
	
		// Constructors
		static Timeout(); // 0x004A8774-0x004A87EC
	}

	[ComVisible] // 0x00397210-0x00397224
	public abstract class WaitHandle : MarshalByRefObject, IDisposable // TypeDefIndex: 776
	{
		// Fields
		public const int WaitTimeout = 258; // Metadata: 0x00204C6E
		private const int MAX_WAITHANDLES = 64; // Metadata: 0x00204C72
		private IntPtr waitHandle; // 0x18
		internal SafeWaitHandle safeWaitHandle; // 0x20
		internal bool hasThreadAffinity; // 0x28
		private const int WAIT_OBJECT_0 = 0; // Metadata: 0x00204C76
		private const int WAIT_ABANDONED = 128; // Metadata: 0x00204C7A
		private const int WAIT_FAILED = 2147483647; // Metadata: 0x00204C7E
		private const int ERROR_TOO_MANY_POSTS = 298; // Metadata: 0x00204C82
		protected static readonly IntPtr InvalidHandle; // 0x00
		internal const int MaxWaitHandles = 64; // Metadata: 0x00204C86
	
		// Properties
		[Obsolete] // 0x0039FD3C-0x0039FD74
		public virtual IntPtr Handle { set; } // 0x004ABE04-0x004ABEF4
		public SafeWaitHandle SafeWaitHandle { [ReliabilityContract] /* 0x0039ED94-0x0039EDAC */ get; } // 0x004ABEF4-0x004ABFB0 
	
		// Constructors
		protected WaitHandle(); // 0x004ABD60-0x004ABD88
		static WaitHandle(); // 0x004ACE6C-0x004ACEC8
	
		// Methods
		private void Init(); // 0x004ABD88-0x004ABE04
		internal void SetHandleInternal(SafeWaitHandle handle); // 0x004ABFB0-0x004ABFF4
		public virtual bool WaitOne(int millisecondsTimeout, bool exitContext); // 0x004ABFF4-0x004AC0BC
		public virtual bool WaitOne(TimeSpan timeout, bool exitContext); // 0x004AC14C-0x004AC258
		public virtual bool WaitOne(); // 0x004AC258-0x004AC26C
		public virtual bool WaitOne(int millisecondsTimeout); // 0x004AC26C-0x004AC27C
		public virtual bool WaitOne(TimeSpan timeout); // 0x004AC27C-0x004AC28C
		private bool WaitOne(long timeout, bool exitContext); // 0x004AC0BC-0x004AC14C
		internal static bool InternalWaitOne(SafeHandle waitableSafeHandle, long millisecondsTimeout, bool hasThreadAffinity, bool exitContext); // 0x004AC28C-0x004AC3A8
		[ReliabilityContract] // 0x0039EDAC-0x0039EDC4
		public static int WaitAny(WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext); // 0x004AC554-0x004AC8A4
		[ReliabilityContract] // 0x0039EDC4-0x0039EDDC
		public static int WaitAny(WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext); // 0x004ACBE4-0x004ACD14
		private static void ThrowAbandonedMutexException(); // 0x004AC4EC-0x004AC554
		private static void ThrowAbandonedMutexException(int location, WaitHandle handle); // 0x004ACB68-0x004ACBE4
		public virtual void Close(); // 0x004ACD14-0x004ACD94
		protected virtual void Dispose(bool explicitDisposing); // 0x004ACD94-0x004ACDE4
		public void Dispose(); // 0x004ACDE4-0x004ACE64
		private static int WaitMultiple(WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext, bool WaitAll); // 0x004AC8A4-0x004ACB68
		private static int WaitOneNative(SafeHandle waitableSafeHandle, uint millisecondsTimeout, bool hasThreadAffinity, bool exitContext); // 0x004AC3A8-0x004AC4EC
		private static unsafe int Wait_internal(IntPtr* handles, int numHandles, bool waitAll, int ms); // 0x004ACE64-0x004ACE6C
	}

	[Serializable]
	[ComVisible] // 0x00397224-0x00397238
	public class WaitHandleCannotBeOpenedException : ApplicationException // TypeDefIndex: 777
	{
		// Constructors
		public WaitHandleCannotBeOpenedException(); // 0x004ACEC8-0x004ACF3C
		public WaitHandleCannotBeOpenedException(string message); // 0x004ACF3C-0x004ACF70
		protected WaitHandleCannotBeOpenedException(SerializationInfo info, StreamingContext context); // 0x004ACF70-0x004ACF78
	}

	public static class Interlocked // TypeDefIndex: 778
	{
		// Methods
		[ReliabilityContract] // 0x0039EDDC-0x0039EDF4
		public static int CompareExchange(ref int location1, int value, int comparand); // 0x0082E980-0x0082E984
		[ReliabilityContract] // 0x0039EDF4-0x0039EE0C
		internal static int CompareExchange(ref int location1, int value, int comparand, ref bool succeeded); // 0x008317E0-0x008317E4
		[ReliabilityContract] // 0x0039EE0C-0x0039EE24
		public static object CompareExchange(ref object location1, object value, object comparand); // 0x008317E4-0x008317E8
		public static float CompareExchange(ref float location1, float value, float comparand); // 0x008317E8-0x008317EC
		[ReliabilityContract] // 0x0039EE24-0x0039EE3C
		public static int Decrement(ref int location); // 0x008317EC-0x008317F0
		[ReliabilityContract] // 0x0039EE3C-0x0039EE54
		public static int Increment(ref int location); // 0x008317F0-0x008317F4
		[ReliabilityContract] // 0x0039EE54-0x0039EE6C
		public static int Exchange(ref int location1, int value); // 0x0082EEC8-0x0082EECC
		[ReliabilityContract] // 0x0039EE6C-0x0039EE84
		public static object Exchange(ref object location1, object value); // 0x008317F4-0x008317F8
		public static float Exchange(ref float location1, float value); // 0x008317F8-0x008317FC
		public static long CompareExchange(ref long location1, long value, long comparand); // 0x008317FC-0x00831800
		[ReliabilityContract] // 0x0039EE84-0x0039EE9C
		public static IntPtr CompareExchange(ref IntPtr location1, IntPtr value, IntPtr comparand); // 0x00831800-0x00831804
		public static double CompareExchange(ref double location1, double value, double comparand); // 0x00831804-0x00831808
		[ComVisible] // 0x0039EE9C-0x0039EEE0
		[ReliabilityContract] // 0x0039EE9C-0x0039EEE0
		public static T CompareExchange<T>(ref T location1, T value, T comparand)
			where T : class;
		public static long Exchange(ref long location1, long value); // 0x00831808-0x0083180C
		[ReliabilityContract] // 0x0039EEE0-0x0039EEF8
		public static IntPtr Exchange(ref IntPtr location1, IntPtr value); // 0x0083180C-0x00831810
		public static double Exchange(ref double location1, double value); // 0x00831810-0x00831814
		[ComVisible] // 0x0039EEF8-0x0039EF3C
		[ReliabilityContract] // 0x0039EEF8-0x0039EF3C
		public static T Exchange<T>(ref T location1, T value)
			where T : class;
		public static long Read(ref long location); // 0x00831814-0x00831818
		[ReliabilityContract] // 0x0039EF3C-0x0039EF54
		public static int Add(ref int location1, int value); // 0x00831818-0x0083181C
	}

	[ComVisible] // 0x00397238-0x0039724C
	public sealed class Mutex : WaitHandle // TypeDefIndex: 779
	{
	}

	internal static class NativeEventCalls // TypeDefIndex: 780
	{
		// Methods
		public static IntPtr CreateEvent_internal(bool manual, bool initial, string name, out int errorCode); // 0x0082FEA8-0x0082FEB4
		public static bool SetEvent(SafeWaitHandle handle); // 0x00830020-0x008300FC
		private static bool SetEvent_internal(IntPtr handle); // 0x00833104-0x00833108
		public static bool ResetEvent(SafeWaitHandle handle); // 0x0082FF44-0x00830020
		private static bool ResetEvent_internal(IntPtr handle); // 0x00833108-0x0083310C
		public static void CloseEvent_internal(IntPtr handle); // 0x0083310C-0x00833110
	}

	[ComVisible] // 0x0039724C-0x00397260
	public struct NativeOverlapped // TypeDefIndex: 781
	{
		// Fields
		public IntPtr InternalLow; // 0x00
		public IntPtr InternalHigh; // 0x08
		public int OffsetLow; // 0x10
		public int OffsetHigh; // 0x14
		public IntPtr EventHandle; // 0x18
	}

	[ComVisible] // 0x00397260-0x00397274
	public sealed class RegisteredWaitHandle : MarshalByRefObject // TypeDefIndex: 782
	{
		// Fields
		private WaitHandle _waitObject; // 0x18
		private WaitOrTimerCallback _callback; // 0x20
		private object _state; // 0x28
		private WaitHandle _finalEvent; // 0x30
		private ManualResetEvent _cancelEvent; // 0x38
		private TimeSpan _timeout; // 0x40
		private int _callsInProcess; // 0x48
		private bool _executeOnlyOnce; // 0x4C
		private bool _unregistered; // 0x4D
	
		// Constructors
		internal RegisteredWaitHandle(WaitHandle waitObject, WaitOrTimerCallback callback, object state, TimeSpan timeout, bool executeOnlyOnce); // 0x00833B80-0x00833C3C
	
		// Methods
		internal void Wait(object state); // 0x00833C3C-0x00834154
		private void DoCallBack(object timedOut); // 0x00834154-0x00834290
	}

	internal sealed class InternalThread : CriticalFinalizerObject // TypeDefIndex: 783
	{
		// Fields
		private int lock_thread_id; // 0x10
		private IntPtr handle; // 0x18
		private IntPtr native_handle; // 0x20
		private IntPtr unused3; // 0x28
		private IntPtr name; // 0x30
		private int name_len; // 0x38
		private ThreadState state; // 0x3C
		private object abort_exc; // 0x40
		private int abort_state_handle; // 0x48
		internal long thread_id; // 0x50
		private IntPtr debugger_thread; // 0x58
		private UIntPtr static_data; // 0x60
		private IntPtr runtime_thread_info; // 0x68
		private object current_appcontext; // 0x70
		private object root_domain_thread; // 0x78
		internal byte[] _serialized_principal; // 0x80
		internal int _serialized_principal_version; // 0x88
		private IntPtr appdomain_refs; // 0x90
		private int interruption_requested; // 0x98
		private IntPtr synch_cs; // 0xA0
		internal bool threadpool_thread; // 0xA8
		private bool thread_interrupt_requested; // 0xA9
		internal int stack_size; // 0xAC
		internal byte apartment_state; // 0xB0
		internal int critical_region_level; // 0xB4
		internal int managed_id; // 0xB8
		private int small_id; // 0xBC
		private IntPtr manage_callback; // 0xC0
		private IntPtr unused4; // 0xC8
		private IntPtr flags; // 0xD0
		private IntPtr thread_pinning_ref; // 0xD8
		private IntPtr abort_protected_block_count; // 0xE0
		private int priority; // 0xE8
		private IntPtr owned_mutex; // 0xF0
		private IntPtr suspended_event; // 0xF8
		private int self_suspended; // 0x100
		private IntPtr unused1; // 0x108
		private IntPtr unused2; // 0x110
		private IntPtr last; // 0x118
	
		// Methods
		private void Thread_free_internal(); // 0x0083181C-0x00831820
		[ReliabilityContract] // 0x0039EF54-0x0039EF6C
		~InternalThread(); // 0x00831820-0x00831894
	}

	[ComVisible] // 0x00397274-0x00397288
	public sealed class Timer : MarshalByRefObject, IDisposable // TypeDefIndex: 784
	{
		// Fields
		private static readonly Scheduler scheduler; // 0x00
		private TimerCallback callback; // 0x18
		private object state; // 0x20
		private long due_time_ms; // 0x28
		private long period_ms; // 0x30
		private long next_run; // 0x38
		private bool disposed; // 0x40
	
		// Nested types
		private sealed class TimerComparer : IComparer // TypeDefIndex: 785
		{
			// Constructors
			public TimerComparer(); // 0x004AA0AC-0x004AA0B4
	
			// Methods
			public int Compare(object x, object y); // 0x004AB48C-0x004AB55C
		}
	
		private sealed class Scheduler // TypeDefIndex: 786
		{
			// Fields
			private static Scheduler instance; // 0x00
			private SortedList list; // 0x10
			private ManualResetEvent changed; // 0x18
	
			// Properties
			public static Scheduler Instance { get; } // 0x004A8EAC-0x004A8F14 
	
			// Constructors
			static Scheduler(); // 0x004A8F14-0x004A8F74
			private Scheduler(); // 0x004A8F74-0x004AA0AC
	
			// Methods
			public void Remove(Timer timer); // 0x004A8BF4-0x004A8CBC
			public void Change(Timer timer, long new_next_run); // 0x004A8CC0-0x004A8E38
			private int FindByDueTime(long nr); // 0x004AA338-0x004AA540
			private void Add(Timer timer); // 0x004AA138-0x004AA338
			private int InternalRemove(Timer timer); // 0x004AA0B4-0x004AA138
			private static void TimerCB(object o); // 0x004AA540-0x004AA618
			private void SchedulerThread(); // 0x004AAD4C-0x004AB38C
			private void ShrinkIfNeeded(List<Timer> list, int initial); // 0x004AB38C-0x004AB48C
		}
	
		// Constructors
		public Timer(TimerCallback callback, object state, int dueTime, int period); // 0x004A0574-0x004A05CC
		public Timer(TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period); // 0x004A88A8-0x004A8950
		static Timer(); // 0x004A8E38-0x004A8EAC
	
		// Methods
		private void Init(TimerCallback callback, object state, long dueTime, long period); // 0x004A87EC-0x004A88A8
		public bool Change(TimeSpan dueTime, TimeSpan period); // 0x004A8B80-0x004A8BF4
		public void Dispose(); // 0x004A13A0-0x004A143C
		private bool Change(long dueTime, long period, bool first); // 0x004A8950-0x004A8B80
		internal void KeepRootedWhileScheduled(); // 0x004A05CC-0x004A05D0
		private static long GetTimeMonotonic(); // 0x004A8CBC-0x004A8CC0
	}

	[ComVisible] // 0x00397288-0x0039729C
	public delegate void TimerCallback(object state); // TypeDefIndex: 787; 0x004AA618-0x004AAD4C

	public static class Volatile // TypeDefIndex: 788
	{
		// Methods
		[ReliabilityContract] // 0x0039EF6C-0x0039EF84
		public static bool Read(ref bool location); // 0x004AB58C-0x004AB5B0
		[ReliabilityContract] // 0x0039EF84-0x0039EF9C
		public static T Read<T>(ref T location)
			where T : class;
		[ReliabilityContract] // 0x0039EF9C-0x0039EFB4
		public static void Write<T>(ref T location, T value)
			where T : class;
	}
}

namespace System.Threading.Tasks
{
	[FriendAccessAllowed] // 0x0039729C-0x003972AC
	internal enum CausalityTraceLevel // TypeDefIndex: 789
	{
		Required = 0,
		Important = 1,
		Verbose = 2
	}

	[FriendAccessAllowed] // 0x003972AC-0x003972BC
	internal enum AsyncCausalityStatus // TypeDefIndex: 790
	{
		Started = 0,
		Completed = 1,
		Canceled = 2,
		Error = 3
	}

	internal enum CausalityRelation // TypeDefIndex: 791
	{
		AssignDelegate = 0,
		Join = 1,
		Choice = 2,
		Cancel = 3,
		Error = 4
	}

	internal enum CausalitySynchronousWork // TypeDefIndex: 792
	{
		CompletionNotification = 0,
		ProgressNotification = 1,
		Execution = 2
	}

	[FriendAccessAllowed] // 0x003972BC-0x003972CC
	internal static class AsyncCausalityTracer // TypeDefIndex: 793
	{
		// Properties
		[FriendAccessAllowed] // 0x0039FD74-0x0039FD84
		internal static bool LoggingOn { [FriendAccessAllowed] /* 0x0039EFB4-0x0039EFC4 */ get; } // 0x00498744-0x0049874C 
	
		// Methods
		[FriendAccessAllowed] // 0x0039EFC4-0x0039EFD4
		internal static void TraceOperationCreation(CausalityTraceLevel traceLevel, int taskId, string operationName, ulong relatedContext); // 0x0049874C-0x00498750
		[FriendAccessAllowed] // 0x0039EFD4-0x0039EFE4
		internal static void TraceOperationCompletion(CausalityTraceLevel traceLevel, int taskId, AsyncCausalityStatus status); // 0x00498750-0x00498754
		internal static void TraceOperationRelation(CausalityTraceLevel traceLevel, int taskId, CausalityRelation relation); // 0x00498754-0x00498758
		internal static void TraceSynchronousWorkStart(CausalityTraceLevel traceLevel, int taskId, CausalitySynchronousWork work); // 0x00498758-0x0049875C
		internal static void TraceSynchronousWorkCompletion(CausalityTraceLevel traceLevel, CausalitySynchronousWork work); // 0x0049875C-0x00498760
	}

	[DebuggerDisplay] // 0x003972CC-0x00397354
	[DebuggerTypeProxy] // 0x003972CC-0x00397354
	public class Task<TResult> : Task // TypeDefIndex: 794
	{
		// Fields
		internal TResult m_result;
		private static readonly TaskFactory<TResult> s_Factory;
		internal static readonly Func<Task<Task>, Task<TResult>> TaskWhenAnyCast;
	
		// Properties
		[DebuggerBrowsable] // 0x0039FD84-0x0039FD98
		public TResult Result { get; }
		internal TResult ResultOnSuccess { get; }
	
		// Nested types
		[Serializable]
		[CompilerGenerated] // 0x00397354-0x00397364
		private sealed class <>c // TypeDefIndex: 795
		{
			// Fields
			public static readonly <>c<TResult> <>9;
	
			// Constructors
			static <>c();
			public <>c();
	
			// Methods
			internal Task<TResult> <.cctor>b__64_0(Task<Task> completed);
		}
	
		// Constructors
		internal Task();
		internal Task(TResult result);
		internal Task(bool canceled, TResult result, TaskCreationOptions creationOptions, CancellationToken ct);
		public Task(Func<object, TResult> function, object state, CancellationToken cancellationToken, TaskCreationOptions creationOptions);
		internal Task(Func<TResult> valueSelector, Task parent, CancellationToken cancellationToken, TaskCreationOptions creationOptions, InternalTaskOptions internalOptions, TaskScheduler scheduler, ref StackCrawlMark stackMark);
		internal Task(Func<TResult> valueSelector, Task parent, CancellationToken cancellationToken, TaskCreationOptions creationOptions, InternalTaskOptions internalOptions, TaskScheduler scheduler);
		internal Task(Delegate valueSelector, object state, Task parent, CancellationToken cancellationToken, TaskCreationOptions creationOptions, InternalTaskOptions internalOptions, TaskScheduler scheduler);
		static Task();
	
		// Methods
		internal static Task<TResult> StartNew(Task parent, Func<TResult> function, CancellationToken cancellationToken, TaskCreationOptions creationOptions, InternalTaskOptions internalOptions, TaskScheduler scheduler, ref StackCrawlMark stackMark);
		internal bool TrySetResult(TResult result);
		internal void DangerousSetResult(TResult result);
		internal TResult GetResultCore(bool waitCompletionNotification);
		internal bool TrySetException(object exceptionObject);
		internal bool TrySetCanceled(CancellationToken tokenToRecord);
		internal bool TrySetCanceled(CancellationToken tokenToRecord, object cancellationException);
		internal override void InnerInvoke();
		public new TaskAwaiter<TResult> GetAwaiter();
		public new ConfiguredTaskAwaitable<TResult> ConfigureAwait(bool continueOnCapturedContext);
	}

	internal class SystemThreadingTasks_FutureDebugView<TResult> // TypeDefIndex: 796
	{
	}

	public class TaskFactory<TResult> // TypeDefIndex: 797
	{
		// Fields
		private CancellationToken m_defaultCancellationToken;
		private TaskScheduler m_defaultScheduler;
		private TaskCreationOptions m_defaultCreationOptions;
		private TaskContinuationOptions m_defaultContinuationOptions;
	
		// Nested types
		private sealed class FromAsyncTrimPromise<TInstance> : Task<TResult> // TypeDefIndex: 798
			where TInstance : class
		{
			// Fields
			internal static readonly AsyncCallback s_completeFromAsyncResult;
			private TInstance m_thisRef;
			private Func<TInstance, IAsyncResult, TResult> m_endMethod;
	
			// Constructors
			internal FromAsyncTrimPromise(TInstance thisRef, Func<TInstance, IAsyncResult, TResult> endMethod);
			static FromAsyncTrimPromise();
	
			// Methods
			internal static void CompleteFromAsyncResult(IAsyncResult asyncResult);
			internal void Complete(TInstance thisRef, Func<TInstance, IAsyncResult, TResult> endMethod, IAsyncResult asyncResult, bool requiresSynchronization);
		}
	
		// Constructors
		public TaskFactory();
		public TaskFactory(CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskContinuationOptions continuationOptions, TaskScheduler scheduler);
	
		// Methods
		internal static Task<TResult> FromAsyncTrim<TInstance, TArgs>(TInstance thisRef, TArgs args, Func<TInstance, TArgs, AsyncCallback, object, IAsyncResult> beginMethod, Func<TInstance, IAsyncResult, TResult> endMethod)
			where TInstance : class;
	}

	internal class Shared<T> // TypeDefIndex: 799
	{
		// Fields
		internal T Value;
	
		// Constructors
		internal Shared(T value);
	}

	public enum TaskStatus // TypeDefIndex: 800
	{
		Created = 0,
		WaitingForActivation = 1,
		WaitingToRun = 2,
		Running = 3,
		WaitingForChildrenToComplete = 4,
		RanToCompletion = 5,
		Canceled = 6,
		Faulted = 7
	}

	[DebuggerDisplay] // 0x00397364-0x003973EC
	[DebuggerTypeProxy] // 0x00397364-0x003973EC
	public class Task : IThreadPoolWorkItem, IAsyncResult, IDisposable // TypeDefIndex: 801
	{
		// Fields
		[ThreadStatic] // 0x0039C80C-0x0039C81C
		internal static Task t_currentTask; // 0x80000000
		[ThreadStatic] // 0x0039C81C-0x0039C82C
		private static StackGuard t_stackGuard; // 0x80000008
		internal static int s_taskIdCounter; // 0x00
		private static readonly TaskFactory s_factory; // 0x08
		private int m_taskId; // 0x10
		internal object m_action; // 0x18
		internal object m_stateObject; // 0x20
		internal TaskScheduler m_taskScheduler; // 0x28
		internal readonly Task m_parent; // 0x30
		internal int m_stateFlags; // 0x38
		private object m_continuationObject; // 0x40
		private static readonly object s_taskCompletionSentinel; // 0x10
		[FriendAccessAllowed] // 0x0039C82C-0x0039C83C
		internal static bool s_asyncDebuggingEnabled; // 0x18
		private static readonly Dictionary<int, Task> s_currentActiveTasks; // 0x20
		private static readonly object s_activeTasksLock; // 0x28
		internal ContingentProperties m_contingentProperties; // 0x48
		private static readonly Action<object> s_taskCancelCallback; // 0x30
		private static readonly Func<ContingentProperties> s_createContingentProperties; // 0x38
		private static Task s_completedTask; // 0x40
		private static readonly Predicate<Task> s_IsExceptionObservedByParentPredicate; // 0x48
		private static ContextCallback s_ecCallback; // 0x50
		private static readonly Predicate<object> s_IsTaskContinuationNullPredicate; // 0x58
	
		// Properties
		internal TaskCreationOptions Options { get; } // 0x0049B468-0x0049B4D4 
		internal bool IsWaitNotificationEnabledOrNotRanToCompletion { get; } // 0x0049BA5C-0x0049BA90 
		internal virtual bool ShouldNotifyDebuggerOfWaitCompletion { get; } // 0x0049BA90-0x0049BAB4 
		internal bool IsWaitNotificationEnabled { get; } // 0x0049BA30-0x0049BA54 
		public int Id { get; } // 0x00499CA4-0x00499D3C 
		internal static Task InternalCurrent { get; } // 0x0049BC9C-0x0049BD08 
		internal static StackGuard CurrentStackGuard { get; } // 0x0049BD08-0x0049BDC0 
		public AggregateException Exception { get; } // 0x0049BDC0-0x0049BE00 
		public TaskStatus Status { get; } // 0x0049BF84-0x0049BFF0 
		public bool IsCanceled { get; } // 0x0049A068-0x0049A094 
		internal bool IsCancellationRequested { get; } // 0x0049BFF0-0x0049C044 
		internal CancellationToken CancellationToken { get; } // 0x0049C11C-0x0049C14C 
		internal bool IsCancellationAcknowledged { get; } // 0x0049C14C-0x0049C170 
		public bool IsCompleted { get; } // 0x0049C170-0x0049C1E4 
		internal bool IsRanToCompletion { get; } // 0x0049A034-0x0049A068 
		public TaskCreationOptions CreationOptions { get; } // 0x0049B058-0x0049B070 
		WaitHandle IAsyncResult.AsyncWaitHandle { get; } // 0x0049C1F4-0x0049C2B8 
		public object AsyncState { get; } // 0x0049C3C8-0x0049C3D0 
		bool IAsyncResult.CompletedSynchronously { get; } // 0x0049C3D0-0x0049C3D8 
		internal TaskScheduler ExecutingTaskScheduler { get; } // 0x0049C3D8-0x0049C3E0 
		public static Task CompletedTask { get; } // 0x0049C3E0-0x0049C48C 
		internal ManualResetEventSlim CompletedEvent { get; } // 0x0049C2B8-0x0049C3C8 
		internal bool IsSelfReplicatingRoot { get; } // 0x0049BAC8-0x0049BAEC 
		internal bool IsChildReplica { get; } // 0x0049C48C-0x0049C4A4 
		internal bool ExceptionRecorded { get; } // 0x0049C4A4-0x0049C500 
		public bool IsFaulted { get; } // 0x0049BE00-0x0049BE24 
		internal ExecutionContext CapturedContext { get; set; } // 0x0049C528-0x0049C5BC 0x00498A54-0x00498AD0
		internal bool IsExceptionObservedByParent { get; } // 0x0049D310-0x0049D334 
		internal bool IsDelegateInvoked { get; } // 0x0049D334-0x0049D358 
		internal virtual object SavedStateForNextReplica { get; } // 0x0049E510-0x0049E518 
		internal virtual object SavedStateFromPreviousReplica { set; } // 0x0049E518-0x0049E51C
		internal virtual Task HandedOverChildReplica { get; set; } // 0x0049E51C-0x0049E524 0x0049E524-0x0049E528
	
		// Nested types
		internal class ContingentProperties // TypeDefIndex: 802
		{
			// Fields
			internal ExecutionContext m_capturedContext; // 0x10
			internal ManualResetEventSlim m_completionEvent; // 0x18
			internal TaskExceptionHolder m_exceptionsHolder; // 0x20
			internal CancellationToken m_cancellationToken; // 0x28
			internal Shared<CancellationTokenRegistration> m_cancellationRegistration; // 0x30
			internal int m_internalCancellationRequested; // 0x38
			internal int m_completionCountdown; // 0x3C
			internal List<Task> m_exceptionalChildren; // 0x40
	
			// Constructors
			public ContingentProperties(); // 0x0049AE68-0x0049AE98
	
			// Methods
			internal void SetCompleted(); // 0x0049D790-0x0049D7C8
			internal void DeregisterCancellationCallback(); // 0x0049D7C8-0x0049D890
		}
	
		private sealed class SetOnInvokeMres : ManualResetEventSlim, ITaskCompletionAction // TypeDefIndex: 803
		{
			// Constructors
			internal SetOnInvokeMres(); // 0x0049F628-0x0049F698
	
			// Methods
			public void Invoke(Task completingTask); // 0x004A143C-0x004A1444
		}
	
		private sealed class DelayPromise : Task<VoidTaskResult> // TypeDefIndex: 804
		{
			// Fields
			internal readonly CancellationToken Token; // 0x58
			internal CancellationTokenRegistration Registration; // 0x60
			internal Timer Timer; // 0x78
	
			// Constructors
			internal DelayPromise(CancellationToken token); // 0x004A0488-0x004A0564
	
			// Methods
			internal void Complete(); // 0x004A0C18-0x004A0D2C
		}
	
		[CompilerGenerated] // 0x003973EC-0x003973FC
		private sealed class <>c__DisplayClass178_0 // TypeDefIndex: 805
		{
			// Fields
			public Task root; // 0x10
			public bool replicasAreQuitting; // 0x18
			public Action<object> taskReplicaDelegate; // 0x20
			public TaskCreationOptions creationOptionsForReplicas; // 0x28
			public InternalTaskOptions internalOptionsForReplicas; // 0x2C
	
			// Constructors
			public <>c__DisplayClass178_0(); // 0x0049E528-0x0049E530
	
			// Methods
			internal void <ExecuteSelfReplicating>b__0(object <p0>); // 0x004A0EF0-0x004A13A0
		}
	
		[Serializable]
		[CompilerGenerated] // 0x003973FC-0x0039740C
		private sealed class <>c // TypeDefIndex: 806
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static Action<object> <>9__276_0; // 0x08
			public static TimerCallback <>9__276_1; // 0x10
	
			// Constructors
			static <>c(); // 0x004A0A94-0x004A0AF8
			public <>c(); // 0x004A0AF8-0x004A0B00
	
			// Methods
			internal void <Delay>b__276_0(object state); // 0x004A0B00-0x004A0C18
			internal void <Delay>b__276_1(object state); // 0x004A0D2C-0x004A0E44
			internal ContingentProperties <.cctor>b__295_0(); // 0x004A0E44-0x004A0EB0
			internal bool <.cctor>b__295_1(Task t); // 0x004A0EB0-0x004A0EE4
			internal bool <.cctor>b__295_2(object tc); // 0x004A0EE4-0x004A0EF0
		}
	
		// Constructors
		internal Task(bool canceled, TaskCreationOptions creationOptions, CancellationToken ct); // 0x0049AD7C-0x0049AE68
		internal Task(); // 0x0049AE98-0x0049AECC
		internal Task(Delegate action, object state, Task parent, CancellationToken cancellationToken, TaskCreationOptions creationOptions, InternalTaskOptions internalOptions, TaskScheduler scheduler); // 0x00498954-0x00498A54
		static Task(); // 0x004A0844-0x004A0A80
	
		// Methods
		[FriendAccessAllowed] // 0x0039EFE4-0x0039EFF4
		internal static bool AddToActiveTasks(Task task); // 0x00499D3C-0x00499E98
		[FriendAccessAllowed] // 0x0039EFF4-0x0039F004
		internal static void RemoveFromActiveTasks(int taskId); // 0x0049AC4C-0x0049AD7C
		internal void TaskConstructorCore(object action, object state, CancellationToken cancellationToken, TaskCreationOptions creationOptions, InternalTaskOptions internalOptions, TaskScheduler scheduler); // 0x0049AECC-0x0049B058
		private void AssignCancellationToken(CancellationToken cancellationToken, Task antecedent, TaskContinuation continuation); // 0x0049B110-0x0049B418
		private static void TaskCancelCallback(object o); // 0x0049B524-0x0049B64C
		internal void PossiblyCaptureContext(ref StackCrawlMark stackMark); // 0x004999F4-0x00499A78
		internal static TaskCreationOptions OptionsMethod(int flags); // 0x0049B878-0x0049B880
		internal bool AtomicStateUpdate(int newBits, int illegalBits); // 0x0049B880-0x0049B910
		internal bool AtomicStateUpdate(int newBits, int illegalBits, ref int oldFlags); // 0x0049B910-0x0049B9B0
		internal void SetNotificationForWaitCompletion(bool enabled); // 0x0049B9B0-0x0049BA30
		internal bool NotifyDebuggerOfWaitCompletionIfNecessary(); // 0x00499B44-0x00499B94
		private void NotifyDebuggerOfWaitCompletion(); // 0x0049BA54-0x0049BA5C
		internal bool MarkStarted(); // 0x0049BAB4-0x0049BAC0
		internal bool FireTaskScheduledIfNeeded(TaskScheduler ts); // 0x0049BAC0-0x0049BAC8
		internal void AddNewChild(); // 0x0049B070-0x0049B110
		internal void DisregardChild(); // 0x0049B4D4-0x0049B524
		internal static Task InternalStartNew(Task creatingTask, Delegate action, object state, CancellationToken cancellationToken, TaskScheduler scheduler, TaskCreationOptions options, InternalTaskOptions internalOptions, ref StackCrawlMark stackMark); // 0x0049BAEC-0x0049BC2C
		internal static int NewId(); // 0x0049BC2C-0x0049BC9C
		internal static Task InternalCurrentIfAttached(TaskCreationOptions creationOptions); // 0x00499980-0x004999F4
		internal ContingentProperties EnsureContingentPropertiesInitialized(bool needsProtection); // 0x0049B418-0x0049B468
		private ContingentProperties EnsureContingentPropertiesInitializedCore(bool needsProtection); // 0x0049C044-0x0049C11C
		private static bool IsCompletedMethod(int flags); // 0x0049C1E4-0x0049C1F4
		private static ExecutionContext CopyExecutionContext(ExecutionContext capturedContext); // 0x0049C5BC-0x0049C658
		public void Dispose(); // 0x0049C658-0x0049C6D4
		protected virtual void Dispose(bool disposing); // 0x0049C6D4-0x0049C7F0
		internal void ScheduleAndStart(bool needsProtection); // 0x0049A29C-0x0049A4D4
		internal void AddException(object exceptionObject); // 0x0049C82C-0x0049C834
		internal void AddException(object exceptionObject, bool representsCancellation); // 0x0049CB7C-0x0049CD08
		private AggregateException GetExceptions(bool includeTaskCanceledExceptions); // 0x0049BE24-0x0049BF84
		internal ReadOnlyCollection<ExceptionDispatchInfo> GetExceptionDispatchInfos(); // 0x0049D03C-0x0049D114
		internal ExceptionDispatchInfo GetCancellationExceptionDispatchInfo(); // 0x0049D194-0x0049D1D0
		internal void ThrowIfExceptional(bool includeTaskCanceledExceptions); // 0x0049D1D8-0x0049D25C
		internal void UpdateExceptionObservedStatus(); // 0x0049D25C-0x0049D310
		internal void Finish(bool bUserDelegateExecuted); // 0x0049C958-0x0049CAE8
		internal void FinishStageTwo(); // 0x0049D358-0x0049D550
		internal void FinishStageThree(); // 0x0049D890-0x0049D8EC
		internal void ProcessChildCompletion(Task childTask); // 0x0049D8EC-0x0049DA88
		internal void AddExceptionsFromChildren(); // 0x0049D550-0x0049D790
		internal void FinishThreadAbortedTask(bool bTAEAddedToExceptionHolder, bool delegateRan); // 0x0049C834-0x0049C8C0
		private void Execute(); // 0x0049E034-0x0049E1B4
		internal virtual bool ShouldReplicate(); // 0x0049E450-0x0049E458
		internal virtual Task CreateReplicaTask(Action<object> taskReplicaDelegate, object stateObject, Task parentTask, TaskScheduler taskScheduler, TaskCreationOptions creationOptionsForReplica, InternalTaskOptions internalOptionsForReplica); // 0x0049E458-0x0049E510
		private static void ExecuteSelfReplicating(Task root); // 0x0049E1B4-0x0049E330
		void IThreadPoolWorkItem.ExecuteWorkItem(); // 0x0049E530-0x0049E538
		void IThreadPoolWorkItem.MarkAborted(ThreadAbortException tae); // 0x0049E67C-0x0049E6C8
		internal bool ExecuteEntry(bool bPreventDoubleExecution); // 0x0049E538-0x0049E67C
		private void ExecuteWithThreadLocal(ref Task currentTaskSlot); // 0x0049E6C8-0x0049E8BC
		private static void ExecutionContextCallback(object obj); // 0x0049E9B4-0x0049EA70
		internal virtual void InnerInvoke(); // 0x0049EA70-0x0049EB10
		internal void InnerInvokeWithArg(Task childTask); // 0x0049EB10-0x0049EB20
		private void HandleException(Exception unhandledException); // 0x0049E330-0x0049E450
		public TaskAwaiter GetAwaiter(); // 0x0049EB50-0x0049EB84
		public ConfiguredTaskAwaitable ConfigureAwait(bool continueOnCapturedContext); // 0x0049EB84-0x0049EBBC
		internal void SetContinuationForAwait(Action continuationAction, bool continueOnCapturedContext, bool flowExecutionContext, ref StackCrawlMark stackMark); // 0x0049EBBC-0x0049EDC8
		public void Wait(); // 0x0049EE94-0x0049EEA0
		public bool Wait(int millisecondsTimeout, CancellationToken cancellationToken); // 0x0049EEA0-0x0049EFDC
		private bool WrappedTryRunInline(); // 0x0049F0AC-0x0049F1D4
		internal bool InternalWait(int millisecondsTimeout, CancellationToken cancellationToken); // 0x0049EFDC-0x0049F0AC
		private bool SpinThenBlockingWait(int millisecondsTimeout, CancellationToken cancellationToken); // 0x0049F3A4-0x0049F54C
		private bool SpinWait(int millisecondsTimeout); // 0x0049F54C-0x0049F628
		internal bool InternalCancel(bool bCancelNonExecutingOnly); // 0x0049A4D4-0x0049A70C
		internal void RecordInternalCancellationRequest(); // 0x0049F780-0x0049F7CC
		internal void RecordInternalCancellationRequest(CancellationToken tokenToRecord); // 0x0049F7CC-0x0049F86C
		internal void RecordInternalCancellationRequest(CancellationToken tokenToRecord, object cancellationException); // 0x0049F86C-0x0049F8AC
		internal void CancellationCleanupLogic(); // 0x0049E8BC-0x0049E9B4
		private void SetCancellationAcknowledged(); // 0x0049EB20-0x0049EB50
		internal void FinishContinuations(); // 0x0049DA88-0x0049E034
		private void LogFinishCompletionNotification(); // 0x0049F8DC-0x0049F8E0
		public Task ContinueWith(Action<Task> continuationAction); // 0x0049F8E0-0x0049F974
		private Task ContinueWith(Action<Task> continuationAction, TaskScheduler scheduler, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, ref StackCrawlMark stackMark); // 0x0049F9FC-0x0049FB5C
		public Task ContinueWith(Action<Task, object> continuationAction, object state, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler); // 0x0049FDE4-0x0049FE20
		private Task ContinueWith(Action<Task, object> continuationAction, object state, TaskScheduler scheduler, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, ref StackCrawlMark stackMark); // 0x0049FE20-0x0049FF8C
		internal static void CreationOptionsFromContinuationOptions(TaskContinuationOptions continuationOptions, out TaskCreationOptions creationOptions, out InternalTaskOptions internalOptions); // 0x0049FB5C-0x0049FC9C
		internal void ContinueWithCore(Task continuationTask, TaskScheduler scheduler, CancellationToken cancellationToken, TaskContinuationOptions options); // 0x0049FC9C-0x0049FDE4
		internal void AddCompletionAction(ITaskCompletionAction action); // 0x0049FF8C-0x0049FF94
		private void AddCompletionAction(ITaskCompletionAction action, bool addBeforeOthers); // 0x0049F698-0x0049F780
		private bool AddTaskContinuationComplex(object tc, bool addBeforeOthers); // 0x0049FF94-0x004A0290
		private bool AddTaskContinuation(object tc, bool addBeforeOthers); // 0x0049EE00-0x0049EE94
		internal void RemoveContinuation(object continuationObject); // 0x0049B64C-0x0049B878
		public static Task<TResult> FromResult<TResult>(TResult result);
		public static Task FromException(Exception exception); // 0x004A0290-0x004A0300
		public static Task<TResult> FromException<TResult>(Exception exception);
		[FriendAccessAllowed] // 0x0039F004-0x0039F014
		internal static Task FromCancellation(CancellationToken cancellationToken); // 0x004A0300-0x004A03C8
		[FriendAccessAllowed] // 0x0039F014-0x0039F024
		internal static Task<TResult> FromCancellation<TResult>(CancellationToken cancellationToken);
		internal static Task<TResult> FromCancellation<TResult>(OperationCanceledException exception);
		public static Task Run(Action action); // 0x004A03C8-0x004A0488
		public static Task<TResult> Run<TResult>(Func<TResult> function);
		public static Task Delay(int millisecondsDelay, CancellationToken cancellationToken); // 0x004966D0-0x004969F8
		public static Task<Task> WhenAny(params /* 0x0039FA68-0x0039FA78 */ Task[] tasks); // 0x004969F8-0x00496BB8
	}

	internal sealed class CompletionActionInvoker : IThreadPoolWorkItem // TypeDefIndex: 807
	{
		// Fields
		private readonly ITaskCompletionAction m_action; // 0x10
		private readonly Task m_completingTask; // 0x18
	
		// Constructors
		internal CompletionActionInvoker(ITaskCompletionAction action, Task completingTask); // 0x004997B8-0x004997F0
	
		// Methods
		public void ExecuteWorkItem(); // 0x004997F0-0x004998AC
		public void MarkAborted(ThreadAbortException tae); // 0x004998AC-0x004998B0
	}

	internal class SystemThreadingTasks_TaskDebugView // TypeDefIndex: 808
	{
	}

	[Serializable]
	[Flags] // 0x0039740C-0x0039741C
	public enum TaskCreationOptions // TypeDefIndex: 809
	{
		None = 0,
		PreferFairness = 1,
		LongRunning = 2,
		AttachedToParent = 4,
		DenyChildAttach = 8,
		HideScheduler = 16,
		RunContinuationsAsynchronously = 64
	}

	[Serializable]
	[Flags] // 0x0039741C-0x0039742C
	internal enum InternalTaskOptions // TypeDefIndex: 810
	{
		None = 0,
		ChildReplica = 256,
		ContinuationTask = 512,
		PromiseTask = 1024,
		SelfReplicating = 2048,
		LazyCancellation = 4096,
		QueuedByRuntime = 8192,
		DoNotDispose = 16384,
		InternalOptionsMask = 65280
	}

	[Serializable]
	[Flags] // 0x0039742C-0x0039743C
	public enum TaskContinuationOptions // TypeDefIndex: 811
	{
		None = 0,
		PreferFairness = 1,
		LongRunning = 2,
		AttachedToParent = 4,
		DenyChildAttach = 8,
		HideScheduler = 16,
		LazyCancellation = 32,
		RunContinuationsAsynchronously = 64,
		NotOnRanToCompletion = 65536,
		NotOnFaulted = 131072,
		OnlyOnCanceled = 196608,
		NotOnCanceled = 262144,
		OnlyOnFaulted = 327680,
		OnlyOnRanToCompletion = 393216,
		ExecuteSynchronously = 524288
	}

	internal class StackGuard // TypeDefIndex: 812
	{
		// Fields
		private int m_inliningDepth; // 0x10
	
		// Constructors
		public StackGuard(); // 0x00499BC8-0x00499BD0
	
		// Methods
		internal bool TryBeginInliningScope(); // 0x00499B94-0x00499BAC
		internal void EndInliningScope(); // 0x00499BB4-0x00499BC8
		private bool CheckForSufficientStack(); // 0x00499BAC-0x00499BB4
	}

	internal struct VoidTaskResult // TypeDefIndex: 813
	{
	}

	internal interface ITaskCompletionAction // TypeDefIndex: 814
	{
		// Methods
		void Invoke(Task completingTask);
	}

	[Serializable]
	public class TaskCanceledException : OperationCanceledException // TypeDefIndex: 815
	{
		// Fields
		[NonSerialized]
		private Task m_canceledTask; // 0x90
	
		// Constructors
		public TaskCanceledException(); // 0x004A1444-0x004A14A4
		public TaskCanceledException(Task task); // 0x0049CD90-0x0049CE38
		protected TaskCanceledException(SerializationInfo info, StreamingContext context); // 0x004A14A4-0x004A14AC
	}

	internal sealed class ContinuationTaskFromTask : Task // TypeDefIndex: 816
	{
		// Fields
		private Task m_antecedent; // 0x50
	
		// Constructors
		public ContinuationTaskFromTask(Task antecedent, Delegate action, object state, TaskCreationOptions creationOptions, InternalTaskOptions internalOptions, ref StackCrawlMark stackMark); // 0x004998B0-0x00499980
	
		// Methods
		internal override void InnerInvoke(); // 0x00499A78-0x00499B44
	}

	internal abstract class TaskContinuation // TypeDefIndex: 817
	{
		// Constructors
		protected TaskContinuation(); // 0x00498804-0x0049880C
	
		// Methods
		internal abstract void Run(Task completedTask, bool bCanInlineContinuationTask);
		protected static void InlineIfPossibleOrElseQueue(Task task, bool needsProtection); // 0x0049A094-0x0049A29C
	}

	internal class StandardTaskContinuation : TaskContinuation // TypeDefIndex: 818
	{
		// Fields
		internal readonly Task m_task; // 0x10
		internal readonly TaskContinuationOptions m_options; // 0x18
		private readonly TaskScheduler m_taskScheduler; // 0x20
	
		// Constructors
		internal StandardTaskContinuation(Task task, TaskContinuationOptions options, TaskScheduler scheduler); // 0x00499BD0-0x00499CA4
	
		// Methods
		internal override void Run(Task completedTask, bool bCanInlineContinuationTask); // 0x00499E98-0x0049A034
	}

	internal sealed class SynchronizationContextAwaitTaskContinuation : AwaitTaskContinuation // TypeDefIndex: 819
	{
		// Fields
		private static readonly SendOrPostCallback s_postCallback; // 0x00
		private static ContextCallback s_postActionCallback; // 0x08
		private readonly SynchronizationContext m_syncContext; // 0x20
	
		// Nested types
		[Serializable]
		[CompilerGenerated] // 0x0039743C-0x0039744C
		private sealed class <>c // TypeDefIndex: 820
		{
			// Fields
			public static readonly <>c <>9; // 0x00
	
			// Constructors
			static <>c(); // 0x0049AAC4-0x0049AB28
			public <>c(); // 0x0049AB28-0x0049AB30
	
			// Methods
			internal void <.cctor>b__7_0(object state); // 0x0049AB30-0x0049AC4C
		}
	
		// Constructors
		internal SynchronizationContextAwaitTaskContinuation(SynchronizationContext context, Action action, bool flowExecutionContext, ref StackCrawlMark stackMark); // 0x0049A70C-0x0049A744
		static SynchronizationContextAwaitTaskContinuation(); // 0x0049AA20-0x0049AAC4
	
		// Methods
		internal sealed override void Run(Task task, bool canInlineContinuationTask); // 0x0049A744-0x0049A85C
		private static void PostAction(object state); // 0x0049A91C-0x0049AA20
		private static ContextCallback GetPostActionCallback(); // 0x0049A85C-0x0049A91C
	}

	internal sealed class TaskSchedulerAwaitTaskContinuation : AwaitTaskContinuation // TypeDefIndex: 821
	{
		// Fields
		private readonly TaskScheduler m_scheduler; // 0x20
	
		// Nested types
		[Serializable]
		[CompilerGenerated] // 0x0039744C-0x0039745C
		private sealed class <>c // TypeDefIndex: 822
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static Action<object> <>9__2_0; // 0x08
	
			// Constructors
			static <>c(); // 0x004A3008-0x004A306C
			public <>c(); // 0x004A306C-0x004A3074
	
			// Methods
			internal void <Run>b__2_0(object state); // 0x004A3074-0x004A3208
		}
	
		// Constructors
		internal TaskSchedulerAwaitTaskContinuation(TaskScheduler scheduler, Action action, bool flowExecutionContext, ref StackCrawlMark stackMark); // 0x0049EDC8-0x0049EE00
	
		// Methods
		internal sealed override void Run(Task ignored, bool canInlineContinuationTask); // 0x004A2DB4-0x004A3004
	}

	internal class AwaitTaskContinuation : TaskContinuation, IThreadPoolWorkItem // TypeDefIndex: 823
	{
		// Fields
		private readonly ExecutionContext m_capturedContext; // 0x10
		protected readonly Action m_action; // 0x18
		private static ContextCallback s_invokeActionCallback; // 0x00
	
		// Properties
		internal static bool IsValidLocationForInlining { get; } // 0x00498B8C-0x00498C8C 
	
		// Nested types
		[Serializable]
		[CompilerGenerated] // 0x0039745C-0x0039746C
		private sealed class <>c // TypeDefIndex: 824
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static WaitCallback <>9__17_0; // 0x08
	
			// Constructors
			static <>c(); // 0x00499630-0x00499694
			public <>c(); // 0x00499694-0x0049969C
	
			// Methods
			internal void <ThrowAsyncIfNecessary>b__17_0(object s); // 0x0049969C-0x004997B8
		}
	
		// Constructors
		internal AwaitTaskContinuation(Action action, bool flowExecutionContext, ref StackCrawlMark stackMark); // 0x00498760-0x00498804
		internal AwaitTaskContinuation(Action action, bool flowExecutionContext); // 0x0049880C-0x0049889C
	
		// Methods
		protected Task CreateTask(Action<object> action, object state, TaskScheduler scheduler); // 0x0049889C-0x00498954
		internal override void Run(Task task, bool canInlineContinuationTask); // 0x00498AD0-0x00498B8C
		private void ExecuteWorkItemHelper(); // 0x00499060-0x0049918C
		void IThreadPoolWorkItem.ExecuteWorkItem(); // 0x0049918C-0x004991C8
		void IThreadPoolWorkItem.MarkAborted(ThreadAbortException tae); // 0x004991C8-0x004991CC
		private static void InvokeAction(object state); // 0x004991CC-0x004992E8
		protected static ContextCallback GetInvokeActionCallback(); // 0x00498C8C-0x00498D1C
		protected void RunCallback(ContextCallback callback, object state, ref Task currentTask); // 0x00498D1C-0x00498EE4
		internal static void RunOrScheduleAction(Action action, bool allowInlining, ref Task currentTask); // 0x0049942C-0x004995C8
		internal static void UnsafeScheduleAction(Action action, Task task); // 0x004995C8-0x00499630
		protected static void ThrowAsyncIfNecessary(Exception exc); // 0x004992E8-0x0049942C
	}

	internal class TaskExceptionHolder // TypeDefIndex: 825
	{
		// Fields
		private static readonly bool s_failFastOnUnobservedException; // 0x00
		private static bool s_domainUnloadStarted; // 0x01
		private static EventHandler s_adUnloadEventHandler; // 0x08
		private readonly Task m_task; // 0x10
		private List<ExceptionDispatchInfo> m_faultExceptions; // 0x18
		private ExceptionDispatchInfo m_cancellationException; // 0x20
		private bool m_isHandled; // 0x28
	
		// Properties
		internal bool ContainsFaultList { get; } // 0x0049C500-0x0049C528 
	
		// Constructors
		internal TaskExceptionHolder(Task task); // 0x0049CD08-0x0049CD84
		static TaskExceptionHolder(); // 0x004A2528-0x004A2584
	
		// Methods
		private static bool ShouldFailFastOnUnobservedException(); // 0x004A15D4-0x004A15DC
		private static void EnsureADUnloadCallbackRegistered(); // 0x004A14AC-0x004A15D4
		private static void AppDomainUnloadCallback(object sender, EventArgs e); // 0x004A15DC-0x004A164C
		~TaskExceptionHolder(); // 0x004A164C-0x004A1C9C
		internal void Add(object exceptionObject, bool representsCancellation); // 0x0049CD84-0x0049CD90
		private void SetCancellationException(object exceptionObject); // 0x004A1E4C-0x004A1F08
		private void AddFaultException(object exceptionObject); // 0x004A1F08-0x004A24A8
		private void MarkAsUnhandled(); // 0x004A24A8-0x004A2528
		internal void MarkAsHandled(bool calledFromFinalizer); // 0x0049CAE8-0x0049CB7C
		internal AggregateException CreateExceptionObject(bool calledFromFinalizer, Exception includeThisException); // 0x0049CE38-0x0049D03C
		internal ReadOnlyCollection<ExceptionDispatchInfo> GetExceptionDispatchInfos(); // 0x0049D114-0x0049D194
		internal ExceptionDispatchInfo GetCancellationExceptionDispatchInfo(); // 0x0049D1D0-0x0049D1D8
	}

	public class TaskFactory // TypeDefIndex: 826
	{
		// Fields
		private CancellationToken m_defaultCancellationToken; // 0x10
		private TaskScheduler m_defaultScheduler; // 0x18
		private TaskCreationOptions m_defaultCreationOptions; // 0x20
		private TaskContinuationOptions m_defaultContinuationOptions; // 0x24
	
		// Nested types
		internal sealed class CompleteOnInvokePromise : Task<Task>, ITaskCompletionAction // TypeDefIndex: 827
		{
			// Fields
			private IList<Task> _tasks; // 0x58
			private int m_firstTaskAlreadyCompleted; // 0x60
	
			// Constructors
			public CompleteOnInvokePromise(IList<Task> tasks); // 0x004A2780-0x004A285C
	
			// Methods
			public void Invoke(Task completingTask); // 0x004A285C-0x004A2A70
		}
	
		// Constructors
		public TaskFactory(); // 0x004A0A80-0x004A0A94
		public TaskFactory(CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskContinuationOptions continuationOptions, TaskScheduler scheduler); // 0x004A2584-0x004A25E0
	
		// Methods
		internal static void CheckCreationOptions(TaskCreationOptions creationOptions); // 0x004A26F0-0x004A2780
		internal static Task<Task> CommonCWAnyLogic(IList<Task> tasks); // 0x004A05D0-0x004A0844
		internal static void CheckMultiTaskContinuationOptions(TaskContinuationOptions continuationOptions); // 0x004A25E0-0x004A26F0
	}

	[DebuggerDisplay] // 0x0039746C-0x003974F4
	[DebuggerTypeProxy] // 0x0039746C-0x003974F4
	public abstract class TaskScheduler // TypeDefIndex: 828
	{
		// Fields
		private static ConditionalWeakTable<TaskScheduler, object> s_activeTaskSchedulers; // 0x00
		private static readonly TaskScheduler s_defaultTaskScheduler; // 0x08
		internal static int s_taskSchedulerIdCounter; // 0x10
		private int m_taskSchedulerId; // 0x10
		private static EventHandler<UnobservedTaskExceptionEventArgs> _unobservedTaskException; // 0x18
		private static readonly object _unobservedTaskExceptionLockObject; // 0x20
	
		// Properties
		internal virtual bool RequiresAtomicStartTransition { get; } // 0x004A2A7C-0x004A2A84 
		public static TaskScheduler Default { get; } // 0x00498FF8-0x00499060 
		public static TaskScheduler Current { get; } // 0x0049F974-0x0049F9FC 
		internal static TaskScheduler InternalCurrent { get; } // 0x00498F78-0x00498FF8 
		public int Id { get; } // 0x004A2C04-0x004A2CB8 
	
		// Nested types
		internal sealed class SystemThreadingTasks_TaskSchedulerDebugView // TypeDefIndex: 829
		{
		}
	
		// Constructors
		protected TaskScheduler(); // 0x004A2A84-0x004A2B0C
		static TaskScheduler(); // 0x004A2CB8-0x004A2D48
	
		// Methods
		protected internal abstract void QueueTask(Task task);
		protected abstract bool TryExecuteTaskInline(Task task, bool taskWasPreviouslyQueued);
		internal bool TryRunInline(Task task, bool taskWasPreviouslyQueued); // 0x0049F1D4-0x0049F3A4
		protected internal virtual bool TryDequeue(Task task); // 0x004A2A70-0x004A2A78
		internal virtual void NotifyWorkItemProgress(); // 0x004A2A78-0x004A2A7C
		internal void InternalQueueTask(Task task); // 0x0049C7F0-0x0049C82C
		private void AddToActiveTaskSchedulers(); // 0x004A2B0C-0x004A2C04
		internal static void PublishUnobservedTaskException(object sender, UnobservedTaskExceptionEventArgs ueea); // 0x004A1D18-0x004A1E4C
	}

	public class UnobservedTaskExceptionEventArgs : EventArgs // TypeDefIndex: 830
	{
		// Fields
		private AggregateException m_exception; // 0x10
		internal bool m_observed; // 0x18
	
		// Constructors
		public UnobservedTaskExceptionEventArgs(AggregateException exception); // 0x004A1C9C-0x004A1D18
	}

	[Serializable]
	public class TaskSchedulerException : Exception // TypeDefIndex: 831
	{
		// Constructors
		public TaskSchedulerException(); // 0x004A3208-0x004A3290
		public TaskSchedulerException(Exception innerException); // 0x0049C8C0-0x0049C958
		protected TaskSchedulerException(SerializationInfo info, StreamingContext context); // 0x004A3290-0x004A3320
	}

	internal static class TaskToApm // TypeDefIndex: 832
	{
		// Nested types
		private sealed class TaskWrapperAsyncResult : IAsyncResult // TypeDefIndex: 833
		{
			// Fields
			internal readonly Task Task; // 0x10
			private readonly object m_state; // 0x18
			private readonly bool m_completedSynchronously; // 0x20
	
			// Properties
			object IAsyncResult.AsyncState { get; } // 0x004A36B0-0x004A36B8 
			bool IAsyncResult.CompletedSynchronously { get; } // 0x004A36B8-0x004A36C0 
			WaitHandle IAsyncResult.AsyncWaitHandle { get; } // 0x004A36C0-0x004A3774 
	
			// Constructors
			internal TaskWrapperAsyncResult(Task task, object state, bool completedSynchronously); // 0x004A3428-0x004A346C
		}
	
		[CompilerGenerated] // 0x003974F4-0x00397504
		private sealed class <>c__DisplayClass3_0 // TypeDefIndex: 834
		{
			// Fields
			public AsyncCallback callback; // 0x10
			public IAsyncResult asyncResult; // 0x18
	
			// Constructors
			public <>c__DisplayClass3_0(); // 0x004A3674-0x004A367C
	
			// Methods
			internal void <InvokeCallbackWhenTaskCompletes>b__0(); // 0x004A367C-0x004A36B0
		}
	
		// Methods
		public static IAsyncResult Begin(Task task, AsyncCallback callback, object state); // 0x004A3320-0x004A3428
		public static void End(IAsyncResult asyncResult); // 0x004A3590-0x004A3674
		public static TResult End<TResult>(IAsyncResult asyncResult);
		private static void InvokeCallbackWhenTaskCompletes(Task antecedent, AsyncCallback callback, IAsyncResult asyncResult); // 0x004A346C-0x004A3590
	}

	internal sealed class ThreadPoolTaskScheduler : TaskScheduler // TypeDefIndex: 835
	{
		// Fields
		private static readonly ParameterizedThreadStart s_longRunningThreadWork; // 0x00
	
		// Properties
		internal override bool RequiresAtomicStartTransition { get; } // 0x004A3D54-0x004A3D5C 
	
		// Constructors
		internal ThreadPoolTaskScheduler(); // 0x004A2D48-0x004A2DB4
		static ThreadPoolTaskScheduler(); // 0x004A3D5C-0x004A3DD8
	
		// Methods
		private static void LongRunningThreadWork(object obj); // 0x004A3774-0x004A3834
		protected internal override void QueueTask(Task task); // 0x004A3834-0x004A3940
		protected override bool TryExecuteTaskInline(Task task, bool taskWasPreviouslyQueued); // 0x004A3B20-0x004A3BEC
		protected internal override bool TryDequeue(Task task); // 0x004A3CB0-0x004A3CB8
		internal override void NotifyWorkItemProgress(); // 0x004A3CB8-0x004A3CBC
	}
}

namespace System.Security
{
	[AttributeUsage] // 0x00397504-0x00397568
	[ComVisible] // 0x00397504-0x00397568
	public sealed class UnverifiableCodeAttribute : Attribute // TypeDefIndex: 836
	{
		// Constructors
		public UnverifiableCodeAttribute(); // 0x00790414-0x0079041C
	}

	[AttributeUsage] // 0x00397568-0x003975CC
	[ComVisible] // 0x00397568-0x003975CC
	public sealed class AllowPartiallyTrustedCallersAttribute : Attribute // TypeDefIndex: 837
	{
		// Constructors
		public AllowPartiallyTrustedCallersAttribute(); // 0x00628B44-0x00628B4C
	}

	[AttributeUsage] // 0x003975CC-0x00397618
	public sealed class SecurityCriticalAttribute : Attribute // TypeDefIndex: 838
	{
		// Constructors
		public SecurityCriticalAttribute(); // 0x0078C51C-0x0078C524
	}

	public enum SecurityRuleSet : byte // TypeDefIndex: 839
	{
		None = 0,
		Level1 = 1,
		Level2 = 2
	}

	[AttributeUsage] // 0x00397618-0x00397654
	public sealed class SecurityRulesAttribute : Attribute // TypeDefIndex: 840
	{
		// Fields
		private SecurityRuleSet m_ruleSet; // 0x10
		private bool m_skipVerificationInFullTrust; // 0x11
	
		// Properties
		public bool SkipVerificationInFullTrust { set; } // 0x00790408-0x00790414
	
		// Constructors
		public SecurityRulesAttribute(SecurityRuleSet ruleSet); // 0x007903DC-0x00790408
	}

	[Serializable]
	internal sealed class SecurityDocument // TypeDefIndex: 841
	{
		// Fields
		internal byte[] m_data; // 0x10
	
		// Constructors
		public SecurityDocument(int numData); // 0x0078C524-0x0078C594
	
		// Methods
		public void GuaranteeSize(int size); // 0x0078C594-0x0078C654
		public void AddString(string str, ref int position); // 0x0078C654-0x0078C850
		public void AppendString(string str, ref int position); // 0x0078C850-0x0078C988
		public static int EncodedStringSize(string str); // 0x0078C990-0x0078C9C0
		public string GetString(ref int position, bool bCreate); // 0x0078C9C0-0x0078CD90
		public void AddToken(byte b, ref int position); // 0x0078D3EC-0x0078D464
		public SecurityElement GetRootElement(); // 0x0078D464-0x0078D48C
		public SecurityElement GetElement(int position, bool bCreate); // 0x0078D48C-0x0078D4B4
		internal SecurityElement InternalGetElement(ref int position, bool bCreate); // 0x0078D4B4-0x0078D77C
	}

	[ComVisible] // 0x00397654-0x00397668
	public interface IEvidenceFactory // TypeDefIndex: 842
	{
	}

	internal enum SecurityElementType // TypeDefIndex: 843
	{
		Regular = 0,
		Format = 1,
		Comment = 2
	}

	[Serializable]
	[ComVisible] // 0x00397668-0x0039767C
	public sealed class SecurityElement // TypeDefIndex: 844
	{
		// Fields
		private string text; // 0x10
		private string tag; // 0x18
		private ArrayList attributes; // 0x20
		private ArrayList children; // 0x28
		private static readonly char[] invalid_tag_chars; // 0x00
		private static readonly char[] invalid_text_chars; // 0x08
		private static readonly char[] invalid_attr_name_chars; // 0x10
		private static readonly char[] invalid_attr_value_chars; // 0x18
		private static readonly char[] invalid_chars; // 0x20
	
		// Properties
		public Hashtable Attributes { get; } // 0x0078DDFC-0x0078E164 
		public ArrayList Children { get; } // 0x0078E174-0x0078E17C 
		public string Tag { get; } // 0x0078E17C-0x0078E184 
		public string Text { get; set; } // 0x0078E184-0x0078E18C 0x0078DCE8-0x0078DDFC
		internal string m_strText { set; } // 0x0078D908-0x0078D910
	
		// Nested types
		internal class SecurityAttribute // TypeDefIndex: 845
		{
			// Fields
			private string _name; // 0x10
			private string _value; // 0x18
	
			// Properties
			public string Name { get; } // 0x0078E164-0x0078E16C 
			public string Value { get; } // 0x0078E16C-0x0078E174 
	
			// Constructors
			public SecurityAttribute(string name, string value); // 0x0078E838-0x0078E99C
		}
	
		// Constructors
		public SecurityElement(string tag); // 0x0078D77C-0x0078D784
		public SecurityElement(string tag, string text); // 0x0078D9EC-0x0078DB28
		static SecurityElement(); // 0x0078FEF0-0x00790064
	
		// Methods
		public void AddAttribute(string name, string value); // 0x0078D784-0x0078D908
		public void AddChild(SecurityElement child); // 0x0078D910-0x0078D9EC
		public static string Escape(string str); // 0x0078E99C-0x0078EBAC
		private static string Unescape(string str); // 0x0078E21C-0x0078E43C
		public static SecurityElement FromString(string xml); // 0x0078EBB8-0x0078EDB4
		public static bool IsValidAttributeName(string name); // 0x0078EDC4-0x0078EE54
		public static bool IsValidAttributeValue(string value); // 0x0078EE54-0x0078EEE4
		public static bool IsValidTag(string tag); // 0x0078DB28-0x0078DBB8
		public static bool IsValidText(string text); // 0x0078E18C-0x0078E21C
		public SecurityElement SearchForChildByTag(string tag); // 0x0078EEE4-0x0078F06C
		public override string ToString(); // 0x0078F06C-0x0078F100
		private void ToXml(ref StringBuilder s, int level); // 0x0078F100-0x0078F85C
		internal SecurityAttribute GetAttribute(string name); // 0x0078E43C-0x0078E740
		internal string SearchForTextOfLocalName(string strLocalName); // 0x0078F85C-0x0078FB68
	}

	[Serializable]
	[ComVisible] // 0x0039767C-0x00397690
	public class SecurityException : SystemException // TypeDefIndex: 846
	{
		// Fields
		private string permissionState; // 0x88
	
		// Constructors
		public SecurityException(); // 0x00790064-0x007900D8
		public SecurityException(string message); // 0x007900D8-0x0079010C
		protected SecurityException(SerializationInfo info, StreamingContext context); // 0x0079010C-0x00790278
		public SecurityException(string message, Exception inner); // 0x00790278-0x007902AC
	
		// Methods
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x007902AC-0x007903C8
		public override string ToString(); // 0x007903C8-0x007903D0
	}

	[ComVisible] // 0x00397690-0x003976A4
	public static class SecurityManager // TypeDefIndex: 847
	{
		// Methods
		internal static bool CheckElevatedPermissions(); // 0x007903D0-0x007903D8
		internal static void EnsureElevatedPermissions(); // 0x007903D8-0x007903DC
	}

	[Serializable]
	[ComVisible] // 0x003976A4-0x003976B8
	public sealed class XmlSyntaxException : SystemException // TypeDefIndex: 848
	{
		// Constructors
		public XmlSyntaxException(); // 0x0078C988-0x0078C990
		public XmlSyntaxException(int lineNumber); // 0x00790DAC-0x00790E70
		public XmlSyntaxException(int lineNumber, string message); // 0x00790E70-0x00790F3C
		public XmlSyntaxException(string message); // 0x0078EDB4-0x0078EDBC
		public XmlSyntaxException(string message, Exception inner); // 0x0078EDBC-0x0078EDC4
		internal XmlSyntaxException(SerializationInfo info, StreamingContext context); // 0x0079366C-0x00793674
	}
}

namespace System.Security.Policy
{
	[Serializable]
	[ComVisible] // 0x003976B8-0x00397708
	[MonoTODO] // 0x003976B8-0x00397708
	public sealed class Evidence : ICollection // TypeDefIndex: 849
	{
		// Fields
		private bool _locked; // 0x10
		private ArrayList hostEvidenceList; // 0x18
		private ArrayList assemblyEvidenceList; // 0x20
	
		// Properties
		[Obsolete] // 0x0039FD98-0x0039FDA8
		public int Count { get; } // 0x0078BF80-0x0078BFE0 
		public bool IsSynchronized { get; } // 0x0078BFE0-0x0078BFE8 
		public object SyncRoot { get; } // 0x0078BFE8-0x0078BFEC 
	
		// Nested types
		private class EvidenceEnumerator : IEnumerator // TypeDefIndex: 850
		{
			// Fields
			private IEnumerator currentEnum; // 0x10
			private IEnumerator hostEnum; // 0x18
			private IEnumerator assemblyEnum; // 0x20
	
			// Properties
			public object Current { get; } // 0x0078C464-0x0078C51C 
	
			// Constructors
			public EvidenceEnumerator(IEnumerator hostenum, IEnumerator assemblyenum); // 0x0078C18C-0x0078C1C8
	
			// Methods
			public bool MoveNext(); // 0x0078C1C8-0x0078C314
			public void Reset(); // 0x0078C314-0x0078C464
		}
	
		// Constructors
		public Evidence(); // 0x0078BF78-0x0078BF80
	
		// Methods
		[Obsolete] // 0x0039F024-0x0039F034
		public void CopyTo(Array array, int index); // 0x0078BFEC-0x0078C0D4
		[Obsolete] // 0x0039F034-0x0039F044
		public IEnumerator GetEnumerator(); // 0x0078C0D4-0x0078C18C
	}
}

namespace System.Security.Permissions
{
	[Serializable]
	[AttributeUsage] // 0x00397708-0x00397790
	[ComVisible] // 0x00397708-0x00397790
	[Obsolete] // 0x00397708-0x00397790
	public abstract class CodeAccessSecurityAttribute : SecurityAttribute // TypeDefIndex: 851
	{
	}

	[Serializable]
	[AttributeUsage] // 0x00397790-0x00397818
	[ComVisible] // 0x00397790-0x00397818
	[Obsolete] // 0x00397790-0x00397818
	public abstract class SecurityAttribute : Attribute // TypeDefIndex: 852
	{
	}

	[Serializable]
	[AttributeUsage] // 0x00397818-0x003978A0
	[ComVisible] // 0x00397818-0x003978A0
	[Obsolete] // 0x00397818-0x003978A0
	public sealed class SecurityPermissionAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 853
	{
		// Fields
		private SecurityPermissionFlag m_Flags; // 0x10
	
		// Properties
		public bool SkipVerification { set; } // 0x0078BF5C-0x0078BF78
	}

	[Serializable]
	[ComVisible] // 0x003978A0-0x00397900
	[Flags] // 0x003978A0-0x00397900
	[Obsolete] // 0x003978A0-0x00397900
	public enum SecurityPermissionFlag // TypeDefIndex: 854
	{
		NoFlags = 0,
		Assertion = 1,
		UnmanagedCode = 2,
		SkipVerification = 4,
		Execution = 8,
		ControlThread = 16,
		ControlEvidence = 32,
		ControlPolicy = 64,
		SerializationFormatter = 128,
		ControlDomainPolicy = 256,
		ControlPrincipal = 512,
		ControlAppDomain = 1024,
		RemotingConfiguration = 2048,
		Infrastructure = 4096,
		BindingRedirects = 8192,
		AllFlags = 16383
	}
}

namespace System.Security.Util
{
	internal sealed class Parser // TypeDefIndex: 855
	{
		// Fields
		private SecurityDocument _doc; // 0x10
		private Tokenizer _t; // 0x18
	
		// Constructors
		private Parser(Tokenizer t); // 0x0079285C-0x00792900
		internal Parser(string input); // 0x00792968-0x007929D8
	
		// Methods
		internal SecurityElement GetTopElement(); // 0x0079041C-0x00790458
		private void GetRequiredSizes(TokenizerStream stream, ref int index); // 0x00790458-0x00790B28
		private int DetermineFormat(TokenizerStream stream); // 0x00790F3C-0x0079118C
		private void ParseContents(); // 0x007922D4-0x007926D4
	}

	internal sealed class Tokenizer // TypeDefIndex: 856
	{
		// Fields
		public int LineNo; // 0x10
		private int _inProcessingTag; // 0x14
		private byte[] _inBytes; // 0x18
		private char[] _inChars; // 0x20
		private string _inString; // 0x28
		private int _inIndex; // 0x30
		private int _inSize; // 0x34
		private int _inSavedCharacter; // 0x38
		private TokenSource _inTokenSource; // 0x3C
		private ITokenReader _inTokenReader; // 0x40
		private StringMaker _maker; // 0x48
		private string[] _searchStrings; // 0x50
		private string[] _replaceStrings; // 0x58
		private int _inNestedIndex; // 0x60
		private int _inNestedSize; // 0x64
		private string _inNestedString; // 0x68
	
		// Nested types
		private enum TokenSource // TypeDefIndex: 857
		{
			UnicodeByteArray = 0,
			UTF8ByteArray = 1,
			ASCIIByteArray = 2,
			CharArray = 3,
			String = 4,
			NestedStrings = 5,
			Other = 6
		}
	
		[Serializable]
		internal sealed class StringMaker // TypeDefIndex: 858
		{
			// Fields
			private string[] aStrings; // 0x10
			private uint cStringsMax; // 0x18
			private uint cStringsUsed; // 0x1C
			public StringBuilder _outStringBuilder; // 0x20
			public char[] _outChars; // 0x28
			public int _outIndex; // 0x30
	
			// Constructors
			public StringMaker(); // 0x00793410-0x00793494
	
			// Methods
			private static uint HashString(string str); // 0x0079330C-0x00793384
			private static uint HashCharArray(char[] a, int l); // 0x00793384-0x00793410
			private bool CompareStringAndChars(string str, char[] a, int l); // 0x00793494-0x00793558
			public string MakeString(); // 0x0078CF5C-0x0078D2B4
		}
	
		internal interface ITokenReader // TypeDefIndex: 859
		{
			// Methods
			int Read();
		}
	
		internal class StreamTokenReader : ITokenReader // TypeDefIndex: 860
		{
			// Fields
			internal StreamReader _in; // 0x10
			internal int _numCharRead; // 0x18
	
			// Properties
			internal int NumCharEncountered { get; } // 0x00792AA8-0x00792AB0 
	
			// Constructors
			internal StreamTokenReader(StreamReader input); // 0x00792B9C-0x00792BCC
	
			// Methods
			public virtual int Read(); // 0x007932B0-0x0079330C
		}
	
		// Constructors
		internal Tokenizer(string input); // 0x007929D8-0x00792A28
	
		// Methods
		internal void BasicInitialization(); // 0x00792A28-0x00792AA8
		public void Recycle(); // 0x00792900-0x00792968
		internal void ChangeFormat(Encoding encoding); // 0x00791D60-0x00791F9C
		internal void GetTokens(TokenizerStream stream, int maxNum, bool endAfterKet); // 0x0079118C-0x00791CFC
		private string GetStringToken(); // 0x00793134-0x00793160
	}

	internal sealed class TokenizerShortBlock // TypeDefIndex: 861
	{
		// Fields
		internal short[] m_block; // 0x10
		internal TokenizerShortBlock m_next; // 0x18
	
		// Constructors
		public TokenizerShortBlock(); // 0x0079355C-0x007935BC
	}

	internal sealed class TokenizerStringBlock // TypeDefIndex: 862
	{
		// Fields
		internal string[] m_block; // 0x10
		internal TokenizerStringBlock m_next; // 0x18
	
		// Constructors
		public TokenizerStringBlock(); // 0x007935BC-0x0079361C
	}

	internal sealed class TokenizerStream // TypeDefIndex: 863
	{
		// Fields
		private int m_countTokens; // 0x10
		private TokenizerShortBlock m_headTokens; // 0x18
		private TokenizerShortBlock m_lastTokens; // 0x20
		private TokenizerShortBlock m_currentTokens; // 0x28
		private int m_indexTokens; // 0x30
		private TokenizerStringBlock m_headStrings; // 0x38
		private TokenizerStringBlock m_currentStrings; // 0x40
		private int m_indexStrings; // 0x48
	
		// Constructors
		internal TokenizerStream(); // 0x007926D4-0x0079276C
	
		// Methods
		internal void AddToken(short token); // 0x00792BCC-0x00792CF0
		internal void AddString(string str); // 0x00793160-0x007932A8
		internal void Reset(); // 0x0079276C-0x00792788
		internal short GetNextFullToken(); // 0x00792788-0x0079285C
		internal short GetNextToken(); // 0x00790B28-0x00790B40
		internal string GetNextString(); // 0x00790CE8-0x00790DAC
		internal void ThrowAwayNextString(); // 0x00790B40-0x00790B44
		internal void TagLastToken(short tag); // 0x00790B44-0x00790CE8
		internal int GetTokenCount(); // 0x007932A8-0x007932B0
		internal void GoToPosition(int position); // 0x00791CFC-0x00791D60
	}
}

namespace System.Security.Principal
{
	[ComVisible] // 0x00397900-0x00397914
	public interface IPrincipal // TypeDefIndex: 864
	{
	}
}

namespace System.Security.Cryptography
{
	[ComVisible] // 0x00397914-0x00397928
	public abstract class AsymmetricAlgorithm : IDisposable // TypeDefIndex: 865
	{
		// Fields
		protected int KeySizeValue; // 0x10
		protected KeySizes[] LegalKeySizesValue; // 0x18
	
		// Properties
		public virtual int KeySize { get; set; } // 0x00628BD8-0x00628BE0 0x00628BE0-0x00628E14
	
		// Constructors
		protected AsymmetricAlgorithm(); // 0x00628B4C-0x00628B54
	
		// Methods
		public void Dispose(); // 0x00628B54-0x00628B58
		public void Clear(); // 0x00628B58-0x00628BD4
		protected virtual void Dispose(bool disposing); // 0x00628BD4-0x00628BD8
		public virtual void FromXmlString(string xmlString); // 0x00628E14-0x00628E7C
		public virtual string ToXmlString(bool includePrivateParameters); // 0x00628E7C-0x00628EE4
	}

	[ComVisible] // 0x00397928-0x0039793C
	public abstract class AsymmetricSignatureDeformatter // TypeDefIndex: 866
	{
		// Constructors
		protected AsymmetricSignatureDeformatter(); // 0x00628EE4-0x00628EEC
	
		// Methods
		public abstract void SetKey(AsymmetricAlgorithm key);
		public abstract void SetHashAlgorithm(string strName);
		public abstract bool VerifySignature(byte[] rgbHash, byte[] rgbSignature);
	}

	[Serializable]
	[ComVisible] // 0x0039793C-0x00397950
	public enum CipherMode // TypeDefIndex: 867
	{
		CBC = 1,
		ECB = 2,
		OFB = 3,
		CFB = 4,
		CTS = 5
	}

	[Serializable]
	[ComVisible] // 0x00397950-0x00397964
	public enum PaddingMode // TypeDefIndex: 868
	{
		None = 1,
		PKCS7 = 2,
		Zeros = 3,
		ANSIX923 = 4,
		ISO10126 = 5
	}

	[ComVisible] // 0x00397964-0x00397978
	public sealed class KeySizes // TypeDefIndex: 869
	{
		// Fields
		private int m_minSize; // 0x10
		private int m_maxSize; // 0x14
		private int m_skipSize; // 0x18
	
		// Properties
		public int MinSize { get; } // 0x009D6BE8-0x009D6BF0 
		public int MaxSize { get; } // 0x009D6BF0-0x009D6BF8 
		public int SkipSize { get; } // 0x009D6BF8-0x009D6C00 
	
		// Constructors
		public KeySizes(int minSize, int maxSize, int skipSize); // 0x009D0E18-0x009D0E58
	
		// Methods
		internal bool IsLegal(int keySize); // 0x009D6C00-0x009D6C4C
		internal static bool IsLegalKeySize(KeySizes[] legalKeys, int size); // 0x009D6C4C-0x009D6D0C
	}

	[Serializable]
	[ComVisible] // 0x00397978-0x0039798C
	public class CryptographicException : SystemException // TypeDefIndex: 870
	{
		// Constructors
		public CryptographicException(); // 0x009CFDDC-0x009CFE50
		public CryptographicException(string message); // 0x009CFE50-0x009CFE84
		public CryptographicException(string format, string insert); // 0x009CFE84-0x009CFF2C
		public CryptographicException(string message, Exception inner); // 0x009CFF2C-0x009CFF60
		protected CryptographicException(SerializationInfo info, StreamingContext context); // 0x009CFF60-0x009CFF68
	}

	[Serializable]
	[ComVisible] // 0x0039798C-0x003979A0
	public class CryptographicUnexpectedOperationException : CryptographicException // TypeDefIndex: 871
	{
		// Constructors
		public CryptographicUnexpectedOperationException(); // 0x009CFF68-0x009CFF98
		public CryptographicUnexpectedOperationException(string message); // 0x009CFF98-0x009CFFE4
		protected CryptographicUnexpectedOperationException(SerializationInfo info, StreamingContext context); // 0x009CFFE4-0x009CFFEC
	}

	[Serializable]
	[ComVisible] // 0x003979A0-0x003979DC
	[Flags] // 0x003979A0-0x003979DC
	public enum CspProviderFlags // TypeDefIndex: 872
	{
		NoFlags = 0,
		UseMachineKeyStore = 1,
		UseDefaultKeyContainer = 2,
		UseNonExportableKey = 4,
		UseExistingKey = 8,
		UseArchivableKey = 16,
		UseUserProtectedKey = 32,
		NoPrompt = 64,
		CreateEphemeralKey = 128
	}

	[ComVisible] // 0x003979DC-0x003979F0
	public sealed class CspParameters // TypeDefIndex: 873
	{
		// Fields
		public int ProviderType; // 0x10
		public string ProviderName; // 0x18
		public string KeyContainerName; // 0x20
		public int KeyNumber; // 0x28
		private int m_flags; // 0x2C
	
		// Properties
		public CspProviderFlags Flags { get; set; } // 0x009CFFEC-0x009CFFF4 0x009CFFF4-0x009D0110
	
		// Constructors
		public CspParameters(); // 0x009D0110-0x009D0120
		public CspParameters(int dwTypeIn); // 0x009D0190-0x009D019C
		public CspParameters(int dwTypeIn, string strProviderNameIn, string strContainerNameIn); // 0x009D0120-0x009D0190
		internal CspParameters(int providerType, string providerName, string keyContainerName, CspProviderFlags flags); // 0x009D019C-0x009D01F8
	}

	[Serializable]
	[ComVisible] // 0x003979F0-0x00397A04
	public enum CryptoStreamMode // TypeDefIndex: 874
	{
		Read = 0,
		Write = 1
	}

	[ComVisible] // 0x00397A04-0x00397A18
	public class CryptoStream : Stream, IDisposable // TypeDefIndex: 875
	{
		// Fields
		private Stream _stream; // 0x28
		private ICryptoTransform _Transform; // 0x30
		private byte[] _InputBuffer; // 0x38
		private int _InputBufferIndex; // 0x40
		private int _InputBlockSize; // 0x44
		private byte[] _OutputBuffer; // 0x48
		private int _OutputBufferIndex; // 0x50
		private int _OutputBlockSize; // 0x54
		private CryptoStreamMode _transformMode; // 0x58
		private bool _canRead; // 0x5C
		private bool _canWrite; // 0x5D
		private bool _finalBlockTransformed; // 0x5E
	
		// Properties
		public override bool CanRead { get; } // 0x009CCA5C-0x009CCA64 
		public override bool CanSeek { get; } // 0x009CCA64-0x009CCA6C 
		public override bool CanWrite { get; } // 0x009CCA6C-0x009CCA74 
		public override long Length { get; } // 0x009CCA74-0x009CCAFC 
		public override long Position { get; set; } // 0x009CCAFC-0x009CCB84 0x009CCB84-0x009CCC0C
		public bool HasFlushedFinalBlock { get; } // 0x009CCC0C-0x009CCC14 
	
		// Nested types
		private struct HopToThreadPoolAwaitable : INotifyCompletion // TypeDefIndex: 876
		{
			// Properties
			public bool IsCompleted { get; } // 0x009CFD64-0x009CFDD4 
	
			// Methods
			public HopToThreadPoolAwaitable GetAwaiter(); // 0x009CFD5C-0x009CFD64
			public void OnCompleted(Action continuation); // 0x009CFDD4-0x009CFDD8
			public void GetResult(); // 0x009CFDD8-0x009CFDDC
		}
	
		[CompilerGenerated] // 0x00397A18-0x00397A28
		private struct <ReadAsyncInternal>d__34 : IAsyncStateMachine // TypeDefIndex: 877
		{
			// Fields
			public int <>1__state; // 0x00
			public AsyncTaskMethodBuilder<int> <>t__builder; // 0x08
			public CryptoStream <>4__this; // 0x20
			public int count; // 0x28
			public int offset; // 0x2C
			public byte[] buffer; // 0x30
			public CancellationToken cancellationToken; // 0x38
			private byte[] <tempInputBuffer>5__1; // 0x40
			private int <currentOutputIndex>5__2; // 0x48
			private int <bytesToDeliver>5__3; // 0x4C
			private SemaphoreSlim <sem>5__4; // 0x50
			private HopToThreadPoolAwaitable <>u__1; // 0x58
			private ConfiguredTaskAwaitable.ConfiguredTaskAwaiter <>u__2; // 0x60
			private int <>7__wrap1; // 0x70
			private ConfiguredTaskAwaitable<int> <>u__3; // 0x78
	
			// Methods
			private void MoveNext(); // 0x009CF150-0x009CF1B8
			[DebuggerHidden] // 0x0039F10C-0x0039F11C
			private void SetStateMachine(IAsyncStateMachine stateMachine); // 0x009CF1B8-0x009CFD48
		}
	
		[CompilerGenerated] // 0x00397A28-0x00397A38
		private struct <WriteAsyncInternal>d__37 : IAsyncStateMachine // TypeDefIndex: 878
		{
			// Fields
			public int <>1__state; // 0x00
			public AsyncTaskMethodBuilder <>t__builder; // 0x08
			public CryptoStream <>4__this; // 0x20
			public int count; // 0x28
			public int offset; // 0x2C
			public byte[] buffer; // 0x30
			public CancellationToken cancellationToken; // 0x38
			private int <bytesToWrite>5__1; // 0x40
			private int <currentInputIndex>5__2; // 0x44
			private int <numWholeBlocksInBytes>5__3; // 0x48
			private SemaphoreSlim <sem>5__4; // 0x50
			private HopToThreadPoolAwaitable <>u__1; // 0x58
			private ConfiguredTaskAwaitable.ConfiguredTaskAwaiter <>u__2; // 0x60
	
			// Methods
			private void MoveNext(); // 0x009CFD48-0x009CFD50
			[DebuggerHidden] // 0x0039F11C-0x0039F12C
			private void SetStateMachine(IAsyncStateMachine stateMachine); // 0x009CFD50-0x009CFD5C
		}
	
		// Constructors
		public CryptoStream(Stream stream, ICryptoTransform transform, CryptoStreamMode mode); // 0x009CC724-0x009CC8F8
	
		// Methods
		public void FlushFinalBlock(); // 0x009CCC14-0x009CCEA0
		public override void Flush(); // 0x009CCEA0-0x009CCEA4
		public override long Seek(long offset, SeekOrigin origin); // 0x009CCEA4-0x009CCF2C
		public override int Read([In, Out] byte[] buffer, int offset, int count); // 0x009CCF2C-0x009CD650
		public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken); // 0x009CD650-0x009CD904
		private async Task<int> ReadAsyncInternal(byte[] buffer, int offset, int count, CancellationToken cancellationToken); // 0x009CD904-0x009CDA40
		public override void Write(byte[] buffer, int offset, int count); // 0x009CDA40-0x009CE000
		public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken); // 0x009CE000-0x009CE2AC
		private async Task WriteAsyncInternal(byte[] buffer, int offset, int count, CancellationToken cancellationToken); // 0x009CE2AC-0x009CE3D8
		protected override void Dispose(bool disposing); // 0x009CE3D8-0x009CF150
		private void InitializeBuffer(); // 0x009CC8F8-0x009CCA5C
	}

	[ComVisible] // 0x00397A38-0x00397A4C
	public abstract class DES : SymmetricAlgorithm // TypeDefIndex: 879
	{
		// Fields
		private static KeySizes[] s_legalBlockSizes; // 0x00
		private static KeySizes[] s_legalKeySizes; // 0x08
	
		// Properties
		public override byte[] Key { get; set; } // 0x009D0290-0x009D03DC 0x009D0788-0x009D09BC
	
		// Constructors
		protected DES(); // 0x009D01F8-0x009D0290
		static DES(); // 0x009D0C84-0x009D0E18
	
		// Methods
		public static DES Create(); // 0x009D09BC-0x009D0A14
		public static bool IsWeakKey(byte[] rgbKey); // 0x009D03DC-0x009D053C
		public static bool IsSemiWeakKey(byte[] rgbKey); // 0x009D053C-0x009D0788
		private static bool IsLegalKeySize(byte[] rgbKey); // 0x009D0B0C-0x009D0B2C
		private static ulong QuadWordFromBigEndian(byte[] block); // 0x009D0B2C-0x009D0C84
	}

	[ComVisible] // 0x00397A4C-0x00397A60
	public sealed class DESCryptoServiceProvider : DES // TypeDefIndex: 880
	{
		// Constructors
		public DESCryptoServiceProvider(); // 0x009D0A14-0x009D0B0C
	
		// Methods
		public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV); // 0x009D0E58-0x009D0F90
		public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV); // 0x009D1214-0x009D134C
		public override void GenerateKey(); // 0x009D134C-0x009D14A0
		public override void GenerateIV(); // 0x009D14A0-0x009D1540
	}

	[Serializable]
	[ComVisible] // 0x00397A60-0x00397A74
	public struct DSAParameters // TypeDefIndex: 881
	{
		// Fields
		public byte[] P; // 0x00
		public byte[] Q; // 0x08
		public byte[] G; // 0x10
		public byte[] Y; // 0x18
		public byte[] J; // 0x20
		[NonSerialized]
		public byte[] X; // 0x28
		public byte[] Seed; // 0x30
		public int Counter; // 0x38
	}

	[ComVisible] // 0x00397A74-0x00397A88
	public abstract class DSA : AsymmetricAlgorithm // TypeDefIndex: 882
	{
		// Constructors
		protected DSA(); // 0x009D2E60-0x009D2E68
	
		// Methods
		public static DSA Create(); // 0x009D2E68-0x009D2EDC
		public override void FromXmlString(string xmlString); // 0x009D2F14-0x009D35FC
		public override string ToXmlString(bool includePrivateParameters); // 0x009D35FC-0x009D3A68
		public abstract DSAParameters ExportParameters(bool includePrivateParameters);
		public abstract void ImportParameters(DSAParameters parameters);
	}

	[ComVisible] // 0x00397A88-0x00397A9C
	public abstract class HashAlgorithm : ICryptoTransform // TypeDefIndex: 883
	{
		// Fields
		protected int HashSizeValue; // 0x10
		protected internal byte[] HashValue; // 0x18
		protected int State; // 0x20
		private bool m_bDisposed; // 0x24
	
		// Properties
		public virtual int HashSize { get; } // 0x009D6730-0x009D6738 
		public virtual byte[] Hash { get; } // 0x009D6738-0x009D68A4 
		public virtual int InputBlockSize { get; } // 0x009D6B0C-0x009D6B14 
		public virtual int OutputBlockSize { get; } // 0x009D6B14-0x009D6B1C 
		public virtual bool CanTransformMultipleBlocks { get; } // 0x009D6B1C-0x009D6B24 
	
		// Constructors
		protected HashAlgorithm(); // 0x009D6728-0x009D6730
	
		// Methods
		public byte[] ComputeHash(byte[] buffer); // 0x009D4A2C-0x009D4BC4
		public byte[] ComputeHash(byte[] buffer, int offset, int count); // 0x009D68A4-0x009D6B0C
		public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset); // 0x009D4E70-0x009D606C
		public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x009D6250-0x009D6488
		public void Dispose(); // 0x009D6B24-0x009D6BA4
		protected virtual void Dispose(bool disposing); // 0x009D6BA4-0x009D6BE8
		public abstract void Initialize();
		protected abstract void HashCore(byte[] array, int ibStart, int cbSize);
		protected abstract byte[] HashFinal();
	}

	[ComVisible] // 0x00397A9C-0x00397AB0
	public abstract class HMAC : KeyedHashAlgorithm // TypeDefIndex: 884
	{
		// Fields
		private int blockSizeValue; // 0x30
		internal string m_hashName; // 0x38
		internal HashAlgorithm m_hash1; // 0x40
		internal HashAlgorithm m_hash2; // 0x48
		private byte[] m_inner; // 0x50
		private byte[] m_outer; // 0x58
		private bool m_hashing; // 0x60
	
		// Properties
		protected int BlockSizeValue { get; } // 0x009D46DC-0x009D46E4 
		public override byte[] Key { set; } // 0x009D4BC4-0x009D4C74
	
		// Constructors
		protected HMAC(); // 0x009D6650-0x009D6660
	
		// Methods
		private void UpdateIOPadBuffers(); // 0x009D46E4-0x009D4914
		internal void InitializeKey(byte[] key); // 0x009D4914-0x009D4A2C
		public static HMAC Create(); // 0x009D4C74-0x009D4CCC
		public override void Initialize(); // 0x009D4D44-0x009D4DAC
		protected override void HashCore(byte[] rgb, int ib, int cb); // 0x009D4DAC-0x009D4E70
		protected override byte[] HashFinal(); // 0x009D606C-0x009D6250
		protected override void Dispose(bool disposing); // 0x009D6488-0x009D65F0
	}

	[ComVisible] // 0x00397AB0-0x00397AC4
	public class HMACSHA1 : HMAC // TypeDefIndex: 885
	{
		// Constructors
		public HMACSHA1(); // 0x009D4CCC-0x009D4D44
		public HMACSHA1(byte[] key); // 0x009D6668-0x009D6670
		public HMACSHA1(byte[] key, bool useManagedSha1); // 0x009D6670-0x009D6728
	}

	[ComVisible] // 0x00397AC4-0x00397AD8
	public interface ICryptoTransform : IDisposable // TypeDefIndex: 886
	{
		// Properties
		int InputBlockSize { get; }
		int OutputBlockSize { get; }
		bool CanTransformMultipleBlocks { get; }
	
		// Methods
		int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
		byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount);
	}

	[ComVisible] // 0x00397AD8-0x00397AEC
	public abstract class KeyedHashAlgorithm : HashAlgorithm // TypeDefIndex: 887
	{
		// Fields
		protected byte[] KeyValue; // 0x28
	
		// Properties
		public virtual byte[] Key { set; } // 0x009D6D0C-0x009D6E44
	
		// Constructors
		protected KeyedHashAlgorithm(); // 0x009D6660-0x009D6668
	
		// Methods
		protected override void Dispose(bool disposing); // 0x009D65F0-0x009D6650
	}

	[ComVisible] // 0x00397AEC-0x00397B00
	public abstract class MD5 : HashAlgorithm // TypeDefIndex: 888
	{
		// Constructors
		protected MD5(); // 0x009D6E44-0x009D6E70
	
		// Methods
		public static MD5 Create(); // 0x009D6E70-0x009D6EC8
	}

	[ComVisible] // 0x00397B00-0x00397B14
	public abstract class RandomNumberGenerator : IDisposable // TypeDefIndex: 889
	{
		// Constructors
		protected RandomNumberGenerator(); // 0x009DDFBC-0x009DDFC4
	
		// Methods
		public static RandomNumberGenerator Create(); // 0x009E02C4-0x009E031C
		public void Dispose(); // 0x009E031C-0x009E0398
		protected virtual void Dispose(bool disposing); // 0x009DE318-0x009DE31C
		public abstract void GetBytes(byte[] data);
	}

	[ComVisible] // 0x00397B14-0x00397B28
	public abstract class RC2 : SymmetricAlgorithm // TypeDefIndex: 890
	{
		// Fields
		protected int EffectiveKeySizeValue; // 0x44
		private static KeySizes[] s_legalBlockSizes; // 0x00
		private static KeySizes[] s_legalKeySizes; // 0x08
	
		// Properties
		public virtual int EffectiveKeySize { get; } // 0x009D9D4C-0x009D9D64 
		public override int KeySize { get; set; } // 0x009D9D64-0x009D9D6C 0x009D9D6C-0x009D9E24
	
		// Constructors
		protected RC2(); // 0x009D9CB4-0x009D9D4C
		static RC2(); // 0x009D9FF0-0x009DA18C
	
		// Methods
		public static RC2 Create(); // 0x009D9E24-0x009D9E7C
	}

	[ComVisible] // 0x00397B28-0x00397B3C
	public sealed class RC2CryptoServiceProvider : RC2 // TypeDefIndex: 891
	{
		// Fields
		private bool m_use40bitSalt; // 0x48
		private static KeySizes[] s_legalKeySizes; // 0x00
	
		// Properties
		public override int EffectiveKeySize { get; } // 0x009DA18C-0x009DA194 
	
		// Constructors
		public RC2CryptoServiceProvider(); // 0x009D9E7C-0x009D9FF0
		static RC2CryptoServiceProvider(); // 0x009DAC34-0x009DAD28
	
		// Methods
		public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV); // 0x009DA194-0x009DA25C
		public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV); // 0x009DAA1C-0x009DAAE4
		public override void GenerateKey(); // 0x009DAAE4-0x009DAB94
		public override void GenerateIV(); // 0x009DAB94-0x009DAC34
	}

	[ComVisible] // 0x00397B3C-0x00397B50
	public abstract class Rijndael : SymmetricAlgorithm // TypeDefIndex: 892
	{
		// Fields
		private static KeySizes[] s_legalBlockSizes; // 0x00
		private static KeySizes[] s_legalKeySizes; // 0x08
	
		// Constructors
		protected Rijndael(); // 0x009E0398-0x009E0430
		static Rijndael(); // 0x009E0430-0x009E05D4
	}

	[ComVisible] // 0x00397B50-0x00397B64
	public sealed class RijndaelManaged : Rijndael // TypeDefIndex: 893
	{
		// Constructors
		public RijndaelManaged(); // 0x009E05D4-0x009E06A0
	
		// Methods
		public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV); // 0x009E06A0-0x009E06B8
		public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV); // 0x009E0800-0x009E0818
		public override void GenerateKey(); // 0x009E0818-0x009E0898
		public override void GenerateIV(); // 0x009E0898-0x009E0918
		private ICryptoTransform NewEncryptor(byte[] rgbKey, CipherMode mode, byte[] rgbIV, int feedbackSize, RijndaelManagedTransformMode encryptMode); // 0x009E06B8-0x009E0800
	}

	[Serializable]
	internal enum RijndaelManagedTransformMode // TypeDefIndex: 894
	{
		Encrypt = 0,
		Decrypt = 1
	}

	[ComVisible] // 0x00397B64-0x00397B78
	public sealed class RijndaelManagedTransform : ICryptoTransform // TypeDefIndex: 895
	{
		// Fields
		private CipherMode m_cipherMode; // 0x10
		private PaddingMode m_paddingValue; // 0x14
		private RijndaelManagedTransformMode m_transformMode; // 0x18
		private int m_blockSizeBits; // 0x1C
		private int m_blockSizeBytes; // 0x20
		private int m_inputBlockSize; // 0x24
		private int m_outputBlockSize; // 0x28
		private int[] m_encryptKeyExpansion; // 0x30
		private int[] m_decryptKeyExpansion; // 0x38
		private int m_Nr; // 0x40
		private int m_Nb; // 0x44
		private int m_Nk; // 0x48
		private int[] m_encryptindex; // 0x50
		private int[] m_decryptindex; // 0x58
		private int[] m_IV; // 0x60
		private int[] m_lastBlockBuffer; // 0x68
		private byte[] m_depadBuffer; // 0x70
		private byte[] m_shiftRegister; // 0x78
		private static readonly byte[] s_Sbox; // 0x00
		private static readonly int[] s_Rcon; // 0x08
		private static readonly int[] s_T; // 0x10
		private static readonly int[] s_TF; // 0x18
		private static readonly int[] s_iT; // 0x20
		private static readonly int[] s_iTF; // 0x28
	
		// Properties
		public int InputBlockSize { get; } // 0x009E18C0-0x009E18C8 
		public int OutputBlockSize { get; } // 0x009E18C8-0x009E18D0 
		public bool CanTransformMultipleBlocks { get; } // 0x009E18D0-0x009E18D8 
	
		// Constructors
		internal RijndaelManagedTransform(byte[] rgbKey, CipherMode mode, byte[] rgbIV, int blockSize, int feedbackSize, PaddingMode PaddingValue, RijndaelManagedTransformMode transformMode); // 0x009E0918-0x009E106C
		static RijndaelManagedTransform(); // 0x009E4330-0x009E44F8
	
		// Methods
		public void Dispose(); // 0x009E17F0-0x009E17F8
		private void Dispose(bool disposing); // 0x009E17F8-0x009E18C0
		public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset); // 0x009E18D8-0x009E1BA0
		public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x009E3AC8-0x009E3DA8
		public void Reset(); // 0x009E3DA8-0x009E3E20
		private int EncryptData(byte[] inputBuffer, int inputOffset, int inputCount, ref byte[] outputBuffer, int outputOffset, PaddingMode paddingMode, bool fLast); // 0x009E1BA0-0x009E2B8C
		private int DecryptData(byte[] inputBuffer, int inputOffset, int inputCount, ref byte[] outputBuffer, int outputOffset, PaddingMode paddingMode, bool fLast); // 0x009E2B8C-0x009E3AC8
		private unsafe void Enc(int* encryptindex, int* encryptKeyExpansion, int* T, int* TF, int* work, int* temp); // 0x009E3E20-0x009E3FC0
		private unsafe void Dec(int* decryptindex, int* decryptKeyExpansion, int* iT, int* iTF, int* work, int* temp); // 0x009E3FC0-0x009E4174
		private void GenerateKeyExpansion(byte[] rgbKey); // 0x009E106C-0x009E17F0
		private static int rot1(int val); // 0x009E4328-0x009E4330
		private static int rot2(int val); // 0x009E4320-0x009E4328
		private static int rot3(int val); // 0x009E4174-0x009E417C
		private static int SubWord(int a); // 0x009E417C-0x009E42FC
		private static int MulX(int x); // 0x009E42FC-0x009E4320
	}

	[ComVisible] // 0x00397B78-0x00397B8C
	public abstract class RIPEMD160 : HashAlgorithm // TypeDefIndex: 896
	{
		// Constructors
		protected RIPEMD160(); // 0x009DBFE8-0x009DC014
	
		// Methods
		public static RIPEMD160 Create(); // 0x009DC014-0x009DC06C
	}

	[ComVisible] // 0x00397B8C-0x00397BA0
	public class RIPEMD160Managed : RIPEMD160 // TypeDefIndex: 897
	{
		// Fields
		private byte[] _buffer; // 0x28
		private long _count; // 0x30
		private uint[] _stateMD160; // 0x38
		private uint[] _blockDWords; // 0x40
	
		// Constructors
		public RIPEMD160Managed(); // 0x009DC06C-0x009DC168
	
		// Methods
		public override void Initialize(); // 0x009DC29C-0x009DC300
		protected override void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x009DC300-0x009DC304
		protected override byte[] HashFinal(); // 0x009DC4B4-0x009DC4B8
		private void InitializeState(); // 0x009DC168-0x009DC29C
		private void _HashData(byte[] partIn, int ibStart, int cbSize); // 0x009DC304-0x009DC4B4
		private byte[] _EndHash(); // 0x009DC4B8-0x009DC738
		private static unsafe void MDTransform(uint* blockDWords, uint* state, byte* block); // 0x009DC738-0x009DDE84
		private static uint F(uint x, uint y, uint z); // 0x009DDE84-0x009DDE90
		private static uint G(uint x, uint y, uint z); // 0x009DDE90-0x009DDEA0
		private static uint H(uint x, uint y, uint z); // 0x009DDEA0-0x009DDEAC
		private static uint I(uint x, uint y, uint z); // 0x009DDEAC-0x009DDEBC
		private static uint J(uint x, uint y, uint z); // 0x009DDEBC-0x009DDEC8
	}

	[Serializable]
	[ComVisible] // 0x00397BA0-0x00397BB4
	public struct RSAParameters // TypeDefIndex: 898
	{
		// Fields
		public byte[] Exponent; // 0x00
		public byte[] Modulus; // 0x08
		[NonSerialized]
		public byte[] P; // 0x10
		[NonSerialized]
		public byte[] Q; // 0x18
		[NonSerialized]
		public byte[] DP; // 0x20
		[NonSerialized]
		public byte[] DQ; // 0x28
		[NonSerialized]
		public byte[] InverseQ; // 0x30
		[NonSerialized]
		public byte[] D; // 0x38
	}

	[ComVisible] // 0x00397BB4-0x00397BC8
	public abstract class RSA : AsymmetricAlgorithm // TypeDefIndex: 899
	{
		// Constructors
		protected RSA(); // 0x009DE31C-0x009DE324
	
		// Methods
		public static RSA Create(); // 0x009DE324-0x009DE398
		public virtual byte[] EncryptValue(byte[] rgb); // 0x009DE3D0-0x009DE458
		public override void FromXmlString(string xmlString); // 0x009DE458-0x009DEAA8
		public override string ToXmlString(bool includePrivateParameters); // 0x009DEAA8-0x009DEEB4
		public abstract RSAParameters ExportParameters(bool includePrivateParameters);
		public abstract void ImportParameters(RSAParameters parameters);
	}

	[ComVisible] // 0x00397BC8-0x00397BDC
	public sealed class RSACryptoServiceProvider : RSA, ICspAsymmetricAlgorithm // TypeDefIndex: 900
	{
		// Fields
		private static CspProviderFlags s_UseMachineKeyStore; // 0x00
		private KeyPairPersistence store; // 0x20
		private bool persistKey; // 0x28
		private bool persisted; // 0x29
		private bool privateKeyExportable; // 0x2A
		private bool m_disposed; // 0x2B
		private RSAManaged rsa; // 0x30
	
		// Properties
		public static bool UseMachineKeyStore { get; } // 0x009DEEB4-0x009DEF28 
		public override int KeySize { get; } // 0x009DF410-0x009DF430 
	
		// Constructors
		public RSACryptoServiceProvider(); // 0x009DE398-0x009DE3D0
		public RSACryptoServiceProvider(CspParameters parameters); // 0x009DEF64-0x009DEF74
		public RSACryptoServiceProvider(int dwKeySize); // 0x009DEF28-0x009DEF64
		public RSACryptoServiceProvider(int dwKeySize, CspParameters parameters); // 0x009DEF74-0x009DEFE0
		static RSACryptoServiceProvider(); // 0x009DF79C-0x009DF7A0
	
		// Methods
		private void Common(int dwKeySize, bool parameters); // 0x009DEFE0-0x009DF218
		private void Common(CspParameters p); // 0x009DF218-0x009DF390
		~RSACryptoServiceProvider(); // 0x009DF390-0x009DF410
		public override byte[] EncryptValue(byte[] rgb); // 0x009DF430-0x009DF46C
		public override RSAParameters ExportParameters(bool includePrivateParameters); // 0x009DF46C-0x009DF60C
		public override void ImportParameters(RSAParameters parameters); // 0x009DF60C-0x009DF684
		protected override void Dispose(bool disposing); // 0x009DF684-0x009DF6EC
		private void OnKeyGenerated(object sender, EventArgs e); // 0x009DF6EC-0x009DF79C
	}

	[ComVisible] // 0x00397BDC-0x00397BF0
	public abstract class SHA1 : HashAlgorithm // TypeDefIndex: 901
	{
		// Constructors
		protected SHA1(); // 0x0077E9B8-0x0077E9E4
	
		// Methods
		public static SHA1 Create(); // 0x0077E9E4-0x0077EA3C
	}

	[ComVisible] // 0x00397BF0-0x00397C04
	public class SHA1Managed : SHA1 // TypeDefIndex: 902
	{
		// Fields
		private byte[] _buffer; // 0x28
		private long _count; // 0x30
		private uint[] _stateSHA1; // 0x38
		private uint[] _expandedBuffer; // 0x40
	
		// Constructors
		public SHA1Managed(); // 0x00781120-0x0078121C
	
		// Methods
		public override void Initialize(); // 0x00781350-0x007813B4
		protected override void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x007813B4-0x007813B8
		protected override byte[] HashFinal(); // 0x00781568-0x0078156C
		private void InitializeState(); // 0x0078121C-0x00781350
		private void _HashData(byte[] partIn, int ibStart, int cbSize); // 0x007813B8-0x00781568
		private byte[] _EndHash(); // 0x0078156C-0x007817E8
		private static unsafe void SHATransform(uint* expandedBuffer, uint* state, byte* block); // 0x007817E8-0x00781CDC
		private static unsafe void SHAExpand(uint* x); // 0x00781EEC-0x00781F28
	}

	[ComVisible] // 0x00397C04-0x00397C18
	public abstract class SHA256 : HashAlgorithm // TypeDefIndex: 903
	{
		// Constructors
		protected SHA256(); // 0x00781F28-0x00781F54
	
		// Methods
		public static SHA256 Create(); // 0x00781F54-0x00781FAC
	}

	[ComVisible] // 0x00397C18-0x00397C2C
	public class SHA256Managed : SHA256 // TypeDefIndex: 904
	{
		// Fields
		private byte[] _buffer; // 0x28
		private long _count; // 0x30
		private uint[] _stateSHA256; // 0x38
		private uint[] _W; // 0x40
		private static readonly uint[] _K; // 0x00
	
		// Constructors
		public SHA256Managed(); // 0x00781FAC-0x007820A8
		static SHA256Managed(); // 0x0078412C-0x007841A8
	
		// Methods
		public override void Initialize(); // 0x00782284-0x007822E8
		protected override void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x007822E8-0x007822EC
		protected override byte[] HashFinal(); // 0x00782504-0x00782508
		private void InitializeState(); // 0x007820A8-0x00782284
		private void _HashData(byte[] partIn, int ibStart, int cbSize); // 0x007822EC-0x00782504
		private byte[] _EndHash(); // 0x00782508-0x00782784
		private static unsafe void SHATransform(uint* expandedBuffer, uint* state, byte* block); // 0x00782784-0x00782E94
		private static uint RotateRight(uint x, int n); // 0x00784048-0x00784054
		private static uint Ch(uint x, uint y, uint z); // 0x00782FB8-0x00782FC8
		private static uint Maj(uint x, uint y, uint z); // 0x00784034-0x00784048
		private static uint sigma_0(uint x); // 0x00784054-0x007840C0
		private static uint sigma_1(uint x); // 0x007840C0-0x0078412C
		private static uint Sigma_0(uint x); // 0x00782FC8-0x00784034
		private static uint Sigma_1(uint x); // 0x00782F4C-0x00782FB8
		private static unsafe void SHA256Expand(uint* x); // 0x00782E94-0x00782F4C
	}

	[ComVisible] // 0x00397C2C-0x00397C40
	public abstract class SHA384 : HashAlgorithm // TypeDefIndex: 905
	{
		// Constructors
		protected SHA384(); // 0x007841A8-0x007841D4
	
		// Methods
		public static SHA384 Create(); // 0x007841D4-0x0078422C
	}

	[ComVisible] // 0x00397C40-0x00397C54
	public class SHA384Managed : SHA384 // TypeDefIndex: 906
	{
		// Fields
		private byte[] _buffer; // 0x28
		private ulong _count; // 0x30
		private ulong[] _stateSHA384; // 0x38
		private ulong[] _W; // 0x40
		private static readonly ulong[] _K; // 0x00
	
		// Constructors
		public SHA384Managed(); // 0x0078422C-0x00784328
		static SHA384Managed(); // 0x00785768-0x007857E4
	
		// Methods
		public override void Initialize(); // 0x00784544-0x007845A8
		protected override void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x007845A8-0x007845AC
		protected override byte[] HashFinal(); // 0x007847C4-0x007847C8
		private void InitializeState(); // 0x00784328-0x00784544
		private void _HashData(byte[] partIn, int ibStart, int cbSize); // 0x007845AC-0x007847C4
		private byte[] _EndHash(); // 0x007847C8-0x00784A48
		private static unsafe void SHATransform(ulong* expandedBuffer, ulong* state, byte* block); // 0x00784A48-0x00785144
		private static ulong RotateRight(ulong x, int n); // 0x00785684-0x00785690
		private static ulong Ch(ulong x, ulong y, ulong z); // 0x007855F4-0x00785604
		private static ulong Maj(ulong x, ulong y, ulong z); // 0x00785670-0x00785684
		private static ulong Sigma_0(ulong x); // 0x00785604-0x00785670
		private static ulong Sigma_1(ulong x); // 0x00785588-0x007855F4
		private static ulong sigma_0(ulong x); // 0x00785690-0x007856FC
		private static ulong sigma_1(ulong x); // 0x007856FC-0x00785768
		private static unsafe void SHA384Expand(ulong* x); // 0x007854D0-0x00785588
	}

	[ComVisible] // 0x00397C54-0x00397C68
	public abstract class SHA512 : HashAlgorithm // TypeDefIndex: 907
	{
		// Constructors
		protected SHA512(); // 0x007857E4-0x00785810
	
		// Methods
		public static SHA512 Create(); // 0x00785810-0x00785868
	}

	[ComVisible] // 0x00397C68-0x00397C7C
	public class SHA512Managed : SHA512 // TypeDefIndex: 908
	{
		// Fields
		private byte[] _buffer; // 0x28
		private ulong _count; // 0x30
		private ulong[] _stateSHA512; // 0x38
		private ulong[] _W; // 0x40
		private static readonly ulong[] _K; // 0x00
	
		// Constructors
		public SHA512Managed(); // 0x00785868-0x00785964
		static SHA512Managed(); // 0x00786A18-0x00786A94
	
		// Methods
		public override void Initialize(); // 0x00785B80-0x00785BE4
		protected override void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x00785BE4-0x00785BE8
		protected override byte[] HashFinal(); // 0x00785E00-0x00785E04
		private void InitializeState(); // 0x00785964-0x00785B80
		private void _HashData(byte[] partIn, int ibStart, int cbSize); // 0x00785BE8-0x00785E00
		private byte[] _EndHash(); // 0x00785E04-0x00786084
		private static unsafe void SHATransform(ulong* expandedBuffer, ulong* state, byte* block); // 0x00786084-0x00786780
		private static ulong RotateRight(ulong x, int n); // 0x00786934-0x00786940
		private static ulong Ch(ulong x, ulong y, ulong z); // 0x007868A4-0x007868B4
		private static ulong Maj(ulong x, ulong y, ulong z); // 0x00786920-0x00786934
		private static ulong Sigma_0(ulong x); // 0x007868B4-0x00786920
		private static ulong Sigma_1(ulong x); // 0x00786838-0x007868A4
		private static ulong sigma_0(ulong x); // 0x00786940-0x007869AC
		private static ulong sigma_1(ulong x); // 0x007869AC-0x00786A18
		private static unsafe void SHA512Expand(ulong* x); // 0x00786780-0x00786838
	}

	[ComVisible] // 0x00397C7C-0x00397C90
	public abstract class SymmetricAlgorithm : IDisposable // TypeDefIndex: 909
	{
		// Fields
		protected int BlockSizeValue; // 0x10
		protected int FeedbackSizeValue; // 0x14
		protected byte[] IVValue; // 0x18
		protected byte[] KeyValue; // 0x20
		protected KeySizes[] LegalBlockSizesValue; // 0x28
		protected KeySizes[] LegalKeySizesValue; // 0x30
		protected int KeySizeValue; // 0x38
		protected CipherMode ModeValue; // 0x3C
		protected PaddingMode PaddingValue; // 0x40
	
		// Properties
		public virtual int BlockSize { get; set; } // 0x00786C3C-0x00786C44 0x00786C44-0x00786E8C
		public virtual int FeedbackSize { get; } // 0x00786E8C-0x00786E94 
		public virtual byte[] IV { get; set; } // 0x00786E94-0x00786F88 0x00786F88-0x0078810C
		public virtual byte[] Key { get; set; } // 0x0078810C-0x00788200 0x00788200-0x0078838C
		public virtual KeySizes[] LegalKeySizes { get; } // 0x0078850C-0x007885E4 
		public virtual int KeySize { get; set; } // 0x007885E4-0x007885EC 0x007885EC-0x007886A8
		public virtual CipherMode Mode { get; set; } // 0x007886A8-0x007886B0 0x007886B0-0x00788764
		public virtual PaddingMode Padding { get; set; } // 0x00788764-0x0078876C 0x0078876C-0x00788820
	
		// Constructors
		protected SymmetricAlgorithm(); // 0x00786A94-0x00786AC4
	
		// Methods
		public void Dispose(); // 0x00786AC4-0x00786B40
		public void Clear(); // 0x00786B40-0x00786BE4
		protected virtual void Dispose(bool disposing); // 0x00786BE4-0x00786C3C
		public bool ValidKeySize(int bitLength); // 0x0078838C-0x0078850C
		public virtual ICryptoTransform CreateEncryptor(); // 0x00788820-0x00788874
		public abstract ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV);
		public virtual ICryptoTransform CreateDecryptor(); // 0x00788874-0x007888C8
		public abstract ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV);
		public abstract void GenerateKey();
		public abstract void GenerateIV();
	}

	[ComVisible] // 0x00397C90-0x00397CA4
	public abstract class TripleDES : SymmetricAlgorithm // TypeDefIndex: 910
	{
		// Fields
		private static KeySizes[] s_legalBlockSizes; // 0x00
		private static KeySizes[] s_legalKeySizes; // 0x08
	
		// Properties
		public override byte[] Key { get; set; } // 0x0078896C-0x00788A90 0x00788C10-0x00788E14
	
		// Constructors
		protected TripleDES(); // 0x007888C8-0x0078896C
		static TripleDES(); // 0x0078929C-0x00789430
	
		// Methods
		public static TripleDES Create(); // 0x00788E14-0x00788E6C
		public static bool IsWeakKey(byte[] rgbKey); // 0x00788A90-0x00788C10
		private static bool EqualBytes(byte[] rgbKey, int start1, int start2, int count); // 0x00789098-0x0078929C
		private static bool IsLegalKeySize(byte[] rgbKey); // 0x00788EFC-0x00788F20
	}

	[ComVisible] // 0x00397CA4-0x00397CB8
	public sealed class TripleDESCryptoServiceProvider : TripleDES // TypeDefIndex: 911
	{
		// Constructors
		public TripleDESCryptoServiceProvider(); // 0x00788E6C-0x00788EFC
	
		// Methods
		public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV); // 0x00789438-0x00789544
		public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV); // 0x0078987C-0x00789988
		public override void GenerateKey(); // 0x00789988-0x00789ABC
		public override void GenerateIV(); // 0x00789B9C-0x00789C38
	}

	internal static class Utils // TypeDefIndex: 912
	{
		// Fields
		private static RNGCryptoServiceProvider _rng; // 0x00
	
		// Properties
		internal static RNGCryptoServiceProvider StaticRandomNumberGenerator { get; } // 0x00789ABC-0x00789B9C 
	
		// Constructors
		static Utils(); // 0x00789E7C-0x00789E80
	
		// Methods
		internal static byte[] GenerateRandom(int keySize); // 0x00789E80-0x00789F24
		internal static bool HasAlgorithm(int dwCalg, int dwKeySize); // 0x00789430-0x00789438
		internal static string DiscardWhiteSpaces(string inputBuffer); // 0x00789F24-0x00789FA0
		internal static string DiscardWhiteSpaces(string inputBuffer, int inputOffset, int inputCount); // 0x00789FA8-0x0078A160
		internal static int ConvertByteArrayToInt(byte[] input); // 0x0078A200-0x0078A27C
		internal static byte[] ConvertIntToByteArray(int dwInput); // 0x0078A27C-0x0078A404
		internal static byte[] FixupKeyParity(byte[] key); // 0x00788F20-0x00789098
		internal static unsafe void DWORDFromLittleEndian(uint* x, int digits, byte* block); // 0x0078A404-0x0078A450
		internal static void DWORDToLittleEndian(byte[] block, uint[] x, int digits); // 0x0078A450-0x0078A610
		internal static unsafe void DWORDFromBigEndian(uint* x, int digits, byte* block); // 0x00781E9C-0x00781EEC
		internal static void DWORDToBigEndian(byte[] block, uint[] x, int digits); // 0x00781CDC-0x00781E9C
		internal static unsafe void QuadWordFromBigEndian(ulong* x, int digits, byte* block); // 0x00785450-0x007854D0
		internal static void QuadWordToBigEndian(byte[] block, ulong[] x, int digits); // 0x00785144-0x00785450
	}

	[ComVisible] // 0x00397CB8-0x00397CCC
	public class CryptoConfig // TypeDefIndex: 913
	{
		// Properties
		[MonoLimitation] // 0x0039FDA8-0x0039FDE0
		public static bool AllowOnlyFipsAlgorithms { get; } // 0x0062953C-0x00629544 
	
		// Methods
		public static byte[] EncodeOID(string str); // 0x00628EEC-0x00629394
		private static byte[] EncodeLongNumber(long x); // 0x00629394-0x0062953C
		public static string MapNameToOID(string name); // 0x00629544-0x00629B48
	}

	internal class DESTransform : SymmetricTransform // TypeDefIndex: 914
	{
		// Fields
		internal static readonly int KEY_BIT_SIZE; // 0x00
		internal static readonly int KEY_BYTE_SIZE; // 0x04
		internal static readonly int BLOCK_BIT_SIZE; // 0x08
		internal static readonly int BLOCK_BYTE_SIZE; // 0x0C
		private byte[] keySchedule; // 0x58
		private byte[] byteBuff; // 0x60
		private uint[] dwordBuff; // 0x68
		private static readonly uint[] spBoxes; // 0x10
		private static readonly byte[] PC1; // 0x18
		private static readonly byte[] leftRotTotal; // 0x20
		private static readonly byte[] PC2; // 0x28
		internal static readonly uint[] ipTab; // 0x30
		internal static readonly uint[] fpTab; // 0x38
	
		// Constructors
		internal DESTransform(SymmetricAlgorithm symmAlgo, bool encryption, byte[] key, byte[] iv); // 0x009D0F90-0x009D1214
		static DESTransform(); // 0x009D2C8C-0x009D2E60
	
		// Methods
		private uint CipherFunct(uint r, int n); // 0x009D1B78-0x009D1FE0
		internal static void Permutation(byte[] input, byte[] output, uint[] permTab, bool preSwap); // 0x009D1FE0-0x009D2590
		private static void BSwap(byte[] byteBuff); // 0x009D2590-0x009D27B4
		internal void SetKey(byte[] key); // 0x009D1614-0x009D1B78
		public void ProcessBlock(byte[] input, byte[] output); // 0x009D27B4-0x009D2BD8
		protected override void ECB(byte[] input, byte[] output); // 0x009D2BD8-0x009D2C8C
		internal static byte[] GetStrongKey(); // 0x009D1540-0x009D1614
	}

	[ComVisible] // 0x00397CCC-0x00397CE0
	public sealed class DSACryptoServiceProvider : DSA, ICspAsymmetricAlgorithm // TypeDefIndex: 915
	{
		// Fields
		private KeyPairPersistence store; // 0x20
		private bool persistKey; // 0x28
		private bool persisted; // 0x29
		private bool privateKeyExportable; // 0x2A
		private bool m_disposed; // 0x2B
		private DSAManaged dsa; // 0x30
		private static bool useMachineKeyStore; // 0x00
	
		// Properties
		public override int KeySize { get; } // 0x009D3D30-0x009D3D64 
	
		// Constructors
		public DSACryptoServiceProvider(); // 0x009D2EDC-0x009D2F14
		public DSACryptoServiceProvider(int dwKeySize); // 0x009D3A68-0x009D3AA4
	
		// Methods
		private void Common(int dwKeySize, bool parameters); // 0x009D3AA4-0x009D3CB0
		~DSACryptoServiceProvider(); // 0x009D3CB0-0x009D3D30
		public override DSAParameters ExportParameters(bool includePrivateParameters); // 0x009D3D64-0x009D3E38
		public override void ImportParameters(DSAParameters parameters); // 0x009D3E38-0x009D3EB0
		protected override void Dispose(bool disposing); // 0x009D3EB0-0x009D3F18
		private void OnKeyGenerated(object sender, EventArgs e); // 0x009D3F18-0x009D46DC
	}

	[ComVisible] // 0x00397CE0-0x00397CF4
	public interface ICspAsymmetricAlgorithm // TypeDefIndex: 916
	{
	}

	[ComVisible] // 0x00397CF4-0x00397D08
	public sealed class MD5CryptoServiceProvider : MD5 // TypeDefIndex: 917
	{
		// Fields
		private uint[] _H; // 0x28
		private uint[] buff; // 0x30
		private ulong count; // 0x38
		private byte[] _ProcessingBuffer; // 0x40
		private int _ProcessingBufferCount; // 0x48
		private static readonly uint[] K; // 0x00
	
		// Constructors
		public MD5CryptoServiceProvider(); // 0x009D6EC8-0x009D6F6C
		static MD5CryptoServiceProvider(); // 0x009D9C38-0x009D9CB4
	
		// Methods
		~MD5CryptoServiceProvider(); // 0x009D6F6C-0x009D6FF0
		protected override void Dispose(bool disposing); // 0x009D6FF0-0x009D7080
		protected override void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x009D7080-0x009D7184
		protected override byte[] HashFinal(); // 0x009D9634-0x009D9758
		public override void Initialize(); // 0x009D9980-0x009D9A80
		private void ProcessBlock(byte[] inputBuffer, int inputOffset); // 0x009D7184-0x009D9634
		private void ProcessFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x009D9758-0x009D9980
		internal void AddLength(ulong length, byte[] buffer, int position); // 0x009D9A80-0x009D9C38
	}

	internal class RC2Transform : SymmetricTransform // TypeDefIndex: 918
	{
		// Fields
		private ushort R0; // 0x58
		private ushort R1; // 0x5A
		private ushort R2; // 0x5C
		private ushort R3; // 0x5E
		private ushort[] K; // 0x60
		private int j; // 0x68
		private static readonly byte[] pitable; // 0x00
	
		// Constructors
		public RC2Transform(RC2 rc2Algo, bool encryption, byte[] key, byte[] iv); // 0x009DA25C-0x009DAA1C
		static RC2Transform(); // 0x009DBF6C-0x009DBFE8
	
		// Methods
		protected override void ECB(byte[] input, byte[] output); // 0x009DAD28-0x009DBF6C
	}

	public sealed class RNGCryptoServiceProvider : RandomNumberGenerator // TypeDefIndex: 919
	{
		// Fields
		private static object _lock; // 0x00
		private IntPtr _handle; // 0x10
	
		// Constructors
		static RNGCryptoServiceProvider(); // 0x009DDEC8-0x009DDF3C
		public RNGCryptoServiceProvider(); // 0x009DDF40-0x009DDFBC
	
		// Methods
		private void Check(); // 0x009DDFC8-0x009DE070
		private static bool RngOpen(); // 0x009DDF3C-0x009DDF40
		private static IntPtr RngInitialize(byte[] seed); // 0x009DDFC4-0x009DDFC8
		private static IntPtr RngGetBytes(IntPtr handle, byte[] data); // 0x009DE070-0x009DE074
		private static void RngClose(IntPtr handle); // 0x009DE074-0x009DE078
		public override void GetBytes(byte[] data); // 0x009DE078-0x009DE238
		~RNGCryptoServiceProvider(); // 0x009DE238-0x009DE314
		protected override void Dispose(bool disposing); // 0x009DE314-0x009DE318
	}

	[ComVisible] // 0x00397D08-0x00397D1C
	public class RSAPKCS1SignatureDeformatter : AsymmetricSignatureDeformatter // TypeDefIndex: 920
	{
		// Fields
		private RSA rsa; // 0x10
		private string hashName; // 0x18
	
		// Constructors
		public RSAPKCS1SignatureDeformatter(AsymmetricAlgorithm key); // 0x009DF7A0-0x009DF7D8
	
		// Methods
		public override void SetHashAlgorithm(string strName); // 0x009DF7D8-0x009DF870
		public override void SetKey(AsymmetricAlgorithm key); // 0x009DF870-0x009DF984
		public override bool VerifySignature(byte[] rgbHash, byte[] rgbSignature); // 0x009DF984-0x009E02C4
	}

	internal class SHA1Internal // TypeDefIndex: 921
	{
		// Fields
		private uint[] _H; // 0x10
		private ulong count; // 0x18
		private byte[] _ProcessingBuffer; // 0x20
		private int _ProcessingBufferCount; // 0x28
		private uint[] buff; // 0x30
	
		// Constructors
		public SHA1Internal(); // 0x0077EAAC-0x0077EB3C
	
		// Methods
		public void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x0077EC20-0x0077ED24
		public byte[] HashFinal(); // 0x0077ED54-0x0077EE78
		public void Initialize(); // 0x0077EEA4-0x0077EFDC
		private void ProcessBlock(byte[] inputBuffer, uint inputOffset); // 0x0077EFDC-0x0077F858
		private static void InitialiseBuff(uint[] buff, byte[] input, uint inputOffset); // 0x0077FA94-0x007808E0
		private static void FillBuff(uint[] buff); // 0x007808E0-0x00780F68
		private void ProcessFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x0077F858-0x0077FA94
		internal void AddLength(ulong length, byte[] buffer, int position); // 0x00780F68-0x00781120
	}

	[ComVisible] // 0x00397D1C-0x00397D30
	public sealed class SHA1CryptoServiceProvider : SHA1 // TypeDefIndex: 922
	{
		// Fields
		private SHA1Internal sha; // 0x28
	
		// Constructors
		public SHA1CryptoServiceProvider(); // 0x0077EA3C-0x0077EAAC
	
		// Methods
		~SHA1CryptoServiceProvider(); // 0x0077EB3C-0x0077EBC0
		protected override void Dispose(bool disposing); // 0x0077EBC0-0x0077EBCC
		protected override void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x0077EBCC-0x0077EC20
		protected override byte[] HashFinal(); // 0x0077ED24-0x0077ED54
		public override void Initialize(); // 0x0077EE78-0x0077EEA4
	}

	internal class TripleDESTransform : SymmetricTransform // TypeDefIndex: 923
	{
		// Fields
		private DESTransform E1; // 0x58
		private DESTransform D2; // 0x60
		private DESTransform E3; // 0x68
		private DESTransform D1; // 0x70
		private DESTransform E2; // 0x78
		private DESTransform D3; // 0x80
	
		// Constructors
		public TripleDESTransform(TripleDES algo, bool encryption, byte[] key, byte[] iv); // 0x00789544-0x0078987C
	
		// Methods
		protected override void ECB(byte[] input, byte[] output); // 0x00789CF0-0x00789E7C
		internal static byte[] GetStrongKey(); // 0x00789C38-0x00789CF0
	}
}

namespace System.Security.Cryptography.X509Certificates
{
	[Flags] // 0x00397D30-0x00397D40
	public enum X509KeyStorageFlags // TypeDefIndex: 924
	{
		DefaultKeySet = 0,
		UserKeySet = 1,
		MachineKeySet = 2,
		Exportable = 4,
		UserProtected = 8,
		PersistKeySet = 16,
		EphemeralKeySet = 32
	}

	[Serializable]
	[ComVisible] // 0x00397D40-0x00397D90
	[MonoTODO] // 0x00397D40-0x00397D90
	public class X509Certificate : IDeserializationCallback, ISerializable, IDisposable // TypeDefIndex: 925
	{
		// Fields
		private X509CertificateImpl impl; // 0x10
		private bool hideDates; // 0x18
		private string issuer_name; // 0x20
		private string subject_name; // 0x28
	
		// Properties
		internal X509CertificateImpl Impl { get; } // 0x0078A794-0x0078A7BC 
	
		// Constructors
		internal X509Certificate(X509CertificateImpl impl); // 0x0078A610-0x0078A6BC
		public X509Certificate(); // 0x0078A9EC-0x0078A9F4
		public X509Certificate(SerializationInfo info, StreamingContext context); // 0x0078A9F4-0x0078AB40
	
		// Methods
		public virtual bool Equals(X509Certificate other); // 0x0078A830-0x0078A930
		public override int GetHashCode(); // 0x0078A944-0x0078A9A4
		public virtual byte[] GetRawCertData(); // 0x0078A9A4-0x0078A9E4
		public override string ToString(); // 0x0078A9E4-0x0078A9EC
		[ComVisible] // 0x0039F12C-0x0039F140
		public override bool Equals(object obj); // 0x0078AB40-0x0078ABE8
		[ComVisible] // 0x0039F140-0x0039F190
		[MonoTODO] // 0x0039F140-0x0039F190
		public virtual void Import(byte[] rawData, string password, X509KeyStorageFlags keyStorageFlags); // 0x0078ABE8-0x0078AC34
		void IDeserializationCallback.OnDeserialization(object sender); // 0x0078AD60-0x0078AD64
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x0078AD64-0x0078AE48
		public void Dispose(); // 0x0078AE48-0x0078AE58
		protected virtual void Dispose(bool disposing); // 0x0078AE58-0x0078AE6C
		[ComVisible] // 0x0039F190-0x0039F1A4
		public virtual void Reset(); // 0x0078AE6C-0x0078AEA0
	}

	internal abstract class X509CertificateImpl : IDisposable // TypeDefIndex: 926
	{
		// Fields
		private byte[] cachedCertificateHash; // 0x10
	
		// Properties
		public abstract bool IsValid { get; }
	
		// Constructors
		protected X509CertificateImpl(); // 0x0078B35C-0x0078B364
	
		// Methods
		protected void ThrowIfContextInvalid(); // 0x0078AF1C-0x0078AF8C
		public abstract X509CertificateImpl Clone();
		public abstract byte[] GetRawCertData();
		protected abstract byte[] GetCertHash(bool lazy);
		public override int GetHashCode(); // 0x0078B008-0x0078B114
		public abstract bool Equals(X509CertificateImpl other, out bool result);
		public override bool Equals(object obj); // 0x0078B114-0x0078B2D4
		public void Dispose(); // 0x0078AEA0-0x0078AF1C
		protected virtual void Dispose(bool disposing); // 0x0078B2D4-0x0078B2DC
		~X509CertificateImpl(); // 0x0078B2DC-0x0078B35C
	}

	internal sealed class X509CertificateImplMono : X509CertificateImpl // TypeDefIndex: 927
	{
		// Fields
		private Mono.Security.X509.X509Certificate x509; // 0x18
	
		// Properties
		public override bool IsValid { get; } // 0x0078B390-0x0078B3A0 
	
		// Constructors
		public X509CertificateImplMono(Mono.Security.X509.X509Certificate x509); // 0x0078B364-0x0078B390
	
		// Methods
		public override X509CertificateImpl Clone(); // 0x0078B3A0-0x0078B410
		public override byte[] GetRawCertData(); // 0x0078B410-0x0078B44C
		protected override byte[] GetCertHash(bool lazy); // 0x0078B44C-0x0078B4B0
		public override bool Equals(X509CertificateImpl other, out bool result); // 0x0078B4B0-0x0078B4BC
		protected override void Dispose(bool disposing); // 0x0078B4BC-0x0078B4C4
	}

	internal static class X509Helper // TypeDefIndex: 928
	{
		// Methods
		private static X509CertificateImpl Import(byte[] rawData); // 0x0078B4C4-0x0078B4C8
		public static X509CertificateImpl InitFromCertificate(X509CertificateImpl impl); // 0x0078A6BC-0x0078A794
		public static bool IsValid(X509CertificateImpl impl); // 0x0078A930-0x0078A944
		internal static void ThrowIfContextInvalid(X509CertificateImpl impl); // 0x0078A7BC-0x0078A830
		internal static Exception GetInvalidContextException(); // 0x0078AF8C-0x0078B008
		internal static Mono.Security.X509.X509Certificate ImportPkcs12(byte[] rawData, string password); // 0x0078B6A4-0x0078BAE8
		private static byte[] PEM(string type, byte[] data); // 0x0078BAEC-0x0078BC8C
		private static byte[] ConvertData(byte[] data); // 0x0078BE64-0x0078BF5C
		private static X509CertificateImpl ImportCore(byte[] rawData); // 0x0078B4C8-0x0078B6A4
		public static X509CertificateImpl Import(byte[] rawData, string password, X509KeyStorageFlags keyStorageFlags); // 0x0078AC34-0x0078AD60
	}
}

namespace System.Runtime.Versioning
{
	internal static class BinaryCompatibility // TypeDefIndex: 929
	{
		// Fields
		public static readonly bool TargetsAtLeast_Desktop_V4_5; // 0x00
		public static readonly bool TargetsAtLeast_Desktop_V4_5_1; // 0x01
	
		// Constructors
		static BinaryCompatibility(); // 0x0061B064-0x0061B0CC
	}
}

namespace System.Runtime.Serialization
{
	[Serializable]
	internal delegate void DeserializationEventHandler(object sender); // TypeDefIndex: 930; 0x0059E0E8-0x0059E81C

	[Serializable]
	internal delegate void SerializationEventHandler(StreamingContext context); // TypeDefIndex: 931; 0x00615138-0x006155A0

	[ComVisible] // 0x00397D90-0x00397DA4
	public class FormatterConverter : IFormatterConverter // TypeDefIndex: 932
	{
		// Constructors
		public FormatterConverter(); // 0x0059EA5C-0x0059EA64
	
		// Methods
		public object Convert(object value, Type type); // 0x0059EA64-0x0059EB58
		public bool ToBoolean(object value); // 0x0059EB58-0x0059EC3C
		public int ToInt32(object value); // 0x0059EC3C-0x0059ED20
		public long ToInt64(object value); // 0x0059ED20-0x0059EE04
		public float ToSingle(object value); // 0x0059EE04-0x0059EEE8
		public string ToString(object value); // 0x0059EEE8-0x0059EFCC
	}

	[ComVisible] // 0x00397DA4-0x00397DB8
	public static class FormatterServices // TypeDefIndex: 933
	{
		// Fields
		internal static ConcurrentDictionary<MemberHolder, MemberInfo[]> m_MemberInfoTable; // 0x00
		private static bool unsafeTypeForwardersIsEnabled; // 0x08
		private static bool unsafeTypeForwardersIsEnabledInitialized; // 0x09
		private static readonly Type[] advancedTypes; // 0x10
		private static Binder s_binder; // 0x18
	
		// Nested types
		[CompilerGenerated] // 0x00397DB8-0x00397DC8
		private sealed class <>c__DisplayClass9_0 // TypeDefIndex: 934
		{
			// Fields
			public Type type; // 0x10
	
			// Constructors
			public <>c__DisplayClass9_0(); // 0x005A02E0-0x005A02E8
	
			// Methods
			internal MemberInfo[] <GetSerializableMembers>b__0(MemberHolder _); // 0x005A18D8-0x005A19D4
		}
	
		// Constructors
		static FormatterServices(); // 0x0059EFCC-0x0059F134
	
		// Methods
		private static MemberInfo[] GetSerializableMembers(RuntimeType type); // 0x0059F134-0x0059F360
		private static bool CheckSerializable(RuntimeType type); // 0x0059F360-0x0059F394
		private static MemberInfo[] InternalGetSerializableMembers(RuntimeType type); // 0x0059F394-0x0059FBAC
		private static bool GetParentTypes(RuntimeType parentType, out RuntimeType[] parentTypes, out int parentTypeCount); // 0x0059FBAC-0x005A0034
		public static MemberInfo[] GetSerializableMembers(Type type, StreamingContext context); // 0x005A0034-0x005A02E0
		public static object GetUninitializedObject(Type type); // 0x005A02E8-0x005A04FC
		private static object nativeGetUninitializedObject(RuntimeType type); // 0x005A04FC-0x005A0504
		private static bool GetEnableUnsafeTypeForwarders(); // 0x005A0504-0x005A050C
		internal static bool UnsafeTypeForwardersIsEnabled(); // 0x005A050C-0x005A05D4
		internal static void SerializationSetValue(MemberInfo fi, object target, object value); // 0x005A05D4-0x005A07DC
		public static object PopulateObjectMembers(object obj, MemberInfo[] members, object[] data); // 0x005A07DC-0x005A0B00
		public static object[] GetObjectData(object obj, MemberInfo[] members); // 0x005A0B00-0x005A0F38
		public static Type GetTypeFromAssembly(Assembly assem, string name); // 0x005A0F38-0x005A1004
		internal static Assembly LoadAssemblyFromString(string assemblyName); // 0x005A1004-0x005A100C
		internal static Assembly LoadAssemblyFromStringNoThrow(string assemblyName); // 0x005A100C-0x005A10EC
		internal static string GetClrAssemblyName(Type type, out bool hasTypeForwardedFrom); // 0x005A10EC-0x005A1318
		internal static string GetClrTypeFullName(Type type); // 0x005A1318-0x005A13C4
		private static string GetClrTypeFullNameForArray(Type type); // 0x005A13C4-0x005A15D8
		private static string GetClrTypeFullNameForNonArrayTypes(Type type); // 0x005A15D8-0x005A18D8
	}

	internal sealed class SurrogateForCyclicalReference : ISerializationSurrogate // TypeDefIndex: 935
	{
		// Fields
		private ISerializationSurrogate innerSurrogate; // 0x10
	
		// Methods
		public void GetObjectData(object obj, SerializationInfo info, StreamingContext context); // 0x0061AE5C-0x0061AF40
		public object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector); // 0x0061AF40-0x0061B038
	}

	[ComVisible] // 0x00397DC8-0x00397DDC
	public interface IDeserializationCallback // TypeDefIndex: 936
	{
		// Methods
		void OnDeserialization(object sender);
	}

	[ComVisible] // 0x00397DDC-0x00397DF0
	public interface IFormatter // TypeDefIndex: 937
	{
	}

	[CLSCompliant] // 0x00397DF0-0x00397E30
	[ComVisible] // 0x00397DF0-0x00397E30
	public interface IFormatterConverter // TypeDefIndex: 938
	{
		// Methods
		object Convert(object value, Type type);
		bool ToBoolean(object value);
		int ToInt32(object value);
		long ToInt64(object value);
		float ToSingle(object value);
		string ToString(object value);
	}

	[ComVisible] // 0x00397E30-0x00397E44
	public interface IObjectReference // TypeDefIndex: 939
	{
		// Methods
		object GetRealObject(StreamingContext context);
	}

	[ComVisible] // 0x00397E44-0x00397E58
	public interface ISerializable // TypeDefIndex: 940
	{
		// Methods
		void GetObjectData(SerializationInfo info, StreamingContext context);
	}

	[ComVisible] // 0x00397E58-0x00397E6C
	public interface ISerializationSurrogate // TypeDefIndex: 941
	{
		// Methods
		void GetObjectData(object obj, SerializationInfo info, StreamingContext context);
		object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector);
	}

	[ComVisible] // 0x00397E6C-0x00397E80
	public interface ISurrogateSelector // TypeDefIndex: 942
	{
		// Methods
		ISerializationSurrogate GetSurrogate(Type type, StreamingContext context, out ISurrogateSelector selector);
	}

	[Serializable]
	internal class MemberHolder // TypeDefIndex: 943
	{
		// Fields
		internal Type memberType; // 0x10
		internal StreamingContext context; // 0x18
	
		// Constructors
		internal MemberHolder(Type type, StreamingContext ctx); // 0x0060FAA8-0x0060FAE8
	
		// Methods
		public override int GetHashCode(); // 0x0060FAE8-0x0060FB1C
		public override bool Equals(object obj); // 0x0060FB1C-0x0060FC60
	}

	[Serializable]
	[ComVisible] // 0x00397E80-0x00397E94
	public class ObjectIDGenerator // TypeDefIndex: 944
	{
		// Fields
		internal int m_currentCount; // 0x10
		internal int m_currentSize; // 0x14
		internal long[] m_ids; // 0x18
		internal object[] m_objs; // 0x20
		private static readonly int[] sizes; // 0x00
	
		// Constructors
		public ObjectIDGenerator(); // 0x006116F0-0x006117D0
		static ObjectIDGenerator(); // 0x00611FF8-0x00612074
	
		// Methods
		private int FindElement(object obj, out bool found); // 0x006117D0-0x00611900
		public virtual long GetId(object obj, out bool firstTime); // 0x00611900-0x00611B28
		public virtual long HasId(object obj, out bool firstTime); // 0x00611ECC-0x00611FF8
		private void Rehash(); // 0x00611B28-0x00611ECC
	}

	[ComVisible] // 0x00397E94-0x00397EA8
	public class ObjectManager // TypeDefIndex: 945
	{
		// Fields
		private DeserializationEventHandler m_onDeserializationHandler; // 0x10
		private SerializationEventHandler m_onDeserializedHandler; // 0x18
		internal ObjectHolder[] m_objects; // 0x20
		internal object m_topObject; // 0x28
		internal ObjectHolderList m_specialFixupObjects; // 0x30
		internal long m_fixupCount; // 0x38
		internal ISurrogateSelector m_selector; // 0x40
		internal StreamingContext m_context; // 0x48
	
		// Properties
		internal object TopObject { get; set; } // 0x006108E8-0x006108F0 0x00612104-0x0061210C
		internal ObjectHolderList SpecialFixupObjects { get; } // 0x0061210C-0x00612178 
	
		// Constructors
		internal ObjectManager(ISurrogateSelector selector, StreamingContext context, bool checkSecurity, bool isCrossAppDomain); // 0x00612074-0x006120FC
		static ObjectManager(); // 0x00612178-0x0061217C
	
		// Methods
		private bool CanCallGetType(object obj); // 0x006120FC-0x00612104
		internal ObjectHolder FindObjectHolder(long objectID); // 0x0061217C-0x00612218
		internal ObjectHolder FindOrCreateObjectHolder(long objectID); // 0x00610378-0x00610424
		private void AddObjectHolder(ObjectHolder holder); // 0x00612218-0x006123D4
		private bool GetCompletionInfo(FixupHolder fixup, out ObjectHolder holder, out object member, bool bThrowIfMissing); // 0x006123D4-0x00612708
		private void FixupSpecialObject(ObjectHolder holder); // 0x00612708-0x00612A90
		private bool ResolveObjectReference(ObjectHolder holder); // 0x00613660-0x006139DC
		private bool DoValueTypeFixup(FieldInfo memberToFix, ObjectHolder holder, object value); // 0x00612D78-0x0061357C
		internal void CompleteObject(ObjectHolder holder, bool bObjectFullyComplete); // 0x006108F0-0x00611250
		private void DoNewlyRegisteredObjectFixups(ObjectHolder holder); // 0x0061357C-0x00613660
		public virtual object GetObject(long objectID); // 0x00613B20-0x00613C10
		internal void RegisterString(string obj, long objectID, SerializationInfo info, long idOfContainingObj, MemberInfo member); // 0x00613C10-0x00613D48
		public void RegisterObject(object obj, long objectID, SerializationInfo info, long idOfContainingObj, MemberInfo member, int[] arrayIndex); // 0x00613D48-0x006143DC
		internal void CompleteISerializableObject(object obj, SerializationInfo info, StreamingContext context); // 0x00612A90-0x00612D78
		internal static RuntimeConstructorInfo GetConstructor(RuntimeType t); // 0x006143DC-0x0061452C
		public virtual void DoFixups(); // 0x00614754-0x00614A98
		private void RegisterFixup(FixupHolder fixup, long objectToBeFixed, long objectRequired); // 0x00614A98-0x00614BC8
		public virtual void RecordFixup(long objectToBeFixed, MemberInfo member, long objectRequired); // 0x00614BC8-0x00614E40
		public virtual void RecordDelayedFixup(long objectToBeFixed, string memberName, long objectRequired); // 0x00614E40-0x00614F98
		public virtual void RecordArrayElementFixup(long arrayToBeFixed, int[] indices, long objectRequired); // 0x00614F98-0x006150F0
		public virtual void RaiseDeserializationEvent(); // 0x006150F0-0x00615138
		internal virtual void AddOnDeserialization(DeserializationEventHandler handler); // 0x006155A0-0x00615664
		internal virtual void AddOnDeserialized(object obj); // 0x00615664-0x0061571C
		internal virtual void RaiseOnDeserializedEvent(object obj); // 0x00615D6C-0x00615E20
		public void RaiseOnDeserializingEvent(object obj); // 0x00616154-0x00616208
	}

	internal sealed class ObjectHolder // TypeDefIndex: 946
	{
		// Fields
		private object m_object; // 0x10
		internal long m_id; // 0x18
		private int m_missingElementsRemaining; // 0x20
		private int m_missingDecendents; // 0x24
		internal SerializationInfo m_serInfo; // 0x28
		internal ISerializationSurrogate m_surrogate; // 0x30
		internal FixupHolderList m_missingElements; // 0x38
		internal LongList m_dependentObjects; // 0x40
		internal ObjectHolder m_next; // 0x48
		internal int m_flags; // 0x50
		private bool m_markForFixupWhenAvailable; // 0x54
		private ValueTypeFixupInfo m_valueFixup; // 0x58
		private TypeLoadExceptionHolder m_typeLoad; // 0x60
		private bool m_reachable; // 0x68
	
		// Properties
		internal bool IsIncompleteObjectReference { get; set; } // 0x00610730-0x0061073C 0x0061073C-0x00610758
		internal bool RequiresDelayedFixup { get; } // 0x00610758-0x00610768 
		internal bool RequiresValueTypeFixup { get; } // 0x006101B4-0x006101C0 
		internal bool ValueTypeFixupPerformed { get; set; } // 0x00610768-0x006107A0 0x006107A0-0x006107B4
		internal bool HasISerializable { get; } // 0x006107B4-0x006107C0 
		internal bool HasSurrogate { get; } // 0x006107C0-0x006107CC 
		internal bool CanSurrogatedObjectValueChange { get; } // 0x006107CC-0x00610878 
		internal bool CanObjectValueChange { get; } // 0x00610878-0x00610898 
		internal int DirectlyDependentObjects { get; } // 0x00610898-0x006108A0 
		internal int TotalDependentObjects { get; } // 0x006108A0-0x006108AC 
		internal bool Reachable { get; set; } // 0x006108AC-0x006108B4 0x006108B4-0x006108C0
		internal bool TypeLoadExceptionReachable { get; } // 0x006108C0-0x006108D0 
		internal TypeLoadExceptionHolder TypeLoadException { get; set; } // 0x006108D0-0x006108D8 0x006108D8-0x006108E0
		internal object ObjectValue { get; } // 0x006108E0-0x006108E8 
		internal SerializationInfo SerializationInfo { get; set; } // 0x00611250-0x00611258 0x00611258-0x00611260
		internal ISerializationSurrogate Surrogate { get; } // 0x00611260-0x00611268 
		internal LongList DependentObjects { get; set; } // 0x00611268-0x00611270 0x00611270-0x00611278
		internal bool RequiresSerInfoFixup { get; set; } // 0x00611278-0x00611294 0x00611294-0x006112B0
		internal ValueTypeFixupInfo ValueFixup { get; } // 0x006112B0-0x006112B8 
		internal bool CompletelyFixed { get; } // 0x006112B8-0x006112DC 
		internal long ContainerID { get; } // 0x00610360-0x00610378 
	
		// Constructors
		internal ObjectHolder(long objID); // 0x0060FC60-0x0060FC9C
		internal ObjectHolder(object obj, long objID, SerializationInfo info, ISerializationSurrogate surrogate, long idOfContainingObj, FieldInfo field, int[] arrayIndex); // 0x0060FD88-0x0060FF58
		internal ObjectHolder(string obj, long objID, SerializationInfo info, ISerializationSurrogate surrogate, long idOfContainingObj, FieldInfo field, int[] arrayIndex); // 0x0060FC9C-0x0060FD88
	
		// Methods
		private void IncrementDescendentFixups(int amount); // 0x0061017C-0x0061018C
		internal void DecrementFixupsRemaining(ObjectManager manager); // 0x0061018C-0x006101B4
		internal void RemoveDependency(long id); // 0x00610264-0x00610298
		internal void AddFixup(FixupHolder fixup, ObjectManager manager); // 0x00610298-0x00610360
		private void UpdateDescendentDependencyChain(int amount, ObjectManager manager); // 0x006101C0-0x00610264
		internal void AddDependency(long dependentObject); // 0x00610424-0x006104AC
		internal void UpdateData(object obj, SerializationInfo info, ISerializationSurrogate surrogate, long idOfContainer, FieldInfo field, int[] arrayIndex, ObjectManager manager); // 0x006104AC-0x0061065C
		internal void MarkForCompletionWhenAvailable(); // 0x00610724-0x00610730
		internal void SetFlags(); // 0x006100C8-0x0061017C
		internal void SetObjectValue(object obj, ObjectManager manager); // 0x0061065C-0x00610724
	}

	[Serializable]
	internal class FixupHolder // TypeDefIndex: 947
	{
		// Fields
		internal long m_id; // 0x10
		internal object m_fixupInfo; // 0x18
		internal int m_fixupType; // 0x20
	
		// Constructors
		internal FixupHolder(long id, object fixupInfo, int fixupType); // 0x0059E84C-0x0059E88C
	}

	[Serializable]
	internal class FixupHolderList // TypeDefIndex: 948
	{
		// Fields
		internal FixupHolder[] m_values; // 0x10
		internal int m_count; // 0x18
	
		// Constructors
		internal FixupHolderList(); // 0x0059E88C-0x0059E894
		internal FixupHolderList(int startingSize); // 0x0059E894-0x0059E908
	
		// Methods
		internal virtual void Add(FixupHolder fixup); // 0x0059E908-0x0059E9C8
		private void EnlargeArray(); // 0x0059E9C8-0x0059EA5C
	}

	[Serializable]
	internal class LongList // TypeDefIndex: 949
	{
		// Fields
		private long[] m_values; // 0x10
		private int m_count; // 0x18
		private int m_totalItems; // 0x1C
		private int m_currentItem; // 0x20
	
		// Properties
		internal int Count { get; } // 0x0060F8D8-0x0060F8E0 
		internal long Current { get; } // 0x0060F970-0x0060F9C0 
	
		// Constructors
		internal LongList(); // 0x0060F72C-0x0060F734
		internal LongList(int startingSize); // 0x0060F734-0x0060F7A8
	
		// Methods
		internal void Add(long value); // 0x0060F7A8-0x0060F844
		internal void StartEnumeration(); // 0x0060F8E0-0x0060F8EC
		internal bool MoveNext(); // 0x0060F8EC-0x0060F970
		internal bool RemoveElement(long value); // 0x0060F9C0-0x0060FAA8
		private void EnlargeArray(); // 0x0060F844-0x0060F8D8
	}

	internal class ObjectHolderList // TypeDefIndex: 950
	{
		// Fields
		internal ObjectHolder[] m_values; // 0x10
		internal int m_count; // 0x18
	
		// Properties
		internal int Version { get; } // 0x00611570-0x00611578 
		internal int Count { get; } // 0x00611578-0x00611580 
	
		// Constructors
		internal ObjectHolderList(); // 0x006112E4-0x006112EC
		internal ObjectHolderList(int startingSize); // 0x006112EC-0x00611360
	
		// Methods
		internal virtual void Add(ObjectHolder value); // 0x00611360-0x00611420
		internal ObjectHolderListEnumerator GetFixupEnumerator(); // 0x006114B4-0x00611518
		private void EnlargeArray(); // 0x00611420-0x006114B4
	}

	internal class ObjectHolderListEnumerator // TypeDefIndex: 951
	{
		// Fields
		private bool m_isFixupEnumerator; // 0x10
		private ObjectHolderList m_list; // 0x18
		private int m_startingVersion; // 0x20
		private int m_currPos; // 0x24
	
		// Properties
		internal ObjectHolder Current { get; } // 0x0061168C-0x006116F0 
	
		// Constructors
		internal ObjectHolderListEnumerator(ObjectHolderList list, bool isFixupEnumerator); // 0x00611518-0x00611570
	
		// Methods
		internal bool MoveNext(); // 0x00611580-0x0061168C
	}

	internal class TypeLoadExceptionHolder // TypeDefIndex: 952
	{
		// Fields
		private string m_typeName; // 0x10
	
		// Properties
		internal string TypeName { get; } // 0x00613B18-0x00613B20 
	
		// Constructors
		internal TypeLoadExceptionHolder(string typeName); // 0x0061B038-0x0061B064
	}

	public sealed class SafeSerializationEventArgs : EventArgs // TypeDefIndex: 953
	{
		// Fields
		private StreamingContext m_streamingContext; // 0x10
		private List<object> m_serializedStates; // 0x20
	
		// Properties
		internal IList<object> SerializedStates { get; } // 0x006166BC-0x006166C4 
	
		// Constructors
		internal SafeSerializationEventArgs(StreamingContext streamingContext); // 0x00616614-0x006166BC
	}

	public interface ISafeSerializationData // TypeDefIndex: 954
	{
		// Methods
		void CompleteDeserialization(object deserialized);
	}

	[Serializable]
	internal sealed class SafeSerializationManager : IObjectReference, ISerializable // TypeDefIndex: 955
	{
		// Fields
		private IList<object> m_serializedStates; // 0x10
		private SerializationInfo m_savedSerializationInfo; // 0x18
		private object m_realObject; // 0x20
		private RuntimeType m_realType; // 0x28
		[CompilerGenerated] // 0x0039C83C-0x0039C84C
		private EventHandler<SafeSerializationEventArgs> SerializeObjectState; // 0x30
	
		// Properties
		internal bool IsActive { get; } // 0x00616BC8-0x00616BD8 
	
		// Constructors
		internal SafeSerializationManager(); // 0x006166C4-0x006166CC
		private SafeSerializationManager(SerializationInfo info, StreamingContext context); // 0x006166CC-0x0061688C
	
		// Methods
		internal void CompleteSerialization(object serializedObject, SerializationInfo info, StreamingContext context); // 0x00616BD8-0x00616D64
		internal void CompleteDeserialization(object deserializedObject); // 0x00616FD0-0x006173B0
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x006173B0-0x00617460
		object IObjectReference.GetRealObject(StreamingContext context); // 0x00617460-0x00617748
		[OnDeserialized] // 0x0039F1A4-0x0039F1B4
		private void OnDeserialized(StreamingContext context); // 0x00617748-0x00617808
	}

	[AttributeUsage] // 0x00397EA8-0x00397EFC
	[ComVisible] // 0x00397EA8-0x00397EFC
	public sealed class OptionalFieldAttribute : Attribute // TypeDefIndex: 956
	{
		// Fields
		private int versionAdded; // 0x10
	
		// Properties
		public int VersionAdded { set; } // 0x00616564-0x00616614
	
		// Constructors
		public OptionalFieldAttribute(); // 0x00616554-0x00616564
	}

	[AttributeUsage] // 0x00397EFC-0x00397F50
	[ComVisible] // 0x00397EFC-0x00397F50
	public sealed class OnSerializingAttribute : Attribute // TypeDefIndex: 957
	{
		// Constructors
		public OnSerializingAttribute(); // 0x0061654C-0x00616554
	}

	[AttributeUsage] // 0x00397F50-0x00397FA4
	[ComVisible] // 0x00397F50-0x00397FA4
	public sealed class OnSerializedAttribute : Attribute // TypeDefIndex: 958
	{
	}

	[AttributeUsage] // 0x00397FA4-0x00397FF8
	[ComVisible] // 0x00397FA4-0x00397FF8
	public sealed class OnDeserializingAttribute : Attribute // TypeDefIndex: 959
	{
		// Constructors
		public OnDeserializingAttribute(); // 0x00616544-0x0061654C
	}

	[AttributeUsage] // 0x00397FF8-0x0039804C
	[ComVisible] // 0x00397FF8-0x0039804C
	public sealed class OnDeserializedAttribute : Attribute // TypeDefIndex: 960
	{
		// Constructors
		public OnDeserializedAttribute(); // 0x0061653C-0x00616544
	}

	[Serializable]
	[ComVisible] // 0x0039804C-0x00398060
	public abstract class SerializationBinder // TypeDefIndex: 961
	{
		// Constructors
		protected SerializationBinder(); // 0x00617814-0x00617870
	
		// Methods
		public virtual void BindToName(Type serializedType, out string assemblyName, out string typeName); // 0x00617808-0x00617814
		public abstract Type BindToType(string assemblyName, string typeName);
	}

	internal class SerializationEvents // TypeDefIndex: 962
	{
		// Fields
		private List<MethodInfo> m_OnSerializingMethods; // 0x10
		private List<MethodInfo> m_OnSerializedMethods; // 0x18
		private List<MethodInfo> m_OnDeserializingMethods; // 0x20
		private List<MethodInfo> m_OnDeserializedMethods; // 0x28
	
		// Properties
		internal bool HasOnSerializingEvents { get; } // 0x00617D9C-0x00617DBC 
	
		// Constructors
		internal SerializationEvents(Type t); // 0x00617C90-0x00617D9C
	
		// Methods
		private List<MethodInfo> GetMethodsWithAttribute(Type attribute, Type t); // 0x00617A50-0x00617C90
		internal void InvokeOnSerializing(object obj, StreamingContext context); // 0x00617DBC-0x006180F0
		internal void InvokeOnDeserializing(object obj, StreamingContext context); // 0x00616208-0x0061653C
		internal void InvokeOnDeserialized(object obj, StreamingContext context); // 0x00615E20-0x00616154
		internal SerializationEventHandler AddOnSerialized(object obj, SerializationEventHandler handler); // 0x006180F0-0x006183E8
		internal SerializationEventHandler AddOnDeserialized(object obj, SerializationEventHandler handler); // 0x00615A74-0x00615D6C
	}

	internal static class SerializationEventsCache // TypeDefIndex: 963
	{
		// Fields
		private static Hashtable cache; // 0x00
	
		// Constructors
		static SerializationEventsCache(); // 0x006183E8-0x00618454
	
		// Methods
		internal static SerializationEvents GetSerializationEventsForType(Type t); // 0x0061571C-0x00615A74
	}

	[Serializable]
	[ComVisible] // 0x00398060-0x00398074
	public class SerializationException : SystemException // TypeDefIndex: 964
	{
		// Fields
		private static string _nullMessage; // 0x00
	
		// Constructors
		public SerializationException(); // 0x00618454-0x006184DC
		public SerializationException(string message); // 0x0060F6F8-0x0060F72C
		public SerializationException(string message, Exception innerException); // 0x0061452C-0x00614560
		protected SerializationException(SerializationInfo info, StreamingContext context); // 0x006184DC-0x006184E4
		static SerializationException(); // 0x006184E4-0x00618548
	}

	internal sealed class SerializationFieldInfo : FieldInfo // TypeDefIndex: 965
	{
		// Fields
		private RuntimeFieldInfo m_field; // 0x10
		private string m_serializationName; // 0x18
	
		// Properties
		public override Module Module { get; } // 0x00618548-0x00618580 
		public override int MetadataToken { get; } // 0x00618580-0x006185B8 
		public override string Name { get; } // 0x00618654-0x0061865C 
		public override Type DeclaringType { get; } // 0x0061865C-0x00618690 
		public override Type ReflectedType { get; } // 0x00618690-0x006186C4 
		public override Type FieldType { get; } // 0x00618798-0x006187D0 
		internal RuntimeFieldInfo FieldInfo { get; } // 0x006139EC-0x006139F4 
		public override RuntimeFieldHandle FieldHandle { get; } // 0x00618B00-0x00618B38 
		public override FieldAttributes Attributes { get; } // 0x00618B38-0x00618B70 
	
		// Constructors
		internal SerializationFieldInfo(RuntimeFieldInfo field, string namePrefix); // 0x006185B8-0x00618654
	
		// Methods
		public override object[] GetCustomAttributes(bool inherit); // 0x006186C4-0x00618700
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00618700-0x0061874C
		public override bool IsDefined(Type attributeType, bool inherit); // 0x0061874C-0x00618798
		public override object GetValue(object obj); // 0x006187D0-0x00618810
		internal object InternalGetValue(object obj); // 0x00618810-0x0061892C
		public override void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, CultureInfo culture); // 0x0061892C-0x0061899C
		internal void InternalSetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, CultureInfo culture); // 0x0061899C-0x00618B00
	}

	[ComVisible] // 0x00398074-0x00398088
	public sealed class SerializationInfo // TypeDefIndex: 966
	{
		// Fields
		internal string[] m_members; // 0x10
		internal object[] m_data; // 0x18
		internal Type[] m_types; // 0x20
		private Dictionary<string, int> m_nameToIndex; // 0x28
		internal int m_currMember; // 0x30
		internal IFormatterConverter m_converter; // 0x38
		private string m_fullTypeName; // 0x40
		private string m_assemName; // 0x48
		private Type objectType; // 0x50
		private bool isFullTypeNameSetExplicit; // 0x58
		private bool isAssemblyNameSetExplicit; // 0x59
		private bool requireSameTokenInPartialTrust; // 0x5A
	
		// Properties
		public string FullTypeName { get; } // 0x00618D30-0x00618D38 
		public string AssemblyName { get; } // 0x00618D38-0x00618D40 
		public int MemberCount { get; } // 0x00618F70-0x00618F78 
		public Type ObjectType { get; } // 0x00618D40-0x00618D48 
		public bool IsFullTypeNameSetExplicit { get; } // 0x00618F78-0x00618F80 
		public bool IsAssemblyNameSetExplicit { get; } // 0x00618F80-0x00618F88 
	
		// Constructors
		[CLSCompliant] // 0x0039F1B4-0x0039F1C8
		public SerializationInfo(Type type, IFormatterConverter converter); // 0x00618B70-0x00618B78
		[CLSCompliant] // 0x0039F1C8-0x0039F1DC
		public SerializationInfo(Type type, IFormatterConverter converter, bool requireSameTokenInPartialTrust); // 0x00618B78-0x00618D30
	
		// Methods
		public void SetType(Type type); // 0x00616E38-0x00616FD0
		private static bool Compare(byte[] a, byte[] b); // 0x00618D4C-0x00618E18
		internal static void DemandForUnsafeAssemblyNameAssignments(string originalAssemblyName, string newAssemblyName); // 0x00618D48-0x00618D4C
		internal static bool IsAssemblyNameAssignmentSafe(string originalAssemblyName, string newAssemblyName); // 0x00618E18-0x00618F70
		public SerializationInfoEnumerator GetEnumerator(); // 0x00618F88-0x0061901C
		private void ExpandArrays(); // 0x00619078-0x00619174
		public void AddValue(string name, object value, Type type); // 0x00616D64-0x00616E38
		public void AddValue(string name, object value); // 0x006193D4-0x00619490
		public void AddValue(string name, bool value); // 0x00619490-0x00619554
		public void AddValue(string name, char value); // 0x00619554-0x00619618
		public void AddValue(string name, byte value); // 0x00619618-0x006196DC
		public void AddValue(string name, int value); // 0x006196DC-0x006197A0
		public void AddValue(string name, long value); // 0x006197A0-0x00619864
		[CLSCompliant] // 0x0039F1DC-0x0039F1F0
		public void AddValue(string name, ulong value); // 0x00619864-0x00619928
		public void AddValue(string name, float value); // 0x00619928-0x006199EC
		public void AddValue(string name, DateTime value); // 0x006199EC-0x00619AB0
		internal void AddValueInternal(string name, object value, Type type); // 0x00619174-0x006193D4
		internal void UpdateValue(string name, object value, Type type); // 0x006139F4-0x00613B18
		private int FindElement(string name); // 0x00619AB0-0x00619B80
		private object GetElement(string name, out Type foundType); // 0x00619B80-0x00619CF4
		[ComVisible] // 0x0039F1F0-0x0039F204
		private object GetElementNoThrow(string name, out Type foundType); // 0x00619CF4-0x00619DB0
		public object GetValue(string name, Type type); // 0x006169C8-0x00616BC8
		[ComVisible] // 0x0039F204-0x0039F218
		internal object GetValueNoThrow(string name, Type type); // 0x0061688C-0x006169BC
		public bool GetBoolean(string name); // 0x00619DB0-0x00619F0C
		public int GetInt32(string name); // 0x00619F0C-0x0061A05C
		public long GetInt64(string name); // 0x0061A05C-0x0061A1AC
		public float GetSingle(string name); // 0x0061A1AC-0x0061A2FC
		public string GetString(string name); // 0x0061A2FC-0x0061A4A4
	}

	[ComVisible] // 0x00398088-0x0039809C
	public struct SerializationEntry // TypeDefIndex: 967
	{
		// Fields
		private Type m_type; // 0x00
		private object m_value; // 0x08
		private string m_name; // 0x10
	
		// Properties
		public object Value { get; } // 0x00617870-0x00617880 
		public string Name { get; } // 0x00617880-0x00617888 
	
		// Constructors
		internal SerializationEntry(string entryName, object entryValue, Type entryType); // 0x00617888-0x006179A8
	}

	[ComVisible] // 0x0039809C-0x003980B0
	public sealed class SerializationInfoEnumerator : IEnumerator // TypeDefIndex: 968
	{
		// Fields
		private string[] m_members; // 0x10
		private object[] m_data; // 0x18
		private Type[] m_types; // 0x20
		private int m_numItems; // 0x28
		private int m_currItem; // 0x2C
		private bool m_current; // 0x30
	
		// Properties
		object IEnumerator.Current { get; } // 0x0061A4D0-0x0061A644 
		public SerializationEntry Current { get; } // 0x0061A644-0x0061A7A8 
		public string Name { get; } // 0x0061A7B8-0x0061A890 
		public object Value { get; } // 0x0061A890-0x0061A968 
		public Type ObjectType { get; } // 0x0061A968-0x0061AA40 
	
		// Constructors
		internal SerializationInfoEnumerator(string[] members, object[] info, Type[] types, int numItems); // 0x0061901C-0x00619078
	
		// Methods
		public bool MoveNext(); // 0x0061A4A4-0x0061A4D0
		public void Reset(); // 0x0061A7A8-0x0061A7B8
	}

	public sealed class SerializationObjectManager // TypeDefIndex: 969
	{
		// Fields
		private Hashtable m_objectSeenTable; // 0x10
		private SerializationEventHandler m_onSerializedHandler; // 0x18
		private StreamingContext m_context; // 0x20
	
		// Constructors
		public SerializationObjectManager(StreamingContext context); // 0x0061AA40-0x0061AAE0
	
		// Methods
		public void RegisterObject(object obj); // 0x0061AAE0-0x0061AC2C
		public void RaiseOnSerializedEvent(); // 0x0061ACE4-0x0061AD84
		private void AddOnSerialized(object obj); // 0x0061AC2C-0x0061ACE4
	}

	[Serializable]
	[ComVisible] // 0x003980B0-0x003980C4
	public struct StreamingContext // TypeDefIndex: 970
	{
		// Fields
		internal object m_additionalContext; // 0x00
		internal StreamingContextStates m_state; // 0x08
	
		// Properties
		public StreamingContextStates State { get; } // 0x0061AE54-0x0061AE5C 
	
		// Constructors
		public StreamingContext(StreamingContextStates state); // 0x0061AD84-0x0061AD90
		public StreamingContext(StreamingContextStates state, object additional); // 0x0061AD90-0x0061AE44
	
		// Methods
		public override bool Equals(object obj); // 0x0061AE44-0x0061AE4C
		public override int GetHashCode(); // 0x0061AE4C-0x0061AE54
	}

	[Serializable]
	[ComVisible] // 0x003980C4-0x00398100
	[Flags] // 0x003980C4-0x00398100
	public enum StreamingContextStates // TypeDefIndex: 971
	{
		CrossProcess = 1,
		CrossMachine = 2,
		File = 4,
		Persistence = 8,
		Remoting = 16,
		Other = 32,
		Clone = 64,
		CrossAppDomain = 128,
		All = 255
	}

	internal class ValueTypeFixupInfo // TypeDefIndex: 972
	{
		// Fields
		private long m_containerID; // 0x10
		private FieldInfo m_parentField; // 0x18
		private int[] m_parentIndex; // 0x20
	
		// Properties
		public long ContainerID { get; } // 0x006112DC-0x006112E4 
		public FieldInfo ParentField { get; } // 0x006139DC-0x006139E4 
		public int[] ParentIndex { get; } // 0x006139E4-0x006139EC 
	
		// Constructors
		public ValueTypeFixupInfo(long containerID, FieldInfo member, int[] parentIndex); // 0x0060FF58-0x006100C8
	}
}

namespace System.Runtime.Serialization.Formatters
{
	[Serializable]
	[ComVisible] // 0x00398100-0x00398114
	public enum FormatterTypeStyle // TypeDefIndex: 973
	{
		TypesWhenNeeded = 0,
		TypesAlways = 1,
		XsdString = 2
	}

	[Serializable]
	[ComVisible] // 0x00398114-0x00398128
	public enum FormatterAssemblyStyle // TypeDefIndex: 974
	{
		Simple = 0,
		Full = 1
	}

	[ComVisible] // 0x00398128-0x0039813C
	public enum TypeFilterLevel // TypeDefIndex: 975
	{
		Low = 2,
		Full = 3
	}
}

namespace System.Runtime.Serialization.Formatters.Binary
{
	internal static class BinaryConverter // TypeDefIndex: 976
	{
		// Methods
		internal static BinaryTypeEnum GetBinaryTypeInfo(Type type, WriteObjectInfo objectInfo, string typeName, ObjectWriter objectWriter, out object typeInformation, out int assemId); // 0x005A2B4C-0x005A2EA8
		internal static BinaryTypeEnum GetParserBinaryTypeInfo(Type type, out object typeInformation); // 0x005A3308-0x005A3518
		internal static void WriteTypeInfo(BinaryTypeEnum binaryTypeEnum, object typeInformation, int assemId, __BinaryWriter sout); // 0x005A1E3C-0x005A2090
		internal static object ReadTypeInfo(BinaryTypeEnum binaryTypeEnum, __BinaryParser input, out int assemId); // 0x005A2600-0x005A2840
		internal static void TypeFromInfo(BinaryTypeEnum binaryTypeEnum, object typeInformation, ObjectReader objectReader, BinaryAssemblyInfo assemblyInfo, out InternalPrimitiveTypeE primitiveTypeEnum, out string typeString, out Type type, out bool isVariant); // 0x005A3668-0x005A39DC
	}

	internal static class IOUtil // TypeDefIndex: 977
	{
		// Methods
		internal static bool FlagTest(MessageEnum flag, MessageEnum target); // 0x005A5688-0x005A5694
		internal static void WriteStringWithCode(string value, __BinaryWriter sout); // 0x005A5614-0x005A5688
		internal static void WriteWithCode(Type type, object value, __BinaryWriter sout); // 0x005A5694-0x005A583C
	}

	internal interface IStreamable // TypeDefIndex: 978
	{
	}

	internal sealed class BinaryAssemblyInfo // TypeDefIndex: 979
	{
		// Fields
		internal string assemblyString; // 0x10
		private Assembly assembly; // 0x18
	
		// Constructors
		internal BinaryAssemblyInfo(string assemblyString); // 0x005A29B4-0x005A29E0
		internal BinaryAssemblyInfo(string assemblyString, Assembly assembly); // 0x005A29E0-0x005A2A18
	
		// Methods
		internal Assembly GetAssembly(); // 0x005A2A18-0x005A2B4C
	}

	internal sealed class SerializationHeaderRecord : IStreamable // TypeDefIndex: 980
	{
		// Fields
		internal int binaryFormatterMajorVersion; // 0x10
		internal int binaryFormatterMinorVersion; // 0x14
		internal BinaryHeaderEnum binaryHeaderEnum; // 0x18
		internal int topId; // 0x1C
		internal int headerId; // 0x20
		internal int majorVersion; // 0x24
		internal int minorVersion; // 0x28
	
		// Constructors
		internal SerializationHeaderRecord(); // 0x005B7CEC-0x005B7CFC
		internal SerializationHeaderRecord(BinaryHeaderEnum binaryHeaderEnum, int topId, int headerId, int majorVersion, int minorVersion); // 0x005B7CFC-0x005B7D58
	
		// Methods
		public void Write(__BinaryWriter sout); // 0x005B7D58-0x005B7E50
		private static int GetInt32(byte[] buffer, int index); // 0x005B7E50-0x005B7F44
		public void Read(__BinaryParser input); // 0x005B7F44-0x005B8120
		public void Dump(); // 0x005B8160-0x005B8164
	}

	internal sealed class BinaryAssembly : IStreamable // TypeDefIndex: 981
	{
		// Fields
		internal int assemId; // 0x10
		internal string assemblyString; // 0x18
	
		// Constructors
		internal BinaryAssembly(); // 0x005A2840-0x005A2848
	
		// Methods
		internal void Set(int assemId, string assemblyString); // 0x005A2848-0x005A2854
		public void Write(__BinaryWriter sout); // 0x005A2854-0x005A28F4
		public void Read(__BinaryParser input); // 0x005A28F4-0x005A2978
		public void Dump(); // 0x005A29B0-0x005A29B4
	}

	internal sealed class BinaryCrossAppDomainAssembly : IStreamable // TypeDefIndex: 982
	{
		// Fields
		internal int assemId; // 0x10
		internal int assemblyIndex; // 0x14
	
		// Constructors
		internal BinaryCrossAppDomainAssembly(); // 0x005A3EE8-0x005A3EF0
	
		// Methods
		public void Read(__BinaryParser input); // 0x005A3EF0-0x005A3F74
		public void Dump(); // 0x005A3F74-0x005A3F78
	}

	internal sealed class BinaryObject : IStreamable // TypeDefIndex: 983
	{
		// Fields
		internal int objectId; // 0x10
		internal int mapId; // 0x14
	
		// Constructors
		internal BinaryObject(); // 0x005A5B2C-0x005A5B34
	
		// Methods
		internal void Set(int objectId, int mapId); // 0x005A5B34-0x005A5B3C
		public void Write(__BinaryWriter sout); // 0x005A5B3C-0x005A5BDC
		public void Read(__BinaryParser input); // 0x005A5BDC-0x005A5C60
		public void Dump(); // 0x005A5C60-0x005A5C64
	}

	internal sealed class BinaryMethodCall // TypeDefIndex: 984
	{
		// Fields
		private string methodName; // 0x10
		private string typeName; // 0x18
		private object[] args; // 0x20
		private object callContext; // 0x28
		private Type[] argTypes; // 0x30
		private bool bArgsPrimitive; // 0x38
		private MessageEnum messageEnum; // 0x3C
	
		// Constructors
		public BinaryMethodCall(); // 0x005A5840-0x005A5850
	
		// Methods
		internal void Write(__BinaryWriter sout); // 0x005A53F4-0x005A5614
		internal void Dump(); // 0x005A583C-0x005A5840
	}

	internal sealed class BinaryMethodReturn : IStreamable // TypeDefIndex: 985
	{
		// Fields
		private object returnValue; // 0x10
		private object[] args; // 0x18
		private object callContext; // 0x20
		private Type[] argTypes; // 0x28
		private bool bArgsPrimitive; // 0x30
		private MessageEnum messageEnum; // 0x34
		private Type returnType; // 0x38
		private static object instanceOfVoid; // 0x00
	
		// Constructors
		static BinaryMethodReturn(); // 0x005A5850-0x005A58F8
		internal BinaryMethodReturn(); // 0x005A58F8-0x005A5908
	
		// Methods
		public void Write(__BinaryWriter sout); // 0x005A5908-0x005A5B28
		public void Dump(); // 0x005A5B28-0x005A5B2C
	}

	internal sealed class BinaryObjectString : IStreamable // TypeDefIndex: 986
	{
		// Fields
		internal int objectId; // 0x10
		internal string value; // 0x18
	
		// Constructors
		internal BinaryObjectString(); // 0x005A5C64-0x005A5C6C
	
		// Methods
		internal void Set(int objectId, string value); // 0x005A5C6C-0x005A5C78
		public void Write(__BinaryWriter sout); // 0x005A5C78-0x005A5D18
		public void Read(__BinaryParser input); // 0x005A5D18-0x005A5D9C
		public void Dump(); // 0x005A5D9C-0x005A5DA0
	}

	internal sealed class BinaryCrossAppDomainString : IStreamable // TypeDefIndex: 987
	{
		// Fields
		internal int objectId; // 0x10
		internal int value; // 0x14
	
		// Constructors
		internal BinaryCrossAppDomainString(); // 0x005A3FD8-0x005A3FE0
	
		// Methods
		public void Read(__BinaryParser input); // 0x005A3FE0-0x005A4064
		public void Dump(); // 0x005A4064-0x005A4068
	}

	internal sealed class BinaryCrossAppDomainMap : IStreamable // TypeDefIndex: 988
	{
		// Fields
		internal int crossAppDomainArrayIndex; // 0x10
	
		// Constructors
		internal BinaryCrossAppDomainMap(); // 0x005A3F78-0x005A3F80
	
		// Methods
		public void Read(__BinaryParser input); // 0x005A3F80-0x005A3FD4
		public void Dump(); // 0x005A3FD4-0x005A3FD8
	}

	internal sealed class MemberPrimitiveTyped : IStreamable // TypeDefIndex: 989
	{
		// Fields
		internal InternalPrimitiveTypeE primitiveTypeEnum; // 0x10
		internal object value; // 0x18
	
		// Constructors
		internal MemberPrimitiveTyped(); // 0x005A9FB0-0x005A9FB8
	
		// Methods
		internal void Set(InternalPrimitiveTypeE primitiveTypeEnum, object value); // 0x005A9FB8-0x005A9FC4
		public void Write(__BinaryWriter sout); // 0x005A9FC4-0x005AA060
		public void Read(__BinaryParser input); // 0x005AA060-0x005AA0C8
		public void Dump(); // 0x005AA4C4-0x005AA4C8
	}

	internal sealed class BinaryObjectWithMap : IStreamable // TypeDefIndex: 990
	{
		// Fields
		internal BinaryHeaderEnum binaryHeaderEnum; // 0x10
		internal int objectId; // 0x14
		internal string name; // 0x18
		internal int numMembers; // 0x20
		internal string[] memberNames; // 0x28
		internal int assemId; // 0x30
	
		// Constructors
		internal BinaryObjectWithMap(); // 0x005A5DA0-0x005A5DA8
		internal BinaryObjectWithMap(BinaryHeaderEnum binaryHeaderEnum); // 0x005A5DA8-0x005A5DD4
	
		// Methods
		internal void Set(int objectId, string name, int numMembers, string[] memberNames, int assemId); // 0x005A5DD4-0x005A5DF8
		public void Write(__BinaryWriter sout); // 0x005A5DF8-0x005A5F7C
		public void Read(__BinaryParser input); // 0x005A5F7C-0x005A615C
		public void Dump(); // 0x005A615C-0x005A6160
	}

	internal sealed class BinaryObjectWithMapTyped : IStreamable // TypeDefIndex: 991
	{
		// Fields
		internal BinaryHeaderEnum binaryHeaderEnum; // 0x10
		internal int objectId; // 0x14
		internal string name; // 0x18
		internal int numMembers; // 0x20
		internal string[] memberNames; // 0x28
		internal BinaryTypeEnum[] binaryTypeEnumA; // 0x30
		internal object[] typeInformationA; // 0x38
		internal int[] memberAssemIds; // 0x40
		internal int assemId; // 0x48
	
		// Constructors
		internal BinaryObjectWithMapTyped(); // 0x005A6160-0x005A6168
		internal BinaryObjectWithMapTyped(BinaryHeaderEnum binaryHeaderEnum); // 0x005A6168-0x005A6194
	
		// Methods
		internal void Set(int objectId, string name, int numMembers, string[] memberNames, BinaryTypeEnum[] binaryTypeEnumA, object[] typeInformationA, int[] memberAssemIds, int assemId); // 0x005A6194-0x005A61C0
		public void Write(__BinaryWriter sout); // 0x005A61C0-0x005A648C
		public void Read(__BinaryParser input); // 0x005A648C-0x005A6924
	}

	internal sealed class BinaryArray : IStreamable // TypeDefIndex: 992
	{
		// Fields
		internal int objectId; // 0x10
		internal int rank; // 0x14
		internal int[] lengthA; // 0x18
		internal int[] lowerBoundA; // 0x20
		internal BinaryTypeEnum binaryTypeEnum; // 0x28
		internal object typeInformation; // 0x30
		internal int assemId; // 0x38
		private BinaryHeaderEnum binaryHeaderEnum; // 0x3C
		internal BinaryArrayTypeEnum binaryArrayTypeEnum; // 0x40
	
		// Constructors
		internal BinaryArray(); // 0x005A19D4-0x005A19DC
		internal BinaryArray(BinaryHeaderEnum binaryHeaderEnum); // 0x005A19DC-0x005A1A08
	
		// Methods
		internal void Set(int objectId, int rank, int[] lengthA, int[] lowerBoundA, BinaryTypeEnum binaryTypeEnum, object typeInformation, BinaryArrayTypeEnum binaryArrayTypeEnum, int assemId); // 0x005A1A08-0x005A1A5C
		public void Write(__BinaryWriter sout); // 0x005A1A5C-0x005A1E3C
		public void Read(__BinaryParser input); // 0x005A2090-0x005A2594
	}

	internal sealed class MemberPrimitiveUnTyped : IStreamable // TypeDefIndex: 993
	{
		// Fields
		internal InternalPrimitiveTypeE typeInformation; // 0x10
		internal object value; // 0x18
	
		// Constructors
		internal MemberPrimitiveUnTyped(); // 0x005AA4C8-0x005AA4D0
	
		// Methods
		internal void Set(InternalPrimitiveTypeE typeInformation, object value); // 0x005AA4D0-0x005AA4DC
		internal void Set(InternalPrimitiveTypeE typeInformation); // 0x005AA4DC-0x005AA4E4
		public void Write(__BinaryWriter sout); // 0x005AA4E4-0x005AA52C
		public void Read(__BinaryParser input); // 0x005AA52C-0x005AA574
		public void Dump(); // 0x005AA574-0x005AA578
	}

	internal sealed class MemberReference : IStreamable // TypeDefIndex: 994
	{
		// Fields
		internal int idRef; // 0x10
	
		// Constructors
		internal MemberReference(); // 0x005AA578-0x005AA580
	
		// Methods
		internal void Set(int idRef); // 0x005AA580-0x005AA588
		public void Write(__BinaryWriter sout); // 0x005AA588-0x005AA5F4
		public void Read(__BinaryParser input); // 0x005AA5F4-0x005AA648
		public void Dump(); // 0x005AA648-0x005AA64C
	}

	internal sealed class ObjectNull : IStreamable // TypeDefIndex: 995
	{
		// Fields
		internal int nullCount; // 0x10
	
		// Constructors
		internal ObjectNull(); // 0x005ABC74-0x005ABC7C
	
		// Methods
		internal void SetNullCount(int nullCount); // 0x005ABC7C-0x005ABC84
		public void Write(__BinaryWriter sout); // 0x005ABC84-0x005ABD4C
		public void Read(__BinaryParser input, BinaryHeaderEnum binaryHeaderEnum); // 0x005ABD4C-0x005ABDF4
		public void Dump(); // 0x005ABDF4-0x005ABDF8
	}

	internal sealed class MessageEnd : IStreamable // TypeDefIndex: 996
	{
		// Constructors
		internal MessageEnd(); // 0x005AA64C-0x005AA654
	
		// Methods
		public void Write(__BinaryWriter sout); // 0x005AA654-0x005AA688
		public void Read(__BinaryParser input); // 0x005AA688-0x005AA68C
		public void Dump(); // 0x005AA68C-0x005AA690
		public void Dump(Stream sout); // 0x005AA690-0x005AA694
	}

	internal sealed class ObjectMap // TypeDefIndex: 997
	{
		// Fields
		internal string objectName; // 0x10
		internal Type objectType; // 0x18
		internal BinaryTypeEnum[] binaryTypeEnumA; // 0x20
		internal object[] typeInformationA; // 0x28
		internal Type[] memberTypes; // 0x30
		internal string[] memberNames; // 0x38
		internal ReadObjectInfo objectInfo; // 0x40
		internal bool isInitObjectInfo; // 0x48
		internal ObjectReader objectReader; // 0x50
		internal int objectId; // 0x58
		internal BinaryAssemblyInfo assemblyInfo; // 0x60
	
		// Constructors
		internal ObjectMap(string objectName, Type objectType, string[] memberNames, ObjectReader objectReader, int objectId, BinaryAssemblyInfo assemblyInfo); // 0x005AA940-0x005AAB78
		internal ObjectMap(string objectName, string[] memberNames, BinaryTypeEnum[] binaryTypeEnumA, object[] typeInformationA, int[] memberAssemIds, ObjectReader objectReader, int objectId, BinaryAssemblyInfo assemblyInfo, SizedArray assemIdToAssemblyTable); // 0x005AB29C-0x005AB69C
	
		// Methods
		internal ReadObjectInfo CreateObjectInfo(ref SerializationInfo si, ref object[] memberData); // 0x005AB7C8-0x005AB844
		internal static ObjectMap Create(string name, Type objectType, string[] memberNames, ObjectReader objectReader, int objectId, BinaryAssemblyInfo assemblyInfo); // 0x005AB918-0x005AB9B8
		internal static ObjectMap Create(string name, string[] memberNames, BinaryTypeEnum[] binaryTypeEnumA, object[] typeInformationA, int[] memberAssemIds, ObjectReader objectReader, int objectId, BinaryAssemblyInfo assemblyInfo, SizedArray assemIdToAssemblyTable); // 0x005AB9B8-0x005ABA7C
	}

	internal sealed class ObjectProgress // TypeDefIndex: 998
	{
		// Fields
		internal static int opRecordIdCount; // 0x00
		internal bool isInitial; // 0x10
		internal int count; // 0x14
		internal BinaryTypeEnum expectedType; // 0x18
		internal object expectedTypeInformation; // 0x20
		internal string name; // 0x28
		internal InternalObjectTypeE objectTypeEnum; // 0x30
		internal InternalMemberTypeE memberTypeEnum; // 0x34
		internal InternalMemberValueE memberValueEnum; // 0x38
		internal Type dtType; // 0x40
		internal int numItems; // 0x48
		internal BinaryTypeEnum binaryTypeEnum; // 0x4C
		internal object typeInformation; // 0x50
		internal int nullCount; // 0x58
		internal int memberLength; // 0x5C
		internal BinaryTypeEnum[] binaryTypeEnumA; // 0x60
		internal object[] typeInformationA; // 0x68
		internal string[] memberNames; // 0x70
		internal Type[] memberTypes; // 0x78
		internal ParseRecord pr; // 0x80
	
		// Constructors
		internal ObjectProgress(); // 0x005ABDF8-0x005ABE68
		static ObjectProgress(); // 0x005AC128-0x005AC17C
	
		// Methods
		internal void Init(); // 0x005ABE70-0x005ABF1C
		internal void ArrayCountIncrement(int value); // 0x005ABF78-0x005ABF88
		internal bool GetNext(out BinaryTypeEnum outBinaryTypeEnum, out object outTypeInformation); // 0x005ABF88-0x005AC128
	}

	internal sealed class Converter // TypeDefIndex: 999
	{
		// Fields
		private static int primitiveTypeEnumLength; // 0x00
		private static Type[] typeA; // 0x08
		private static Type[] arrayTypeA; // 0x10
		private static string[] valueA; // 0x18
		private static TypeCode[] typeCodeA; // 0x20
		private static InternalPrimitiveTypeE[] codeA; // 0x28
		internal static Type typeofISerializable; // 0x30
		internal static Type typeofString; // 0x38
		internal static Type typeofConverter; // 0x40
		internal static Type typeofBoolean; // 0x48
		internal static Type typeofByte; // 0x50
		internal static Type typeofChar; // 0x58
		internal static Type typeofDecimal; // 0x60
		internal static Type typeofDouble; // 0x68
		internal static Type typeofInt16; // 0x70
		internal static Type typeofInt32; // 0x78
		internal static Type typeofInt64; // 0x80
		internal static Type typeofSByte; // 0x88
		internal static Type typeofSingle; // 0x90
		internal static Type typeofTimeSpan; // 0x98
		internal static Type typeofDateTime; // 0xA0
		internal static Type typeofUInt16; // 0xA8
		internal static Type typeofUInt32; // 0xB0
		internal static Type typeofUInt64; // 0xB8
		internal static Type typeofObject; // 0xC0
		internal static Type typeofSystemVoid; // 0xC8
		internal static Assembly urtAssembly; // 0xD0
		internal static string urtAssemblyString; // 0xD8
		internal static Type typeofTypeArray; // 0xE0
		internal static Type typeofObjectArray; // 0xE8
		internal static Type typeofStringArray; // 0xF0
		internal static Type typeofBooleanArray; // 0xF8
		internal static Type typeofByteArray; // 0x100
		internal static Type typeofCharArray; // 0x108
		internal static Type typeofDecimalArray; // 0x110
		internal static Type typeofDoubleArray; // 0x118
		internal static Type typeofInt16Array; // 0x120
		internal static Type typeofInt32Array; // 0x128
		internal static Type typeofInt64Array; // 0x130
		internal static Type typeofSByteArray; // 0x138
		internal static Type typeofSingleArray; // 0x140
		internal static Type typeofTimeSpanArray; // 0x148
		internal static Type typeofDateTimeArray; // 0x150
		internal static Type typeofUInt16Array; // 0x158
		internal static Type typeofUInt32Array; // 0x160
		internal static Type typeofUInt64Array; // 0x168
		internal static Type typeofMarshalByRefObject; // 0x170
	
		// Constructors
		static Converter(); // 0x005A93E0-0x005A9984
	
		// Methods
		internal static InternalPrimitiveTypeE ToCode(Type type); // 0x005A3518-0x005A3668
		internal static bool IsWriteAsByteArray(InternalPrimitiveTypeE code); // 0x005A6A18-0x005A6A40
		internal static int TypeLength(InternalPrimitiveTypeE code); // 0x005A6A40-0x005A6A8C
		internal static Type ToArrayType(InternalPrimitiveTypeE code); // 0x005A3BC4-0x005A3CB8
		private static void InitTypeA(); // 0x005A7030-0x005A75D4
		private static void InitArrayTypeA(); // 0x005A6A8C-0x005A7030
		internal static Type ToType(InternalPrimitiveTypeE code); // 0x005A3AD0-0x005A3BC4
		internal static Array CreatePrimitiveArray(InternalPrimitiveTypeE code, int length); // 0x005A75D4-0x005A7664
		internal static bool IsPrimitiveArray(Type type, out object typeInformation); // 0x005A2EA8-0x005A31FC
		private static void InitValueA(); // 0x005A7664-0x005A7C08
		internal static string ToComType(InternalPrimitiveTypeE code); // 0x005A39DC-0x005A3AD0
		private static void InitTypeCodeA(); // 0x005A7C08-0x005A7ED8
		internal static TypeCode ToTypeCode(InternalPrimitiveTypeE code); // 0x005A7ED8-0x005A7FCC
		private static void InitCodeA(); // 0x005A7FCC-0x005A92EC
		internal static InternalPrimitiveTypeE ToPrimitiveTypeEnum(TypeCode typeCode); // 0x005A6924-0x005A6A18
		internal static object FromString(string value, InternalPrimitiveTypeE code); // 0x005A92EC-0x005A93E0
	}

	[Serializable]
	internal enum BinaryHeaderEnum // TypeDefIndex: 1000
	{
		SerializedStreamHeader = 0,
		Object = 1,
		ObjectWithMap = 2,
		ObjectWithMapAssemId = 3,
		ObjectWithMapTyped = 4,
		ObjectWithMapTypedAssemId = 5,
		ObjectString = 6,
		Array = 7,
		MemberPrimitiveTyped = 8,
		MemberReference = 9,
		ObjectNull = 10,
		MessageEnd = 11,
		Assembly = 12,
		ObjectNullMultiple256 = 13,
		ObjectNullMultiple = 14,
		ArraySinglePrimitive = 15,
		ArraySingleObject = 16,
		ArraySingleString = 17,
		CrossAppDomainMap = 18,
		CrossAppDomainString = 19,
		CrossAppDomainAssembly = 20,
		MethodCall = 21,
		MethodReturn = 22
	}

	[Serializable]
	internal enum BinaryTypeEnum // TypeDefIndex: 1001
	{
		Primitive = 0,
		String = 1,
		Object = 2,
		ObjectUrt = 3,
		ObjectUser = 4,
		ObjectArray = 5,
		StringArray = 6,
		PrimitiveArray = 7
	}

	[Serializable]
	internal enum BinaryArrayTypeEnum // TypeDefIndex: 1002
	{
		Single = 0,
		Jagged = 1,
		Rectangular = 2,
		SingleOffset = 3,
		JaggedOffset = 4,
		RectangularOffset = 5
	}

	[Serializable]
	internal enum InternalSerializerTypeE // TypeDefIndex: 1003
	{
		Soap = 1,
		Binary = 2
	}

	[Serializable]
	internal enum InternalParseTypeE // TypeDefIndex: 1004
	{
		Empty = 0,
		SerializedStreamHeader = 1,
		Object = 2,
		Member = 3,
		ObjectEnd = 4,
		MemberEnd = 5,
		Headers = 6,
		HeadersEnd = 7,
		SerializedStreamHeaderEnd = 8,
		Envelope = 9,
		EnvelopeEnd = 10,
		Body = 11,
		BodyEnd = 12
	}

	[Serializable]
	internal enum InternalObjectTypeE // TypeDefIndex: 1005
	{
		Empty = 0,
		Object = 1,
		Array = 2
	}

	[Serializable]
	internal enum InternalObjectPositionE // TypeDefIndex: 1006
	{
		Empty = 0,
		Top = 1,
		Child = 2,
		Headers = 3
	}

	[Serializable]
	internal enum InternalArrayTypeE // TypeDefIndex: 1007
	{
		Empty = 0,
		Single = 1,
		Jagged = 2,
		Rectangular = 3,
		Base64 = 4
	}

	[Serializable]
	internal enum InternalMemberTypeE // TypeDefIndex: 1008
	{
		Empty = 0,
		Header = 1,
		Field = 2,
		Item = 3
	}

	[Serializable]
	internal enum InternalMemberValueE // TypeDefIndex: 1009
	{
		Empty = 0,
		InlineValue = 1,
		Nested = 2,
		Reference = 3,
		Null = 4
	}

	[Serializable]
	internal enum InternalPrimitiveTypeE // TypeDefIndex: 1010
	{
		Invalid = 0,
		Boolean = 1,
		Byte = 2,
		Char = 3,
		Currency = 4,
		Decimal = 5,
		Double = 6,
		Int16 = 7,
		Int32 = 8,
		Int64 = 9,
		SByte = 10,
		Single = 11,
		TimeSpan = 12,
		DateTime = 13,
		UInt16 = 14,
		UInt32 = 15,
		UInt64 = 16,
		Null = 17,
		String = 18
	}

	[Serializable]
	[Flags] // 0x0039813C-0x0039814C
	internal enum MessageEnum // TypeDefIndex: 1011
	{
		NoArgs = 1,
		ArgsInline = 2,
		ArgsIsArray = 4,
		ArgsInArray = 8,
		NoContext = 16,
		ContextInline = 32,
		ContextInArray = 64,
		MethodSignatureInArray = 128,
		PropertyInArray = 256,
		NoReturnValue = 512,
		ReturnValueVoid = 1024,
		ReturnValueInline = 2048,
		ReturnValueInArray = 4096,
		ExceptionInArray = 8192,
		GenericMethod = 32768
	}

	[Serializable]
	internal enum ValueFixupEnum // TypeDefIndex: 1012
	{
		Empty = 0,
		Array = 1,
		Header = 2,
		Member = 3
	}

	[ComVisible] // 0x0039814C-0x00398160
	public sealed class BinaryFormatter : IRemotingFormatter // TypeDefIndex: 1013
	{
		// Fields
		internal ISurrogateSelector m_surrogates; // 0x10
		internal StreamingContext m_context; // 0x18
		internal SerializationBinder m_binder; // 0x28
		internal FormatterTypeStyle m_typeFormat; // 0x30
		internal FormatterAssemblyStyle m_assemblyFormat; // 0x34
		internal TypeFilterLevel m_securityLevel; // 0x38
		internal object[] m_crossAppDomainArray; // 0x40
		private static Dictionary<Type, TypeInformation> typeNameCache; // 0x00
	
		// Properties
		public FormatterAssemblyStyle AssemblyFormat { set; } // 0x005A4068-0x005A4070
		public ISurrogateSelector SurrogateSelector { set; } // 0x005A4070-0x005A4078
	
		// Constructors
		public BinaryFormatter(); // 0x005A4078-0x005A40D4
		public BinaryFormatter(ISurrogateSelector selector, StreamingContext context); // 0x005A40D4-0x005A4124
		static BinaryFormatter(); // 0x005A5380-0x005A53F4
	
		// Methods
		public object Deserialize(Stream serializationStream); // 0x005A4124-0x005A4130
		internal object Deserialize(Stream serializationStream, HeaderHandler handler, bool fCheck); // 0x005A4138-0x005A43B8
		public object Deserialize(Stream serializationStream, HeaderHandler handler); // 0x005A4130-0x005A4138
		public void Serialize(Stream serializationStream, object graph); // 0x005A49F4-0x005A4A00
		public void Serialize(Stream serializationStream, object graph, Header[] headers); // 0x005A4A00-0x005A4A08
		internal void Serialize(Stream serializationStream, object graph, Header[] headers, bool fCheck); // 0x005A4A08-0x005A4C34
		internal static TypeInformation GetTypeInformation(Type type); // 0x005A5104-0x005A533C
	}

	internal sealed class __BinaryWriter // TypeDefIndex: 1014
	{
		// Fields
		internal Stream sout; // 0x10
		internal FormatterTypeStyle formatterTypeStyle; // 0x18
		internal Hashtable objectMapTable; // 0x20
		internal ObjectWriter objectWriter; // 0x28
		internal BinaryWriter dataWriter; // 0x30
		internal int m_nestedObjectCount; // 0x38
		private int nullCount; // 0x3C
		internal BinaryMethodCall binaryMethodCall; // 0x40
		internal BinaryMethodReturn binaryMethodReturn; // 0x48
		internal BinaryObject binaryObject; // 0x50
		internal BinaryObjectWithMap binaryObjectWithMap; // 0x58
		internal BinaryObjectWithMapTyped binaryObjectWithMapTyped; // 0x60
		internal BinaryObjectString binaryObjectString; // 0x68
		internal BinaryArray binaryArray; // 0x70
		private byte[] byteBuffer; // 0x78
		private int chunkSize; // 0x80
		internal MemberPrimitiveUnTyped memberPrimitiveUnTyped; // 0x88
		internal MemberPrimitiveTyped memberPrimitiveTyped; // 0x90
		internal ObjectNull objectNull; // 0x98
		internal MemberReference memberReference; // 0xA0
		internal BinaryAssembly binaryAssembly; // 0xA8
	
		// Constructors
		internal __BinaryWriter(Stream sout, ObjectWriter objectWriter, FormatterTypeStyle formatterTypeStyle); // 0x0060CCC8-0x0060CD80
	
		// Methods
		internal void WriteBegin(); // 0x0060CD80-0x0060CD84
		internal void WriteEnd(); // 0x0060CD84-0x0060CDB8
		internal void WriteBoolean(bool value); // 0x0060CDB8-0x0060CDF4
		internal void WriteByte(byte value); // 0x0060CDF4-0x0060CE30
		private void WriteBytes(byte[] value); // 0x0060CE30-0x0060CE6C
		private void WriteBytes(byte[] byteA, int offset, int size); // 0x0060CE6C-0x0060CEC0
		internal void WriteChar(char value); // 0x0060CEC0-0x0060CEFC
		internal void WriteChars(char[] value); // 0x0060CEFC-0x0060CF38
		internal void WriteDecimal(decimal value); // 0x0060CF38-0x0060CFE8
		internal void WriteSingle(float value); // 0x0060D028-0x0060D070
		internal void WriteDouble(double value); // 0x0060D070-0x0060D0B4
		internal void WriteInt16(short value); // 0x0060D0B4-0x0060D0F4
		internal void WriteInt32(int value); // 0x0060D0F4-0x0060D134
		internal void WriteInt64(long value); // 0x0060D134-0x0060D174
		internal void WriteSByte(sbyte value); // 0x0060D174-0x0060D1B0
		internal void WriteString(string value); // 0x0060CFE8-0x0060D028
		internal void WriteTimeSpan(TimeSpan value); // 0x0060D1B0-0x0060D210
		internal void WriteDateTime(DateTime value); // 0x0060D210-0x0060D270
		internal void WriteUInt16(ushort value); // 0x0060D270-0x0060D2B0
		internal void WriteUInt32(uint value); // 0x0060D2B0-0x0060D2F0
		internal void WriteUInt64(ulong value); // 0x0060D2F0-0x0060D330
		internal void WriteObjectEnd(NameInfo memberNameInfo, NameInfo typeNameInfo); // 0x0060D330-0x0060D334
		internal void WriteSerializationHeaderEnd(); // 0x0060D334-0x0060D3E0
		internal void WriteSerializationHeader(int topId, int headerId, int minorVersion, int majorVersion); // 0x0060D3E0-0x0060D4AC
		internal void WriteMethodCall(); // 0x0060D4AC-0x0060D548
		internal void WriteMethodReturn(); // 0x0060D548-0x0060D5E4
		internal void WriteObject(NameInfo nameInfo, NameInfo typeNameInfo, int numMembers, string[] memberNames, Type[] memberTypes, WriteObjectInfo[] memberObjectInfos); // 0x0060D5E4-0x0060DC00
		internal void WriteObjectString(int objectId, string value); // 0x0060DCDC-0x0060DD98
		internal void WriteSingleArray(NameInfo memberNameInfo, NameInfo arrayNameInfo, WriteObjectInfo objectInfo, NameInfo arrayElemTypeNameInfo, int length, int lowerBound, Array array); // 0x0060DD98-0x0060E164
		private void WriteArrayAsBytes(Array array, int typeLength); // 0x0060E164-0x0060E450
		internal void WriteJaggedArray(NameInfo memberNameInfo, NameInfo arrayNameInfo, WriteObjectInfo objectInfo, NameInfo arrayElemTypeNameInfo, int length, int lowerBound); // 0x0060E450-0x0060E65C
		internal void WriteRectangleArray(NameInfo memberNameInfo, NameInfo arrayNameInfo, WriteObjectInfo objectInfo, NameInfo arrayElemTypeNameInfo, int rank, int[] lengthA, int[] lowerBoundA); // 0x0060E65C-0x0060E844
		internal void WriteObjectByteArray(NameInfo memberNameInfo, NameInfo arrayNameInfo, WriteObjectInfo objectInfo, NameInfo arrayElemTypeNameInfo, int length, int lowerBound, byte[] byteA); // 0x0060E844-0x0060E8B0
		internal void WriteMember(NameInfo memberNameInfo, NameInfo typeNameInfo, object value); // 0x0060E8B0-0x0060EA4C
		internal void WriteNullMember(NameInfo memberNameInfo, NameInfo typeNameInfo); // 0x0060EA4C-0x0060EB44
		internal void WriteMemberObjectRef(NameInfo memberNameInfo, int idRef); // 0x0060EB44-0x0060EC24
		internal void WriteMemberNested(NameInfo memberNameInfo); // 0x0060EC24-0x0060EC58
		internal void WriteMemberString(NameInfo memberNameInfo, NameInfo typeNameInfo, string value); // 0x0060EC58-0x0060ECB8
		internal void WriteItem(NameInfo itemNameInfo, NameInfo typeNameInfo, object value); // 0x0060ECB8-0x0060ECFC
		internal void WriteNullItem(NameInfo itemNameInfo, NameInfo typeNameInfo); // 0x0060ECFC-0x0060ED0C
		internal void WriteDelayedNullItem(); // 0x0060ED0C-0x0060ED1C
		internal void WriteItemEnd(); // 0x0060ED1C-0x0060ED20
		private void InternalWriteItemNull(); // 0x0060DC00-0x0060DCDC
		internal void WriteItemObjectRef(NameInfo nameInfo, int idRef); // 0x0060ED20-0x0060ED5C
		internal void WriteAssembly(Type type, string assemblyString, int assemId, bool isNew); // 0x0060ED5C-0x0060EE74
		internal void WriteValue(InternalPrimitiveTypeE code, object value); // 0x0060EE74-0x0060F6F8
	}

	internal sealed class ObjectMapInfo // TypeDefIndex: 1015
	{
		// Fields
		internal int objectId; // 0x10
		private int numMembers; // 0x14
		private string[] memberNames; // 0x18
		private Type[] memberTypes; // 0x20
	
		// Constructors
		internal ObjectMapInfo(int objectId, int numMembers, string[] memberNames, Type[] memberTypes); // 0x005ABA7C-0x005ABAC8
	
		// Methods
		internal bool isCompatible(int numMembers, string[] memberNames, Type[] memberTypes); // 0x005ABAC8-0x005ABC74
	}

	internal sealed class WriteObjectInfo // TypeDefIndex: 1016
	{
		// Fields
		internal int objectInfoId; // 0x10
		internal object obj; // 0x18
		internal Type objectType; // 0x20
		internal bool isSi; // 0x28
		internal bool isNamed; // 0x29
		internal bool isTyped; // 0x2A
		internal bool isArray; // 0x2B
		internal SerializationInfo si; // 0x30
		internal SerObjectInfoCache cache; // 0x38
		internal object[] memberData; // 0x40
		internal ISerializationSurrogate serializationSurrogate; // 0x48
		internal StreamingContext context; // 0x50
		internal SerObjectInfoInit serObjectInfoInit; // 0x60
		internal long objectId; // 0x68
		internal long assemId; // 0x70
		private string binderTypeName; // 0x78
		private string binderAssemblyString; // 0x80
	
		// Constructors
		internal WriteObjectInfo(); // 0x005B8788-0x005B8790
	
		// Methods
		internal void ObjectEnd(); // 0x005B428C-0x005B429C
		private void InternalInit(); // 0x005B87D0-0x005B87F0
		internal static WriteObjectInfo Serialize(object obj, ISurrogateSelector surrogateSelector, StreamingContext context, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, ObjectWriter objectWriter, SerializationBinder binder); // 0x005B39B0-0x005B3A50
		internal void InitSerialize(object obj, ISurrogateSelector surrogateSelector, StreamingContext context, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, ObjectWriter objectWriter, SerializationBinder binder); // 0x005B8944-0x005B8F08
		internal static WriteObjectInfo Serialize(Type objectType, ISurrogateSelector surrogateSelector, StreamingContext context, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, SerializationBinder binder); // 0x005B51E0-0x005B5270
		internal void InitSerialize(Type objectType, ISurrogateSelector surrogateSelector, StreamingContext context, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, SerializationBinder binder); // 0x005B9AE8-0x005B9DC8
		private void InitSiWrite(); // 0x005B9080-0x005B9524
		private static void CheckTypeForwardedFrom(SerObjectInfoCache cache, Type objectType, string binderAssemblyString); // 0x005B9524-0x005B96B4
		private void InitNoMembers(); // 0x005B8F08-0x005B9058
		private void InitMemberInfo(); // 0x005B96B4-0x005B9AE8
		internal string GetTypeFullName(); // 0x005A32CC-0x005A3308
		internal string GetAssemblyString(); // 0x005A3290-0x005A32CC
		private void InvokeSerializationBinder(SerializationBinder binder); // 0x005B9058-0x005B9080
		internal Type GetMemberType(MemberInfo objMember); // 0x005B9DC8-0x005B9F94
		internal void GetMemberInfo(out string[] outMemberNames, out Type[] outMemberTypes, out object[] outMemberData); // 0x005B50A8-0x005B51A4
		private static WriteObjectInfo GetObjectInfo(SerObjectInfoInit serObjectInfoInit); // 0x005B87F0-0x005B8944
		private static void PutObjectInfo(SerObjectInfoInit serObjectInfoInit, WriteObjectInfo objectInfo); // 0x005B8790-0x005B87D0
	}

	internal sealed class ReadObjectInfo // TypeDefIndex: 1017
	{
		// Fields
		internal int objectInfoId; // 0x10
		internal static int readObjectInfoCounter; // 0x00
		internal Type objectType; // 0x18
		internal ObjectManager objectManager; // 0x20
		internal int count; // 0x28
		internal bool isSi; // 0x2C
		internal bool isNamed; // 0x2D
		internal bool isTyped; // 0x2E
		internal bool bSimpleAssembly; // 0x2F
		internal SerObjectInfoCache cache; // 0x30
		internal string[] wireMemberNames; // 0x38
		internal Type[] wireMemberTypes; // 0x40
		private int lastPosition; // 0x48
		internal ISerializationSurrogate serializationSurrogate; // 0x50
		internal StreamingContext context; // 0x58
		internal List<Type> memberTypesList; // 0x68
		internal SerObjectInfoInit serObjectInfoInit; // 0x70
		internal IFormatterConverter formatterConverter; // 0x78
	
		// Constructors
		internal ReadObjectInfo(); // 0x005B703C-0x005B7044
	
		// Methods
		internal void ObjectEnd(); // 0x005B1170-0x005B1174
		internal void PrepareForReuse(); // 0x005AB910-0x005AB918
		internal static ReadObjectInfo Create(Type objectType, ISurrogateSelector surrogateSelector, StreamingContext context, ObjectManager objectManager, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, bool bSimpleAssembly); // 0x005ACD34-0x005ACDCC
		internal void Init(Type objectType, ISurrogateSelector surrogateSelector, StreamingContext context, ObjectManager objectManager, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, bool bSimpleAssembly); // 0x005B70C4-0x005B70E0
		internal static ReadObjectInfo Create(Type objectType, string[] memberNames, Type[] memberTypes, ISurrogateSelector surrogateSelector, StreamingContext context, ObjectManager objectManager, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, bool bSimpleAssembly); // 0x005ACDCC-0x005ACE78
		internal void Init(Type objectType, string[] memberNames, Type[] memberTypes, ISurrogateSelector surrogateSelector, StreamingContext context, ObjectManager objectManager, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, bool bSimpleAssembly); // 0x005B72A8-0x005B72F8
		private void InitReadConstructor(Type objectType, ISurrogateSelector surrogateSelector, StreamingContext context); // 0x005B70E0-0x005B72A8
		private void InitSiRead(); // 0x005B7364-0x005B73D8
		private void InitNoMembers(); // 0x005B72F8-0x005B7364
		private void InitMemberInfo(); // 0x005B73D8-0x005B76DC
		internal MemberInfo GetMemberInfo(string name); // 0x005B2D2C-0x005B2F34
		internal Type GetType(string name); // 0x005B27B8-0x005B2968
		internal void AddValue(string name, object value, ref SerializationInfo si, ref object[] memberData); // 0x005B2968-0x005B2A40
		internal void InitDataStore(ref SerializationInfo si, ref object[] memberData); // 0x005AB844-0x005AB910
		internal void RecordFixup(long objectId, string name, long idRef); // 0x005B2A88-0x005B2B8C
		internal void PopulateObjectMembers(object obj, object[] memberData); // 0x005B0D38-0x005B0DE4
		private int Position(string name); // 0x005B7978-0x005B7B98
		internal Type[] GetMemberTypes(string[] inMemberNames, Type objectType); // 0x005AABAC-0x005AB29C
		internal Type GetMemberType(MemberInfo objMember); // 0x005B77AC-0x005B7978
		private static ReadObjectInfo GetObjectInfo(SerObjectInfoInit serObjectInfoInit); // 0x005B7044-0x005B70C4
	}

	internal sealed class SerObjectInfoInit // TypeDefIndex: 1018
	{
		// Fields
		internal Hashtable seenBeforeTable; // 0x10
		internal int objectInfoIdCount; // 0x18
		internal SerStack oiPool; // 0x20
	
		// Constructors
		public SerObjectInfoInit(); // 0x005AC290-0x005AC328
	}

	internal sealed class SerObjectInfoCache // TypeDefIndex: 1019
	{
		// Fields
		internal string fullTypeName; // 0x10
		internal string assemblyString; // 0x18
		internal bool hasTypeForwardedFrom; // 0x20
		internal MemberInfo[] memberInfos; // 0x28
		internal string[] memberNames; // 0x30
		internal Type[] memberTypes; // 0x38
	
		// Constructors
		internal SerObjectInfoCache(string typeName, string assemblyName, bool hasTypeForwardedFrom); // 0x005B7B98-0x005B7BDC
		internal SerObjectInfoCache(Type type); // 0x005B76DC-0x005B77AC
	}

	internal sealed class TypeInformation // TypeDefIndex: 1020
	{
		// Fields
		private string fullTypeName; // 0x10
		private string assemblyString; // 0x18
		private bool hasTypeForwardedFrom; // 0x20
	
		// Properties
		internal string FullTypeName { get; } // 0x005B7BDC-0x005B7BE4 
		internal string AssemblyString { get; } // 0x005B3808-0x005B3810 
		internal bool HasTypeForwardedFrom { get; } // 0x005B3800-0x005B3808 
	
		// Constructors
		internal TypeInformation(string fullTypeName, string assemblyString, bool hasTypeForwardedFrom); // 0x005A533C-0x005A5380
	}

	internal sealed class ObjectReader // TypeDefIndex: 1021
	{
		// Fields
		internal Stream m_stream; // 0x10
		internal ISurrogateSelector m_surrogates; // 0x18
		internal StreamingContext m_context; // 0x20
		internal ObjectManager m_objectManager; // 0x30
		internal InternalFE formatterEnums; // 0x38
		internal SerializationBinder m_binder; // 0x40
		internal long topId; // 0x48
		internal bool bSimpleAssembly; // 0x50
		internal object handlerObject; // 0x58
		internal object m_topObject; // 0x60
		internal Header[] headers; // 0x68
		internal HeaderHandler handler; // 0x70
		internal SerObjectInfoInit serObjectInfoInit; // 0x78
		internal IFormatterConverter m_formatterConverter; // 0x80
		internal SerStack stack; // 0x88
		private SerStack valueFixupStack; // 0x90
		internal object[] crossAppDomainArray; // 0x98
		private bool bFullDeserialization; // 0xA0
		private bool bOldFormatDetected; // 0xA1
		private IntSizedArray valTypeObjectIdTable; // 0xA8
		private NameCache typeCache; // 0xB0
		private string previousAssemblyString; // 0xB8
		private string previousName; // 0xC0
		private Type previousType; // 0xC8
	
		// Properties
		private SerStack ValueFixupStack { get; } // 0x005AC17C-0x005AC1F0 
		internal object TopObject { get; set; } // 0x005AC26C-0x005AC274 0x005AC274-0x005AC290
	
		// Nested types
		internal class TypeNAssembly // TypeDefIndex: 1022
		{
			// Fields
			public Type type; // 0x10
			public string assemblyName; // 0x18
	
			// Constructors
			public TypeNAssembly(); // 0x005B37CC-0x005B37D4
		}
	
		internal sealed class TopLevelAssemblyTypeResolver // TypeDefIndex: 1023
		{
			// Fields
			private Assembly m_topLevelAssembly; // 0x10
	
			// Constructors
			public TopLevelAssemblyTypeResolver(Assembly topLevelAssembly); // 0x005B37D4-0x005B3800
	
			// Methods
			public Type ResolveType(Assembly assembly, string simpleTypeName, bool ignoreCase); // 0x005B3810-0x005B3880
		}
	
		// Constructors
		internal ObjectReader(Stream stream, ISurrogateSelector selector, StreamingContext context, InternalFE formatterEnums, SerializationBinder binder); // 0x005A43C0-0x005A44D0
	
		// Methods
		internal object Deserialize(HeaderHandler handler, __BinaryParser serParser, bool fCheck); // 0x005A45B4-0x005A49F4
		private bool HasSurrogate(Type t); // 0x005AC98C-0x005ACA78
		private void CheckSerializable(Type t); // 0x005ACA78-0x005ACBFC
		private void InitFullDeserialization(); // 0x005ACBFC-0x005ACCE0
		internal object CrossAppDomainArray(int index); // 0x005ACCE0-0x005ACD34
		internal ReadObjectInfo CreateReadObjectInfo(Type objectType); // 0x005AAB78-0x005AABAC
		internal ReadObjectInfo CreateReadObjectInfo(Type objectType, string[] memberNames, Type[] memberTypes); // 0x005AB784-0x005AB7C8
		internal void Parse(ParseRecord pr); // 0x005ACE78-0x005AE03C
		private void ParseError(ParseRecord processing, ParseRecord onStack); // 0x005AEFCC-0x005B0260
		private void ParseSerializedStreamHeader(ParseRecord pr); // 0x005AE03C-0x005AE070
		private void ParseSerializedStreamHeaderEnd(ParseRecord pr); // 0x005AE070-0x005AE09C
		private void ParseObject(ParseRecord pr); // 0x005AE09C-0x005AE42C
		private void ParseObjectEnd(ParseRecord pr); // 0x005AE42C-0x005AE7D8
		private void ParseArray(ParseRecord pr); // 0x005B03D4-0x005B0CD4
		private void NextRectangleMap(ParseRecord pr); // 0x005B11B4-0x005B1328
		private void ParseArrayMember(ParseRecord pr); // 0x005B1328-0x005B215C
		private void ParseArrayMemberEnd(ParseRecord pr); // 0x005B276C-0x005B27B8
		private void ParseMember(ParseRecord pr); // 0x005AE7D8-0x005AEEF0
		private void ParseMemberEnd(ParseRecord pr); // 0x005AEEF0-0x005AEFCC
		private void ParseString(ParseRecord pr, ParseRecord parentPr); // 0x005B219C-0x005B220C
		private void RegisterObject(object obj, ParseRecord pr, ParseRecord objectPr); // 0x005B0D30-0x005B0D38
		private void RegisterObject(object obj, ParseRecord pr, ParseRecord objectPr, bool bIsString); // 0x005B2B8C-0x005B2D2C
		internal long GetId(long objectId); // 0x005B2F34-0x005B3034
		internal Type Bind(string assemblyString, string typeString); // 0x005B3034-0x005B309C
		internal Type FastBindToType(string assemblyName, string typeName); // 0x005B309C-0x005B33F0
		private static Assembly ResolveSimpleAssemblyName(AssemblyName assemblyName); // 0x005B33F0-0x005B3464
		private static void GetSimplyNamedTypeFromAssembly(Assembly assm, string typeName, ref Type type); // 0x005B3464-0x005B3680
		internal Type GetType(BinaryAssemblyInfo assemblyInfo, string name); // 0x005A3CB8-0x005A3EE8
		private static void CheckTypeForwardedTo(Assembly sourceAssembly, Assembly destAssembly, Type resolvedType); // 0x005B3680-0x005B37CC
	}

	internal sealed class ObjectWriter // TypeDefIndex: 1024
	{
		// Fields
		private Queue m_objectQueue; // 0x10
		private ObjectIDGenerator m_idGenerator; // 0x18
		private int m_currentId; // 0x20
		private ISurrogateSelector m_surrogates; // 0x28
		private StreamingContext m_context; // 0x30
		private __BinaryWriter serWriter; // 0x40
		private SerializationObjectManager m_objectManager; // 0x48
		private long topId; // 0x50
		private string topName; // 0x58
		private Header[] headers; // 0x60
		private InternalFE formatterEnums; // 0x68
		private SerializationBinder m_binder; // 0x70
		private SerObjectInfoInit serObjectInfoInit; // 0x78
		private IFormatterConverter m_formatterConverter; // 0x80
		internal object[] crossAppDomainArray; // 0x88
		private object previousObj; // 0x90
		private long previousId; // 0x98
		private Type previousType; // 0xA0
		private InternalPrimitiveTypeE previousCode; // 0xA8
		private Hashtable assemblyToIdTable; // 0xB0
		private SerStack niPool; // 0xB8
	
		// Properties
		internal SerializationObjectManager ObjectManager { get; } // 0x005B4448-0x005B4450 
	
		// Constructors
		internal ObjectWriter(ISurrogateSelector selector, StreamingContext context, InternalFE formatterEnums, SerializationBinder binder); // 0x005A4C34-0x005A4D10
	
		// Methods
		internal void Serialize(object graph, Header[] inHeaders, __BinaryWriter serWriter, bool fCheck); // 0x005A4D10-0x005A5104
		private void Write(WriteObjectInfo objectInfo, NameInfo memberNameInfo, NameInfo typeNameInfo); // 0x005B3D2C-0x005B4258
		private void Write(WriteObjectInfo objectInfo, NameInfo memberNameInfo, NameInfo typeNameInfo, string[] memberNames, Type[] memberTypes, object[] memberData, WriteObjectInfo[] memberObjectInfos); // 0x005B5270-0x005B5700
		private void WriteMemberSetup(WriteObjectInfo objectInfo, NameInfo memberNameInfo, NameInfo typeNameInfo, string memberName, Type memberType, object memberData, WriteObjectInfo memberObjectInfo); // 0x005B5734-0x005B5844
		private void WriteMembers(NameInfo memberNameInfo, NameInfo memberTypeNameInfo, object memberData, WriteObjectInfo objectInfo, NameInfo typeNameInfo, WriteObjectInfo memberObjectInfo); // 0x005B587C-0x005B5C2C
		private void WriteArray(WriteObjectInfo objectInfo, NameInfo memberNameInfo, WriteObjectInfo memberObjectInfo); // 0x005B4450-0x005B50A8
		private void WriteArrayMember(WriteObjectInfo objectInfo, NameInfo arrayElemTypeNameInfo, object data); // 0x005B6034-0x005B637C
		private void WriteRectangle(WriteObjectInfo objectInfo, int rank, int[] maxA, Array array, NameInfo arrayElemNameTypeInfo, int[] lowerBoundA); // 0x005B637C-0x005B66D4
		private object GetNext(out long objID); // 0x005B429C-0x005B4448
		private long InternalGetId(object obj, bool assignUniqueIdToValueType, Type type, out bool isNew); // 0x005B38D0-0x005B39B0
		private long Schedule(object obj, bool assignUniqueIdToValueType, Type type); // 0x005B66D4-0x005B66E0
		private long Schedule(object obj, bool assignUniqueIdToValueType, Type type, WriteObjectInfo objectInfo); // 0x005B5E18-0x005B5ED0
		private bool WriteKnownValueClass(NameInfo memberNameInfo, NameInfo typeNameInfo, object data); // 0x005B5F18-0x005B6034
		private void WriteObjectRef(NameInfo nameInfo, long objectId); // 0x005B5ED0-0x005B5F18
		private void WriteString(NameInfo memberNameInfo, NameInfo typeNameInfo, object stringObject); // 0x005B66E0-0x005B6850
		private bool CheckForNull(WriteObjectInfo objectInfo, NameInfo memberNameInfo, NameInfo typeNameInfo, object data); // 0x005B5C2C-0x005B5D58
		private void WriteSerializedStreamHeader(long topId, long headerId); // 0x005B3880-0x005B38D0
		private NameInfo TypeToNameInfo(Type type, WriteObjectInfo objectInfo, InternalPrimitiveTypeE code, NameInfo nameInfo); // 0x005B6850-0x005B6938
		private NameInfo TypeToNameInfo(Type type); // 0x005B5844-0x005B587C
		private NameInfo TypeToNameInfo(WriteObjectInfo objectInfo); // 0x005B3CBC-0x005B3D2C
		private NameInfo TypeToNameInfo(WriteObjectInfo objectInfo, NameInfo nameInfo); // 0x005B5D9C-0x005B5E18
		private void TypeToNameInfo(Type type, NameInfo nameInfo); // 0x005B5D58-0x005B5D9C
		private NameInfo MemberToNameInfo(string name); // 0x005B5700-0x005B5734
		internal InternalPrimitiveTypeE ToCode(Type type); // 0x005A31FC-0x005A3290
		private long GetAssemblyId(WriteObjectInfo objectInfo); // 0x005B3A50-0x005B3CBC
		private Type GetType(object obj); // 0x005B51B0-0x005B51E0
		private NameInfo GetNameInfo(); // 0x005B6938-0x005B6A60
		private bool CheckTypeFormat(FormatterTypeStyle test, FormatterTypeStyle want); // 0x005B51A4-0x005B51B0
		private void PutNameInfo(NameInfo nameInfo); // 0x005B4258-0x005B428C
	}

	internal sealed class __BinaryParser // TypeDefIndex: 1025
	{
		// Fields
		internal ObjectReader objectReader; // 0x10
		internal Stream input; // 0x18
		internal long topId; // 0x20
		internal long headerId; // 0x28
		internal SizedArray objectMapIdTable; // 0x30
		internal SizedArray assemIdToAssemblyTable; // 0x38
		internal SerStack stack; // 0x40
		internal BinaryTypeEnum expectedType; // 0x48
		internal object expectedTypeInformation; // 0x50
		internal ParseRecord PRS; // 0x58
		private BinaryAssemblyInfo systemAssemblyInfo; // 0x60
		private BinaryReader dataReader; // 0x68
		private static Encoding encoding; // 0x00
		private SerStack opPool; // 0x70
		private BinaryObject binaryObject; // 0x78
		private BinaryObjectWithMap bowm; // 0x80
		private BinaryObjectWithMapTyped bowmt; // 0x88
		internal BinaryObjectString objectString; // 0x90
		internal BinaryCrossAppDomainString crossAppDomainString; // 0x98
		internal MemberPrimitiveTyped memberPrimitiveTyped; // 0xA0
		private byte[] byteBuffer; // 0xA8
		internal MemberPrimitiveUnTyped memberPrimitiveUnTyped; // 0xB0
		internal MemberReference memberReference; // 0xB8
		internal ObjectNull objectNull; // 0xC0
		internal static MessageEnd messageEnd; // 0x08
	
		// Properties
		internal BinaryAssemblyInfo SystemAssemblyInfo { get; } // 0x005B9F94-0x005BB038 
		internal SizedArray ObjectMapIdTable { get; } // 0x005BB038-0x005BB0A0 
		internal SizedArray AssemIdToAssemblyTable { get; } // 0x005BB0A0-0x005BB10C 
		internal ParseRecord prs { get; } // 0x005BB10C-0x005BB178 
	
		// Constructors
		internal __BinaryParser(Stream stream, ObjectReader objectReader); // 0x005A44D0-0x005A45B4
		static __BinaryParser(); // 0x005BF208-0x005BF27C
	
		// Methods
		internal void Run(); // 0x005AC328-0x005AC98C
		internal void ReadBegin(); // 0x005BB178-0x005BB17C
		internal void ReadEnd(); // 0x005BD748-0x005BD74C
		internal bool ReadBoolean(); // 0x005BDB28-0x005BDB5C
		internal byte ReadByte(); // 0x005A25CC-0x005A2600
		internal byte[] ReadBytes(int length); // 0x005B8120-0x005B8160
		internal void ReadBytes(byte[] byteA, int offset, int size); // 0x005BDB5C-0x005BDBEC
		internal char ReadChar(); // 0x005BDBEC-0x005BDC20
		internal char[] ReadChars(int length); // 0x005BDC20-0x005BDC60
		internal decimal ReadDecimal(); // 0x005BDC60-0x005BDD28
		internal float ReadSingle(); // 0x005BDD28-0x005BDD60
		internal double ReadDouble(); // 0x005BDD60-0x005BDD98
		internal short ReadInt16(); // 0x005BDD98-0x005BDDCC
		internal int ReadInt32(); // 0x005A2594-0x005A25CC
		internal long ReadInt64(); // 0x005BDDCC-0x005BDE04
		internal sbyte ReadSByte(); // 0x005BDE04-0x005BDE38
		internal string ReadString(); // 0x005A2978-0x005A29B0
		internal TimeSpan ReadTimeSpan(); // 0x005BDE38-0x005BDE8C
		internal DateTime ReadDateTime(); // 0x005BDE8C-0x005BDF20
		internal ushort ReadUInt16(); // 0x005BDF20-0x005BDF58
		internal uint ReadUInt32(); // 0x005BDF58-0x005BDF90
		internal ulong ReadUInt64(); // 0x005BDF90-0x005BDFC8
		internal void ReadSerializationHeaderRecord(); // 0x005BB17C-0x005BB2A8
		internal void ReadAssembly(BinaryHeaderEnum binaryHeaderEnum); // 0x005BB2A8-0x005BB564
		private void ReadObject(); // 0x005BB564-0x005BBA24
		internal void ReadCrossAppDomainMap(); // 0x005BBA24-0x005BBC04
		internal void ReadObjectWithMap(BinaryHeaderEnum binaryHeaderEnum); // 0x005BBC04-0x005BBCBC
		private void ReadObjectWithMap(BinaryObjectWithMap record); // 0x005BE0C0-0x005BE674
		internal void ReadObjectWithMapTyped(BinaryHeaderEnum binaryHeaderEnum); // 0x005BBCBC-0x005BBD64
		private void ReadObjectWithMapTyped(BinaryObjectWithMapTyped record); // 0x005BE674-0x005BECE0
		private void ReadObjectString(BinaryHeaderEnum binaryHeaderEnum); // 0x005BBD64-0x005BC434
		private void ReadMemberPrimitiveTyped(); // 0x005BCBD0-0x005BD050
		private void ReadArray(BinaryHeaderEnum binaryHeaderEnum); // 0x005BC434-0x005BCBD0
		private void ReadArrayAsBytes(ParseRecord pr); // 0x005BECE0-0x005BF208
		private void ReadMemberPrimitiveUnTyped(); // 0x005BD74C-0x005BDA98
		private void ReadMemberReference(); // 0x005BD050-0x005BD300
		private void ReadObjectNull(BinaryHeaderEnum binaryHeaderEnum); // 0x005BD300-0x005BD5C0
		private void ReadMessageEnd(); // 0x005BD5C0-0x005BD748
		internal object ReadValue(InternalPrimitiveTypeE code); // 0x005AA0C8-0x005AA4C4
		private ObjectProgress GetOp(); // 0x005BDFC8-0x005BE0C0
		private void PutOp(ObjectProgress op); // 0x005BDA98-0x005BDB28
	}

	internal sealed class ParseRecord // TypeDefIndex: 1026
	{
		// Fields
		internal static int parseRecordIdCount; // 0x00
		internal InternalParseTypeE PRparseTypeEnum; // 0x10
		internal InternalObjectTypeE PRobjectTypeEnum; // 0x14
		internal InternalArrayTypeE PRarrayTypeEnum; // 0x18
		internal InternalMemberTypeE PRmemberTypeEnum; // 0x1C
		internal InternalMemberValueE PRmemberValueEnum; // 0x20
		internal InternalObjectPositionE PRobjectPositionEnum; // 0x24
		internal string PRname; // 0x28
		internal string PRvalue; // 0x30
		internal object PRvarValue; // 0x38
		internal string PRkeyDt; // 0x40
		internal Type PRdtType; // 0x48
		internal InternalPrimitiveTypeE PRdtTypeCode; // 0x50
		internal bool PRisEnum; // 0x54
		internal long PRobjectId; // 0x58
		internal long PRidRef; // 0x60
		internal string PRarrayElementTypeString; // 0x68
		internal Type PRarrayElementType; // 0x70
		internal bool PRisArrayVariant; // 0x78
		internal InternalPrimitiveTypeE PRarrayElementTypeCode; // 0x7C
		internal int PRrank; // 0x80
		internal int[] PRlengthA; // 0x88
		internal int[] PRpositionA; // 0x90
		internal int[] PRlowerBoundA; // 0x98
		internal int[] PRupperBoundA; // 0xA0
		internal int[] PRindexMap; // 0xA8
		internal int PRmemberIndex; // 0xB0
		internal int PRlinearlength; // 0xB4
		internal int[] PRrectangularMap; // 0xB8
		internal bool PRisLowerBound; // 0xC0
		internal long PRtopId; // 0xC8
		internal long PRheaderId; // 0xD0
		internal ReadObjectInfo PRobjectInfo; // 0xD8
		internal bool PRisValueTypeFixup; // 0xE0
		internal object PRnewObj; // 0xE8
		internal object[] PRobjectA; // 0xF0
		internal PrimitiveArray PRprimitiveArray; // 0xF8
		internal bool PRisRegistered; // 0x100
		internal object[] PRmemberData; // 0x108
		internal SerializationInfo PRsi; // 0x110
		internal int PRnullCount; // 0x118
	
		// Constructors
		internal ParseRecord(); // 0x005ABE68-0x005ABE70
		static ParseRecord(); // 0x005B6A70-0x005B6AC4
	
		// Methods
		internal void Init(); // 0x005ABF1C-0x005ABF78
	}

	internal sealed class SerStack // TypeDefIndex: 1027
	{
		// Fields
		internal object[] objects; // 0x10
		internal string stackId; // 0x18
		internal int top; // 0x20
	
		// Constructors
		internal SerStack(string stackId); // 0x005AC1F0-0x005AC26C
	
		// Methods
		internal void Push(object obj); // 0x005B0260-0x005B0328
		internal object Pop(); // 0x005B0328-0x005B03D4
		internal void IncreaseCapacity(); // 0x005B7BE4-0x005B7C88
		internal object Peek(); // 0x005B0CD4-0x005B0D30
		internal object PeekPeek(); // 0x005B7C88-0x005B7CEC
		internal bool IsEmpty(); // 0x005B6A60-0x005B6A70
	}

	[Serializable]
	internal sealed class SizedArray : ICloneable // TypeDefIndex: 1028
	{
		// Fields
		internal object[] objects; // 0x10
		internal object[] negObjects; // 0x18
	
		// Properties
		internal object this[int index] { get => default; set {} } // 0x005AB69C-0x005AB784 0x005B83BC-0x005B8534
	
		// Constructors
		internal SizedArray(); // 0x005B8164-0x005B81D8
		internal SizedArray(int length); // 0x005B81D8-0x005B825C
		private SizedArray(SizedArray sizedArray); // 0x005B825C-0x005B835C
	
		// Methods
		public object Clone(); // 0x005B835C-0x005B83BC
		internal void IncreaseCapacity(int index); // 0x005B8534-0x005B8788
	}

	[Serializable]
	internal sealed class IntSizedArray : ICloneable // TypeDefIndex: 1029
	{
		// Fields
		internal int[] objects; // 0x10
		internal int[] negObjects; // 0x18
	
		// Properties
		internal int this[int index] { get => default; set {} } // 0x005A9B74-0x005A9C60 0x005A9C60-0x005A9D5C
	
		// Constructors
		public IntSizedArray(); // 0x005A9984-0x005A99F4
		private IntSizedArray(IntSizedArray sizedArray); // 0x005A99F4-0x005A9B14
	
		// Methods
		public object Clone(); // 0x005A9B14-0x005A9B74
		internal void IncreaseCapacity(int index); // 0x005A9D5C-0x005A9FB0
	}

	internal sealed class NameCache // TypeDefIndex: 1030
	{
		// Fields
		private static ConcurrentDictionary<string, object> ht; // 0x00
		private string name; // 0x10
	
		// Constructors
		public NameCache(); // 0x005AA7E8-0x005AA7F0
		static NameCache(); // 0x005AA7F0-0x005AA864
	
		// Methods
		internal object GetCachedValue(string name); // 0x005AA694-0x005AA748
		internal void SetCachedValue(object value); // 0x005AA748-0x005AA7E8
	}

	internal sealed class ValueFixup // TypeDefIndex: 1031
	{
		// Fields
		internal ValueFixupEnum valueFixupEnum; // 0x10
		internal Array arrayObj; // 0x18
		internal int[] indexMap; // 0x20
		internal object header; // 0x28
		internal object memberObject; // 0x30
		internal static MemberInfo valueInfo; // 0x00
		internal ReadObjectInfo objectInfo; // 0x38
		internal string memberName; // 0x40
	
		// Constructors
		internal ValueFixup(Array arrayObj, int[] indexMap); // 0x005B215C-0x005B219C
		internal ValueFixup(object memberObject, string memberName, ReadObjectInfo objectInfo); // 0x005B2A40-0x005B2A88
	
		// Methods
		internal void Fixup(ParseRecord record, ParseRecord parent); // 0x005B0DE4-0x005B1170
	}

	internal sealed class InternalFE // TypeDefIndex: 1032
	{
		// Fields
		internal FormatterTypeStyle FEtypeFormat; // 0x10
		internal FormatterAssemblyStyle FEassemblyFormat; // 0x14
		internal TypeFilterLevel FEsecurityLevel; // 0x18
		internal InternalSerializerTypeE FEserializerTypeEnum; // 0x1C
	
		// Constructors
		public InternalFE(); // 0x005A43B8-0x005A43C0
	}

	internal sealed class NameInfo // TypeDefIndex: 1033
	{
		// Fields
		internal string NIFullName; // 0x10
		internal long NIobjectId; // 0x18
		internal long NIassemId; // 0x20
		internal InternalPrimitiveTypeE NIprimitiveTypeEnum; // 0x28
		internal Type NItype; // 0x30
		internal bool NIisSealed; // 0x38
		internal bool NIisArray; // 0x39
		internal bool NIisArrayItem; // 0x3A
		internal bool NItransmitTypeOnObject; // 0x3B
		internal bool NItransmitTypeOnMember; // 0x3C
		internal bool NIisParentTypeOnObject; // 0x3D
		internal InternalArrayTypeE NIarrayEnum; // 0x40
		private bool NIsealedStatusChecked; // 0x44
	
		// Properties
		public bool IsSealed { get; } // 0x005AA88C-0x005AA8EC 
		public string NIname { get; set; } // 0x005AA8EC-0x005AA938 0x005AA938-0x005AA940
	
		// Constructors
		internal NameInfo(); // 0x005AA864-0x005AA86C
	
		// Methods
		internal void Init(); // 0x005AA86C-0x005AA88C
	}

	internal sealed class PrimitiveArray // TypeDefIndex: 1034
	{
		// Fields
		private InternalPrimitiveTypeE code; // 0x10
		private bool[] booleanA; // 0x18
		private char[] charA; // 0x20
		private double[] doubleA; // 0x28
		private short[] int16A; // 0x30
		private int[] int32A; // 0x38
		private long[] int64A; // 0x40
		private sbyte[] sbyteA; // 0x48
		private float[] singleA; // 0x50
		private ushort[] uint16A; // 0x58
		private uint[] uint32A; // 0x60
		private ulong[] uint64A; // 0x68
	
		// Constructors
		internal PrimitiveArray(InternalPrimitiveTypeE code, Array array); // 0x005B1174-0x005B11B4
	
		// Methods
		internal void Init(InternalPrimitiveTypeE code, Array array); // 0x005B6AC4-0x005B703C
		internal void SetValue(string value, int index); // 0x005B220C-0x005B276C
	}
}

namespace System.Runtime.Remoting
{
	[Serializable]
	internal class ChannelInfo : IChannelInfo // TypeDefIndex: 1035
	{
		// Fields
		private object[] channelData; // 0x10
	
		// Properties
		public object[] ChannelData { get; } // 0x00509F08-0x00509F10 
	
		// Constructors
		public ChannelInfo(); // 0x005099BC-0x00509A30
		public ChannelInfo(object remoteChannelData); // 0x00509E40-0x00509F08
	}

	[ComVisible] // 0x003981D0-0x003981E4
	public class ActivatedClientTypeEntry : TypeEntry // TypeDefIndex: 1036
	{
		// Fields
		private string applicationUrl; // 0x20
		private Type obj_type; // 0x28
	
		// Properties
		public string ApplicationUrl { get; } // 0x00504FA4-0x00504FAC 
		public IContextAttribute[] ContextAttributes { get; } // 0x00504FAC-0x00504FB4 
		public Type ObjectType { get; } // 0x00504FB4-0x00504FBC 
	
		// Constructors
		public ActivatedClientTypeEntry(string typeName, string assemblyName, string appUrl); // 0x00504E40-0x00504FA4
	
		// Methods
		public override string ToString(); // 0x00504FBC-0x00505000
	}

	[ComVisible] // 0x003981E4-0x003981F8
	public class ActivatedServiceTypeEntry : TypeEntry // TypeDefIndex: 1037
	{
		// Fields
		private Type obj_type; // 0x20
	
		// Properties
		public Type ObjectType { get; } // 0x00505154-0x0050515C 
	
		// Constructors
		public ActivatedServiceTypeEntry(string typeName, string assemblyName); // 0x00505000-0x00505154
	
		// Methods
		public override string ToString(); // 0x0050515C-0x0050519C
	}

	[Serializable]
	internal class EnvoyInfo : IEnvoyInfo // TypeDefIndex: 1038
	{
		// Fields
		private IMessageSink envoySinks; // 0x10
	
		// Properties
		public IMessageSink EnvoySinks { get; } // 0x00838D38-0x00838D40 
	
		// Constructors
		public EnvoyInfo(IMessageSink sinks); // 0x00838D0C-0x00838D38
	}

	[ComVisible] // 0x003981F8-0x0039820C
	public interface IChannelInfo // TypeDefIndex: 1039
	{
		// Properties
		object[] ChannelData { get; }
	}

	[ComVisible] // 0x0039820C-0x00398220
	public interface IEnvoyInfo // TypeDefIndex: 1040
	{
		// Properties
		IMessageSink EnvoySinks { get; }
	}

	[ComVisible] // 0x00398220-0x00398234
	public interface IRemotingTypeInfo // TypeDefIndex: 1041
	{
		// Properties
		string TypeName { get; }
	
		// Methods
		bool CanCastTo(Type fromType, object o);
	}

	internal abstract class Identity // TypeDefIndex: 1042
	{
		// Fields
		protected string _objectUri; // 0x10
		protected IMessageSink _channelSink; // 0x18
		protected IMessageSink _envoySink; // 0x20
		private DynamicPropertyCollection _clientDynamicProperties; // 0x28
		private DynamicPropertyCollection _serverDynamicProperties; // 0x30
		protected ObjRef _objRef; // 0x38
		private bool _disposed; // 0x40
	
		// Properties
		public IMessageSink ChannelSink { get; set; } // 0x00838DD8-0x00838DE0 0x00838DE0-0x00838DE8
		public IMessageSink EnvoySink { get; } // 0x00838DE8-0x00838DF0 
		public string ObjectUri { get; set; } // 0x00838DF0-0x00838DF8 0x00838DF8-0x00838E00
		public bool IsConnected { get; } // 0x00838E00-0x00838E10 
		public bool Disposed { get; set; } // 0x00838E10-0x00838E18 0x00838E18-0x00838E24
		public DynamicPropertyCollection ClientDynamicProperties { get; } // 0x00838E24-0x00838E8C 
		public bool HasServerDynamicSinks { get; } // 0x00838E8C-0x00838EE0 
	
		// Constructors
		public Identity(string objectUri); // 0x00838DAC-0x00838DD8
	
		// Methods
		public abstract ObjRef CreateObjRef(Type requestedType);
		public void NotifyClientDynamicSinks(bool start, IMessage req_msg, bool client_site, bool async); // 0x00838EE0-0x00838F88
		public void NotifyServerDynamicSinks(bool start, IMessage req_msg, bool client_site, bool async); // 0x00838F88-0x00839030
	}

	internal class ClientIdentity : Identity // TypeDefIndex: 1043
	{
		// Fields
		private WeakReference _proxyReference; // 0x48
	
		// Properties
		public MarshalByRefObject ClientProxy { get; set; } // 0x0050E8CC-0x0050E9B4 0x0050E9B4-0x0050EA24
		public string TargetUri { get; } // 0x0050EA2C-0x0050EA60 
	
		// Constructors
		public ClientIdentity(string objectUri, ObjRef objRef); // 0x0050E798-0x0050E8CC
	
		// Methods
		public override ObjRef CreateObjRef(Type requestedType); // 0x0050EA24-0x0050EA2C
	}

	[ComVisible] // 0x00398234-0x00398248
	public class InternalRemotingServices // TypeDefIndex: 1044
	{
		// Fields
		private static Hashtable _soapAttributes; // 0x00
	
		// Constructors
		static InternalRemotingServices(); // 0x00839624-0x00839690
	
		// Methods
		public static SoapAttribute GetCachedSoapAttribute(object reflectionObject); // 0x00839030-0x00839604
	}

	[Serializable]
	[ComVisible] // 0x00398248-0x0039825C
	public class ObjRef : IObjectReference, ISerializable // TypeDefIndex: 1045
	{
		// Fields
		private IChannelInfo channel_info; // 0x10
		private string uri; // 0x18
		private IRemotingTypeInfo typeInfo; // 0x20
		private IEnvoyInfo envoyInfo; // 0x28
		private int flags; // 0x30
		private Type _serverType; // 0x38
		private static int MarshalledObjectRef; // 0x00
		private static int WellKnowObjectRef; // 0x04
	
		// Properties
		internal bool IsReferenceToWellKnow { get; } // 0x0084F238-0x0084F2B0 
		public virtual IChannelInfo ChannelInfo { [ReliabilityContract] /* 0x0039F218-0x0039F230 */ get; } // 0x0084F2B0-0x0084F2B8 
		public virtual IEnvoyInfo EnvoyInfo { get; set; } // 0x0084F2B8-0x0084F2C0 0x0084F2C0-0x0084F2C8
		public virtual IRemotingTypeInfo TypeInfo { get; set; } // 0x0084F2C8-0x0084F2D0 0x0084F2D0-0x0084F2D8
		public virtual string URI { get; set; } // 0x0084F2D8-0x0084F2E0 0x0084F2E0-0x0084F2E8
		internal Type ServerType { get; } // 0x0084F580-0x0084F6CC 
	
		// Constructors
		public ObjRef(); // 0x0084EA64-0x0084EA8C
		internal ObjRef(string uri, IChannelInfo cinfo); // 0x0084EAEC-0x0084EB24
		internal ObjRef(Type type, string url, object remoteChannelData); // 0x0084EB24-0x0084EC14
		protected ObjRef(SerializationInfo info, StreamingContext context); // 0x0084EC14-0x0084F238
		static ObjRef(); // 0x0084F6CC-0x0084F730
	
		// Methods
		internal ObjRef DeserializeInTheCurrentDomain(int domainId, byte[] tInfo); // 0x0083E94C-0x0083EAB0
		internal byte[] SerializeType(); // 0x0083FDF0-0x0083FEA0
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0084F2E8-0x0084F4C4
		public virtual object GetRealObject(StreamingContext context); // 0x0084F4C4-0x0084F580
		internal void UpdateChannelInfo(); // 0x0084EA8C-0x0084EAEC
	}

	[ComVisible] // 0x0039825C-0x00398270
	public static class RemotingConfiguration // TypeDefIndex: 1046
	{
		// Fields
		private static string applicationID; // 0x00
		private static string applicationName; // 0x08
		private static string processGuid; // 0x10
		private static bool defaultConfigRead; // 0x18
		private static bool defaultDelayedConfigRead; // 0x19
		private static string _errorMode; // 0x20
		private static Hashtable wellKnownClientEntries; // 0x28
		private static Hashtable activatedClientEntries; // 0x30
		private static Hashtable wellKnownServiceEntries; // 0x38
		private static Hashtable activatedServiceEntries; // 0x40
		private static Hashtable channelTemplates; // 0x48
		private static Hashtable clientProviderTemplates; // 0x50
		private static Hashtable serverProviderTemplates; // 0x58
	
		// Properties
		public static string ApplicationName { get; set; } // 0x00854D34-0x00854D9C 0x00854D9C-0x00854E08
		public static string ProcessId { get; } // 0x00854E08-0x00854ED0 
	
		// Constructors
		static RemotingConfiguration(); // 0x00857940-0x00857AA4
	
		// Methods
		internal static void LoadDefaultDelayedChannels(); // 0x00854ED0-0x008551C4
		public static bool IsActivationAllowed(Type svrType); // 0x008551C4-0x00855308
		public static ActivatedClientTypeEntry IsRemotelyActivatedClientType(Type svrType); // 0x00855308-0x00855490
		public static WellKnownClientTypeEntry IsWellKnownClientType(Type svrType); // 0x00855490-0x00855618
		public static void RegisterActivatedClientType(ActivatedClientTypeEntry entry); // 0x00855618-0x0085593C
		public static void RegisterActivatedServiceType(ActivatedServiceTypeEntry entry); // 0x0085593C-0x00855A98
		public static void RegisterWellKnownClientType(WellKnownClientTypeEntry entry); // 0x00855A98-0x00855DBC
		public static void RegisterWellKnownServiceType(WellKnownServiceTypeEntry entry); // 0x00855DBC-0x00855FAC
		internal static void RegisterChannelTemplate(ChannelData channel); // 0x008560D8-0x00856180
		internal static void RegisterClientProviderTemplate(ProviderData prov); // 0x00856180-0x00856228
		internal static void RegisterServerProviderTemplate(ProviderData prov); // 0x00856228-0x008562D0
		internal static void RegisterChannels(ArrayList channels, bool onlyDelayed); // 0x008562D0-0x0085711C
		internal static void RegisterTypes(ArrayList types); // 0x0085711C-0x00857710
		public static bool CustomErrorsEnabled(bool isLocalRequest); // 0x00857710-0x008577DC
		internal static void SetCustomErrorsMode(string mode); // 0x008577DC-0x00857940
	}

	internal class ConfigHandler : SmallXmlParser.IContentHandler // TypeDefIndex: 1047
	{
		// Fields
		private ArrayList typeEntries; // 0x10
		private ArrayList channelInstances; // 0x18
		private ChannelData currentChannel; // 0x20
		private Stack currentProviderData; // 0x28
		private string currentClientUrl; // 0x30
		private string appName; // 0x38
		private string currentXmlPath; // 0x40
		private bool onlyDelayedChannels; // 0x48
	
		// Constructors
		public ConfigHandler(bool onlyDelayedChannels); // 0x0050EA60-0x0050EB08
	
		// Methods
		private void ValidatePath(string element, params /* 0x0039FA78-0x0039FA88 */ string[] paths); // 0x0050EB08-0x0050EC5C
		private bool CheckPath(string path); // 0x0050EC5C-0x0050ED50
		public void OnStartParsing(SmallXmlParser parser); // 0x0050ED50-0x0050ED54
		public void OnProcessingInstruction(string name, string text); // 0x0050ED54-0x0050ED58
		public void OnIgnorableWhitespace(string s); // 0x0050ED58-0x0050ED5C
		public void OnStartElement(string name, SmallXmlParser.IAttrList attrs); // 0x0050ED5C-0x0050EF0C
		public void ParseElement(string name, SmallXmlParser.IAttrList attrs); // 0x0050EF0C-0x0051004C
		public void OnEndElement(string name); // 0x00511C0C-0x00511CD8
		private void ReadCustomProviderData(string name, SmallXmlParser.IAttrList attrs); // 0x0051004C-0x005104F8
		private void ReadLifetine(SmallXmlParser.IAttrList attrs); // 0x005104F8-0x00510A44
		private TimeSpan ParseTime(string s); // 0x00511CD8-0x005130AC
		private void ReadChannel(SmallXmlParser.IAttrList attrs, bool isTemplate); // 0x00510A44-0x00510E74
		private ProviderData ReadProvider(string name, SmallXmlParser.IAttrList attrs, bool isTemplate); // 0x00510E74-0x005112CC
		private void ReadClientActivated(SmallXmlParser.IAttrList attrs); // 0x00511568-0x0051169C
		private void ReadServiceActivated(SmallXmlParser.IAttrList attrs); // 0x0051169C-0x00511764
		private void ReadClientWellKnown(SmallXmlParser.IAttrList attrs); // 0x005112CC-0x005113B4
		private void ReadServiceWellKnown(SmallXmlParser.IAttrList attrs); // 0x005113B4-0x00511568
		private void ReadInteropXml(SmallXmlParser.IAttrList attrs, bool isElement); // 0x00511764-0x00511988
		private void ReadPreload(SmallXmlParser.IAttrList attrs); // 0x00511988-0x00511C0C
		private string GetNotNull(SmallXmlParser.IAttrList attrs, string name); // 0x005130AC-0x005131F8
		private string ExtractAssembly(ref string type); // 0x005131F8-0x005132FC
		public void OnChars(string ch); // 0x005132FC-0x00513300
		public void OnEndParsing(SmallXmlParser parser); // 0x00513300-0x00513438
	}

	internal class ChannelData // TypeDefIndex: 1048
	{
		// Fields
		internal string Ref; // 0x10
		internal string Type; // 0x18
		internal string Id; // 0x20
		internal string DelayLoadAsClientChannel; // 0x28
		private ArrayList _serverProviders; // 0x30
		private ArrayList _clientProviders; // 0x38
		private Hashtable _customProperties; // 0x40
	
		// Properties
		internal ArrayList ServerProviders { get; } // 0x00508E3C-0x00508EA8 
		public ArrayList ClientProviders { get; } // 0x00508EA8-0x00508F14 
		public Hashtable CustomProperties { get; } // 0x00508F14-0x00508F80 
	
		// Constructors
		public ChannelData(); // 0x00509914-0x005099BC
	
		// Methods
		public void CopyFrom(ChannelData other); // 0x00508F80-0x00509914
	}

	internal class ProviderData // TypeDefIndex: 1049
	{
		// Fields
		internal string Ref; // 0x10
		internal string Type; // 0x18
		internal string Id; // 0x20
		internal Hashtable CustomProperties; // 0x28
		internal IList CustomData; // 0x30
	
		// Constructors
		public ProviderData(); // 0x00838D44-0x00838DAC
	
		// Methods
		public void CopyFrom(ProviderData other); // 0x0084F730-0x0084FE28
	}

	internal class FormatterData : ProviderData // TypeDefIndex: 1050
	{
		// Constructors
		public FormatterData(); // 0x00838D40-0x00838D44
	}

	[Serializable]
	[ComVisible] // 0x00398270-0x00398284
	public class RemotingException : SystemException // TypeDefIndex: 1051
	{
		// Constructors
		public RemotingException(); // 0x00857AA4-0x00857AAC
		public RemotingException(string message); // 0x00838454-0x0083845C
		protected RemotingException(SerializationInfo info, StreamingContext context); // 0x00857AAC-0x00857AB4
		public RemotingException(string message, Exception InnerException); // 0x00857AB4-0x00857ABC
	}

	[ComVisible] // 0x00398284-0x00398298
	public static class RemotingServices // TypeDefIndex: 1052
	{
		// Fields
		private static Hashtable uri_hash; // 0x00
		private static BinaryFormatter _serializationFormatter; // 0x08
		private static BinaryFormatter _deserializationFormatter; // 0x10
		private static string app_id; // 0x18
		private static readonly object app_id_lock; // 0x20
		private static int next_id; // 0x28
		private static readonly MethodInfo FieldSetterMethod; // 0x30
		private static readonly MethodInfo FieldGetterMethod; // 0x38
	
		// Nested types
		[Serializable]
		private class CACD // TypeDefIndex: 1053
		{
			// Fields
			public object d; // 0x10
			public object c; // 0x18
	
			// Constructors
			public CACD(); // 0x00859B94-0x00859B9C
		}
	
		// Constructors
		static RemotingServices(); // 0x00857ABC-0x00857D34
	
		// Methods
		internal static object InternalExecute(MethodBase method, object obj, object[] parameters, out object[] out_args); // 0x00857D94-0x00857D98
		internal static MethodBase GetVirtualMethod(Type type, MethodBase method); // 0x00848A68-0x00848A6C
		public static bool IsTransparentProxy(object proxy); // 0x0083E2A4-0x0083E30C
		internal static IMethodReturnMessage InternalExecuteMessage(MarshalByRefObject target, IMethodCallMessage reqMsg); // 0x0084D2E8-0x0084DF28
		[ComVisible] // 0x0039F230-0x0039F244
		public static object Connect(Type classToProxy, string url); // 0x00857D98-0x00857E30
		[ComVisible] // 0x0039F244-0x0039F258
		public static object Connect(Type classToProxy, string url, object data); // 0x00857EB4-0x00857F50
		public static Type GetServerTypeForUri(string URI); // 0x008485D8-0x008486A0
		public static object Unmarshal(ObjRef objectRef); // 0x0083EAB0-0x0083EB18
		public static object Unmarshal(ObjRef objectRef, bool fRefine); // 0x00857F50-0x00858220
		public static ObjRef Marshal(MarshalByRefObject Obj); // 0x0083E30C-0x0083E378
		public static ObjRef Marshal(MarshalByRefObject Obj, string ObjURI, Type RequestedType); // 0x00858220-0x00858274
		private static string NewUri(); // 0x00858274-0x00858690
		[ReliabilityContract] // 0x0039F258-0x0039F270
		public static RealProxy GetRealProxy(object proxy); // 0x0084B7B0-0x0084B804
		public static MethodBase GetMethodBaseFromMethodMessage(IMethodMessage msg); // 0x00848A6C-0x00848DB8
		internal static MethodBase GetMethodBaseFromName(Type type, string methodName, Type[] signature); // 0x00848868-0x00848A68
		private static MethodBase FindInterfaceMethod(Type type, string methodName, Type[] signature); // 0x00858A54-0x00858BC8
		public static void GetObjectData(object obj, SerializationInfo info, StreamingContext context); // 0x0084B804-0x0084B974
		public static bool IsOneWay(MethodBase method); // 0x0084B310-0x0084B3AC
		internal static object CreateClientProxy(ActivatedClientTypeEntry entry, object[] activationAttributes); // 0x00858BC8-0x00858DEC
		internal static object CreateClientProxy(Type objectType, string url, object[] activationAttributes); // 0x00858DEC-0x00858F28
		internal static object CreateClientProxy(WellKnownClientTypeEntry entry); // 0x00859020-0x008590D8
		internal static object CreateClientProxyForContextBound(Type type, object[] activationAttributes); // 0x008590D8-0x008592A0
		internal static Identity GetIdentityForUri(string uri); // 0x00852C88-0x00852F70
		private static string RemoveAppNameFromUri(string uri); // 0x00859330-0x00859420
		internal static ClientIdentity GetOrCreateClientIdentity(ObjRef objRef, Type proxyType, out object clientProxy); // 0x00859420-0x0085996C
		private static IMessageSink GetClientChannelSinkChain(string url, object channelData, out string objectUri); // 0x00858F28-0x00859020
		internal static ClientActivatedIdentity CreateContextBoundObjectIdentity(Type objectType); // 0x0085996C-0x00859A10
		internal static ClientActivatedIdentity CreateClientActivatedServerIdentity(MarshalByRefObject realObject, Type objectType, string objectUri); // 0x008588AC-0x00858A54
		internal static ServerIdentity CreateWellKnownServerIdentity(Type objectType, string objectUri, WellKnownObjectMode mode); // 0x00855FAC-0x008560D8
		private static void RegisterServerIdentity(ServerIdentity identity); // 0x00858690-0x008588AC
		internal static object GetProxyForRemoteObject(ObjRef objref, Type classToProxy); // 0x0085102C-0x00851130
		internal static object GetRemoteObject(ObjRef objRef, Type proxyType); // 0x00857E30-0x00857EB4
		internal static byte[] SerializeCallData(object obj); // 0x00859A10-0x00859B94
		internal static object DeserializeCallData(byte[] array); // 0x00859B9C-0x00859D68
		internal static byte[] SerializeExceptionData(Exception ex); // 0x00859D68-0x00859E34
		private static void RegisterInternalChannels(); // 0x00857D34-0x00857D94
		internal static void DisposeIdentity(Identity ident); // 0x008541AC-0x008543B4
		internal static Identity GetMessageTargetIdentity(IMessage msg); // 0x00835AAC-0x00835F08
		internal static void SetMessageTargetIdentity(IMessage msg, Identity ident); // 0x00859E34-0x0085A034
		internal static bool UpdateOutArgObject(ParameterInfo pi, object local, object remote); // 0x00852F70-0x00853260
		private static string GetNormalizedUri(string uri); // 0x008592A0-0x00859330
	}

	internal abstract class ServerIdentity : Identity // TypeDefIndex: 1054
	{
		// Fields
		protected Type _objectType; // 0x48
		protected MarshalByRefObject _serverObject; // 0x50
		protected IMessageSink _serverSink; // 0x58
		protected Context _context; // 0x60
		protected Lease _lease; // 0x68
	
		// Properties
		public Type ObjectType { get; } // 0x0059A634-0x0059A63C 
		public Lease Lease { get; } // 0x0059B000-0x0059B008 
		public Context Context { get; set; } // 0x0059B008-0x0059B010 0x0059B010-0x0059B018
	
		// Constructors
		public ServerIdentity(string objectUri, Context context, Type objectType); // 0x0059A5F8-0x0059A634
	
		// Methods
		public void StartTrackingLifetime(ILease lease); // 0x0059A63C-0x0059A7F0
		public virtual void OnLifetimeExpired(); // 0x0059A7F0-0x0059A7F4
		public override ObjRef CreateObjRef(Type requestedType); // 0x0059A880-0x0059AA20
		public void AttachServerObject(MarshalByRefObject serverObject, Context context); // 0x0059AE9C-0x0059B000
		public abstract IMessage SyncObjectProcessMessage(IMessage msg);
		public abstract IMessageCtrl AsyncObjectProcessMessage(IMessage msg, IMessageSink replySink);
		protected void DisposeServerObject(); // 0x0059A7F4-0x0059A880
	}

	internal class ClientActivatedIdentity : ServerIdentity // TypeDefIndex: 1055
	{
		// Fields
		private MarshalByRefObject _targetThis; // 0x70
	
		// Constructors
		public ClientActivatedIdentity(string objectUri, Type objectType); // 0x0050E328-0x0050E33C
	
		// Methods
		public MarshalByRefObject GetServerObject(); // 0x0050E33C-0x0050E344
		public void SetClientProxy(MarshalByRefObject obj); // 0x0050E344-0x0050E34C
		public override void OnLifetimeExpired(); // 0x0050E34C-0x0050E3C0
		public override IMessage SyncObjectProcessMessage(IMessage msg); // 0x0050E3C0-0x0050E4D8
		public override IMessageCtrl AsyncObjectProcessMessage(IMessage msg, IMessageSink replySink); // 0x0050E674-0x0050E798
	}

	internal class SingletonIdentity : ServerIdentity // TypeDefIndex: 1056
	{
		// Constructors
		public SingletonIdentity(string objectUri, Context context, Type objectType); // 0x0059C02C-0x0059C068
	
		// Methods
		public MarshalByRefObject GetServerObject(); // 0x0059C068-0x0059C2C8
		public override IMessage SyncObjectProcessMessage(IMessage msg); // 0x0059C2C8-0x0059C3CC
		public override IMessageCtrl AsyncObjectProcessMessage(IMessage msg, IMessageSink replySink); // 0x0059C3CC-0x0059C4E4
	}

	internal class SingleCallIdentity : ServerIdentity // TypeDefIndex: 1057
	{
		// Constructors
		public SingleCallIdentity(string objectUri, Context context, Type objectType); // 0x0059BA98-0x0059BAD4
	
		// Methods
		public override IMessage SyncObjectProcessMessage(IMessage msg); // 0x0059BAD4-0x0059BDE8
		public override IMessageCtrl AsyncObjectProcessMessage(IMessage msg, IMessageSink replySink); // 0x0059BDE8-0x0059C02C
	}

	internal class DisposerReplySink : IMessageSink // TypeDefIndex: 1058
	{
		// Fields
		private IMessageSink _next; // 0x10
		private IDisposable _disposable; // 0x18
	
		// Constructors
		public DisposerReplySink(IMessageSink next, IDisposable disposable); // 0x00838B30-0x00838B68
	
		// Methods
		public IMessage SyncProcessMessage(IMessage msg); // 0x00838B68-0x00838CA4
		public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x00838CA4-0x00838D0C
	}

	[ComVisible] // 0x00398298-0x003982AC
	public class SoapServices // TypeDefIndex: 1059
	{
		// Fields
		private static Hashtable _xmlTypes; // 0x00
		private static Hashtable _xmlElements; // 0x08
		private static Hashtable _soapActions; // 0x10
		private static Hashtable _soapActionsMethods; // 0x18
		private static Hashtable _typeInfos; // 0x20
	
		// Properties
		public static string XmlNsForClrTypeWithAssembly { get; } // 0x0059C4E4-0x0059C52C 
		public static string XmlNsForClrTypeWithNs { get; } // 0x0059C52C-0x0059C574 
		public static string XmlNsForClrTypeWithNsAndAssembly { get; } // 0x0059C574-0x0059C5BC 
	
		// Nested types
		private class TypeInfo // TypeDefIndex: 1060
		{
			// Fields
			public Hashtable Attributes; // 0x10
			public Hashtable Elements; // 0x18
	
			// Constructors
			public TypeInfo(); // 0x0059D7F8-0x0059D800
		}
	
		// Constructors
		static SoapServices(); // 0x0059D800-0x0059D8F4
	
		// Methods
		public static string CodeXmlNamespaceForClrTypeNamespace(string typeNamespace, string assemblyName); // 0x0059C5BC-0x0059C778
		private static string GetNameKey(string name, string namspace); // 0x0059C844-0x0059C8C0
		private static string GetAssemblyName(MethodBase mb); // 0x0059C8C0-0x0059CA40
		public static bool GetXmlElementForInteropType(Type type, out string xmlElement, out string xmlNamespace); // 0x0059CA40-0x0059CBB4
		public static string GetXmlNamespaceForMethodCall(MethodBase mb); // 0x0059CBB4-0x0059CC68
		public static string GetXmlNamespaceForMethodResponse(MethodBase mb); // 0x0059CC68-0x0059CD1C
		public static bool GetXmlTypeForInteropType(Type type, out string xmlType, out string xmlTypeNamespace); // 0x0059CD1C-0x0059CE8C
		public static void PreLoad(Assembly assembly); // 0x0059CE8C-0x0059CF64
		public static void PreLoad(Type type); // 0x0059CF64-0x0059D4E8
		public static void RegisterInteropXmlElement(string xmlElement, string xmlNamespace, Type type); // 0x0059D670-0x0059D7F8
		public static void RegisterInteropXmlType(string xmlType, string xmlTypeNamespace, Type type); // 0x0059D4E8-0x0059D670
		private static string EncodeNs(string ns); // 0x0059C778-0x0059C844
	}

	[ComVisible] // 0x003982AC-0x003982C0
	public class TypeEntry // TypeDefIndex: 1061
	{
		// Fields
		private string assembly_name; // 0x10
		private string type_name; // 0x18
	
		// Properties
		public string AssemblyName { get; set; } // 0x0059D8FC-0x0059D904 0x0059D904-0x0059D90C
		public string TypeName { get; set; } // 0x0059D90C-0x0059D914 0x0059D914-0x0059D91C
	
		// Constructors
		protected TypeEntry(); // 0x0059D8F4-0x0059D8FC
	}

	[Serializable]
	internal class TypeInfo : IRemotingTypeInfo // TypeDefIndex: 1062
	{
		// Fields
		private string serverType; // 0x10
		private string[] serverHierarchy; // 0x18
		private string[] interfacesImplemented; // 0x20
	
		// Properties
		public string TypeName { get; } // 0x0059D91C-0x0059D924 
	
		// Constructors
		public TypeInfo(Type type); // 0x0059AA20-0x0059AE9C
	
		// Methods
		public bool CanCastTo(Type fromType, object o); // 0x0059D924-0x0059DBF8
	}

	[ComVisible] // 0x003982C0-0x003982D4
	public class WellKnownClientTypeEntry : TypeEntry // TypeDefIndex: 1063
	{
		// Fields
		private Type obj_type; // 0x20
		private string obj_url; // 0x28
		private string app_url; // 0x30
	
		// Properties
		public string ApplicationUrl { get; } // 0x0059DD40-0x0059DD48 
		public Type ObjectType { get; } // 0x0059DD48-0x0059DD50 
		public string ObjectUrl { get; } // 0x0059DD50-0x0059DD58 
	
		// Constructors
		public WellKnownClientTypeEntry(string typeName, string assemblyName, string objectUrl); // 0x0059DBF8-0x0059DD40
	
		// Methods
		public override string ToString(); // 0x0059DD58-0x0059DD74
	}

	[Serializable]
	[ComVisible] // 0x003982D4-0x003982E8
	public enum WellKnownObjectMode // TypeDefIndex: 1064
	{
		Singleton = 1,
		SingleCall = 2
	}

	[ComVisible] // 0x003982E8-0x003982FC
	public class WellKnownServiceTypeEntry : TypeEntry // TypeDefIndex: 1065
	{
		// Fields
		private Type obj_type; // 0x20
		private string obj_uri; // 0x28
		private WellKnownObjectMode obj_mode; // 0x30
	
		// Properties
		public WellKnownObjectMode Mode { get; } // 0x0059DEC0-0x0059DEC8 
		public Type ObjectType { get; } // 0x0059DEC8-0x0059DED0 
		public string ObjectUri { get; } // 0x0059DED0-0x0059DED8 
	
		// Constructors
		public WellKnownServiceTypeEntry(string typeName, string assemblyName, string objectUri, WellKnownObjectMode mode); // 0x0059DD74-0x0059DEC0
	
		// Methods
		public override string ToString(); // 0x0059DED8-0x0059E0D8
	}
}

namespace System.Runtime.Remoting.Services
{
	[ComVisible] // 0x003982FC-0x00398310
	public interface ITrackingHandler // TypeDefIndex: 1066
	{
		// Methods
		void DisconnectedObject(object obj);
		void MarshaledObject(object obj, ObjRef or);
		void UnmarshaledObject(object obj, ObjRef or);
	}

	[ComVisible] // 0x00398310-0x00398324
	public class TrackingServices // TypeDefIndex: 1067
	{
		// Fields
		private static ArrayList _handlers; // 0x00
	
		// Constructors
		static TrackingServices(); // 0x0059BA2C-0x0059BA98
	
		// Methods
		internal static void NotifyMarshaledObject(object obj, ObjRef or); // 0x0059B36C-0x0059B6CC
		internal static void NotifyUnmarshaledObject(object obj, ObjRef or); // 0x0059B6CC-0x0059BA2C
		internal static void NotifyDisconnectedObject(object obj); // 0x0059B018-0x0059B36C
	}
}

namespace System.Runtime.Remoting.Proxies
{
	[AttributeUsage] // 0x00398324-0x00398364
	[ComVisible] // 0x00398324-0x00398364
	public class ProxyAttribute : Attribute, IContextAttribute // TypeDefIndex: 1068
	{
		// Methods
		public virtual MarshalByRefObject CreateInstance(Type serverType); // 0x0084FE28-0x0084FF70
		public virtual RealProxy CreateProxy(ObjRef objRef, Type serverType, object serverObject, Context serverContext); // 0x0084FFC0-0x0085102C
		[ComVisible] // 0x0039F270-0x0039F284
		public void GetPropertiesForNewContext(IConstructionCallMessage msg); // 0x00851130-0x00851134
		[ComVisible] // 0x0039F284-0x0039F298
		public bool IsContextOK(Context ctx, IConstructionCallMessage msg); // 0x00851134-0x00851188
	}

	internal class TransparentProxy // TypeDefIndex: 1069
	{
		// Fields
		public RealProxy _rp; // 0x10
		private RuntimeRemoteClassHandle _class; // 0x18
		private bool _custom_type_info; // 0x20
	
		// Properties
		private bool IsContextBoundObject { get; } // 0x00854608-0x00854638 
		private Context TargetContext { get; } // 0x00854638-0x00854664 
	
		// Methods
		internal RuntimeType GetProxyType(); // 0x008544F0-0x00854608
		private bool InCurrentContext(); // 0x00854664-0x008546B4
		internal object LoadRemoteFieldNew(IntPtr classPtr, IntPtr fieldPtr); // 0x008546B4-0x008549F0
		internal void StoreRemoteField(IntPtr classPtr, IntPtr fieldPtr, object arg); // 0x008549F0-0x00854D34
	}

	[ComVisible] // 0x00398364-0x00398378
	public abstract class RealProxy // TypeDefIndex: 1070
	{
		// Fields
		private Type class_to_proxy; // 0x10
		internal Context _targetContext; // 0x18
		internal MarshalByRefObject _server; // 0x20
		private int _targetDomainId; // 0x28
		internal string _targetUri; // 0x30
		internal Identity _objectIdentity; // 0x38
		private object _objTP; // 0x40
		private object _stubData; // 0x48
	
		// Properties
		internal Identity ObjectIdentity { get; set; } // 0x008514C4-0x008514CC 0x008514CC-0x008514D4
	
		// Constructors
		protected RealProxy(Type classToProxy); // 0x00851188-0x008511E0
		internal RealProxy(Type classToProxy, ClientIdentity identity); // 0x00851304-0x00851368
		protected RealProxy(Type classToProxy, IntPtr stub, object stubData); // 0x008511E0-0x00851304
	
		// Methods
		private static Type InternalGetProxyType(object transparentProxy); // 0x00851368-0x0085136C
		public Type GetProxiedType(); // 0x0085136C-0x00851420
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00851420-0x008514C4
		public abstract IMessage Invoke(IMessage msg);
		internal static object PrivateInvoke(RealProxy rp, IMessage msg, out Exception exc, out object[] out_args); // 0x008514D4-0x00852058
		internal virtual object InternalGetTransparentProxy(string className); // 0x008529D8-0x008529DC
		public virtual object GetTransparentProxy(); // 0x008529DC-0x00852B58
		protected void AttachServer(MarshalByRefObject s); // 0x00852B58-0x00852B60
		internal void SetTargetDomain(int domainId); // 0x00852B60-0x00852B68
		internal object GetAppDomainTarget(); // 0x00852B68-0x00852C88
		private static object[] ProcessResponse(IMethodReturnMessage mrm, MonoMethodMessage call); // 0x00852178-0x008529D8
	}

	internal class RemotingProxy : RealProxy, IRemotingTypeInfo // TypeDefIndex: 1071
	{
		// Fields
		private static MethodInfo _cache_GetTypeMethod; // 0x00
		private static MethodInfo _cache_GetHashCodeMethod; // 0x08
		private IMessageSink _sink; // 0x50
		private bool _hasEnvoySink; // 0x58
		private ConstructionCall _ctorCall; // 0x60
	
		// Properties
		public string TypeName { get; } // 0x00853D34-0x00853E80 
	
		// Constructors
		internal RemotingProxy(Type type, ClientIdentity identity); // 0x00853260-0x008532C8
		internal RemotingProxy(Type type, string activationUrl, object[] activationAttributes); // 0x0084FF70-0x0084FFC0
		static RemotingProxy(); // 0x008543B4-0x008544F0
	
		// Methods
		public override IMessage Invoke(IMessage request); // 0x008532C8-0x008538C8
		internal void AttachIdentity(Identity identity); // 0x008538C8-0x00853D34
		internal IMessage ActivateRemoteObject(IMethodMessage request); // 0x00852058-0x00852178
		public bool CanCastTo(Type fromType, object o); // 0x00853E80-0x008540B4
		~RemotingProxy(); // 0x008540B4-0x008541AC
	}
}

namespace System.Runtime.Remoting.Lifetime
{
	[ComVisible] // 0x00398378-0x0039838C
	public interface ILease // TypeDefIndex: 1072
	{
		// Properties
		TimeSpan CurrentLeaseTime { get; }
		LeaseState CurrentState { get; }
		TimeSpan InitialLeaseTime { set; }
		TimeSpan RenewOnCallTime { get; set; }
		TimeSpan SponsorshipTimeout { set; }
	
		// Methods
		TimeSpan Renew(TimeSpan renewalTime);
	}

	[ComVisible] // 0x0039838C-0x003983A0
	public interface ISponsor // TypeDefIndex: 1073
	{
		// Methods
		TimeSpan Renewal(ILease lease);
	}

	internal class Lease : MarshalByRefObject, ILease // TypeDefIndex: 1074
	{
		// Fields
		private DateTime _leaseExpireTime; // 0x18
		private LeaseState _currentState; // 0x20
		private TimeSpan _initialLeaseTime; // 0x28
		private TimeSpan _renewOnCallTime; // 0x30
		private TimeSpan _sponsorshipTimeout; // 0x38
		private ArrayList _sponsors; // 0x40
		private Queue _renewingSponsors; // 0x48
		private RenewalDelegate _renewalDelegate; // 0x50
	
		// Properties
		public TimeSpan CurrentLeaseTime { get; } // 0x0083988C-0x00839904 
		public LeaseState CurrentState { get; } // 0x00839904-0x0083990C 
		public TimeSpan InitialLeaseTime { set; } // 0x00839918-0x00839A70
		public TimeSpan RenewOnCallTime { get; set; } // 0x00839A70-0x00839A78 0x00839A78-0x00839B58
		public TimeSpan SponsorshipTimeout { set; } // 0x00839B58-0x00839C38
	
		// Nested types
		private delegate TimeSpan RenewalDelegate(ILease lease); // TypeDefIndex: 1075; 0x0083A4F4-0x0083AC44
	
		// Constructors
		public Lease(); // 0x00839690-0x00839754
	
		// Methods
		public void Activate(); // 0x0083990C-0x00839918
		public TimeSpan Renew(TimeSpan renewalTime); // 0x00839C38-0x00839CD4
		public void Unregister(ISponsor obj); // 0x00839CD4-0x00839E14
		internal void UpdateState(); // 0x00839E14-0x00839F7C
		private void CheckNextSponsor(); // 0x00839F7C-0x0083A218
		private void ProcessSponsorResponse(object state, bool timedOut); // 0x0083A24C-0x0083A4B8
	}

	internal class LeaseManager // TypeDefIndex: 1076
	{
		// Fields
		private ArrayList _objects; // 0x10
		private Timer _timer; // 0x18
	
		// Constructors
		public LeaseManager(); // 0x0083B2C0-0x0083B328
	
		// Methods
		public void SetPollTime(TimeSpan timeSpan); // 0x0083AC44-0x0083AD1C
		public void TrackLifetime(ServerIdentity identity); // 0x0083AD1C-0x0083AE58
		public void StartManager(); // 0x0083AE58-0x0083AF38
		public void StopManager(); // 0x0083AFA0-0x0083AFBC
		public void ManageLeases(object state); // 0x0083AFBC-0x0083B2C0
	}

	internal class LeaseSink : IMessageSink // TypeDefIndex: 1077
	{
		// Fields
		private IMessageSink _nextSink; // 0x10
	
		// Constructors
		public LeaseSink(IMessageSink nextSink); // 0x0083B328-0x0083B354
	
		// Methods
		public IMessage SyncProcessMessage(IMessage msg); // 0x0083B354-0x0083B420
		public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x0083B788-0x0083B860
		private void RenewLease(IMessage msg); // 0x0083B420-0x0083B788
	}

	[Serializable]
	[ComVisible] // 0x003983A0-0x003983B4
	public enum LeaseState // TypeDefIndex: 1078
	{
		Null = 0,
		Initial = 1,
		Active = 2,
		Renewing = 3,
		Expired = 4
	}

	[ComVisible] // 0x003983B4-0x003983C8
	public sealed class LifetimeServices // TypeDefIndex: 1079
	{
		// Fields
		private static TimeSpan _leaseManagerPollTime; // 0x00
		private static TimeSpan _leaseTime; // 0x08
		private static TimeSpan _renewOnCallTime; // 0x10
		private static TimeSpan _sponsorshipTimeout; // 0x18
		private static LeaseManager _leaseManager; // 0x20
	
		// Properties
		public static TimeSpan LeaseManagerPollTime { get; set; } // 0x0083AF38-0x0083AFA0 0x0083B954-0x0083B9E0
		public static TimeSpan LeaseTime { get; set; } // 0x00839754-0x008397BC 0x0083B9E0-0x0083BA4C
		public static TimeSpan RenewOnCallTime { get; set; } // 0x008397BC-0x00839824 0x0083BA4C-0x0083BAB8
		public static TimeSpan SponsorshipTimeout { get; set; } // 0x00839824-0x0083988C 0x0083BAB8-0x0083BB24
	
		// Constructors
		static LifetimeServices(); // 0x0083B860-0x0083B954
	
		// Methods
		internal static void TrackLifetime(ServerIdentity identity); // 0x0083BB24-0x0083BBA4
	}
}

namespace System.Runtime.Remoting.Contexts
{
	[ComVisible] // 0x003983C8-0x003983DC
	public class Context // TypeDefIndex: 1080
	{
		// Fields
		private int domain_id; // 0x10
		private int context_id; // 0x14
		private UIntPtr static_data; // 0x18
		private UIntPtr data; // 0x20
		[ContextStatic] // 0x0039C84C-0x0039C85C
		private static object[] local_slots; // 0x00
		private static IMessageSink default_server_context_sink; // 0x08
		private IMessageSink server_context_sink_chain; // 0x28
		private IMessageSink client_context_sink_chain; // 0x30
		private List<IContextProperty> context_properties; // 0x38
		private static int global_count; // 0x10
		private LocalDataStoreHolder _localDataStore; // 0x40
		private static LocalDataStoreMgr _localDataStoreMgr; // 0x18
		private static DynamicPropertyCollection global_dynamic_properties; // 0x20
		private DynamicPropertyCollection context_dynamic_properties; // 0x48
		private ContextCallbackObject callback_object; // 0x50
	
		// Properties
		public static Context DefaultContext { get; } // 0x00513590-0x00513598 
		public virtual int ContextID { get; } // 0x00513598-0x005135A0 
		public virtual IContextProperty[] ContextProperties { get; } // 0x005135A0-0x00513610 
		internal bool IsDefaultContext { get; } // 0x00513610-0x00513620 
		internal bool NeedsContextSink { get; } // 0x00513620-0x005136F4 
		internal static bool HasGlobalDynamicSinks { get; } // 0x00513B5C-0x00513C10 
		internal bool HasDynamicSinks { get; } // 0x00513C9C-0x00513CB0 
		internal bool HasExitSinks { get; } // 0x0050555C-0x00505620 
		private LocalDataStore MyLocalStore { get; } // 0x005144C8-0x0051464C 
	
		// Constructors
		public Context(); // 0x00513440-0x005134D4
		static Context(); // 0x00514904-0x00514970
	
		// Methods
		private static void RegisterContext(Context ctx); // 0x00513438-0x0051343C
		private static void ReleaseContext(Context ctx); // 0x0051343C-0x00513440
		~Context(); // 0x005134D4-0x00513590
		public static bool RegisterDynamicProperty(IDynamicProperty prop, ContextBoundObject obj, Context ctx); // 0x005136F4-0x00513788
		public static bool UnregisterDynamicProperty(string name, ContextBoundObject obj, Context ctx); // 0x005139A0-0x00513A34
		private static DynamicPropertyCollection GetDynamicPropertyCollection(ContextBoundObject obj, Context ctx); // 0x00513788-0x005139A0
		internal static void NotifyGlobalDynamicSinks(bool start, IMessage req_msg, bool client_site, bool async); // 0x00513A34-0x00513B5C
		internal void NotifyDynamicSinks(bool start, IMessage req_msg, bool client_site, bool async); // 0x00513C10-0x00513C9C
		public virtual IContextProperty GetProperty(string name); // 0x00513CB0-0x00513E64
		public virtual void SetProperty(IContextProperty prop); // 0x00513E64-0x00513FA4
		public virtual void Freeze(); // 0x00513FA4-0x0051412C
		public override string ToString(); // 0x0051412C-0x005141AC
		internal IMessageSink GetServerContextSinkChain(); // 0x00507384-0x0050754C
		internal IMessageSink GetClientContextSinkChain(); // 0x00505620-0x005057E4
		internal IMessageSink CreateServerObjectSinkChain(MarshalByRefObject obj, bool forceInternalExecute); // 0x0050E4D8-0x0050E674
		internal IMessageSink CreateEnvoySink(MarshalByRefObject serverObject); // 0x005141AC-0x00514374
		internal static Context SwitchToContext(Context newContext); // 0x00508188-0x00508190
		internal static Context CreateNewContext(IConstructionCallMessage msg); // 0x005078C0-0x00508188
		public void DoCallBack(CrossContextDelegate deleg); // 0x00514374-0x005144C8
		public static LocalDataStoreSlot AllocateDataSlot(); // 0x0051464C-0x005146C8
		public static LocalDataStoreSlot AllocateNamedDataSlot(string name); // 0x005146C8-0x0051474C
		public static void FreeNamedDataSlot(string name); // 0x0051474C-0x005147D0
		public static LocalDataStoreSlot GetNamedDataSlot(string name); // 0x005147D0-0x00514854
		public static object GetData(LocalDataStoreSlot slot); // 0x00514854-0x005148A4
		public static void SetData(LocalDataStoreSlot slot, object data); // 0x005148A4-0x00514904
	}

	internal class DynamicPropertyCollection // TypeDefIndex: 1081
	{
		// Fields
		private ArrayList _properties; // 0x10
	
		// Properties
		public bool HasProperties { get; } // 0x00836D64-0x00836DA8 
	
		// Nested types
		private class DynamicPropertyReg // TypeDefIndex: 1082
		{
			// Fields
			public IDynamicProperty Property; // 0x10
			public IDynamicMessageSink Sink; // 0x18
	
			// Constructors
			public DynamicPropertyReg(); // 0x008382C4-0x008382CC
		}
	
		// Constructors
		public DynamicPropertyCollection(); // 0x00838AC8-0x00838B30
	
		// Methods
		public bool RegisterDynamicProperty(IDynamicProperty prop); // 0x00836DA8-0x00838084
		public bool UnregisterDynamicProperty(string name); // 0x008382CC-0x00838454
		public void NotifyMessage(bool start, IMessage msg, bool client_site, bool async); // 0x0083845C-0x00838AC8
		private int FindProperty(string name); // 0x00838084-0x008382C4
	}

	internal class ContextCallbackObject : ContextBoundObject // TypeDefIndex: 1083
	{
		// Constructors
		public ContextCallbackObject(); // 0x008355D4-0x008355DC
	
		// Methods
		public void DoCallBack(CrossContextDelegate deleg); // 0x008355D0-0x008355D4
	}

	internal class CrossContextChannel : IMessageSink // TypeDefIndex: 1084
	{
		// Nested types
		private class ContextRestoreSink : IMessageSink // TypeDefIndex: 1085
		{
			// Fields
			private IMessageSink _next; // 0x10
			private Context _context; // 0x18
			private IMessage _call; // 0x20
	
			// Constructors
			public ContextRestoreSink(IMessageSink next, Context context, IMessage call); // 0x00836564-0x008365A4
	
			// Methods
			public IMessage SyncProcessMessage(IMessage msg); // 0x008365AC-0x008368A0
			public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x008368A0-0x00836914
		}
	
		// Constructors
		public CrossContextChannel(); // 0x008365A4-0x008365AC
	
		// Methods
		public IMessage SyncProcessMessage(IMessage msg); // 0x008355DC-0x00835AAC
		public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x0083605C-0x00836564
	}

	[ComVisible] // 0x003983DC-0x003983F0
	public delegate void CrossContextDelegate(); // TypeDefIndex: 1086; 0x00836924-0x00836D24

	[ComVisible] // 0x003983F0-0x00398404
	public interface IContextAttribute // TypeDefIndex: 1087
	{
		// Methods
		void GetPropertiesForNewContext(IConstructionCallMessage msg);
		bool IsContextOK(Context ctx, IConstructionCallMessage msg);
	}

	[ComVisible] // 0x00398404-0x00398418
	public interface IContextProperty // TypeDefIndex: 1088
	{
		// Properties
		string Name { get; }
	
		// Methods
		void Freeze(Context newContext);
		bool IsNewContextOK(Context newCtx);
	}

	[ComVisible] // 0x00398418-0x0039842C
	public interface IContributeClientContextSink // TypeDefIndex: 1089
	{
		// Methods
		IMessageSink GetClientContextSink(IMessageSink nextSink);
	}

	[ComVisible] // 0x0039842C-0x00398440
	public interface IContributeDynamicSink // TypeDefIndex: 1090
	{
		// Methods
		IDynamicMessageSink GetDynamicSink();
	}

	[ComVisible] // 0x00398440-0x00398454
	public interface IContributeEnvoySink // TypeDefIndex: 1091
	{
		// Methods
		IMessageSink GetEnvoySink(MarshalByRefObject obj, IMessageSink nextSink);
	}

	[ComVisible] // 0x00398454-0x00398468
	public interface IContributeObjectSink // TypeDefIndex: 1092
	{
		// Methods
		IMessageSink GetObjectSink(MarshalByRefObject obj, IMessageSink nextSink);
	}

	[ComVisible] // 0x00398468-0x0039847C
	public interface IContributeServerContextSink // TypeDefIndex: 1093
	{
		// Methods
		IMessageSink GetServerContextSink(IMessageSink nextSink);
	}

	[ComVisible] // 0x0039847C-0x00398490
	public interface IDynamicMessageSink // TypeDefIndex: 1094
	{
		// Methods
		void ProcessMessageFinish(IMessage replyMsg, bool bCliSide, bool bAsync);
		void ProcessMessageStart(IMessage reqMsg, bool bCliSide, bool bAsync);
	}

	[ComVisible] // 0x00398490-0x003984A4
	public interface IDynamicProperty // TypeDefIndex: 1095
	{
		// Properties
		string Name { get; }
	}
}

namespace System.Runtime.Remoting.Channels
{
	[ComVisible] // 0x003984A4-0x003984B8
	public sealed class ChannelServices // TypeDefIndex: 1096
	{
		// Fields
		private static ArrayList registeredChannels; // 0x00
		private static ArrayList delayedClientChannels; // 0x08
		private static CrossContextChannel _crossContextSink; // 0x10
		internal static string CrossContextUrl; // 0x18
		private static IList oldStartModeTypes; // 0x20
	
		// Properties
		internal static CrossContextChannel CrossContextChannel { get; } // 0x0050A320-0x0050A388 
	
		// Constructors
		static ChannelServices(); // 0x0050CF84-0x0050D124
	
		// Methods
		internal static IMessageSink CreateClientChannelSinkChain(string url, object remoteChannelData, out string objectUri); // 0x0050A388-0x0050ABE8
		internal static IMessageSink CreateClientChannelSinkChain(IChannelSender sender, string url, object[] channelDataArray, out string objectUri); // 0x0050ABE8-0x0050ADE0
		[Obsolete] // 0x0039F298-0x0039F2D0
		public static void RegisterChannel(IChannel chnl); // 0x0050ADE0-0x0050AE48
		public static void RegisterChannel(IChannel chnl, bool ensureSecurity); // 0x0050AE48-0x0050B758
		internal static void RegisterChannelConfig(ChannelData channel); // 0x0050B758-0x0050C5F8
		private static object CreateProvider(ProviderData prov); // 0x0050C5F8-0x0050C978
		public static IMessage SyncDispatchMessage(IMessage msg); // 0x0050C978-0x0050CA5C
		private static ReturnMessage CheckIncomingMessage(IMessage msg); // 0x0050CA5C-0x0050CD94
		internal static IMessage CheckReturnMessage(IMessage callMsg, IMessage retMsg); // 0x0050CD94-0x0050CF7C
		private static bool IsLocalCall(IMessage callMsg); // 0x0050CF7C-0x0050CF84
		internal static object[] GetCurrentChannelInfo(); // 0x00509A30-0x00509E40
	}

	[Serializable]
	internal class CrossAppDomainData // TypeDefIndex: 1097
	{
		// Fields
		private object _ContextID; // 0x10
		private int _DomainID; // 0x18
		private string _processGuid; // 0x20
	
		// Properties
		internal int DomainID { get; } // 0x0050D528-0x0050D530 
		internal string ProcessID { get; } // 0x0050D520-0x0050D528 
	
		// Constructors
		internal CrossAppDomainData(int domainId); // 0x0050D30C-0x0050D3B0
	}

	[Serializable]
	internal class CrossAppDomainChannel : IChannelSender, IChannelReceiver // TypeDefIndex: 1098
	{
		// Fields
		private static object s_lock; // 0x00
	
		// Properties
		public virtual string ChannelName { get; } // 0x0050D250-0x0050D298 
		public virtual int ChannelPriority { get; } // 0x0050D298-0x0050D2A0 
		public virtual object ChannelData { get; } // 0x0050D2A0-0x0050D30C 
	
		// Constructors
		public CrossAppDomainChannel(); // 0x0050D248-0x0050D250
		static CrossAppDomainChannel(); // 0x0050D840-0x0050D8AC
	
		// Methods
		internal static void RegisterCrossAppDomainChannel(); // 0x0050D124-0x0050D248
		public virtual void StartListening(object data); // 0x0050D3B0-0x0050D3B4
		public virtual IMessageSink CreateMessageSink(string url, object data, out string uri); // 0x0050D3B4-0x0050D520
	}

	[MonoTODO] // 0x003984B8-0x003984F0
	internal class CrossAppDomainSink : IMessageSink // TypeDefIndex: 1099
	{
		// Fields
		private static Hashtable s_sinks; // 0x00
		private static MethodInfo processMessageMethod; // 0x08
		private int _domainID; // 0x10
	
		// Properties
		internal int TargetDomainId { get; } // 0x0050D8D8-0x0050D8E0 
	
		// Nested types
		private struct ProcessMessageRes // TypeDefIndex: 1100
		{
			// Fields
			public byte[] arrResponse; // 0x00
			public CADMethodReturnMessage cadMrm; // 0x08
		}
	
		// Constructors
		internal CrossAppDomainSink(int domainID); // 0x0050D8AC-0x0050D8D8
		static CrossAppDomainSink(); // 0x0050E088-0x0050E160
	
		// Methods
		internal static CrossAppDomainSink GetSink(int domainID); // 0x0050D530-0x0050D840
		private static ProcessMessageRes ProcessMessageInDomain(byte[] arrRequest, CADMethodCallMessage cadMsg); // 0x0050D8E0-0x0050DA64
		public virtual IMessage SyncProcessMessage(IMessage msgRequest); // 0x0050DA64-0x0050DE58
		public virtual IMessageCtrl AsyncProcessMessage(IMessage reqMsg, IMessageSink replySink); // 0x0050DE58-0x0050DF08
		public void SendAsyncMessage(object data); // 0x0050DF08-0x0050E088
		[CompilerGenerated] // 0x0039F2D0-0x0039F2E0
		private void <AsyncProcessMessage>b__10_0(object data); // 0x0050E160-0x0050E27C
	}

	internal class CADSerializer // TypeDefIndex: 1101
	{
		// Methods
		internal static IMessage DeserializeMessage(MemoryStream mem, IMethodCallMessage msg); // 0x00509F48-0x00509FB0
		internal static MemoryStream SerializeMessage(IMessage msg); // 0x00509FB0-0x0050A0BC
		internal static object DeserializeObjectSafe(byte[] mem); // 0x0050A0BC-0x0050A164
		internal static MemoryStream SerializeObject(object obj); // 0x0050A214-0x0050A320
		internal static object DeserializeObject(MemoryStream mem); // 0x0050A164-0x0050A214
	}

	internal class AsyncRequest // TypeDefIndex: 1102
	{
		// Fields
		internal IMessageSink ReplySink; // 0x10
		internal IMessage MsgRequest; // 0x18
	
		// Constructors
		public AsyncRequest(IMessage msgRequest, IMessageSink replySink); // 0x00509F10-0x00509F48
	}

	[ComVisible] // 0x003984F0-0x00398504
	public interface IChannel // TypeDefIndex: 1103
	{
		// Properties
		string ChannelName { get; }
		int ChannelPriority { get; }
	}

	[ComVisible] // 0x00398504-0x00398554
	[DefaultMember] // 0x00398504-0x00398554
	public interface IChannelDataStore // TypeDefIndex: 1104
	{
	}

	[ComVisible] // 0x00398554-0x00398568
	public interface IChannelReceiver : IChannel // TypeDefIndex: 1105
	{
		// Properties
		object ChannelData { get; }
	
		// Methods
		void StartListening(object data);
	}

	[ComVisible] // 0x00398568-0x0039857C
	public interface IChannelSender : IChannel // TypeDefIndex: 1106
	{
		// Methods
		IMessageSink CreateMessageSink(string url, object remoteChannelData, out string objectURI);
	}

	[ComVisible] // 0x0039857C-0x00398590
	public interface IClientChannelSinkProvider // TypeDefIndex: 1107
	{
		// Properties
		IClientChannelSinkProvider Next { set; }
	}

	public interface ISecurableChannel // TypeDefIndex: 1108
	{
		// Properties
		bool IsSecured { set; }
	}

	[ComVisible] // 0x00398590-0x003985A4
	public interface IServerChannelSinkProvider // TypeDefIndex: 1109
	{
		// Properties
		IServerChannelSinkProvider Next { set; }
	}

	[ComVisible] // 0x003985A4-0x003985B8
	public class SinkProviderData // TypeDefIndex: 1110
	{
		// Fields
		private string sinkName; // 0x10
		private ArrayList children; // 0x18
		private Hashtable properties; // 0x20
	
		// Properties
		public IList Children { get; } // 0x0050E318-0x0050E320 
		public IDictionary Properties { get; } // 0x0050E320-0x0050E328 
	
		// Constructors
		public SinkProviderData(string name); // 0x0050E27C-0x0050E318
	}
}

namespace System.Runtime.Remoting.Activation
{
	internal class ActivationServices // TypeDefIndex: 1111
	{
		// Fields
		private static IActivator _constructionActivator; // 0x00
	
		// Properties
		private static IActivator ConstructionActivator { get; } // 0x0050519C-0x00505224 
	
		// Methods
		public static IMessage Activate(RemotingProxy proxy, ConstructionCall ctorCall); // 0x0050522C-0x0050555C
		public static IMessage RemoteActivate(IConstructionCallMessage ctorCall); // 0x005057E4-0x005059C4
		public static ConstructionCall CreateConstructionCall(Type type, string activationUrl, object[] activationAttributes); // 0x005059C4-0x00506560
		public static IMessage CreateInstanceFromMessage(IConstructionCallMessage ctorCall); // 0x005065C4-0x00506B28
		public static object CreateProxyForType(Type type); // 0x00506B2C-0x00506CA4
		public static object AllocateUninitializedClassInstance(Type type); // 0x00506B28-0x00506B2C
		public static void EnableProxyActivation(Type type, bool enable); // 0x00506CA4-0x00506CAC
	}

	internal class AppDomainLevelActivator : IActivator // TypeDefIndex: 1112
	{
		// Fields
		private string _activationUrl; // 0x10
		private IActivator _next; // 0x18
	
		// Properties
		public IActivator NextActivator { get; } // 0x00506CAC-0x00506CB4 
	
		// Constructors
		public AppDomainLevelActivator(string activationUrl, IActivator next); // 0x00506560-0x00506598
	
		// Methods
		public IConstructionReturnMessage Activate(IConstructionCallMessage ctorCall); // 0x00506CB4-0x0050722C
	}

	[Serializable]
	internal class ConstructionLevelActivator : IActivator // TypeDefIndex: 1113
	{
		// Properties
		public IActivator NextActivator { get; } // 0x0050722C-0x00507234 
	
		// Constructors
		public ConstructionLevelActivator(); // 0x00505224-0x0050522C
	
		// Methods
		public IConstructionReturnMessage Activate(IConstructionCallMessage msg); // 0x00507234-0x00507384
	}

	[Serializable]
	internal class ContextLevelActivator : IActivator // TypeDefIndex: 1114
	{
		// Fields
		private IActivator m_NextActivator; // 0x10
	
		// Properties
		public IActivator NextActivator { get; } // 0x0050754C-0x00507554 
	
		// Constructors
		public ContextLevelActivator(IActivator next); // 0x00506598-0x005065C4
	
		// Methods
		public IConstructionReturnMessage Activate(IConstructionCallMessage ctorCall); // 0x00507554-0x005078C0
	}

	[ComVisible] // 0x003985B8-0x003985CC
	public interface IActivator // TypeDefIndex: 1115
	{
		// Properties
		IActivator NextActivator { get; }
	
		// Methods
		IConstructionReturnMessage Activate(IConstructionCallMessage msg);
	}

	[ComVisible] // 0x003985CC-0x003985E0
	public interface IConstructionCallMessage : IMethodCallMessage // TypeDefIndex: 1116
	{
		// Properties
		Type ActivationType { get; }
		string ActivationTypeName { get; }
		IActivator Activator { get; set; }
		object[] CallSiteActivationAttributes { get; }
		IList ContextProperties { get; }
	}

	[ComVisible] // 0x003985E0-0x003985F4
	public interface IConstructionReturnMessage : IMethodReturnMessage // TypeDefIndex: 1117
	{
	}

	internal class RemoteActivationAttribute : Attribute, IContextAttribute // TypeDefIndex: 1118
	{
		// Fields
		private IList _contextProperties; // 0x10
	
		// Constructors
		public RemoteActivationAttribute(IList contextProperties); // 0x00508190-0x005081BC
	
		// Methods
		public bool IsContextOK(Context ctx, IConstructionCallMessage ctor); // 0x005081BC-0x005081C4
		public void GetPropertiesForNewContext(IConstructionCallMessage ctor); // 0x005081C4-0x0050855C
	}

	internal class RemoteActivator : MarshalByRefObject, IActivator // TypeDefIndex: 1119
	{
		// Properties
		public IActivator NextActivator { get; } // 0x00508DD4-0x00508E3C 
	
		// Methods
		public IConstructionReturnMessage Activate(IConstructionCallMessage msg); // 0x0050855C-0x00508AC8
		public override object InitializeLifetimeService(); // 0x00508AC8-0x00508DD4
	}
}

namespace System.Runtime.Remoting.Metadata
{
	[ComVisible] // 0x003985F4-0x00398608
	public class SoapAttribute : Attribute // TypeDefIndex: 1120
	{
		// Fields
		private bool _useAttribute; // 0x10
		protected string ProtXmlNamespace; // 0x18
		protected object ReflectInfo; // 0x20
	
		// Properties
		public virtual bool UseAttribute { get; } // 0x0084E480-0x0084E488 
		public virtual string XmlNamespace { get; } // 0x0084E488-0x0084E490 
	
		// Constructors
		public SoapAttribute(); // 0x0084E478-0x0084E480
	
		// Methods
		internal virtual void SetReflectionObject(object reflectionObject); // 0x0084E490-0x0084E498
	}

	[AttributeUsage] // 0x00398608-0x00398648
	[ComVisible] // 0x00398608-0x00398648
	public sealed class SoapFieldAttribute : SoapAttribute // TypeDefIndex: 1121
	{
		// Fields
		private string _elementName; // 0x28
		private bool _isElement; // 0x30
	
		// Properties
		public string XmlElementName { get; } // 0x0084E498-0x0084E4A0 
	
		// Constructors
		public SoapFieldAttribute(); // 0x0083960C-0x00839614
	
		// Methods
		public bool IsInteropXmlElement(); // 0x0084E4A0-0x0084E4A8
		internal override void SetReflectionObject(object reflectionObject); // 0x0084E4A8-0x0084E59C
	}

	[AttributeUsage] // 0x00398648-0x00398688
	[ComVisible] // 0x00398648-0x00398688
	public sealed class SoapMethodAttribute : SoapAttribute // TypeDefIndex: 1122
	{
		// Fields
		private string _responseElement; // 0x28
		private string _responseNamespace; // 0x30
		private string _returnElement; // 0x38
		private string _soapAction; // 0x40
		private bool _useAttribute; // 0x48
		private string _namespace; // 0x50
	
		// Properties
		public override bool UseAttribute { get; } // 0x0084E59C-0x0084E5A4 
		public override string XmlNamespace { get; } // 0x0084E5A4-0x0084E5AC 
	
		// Constructors
		public SoapMethodAttribute(); // 0x00839614-0x0083961C
	
		// Methods
		internal override void SetReflectionObject(object reflectionObject); // 0x0084E5AC-0x0084E7B0
	}

	[AttributeUsage] // 0x00398688-0x003986C8
	[ComVisible] // 0x00398688-0x003986C8
	public sealed class SoapParameterAttribute : SoapAttribute // TypeDefIndex: 1123
	{
		// Constructors
		public SoapParameterAttribute(); // 0x0083961C-0x00839624
	}

	[AttributeUsage] // 0x003986C8-0x00398708
	[ComVisible] // 0x003986C8-0x00398708
	public sealed class SoapTypeAttribute : SoapAttribute // TypeDefIndex: 1124
	{
		// Fields
		private bool _useAttribute; // 0x28
		private string _xmlElementName; // 0x30
		private string _xmlNamespace; // 0x38
		private string _xmlTypeName; // 0x40
		private string _xmlTypeNamespace; // 0x48
		private bool _isType; // 0x50
		private bool _isElement; // 0x51
	
		// Properties
		public override bool UseAttribute { get; } // 0x0084E7B0-0x0084E7B8 
		public string XmlElementName { get; } // 0x0084E7B8-0x0084E7C0 
		public override string XmlNamespace { get; } // 0x0084E7C0-0x0084E7C8 
		public string XmlTypeName { get; } // 0x0084E7C8-0x0084E7D0 
		public string XmlTypeNamespace { get; } // 0x0084E7D0-0x0084E7D8 
		internal bool IsInteropXmlElement { get; } // 0x0084E7D8-0x0084E7E0 
		internal bool IsInteropXmlType { get; } // 0x0084E7E0-0x0084E7E8 
	
		// Constructors
		public SoapTypeAttribute(); // 0x00839604-0x0083960C
	
		// Methods
		internal override void SetReflectionObject(object reflectionObject); // 0x0084E7E8-0x0084EA64
	}
}

namespace System.Runtime.Remoting.Messaging
{
	[Serializable]
	[ComVisible] // 0x00398708-0x0039871C
	public sealed class CallContext // TypeDefIndex: 1125
	{
		// Constructors
		private CallContext(); // 0x0083FEA0-0x0083FEA8
	
		// Methods
		internal static object SetCurrentCallContext(LogicalCallContext ctx); // 0x0083FEA8-0x0083FEB0
		internal static LogicalCallContext SetLogicalCallContext(LogicalCallContext callCtx); // 0x0083FEB0-0x0083FF40
	}

	internal class IllogicalCallContext // TypeDefIndex: 1126
	{
		// Fields
		private Hashtable m_Datastore; // 0x10
		private object m_HostContext; // 0x18
	
		// Properties
		private Hashtable Datastore { get; } // 0x00844268-0x008442D4 
		internal object HostContext { get; set; } // 0x008442D4-0x008442DC 0x008442DC-0x008442E4
		internal bool HasUserData { get; } // 0x008442E4-0x00844314 
	
		// Constructors
		public IllogicalCallContext(); // 0x00844604-0x0084460C
	
		// Methods
		public IllogicalCallContext CreateCopy(); // 0x00844314-0x00844604
	}

	[Serializable]
	[ComVisible] // 0x0039871C-0x00398730
	public sealed class LogicalCallContext : ISerializable, ICloneable // TypeDefIndex: 1127
	{
		// Fields
		private static Type s_callContextType; // 0x00
		private Hashtable m_Datastore; // 0x10
		private CallContextRemotingData m_RemotingData; // 0x18
		private CallContextSecurityData m_SecurityData; // 0x20
		private object m_HostContext; // 0x28
		private bool m_IsCorrelationMgr; // 0x30
	
		// Properties
		public bool HasInfo { get; } // 0x0083F024-0x0083F088 
		private bool HasUserData { get; } // 0x00844E24-0x00844E54 
		private Hashtable Datastore { get; } // 0x00844A0C-0x00844A78 
	
		// Nested types
		internal struct Reader // TypeDefIndex: 1128
		{
			// Fields
			private LogicalCallContext m_ctx; // 0x00
	
			// Properties
			public bool IsNull { get; } // 0x00845A40-0x00845A60 
			public bool HasInfo { get; } // 0x00845A60-0x00845B34 
	
			// Constructors
			public Reader(LogicalCallContext ctx); // 0x00845A38-0x00845A40
	
			// Methods
			public LogicalCallContext Clone(); // 0x00845B34-0x00845B3C
		}
	
		// Constructors
		internal LogicalCallContext(); // 0x0084460C-0x00844614
		internal LogicalCallContext(SerializationInfo info, StreamingContext context); // 0x00844614-0x00844A0C
		static LogicalCallContext(); // 0x0084595C-0x00845A38
	
		// Methods
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00844A78-0x00844E24
		public object Clone(); // 0x00844E54-0x00845698
		internal void Merge(LogicalCallContext lc); // 0x00845698-0x0084595C
	}

	[Serializable]
	internal class CallContextSecurityData : ICloneable // TypeDefIndex: 1129
	{
		// Fields
		private IPrincipal _principal; // 0x10
	
		// Properties
		internal bool HasInfo { get; } // 0x0083FFDC-0x0083FFEC 
	
		// Constructors
		public CallContextSecurityData(); // 0x00840060-0x00840068
	
		// Methods
		public object Clone(); // 0x0083FFEC-0x00840060
	}

	[Serializable]
	internal class CallContextRemotingData : ICloneable // TypeDefIndex: 1130
	{
		// Fields
		private string _logicalCallID; // 0x10
	
		// Properties
		internal string LogicalCallID { get; set; } // 0x0083FF40-0x0083FF48 0x0083FF48-0x0083FF50
		internal bool HasInfo { get; } // 0x0083FF50-0x0083FF60 
	
		// Constructors
		public CallContextRemotingData(); // 0x0083FFD4-0x0083FFDC
	
		// Methods
		public object Clone(); // 0x0083FF60-0x0083FFD4
	}

	internal enum ArgInfoType : byte // TypeDefIndex: 1131
	{
		In = 0,
		Out = 1
	}

	internal class ArgInfo // TypeDefIndex: 1132
	{
		// Fields
		private int[] _paramMap; // 0x10
		private int _inoutArgCount; // 0x18
		private MethodBase _method; // 0x20
	
		// Constructors
		public ArgInfo(MethodBase method, ArgInfoType type); // 0x0083BBA4-0x0083BE0C
	
		// Methods
		public object[] GetInOutArgs(object[] args); // 0x0083BE0C-0x0083BFB0
	}

	[ComVisible] // 0x00398730-0x00398744
	public class AsyncResult : IAsyncResult, IMessageSink, IThreadPoolWorkItem // TypeDefIndex: 1133
	{
		// Fields
		private object async_state; // 0x10
		private WaitHandle handle; // 0x18
		private object async_delegate; // 0x20
		private IntPtr data; // 0x28
		private object object_data; // 0x30
		private bool sync_completed; // 0x38
		private bool completed; // 0x39
		private bool endinvoke_called; // 0x3A
		private object async_callback; // 0x40
		private ExecutionContext current; // 0x48
		private ExecutionContext original; // 0x50
		private long add_time; // 0x58
		private MonoMethodMessage call_message; // 0x60
		private IMessageCtrl message_ctrl; // 0x68
		private IMessage reply_message; // 0x70
		private WaitCallback orig_cb; // 0x78
		internal static ContextCallback ccb; // 0x00
	
		// Properties
		public virtual object AsyncState { get; } // 0x0083C190-0x0083C198 
		public virtual WaitHandle AsyncWaitHandle { get; } // 0x0083C198-0x0083C2A4 
		public virtual bool CompletedSynchronously { get; } // 0x0083C2A4-0x0083C2AC 
		public virtual bool IsCompleted { get; } // 0x0083C2AC-0x0083C2B4 
		public bool EndInvokeCalled { get; set; } // 0x0083C2B4-0x0083C2BC 0x0083C2BC-0x0083C2C8
		public virtual object AsyncDelegate { get; } // 0x0083C2C8-0x0083C2D0 
		public IMessageSink NextSink { get; } // 0x0083C2D0-0x0083C2D8 
		internal MonoMethodMessage CallMessage { get; set; } // 0x0083C6E8-0x0083C6F0 0x0083C6F0-0x0083C6F8
	
		// Constructors
		internal AsyncResult(); // 0x0083BFB0-0x0083BFB8
		internal AsyncResult(WaitCallback cb, object state, bool capture_context); // 0x0083BFB8-0x0083C098
		static AsyncResult(); // 0x0083C704-0x0083C780
	
		// Methods
		private static void WaitCallback_Context(object state); // 0x0083C098-0x0083C190
		public virtual IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x0083C2D8-0x0083C340
		public virtual IMessage GetReplyMessage(); // 0x0083C340-0x0083C348
		public virtual void SetMessageCtrl(IMessageCtrl mc); // 0x0083C348-0x0083C350
		internal void SetCompletedSynchronously(bool completed); // 0x0083C350-0x0083C35C
		internal IMessage EndInvoke(); // 0x0083C35C-0x0083C44C
		public virtual IMessage SyncProcessMessage(IMessage msg); // 0x0083C44C-0x0083C6E8
		void IThreadPoolWorkItem.ExecuteWorkItem(); // 0x0083C6F8-0x0083C6FC
		void IThreadPoolWorkItem.MarkAborted(ThreadAbortException tae); // 0x0083C700-0x0083C704
		internal object Invoke(); // 0x0083C6FC-0x0083C700
		[CompilerGenerated] // 0x0039F2E0-0x0039F2F0
		private void <.ctor>b__17_0(object <p0>); // 0x0083C780-0x0083C830
	}

	internal class CADArgHolder // TypeDefIndex: 1134
	{
		// Fields
		public int index; // 0x10
	
		// Constructors
		public CADArgHolder(int i); // 0x0083C830-0x0083C85C
	}

	internal class CADObjRef // TypeDefIndex: 1135
	{
		// Fields
		internal ObjRef objref; // 0x10
		internal int SourceDomain; // 0x18
		internal byte[] TypeInfo; // 0x20
	
		// Constructors
		public CADObjRef(ObjRef o, int sourceDomain); // 0x0083E378-0x0083E3CC
	}

	[Serializable]
	internal class CADMethodRef // TypeDefIndex: 1136
	{
		// Fields
		private bool ctor; // 0x10
		private string typeName; // 0x18
		private string methodName; // 0x20
		private string[] param_names; // 0x28
		private string[] generic_arg_names; // 0x30
	
		// Constructors
		public CADMethodRef(IMethodMessage msg); // 0x0083C900-0x0083CCA0
	
		// Methods
		private Type[] GetTypes(string[] typeArray); // 0x0083F568-0x0083F73C
		public MethodBase Resolve(); // 0x0083CDFC-0x0083D37C
	}

	internal class CADMessageBase // TypeDefIndex: 1137
	{
		// Fields
		protected object[] _args; // 0x10
		protected byte[] _serializedArgs; // 0x18
		protected int _propertyCount; // 0x20
		protected CADArgHolder _callContext; // 0x28
		internal byte[] serializedMethod; // 0x30
	
		// Constructors
		public CADMessageBase(IMethodMessage msg); // 0x0083C85C-0x0083C900
	
		// Methods
		internal MethodBase GetMethod(); // 0x0083CCA0-0x0083CDFC
		protected static Type[] GetSignature(MethodBase methodBase, bool load); // 0x0083D37C-0x0083D570
		internal static int MarshalProperties(IDictionary dict, ref ArrayList args); // 0x0083D570-0x0083DBD8
		internal static void UnmarshalProperties(IDictionary dict, int count, ArrayList args); // 0x0083DD5C-0x0083DEBC
		private static bool IsPossibleToIgnoreMarshal(object obj); // 0x0083DEBC-0x0083E150
		protected object MarshalArgument(object arg, ref ArrayList args); // 0x0083E150-0x0083E2A4
		protected object UnmarshalArgument(object arg, ArrayList args); // 0x0083E3CC-0x0083E94C
		internal object[] MarshalArguments(object[] arguments, ref ArrayList args); // 0x0083EB18-0x0083EC60
		internal object[] UnmarshalArguments(object[] arguments, ArrayList args); // 0x0083EC60-0x0083EDA8
		protected void SaveLogicalCallContext(IMethodMessage msg, ref ArrayList serializeList); // 0x0083EDA8-0x0083F024
		internal LogicalCallContext GetLogicalCallContext(ArrayList args); // 0x0083F088-0x0083F168
	}

	internal class CADMethodCallMessage : CADMessageBase // TypeDefIndex: 1138
	{
		// Fields
		private string _uri; // 0x38
	
		// Properties
		internal string Uri { get; } // 0x0083F168-0x0083F170 
		internal int PropertiesCount { get; } // 0x0083F560-0x0083F568 
	
		// Constructors
		internal CADMethodCallMessage(IMethodCallMessage callMsg); // 0x0083F1F4-0x0083F424
	
		// Methods
		internal static CADMethodCallMessage Create(IMessage callMsg); // 0x0083F170-0x0083F1F4
		internal ArrayList GetArguments(); // 0x0083F424-0x0083F54C
		internal object[] GetArgs(ArrayList args); // 0x0083F54C-0x0083F560
	}

	internal class CADMethodReturnMessage : CADMessageBase // TypeDefIndex: 1139
	{
		// Fields
		private object _returnValue; // 0x38
		private CADArgHolder _exception; // 0x40
		private Type[] _sig; // 0x48
	
		// Properties
		internal int PropertiesCount { get; } // 0x0083FDE8-0x0083FDF0 
	
		// Constructors
		internal CADMethodReturnMessage(IMethodReturnMessage retMsg); // 0x0083F7C0-0x0083FB9C
	
		// Methods
		internal static CADMethodReturnMessage Create(IMessage callMsg); // 0x0083F73C-0x0083F7C0
		internal ArrayList GetArguments(); // 0x0083FB9C-0x0083FCC4
		internal object[] GetArgs(ArrayList args); // 0x0083FCC4-0x0083FCD8
		internal object GetReturnValue(ArrayList args); // 0x0083FCD8-0x0083FCEC
		internal Exception GetException(ArrayList args); // 0x0083FCEC-0x0083FDE8
	}

	internal class ClientContextTerminatorSink : IMessageSink // TypeDefIndex: 1140
	{
		// Fields
		private Context _context; // 0x10
	
		// Constructors
		public ClientContextTerminatorSink(Context ctx); // 0x00840230-0x0084025C
	
		// Methods
		public IMessage SyncProcessMessage(IMessage msg); // 0x0084025C-0x008404B4
		public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x008404B4-0x0084075C
	}

	internal class ClientContextReplySink : IMessageSink // TypeDefIndex: 1141
	{
		// Fields
		private IMessageSink _replySink; // 0x10
		private Context _context; // 0x18
	
		// Constructors
		public ClientContextReplySink(Context ctx, IMessageSink replySink); // 0x00840068-0x008400A0
	
		// Methods
		public IMessage SyncProcessMessage(IMessage msg); // 0x008400A0-0x008401C8
		public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x008401C8-0x00840230
	}

	[Serializable]
	[CLSCompliant] // 0x00398744-0x00398784
	[ComVisible] // 0x00398744-0x00398784
	public class ConstructionCall : MethodCall, IConstructionCallMessage // TypeDefIndex: 1142
	{
		// Fields
		private IActivator _activator; // 0x68
		private object[] _activationAttributes; // 0x70
		private IList _contextProperties; // 0x78
		private Type _activationType; // 0x80
		private string _activationTypeName; // 0x88
		private bool _isContextOk; // 0x90
		[NonSerialized]
		private RemotingProxy _sourceProxy; // 0x98
	
		// Properties
		internal bool IsContextOk { get; set; } // 0x00840A04-0x00840A0C 0x00840A0C-0x00840A18
		public Type ActivationType { get; } // 0x00840A18-0x00840AE8 
		public string ActivationTypeName { get; } // 0x00840AE8-0x00840AF0 
		public IActivator Activator { get; set; } // 0x00840AF0-0x00840AF8 0x00840AF8-0x00840B00
		public object[] CallSiteActivationAttributes { get; } // 0x00840B00-0x00840B08 
		public IList ContextProperties { get; } // 0x00840B10-0x00840B7C 
		public override IDictionary Properties { get; } // 0x00841A88-0x00841AC4 
		internal RemotingProxy SourceProxy { get; set; } // 0x00841B00-0x00841B08 0x00841B08-0x00841B10
	
		// Constructors
		internal ConstructionCall(Type type); // 0x0084075C-0x008407B4
		internal ConstructionCall(SerializationInfo info, StreamingContext context); // 0x008407BC-0x008407C0
	
		// Methods
		internal override void InitDictionary(); // 0x008408B4-0x00840940
		internal void SetActivationAttributes(object[] attributes); // 0x00840B08-0x00840B10
		internal override void InitMethodProperty(string key, object value); // 0x00840B7C-0x00840EC8
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00841414-0x008415EC
	}

	internal class ConstructionCallDictionary : MessageDictionary // TypeDefIndex: 1143
	{
		// Fields
		public static string[] InternalKeys; // 0x00
	
		// Constructors
		public ConstructionCallDictionary(IConstructionCallMessage message); // 0x00840940-0x008409CC
		static ConstructionCallDictionary(); // 0x00843000-0x00843408
	
		// Methods
		protected override object GetMethodProperty(string key); // 0x00841B44-0x0084224C
		protected override void SetMethodProperty(string key, object value); // 0x00842998-0x00842CAC
	}

	[Serializable]
	[CLSCompliant] // 0x00398784-0x003987C4
	[ComVisible] // 0x00398784-0x003987C4
	public class ConstructionResponse : MethodResponse, IConstructionReturnMessage // TypeDefIndex: 1144
	{
		// Properties
		public override IDictionary Properties { get; } // 0x008436E8-0x008436EC 
	
		// Constructors
		internal ConstructionResponse(object resultObject, LogicalCallContext callCtx, IMethodCallMessage msg); // 0x00843408-0x00843414
		internal ConstructionResponse(Exception e, IMethodCallMessage msg); // 0x00843504-0x00843508
		internal ConstructionResponse(SerializationInfo info, StreamingContext context); // 0x00843610-0x00843614
	}

	[Serializable]
	internal class EnvoyTerminatorSink : IMessageSink // TypeDefIndex: 1145
	{
		// Fields
		public static EnvoyTerminatorSink Instance; // 0x00
	
		// Constructors
		public EnvoyTerminatorSink(); // 0x00843944-0x0084394C
		static EnvoyTerminatorSink(); // 0x0084394C-0x008439B0
	
		// Methods
		public IMessage SyncProcessMessage(IMessage msg); // 0x00843788-0x0084385C
		public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x0084385C-0x00843944
	}

	[Serializable]
	internal class ErrorMessage : IMethodCallMessage // TypeDefIndex: 1146
	{
		// Fields
		private string _uri; // 0x10
	
		// Properties
		public int ArgCount { get; } // 0x00843A08-0x00843A10 
		public object[] Args { get; } // 0x00843A10-0x00843A18 
		public MethodBase MethodBase { get; } // 0x00843A18-0x00843A20 
		public string MethodName { get; } // 0x00843A20-0x00843A68 
		public object MethodSignature { get; } // 0x00843A68-0x00843A70 
		public virtual IDictionary Properties { get; } // 0x00843A70-0x00843A78 
		public string TypeName { get; } // 0x00843A78-0x00843AC0 
		public string Uri { get; } // 0x00843AC0-0x00843AC8 
		public LogicalCallContext LogicalCallContext { get; } // 0x00843AD0-0x00843AD8 
	
		// Constructors
		public ErrorMessage(); // 0x008439B0-0x00843A08
	
		// Methods
		public object GetArg(int arg_num); // 0x00843AC8-0x00843AD0
	}

	[Serializable]
	[ComVisible] // 0x003987C4-0x003987D8
	public class Header // TypeDefIndex: 1147
	{
	}

	[ComVisible] // 0x003987D8-0x003987EC
	public delegate object HeaderHandler(Header[] headers); // TypeDefIndex: 1148; 0x00843AE8-0x00844238

	internal interface IInternalMessage // TypeDefIndex: 1149
	{
		// Properties
		Identity TargetIdentity { get; set; }
		string Uri { get; set; }
	}

	[ComVisible] // 0x003987EC-0x00398800
	public interface IMessage // TypeDefIndex: 1150
	{
		// Properties
		IDictionary Properties { get; }
	}

	[ComVisible] // 0x00398800-0x00398814
	public interface IMessageCtrl // TypeDefIndex: 1151
	{
	}

	[ComVisible] // 0x00398814-0x00398828
	public interface IMessageSink // TypeDefIndex: 1152
	{
		// Methods
		IMessage SyncProcessMessage(IMessage msg);
		IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink);
	}

	[ComVisible] // 0x00398828-0x0039883C
	public interface IMethodCallMessage : IMethodMessage // TypeDefIndex: 1153
	{
	}

	[ComVisible] // 0x0039883C-0x00398850
	public interface IMethodMessage : IMessage // TypeDefIndex: 1154
	{
		// Properties
		int ArgCount { get; }
		object[] Args { get; }
		LogicalCallContext LogicalCallContext { get; }
		MethodBase MethodBase { get; }
		string MethodName { get; }
		object MethodSignature { get; }
		string TypeName { get; }
		string Uri { get; }
	
		// Methods
		object GetArg(int argNum);
	}

	[ComVisible] // 0x00398850-0x00398864
	public interface IMethodReturnMessage : IMethodMessage // TypeDefIndex: 1155
	{
		// Properties
		Exception Exception { get; }
		object[] OutArgs { get; }
		object ReturnValue { get; }
	}

	[ComVisible] // 0x00398864-0x00398878
	public interface IRemotingFormatter : IFormatter // TypeDefIndex: 1156
	{
	}

	internal interface ISerializationRootObject // TypeDefIndex: 1157
	{
	}

	[Serializable]
	[CLSCompliant] // 0x00398878-0x003988B8
	[ComVisible] // 0x00398878-0x003988B8
	public class MethodCall : IMethodCallMessage, ISerializable, IInternalMessage, ISerializationRootObject // TypeDefIndex: 1158
	{
		// Fields
		private string _uri; // 0x10
		private string _typeName; // 0x18
		private string _methodName; // 0x20
		private object[] _args; // 0x28
		private Type[] _methodSignature; // 0x30
		private MethodBase _methodBase; // 0x38
		private LogicalCallContext _callContext; // 0x40
		private Identity _targetIdentity; // 0x48
		private Type[] _genericArguments; // 0x50
		protected IDictionary ExternalProperties; // 0x58
		protected IDictionary InternalProperties; // 0x60
	
		// Properties
		public int ArgCount { get; } // 0x00847A38-0x00847A64 
		public object[] Args { get; } // 0x00847A64-0x00847A6C 
		public LogicalCallContext LogicalCallContext { get; } // 0x00847A6C-0x00847AD8 
		public MethodBase MethodBase { get; } // 0x00847AD8-0x00847B14 
		public string MethodName { get; } // 0x0084829C-0x008482E4 
		public object MethodSignature { get; } // 0x008482E4-0x0084846C 
		public virtual IDictionary Properties { get; } // 0x00841AC4-0x00841B00 
		public string TypeName { get; } // 0x008484F8-0x00848560 
		public string Uri { get; set; } // 0x00848560-0x00848568 0x00848568-0x00848570
		string IInternalMessage.Uri { get; set; } // 0x00848570-0x00848578 0x00848578-0x00848580
		Identity IInternalMessage.TargetIdentity { get; set; } // 0x00848EE8-0x00848EF0 0x00848EF0-0x00848EF8
		private Type[] GenericArguments { get; } // 0x00848DB8-0x00848E08 
	
		// Constructors
		internal MethodCall(SerializationInfo info, StreamingContext context); // 0x008407C0-0x008408B4
		internal MethodCall(CADMethodCallMessage msg); // 0x008474AC-0x00847628
		internal MethodCall(); // 0x008407B4-0x008407BC
	
		// Methods
		internal void CopyFrom(IMethodMessage call); // 0x00847628-0x00847A38
		internal virtual void InitMethodProperty(string key, object value); // 0x00840EC8-0x00841414
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x008415EC-0x00841A88
		internal virtual void InitDictionary(); // 0x0084846C-0x008484F8
		public object GetArg(int argNum); // 0x00848580-0x008485D4
		public virtual void Init(); // 0x008485D4-0x008485D8
		public void ResolveMethod(); // 0x00847B14-0x0084829C
		private Type CastTo(string clientType, Type serverType); // 0x008486A0-0x00848868
		private static string GetTypeNameFromAssemblyQualifiedName(string aqname); // 0x00848E08-0x00848EE8
	}

	internal class MCMDictionary : MessageDictionary // TypeDefIndex: 1159
	{
		// Fields
		public static string[] InternalKeys; // 0x00
	
		// Constructors
		public MCMDictionary(IMethodMessage message); // 0x00845B3C-0x00845BC8
		static MCMDictionary(); // 0x00845BC8-0x00845E2C
	}

	[Serializable]
	internal class MessageDictionary : IDictionary // TypeDefIndex: 1160
	{
		// Fields
		private IDictionary _internalProperties; // 0x10
		protected IMethodMessage _message; // 0x18
		private string[] _methodKeys; // 0x20
		private bool _ownProperties; // 0x28
	
		// Properties
		internal IDictionary InternalDictionary { get; } // 0x0083DCDC-0x0083DD5C 
		public string[] MethodKeys { set; } // 0x00841B3C-0x00841B44
		public object this[object key] { get => default; set {} } // 0x00845F24-0x008460EC 0x008460EC-0x008460F0
		public ICollection Keys { get; } // 0x008462E0-0x0084672C 
		public ICollection Values { get; } // 0x0084672C-0x00846B60 
		public int Count { get; } // 0x00846B60-0x00846C48 
		public bool IsSynchronized { get; } // 0x00846C48-0x00846C50 
		public object SyncRoot { get; } // 0x00846C50-0x00846C54 
	
		// Nested types
		private class DictionaryEnumerator : IDictionaryEnumerator // TypeDefIndex: 1161
		{
			// Fields
			private MessageDictionary _methodDictionary; // 0x10
			private IDictionaryEnumerator _hashtableEnum; // 0x18
			private int _posMethod; // 0x20
	
			// Properties
			public object Current { get; } // 0x00846F0C-0x00846F78 
			public DictionaryEntry Entry { get; } // 0x00846F78-0x0084715C 
			public object Key { get; } // 0x00847454-0x00847480 
			public object Value { get; } // 0x00847480-0x008474AC 
	
			// Constructors
			public DictionaryEnumerator(MessageDictionary methodDictionary); // 0x00846D84-0x00846EAC
	
			// Methods
			public bool MoveNext(); // 0x0084715C-0x00847394
			public void Reset(); // 0x00847394-0x00847454
		}
	
		// Constructors
		public MessageDictionary(IMethodMessage message); // 0x00841B10-0x00841B3C
	
		// Methods
		internal bool HasUserData(); // 0x0083DBD8-0x0083DCDC
		protected virtual IDictionary AllocInternalProperties(); // 0x00845E2C-0x00845E94
		public IDictionary GetInternalProperties(); // 0x008409CC-0x00840A04
		private bool IsOverridenKey(string key); // 0x00845E94-0x00845F24
		protected virtual object GetMethodProperty(string key); // 0x0084224C-0x00842998
		protected virtual void SetMethodProperty(string key, object value); // 0x00842CAC-0x00843000
		public void Add(object key, object value); // 0x008460F0-0x008462E0
		public void CopyTo(Array array, int index); // 0x00846C54-0x00846D24
		IEnumerator IEnumerable.GetEnumerator(); // 0x00846D24-0x00846D84
		public IDictionaryEnumerator GetEnumerator(); // 0x00846EAC-0x00846F0C
	}

	[Serializable]
	[CLSCompliant] // 0x003988F0-0x00398930
	[ComVisible] // 0x003988F0-0x00398930
	public class MethodResponse : IMethodReturnMessage, ISerializable, IInternalMessage, ISerializationRootObject // TypeDefIndex: 1162
	{
		// Fields
		private string _methodName; // 0x10
		private string _uri; // 0x18
		private string _typeName; // 0x20
		private MethodBase _methodBase; // 0x28
		private object _returnValue; // 0x30
		private Exception _exception; // 0x38
		private Type[] _methodSignature; // 0x40
		private ArgInfo _inArgInfo; // 0x48
		private object[] _args; // 0x50
		private object[] _outArgs; // 0x58
		private IMethodCallMessage _callMsg; // 0x60
		private LogicalCallContext _callContext; // 0x68
		private Identity _targetIdentity; // 0x70
		protected IDictionary ExternalProperties; // 0x78
		protected IDictionary InternalProperties; // 0x80
	
		// Properties
		public int ArgCount { get; } // 0x00849780-0x00849798 
		public object[] Args { get; } // 0x00849798-0x008497A0 
		public Exception Exception { get; } // 0x008497A0-0x008497A8 
		public LogicalCallContext LogicalCallContext { get; } // 0x008497A8-0x00849814 
		public MethodBase MethodBase { get; } // 0x00849814-0x00849928 
		public string MethodName { get; } // 0x00849928-0x008499F0 
		public object MethodSignature { get; } // 0x00849AB8-0x00849BFC 
		public object[] OutArgs { get; } // 0x00849BFC-0x00849CB8 
		public virtual IDictionary Properties { get; } // 0x008436EC-0x00843788 
		public object ReturnValue { get; } // 0x00849DE8-0x00849DF0 
		public string TypeName { get; } // 0x008499F0-0x00849AB8 
		public string Uri { get; set; } // 0x00849DF0-0x00849EB8 0x00849EB8-0x00849EC0
		string IInternalMessage.Uri { get; set; } // 0x00849EC0-0x00849EC4 0x00849EC4-0x00849ECC
		Identity IInternalMessage.TargetIdentity { get; set; } // 0x0084A3D8-0x0084A3E0 0x0084A3E0-0x0084A3E8
	
		// Constructors
		internal MethodResponse(Exception e, IMethodCallMessage msg); // 0x00843508-0x00843610
		internal MethodResponse(object returnValue, object[] outArgs, LogicalCallContext callCtx, IMethodCallMessage msg); // 0x00843414-0x00843504
		internal MethodResponse(IMethodCallMessage msg, CADMethodReturnMessage retmsg); // 0x00848EF8-0x008491E0
		internal MethodResponse(SerializationInfo info, StreamingContext context); // 0x00843614-0x008436E8
	
		// Methods
		internal void InitMethodProperty(string key, object value); // 0x008491E0-0x00849780
		public object GetArg(int argNum); // 0x00849ECC-0x00849F1C
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00849F1C-0x0084A3D8
	}

	internal class MethodReturnDictionary : MessageDictionary // TypeDefIndex: 1163
	{
		// Fields
		public static string[] InternalReturnKeys; // 0x00
		public static string[] InternalExceptionKeys; // 0x08
	
		// Constructors
		public MethodReturnDictionary(IMethodReturnMessage message); // 0x00849CB8-0x00849DE8
		static MethodReturnDictionary(); // 0x0084A3E8-0x0084A760
	}

	[Serializable]
	internal class MonoMethodMessage : IMethodCallMessage, IMethodReturnMessage, IInternalMessage // TypeDefIndex: 1164
	{
		// Fields
		private MonoMethod method; // 0x10
		private object[] args; // 0x18
		private string[] names; // 0x20
		private byte[] arg_types; // 0x28
		public LogicalCallContext ctx; // 0x30
		public object rval; // 0x38
		public Exception exc; // 0x40
		private AsyncResult asyncResult; // 0x48
		private CallType call_type; // 0x50
		private string uri; // 0x58
		private MCMDictionary properties; // 0x60
		private Type[] methodSignature; // 0x68
		private Identity identity; // 0x70
		internal static string CallContextKey; // 0x00
		internal static string UriKey; // 0x08
	
		// Properties
		public IDictionary Properties { get; } // 0x0084AC70-0x0084ACDC 
		public int ArgCount { get; } // 0x0084ACDC-0x0084AD20 
		public object[] Args { get; } // 0x0084ADA8-0x0084ADB0 
		public LogicalCallContext LogicalCallContext { get; set; } // 0x0084ADB0-0x0084ADB8 0x0084ADB8-0x0084ADC0
		public MethodBase MethodBase { get; } // 0x0084ADC0-0x0084ADC8 
		public string MethodName { get; } // 0x0084ADC8-0x0084AE58 
		public object MethodSignature { get; } // 0x0084AE58-0x0084AFC8 
		public string TypeName { get; } // 0x0084AFC8-0x0084B078 
		public string Uri { get; set; } // 0x0084B078-0x0084B080 0x0084B080-0x0084B088
		public Exception Exception { get; } // 0x0084B0D8-0x0084B0E0 
		public int OutArgCount { get; } // 0x0084B0E0-0x0084B16C 
		public object[] OutArgs { get; } // 0x0084B16C-0x0084B2F0 
		public object ReturnValue { get; } // 0x0084B2F0-0x0084B2F8 
		Identity IInternalMessage.TargetIdentity { get; set; } // 0x0084B2F8-0x0084B300 0x0084B300-0x0084B308
		public AsyncResult AsyncResult { get; } // 0x0084B308-0x0084B310 
		internal CallType CallType { get; } // 0x0084AD20-0x0084ADA8 
	
		// Constructors
		internal MonoMethodMessage(MethodInfo minfo, object[] in_args, object[] out_args); // 0x0084AAB4-0x0084AC70
		static MonoMethodMessage(); // 0x0084B45C-0x0084B4D0
	
		// Methods
		internal void InitMessage(MonoMethod method, object[] out_args); // 0x0084A760-0x0084AAB4
		public object GetArg(int arg_num); // 0x0084B088-0x0084B0D8
		public bool NeedsOutProcessing(out int outCount); // 0x0084B3AC-0x0084B45C
	}

	internal enum CallType // TypeDefIndex: 1165
	{
		Sync = 0,
		BeginInvoke = 1,
		EndInvoke = 2,
		OneWay = 3
	}

	[AttributeUsage] // 0x00398930-0x00398970
	[ComVisible] // 0x00398930-0x00398970
	public class OneWayAttribute : Attribute // TypeDefIndex: 1166
	{
	}

	internal class RemotingSurrogate : ISerializationSurrogate // TypeDefIndex: 1167
	{
		// Constructors
		public RemotingSurrogate(); // 0x0084B9DC-0x0084B9E4
	
		// Methods
		public virtual void GetObjectData(object obj, SerializationInfo si, StreamingContext sc); // 0x0084B710-0x0084B7B0
		public virtual object SetObjectData(object obj, SerializationInfo si, StreamingContext sc, ISurrogateSelector selector); // 0x0084B974-0x0084B9DC
	}

	internal class ObjRefSurrogate : ISerializationSurrogate // TypeDefIndex: 1168
	{
		// Constructors
		public ObjRefSurrogate(); // 0x0084B708-0x0084B710
	
		// Methods
		public virtual void GetObjectData(object obj, SerializationInfo si, StreamingContext sc); // 0x0084B4D0-0x0084B694
		public virtual object SetObjectData(object obj, SerializationInfo si, StreamingContext sc, ISurrogateSelector selector); // 0x0084B694-0x0084B708
	}

	[ComVisible] // 0x00398970-0x00398984
	public class RemotingSurrogateSelector : ISurrogateSelector // TypeDefIndex: 1169
	{
		// Fields
		private static Type s_cachedTypeObjRef; // 0x00
		private static ObjRefSurrogate _objRefSurrogate; // 0x08
		private static RemotingSurrogate _objRemotingSurrogate; // 0x10
		private ISurrogateSelector _next; // 0x10
	
		// Constructors
		public RemotingSurrogateSelector(); // 0x0084B9E4-0x0084B9EC
		static RemotingSurrogateSelector(); // 0x0084BBC0-0x0084BC98
	
		// Methods
		public virtual ISerializationSurrogate GetSurrogate(Type type, StreamingContext context, out ISurrogateSelector ssout); // 0x0084B9EC-0x0084BBC0
	}

	[ComVisible] // 0x00398984-0x00398998
	public class ReturnMessage : IMethodReturnMessage, IInternalMessage // TypeDefIndex: 1170
	{
		// Fields
		private object[] _outArgs; // 0x10
		private object[] _args; // 0x18
		private LogicalCallContext _callCtx; // 0x20
		private object _returnValue; // 0x28
		private string _uri; // 0x30
		private Exception _exception; // 0x38
		private MethodBase _methodBase; // 0x40
		private string _methodName; // 0x48
		private Type[] _methodSignature; // 0x50
		private string _typeName; // 0x58
		private MethodReturnDictionary _properties; // 0x60
		private Identity _targetIdentity; // 0x68
		private ArgInfo _inArgInfo; // 0x70
	
		// Properties
		public int ArgCount { get; } // 0x0084BE14-0x0084BE40 
		public object[] Args { get; } // 0x0084BE40-0x0084BE48 
		public LogicalCallContext LogicalCallContext { get; } // 0x0084BE48-0x0084BEB4 
		public MethodBase MethodBase { get; } // 0x0084BEB4-0x0084BEBC 
		public string MethodName { get; } // 0x0084BEBC-0x0084BF20 
		public object MethodSignature { get; } // 0x0084BF20-0x0084C0A8 
		public virtual IDictionary Properties { get; } // 0x0084C0A8-0x0084C114 
		public string TypeName { get; } // 0x0084C114-0x0084C198 
		public string Uri { get; set; } // 0x0084C198-0x0084C1A0 0x0084C1A0-0x0084C1A8
		string IInternalMessage.Uri { get; set; } // 0x0084C1A8-0x0084C1B0 0x0084C1B0-0x0084C1B8
		public Exception Exception { get; } // 0x0084C20C-0x0084C214 
		public object[] OutArgs { get; } // 0x0084C214-0x0084C2C4 
		public virtual object ReturnValue { get; } // 0x0084C2C4-0x0084C2CC 
		Identity IInternalMessage.TargetIdentity { get; set; } // 0x0084C2CC-0x0084C2D4 0x0084C2D4-0x0084C2DC
	
		// Constructors
		public ReturnMessage(object ret, object[] outArgs, int outArgsCount, LogicalCallContext callCtx, IMethodCallMessage mcm); // 0x0084BC98-0x0084BE14
		public ReturnMessage(Exception e, IMethodCallMessage mcm); // 0x00835F08-0x0083605C
	
		// Methods
		public object GetArg(int argNum); // 0x0084C1B8-0x0084C20C
	}

	internal class ServerContextTerminatorSink : IMessageSink // TypeDefIndex: 1171
	{
		// Constructors
		public ServerContextTerminatorSink(); // 0x0084C67C-0x0084C684
	
		// Methods
		public IMessage SyncProcessMessage(IMessage msg); // 0x0084C2DC-0x0084C4E8
		public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x0084C4E8-0x0084C67C
	}

	internal class ServerObjectTerminatorSink : IMessageSink // TypeDefIndex: 1172
	{
		// Fields
		private IMessageSink _nextSink; // 0x10
	
		// Constructors
		public ServerObjectTerminatorSink(IMessageSink nextSink); // 0x0084C810-0x0084C83C
	
		// Methods
		public IMessage SyncProcessMessage(IMessage msg); // 0x0084C83C-0x0084CA10
		public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x0084CA10-0x0084CC3C
	}

	internal class ServerObjectReplySink : IMessageSink // TypeDefIndex: 1173
	{
		// Fields
		private IMessageSink _replySink; // 0x10
		private ServerIdentity _identity; // 0x18
	
		// Constructors
		public ServerObjectReplySink(ServerIdentity identity, IMessageSink replySink); // 0x0084C684-0x0084C6BC
	
		// Methods
		public IMessage SyncProcessMessage(IMessage msg); // 0x0084C6BC-0x0084C7A8
		public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x0084C7A8-0x0084C810
	}

	internal class StackBuilderSink : IMessageSink // TypeDefIndex: 1174
	{
		// Fields
		private MarshalByRefObject _target; // 0x10
		private RealProxy _rp; // 0x18
	
		// Constructors
		public StackBuilderSink(MarshalByRefObject obj, bool forceInternalExecute); // 0x0084CC3C-0x0084CCC4
	
		// Methods
		public IMessage SyncProcessMessage(IMessage msg); // 0x0084CCC4-0x0084CDE4
		public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x0084DF28-0x0084E06C
		private void ExecuteAsyncMessage(object ob); // 0x0084E06C-0x0084E3A8
		private void CheckParameters(IMessage msg); // 0x0084CDE4-0x0084D2E8
		[CompilerGenerated] // 0x0039F2F0-0x0039F300
		private void <AsyncProcessMessage>b__4_0(object data); // 0x0084E3A8-0x0084E478
	}
}

namespace System.Runtime.ExceptionServices
{
	[AttributeUsage] // 0x00398998-0x003989E4
	public sealed class HandleProcessCorruptedStateExceptionsAttribute : Attribute // TypeDefIndex: 1175
	{
		// Constructors
		public HandleProcessCorruptedStateExceptionsAttribute(); // 0x005031A4-0x005031AC
	}

	public class FirstChanceExceptionEventArgs : EventArgs // TypeDefIndex: 1176
	{
	}

	public sealed class ExceptionDispatchInfo // TypeDefIndex: 1177
	{
		// Fields
		private Exception m_Exception; // 0x10
		private object m_stackTrace; // 0x18
	
		// Properties
		internal object BinaryStackTraceArray { get; } // 0x00503194-0x0050319C 
		public Exception SourceException { get; } // 0x0050319C-0x005031A4 
	
		// Constructors
		private ExceptionDispatchInfo(Exception exception); // 0x00503048-0x00503194
	
		// Methods
		public static ExceptionDispatchInfo Capture(Exception source); // 0x005014E0-0x005015A8
		public void Throw(); // 0x00501770-0x005017E0
	}
}

namespace System.Runtime.ConstrainedExecution
{
	[ComVisible] // 0x003989E4-0x003989F8
	public abstract class CriticalFinalizerObject // TypeDefIndex: 1178
	{
		// Constructors
		[ReliabilityContract] // 0x0039F300-0x0039F318
		protected CriticalFinalizerObject(); // 0x00503000-0x00503008
	
		// Methods
		[ReliabilityContract] // 0x0039F318-0x0039F330
		~CriticalFinalizerObject(); // 0x00503008-0x00503010
	}

	[Serializable]
	public enum Consistency // TypeDefIndex: 1179
	{
		MayCorruptProcess = 0,
		MayCorruptAppDomain = 1,
		MayCorruptInstance = 2,
		WillNotCorruptState = 3
	}

	[Serializable]
	public enum Cer // TypeDefIndex: 1180
	{
		None = 0,
		MayFail = 1,
		Success = 2
	}

	[AttributeUsage] // 0x003989F8-0x00398A34
	public sealed class ReliabilityContractAttribute : Attribute // TypeDefIndex: 1181
	{
		// Fields
		private Consistency _consistency; // 0x10
		private Cer _cer; // 0x14
	
		// Constructors
		public ReliabilityContractAttribute(Consistency consistencyGuarantee, Cer cer); // 0x00503010-0x00503048
	}
}

namespace System.Runtime.CompilerServices
{
	[DefaultMember] // 0x00398A34-0x00398A6C
	public interface ITuple // TypeDefIndex: 1182
	{
	}

	[AttributeUsage] // 0x00398A6C-0x00398AAC
	[CLSCompliant] // 0x00398A6C-0x00398AAC
	public sealed class TupleElementNamesAttribute : Attribute // TypeDefIndex: 1183
	{
		// Fields
		private readonly string[] _transformNames; // 0x10
	
		// Constructors
		public TupleElementNamesAttribute(string[] transformNames); // 0x00502DF8-0x00502E9C
	}

	public struct AsyncTaskMethodBuilder // TypeDefIndex: 1184
	{
		// Fields
		private static readonly Task<VoidTaskResult> s_cachedCompleted; // 0x00
		private AsyncTaskMethodBuilder<VoidTaskResult> m_builder; // 0x00
	
		// Properties
		public Task Task { get; } // 0x00501F54-0x00501FD8 
	
		// Constructors
		static AsyncTaskMethodBuilder(); // 0x00502048-0x005020C4
	
		// Methods
		public static AsyncTaskMethodBuilder Create(); // 0x00501E90-0x00501EFC
		[DebuggerStepThrough] // 0x0039F330-0x0039F340
		public void Start<TStateMachine>(ref TStateMachine stateMachine)
			where TStateMachine : IAsyncStateMachine;
		public void SetStateMachine(IAsyncStateMachine stateMachine); // 0x00501EFC-0x00501F54
		public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)
			where TAwaiter : INotifyCompletion
			where TStateMachine : IAsyncStateMachine;
		public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)
			where TAwaiter : ICriticalNotifyCompletion
			where TStateMachine : IAsyncStateMachine;
		public void SetResult(); // 0x00501FD8-0x00502040
		public void SetException(Exception exception); // 0x00502040-0x00502048
	}

	public struct AsyncTaskMethodBuilder<TResult> // TypeDefIndex: 1185
	{
		// Fields
		internal static readonly Task<TResult> s_defaultResultTask;
		private AsyncMethodBuilderCore m_coreState;
		private Task<TResult> m_task;
	
		// Properties
		public Task<TResult> Task { get; }
	
		// Constructors
		static AsyncTaskMethodBuilder();
	
		// Methods
		public static AsyncTaskMethodBuilder<TResult> Create();
		[DebuggerStepThrough] // 0x0039F340-0x0039F350
		public void Start<TStateMachine>(ref TStateMachine stateMachine)
			where TStateMachine : IAsyncStateMachine;
		public void SetStateMachine(IAsyncStateMachine stateMachine);
		public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)
			where TAwaiter : INotifyCompletion
			where TStateMachine : IAsyncStateMachine;
		public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)
			where TAwaiter : ICriticalNotifyCompletion
			where TStateMachine : IAsyncStateMachine;
		public void SetResult(TResult result);
		internal void SetResult(Task<TResult> completedTask);
		public void SetException(Exception exception);
		private Task<TResult> GetTaskForResult(TResult result);
	}

	internal static class AsyncTaskCache // TypeDefIndex: 1186
	{
		// Fields
		internal static readonly Task<bool> TrueTask; // 0x00
		internal static readonly Task<bool> FalseTask; // 0x08
		internal static readonly Task<int>[] Int32Tasks; // 0x10
	
		// Constructors
		static AsyncTaskCache(); // 0x00501DB8-0x00501E90
	
		// Methods
		private static Task<int>[] CreateInt32Tasks(); // 0x00501C9C-0x00501DB8
		internal static Task<TResult> CreateCacheableTask<TResult>(TResult result);
	}

	internal struct AsyncMethodBuilderCore // TypeDefIndex: 1187
	{
		// Fields
		internal IAsyncStateMachine m_stateMachine; // 0x00
		internal Action m_defaultContextAction; // 0x08
	
		// Nested types
		internal sealed class MoveNextRunner // TypeDefIndex: 1188
		{
			// Fields
			private readonly ExecutionContext m_context; // 0x10
			internal IAsyncStateMachine m_stateMachine; // 0x18
			private static ContextCallback s_invokeMoveNext; // 0x00
	
			// Constructors
			internal MoveNextRunner(ExecutionContext context, IAsyncStateMachine stateMachine); // 0x00500E30-0x00500F54
	
			// Methods
			internal void Run(); // 0x005018E4-0x00501AB4
			private static void InvokeMoveNext(object stateMachine); // 0x00501AB4-0x00501C44
		}
	
		private class ContinuationWrapper // TypeDefIndex: 1189
		{
			// Fields
			internal readonly Action m_continuation; // 0x10
			private readonly Action m_invokeAction; // 0x18
			internal readonly Task m_innerTask; // 0x20
	
			// Constructors
			internal ContinuationWrapper(Action continuation, Action invokeAction, Task innerTask); // 0x005015A8-0x005015F8
	
			// Methods
			internal void Invoke(); // 0x005018B4-0x005018E4
		}
	
		[CompilerGenerated] // 0x00398AAC-0x00398ABC
		private sealed class <>c__DisplayClass4_0 // TypeDefIndex: 1190
		{
			// Fields
			public Task innerTask; // 0x10
			public Action continuation; // 0x18
	
			// Constructors
			public <>c__DisplayClass4_0(); // 0x00500F5C-0x00500F64
	
			// Methods
			internal void <OutputAsyncCausalityEvents>b__0(); // 0x00501840-0x005018B4
		}
	
		[Serializable]
		[CompilerGenerated] // 0x00398ABC-0x00398ACC
		private sealed class <>c // TypeDefIndex: 1191
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static SendOrPostCallback <>9__6_0; // 0x08
			public static WaitCallback <>9__6_1; // 0x10
	
			// Constructors
			static <>c(); // 0x005016A4-0x00501708
			public <>c(); // 0x00501708-0x00501710
	
			// Methods
			internal void <ThrowAsync>b__6_0(object state); // 0x00501710-0x00501770
			internal void <ThrowAsync>b__6_1(object state); // 0x005017E0-0x00501840
		}
	
		// Methods
		public void SetStateMachine(IAsyncStateMachine stateMachine); // 0x00500C80-0x00500E30
		internal Action GetCompletionAction(Task taskForTracing, ref MoveNextRunner runnerToInitialize); // 0x00500F54-0x00500F5C
		private Action OutputAsyncCausalityEvents(Task innerTask, Action continuation); // 0x00501008-0x005011D4
		internal void PostBoxInitialization(IAsyncStateMachine stateMachine, MoveNextRunner runner, Task builtTask); // 0x005011D4-0x005011DC
		internal static void ThrowAsync(Exception exception, SynchronizationContext targetContext); // 0x005011DC-0x005014E0
		internal static Action CreateContinuationWrapper(Action continuation, Action invokeAction, Task innerTask = null); // 0x00500F64-0x00501008
		internal static Task TryGetContinuationTask(Action action); // 0x005015F8-0x005016A4
	}

	[Serializable]
	[AttributeUsage] // 0x00398ACC-0x00398B18
	public sealed class AsyncStateMachineAttribute : StateMachineAttribute // TypeDefIndex: 1192
	{
		// Constructors
		public AsyncStateMachineAttribute(Type stateMachineType); // 0x00501C44-0x00501C70
	}

	public interface IAsyncStateMachine // TypeDefIndex: 1193
	{
		// Methods
		void MoveNext();
		void SetStateMachine(IAsyncStateMachine stateMachine);
	}

	public interface INotifyCompletion // TypeDefIndex: 1194
	{
		// Methods
		void OnCompleted(Action continuation);
	}

	public interface ICriticalNotifyCompletion : INotifyCompletion // TypeDefIndex: 1195
	{
		// Methods
		void UnsafeOnCompleted(Action continuation);
	}

	[Serializable]
	[AttributeUsage] // 0x00398B18-0x00398B64
	public sealed class IteratorStateMachineAttribute : StateMachineAttribute // TypeDefIndex: 1196
	{
		// Constructors
		public IteratorStateMachineAttribute(Type stateMachineType); // 0x00502774-0x005027A0
	}

	[Serializable]
	[AttributeUsage] // 0x00398B64-0x00398BB0
	public sealed class RuntimeCompatibilityAttribute : Attribute // TypeDefIndex: 1197
	{
		// Fields
		private bool m_wrapNonExceptionThrows; // 0x10
	
		// Properties
		public bool WrapNonExceptionThrows { set; } // 0x005027A8-0x005027B4
	
		// Constructors
		public RuntimeCompatibilityAttribute(); // 0x005027A0-0x005027A8
	}

	[Serializable]
	public sealed class RuntimeWrappedException : Exception // TypeDefIndex: 1198
	{
		// Fields
		private object m_wrappedException; // 0x88
	
		// Constructors
		private RuntimeWrappedException(object thrownObject); // 0x00502884-0x00502934
		internal RuntimeWrappedException(SerializationInfo info, StreamingContext context); // 0x00502A48-0x00502B44
	
		// Methods
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00502934-0x00502A48
	}

	[Serializable]
	[AttributeUsage] // 0x00398BB0-0x00398BFC
	public class StateMachineAttribute : Attribute // TypeDefIndex: 1199
	{
		// Fields
		[CompilerGenerated] // 0x0039C85C-0x0039C86C
		private Type <StateMachineType>k__BackingField; // 0x10
	
		// Properties
		private Type StateMachineType { [CompilerGenerated] /* 0x0039F350-0x0039F360 */ set; } // 0x00502B44-0x00502B4C
	
		// Constructors
		public StateMachineAttribute(Type stateMachineType); // 0x00501C70-0x00501C9C
	}

	public struct TaskAwaiter : ICriticalNotifyCompletion // TypeDefIndex: 1200
	{
		// Fields
		private readonly Task m_task; // 0x00
	
		// Constructors
		internal TaskAwaiter(Task task); // 0x00502BA8-0x00502BB0
	
		// Methods
		public void OnCompleted(Action continuation); // 0x00502BB0-0x00502BC0
		public void UnsafeOnCompleted(Action continuation); // 0x00502BC0-0x00502BD8
		public void GetResult(); // 0x00502BD8-0x00502BE0
		internal static void ValidateEnd(Task task); // 0x0050236C-0x005023B0
		private static void HandleNonSuccessAndDebuggerNotification(Task task); // 0x00502BE0-0x00502C84
		private static void ThrowForNonSuccess(Task task); // 0x00502C84-0x00502DF8
		internal static void OnCompletedInternal(Task task, Action continuation, bool continueOnCapturedContext, bool flowExecutionContext); // 0x00502250-0x00502328
	}

	public struct TaskAwaiter<TResult> : ICriticalNotifyCompletion // TypeDefIndex: 1201
	{
		// Fields
		private readonly Task<TResult> m_task;
	
		// Constructors
		internal TaskAwaiter(Task<TResult> task);
	
		// Methods
		public void OnCompleted(Action continuation);
		public void UnsafeOnCompleted(Action continuation);
		public TResult GetResult();
	}

	public struct ConfiguredTaskAwaitable // TypeDefIndex: 1202
	{
		// Fields
		private readonly ConfiguredTaskAwaiter m_configuredTaskAwaiter; // 0x00
	
		// Nested types
		public struct ConfiguredTaskAwaiter : ICriticalNotifyCompletion // TypeDefIndex: 1203
		{
			// Fields
			private readonly Task m_task; // 0x00
			private readonly bool m_continueOnCapturedContext; // 0x08
	
			// Properties
			public bool IsCompleted { get; } // 0x00502234-0x00502250 
	
			// Constructors
			internal ConfiguredTaskAwaiter(Task task, bool continueOnCapturedContext); // 0x005021F4-0x00502234
	
			// Methods
			public void OnCompleted(Action continuation); // 0x00502328-0x00502350
			public void UnsafeOnCompleted(Action continuation); // 0x00502350-0x0050236C
			public void GetResult(); // 0x005023B0-0x005023B8
		}
	
		// Constructors
		internal ConfiguredTaskAwaitable(Task task, bool continueOnCapturedContext); // 0x00502184-0x0050219C
	
		// Methods
		public ConfiguredTaskAwaiter GetAwaiter(); // 0x0050219C-0x005021F4
	}

	public struct ConfiguredTaskAwaitable<TResult> // TypeDefIndex: 1204
	{
		// Fields
		private readonly ConfiguredTaskAwaiter m_configuredTaskAwaiter;
	
		// Nested types
		public struct ConfiguredTaskAwaiter : ICriticalNotifyCompletion // TypeDefIndex: 1205
		{
			// Fields
			private readonly Task<TResult> m_task;
			private readonly bool m_continueOnCapturedContext;
	
			// Properties
			public bool IsCompleted { get; }
	
			// Constructors
			internal ConfiguredTaskAwaiter(Task<TResult> task, bool continueOnCapturedContext);
	
			// Methods
			public void OnCompleted(Action continuation);
			public void UnsafeOnCompleted(Action continuation);
			public TResult GetResult();
		}
	
		// Constructors
		internal ConfiguredTaskAwaitable(Task<TResult> task, bool continueOnCapturedContext);
	
		// Methods
		public ConfiguredTaskAwaiter GetAwaiter();
	}

	[AttributeUsage] // 0x00398BFC-0x00398C48
	public sealed class TypeForwardedFromAttribute : Attribute // TypeDefIndex: 1206
	{
		// Fields
		private string assemblyFullName; // 0x10
	
		// Properties
		public string AssemblyFullName { get; } // 0x00502FF0-0x00502FF8 
	
		// Constructors
		public TypeForwardedFromAttribute(string assemblyFullName); // 0x00502F40-0x00502FF0
	}

	[Serializable]
	public enum LoadHint // TypeDefIndex: 1207
	{
		Default = 0,
		Always = 1,
		Sometimes = 2
	}

	[Serializable]
	[AttributeUsage] // 0x00398C48-0x00398C5C
	public sealed class DefaultDependencyAttribute : Attribute // TypeDefIndex: 1208
	{
		// Fields
		private LoadHint loadHint; // 0x10
	
		// Constructors
		public DefaultDependencyAttribute(LoadHint loadHintArgument); // 0x005024B0-0x005024DC
	}

	[Serializable]
	[AttributeUsage] // 0x00398C5C-0x00398C98
	public sealed class DependencyAttribute : Attribute // TypeDefIndex: 1209
	{
		// Fields
		private string dependentAssembly; // 0x10
		private LoadHint loadHint; // 0x18
	
		// Constructors
		public DependencyAttribute(string dependentAssemblyArgument, LoadHint loadHintArgument); // 0x005024DC-0x005026C8
	}

	[Serializable]
	[ComVisible] // 0x00398C98-0x00398CD4
	[Flags] // 0x00398C98-0x00398CD4
	public enum CompilationRelaxations // TypeDefIndex: 1210
	{
		NoStringInterning = 8
	}

	[Serializable]
	[AttributeUsage] // 0x00398CD4-0x00398D14
	[ComVisible] // 0x00398CD4-0x00398D14
	public class CompilationRelaxationsAttribute : Attribute // TypeDefIndex: 1211
	{
		// Fields
		private int m_relaxations; // 0x10
	
		// Properties
		public int CompilationRelaxations { get; } // 0x0050211C-0x00502124 
	
		// Constructors
		public CompilationRelaxationsAttribute(int relaxations); // 0x005020C4-0x005020F0
		public CompilationRelaxationsAttribute(CompilationRelaxations relaxations); // 0x005020F0-0x0050211C
	}

	[Serializable]
	[AttributeUsage] // 0x00398D14-0x00398D50
	public sealed class CompilerGeneratedAttribute : Attribute // TypeDefIndex: 1212
	{
		// Constructors
		public CompilerGeneratedAttribute(); // 0x00502124-0x00502184
	}

	[Serializable]
	[AttributeUsage] // 0x00398D50-0x00398DA4
	[ComVisible] // 0x00398D50-0x00398DA4
	public abstract class CustomConstantAttribute : Attribute // TypeDefIndex: 1213
	{
		// Properties
		public abstract object Value { get; }
	
		// Constructors
		protected CustomConstantAttribute(); // 0x005023B8-0x005023C0
	}

	[Serializable]
	[AttributeUsage] // 0x00398DA4-0x00398DF8
	[ComVisible] // 0x00398DA4-0x00398DF8
	public sealed class DateTimeConstantAttribute : CustomConstantAttribute // TypeDefIndex: 1214
	{
		// Fields
		private DateTime date; // 0x10
	
		// Properties
		public override object Value { get; } // 0x005023C0-0x00502424 
	}

	[Serializable]
	[AttributeUsage] // 0x00398DF8-0x00398E4C
	[ComVisible] // 0x00398DF8-0x00398E4C
	public sealed class DecimalConstantAttribute : Attribute // TypeDefIndex: 1215
	{
		// Fields
		private decimal dec; // 0x10
	
		// Properties
		public decimal Value { get; } // 0x005024A4-0x005024B0 
	
		// Constructors
		[CLSCompliant] // 0x0039F360-0x0039F374
		public DecimalConstantAttribute(byte scale, byte sign, uint hi, uint mid, uint low); // 0x00502424-0x005024A4
	}

	[AttributeUsage] // 0x00398E4C-0x00398E60
	public sealed class ExtensionAttribute : Attribute // TypeDefIndex: 1216
	{
		// Constructors
		public ExtensionAttribute(); // 0x005026C8-0x005026D0
	}

	[AttributeUsage] // 0x00398E60-0x00398E9C
	public sealed class FixedBufferAttribute : Attribute // TypeDefIndex: 1217
	{
		// Fields
		private Type elementType; // 0x10
		private int length; // 0x18
	
		// Properties
		public Type ElementType { get; } // 0x0050270C-0x00502714 
		public int Length { get; } // 0x00502714-0x0050271C 
	
		// Constructors
		public FixedBufferAttribute(Type elementType, int length); // 0x005026D0-0x0050270C
	}

	[AttributeUsage] // 0x00398E9C-0x00398EE8
	public sealed class InternalsVisibleToAttribute : Attribute // TypeDefIndex: 1218
	{
		// Fields
		private string _assemblyName; // 0x10
		private bool _allInternalsVisible; // 0x18
	
		// Properties
		public string AssemblyName { get; } // 0x00502758-0x00502760 
		public bool AllInternalsVisible { get; set; } // 0x00502760-0x00502768 0x00502768-0x00502774
	
		// Constructors
		public InternalsVisibleToAttribute(string assemblyName); // 0x00502724-0x00502758
	}

	[AttributeUsage] // 0x00398EE8-0x00398F48
	[FriendAccessAllowed] // 0x00398EE8-0x00398F48
	internal sealed class FriendAccessAllowedAttribute : Attribute // TypeDefIndex: 1219
	{
		// Constructors
		public FriendAccessAllowedAttribute(); // 0x0050271C-0x00502724
	}

	[ComVisible] // 0x00398F48-0x00398F5C
	public static class IsVolatile // TypeDefIndex: 1220
	{
	}

	[AttributeUsage] // 0x00398F5C-0x00398FA8
	internal sealed class TypeDependencyAttribute : Attribute // TypeDefIndex: 1221
	{
		// Fields
		private string typeName; // 0x10
	
		// Constructors
		public TypeDependencyAttribute(string typeName); // 0x00502E9C-0x00502F40
	}

	[Serializable]
	[AttributeUsage] // 0x00398FA8-0x00398FBC
	public sealed class UnsafeValueTypeAttribute : Attribute // TypeDefIndex: 1222
	{
		// Constructors
		public UnsafeValueTypeAttribute(); // 0x00502FF8-0x00503000
	}

	[Serializable]
	[AttributeUsage] // 0x00398FBC-0x00398FF8
	public sealed class StringFreezingAttribute : Attribute // TypeDefIndex: 1223
	{
		// Constructors
		public StringFreezingAttribute(); // 0x00502B4C-0x00502BA8
	}

	[FriendAccessAllowed] // 0x00398FF8-0x00399008
	internal static class JitHelpers // TypeDefIndex: 1224
	{
		// Methods
		internal static T UnsafeCast<T>(object o)
			where T : class;
		internal static int UnsafeEnumCast<T>(T val)
			where T : struct;
		internal static long UnsafeEnumCastLong<T>(T val)
			where T : struct;
	}

	internal struct Ephemeron // TypeDefIndex: 1225
	{
		// Fields
		internal object key; // 0x00
		internal object value; // 0x08
	}

	public sealed class ConditionalWeakTable<TKey, TValue> // TypeDefIndex: 1226
		where TKey : class
		where TValue : class
	{
		// Fields
		private Ephemeron[] data;
		private object _lock;
		private int size;
	
		// Constructors
		public ConditionalWeakTable();
	
		// Methods
		~ConditionalWeakTable();
		private void RehashWithoutResize();
		private void RecomputeSize();
		private void Rehash();
		public void Add(TKey key, TValue value);
		public bool Remove(TKey key);
		public bool TryGetValue(TKey key, out TValue value);
	}

	public static class RuntimeHelpers // TypeDefIndex: 1227
	{
		// Properties
		public static int OffsetToStringData { get; } // 0x00502874-0x00502878 
	
		// Methods
		private static void InitializeArray(Array array, IntPtr fldHandle); // 0x005027B4-0x005027B8
		public static void InitializeArray(Array array, RuntimeFieldHandle fldHandle); // 0x005027B8-0x00502874
		public static int GetHashCode(object o); // 0x00502878-0x00502880
		[MonoTODO] // 0x0039F374-0x0039F3C8
		[ReliabilityContract] // 0x0039F374-0x0039F3C8
		public static void PrepareConstrainedRegions(); // 0x00502880-0x00502884
		public static bool IsReferenceOrContainsReferences<T>();
	}
}

namespace System.Runtime.InteropServices
{
	[AttributeUsage] // 0x00399008-0x0039906C
	[ComVisible] // 0x00399008-0x0039906C
	public sealed class UnmanagedFunctionPointerAttribute : Attribute // TypeDefIndex: 1228
	{
		// Fields
		private CallingConvention m_callingConvention; // 0x10
		public CharSet CharSet; // 0x14
		public bool BestFitMapping; // 0x18
		public bool ThrowOnUnmappableChar; // 0x19
		public bool SetLastError; // 0x1A
	
		// Constructors
		public UnmanagedFunctionPointerAttribute(CallingConvention callingConvention); // 0x00504E14-0x00504E40
	}

	[AttributeUsage] // 0x0039906C-0x003990C0
	[ComVisible] // 0x0039906C-0x003990C0
	public sealed class DispIdAttribute : Attribute // TypeDefIndex: 1229
	{
		// Fields
		internal int _val; // 0x10
	
		// Constructors
		public DispIdAttribute(int dispId); // 0x00503580-0x005035AC
	}

	[Serializable]
	[ComVisible] // 0x003990C0-0x003990D4
	public enum ComInterfaceType // TypeDefIndex: 1230
	{
		InterfaceIsDual = 0,
		InterfaceIsIUnknown = 1,
		InterfaceIsIDispatch = 2,
		InterfaceIsIInspectable = 3
	}

	[AttributeUsage] // 0x003990D4-0x00399128
	[ComVisible] // 0x003990D4-0x00399128
	public sealed class InterfaceTypeAttribute : Attribute // TypeDefIndex: 1231
	{
		// Fields
		internal ComInterfaceType _val; // 0x10
	
		// Constructors
		public InterfaceTypeAttribute(ComInterfaceType interfaceType); // 0x00504054-0x00504080
	}

	[AttributeUsage] // 0x00399128-0x0039917C
	[ComVisible] // 0x00399128-0x0039917C
	public sealed class ComDefaultInterfaceAttribute : Attribute // TypeDefIndex: 1232
	{
		// Fields
		internal Type _val; // 0x10
	
		// Constructors
		public ComDefaultInterfaceAttribute(Type defaultInterface); // 0x005034F0-0x0050351C
	}

	[Serializable]
	[ComVisible] // 0x0039917C-0x00399190
	public enum ClassInterfaceType // TypeDefIndex: 1233
	{
		None = 0,
		AutoDispatch = 1,
		AutoDual = 2
	}

	[AttributeUsage] // 0x00399190-0x003991E4
	[ComVisible] // 0x00399190-0x003991E4
	public sealed class ClassInterfaceAttribute : Attribute // TypeDefIndex: 1234
	{
		// Fields
		internal ClassInterfaceType _val; // 0x10
	
		// Constructors
		public ClassInterfaceAttribute(ClassInterfaceType classInterfaceType); // 0x00503478-0x005034A4
	}

	[AttributeUsage] // 0x003991E4-0x00399238
	[ComVisible] // 0x003991E4-0x00399238
	public sealed class ComVisibleAttribute : Attribute // TypeDefIndex: 1235
	{
		// Fields
		internal bool _val; // 0x10
	
		// Constructors
		public ComVisibleAttribute(bool visibility); // 0x00503524-0x00503554
	}

	[AttributeUsage] // 0x00399238-0x0039928C
	[ComVisible] // 0x00399238-0x0039928C
	public sealed class TypeLibImportClassAttribute : Attribute // TypeDefIndex: 1236
	{
		// Fields
		internal string _importClassName; // 0x10
	
		// Constructors
		public TypeLibImportClassAttribute(Type importClass); // 0x00504D94-0x00504DDC
	}

	[Serializable]
	[ComVisible] // 0x0039928C-0x003992A0
	public enum VarEnum // TypeDefIndex: 1237
	{
		VT_EMPTY = 0,
		VT_NULL = 1,
		VT_I2 = 2,
		VT_I4 = 3,
		VT_R4 = 4,
		VT_R8 = 5,
		VT_CY = 6,
		VT_DATE = 7,
		VT_BSTR = 8,
		VT_DISPATCH = 9,
		VT_ERROR = 10,
		VT_BOOL = 11,
		VT_VARIANT = 12,
		VT_UNKNOWN = 13,
		VT_DECIMAL = 14,
		VT_I1 = 16,
		VT_UI1 = 17,
		VT_UI2 = 18,
		VT_UI4 = 19,
		VT_I8 = 20,
		VT_UI8 = 21,
		VT_INT = 22,
		VT_UINT = 23,
		VT_VOID = 24,
		VT_HRESULT = 25,
		VT_PTR = 26,
		VT_SAFEARRAY = 27,
		VT_CARRAY = 28,
		VT_USERDEFINED = 29,
		VT_LPSTR = 30,
		VT_LPWSTR = 31,
		VT_RECORD = 36,
		VT_FILETIME = 64,
		VT_BLOB = 65,
		VT_STREAM = 66,
		VT_STORAGE = 67,
		VT_STREAMED_OBJECT = 68,
		VT_STORED_OBJECT = 69,
		VT_BLOB_OBJECT = 70,
		VT_CF = 71,
		VT_CLSID = 72,
		VT_VECTOR = 4096,
		VT_ARRAY = 8192,
		VT_BYREF = 16384
	}

	[Serializable]
	[ComVisible] // 0x003992A0-0x003992B4
	public enum UnmanagedType // TypeDefIndex: 1238
	{
		Bool = 2,
		I1 = 3,
		U1 = 4,
		I2 = 5,
		U2 = 6,
		I4 = 7,
		U4 = 8,
		I8 = 9,
		U8 = 10,
		R4 = 11,
		R8 = 12,
		Currency = 15,
		BStr = 19,
		LPStr = 20,
		LPWStr = 21,
		LPTStr = 22,
		ByValTStr = 23,
		IUnknown = 25,
		IDispatch = 26,
		Struct = 27,
		Interface = 28,
		SafeArray = 29,
		ByValArray = 30,
		SysInt = 31,
		SysUInt = 32,
		VBByRefStr = 34,
		AnsiBStr = 35,
		TBStr = 36,
		VariantBool = 37,
		FunctionPtr = 38,
		AsAny = 40,
		LPArray = 42,
		LPStruct = 43,
		CustomMarshaler = 44,
		Error = 45,
		IInspectable = 46,
		HString = 47,
		LPUTF8Str = 48
	}

	[AttributeUsage] // 0x003992B4-0x00399308
	[ComVisible] // 0x003992B4-0x00399308
	public sealed class ComImportAttribute : Attribute // TypeDefIndex: 1239
	{
		// Constructors
		public ComImportAttribute(); // 0x0050351C-0x00503524
	}

	[AttributeUsage] // 0x00399308-0x0039935C
	[ComVisible] // 0x00399308-0x0039935C
	public sealed class GuidAttribute : Attribute // TypeDefIndex: 1240
	{
		// Fields
		internal string _val; // 0x10
	
		// Constructors
		public GuidAttribute(string guid); // 0x00504020-0x0050404C
	}

	[AttributeUsage] // 0x0039935C-0x003993B0
	[ComVisible] // 0x0039935C-0x003993B0
	public sealed class PreserveSigAttribute : Attribute // TypeDefIndex: 1241
	{
		// Constructors
		public PreserveSigAttribute(); // 0x005046FC-0x00504704
	}

	[AttributeUsage] // 0x003993B0-0x00399404
	[ComVisible] // 0x003993B0-0x00399404
	public sealed class InAttribute : Attribute // TypeDefIndex: 1242
	{
		// Constructors
		public InAttribute(); // 0x0050404C-0x00504054
	}

	[AttributeUsage] // 0x00399404-0x00399458
	[ComVisible] // 0x00399404-0x00399458
	public sealed class OutAttribute : Attribute // TypeDefIndex: 1243
	{
		// Constructors
		public OutAttribute(); // 0x005046F4-0x005046FC
	}

	[AttributeUsage] // 0x00399458-0x003994AC
	[ComVisible] // 0x00399458-0x003994AC
	public sealed class OptionalAttribute : Attribute // TypeDefIndex: 1244
	{
		// Constructors
		public OptionalAttribute(); // 0x005046EC-0x005046F4
	}

	[Flags] // 0x003994AC-0x003994BC
	public enum DllImportSearchPath // TypeDefIndex: 1245
	{
		LegacyBehavior = 0,
		AssemblyDirectory = 2,
		UseDllDirectoryForDependencies = 256,
		ApplicationDirectory = 512,
		UserDirectories = 1024,
		System32 = 2048,
		SafeDirectories = 4096
	}

	[AttributeUsage] // 0x003994BC-0x00399510
	[ComVisible] // 0x003994BC-0x00399510
	public sealed class DefaultDllImportSearchPathsAttribute : Attribute // TypeDefIndex: 1246
	{
		// Fields
		internal DllImportSearchPath _paths; // 0x10
	
		// Constructors
		public DefaultDllImportSearchPathsAttribute(DllImportSearchPath paths); // 0x00503554-0x00503580
	}

	[AttributeUsage] // 0x00399510-0x00399564
	[ComVisible] // 0x00399510-0x00399564
	public sealed class DllImportAttribute : Attribute // TypeDefIndex: 1247
	{
		// Fields
		internal string _val; // 0x10
		public string EntryPoint; // 0x18
		public CharSet CharSet; // 0x20
		public bool SetLastError; // 0x24
		public bool ExactSpelling; // 0x25
		public bool PreserveSig; // 0x26
		public CallingConvention CallingConvention; // 0x28
		public bool BestFitMapping; // 0x2C
		public bool ThrowOnUnmappableChar; // 0x2D
	
		// Properties
		public string Value { get; } // 0x00503964-0x0050396C 
	
		// Constructors
		internal DllImportAttribute(string dllName, string entryPoint, CharSet charSet, bool exactSpelling, bool setLastError, bool preserveSig, CallingConvention callingConvention, bool bestFitMapping, bool throwOnUnmappableChar); // 0x00503860-0x005038FC
		public DllImportAttribute(string dllName); // 0x00503938-0x00503964
	
		// Methods
		internal static Attribute GetCustomAttribute(RuntimeMethodInfo method); // 0x005035AC-0x00503860
		internal static bool IsDefined(RuntimeMethodInfo method); // 0x005038FC-0x00503938
	}

	[AttributeUsage] // 0x00399564-0x003995B8
	[ComVisible] // 0x00399564-0x003995B8
	public sealed class FieldOffsetAttribute : Attribute // TypeDefIndex: 1248
	{
		// Fields
		internal int _val; // 0x10
	
		// Constructors
		public FieldOffsetAttribute(int offset); // 0x00503BB0-0x00503C14
	}

	[AttributeUsage] // 0x003995B8-0x0039960C
	[ComVisible] // 0x003995B8-0x0039960C
	public sealed class TypeLibVersionAttribute : Attribute // TypeDefIndex: 1249
	{
		// Fields
		internal int _major; // 0x10
		internal int _minor; // 0x14
	
		// Constructors
		public TypeLibVersionAttribute(int major, int minor); // 0x00504DDC-0x00504E14
	}

	[AttributeUsage] // 0x0039960C-0x00399660
	[ComVisible] // 0x0039960C-0x00399660
	public sealed class ComCompatibleVersionAttribute : Attribute // TypeDefIndex: 1250
	{
		// Fields
		internal int _major; // 0x10
		internal int _minor; // 0x14
		internal int _build; // 0x18
		internal int _revision; // 0x1C
	
		// Constructors
		public ComCompatibleVersionAttribute(int major, int minor, int build, int revision); // 0x005034A4-0x005034F0
	}

	[AttributeUsage] // 0x00399660-0x003996B4
	[ComVisible] // 0x00399660-0x003996B4
	public sealed class BestFitMappingAttribute : Attribute // TypeDefIndex: 1251
	{
		// Fields
		internal bool _bestFitMapping; // 0x10
	
		// Constructors
		public BestFitMappingAttribute(bool BestFitMapping); // 0x005031AC-0x005031DC
	}

	[Serializable]
	[ComVisible] // 0x003996B4-0x003996C8
	public enum CallingConvention // TypeDefIndex: 1252
	{
		Winapi = 1,
		Cdecl = 2,
		StdCall = 3,
		ThisCall = 4,
		FastCall = 5
	}

	[Serializable]
	[ComVisible] // 0x003996C8-0x003996DC
	public enum CharSet // TypeDefIndex: 1253
	{
		None = 1,
		Ansi = 2,
		Unicode = 3,
		Auto = 4
	}

	[Serializable]
	[ComVisible] // 0x003996DC-0x003996F0
	public class COMException : ExternalException // TypeDefIndex: 1254
	{
		// Constructors
		public COMException(); // 0x005031DC-0x00503264
		protected COMException(SerializationInfo info, StreamingContext context); // 0x00503298-0x005032A0
	
		// Methods
		public override string ToString(); // 0x005032A8-0x00503478
	}

	[Serializable]
	[ComVisible] // 0x003996F0-0x00399704
	public sealed class ErrorWrapper // TypeDefIndex: 1255
	{
		// Fields
		private int m_ErrorCode; // 0x10
	}

	[Serializable]
	[ComVisible] // 0x00399704-0x00399718
	public class ExternalException : SystemException // TypeDefIndex: 1256
	{
		// Properties
		public virtual int ErrorCode { get; } // 0x005039E0-0x005039E8 
	
		// Constructors
		public ExternalException(); // 0x0050396C-0x005039E0
		public ExternalException(string message); // 0x00503264-0x00503298
		protected ExternalException(SerializationInfo info, StreamingContext context); // 0x005032A0-0x005032A8
	
		// Methods
		public override string ToString(); // 0x005039E8-0x00503BB0
	}

	[ComVisible] // 0x00399718-0x0039972C
	public interface ICustomMarshaler // TypeDefIndex: 1257
	{
		// Methods
		object MarshalNativeToManaged(IntPtr pNativeData);
		IntPtr MarshalManagedToNative(object ManagedObj);
		void CleanUpNativeData(IntPtr pNativeData);
		void CleanUpManagedData(object ManagedObj);
		int GetNativeDataSize();
	}

	[Serializable]
	[ComVisible] // 0x0039972C-0x00399740
	public class MarshalDirectiveException : SystemException // TypeDefIndex: 1258
	{
		// Constructors
		public MarshalDirectiveException(); // 0x0050463C-0x005046B0
		public MarshalDirectiveException(string message); // 0x005046B0-0x005046E4
		protected MarshalDirectiveException(SerializationInfo info, StreamingContext context); // 0x005046E4-0x005046EC
	}

	public abstract class SafeHandle : CriticalFinalizerObject, IDisposable // TypeDefIndex: 1259
	{
		// Fields
		protected IntPtr handle; // 0x10
		private int _state; // 0x18
		private bool _ownsHandle; // 0x1C
		private bool _fullyInitialized; // 0x1D
		private const int RefCount_Mask = 2147483644; // Metadata: 0x0020523F
		private const int RefCount_One = 4; // Metadata: 0x00205243
	
		// Properties
		public bool IsClosed { [ReliabilityContract] /* 0x0039F410-0x0039F428 */ get; } // 0x00504A70-0x00504A7C 
		public abstract bool IsInvalid { [ReliabilityContract] /* 0x0039F428-0x0039F440 */ get; }
	
		// Constructors
		[ReliabilityContract] // 0x0039F3C8-0x0039F3E0
		protected SafeHandle(IntPtr invalidHandleValue, bool ownsHandle); // 0x00504938-0x005049E0
	
		// Methods
		~SafeHandle(); // 0x005049E0-0x00504A60
		[ReliabilityContract] // 0x0039F3E0-0x0039F3F8
		protected void SetHandle(IntPtr handle); // 0x00504A60-0x00504A68
		[ReliabilityContract] // 0x0039F3F8-0x0039F410
		public IntPtr DangerousGetHandle(); // 0x00504A68-0x00504A70
		[ReliabilityContract] // 0x0039F440-0x0039F458
		public void Close(); // 0x00504A7C-0x00504A8C
		[ReliabilityContract] // 0x0039F458-0x0039F470
		public void Dispose(); // 0x00504A8C-0x00504A9C
		[ReliabilityContract] // 0x0039F470-0x0039F488
		protected virtual void Dispose(bool disposing); // 0x00504A9C-0x00504AB8
		[ReliabilityContract] // 0x0039F488-0x0039F4A0
		protected abstract bool ReleaseHandle();
		[ReliabilityContract] // 0x0039F4A0-0x0039F4B8
		public void SetHandleAsInvalid(); // 0x00504B80-0x00504C14
		[ReliabilityContract] // 0x0039F4B8-0x0039F4D0
		public void DangerousAddRef(ref bool success); // 0x005047BC-0x005048A8
		[ReliabilityContract] // 0x0039F4D0-0x0039F4E8
		public void DangerousRelease(); // 0x00504930-0x00504938
		private void InternalDispose(); // 0x00504AB8-0x00504B6C
		private void InternalFinalize(); // 0x00504B6C-0x00504B80
		private void DangerousReleaseInternal(bool dispose); // 0x00504C14-0x00504D94
	}

	[ComVisible] // 0x00399740-0x00399790
	[MonoTODO] // 0x00399740-0x00399790
	public struct GCHandle // TypeDefIndex: 1260
	{
		// Fields
		private int handle; // 0x00
	
		// Properties
		public bool IsAllocated { get; } // 0x00503C60-0x00503D10 
		public object Target { get; set; } // 0x00503D14-0x00503D50 0x00503D50-0x00503E8C
	
		// Constructors
		internal GCHandle(object value, GCHandleType type); // 0x00503C18-0x00503C60
	
		// Methods
		public IntPtr AddrOfPinnedObject(); // 0x00503E90-0x00503E98
		public static GCHandle Alloc(object value, GCHandleType type); // 0x00503E98-0x00503F6C
		public void Free(); // 0x00503F70-0x00503F78
		private static object GetTarget(int handle); // 0x00503D10-0x00503D14
		private static int GetTargetHandle(object obj, int handle, GCHandleType type); // 0x00503C14-0x00503C18
		private static void FreeHandle(int handle); // 0x00503F6C-0x00503F70
		private static IntPtr GetAddrOfPinnedObject(int handle); // 0x00503E8C-0x00503E90
		public static bool operator ==(GCHandle a, GCHandle b); // 0x00503F78-0x0050400C
		public override bool Equals(object o); // 0x0050400C-0x00504014
		public override int GetHashCode(); // 0x00504014-0x00504020
	}

	[Serializable]
	[ComVisible] // 0x00399790-0x003997A4
	public enum GCHandleType // TypeDefIndex: 1261
	{
		Weak = 0,
		WeakTrackResurrection = 1,
		Normal = 2,
		Pinned = 3
	}

	public static class Marshal // TypeDefIndex: 1262
	{
		// Fields
		public static readonly int SystemMaxDBCSCharSize; // 0x00
		public static readonly int SystemDefaultCharSize; // 0x04
	
		// Constructors
		static Marshal(); // 0x00504510-0x00504584
	
		// Methods
		[ReliabilityContract] // 0x0039F4E8-0x0039F500
		public static IntPtr AllocHGlobal(IntPtr cb); // 0x00504080-0x00504084
		[ReliabilityContract] // 0x0039F500-0x0039F518
		public static IntPtr AllocHGlobal(int cb); // 0x00504084-0x005040FC
		internal static void copy_to_unmanaged(Array source, int startIndex, IntPtr destination, int length); // 0x005040FC-0x00504100
		internal static void copy_from_unmanaged(IntPtr source, int startIndex, Array destination, int length); // 0x00504100-0x00504104
		public static void Copy(float[] source, int startIndex, IntPtr destination, int length); // 0x00504104-0x00504190
		public static void Copy(IntPtr source, byte[] destination, int startIndex, int length); // 0x00504190-0x0050421C
		public static void Copy(IntPtr source, char[] destination, int startIndex, int length); // 0x0050421C-0x005042A8
		public static void Copy(IntPtr source, int[] destination, int startIndex, int length); // 0x005042A8-0x00504334
		public static void Copy(IntPtr source, float[] destination, int startIndex, int length); // 0x00504334-0x005043C0
		public static void FreeBSTR(IntPtr ptr); // 0x005043C0-0x005043C4
		[ReliabilityContract] // 0x0039F518-0x0039F530
		public static void FreeHGlobal(IntPtr hglobal); // 0x005043C4-0x005043C8
		public static int GetHRForException(Exception e); // 0x005043C8-0x005043D4
		[ReliabilityContract] // 0x0039F530-0x0039F548
		public static int GetLastWin32Error(); // 0x005043D4-0x005043D8
		public static string PtrToStringAnsi(IntPtr ptr); // 0x005043D8-0x005043DC
		public static string PtrToStringUni(IntPtr ptr); // 0x005043DC-0x005043E0
		[ComVisible] // 0x0039F548-0x0039F55C
		public static object PtrToStructure(IntPtr ptr, Type structureType); // 0x005043E0-0x005043E4
		public static T PtrToStructure<T>(IntPtr ptr);
		[ReliabilityContract] // 0x0039F55C-0x0039F574
		public static int ReadInt32(IntPtr ptr); // 0x005043E4-0x00504430
		[ReliabilityContract] // 0x0039F574-0x0039F58C
		private static int ReleaseInternal(IntPtr pUnk); // 0x00504430-0x00504434
		[ReliabilityContract] // 0x0039F58C-0x0039F5A4
		public static int Release(IntPtr pUnk); // 0x00504434-0x005044FC
		public static int SizeOf(Type t); // 0x005044FC-0x00504500
		public static IntPtr StringToHGlobalUni(string s); // 0x00504500-0x00504504
		[ComVisible] // 0x0039F5A4-0x0039F5E8
		[ReliabilityContract] // 0x0039F5A4-0x0039F5E8
		public static void StructureToPtr(object structure, IntPtr ptr, bool fDeleteOld); // 0x00504504-0x0050450C
		public static void StructureToPtr<T>(T structure, IntPtr ptr, bool fDeleteOld);
		public static IntPtr UnsafeAddrOfPinnedArrayElement(Array arr, int index); // 0x0050450C-0x00504510
		public static IntPtr UnsafeAddrOfPinnedArrayElement<T>(T[] arr, int index);
	}

	[AttributeUsage] // 0x003997A4-0x003997F8
	[ComVisible] // 0x003997A4-0x003997F8
	public sealed class MarshalAsAttribute : Attribute // TypeDefIndex: 1263
	{
		// Fields
		public string MarshalCookie; // 0x10
		[ComVisible] // 0x0039C8BC-0x0039C8D0
		public string MarshalType; // 0x18
		[ComVisible] // 0x0039C8D0-0x0039C8E4
		public Type MarshalTypeRef; // 0x20
		public Type SafeArrayUserDefinedSubType; // 0x28
		private UnmanagedType utype; // 0x30
		public UnmanagedType ArraySubType; // 0x34
		public VarEnum SafeArraySubType; // 0x38
		public int SizeConst; // 0x3C
		public int IidParameterIndex; // 0x40
		public short SizeParamIndex; // 0x44
	
		// Methods
		internal MarshalAsAttribute Copy(); // 0x00504584-0x0050463C
	}

	public abstract class SafeBuffer : SafeHandleZeroOrMinusOneIsInvalid, IDisposable // TypeDefIndex: 1264
	{
		// Fields
		private bool inited; // 0x1E
	
		// Methods
		[CLSCompliant] // 0x0039F5E8-0x0039F62C
		[ReliabilityContract] // 0x0039F5E8-0x0039F62C
		public unsafe void AcquirePointer(ref byte* pointer); // 0x00504704-0x005047BC
		[ReliabilityContract] // 0x0039F62C-0x0039F644
		public void ReleasePointer(); // 0x005048A8-0x00504930
	}

	[CLSCompliant] // 0x003997F8-0x00399870
	[ComVisible] // 0x003997F8-0x00399870
	[Guid] // 0x003997F8-0x00399870
	[InterfaceType] // 0x003997F8-0x00399870
	public interface _Activator // TypeDefIndex: 1265
	{
	}

	[CLSCompliant] // 0x00399870-0x003998E8
	[ComVisible] // 0x00399870-0x003998E8
	[Guid] // 0x00399870-0x003998E8
	[InterfaceType] // 0x00399870-0x003998E8
	public interface _Assembly // TypeDefIndex: 1266
	{
	}

	[CLSCompliant] // 0x003998E8-0x00399960
	[ComVisible] // 0x003998E8-0x00399960
	[Guid] // 0x003998E8-0x00399960
	[InterfaceType] // 0x003998E8-0x00399960
	public interface _AssemblyName // TypeDefIndex: 1267
	{
	}

	[CLSCompliant] // 0x00399960-0x003999D8
	[ComVisible] // 0x00399960-0x003999D8
	[Guid] // 0x00399960-0x003999D8
	[InterfaceType] // 0x00399960-0x003999D8
	public interface _Attribute // TypeDefIndex: 1268
	{
	}

	[CLSCompliant] // 0x003999D8-0x00399A50
	[ComVisible] // 0x003999D8-0x00399A50
	[Guid] // 0x003999D8-0x00399A50
	[InterfaceType] // 0x003999D8-0x00399A50
	public interface _ConstructorInfo // TypeDefIndex: 1269
	{
	}

	[CLSCompliant] // 0x00399A50-0x00399AC8
	[ComVisible] // 0x00399A50-0x00399AC8
	[Guid] // 0x00399A50-0x00399AC8
	[InterfaceType] // 0x00399A50-0x00399AC8
	public interface _EventInfo // TypeDefIndex: 1270
	{
	}

	[CLSCompliant] // 0x00399AC8-0x00399B40
	[ComVisible] // 0x00399AC8-0x00399B40
	[Guid] // 0x00399AC8-0x00399B40
	[InterfaceType] // 0x00399AC8-0x00399B40
	public interface _Exception // TypeDefIndex: 1271
	{
	}

	[CLSCompliant] // 0x00399B40-0x00399BB8
	[ComVisible] // 0x00399B40-0x00399BB8
	[Guid] // 0x00399B40-0x00399BB8
	[InterfaceType] // 0x00399B40-0x00399BB8
	public interface _FieldInfo // TypeDefIndex: 1272
	{
	}

	[CLSCompliant] // 0x00399BB8-0x00399C30
	[ComVisible] // 0x00399BB8-0x00399C30
	[Guid] // 0x00399BB8-0x00399C30
	[InterfaceType] // 0x00399BB8-0x00399C30
	public interface _MemberInfo // TypeDefIndex: 1273
	{
	}

	[CLSCompliant] // 0x00399C30-0x00399CA8
	[ComVisible] // 0x00399C30-0x00399CA8
	[Guid] // 0x00399C30-0x00399CA8
	[InterfaceType] // 0x00399C30-0x00399CA8
	public interface _MethodBase // TypeDefIndex: 1274
	{
	}

	[CLSCompliant] // 0x00399CA8-0x00399D20
	[ComVisible] // 0x00399CA8-0x00399D20
	[Guid] // 0x00399CA8-0x00399D20
	[InterfaceType] // 0x00399CA8-0x00399D20
	public interface _MethodInfo // TypeDefIndex: 1275
	{
	}

	[CLSCompliant] // 0x00399D20-0x00399D98
	[ComVisible] // 0x00399D20-0x00399D98
	[Guid] // 0x00399D20-0x00399D98
	[InterfaceType] // 0x00399D20-0x00399D98
	public interface _Module // TypeDefIndex: 1276
	{
	}

	[CLSCompliant] // 0x00399D98-0x00399E10
	[ComVisible] // 0x00399D98-0x00399E10
	[Guid] // 0x00399D98-0x00399E10
	[InterfaceType] // 0x00399D98-0x00399E10
	public interface _ParameterInfo // TypeDefIndex: 1277
	{
	}

	[CLSCompliant] // 0x00399E10-0x00399E88
	[ComVisible] // 0x00399E10-0x00399E88
	[Guid] // 0x00399E10-0x00399E88
	[InterfaceType] // 0x00399E10-0x00399E88
	public interface _PropertyInfo // TypeDefIndex: 1278
	{
	}

	[CLSCompliant] // 0x00399E88-0x00399F00
	[ComVisible] // 0x00399E88-0x00399F00
	[Guid] // 0x00399E88-0x00399F00
	[InterfaceType] // 0x00399E88-0x00399F00
	public interface _SignatureHelper // TypeDefIndex: 1279
	{
	}

	[CLSCompliant] // 0x00399F00-0x00399F78
	[ComVisible] // 0x00399F00-0x00399F78
	[Guid] // 0x00399F00-0x00399F78
	[InterfaceType] // 0x00399F00-0x00399F78
	public interface _Thread // TypeDefIndex: 1280
	{
	}

	[CLSCompliant] // 0x00399F78-0x00399FF0
	[ComVisible] // 0x00399F78-0x00399FF0
	[Guid] // 0x00399F78-0x00399FF0
	[InterfaceType] // 0x00399F78-0x00399FF0
	public interface _Type // TypeDefIndex: 1281
	{
	}
}

namespace System.Collections
{
	[Serializable]
	public struct DictionaryEntry // TypeDefIndex: 1282
	{
		// Fields
		private object _key; // 0x00
		private object _value; // 0x08
	
		// Properties
		public object Key { get; } // 0x00937840-0x00937850 
		public object Value { get; } // 0x00937850-0x00937858 
	
		// Constructors
		public DictionaryEntry(object key, object value); // 0x00937830-0x00937840
	}

	internal sealed class LowLevelComparer : IComparer // TypeDefIndex: 1283
	{
		// Fields
		internal static readonly LowLevelComparer Default; // 0x00
	
		// Constructors
		private LowLevelComparer(); // 0x0093CF18-0x0093CF20
		static LowLevelComparer(); // 0x0093D0DC-0x0093D140
	
		// Methods
		public int Compare(object a, object b); // 0x0093CF20-0x0093D0DC
	}

	[Serializable]
	[ComVisible] // 0x00399FF0-0x0039A0B0
	[DebuggerDisplay] // 0x00399FF0-0x0039A0B0
	[DebuggerTypeProxy] // 0x00399FF0-0x0039A0B0
	public class ArrayList : IList, ICloneable // TypeDefIndex: 1284
	{
		// Fields
		private object[] _items; // 0x10
		private int _size; // 0x18
		private int _version; // 0x1C
		[NonSerialized]
		private object _syncRoot; // 0x20
		private static readonly object[] emptyArray; // 0x00
	
		// Properties
		public virtual int Capacity { set; } // 0x0093177C-0x009318A4
		public virtual int Count { get; } // 0x009318A4-0x009318AC 
		public virtual bool IsFixedSize { get; } // 0x009318AC-0x009318B4 
		public virtual bool IsReadOnly { get; } // 0x009318B4-0x009318BC 
		public virtual bool IsSynchronized { get; } // 0x009318BC-0x009318C4 
		public virtual object SyncRoot { get; } // 0x009318C4-0x0093193C 
		public virtual object this[int index] { get => default; set {} } // 0x0093193C-0x00931A30 0x00931A30-0x00931B5C
	
		// Nested types
		[Serializable]
		private class ReadOnlyArrayList : ArrayList // TypeDefIndex: 1285
		{
			// Fields
			private ArrayList _list; // 0x28
	
			// Properties
			public override int Count { get; } // 0x00932F20-0x00932F58 
			public override bool IsReadOnly { get; } // 0x00932F58-0x00932F60 
			public override bool IsFixedSize { get; } // 0x00932F60-0x00932F68 
			public override bool IsSynchronized { get; } // 0x00932F68-0x00932FA0 
			public override object this[int index] { get => default; set {} } // 0x00932FA0-0x00932FE0 0x00932FE0-0x00934068
			public override object SyncRoot { get; } // 0x00934068-0x009340A0 
			public override int Capacity { set; } // 0x009341B0-0x00934238
	
			// Constructors
			internal ReadOnlyArrayList(ArrayList l); // 0x00932650-0x009326C8
	
			// Methods
			public override int Add(object obj); // 0x009340A0-0x00934128
			public override void AddRange(ICollection c); // 0x00934128-0x009341B0
			public override void Clear(); // 0x00934238-0x009342C0
			public override object Clone(); // 0x009342C0-0x009343EC
			public override bool Contains(object obj); // 0x009343EC-0x0093442C
			public override void CopyTo(Array array, int index); // 0x0093442C-0x0093447C
			public override IEnumerator GetEnumerator(); // 0x0093447C-0x009344B4
			public override int IndexOf(object value); // 0x009344B4-0x009344F4
			public override void Insert(int index, object obj); // 0x009344F4-0x0093457C
			public override void InsertRange(int index, ICollection c); // 0x0093457C-0x00934604
			public override void Remove(object value); // 0x00934604-0x0093468C
			public override void RemoveAt(int index); // 0x0093468C-0x00934714
			public override object[] ToArray(); // 0x00934714-0x0093474C
			public override Array ToArray(Type type); // 0x0093474C-0x0093478C
		}
	
		[Serializable]
		private sealed class ArrayListEnumeratorSimple : IEnumerator, ICloneable // TypeDefIndex: 1286
		{
			// Fields
			private ArrayList list; // 0x10
			private int index; // 0x18
			private int version; // 0x1C
			private object currentElement; // 0x20
			[NonSerialized]
			private bool isArrayList; // 0x28
			private static object dummyObject; // 0x00
	
			// Properties
			public object Current { get; } // 0x00932CC8-0x00932DBC 
	
			// Constructors
			internal ArrayListEnumeratorSimple(ArrayList list); // 0x00932084-0x009321A8
			static ArrayListEnumeratorSimple(); // 0x00932EB4-0x00932F20
	
			// Methods
			public object Clone(); // 0x00932A68-0x00932A70
			public bool MoveNext(); // 0x00932A70-0x00932CC8
			public void Reset(); // 0x00932DBC-0x00932EB4
		}
	
		internal class ArrayListDebugView // TypeDefIndex: 1287
		{
		}
	
		// Constructors
		public ArrayList(); // 0x0093141C-0x00931498
		public ArrayList(int capacity); // 0x00931498-0x009315E0
		public ArrayList(ICollection c); // 0x009315E0-0x0093177C
		static ArrayList(); // 0x009329EC-0x00932A68
	
		// Methods
		public virtual int Add(object value); // 0x00931B5C-0x00931C2C
		public virtual void AddRange(ICollection c); // 0x00931CDC-0x00931CFC
		public virtual void Clear(); // 0x00931CFC-0x00931D40
		public virtual object Clone(); // 0x00931D40-0x00931E0C
		public virtual bool Contains(object item); // 0x00931E0C-0x00931F58
		public virtual void CopyTo(Array array, int arrayIndex); // 0x00931F58-0x00932024
		private void EnsureCapacity(int min); // 0x00931C2C-0x00931CDC
		public virtual IEnumerator GetEnumerator(); // 0x00932024-0x00932084
		public virtual int IndexOf(object value); // 0x009321A8-0x009321BC
		public virtual void Insert(int index, object value); // 0x009321BC-0x00932340
		public virtual void InsertRange(int index, ICollection c); // 0x00932340-0x009325AC
		public static ArrayList ReadOnly(ArrayList list); // 0x009325AC-0x00932650
		public virtual void Remove(object obj); // 0x009326C8-0x0093271C
		public virtual void RemoveAt(int index); // 0x0093271C-0x00932844
		public virtual object[] ToArray(); // 0x00932844-0x009328BC
		public virtual Array ToArray(Type type); // 0x009328BC-0x009329EC
	}

	[Serializable]
	[ComVisible] // 0x0039A0E8-0x0039A0FC
	public class CaseInsensitiveComparer : IComparer // TypeDefIndex: 1288
	{
		// Fields
		private CompareInfo m_compareInfo; // 0x10
	
		// Properties
		public static CaseInsensitiveComparer Default { get; } // 0x009348D0-0x0093495C 
	
		// Constructors
		public CaseInsensitiveComparer(); // 0x0093478C-0x00934820
		public CaseInsensitiveComparer(CultureInfo culture); // 0x00934820-0x009348D0
	
		// Methods
		public int Compare(object a, object b); // 0x0093495C-0x00934A80
	}

	[Serializable]
	[ComVisible] // 0x0039A0FC-0x0039A14C
	[Obsolete] // 0x0039A0FC-0x0039A14C
	public class CaseInsensitiveHashCodeProvider : IHashCodeProvider // TypeDefIndex: 1289
	{
		// Fields
		private TextInfo m_text; // 0x10
	
		// Properties
		public static CaseInsensitiveHashCodeProvider Default { get; } // 0x00934DE4-0x00934E70 
	
		// Constructors
		public CaseInsensitiveHashCodeProvider(); // 0x00934CA0-0x00934D34
		public CaseInsensitiveHashCodeProvider(CultureInfo culture); // 0x00934D34-0x00934DE4
		static CaseInsensitiveHashCodeProvider(); // 0x00934F50-0x00934F54
	
		// Methods
		public int GetHashCode(object obj); // 0x00934E70-0x00934F50
	}

	[Serializable]
	[ComVisible] // 0x0039A14C-0x0039A160
	public abstract class CollectionBase : IList // TypeDefIndex: 1290
	{
		// Fields
		private ArrayList list; // 0x10
	
		// Properties
		protected ArrayList InnerList { get; } // 0x00934FBC-0x00936024 
		public int Count { get; } // 0x00936024-0x00936040 
		bool IList.IsReadOnly { get; } // 0x009362D4-0x0093630C 
		bool IList.IsFixedSize { get; } // 0x0093630C-0x00936344 
		bool ICollection.IsSynchronized { get; } // 0x00936344-0x0093637C 
		object ICollection.SyncRoot { get; } // 0x0093637C-0x009363B4 
		object IList.this[int index] { get => default; set {} } // 0x00936404-0x009364FC 0x009364FC-0x0093673C
	
		// Constructors
		protected CollectionBase(); // 0x00934F54-0x00934FBC
	
		// Methods
		public void Clear(); // 0x00936040-0x009360A4
		public void RemoveAt(int index); // 0x009360A4-0x009362D4
		void ICollection.CopyTo(Array array, int index); // 0x009363B4-0x00936404
		bool IList.Contains(object value); // 0x0093673C-0x0093677C
		int IList.Add(object value); // 0x0093677C-0x00936928
		void IList.Remove(object value); // 0x00936928-0x00936B2C
		int IList.IndexOf(object value); // 0x00936B2C-0x00936B6C
		void IList.Insert(int index, object value); // 0x00936B6C-0x00936D68
		public IEnumerator GetEnumerator(); // 0x00936D68-0x00936DA0
		protected virtual void OnSet(int index, object oldValue, object newValue); // 0x00936DA0-0x00936DA4
		protected virtual void OnInsert(int index, object value); // 0x00936DA4-0x00936DA8
		protected virtual void OnClear(); // 0x00936DA8-0x00936DAC
		protected virtual void OnRemove(int index, object value); // 0x00936DAC-0x00936DB0
		protected virtual void OnValidate(object value); // 0x00936DB0-0x00936E34
		protected virtual void OnSetComplete(int index, object oldValue, object newValue); // 0x00936E34-0x00936E38
		protected virtual void OnInsertComplete(int index, object value); // 0x00936E38-0x00936E3C
		protected virtual void OnClearComplete(); // 0x00936E3C-0x00936E40
		protected virtual void OnRemoveComplete(int index, object value); // 0x00936E40-0x00936E44
	}

	[Serializable]
	[ComVisible] // 0x0039A160-0x0039A174
	public sealed class Comparer : IComparer, ISerializable // TypeDefIndex: 1291
	{
		// Fields
		private CompareInfo m_compareInfo; // 0x10
		public static readonly Comparer Default; // 0x00
		public static readonly Comparer DefaultInvariant; // 0x08
	
		// Constructors
		private Comparer(); // 0x00936E44-0x00936E6C
		public Comparer(CultureInfo culture); // 0x00936E6C-0x00936F1C
		private Comparer(SerializationInfo info, StreamingContext context); // 0x00936F1C-0x009370DC
		static Comparer(); // 0x00937198-0x00937264
	
		// Methods
		public int Compare(object a, object b); // 0x00934A80-0x00934CA0
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x009370DC-0x00937198
	}

	[Serializable]
	internal class CompatibleComparer : IEqualityComparer // TypeDefIndex: 1292
	{
		// Fields
		private IComparer _comparer; // 0x10
		private IHashCodeProvider _hcp; // 0x18
	
		// Properties
		internal IComparer Comparer { get; } // 0x009375AC-0x009375B4 
		internal IHashCodeProvider HashCodeProvider { get; } // 0x009375B4-0x009375BC 
	
		// Constructors
		internal CompatibleComparer(IComparer comparer, IHashCodeProvider hashCodeProvider); // 0x00937264-0x0093729C
	
		// Methods
		public int Compare(object a, object b); // 0x0093729C-0x00937474
		public new bool Equals(object a, object b); // 0x00937474-0x00937490
		public int GetHashCode(object obj); // 0x00937490-0x009375AC
	}

	[Serializable]
	[ComVisible] // 0x0039A174-0x0039A234
	[DebuggerDisplay] // 0x0039A174-0x0039A234
	[DebuggerTypeProxy] // 0x0039A174-0x0039A234
	public class Hashtable : IDictionary, ISerializable, IDeserializationCallback, ICloneable // TypeDefIndex: 1293
	{
		// Fields
		private bucket[] buckets; // 0x10
		private int count; // 0x18
		private int occupancy; // 0x1C
		private int loadsize; // 0x20
		private float loadFactor; // 0x24
		private int version; // 0x28
		private bool isWriterInProgress; // 0x2C
		private ICollection keys; // 0x30
		private IEqualityComparer _keycomparer; // 0x38
		private object _syncRoot; // 0x40
	
		// Properties
		public virtual object this[object key] { get => default; set {} } // 0x00939B4C-0x00939DA0 0x00939DA0-0x00939DA8
		public virtual bool IsSynchronized { get; } // 0x0093A3D0-0x0093A3D8 
		public virtual ICollection Keys { get; } // 0x0093A4F0-0x0093A560 
		public virtual object SyncRoot { get; } // 0x0093A8E8-0x0093A960 
		public virtual int Count { get; } // 0x0093A960-0x0093A968 
	
		// Nested types
		private struct bucket // TypeDefIndex: 1294
		{
			// Fields
			public object key; // 0x00
			public object val; // 0x08
			public int hash_coll; // 0x10
		}
	
		[Serializable]
		private class KeyCollection : ICollection // TypeDefIndex: 1295
		{
			// Fields
			private Hashtable _hashtable; // 0x10
	
			// Properties
			public virtual bool IsSynchronized { get; } // 0x0093C00C-0x0093C044 
			public virtual object SyncRoot { get; } // 0x0093C044-0x0093C07C 
			public virtual int Count { get; } // 0x0093C07C-0x0093C0A8 
	
			// Constructors
			internal KeyCollection(Hashtable hashtable); // 0x0093A560-0x0093A58C
	
			// Methods
			public virtual void CopyTo(Array array, int arrayIndex); // 0x0093BE10-0x0093BFA4
			public virtual IEnumerator GetEnumerator(); // 0x0093BFA4-0x0093C00C
		}
	
		[Serializable]
		private class SyncHashtable : Hashtable, IEnumerable // TypeDefIndex: 1296
		{
			// Fields
			protected Hashtable _table; // 0x48
	
			// Properties
			public override int Count { get; } // 0x0093C3D0-0x0093C408 
			public override bool IsSynchronized { get; } // 0x0093C408-0x0093C410 
			public override object this[object key] { get => default; set {} } // 0x0093C410-0x0093C450 0x0093C450-0x0093C548
			public override object SyncRoot { get; } // 0x0093C548-0x0093C580 
			public override ICollection Keys { get; } // 0x0093CB80-0x0093CC74 
	
			// Constructors
			internal SyncHashtable(Hashtable table); // 0x0093AA10-0x0093AA3C
			internal SyncHashtable(SerializationInfo info, StreamingContext context); // 0x0093C0A8-0x0093C240
	
			// Methods
			public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0093C240-0x0093C3D0
			public override void Add(object key, object value); // 0x0093C580-0x0093C678
			public override void Clear(); // 0x0093C678-0x0093C758
			public override bool Contains(object key); // 0x0093C758-0x0093C798
			public override bool ContainsKey(object key); // 0x0093C798-0x0093C86C
			public override void CopyTo(Array array, int arrayIndex); // 0x0093C86C-0x0093C964
			public override object Clone(); // 0x0093C964-0x0093CB10
			new IEnumerator IEnumerable.GetEnumerator(); // 0x0093CB10-0x0093CB48
			public override IDictionaryEnumerator GetEnumerator(); // 0x0093CB48-0x0093CB80
			public override void Remove(object key); // 0x0093CC74-0x0093CD5C
			public override void OnDeserialization(object sender); // 0x0093CD5C-0x0093CF18
		}
	
		[Serializable]
		private class HashtableEnumerator : IDictionaryEnumerator, ICloneable // TypeDefIndex: 1297
		{
			// Fields
			private Hashtable hashtable; // 0x10
			private int bucket; // 0x18
			private int version; // 0x1C
			private bool current; // 0x20
			private int getObjectRetType; // 0x24
			private object currentKey; // 0x28
			private object currentValue; // 0x30
	
			// Properties
			public virtual object Key { get; } // 0x0093B890-0x0093B934 
			public virtual DictionaryEntry Entry { get; } // 0x0093BAEC-0x0093BB90 
			public virtual object Current { get; } // 0x0093BB90-0x0093BC78 
			public virtual object Value { get; } // 0x0093BC78-0x0093BD1C 
	
			// Constructors
			internal HashtableEnumerator(Hashtable hashtable, int getObjRetType); // 0x0093A214-0x0093A284
	
			// Methods
			public object Clone(); // 0x0093B888-0x0093B890
			public virtual bool MoveNext(); // 0x0093B934-0x0093BAEC
			public virtual void Reset(); // 0x0093BD1C-0x0093BE10
		}
	
		internal class HashtableDebugView // TypeDefIndex: 1298
		{
		}
	
		// Constructors
		internal Hashtable(bool trash); // 0x00938520-0x00938528
		public Hashtable(); // 0x0092EDF8-0x0092EE04
		public Hashtable(int capacity); // 0x009387D4-0x009387DC
		public Hashtable(int capacity, float loadFactor); // 0x00938528-0x009387D4
		[Obsolete] // 0x0039F644-0x0039F67C
		public Hashtable(int capacity, float loadFactor, IHashCodeProvider hcp, IComparer comparer); // 0x009387DC-0x00938888
		public Hashtable(int capacity, float loadFactor, IEqualityComparer equalityComparer); // 0x00938888-0x009388B0
		[Obsolete] // 0x0039F67C-0x0039F6B4
		public Hashtable(IHashCodeProvider hcp, IComparer comparer); // 0x009388B0-0x009388CC
		public Hashtable(IEqualityComparer equalityComparer); // 0x009388CC-0x009388FC
		public Hashtable(int capacity, IEqualityComparer equalityComparer); // 0x009388FC-0x00938928
		protected Hashtable(SerializationInfo info, StreamingContext context); // 0x00938928-0x009389C8
	
		// Methods
		private uint InitHash(object key, int hashsize, out uint seed, out uint incr); // 0x009389C8-0x00938A28
		public virtual void Add(object key, object value); // 0x00938A28-0x00938A30
		[ReliabilityContract] // 0x0039F6B4-0x0039F6CC
		public virtual void Clear(); // 0x009391A4-0x00939340
		public virtual object Clone(); // 0x00939370-0x009394F8
		public virtual bool Contains(object key); // 0x009394F8-0x00939508
		public virtual bool ContainsKey(object key); // 0x00939508-0x009396C0
		private void CopyKeys(Array array, int arrayIndex); // 0x009396C0-0x0093978C
		private void CopyEntries(Array array, int arrayIndex); // 0x0093978C-0x009398CC
		public virtual void CopyTo(Array array, int arrayIndex); // 0x009398CC-0x00939A5C
		private void CopyValues(Array array, int arrayIndex); // 0x00939A5C-0x00939B4C
		private void expand(); // 0x00939DA8-0x00939E2C
		private void rehash(); // 0x00939FA8-0x00939FE0
		private void UpdateVersion(); // 0x00939340-0x00939370
		[ReliabilityContract] // 0x0039F6CC-0x0039F6E4
		private void rehash(int newsize, bool forceNewHashCode); // 0x00939E2C-0x00939FA8
		IEnumerator IEnumerable.GetEnumerator(); // 0x0093A1B0-0x0093A214
		public virtual IDictionaryEnumerator GetEnumerator(); // 0x0093A284-0x0093A2E8
		protected virtual int GetHash(object key); // 0x0093A2E8-0x0093A3D0
		protected virtual bool KeyEquals(object item, object key); // 0x0093A3D8-0x0093A4F0
		[ReliabilityContract] // 0x0039F6E4-0x0039F6FC
		private void Insert(object key, object nvalue, bool add); // 0x00938A30-0x009391A4
		private void putEntry(bucket[] newBuckets, object key, object nvalue, int hashcode); // 0x00939FE0-0x0093A1B0
		[ReliabilityContract] // 0x0039F6FC-0x0039F714
		public virtual void Remove(object key); // 0x0093A58C-0x0093A8E8
		public static Hashtable Synchronized(Hashtable table); // 0x0093A968-0x0093AA10
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0093AA3C-0x0093AF34
		public virtual void OnDeserialization(object sender); // 0x0093AF34-0x0093B888
	}

	[FriendAccessAllowed] // 0x0039A26C-0x0039A27C
	internal static class HashHelpers // TypeDefIndex: 1299
	{
		// Fields
		public static readonly int[] primes; // 0x00
		private static ConditionalWeakTable<object, SerializationInfo> s_SerializationInfoTable; // 0x08
	
		// Properties
		internal static ConditionalWeakTable<object, SerializationInfo> SerializationInfoTable { get; } // 0x009380A0-0x00938184 
	
		// Constructors
		static HashHelpers(); // 0x009384A4-0x00938520
	
		// Methods
		[ReliabilityContract] // 0x0039F714-0x0039F72C
		public static bool IsPrime(int candidate); // 0x00938184-0x00938240
		[ReliabilityContract] // 0x0039F72C-0x0039F744
		public static int GetPrime(int min); // 0x00938240-0x00938410
		public static int ExpandPrime(int oldSize); // 0x00938410-0x009384A4
	}

	[ComVisible] // 0x0039A27C-0x0039A290
	public interface ICollection : IEnumerable // TypeDefIndex: 1300
	{
		// Properties
		int Count { get; }
		object SyncRoot { get; }
		bool IsSynchronized { get; }
	
		// Methods
		void CopyTo(Array array, int index);
	}

	[ComVisible] // 0x0039A290-0x0039A2A4
	public interface IComparer // TypeDefIndex: 1301
	{
		// Methods
		int Compare(object x, object y);
	}

	[ComVisible] // 0x0039A2A4-0x0039A2F4
	public interface IDictionary : ICollection // TypeDefIndex: 1302
	{
		// Properties
		object this[object key] { get => default; set {} }
		ICollection Keys { get; }
	
		// Methods
		IDictionaryEnumerator GetEnumerator();
	}

	[ComVisible] // 0x0039A2F4-0x0039A308
	public interface IDictionaryEnumerator : IEnumerator // TypeDefIndex: 1303
	{
		// Properties
		object Key { get; }
		object Value { get; }
		DictionaryEntry Entry { get; }
	}

	[ComVisible] // 0x0039A308-0x0039A358
	[Guid] // 0x0039A308-0x0039A358
	public interface IEnumerable // TypeDefIndex: 1304
	{
		// Methods
		[DispId] // 0x0039F744-0x0039F758
		IEnumerator GetEnumerator();
	}

	[ComVisible] // 0x0039A358-0x0039A3A8
	[Guid] // 0x0039A358-0x0039A3A8
	public interface IEnumerator // TypeDefIndex: 1305
	{
		// Properties
		object Current { get; }
	
		// Methods
		bool MoveNext();
		void Reset();
	}

	[ComVisible] // 0x0039A3A8-0x0039A3BC
	public interface IEqualityComparer // TypeDefIndex: 1306
	{
		// Methods
		bool Equals(object x, object y);
		int GetHashCode(object obj);
	}

	[ComVisible] // 0x0039A3BC-0x0039A40C
	[Obsolete] // 0x0039A3BC-0x0039A40C
	public interface IHashCodeProvider // TypeDefIndex: 1307
	{
		// Methods
		int GetHashCode(object obj);
	}

	[ComVisible] // 0x0039A40C-0x0039A45C
	public interface IList : ICollection // TypeDefIndex: 1308
	{
		// Properties
		object this[int index] { get => default; set {} }
		bool IsReadOnly { get; }
		bool IsFixedSize { get; }
	
		// Methods
		int Add(object value);
		bool Contains(object value);
		void Clear();
		int IndexOf(object value);
		void Insert(int index, object value);
		void Remove(object value);
		void RemoveAt(int index);
	}

	public interface IStructuralComparable // TypeDefIndex: 1309
	{
		// Methods
		int CompareTo(object other, IComparer comparer);
	}

	public interface IStructuralEquatable // TypeDefIndex: 1310
	{
		// Methods
		bool Equals(object other, IEqualityComparer comparer);
		int GetHashCode(IEqualityComparer comparer);
	}

	[Serializable]
	[ComVisible] // 0x0039A45C-0x0039A4F8
	[DebuggerDisplay] // 0x0039A45C-0x0039A4F8
	[DebuggerTypeProxy] // 0x0039A45C-0x0039A4F8
	public class Queue : ICollection, ICloneable // TypeDefIndex: 1311
	{
		// Fields
		private object[] _array; // 0x10
		private int _head; // 0x18
		private int _tail; // 0x1C
		private int _size; // 0x20
		private int _growFactor; // 0x24
		private int _version; // 0x28
		[NonSerialized]
		private object _syncRoot; // 0x30
	
		// Properties
		public virtual int Count { get; } // 0x0093D5E8-0x0093D5F0 
		public virtual bool IsSynchronized { get; } // 0x0093D724-0x0093D72C 
		public virtual object SyncRoot { get; } // 0x0093D72C-0x0093D7A8 
	
		// Nested types
		[Serializable]
		private class QueueEnumerator : IEnumerator, ICloneable // TypeDefIndex: 1312
		{
			// Fields
			private Queue _q; // 0x10
			private int _index; // 0x18
			private int _version; // 0x1C
			private object currentElement; // 0x20
	
			// Properties
			public virtual object Current { get; } // 0x00546F50-0x00547028 
	
			// Constructors
			internal QueueEnumerator(Queue q); // 0x00546D78-0x00546E0C
	
			// Methods
			public object Clone(); // 0x00546E0C-0x00546E14
			public virtual bool MoveNext(); // 0x00546E14-0x00546F50
			public virtual void Reset(); // 0x00547028-0x00547124
		}
	
		internal class QueueDebugView // TypeDefIndex: 1313
		{
		}
	
		// Constructors
		public Queue(); // 0x0093D140-0x0093D14C
		public Queue(int capacity); // 0x0093D330-0x0093D338
		public Queue(int capacity, float growFactor); // 0x0093D14C-0x0093D330
		public Queue(ICollection col); // 0x0093D338-0x0093D5E8
	
		// Methods
		public virtual object Clone(); // 0x0093D5F0-0x0093D724
		public virtual void CopyTo(Array array, int index); // 0x0093D7A8-0x0093D9BC
		public virtual void Enqueue(object obj); // 0x0093D9BC-0x0093DB30
		public virtual IEnumerator GetEnumerator(); // 0x0093DC6C-0x0093DCD0
		public virtual object Dequeue(); // 0x0093DCD0-0x0093DE38
		public virtual object Peek(); // 0x0093DE38-0x0093DF1C
		internal object GetElement(int i); // 0x0093DF1C-0x0093DFAC
		private void SetCapacity(int capacity); // 0x0093DB30-0x0093DC6C
	}

	[Serializable]
	[ComVisible] // 0x0039A4F8-0x0039A5B8
	[DebuggerDisplay] // 0x0039A4F8-0x0039A5B8
	[DebuggerTypeProxy] // 0x0039A4F8-0x0039A5B8
	public class SortedList : IDictionary, ICloneable // TypeDefIndex: 1314
	{
		// Fields
		private object[] keys; // 0x10
		private object[] values; // 0x18
		private int _size; // 0x20
		private int version; // 0x24
		private IComparer comparer; // 0x28
		private KeyList keyList; // 0x30
		[NonSerialized]
		private object _syncRoot; // 0x38
		private static object[] emptyArray; // 0x00
	
		// Properties
		public virtual int Capacity { get; set; } // 0x0054771C-0x00547748 0x00547748-0x005478EC
		public virtual int Count { get; } // 0x005478EC-0x005478F4 
		public virtual ICollection Keys { get; } // 0x005478F4-0x00547904 
		public virtual bool IsSynchronized { get; } // 0x00547904-0x0054790C 
		public virtual object SyncRoot { get; } // 0x0054790C-0x00547984 
		public virtual object this[object key] { get => default; set {} } // 0x005481EC-0x00548260 0x00548260-0x005483C8
	
		// Nested types
		[Serializable]
		private class SortedListEnumerator : IDictionaryEnumerator, ICloneable // TypeDefIndex: 1315
		{
			// Fields
			private SortedList sortedList; // 0x10
			private object key; // 0x18
			private object value; // 0x20
			private int index; // 0x28
			private int startIndex; // 0x2C
			private int endIndex; // 0x30
			private int version; // 0x34
			private bool current; // 0x38
			private int getObjectRetType; // 0x3C
	
			// Properties
			public virtual object Key { get; } // 0x00548DE4-0x00548EBC 
			public virtual DictionaryEntry Entry { get; } // 0x00549048-0x0054913C 
			public virtual object Current { get; } // 0x0054913C-0x00549238 
			public virtual object Value { get; } // 0x00549238-0x00549310 
	
			// Constructors
			internal SortedListEnumerator(SortedList sortedList, int index, int count, int getObjRetType); // 0x00547F60-0x00547FD0
	
			// Methods
			public object Clone(); // 0x00548DDC-0x00548DE4
			public virtual bool MoveNext(); // 0x00548EBC-0x00549048
			public virtual void Reset(); // 0x00549310-0x005493E0
		}
	
		[Serializable]
		private class KeyList : IList // TypeDefIndex: 1316
		{
			// Fields
			private SortedList sortedList; // 0x10
	
			// Properties
			public virtual int Count { get; } // 0x005486BC-0x005486E8 
			public virtual bool IsReadOnly { get; } // 0x005486E8-0x005486F0 
			public virtual bool IsFixedSize { get; } // 0x005486F0-0x005486F8 
			public virtual bool IsSynchronized { get; } // 0x005486F8-0x00548730 
			public virtual object SyncRoot { get; } // 0x00548730-0x00548768 
			public virtual object this[int index] { get => default; set {} } // 0x00548A48-0x00548A88 0x00548A88-0x00548B10
	
			// Constructors
			internal KeyList(SortedList sortedList); // 0x005481C0-0x005481EC
	
			// Methods
			public virtual int Add(object key); // 0x00548768-0x005487F0
			public virtual void Clear(); // 0x005487F0-0x00548878
			public virtual bool Contains(object key); // 0x00548878-0x005488B8
			public virtual void CopyTo(Array array, int arrayIndex); // 0x005488B8-0x005489C0
			public virtual void Insert(int index, object value); // 0x005489C0-0x00548A48
			public virtual IEnumerator GetEnumerator(); // 0x00548B10-0x00548BB0
			public virtual int IndexOf(object key); // 0x00548BB0-0x00548CCC
			public virtual void Remove(object key); // 0x00548CCC-0x00548D54
			public virtual void RemoveAt(int index); // 0x00548D54-0x00548DDC
		}
	
		internal class SortedListDebugView // TypeDefIndex: 1317
		{
		}
	
		// Constructors
		public SortedList(); // 0x00547124-0x0054714C
		public SortedList(int initialCapacity); // 0x00547228-0x00547368
		public SortedList(IComparer comparer); // 0x00547368-0x005473A0
		public SortedList(IComparer comparer, int capacity); // 0x005473A0-0x005473D8
		static SortedList(); // 0x00548640-0x005486BC
	
		// Methods
		private void Init(); // 0x0054714C-0x00547228
		public virtual void Add(object key, object value); // 0x005473D8-0x00547590
		public virtual object Clone(); // 0x00547984-0x00547A94
		public virtual bool Contains(object key); // 0x00547A94-0x00547ABC
		public virtual void CopyTo(Array array, int arrayIndex); // 0x00547ABC-0x00547D5C
		private void EnsureCapacity(int min); // 0x00547D5C-0x00547DE0
		public virtual object GetByIndex(int index); // 0x00547DE0-0x00547EE8
		IEnumerator IEnumerable.GetEnumerator(); // 0x00547EE8-0x00547F60
		public virtual IDictionaryEnumerator GetEnumerator(); // 0x00547FD0-0x00548048
		public virtual object GetKey(int index); // 0x00548048-0x00548150
		public virtual IList GetKeyList(); // 0x00548150-0x005481C0
		public virtual int IndexOfKey(object key); // 0x005483C8-0x005484A0
		private void Insert(int index, object key, object value); // 0x00547590-0x0054771C
		public virtual void RemoveAt(int index); // 0x005484A0-0x00548640
	}

	[Serializable]
	[ComVisible] // 0x0039A5F0-0x0039A68C
	[DebuggerDisplay] // 0x0039A5F0-0x0039A68C
	[DebuggerTypeProxy] // 0x0039A5F0-0x0039A68C
	public class Stack : ICollection, ICloneable // TypeDefIndex: 1318
	{
		// Fields
		private object[] _array; // 0x10
		private int _size; // 0x18
		private int _version; // 0x1C
		[NonSerialized]
		private object _syncRoot; // 0x20
	
		// Properties
		public virtual int Count { get; } // 0x00549524-0x0054952C 
		public virtual bool IsSynchronized { get; } // 0x0054952C-0x00549534 
		public virtual object SyncRoot { get; } // 0x00549534-0x005495AC 
	
		// Nested types
		[Serializable]
		private class StackEnumerator : IEnumerator, ICloneable // TypeDefIndex: 1319
		{
			// Fields
			private Stack _stack; // 0x10
			private int _index; // 0x18
			private int _version; // 0x1C
			private object currentElement; // 0x20
	
			// Properties
			public virtual object Current { get; } // 0x00549F98-0x0054B054 
	
			// Constructors
			internal StackEnumerator(Stack stack); // 0x00549A58-0x00549AA0
	
			// Methods
			public object Clone(); // 0x00549DDC-0x00549DE4
			public virtual bool MoveNext(); // 0x00549DE4-0x00549F98
			public virtual void Reset(); // 0x0054B054-0x0054B120
		}
	
		internal class StackDebugView // TypeDefIndex: 1320
		{
		}
	
		// Constructors
		public Stack(); // 0x005493E0-0x00549444
		public Stack(int initialCapacity); // 0x00549444-0x00549524
	
		// Methods
		public virtual void Clear(); // 0x005495AC-0x005495E8
		public virtual object Clone(); // 0x005495E8-0x005496B4
		public virtual void CopyTo(Array array, int index); // 0x005496B4-0x005499F8
		public virtual IEnumerator GetEnumerator(); // 0x005499F8-0x00549A58
		public virtual object Peek(); // 0x00549AA0-0x00549B7C
		public virtual object Pop(); // 0x00549B7C-0x00549CA8
		public virtual void Push(object obj); // 0x00549CA8-0x00549DDC
	}
}

namespace System.Collections.ObjectModel
{
	[Serializable]
	[ComVisible] // 0x0039A68C-0x0039A74C
	[DebuggerDisplay] // 0x0039A68C-0x0039A74C
	[DebuggerTypeProxy] // 0x0039A68C-0x0039A74C
	public class ReadOnlyCollection<T> : IList<T>, IList, IReadOnlyList<T> // TypeDefIndex: 1321
	{
		// Fields
		private IList<T> list;
		[NonSerialized]
		private object _syncRoot;
	
		// Properties
		public int Count { get; }
		public T this[int index] { get => default; }
		bool ICollection<T>.IsReadOnly { get; }
		T IList<T>.this[int index] { get => default; set {} }
		bool ICollection.IsSynchronized { get; }
		object ICollection.SyncRoot { get; }
		bool IList.IsFixedSize { get; }
		bool IList.IsReadOnly { get; }
		object IList.this[int index] { get => default; set {} }
	
		// Constructors
		public ReadOnlyCollection(IList<T> list);
	
		// Methods
		public bool Contains(T value);
		public void CopyTo(T[] array, int index);
		public IEnumerator<T> GetEnumerator();
		public int IndexOf(T value);
		void ICollection<T>.Add(T value);
		void ICollection<T>.Clear();
		void IList<T>.Insert(int index, T value);
		bool ICollection<T>.Remove(T value);
		void IList<T>.RemoveAt(int index);
		IEnumerator IEnumerable.GetEnumerator();
		void ICollection.CopyTo(Array array, int index);
		int IList.Add(object value);
		void IList.Clear();
		private static bool IsCompatibleObject(object value);
		bool IList.Contains(object value);
		int IList.IndexOf(object value);
		void IList.Insert(int index, object value);
		void IList.Remove(object value);
		void IList.RemoveAt(int index);
	}
}

namespace System.Collections.Concurrent
{
	[EventSource] // 0x0039A74C-0x0039A7AC
	internal sealed class CDSCollectionETWBCLProvider : EventSource // TypeDefIndex: 1322
	{
		// Fields
		public static CDSCollectionETWBCLProvider Log; // 0x00
	
		// Constructors
		private CDSCollectionETWBCLProvider(); // 0x009375BC-0x009375C4
		static CDSCollectionETWBCLProvider(); // 0x00937614-0x00937830
	
		// Methods
		[Event] // 0x0039F758-0x0039F794
		public void ConcurrentDictionary_AcquiringAllLocks(int numOfBuckets); // 0x009375C4-0x00937614
	}

	[Serializable]
	[DebuggerDisplay] // 0x0039A7AC-0x0039A858
	[DebuggerTypeProxy] // 0x0039A7AC-0x0039A858
	public class ConcurrentDictionary<TKey, TValue> : IDictionary<TKey, TValue>, IDictionary, IReadOnlyDictionary<TKey, TValue> // TypeDefIndex: 1323
	{
		// Fields
		private Tables _tables;
		private IEqualityComparer<TKey> _comparer;
		private readonly bool _growLockArray;
		private int _budget;
		private static readonly bool s_isValueWriteAtomic;
	
		// Properties
		public TValue this[TKey key] { get => default; set {} }
		public int Count { get; }
		public ICollection<TKey> Keys { get; }
		bool ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get; }
		ICollection IDictionary.Keys { get; }
		object IDictionary.this[object key] { get => default; set {} }
		bool ICollection.IsSynchronized { get; }
		object ICollection.SyncRoot { get; }
		private static int DefaultConcurrencyLevel { get; }
	
		// Nested types
		private sealed class Tables // TypeDefIndex: 1324
		{
			// Fields
			internal readonly Node<TKey, TValue>[] _buckets;
			internal readonly object[] _locks;
			internal int[] _countPerLock;
	
			// Constructors
			internal Tables(Node<TKey, TValue>[] buckets, object[] locks, int[] countPerLock);
		}
	
		[Serializable]
		private sealed class Node // TypeDefIndex: 1325
		{
			// Fields
			internal readonly TKey _key;
			internal TValue _value;
			internal Node<TKey, TValue> _next;
			internal readonly int _hashcode;
	
			// Constructors
			internal Node(TKey key, TValue value, int hashcode, Node<TKey, TValue> next);
		}
	
		[Serializable]
		private sealed class DictionaryEnumerator : IDictionaryEnumerator // TypeDefIndex: 1326
		{
			// Fields
			private IEnumerator<KeyValuePair<TKey, TValue>> _enumerator;
	
			// Properties
			public DictionaryEntry Entry { get; }
			public object Key { get; }
			public object Value { get; }
			public object Current { get; }
	
			// Constructors
			internal DictionaryEnumerator(ConcurrentDictionary<TKey, TValue> dictionary);
	
			// Methods
			public bool MoveNext();
			public void Reset();
		}
	
		[CompilerGenerated] // 0x0039A858-0x0039A868
		private sealed class <GetEnumerator>d__32 : IEnumerator<KeyValuePair<TKey, TValue>> // TypeDefIndex: 1327
		{
			// Fields
			private int <>1__state;
			private KeyValuePair<TKey, TValue> <>2__current;
			public ConcurrentDictionary<TKey, TValue> <>4__this;
			private Node<TKey, TValue>[] <buckets>5__1;
			private Node<TKey, TValue> <current>5__2;
			private int <i>5__3;
	
			// Properties
			KeyValuePair<TKey, TValue> IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Current { [DebuggerHidden] /* 0x0039F818-0x0039F828 */ get; }
			object IEnumerator.Current { [DebuggerHidden] /* 0x0039F838-0x0039F848 */ get; }
	
			// Constructors
			[DebuggerHidden] // 0x0039F7F8-0x0039F808
			public <GetEnumerator>d__32(int <>1__state);
	
			// Methods
			[DebuggerHidden] // 0x0039F808-0x0039F818
			void IDisposable.Dispose();
			private bool MoveNext();
			[DebuggerHidden] // 0x0039F828-0x0039F838
			void IEnumerator.Reset();
		}
	
		// Constructors
		public ConcurrentDictionary();
		internal ConcurrentDictionary(int concurrencyLevel, int capacity, bool growLockArray, IEqualityComparer<TKey> comparer);
		static ConcurrentDictionary();
	
		// Methods
		private static bool IsValueWriteAtomic();
		public bool TryAdd(TKey key, TValue value);
		public bool ContainsKey(TKey key);
		public bool TryRemove(TKey key, out TValue value);
		private bool TryRemoveInternal(TKey key, out TValue value, bool matchValue, TValue oldValue);
		public bool TryGetValue(TKey key, out TValue value);
		private bool TryGetValueInternal(TKey key, int hashcode, out TValue value);
		public void Clear();
		void ICollection<KeyValuePair<TKey, TValue>>.CopyTo(KeyValuePair<TKey, TValue>[] array, int index);
		private void CopyToPairs(KeyValuePair<TKey, TValue>[] array, int index);
		private void CopyToEntries(DictionaryEntry[] array, int index);
		private void CopyToObjects(object[] array, int index);
		[IteratorStateMachine] // 0x0039F794-0x0039F7F8
		public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator();
		private bool TryAddInternal(TKey key, int hashcode, TValue value, bool updateIfExists, bool acquireLock, out TValue resultingValue);
		private static void ThrowKeyNotFoundException();
		private static void ThrowKeyNullException();
		private int GetCountInternal();
		public TValue GetOrAdd(TKey key, Func<TKey, TValue> valueFactory);
		void IDictionary<TKey, TValue>.Add(TKey key, TValue value);
		bool IDictionary<TKey, TValue>.Remove(TKey key);
		void ICollection<KeyValuePair<TKey, TValue>>.Add(KeyValuePair<TKey, TValue> keyValuePair);
		bool ICollection<KeyValuePair<TKey, TValue>>.Contains(KeyValuePair<TKey, TValue> keyValuePair);
		bool ICollection<KeyValuePair<TKey, TValue>>.Remove(KeyValuePair<TKey, TValue> keyValuePair);
		IEnumerator IEnumerable.GetEnumerator();
		IDictionaryEnumerator IDictionary.GetEnumerator();
		void ICollection.CopyTo(Array array, int index);
		private void GrowTable(Tables tables);
		private static int GetBucket(int hashcode, int bucketCount);
		private static void GetBucketAndLockNo(int hashcode, out int bucketNo, out int lockNo, int bucketCount, int lockCount);
		private void AcquireAllLocks(ref int locksAcquired);
		private void AcquireLocks(int fromInclusive, int toExclusive, ref int locksAcquired);
		private void ReleaseLocks(int fromInclusive, int toExclusive);
		private ReadOnlyCollection<TKey> GetKeys();
	}

	internal sealed class IDictionaryDebugView<K, V> // TypeDefIndex: 1328
	{
	}
}

namespace System.Collections.Generic
{
	public static class CollectionExtensions // TypeDefIndex: 1329
	{
		// Extension methods
		public static TValue GetValueOrDefault<TKey, TValue>(this IReadOnlyDictionary<TKey, TValue> dictionary, TKey key);
		public static TValue GetValueOrDefault<TKey, TValue>(this IReadOnlyDictionary<TKey, TValue> dictionary, TKey key, TValue defaultValue);
	}

	public static class KeyValuePair // TypeDefIndex: 1330
	{
		// Methods
		internal static string PairToString(object key, object value); // 0x00937E70-0x00937F6C
	}

	[Serializable]
	public struct KeyValuePair<TKey, TValue> // TypeDefIndex: 1331
	{
		// Fields
		private TKey key;
		private TValue value;
	
		// Properties
		public TKey Key { get; }
		public TValue Value { get; }
	
		// Constructors
		public KeyValuePair(TKey key, TValue value);
	
		// Methods
		public override string ToString();
	}

	internal static class IntrospectiveSortUtilities // TypeDefIndex: 1332
	{
		// Methods
		internal static int FloorLog2(int n); // 0x00925464-0x009255C4
		internal static void ThrowOrIgnoreBadComparer(object comparer); // 0x009255C4-0x00925650
	}

	internal class ArraySortHelper<T> // TypeDefIndex: 1333
	{
		// Methods
		public static void Sort(T[] keys, int index, int length, IComparer<T> comparer);
		public static int BinarySearch(T[] array, int index, int length, T value, IComparer<T> comparer);
		internal static void Sort(T[] keys, int index, int length, Comparison<T> comparer);
		internal static int InternalBinarySearch(T[] array, int index, int length, T value, IComparer<T> comparer);
		private static void SwapIfGreater(T[] keys, Comparison<T> comparer, int a, int b);
		private static void Swap(T[] a, int i, int j);
		internal static void IntrospectiveSort(T[] keys, int left, int length, Comparison<T> comparer);
		private static void IntroSort(T[] keys, int lo, int hi, int depthLimit, Comparison<T> comparer);
		private static int PickPivotAndPartition(T[] keys, int lo, int hi, Comparison<T> comparer);
		private static void Heapsort(T[] keys, int lo, int hi, Comparison<T> comparer);
		private static void DownHeap(T[] keys, int i, int n, int lo, Comparison<T> comparer);
		private static void InsertionSort(T[] keys, int lo, int hi, Comparison<T> comparer);
	}

	internal class ArraySortHelper<TKey, TValue> // TypeDefIndex: 1334
	{
		// Fields
		private static ArraySortHelper<TKey, TValue> s_defaultArraySortHelper;
	
		// Properties
		public static ArraySortHelper<TKey, TValue> Default { get; }
	
		// Constructors
		public ArraySortHelper();
	
		// Methods
		private static ArraySortHelper<TKey, TValue> CreateArraySortHelper();
		public void Sort(TKey[] keys, TValue[] values, int index, int length, IComparer<TKey> comparer);
		private static void SwapIfGreaterWithItems(TKey[] keys, TValue[] values, IComparer<TKey> comparer, int a, int b);
		private static void Swap(TKey[] keys, TValue[] values, int i, int j);
		internal static void IntrospectiveSort(TKey[] keys, TValue[] values, int left, int length, IComparer<TKey> comparer);
		private static void IntroSort(TKey[] keys, TValue[] values, int lo, int hi, int depthLimit, IComparer<TKey> comparer);
		private static int PickPivotAndPartition(TKey[] keys, TValue[] values, int lo, int hi, IComparer<TKey> comparer);
		private static void Heapsort(TKey[] keys, TValue[] values, int lo, int hi, IComparer<TKey> comparer);
		private static void DownHeap(TKey[] keys, TValue[] values, int i, int n, int lo, IComparer<TKey> comparer);
		private static void InsertionSort(TKey[] keys, TValue[] values, int lo, int hi, IComparer<TKey> comparer);
	}

	internal enum InsertionBehavior : byte // TypeDefIndex: 1335
	{
		None = 0,
		OverwriteExisting = 1,
		ThrowOnExisting = 2
	}

	[Serializable]
	[DebuggerDisplay] // 0x0039A878-0x0039A924
	[DebuggerTypeProxy] // 0x0039A878-0x0039A924
	public class Dictionary<TKey, TValue> : IDictionary<TKey, TValue>, IDictionary, IReadOnlyDictionary<TKey, TValue>, ISerializable, IDeserializationCallback // TypeDefIndex: 1336
	{
		// Fields
		private int[] buckets;
		private Entry[] entries;
		private int count;
		private int version;
		private int freeList;
		private int freeCount;
		private IEqualityComparer<TKey> comparer;
		private KeyCollection keys;
		private ValueCollection values;
		private object _syncRoot;
		private const string VersionName = "Version"; // Metadata: 0x0020525A
		private const string HashSizeName = "HashSize"; // Metadata: 0x00205265
		private const string KeyValuePairsName = "KeyValuePairs"; // Metadata: 0x00205271
		private const string ComparerName = "Comparer"; // Metadata: 0x00205282
	
		// Properties
		public int Count { get; }
		public KeyCollection Keys { get; }
		ICollection<TKey> IDictionary<TKey,TValue>.Keys { get; }
		public ValueCollection Values { get; }
		public TValue this[TKey key] { get => default; set {} }
		bool ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get; }
		bool ICollection.IsSynchronized { get; }
		object ICollection.SyncRoot { get; }
		ICollection IDictionary.Keys { get; }
		object IDictionary.this[object key] { get => default; set {} }
	
		// Nested types
		private struct Entry // TypeDefIndex: 1337
		{
			// Fields
			public int hashCode;
			public int next;
			public TKey key;
			public TValue value;
		}
	
		[Serializable]
		public struct Enumerator : IEnumerator<KeyValuePair<TKey, TValue>>, IDictionaryEnumerator // TypeDefIndex: 1338
		{
			// Fields
			private Dictionary<TKey, TValue> dictionary;
			private int version;
			private int index;
			private KeyValuePair<TKey, TValue> current;
			private int getEnumeratorRetType;
	
			// Properties
			public KeyValuePair<TKey, TValue> Current { get; }
			object IEnumerator.Current { get; }
			DictionaryEntry IDictionaryEnumerator.Entry { get; }
			object IDictionaryEnumerator.Key { get; }
			object IDictionaryEnumerator.Value { get; }
	
			// Constructors
			internal Enumerator(Dictionary<TKey, TValue> dictionary, int getEnumeratorRetType);
	
			// Methods
			public bool MoveNext();
			public void Dispose();
			void IEnumerator.Reset();
		}
	
		[Serializable]
		[DebuggerDisplay] // 0x0039A924-0x0039A9AC
		[DebuggerTypeProxy] // 0x0039A924-0x0039A9AC
		public sealed class KeyCollection : ICollection<TKey>, ICollection, IReadOnlyCollection<TKey> // TypeDefIndex: 1339
		{
			// Fields
			private Dictionary<TKey, TValue> dictionary;
	
			// Properties
			public int Count { get; }
			bool ICollection<TKey>.IsReadOnly { get; }
			bool ICollection.IsSynchronized { get; }
			object ICollection.SyncRoot { get; }
	
			// Nested types
			[Serializable]
			public struct Enumerator : IEnumerator<TKey> // TypeDefIndex: 1340
			{
				// Fields
				private Dictionary<TKey, TValue> dictionary;
				private int index;
				private int version;
				private TKey currentKey;
	
				// Properties
				public TKey Current { get; }
				object IEnumerator.Current { get; }
	
				// Constructors
				internal Enumerator(Dictionary<TKey, TValue> dictionary);
	
				// Methods
				public void Dispose();
				public bool MoveNext();
				void IEnumerator.Reset();
			}
	
			// Constructors
			public KeyCollection(Dictionary<TKey, TValue> dictionary);
	
			// Methods
			public Enumerator GetEnumerator();
			public void CopyTo(TKey[] array, int index);
			void ICollection<TKey>.Add(TKey item);
			void ICollection<TKey>.Clear();
			bool ICollection<TKey>.Contains(TKey item);
			bool ICollection<TKey>.Remove(TKey item);
			IEnumerator<TKey> IEnumerable<TKey>.GetEnumerator();
			IEnumerator IEnumerable.GetEnumerator();
			void ICollection.CopyTo(Array array, int index);
		}
	
		[Serializable]
		[DebuggerDisplay] // 0x0039A9AC-0x0039AA34
		[DebuggerTypeProxy] // 0x0039A9AC-0x0039AA34
		public sealed class ValueCollection : ICollection<TValue>, ICollection, IReadOnlyCollection<TValue> // TypeDefIndex: 1341
		{
			// Fields
			private Dictionary<TKey, TValue> dictionary;
	
			// Properties
			public int Count { get; }
			bool ICollection<TValue>.IsReadOnly { get; }
			bool ICollection.IsSynchronized { get; }
			object ICollection.SyncRoot { get; }
	
			// Nested types
			[Serializable]
			public struct Enumerator : IEnumerator<TValue> // TypeDefIndex: 1342
			{
				// Fields
				private Dictionary<TKey, TValue> dictionary;
				private int index;
				private int version;
				private TValue currentValue;
	
				// Properties
				public TValue Current { get; }
				object IEnumerator.Current { get; }
	
				// Constructors
				internal Enumerator(Dictionary<TKey, TValue> dictionary);
	
				// Methods
				public void Dispose();
				public bool MoveNext();
				void IEnumerator.Reset();
			}
	
			// Constructors
			public ValueCollection(Dictionary<TKey, TValue> dictionary);
	
			// Methods
			public Enumerator GetEnumerator();
			public void CopyTo(TValue[] array, int index);
			void ICollection<TValue>.Add(TValue item);
			bool ICollection<TValue>.Remove(TValue item);
			void ICollection<TValue>.Clear();
			bool ICollection<TValue>.Contains(TValue item);
			IEnumerator<TValue> IEnumerable<TValue>.GetEnumerator();
			IEnumerator IEnumerable.GetEnumerator();
			void ICollection.CopyTo(Array array, int index);
		}
	
		// Constructors
		public Dictionary();
		public Dictionary(int capacity);
		public Dictionary(IEqualityComparer<TKey> comparer);
		public Dictionary(int capacity, IEqualityComparer<TKey> comparer);
		protected Dictionary(SerializationInfo info, StreamingContext context);
	
		// Methods
		public void Add(TKey key, TValue value);
		void ICollection<KeyValuePair<TKey, TValue>>.Add(KeyValuePair<TKey, TValue> keyValuePair);
		bool ICollection<KeyValuePair<TKey, TValue>>.Contains(KeyValuePair<TKey, TValue> keyValuePair);
		bool ICollection<KeyValuePair<TKey, TValue>>.Remove(KeyValuePair<TKey, TValue> keyValuePair);
		public void Clear();
		public bool ContainsKey(TKey key);
		public bool ContainsValue(TValue value);
		private void CopyTo(KeyValuePair<TKey, TValue>[] array, int index);
		public Enumerator GetEnumerator();
		IEnumerator<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator();
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
		private int FindEntry(TKey key);
		private void Initialize(int capacity);
		private bool TryInsert(TKey key, TValue value, InsertionBehavior behavior);
		public virtual void OnDeserialization(object sender);
		private void Resize();
		private void Resize(int newSize, bool forceNewHashCodes);
		public bool Remove(TKey key);
		public bool TryGetValue(TKey key, out TValue value);
		void ICollection<KeyValuePair<TKey, TValue>>.CopyTo(KeyValuePair<TKey, TValue>[] array, int index);
		void ICollection.CopyTo(Array array, int index);
		IEnumerator IEnumerable.GetEnumerator();
		private static bool IsCompatibleKey(object key);
		IDictionaryEnumerator IDictionary.GetEnumerator();
	}

	internal class DictionaryHashHelpers // TypeDefIndex: 1343
	{
		// Fields
		[CompilerGenerated] // 0x0039C8E4-0x0039C8F4
		private static readonly ConditionalWeakTable<object, SerializationInfo> <SerializationInfoTable>k__BackingField; // 0x00
	
		// Properties
		internal static ConditionalWeakTable<object, SerializationInfo> SerializationInfoTable { [CompilerGenerated] /* 0x0039F868-0x0039F878 */ get; } // 0x00937BDC-0x00937C44 
	
		// Constructors
		static DictionaryHashHelpers(); // 0x00937C44-0x00937CB8
	}

	internal sealed class IDictionaryDebugView<K, V> // TypeDefIndex: 1344
	{
	}

	internal sealed class DictionaryKeyCollectionDebugView<TKey, TValue> // TypeDefIndex: 1345
	{
	}

	internal sealed class DictionaryValueCollectionDebugView<TKey, TValue> // TypeDefIndex: 1346
	{
	}

	[Serializable]
	internal sealed class NonRandomizedStringEqualityComparer : EqualityComparer<string> // TypeDefIndex: 1347
	{
		// Constructors
		public NonRandomizedStringEqualityComparer(); // 0x00937F94-0x00937FE4
	
		// Methods
		public sealed override bool Equals(string x, string y); // 0x00937F6C-0x00937F7C
		public sealed override int GetHashCode(string obj); // 0x00937F7C-0x00937F94
	}

	internal sealed class ObjectEqualityComparer : IEqualityComparer // TypeDefIndex: 1348
	{
		// Fields
		internal static readonly ObjectEqualityComparer Default; // 0x00
	
		// Constructors
		private ObjectEqualityComparer(); // 0x00937FE4-0x00937FEC
		static ObjectEqualityComparer(); // 0x0093803C-0x009380A0
	
		// Methods
		int IEqualityComparer.GetHashCode(object obj); // 0x00937FEC-0x0093800C
		bool IEqualityComparer.Equals(object x, object y); // 0x0093800C-0x0093803C
	}

	[Serializable]
	[TypeDependency] // 0x0039AA34-0x0039AA6C
	public abstract class Comparer<T> : IComparer, IComparer<T> // TypeDefIndex: 1349
	{
		// Fields
		private static Comparer<T> defaultComparer;
	
		// Properties
		public static Comparer<T> Default { get; }
	
		// Constructors
		protected Comparer();
	
		// Methods
		private static Comparer<T> CreateComparer();
		public abstract int Compare(T x, T y);
		int IComparer.Compare(object x, object y);
	}

	[Serializable]
	internal class GenericComparer<T> : Comparer<T> // TypeDefIndex: 1350
		where T : IComparable<T>
	{
		// Constructors
		public GenericComparer();
	
		// Methods
		public override int Compare(T x, T y);
		public override bool Equals(object obj);
		public override int GetHashCode();
	}

	[Serializable]
	internal class NullableComparer<T> : Comparer<T?> // TypeDefIndex: 1351
		where T : struct, IComparable<T>
	{
		// Constructors
		public NullableComparer();
	
		// Methods
		public override int Compare(T? x, T? y);
		public override bool Equals(object obj);
		public override int GetHashCode();
	}

	[Serializable]
	internal class ObjectComparer<T> : Comparer<T> // TypeDefIndex: 1352
	{
		// Constructors
		public ObjectComparer();
	
		// Methods
		public override int Compare(T x, T y);
		public override bool Equals(object obj);
		public override int GetHashCode();
	}

	internal sealed class Mscorlib_CollectionDebugView<T> // TypeDefIndex: 1353
	{
	}

	[Serializable]
	[TypeDependency] // 0x0039AA6C-0x0039AAA4
	public abstract class EqualityComparer<T> : IEqualityComparer, IEqualityComparer<T> // TypeDefIndex: 1354
	{
		// Fields
		private static EqualityComparer<T> defaultComparer;
	
		// Properties
		public static EqualityComparer<T> Default { get; }
	
		// Constructors
		protected EqualityComparer();
	
		// Methods
		private static EqualityComparer<T> CreateComparer();
		public abstract bool Equals(T x, T y);
		public abstract int GetHashCode(T obj);
		internal virtual int IndexOf(T[] array, T value, int startIndex, int count);
		internal virtual int LastIndexOf(T[] array, T value, int startIndex, int count);
		int IEqualityComparer.GetHashCode(object obj);
		bool IEqualityComparer.Equals(object x, object y);
	}

	[Serializable]
	internal class GenericEqualityComparer<T> : EqualityComparer<T> // TypeDefIndex: 1355
		where T : IEquatable<T>
	{
		// Constructors
		public GenericEqualityComparer();
	
		// Methods
		public override bool Equals(T x, T y);
		public override int GetHashCode(T obj);
		internal override int IndexOf(T[] array, T value, int startIndex, int count);
		internal override int LastIndexOf(T[] array, T value, int startIndex, int count);
		public override bool Equals(object obj);
		public override int GetHashCode();
	}

	[Serializable]
	internal class NullableEqualityComparer<T> : EqualityComparer<T?> // TypeDefIndex: 1356
		where T : struct, IEquatable<T>
	{
		// Constructors
		public NullableEqualityComparer();
	
		// Methods
		public override bool Equals(T? x, T? y);
		public override int GetHashCode(T? obj);
		internal override int IndexOf(T?[] array, T? value, int startIndex, int count);
		internal override int LastIndexOf(T?[] array, T? value, int startIndex, int count);
		public override bool Equals(object obj);
		public override int GetHashCode();
	}

	[Serializable]
	internal class ObjectEqualityComparer<T> : EqualityComparer<T> // TypeDefIndex: 1357
	{
		// Constructors
		public ObjectEqualityComparer();
	
		// Methods
		public override bool Equals(T x, T y);
		public override int GetHashCode(T obj);
		internal override int IndexOf(T[] array, T value, int startIndex, int count);
		internal override int LastIndexOf(T[] array, T value, int startIndex, int count);
		public override bool Equals(object obj);
		public override int GetHashCode();
	}

	[Serializable]
	internal class ByteEqualityComparer : EqualityComparer<byte> // TypeDefIndex: 1358
	{
		// Constructors
		public ByteEqualityComparer(); // 0x00937B8C-0x00937BDC
	
		// Methods
		public override bool Equals(byte x, byte y); // 0x00937858-0x00937868
		public override int GetHashCode(byte b); // 0x00937868-0x00937870
		internal override int IndexOf(byte[] array, byte value, int startIndex, int count); // 0x00937870-0x00937A24
		internal override int LastIndexOf(byte[] array, byte value, int startIndex, int count); // 0x00937A24-0x00937AB8
		public override bool Equals(object obj); // 0x00937AB8-0x00937B38
		public override int GetHashCode(); // 0x00937B38-0x00937B8C
	}

	[Serializable]
	internal class EnumEqualityComparer<T> : EqualityComparer<T>, ISerializable // TypeDefIndex: 1359
		where T : struct
	{
		// Constructors
		public EnumEqualityComparer();
		protected EnumEqualityComparer(SerializationInfo information, StreamingContext context);
	
		// Methods
		public override bool Equals(T x, T y);
		public override int GetHashCode(T obj);
		public void GetObjectData(SerializationInfo info, StreamingContext context);
		public override bool Equals(object obj);
		public override int GetHashCode();
	}

	[Serializable]
	internal sealed class SByteEnumEqualityComparer<T> : EnumEqualityComparer<T>, ISerializable // TypeDefIndex: 1360
		where T : struct
	{
		// Constructors
		public SByteEnumEqualityComparer();
		public SByteEnumEqualityComparer(SerializationInfo information, StreamingContext context);
	
		// Methods
		public override int GetHashCode(T obj);
	}

	[Serializable]
	internal sealed class ShortEnumEqualityComparer<T> : EnumEqualityComparer<T>, ISerializable // TypeDefIndex: 1361
		where T : struct
	{
		// Constructors
		public ShortEnumEqualityComparer();
		public ShortEnumEqualityComparer(SerializationInfo information, StreamingContext context);
	
		// Methods
		public override int GetHashCode(T obj);
	}

	[Serializable]
	internal sealed class LongEnumEqualityComparer<T> : EqualityComparer<T>, ISerializable // TypeDefIndex: 1362
		where T : struct
	{
		// Constructors
		public LongEnumEqualityComparer();
		public LongEnumEqualityComparer(SerializationInfo information, StreamingContext context);
	
		// Methods
		public override bool Equals(T x, T y);
		public override int GetHashCode(T obj);
		public override bool Equals(object obj);
		public override int GetHashCode();
		public void GetObjectData(SerializationInfo info, StreamingContext context);
	}

	[Serializable]
	internal sealed class InternalStringComparer : EqualityComparer<string> // TypeDefIndex: 1363
	{
		// Constructors
		public InternalStringComparer(); // 0x00937D70-0x00937DC0
	
		// Methods
		public override int GetHashCode(string obj); // 0x00937CB8-0x00937CD8
		public override bool Equals(string x, string y); // 0x00937CD8-0x00937D08
		internal override int IndexOf(string[] array, string value, int startIndex, int count); // 0x00937D08-0x00937D70
	}

	[TypeDependency] // 0x0039AAA4-0x0039AADC
	public interface ICollection<T> : IEnumerable<T> // TypeDefIndex: 1364
	{
		// Properties
		int Count { get; }
		bool IsReadOnly { get; }
	
		// Methods
		void Add(T item);
		void Clear();
		bool Contains(T item);
		void CopyTo(T[] array, int arrayIndex);
		bool Remove(T item);
	}

	public interface IComparer<in T> // TypeDefIndex: 1365
	{
		// Methods
		int Compare(T x, T y);
	}

	public interface IDictionary<TKey, TValue> : ICollection<KeyValuePair<TKey, TValue>> // TypeDefIndex: 1366
	{
		// Properties
		TValue this[TKey key] { get => default; set {} }
		ICollection<TKey> Keys { get; }
	
		// Methods
		bool ContainsKey(TKey key);
		void Add(TKey key, TValue value);
		bool Remove(TKey key);
		bool TryGetValue(TKey key, out TValue value);
	}

	[TypeDependency] // 0x0039AB14-0x0039AB4C
	public interface IEnumerable<out T> : IEnumerable // TypeDefIndex: 1367
	{
		// Methods
		IEnumerator<T> GetEnumerator();
	}

	public interface IEnumerator<out T> : IDisposable, IEnumerator // TypeDefIndex: 1368
	{
		// Properties
		T Current { get; }
	}

	public interface IEqualityComparer<in T> // TypeDefIndex: 1369
	{
		// Methods
		bool Equals(T x, T y);
		int GetHashCode(T obj);
	}

	[TypeDependency] // 0x0039AB4C-0x0039ABAC
	public interface IList<T> : ICollection<T> // TypeDefIndex: 1370
	{
		// Properties
		T this[int index] { get => default; set {} }
	
		// Methods
		int IndexOf(T item);
		void Insert(int index, T item);
		void RemoveAt(int index);
	}

	[TypeDependency] // 0x0039ABAC-0x0039ABE4
	public interface IReadOnlyCollection<out T> : IEnumerable<T> // TypeDefIndex: 1371
	{
		// Properties
		int Count { get; }
	}

	[DefaultMember] // 0x0039ABE4-0x0039AC1C
	public interface IReadOnlyDictionary<TKey, TValue> : IReadOnlyCollection<KeyValuePair<TKey, TValue>> // TypeDefIndex: 1372
	{
		// Methods
		bool TryGetValue(TKey key, out TValue value);
	}

	[TypeDependency] // 0x0039AC1C-0x0039AC7C
	public interface IReadOnlyList<out T> : IReadOnlyCollection<T> // TypeDefIndex: 1373
	{
		// Properties
		T this[int index] { get => default; }
	}

	[Serializable]
	[ComVisible] // 0x0039AC7C-0x0039AC90
	public class KeyNotFoundException : SystemException, ISerializable // TypeDefIndex: 1374
	{
		// Constructors
		public KeyNotFoundException(); // 0x00937DC0-0x00937E34
		public KeyNotFoundException(string message); // 0x00937E34-0x00937E68
		protected KeyNotFoundException(SerializationInfo info, StreamingContext context); // 0x00937E68-0x00937E70
	}

	[Serializable]
	[DebuggerDisplay] // 0x0039AC90-0x0039AD3C
	[DebuggerTypeProxy] // 0x0039AC90-0x0039AD3C
	public class List<T> : IList<T>, IList, IReadOnlyList<T> // TypeDefIndex: 1375
	{
		// Fields
		private const int _defaultCapacity = 4; // Metadata: 0x0020528E
		private T[] _items;
		private int _size;
		private int _version;
		[NonSerialized]
		private object _syncRoot;
		private static readonly T[] _emptyArray;
	
		// Properties
		public int Capacity { get; set; }
		public int Count { get; }
		bool IList.IsFixedSize { get; }
		bool ICollection<T>.IsReadOnly { get; }
		bool IList.IsReadOnly { get; }
		bool ICollection.IsSynchronized { get; }
		object ICollection.SyncRoot { get; }
		public T this[int index] { get => default; set {} }
		object IList.this[int index] { get => default; set {} }
	
		// Nested types
		[Serializable]
		public struct Enumerator : IEnumerator<T> // TypeDefIndex: 1376
		{
			// Fields
			private List<T> list;
			private int index;
			private int version;
			private T current;
	
			// Properties
			public T Current { get; }
			object IEnumerator.Current { get; }
	
			// Constructors
			internal Enumerator(List<T> list);
	
			// Methods
			public void Dispose();
			public bool MoveNext();
			private bool MoveNextRare();
			void IEnumerator.Reset();
		}
	
		// Constructors
		public List();
		public List(int capacity);
		public List(IEnumerable<T> collection);
		static List();
	
		// Methods
		private static bool IsCompatibleObject(object value);
		public void Add(T item);
		int IList.Add(object item);
		public void AddRange(IEnumerable<T> collection);
		public ReadOnlyCollection<T> AsReadOnly();
		public void Clear();
		public bool Contains(T item);
		bool IList.Contains(object item);
		public void CopyTo(T[] array);
		void ICollection.CopyTo(Array array, int arrayIndex);
		public void CopyTo(int index, T[] array, int arrayIndex, int count);
		public void CopyTo(T[] array, int arrayIndex);
		private void EnsureCapacity(int min);
		public T Find(Predicate<T> match);
		public void ForEach(Action<T> action);
		public Enumerator GetEnumerator();
		IEnumerator<T> IEnumerable<T>.GetEnumerator();
		IEnumerator IEnumerable.GetEnumerator();
		public int IndexOf(T item);
		int IList.IndexOf(object item);
		public void Insert(int index, T item);
		void IList.Insert(int index, object item);
		public void InsertRange(int index, IEnumerable<T> collection);
		public bool Remove(T item);
		void IList.Remove(object item);
		public int RemoveAll(Predicate<T> match);
		public void RemoveAt(int index);
		public void RemoveRange(int index, int count);
		public void Reverse();
		public void Reverse(int index, int count);
		public void Sort();
		public void Sort(IComparer<T> comparer);
		public void Sort(int index, int count, IComparer<T> comparer);
		public void Sort(Comparison<T> comparison);
		public T[] ToArray();
		public void TrimExcess();
	}
}

[CompilerGenerated] // 0x0039AD3C-0x0039AD4C
internal sealed class <PrivateImplementationDetails> // TypeDefIndex: 1377
{
	// Fields
	internal static readonly __StaticArrayInitTypeSize=256 0392525BCB01691D1F319D89F2C12BF93A478467; // 0x00 // Starts with: d9 78 f9 c4 19 dd b5 ed - Metadata: 0x00205292
	internal static readonly __StaticArrayInitTypeSize=72 0588059ACBD52F7EA2835882F977A9CF72EB9775; // 0x100 // Starts with: 20 00 00 00 1e 00 00 00 - Metadata: 0x00205392
	internal static readonly __StaticArrayInitTypeSize=84 0A1ADB22C1D3E1F4B2448EE3F27DF9DE63329C4C; // 0x148 // Starts with: 05 00 00 00 0b 00 00 00 - Metadata: 0x002053DA
	internal static readonly __StaticArrayInitTypeSize=240 121EC59E23F7559B28D338D562528F6299C2DE22; // 0x19C // Starts with: 37 00 00 00 39 00 00 00 - Metadata: 0x0020542E
	internal static readonly __StaticArrayInitTypeSize=3 12D04472A8285260EA12FD3813CDFA9F2D2B548C; // 0x28C // Starts with: 55 04 07 55 04 0c 00 12 - Metadata: 0x0020551E
	internal static readonly __StaticArrayInitTypeSize=3 13A35EF1A549297C70E2AD46045BBD2ECA17852D; // 0x28F // Starts with: 55 04 0c 00 12 00 00 00 - Metadata: 0x00205521
	internal static readonly __StaticArrayInitTypeSize=24 1730F09044E91DB8371B849EFF5E6D17BDE4AED0; // 0x292 // Starts with: 00 12 00 00 00 28 00 00 - Metadata: 0x00205524
	internal static readonly __StaticArrayInitTypeSize=3 1A84029C80CB5518379F199F53FF08A7B764F8FD; // 0x2AA // Starts with: 55 04 03 c6 63 63 a5 f8 - Metadata: 0x0020553C
	internal static readonly __StaticArrayInitTypeSize=4096 1AEF3D8DF416A46288C91C724CBF7B154D9E5BF3; // 0x2AD // Starts with: c6 63 63 a5 f8 7c 7c 84 - Metadata: 0x0020553F
	internal static readonly __StaticArrayInitTypeSize=2048 1E41C4CD0767AEA21C00DEABA2EA9407F1E6CEA5; // 0x12AD // Starts with: 00 00 00 00 00 00 00 00 - Metadata: 0x0020653F
	internal static readonly __StaticArrayInitTypeSize=16 1FE6CE411858B3D864679DE2139FB081F08BFACD; // 0x1AAD // Starts with: 00 12 00 00 00 28 00 00 - Metadata: 0x00206D3F
	internal static readonly __StaticArrayInitTypeSize=3 235D99572263B22ADFEE10FDA0C25E12F4D94FFC; // 0x1ABD // Starts with: 55 04 09 ff ff ff ff ff - Metadata: 0x00206D4F
	internal static readonly __StaticArrayInitTypeSize=40 25420D0055076FA8D3E4DD96BC53AE24DE6E619F; // 0x1AC0 // Starts with: ff ff ff ff ff ff ff ff - Metadata: 0x00206D52
	internal static readonly __StaticArrayInitTypeSize=1208 25CF935D2AE9EDF05DD75BCD47FF84D9255D6F6E; // 0x1AE8 // Starts with: 00 01 41 00 01 01 61 00 - Metadata: 0x00206D7A
	internal static readonly __StaticArrayInitTypeSize=42 29C1A61550F0E3260E1953D4FAD71C256218EF40; // 0x1FA0 // Starts with: 60 21 61 21 62 21 63 21 - Metadata: 0x00207232
	internal static readonly __StaticArrayInitTypeSize=12 2B33BEC8C30DFDC49DAFE20D3BDE19487850D717; // 0x1FCA // Starts with: 00 31 00 00 00 4e 00 00 - Metadata: 0x0020725C
	internal static readonly __StaticArrayInitTypeSize=36 2BA840FF6020B8FF623DBCB7188248CF853FAF4F; // 0x1FD6 // Starts with: 90 00 00 00 20 09 00 00 - Metadata: 0x00207268
	internal static readonly __StaticArrayInitTypeSize=72 2C840AFA48C27B9C05593E468C1232CA1CC74AFD; // 0x1FFA // Starts with: 14 00 00 00 23 00 00 00 - Metadata: 0x0020728C
	internal static readonly __StaticArrayInitTypeSize=16 2D1DA5BB407F0C11C3B5116196C0C6374D932B20; // 0x2042 // Starts with: 00 0f 00 00 00 28 00 00 - Metadata: 0x002072D4
	internal static readonly __StaticArrayInitTypeSize=14 2D3CF0F15AC2DDEC2956EA1B7BBE43FB8B923130; // 0x2052 // Starts with: 2c 00 2b 00 22 00 5c 00 - Metadata: 0x002072E4
	internal static readonly __StaticArrayInitTypeSize=72 2F71D2DA12F3CD0A6A112F5A5A75B4FDC6FE8547; // 0x2060 // Starts with: 14 00 00 00 19 00 00 00 - Metadata: 0x002072F2
	internal static readonly __StaticArrayInitTypeSize=64 320B018758ECE3752FFEDBAEB1A6DB67C80B9359; // 0x20A8 // Starts with: 01 01 01 01 01 01 01 01 - Metadata: 0x0020733A
	internal static readonly __StaticArrayInitTypeSize=72 34476C29F6F81C989CFCA42F7C06E84C66236834; // 0x20E8 // Starts with: 14 00 00 00 15 00 00 00 - Metadata: 0x0020737A
	internal static readonly __StaticArrayInitTypeSize=2382 35EED060772F2748D13B745DAEC8CD7BD3B87604; // 0x2130 // Starts with: c0 00 c1 00 c2 00 c3 00 - Metadata: 0x002073C2
	internal static readonly __StaticArrayInitTypeSize=38 375F9AE9769A3D1DA789E9ACFE81F3A1BB14F0D3; // 0x2A7E // Starts with: 64 00 44 00 66 00 46 00 - Metadata: 0x00207D10
	internal static readonly __StaticArrayInitTypeSize=1450 379C06C9E702D31469C29033F0DD63931EB349F5; // 0x2AA4 // Starts with: 1a 01 28 00 17 00 10 00 - Metadata: 0x00207D36
	internal static readonly __StaticArrayInitTypeSize=10 399BD13E240F33F808CA7940293D6EC4E6FD5A00; // 0x304E // Starts with: 3c 00 3e 00 22 00 27 00 - Metadata: 0x002082E0
	internal static readonly __StaticArrayInitTypeSize=72 39C9CE73C7B0619D409EF28344F687C1B5C130FE; // 0x3058 // Starts with: 14 00 00 00 1e 00 00 00 - Metadata: 0x002082EA
	internal static readonly __StaticArrayInitTypeSize=320 3C53AFB51FEC23491684C7BEDBC6D4E0F409F851; // 0x30A0 // Starts with: ff ff 00 00 01 01 02 02 - Metadata: 0x00208332
	internal static readonly __StaticArrayInitTypeSize=3 3E3442C7396F3F2BB4C7348F4A2074C7DC677D68; // 0x31E0 // Starts with: 55 04 0b 00 31 00 00 00 - Metadata: 0x00208472
	internal static readonly __StaticArrayInitTypeSize=12 3E823444D2DFECF0F90B436B88F02A533CB376F1; // 0x31E3 // Starts with: 00 31 00 00 00 4e 00 00 - Metadata: 0x00208475
	internal static readonly __StaticArrayInitTypeSize=72 3FE6C283BCF384FD2C8789880DFF59664E2AB4A1; // 0x31EF // Starts with: 18 00 00 00 19 00 00 00 - Metadata: 0x00208481
	internal static readonly __StaticArrayInitTypeSize=1665 40981BAA39513E58B28DCF0103CC04DE2A0A0444; // 0x3237 // Starts with: 1a 01 14 00 1d 00 10 00 - Metadata: 0x002084C9
	internal static readonly __StaticArrayInitTypeSize=40 40E7C49413D261F3F38AD3A870C0AC69C8BDA048; // 0x38B8 // Starts with: ff ff ff ff ff ff ff ff - Metadata: 0x00208B4A
	internal static readonly __StaticArrayInitTypeSize=72 421EC7E82F2967DF6CA8C3605514DC6F29EE5845; // 0x38E0 // Starts with: 22 00 3c 00 3e 00 7c 00 - Metadata: 0x00208B72
	internal static readonly __StaticArrayInitTypeSize=256 433175D38B13FFE177FDD661A309F1B528B3F6E2; // 0x3928 // Starts with: 98 2f 8a 42 91 44 37 71 - Metadata: 0x00208BBA
	internal static readonly __StaticArrayInitTypeSize=120 46232052BC757E030490D851F265FB47FA100902; // 0x3A28 // Starts with: 01 00 00 00 02 00 00 00 - Metadata: 0x00208CBA
	internal static readonly __StaticArrayInitTypeSize=72 4858DB4AA76D3933F1CA9E6712D4FDB16903F628; // 0x3AA0 // Starts with: 25 00 00 00 25 00 00 00 - Metadata: 0x00208D32
	internal static readonly __StaticArrayInitTypeSize=48 4E3B533C39447AAEB59A8E48FABD7E15B5B5D195; // 0x3AE8 // Starts with: 38 b0 60 a7 51 ac 96 38 - Metadata: 0x00208D7A
	internal static readonly __StaticArrayInitTypeSize=40 4F7A8890F332B22B8DE0BD29D36FA7364748D76A; // 0x3B18 // Starts with: 01 00 00 00 0a 00 00 00 - Metadata: 0x00208DAA
	internal static readonly __StaticArrayInitTypeSize=72 536422B321459B242ADED7240B7447E904E083E3; // 0x3B40 // Starts with: 14 00 00 00 20 00 00 00 - Metadata: 0x00208DD2
	internal static readonly __StaticArrayInitTypeSize=1080 5382CEF491F422BFE0D6FC46EFAFF9EF9D4C89F3; // 0x3B88 // Starts with: 00 00 00 00 00 00 f0 bf - Metadata: 0x00208E1A
	internal static readonly __StaticArrayInitTypeSize=10 56DFA5053B3131883637F53219E7D88CCEF35949; // 0x3FC0 // Starts with: 09 92 26 89 93 f2 2c 64 - Metadata: 0x00209252
	internal static readonly __StaticArrayInitTypeSize=3 57218C316B6921E2CD61027A2387EDC31A2D9471; // 0x3FCA // Starts with: ef bb bf ff ff ff ff ff - Metadata: 0x0020925C
	internal static readonly __StaticArrayInitTypeSize=40 57F320D62696EC99727E0FE2045A05F1289CC0C6; // 0x3FCD // Starts with: ff ff ff ff ff ff ff ff - Metadata: 0x0020925F
	internal static readonly __StaticArrayInitTypeSize=212 594A33A00BC4F785DFD43E3C6C44FBA1242CCAF3; // 0x3FF5 // Starts with: 22 a7 24 a7 24 a7 26 a7 - Metadata: 0x00209287
	internal static readonly __StaticArrayInitTypeSize=36 5BBDF8058D4235C33F2E8DCF76004031B6187A2F; // 0x40C9 // Starts with: e0 06 00 00 00 11 00 00 - Metadata: 0x0020935B
	internal static readonly __StaticArrayInitTypeSize=288 5BCD21C341BE6DDF8FFFAE1A23ABA24DCBB612BF; // 0x40ED // Starts with: 03 00 00 00 07 00 00 00 - Metadata: 0x0020937F
	internal static readonly __StaticArrayInitTypeSize=72 5BFE2819B4778217C56416C7585FF0E56EBACD89; // 0x420D // Starts with: 14 00 00 00 17 00 00 00 - Metadata: 0x0020949F
	internal static readonly __StaticArrayInitTypeSize=128 609C0E8D8DA86A09D6013D301C86BA8782C16B8C; // 0x4255 // Starts with: 00 00 00 00 00 00 f0 3f - Metadata: 0x002094E7
	internal static readonly __StaticArrayInitTypeSize=48 62BAB0F245E66C3EB982CF5A7015F0A7C3382283; // 0x42D5 // Starts with: 0d 10 0a 17 00 04 02 1b - Metadata: 0x00209567
	internal static readonly __StaticArrayInitTypeSize=2048 646036A65DECCD6835C914A46E6E44B729433B60; // 0x4305 // Starts with: 00 00 00 00 00 00 00 00 - Metadata: 0x00209597
	internal static readonly __StaticArrayInitTypeSize=40 65E32B4E150FD8D24B93B0D42A17F1DAD146162B; // 0x4B05 // Starts with: 02 00 00 00 03 00 00 00 - Metadata: 0x00209D97
	internal static readonly __StaticArrayInitTypeSize=52 6770974FEF1E98B9C1864370E2B5B786EB0EA39E; // 0x4B2D // Starts with: d0 24 d1 24 d2 24 d3 24 - Metadata: 0x00209DBF
	internal static readonly __StaticArrayInitTypeSize=72 67EEAD805D708D9AA4E14BF747E44CED801744F3; // 0x4B61 // Starts with: 1c 00 00 00 1d 00 00 00 - Metadata: 0x00209DF3
	internal static readonly __StaticArrayInitTypeSize=120 6C71197D228427B2864C69B357FEF73D8C9D59DF; // 0x4BA9 // Starts with: f0 02 00 00 80 04 00 00 - Metadata: 0x00209E3B
	internal static readonly __StaticArrayInitTypeSize=9 6D49C9D487D7AD3491ECE08732D68A593CC2038D; // 0x4C21 // Starts with: 2a 86 48 86 f7 0d 01 09 - Metadata: 0x00209EB3
	internal static readonly __StaticArrayInitTypeSize=2048 6D797C11E1D4FB68B6570CF2A92B792433527065; // 0x4C2A // Starts with: 00 82 80 00 00 00 00 00 - Metadata: 0x00209EBC
	internal static readonly __StaticArrayInitTypeSize=3132 6E5DC824F803F8565AF31B42199DAE39FE7F4EA9; // 0x542A // Starts with: 02 00 00 00 03 00 00 00 - Metadata: 0x0020A6BC
	internal static readonly __StaticArrayInitTypeSize=76 6FC754859E4EC74E447048364B216D825C6F8FE7; // 0x6066 // Starts with: a0 10 a1 10 a2 10 a3 10 - Metadata: 0x0020B2F8
	internal static readonly __StaticArrayInitTypeSize=40 704939CD172085D1295FCE3F1D92431D685D7AA2; // 0x60B2 // Starts with: 01 00 00 00 0a 00 00 00 - Metadata: 0x0020B344
	internal static readonly __StaticArrayInitTypeSize=24 7088AAE49F0627B72729078DE6E3182DDCF8ED99; // 0x60DA // Starts with: 00 00 00 00 00 1e 00 00 - Metadata: 0x0020B36C
	internal static readonly __StaticArrayInitTypeSize=72 7341C933A70EAE383CC50C4B945ADB8E08F06737; // 0x60F2 // Starts with: 21 00 00 00 1f 00 00 00 - Metadata: 0x0020B384
	internal static readonly __StaticArrayInitTypeSize=3 736D39815215889F11249D9958F6ED12D37B9F57; // 0x613A // Starts with: 55 04 06 51 f4 a7 50 7e - Metadata: 0x0020B3CC
	internal static readonly __StaticArrayInitTypeSize=4096 7F42F2EDC974BE29B2746957416ED1AEFA605F47; // 0x613D // Starts with: 51 f4 a7 50 7e 41 65 53 - Metadata: 0x0020B3CF
	internal static readonly __StaticArrayInitTypeSize=40 7FE820C9CF0F0B90445A71F1D262D22E4F0C4C68; // 0x713D // Starts with: ff ff ff ff ff ff ff ff - Metadata: 0x0020C3CF
	internal static readonly __StaticArrayInitTypeSize=21252 811A927B7DADD378BE60BBDE794B9277AA9B50EC; // 0x7165 // Starts with: 00 11 10 11 20 11 30 11 - Metadata: 0x0020C3F7
	internal static readonly __StaticArrayInitTypeSize=36 81917F1E21F3C22B9F916994547A614FB03E968E; // 0xC469 // Starts with: 00 00 00 00 00 09 00 00 - Metadata: 0x002116FB
	internal static readonly __StaticArrayInitTypeSize=40 823566DA642D6EA356E15585921F2A4CA23D6760; // 0xC48D // Starts with: ff ff ff ff ff ff ff ff - Metadata: 0x0021171F
	internal static readonly __StaticArrayInitTypeSize=12 82C2A59850B2E85BCE1A45A479537A384DF6098D; // 0xC4B5 // Starts with: 80 04 00 00 10 14 00 00 - Metadata: 0x00211747
	internal static readonly __StaticArrayInitTypeSize=44 82C383F8E6E4D3D87AEBB986A5D0077E8AD157C4; // 0xC4C1 // Starts with: e0 06 00 00 00 12 00 00 - Metadata: 0x00211753
	internal static readonly __StaticArrayInitTypeSize=3 86F4F563FA2C61798AE6238D789139739428463A; // 0xC4ED // Starts with: 55 04 2e ff ff ff ff ff - Metadata: 0x0021177F
	internal static readonly __StaticArrayInitTypeSize=40 871B9CF85DB352BAADF12BAE8F19857683E385AC; // 0xC4F0 // Starts with: ff ff ff ff ff ff ff ff - Metadata: 0x00211782
	internal static readonly __StaticArrayInitTypeSize=16 89A040451C8CC5C8FB268BE44BDD74964C104155; // 0xC518 // Starts with: 00 00 00 00 00 1e 00 00 - Metadata: 0x002117AA
	internal static readonly __StaticArrayInitTypeSize=40 8CAA092E783257106251246FF5C97F88D28517A6; // 0xC528 // Starts with: ff ff ff ff ff ff ff ff - Metadata: 0x002117BA
	internal static readonly __StaticArrayInitTypeSize=2100 8D231DD55FE1AD7631BBD0905A17D5EB616C2154; // 0xC550 // Starts with: 1a 01 1c 00 1d 00 0f 00 - Metadata: 0x002117E2
	internal static readonly __StaticArrayInitTypeSize=40 8E10AC2F34545DFBBF3FCBC06055D797A8C99991; // 0xCD84 // Starts with: ff ff ff ff ff ff ff ff - Metadata: 0x00212016
	internal static readonly __StaticArrayInitTypeSize=256 8F22C9ECE1331718CBD268A9BBFD2F5E451441E3; // 0xCDAC // Starts with: 63 7c 77 7b f2 6b 6f c5 - Metadata: 0x0021203E
	internal static readonly __StaticArrayInitTypeSize=640 90A0542282A011472F94E97CEAE59F8B3B1A3291; // 0xCEAC // Starts with: 22 ae 28 d7 98 2f 8a 42 - Metadata: 0x0021213E
	internal static readonly __StaticArrayInitTypeSize=12 93A63E90605400F34B49F0EB3361D23C89164BDA; // 0xD12C // Starts with: 00 34 00 00 00 a0 00 00 - Metadata: 0x002123BE
	internal static readonly __StaticArrayInitTypeSize=72 94841DD2F330CCB1089BF413E4FA9B04505152E2; // 0xD138 // Starts with: 00 00 00 00 14 00 00 00 - Metadata: 0x002123CA
	internal static readonly __StaticArrayInitTypeSize=12 95264589E48F94B7857CFF398FB72A537E13EEE2; // 0xD180 // Starts with: 00 34 00 00 00 a0 00 00 - Metadata: 0x00212412
	internal static readonly __StaticArrayInitTypeSize=72 95C48758CAE1715783472FB073AB158AB8A0AB2A; // 0xD18C // Starts with: 15 00 00 00 16 00 00 00 - Metadata: 0x0021241E
	internal static readonly __StaticArrayInitTypeSize=72 973417296623D8DC6961B09664E54039E44CA5D8; // 0xD1D4 // Starts with: 14 00 00 00 15 00 00 00 - Metadata: 0x00212466
	internal static readonly __StaticArrayInitTypeSize=3 97FB30C84FF4A41CD4625B44B2940BFC8DB43003; // 0xD21C // Starts with: 55 04 08 52 00 00 00 09 - Metadata: 0x002124AE
	internal static readonly __StaticArrayInitTypeSize=4096 99E2E88877D14C7DDC4E957A0ED7079CA0E9EB24; // 0xD21F // Starts with: 52 00 00 00 09 00 00 00 - Metadata: 0x002124B1
	internal static readonly __StaticArrayInitTypeSize=64 9A9C3962CD4753376E3507C8CB5FD8FCC4B4EDB5; // 0xE21F // Starts with: 03 03 03 03 03 03 03 03 - Metadata: 0x002134B1
	internal static readonly __StaticArrayInitTypeSize=3 9BB00D1FCCBAF03165447FC8028E7CA07CA9FE88; // 0xE25F // Starts with: 55 04 0a 64 00 00 00 64 - Metadata: 0x002134F1
	internal static readonly __StaticArrayInitTypeSize=40 A0074C15377C0C870B055927403EA9FA7A349D12; // 0xE262 // Starts with: 64 00 00 00 64 00 00 00 - Metadata: 0x002134F4
	internal static readonly __StaticArrayInitTypeSize=130 A1319B706116AB2C6D44483F60A7D0ACEA543396; // 0xE28A // Starts with: 41 00 42 00 43 00 44 00 - Metadata: 0x0021351C
	internal static readonly long A13AA52274D951A18029131A8DDECF76B569A15D; // 0xE310 // Starts with: 2e 00 02 30 0e ff 61 ff - Metadata: 0x0021359E
	internal static readonly __StaticArrayInitTypeSize=3 A323DB0813C4D072957BA6FDA79D9776674CD06B; // 0xE318 // Starts with: 55 04 2a 23 a7 23 a7 25 - Metadata: 0x002135A6
	internal static readonly __StaticArrayInitTypeSize=212 A5444763673307F6828C748D4B9708CFC02B0959; // 0xE31B // Starts with: 23 a7 23 a7 25 a7 25 a7 - Metadata: 0x002135A9
	internal static readonly __StaticArrayInitTypeSize=72 A6732F8E7FC23766AB329B492D6BF82E3B33233F; // 0xE3EF // Starts with: 14 00 00 00 1f 00 00 00 - Metadata: 0x0021367D
	internal static readonly __StaticArrayInitTypeSize=174 A705A106D95282BD15E13EEA6B0AF583FF786D83; // 0xE437 // Starts with: 40 a6 42 a6 42 a6 44 a6 - Metadata: 0x002136C5
	internal static readonly __StaticArrayInitTypeSize=1018 A8A491E4CED49AE0027560476C10D933CE70C8DF; // 0xE4E5 // Starts with: 01 1e 01 1e 03 1e 03 1e - Metadata: 0x00213773
	internal static readonly __StaticArrayInitTypeSize=72 AC791C4F39504D1184B73478943D0636258DA7B1; // 0xE8DF // Starts with: 17 00 00 00 19 00 00 00 - Metadata: 0x00213B6D
	internal static readonly __StaticArrayInitTypeSize=52 AFCD4E1211233E99373A3367B23105A3D624B1F2; // 0xE927 // Starts with: b6 24 b7 24 b8 24 b9 24 - Metadata: 0x00213BB5
	internal static readonly __StaticArrayInitTypeSize=40 B472ED77CB3B2A66D49D179F1EE2081B70A6AB61; // 0xE95B // Starts with: ff ff ff ff ff ff ff ff - Metadata: 0x00213BE9
	internal static readonly __StaticArrayInitTypeSize=16 B4FBD02AAB5B16E0F4BD858DA5D9E348F3CE501D; // 0xE983 // Starts with: 01 02 04 06 08 0a 0c 0e - Metadata: 0x00213C11
	internal static readonly __StaticArrayInitTypeSize=256 B53A2C6DF21FC88B17AEFC40EB895B8D63210CDF; // 0xE993 // Starts with: 0e 0e 0e 0e 0e 0e 0e 0e - Metadata: 0x00213C21
	internal static readonly __StaticArrayInitTypeSize=4096 B6002BBF29B2704922EC3BBF0F9EE40ABF185D6B; // 0xEA93 // Starts with: 63 00 00 00 7c 00 00 00 - Metadata: 0x00213D21
	internal static readonly __StaticArrayInitTypeSize=998 B881DA88BE0B68D8A6B6B6893822586B8B2CFC45; // 0xFA93 // Starts with: 00 1e 02 1e 02 1e 04 1e - Metadata: 0x00214D21
	internal static readonly __StaticArrayInitTypeSize=162 B8864ACB9DD69E3D42151513C840AAE270BF21C8; // 0xFE79 // Starts with: 1d 00 0e 0e 0e 10 0e 0f - Metadata: 0x00215107
	internal static readonly __StaticArrayInitTypeSize=360 B8F87834C3597B2EEF22BA6D3A392CC925636401; // 0xFF1B // Starts with: 00 2c 01 2c 02 2c 03 2c - Metadata: 0x002151A9
	internal static readonly __StaticArrayInitTypeSize=72 B9B670F134A59FB1107AF01A9FE8F8E3980B3093; // 0x10083 // Starts with: 14 00 00 00 24 00 00 00 - Metadata: 0x00215311
	internal static readonly __StaticArrayInitTypeSize=20 BE1BDEC0AA74B4DCB079943E70528096CCA985F8; // 0x100CB // Starts with: da 39 a3 ee 5e 6b 4b 0d - Metadata: 0x00215359
	internal static readonly __StaticArrayInitTypeSize=72 BEBC9ECC660A13EFC359BA3383411F698CFF25DB; // 0x100DF // Starts with: 14 00 00 00 16 00 00 00 - Metadata: 0x0021536D
	internal static readonly __StaticArrayInitTypeSize=40 BEE1CFE5DFAA408E14CE4AF4DCD824FA2E42DCB7; // 0x10127 // Starts with: ff ff ff ff ff ff ff ff - Metadata: 0x002153B5
	internal static readonly __StaticArrayInitTypeSize=3 BF477463CE2F5EF38FC4C644BBBF4DF109E7670A; // 0x1014F // Starts with: 55 04 2b 22 00 3c 00 3e - Metadata: 0x002153DD
	internal static readonly __StaticArrayInitTypeSize=6 BF5EB60806ECB74EE484105DD9D6F463BF994867; // 0x10152 // Starts with: 22 00 3c 00 3e 00 44 00 - Metadata: 0x002153E0
	internal static readonly long C1A1100642BA9685B30A84D97348484E14AA1865; // 0x10158 // Starts with: 44 00 48 00 4d 00 53 00 - Metadata: 0x002153E6
	internal static readonly __StaticArrayInitTypeSize=16 C6F364A0AD934EFED8909446C215752E565D77C1; // 0x10160 // Starts with: 09 00 0a 00 0b 00 0c 00 - Metadata: 0x002153EE
	internal static readonly __StaticArrayInitTypeSize=174 CE5835130F5277F63D716FC9115526B0AC68FFAD; // 0x10170 // Starts with: 41 a6 41 a6 43 a6 43 a6 - Metadata: 0x002153FE
	internal static readonly __StaticArrayInitTypeSize=6 CE93C35B755802BC4B3D180716B048FC61701EF7; // 0x1021E // Starts with: 20 00 3c 00 3e 00 02 02 - Metadata: 0x002154AC
	internal static readonly __StaticArrayInitTypeSize=64 CF0B42666EF5E37EDEA0AB8E173E42C196D03814; // 0x10224 // Starts with: 02 02 02 02 02 02 02 02 - Metadata: 0x002154B2
	internal static readonly __StaticArrayInitTypeSize=256 D002CBBE1FF33721AF7C4D1D3ECAD1B7DB5258B7; // 0x10264 // Starts with: 78 a4 6a d7 56 b7 c7 e8 - Metadata: 0x002154F2
	internal static readonly __StaticArrayInitTypeSize=32 D117188BE8D4609C0D531C51B0BB911A4219DEBE; // 0x10364 // Starts with: 70 21 71 21 72 21 73 21 - Metadata: 0x002155F2
	internal static readonly __StaticArrayInitTypeSize=32 D28E8ABDBD777A482CE0EE5C24814ACAE52AABFE; // 0x10384 // Starts with: e3 b0 c4 42 98 fc 1c 14 - Metadata: 0x00215612
	internal static readonly __StaticArrayInitTypeSize=256 D2C5BAE967587C6F3D9F2C4551911E0575A1101F; // 0x103A4 // Starts with: 29 2e 43 c9 a2 d8 7c 01 - Metadata: 0x00215632
	internal static readonly __StaticArrayInitTypeSize=44 D78D08081C7A5AD6FBA7A8DC86BCD6D7A577C636; // 0x104A4 // Starts with: 00 00 00 00 10 09 00 00 - Metadata: 0x00215732
	internal static readonly __StaticArrayInitTypeSize=76 DA19DB47B583EFCF7825D2E39D661D2354F28219; // 0x104D0 // Starts with: 00 2d 01 2d 02 2d 03 2d - Metadata: 0x0021575E
	internal static readonly __StaticArrayInitTypeSize=56 DC2B830D8CD59AD6A4E4332D21CA0DCA2821AD82; // 0x1051C // Starts with: 38 30 28 20 18 10 08 00 - Metadata: 0x002157AA
	internal static readonly __StaticArrayInitTypeSize=52 DD3AEFEADB1CD615F3017763F1568179FEE640B0; // 0x10554 // Starts with: 00 00 00 00 1f 00 00 00 - Metadata: 0x002157E2
	internal static readonly __StaticArrayInitTypeSize=36 E1827270A5FE1C85F5352A66FD87BA747213D006; // 0x10588 // Starts with: 00 07 00 00 00 12 00 00 - Metadata: 0x00215816
	internal static readonly __StaticArrayInitTypeSize=40 E45BAB43F7D5D038672B3E3431F92E34A7AF2571; // 0x105AC // Starts with: ff ff ff ff ff ff ff ff - Metadata: 0x0021583A
	internal static readonly __StaticArrayInitTypeSize=64 E75835D001C843F156FBA01B001DFE1B8029AC17; // 0x105D4 // Starts with: cf 83 e1 35 7e ef b8 bd - Metadata: 0x00215862
	internal static readonly __StaticArrayInitTypeSize=52 E92B39D8233061927D9ACDE54665E68E7535635A; // 0x10614 // Starts with: 00 00 00 00 1f 00 00 00 - Metadata: 0x002158A2
	internal static readonly __StaticArrayInitTypeSize=12 EA9506959484C55CFE0C139C624DF6060E285866; // 0x10648 // Starts with: 80 10 00 00 80 15 00 00 - Metadata: 0x002158D6
	internal static readonly __StaticArrayInitTypeSize=262 EB5E9A80A40096AB74D2E226650C7258D7BC5E9D; // 0x10654 // Starts with: 61 2c 61 2c 6b 02 7d 1d - Metadata: 0x002158E2
	internal static readonly __StaticArrayInitTypeSize=64 EBF68F411848D603D059DFDEA2321C5A5EA78044; // 0x1075A // Starts with: 00 00 00 00 04 00 00 00 - Metadata: 0x002159E8
	internal static readonly __StaticArrayInitTypeSize=10 EC5BB4F59D4B9B2E9ECD3904D44A8275F23AFB11; // 0x1079A // Starts with: 09 92 26 89 93 f2 2c 64 - Metadata: 0x00215A28
	internal static readonly __StaticArrayInitTypeSize=3 EC83FB16C20052BEE2B4025159BC2ED45C9C70C3; // 0x107A4 // Starts with: 55 04 04 1a 00 00 00 1b - Metadata: 0x00215A32
	internal static readonly __StaticArrayInitTypeSize=72 EC89C317EA2BF49A70EFF5E89C691E34733D7C37; // 0x107A7 // Starts with: 1a 00 00 00 1b 00 00 00 - Metadata: 0x00215A35
	internal static readonly __StaticArrayInitTypeSize=40 F06E829E62F3AFBC045D064E10A4F5DF7C969612; // 0x107EF // Starts with: ff ff ff ff ff ff ff ff - Metadata: 0x00215A7D
	internal static readonly __StaticArrayInitTypeSize=11614 F073AA332018FDA0D572E99448FFF1D6422BD520; // 0x10817 // Starts with: 00 11 10 11 10 11 10 11 - Metadata: 0x00215AA5
	internal static readonly __StaticArrayInitTypeSize=120 F34B0E10653402E8F788F8BC3F7CD7090928A429; // 0x13575 // Starts with: 60 03 00 00 90 04 00 00 - Metadata: 0x00218803
	internal static readonly __StaticArrayInitTypeSize=72 F37E34BEADB04F34FCC31078A59F49856CA83D5B; // 0x135ED // Starts with: 15 00 00 00 16 00 00 00 - Metadata: 0x0021887B
	internal static readonly __StaticArrayInitTypeSize=94 F512A9ABF88066AAEB92684F95CC05D8101B462B; // 0x13635 // Starts with: 30 2c 31 2c 32 2c 33 2c - Metadata: 0x002188C3
	internal static readonly __StaticArrayInitTypeSize=12 F8FAABB821300AA500C2CEC6091B3782A7FB44A4; // 0x13693 // Starts with: 00 34 00 00 00 a5 00 00 - Metadata: 0x00218921
	internal static readonly __StaticArrayInitTypeSize=2350 FCBD2781A933F0828ED4AAF88FD8B08D76DDD49B; // 0x1369F // Starts with: e0 00 e1 00 e2 00 e3 00 - Metadata: 0x0021892D

	// Nested types
	private struct __StaticArrayInitTypeSize=3 // TypeDefIndex: 1378
	{
	}

	private struct __StaticArrayInitTypeSize=6 // TypeDefIndex: 1379
	{
	}

	private struct __StaticArrayInitTypeSize=9 // TypeDefIndex: 1380
	{
	}

	private struct __StaticArrayInitTypeSize=10 // TypeDefIndex: 1381
	{
	}

	private struct __StaticArrayInitTypeSize=12 // TypeDefIndex: 1382
	{
	}

	private struct __StaticArrayInitTypeSize=14 // TypeDefIndex: 1383
	{
	}

	private struct __StaticArrayInitTypeSize=16 // TypeDefIndex: 1384
	{
	}

	private struct __StaticArrayInitTypeSize=20 // TypeDefIndex: 1385
	{
	}

	private struct __StaticArrayInitTypeSize=24 // TypeDefIndex: 1386
	{
	}

	private struct __StaticArrayInitTypeSize=32 // TypeDefIndex: 1387
	{
	}

	private struct __StaticArrayInitTypeSize=36 // TypeDefIndex: 1388
	{
	}

	private struct __StaticArrayInitTypeSize=38 // TypeDefIndex: 1389
	{
	}

	private struct __StaticArrayInitTypeSize=40 // TypeDefIndex: 1390
	{
	}

	private struct __StaticArrayInitTypeSize=42 // TypeDefIndex: 1391
	{
	}

	private struct __StaticArrayInitTypeSize=44 // TypeDefIndex: 1392
	{
	}

	private struct __StaticArrayInitTypeSize=48 // TypeDefIndex: 1393
	{
	}

	private struct __StaticArrayInitTypeSize=52 // TypeDefIndex: 1394
	{
	}

	private struct __StaticArrayInitTypeSize=56 // TypeDefIndex: 1395
	{
	}

	private struct __StaticArrayInitTypeSize=64 // TypeDefIndex: 1396
	{
	}

	private struct __StaticArrayInitTypeSize=72 // TypeDefIndex: 1397
	{
	}

	private struct __StaticArrayInitTypeSize=76 // TypeDefIndex: 1398
	{
	}

	private struct __StaticArrayInitTypeSize=84 // TypeDefIndex: 1399
	{
	}

	private struct __StaticArrayInitTypeSize=94 // TypeDefIndex: 1400
	{
	}

	private struct __StaticArrayInitTypeSize=120 // TypeDefIndex: 1401
	{
	}

	private struct __StaticArrayInitTypeSize=128 // TypeDefIndex: 1402
	{
	}

	private struct __StaticArrayInitTypeSize=130 // TypeDefIndex: 1403
	{
	}

	private struct __StaticArrayInitTypeSize=162 // TypeDefIndex: 1404
	{
	}

	private struct __StaticArrayInitTypeSize=174 // TypeDefIndex: 1405
	{
	}

	private struct __StaticArrayInitTypeSize=212 // TypeDefIndex: 1406
	{
	}

	private struct __StaticArrayInitTypeSize=240 // TypeDefIndex: 1407
	{
	}

	private struct __StaticArrayInitTypeSize=256 // TypeDefIndex: 1408
	{
	}

	private struct __StaticArrayInitTypeSize=262 // TypeDefIndex: 1409
	{
	}

	private struct __StaticArrayInitTypeSize=288 // TypeDefIndex: 1410
	{
	}

	private struct __StaticArrayInitTypeSize=320 // TypeDefIndex: 1411
	{
	}

	private struct __StaticArrayInitTypeSize=360 // TypeDefIndex: 1412
	{
	}

	private struct __StaticArrayInitTypeSize=640 // TypeDefIndex: 1413
	{
	}

	private struct __StaticArrayInitTypeSize=998 // TypeDefIndex: 1414
	{
	}

	private struct __StaticArrayInitTypeSize=1018 // TypeDefIndex: 1415
	{
	}

	private struct __StaticArrayInitTypeSize=1080 // TypeDefIndex: 1416
	{
	}

	private struct __StaticArrayInitTypeSize=1208 // TypeDefIndex: 1417
	{
	}

	private struct __StaticArrayInitTypeSize=1450 // TypeDefIndex: 1418
	{
	}

	private struct __StaticArrayInitTypeSize=1665 // TypeDefIndex: 1419
	{
	}

	private struct __StaticArrayInitTypeSize=2048 // TypeDefIndex: 1420
	{
	}

	private struct __StaticArrayInitTypeSize=2100 // TypeDefIndex: 1421
	{
	}

	private struct __StaticArrayInitTypeSize=2350 // TypeDefIndex: 1422
	{
	}

	private struct __StaticArrayInitTypeSize=2382 // TypeDefIndex: 1423
	{
	}

	private struct __StaticArrayInitTypeSize=3132 // TypeDefIndex: 1424
	{
	}

	private struct __StaticArrayInitTypeSize=4096 // TypeDefIndex: 1425
	{
	}

	private struct __StaticArrayInitTypeSize=11614 // TypeDefIndex: 1426
	{
	}

	private struct __StaticArrayInitTypeSize=21252 // TypeDefIndex: 1427
	{
	}

	// Methods
	internal static uint ComputeStringHash(string s); // 0x007D8D58-0x007D8DE8
}

namespace System.Runtime.InteropServices
{
	[CLSCompliant] // 0x0039AD4C-0x0039AE10
	[ComVisible] // 0x0039AD4C-0x0039AE10
	[Guid] // 0x0039AD4C-0x0039AE10
	[InterfaceType] // 0x0039AD4C-0x0039AE10
	[TypeLibImportClass] // 0x0039AD4C-0x0039AE10
	public interface _AssemblyBuilder // TypeDefIndex: 1428
	{
	}

	[CLSCompliant] // 0x0039AE10-0x0039AED4
	[ComVisible] // 0x0039AE10-0x0039AED4
	[Guid] // 0x0039AE10-0x0039AED4
	[InterfaceType] // 0x0039AE10-0x0039AED4
	[TypeLibImportClass] // 0x0039AE10-0x0039AED4
	public interface _ConstructorBuilder // TypeDefIndex: 1429
	{
	}

	[CLSCompliant] // 0x0039AED4-0x0039AF98
	[ComVisible] // 0x0039AED4-0x0039AF98
	[Guid] // 0x0039AED4-0x0039AF98
	[InterfaceType] // 0x0039AED4-0x0039AF98
	[TypeLibImportClass] // 0x0039AED4-0x0039AF98
	public interface _CustomAttributeBuilder // TypeDefIndex: 1430
	{
	}

	[CLSCompliant] // 0x0039AF98-0x0039B05C
	[ComVisible] // 0x0039AF98-0x0039B05C
	[Guid] // 0x0039AF98-0x0039B05C
	[InterfaceType] // 0x0039AF98-0x0039B05C
	[TypeLibImportClass] // 0x0039AF98-0x0039B05C
	public interface _EnumBuilder // TypeDefIndex: 1431
	{
	}

	[CLSCompliant] // 0x0039B05C-0x0039B120
	[ComVisible] // 0x0039B05C-0x0039B120
	[Guid] // 0x0039B05C-0x0039B120
	[InterfaceType] // 0x0039B05C-0x0039B120
	[TypeLibImportClass] // 0x0039B05C-0x0039B120
	public interface _EventBuilder // TypeDefIndex: 1432
	{
	}
}

namespace System.Reflection.Emit
{
	[Serializable]
	[ComVisible] // 0x0039B120-0x0039B170
	[Obsolete] // 0x0039B120-0x0039B170
	public sealed class UnmanagedMarshal // TypeDefIndex: 1433
	{
	}
}

namespace System.Runtime.InteropServices
{
	[CLSCompliant] // 0x0039B170-0x0039B234
	[ComVisible] // 0x0039B170-0x0039B234
	[Guid] // 0x0039B170-0x0039B234
	[InterfaceType] // 0x0039B170-0x0039B234
	[TypeLibImportClass] // 0x0039B170-0x0039B234
	public interface _FieldBuilder // TypeDefIndex: 1434
	{
	}

	[CLSCompliant] // 0x0039B234-0x0039B2F8
	[ComVisible] // 0x0039B234-0x0039B2F8
	[Guid] // 0x0039B234-0x0039B2F8
	[InterfaceType] // 0x0039B234-0x0039B2F8
	[TypeLibImportClass] // 0x0039B234-0x0039B2F8
	public interface _ILGenerator // TypeDefIndex: 1435
	{
	}

	[CLSCompliant] // 0x0039B2F8-0x0039B3BC
	[ComVisible] // 0x0039B2F8-0x0039B3BC
	[Guid] // 0x0039B2F8-0x0039B3BC
	[InterfaceType] // 0x0039B2F8-0x0039B3BC
	[TypeLibImportClass] // 0x0039B2F8-0x0039B3BC
	public interface _LocalBuilder // TypeDefIndex: 1436
	{
	}

	[CLSCompliant] // 0x0039B3BC-0x0039B480
	[ComVisible] // 0x0039B3BC-0x0039B480
	[Guid] // 0x0039B3BC-0x0039B480
	[InterfaceType] // 0x0039B3BC-0x0039B480
	[TypeLibImportClass] // 0x0039B3BC-0x0039B480
	public interface _MethodBuilder // TypeDefIndex: 1437
	{
	}

	[CLSCompliant] // 0x0039B480-0x0039B544
	[ComVisible] // 0x0039B480-0x0039B544
	[Guid] // 0x0039B480-0x0039B544
	[InterfaceType] // 0x0039B480-0x0039B544
	[TypeLibImportClass] // 0x0039B480-0x0039B544
	public interface _ModuleBuilder // TypeDefIndex: 1438
	{
	}

	[CLSCompliant] // 0x0039B544-0x0039B608
	[ComVisible] // 0x0039B544-0x0039B608
	[Guid] // 0x0039B544-0x0039B608
	[InterfaceType] // 0x0039B544-0x0039B608
	[TypeLibImportClass] // 0x0039B544-0x0039B608
	public interface _ParameterBuilder // TypeDefIndex: 1439
	{
	}

	[CLSCompliant] // 0x0039B608-0x0039B6CC
	[ComVisible] // 0x0039B608-0x0039B6CC
	[Guid] // 0x0039B608-0x0039B6CC
	[InterfaceType] // 0x0039B608-0x0039B6CC
	[TypeLibImportClass] // 0x0039B608-0x0039B6CC
	public interface _PropertyBuilder // TypeDefIndex: 1440
	{
	}

	[CLSCompliant] // 0x0039B6CC-0x0039B790
	[ComVisible] // 0x0039B6CC-0x0039B790
	[Guid] // 0x0039B6CC-0x0039B790
	[InterfaceType] // 0x0039B6CC-0x0039B790
	[TypeLibImportClass] // 0x0039B6CC-0x0039B790
	public interface _TypeBuilder // TypeDefIndex: 1441
	{
	}
}

namespace System.Reflection.Emit
{
	[ComVisible] // 0x0039B790-0x0039B7A4
	public sealed class DynamicMethod : MethodInfo // TypeDefIndex: 1442
	{
		// Properties
		public override MethodAttributes Attributes { get; } // 0x0090F9CC-0x0090FA54 
		public override Type DeclaringType { get; } // 0x0090FA54-0x0090FADC 
		public override RuntimeMethodHandle MethodHandle { get; } // 0x0090FADC-0x0090FB64 
		public override string Name { get; } // 0x0090FB64-0x0090FBEC 
		public override Type ReflectedType { get; } // 0x0090FBEC-0x0090FC74 
	
		// Methods
		public override object[] GetCustomAttributes(bool inherit); // 0x0090FC74-0x0090FCFC
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x0090FCFC-0x0090FD84
		public override MethodImplAttributes GetMethodImplementationFlags(); // 0x0090FD84-0x0090FE0C
		public override ParameterInfo[] GetParameters(); // 0x0090FE0C-0x0090FE94
		public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x0090FE94-0x0090FF1C
		public override bool IsDefined(Type attributeType, bool inherit); // 0x0090FF1C-0x0090FFA4
	}
}

namespace Unity
{
	internal sealed class ThrowStub : ObjectDisposedException // TypeDefIndex: 1443
	{
		// Methods
		public static void ThrowNotSupportedException(); // 0x00BD5924-0x00BD598C
	}
}

namespace System
{
	internal class __Il2CppComObject // TypeDefIndex: 1444
	{
		// Methods
		~__Il2CppComObject(); // 0x00BD58D0-0x00BD5924
	}

	internal sealed class __Il2CppComDelegate : __Il2CppComObject // TypeDefIndex: 1445
	{
		// Methods
		~__Il2CppComDelegate(); // 0x00BD58CC-0x00BD58D0
	}
}

namespace Mono.Security
{
	public class ASN1 // TypeDefIndex: 1447
	{
		// Fields
		private byte m_nTag; // 0x10
		private byte[] m_aValue; // 0x18
		private ArrayList elist; // 0x20
	
		// Properties
		public int Count { get; } // 0x00C8E6FC-0x00C8E718 
		public byte Tag { get; } // 0x00C8E718-0x00C8E720 
		public byte[] Value { get; set; } // 0x00C8E720-0x00C8E810 0x00C8E810-0x00C8E8E4
		public ASN1 this[int index] { get => default; } // 0x00C8F33C-0x00C8F4D4 
	
		// Constructors
		public ASN1(byte tag); // 0x00C8E39C-0x00C8E3CC
		public ASN1(byte tag, byte[] data); // 0x00C8E3CC-0x00C8E408
		public ASN1(byte[] data); // 0x00C8E408-0x00C8E5C4
	
		// Methods
		public ASN1 Add(ASN1 asn1); // 0x00C8E8E4-0x00C8E984
		public virtual byte[] GetBytes(); // 0x00C8E984-0x00C8F1CC
		protected void Decode(byte[] asn1, ref int anPos, int anLength); // 0x00C8E5C4-0x00C8E6FC
		protected void DecodeTLV(byte[] asn1, ref int pos, out byte tag, out int length, out byte[] content); // 0x00C8F1CC-0x00C8F33C
		public override string ToString(); // 0x00C8F4D4-0x00C8F788
	}

	public static class ASN1Convert // TypeDefIndex: 1448
	{
		// Methods
		public static ASN1 FromInt32(int value); // 0x00C8F788-0x00C8F904
		public static int ToInt32(ASN1 asn1); // 0x00C8F928-0x00C8FA70
		public static string ToOid(ASN1 asn1); // 0x00C8FA70-0x00C8FDC0
	}

	internal sealed class BitConverterLE // TypeDefIndex: 1449
	{
		// Methods
		private static unsafe byte[] GetUIntBytes(byte* bytes); // 0x00C8FDC0-0x00C8FF6C
		internal static byte[] GetBytes(int value); // 0x00C8F904-0x00C8F928
	}
}

namespace Mono.Security.Interface
{
	public interface ICertificateValidator // TypeDefIndex: 1450
	{
		// Properties
		MonoTlsSettings Settings { get; }
	}

	internal interface ICertificateValidator2 : ICertificateValidator // TypeDefIndex: 1451
	{
	}

	public interface IMonoSslStream : IDisposable // TypeDefIndex: 1452
	{
		// Properties
		bool IsAuthenticated { get; }
		bool CanRead { get; }
		bool CanWrite { get; }
		long Length { get; }
		long Position { get; }
	
		// Methods
		int Read(byte[] buffer, int offset, int count);
		void Write(byte[] buffer, int offset, int count);
		IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);
		int EndRead(IAsyncResult asyncResult);
		IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);
		void EndWrite(IAsyncResult asyncResult);
	}

	[Flags] // 0x003A0184-0x003A0194
	public enum MonoSslPolicyErrors // TypeDefIndex: 1453
	{
		None = 0,
		RemoteCertificateNotAvailable = 1,
		RemoteCertificateNameMismatch = 2,
		RemoteCertificateChainErrors = 4
	}

	public abstract class MonoTlsProvider // TypeDefIndex: 1454
	{
		// Properties
		public abstract Guid ID { get; }
		public abstract string Name { get; }
		public abstract bool SupportsSslStream { get; }
		public abstract bool SupportsConnectionInfo { get; }
		public abstract bool SupportsMonoExtensions { get; }
		public abstract SslProtocols SupportedProtocols { get; }
		internal abstract bool SupportsCleanShutdown { get; }
	
		// Constructors
		internal MonoTlsProvider(); // 0x00C900C0-0x00C900C8
	
		// Methods
		public abstract IMonoSslStream CreateSslStream(Stream innerStream, bool leaveInnerStreamOpen, MonoTlsSettings settings = null);
		internal abstract IMonoSslStream CreateSslStreamInternal(SslStream sslStream, Stream innerStream, bool leaveInnerStreamOpen, MonoTlsSettings settings);
		internal abstract bool ValidateCertificate(ICertificateValidator2 validator, string targetHost, bool serverMode, System.Security.Cryptography.X509Certificates.X509CertificateCollection certificates, bool wantsChain, ref X509Chain chain, ref MonoSslPolicyErrors errors, ref int status11);
	}

	public sealed class MonoTlsSettings // TypeDefIndex: 1455
	{
		// Fields
		[CompilerGenerated] // 0x003A0194-0x003A01A4
		private System.Security.Cryptography.X509Certificates.X509CertificateCollection <TrustAnchors>k__BackingField; // 0x10
	
		// Properties
		public System.Security.Cryptography.X509Certificates.X509CertificateCollection TrustAnchors { [CompilerGenerated] /* 0x003A01A4-0x003A01B4 */ get; } // 0x00C900C8-0x00C900D0 
	}
}

namespace Mono.Security.Cryptography
{
	public sealed class CryptoConvert // TypeDefIndex: 1456
	{
		// Methods
		public static string ToHex(byte[] input); // 0x00C8FF6C-0x00C900C0
	}
}

internal static class SR // TypeDefIndex: 1458
{
	// Methods
	internal static string GetString(string name, params /* 0x003A133C-0x003A134C */ object[] args); // 0x008FCF6C-0x008FCFEC
	internal static string GetString(CultureInfo culture, string name, params /* 0x003A134C-0x003A135C */ object[] args); // 0x008FCFEC-0x008FCFF4
	internal static string GetString(string name); // 0x008FCFF4-0x008FCFF8
}

namespace Mono.Unity
{
	internal static class CertHelper // TypeDefIndex: 1459
	{
		// Methods
		public static unsafe void AddCertificatesToNativeChain(UnityTls.unitytls_x509list* nativeCertificateChain, System.Security.Cryptography.X509Certificates.X509CertificateCollection certificates, UnityTls.unitytls_errorstate* errorState); // 0x008EF058-0x008EF1E0
		public static unsafe void AddCertificateToNativeChain(UnityTls.unitytls_x509list* nativeCertificateChain, System.Security.Cryptography.X509Certificates.X509Certificate certificate, UnityTls.unitytls_errorstate* errorState); // 0x008EF1E0-0x008EF3D4
	}

	internal static class UnityTls // TypeDefIndex: 1460
	{
		// Fields
		private static unitytls_interface_struct marshalledInterface; // 0x00
	
		// Properties
		public static unitytls_interface_struct NativeInterface { get; } // 0x008EF3D4-0x008EF4F8 
	
		// Nested types
		public enum unitytls_error_code : uint // TypeDefIndex: 1461
		{
			UNITYTLS_SUCCESS = 0,
			UNITYTLS_INVALID_ARGUMENT = 1,
			UNITYTLS_INVALID_FORMAT = 2,
			UNITYTLS_INVALID_PASSWORD = 3,
			UNITYTLS_INVALID_STATE = 4,
			UNITYTLS_BUFFER_OVERFLOW = 5,
			UNITYTLS_OUT_OF_MEMORY = 6,
			UNITYTLS_INTERNAL_ERROR = 7,
			UNITYTLS_NOT_SUPPORTED = 8,
			UNITYTLS_ENTROPY_SOURCE_FAILED = 9,
			UNITYTLS_STREAM_CLOSED = 10,
			UNITYTLS_USER_CUSTOM_ERROR_START = 1048576,
			UNITYTLS_USER_WOULD_BLOCK = 1048577,
			UNITYTLS_USER_READ_FAILED = 1048578,
			UNITYTLS_USER_WRITE_FAILED = 1048579,
			UNITYTLS_USER_UNKNOWN_ERROR = 1048580,
			UNITYTLS_USER_CUSTOM_ERROR_END = 2097152
		}
	
		public struct unitytls_errorstate // TypeDefIndex: 1462
		{
			// Fields
			private uint magic; // 0x00
			public unitytls_error_code code; // 0x04
			private ulong reserved; // 0x08
		}
	
		public struct unitytls_key // TypeDefIndex: 1463
		{
		}
	
		public struct unitytls_key_ref // TypeDefIndex: 1464
		{
			// Fields
			public ulong handle; // 0x00
		}
	
		public struct unitytls_x509_ref // TypeDefIndex: 1465
		{
			// Fields
			public ulong handle; // 0x00
		}
	
		public struct unitytls_x509list // TypeDefIndex: 1466
		{
		}
	
		public struct unitytls_x509list_ref // TypeDefIndex: 1467
		{
			// Fields
			public ulong handle; // 0x00
		}
	
		[Flags] // 0x003A0358-0x003A0368
		public enum unitytls_x509verify_result : uint // TypeDefIndex: 1468
		{
			UNITYTLS_X509VERIFY_SUCCESS = 0,
			UNITYTLS_X509VERIFY_FLAG_EXPIRED = 1,
			UNITYTLS_X509VERIFY_FLAG_REVOKED = 2,
			UNITYTLS_X509VERIFY_FLAG_CN_MISMATCH = 4,
			UNITYTLS_X509VERIFY_FLAG_NOT_TRUSTED = 8,
			UNITYTLS_X509VERIFY_FLAG_USER_ERROR1 = 65536,
			UNITYTLS_X509VERIFY_FLAG_USER_ERROR2 = 131072,
			UNITYTLS_X509VERIFY_FLAG_USER_ERROR3 = 262144,
			UNITYTLS_X509VERIFY_FLAG_USER_ERROR4 = 524288,
			UNITYTLS_X509VERIFY_FLAG_USER_ERROR5 = 1048576,
			UNITYTLS_X509VERIFY_FLAG_USER_ERROR6 = 2097152,
			UNITYTLS_X509VERIFY_FLAG_USER_ERROR7 = 4194304,
			UNITYTLS_X509VERIFY_FLAG_USER_ERROR8 = 8388608,
			UNITYTLS_X509VERIFY_FLAG_UNKNOWN_ERROR = 134217728,
			UNITYTLS_X509VERIFY_NOT_DONE = 2147483648,
			UNITYTLS_X509VERIFY_FATAL_ERROR = 4294967295
		}
	
		[UnmanagedFunctionPointer] // 0x003A0368-0x003A037C
		public unsafe delegate unitytls_x509verify_result unitytls_x509verify_callback(void* userData, unitytls_x509_ref cert, unitytls_x509verify_result result, unitytls_errorstate* errorState); // TypeDefIndex: 1469; 0x008FBF7C-0x008FC454
	
		public struct unitytls_tlsctx // TypeDefIndex: 1470
		{
		}
	
		public struct unitytls_x509name // TypeDefIndex: 1471
		{
		}
	
		public enum unitytls_ciphersuite : uint // TypeDefIndex: 1472
		{
			UNITYTLS_CIPHERSUITE_INVALID = 16777215
		}
	
		public enum unitytls_protocol : uint // TypeDefIndex: 1473
		{
			UNITYTLS_PROTOCOL_TLS_1_0 = 0,
			UNITYTLS_PROTOCOL_TLS_1_1 = 1,
			UNITYTLS_PROTOCOL_TLS_1_2 = 2,
			UNITYTLS_PROTOCOL_INVALID = 3
		}
	
		public struct unitytls_tlsctx_protocolrange // TypeDefIndex: 1474
		{
			// Fields
			public unitytls_protocol min; // 0x00
			public unitytls_protocol max; // 0x04
		}
	
		[UnmanagedFunctionPointer] // 0x003A037C-0x003A0390
		public unsafe delegate IntPtr unitytls_tlsctx_write_callback(void* userData, byte* data, IntPtr bufferLen, unitytls_errorstate* errorState); // TypeDefIndex: 1475; 0x008FB3D8-0x008FB8B0
	
		[UnmanagedFunctionPointer] // 0x003A0390-0x003A03A4
		public unsafe delegate IntPtr unitytls_tlsctx_read_callback(void* userData, byte* buffer, IntPtr bufferLen, unitytls_errorstate* errorState); // TypeDefIndex: 1476; 0x008FA83C-0x008FAD14
	
		[UnmanagedFunctionPointer] // 0x003A03A4-0x003A03B8
		public unsafe delegate void unitytls_tlsctx_trace_callback(void* userData, unitytls_tlsctx* ctx, byte* traceMessage, IntPtr traceMessageLen); // TypeDefIndex: 1477; 0x008FAE24-0x008FB2F4
	
		[UnmanagedFunctionPointer] // 0x003A03B8-0x003A03CC
		public unsafe delegate void unitytls_tlsctx_certificate_callback(void* userData, unitytls_tlsctx* ctx, byte* cn, IntPtr cnLen, unitytls_x509name* caList, IntPtr caListLen, unitytls_x509list_ref* chain, unitytls_key_ref* key, unitytls_errorstate* errorState); // TypeDefIndex: 1478; 0x008FA224-0x008FA724
	
		[UnmanagedFunctionPointer] // 0x003A03CC-0x003A03E0
		public unsafe delegate unitytls_x509verify_result unitytls_tlsctx_x509verify_callback(void* userData, unitytls_x509list_ref chain, unitytls_errorstate* errorState); // TypeDefIndex: 1479; 0x008FB9BC-0x008FBE74
	
		public struct unitytls_tlsctx_callbacks // TypeDefIndex: 1480
		{
			// Fields
			public unitytls_tlsctx_read_callback read; // 0x00
			public unitytls_tlsctx_write_callback write; // 0x08
			public unsafe void* data; // 0x10
		}
	
		public class unitytls_interface_struct // TypeDefIndex: 1481
		{
			// Fields
			public readonly ulong UNITYTLS_INVALID_HANDLE; // 0x10
			public readonly unitytls_tlsctx_protocolrange UNITYTLS_TLSCTX_PROTOCOLRANGE_DEFAULT; // 0x18
			public unitytls_errorstate_create_t unitytls_errorstate_create; // 0x20
			public unitytls_errorstate_raise_error_t unitytls_errorstate_raise_error; // 0x28
			public unitytls_key_get_ref_t unitytls_key_get_ref; // 0x30
			public unitytls_key_parse_der_t unitytls_key_parse_der; // 0x38
			public unitytls_key_parse_pem_t unitytls_key_parse_pem; // 0x40
			public unitytls_key_free_t unitytls_key_free; // 0x48
			public unitytls_x509_export_der_t unitytls_x509_export_der; // 0x50
			public unitytls_x509list_get_ref_t unitytls_x509list_get_ref; // 0x58
			public unitytls_x509list_get_x509_t unitytls_x509list_get_x509; // 0x60
			public unitytls_x509list_create_t unitytls_x509list_create; // 0x68
			public unitytls_x509list_append_t unitytls_x509list_append; // 0x70
			public unitytls_x509list_append_der_t unitytls_x509list_append_der; // 0x78
			public unitytls_x509list_append_der_t unitytls_x509list_append_pem; // 0x80
			public unitytls_x509list_free_t unitytls_x509list_free; // 0x88
			public unitytls_x509verify_default_ca_t unitytls_x509verify_default_ca; // 0x90
			public unitytls_x509verify_explicit_ca_t unitytls_x509verify_explicit_ca; // 0x98
			public unitytls_tlsctx_create_server_t unitytls_tlsctx_create_server; // 0xA0
			public unitytls_tlsctx_create_client_t unitytls_tlsctx_create_client; // 0xA8
			public unitytls_tlsctx_server_require_client_authentication_t unitytls_tlsctx_server_require_client_authentication; // 0xB0
			public unitytls_tlsctx_set_certificate_callback_t unitytls_tlsctx_set_certificate_callback; // 0xB8
			public unitytls_tlsctx_set_trace_callback_t unitytls_tlsctx_set_trace_callback; // 0xC0
			public unitytls_tlsctx_set_x509verify_callback_t unitytls_tlsctx_set_x509verify_callback; // 0xC8
			public unitytls_tlsctx_set_supported_ciphersuites_t unitytls_tlsctx_set_supported_ciphersuites; // 0xD0
			public unitytls_tlsctx_get_ciphersuite_t unitytls_tlsctx_get_ciphersuite; // 0xD8
			public unitytls_tlsctx_get_protocol_t unitytls_tlsctx_get_protocol; // 0xE0
			public unitytls_tlsctx_process_handshake_t unitytls_tlsctx_process_handshake; // 0xE8
			public unitytls_tlsctx_read_t unitytls_tlsctx_read; // 0xF0
			public unitytls_tlsctx_write_t unitytls_tlsctx_write; // 0xF8
			public unitytls_tlsctx_notify_close_t unitytls_tlsctx_notify_close; // 0x100
			public unitytls_tlsctx_free_t unitytls_tlsctx_free; // 0x108
			public unitytls_random_generate_bytes_t unitytls_random_generate_bytes; // 0x110
	
			// Nested types
			[UnmanagedFunctionPointer] // 0x003A03E0-0x003A03F4
			public delegate unitytls_errorstate unitytls_errorstate_create_t(); // TypeDefIndex: 1482; 0x008EFED8-0x008F02E4
	
			[UnmanagedFunctionPointer] // 0x003A03F4-0x003A0408
			public unsafe delegate void unitytls_errorstate_raise_error_t(unitytls_errorstate* errorState, unitytls_error_code errorCode); // TypeDefIndex: 1483; 0x008F037C-0x008F07E4
	
			[UnmanagedFunctionPointer] // 0x003A0408-0x003A041C
			public unsafe delegate unitytls_key_ref unitytls_key_get_ref_t(unitytls_key* key, unitytls_errorstate* errorState); // TypeDefIndex: 1484; 0x008F0D40-0x008F11C8
	
			[UnmanagedFunctionPointer] // 0x003A041C-0x003A0430
			public unsafe delegate unitytls_key* unitytls_key_parse_der_t(byte* buffer, IntPtr bufferLen, byte* password, IntPtr passwordLen, unitytls_errorstate* errorState); // TypeDefIndex: 1485; 0x008F1264-0x008F1744
	
			[UnmanagedFunctionPointer] // 0x003A0430-0x003A0444
			public unsafe delegate unitytls_key* unitytls_key_parse_pem_t(byte* buffer, IntPtr bufferLen, byte* password, IntPtr passwordLen, unitytls_errorstate* errorState); // TypeDefIndex: 1486; 0x008F1840-0x008F1D20
	
			[UnmanagedFunctionPointer] // 0x003A0444-0x003A0458
			public unsafe delegate void unitytls_key_free_t(unitytls_key* key); // TypeDefIndex: 1487; 0x008F08AC-0x008F0CEC
	
			[UnmanagedFunctionPointer] // 0x003A0458-0x003A046C
			public unsafe delegate IntPtr unitytls_x509_export_der_t(unitytls_x509_ref cert, byte* buffer, IntPtr bufferLen, unitytls_errorstate* errorState); // TypeDefIndex: 1488; 0x008F73CC-0x008F78A4
	
			[UnmanagedFunctionPointer] // 0x003A046C-0x003A0480
			public unsafe delegate unitytls_x509list_ref unitytls_x509list_get_ref_t(unitytls_x509list* list, unitytls_errorstate* errorState); // TypeDefIndex: 1489; 0x008F8940-0x008F8DC8
	
			[UnmanagedFunctionPointer] // 0x003A0480-0x003A0494
			public unsafe delegate unitytls_x509_ref unitytls_x509list_get_x509_t(unitytls_x509list_ref list, IntPtr index, unitytls_errorstate* errorState); // TypeDefIndex: 1490; 0x008F8E5C-0x008F9314
	
			[UnmanagedFunctionPointer] // 0x003A0494-0x003A04A8
			public unsafe delegate unitytls_x509list* unitytls_x509list_create_t(unitytls_errorstate* errorState); // TypeDefIndex: 1491; 0x008F800C-0x008F845C
	
			[UnmanagedFunctionPointer] // 0x003A04A8-0x003A04BC
			public unsafe delegate void unitytls_x509list_append_t(unitytls_x509list* list, unitytls_x509_ref cert, unitytls_errorstate* errorState); // TypeDefIndex: 1492; 0x008F7AA0-0x008F7F40
	
			[UnmanagedFunctionPointer] // 0x003A04BC-0x003A04D0
			public unsafe delegate void unitytls_x509list_append_der_t(unitytls_x509list* list, byte* buffer, IntPtr bufferLen, unitytls_errorstate* errorState); // TypeDefIndex: 1493; 0x008EF4F8-0x008EF9C8
	
			[UnmanagedFunctionPointer] // 0x003A04D0-0x003A04E4
			public unsafe delegate void unitytls_x509list_free_t(unitytls_x509list* list); // TypeDefIndex: 1494; 0x008F84AC-0x008F88EC
	
			[UnmanagedFunctionPointer] // 0x003A04E4-0x003A04F8
			public unsafe delegate unitytls_x509verify_result unitytls_x509verify_default_ca_t(unitytls_x509list_ref chain, byte* cn, IntPtr cnLen, unitytls_x509verify_callback cb, void* userData, unitytls_errorstate* errorState); // TypeDefIndex: 1495; 0x008F9480-0x008F99BC
	
			[UnmanagedFunctionPointer] // 0x003A04F8-0x003A050C
			public unsafe delegate unitytls_x509verify_result unitytls_x509verify_explicit_ca_t(unitytls_x509list_ref chain, unitytls_x509list_ref trustCA, byte* cn, IntPtr cnLen, unitytls_x509verify_callback cb, void* userData, unitytls_errorstate* errorState); // TypeDefIndex: 1496; 0x008F9B50-0x008FA040
	
			[UnmanagedFunctionPointer] // 0x003A050C-0x003A0520
			public unsafe delegate unitytls_tlsctx* unitytls_tlsctx_create_server_t(unitytls_tlsctx_protocolrange supportedProtocols, unitytls_tlsctx_callbacks callbacks, ulong certChain, ulong leafCertificateKey, unitytls_errorstate* errorState); // TypeDefIndex: 1497; 0x008F2C44-0x008F32B8
	
			[UnmanagedFunctionPointer] // 0x003A0520-0x003A0534
			public unsafe delegate unitytls_tlsctx* unitytls_tlsctx_create_client_t(unitytls_tlsctx_protocolrange supportedProtocols, unitytls_tlsctx_callbacks callbacks, byte* cn, IntPtr cnLen, unitytls_errorstate* errorState); // TypeDefIndex: 1498; 0x008F2444-0x008F2AB8
	
			[UnmanagedFunctionPointer] // 0x003A0534-0x003A0548
			public unsafe delegate void unitytls_tlsctx_server_require_client_authentication_t(unitytls_tlsctx* ctx, unitytls_x509list_ref clientAuthCAList, unitytls_errorstate* errorState); // TypeDefIndex: 1499; 0x008F5260-0x008F5700
	
			[UnmanagedFunctionPointer] // 0x003A0548-0x003A055C
			public unsafe delegate void unitytls_tlsctx_set_certificate_callback_t(unitytls_tlsctx* ctx, unitytls_tlsctx_certificate_callback cb, void* userData, unitytls_errorstate* errorState); // TypeDefIndex: 1500; 0x008F5810-0x008F5CE0
	
			[UnmanagedFunctionPointer] // 0x003A055C-0x003A0570
			public unsafe delegate void unitytls_tlsctx_set_trace_callback_t(unitytls_tlsctx* ctx, unitytls_tlsctx_trace_callback cb, void* userData, unitytls_errorstate* errorState); // TypeDefIndex: 1501; 0x008F6334-0x008F6804
	
			[UnmanagedFunctionPointer] // 0x003A0570-0x003A0584
			public unsafe delegate void unitytls_tlsctx_set_x509verify_callback_t(unitytls_tlsctx* ctx, unitytls_tlsctx_x509verify_callback cb, void* userData, unitytls_errorstate* errorState); // TypeDefIndex: 1502; 0x008F68A8-0x008F6D78
	
			[UnmanagedFunctionPointer] // 0x003A0584-0x003A0598
			public unsafe delegate void unitytls_tlsctx_set_supported_ciphersuites_t(unitytls_tlsctx* ctx, unitytls_ciphersuite* supportedCiphersuites, IntPtr supportedCiphersuitesLen, unitytls_errorstate* errorState); // TypeDefIndex: 1503; 0x008F5D4C-0x008F621C
	
			[UnmanagedFunctionPointer] // 0x003A0598-0x003A05AC
			public unsafe delegate unitytls_ciphersuite unitytls_tlsctx_get_ciphersuite_t(unitytls_tlsctx* ctx, unitytls_errorstate* errorState); // TypeDefIndex: 1504; 0x008F3864-0x008F3CEC
	
			[UnmanagedFunctionPointer] // 0x003A05AC-0x003A05C0
			public unsafe delegate unitytls_protocol unitytls_tlsctx_get_protocol_t(unitytls_tlsctx* ctx, unitytls_errorstate* errorState); // TypeDefIndex: 1505; 0x008F3D7C-0x008F4204
	
			[UnmanagedFunctionPointer] // 0x003A05C0-0x003A05D4
			public unsafe delegate unitytls_x509verify_result unitytls_tlsctx_process_handshake_t(unitytls_tlsctx* ctx, unitytls_errorstate* errorState); // TypeDefIndex: 1506; 0x008F475C-0x008F4BE4
	
			[UnmanagedFunctionPointer] // 0x003A05D4-0x003A05E8
			public unsafe delegate IntPtr unitytls_tlsctx_read_t(unitytls_tlsctx* ctx, byte* buffer, IntPtr bufferLen, unitytls_errorstate* errorState); // TypeDefIndex: 1507; 0x008F4C7C-0x008F5154
	
			[UnmanagedFunctionPointer] // 0x003A05E8-0x003A05FC
			public unsafe delegate IntPtr unitytls_tlsctx_write_t(unitytls_tlsctx* ctx, byte* data, IntPtr bufferLen, unitytls_errorstate* errorState); // TypeDefIndex: 1508; 0x008F6DE4-0x008F72BC
	
			[UnmanagedFunctionPointer] // 0x003A05FC-0x003A0610
			public unsafe delegate void unitytls_tlsctx_notify_close_t(unitytls_tlsctx* ctx, unitytls_errorstate* errorState); // TypeDefIndex: 1509; 0x008F4294-0x008F46FC
	
			[UnmanagedFunctionPointer] // 0x003A0610-0x003A0624
			public unsafe delegate void unitytls_tlsctx_free_t(unitytls_tlsctx* ctx); // TypeDefIndex: 1510; 0x008F33D0-0x008F3810
	
			[UnmanagedFunctionPointer] // 0x003A0624-0x003A0638
			public unsafe delegate void unitytls_random_generate_bytes_t(byte* buffer, IntPtr bufferLen, unitytls_errorstate* errorState); // TypeDefIndex: 1511; 0x008F1E14-0x008F22B4
	
			// Constructors
			public unitytls_interface_struct(); // 0x008EFEB4-0x008EFEC8
		}
	
		// Constructors
		static UnityTls(); // 0x008EF9CC-0x008EFEB4
	
		// Methods
		private static IntPtr GetUnityTlsInterface(); // 0x008EF9C8-0x008EF9CC
	}

	internal static class UnityTlsConversions // TypeDefIndex: 1512
	{
		// Methods
		public static MonoSslPolicyErrors VerifyResultToPolicyErrror(UnityTls.unitytls_x509verify_result verifyResult); // 0x008FC550-0x008FC61C
	}

	internal class UnityTlsProvider : MonoTlsProvider // TypeDefIndex: 1513
	{
		// Properties
		public override string Name { get; } // 0x008FC61C-0x008FC664 
		public override Guid ID { get; } // 0x008FC664-0x008FC6CC 
		public override bool SupportsSslStream { get; } // 0x008FC6CC-0x008FC6D4 
		public override bool SupportsMonoExtensions { get; } // 0x008FC6D4-0x008FC6DC 
		public override bool SupportsConnectionInfo { get; } // 0x008FC6DC-0x008FC6E4 
		internal override bool SupportsCleanShutdown { get; } // 0x008FC6E4-0x008FC6EC 
		public override SslProtocols SupportedProtocols { get; } // 0x008FC6EC-0x008FC6F4 
	
		// Constructors
		public UnityTlsProvider(); // 0x008FCF64-0x008FCF6C
	
		// Methods
		public override IMonoSslStream CreateSslStream(Stream innerStream, bool leaveInnerStreamOpen, MonoTlsSettings settings = null); // 0x008FC6F4-0x008FC710
		internal override IMonoSslStream CreateSslStreamInternal(SslStream sslStream, Stream innerStream, bool leaveInnerStreamOpen, MonoTlsSettings settings); // 0x008FC710-0x008FC7A0
		internal override bool ValidateCertificate(ICertificateValidator2 validator, string targetHost, bool serverMode, System.Security.Cryptography.X509Certificates.X509CertificateCollection certificates, bool wantsChain, ref X509Chain chain, ref MonoSslPolicyErrors errors, ref int status11); // 0x008FC844-0x008FCF64
	}

	internal class UnityTlsStream : MobileAuthenticatedStream // TypeDefIndex: 1514
	{
		// Constructors
		public UnityTlsStream(Stream innerStream, bool leaveInnerStreamOpen, SslStream owner, MonoTlsSettings settings, MonoTlsProvider provider); // 0x008FC7A0-0x008FC844
	}
}

namespace Mono.Net.Security
{
	internal class BufferOffsetSize // TypeDefIndex: 1515
	{
		// Fields
		public byte[] Buffer; // 0x10
		public int Offset; // 0x18
		public int Size; // 0x1C
		public int TotalBytes; // 0x20
		public bool Complete; // 0x24
	
		// Properties
		public int EndOffset { get; } // 0x008ECA50-0x008ECA5C 
		public int Remaining { get; } // 0x008ECA5C-0x008ECA98 
	
		// Constructors
		public BufferOffsetSize(byte[] buffer, int offset, int size); // 0x008EC450-0x008EC56C
	
		// Methods
		public override string ToString(); // 0x008ECA98-0x008ECB34
	}

	internal class BufferOffsetSize2 : BufferOffsetSize // TypeDefIndex: 1516
	{
		// Fields
		public readonly int InitialSize; // 0x28
	
		// Constructors
		public BufferOffsetSize2(int size); // 0x008ECB34-0x008ECBAC
	
		// Methods
		public void Reset(); // 0x008ECBAC-0x008ECC10
	}

	internal enum AsyncOperationStatus // TypeDefIndex: 1517
	{
		Initialize = 0,
		Continue = 1,
		ReadDone = 2,
		Complete = 3
	}

	internal class AsyncProtocolResult // TypeDefIndex: 1518
	{
		// Fields
		[CompilerGenerated] // 0x003A0DAC-0x003A0DBC
		private readonly int <UserResult>k__BackingField; // 0x10
		[CompilerGenerated] // 0x003A0DBC-0x003A0DCC
		private readonly ExceptionDispatchInfo <Error>k__BackingField; // 0x18
	
		// Properties
		public int UserResult { [CompilerGenerated] /* 0x003A0F44-0x003A0F54 */ get; } // 0x008EC384-0x008EC38C 
		public ExceptionDispatchInfo Error { [CompilerGenerated] /* 0x003A0F54-0x003A0F64 */ get; } // 0x008EC38C-0x008EC394 
	
		// Constructors
		public AsyncProtocolResult(int result); // 0x008EC144-0x008EC170
		public AsyncProtocolResult(ExceptionDispatchInfo error); // 0x008EC2E8-0x008EC314
	}

	internal abstract class AsyncProtocolRequest // TypeDefIndex: 1519
	{
		// Fields
		[CompilerGenerated] // 0x003A0DCC-0x003A0DDC
		private readonly MobileAuthenticatedStream <Parent>k__BackingField; // 0x10
		[CompilerGenerated] // 0x003A0DDC-0x003A0DEC
		private readonly bool <RunSynchronously>k__BackingField; // 0x18
		[CompilerGenerated] // 0x003A0DEC-0x003A0DFC
		private int <UserResult>k__BackingField; // 0x1C
		private int Started; // 0x20
		private int RequestedSize; // 0x24
		private int WriteRequested; // 0x28
		private readonly object locker; // 0x30
	
		// Properties
		public MobileAuthenticatedStream Parent { [CompilerGenerated] /* 0x003A0F64-0x003A0F74 */ get; } // 0x008EAE54-0x008EAE5C 
		public bool RunSynchronously { [CompilerGenerated] /* 0x003A0F74-0x003A0F84 */ get; } // 0x008EAE5C-0x008EAE64 
		public string Name { get; } // 0x008EAE64-0x008EAE9C 
		public int UserResult { [CompilerGenerated] /* 0x003A0F84-0x003A0F94 */ get; [CompilerGenerated] /* 0x003A0F94-0x003A0FA4 */ protected set; } // 0x008EAE9C-0x008EAEA4 0x008EAEA4-0x008EAEAC
	
		// Nested types
		[CompilerGenerated] // 0x003A0638-0x003A0648
		private struct <StartOperation>d__23 : IAsyncStateMachine // TypeDefIndex: 1520
		{
			// Fields
			public int <>1__state; // 0x00
			public AsyncTaskMethodBuilder<AsyncProtocolResult> <>t__builder; // 0x08
			public AsyncProtocolRequest <>4__this; // 0x20
			public CancellationToken cancellationToken; // 0x28
			private ConfiguredTaskAwaitable.ConfiguredTaskAwaiter <>u__1; // 0x30
	
			// Methods
			private void MoveNext(); // 0x008EC314-0x008EC37C
			[DebuggerHidden] // 0x003A10D0-0x003A10E0
			private void SetStateMachine(IAsyncStateMachine stateMachine); // 0x008EC37C-0x008EC384
		}
	
		[CompilerGenerated] // 0x003A0648-0x003A0658
		private struct <ProcessOperation>d__24 : IAsyncStateMachine // TypeDefIndex: 1521
		{
			// Fields
			public int <>1__state; // 0x00
			public AsyncTaskMethodBuilder <>t__builder; // 0x08
			public CancellationToken cancellationToken; // 0x20
			public AsyncProtocolRequest <>4__this; // 0x28
			private AsyncOperationStatus <status>5__1; // 0x30
			private AsyncOperationStatus <newStatus>5__2; // 0x34
			private ConfiguredTaskAwaitable<int?> <>u__1; // 0x38
			private ConfiguredTaskAwaitable.ConfiguredTaskAwaiter <>u__2; // 0x48
	
			// Methods
			private void MoveNext(); // 0x008EBD8C-0x008EBD94
			[DebuggerHidden] // 0x003A10E0-0x003A10F0
			private void SetStateMachine(IAsyncStateMachine stateMachine); // 0x008EBD94-0x008EC144
		}
	
		[CompilerGenerated] // 0x003A0658-0x003A0668
		private struct <InnerRead>d__25 : IAsyncStateMachine // TypeDefIndex: 1522
		{
			// Fields
			public int <>1__state; // 0x00
			public AsyncTaskMethodBuilder<int?> <>t__builder; // 0x08
			public AsyncProtocolRequest <>4__this; // 0x20
			public CancellationToken cancellationToken; // 0x28
			private int <requestedSize>5__1; // 0x30
			private int? <totalRead>5__2; // 0x34
			private ConfiguredTaskAwaitable<int> <>u__1; // 0x40
	
			// Methods
			private void MoveNext(); // 0x008EB794-0x008EB7FC
			[DebuggerHidden] // 0x003A10F0-0x003A1100
			private void SetStateMachine(IAsyncStateMachine stateMachine); // 0x008EB7FC-0x008EBC7C
		}
	
		// Constructors
		public AsyncProtocolRequest(MobileAuthenticatedStream parent, bool sync); // 0x008EAEAC-0x008EAF34
	
		// Methods
		internal async Task<AsyncProtocolResult> StartOperation(CancellationToken cancellationToken); // 0x008EAF34-0x008EB040
		private async Task ProcessOperation(CancellationToken cancellationToken); // 0x008EB040-0x008EB140
		private async Task<int?> InnerRead(CancellationToken cancellationToken); // 0x008EB140-0x008EB250
		protected abstract AsyncOperationStatus Run(AsyncOperationStatus status);
		public override string ToString(); // 0x008EB250-0x008EB664
	}

	internal abstract class AsyncReadOrWriteRequest : AsyncProtocolRequest // TypeDefIndex: 1523
	{
		// Fields
		[CompilerGenerated] // 0x003A0DFC-0x003A0E0C
		private readonly BufferOffsetSize <UserBuffer>k__BackingField; // 0x38
		[CompilerGenerated] // 0x003A0E0C-0x003A0E1C
		private int <CurrentSize>k__BackingField; // 0x40
	
		// Properties
		protected BufferOffsetSize UserBuffer { [CompilerGenerated] /* 0x003A1100-0x003A1110 */ get; } // 0x008EC394-0x008EC39C 
		protected int CurrentSize { [CompilerGenerated] /* 0x003A1110-0x003A1120 */ get; [CompilerGenerated] /* 0x003A1120-0x003A1130 */ set; } // 0x008EC39C-0x008EC3A4 0x008EC3A4-0x008EC3AC
	
		// Constructors
		public AsyncReadOrWriteRequest(MobileAuthenticatedStream parent, bool sync, byte[] buffer, int offset, int size); // 0x008EC3AC-0x008EC450
	
		// Methods
		public override string ToString(); // 0x008EC56C-0x008EC5D0
	}

	internal class AsyncReadRequest : AsyncReadOrWriteRequest // TypeDefIndex: 1524
	{
		// Constructors
		public AsyncReadRequest(MobileAuthenticatedStream parent, bool sync, byte[] buffer, int offset, int size); // 0x008EC5D0-0x008EC5D8
	
		// Methods
		protected override AsyncOperationStatus Run(AsyncOperationStatus status); // 0x008EC5D8-0x008EC6C0
	}

	internal class AsyncWriteRequest : AsyncReadOrWriteRequest // TypeDefIndex: 1525
	{
		// Constructors
		public AsyncWriteRequest(MobileAuthenticatedStream parent, bool sync, byte[] buffer, int offset, int size); // 0x008EC800-0x008EC808
	
		// Methods
		protected override AsyncOperationStatus Run(AsyncOperationStatus status); // 0x008EC808-0x008EC910
	}

	internal abstract class MobileAuthenticatedStream : AuthenticatedStream, IMonoSslStream // TypeDefIndex: 1526
	{
		// Fields
		private MobileTlsContext xobileTlsContext; // 0x38
		private ExceptionDispatchInfo lastException; // 0x40
		private AsyncProtocolRequest asyncReadRequest; // 0x48
		private AsyncProtocolRequest asyncWriteRequest; // 0x50
		private BufferOffsetSize2 readBuffer; // 0x58
		private BufferOffsetSize2 writeBuffer; // 0x60
		private object ioLock; // 0x68
		private bool shutdown; // 0x70
		private static int uniqueNameInteger; // 0x00
		[CompilerGenerated] // 0x003A0E1C-0x003A0E2C
		private readonly SslStream <SslStream>k__BackingField; // 0x78
		[CompilerGenerated] // 0x003A0E2C-0x003A0E3C
		private readonly MonoTlsSettings <Settings>k__BackingField; // 0x80
		[CompilerGenerated] // 0x003A0E3C-0x003A0E4C
		private readonly MonoTlsProvider <Provider>k__BackingField; // 0x88
		private static int nextId; // 0x04
		internal readonly int ID; // 0x90
	
		// Properties
		public override bool IsAuthenticated { get; } // 0x008ED57C-0x008ED650 
		public override bool CanRead { get; } // 0x008ED8F0-0x008ED954 
		public override bool CanWrite { get; } // 0x008ED954-0x008ED9D0 
		public override bool CanSeek { get; } // 0x008ED9D0-0x008ED9D8 
		public override long Length { get; } // 0x008ED9D8-0x008EDA10 
		public override long Position { get; set; } // 0x008EDA10-0x008EDA48 0x008EDA48-0x008EDAB0
	
		// Nested types
		private enum OperationType // TypeDefIndex: 1527
		{
			Read = 0,
			Write = 1,
			Shutdown = 2
		}
	
		[CompilerGenerated] // 0x003A0668-0x003A0678
		private struct <StartOperation>d__58 : IAsyncStateMachine // TypeDefIndex: 1528
		{
			// Fields
			public int <>1__state; // 0x00
			public AsyncTaskMethodBuilder<int> <>t__builder; // 0x08
			public MobileAuthenticatedStream <>4__this; // 0x20
			public OperationType type; // 0x28
			public AsyncProtocolRequest asyncRequest; // 0x30
			public CancellationToken cancellationToken; // 0x38
			private ConfiguredTaskAwaitable<AsyncProtocolResult> <>u__1; // 0x40
	
			// Methods
			private void MoveNext(); // 0x008EEC70-0x008EECD8
			[DebuggerHidden] // 0x003A126C-0x003A127C
			private void SetStateMachine(IAsyncStateMachine stateMachine); // 0x008EECD8-0x008EECE0
		}
	
		[CompilerGenerated] // 0x003A0678-0x003A0688
		private sealed class <>c__DisplayClass66_0 // TypeDefIndex: 1529
		{
			// Fields
			public MobileAuthenticatedStream <>4__this; // 0x10
			public int len; // 0x18
	
			// Constructors
			public <>c__DisplayClass66_0(); // 0x008EDBB4-0x008EDBBC
	
			// Methods
			internal int <InnerRead>b__0(); // 0x008EDBBC-0x008EE154
		}
	
		[CompilerGenerated] // 0x003A0688-0x003A0698
		private struct <InnerRead>d__66 : IAsyncStateMachine // TypeDefIndex: 1530
		{
			// Fields
			public int <>1__state; // 0x00
			public AsyncTaskMethodBuilder<int> <>t__builder; // 0x08
			public MobileAuthenticatedStream <>4__this; // 0x20
			public CancellationToken cancellationToken; // 0x28
			public int requestedSize; // 0x30
			public bool sync; // 0x34
			private ConfiguredTaskAwaitable<int> <>u__1; // 0x38
	
			// Methods
			private void MoveNext(); // 0x008EE154-0x008EE1BC
			[DebuggerHidden] // 0x003A127C-0x003A128C
			private void SetStateMachine(IAsyncStateMachine stateMachine); // 0x008EE1BC-0x008EE54C
		}
	
		[CompilerGenerated] // 0x003A0698-0x003A06A8
		private struct <InnerWrite>d__67 : IAsyncStateMachine // TypeDefIndex: 1531
		{
			// Fields
			public int <>1__state; // 0x00
			public AsyncTaskMethodBuilder <>t__builder; // 0x08
			public CancellationToken cancellationToken; // 0x20
			public MobileAuthenticatedStream <>4__this; // 0x28
			public bool sync; // 0x30
			private ConfiguredTaskAwaitable.ConfiguredTaskAwaiter <>u__1; // 0x38
	
			// Methods
			private void MoveNext(); // 0x008EE54C-0x008EE554
			[DebuggerHidden] // 0x003A128C-0x003A129C
			private void SetStateMachine(IAsyncStateMachine stateMachine); // 0x008EE554-0x008EEC70
		}
	
		// Constructors
		public MobileAuthenticatedStream(Stream innerStream, bool leaveInnerStreamOpen, SslStream owner, MonoTlsSettings settings, MonoTlsProvider provider); // 0x008ECC10-0x008ECD28
		static MobileAuthenticatedStream(); // 0x008EDAB0-0x008EDB04
	
		// Methods
		internal void CheckThrow(bool authSuccessCheck, bool shutdownCheck = false /* Metadata: 0x00219313 */); // 0x008ECD28-0x008ECE10
		internal static Exception GetSSPIException(Exception e); // 0x008EC170-0x008EC2A4
		internal static Exception GetIOException(Exception e, string message); // 0x008ECE10-0x008ECF48
		internal ExceptionDispatchInfo SetException(Exception e); // 0x008EC2A4-0x008EC2E8
		public override IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState); // 0x008ECF48-0x008ED028
		public override int EndRead(IAsyncResult asyncResult); // 0x008ED150-0x008ED1A0
		public override IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState); // 0x008ED1A0-0x008ED280
		public override void EndWrite(IAsyncResult asyncResult); // 0x008ED280-0x008ED28C
		public override int Read(byte[] buffer, int offset, int count); // 0x008ED28C-0x008ED36C
		public override void Write(byte[] buffer, int offset, int count); // 0x008ED36C-0x008ED444
		public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken); // 0x008ED444-0x008ED4E0
		public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken); // 0x008ED4E0-0x008ED57C
		private async Task<int> StartOperation(OperationType type, AsyncProtocolRequest asyncRequest, CancellationToken cancellationToken); // 0x008ED028-0x008ED150
		internal async Task<int> InnerRead(bool sync, int requestedSize, CancellationToken cancellationToken); // 0x008EB664-0x008EB794
		internal async Task InnerWrite(bool sync, CancellationToken cancellationToken); // 0x008EBC7C-0x008EBD8C
		internal ValueTuple<int, bool> ProcessRead(BufferOffsetSize userBuffer); // 0x008EC6C0-0x008EC800
		internal ValueTuple<int, bool> ProcessWrite(BufferOffsetSize userBuffer); // 0x008EC910-0x008ECA50
		protected override void Dispose(bool disposing); // 0x008ED650-0x008ED7D0
		public override void Flush(); // 0x008ED84C-0x008ED888
		public override long Seek(long offset, SeekOrigin origin); // 0x008ED888-0x008ED8F0
		[CompilerGenerated] // 0x003A125C-0x003A126C
		private void <InnerWrite>b__67_0(); // 0x008EDB04-0x008EDBB4
	}

	internal abstract class MobileTlsContext : IDisposable // TypeDefIndex: 1532
	{
		// Properties
		public abstract bool IsAuthenticated { get; }
	
		// Methods
		public abstract ValueTuple<int, bool> Read(byte[] buffer, int offset, int count);
		public abstract ValueTuple<int, bool> Write(byte[] buffer, int offset, int count);
		public void Dispose(); // 0x008ED7D0-0x008ED84C
		protected virtual void Dispose(bool disposing); // 0x008EECE0-0x008EECE4
		~MobileTlsContext(); // 0x008EECE4-0x008EED64
	}

	internal static class MonoTlsProviderFactory // TypeDefIndex: 1533
	{
		// Fields
		private static object locker; // 0x00
		internal static readonly Guid UnityTlsId; // 0x08
		internal static readonly Guid AppleTlsId; // 0x18
		internal static readonly Guid BtlsId; // 0x28
		internal static readonly Guid LegacyId; // 0x38
	
		// Constructors
		static MonoTlsProviderFactory(); // 0x008EED64-0x008EEE88
	}

	internal static class SystemCertificateValidator // TypeDefIndex: 1534
	{
		// Fields
		private static bool is_macosx; // 0x00
		private static X509KeyUsageFlags s_flags; // 0x04
	
		// Constructors
		static SystemCertificateValidator(); // 0x008EEE88-0x008EEF30
	
		// Methods
		public static X509Chain CreateX509Chain(System.Security.Cryptography.X509Certificates.X509CertificateCollection certs); // 0x008EEF30-0x008EF058
	}
}

namespace System
{
	internal static class IriHelper // TypeDefIndex: 1535
	{
		// Methods
		internal static bool CheckIriUnicodeRange(char unicode, bool isQuery); // 0x009034A0-0x009034F8
		internal static bool CheckIriUnicodeRange(char highSurr, char lowSurr, ref bool surrogatePair, bool isQuery); // 0x009034F8-0x009039D0
		internal static bool CheckIsReserved(char ch, UriComponents component); // 0x009039D0-0x00903B20
		internal static unsafe string EscapeUnescapeIri(char* pInput, int start, int end, UriComponents component); // 0x00903B20-0x009043F8
	}

	[Serializable]
	[TypeConverter] // 0x003A06A8-0x003A070C
	public class Uri : ISerializable // TypeDefIndex: 1536
	{
		// Fields
		public static readonly string UriSchemeFile; // 0x00
		public static readonly string UriSchemeFtp; // 0x08
		public static readonly string UriSchemeGopher; // 0x10
		public static readonly string UriSchemeHttp; // 0x18
		public static readonly string UriSchemeHttps; // 0x20
		internal static readonly string UriSchemeWs; // 0x28
		internal static readonly string UriSchemeWss; // 0x30
		public static readonly string UriSchemeMailto; // 0x38
		public static readonly string UriSchemeNews; // 0x40
		public static readonly string UriSchemeNntp; // 0x48
		public static readonly string UriSchemeNetTcp; // 0x50
		public static readonly string UriSchemeNetPipe; // 0x58
		public static readonly string SchemeDelimiter; // 0x60
		private const int c_Max16BitUtf8SequenceLength = 12; // Metadata: 0x00219320
		internal const int c_MaxUriBufferSize = 65520; // Metadata: 0x00219324
		private const int c_MaxUriSchemeName = 1024; // Metadata: 0x00219328
		private string m_String; // 0x10
		private string m_originalUnicodeString; // 0x18
		private UriParser m_Syntax; // 0x20
		private string m_DnsSafeHost; // 0x28
		private Flags m_Flags; // 0x30
		private UriInfo m_Info; // 0x38
		private bool m_iriParsing; // 0x40
		private static bool s_ConfigInitialized; // 0x68
		private static bool s_ConfigInitializing; // 0x69
		private static UriIdnScope s_IdnScope; // 0x6C
		private static bool s_IriParsing; // 0x70
		private static bool useDotNetRelativeOrAbsolute; // 0x71
		private const UriKind DotNetRelativeOrAbsolute = (UriKind) 300; // Metadata: 0x0021932C
		internal static readonly bool IsWindowsFileSystem; // 0x72
		private static object s_initLock; // 0x78
		private const UriFormat V1ToStringUnescape = (UriFormat) 32767; // Metadata: 0x00219330
		internal const char c_DummyChar = '\xffff'; // Metadata: 0x00219334
		internal const char c_EOL = '\xfffe'; // Metadata: 0x00219336
		internal static readonly char[] HexLowerChars; // 0x80
		private static readonly char[] _WSchars; // 0x88
	
		// Properties
		private bool IsImplicitFile { get; } // 0x0058B464-0x0058B470 
		private bool IsUncOrDosPath { get; } // 0x0058B470-0x0058B480 
		private bool IsDosPath { get; } // 0x0058B480-0x0058B48C 
		private bool IsUncPath { get; } // 0x0058B48C-0x0058B498 
		private Flags HostType { get; } // 0x0058B498-0x0058B4A4 
		private UriParser Syntax { get; } // 0x0058B4A4-0x0058B4AC 
		private bool IsNotAbsoluteUri { get; } // 0x0058B4AC-0x0058B4BC 
		private bool AllowIdn { get; } // 0x0058B558-0x0058B638 
		internal bool UserDrivenParsing { get; } // 0x0058B754-0x0058B760 
		private ushort SecuredPathIndex { get; } // 0x0058B774-0x0058B7F0 
		public string AbsolutePath { get; } // 0x0058F870-0x0058F974 
		private string PrivateAbsolutePath { get; } // 0x0058F974-0x0058FA48 
		public string AbsoluteUri { get; } // 0x0058FA48-0x0058FB78 
		public bool IsFile { get; } // 0x0058FB78-0x0058FC5C 
		public bool IsLoopback { get; } // 0x0058FC5C-0x0058FD10 
		public string PathAndQuery { get; } // 0x0058FD10-0x0058FE1C 
		public bool IsUnc { get; } // 0x0058FE1C-0x0058FEC4 
		private static object InitializeLock { get; } // 0x0058FEF4-0x0058FFD4 
		public int Port { get; } // 0x00590180-0x00590294 
		public string Fragment { get; } // 0x00590294-0x005903C8 
		public string Scheme { get; } // 0x005903C8-0x0059046C 
		private bool OriginalStringSwitched { get; } // 0x0059046C-0x005904C0 
		public string OriginalString { get; } // 0x0058E6E0-0x0058E714 
		public string DnsSafeHost { get; } // 0x005904C0-0x005907EC 
		public bool IsAbsoluteUri { get; } // 0x0058D6E4-0x0058D6F4 
		public bool UserEscaped { get; } // 0x005907EC-0x005907F8 
	
		// Nested types
		[Flags] // 0x003A070C-0x003A071C
		private enum Flags : ulong // TypeDefIndex: 1537
		{
			Zero = 0,
			HostNotParsed = 0,
			SchemeNotCanonical = 1,
			UserNotCanonical = 2,
			HostNotCanonical = 4,
			PortNotCanonical = 8,
			PathNotCanonical = 16,
			QueryNotCanonical = 32,
			FragmentNotCanonical = 64,
			CannotDisplayCanonical = 127,
			E_UserNotCanonical = 128,
			E_HostNotCanonical = 256,
			E_PortNotCanonical = 512,
			E_PathNotCanonical = 1024,
			E_QueryNotCanonical = 2048,
			E_FragmentNotCanonical = 4096,
			E_CannotDisplayCanonical = 8064,
			ShouldBeCompressed = 8192,
			FirstSlashAbsent = 16384,
			BackslashInPath = 32768,
			IndexMask = 65535,
			IPv6HostType = 65536,
			IPv4HostType = 131072,
			DnsHostType = 196608,
			UncHostType = 262144,
			BasicHostType = 327680,
			UnusedHostType = 393216,
			HostTypeMask = 458752,
			UnknownHostType = 458752,
			UserEscaped = 524288,
			AuthorityFound = 1048576,
			HasUserInfo = 2097152,
			LoopbackHost = 4194304,
			NotDefaultPort = 8388608,
			UserDrivenParsing = 16777216,
			CanonicalDnsHost = 33554432,
			ErrorOrParsingRecursion = 67108864,
			DosPath = 134217728,
			UncPath = 268435456,
			ImplicitFile = 536870912,
			MinimalUriInfoSet = 1073741824,
			AllUriInfoSet = 2147483648,
			IdnHost = 4294967296,
			HasUnicode = 8589934592,
			HostUnicodeNormalized = 17179869184,
			RestUnicodeNormalized = 34359738368,
			UnicodeHost = 68719476736,
			IntranetUri = 137438953472,
			UseOrigUncdStrOffset = 274877906944,
			UserIriCanonical = 549755813888,
			PathIriCanonical = 1099511627776,
			QueryIriCanonical = 2199023255552,
			FragmentIriCanonical = 4398046511104,
			IriCanonical = 8246337208320,
			CompressedSlashes = 17592186044416
		}
	
		private class UriInfo // TypeDefIndex: 1538
		{
			// Fields
			public string Host; // 0x10
			public string ScopeId; // 0x18
			public string String; // 0x20
			public Offset Offset; // 0x28
			public string DnsSafeHost; // 0x38
			public MoreInfo MoreInfo; // 0x40
	
			// Constructors
			public UriInfo(); // 0x00C7C348-0x00C7C350
		}
	
		private struct Offset // TypeDefIndex: 1539
		{
			// Fields
			public ushort Scheme; // 0x00
			public ushort User; // 0x02
			public ushort Host; // 0x04
			public ushort PortValue; // 0x06
			public ushort Path; // 0x08
			public ushort Query; // 0x0A
			public ushort Fragment; // 0x0C
			public ushort End; // 0x0E
		}
	
		private class MoreInfo // TypeDefIndex: 1540
		{
			// Fields
			public string Path; // 0x10
			public string Fragment; // 0x18
			public string AbsoluteUri; // 0x20
			public int Hash; // 0x28
			public string RemoteUrl; // 0x30
	
			// Constructors
			public MoreInfo(); // 0x00C7C340-0x00C7C348
		}
	
		[Flags] // 0x003A071C-0x003A072C
		private enum Check // TypeDefIndex: 1541
		{
			None = 0,
			EscapedCanonical = 1,
			DisplayCanonical = 2,
			DotSlashAttn = 4,
			FoundNonAscii = 8,
			BackslashInPath = 16,
			ReservedFound = 32,
			NotIriCanonical = 64,
			DotSlashEscaped = 128
		}
	
		// Constructors
		public Uri(string uriString); // 0x0058D2C8-0x0058D378
		public Uri(string uriString, UriKind uriKind); // 0x0058D548-0x0058D5FC
		public Uri(Uri baseUri, string relativeUri); // 0x0058D5FC-0x0058D6E4
		public Uri(Uri baseUri, Uri relativeUri); // 0x0058E070-0x0058E28C
		protected Uri(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x0058F64C-0x0058F774
		private Uri(Flags flags, UriParser uriParser, string uri); // 0x0059A1C0-0x0059A204
		static Uri(); // 0x0059A204-0x0059A5F8
	
		// Methods
		internal static bool IriParsingStatic(UriParser syntax); // 0x0058B4BC-0x0058B558
		private bool AllowIdnStatic(UriParser syntax, Flags flags); // 0x0058B648-0x0058B740
		private bool IsIntranet(string schemeHost); // 0x0058B74C-0x0058B754
		private void SetUserDrivenParsing(); // 0x0058B760-0x0058B774
		private bool NotAny(Flags flags); // 0x0058B638-0x0058B648
		private bool InFact(Flags flags); // 0x0058B7F0-0x0058B800
		private static bool StaticNotAny(Flags allFlags, Flags checkFlags); // 0x0058B740-0x0058B74C
		private static bool StaticInFact(Flags allFlags, Flags checkFlags); // 0x0058B800-0x0058B80C
		private UriInfo EnsureUriInfo(); // 0x0058B80C-0x0058B83C
		private void EnsureParseRemaining(); // 0x0058BF24-0x0058BF34
		private void EnsureHostString(bool allowDnsOptimization); // 0x0058CD70-0x0058CDE4
		private void CreateUri(Uri baseUri, string relativeUri, bool dontEscape); // 0x0058D6F4-0x0058D8A4
		private static ParsingError GetCombinedString(Uri baseUri, string relativeStr, bool dontEscape, ref string result); // 0x0058E28C-0x0058E598
		private static UriFormatException GetException(ParsingError err); // 0x0058F530-0x0058F64C
		void ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x0058F774-0x0058F778
		protected void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x0058F778-0x0058F86C
		private static bool StaticIsFile(UriParser syntax); // 0x0058FEC4-0x0058FEF4
		private static void InitializeUriConfig(); // 0x0058FFD4-0x00590180
		internal static bool IsGenDelim(char ch); // 0x005907F8-0x00590844
		public static bool IsHexDigit(char character); // 0x00590844-0x00590880
		public static int FromHex(char digit); // 0x00590880-0x00590960
		public override int GetHashCode(); // 0x00590960-0x00590AD8
		public override string ToString(); // 0x00590B5C-0x00590C54
		public static bool operator ==(Uri uri1, Uri uri2); // 0x00590E9C-0x00590ED4
		public static bool operator !=(Uri uri1, Uri uri2); // 0x0058DEC4-0x0058DF10
		public override bool Equals(object comparand); // 0x00590ED4-0x005916F0
		private static bool CheckForColonInFirstPathSegment(string uriString); // 0x005917C8-0x00591888
		private static ParsingError ParseScheme(string uriString, ref Flags flags, ref UriParser syntax); // 0x00591888-0x00591988
		internal UriFormatException ParseMinimal(); // 0x00591EAC-0x00591F3C
		private ParsingError PrivateParseMinimal(); // 0x00591F3C-0x005926C0
		private void PrivateParseMinimalIri(string newHost, ushort idx); // 0x005936CC-0x00593800
		private void CreateUriInfo(Flags cF); // 0x0058B83C-0x0058BF24
		private void CreateHostString(); // 0x0058CDE4-0x0058D2C8
		private static string CreateHostStringHelper(string str, ushort idx, ushort end, ref Flags flags, ref string scopeId); // 0x00593D88-0x00593F98
		private void GetHostViaCustomSyntax(); // 0x00593800-0x00593D88
		internal string GetParts(UriComponents uriParts, UriFormat formatAs); // 0x0058F86C-0x0058F870
		private string GetEscapedParts(UriComponents uriParts); // 0x005945C0-0x005946A4
		private string GetUnescapedParts(UriComponents uriParts, UriFormat formatAs); // 0x0059657C-0x0059666C
		private string ReCreateParts(UriComponents parts, ushort nonCanonical, UriFormat formatAs); // 0x005952D4-0x0059657C
		private string GetUriPartsFromUserString(UriComponents uriParts); // 0x005946A4-0x005952D4
		private void ParseRemaining(); // 0x0058BF34-0x0058CD70
		private static unsafe ushort ParseSchemeCheckImplicitFile(char* uriString, ushort length, ref ParsingError err, ref Flags flags, ref UriParser syntax); // 0x00591988-0x00591EAC
		private static unsafe bool CheckKnownSchemes(long* lptr, ushort nChars, ref UriParser syntax); // 0x00597058-0x00597650
		private static unsafe ParsingError CheckSchemeSyntax(char* ptr, ushort length, ref UriParser syntax); // 0x0058E598-0x0058E6E0
		private unsafe ushort CheckAuthorityHelper(char* pString, ushort idx, ushort length, ref ParsingError err, ref Flags flags, UriParser syntax, ref string newHost); // 0x0059272C-0x005936CC
		private unsafe void CheckAuthorityHelperHandleDnsIri(char* pString, ushort start, int end, int startInput, bool iriParsing, bool hasUnicode, UriParser syntax, string userInfoString, ref Flags flags, ref bool justNormalized, ref string newHost, ref ParsingError err); // 0x00597650-0x005979E0
		private unsafe void CheckAuthorityHelperHandleAnyHostIri(char* pString, int startInput, int end, bool iriParsing, bool hasUnicode, UriParser syntax, ref Flags flags, ref string newHost, ref ParsingError err); // 0x005979E0-0x00597CBC
		private void FindEndOfComponent(string input, ref ushort idx, ushort end, char delim); // 0x00596FA4-0x00597004
		private unsafe void FindEndOfComponent(char* str, ref ushort idx, ushort end, char delim); // 0x00597E44-0x00597EE8
		private unsafe Check CheckCanonical(char* str, ref ushort idx, ushort end, char delim); // 0x00593F98-0x005943C4
		private char[] GetCanonicalPath(char[] dest, ref int pos, UriFormat formatAs); // 0x0059666C-0x00596FA4
		private static unsafe void UnescapeOnly(char* pch, int start, ref int end, char ch1, char ch2, char ch3); // 0x00597EE8-0x00598128
		private static char[] Compress(char[] dest, ushort start, ref int destLength, UriParser syntax); // 0x00598128-0x005986A8
		internal static int CalculateCaseInsensitiveHashCode(string text); // 0x00590AD8-0x00590B5C
		private static string CombineUri(Uri basePart, string relativePart, UriFormat uriFormat); // 0x0058E714-0x0058F530
		private static bool IsLWS(char ch); // 0x005926C0-0x00592700
		private static bool IsAsciiLetter(char character); // 0x00592700-0x0059272C
		internal static bool IsAsciiLetterOrDigit(char character); // 0x005986A8-0x00598738
		internal static bool IsBidiControlCharacter(char ch); // 0x00598738-0x00598780
		internal static unsafe string StripBidiControlCharacter(char* strToClean, int start, int length); // 0x00597CBC-0x00597E44
		private void CreateThis(string uri, bool dontEscape, UriKind uriKind); // 0x0058D378-0x0058D548
		private void InitializeUri(ParsingError err, UriKind uriKind, out UriFormatException e); // 0x00598780-0x00598D2C
		private bool CheckForConfigLoad(string data); // 0x00598D2C-0x00598E04
		private bool CheckForUnicode(string data); // 0x00598E04-0x00598F74
		private bool CheckForEscapedUnreserved(string data); // 0x00598F74-0x0059913C
		public static bool TryCreate(string uriString, UriKind uriKind, out Uri result); // 0x005916F0-0x005917C8
		public string GetComponents(UriComponents components, UriFormat format); // 0x005943C4-0x005945C0
		public bool IsWellFormedOriginalString(); // 0x00599678-0x005996D4
		public static bool IsWellFormedUriString(string uriString, UriKind uriKind); // 0x00599C88-0x00599D3C
		internal bool InternalIsWellFormedOriginalString(); // 0x005996D4-0x00599C88
		public static string UnescapeDataString(string stringToUnescape); // 0x00599D3C-0x00599F28
		public static string EscapeUriString(string stringToEscape); // 0x00599F28-0x0059A074
		public static string EscapeDataString(string stringToEscape); // 0x0059A074-0x0059A1C0
		internal string EscapeUnescapeIri(string input, int start, int end, UriComponents component); // 0x00597004-0x00597058
		internal static Uri CreateHelper(string uriString, bool dontEscape, UriKind uriKind, ref UriFormatException e); // 0x0059913C-0x005993D4
		internal static Uri ResolveHelper(Uri baseUri, Uri relativeUri, ref string newUriString, ref bool userEscaped, out UriFormatException e); // 0x0058D8A4-0x0058DEC4
		private string GetRelativeSerializationString(UriFormat format); // 0x005993D4-0x00599678
		internal string GetComponentsHelper(UriComponents uriComponents, UriFormat uriFormat); // 0x00590C54-0x00590E9C
		private void CreateThisFromUri(Uri otherUri); // 0x0058DF10-0x0058E070
	}

	[Serializable]
	public class UriFormatException : FormatException, ISerializable // TypeDefIndex: 1542
	{
		// Constructors
		public UriFormatException(); // 0x00C7C350-0x00C7C358
		public UriFormatException(string textString); // 0x00C7C358-0x00C7C360
		protected UriFormatException(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x00C7C360-0x00C7C368
	
		// Methods
		void ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x00C7C368-0x00C7C370
	}

	public enum UriKind // TypeDefIndex: 1543
	{
		RelativeOrAbsolute = 0,
		Absolute = 1,
		Relative = 2
	}

	[Flags] // 0x003A072C-0x003A073C
	public enum UriComponents // TypeDefIndex: 1544
	{
		SerializationInfoString = -2147483648,
		Scheme = 1,
		UserInfo = 2,
		Host = 4,
		Port = 8,
		SchemeAndServer = 13,
		Path = 16,
		Query = 32,
		PathAndQuery = 48,
		HttpRequestUrl = 61,
		Fragment = 64,
		AbsoluteUri = 127,
		StrongPort = 128,
		HostAndPort = 132,
		StrongAuthority = 134,
		NormalizedHost = 256,
		KeepDelimiter = 1073741824
	}

	public enum UriFormat // TypeDefIndex: 1545
	{
		UriEscaped = 1,
		Unescaped = 2,
		SafeUnescaped = 3
	}

	public enum UriIdnScope // TypeDefIndex: 1546
	{
		None = 0,
		AllExceptIntranet = 1,
		All = 2
	}

	internal enum ParsingError // TypeDefIndex: 1547
	{
		None = 0,
		BadFormat = 1,
		BadScheme = 2,
		BadAuthority = 3,
		EmptyUriString = 4,
		LastRelativeUriOkErrIndex = 4,
		SchemeLimit = 5,
		SizeLimit = 6,
		MustRootedPath = 7,
		BadHostName = 8,
		NonEmptyHost = 9,
		BadPort = 10,
		BadAuthorityTerminator = 11,
		CannotCreateRelative = 12
	}

	[Flags] // 0x003A073C-0x003A074C
	internal enum UnescapeMode // TypeDefIndex: 1548
	{
		CopyOnly = 0,
		Escape = 1,
		Unescape = 2,
		EscapeUnescape = 3,
		V1ToStringFlag = 4,
		UnescapeAll = 8,
		UnescapeAllOrThrow = 24
	}

	internal static class UriHelper // TypeDefIndex: 1549
	{
		// Fields
		private static readonly char[] HexUpperChars; // 0x00
	
		// Constructors
		static UriHelper(); // 0x00C7E0C8-0x00C7E144
	
		// Methods
		internal static char[] EscapeString(string input, int start, int end, char[] dest, ref int destPos, bool isUriString, char force1, char force2, char rsvd); // 0x00C7C370-0x00C7C93C
		private static unsafe char[] EnsureDestinationSize(char* pStr, char[] dest, int currentInputPos, short charsToAdd, short minReallocateChars, ref int destPos, int prevInputPos); // 0x00C7C93C-0x00C7CA70
		internal static char[] UnescapeString(string input, int start, int end, char[] dest, ref int destPosition, char rsvd1, char rsvd2, char rsvd3, UnescapeMode unescapeMode, UriParser syntax, bool isQuery); // 0x00C7CEE8-0x00C7CFD0
		internal static unsafe char[] UnescapeString(char* pStr, int start, int end, char[] dest, ref int destPosition, char rsvd1, char rsvd2, char rsvd3, UnescapeMode unescapeMode, UriParser syntax, bool isQuery); // 0x00C7CFD0-0x00C7D950
		internal static unsafe void MatchUTF8Sequence(char* pDest, char[] dest, ref int destOffset, char[] unescapedChars, int charCount, byte[] bytes, int byteCount, bool isQuery, bool iriParsing); // 0x00C7D9D8-0x00C7DFB4
		internal static void EscapeAsciiChar(char ch, char[] to, ref int pos); // 0x00C7CA70-0x00C7CC14
		internal static char EscapedAscii(char digit, char next); // 0x00C7CC14-0x00C7CCE4
		internal static bool IsNotSafeForUnescape(char ch); // 0x00C7D950-0x00C7D9D8
		private static bool IsReservedUnreservedOrHash(char c); // 0x00C7CDE0-0x00C7CEE8
		internal static bool IsUnreserved(char c); // 0x00C7CCE4-0x00C7CDE0
		internal static bool Is3986Unreserved(char c); // 0x00C7E024-0x00C7E0C8
	}

	public abstract class UriParser // TypeDefIndex: 1550
	{
		// Fields
		private static readonly Dictionary<string, UriParser> m_Table; // 0x00
		private static Dictionary<string, UriParser> m_TempTable; // 0x08
		private UriSyntaxFlags m_Flags; // 0x10
		private UriSyntaxFlags m_UpdatableFlags; // 0x14
		private bool m_UpdatableFlagsUsed; // 0x18
		private int m_Port; // 0x1C
		private string m_Scheme; // 0x20
		internal static UriParser HttpUri; // 0x10
		internal static UriParser HttpsUri; // 0x18
		internal static UriParser WsUri; // 0x20
		internal static UriParser WssUri; // 0x28
		internal static UriParser FtpUri; // 0x30
		internal static UriParser FileUri; // 0x38
		internal static UriParser GopherUri; // 0x40
		internal static UriParser NntpUri; // 0x48
		internal static UriParser NewsUri; // 0x50
		internal static UriParser MailToUri; // 0x58
		internal static UriParser UuidUri; // 0x60
		internal static UriParser TelnetUri; // 0x68
		internal static UriParser LdapUri; // 0x70
		internal static UriParser NetTcpUri; // 0x78
		internal static UriParser NetPipeUri; // 0x80
		internal static UriParser VsMacrosUri; // 0x88
		private static readonly UriQuirksVersion s_QuirksVersion; // 0x90
		private static readonly UriSyntaxFlags HttpSyntaxFlags; // 0x94
		private static readonly UriSyntaxFlags FileSyntaxFlags; // 0x98
	
		// Properties
		internal string SchemeName { get; } // 0x00C7E144-0x00C7E14C 
		internal int DefaultPort { get; } // 0x00C7E14C-0x00C7E154 
		internal static bool ShouldUseLegacyV2Quirks { get; } // 0x00C7DFB4-0x00C7E024 
		internal UriSyntaxFlags Flags { get; } // 0x00C7F080-0x00C7F088 
		internal bool IsSimple { get; } // 0x00C7F468-0x00C7F474 
	
		// Nested types
		private enum UriQuirksVersion // TypeDefIndex: 1551
		{
			V2 = 2,
			V3 = 3
		}
	
		private class BuiltInUriParser : UriParser // TypeDefIndex: 1552
		{
			// Constructors
			internal BuiltInUriParser(string lwrCaseScheme, int defaultPort, UriSyntaxFlags syntaxFlags); // 0x00C7EFF0-0x00C7F080
		}
	
		// Constructors
		static UriParser(); // 0x00C7E64C-0x00C7EFF0
		internal UriParser(UriSyntaxFlags flags); // 0x00C7F11C-0x00C7F190
	
		// Methods
		protected virtual UriParser OnNewUri(); // 0x00C7E154-0x00C7E158
		protected virtual void InitializeAndValidate(Uri uri, out UriFormatException parsingError); // 0x00C7E158-0x00C7E194
		protected virtual string Resolve(Uri baseUri, Uri relativeUri, out UriFormatException parsingError); // 0x00C7E194-0x00C7E3BC
		protected virtual string GetComponents(Uri uri, UriComponents components, UriFormat format); // 0x00C7E3BC-0x00C7E61C
		protected virtual bool IsWellFormedOriginalString(Uri uri); // 0x00C7E61C-0x00C7E64C
		internal bool NotAny(UriSyntaxFlags flags); // 0x00C7F088-0x00C7F090
		internal bool InFact(UriSyntaxFlags flags); // 0x00C7F0F4-0x00C7F114
		internal bool IsAllSet(UriSyntaxFlags flags); // 0x00C7F114-0x00C7F11C
		private bool IsFullMatch(UriSyntaxFlags flags, UriSyntaxFlags expected); // 0x00C7F090-0x00C7F0F4
		internal static UriParser FindOrFetchAsUnknownV1Syntax(string lwrCaseScheme); // 0x00C7F190-0x00C7F468
		internal UriParser InternalOnNewUri(); // 0x00C7F474-0x00C7F504
		internal void InternalValidate(Uri thisUri, out UriFormatException parsingError); // 0x00C7F504-0x00C7F510
		internal string InternalResolve(Uri thisBaseUri, Uri uriLink, out UriFormatException parsingError); // 0x00C7F510-0x00C7F51C
		internal string InternalGetComponents(Uri thisUri, UriComponents uriComponents, UriFormat uriFormat); // 0x00C7F51C-0x00C7F528
		internal bool InternalIsWellFormedOriginalString(Uri thisUri); // 0x00C7F528-0x00C7F534
	}

	internal class DomainNameHelper // TypeDefIndex: 1553
	{
		// Methods
		internal static string ParseCanonicalName(string str, int start, int end, ref bool loopback); // 0x008FFA64-0x008FFC34
		internal static unsafe bool IsValid(char* name, ushort pos, ref int returnedEnd, ref bool notCanonical, bool notImplicitFile); // 0x008FFC34-0x008FFDB4
		internal static unsafe bool IsValidByIri(char* name, ushort pos, ref int returnedEnd, ref bool notCanonical, bool notImplicitFile); // 0x008FFE64-0x00900050
		internal static unsafe string IdnEquivalent(char* hostname, int start, int end, ref bool allAscii, ref bool atLeastOneValidIdn); // 0x00900050-0x009002F4
		internal static unsafe string IdnEquivalent(char* hostname, int start, int end, ref bool allAscii, ref string bidiStrippedHost); // 0x009002F4-0x009004F0
		private static bool IsIdnAce(string input, int index); // 0x0090053C-0x00900604
		private static unsafe bool IsIdnAce(char* input, int index); // 0x009004F0-0x0090053C
		internal static unsafe string UnicodeEquivalent(string idnHost, char* hostname, int start, int end); // 0x00900604-0x0090072C
		internal static unsafe string UnicodeEquivalent(char* hostname, int start, int end, ref bool allAscii, ref bool atLeastOneValidIdn); // 0x0090072C-0x00900BCC
		private static bool IsASCIILetterOrDigit(char character, ref bool notCanonical); // 0x008FFDB4-0x008FFE00
		private static bool IsValidDomainLabelCharacter(char character, ref bool notCanonical); // 0x008FFE00-0x008FFE64
	}

	internal static class IPv4AddressHelper // TypeDefIndex: 1554
	{
		// Methods
		internal static string ParseCanonicalName(string str, int start, int end, ref bool isLoopback); // 0x009016A4-0x009019E8
		internal static int ParseHostNumber(string str, int start, int end); // 0x00901A78-0x00901ACC
		internal static unsafe bool IsValid(char* name, int start, ref int end, bool allowIPv6, bool notImplicitFile, bool unknownScheme); // 0x00901B94-0x00901BC8
		internal static unsafe bool IsValidCanonical(char* name, int start, ref int end, bool allowIPv6, bool notImplicitFile); // 0x00901BC8-0x00901D04
		internal static unsafe long ParseNonCanonical(char* name, int start, ref int end, bool notImplicitFile); // 0x00901D04-0x009021CC
		private static unsafe bool Parse(string name, byte* numbers, int start, int end); // 0x009019E8-0x00901A78
		private static unsafe bool ParseCanonical(string name, byte* numbers, int start, int end); // 0x00901ACC-0x00901B94
	}

	internal static class IPv6AddressHelper // TypeDefIndex: 1555
	{
		// Methods
		internal static string ParseCanonicalName(string str, int start, ref bool isLoopback, ref string scopeId); // 0x009021CC-0x00902290
		internal static unsafe string CreateCanonicalName(ushort* numbers); // 0x00902844-0x00903048
		private static unsafe KeyValuePair<int, int> FindCompressionRange(ushort* numbers); // 0x00903048-0x00903128
		private static unsafe bool ShouldHaveIpv4Embedded(ushort* numbers); // 0x00903128-0x009031B8
		private static unsafe bool InternalIsValid(char* name, int start, ref int end, bool validateStrictAddress); // 0x009031B8-0x00903490
		internal static unsafe bool IsValid(char* name, int start, ref int end); // 0x00903490-0x00903498
		internal static unsafe bool IsValidStrict(char* name, int start, ref int end); // 0x00903498-0x009034A0
		internal static unsafe bool Parse(string address, ushort* numbers, int start, ref string scopeId); // 0x00902290-0x00902844
	}

	internal class UncNameHelper // TypeDefIndex: 1556
	{
		// Methods
		internal static string ParseCanonicalName(string str, int start, int end, ref bool loopback); // 0x0058B188-0x0058B190
		internal static unsafe bool IsValid(char* name, ushort start, ref int returnedEnd, bool notImplicitFile); // 0x0058B190-0x0058B464
	}

	[Flags] // 0x003A074C-0x003A075C
	internal enum UriSyntaxFlags // TypeDefIndex: 1557
	{
		None = 0,
		MustHaveAuthority = 1,
		OptionalAuthority = 2,
		MayHaveUserInfo = 4,
		MayHavePort = 8,
		MayHavePath = 16,
		MayHaveQuery = 32,
		MayHaveFragment = 64,
		AllowEmptyHost = 128,
		AllowUncHost = 256,
		AllowDnsHost = 512,
		AllowIPv4Host = 1024,
		AllowIPv6Host = 2048,
		AllowAnInternetHost = 3584,
		AllowAnyOtherHost = 4096,
		FileLikeUri = 8192,
		MailToLikeUri = 16384,
		V1_UnknownUri = 65536,
		SimpleUserSyntax = 131072,
		BuiltInSyntax = 262144,
		ParserSchemeOnly = 524288,
		AllowDOSPath = 1048576,
		PathIsRooted = 2097152,
		ConvertPathSlashes = 4194304,
		CompressPath = 8388608,
		CanonicalizeAsFilePath = 16777216,
		UnEscapeDotsAndSlashes = 33554432,
		AllowIdn = 67108864,
		AllowIriParsing = 268435456
	}

	internal enum IOOperation // TypeDefIndex: 1558
	{
		Read = 1,
		Write = 2
	}

	internal delegate void IOAsyncCallback(IOAsyncResult ioares); // TypeDefIndex: 1559; 0x00900BDC-0x00901310

	internal abstract class IOAsyncResult : IAsyncResult // TypeDefIndex: 1560
	{
		// Fields
		private AsyncCallback async_callback; // 0x10
		private object async_state; // 0x18
		private ManualResetEvent wait_handle; // 0x20
		private bool completed_synchronously; // 0x28
		private bool completed; // 0x29
	
		// Properties
		public AsyncCallback AsyncCallback { get; } // 0x009013C4-0x009013CC 
		public object AsyncState { get; } // 0x009013CC-0x009013D4 
		public WaitHandle AsyncWaitHandle { get; } // 0x009013D4-0x009014E0 
		public bool CompletedSynchronously { get; protected set; } // 0x009014E0-0x009014E8 0x009014E8-0x009014F4
		public bool IsCompleted { get; protected set; } // 0x009014F4-0x009014FC 0x009014FC-0x009015AC
	
		// Constructors
		protected IOAsyncResult(AsyncCallback async_callback, object async_state); // 0x0090138C-0x009013C4
	
		// Methods
		internal abstract void CompleteDisposed();
	}

	internal class IOSelectorJob : IThreadPoolWorkItem // TypeDefIndex: 1561
	{
		// Fields
		private IOOperation operation; // 0x10
		private IOAsyncCallback callback; // 0x18
		private IOAsyncResult state; // 0x20
	
		// Constructors
		public IOSelectorJob(IOOperation operation, IOAsyncCallback callback, IOAsyncResult state); // 0x009015FC-0x0090163C
	
		// Methods
		void IThreadPoolWorkItem.ExecuteWorkItem(); // 0x0090163C-0x0090166C
		void IThreadPoolWorkItem.MarkAborted(ThreadAbortException tae); // 0x0090166C-0x00901670
		public void MarkDisposed(); // 0x00901670-0x009016A4
	}

	internal static class IOSelector // TypeDefIndex: 1562
	{
		// Methods
		public static void Add(IntPtr handle, IOSelectorJob job); // 0x009015AC-0x009015FC
	}

	public class UriTypeConverter : TypeConverter // TypeDefIndex: 1563
	{
		// Constructors
		public UriTypeConverter(); // 0x00C7F534-0x00C7F59C
	}
}

namespace System.Text.RegularExpressions
{
	[Serializable]
	public class Regex : ISerializable // TypeDefIndex: 1564
	{
		// Fields
		protected internal string pattern; // 0x10
		protected internal RegexRunnerFactory factory; // 0x18
		protected internal RegexOptions roptions; // 0x20
		[NonSerialized]
		private static readonly TimeSpan MaximumMatchTimeout; // 0x00
		[NonSerialized]
		public static readonly TimeSpan InfiniteMatchTimeout; // 0x08
		[OptionalField] // 0x003A0E4C-0x003A0E84
		protected internal TimeSpan internalMatchTimeout; // 0x28
		[NonSerialized]
		internal static readonly TimeSpan FallbackDefaultMatchTimeout; // 0x10
		[NonSerialized]
		internal static readonly TimeSpan DefaultMatchTimeout; // 0x18
		protected internal Hashtable caps; // 0x30
		protected internal Hashtable capnames; // 0x38
		protected internal string[] capslist; // 0x40
		protected internal int capsize; // 0x48
		internal ExclusiveReference runnerref; // 0x50
		internal SharedReference replref; // 0x58
		internal RegexCode code; // 0x60
		internal bool refsInitialized; // 0x68
		internal static LinkedList<CachedCodeEntry> livecode; // 0x20
		internal static int cacheSize; // 0x28
	
		// Properties
		public RegexOptions Options { get; } // 0x0077DDCC-0x0077DDD4 
		public TimeSpan MatchTimeout { get; } // 0x0077DDD4-0x0077DDDC 
		public bool RightToLeft { get; } // 0x0077E04C-0x0077E058 
	
		// Constructors
		protected Regex(); // 0x0077CBE0-0x0077CC5C
		public Regex(string pattern); // 0x0077CC5C-0x0077CCE4
		public Regex(string pattern, RegexOptions options); // 0x0077D19C-0x0077D228
		private Regex(string pattern, RegexOptions options, TimeSpan matchTimeout, bool useCache); // 0x0077CCE4-0x0077D19C
		protected Regex(SerializationInfo info, StreamingContext context); // 0x0077DB08-0x0077DCB0
		static Regex(); // 0x0077E8A8-0x0077E9B8
	
		// Methods
		void ISerializable.GetObjectData(SerializationInfo si, StreamingContext context); // 0x0077DCB0-0x0077DDCC
		protected internal static void ValidateMatchTimeout(TimeSpan matchTimeout); // 0x0077D228-0x0077D3A0
		private static TimeSpan InitDefaultMatchTimeout(); // 0x0077DDDC-0x0077E04C
		public override string ToString(); // 0x0077E064-0x0077E06C
		public string GroupNameFromNumber(int i); // 0x0077AFBC-0x0077B124
		public bool IsMatch(string input); // 0x0077E06C-0x0077E128
		public bool IsMatch(string input, int startat); // 0x0077E128-0x0077E1F4
		public static Match Match(string input, string pattern); // 0x0077E1F4-0x0077E278
		public static Match Match(string input, string pattern, RegexOptions options, TimeSpan matchTimeout); // 0x0077E278-0x0077E310
		public Match Match(string input); // 0x0077E310-0x0077E3CC
		public Match Match(string input, int startat); // 0x0077E3CC-0x0077E48C
		public static string Replace(string input, string pattern, string replacement); // 0x0077E48C-0x0077E518
		public static string Replace(string input, string pattern, string replacement, RegexOptions options, TimeSpan matchTimeout); // 0x0077E518-0x0077E5B8
		public string Replace(string input, string replacement); // 0x0077E5B8-0x0077E680
		public string Replace(string input, string replacement, int count, int startat); // 0x0077E680-0x0077E89C
		protected void InitializeReferences(); // 0x0077D600-0x0077D6E8
		internal Match Run(bool quick, int prevlen, string input, int beginning, int length, int startat); // 0x0077B70C-0x0077BA6C
		private static CachedCodeEntry LookupCachedAndUpdate(string key); // 0x0077D3A0-0x0077D600
		private CachedCodeEntry CacheCode(string key); // 0x0077D6E8-0x0077DB08
		protected bool UseOptionR(); // 0x0077E058-0x0077E064
		internal bool UseOptionInvariant(); // 0x0077E89C-0x0077E8A8
	}

	internal sealed class CachedCodeEntry // TypeDefIndex: 1565
	{
		// Fields
		internal string _key; // 0x10
		internal RegexCode _code; // 0x18
		internal Hashtable _caps; // 0x20
		internal Hashtable _capnames; // 0x28
		internal string[] _capslist; // 0x30
		internal int _capsize; // 0x38
		internal RegexRunnerFactory _factory; // 0x40
		internal ExclusiveReference _runnerref; // 0x48
		internal SharedReference _replref; // 0x50
	
		// Constructors
		internal CachedCodeEntry(string key, Hashtable capnames, string[] capslist, RegexCode code, Hashtable caps, int capsize, ExclusiveReference runner, SharedReference repl); // 0x0077A630-0x0077A6A8
	}

	internal sealed class ExclusiveReference // TypeDefIndex: 1566
	{
		// Fields
		private RegexRunner _ref; // 0x10
		private object _obj; // 0x18
		private int _locked; // 0x20
	
		// Constructors
		public ExclusiveReference(); // 0x0077A9B0-0x0077A9B8
	
		// Methods
		internal object Get(); // 0x0077A80C-0x0077A85C
		internal void Release(object obj); // 0x0077A85C-0x0077A9B0
	}

	internal sealed class SharedReference // TypeDefIndex: 1567
	{
		// Fields
		private WeakReference _ref; // 0x10
		private int _locked; // 0x18
	
		// Constructors
		public SharedReference(); // 0x0058B11C-0x0058B188
	
		// Methods
		internal object Get(); // 0x0058B054-0x0058B0B4
		internal void Cache(object obj); // 0x0058B0B4-0x0058B11C
	}

	internal sealed class RegexBoyerMoore // TypeDefIndex: 1568
	{
		// Fields
		internal int[] _positive; // 0x10
		internal int[] _negativeASCII; // 0x18
		internal int[][] _negativeUnicode; // 0x20
		internal string _pattern; // 0x28
		internal int _lowASCII; // 0x30
		internal int _highASCII; // 0x34
		internal bool _rightToLeft; // 0x38
		internal bool _caseInsensitive; // 0x39
		internal CultureInfo _culture; // 0x40
	
		// Constructors
		internal RegexBoyerMoore(string pattern, bool caseInsensitive, bool rightToLeft, CultureInfo culture); // 0x0056FACC-0x00570280
	
		// Methods
		private bool MatchPattern(string text, int index); // 0x00570280-0x00570418
		internal bool IsMatch(string text, int index, int beglimit, int endlimit); // 0x00570418-0x0057050C
		internal int Scan(string text, int index, int beglimit, int endlimit); // 0x0057050C-0x0057093C
		public override string ToString(); // 0x0057093C-0x00570944
	}

	[Serializable]
	public class Capture // TypeDefIndex: 1569
	{
		// Fields
		internal string _text; // 0x10
		internal int _index; // 0x18
		internal int _length; // 0x1C
	
		// Properties
		public int Index { get; } // 0x0077A6E8-0x0077A6F0 
		public int Length { get; } // 0x0077A6F0-0x0077A6F8 
		public string Value { get; } // 0x0077A6F8-0x0077A73C 
	
		// Constructors
		internal Capture(string text, int i, int l); // 0x0077A6A8-0x0077A6E8
	
		// Methods
		public override string ToString(); // 0x0077A73C-0x0077A740
		internal string GetOriginalString(); // 0x0077A740-0x0077A748
		internal string GetLeftSubstring(); // 0x0077A748-0x0077A784
		internal string GetRightSubstring(); // 0x0077A784-0x0077A80C
	}

	internal sealed class RegexCharClass // TypeDefIndex: 1570
	{
		// Fields
		private List<SingleRange> _rangelist; // 0x10
		private StringBuilder _categories; // 0x18
		private bool _canonical; // 0x20
		private bool _negate; // 0x21
		private RegexCharClass _subtractor; // 0x28
		private static readonly string InternalRegexIgnoreCase; // 0x00
		private static readonly string Space; // 0x08
		private static readonly string NotSpace; // 0x10
		private static readonly string Word; // 0x18
		private static readonly string NotWord; // 0x20
		internal static readonly string SpaceClass; // 0x28
		internal static readonly string NotSpaceClass; // 0x30
		internal static readonly string WordClass; // 0x38
		internal static readonly string NotWordClass; // 0x40
		internal static readonly string DigitClass; // 0x48
		internal static readonly string NotDigitClass; // 0x50
		private static Dictionary<string, string> _definedCategories; // 0x58
		private static readonly string[,] _propTable; // 0x60
		private static readonly LowerCaseMapping[] _lcTable; // 0x68
	
		// Properties
		internal bool CanMerge { get; } // 0x005782CC-0x005782EC 
		internal bool Negate { set; } // 0x005782EC-0x005782F8
	
		// Nested types
		private struct LowerCaseMapping // TypeDefIndex: 1571
		{
			// Fields
			internal char _chMin; // 0x00
			internal char _chMax; // 0x02
			internal int _lcOp; // 0x04
			internal int _data; // 0x08
	
			// Constructors
			internal LowerCaseMapping(char chMin, char chMax, int lcOp, int data); // 0x0057ABF8-0x0057AC08
		}
	
		private sealed class SingleRangeComparer : IComparer<SingleRange> // TypeDefIndex: 1572
		{
			// Constructors
			public SingleRangeComparer(); // 0x0057ABA4-0x0057ABF8
	
			// Methods
			public int Compare(SingleRange x, SingleRange y); // 0x0057AC08-0x0057AC6C
		}
	
		private sealed class SingleRange // TypeDefIndex: 1573
		{
			// Fields
			internal char _first; // 0x10
			internal char _last; // 0x12
	
			// Constructors
			internal SingleRange(char first, char last); // 0x00578914-0x00578950
		}
	
		// Constructors
		static RegexCharClass(); // 0x00570944-0x005780C0
		internal RegexCharClass(); // 0x005781D0-0x00578270
		private RegexCharClass(bool negate, List<SingleRange> ranges, StringBuilder categories, RegexCharClass subtraction); // 0x00578270-0x005782CC
	
		// Methods
		internal void AddChar(char c); // 0x005782F8-0x00578300
		internal void AddCharClass(RegexCharClass cc); // 0x00578448-0x005785DC
		private void AddSet(string set); // 0x005786AC-0x00578914
		internal void AddSubtraction(RegexCharClass sub); // 0x00578950-0x00578958
		internal void AddRange(char first, char last); // 0x00578300-0x00578448
		internal void AddCategoryFromName(string categoryName, bool invert, bool caseInsensitive, string pattern); // 0x00578958-0x00578BB4
		private void AddCategory(string category); // 0x00578F4C-0x00578F84
		internal void AddLowercase(CultureInfo culture); // 0x00578F84-0x00579120
		private void AddLowercaseRange(char chMin, char chMax, CultureInfo culture); // 0x00579120-0x005793D0
		internal void AddWord(bool ecma, bool negate); // 0x005793D0-0x005794B8
		internal void AddSpace(bool ecma, bool negate); // 0x005794B8-0x005795A0
		internal void AddDigit(bool ecma, bool negate, string pattern); // 0x005795A0-0x00579650
		internal static char SingletonChar(string set); // 0x00579650-0x00579680
		internal static bool IsMergeable(string charClass); // 0x00579680-0x00579734
		internal static bool IsEmpty(string charClass); // 0x0057980C-0x005798F0
		internal static bool IsSingleton(string set); // 0x005798F0-0x00579A60
		internal static bool IsSingletonInverse(string set); // 0x00579A60-0x00579BD4
		private static bool IsSubtraction(string charClass); // 0x00579760-0x0057980C
		internal static bool IsNegated(string set); // 0x00579734-0x00579760
		internal static bool IsECMAWordChar(char ch); // 0x00579BD4-0x00579C44
		internal static bool IsWordChar(char ch); // 0x00579CBC-0x00579D50
		internal static bool CharInClass(char ch, string set); // 0x00579C44-0x00579CBC
		internal static bool CharInClassRecursive(char ch, string set, int start); // 0x00579D50-0x00579EDC
		private static bool CharInClassInternal(char ch, string set, int start, int mySetLength, int myCategoryLength); // 0x00579EDC-0x0057A000
		private static bool CharInCategory(char ch, string set, int start, int mySetLength, int myCategoryLength); // 0x0057A000-0x0057A1BC
		private static bool CharInCategoryGroup(char ch, UnicodeCategory chcategory, string category, ref int i); // 0x0057A1BC-0x0057A2C8
		private static string NegateCategory(string category); // 0x005780C0-0x005781D0
		internal static RegexCharClass Parse(string charClass); // 0x0057A2C8-0x0057A330
		private static RegexCharClass ParseRecursive(string charClass, int start); // 0x0057A330-0x0057A5E8
		private int RangeCount(); // 0x005785DC-0x0057863C
		internal string ToStringClass(); // 0x0057A5E8-0x0057A8AC
		private SingleRange GetRangeAt(int i); // 0x0057863C-0x005786AC
		private void Canonicalize(); // 0x0057A8AC-0x0057ABA4
		private static string SetFromProperty(string capname, bool invert, string pattern); // 0x00578BB4-0x00578F4C
	}

	internal sealed class RegexCode // TypeDefIndex: 1574
	{
		// Fields
		internal int[] _codes; // 0x10
		internal string[] _strings; // 0x18
		internal int _trackcount; // 0x20
		internal Hashtable _caps; // 0x28
		internal int _capsize; // 0x30
		internal RegexPrefix _fcPrefix; // 0x38
		internal RegexBoyerMoore _bmPrefix; // 0x40
		internal int _anchors; // 0x48
		internal bool _rightToLeft; // 0x4C
	
		// Constructors
		internal RegexCode(int[] codes, List<string> stringlist, int trackcount, Hashtable caps, int capsize, RegexBoyerMoore bmPrefix, RegexPrefix fcPrefix, int anchors, bool rightToLeft); // 0x0057AC6C-0x0057ADC0
	
		// Methods
		internal static bool OpcodeBacktracks(int Op); // 0x0057ADC0-0x0057ADE0
	}

	internal sealed class RegexFCD // TypeDefIndex: 1575
	{
		// Fields
		private int[] _intStack; // 0x10
		private int _intDepth; // 0x18
		private RegexFC[] _fcStack; // 0x20
		private int _fcDepth; // 0x28
		private bool _skipAllChildren; // 0x2C
		private bool _skipchild; // 0x2D
		private bool _failed; // 0x2E
	
		// Constructors
		private RegexFCD(); // 0x0057B28C-0x0057B308
	
		// Methods
		internal static RegexPrefix FirstChars(RegexTree t); // 0x0057B154-0x0057B28C
		internal static RegexPrefix Prefix(RegexTree tree); // 0x0057B520-0x0057B724
		internal static int Anchors(RegexTree tree); // 0x0057B85C-0x0057B978
		private static int AnchorFromType(int type); // 0x0057B978-0x0057B9E4
		private void PushInt(int I); // 0x0057B9E4-0x0057BAD4
		private bool IntIsEmpty(); // 0x0057BAD4-0x0057BAE4
		private int PopInt(); // 0x0057BAE4-0x0057BB40
		private void PushFC(RegexFC fc); // 0x0057BB40-0x0057BC60
		private bool FCIsEmpty(); // 0x0057BC60-0x0057BC70
		private RegexFC PopFC(); // 0x0057BC70-0x0057BCCC
		private RegexFC TopFC(); // 0x0057BCCC-0x0057BD24
		private RegexFC RegexFCFromRegexTree(RegexTree tree); // 0x0057B308-0x0057B4E0
		private void SkipChild(); // 0x0057C2CC-0x0057C2D8
		private void CalculateFC(int NodeType, RegexNode node, int CurIndex); // 0x0057BD24-0x0057C2CC
	}

	internal sealed class RegexFC // TypeDefIndex: 1576
	{
		// Fields
		internal RegexCharClass _cc; // 0x10
		internal bool _nullable; // 0x18
		internal bool _caseInsensitive; // 0x19
	
		// Constructors
		internal RegexFC(bool nullable); // 0x0057ADE0-0x0057AE5C
		internal RegexFC(char ch, bool not, bool nullable, bool caseInsensitive); // 0x0057AE5C-0x0057AF68
		internal RegexFC(string charClass, bool nullable, bool caseInsensitive); // 0x0057AF68-0x0057B00C
	
		// Methods
		internal bool AddFC(RegexFC fc, bool concatenate); // 0x0057B00C-0x0057B0EC
		internal string GetFirstChars(CultureInfo culture); // 0x0057B0EC-0x0057B14C
		internal bool IsCaseInsensitive(); // 0x0057B14C-0x0057B154
	}

	internal sealed class RegexPrefix // TypeDefIndex: 1577
	{
		// Fields
		internal string _prefix; // 0x10
		internal bool _caseInsensitive; // 0x18
		internal static RegexPrefix _empty; // 0x00
	
		// Properties
		internal string Prefix { get; } // 0x0057D958-0x0057D960 
		internal bool CaseInsensitive { get; } // 0x0057D950-0x0057D958 
		internal static RegexPrefix Empty { get; } // 0x0057B7F4-0x0057B85C 
	
		// Constructors
		internal RegexPrefix(string prefix, bool ci); // 0x0057B4E0-0x0057B520
		static RegexPrefix(); // 0x005875EC-0x00587674
	}

	[Serializable]
	public class Group : Capture // TypeDefIndex: 1578
	{
		// Fields
		internal static Group _emptygroup; // 0x00
		internal int[] _caps; // 0x20
		internal int _capcount; // 0x28
		[OptionalField] // 0x003A0E84-0x003A0E94
		internal string _name; // 0x30
	
		// Properties
		public bool Success { get; } // 0x0077AAA4-0x0077AAB4 
	
		// Constructors
		internal Group(string text, int[] caps, int capcount, string name); // 0x0077A9B8-0x0077AAA4
		static Group(); // 0x0077AAB4-0x0077AB70
	}

	[Serializable]
	public class GroupCollection : ICollection // TypeDefIndex: 1579
	{
		// Fields
		internal Match _match; // 0x10
		internal Hashtable _captureMap; // 0x18
		internal Group[] _groups; // 0x20
	
		// Properties
		public object SyncRoot { get; } // 0x0077ABA8-0x0077ABB0 
		public bool IsSynchronized { get; } // 0x0077ABB0-0x0077ABB8 
		public int Count { get; } // 0x0077ABB8-0x0077ABF4 
		public Group this[int groupnum] { get => default; } // 0x0077ABF4-0x0077ABF8 
	
		// Constructors
		internal GroupCollection(Match match, Hashtable caps); // 0x0077AB70-0x0077ABA8
	
		// Methods
		internal Group GetGroup(int groupnum); // 0x0077ABF8-0x0077AD20
		internal Group GetGroupImpl(int groupnum); // 0x0077AD20-0x0077AFBC
		public void CopyTo(Array array, int arrayIndex); // 0x0077B124-0x0077B210
		public IEnumerator GetEnumerator(); // 0x0077B210-0x0077B27C
	}

	internal class GroupEnumerator : IEnumerator // TypeDefIndex: 1580
	{
		// Fields
		internal GroupCollection _rgc; // 0x10
		internal int _curindex; // 0x18
	
		// Properties
		public object Current { get; } // 0x0077B308-0x0077B30C 
		public Capture Capture { get; } // 0x0077B30C-0x0077B3F0 
	
		// Constructors
		internal GroupEnumerator(GroupCollection rgc); // 0x0077B27C-0x0077B2B0
	
		// Methods
		public bool MoveNext(); // 0x0077B2B0-0x0077B308
		public void Reset(); // 0x0077B3F0-0x0077B3FC
	}

	internal sealed class RegexInterpreter : RegexRunner // TypeDefIndex: 1581
	{
		// Fields
		internal int runoperator; // 0x80
		internal int[] runcodes; // 0x88
		internal int runcodepos; // 0x90
		internal string[] runstrings; // 0x98
		internal RegexCode runcode; // 0xA0
		internal RegexPrefix runfcPrefix; // 0xA8
		internal RegexBoyerMoore runbmPrefix; // 0xB0
		internal int runanchors; // 0xB8
		internal bool runrtl; // 0xBC
		internal bool runci; // 0xBD
		internal CultureInfo runculture; // 0xC0
	
		// Constructors
		internal RegexInterpreter(RegexCode code, CultureInfo culture); // 0x0057C2D8-0x0057C39C
	
		// Methods
		protected override void InitTrackCount(); // 0x0057C3A4-0x0057C3D8
		private void Advance(); // 0x0057C3D8-0x0057C3E0
		private void Advance(int i); // 0x0057C3E0-0x0057C468
		private void Goto(int newpos); // 0x0057C488-0x0057C51C
		private void Textto(int newpos); // 0x0057C570-0x0057C578
		private void Trackto(int newpos); // 0x0057C578-0x0057C5BC
		private int Textstart(); // 0x0057C5BC-0x0057C5C4
		private int Textpos(); // 0x0057C5C4-0x0057C5CC
		private int Trackpos(); // 0x0057C5CC-0x0057C604
		private void TrackPush(); // 0x0057C604-0x0057C66C
		private void TrackPush(int I1); // 0x0057C66C-0x0057C720
		private void TrackPush(int I1, int I2); // 0x0057C720-0x0057C824
		private void TrackPush(int I1, int I2, int I3); // 0x0057C824-0x0057C970
		private void TrackPush2(int I1); // 0x0057C970-0x0057CA28
		private void TrackPush2(int I1, int I2); // 0x0057CA28-0x0057CB30
		private void Backtrack(); // 0x0057CB30-0x0057CC54
		private void SetOperator(int op); // 0x0057C468-0x0057C488
		private void TrackPop(); // 0x0057CC54-0x0057CC64
		private void TrackPop(int framesize); // 0x0057CC64-0x0057CC74
		private int TrackPeek(); // 0x0057CC74-0x0057CCCC
		private int TrackPeek(int i); // 0x0057CCCC-0x0057CD34
		private void StackPush(int I1); // 0x0057CD34-0x0057CD9C
		private void StackPush(int I1, int I2); // 0x0057CD9C-0x0057CE58
		private void StackPop(); // 0x0057CE58-0x0057CE68
		private void StackPop(int framesize); // 0x0057CE68-0x0057CE78
		private int StackPeek(); // 0x0057CE78-0x0057CED0
		private int StackPeek(int i); // 0x0057CED0-0x0057CF38
		private int Operator(); // 0x0057CF38-0x0057CF40
		private int Operand(int i); // 0x0057CF40-0x0057CFA8
		private int Leftchars(); // 0x0057CFA8-0x0057CFB8
		private int Rightchars(); // 0x0057CFB8-0x0057CFC8
		private int Bump(); // 0x0057CFC8-0x0057CFDC
		private int Forwardchars(); // 0x0057CFDC-0x0057D008
		private char Forwardcharnext(); // 0x0057D008-0x0057D0E4
		private bool Stringmatch(string str); // 0x0057D0E4-0x0057D2EC
		private bool Refmatch(int index, int len); // 0x0057D2EC-0x0057D4C8
		private void Backwardnext(); // 0x0057D4C8-0x0057D510
		private char CharAt(int j); // 0x0057D510-0x0057D548
		protected override bool FindFirstChar(); // 0x0057D548-0x0057D950
		protected override void Go(); // 0x0057D960-0x0057EB88
	}

	[Serializable]
	public class Match : Group // TypeDefIndex: 1582
	{
		// Fields
		internal static Match _empty; // 0x00
		internal GroupCollection _groupcoll; // 0x38
		internal Regex _regex; // 0x40
		internal int _textbeg; // 0x48
		internal int _textpos; // 0x4C
		internal int _textend; // 0x50
		internal int _textstart; // 0x54
		internal int[][] _matches; // 0x58
		internal int[] _matchcount; // 0x60
		internal bool _balancing; // 0x68
	
		// Properties
		public static Match Empty { get; } // 0x0077B3FC-0x0077B464 
		public virtual GroupCollection Groups { get; } // 0x0077B66C-0x0077B6DC 
	
		// Constructors
		internal Match(Regex regex, int capcount, string text, int begpos, int len, int startpos); // 0x0077B464-0x0077B5D4
		static Match(); // 0x0077CA10-0x0077CAA4
	
		// Methods
		internal virtual void Reset(Regex regex, string text, int textbeg, int textend, int textstart); // 0x0077B5D4-0x0077B66C
		public Match NextMatch(); // 0x0077B6DC-0x0077B70C
		internal virtual string GroupToStringImpl(int groupnum); // 0x0077BA6C-0x0077BBE0
		internal string LastGroupToStringImpl(); // 0x0077BBE0-0x0077BC20
		internal virtual void AddMatch(int cap, int start, int len); // 0x0077BC20-0x0077C01C
		internal virtual void BalanceMatch(int cap); // 0x0077C01C-0x0077C2EC
		internal virtual void RemoveMatch(int cap); // 0x0077C2EC-0x0077C348
		internal virtual bool IsMatched(int cap); // 0x0077C348-0x0077C480
		internal virtual int MatchIndex(int cap); // 0x0077C480-0x0077C5D0
		internal virtual int MatchLength(int cap); // 0x0077C5D0-0x0077C720
		internal virtual void Tidy(int textpos); // 0x0077C720-0x0077CA10
	}

	internal class MatchSparse : Match // TypeDefIndex: 1583
	{
		// Fields
		internal Hashtable _caps; // 0x70
	
		// Properties
		public override GroupCollection Groups { get; } // 0x0077CB64-0x0077CBE0 
	
		// Constructors
		internal MatchSparse(Regex regex, Hashtable caps, int capcount, string text, int begpos, int len, int startpos); // 0x0077CAA4-0x0077CB64
	}

	[Serializable]
	public class RegexMatchTimeoutException : TimeoutException, ISerializable // TypeDefIndex: 1584
	{
		// Fields
		private string regexInput; // 0x88
		private string regexPattern; // 0x90
		private TimeSpan matchTimeout; // 0x98
	
		// Constructors
		public RegexMatchTimeoutException(string regexInput, string regexPattern, TimeSpan matchTimeout); // 0x0057F0E4-0x0057F19C
		public RegexMatchTimeoutException(); // 0x0057F1A8-0x0057F228
		protected RegexMatchTimeoutException(SerializationInfo info, StreamingContext context); // 0x0057F2A8-0x0057F404
	
		// Methods
		void ISerializable.GetObjectData(SerializationInfo si, StreamingContext context); // 0x0057F404-0x0057F504
		private new void Init(); // 0x0057F228-0x0057F2A8
		private void Init(string input, string pattern, TimeSpan timeout); // 0x0057F19C-0x0057F1A8
	}

	internal sealed class RegexNode // TypeDefIndex: 1585
	{
		// Fields
		internal int _type; // 0x10
		internal List<RegexNode> _children; // 0x18
		internal string _str; // 0x20
		internal char _ch; // 0x28
		internal int _m; // 0x2C
		internal int _n; // 0x30
		internal RegexOptions _options; // 0x34
		internal RegexNode _next; // 0x38
	
		// Constructors
		internal RegexNode(int type, RegexOptions options); // 0x0057F504-0x0057F540
		internal RegexNode(int type, RegexOptions options, char ch); // 0x0057F540-0x0057F584
		internal RegexNode(int type, RegexOptions options, string str); // 0x0057F584-0x0057F5C8
		internal RegexNode(int type, RegexOptions options, int m); // 0x0057F5C8-0x0057F60C
		internal RegexNode(int type, RegexOptions options, int m, int n); // 0x0057F60C-0x0057F65C
	
		// Methods
		internal bool UseOptionR(); // 0x0057F65C-0x0057F668
		internal RegexNode ReverseLeft(); // 0x0057F668-0x0057F6F8
		internal void MakeRep(int type, int min, int max); // 0x0057F6F8-0x0057F710
		internal RegexNode Reduce(); // 0x0057F710-0x0057F75C
		internal RegexNode StripEnation(int emptyType); // 0x00580308-0x005803AC
		internal RegexNode ReduceGroup(); // 0x00580178-0x005801BC
		internal RegexNode ReduceRep(); // 0x0057FFE4-0x00580178
		internal RegexNode ReduceSet(); // 0x005801BC-0x00580308
		internal RegexNode ReduceAlternation(); // 0x0057F764-0x0057FBF8
		internal RegexNode ReduceConcatenation(); // 0x0057FBF8-0x0057FFE4
		internal RegexNode MakeQuantifier(bool lazy, int min, int max); // 0x005803AC-0x005804D8
		internal void AddChild(RegexNode newChild); // 0x005804D8-0x005805B0
		internal RegexNode Child(int i); // 0x0057B784-0x0057B7F4
		internal int ChildCount(); // 0x0057B724-0x0057B784
		internal int Type(); // 0x0057F75C-0x0057F764
	}

	[Flags] // 0x003A0794-0x003A07A4
	public enum RegexOptions // TypeDefIndex: 1586
	{
		None = 0,
		IgnoreCase = 1,
		Multiline = 2,
		ExplicitCapture = 4,
		Compiled = 8,
		Singleline = 16,
		IgnorePatternWhitespace = 32,
		RightToLeft = 64,
		ECMAScript = 256,
		CultureInvariant = 512
	}

	internal sealed class RegexParser // TypeDefIndex: 1587
	{
		// Fields
		internal RegexNode _stack; // 0x10
		internal RegexNode _group; // 0x18
		internal RegexNode _alternation; // 0x20
		internal RegexNode _concatenation; // 0x28
		internal RegexNode _unit; // 0x30
		internal string _pattern; // 0x38
		internal int _currentPos; // 0x40
		internal CultureInfo _culture; // 0x48
		internal int _autocap; // 0x50
		internal int _capcount; // 0x54
		internal int _captop; // 0x58
		internal int _capsize; // 0x5C
		internal Hashtable _caps; // 0x60
		internal Hashtable _capnames; // 0x68
		internal int[] _capnumlist; // 0x70
		internal List<string> _capnamelist; // 0x78
		internal RegexOptions _options; // 0x80
		internal List<RegexOptions> _optionsStack; // 0x88
		internal bool _ignoreNextParen; // 0x90
		internal static readonly byte[] _category; // 0x00
	
		// Constructors
		private RegexParser(CultureInfo culture); // 0x005807A8-0x0058084C
		static RegexParser(); // 0x00587570-0x005875EC
	
		// Methods
		internal static RegexTree Parse(string re, RegexOptions op); // 0x005805B0-0x005807A8
		internal static RegexReplacement ParseReplacement(string rep, Hashtable caps, int capsize, Hashtable capnames, RegexOptions op); // 0x00581494-0x0058163C
		internal void SetPattern(string Re); // 0x0058084C-0x005808B8
		internal void Reset(RegexOptions topopts); // 0x00580BD0-0x00580CB8
		internal RegexNode ScanRegex(); // 0x00580CB8-0x0058142C
		internal RegexNode ScanReplacement(); // 0x00581648-0x00581768
		internal RegexCharClass ScanCharClass(bool caseInsensitive); // 0x0058265C-0x00582668
		internal RegexCharClass ScanCharClass(bool caseInsensitive, bool scanOnly); // 0x0058546C-0x00585B00
		internal RegexNode ScanGroupOpen(); // 0x00582750-0x005840D0
		internal void ScanBlank(); // 0x00581BEC-0x00581E6C
		internal RegexNode ScanBackslash(); // 0x00584814-0x00584D34
		internal RegexNode ScanBasicBackslash(); // 0x00586370-0x0058690C
		internal RegexNode ScanDollar(); // 0x0058509C-0x0058546C
		internal string ScanCapname(); // 0x00585E3C-0x00585F08
		internal char ScanOctal(); // 0x0058690C-0x005869B0
		internal int ScanDecimal(); // 0x00584F20-0x00585018
		internal char ScanHex(int c); // 0x005869B0-0x00586AF4
		internal static int HexDigit(char ch); // 0x00586AF4-0x00586B2C
		internal char ScanControl(); // 0x00586B2C-0x00586BF4
		internal bool IsOnlyTopOption(RegexOptions option); // 0x00586BF4-0x00586C1C
		internal void ScanOptions(); // 0x005860B0-0x00586220
		internal char ScanCharEscape(); // 0x00585C78-0x00585E3C
		internal string ParseProperty(); // 0x00585B0C-0x00585C78
		internal int TypeFromCode(char ch); // 0x005862DC-0x00586370
		internal static RegexOptions OptionFromCode(char ch); // 0x00586C1C-0x00586C7C
		internal void CountCaptures(); // 0x005808B8-0x00580BD0
		internal void NoteCaptureSlot(int i, int pos); // 0x00586C7C-0x00586DA0
		internal void NoteCaptureName(string name, int pos); // 0x00586E0C-0x00586F48
		internal void NoteCaptures(Hashtable caps, int capsize, Hashtable capnames); // 0x0058163C-0x00581648
		internal void AssignNameSlots(); // 0x00586F48-0x00587570
		internal int CaptureSlotFromName(string capname); // 0x00586028-0x005860B0
		internal bool IsCaptureSlot(int i); // 0x00585F68-0x0058600C
		internal bool IsCaptureName(string capname); // 0x0058600C-0x00586028
		internal bool UseOptionN(); // 0x00585F5C-0x00585F68
		internal bool UseOptionI(); // 0x00582650-0x0058265C
		internal bool UseOptionM(); // 0x00584D3C-0x00584D48
		internal bool UseOptionS(); // 0x00584DC0-0x00584DCC
		internal bool UseOptionX(); // 0x00581E74-0x00581E80
		internal bool UseOptionE(); // 0x00585B00-0x00585B0C
		internal static bool IsSpecial(char ch); // 0x00582154-0x00582210
		internal static bool IsStopperX(char ch); // 0x00581F08-0x00581FC4
		internal static bool IsQuantifier(char ch); // 0x00582210-0x005822CC
		internal bool IsTrueQuantifier(); // 0x00581FC4-0x00582154
		internal static bool IsSpace(char ch); // 0x00586220-0x005862DC
		internal void AddConcatenate(int pos, int cch, bool isReplacement); // 0x005822CC-0x00582558
		internal void PushGroup(); // 0x00584170-0x005841D8
		internal void PopGroup(); // 0x005845C8-0x005846FC
		internal bool EmptyStack(); // 0x005842D4-0x005842E4
		internal void StartGroup(RegexNode openGroup); // 0x00581B44-0x00581BEC
		internal void AddAlternate(); // 0x005841D8-0x005842D4
		internal void AddConcatenate(); // 0x00584E9C-0x00584EE0
		internal void AddConcatenate(bool lazy, int min, int max); // 0x00585020-0x0058509C
		internal RegexNode Unit(); // 0x0058480C-0x00584814
		internal void AddUnitOne(char ch); // 0x00582590-0x00582650
		internal void AddUnitNotone(char ch); // 0x00584DCC-0x00584E8C
		internal void AddUnitSet(string cc); // 0x00582668-0x005826E8
		internal void AddUnitNode(RegexNode node); // 0x00584D34-0x00584D3C
		internal void AddUnitType(int type); // 0x00584D48-0x00584DC0
		internal void AddGroup(); // 0x0058442C-0x005845C8
		internal void PushOptions(); // 0x005826E8-0x00582750
		internal void PopOptions(); // 0x005846FC-0x0058480C
		internal bool EmptyOptionsStack(); // 0x00586DA0-0x00586E0C
		internal void PopKeepOptions(); // 0x005840D0-0x00584170
		internal ArgumentException MakeException(string message); // 0x005842E4-0x0058442C
		internal int Textpos(); // 0x00581E6C-0x00581E74
		internal void Textto(int pos); // 0x00585018-0x00585020
		internal char MoveRightGetChar(); // 0x00584EE0-0x00584F20
		internal void MoveRight(); // 0x00581E80-0x00581E90
		internal void MoveRight(int i); // 0x00585F4C-0x00585F5C
		internal void MoveLeft(); // 0x00584E8C-0x00584E9C
		internal char CharAt(int i); // 0x00582558-0x00582590
		internal char RightChar(); // 0x00581ED0-0x00581F08
		internal char RightChar(int i); // 0x00585F08-0x00585F4C
		internal int CharsRight(); // 0x00581E90-0x00581ED0
	}

	internal sealed class RegexReplacement // TypeDefIndex: 1588
	{
		// Fields
		internal string _rep; // 0x10
		internal List<string> _strings; // 0x18
		internal List<int> _rules; // 0x20
	
		// Properties
		internal string Pattern { get; } // 0x00587A30-0x00587A38 
	
		// Constructors
		internal RegexReplacement(string rep, RegexNode concat, Hashtable _caps); // 0x00581768-0x00581B44
	
		// Methods
		private void ReplacementImpl(StringBuilder sb, Match match); // 0x00587674-0x00587850
		private void ReplacementImplRTL(List<string> al, Match match); // 0x00587850-0x00587A30
		internal string Replace(Regex regex, string input, int count, int startat); // 0x00587A38-0x00589030
	}

	[EditorBrowsable] // 0x003A07A4-0x003A07B8
	public abstract class RegexRunner // TypeDefIndex: 1589
	{
		// Fields
		protected internal int runtextbeg; // 0x10
		protected internal int runtextend; // 0x14
		protected internal int runtextstart; // 0x18
		protected internal string runtext; // 0x20
		protected internal int runtextpos; // 0x28
		protected internal int[] runtrack; // 0x30
		protected internal int runtrackpos; // 0x38
		protected internal int[] runstack; // 0x40
		protected internal int runstackpos; // 0x48
		protected internal int[] runcrawl; // 0x50
		protected internal int runcrawlpos; // 0x58
		protected internal int runtrackcount; // 0x5C
		protected internal Match runmatch; // 0x60
		protected internal Regex runregex; // 0x68
		private int timeout; // 0x70
		private bool ignoreTimeout; // 0x74
		private int timeoutOccursAt; // 0x78
		private int timeoutChecksToSkip; // 0x7C
	
		// Constructors
		protected internal RegexRunner(); // 0x0057C39C-0x0057C3A4
	
		// Methods
		protected internal Match Scan(Regex regex, string text, int textbeg, int textend, int textstart, int prevlen, bool quick, TimeSpan timeout); // 0x00589030-0x00589374
		private void StartTimeoutWatch(); // 0x00589374-0x005893B4
		protected void CheckTimeout(); // 0x0057EB88-0x0057EBB0
		private void DoCheckTimeout(); // 0x00589644-0x0058973C
		protected abstract void Go();
		protected abstract bool FindFirstChar();
		protected abstract void InitTrackCount();
		private void InitMatch(); // 0x005893B4-0x005895F0
		private Match TidyMatch(bool quick); // 0x005895F0-0x00589644
		protected void EnsureStorage(); // 0x0057C51C-0x0057C570
		protected bool IsBoundary(int index, int startpos, int endpos); // 0x0057EE14-0x0057EF40
		protected bool IsECMABoundary(int index, int startpos, int endpos); // 0x0057EF40-0x0057F06C
		protected void DoubleTrack(); // 0x00589814-0x005898EC
		protected void DoubleStack(); // 0x0058973C-0x00589814
		protected void DoubleCrawl(); // 0x005898EC-0x005899C4
		protected void Crawl(int i); // 0x005899C4-0x00589A40
		protected int Popcrawl(); // 0x00589A40-0x00589A98
		protected int Crawlpos(); // 0x0057EDDC-0x0057EE14
		protected void Capture(int capnum, int start, int end); // 0x0057ED38-0x0057ED98
		protected void TransferCapture(int capnum, int uncapnum, int start, int end); // 0x0057EBEC-0x0057ED38
		protected void Uncapture(); // 0x0057ED98-0x0057EDDC
		protected bool IsMatched(int cap); // 0x0057EBB0-0x0057EBEC
		protected int MatchIndex(int cap); // 0x0057F06C-0x0057F0A8
		protected int MatchLength(int cap); // 0x0057F0A8-0x0057F0E4
	}

	[EditorBrowsable] // 0x003A07B8-0x003A07CC
	public abstract class RegexRunnerFactory // TypeDefIndex: 1590
	{
		// Methods
		protected internal abstract RegexRunner CreateInstance();
	}

	internal sealed class RegexTree // TypeDefIndex: 1591
	{
		// Fields
		internal RegexNode _root; // 0x10
		internal Hashtable _caps; // 0x18
		internal int[] _capnumlist; // 0x20
		internal Hashtable _capnames; // 0x28
		internal string[] _capslist; // 0x30
		internal RegexOptions _options; // 0x38
		internal int _captop; // 0x3C
	
		// Constructors
		internal RegexTree(RegexNode root, Hashtable caps, int[] capnumlist, int captop, Hashtable capnames, string[] capslist, RegexOptions opts); // 0x0058142C-0x00581494
	}

	internal sealed class RegexWriter // TypeDefIndex: 1592
	{
		// Fields
		internal int[] _intStack; // 0x10
		internal int _depth; // 0x18
		internal int[] _emitted; // 0x20
		internal int _curpos; // 0x28
		internal Dictionary<string, int> _stringhash; // 0x30
		internal List<string> _stringtable; // 0x38
		internal bool _counting; // 0x40
		internal int _count; // 0x44
		internal int _trackcount; // 0x48
		internal Hashtable _caps; // 0x50
	
		// Constructors
		private RegexWriter(); // 0x00589B04-0x00589BC8
	
		// Methods
		internal static RegexCode Write(RegexTree t); // 0x00589A98-0x00589B04
		internal void PushInt(int I); // 0x0058A05C-0x0058A14C
		internal bool EmptyStack(); // 0x0058A14C-0x0058A15C
		internal int PopInt(); // 0x0058A15C-0x0058A1B8
		internal int CurPos(); // 0x0058A1B8-0x0058A1C0
		internal void PatchJump(int Offset, int jumpDest); // 0x0058A1C0-0x0058A224
		internal void Emit(int op); // 0x0058A224-0x0058A2D4
		internal void Emit(int op, int opd1); // 0x0058A2D4-0x0058A3D4
		internal void Emit(int op, int opd1, int opd2); // 0x0058A3D4-0x0058A518
		internal int StringCode(string str); // 0x0058A518-0x0058A66C
		internal ArgumentException MakeException(string message); // 0x0058A66C-0x0058A6D0
		internal int MapCapnum(int capnum); // 0x0058A6D0-0x0058A76C
		internal RegexCode RegexCodeFromRegexTree(RegexTree tree); // 0x00589BC8-0x0058A05C
		internal void EmitFragment(int nodetype, RegexNode node, int CurIndex); // 0x0058A76C-0x0058B054
	}
}

namespace System.ComponentModel
{
	public class ArrayConverter : CollectionConverter // TypeDefIndex: 1593
	{
		// Constructors
		public ArrayConverter(); // 0x008FCFF8-0x008FCFFC
	}

	public class BooleanConverter : TypeConverter // TypeDefIndex: 1594
	{
		// Fields
		private static StandardValuesCollection values; // 0x00
	
		// Constructors
		public BooleanConverter(); // 0x008FD0D4-0x008FD13C
	}

	public class CollectionConverter : TypeConverter // TypeDefIndex: 1595
	{
		// Constructors
		public CollectionConverter(); // 0x008FCFFC-0x008FD064
	}

	public class DecimalConverter : BaseNumberConverter // TypeDefIndex: 1596
	{
		// Constructors
		public DecimalConverter(); // 0x008FD13C-0x008FD140
	}

	[AttributeUsage] // 0x003A07CC-0x003A07E0
	public class DefaultValueAttribute : Attribute // TypeDefIndex: 1597
	{
		// Fields
		private object value; // 0x10
	
		// Properties
		public virtual object Value { get; } // 0x008FD16C-0x008FD174 
	
		// Constructors
		public DefaultValueAttribute(object value); // 0x008FD140-0x008FD16C
	
		// Methods
		public override bool Equals(object obj); // 0x008FD174-0x008FD290
		public override int GetHashCode(); // 0x008FD290-0x008FD298
	}

	public class DoubleConverter : BaseNumberConverter // TypeDefIndex: 1598
	{
		// Constructors
		public DoubleConverter(); // 0x008FD298-0x008FD29C
	}

	[AttributeUsage] // 0x003A07E0-0x003A07F4
	public sealed class EditorBrowsableAttribute : Attribute // TypeDefIndex: 1599
	{
		// Fields
		private EditorBrowsableState browsableState; // 0x10
	
		// Constructors
		public EditorBrowsableAttribute(EditorBrowsableState state); // 0x008FD29C-0x008FD2C8
	
		// Methods
		public override bool Equals(object obj); // 0x008FD2C8-0x008FD358
		public override int GetHashCode(); // 0x008FD358-0x008FD360
	}

	public enum EditorBrowsableState // TypeDefIndex: 1600
	{
		Always = 0,
		Never = 1,
		Advanced = 2
	}

	public class EnumConverter : TypeConverter // TypeDefIndex: 1601
	{
		// Fields
		private StandardValuesCollection values; // 0x10
		private Type type; // 0x18
	
		// Constructors
		public EnumConverter(Type type); // 0x008FD360-0x008FD3DC
	}

	public interface INotifyPropertyChanged // TypeDefIndex: 1602
	{
	}

	public class Int16Converter : BaseNumberConverter // TypeDefIndex: 1603
	{
		// Constructors
		public Int16Converter(); // 0x008FD3DC-0x008FD3E0
	}

	public class Int32Converter : BaseNumberConverter // TypeDefIndex: 1604
	{
		// Constructors
		public Int32Converter(); // 0x008FD3E0-0x008FD3E4
	}

	public class Int64Converter : BaseNumberConverter // TypeDefIndex: 1605
	{
		// Constructors
		public Int64Converter(); // 0x008FD3E4-0x008FD3E8
	}

	public class PropertyChangedEventArgs : EventArgs // TypeDefIndex: 1606
	{
		// Fields
		private readonly string propertyName; // 0x10
	
		// Properties
		public virtual string PropertyName { get; } // 0x008FD464-0x008FD46C 
	
		// Constructors
		public PropertyChangedEventArgs(string propertyName); // 0x008FD3E8-0x008FD464
	}

	public delegate void PropertyChangedEventHandler(object sender, PropertyChangedEventArgs e); // TypeDefIndex: 1607; 0x008FD47C-0x008FDBFC

	public class SingleConverter : BaseNumberConverter // TypeDefIndex: 1608
	{
		// Constructors
		public SingleConverter(); // 0x008FDC38-0x008FDC3C
	}

	public class StringConverter : TypeConverter // TypeDefIndex: 1609
	{
		// Constructors
		public StringConverter(); // 0x008FDC3C-0x008FDCA4
	}

	public class TimeSpanConverter : TypeConverter // TypeDefIndex: 1610
	{
		// Constructors
		public TimeSpanConverter(); // 0x008FDCA4-0x008FDD0C
	}

	[ComVisible] // 0x003A07F4-0x003A0808
	public class TypeConverter // TypeDefIndex: 1611
	{
		// Fields
		private const string s_UseCompatibleTypeConverterBehavior = "UseCompatibleTypeConverterBehavior"; // Metadata: 0x00219688
		private static bool useCompatibleTypeConversion; // 0x00
	
		// Nested types
		[DefaultMember] // 0x003A0808-0x003A0840
		public class StandardValuesCollection : ICollection // TypeDefIndex: 1612
		{
			// Fields
			private ICollection values; // 0x10
			private Array valueArray; // 0x18
	
			// Properties
			public int Count { get; } // 0x008FDD10-0x008FDDE0 
			int ICollection.Count { get; } // 0x008FDF60-0x008FDF64 
			bool ICollection.IsSynchronized { get; } // 0x008FDF64-0x008FDF6C 
			object ICollection.SyncRoot { get; } // 0x008FDF6C-0x008FDF74 
	
			// Methods
			public void CopyTo(Array array, int index); // 0x008FDDE0-0x008FDEAC
			public IEnumerator GetEnumerator(); // 0x008FDEAC-0x008FDF60
			void ICollection.CopyTo(Array array, int index); // 0x008FDF74-0x008FDF78
			IEnumerator IEnumerable.GetEnumerator(); // 0x008FDF78-0x008FDF7C
		}
	
		// Constructors
		public TypeConverter(); // 0x008FD0CC-0x008FD0D4
		static TypeConverter(); // 0x008FDD0C-0x008FDD10
	}

	[AttributeUsage] // 0x003A0840-0x003A0854
	public sealed class TypeConverterAttribute : Attribute // TypeDefIndex: 1613
	{
		// Fields
		private string typeName; // 0x10
		public static readonly TypeConverterAttribute Default; // 0x00
	
		// Properties
		public string ConverterTypeName { get; } // 0x008FE02C-0x008FE034 
	
		// Constructors
		public TypeConverterAttribute(); // 0x008FDF7C-0x008FDFE0
		public TypeConverterAttribute(Type type); // 0x008FDFE0-0x008FE02C
		static TypeConverterAttribute(); // 0x008FE100-0x008FE160
	
		// Methods
		public override bool Equals(object obj); // 0x008FE034-0x008FE0CC
		public override int GetHashCode(); // 0x008FE0CC-0x008FE100
	}

	[Serializable]
	public class Win32Exception : ExternalException, ISerializable // TypeDefIndex: 1614
	{
		// Fields
		private readonly int nativeErrorCode; // 0x88
		private static bool s_ErrorMessagesInitialized; // 0x00
		private static Dictionary<int, string> s_ErrorMessage; // 0x08
	
		// Properties
		public int NativeErrorCode { get; } // 0x008FE444-0x008FE44C 
	
		// Constructors
		public Win32Exception(); // 0x008FE160-0x008FE1D0
		public Win32Exception(int error); // 0x008FE1D0-0x008FE258
		public Win32Exception(int error, string message); // 0x008FE378-0x008FE3A8
		protected Win32Exception(SerializationInfo info, StreamingContext context); // 0x008FE3A8-0x008FE444
		static Win32Exception(); // 0x008FF8D8-0x008FF958
	
		// Methods
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x008FE44C-0x008FE520
		internal static string GetErrorMessage(int error); // 0x008FE258-0x008FE378
		private static void InitializeErrorMessages(); // 0x008FE520-0x008FF8D8
	}

	public abstract class BaseNumberConverter : TypeConverter // TypeDefIndex: 1615
	{
		// Constructors
		protected BaseNumberConverter(); // 0x008FD064-0x008FD0CC
	}
}

namespace System.Security.Authentication
{
	[Serializable]
	public class AuthenticationException : SystemException // TypeDefIndex: 1616
	{
		// Constructors
		public AuthenticationException(); // 0x00772C38-0x00772C98
		public AuthenticationException(string message, Exception innerException); // 0x00772C98-0x00772CA0
		protected AuthenticationException(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x00772CA0-0x00772CA8
	}

	[Flags] // 0x003A0854-0x003A0864
	public enum SslProtocols // TypeDefIndex: 1617
	{
		None = 0,
		Ssl2 = 12,
		Ssl3 = 48,
		Tls = 192,
		Default = 240,
		Tls11 = 768,
		Tls12 = 3072
	}
}

namespace System.Security.Cryptography
{
	public enum OidGroup // TypeDefIndex: 1618
	{
		All = 0,
		HashAlgorithm = 1,
		EncryptionAlgorithm = 2,
		PublicKeyAlgorithm = 3,
		SignatureAlgorithm = 4,
		Attribute = 5,
		ExtensionOrAttribute = 6,
		EnhancedKeyUsage = 7,
		Policy = 8,
		Template = 9,
		KeyDerivationFunction = 10
	}

	public sealed class Oid // TypeDefIndex: 1619
	{
		// Fields
		private string m_value; // 0x10
		private string m_friendlyName; // 0x18
		private OidGroup m_group; // 0x20
	
		// Properties
		public string Value { get; set; } // 0x00773198-0x007731A0 0x00775548-0x00775550
	
		// Constructors
		public Oid(string oid); // 0x00775450-0x00775494
		internal Oid(string oid, OidGroup group, bool lookupFriendlyName); // 0x00775494-0x007754F0
		public Oid(string value, string friendlyName); // 0x00775550-0x00775588
		public Oid(Oid oid); // 0x00772D28-0x00772DE0
	}

	public sealed class OidCollection : ICollection // TypeDefIndex: 1620
	{
		// Fields
		private ArrayList m_list; // 0x10
	
		// Properties
		public Oid this[int index] { get => default; } // 0x00775634-0x007756C4 
		public int Count { get; } // 0x007756C4-0x007756FC 
		public bool IsSynchronized { get; } // 0x007759A8-0x007759B0 
		public object SyncRoot { get; } // 0x007759B0-0x007759B4 
	
		// Constructors
		public OidCollection(); // 0x00775588-0x007755F4
	
		// Methods
		public int Add(Oid oid); // 0x007755F4-0x00775634
		IEnumerator IEnumerable.GetEnumerator(); // 0x007756FC-0x00775768
		void ICollection.CopyTo(Array array, int index); // 0x0077579C-0x007759A8
	}

	public sealed class OidEnumerator : IEnumerator // TypeDefIndex: 1621
	{
		// Fields
		private OidCollection m_oids; // 0x10
		private int m_current; // 0x18
	
		// Properties
		object IEnumerator.Current { get; } // 0x007759B4-0x007759E8 
	
		// Constructors
		internal OidEnumerator(OidCollection oids); // 0x00775768-0x0077579C
	
		// Methods
		public bool MoveNext(); // 0x007759E8-0x00775A68
		public void Reset(); // 0x00775A68-0x00775A74
	}

	internal static class CAPI // TypeDefIndex: 1622
	{
		// Methods
		public static string CryptFindOIDInfoNameFromKey(string key, OidGroup oidGroup); // 0x0077442C-0x00774C84
		public static string CryptFindOIDInfoKeyFromName(string name, OidGroup oidGroup); // 0x00774C84-0x00775450
	}

	internal enum AsnDecodeStatus // TypeDefIndex: 1623
	{
		NotDecoded = -1,
		Ok = 0,
		BadAsn = 1,
		BadTag = 2,
		BadLength = 3,
		InformationNotAvailable = 4
	}

	public class AsnEncodedData // TypeDefIndex: 1624
	{
		// Fields
		internal Oid _oid; // 0x10
		internal byte[] _raw; // 0x18
	
		// Properties
		public Oid Oid { set; } // 0x00772CB0-0x00772D28
		public byte[] RawData { get; set; } // 0x00772DE0-0x00772DE8 0x00772DE8-0x00772F00
	
		// Constructors
		protected AsnEncodedData(); // 0x00772CA8-0x00772CB0
	
		// Methods
		public virtual void CopyFrom(AsnEncodedData asnEncodedData); // 0x00772F00-0x00772FF8
		internal virtual string ToString(bool multiLine); // 0x00772FF8-0x00773198
		internal string Default(bool multiLine); // 0x00773FA8-0x0077410C
		internal string BasicConstraintsExtension(bool multiLine); // 0x007731A0-0x007732BC
		internal string EnhancedKeyUsageExtension(bool multiLine); // 0x007732BC-0x007733D8
		internal string KeyUsageExtension(bool multiLine); // 0x007733D8-0x007734F4
		internal string SubjectKeyIdentifierExtension(bool multiLine); // 0x007734F4-0x00773610
		internal string SubjectAltName(bool multiLine); // 0x00773610-0x00773A44
		internal string NetscapeCertType(bool multiLine); // 0x00773A44-0x00773FA8
	}
}

namespace System.Security.Cryptography.X509Certificates
{
	public enum StoreLocation // TypeDefIndex: 1625
	{
		CurrentUser = 1,
		LocalMachine = 2
	}

	[Flags] // 0x003A089C-0x003A08AC
	public enum X509ChainStatusFlags // TypeDefIndex: 1626
	{
		NoError = 0,
		NotTimeValid = 1,
		NotTimeNested = 2,
		Revoked = 4,
		NotSignatureValid = 8,
		NotValidForUsage = 16,
		UntrustedRoot = 32,
		RevocationStatusUnknown = 64,
		Cyclic = 128,
		InvalidExtension = 256,
		InvalidPolicyConstraints = 512,
		InvalidBasicConstraints = 1024,
		InvalidNameConstraints = 2048,
		HasNotSupportedNameConstraint = 4096,
		HasNotDefinedNameConstraint = 8192,
		HasNotPermittedNameConstraint = 16384,
		HasExcludedNameConstraint = 32768,
		PartialChain = 65536,
		CtlNotTimeValid = 131072,
		CtlNotSignatureValid = 262144,
		CtlNotValidForUsage = 524288,
		HasWeakSignature = 1048576,
		OfflineRevocation = 16777216,
		NoIssuanceChainPolicy = 33554432,
		ExplicitDistrust = 67108864,
		HasNotSupportedCriticalExtension = 134217728
	}

	[Flags] // 0x003A08AC-0x003A08BC
	public enum X509KeyUsageFlags // TypeDefIndex: 1627
	{
		None = 0,
		EncipherOnly = 1,
		CrlSign = 2,
		KeyCertSign = 4,
		KeyAgreement = 8,
		DataEncipherment = 16,
		KeyEncipherment = 32,
		NonRepudiation = 64,
		DigitalSignature = 128,
		DecipherOnly = 32768
	}

	public enum X509RevocationFlag // TypeDefIndex: 1628
	{
		EndCertificateOnly = 0,
		EntireChain = 1,
		ExcludeRoot = 2
	}

	public enum X509RevocationMode // TypeDefIndex: 1629
	{
		NoCheck = 0,
		Online = 1,
		Offline = 2
	}

	public enum X509SubjectKeyIdentifierHashAlgorithm // TypeDefIndex: 1630
	{
		Sha1 = 0,
		ShortSha1 = 1,
		CapiSha1 = 2
	}

	[Flags] // 0x003A08BC-0x003A08CC
	public enum X509VerificationFlags // TypeDefIndex: 1631
	{
		NoFlag = 0,
		IgnoreNotTimeValid = 1,
		IgnoreCtlNotTimeValid = 2,
		IgnoreNotTimeNested = 4,
		IgnoreInvalidBasicConstraints = 8,
		AllowUnknownCertificateAuthority = 16,
		IgnoreWrongUsage = 32,
		IgnoreInvalidName = 64,
		IgnoreInvalidPolicy = 128,
		IgnoreEndRevocationUnknown = 256,
		IgnoreCtlSignerRevocationUnknown = 512,
		IgnoreCertificateAuthorityRevocationUnknown = 1024,
		IgnoreRootRevocationUnknown = 2048,
		AllFlags = 4095
	}

	internal class X509Utils // TypeDefIndex: 1632
	{
		// Methods
		internal static string FindOidInfo(uint keyType, string keyValue, OidGroup oidGroup); // 0x0077A508-0x0077A630
		internal static string FindOidInfoWithFallback(uint key, string value, OidGroup group); // 0x007754F0-0x00775548
	}

	public sealed class PublicKey // TypeDefIndex: 1633
	{
		// Fields
		private AsnEncodedData _keyValue; // 0x10
		private AsnEncodedData _params; // 0x18
		private Oid _oid; // 0x20
		private static byte[] Empty; // 0x00
	
		// Properties
		public AsnEncodedData EncodedKeyValue { get; } // 0x00775A74-0x00775A7C 
		public AsnEncodedData EncodedParameters { get; } // 0x00775A7C-0x00775A84 
		public Oid Oid { get; } // 0x00775A84-0x00775A8C 
	
		// Constructors
		static PublicKey(); // 0x00775A8C-0x00775AF0
	}

	public sealed class X509BasicConstraintsExtension : System.Security.Cryptography.X509Certificates.X509Extension // TypeDefIndex: 1634
	{
		// Fields
		internal const string oid = "2.5.29.19"; // Metadata: 0x00219802
		internal const string friendlyName = "Basic Constraints"; // Metadata: 0x0021980F
		private bool _certificateAuthority; // 0x21
		private bool _hasPathLengthConstraint; // 0x22
		private int _pathLengthConstraint; // 0x24
		private AsnDecodeStatus _status; // 0x28
	
		// Properties
		public bool CertificateAuthority { get; } // 0x00776074-0x0077610C 
		public bool HasPathLengthConstraint { get; } // 0x0077610C-0x007761A4 
		public int PathLengthConstraint { get; } // 0x007761A4-0x0077623C 
	
		// Constructors
		public X509BasicConstraintsExtension(); // 0x00775AF0-0x00775B80
		public X509BasicConstraintsExtension(AsnEncodedData encodedBasicConstraints, bool critical); // 0x0077410C-0x007741D4
		public X509BasicConstraintsExtension(bool certificateAuthority, bool hasPathLengthConstraint, int pathLengthConstraint, bool critical); // 0x00775DD4-0x00775EF4
	
		// Methods
		public override void CopyFrom(AsnEncodedData asnEncodedData); // 0x0077623C-0x007763E0
		internal AsnDecodeStatus Decode(byte[] extension); // 0x00775B94-0x00775DD4
		internal byte[] Encode(); // 0x00775EF4-0x00776074
		internal override string ToString(bool multiLine); // 0x007763E8-0x00776678
	}

	[DefaultMember] // 0x003A08CC-0x003A0904
	public class X509Certificate2Collection : System.Security.Cryptography.X509Certificates.X509CertificateCollection // TypeDefIndex: 1635
	{
		// Fields
		private static string[] newline_split; // 0x00
	
		// Constructors
		static X509Certificate2Collection(); // 0x007767A8-0x00776874
	}

	internal abstract class X509Certificate2Impl : X509CertificateImpl // TypeDefIndex: 1636
	{
		// Properties
		internal abstract X509CertificateImplCollection IntermediateCertificates { get; }
	}

	[Serializable]
	[DefaultMember] // 0x003A0904-0x003A093C
	public class X509CertificateCollection : CollectionBase // TypeDefIndex: 1637
	{
		// Nested types
		public class X509CertificateEnumerator : IEnumerator // TypeDefIndex: 1638
		{
			// Fields
			private IEnumerator enumerator; // 0x10
	
			// Properties
			public System.Security.Cryptography.X509Certificates.X509Certificate Current { get; } // 0x007769E4-0x00776B28 
			object IEnumerator.Current { get; } // 0x00776B28-0x00776BE0 
	
			// Constructors
			public X509CertificateEnumerator(X509CertificateCollection mappings); // 0x007768DC-0x007769AC
	
			// Methods
			bool IEnumerator.MoveNext(); // 0x00776BE0-0x00776C94
			void IEnumerator.Reset(); // 0x00776C94-0x00776D4C
			public bool MoveNext(); // 0x00776D4C-0x00776E00
		}
	
		// Constructors
		public X509CertificateCollection(); // 0x00776874-0x0077687C
	
		// Methods
		public new X509CertificateEnumerator GetEnumerator(); // 0x0077687C-0x007768DC
		public override int GetHashCode(); // 0x007769AC-0x007769E4
	}

	internal class X509CertificateImplCollection : IDisposable // TypeDefIndex: 1639
	{
		// Fields
		private List<X509CertificateImpl> list; // 0x10
	
		// Properties
		public int Count { get; } // 0x00776E00-0x00776E60 
		public X509CertificateImpl this[int index] { get => default; } // 0x00776E60-0x00776ED0 
	
		// Methods
		public void Dispose(); // 0x00776ED0-0x00776F4C
		protected virtual void Dispose(bool disposing); // 0x00776F4C-0x00777130
		~X509CertificateImplCollection(); // 0x00777130-0x007771B0
	}

	public class X509Chain : IDisposable // TypeDefIndex: 1640
	{
		// Fields
		private X509ChainImpl impl; // 0x10
	
		// Properties
		internal X509ChainImpl Impl { get; } // 0x007771B0-0x007771D8 
		public X509ChainPolicy ChainPolicy { set; } // 0x00777310-0x00777358
	
		// Constructors
		public X509Chain(); // 0x0077724C-0x0077727C
		public X509Chain(bool useMachineContext); // 0x0077727C-0x007772B0
	
		// Methods
		public void Dispose(); // 0x00777358-0x007773D4
		protected virtual void Dispose(bool disposing); // 0x007773D4-0x00777400
		~X509Chain(); // 0x0077747C-0x007774FC
	}

	[DefaultMember] // 0x003A0974-0x003A09AC
	public sealed class X509ChainElementCollection : ICollection // TypeDefIndex: 1641
	{
		// Fields
		private ArrayList _list; // 0x10
	
		// Properties
		public int Count { get; } // 0x00777568-0x007775A0 
		public bool IsSynchronized { get; } // 0x007775A0-0x007775D8 
		public object SyncRoot { get; } // 0x007775D8-0x00777610 
	
		// Constructors
		internal X509ChainElementCollection(); // 0x007774FC-0x00777568
	
		// Methods
		void ICollection.CopyTo(Array array, int index); // 0x00777610-0x00777660
		IEnumerator IEnumerable.GetEnumerator(); // 0x00777660-0x007776C4
	}

	public sealed class X509ChainElementEnumerator : IEnumerator // TypeDefIndex: 1642
	{
		// Fields
		private IEnumerator enumerator; // 0x10
	
		// Properties
		object IEnumerator.Current { get; } // 0x00777794-0x0077784C 
	
		// Constructors
		internal X509ChainElementEnumerator(IEnumerable enumerable); // 0x007776C4-0x00777794
	
		// Methods
		public bool MoveNext(); // 0x0077784C-0x00777900
		public void Reset(); // 0x00777900-0x007779B8
	}

	internal abstract class X509ChainImpl : IDisposable // TypeDefIndex: 1643
	{
		// Properties
		public abstract bool IsValid { get; }
		public abstract X509ChainPolicy ChainPolicy { set; }
	
		// Constructors
		protected X509ChainImpl(); // 0x00777A3C-0x00777A44
	
		// Methods
		public void Dispose(); // 0x00777400-0x0077747C
		protected virtual void Dispose(bool disposing); // 0x007779B8-0x007779BC
		~X509ChainImpl(); // 0x007779BC-0x00777A3C
	}

	internal class X509ChainImplMono : X509ChainImpl // TypeDefIndex: 1644
	{
		// Fields
		private StoreLocation location; // 0x10
		private X509ChainElementCollection elements; // 0x18
		private X509ChainPolicy policy; // 0x20
		private static X509ChainStatus[] Empty; // 0x00
	
		// Properties
		public override bool IsValid { get; } // 0x00777B24-0x00777B2C 
		public override X509ChainPolicy ChainPolicy { set; } // 0x00777B2C-0x00777B34
	
		// Constructors
		public X509ChainImplMono(bool useMachineContext); // 0x00777A44-0x00777AFC
		static X509ChainImplMono(); // 0x00777B34-0x00777B98
	}

	public sealed class X509ChainPolicy // TypeDefIndex: 1645
	{
		// Fields
		private OidCollection apps; // 0x10
		private OidCollection cert; // 0x18
		private System.Security.Cryptography.X509Certificates.X509CertificateCollection store; // 0x20
		private X509Certificate2Collection store2; // 0x28
		private X509RevocationFlag rflag; // 0x30
		private X509RevocationMode mode; // 0x34
		private TimeSpan timeout; // 0x38
		private X509VerificationFlags vflags; // 0x40
		private DateTime vtime; // 0x48
	
		// Constructors
		public X509ChainPolicy(); // 0x00777AFC-0x00777B24
		internal X509ChainPolicy(System.Security.Cryptography.X509Certificates.X509CertificateCollection store); // 0x00777C7C-0x00777D34
	
		// Methods
		public void Reset(); // 0x00777B98-0x00777C7C
	}

	public struct X509ChainStatus // TypeDefIndex: 1646
	{
		// Fields
		private X509ChainStatusFlags status; // 0x00
		private string info; // 0x08
	}

	public sealed class X509EnhancedKeyUsageExtension : System.Security.Cryptography.X509Certificates.X509Extension // TypeDefIndex: 1647
	{
		// Fields
		private OidCollection _enhKeyUsage; // 0x28
		private AsnDecodeStatus _status; // 0x30
	
		// Constructors
		public X509EnhancedKeyUsageExtension(AsnEncodedData encodedEnhancedKeyUsages, bool critical); // 0x007741D4-0x0077429C
	
		// Methods
		public override void CopyFrom(AsnEncodedData asnEncodedData); // 0x00777FF0-0x00778194
		internal AsnDecodeStatus Decode(byte[] extension); // 0x00777D34-0x00777FF0
		internal override string ToString(bool multiLine); // 0x00778194-0x007784F4
	}

	public class X509Extension : AsnEncodedData // TypeDefIndex: 1648
	{
		// Fields
		private bool _critical; // 0x20
	
		// Properties
		public bool Critical { get; set; } // 0x007763E0-0x007763E8 0x00775B88-0x00775B94
	
		// Constructors
		protected X509Extension(); // 0x00775B80-0x00775B88
	
		// Methods
		public override void CopyFrom(AsnEncodedData asnEncodedData); // 0x007784F4-0x0077861C
		internal string FormatUnkownData(byte[] data); // 0x00776678-0x007767A8
	}

	internal static class X509Helper2 // TypeDefIndex: 1649
	{
		// Methods
		internal static X509ChainImpl CreateChainImpl(bool useMachineContext); // 0x007772B0-0x00777310
		public static bool IsValid(X509ChainImpl impl); // 0x0077861C-0x00778630
		internal static void ThrowIfContextInvalid(X509ChainImpl impl); // 0x007771D8-0x0077724C
		internal static Exception GetInvalidChainContextException(); // 0x00778630-0x007786AC
	}

	public sealed class X509KeyUsageExtension : System.Security.Cryptography.X509Certificates.X509Extension // TypeDefIndex: 1650
	{
		// Fields
		internal const string oid = "2.5.29.15"; // Metadata: 0x00219824
		internal const string friendlyName = "Key Usage"; // Metadata: 0x00219831
		internal const X509KeyUsageFlags all = X509KeyUsageFlags.None | X509KeyUsageFlags.EncipherOnly | X509KeyUsageFlags.CrlSign | X509KeyUsageFlags.KeyCertSign | X509KeyUsageFlags.KeyAgreement | X509KeyUsageFlags.DataEncipherment | X509KeyUsageFlags.KeyEncipherment | X509KeyUsageFlags.NonRepudiation | X509KeyUsageFlags.DigitalSignature | X509KeyUsageFlags.DecipherOnly; // Metadata: 0x0021983E
		private X509KeyUsageFlags _keyUsages; // 0x24
		private AsnDecodeStatus _status; // 0x28
	
		// Properties
		public X509KeyUsageFlags KeyUsages { get; } // 0x00778BF8-0x00778C90 
	
		// Constructors
		public X509KeyUsageExtension(); // 0x007786AC-0x0077873C
		public X509KeyUsageExtension(AsnEncodedData encodedKeyUsage, bool critical); // 0x0077429C-0x00774364
		public X509KeyUsageExtension(X509KeyUsageFlags keyUsages, bool critical); // 0x00778948-0x00778A10
	
		// Methods
		public override void CopyFrom(AsnEncodedData asnEncodedData); // 0x00778C90-0x00778E34
		internal X509KeyUsageFlags GetValidFlags(X509KeyUsageFlags flags); // 0x00778A10-0x00778A20
		internal AsnDecodeStatus Decode(byte[] extension); // 0x0077873C-0x00778948
		internal byte[] Encode(); // 0x00778A20-0x00778BF8
		internal override string ToString(bool multiLine); // 0x00778E34-0x00779460
	}

	public sealed class X509SubjectKeyIdentifierExtension : System.Security.Cryptography.X509Certificates.X509Extension // TypeDefIndex: 1651
	{
		// Fields
		internal const string oid = "2.5.29.14"; // Metadata: 0x00219842
		internal const string friendlyName = "Subject Key Identifier"; // Metadata: 0x0021984F
		private byte[] _subjectKeyIdentifier; // 0x28
		private string _ski; // 0x30
		private AsnDecodeStatus _status; // 0x38
	
		// Properties
		public string SubjectKeyIdentifier { get; } // 0x00779F3C-0x00779FEC 
	
		// Constructors
		public X509SubjectKeyIdentifierExtension(); // 0x00779460-0x007794F0
		public X509SubjectKeyIdentifierExtension(AsnEncodedData encodedSubjectKeyIdentifier, bool critical); // 0x00774364-0x0077442C
		public X509SubjectKeyIdentifierExtension(byte[] subjectKeyIdentifier, bool critical); // 0x00779674-0x00779838
		public X509SubjectKeyIdentifierExtension(string subjectKeyIdentifier, bool critical); // 0x007798B8-0x00779A04
		public X509SubjectKeyIdentifierExtension(PublicKey key, bool critical); // 0x00779B24-0x00779B30
		public X509SubjectKeyIdentifierExtension(PublicKey key, X509SubjectKeyIdentifierHashAlgorithm algorithm, bool critical); // 0x00779B30-0x00779F3C
	
		// Methods
		public override void CopyFrom(AsnEncodedData asnEncodedData); // 0x00779FEC-0x0077A190
		internal static byte FromHexChar(char c); // 0x0077A190-0x0077A1E4
		internal static byte FromHexChars(char c1, char c2); // 0x0077A1E4-0x0077A298
		internal static byte[] FromHex(string hex); // 0x00779A04-0x00779B24
		internal AsnDecodeStatus Decode(byte[] extension); // 0x007794F0-0x00779674
		internal byte[] Encode(); // 0x00779838-0x007798B8
		internal override string ToString(bool multiLine); // 0x0077A298-0x0077A508
	}
}

namespace System.Net
{
	[Serializable]
	public abstract class EndPoint // TypeDefIndex: 1652
	{
		// Properties
		public virtual AddressFamily AddressFamily { get; } // 0x00761CB8-0x00761D04 
	
		// Constructors
		protected EndPoint(); // 0x00761E94-0x00761E9C
	
		// Methods
		public virtual SocketAddress Serialize(); // 0x00761D80-0x00761DCC
		public virtual EndPoint Create(SocketAddress socketAddress); // 0x00761E48-0x00761E94
	}

	[Serializable]
	public class IPAddress // TypeDefIndex: 1653
	{
		// Fields
		public static readonly IPAddress Any; // 0x00
		public static readonly IPAddress Loopback; // 0x08
		public static readonly IPAddress Broadcast; // 0x10
		public static readonly IPAddress None; // 0x18
		internal const long LoopbackMask = 255; // Metadata: 0x00219869
		internal long m_Address; // 0x10
		[NonSerialized]
		internal string m_ToString; // 0x18
		public static readonly IPAddress IPv6Any; // 0x20
		public static readonly IPAddress IPv6Loopback; // 0x28
		public static readonly IPAddress IPv6None; // 0x30
		private AddressFamily m_Family; // 0x20
		private ushort[] m_Numbers; // 0x28
		private long m_ScopeId; // 0x30
		private int m_HashCode; // 0x38
		internal const int IPv4AddressBytes = 4; // Metadata: 0x00219871
		internal const int IPv6AddressBytes = 16; // Metadata: 0x00219875
		internal const int NumberOfLabels = 8; // Metadata: 0x00219879
	
		// Properties
		public AddressFamily AddressFamily { get; } // 0x00760C80-0x00760C88 
		public long ScopeId { get; } // 0x007628A4-0x0076292C 
	
		// Constructors
		public IPAddress(long newAddress); // 0x00761E9C-0x00761F64
		public IPAddress(byte[] address, long scopeid); // 0x00761F64-0x00762174
		private IPAddress(ushort[] address, uint scopeid); // 0x00762174-0x00762200
		internal IPAddress(int newAddress); // 0x00762200-0x00762280
		static IPAddress(); // 0x007631CC-0x0076335C
	
		// Methods
		public static bool TryParse(string ipString, out IPAddress address); // 0x007610C4-0x0076114C
		public static IPAddress Parse(string ipString); // 0x00760BA4-0x00760C0C
		private static IPAddress InternalParse(string ipString, bool tryParse); // 0x00762280-0x00762630
		public byte[] GetAddressBytes(); // 0x007626A8-0x007628A4
		public override string ToString(); // 0x0076292C-0x00762E70
		internal bool Equals(object comparandObj, bool compareScopeId); // 0x00762E70-0x00762FE4
		public override bool Equals(object comparand); // 0x00762FE4-0x00762FEC
		public override int GetHashCode(); // 0x00762FEC-0x007630B4
		public IPAddress MapToIPv6(); // 0x007630B4-0x007631CC
	}

	[Serializable]
	public class IPEndPoint : EndPoint // TypeDefIndex: 1654
	{
		// Fields
		private IPAddress m_Address; // 0x10
		private int m_Port; // 0x18
		internal static IPEndPoint Any; // 0x00
		internal static IPEndPoint IPv6Any; // 0x08
	
		// Properties
		public override AddressFamily AddressFamily { get; } // 0x0076335C-0x00763388 
		public IPAddress Address { get; } // 0x00763494-0x0076349C 
		public int Port { get; } // 0x0076349C-0x007634A4 
	
		// Constructors
		public IPEndPoint(IPAddress address, int port); // 0x00763388-0x00763488
		static IPEndPoint(); // 0x00763D50-0x00763FA8
	
		// Methods
		public override string ToString(); // 0x007634A4-0x0076357C
		public override SocketAddress Serialize(); // 0x0076357C-0x007635F0
		public override EndPoint Create(SocketAddress socketAddress); // 0x00763680-0x007639EC
		public override bool Equals(object comparand); // 0x00763B58-0x00763D0C
		public override int GetHashCode(); // 0x00763D0C-0x00763D50
	}

	public class IPHostEntry // TypeDefIndex: 1655
	{
		// Fields
		private string hostName; // 0x10
		private string[] aliases; // 0x18
		private IPAddress[] addressList; // 0x20
		internal bool isTrustedHost; // 0x28
	
		// Properties
		public string HostName { set; } // 0x00760B94-0x00760B9C
		public string[] Aliases { set; } // 0x00760B9C-0x00760BA4
		public IPAddress[] AddressList { get; set; } // 0x00761560-0x00761568 0x00760CFC-0x00760D04
	
		// Constructors
		public IPHostEntry(); // 0x00760B84-0x00760B94
	}

	internal static class ValidationHelper // TypeDefIndex: 1656
	{
		// Fields
		public static string[] EmptyArray; // 0x00
		internal static readonly char[] InvalidMethodChars; // 0x08
		internal static readonly char[] InvalidParamChars; // 0x10
	
		// Constructors
		static ValidationHelper(); // 0x00772B64-0x00772C38
	
		// Methods
		public static bool ValidateTcpPort(int port); // 0x00763488-0x00763494
	}

	internal static class ExceptionHelper // TypeDefIndex: 1657
	{
		// Properties
		internal static NotImplementedException MethodNotImplementedException { get; } // 0x00761DCC-0x00761E48 
		internal static NotImplementedException PropertyNotImplementedException { get; } // 0x00761D04-0x00761D80 
	}

	public class SocketAddress // TypeDefIndex: 1658
	{
		// Fields
		internal int m_Size; // 0x10
		internal byte[] m_Buffer; // 0x18
		private bool m_changed; // 0x20
		private int m_hash; // 0x24
	
		// Properties
		public AddressFamily Family { get; } // 0x007639EC-0x00763A74 
		public int Size { get; } // 0x00763A74-0x00763A7C 
		public byte this[int offset] { get => default; } // 0x007651E4-0x007652B0 
	
		// Constructors
		public SocketAddress(AddressFamily family, int size); // 0x007652B0-0x007653F8
		internal SocketAddress(IPAddress ipAddress); // 0x007653F8-0x00765828
		internal SocketAddress(IPAddress ipaddress, int port); // 0x007635F0-0x00763680
	
		// Methods
		internal IPAddress GetIPAddress(); // 0x00765828-0x00765B54
		internal IPEndPoint GetIPEndPoint(); // 0x00763A7C-0x00763B58
		public override bool Equals(object comparand); // 0x00765B54-0x00765C60
		public override int GetHashCode(); // 0x00765C60-0x00765E7C
		public override string ToString(); // 0x00765E7C-0x0076623C
	}

	internal static class Logging // TypeDefIndex: 1659
	{
		// Fields
		internal static readonly bool On; // 0x00
	
		// Constructors
		static Logging(); // 0x007641F0-0x007641F4
	}

	public static class Dns // TypeDefIndex: 1660
	{
		// Nested types
		private delegate IPAddress[] GetHostAddressesCallback(string hostName); // TypeDefIndex: 1661; 0x00761568-0x00761CB8
	
		// Constructors
		static Dns(); // 0x00760330-0x00760334
	
		// Methods
		public static IAsyncResult BeginGetHostAddresses(string hostNameOrAddress, AsyncCallback requestCallback, object state); // 0x00760334-0x00760490
		public static IPAddress[] EndGetHostAddresses(IAsyncResult asyncResult); // 0x007604C4-0x00760724
		private static bool GetHostByName_internal(string host, out string h_name, out string[] h_aliases, out string[] h_addr_list, int hint); // 0x00760730-0x00760734
		private static bool GetHostByAddr_internal(string addr, out string h_name, out string[] h_aliases, out string[] h_addr_list, int hint); // 0x00760734-0x00760738
		private static void Error_11001(string hostName); // 0x00760738-0x007607C8
		private static IPHostEntry hostent_to_IPHostEntry(string originalHostName, string h_name, string[] h_aliases, string[] h_addrlist); // 0x00760848-0x00760B84
		private static IPHostEntry GetHostByAddressFromString(string address, bool parse); // 0x00760D04-0x00760E84
		public static IPHostEntry GetHostEntry(string hostNameOrAddress); // 0x00760F24-0x007610C4
		public static IPHostEntry GetHostEntry(IPAddress address); // 0x0076114C-0x00761214
		public static IPAddress[] GetHostAddresses(string hostNameOrAddress); // 0x00761370-0x00761560
		[Obsolete] // 0x003A129C-0x003A12D4
		public static IPHostEntry GetHostByName(string hostName); // 0x00761214-0x00761370
	}

	internal struct IPv6AddressFormatter // TypeDefIndex: 1662
	{
		// Fields
		private ushort[] address; // 0x00
		private long scopeId; // 0x08
	
		// Constructors
		public IPv6AddressFormatter(ushort[] addr, long scopeId); // 0x00763FA8-0x00763FB0
	
		// Methods
		private static ushort SwapUShort(ushort number); // 0x00763FB0-0x00764048
		private uint AsIPv4Int(); // 0x00764048-0x00764100
		private bool IsIPv4Compatible(); // 0x00764100-0x007641E0
		private bool IsIPv4Mapped(); // 0x007641E0-0x007641E8
		public override string ToString(); // 0x007641E8-0x007641F0
	}
}

namespace System.Net.Sockets
{
	[Serializable]
	public class SocketException : Win32Exception // TypeDefIndex: 1663
	{
		// Fields
		[NonSerialized]
		private EndPoint m_EndPoint; // 0x90
	
		// Properties
		public override int ErrorCode { get; } // 0x007724C0-0x007724C8 
		public override string Message { get; } // 0x007724C8-0x00772574 
		public SocketError SocketErrorCode { get; } // 0x0076F3D8-0x0076F3E0 
	
		// Constructors
		public SocketException(); // 0x00769258-0x007692D0
		internal SocketException(int error, string message); // 0x007607C8-0x00760848
		public SocketException(int errorCode); // 0x00768B04-0x00768B7C
		internal SocketException(SocketError socketError); // 0x00762630-0x007626A8
		protected SocketException(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x00772430-0x007724C0
	
		// Methods
		private static int WSAGetLastError_internal(); // 0x0077242C-0x00772430
	}

	public enum AddressFamily // TypeDefIndex: 1664
	{
		Unknown = -1,
		Unspecified = 0,
		Unix = 1,
		InterNetwork = 2,
		ImpLink = 3,
		Pup = 4,
		Chaos = 5,
		NS = 6,
		Ipx = 6,
		Iso = 7,
		Osi = 7,
		Ecma = 8,
		DataKit = 9,
		Ccitt = 10,
		Sna = 11,
		DecNet = 12,
		DataLink = 13,
		Lat = 14,
		HyperChannel = 15,
		AppleTalk = 16,
		NetBios = 17,
		VoiceView = 18,
		FireFox = 19,
		Banyan = 21,
		Atm = 22,
		InterNetworkV6 = 23,
		Cluster = 24,
		Ieee12844 = 25,
		Irda = 26,
		NetworkDesigners = 28,
		Max = 29
	}

	public enum IPProtectionLevel // TypeDefIndex: 1665
	{
		Unspecified = -1,
		Unrestricted = 10,
		EdgeRestricted = 20,
		Restricted = 30
	}

	public class LingerOption // TypeDefIndex: 1666
	{
		// Fields
		private bool enabled; // 0x10
		private int lingerTime; // 0x14
	
		// Properties
		public bool Enabled { set; } // 0x0076627C-0x00766288
		public int LingerTime { set; } // 0x00766288-0x00766290
	
		// Constructors
		public LingerOption(bool enable, int seconds); // 0x0076623C-0x0076627C
	}

	public class MulticastOption // TypeDefIndex: 1667
	{
	}

	public class NetworkStream : Stream // TypeDefIndex: 1668
	{
		// Fields
		private Socket m_StreamSocket; // 0x28
		private bool m_Readable; // 0x30
		private bool m_Writeable; // 0x31
		private bool m_OwnsSocket; // 0x32
		private int m_CloseTimeout; // 0x34
		private bool m_CleanedUp; // 0x38
	
		// Properties
		public override bool CanRead { get; } // 0x00766290-0x00766298 
		public override bool CanSeek { get; } // 0x00766298-0x007662A0 
		public override bool CanWrite { get; } // 0x007662A0-0x007662A8 
		public override long Length { get; } // 0x007662A8-0x00766330 
		public override long Position { get; set; } // 0x00766330-0x007663B8 0x007663B8-0x00766440
	
		// Methods
		public override long Seek(long offset, SeekOrigin origin); // 0x00766440-0x007664C8
		public override int Read([In, Out] byte[] buffer, int offset, int size); // 0x007664C8-0x007668D8
		public override void Write(byte[] buffer, int offset, int size); // 0x007669A0-0x00766DB0
		protected override void Dispose(bool disposing); // 0x00766E78-0x00766EF8
		~NetworkStream(); // 0x00766F98-0x0076701C
		public override IAsyncResult BeginRead(byte[] buffer, int offset, int size, AsyncCallback callback, object state); // 0x0076701C-0x00767444
		public override int EndRead(IAsyncResult asyncResult); // 0x0076752C-0x00767864
		public override IAsyncResult BeginWrite(byte[] buffer, int offset, int size, AsyncCallback callback, object state); // 0x00767904-0x00767D2C
		public override void EndWrite(IAsyncResult asyncResult); // 0x00767E14-0x0076814C
		public override void Flush(); // 0x007681EC-0x007681F0
	}

	public enum ProtocolType // TypeDefIndex: 1669
	{
		Unknown = -1,
		IP = 0,
		IPv6HopByHopOptions = 0,
		Unspecified = 0,
		Icmp = 1,
		Igmp = 2,
		Ggp = 3,
		IPv4 = 4,
		Tcp = 6,
		Pup = 12,
		Udp = 17,
		Idp = 22,
		IPv6 = 41,
		IPv6RoutingHeader = 43,
		IPv6FragmentHeader = 44,
		IPSecEncapsulatingSecurityPayload = 50,
		IPSecAuthenticationHeader = 51,
		IcmpV6 = 58,
		IPv6NoNextHeader = 59,
		IPv6DestinationOptions = 60,
		ND = 77,
		Raw = 255,
		Ipx = 1000,
		Spx = 1256,
		SpxII = 1257
	}

	public enum SelectMode // TypeDefIndex: 1670
	{
		SelectRead = 0,
		SelectWrite = 1,
		SelectError = 2
	}

	public class Socket : IDisposable // TypeDefIndex: 1671
	{
		// Fields
		private static object s_InternalSyncObject; // 0x00
		internal static bool s_SupportsIPv4; // 0x08
		internal static bool s_SupportsIPv6; // 0x09
		internal static bool s_OSSupportsIPv6; // 0x0A
		internal static bool s_Initialized; // 0x0B
		private static bool s_LoggingEnabled; // 0x0C
		private bool is_closed; // 0x10
		private bool is_listening; // 0x11
		private bool useOverlappedIO; // 0x12
		private int linger_timeout; // 0x14
		private AddressFamily addressFamily; // 0x18
		private SocketType socketType; // 0x1C
		private ProtocolType protocolType; // 0x20
		internal SafeSocketHandle m_Handle; // 0x28
		internal EndPoint seed_endpoint; // 0x30
		internal SemaphoreSlim ReadSem; // 0x38
		internal SemaphoreSlim WriteSem; // 0x40
		internal bool is_blocking; // 0x48
		internal bool is_bound; // 0x49
		internal bool is_connected; // 0x4A
		private int m_IntCleanedUp; // 0x4C
		internal bool connect_in_progress; // 0x50
		private static AsyncCallback AcceptAsyncCallback; // 0x10
		private static IOAsyncCallback BeginAcceptCallback; // 0x18
		private static IOAsyncCallback BeginAcceptReceiveCallback; // 0x20
		private static AsyncCallback ConnectAsyncCallback; // 0x28
		private static IOAsyncCallback BeginConnectCallback; // 0x30
		private static AsyncCallback DisconnectAsyncCallback; // 0x38
		private static IOAsyncCallback BeginDisconnectCallback; // 0x40
		private static AsyncCallback ReceiveAsyncCallback; // 0x48
		private static IOAsyncCallback BeginReceiveCallback; // 0x50
		private static IOAsyncCallback BeginReceiveGenericCallback; // 0x58
		private static AsyncCallback ReceiveFromAsyncCallback; // 0x60
		private static IOAsyncCallback BeginReceiveFromCallback; // 0x68
		private static AsyncCallback SendAsyncCallback; // 0x70
		private static IOAsyncCallback BeginSendGenericCallback; // 0x78
		private static AsyncCallback SendToAsyncCallback; // 0x80
	
		// Properties
		[Obsolete] // 0x003A135C-0x003A1394
		public static bool SupportsIPv4 { get; } // 0x00760C88-0x00760CFC 
		public static bool OSSupportsIPv4 { get; } // 0x007694F8-0x0076956C 
		[Obsolete] // 0x003A1394-0x003A13CC
		public static bool SupportsIPv6 { get; } // 0x00760C0C-0x00760C80 
		public static bool OSSupportsIPv6 { get; } // 0x0076956C-0x007695E0 
		public IntPtr Handle { get; } // 0x007695E0-0x00769610 
		public AddressFamily AddressFamily { get; } // 0x00769610-0x00769618 
		public SocketType SocketType { get; } // 0x00769618-0x00769620 
		public ProtocolType ProtocolType { get; } // 0x00769620-0x00769628 
		public bool DontFragment { set; } // 0x00769628-0x007696E8
		public bool DualMode { get; set; } // 0x0076980C-0x007698DC 0x00769B0C-0x00769BD0
		private bool IsDualMode { get; } // 0x00769BD0-0x00769BE8 
		private static object InternalSyncObject { get; } // 0x0076B298-0x0076B374 
		internal bool CleanedUp { get; } // 0x0076B374-0x0076B384 
		public bool Blocking { get; set; } // 0x0076B754-0x0076B75C 0x0076B75C-0x0076B838
		public bool NoDelay { set; } // 0x0076B708-0x0076B754
		internal static int FamilyHint { get; } // 0x00760E84-0x00760F24 
	
		// Nested types
		private struct WSABUF // TypeDefIndex: 1672
		{
			// Fields
			public int len; // 0x00
			public IntPtr buf; // 0x08
		}
	
		[Serializable]
		[CompilerGenerated] // 0x003A09E4-0x003A09F4
		private sealed class <>c // TypeDefIndex: 1673
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static IOAsyncCallback <>9__241_0; // 0x08
	
			// Constructors
			static <>c(); // 0x0076EDD8-0x0076EE3C
			public <>c(); // 0x0076EE3C-0x0076EE44
	
			// Methods
			internal void <BeginSend>b__241_0(IOAsyncResult s); // 0x0076EE44-0x0076EF24
			internal void <.cctor>b__309_0(IAsyncResult ares); // 0x0076EF24-0x0076F3D0
			internal void <.cctor>b__309_1(IOAsyncResult ares); // 0x0076F400-0x0076F5A4
			internal void <.cctor>b__309_2(IOAsyncResult ares); // 0x0076F5AC-0x0076F850
			internal void <.cctor>b__309_3(IAsyncResult ares); // 0x0076F85C-0x0076FC60
			internal void <.cctor>b__309_4(IOAsyncResult ares); // 0x0076FC60-0x0076FF50
			internal void <.cctor>b__309_5(IAsyncResult ares); // 0x00770164-0x00770568
			internal void <.cctor>b__309_6(IOAsyncResult ares); // 0x00770568-0x007706FC
			internal void <.cctor>b__309_7(IAsyncResult ares); // 0x007706FC-0x00770B04
			internal void <.cctor>b__309_8(IOAsyncResult ares); // 0x00770B0C-0x00770D6C
			internal void <.cctor>b__309_9(IOAsyncResult ares); // 0x00770D6C-0x00770F1C
			internal void <.cctor>b__309_10(IAsyncResult ares); // 0x00770F1C-0x00771354
			internal void <.cctor>b__309_11(IOAsyncResult ares); // 0x00771354-0x007715C8
			internal void <.cctor>b__309_12(IAsyncResult ares); // 0x007715C8-0x007719D0
			internal void <.cctor>b__309_13(IOAsyncResult ares); // 0x007719D0-0x00771B80
			internal void <.cctor>b__309_14(IAsyncResult ares); // 0x00771B80-0x00771F88
		}
	
		[CompilerGenerated] // 0x003A09F4-0x003A0A04
		private sealed class <>c__DisplayClass242_0 // TypeDefIndex: 1674
		{
			// Fields
			public int sent_so_far; // 0x10
	
			// Constructors
			public <>c__DisplayClass242_0(); // 0x0076E3F8-0x0076E400
	
			// Methods
			internal void <BeginSendCallback>b__0(IOAsyncResult s); // 0x00771F88-0x00772070
		}
	
		[CompilerGenerated] // 0x003A0A04-0x003A0A14
		private sealed class <>c__DisplayClass298_0 // TypeDefIndex: 1675
		{
			// Fields
			public Socket <>4__this; // 0x10
			public IOSelectorJob job; // 0x18
			public IntPtr handle; // 0x20
	
			// Constructors
			public <>c__DisplayClass298_0(); // 0x0076E9C4-0x0076E9CC
	
			// Methods
			internal void <QueueIOSelectorJob>b__0(Task t); // 0x00772070-0x007720D4
		}
	
		// Constructors
		public Socket(AddressFamily addressFamily, SocketType socketType, ProtocolType protocolType); // 0x00768DC4-0x00768FFC
		internal Socket(AddressFamily family, SocketType type, ProtocolType proto, SafeSocketHandle safe_handle); // 0x0076B614-0x0076B708
		static Socket(); // 0x0076E9D0-0x0076EDD8
	
		// Methods
		public int Send(IList<ArraySegment<byte>> buffers, SocketFlags socketFlags); // 0x00769BE8-0x00769C98
		public int Send(byte[] buffer, int offset, int size, SocketFlags socketFlags); // 0x00766DB0-0x00766E78
		public int Receive(byte[] buffer, int offset, int size, SocketFlags socketFlags); // 0x007668D8-0x007669A0
		public int Receive(IList<ArraySegment<byte>> buffers, SocketFlags socketFlags); // 0x0076A590-0x0076A640
		public void SetIPProtectionLevel(IPProtectionLevel level); // 0x007692D0-0x007693FC
		public IAsyncResult BeginSend(byte[] buffer, int offset, int size, SocketFlags socketFlags, AsyncCallback callback, object state); // 0x00767D2C-0x00767E14
		public int EndSend(IAsyncResult asyncResult); // 0x0076814C-0x007681EC
		public IAsyncResult BeginReceive(byte[] buffer, int offset, int size, SocketFlags socketFlags, AsyncCallback callback, object state); // 0x00767444-0x0076752C
		public int EndReceive(IAsyncResult asyncResult); // 0x00767864-0x00767904
		internal static void InitializeSockets(); // 0x00768FFC-0x00769254
		public void Dispose(); // 0x0076B3E8-0x0076B464
		~Socket(); // 0x0076B464-0x0076B4E4
		internal void InternalShutdown(SocketShutdown how); // 0x00766EF8-0x00766F90
		private void SocketDefaults(); // 0x007693FC-0x007694F8
		private IntPtr Socket_internal(AddressFamily family, SocketType type, ProtocolType proto, out int error); // 0x00769254-0x00769258
		private static void Blocking_internal(SafeSocketHandle safeHandle, bool block, out int error); // 0x0076B8F8-0x0076BA28
		internal static void Blocking_internal(IntPtr socket, bool block, out int error); // 0x00768858-0x00768860
		private static bool Poll_internal(IntPtr socket, SelectMode mode, int timeout, out int error); // 0x0076BAAC-0x0076BAB0
		public Socket Accept(); // 0x0076BAB0-0x0076BC10
		internal void Accept(Socket acceptSocket); // 0x0076BD5C-0x0076BF18
		public Socket EndAccept(IAsyncResult asyncResult); // 0x0076BF18-0x0076BF4C
		public Socket EndAccept(out byte[] buffer, out int bytesTransferred, IAsyncResult asyncResult); // 0x0076BF4C-0x0076C084
		private static SafeSocketHandle Accept_internal(SafeSocketHandle safeHandle, out int error, bool blocking); // 0x0076BC10-0x0076BD5C
		private static IntPtr Accept_internal(IntPtr sock, out int error, bool blocking); // 0x0076C288-0x0076C290
		public IAsyncResult BeginConnect(string host, int port, AsyncCallback requestCallback, object state); // 0x0076C290-0x0076C42C
		public IAsyncResult BeginConnect(IPAddress[] addresses, int port, AsyncCallback requestCallback, object state); // 0x0076C42C-0x0076C648
		private static void BeginMConnect(SocketAsyncResult sockares); // 0x0076C68C-0x0076C854
		private static void BeginSConnect(SocketAsyncResult sockares); // 0x0076C854-0x0076CD28
		public void EndConnect(IAsyncResult asyncResult); // 0x0076CFDC-0x0076D0B0
		private static void Connect_internal(SafeSocketHandle safeHandle, SocketAddress sa, out int error, bool blocking); // 0x0076CE28-0x0076CF5C
		private static void Connect_internal(IntPtr sock, SocketAddress sa, out int error, bool blocking); // 0x0076D0B0-0x0076D0B8
		public void Disconnect(bool reuseSocket); // 0x0076D0B8-0x0076D1B0
		public void EndDisconnect(IAsyncResult asyncResult); // 0x0076D2E0-0x0076D3B4
		private static void Disconnect_internal(SafeSocketHandle safeHandle, bool reuse, out int error); // 0x0076D1B0-0x0076D2E0
		private static void Disconnect_internal(IntPtr sock, bool reuse, out int error); // 0x0076D3B4-0x0076D3BC
		public int Receive(byte[] buffer, int offset, int size, SocketFlags socketFlags, out SocketError errorCode); // 0x0076A46C-0x0076A590
		[CLSCompliant] // 0x003A12D4-0x003A12E8
		public int Receive(IList<ArraySegment<byte>> buffers, SocketFlags socketFlags, out SocketError errorCode); // 0x0076A640-0x0076AC80
		public IAsyncResult BeginReceive(byte[] buffer, int offset, int size, SocketFlags socketFlags, out SocketError errorCode, AsyncCallback callback, object state); // 0x0076AFC8-0x0076B174
		public int EndReceive(IAsyncResult asyncResult, out SocketError errorCode); // 0x0076B174-0x0076B298
		private static unsafe int Receive_internal(SafeSocketHandle safeHandle, WSABUF* bufarray, int count, SocketFlags flags, out int error, bool blocking); // 0x0076D6C0-0x0076D808
		private static unsafe int Receive_internal(IntPtr sock, WSABUF* bufarray, int count, SocketFlags flags, out int error, bool blocking); // 0x0076DA28-0x0076DA30
		private static unsafe int Receive_internal(SafeSocketHandle safeHandle, byte* buffer, int count, SocketFlags flags, out int error, bool blocking); // 0x0076D578-0x0076D6C0
		private static unsafe int Receive_internal(IntPtr sock, byte* buffer, int count, SocketFlags flags, out int error, bool blocking); // 0x0076DA30-0x0076DA38
		internal int ReceiveFrom(byte[] buffer, int offset, int size, SocketFlags socketFlags, ref EndPoint remoteEP, out SocketError errorCode); // 0x0076DA38-0x0076DBE4
		public int EndReceiveFrom(IAsyncResult asyncResult, ref EndPoint endPoint); // 0x0076DD34-0x0076DE90
		private static unsafe int ReceiveFrom_internal(SafeSocketHandle safeHandle, byte* buffer, int count, SocketFlags flags, ref SocketAddress sockaddr, out int error, bool blocking); // 0x0076DBE4-0x0076DD34
		private static unsafe int ReceiveFrom_internal(IntPtr sock, byte* buffer, int count, SocketFlags flags, ref SocketAddress sockaddr, out int error, bool blocking); // 0x0076DE90-0x0076DE98
		public int Send(byte[] buffer, int offset, int size, SocketFlags socketFlags, out SocketError errorCode); // 0x0076A310-0x0076A46C
		[CLSCompliant] // 0x003A12E8-0x003A12FC
		public int Send(IList<ArraySegment<byte>> buffers, SocketFlags socketFlags, out SocketError errorCode); // 0x00769C98-0x0076A310
		public IAsyncResult BeginSend(byte[] buffer, int offset, int size, SocketFlags socketFlags, out SocketError errorCode, AsyncCallback callback, object state); // 0x0076AC80-0x0076AEA4
		private static void BeginSendCallback(SocketAsyncResult sockares, int sent_so_far); // 0x0076E128-0x0076E3F8
		public int EndSend(IAsyncResult asyncResult, out SocketError errorCode); // 0x0076AEA4-0x0076AFC8
		private static unsafe int Send_internal(SafeSocketHandle safeHandle, WSABUF* bufarray, int count, SocketFlags flags, out int error, bool blocking); // 0x0076DFE0-0x0076E128
		private static unsafe int Send_internal(IntPtr sock, WSABUF* bufarray, int count, SocketFlags flags, out int error, bool blocking); // 0x0076E410-0x0076E418
		private static unsafe int Send_internal(SafeSocketHandle safeHandle, byte* buffer, int count, SocketFlags flags, out int error, bool blocking); // 0x0076DE98-0x0076DFE0
		private static unsafe int Send_internal(IntPtr sock, byte* buffer, int count, SocketFlags flags, out int error, bool blocking); // 0x0076E418-0x0076E420
		public int EndSendTo(IAsyncResult asyncResult); // 0x0076E420-0x0076E510
		public object GetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName); // 0x007698DC-0x00769B0C
		private static void GetSocketOption_obj_internal(SafeSocketHandle safeHandle, SocketOptionLevel level, SocketOptionName name, out object obj_val, out int error); // 0x0076E510-0x0076E658
		private static void GetSocketOption_obj_internal(IntPtr socket, SocketOptionLevel level, SocketOptionName name, out object obj_val, out int error); // 0x0076E658-0x0076E65C
		public void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, int optionValue); // 0x007696E8-0x0076980C
		private static void SetSocketOption_internal(SafeSocketHandle safeHandle, SocketOptionLevel level, SocketOptionName name, object obj_val, byte[] byte_val, int int_val, out int error); // 0x0076E65C-0x0076E7BC
		private static void SetSocketOption_internal(IntPtr socket, SocketOptionLevel level, SocketOptionName name, object obj_val, byte[] byte_val, int int_val, out int error); // 0x0076E7BC-0x0076E7C0
		public void Close(); // 0x0076E7C0-0x0076E7C8
		public void Close(int timeout); // 0x00766F90-0x00766F98
		internal static void Close_internal(IntPtr socket, out int error); // 0x00768868-0x0076886C
		private static void Shutdown_internal(SafeSocketHandle safeHandle, SocketShutdown how, out int error); // 0x0076B4E4-0x0076B614
		internal static void Shutdown_internal(IntPtr socket, SocketShutdown how, out int error); // 0x00768860-0x00768864
		protected virtual void Dispose(bool disposing); // 0x0076E7C8-0x0076E848
		private void Linger(IntPtr handle); // 0x0076E848-0x0076E9C4
		private void ThrowIfDisposedAndClosed(); // 0x0076B838-0x0076B8F8
		private void ThrowIfBufferNull(byte[] buffer); // 0x0076D3BC-0x0076D444
		private void ThrowIfBufferOutOfRange(byte[] buffer, int offset, int size); // 0x0076D444-0x0076D578
		private void ThrowIfUdp(); // 0x0076BA28-0x0076BAAC
		private SocketAsyncResult ValidateEndIAsyncResult(IAsyncResult ares, string methodName, string argName); // 0x0076C084-0x0076C1C4
		private void QueueIOSelectorJob(SemaphoreSlim sem, IntPtr handle, IOSelectorJob job); // 0x0076D808-0x0076D998
		private IPEndPoint RemapIPEndPoint(IPEndPoint input); // 0x0076CD58-0x0076CE28
		internal static void cancel_blocking_socket_operation(Thread thread); // 0x00768864-0x00768868
		private static bool IsProtocolSupported_internal(NetworkInterfaceComponent networkInterface); // 0x0076E9CC-0x0076E9D0
		private static bool IsProtocolSupported(NetworkInterfaceComponent networkInterface); // 0x0076B384-0x0076B3E8
	}

	public enum SocketError // TypeDefIndex: 1676
	{
		SocketError = -1,
		Success = 0,
		OperationAborted = 995,
		IOPending = 997,
		Interrupted = 10004,
		AccessDenied = 10013,
		Fault = 10014,
		InvalidArgument = 10022,
		TooManyOpenSockets = 10024,
		WouldBlock = 10035,
		InProgress = 10036,
		AlreadyInProgress = 10037,
		NotSocket = 10038,
		DestinationAddressRequired = 10039,
		MessageSize = 10040,
		ProtocolType = 10041,
		ProtocolOption = 10042,
		ProtocolNotSupported = 10043,
		SocketNotSupported = 10044,
		OperationNotSupported = 10045,
		ProtocolFamilyNotSupported = 10046,
		AddressFamilyNotSupported = 10047,
		AddressAlreadyInUse = 10048,
		AddressNotAvailable = 10049,
		NetworkDown = 10050,
		NetworkUnreachable = 10051,
		NetworkReset = 10052,
		ConnectionAborted = 10053,
		ConnectionReset = 10054,
		NoBufferSpaceAvailable = 10055,
		IsConnected = 10056,
		NotConnected = 10057,
		Shutdown = 10058,
		TimedOut = 10060,
		ConnectionRefused = 10061,
		HostDown = 10064,
		HostUnreachable = 10065,
		ProcessLimit = 10067,
		SystemNotReady = 10091,
		VersionNotSupported = 10092,
		NotInitialized = 10093,
		Disconnecting = 10101,
		TypeNotFound = 10109,
		HostNotFound = 11001,
		TryAgain = 11002,
		NoRecovery = 11003,
		NoData = 11004
	}

	[Flags] // 0x003A0A14-0x003A0A24
	public enum SocketFlags // TypeDefIndex: 1677
	{
		None = 0,
		OutOfBand = 1,
		Peek = 2,
		DontRoute = 4,
		MaxIOVectorLength = 16,
		Truncated = 256,
		ControlDataTruncated = 512,
		Broadcast = 1024,
		Multicast = 2048,
		Partial = 32768
	}

	public enum SocketOptionLevel // TypeDefIndex: 1678
	{
		IP = 0,
		Tcp = 6,
		Udp = 17,
		IPv6 = 41,
		Socket = 65535
	}

	public enum SocketOptionName // TypeDefIndex: 1679
	{
		DontLinger = -129,
		ExclusiveAddressUse = -5,
		Debug = 1,
		IPOptions = 1,
		NoDelay = 1,
		NoChecksum = 1,
		AcceptConnection = 2,
		HeaderIncluded = 2,
		BsdUrgent = 2,
		Expedited = 2,
		TypeOfService = 3,
		ReuseAddress = 4,
		IpTimeToLive = 4,
		KeepAlive = 8,
		MulticastInterface = 9,
		MulticastTimeToLive = 10,
		MulticastLoopback = 11,
		AddMembership = 12,
		DropMembership = 13,
		DontFragment = 14,
		AddSourceMembership = 15,
		DontRoute = 16,
		DropSourceMembership = 16,
		BlockSource = 17,
		UnblockSource = 18,
		PacketInformation = 19,
		ChecksumCoverage = 20,
		HopLimit = 21,
		IPProtectionLevel = 23,
		IPv6Only = 27,
		Broadcast = 32,
		UseLoopback = 64,
		Linger = 128,
		OutOfBandInline = 256,
		SendBuffer = 4097,
		ReceiveBuffer = 4098,
		SendLowWater = 4099,
		ReceiveLowWater = 4100,
		SendTimeout = 4101,
		ReceiveTimeout = 4102,
		Error = 4103,
		Type = 4104,
		ReuseUnicastPort = 12295,
		UpdateAcceptContext = 28683,
		UpdateConnectContext = 28688,
		MaxConnections = 2147483647
	}

	public enum SocketShutdown // TypeDefIndex: 1680
	{
		Receive = 0,
		Send = 1,
		Both = 2
	}

	public enum SocketType // TypeDefIndex: 1681
	{
		Unknown = -1,
		Stream = 1,
		Dgram = 2,
		Raw = 3,
		Rdm = 4,
		Seqpacket = 5
	}

	public class TcpClient : IDisposable // TypeDefIndex: 1682
	{
		// Fields
		private Socket m_ClientSocket; // 0x10
		private bool m_Active; // 0x18
		private NetworkStream m_DataStream; // 0x20
		private AddressFamily m_Family; // 0x28
		private bool m_CleanedUp; // 0x2C
	
		// Properties
		public Socket Client { get; set; } // 0x007727CC-0x007727D4 0x007727D4-0x007727DC
	
		// Constructors
		public TcpClient(); // 0x00772574-0x007725E8
		public TcpClient(AddressFamily family); // 0x007725E8-0x00772754
	
		// Methods
		public IAsyncResult BeginConnect(string host, int port, AsyncCallback requestCallback, object state); // 0x007727DC-0x00772880
		public void EndConnect(IAsyncResult asyncResult); // 0x00772880-0x00772910
		protected virtual void Dispose(bool disposing); // 0x00772910-0x00772AD4
		public void Dispose(); // 0x00772AD4-0x00772AE4
		~TcpClient(); // 0x00772AE4-0x00772B64
		private void initialize(); // 0x00772754-0x007727CC
	}

	internal sealed class SafeSocketHandle : SafeHandleZeroOrMinusOneIsInvalid // TypeDefIndex: 1683
	{
		// Fields
		private List<Thread> blocking_threads; // 0x20
		private Dictionary<Thread, StackTrace> threads_stacktraces; // 0x28
		private bool in_cleanup; // 0x30
		private static bool THROW_ON_ABORT_RETRIES; // 0x00
	
		// Constructors
		public SafeSocketHandle(IntPtr preexistingHandle, bool ownsHandle); // 0x007681F0-0x007682B8
		static SafeSocketHandle(); // 0x00768D48-0x00768DC4
	
		// Methods
		protected override bool ReleaseHandle(); // 0x007682B8-0x00768858
		public void RegisterForBlockingSyscall(); // 0x0076886C-0x00768B04
		public void UnRegisterForBlockingSyscall(); // 0x00768B7C-0x00768D48
	}

	public class SocketAsyncEventArgs : EventArgs, IDisposable // TypeDefIndex: 1684
	{
		// Fields
		private bool disposed; // 0x10
		internal int in_progress; // 0x14
		internal EndPoint remote_ep; // 0x18
		internal Socket current_socket; // 0x20
		[CompilerGenerated] // 0x003A0F04-0x003A0F14
		private Socket <AcceptSocket>k__BackingField; // 0x28
		[CompilerGenerated] // 0x003A0F14-0x003A0F24
		private int <BytesTransferred>k__BackingField; // 0x30
		[CompilerGenerated] // 0x003A0F24-0x003A0F34
		private SocketError <SocketError>k__BackingField; // 0x34
		[CompilerGenerated] // 0x003A0F34-0x003A0F44
		private EventHandler<SocketAsyncEventArgs> Completed; // 0x38
	
		// Properties
		public Socket AcceptSocket { [CompilerGenerated] /* 0x003A12FC-0x003A130C */ get; [CompilerGenerated] /* 0x003A130C-0x003A131C */ set; } // 0x0076F3E8-0x0076F3F0 0x0076F3D0-0x0076F3D8
		internal int BytesTransferred { [CompilerGenerated] /* 0x003A131C-0x003A132C */ set; } // 0x00770B04-0x00770B0C
		public SocketError SocketError { [CompilerGenerated] /* 0x003A132C-0x003A133C */ set; } // 0x0076F3E0-0x0076F3E8
	
		// Methods
		~SocketAsyncEventArgs(); // 0x007720D4-0x007720E4
		private void Dispose(bool disposing); // 0x007720E4-0x007720F8
		public void Dispose(); // 0x007720F8-0x0077216C
		internal void Complete(); // 0x0076F3F0-0x0076F400
		protected virtual void OnCompleted(SocketAsyncEventArgs e); // 0x0077216C-0x00772224
	}

	internal sealed class SocketAsyncResult : IOAsyncResult // TypeDefIndex: 1685
	{
		// Fields
		public Socket socket; // 0x30
		public SocketOperation operation; // 0x38
		private Exception DelayedException; // 0x40
		public EndPoint EndPoint; // 0x48
		public byte[] Buffer; // 0x50
		public int Offset; // 0x58
		public int Size; // 0x5C
		public SocketFlags SockFlags; // 0x60
		public Socket AcceptSocket; // 0x68
		public IPAddress[] Addresses; // 0x70
		public int Port; // 0x78
		public IList<ArraySegment<byte>> Buffers; // 0x80
		public bool ReuseSocket; // 0x88
		public int CurrentAddress; // 0x8C
		public Socket AcceptedSocket; // 0x90
		public int Total; // 0x98
		internal int error; // 0x9C
		public int EndCalled; // 0xA0
	
		// Properties
		public IntPtr Handle { get; } // 0x0076CF88-0x0076CFDC 
		public SocketError ErrorCode { get; } // 0x0076D998-0x0076DA28 
	
		// Nested types
		[Serializable]
		[CompilerGenerated] // 0x003A0A24-0x003A0A34
		private sealed class <>c // TypeDefIndex: 1686
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static WaitCallback <>9__27_0; // 0x08
	
			// Constructors
			static <>c(); // 0x00772228-0x0077228C
			public <>c(); // 0x0077228C-0x00772294
	
			// Methods
			internal void <Complete>b__27_0(object state); // 0x00772294-0x0077242C
		}
	
		// Constructors
		public SocketAsyncResult(Socket socket, AsyncCallback callback, object state, SocketOperation operation); // 0x0076C648-0x0076C68C
	
		// Methods
		public void CheckIfThrowDelayedException(); // 0x0076C1C4-0x0076C288
		internal override void CompleteDisposed(); // 0x00772224-0x00772228
		public void Complete(); // 0x0076FF50-0x00770164
		public void Complete(bool synch); // 0x0076CF5C-0x0076CF88
		public void Complete(int total); // 0x0076E408-0x0076E410
		public void Complete(Exception e, bool synch); // 0x0076CD28-0x0076CD58
		public void Complete(Exception e); // 0x0076E400-0x0076E408
		public void Complete(Socket s); // 0x0076F5A4-0x0076F5AC
		public void Complete(Socket s, int total); // 0x0076F850-0x0076F85C
	}

	internal enum SocketOperation // TypeDefIndex: 1687
	{
		Accept = 0,
		Connect = 1,
		Receive = 2,
		ReceiveFrom = 3,
		Send = 4,
		SendTo = 5,
		RecvJustCallback = 6,
		SendJustCallback = 7,
		Disconnect = 8,
		AcceptReceive = 9,
		ReceiveGeneric = 10,
		SendGeneric = 11
	}
}

namespace System.Net.Security
{
	public abstract class AuthenticatedStream : Stream // TypeDefIndex: 1688
	{
		// Fields
		private Stream _InnerStream; // 0x28
		private bool _LeaveStreamOpen; // 0x30
	
		// Properties
		protected Stream InnerStream { get; } // 0x0076439C-0x007643A4 
		public abstract bool IsAuthenticated { get; }
	
		// Constructors
		protected AuthenticatedStream(Stream innerStream, bool leaveInnerStreamOpen); // 0x007641F4-0x0076439C
	
		// Methods
		protected override void Dispose(bool disposing); // 0x007643A4-0x00764484
	}

	public class SslStream : AuthenticatedStream // TypeDefIndex: 1689
	{
		// Fields
		private MonoTlsProvider provider; // 0x38
		private IMonoSslStream impl; // 0x40
	
		// Properties
		internal IMonoSslStream Impl { get; } // 0x00764484-0x007644A8 
		public override bool IsAuthenticated { get; } // 0x00764648-0x00764708 
		public override bool CanSeek { get; } // 0x00764708-0x00764710 
		public override bool CanRead { get; } // 0x00764710-0x007647D0 
		public override bool CanWrite { get; } // 0x007647D0-0x00764890 
		public override long Length { get; } // 0x00764890-0x00764950 
		public override long Position { get; set; } // 0x00764950-0x00764A10 0x00764A10-0x00764A98
	
		// Constructors
		internal SslStream(Stream innerStream, bool leaveInnerStreamOpen, MonoTlsProvider provider, MonoTlsSettings settings); // 0x00764534-0x007645AC
	
		// Methods
		internal static IMonoSslStream CreateMonoSslStream(Stream innerStream, bool leaveInnerStreamOpen, MonoTlsProvider provider, MonoTlsSettings settings); // 0x007645AC-0x00764648
		public override long Seek(long offset, SeekOrigin origin); // 0x00764A98-0x00764B20
		public override void Flush(); // 0x00764B20-0x00764B58
		private void CheckDisposed(); // 0x007644A8-0x00764534
		protected override void Dispose(bool disposing); // 0x00764B58-0x00764C78
		public override int Read(byte[] buffer, int offset, int count); // 0x00764C78-0x00764D5C
		public override void Write(byte[] buffer, int offset, int count); // 0x00764D5C-0x00764E44
		public override IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState); // 0x00764E44-0x00764F44
		public override int EndRead(IAsyncResult asyncResult); // 0x00764F44-0x00765014
		public override IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState); // 0x00765014-0x00765114
		public override void EndWrite(IAsyncResult asyncResult); // 0x00765114-0x007651E4
	}
}

namespace System.Net.NetworkInformation
{
	public enum NetworkInterfaceComponent // TypeDefIndex: 1690
	{
		IPv4 = 0,
		IPv6 = 1
	}
}

namespace System.Net.Configuration
{
	internal sealed class SettingsSectionInternal // TypeDefIndex: 1691
	{
		// Fields
		private static readonly SettingsSectionInternal instance; // 0x00
		internal readonly bool HttpListenerUnescapeRequestUrl; // 0x10
		internal readonly IPProtectionLevel IPProtectionLevel; // 0x14
	
		// Properties
		internal static SettingsSectionInternal Section { get; } // 0x009049A4-0x00904A0C 
		internal bool Ipv6Enabled { get; } // 0x00904A0C-0x00904A14 
	
		// Constructors
		public SettingsSectionInternal(); // 0x00904A14-0x00904A2C
		static SettingsSectionInternal(); // 0x00904A2C-0x00904AA0
	}
}

namespace System.Collections.Generic
{
	internal sealed class ICollectionDebugView<T> // TypeDefIndex: 1692
	{
	}

	[Serializable]
	[DebuggerDisplay] // 0x003A0A34-0x003A0ABC
	[DebuggerTypeProxy] // 0x003A0A34-0x003A0ABC
	public class LinkedList<T> : ICollection<T>, ICollection, IReadOnlyCollection<T>, ISerializable, IDeserializationCallback // TypeDefIndex: 1693
	{
		// Fields
		internal LinkedListNode<T> head;
		internal int count;
		internal int version;
		private object _syncRoot;
		private SerializationInfo _siInfo;
	
		// Properties
		public int Count { get; }
		public LinkedListNode<T> First { get; }
		bool ICollection<T>.IsReadOnly { get; }
		bool ICollection.IsSynchronized { get; }
		object ICollection.SyncRoot { get; }
	
		// Nested types
		[Serializable]
		public struct Enumerator : IEnumerator<T>, ISerializable, IDeserializationCallback // TypeDefIndex: 1694
		{
			// Fields
			private LinkedList<T> _list;
			private LinkedListNode<T> _node;
			private int _version;
			private T _current;
			private int _index;
	
			// Properties
			public T Current { get; }
			object IEnumerator.Current { get; }
	
			// Constructors
			internal Enumerator(LinkedList<T> list);
			private Enumerator(SerializationInfo info, StreamingContext context);
	
			// Methods
			public bool MoveNext();
			void IEnumerator.Reset();
			public void Dispose();
			void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
			void IDeserializationCallback.OnDeserialization(object sender);
		}
	
		// Constructors
		public LinkedList();
		protected LinkedList(SerializationInfo info, StreamingContext context);
	
		// Methods
		void ICollection<T>.Add(T value);
		public LinkedListNode<T> AddFirst(T value);
		public void AddFirst(LinkedListNode<T> node);
		public LinkedListNode<T> AddLast(T value);
		public void Clear();
		public bool Contains(T value);
		public void CopyTo(T[] array, int index);
		public LinkedListNode<T> Find(T value);
		public Enumerator GetEnumerator();
		IEnumerator<T> IEnumerable<T>.GetEnumerator();
		public bool Remove(T value);
		public void Remove(LinkedListNode<T> node);
		public void RemoveLast();
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
		public virtual void OnDeserialization(object sender);
		private void InternalInsertNodeBefore(LinkedListNode<T> node, LinkedListNode<T> newNode);
		private void InternalInsertNodeToEmptyList(LinkedListNode<T> newNode);
		internal void InternalRemoveNode(LinkedListNode<T> node);
		internal void ValidateNewNode(LinkedListNode<T> node);
		internal void ValidateNode(LinkedListNode<T> node);
		void ICollection.CopyTo(Array array, int index);
		IEnumerator IEnumerable.GetEnumerator();
	}

	public sealed class LinkedListNode<T> // TypeDefIndex: 1695
	{
		// Fields
		internal LinkedList<T> list;
		internal LinkedListNode<T> next;
		internal LinkedListNode<T> prev;
		internal T item;
	
		// Properties
		public LinkedListNode<T> Next { get; }
		public T Value { get; }
	
		// Constructors
		internal LinkedListNode(LinkedList<T> list, T value);
	
		// Methods
		internal void Invalidate();
	}

	[Serializable]
	[DebuggerDisplay] // 0x003A0ABC-0x003A0B44
	[DebuggerTypeProxy] // 0x003A0ABC-0x003A0B44
	public class Queue<T> : ICollection, IReadOnlyCollection<T> // TypeDefIndex: 1696
	{
		// Fields
		private T[] _array;
		private int _head;
		private int _tail;
		private int _size;
		private int _version;
		[NonSerialized]
		private object _syncRoot;
	
		// Properties
		public int Count { get; }
		bool ICollection.IsSynchronized { get; }
		object ICollection.SyncRoot { get; }
	
		// Nested types
		[Serializable]
		public struct Enumerator : IEnumerator<T> // TypeDefIndex: 1697
		{
			// Fields
			private readonly Queue<T> _q;
			private readonly int _version;
			private int _index;
			private T _currentElement;
	
			// Properties
			public T Current { get; }
			object IEnumerator.Current { get; }
	
			// Constructors
			internal Enumerator(Queue<T> q);
	
			// Methods
			public void Dispose();
			public bool MoveNext();
			private void ThrowEnumerationNotStartedOrEnded();
			void IEnumerator.Reset();
		}
	
		// Constructors
		public Queue();
		public Queue(int capacity);
	
		// Methods
		public void Clear();
		void ICollection.CopyTo(Array array, int index);
		public void Enqueue(T item);
		IEnumerator<T> IEnumerable<T>.GetEnumerator();
		IEnumerator IEnumerable.GetEnumerator();
		public T Dequeue();
		private void SetCapacity(int capacity);
		private void MoveNext(ref int index);
		private void ThrowForEmptyQueue();
	}

	internal sealed class QueueDebugView<T> // TypeDefIndex: 1698
	{
	}

	[Serializable]
	[DebuggerDisplay] // 0x003A0B44-0x003A0BCC
	[DebuggerTypeProxy] // 0x003A0B44-0x003A0BCC
	public class Stack<T> : ICollection, IReadOnlyCollection<T> // TypeDefIndex: 1699
	{
		// Fields
		private T[] _array;
		private int _size;
		private int _version;
		[NonSerialized]
		private object _syncRoot;
		private const int DefaultCapacity = 4; // Metadata: 0x00219B85
	
		// Properties
		public int Count { get; }
		bool ICollection.IsSynchronized { get; }
		object ICollection.SyncRoot { get; }
	
		// Nested types
		[Serializable]
		public struct Enumerator : IEnumerator<T> // TypeDefIndex: 1700
		{
			// Fields
			private readonly Stack<T> _stack;
			private readonly int _version;
			private int _index;
			private T _currentElement;
	
			// Properties
			public T Current { get; }
			object IEnumerator.Current { get; }
	
			// Constructors
			internal Enumerator(Stack<T> stack);
	
			// Methods
			public void Dispose();
			public bool MoveNext();
			private void ThrowEnumerationNotStartedOrEnded();
			void IEnumerator.Reset();
		}
	
		// Constructors
		public Stack();
	
		// Methods
		public void Clear();
		void ICollection.CopyTo(Array array, int arrayIndex);
		IEnumerator<T> IEnumerable<T>.GetEnumerator();
		IEnumerator IEnumerable.GetEnumerator();
		public T Peek();
		public T Pop();
		public void Push(T item);
		private void ThrowForEmptyStack();
	}

	internal sealed class StackDebugView<T> // TypeDefIndex: 1701
	{
	}

	public interface ISet<T> : ICollection<T> // TypeDefIndex: 1702
	{
	}
}

[CompilerGenerated] // 0x003A0BCC-0x003A0BDC
internal sealed class <PrivateImplementationDetails> // TypeDefIndex: 1703
{
	// Fields
	internal static readonly long 03F4297FCC30D0FD5E420E5D26E7FA711167C7EF; // 0x00 // Starts with: 20 00 0d 00 0a 00 09 00 - Metadata: 0x00219B89
	internal static readonly __StaticArrayInitTypeSize=10 53437C3B2572EDB9B8640C3195DF3BC2729C5EA1; // 0x08 // Starts with: 3a 00 5c 00 2f 00 3f 00 - Metadata: 0x00219B91
	internal static readonly __StaticArrayInitTypeSize=32 59F5BD34B6C013DEACC784F69C67E95150033A84; // 0x12 // Starts with: 30 00 31 00 32 00 33 00 - Metadata: 0x00219B9B
	internal static readonly __StaticArrayInitTypeSize=44 8E0EF3D67A3EB1863224EE3CACB424BC2F8CFBA3; // 0x32 // Starts with: 28 00 29 00 3c 00 3e 00 - Metadata: 0x00219BBB
	internal static readonly __StaticArrayInitTypeSize=32 C02C28AFEBE998F767E4AF43E3BE8F5E9FA11536; // 0x5E // Starts with: 30 00 31 00 32 00 33 00 - Metadata: 0x00219BE7
	internal static readonly __StaticArrayInitTypeSize=128 CCEEADA43268372341F81AE0C9208C6856441C04; // 0x7E // Starts with: 00 00 00 00 00 00 00 00 - Metadata: 0x00219C07
	internal static readonly long E5BC1BAFADE1862DD6E0B9FB632BFAA6C3873A78; // 0x100 // Starts with: 20 00 0a 00 0d 00 09 00 - Metadata: 0x00219C87

	// Nested types
	private struct __StaticArrayInitTypeSize=10 // TypeDefIndex: 1704
	{
	}

	private struct __StaticArrayInitTypeSize=32 // TypeDefIndex: 1705
	{
	}

	private struct __StaticArrayInitTypeSize=44 // TypeDefIndex: 1706
	{
	}

	private struct __StaticArrayInitTypeSize=128 // TypeDefIndex: 1707
	{
	}

	// Methods
	internal static uint ComputeStringHash(string s); // 0x008EADC4-0x008EAE54
}

namespace System.Configuration
{
	public interface IConfigurationSectionHandler // TypeDefIndex: 1708
	{
	}
}

namespace System.Net.Configuration
{
	public sealed class BypassElement : ConfigurationElement // TypeDefIndex: 1709
	{
	}

	[ConfigurationCollection] // 0x003A0BDC-0x003A0C64
	[DefaultMember] // 0x003A0BDC-0x003A0C64
	public sealed class BypassElementCollection : ConfigurationElementCollection // TypeDefIndex: 1710
	{
		// Constructors
		public BypassElementCollection(); // 0x009043F8-0x0090447C
	}

	public sealed class ConnectionManagementElement : ConfigurationElement // TypeDefIndex: 1711
	{
	}

	[ConfigurationCollection] // 0x003A0C64-0x003A0CEC
	[DefaultMember] // 0x003A0C64-0x003A0CEC
	public sealed class ConnectionManagementElementCollection : ConfigurationElementCollection // TypeDefIndex: 1712
	{
		// Constructors
		public ConnectionManagementElementCollection(); // 0x0090447C-0x00904500
	}

	public sealed class ConnectionManagementSection : ConfigurationSection // TypeDefIndex: 1713
	{
		// Constructors
		public ConnectionManagementSection(); // 0x00904500-0x00904584
	}

	public sealed class DefaultProxySection : ConfigurationSection // TypeDefIndex: 1714
	{
		// Constructors
		public DefaultProxySection(); // 0x00904584-0x00904608
	}

	public sealed class ProxyElement : ConfigurationElement // TypeDefIndex: 1715
	{
		// Constructors
		public ProxyElement(); // 0x00904818-0x0090489C
	}

	public sealed class HttpWebRequestElement : ConfigurationElement // TypeDefIndex: 1716
	{
		// Constructors
		public HttpWebRequestElement(); // 0x00904608-0x0090468C
	}

	public sealed class Ipv6Element : ConfigurationElement // TypeDefIndex: 1717
	{
		// Constructors
		public Ipv6Element(); // 0x0090468C-0x00904710
	}

	public sealed class NetSectionGroup : ConfigurationSectionGroup // TypeDefIndex: 1718
	{
		// Constructors
		public NetSectionGroup(); // 0x00904710-0x00904794
	}

	public sealed class SettingsSection : ConfigurationSection // TypeDefIndex: 1719
	{
		// Constructors
		public SettingsSection(); // 0x00904920-0x009049A4
	}

	public sealed class PerformanceCountersElement : ConfigurationElement // TypeDefIndex: 1720
	{
		// Constructors
		public PerformanceCountersElement(); // 0x00904794-0x00904818
	}

	public sealed class ServicePointManagerElement : ConfigurationElement // TypeDefIndex: 1721
	{
		// Constructors
		public ServicePointManagerElement(); // 0x0090489C-0x00904920
	}

	public sealed class SocketElement : ConfigurationElement // TypeDefIndex: 1722
	{
		// Constructors
		public SocketElement(); // 0x00904AA0-0x00904B24
	}

	public sealed class WebProxyScriptElement : ConfigurationElement // TypeDefIndex: 1723
	{
		// Constructors
		public WebProxyScriptElement(); // 0x00904B24-0x00904BA8
	}

	public sealed class WebRequestModulesSection : ConfigurationSection // TypeDefIndex: 1724
	{
		// Constructors
		public WebRequestModulesSection(); // 0x007602AC-0x00760330
	}

	[ConfigurationCollection] // 0x003A0CEC-0x003A0D74
	[DefaultMember] // 0x003A0CEC-0x003A0D74
	public sealed class WebRequestModuleElementCollection : ConfigurationElementCollection // TypeDefIndex: 1725
	{
		// Constructors
		public WebRequestModuleElementCollection(); // 0x00760228-0x007602AC
	}

	public sealed class WebRequestModuleElement : ConfigurationElement // TypeDefIndex: 1726
	{
	}
}

namespace System.Diagnostics
{
	[Obsolete] // 0x003A0D74-0x003A0DAC
	public class DiagnosticsConfigurationHandler : IConfigurationSectionHandler // TypeDefIndex: 1727
	{
		// Constructors
		public DiagnosticsConfigurationHandler(); // 0x008FF958-0x008FF9DC
	
		// Methods
		public virtual object Create(object parent, object configContext, XmlNode section); // 0x008FF9DC-0x008FFA64
	}
}

namespace Unity
{
	internal sealed class ThrowStub : ObjectDisposedException // TypeDefIndex: 1728
	{
		// Methods
		public static void ThrowNotSupportedException(); // 0x00C7F59C-0x00C7F604
	}
}

namespace System.Configuration
{
	public abstract class ConfigurationSection : ConfigurationElement // TypeDefIndex: 1730
	{
	}

	[DefaultMember] // 0x003A169C-0x003A16D4
	public abstract class ConfigurationElement // TypeDefIndex: 1731
	{
	}

	[DebuggerDisplay] // 0x003A16D4-0x003A170C
	public abstract class ConfigurationElementCollection : ConfigurationElement, ICollection // TypeDefIndex: 1732
	{
		// Properties
		public int Count { get; } // 0x00CAD474-0x00CAD4FC 
		public bool IsSynchronized { get; } // 0x00CAD4FC-0x00CAD584 
		public object SyncRoot { get; } // 0x00CAD584-0x00CAD60C 
	
		// Methods
		public IEnumerator GetEnumerator(); // 0x00CAD60C-0x00CAD694
		void ICollection.CopyTo(Array arr, int index); // 0x00CAD694-0x00CAD718
	}

	[AttributeUsage] // 0x003A170C-0x003A1720
	public sealed class ConfigurationCollectionAttribute : Attribute // TypeDefIndex: 1733
	{
		// Constructors
		public ConfigurationCollectionAttribute(Type itemType); // 0x00CAD3F0-0x00CAD474
	}

	public class ConfigurationSectionGroup // TypeDefIndex: 1734
	{
	}

	public sealed class IgnoreSection : ConfigurationSection // TypeDefIndex: 1735
	{
		// Constructors
		public IgnoreSection(); // 0x00CAD718-0x00CAD79C
	}
}

namespace Unity
{
	internal sealed class ThrowStub : ObjectDisposedException // TypeDefIndex: 1736
	{
		// Methods
		public static void ThrowNotSupportedException(); // 0x00CAD79C-0x00CAD804
	}
}

namespace System.Xml
{
	internal sealed class XmlChildEnumerator : IEnumerator // TypeDefIndex: 1738
	{
		// Fields
		internal XmlNode container; // 0x10
		internal XmlNode child; // 0x18
		internal bool isFirst; // 0x20
	
		// Properties
		object IEnumerator.Current { get; } // 0x00CAE0F4-0x00CAE0F8 
		internal XmlNode Current { get; } // 0x00CAE0F8-0x00CAE190 
	
		// Constructors
		internal XmlChildEnumerator(XmlNode container); // 0x00CADFE4-0x00CAE038
	
		// Methods
		bool IEnumerator.MoveNext(); // 0x00CAE038-0x00CAE03C
		internal bool MoveNext(); // 0x00CAE03C-0x00CAE0AC
		void IEnumerator.Reset(); // 0x00CAE0AC-0x00CAE0F4
	}

	public abstract class XmlLinkedNode : XmlNode // TypeDefIndex: 1739
	{
		// Fields
		internal XmlLinkedNode next; // 0x18
	
		// Properties
		public override XmlNode NextSibling { get; } // 0x00CAE190-0x00CAE1E0 
	}

	[DebuggerDisplay] // 0x003A1984-0x003A19E4
	[DefaultMember] // 0x003A1984-0x003A19E4
	public abstract class XmlNode : ICloneable, IEnumerable, IXPathNavigable // TypeDefIndex: 1740
	{
		// Fields
		internal XmlNode parentNode; // 0x10
	
		// Properties
		public abstract XmlNodeType NodeType { get; }
		public virtual XmlNode ParentNode { get; } // 0x00CAE1E0-0x00CAE2EC 
		public virtual XmlNode NextSibling { get; } // 0x00CAE2EC-0x00CAE2F4 
		public virtual XmlNode FirstChild { get; } // 0x00CAE2F4-0x00CAE318 
		internal virtual XmlLinkedNode LastNode { get; } // 0x00CAE318-0x00CAE320 
	
		// Methods
		public abstract XmlNode CloneNode(bool deep);
		object ICloneable.Clone(); // 0x00CAE320-0x00CAE330
		IEnumerator IEnumerable.GetEnumerator(); // 0x00CAE330-0x00CB1AC8
	}

	public enum XmlNodeType // TypeDefIndex: 1741
	{
		None = 0,
		Element = 1,
		Attribute = 2,
		Text = 3,
		CDATA = 4,
		EntityReference = 5,
		Entity = 6,
		ProcessingInstruction = 7,
		Comment = 8,
		Document = 9,
		DocumentType = 10,
		DocumentFragment = 11,
		Notation = 12,
		Whitespace = 13,
		SignificantWhitespace = 14,
		EndElement = 15,
		EndEntity = 16,
		XmlDeclaration = 17
	}

	internal static class Res // TypeDefIndex: 1742
	{
		// Methods
		public static string GetString(string name); // 0x00CADFE0-0x00CADFE4
	}
}

namespace System.Xml.XPath
{
	public interface IXPathNavigable // TypeDefIndex: 1743
	{
	}
}

namespace System.Linq
{
	internal static class Error // TypeDefIndex: 1745
	{
		// Methods
		internal static Exception ArgumentNull(string s); // 0x00CCCC60-0x00CCCCC4
		internal static Exception MoreThanOneMatch(); // 0x00CCCCC4-0x00CCCD2C
		internal static Exception NoElements(); // 0x00CCCD2C-0x00CD1154
	}

	public static class Enumerable // TypeDefIndex: 1746
	{
		// Nested types
		private abstract class Iterator<TSource> : IEnumerable<TSource>, IEnumerator<TSource> // TypeDefIndex: 1747
		{
			// Fields
			private int threadId;
			internal int state;
			internal TSource current;
	
			// Properties
			public TSource Current { get; }
			object IEnumerator.Current { get; }
	
			// Constructors
			public Iterator();
	
			// Methods
			public abstract Iterator<TSource> Clone();
			public virtual void Dispose();
			public IEnumerator<TSource> GetEnumerator();
			public abstract bool MoveNext();
			public abstract IEnumerable<TResult> Select<TResult>(Func<TSource, TResult> selector);
			public abstract IEnumerable<TSource> Where(Func<TSource, bool> predicate);
			IEnumerator IEnumerable.GetEnumerator();
			void IEnumerator.Reset();
		}
	
		private class WhereEnumerableIterator<TSource> : Iterator<TSource> // TypeDefIndex: 1748
		{
			// Fields
			private IEnumerable<TSource> source;
			private Func<TSource, bool> predicate;
			private IEnumerator<TSource> enumerator;
	
			// Constructors
			public WhereEnumerableIterator(IEnumerable<TSource> source, Func<TSource, bool> predicate);
	
			// Methods
			public override Iterator<TSource> Clone();
			public override void Dispose();
			public override bool MoveNext();
			public override IEnumerable<TResult> Select<TResult>(Func<TSource, TResult> selector);
			public override IEnumerable<TSource> Where(Func<TSource, bool> predicate);
		}
	
		private class WhereArrayIterator<TSource> : Iterator<TSource> // TypeDefIndex: 1749
		{
			// Fields
			private TSource[] source;
			private Func<TSource, bool> predicate;
			private int index;
	
			// Constructors
			public WhereArrayIterator(TSource[] source, Func<TSource, bool> predicate);
	
			// Methods
			public override Iterator<TSource> Clone();
			public override bool MoveNext();
			public override IEnumerable<TResult> Select<TResult>(Func<TSource, TResult> selector);
			public override IEnumerable<TSource> Where(Func<TSource, bool> predicate);
		}
	
		private class WhereListIterator<TSource> : Iterator<TSource> // TypeDefIndex: 1750
		{
			// Fields
			private List<TSource> source;
			private Func<TSource, bool> predicate;
			private List<TSource> enumerator;
	
			// Constructors
			public WhereListIterator(List<TSource> source, Func<TSource, bool> predicate);
	
			// Methods
			public override Iterator<TSource> Clone();
			public override bool MoveNext();
			public override IEnumerable<TResult> Select<TResult>(Func<TSource, TResult> selector);
			public override IEnumerable<TSource> Where(Func<TSource, bool> predicate);
		}
	
		private class WhereSelectEnumerableIterator<TSource, TResult> : Iterator<TResult> // TypeDefIndex: 1751
		{
			// Fields
			private IEnumerable<TSource> source;
			private Func<TSource, bool> predicate;
			private Func<TSource, TResult> selector;
			private IEnumerator<TSource> enumerator;
	
			// Constructors
			public WhereSelectEnumerableIterator(IEnumerable<TSource> source, Func<TSource, bool> predicate, Func<TSource, TResult> selector);
	
			// Methods
			public override Iterator<TResult> Clone();
			public override void Dispose();
			public override bool MoveNext();
			public override IEnumerable<TResult2> Select<TResult2>(Func<TResult, TResult2> selector);
			public override IEnumerable<TResult> Where(Func<TResult, bool> predicate);
		}
	
		private class WhereSelectArrayIterator<TSource, TResult> : Iterator<TResult> // TypeDefIndex: 1752
		{
			// Fields
			private TSource[] source;
			private Func<TSource, bool> predicate;
			private Func<TSource, TResult> selector;
			private int index;
	
			// Constructors
			public WhereSelectArrayIterator(TSource[] source, Func<TSource, bool> predicate, Func<TSource, TResult> selector);
	
			// Methods
			public override Iterator<TResult> Clone();
			public override bool MoveNext();
			public override IEnumerable<TResult2> Select<TResult2>(Func<TResult, TResult2> selector);
			public override IEnumerable<TResult> Where(Func<TResult, bool> predicate);
		}
	
		private class WhereSelectListIterator<TSource, TResult> : Iterator<TResult> // TypeDefIndex: 1753
		{
			// Fields
			private List<TSource> source;
			private Func<TSource, bool> predicate;
			private Func<TSource, TResult> selector;
			private List<TSource> enumerator;
	
			// Constructors
			public WhereSelectListIterator(List<TSource> source, Func<TSource, bool> predicate, Func<TSource, TResult> selector);
	
			// Methods
			public override Iterator<TResult> Clone();
			public override bool MoveNext();
			public override IEnumerable<TResult2> Select<TResult2>(Func<TResult, TResult2> selector);
			public override IEnumerable<TResult> Where(Func<TResult, bool> predicate);
		}
	
		[CompilerGenerated] // 0x003A1CF8-0x003A1D08
		private sealed class <SelectIterator>d__5<TSource, TResult> : IEnumerable<TResult>, IEnumerator<TResult> // TypeDefIndex: 1754
		{
			// Fields
			private int <>1__state;
			private TResult <>2__current;
			private int <>l__initialThreadId;
			private IEnumerable<TSource> source;
			public IEnumerable<TSource> <>3__source;
			private int <index>5__1;
			private Func<TSource, int, TResult> selector;
			public Func<TSource, int, TResult> <>3__selector;
			private IEnumerator<TSource> <>7__wrap1;
	
			// Properties
			TResult IEnumerator<TResult>.Current { [DebuggerHidden] /* 0x003A200C-0x003A201C */ get; }
			object IEnumerator.Current { [DebuggerHidden] /* 0x003A202C-0x003A203C */ get; }
	
			// Constructors
			[DebuggerHidden] // 0x003A1FEC-0x003A1FFC
			public <SelectIterator>d__5(int <>1__state);
	
			// Methods
			[DebuggerHidden] // 0x003A1FFC-0x003A200C
			void IDisposable.Dispose();
			private bool MoveNext();
			private void <>m__Finally1();
			[DebuggerHidden] // 0x003A201C-0x003A202C
			void IEnumerator.Reset();
			[DebuggerHidden] // 0x003A203C-0x003A204C
			IEnumerator<TResult> IEnumerable<TResult>.GetEnumerator();
			[DebuggerHidden] // 0x003A204C-0x003A205C
			IEnumerator IEnumerable.GetEnumerator();
		}
	
		[CompilerGenerated] // 0x003A1D08-0x003A1D18
		private sealed class <>c__DisplayClass6_0<TSource> // TypeDefIndex: 1755
		{
			// Fields
			public Func<TSource, bool> predicate1;
			public Func<TSource, bool> predicate2;
	
			// Constructors
			public <>c__DisplayClass6_0();
	
			// Methods
			internal bool <CombinePredicates>b__0(TSource x);
		}
	
		[CompilerGenerated] // 0x003A1D18-0x003A1D28
		private sealed class <>c__DisplayClass7_0<TSource, TMiddle, TResult> // TypeDefIndex: 1756
		{
			// Fields
			public Func<TMiddle, TResult> selector2;
			public Func<TSource, TMiddle> selector1;
	
			// Constructors
			public <>c__DisplayClass7_0();
	
			// Methods
			internal TResult <CombineSelectors>b__0(TSource x);
		}
	
		[CompilerGenerated] // 0x003A1D28-0x003A1D38
		private sealed class <OfTypeIterator>d__97<TResult> : IEnumerable<TResult>, IEnumerator<TResult> // TypeDefIndex: 1757
		{
			// Fields
			private int <>1__state;
			private TResult <>2__current;
			private int <>l__initialThreadId;
			private IEnumerable source;
			public IEnumerable <>3__source;
			private IEnumerator <>7__wrap1;
	
			// Properties
			TResult IEnumerator<TResult>.Current { [DebuggerHidden] /* 0x003A207C-0x003A208C */ get; }
			object IEnumerator.Current { [DebuggerHidden] /* 0x003A209C-0x003A20AC */ get; }
	
			// Constructors
			[DebuggerHidden] // 0x003A205C-0x003A206C
			public <OfTypeIterator>d__97(int <>1__state);
	
			// Methods
			[DebuggerHidden] // 0x003A206C-0x003A207C
			void IDisposable.Dispose();
			private bool MoveNext();
			private void <>m__Finally1();
			[DebuggerHidden] // 0x003A208C-0x003A209C
			void IEnumerator.Reset();
			[DebuggerHidden] // 0x003A20AC-0x003A20BC
			IEnumerator<TResult> IEnumerable<TResult>.GetEnumerator();
			[DebuggerHidden] // 0x003A20BC-0x003A20CC
			IEnumerator IEnumerable.GetEnumerator();
		}
	
		[CompilerGenerated] // 0x003A1D38-0x003A1D48
		private sealed class <CastIterator>d__99<TResult> : IEnumerable<TResult>, IEnumerator<TResult> // TypeDefIndex: 1758
		{
			// Fields
			private int <>1__state;
			private TResult <>2__current;
			private int <>l__initialThreadId;
			private IEnumerable source;
			public IEnumerable <>3__source;
			private IEnumerator <>7__wrap1;
	
			// Properties
			TResult IEnumerator<TResult>.Current { [DebuggerHidden] /* 0x003A20EC-0x003A20FC */ get; }
			object IEnumerator.Current { [DebuggerHidden] /* 0x003A210C-0x003A211C */ get; }
	
			// Constructors
			[DebuggerHidden] // 0x003A20CC-0x003A20DC
			public <CastIterator>d__99(int <>1__state);
	
			// Methods
			[DebuggerHidden] // 0x003A20DC-0x003A20EC
			void IDisposable.Dispose();
			private bool MoveNext();
			private void <>m__Finally1();
			[DebuggerHidden] // 0x003A20FC-0x003A210C
			void IEnumerator.Reset();
			[DebuggerHidden] // 0x003A211C-0x003A212C
			IEnumerator<TResult> IEnumerable<TResult>.GetEnumerator();
			[DebuggerHidden] // 0x003A212C-0x003A213C
			IEnumerator IEnumerable.GetEnumerator();
		}
	
		// Methods
		[IteratorStateMachine] // 0x003A1E00-0x003A1E64
		private static IEnumerable<TResult> SelectIterator<TSource, TResult>(IEnumerable<TSource> source, Func<TSource, int, TResult> selector);
		private static Func<TSource, bool> CombinePredicates<TSource>(Func<TSource, bool> predicate1, Func<TSource, bool> predicate2);
		private static Func<TSource, TResult> CombineSelectors<TSource, TMiddle, TResult>(Func<TSource, TMiddle> selector1, Func<TMiddle, TResult> selector2);
		[IteratorStateMachine] // 0x003A1E94-0x003A1EF8
		private static IEnumerable<TResult> OfTypeIterator<TResult>(IEnumerable source);
		[IteratorStateMachine] // 0x003A1F08-0x003A1F6C
		private static IEnumerable<TResult> CastIterator<TResult>(IEnumerable source);
		public static IEnumerable<TResult> Empty<TResult>();
	
		// Extension methods
		public static IEnumerable<TSource> Where<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate);
		public static IEnumerable<TResult> Select<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult> selector);
		public static IEnumerable<TResult> Select<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, int, TResult> selector);
		public static TSource[] ToArray<TSource>(this IEnumerable<TSource> source);
		public static List<TSource> ToList<TSource>(this IEnumerable<TSource> source);
		public static IEnumerable<TResult> OfType<TResult>(this IEnumerable source);
		public static IEnumerable<TResult> Cast<TResult>(this IEnumerable source);
		public static TSource First<TSource>(this IEnumerable<TSource> source);
		public static TSource FirstOrDefault<TSource>(this IEnumerable<TSource> source);
		public static TSource FirstOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate);
		public static TSource SingleOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate);
		public static bool Any<TSource>(this IEnumerable<TSource> source);
		public static bool Any<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate);
		public static bool All<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate);
		public static int Count<TSource>(this IEnumerable<TSource> source);
	}

	internal class EmptyEnumerable<TElement> // TypeDefIndex: 1759
	{
		// Fields
		public static readonly TElement[] Instance;
	
		// Constructors
		static EmptyEnumerable();
	}

	internal struct Buffer<TElement> // TypeDefIndex: 1760
	{
		// Fields
		internal TElement[] items;
		internal int count;
	
		// Constructors
		internal Buffer(IEnumerable<TElement> source);
	
		// Methods
		internal TElement[] ToArray();
	}
}

namespace System.Collections.Generic
{
	[Serializable]
	[DebuggerDisplay] // 0x003A1D48-0x003A1DD0
	[DebuggerTypeProxy] // 0x003A1D48-0x003A1DD0
	public class HashSet<T> : ISet<T>, IReadOnlyCollection<T>, ISerializable, IDeserializationCallback // TypeDefIndex: 1761
	{
		// Fields
		private const int Lower31BitMask = 2147483647; // Metadata: 0x00219CD7
		private const int StackAllocThreshold = 100; // Metadata: 0x00219CDB
		private const int ShrinkThreshold = 3; // Metadata: 0x00219CDF
		private const string CapacityName = "Capacity"; // Metadata: 0x00219CE3
		private const string ElementsName = "Elements"; // Metadata: 0x00219CEF
		private const string ComparerName = "Comparer"; // Metadata: 0x00219CFB
		private const string VersionName = "Version"; // Metadata: 0x00219D07
		private int[] _buckets;
		private Slot[] _slots;
		private int _count;
		private int _lastIndex;
		private int _freeList;
		private IEqualityComparer<T> _comparer;
		private int _version;
		private SerializationInfo _siInfo;
	
		// Properties
		public int Count { get; }
		bool ICollection<T>.IsReadOnly { get; }
		public IEqualityComparer<T> Comparer { get; }
	
		// Nested types
		internal struct Slot // TypeDefIndex: 1762
		{
			// Fields
			internal int hashCode;
			internal int next;
			internal T value;
		}
	
		[Serializable]
		public struct Enumerator : IEnumerator<T> // TypeDefIndex: 1763
		{
			// Fields
			private HashSet<T> _set;
			private int _index;
			private int _version;
			private T _current;
	
			// Properties
			public T Current { get; }
			object IEnumerator.Current { get; }
	
			// Constructors
			internal Enumerator(HashSet<T> set);
	
			// Methods
			public void Dispose();
			public bool MoveNext();
			void IEnumerator.Reset();
		}
	
		// Constructors
		public HashSet();
		public HashSet(IEqualityComparer<T> comparer);
		public HashSet(IEnumerable<T> collection);
		public HashSet(IEnumerable<T> collection, IEqualityComparer<T> comparer);
		protected HashSet(SerializationInfo info, StreamingContext context);
	
		// Methods
		private void CopyFrom(HashSet<T> source);
		void ICollection<T>.Add(T item);
		public void Clear();
		public bool Contains(T item);
		public void CopyTo(T[] array, int arrayIndex);
		public bool Remove(T item);
		public Enumerator GetEnumerator();
		IEnumerator<T> IEnumerable<T>.GetEnumerator();
		IEnumerator IEnumerable.GetEnumerator();
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
		public virtual void OnDeserialization(object sender);
		public bool Add(T item);
		public void UnionWith(IEnumerable<T> other);
		public void CopyTo(T[] array);
		public void CopyTo(T[] array, int arrayIndex, int count);
		public void TrimExcess();
		private void Initialize(int capacity);
		private void IncreaseCapacity();
		private void SetCapacity(int newSize);
		private bool AddIfNotPresent(T value);
		private void AddValue(int index, int hashCode, T value);
		private static bool AreEqualityComparersEqual(HashSet<T> set1, HashSet<T> set2);
		private int InternalGetHashCode(T item);
	}

	internal sealed class ICollectionDebugView<T> // TypeDefIndex: 1764
	{
	}
}

namespace UnityEngine.Scripting
{
	[AttributeUsage] // 0x003A237C-0x003A23CC
	[VisibleToOtherModules] // 0x003A237C-0x003A23CC
	internal class UsedByNativeCodeAttribute : Attribute // TypeDefIndex: 1766
	{
		// Fields
		[CompilerGenerated] // 0x003A2990-0x003A29CC
		[DebuggerBrowsable] // 0x003A2990-0x003A29CC
		private string <Name>k__BackingField; // 0x10
	
		// Properties
		public string Name { [CompilerGenerated] /* 0x003A2FA8-0x003A2FB8 */ set; } // 0x00C9375C-0x00C93764
	
		// Constructors
		public UsedByNativeCodeAttribute(); // 0x00C93728-0x00C93730
		public UsedByNativeCodeAttribute(string name); // 0x00C93730-0x00C9375C
	}

	[AttributeUsage] // 0x003A23CC-0x003A241C
	[VisibleToOtherModules] // 0x003A23CC-0x003A241C
	internal class RequiredByNativeCodeAttribute : Attribute // TypeDefIndex: 1767
	{
		// Fields
		[CompilerGenerated] // 0x003A29CC-0x003A2A08
		[DebuggerBrowsable] // 0x003A29CC-0x003A2A08
		private string <Name>k__BackingField; // 0x10
		[CompilerGenerated] // 0x003A2A08-0x003A2A44
		[DebuggerBrowsable] // 0x003A2A08-0x003A2A44
		private bool <Optional>k__BackingField; // 0x18
		[CompilerGenerated] // 0x003A2A44-0x003A2A80
		[DebuggerBrowsable] // 0x003A2A44-0x003A2A80
		private bool <GenerateProxy>k__BackingField; // 0x19
	
		// Properties
		public string Name { [CompilerGenerated] /* 0x003A2FB8-0x003A2FC8 */ set; } // 0x00C93708-0x00C93710
		public bool Optional { [CompilerGenerated] /* 0x003A2FC8-0x003A2FD8 */ set; } // 0x00C93710-0x00C9371C
		public bool GenerateProxy { [CompilerGenerated] /* 0x003A2FD8-0x003A2FE8 */ set; } // 0x00C9371C-0x00C93728
	
		// Constructors
		public RequiredByNativeCodeAttribute(); // 0x00C936D4-0x00C936DC
		public RequiredByNativeCodeAttribute(string name); // 0x00C936DC-0x00C93708
	}

	[VisibleToOtherModules] // 0x003A241C-0x003A242C
	internal class GeneratedByOldBindingsGeneratorAttribute : Attribute // TypeDefIndex: 1768
	{
		// Constructors
		public GeneratedByOldBindingsGeneratorAttribute(); // 0x00C936CC-0x00C936D4
	}
}

namespace UnityEngine
{
	[AttributeUsage] // 0x003A242C-0x003A247C
	[VisibleToOtherModules] // 0x003A242C-0x003A247C
	internal sealed class AssetFileNameExtensionAttribute : Attribute // TypeDefIndex: 1769
	{
		// Fields
		[CompilerGenerated] // 0x003A2A80-0x003A2ABC
		[DebuggerBrowsable] // 0x003A2A80-0x003A2ABC
		private readonly string <preferredExtension>k__BackingField; // 0x10
		[CompilerGenerated] // 0x003A2ABC-0x003A2AF8
		[DebuggerBrowsable] // 0x003A2ABC-0x003A2AF8
		private readonly IEnumerable<string> <otherExtensions>k__BackingField; // 0x18
	
		// Constructors
		public AssetFileNameExtensionAttribute(string preferredExtension, params /* 0x003A3138-0x003A3148 */ string[] otherExtensions); // 0x00C92DAC-0x00C92DE4
	}

	[VisibleToOtherModules] // 0x003A247C-0x003A248C
	internal class ThreadAndSerializationSafeAttribute : Attribute // TypeDefIndex: 1770
	{
		// Constructors
		public ThreadAndSerializationSafeAttribute(); // 0x00C93764-0x00C9376C
	}

	[AttributeUsage] // 0x003A248C-0x003A24DC
	[VisibleToOtherModules] // 0x003A248C-0x003A24DC
	internal class WritableAttribute : Attribute // TypeDefIndex: 1771
	{
		// Constructors
		public WritableAttribute(); // 0x00C9377C-0x00C94E40
	}

	[AttributeUsage] // 0x003A24DC-0x003A2518
	[VisibleToOtherModules] // 0x003A24DC-0x003A2518
	internal class UnityEngineModuleAssembly : Attribute // TypeDefIndex: 1772
	{
		// Constructors
		public UnityEngineModuleAssembly(); // 0x00C9376C-0x00C93774
	}

	[AttributeUsage] // 0x003A2518-0x003A2568
	[VisibleToOtherModules] // 0x003A2518-0x003A2568
	internal sealed class NativeClassAttribute : Attribute // TypeDefIndex: 1773
	{
		// Fields
		[CompilerGenerated] // 0x003A2AF8-0x003A2B34
		[DebuggerBrowsable] // 0x003A2AF8-0x003A2B34
		private string <QualifiedNativeName>k__BackingField; // 0x10
		[CompilerGenerated] // 0x003A2B34-0x003A2B70
		[DebuggerBrowsable] // 0x003A2B34-0x003A2B70
		private string <Declaration>k__BackingField; // 0x18
	
		// Properties
		private string QualifiedNativeName { [CompilerGenerated] /* 0x003A2FE8-0x003A2FF8 */ set; } // 0x00C93684-0x00C9368C
		private string Declaration { [CompilerGenerated] /* 0x003A2FF8-0x003A3008 */ set; } // 0x00C9368C-0x00C93694
	
		// Constructors
		public NativeClassAttribute(string qualifiedCppName); // 0x00C9360C-0x00C93684
		public NativeClassAttribute(string qualifiedCppName, string declaration); // 0x00C93694-0x00C936CC
	}
}

namespace UnityEngine.Bindings
{
	[AttributeUsage] // 0x003A2568-0x003A25B8
	[VisibleToOtherModules] // 0x003A2568-0x003A25B8
	internal class VisibleToOtherModulesAttribute : Attribute // TypeDefIndex: 1774
	{
		// Constructors
		public VisibleToOtherModulesAttribute(); // 0x00C935FC-0x00C93604
		public VisibleToOtherModulesAttribute(params /* 0x003A3148-0x003A3158 */ string[] modules); // 0x00C93604-0x00C9360C
	}

	internal interface IBindingsAttribute // TypeDefIndex: 1775
	{
	}

	internal interface IBindingsNameProviderAttribute : IBindingsAttribute // TypeDefIndex: 1776
	{
	}

	internal interface IBindingsHeaderProviderAttribute : IBindingsAttribute // TypeDefIndex: 1777
	{
	}

	internal interface IBindingsIsThreadSafeProviderAttribute : IBindingsAttribute // TypeDefIndex: 1778
	{
	}

	internal interface IBindingsIsFreeFunctionProviderAttribute : IBindingsAttribute // TypeDefIndex: 1779
	{
	}

	internal interface IBindingsThrowsProviderAttribute : IBindingsAttribute // TypeDefIndex: 1780
	{
	}

	internal interface IBindingsGenerateMarshallingTypeAttribute : IBindingsAttribute // TypeDefIndex: 1781
	{
	}

	internal interface IBindingsWritableSelfProviderAttribute : IBindingsAttribute // TypeDefIndex: 1782
	{
	}

	[AttributeUsage] // 0x003A25B8-0x003A25F4
	[VisibleToOtherModules] // 0x003A25B8-0x003A25F4
	internal class NativeConditionalAttribute : Attribute, IBindingsAttribute // TypeDefIndex: 1783
	{
		// Fields
		[CompilerGenerated] // 0x003A2B70-0x003A2BAC
		[DebuggerBrowsable] // 0x003A2B70-0x003A2BAC
		private string <Condition>k__BackingField; // 0x10
		[CompilerGenerated] // 0x003A2BAC-0x003A2BE8
		[DebuggerBrowsable] // 0x003A2BAC-0x003A2BE8
		private bool <Enabled>k__BackingField; // 0x18
	
		// Properties
		public string Condition { [CompilerGenerated] /* 0x003A3008-0x003A3018 */ set; } // 0x00C92F3C-0x00C92F44
		public bool Enabled { [CompilerGenerated] /* 0x003A3018-0x003A3028 */ set; } // 0x00C92F44-0x00C92F50
	
		// Constructors
		public NativeConditionalAttribute(string condition); // 0x00C92F08-0x00C92F3C
		public NativeConditionalAttribute(string condition, bool enabled); // 0x00C92F50-0x00C92F90
	}

	[AttributeUsage] // 0x003A25F4-0x003A2644
	[VisibleToOtherModules] // 0x003A25F4-0x003A2644
	internal class NativeHeaderAttribute : Attribute, IBindingsHeaderProviderAttribute // TypeDefIndex: 1784
	{
		// Fields
		[CompilerGenerated] // 0x003A2BE8-0x003A2C24
		[DebuggerBrowsable] // 0x003A2BE8-0x003A2C24
		private string <Header>k__BackingField; // 0x10
	
		// Properties
		public string Header { [CompilerGenerated] /* 0x003A3028-0x003A3038 */ set; } // 0x00C93088-0x00C93090
	
		// Constructors
		public NativeHeaderAttribute(string header); // 0x00C92F90-0x00C93088
	}

	[AttributeUsage] // 0x003A2644-0x003A2680
	[VisibleToOtherModules] // 0x003A2644-0x003A2680
	internal class NativeNameAttribute : Attribute, IBindingsNameProviderAttribute // TypeDefIndex: 1785
	{
		// Fields
		[CompilerGenerated] // 0x003A2C24-0x003A2C60
		[DebuggerBrowsable] // 0x003A2C24-0x003A2C60
		private string <Name>k__BackingField; // 0x10
	
		// Properties
		public string Name { [CompilerGenerated] /* 0x003A3038-0x003A3048 */ set; } // 0x00C932B4-0x00C932BC
	
		// Constructors
		public NativeNameAttribute(); // 0x00C931B4-0x00C931BC
		public NativeNameAttribute(string name); // 0x00C931BC-0x00C932B4
	}

	[AttributeUsage] // 0x003A2680-0x003A26BC
	[VisibleToOtherModules] // 0x003A2680-0x003A26BC
	internal sealed class NativeWritableSelfAttribute : Attribute, IBindingsWritableSelfProviderAttribute // TypeDefIndex: 1786
	{
		// Fields
		[CompilerGenerated] // 0x003A2C60-0x003A2C9C
		[DebuggerBrowsable] // 0x003A2C60-0x003A2C9C
		private bool <WritableSelf>k__BackingField; // 0x10
	
		// Properties
		public bool WritableSelf { [CompilerGenerated] /* 0x003A3048-0x003A3058 */ set; } // 0x00C9353C-0x00C93548
	
		// Constructors
		public NativeWritableSelfAttribute(); // 0x00C93510-0x00C9353C
	}

	[AttributeUsage] // 0x003A26BC-0x003A26F8
	[VisibleToOtherModules] // 0x003A26BC-0x003A26F8
	internal class NativeMethodAttribute : Attribute, IBindingsNameProviderAttribute, IBindingsIsThreadSafeProviderAttribute, IBindingsIsFreeFunctionProviderAttribute, IBindingsThrowsProviderAttribute // TypeDefIndex: 1787
	{
		// Fields
		[CompilerGenerated] // 0x003A2C9C-0x003A2CD8
		[DebuggerBrowsable] // 0x003A2C9C-0x003A2CD8
		private string <Name>k__BackingField; // 0x10
		[CompilerGenerated] // 0x003A2CD8-0x003A2D14
		[DebuggerBrowsable] // 0x003A2CD8-0x003A2D14
		private bool <IsThreadSafe>k__BackingField; // 0x18
		[CompilerGenerated] // 0x003A2D14-0x003A2D50
		[DebuggerBrowsable] // 0x003A2D14-0x003A2D50
		private bool <IsFreeFunction>k__BackingField; // 0x19
		[CompilerGenerated] // 0x003A2D50-0x003A2D8C
		[DebuggerBrowsable] // 0x003A2D50-0x003A2D8C
		private bool <ThrowsException>k__BackingField; // 0x1A
		[CompilerGenerated] // 0x003A2D8C-0x003A2DC8
		[DebuggerBrowsable] // 0x003A2D8C-0x003A2DC8
		private bool <HasExplicitThis>k__BackingField; // 0x1B
	
		// Properties
		public string Name { [CompilerGenerated] /* 0x003A3058-0x003A3068 */ set; } // 0x00C93188-0x00C93190
		public bool IsThreadSafe { [CompilerGenerated] /* 0x003A3068-0x003A3078 */ set; } // 0x00C93190-0x00C9319C
		public bool IsFreeFunction { [CompilerGenerated] /* 0x003A3078-0x003A3088 */ set; } // 0x00C92E18-0x00C92E24
		public bool ThrowsException { [CompilerGenerated] /* 0x003A3088-0x003A3098 */ set; } // 0x00C9319C-0x00C931A8
		public bool HasExplicitThis { [CompilerGenerated] /* 0x003A3098-0x003A30A8 */ set; } // 0x00C931A8-0x00C931B4
	
		// Constructors
		public NativeMethodAttribute(); // 0x00C92E10-0x00C92E18
		public NativeMethodAttribute(string name); // 0x00C93090-0x00C93188
		public NativeMethodAttribute(string name, bool isFreeFunction); // 0x00C92E4C-0x00C92E78
		public NativeMethodAttribute(string name, bool isFreeFunction, bool isThreadSafe); // 0x00C92EAC-0x00C92EEC
	}

	[VisibleToOtherModules] // 0x003A26F8-0x003A2708
	internal enum TargetType // TypeDefIndex: 1788
	{
		Function = 0,
		Field = 1
	}

	[AttributeUsage] // 0x003A2708-0x003A2744
	[VisibleToOtherModules] // 0x003A2708-0x003A2744
	internal class NativePropertyAttribute : NativeMethodAttribute // TypeDefIndex: 1789
	{
		// Fields
		[CompilerGenerated] // 0x003A2DC8-0x003A2E04
		[DebuggerBrowsable] // 0x003A2DC8-0x003A2E04
		private TargetType <TargetType>k__BackingField; // 0x1C
	
		// Properties
		public TargetType TargetType { [CompilerGenerated] /* 0x003A30A8-0x003A30B8 */ set; } // 0x00C932F0-0x00C932F8
	
		// Constructors
		public NativePropertyAttribute(); // 0x00C932BC-0x00C932C4
		public NativePropertyAttribute(string name); // 0x00C932C4-0x00C932C8
		public NativePropertyAttribute(string name, TargetType targetType); // 0x00C932C8-0x00C932F0
		public NativePropertyAttribute(string name, bool isFree, TargetType targetType); // 0x00C932F8-0x00C93334
	}

	[VisibleToOtherModules] // 0x003A2744-0x003A2754
	internal enum CodegenOptions // TypeDefIndex: 1790
	{
		Auto = 0,
		Custom = 1,
		Force = 2
	}

	[AttributeUsage] // 0x003A2754-0x003A2790
	[VisibleToOtherModules] // 0x003A2754-0x003A2790
	internal class NativeAsStructAttribute : Attribute, IBindingsAttribute // TypeDefIndex: 1791
	{
		// Constructors
		public NativeAsStructAttribute(); // 0x00C92F00-0x00C92F08
	}

	[AttributeUsage] // 0x003A2790-0x003A27CC
	[VisibleToOtherModules] // 0x003A2790-0x003A27CC
	internal class NativeTypeAttribute : Attribute, IBindingsHeaderProviderAttribute, IBindingsGenerateMarshallingTypeAttribute // TypeDefIndex: 1792
	{
		// Fields
		[CompilerGenerated] // 0x003A2E04-0x003A2E40
		[DebuggerBrowsable] // 0x003A2E04-0x003A2E40
		private string <Header>k__BackingField; // 0x10
		[CompilerGenerated] // 0x003A2E40-0x003A2E7C
		[DebuggerBrowsable] // 0x003A2E40-0x003A2E7C
		private string <IntermediateScriptingStructName>k__BackingField; // 0x18
		[CompilerGenerated] // 0x003A2E7C-0x003A2EB8
		[DebuggerBrowsable] // 0x003A2E7C-0x003A2EB8
		private CodegenOptions <CodegenOptions>k__BackingField; // 0x20
	
		// Properties
		public string Header { [CompilerGenerated] /* 0x003A30B8-0x003A30C8 */ set; } // 0x00C934C4-0x00C934CC
		public string IntermediateScriptingStructName { [CompilerGenerated] /* 0x003A30C8-0x003A30D8 */ set; } // 0x00C93508-0x00C93510
		public CodegenOptions CodegenOptions { [CompilerGenerated] /* 0x003A30D8-0x003A30E8 */ set; } // 0x00C93394-0x00C9339C
	
		// Constructors
		public NativeTypeAttribute(); // 0x00C9336C-0x00C93394
		public NativeTypeAttribute(CodegenOptions codegenOptions); // 0x00C9339C-0x00C933C8
		public NativeTypeAttribute(string header); // 0x00C933C8-0x00C934C4
		public NativeTypeAttribute(CodegenOptions codegenOptions, string intermediateStructName); // 0x00C934CC-0x00C93508
	}

	[AttributeUsage] // 0x003A27CC-0x003A2808
	[VisibleToOtherModules] // 0x003A27CC-0x003A2808
	internal class NotNullAttribute : Attribute, IBindingsAttribute // TypeDefIndex: 1793
	{
		// Constructors
		public NotNullAttribute(); // 0x00C93548-0x00C93550
	}

	[AttributeUsage] // 0x003A2808-0x003A2844
	[VisibleToOtherModules] // 0x003A2808-0x003A2844
	internal class UnmarshalledAttribute : Attribute, IBindingsAttribute // TypeDefIndex: 1794
	{
		// Constructors
		public UnmarshalledAttribute(); // 0x00C935F4-0x00C935FC
	}

	[AttributeUsage] // 0x003A2844-0x003A2880
	[VisibleToOtherModules] // 0x003A2844-0x003A2880
	internal class FreeFunctionAttribute : NativeMethodAttribute // TypeDefIndex: 1795
	{
		// Constructors
		public FreeFunctionAttribute(); // 0x00C92DE4-0x00C92E10
		public FreeFunctionAttribute(string name); // 0x00C92E24-0x00C92E4C
		public FreeFunctionAttribute(string name, bool isThreadSafe); // 0x00C92E78-0x00C92EAC
	}

	[AttributeUsage] // 0x003A2880-0x003A28BC
	[VisibleToOtherModules] // 0x003A2880-0x003A28BC
	internal class ThreadSafeAttribute : NativeMethodAttribute // TypeDefIndex: 1796
	{
		// Constructors
		public ThreadSafeAttribute(); // 0x00C935C8-0x00C935F4
	}

	[VisibleToOtherModules] // 0x003A28BC-0x003A28CC
	internal enum StaticAccessorType // TypeDefIndex: 1797
	{
		Dot = 0,
		Arrow = 1,
		DoubleColon = 2,
		ArrowWithDefaultReturnIfNull = 3
	}

	[AttributeUsage] // 0x003A28CC-0x003A2908
	[VisibleToOtherModules] // 0x003A28CC-0x003A2908
	internal class StaticAccessorAttribute : Attribute, IBindingsAttribute // TypeDefIndex: 1798
	{
		// Fields
		[CompilerGenerated] // 0x003A2EB8-0x003A2EF4
		[DebuggerBrowsable] // 0x003A2EB8-0x003A2EF4
		private string <Name>k__BackingField; // 0x10
		[CompilerGenerated] // 0x003A2EF4-0x003A2F30
		[DebuggerBrowsable] // 0x003A2EF4-0x003A2F30
		private StaticAccessorType <Type>k__BackingField; // 0x18
	
		// Properties
		public string Name { [CompilerGenerated] /* 0x003A30F8-0x003A3108 */ set; } // 0x00C9357C-0x00C93584
		public StaticAccessorType Type { [CompilerGenerated] /* 0x003A3108-0x003A3118 */ set; } // 0x00C935C0-0x00C935C8
	
		// Constructors
		[VisibleToOtherModules] // 0x003A30E8-0x003A30F8
		internal StaticAccessorAttribute(string name); // 0x00C93550-0x00C9357C
		public StaticAccessorAttribute(string name, StaticAccessorType type); // 0x00C93584-0x00C935C0
	}

	[AttributeUsage] // 0x003A2908-0x003A2944
	[VisibleToOtherModules] // 0x003A2908-0x003A2944
	internal class NativeThrowsAttribute : Attribute, IBindingsThrowsProviderAttribute // TypeDefIndex: 1799
	{
		// Fields
		[CompilerGenerated] // 0x003A2F30-0x003A2F6C
		[DebuggerBrowsable] // 0x003A2F30-0x003A2F6C
		private bool <ThrowsException>k__BackingField; // 0x10
	
		// Properties
		public bool ThrowsException { [CompilerGenerated] /* 0x003A3118-0x003A3128 */ set; } // 0x00C93360-0x00C9336C
	
		// Constructors
		public NativeThrowsAttribute(); // 0x00C93334-0x00C93360
	}

	[AttributeUsage] // 0x003A2944-0x003A2980
	[VisibleToOtherModules] // 0x003A2944-0x003A2980
	internal class IgnoreAttribute : Attribute, IBindingsAttribute // TypeDefIndex: 1800
	{
		// Fields
		[CompilerGenerated] // 0x003A2F6C-0x003A2FA8
		[DebuggerBrowsable] // 0x003A2F6C-0x003A2FA8
		private bool <DoesNotContributeToSize>k__BackingField; // 0x10
	
		// Properties
		public bool DoesNotContributeToSize { [CompilerGenerated] /* 0x003A3128-0x003A3138 */ set; } // 0x00C92EF4-0x00C92F00
	
		// Constructors
		public IgnoreAttribute(); // 0x00C92EEC-0x00C92EF4
	}
}

namespace UnityEngine
{
	[VisibleToOtherModules] // 0x003A2980-0x003A2990
	internal sealed class UnityString // TypeDefIndex: 1801
	{
		// Methods
		public static string Format(string fmt, params /* 0x003A3158-0x003A3168 */ object[] args); // 0x00C93774-0x00C9377C
	}

	[NativeType] // 0x003A4268-0x003A42A4
	public struct jvalue // TypeDefIndex: 1803
	{
		// Fields
		public bool z; // 0x00
		public byte b; // 0x00
		public char c; // 0x00
		public short s; // 0x00
		public int i; // 0x00
		public long j; // 0x00
		public float f; // 0x00
		public double d; // 0x00
		public IntPtr l; // 0x00
	}

	[NativeHeader] // 0x003A42A4-0x003A4318
	[StaticAccessor] // 0x003A42A4-0x003A4318
	[UsedByNativeCode] // 0x003A42A4-0x003A4318
	public class AndroidJNIHelper // TypeDefIndex: 1804
	{
		// Properties
		public static bool debug { get; set; } // 0x009B42A0-0x009B42F8 0x009B42F8-0x009B4364
	
		// Constructors
		private AndroidJNIHelper(); // 0x009B4298-0x009B42A0
	
		// Methods
		public static IntPtr GetConstructorID(IntPtr javaClass); // 0x009B4364-0x009B43B8
		public static IntPtr GetConstructorID(IntPtr javaClass, [UnityEngine.Internal.DefaultValue] /* 0x003B0FF0-0x003B1028 */ string signature); // 0x009B43B8-0x009B43C0
		public static IntPtr GetMethodID(IntPtr javaClass, string methodName); // 0x009B43C0-0x009B4428
		public static IntPtr GetMethodID(IntPtr javaClass, string methodName, [UnityEngine.Internal.DefaultValue] /* 0x003B1028-0x003B1060 */ string signature); // 0x009B4434-0x009B4440
		public static IntPtr GetMethodID(IntPtr javaClass, string methodName, [UnityEngine.Internal.DefaultValue] /* 0x003B1060-0x003B1098 */ string signature, [UnityEngine.Internal.DefaultValue] /* 0x003B1098-0x003B10D0 */ bool isStatic); // 0x009B4428-0x009B4434
		public static IntPtr GetFieldID(IntPtr javaClass, string fieldName); // 0x009B4440-0x009B44A8
		public static IntPtr GetFieldID(IntPtr javaClass, string fieldName, [UnityEngine.Internal.DefaultValue] /* 0x003B10D0-0x003B1108 */ string signature); // 0x009B44B4-0x009B44C0
		public static IntPtr GetFieldID(IntPtr javaClass, string fieldName, [UnityEngine.Internal.DefaultValue] /* 0x003B1108-0x003B1140 */ string signature, [UnityEngine.Internal.DefaultValue] /* 0x003B1140-0x003B1178 */ bool isStatic); // 0x009B44A8-0x009B44B4
		public static IntPtr CreateJavaRunnable(AndroidJavaRunnable jrunnable); // 0x009B44C0-0x009B44C8
		[ThreadSafe] // 0x003AB8E8-0x003AB8F8
		public static IntPtr CreateJavaProxy(AndroidJavaProxy proxy); // 0x009B44C8-0x009B4534
		public static IntPtr ConvertToJNIArray(Array array); // 0x009B4534-0x009B453C
		public static jvalue[] CreateJNIArgArray(object[] args); // 0x009B453C-0x009B4544
		public static void DeleteJNIArgArray(object[] args, jvalue[] jniArgs); // 0x009B4544-0x009B454C
		public static IntPtr GetConstructorID(IntPtr jclass, object[] args); // 0x009B454C-0x009B4554
		public static IntPtr GetMethodID(IntPtr jclass, string methodName, object[] args, bool isStatic); // 0x009B4554-0x009B4560
		public static string GetSignature(object obj); // 0x009B4560-0x009B4568
		public static string GetSignature(object[] args); // 0x009B4568-0x009B4570
		public static ArrayType ConvertFromJNIArray<ArrayType>(IntPtr array);
		public static IntPtr GetMethodID<ReturnType>(IntPtr jclass, string methodName, object[] args, bool isStatic);
		public static IntPtr GetFieldID<FieldType>(IntPtr jclass, string fieldName, bool isStatic);
		public static string GetSignature<ReturnType>(object[] args);
	}

	[NativeHeader] // 0x003A4318-0x003A437C
	[StaticAccessor] // 0x003A4318-0x003A437C
	public class AndroidJNI // TypeDefIndex: 1805
	{
		// Constructors
		private AndroidJNI(); // 0x009AFFA4-0x009AFFAC
	
		// Methods
		[ThreadSafe] // 0x003AB8F8-0x003AB908
		public static int AttachCurrentThread(); // 0x009AFFAC-0x009B0004
		[ThreadSafe] // 0x003AB908-0x003AB918
		public static int DetachCurrentThread(); // 0x009B0004-0x009B005C
		[ThreadSafe] // 0x003AB918-0x003AB928
		public static int GetVersion(); // 0x009B005C-0x009B00B4
		[ThreadSafe] // 0x003AB928-0x003AB938
		public static IntPtr FindClass(string name); // 0x009B00B4-0x009B0120
		[ThreadSafe] // 0x003AB938-0x003AB948
		public static IntPtr FromReflectedMethod(IntPtr refMethod); // 0x009B0120-0x009B018C
		[ThreadSafe] // 0x003AB948-0x003AB958
		public static IntPtr FromReflectedField(IntPtr refField); // 0x009B018C-0x009B01F8
		[ThreadSafe] // 0x003AB958-0x003AB968
		public static IntPtr ToReflectedMethod(IntPtr clazz, IntPtr methodID, bool isStatic); // 0x009B01F8-0x009B027C
		[ThreadSafe] // 0x003AB968-0x003AB978
		public static IntPtr ToReflectedField(IntPtr clazz, IntPtr fieldID, bool isStatic); // 0x009B027C-0x009B0300
		[ThreadSafe] // 0x003AB978-0x003AB988
		public static IntPtr GetSuperclass(IntPtr clazz); // 0x009B0300-0x009B036C
		[ThreadSafe] // 0x003AB988-0x003AB998
		public static bool IsAssignableFrom(IntPtr clazz1, IntPtr clazz2); // 0x009B036C-0x009B03E0
		[ThreadSafe] // 0x003AB998-0x003AB9A8
		public static int Throw(IntPtr obj); // 0x009B03E0-0x009B044C
		[ThreadSafe] // 0x003AB9A8-0x003AB9B8
		public static int ThrowNew(IntPtr clazz, string message); // 0x009B044C-0x009B04C0
		[ThreadSafe] // 0x003AB9B8-0x003AB9C8
		public static IntPtr ExceptionOccurred(); // 0x009B04C0-0x009B0518
		[ThreadSafe] // 0x003AB9C8-0x003AB9D8
		public static void ExceptionDescribe(); // 0x009B0518-0x009B0570
		[ThreadSafe] // 0x003AB9D8-0x003AB9E8
		public static void ExceptionClear(); // 0x009B0570-0x009B05C8
		[ThreadSafe] // 0x003AB9E8-0x003AB9F8
		public static void FatalError(string message); // 0x009B05C8-0x009B0634
		[ThreadSafe] // 0x003AB9F8-0x003ABA08
		public static int PushLocalFrame(int capacity); // 0x009B0634-0x009B06A0
		[ThreadSafe] // 0x003ABA08-0x003ABA18
		public static IntPtr PopLocalFrame(IntPtr ptr); // 0x009B06A0-0x009B070C
		[ThreadSafe] // 0x003ABA18-0x003ABA28
		public static IntPtr NewGlobalRef(IntPtr obj); // 0x009B070C-0x009B0778
		[ThreadSafe] // 0x003ABA28-0x003ABA38
		public static void DeleteGlobalRef(IntPtr obj); // 0x009B0778-0x009B07E4
		[ThreadSafe] // 0x003ABA38-0x003ABA48
		public static IntPtr NewLocalRef(IntPtr obj); // 0x009B07E4-0x009B0850
		[ThreadSafe] // 0x003ABA48-0x003ABA58
		public static void DeleteLocalRef(IntPtr obj); // 0x009B0850-0x009B08BC
		[ThreadSafe] // 0x003ABA58-0x003ABA68
		public static bool IsSameObject(IntPtr obj1, IntPtr obj2); // 0x009B08BC-0x009B0930
		[ThreadSafe] // 0x003ABA68-0x003ABA78
		public static int EnsureLocalCapacity(int capacity); // 0x009B0930-0x009B099C
		[ThreadSafe] // 0x003ABA78-0x003ABA88
		public static IntPtr AllocObject(IntPtr clazz); // 0x009B099C-0x009B0A08
		[ThreadSafe] // 0x003ABA88-0x003ABA98
		public static IntPtr NewObject(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x009B0A08-0x009B0A8C
		[ThreadSafe] // 0x003ABA98-0x003ABAA8
		public static IntPtr GetObjectClass(IntPtr obj); // 0x009B0A8C-0x009B0AF8
		[ThreadSafe] // 0x003ABAA8-0x003ABAB8
		public static bool IsInstanceOf(IntPtr obj, IntPtr clazz); // 0x009B0AF8-0x009B0B6C
		[ThreadSafe] // 0x003ABAB8-0x003ABAC8
		public static IntPtr GetMethodID(IntPtr clazz, string name, string sig); // 0x009B0B6C-0x009B0BF0
		[ThreadSafe] // 0x003ABAC8-0x003ABAD8
		public static IntPtr GetFieldID(IntPtr clazz, string name, string sig); // 0x009B0BF0-0x009B0C74
		[ThreadSafe] // 0x003ABAD8-0x003ABAE8
		public static IntPtr GetStaticMethodID(IntPtr clazz, string name, string sig); // 0x009B0C74-0x009B0CF8
		[ThreadSafe] // 0x003ABAE8-0x003ABAF8
		public static IntPtr GetStaticFieldID(IntPtr clazz, string name, string sig); // 0x009B0CF8-0x009B0D7C
		[ThreadSafe] // 0x003ABAF8-0x003ABB08
		public static IntPtr NewStringUTF(string bytes); // 0x009B0D7C-0x009B0DE8
		[ThreadSafe] // 0x003ABB08-0x003ABB18
		public static int GetStringUTFLength(IntPtr str); // 0x009B0DE8-0x009B0E54
		[ThreadSafe] // 0x003ABB18-0x003ABB28
		public static string GetStringUTFChars(IntPtr str); // 0x009B0E54-0x009B0EC0
		[ThreadSafe] // 0x003ABB28-0x003ABB38
		public static string CallStringMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x009B0EC0-0x009B0F44
		[ThreadSafe] // 0x003ABB38-0x003ABB48
		public static IntPtr CallObjectMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x009B0F44-0x009B0FC8
		[ThreadSafe] // 0x003ABB48-0x003ABB58
		public static int CallIntMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x009B0FC8-0x009B104C
		[ThreadSafe] // 0x003ABB58-0x003ABB68
		public static bool CallBooleanMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x009B104C-0x009B10D0
		[ThreadSafe] // 0x003ABB68-0x003ABB78
		public static short CallShortMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x009B10D0-0x009B1154
		[ThreadSafe] // 0x003ABB78-0x003ABB88
		public static byte CallByteMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x009B1154-0x009B11D8
		[ThreadSafe] // 0x003ABB88-0x003ABB98
		public static char CallCharMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x009B11D8-0x009B125C
		[ThreadSafe] // 0x003ABB98-0x003ABBA8
		public static float CallFloatMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x009B125C-0x009B12E0
		[ThreadSafe] // 0x003ABBA8-0x003ABBB8
		public static double CallDoubleMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x009B12E0-0x009B1364
		[ThreadSafe] // 0x003ABBB8-0x003ABBC8
		public static long CallLongMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x009B1364-0x009B13E8
		[ThreadSafe] // 0x003ABBC8-0x003ABBD8
		public static void CallVoidMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x009B13E8-0x009B146C
		[ThreadSafe] // 0x003ABBD8-0x003ABBE8
		public static string GetStringField(IntPtr obj, IntPtr fieldID); // 0x009B146C-0x009B14E0
		[ThreadSafe] // 0x003ABBE8-0x003ABBF8
		public static IntPtr GetObjectField(IntPtr obj, IntPtr fieldID); // 0x009B14E0-0x009B1554
		[ThreadSafe] // 0x003ABBF8-0x003ABC08
		public static bool GetBooleanField(IntPtr obj, IntPtr fieldID); // 0x009B1554-0x009B15C8
		[ThreadSafe] // 0x003ABC08-0x003ABC18
		public static byte GetByteField(IntPtr obj, IntPtr fieldID); // 0x009B15C8-0x009B163C
		[ThreadSafe] // 0x003ABC18-0x003ABC28
		public static char GetCharField(IntPtr obj, IntPtr fieldID); // 0x009B163C-0x009B16B0
		[ThreadSafe] // 0x003ABC28-0x003ABC38
		public static short GetShortField(IntPtr obj, IntPtr fieldID); // 0x009B16B0-0x009B1724
		[ThreadSafe] // 0x003ABC38-0x003ABC48
		public static int GetIntField(IntPtr obj, IntPtr fieldID); // 0x009B1724-0x009B1798
		[ThreadSafe] // 0x003ABC48-0x003ABC58
		public static long GetLongField(IntPtr obj, IntPtr fieldID); // 0x009B1798-0x009B180C
		[ThreadSafe] // 0x003ABC58-0x003ABC68
		public static float GetFloatField(IntPtr obj, IntPtr fieldID); // 0x009B180C-0x009B1880
		[ThreadSafe] // 0x003ABC68-0x003ABC78
		public static double GetDoubleField(IntPtr obj, IntPtr fieldID); // 0x009B1880-0x009B18F4
		[ThreadSafe] // 0x003ABC78-0x003ABC88
		public static void SetStringField(IntPtr obj, IntPtr fieldID, string val); // 0x009B18F4-0x009B1978
		[ThreadSafe] // 0x003ABC88-0x003ABC98
		public static void SetObjectField(IntPtr obj, IntPtr fieldID, IntPtr val); // 0x009B1978-0x009B19FC
		[ThreadSafe] // 0x003ABC98-0x003ABCA8
		public static void SetBooleanField(IntPtr obj, IntPtr fieldID, bool val); // 0x009B19FC-0x009B1A80
		[ThreadSafe] // 0x003ABCA8-0x003ABCB8
		public static void SetByteField(IntPtr obj, IntPtr fieldID, byte val); // 0x009B1A80-0x009B1B04
		[ThreadSafe] // 0x003ABCB8-0x003ABCC8
		public static void SetCharField(IntPtr obj, IntPtr fieldID, char val); // 0x009B1B04-0x009B1B88
		[ThreadSafe] // 0x003ABCC8-0x003ABCD8
		public static void SetShortField(IntPtr obj, IntPtr fieldID, short val); // 0x009B1B88-0x009B1C0C
		[ThreadSafe] // 0x003ABCD8-0x003ABCE8
		public static void SetIntField(IntPtr obj, IntPtr fieldID, int val); // 0x009B1C0C-0x009B1C90
		[ThreadSafe] // 0x003ABCE8-0x003ABCF8
		public static void SetLongField(IntPtr obj, IntPtr fieldID, long val); // 0x009B1C90-0x009B1D14
		[ThreadSafe] // 0x003ABCF8-0x003ABD08
		public static void SetFloatField(IntPtr obj, IntPtr fieldID, float val); // 0x009B1D14-0x009B1DA0
		[ThreadSafe] // 0x003ABD08-0x003ABD18
		public static void SetDoubleField(IntPtr obj, IntPtr fieldID, double val); // 0x009B1DA0-0x009B1E2C
		[ThreadSafe] // 0x003ABD18-0x003ABD28
		public static string CallStaticStringMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x009B1E2C-0x009B1EB0
		[ThreadSafe] // 0x003ABD28-0x003ABD38
		public static IntPtr CallStaticObjectMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x009B1EB0-0x009B1F34
		[ThreadSafe] // 0x003ABD38-0x003ABD48
		public static int CallStaticIntMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x009B1F34-0x009B1FB8
		[ThreadSafe] // 0x003ABD48-0x003ABD58
		public static bool CallStaticBooleanMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x009B1FB8-0x009B203C
		[ThreadSafe] // 0x003ABD58-0x003ABD68
		public static short CallStaticShortMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x009B203C-0x009B20C0
		[ThreadSafe] // 0x003ABD68-0x003ABD78
		public static byte CallStaticByteMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x009B20C0-0x009B2144
		[ThreadSafe] // 0x003ABD78-0x003ABD88
		public static char CallStaticCharMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x009B2144-0x009B21C8
		[ThreadSafe] // 0x003ABD88-0x003ABD98
		public static float CallStaticFloatMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x009B21C8-0x009B224C
		[ThreadSafe] // 0x003ABD98-0x003ABDA8
		public static double CallStaticDoubleMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x009B224C-0x009B22D0
		[ThreadSafe] // 0x003ABDA8-0x003ABDB8
		public static long CallStaticLongMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x009B22D0-0x009B2354
		[ThreadSafe] // 0x003ABDB8-0x003ABDC8
		public static void CallStaticVoidMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x009B2354-0x009B23D8
		[ThreadSafe] // 0x003ABDC8-0x003ABDD8
		public static string GetStaticStringField(IntPtr clazz, IntPtr fieldID); // 0x009B23D8-0x009B244C
		[ThreadSafe] // 0x003ABDD8-0x003ABDE8
		public static IntPtr GetStaticObjectField(IntPtr clazz, IntPtr fieldID); // 0x009B244C-0x009B24C0
		[ThreadSafe] // 0x003ABDE8-0x003ABDF8
		public static bool GetStaticBooleanField(IntPtr clazz, IntPtr fieldID); // 0x009B24C0-0x009B2534
		[ThreadSafe] // 0x003ABDF8-0x003ABE08
		public static byte GetStaticByteField(IntPtr clazz, IntPtr fieldID); // 0x009B2534-0x009B25A8
		[ThreadSafe] // 0x003ABE08-0x003ABE18
		public static char GetStaticCharField(IntPtr clazz, IntPtr fieldID); // 0x009B25A8-0x009B261C
		[ThreadSafe] // 0x003ABE18-0x003ABE28
		public static short GetStaticShortField(IntPtr clazz, IntPtr fieldID); // 0x009B261C-0x009B2690
		[ThreadSafe] // 0x003ABE28-0x003ABE38
		public static int GetStaticIntField(IntPtr clazz, IntPtr fieldID); // 0x009B2690-0x009B2704
		[ThreadSafe] // 0x003ABE38-0x003ABE48
		public static long GetStaticLongField(IntPtr clazz, IntPtr fieldID); // 0x009B2704-0x009B2778
		[ThreadSafe] // 0x003ABE48-0x003ABE58
		public static float GetStaticFloatField(IntPtr clazz, IntPtr fieldID); // 0x009B2778-0x009B27EC
		[ThreadSafe] // 0x003ABE58-0x003ABE68
		public static double GetStaticDoubleField(IntPtr clazz, IntPtr fieldID); // 0x009B27EC-0x009B2860
		[ThreadSafe] // 0x003ABE68-0x003ABE78
		public static void SetStaticStringField(IntPtr clazz, IntPtr fieldID, string val); // 0x009B2860-0x009B28E4
		[ThreadSafe] // 0x003ABE78-0x003ABE88
		public static void SetStaticObjectField(IntPtr clazz, IntPtr fieldID, IntPtr val); // 0x009B28E4-0x009B2968
		[ThreadSafe] // 0x003ABE88-0x003ABE98
		public static void SetStaticBooleanField(IntPtr clazz, IntPtr fieldID, bool val); // 0x009B2968-0x009B29EC
		[ThreadSafe] // 0x003ABE98-0x003ABEA8
		public static void SetStaticByteField(IntPtr clazz, IntPtr fieldID, byte val); // 0x009B29EC-0x009B2A70
		[ThreadSafe] // 0x003ABEA8-0x003ABEB8
		public static void SetStaticCharField(IntPtr clazz, IntPtr fieldID, char val); // 0x009B2A70-0x009B2AF4
		[ThreadSafe] // 0x003ABEB8-0x003ABEC8
		public static void SetStaticShortField(IntPtr clazz, IntPtr fieldID, short val); // 0x009B2AF4-0x009B2B78
		[ThreadSafe] // 0x003ABEC8-0x003ABED8
		public static void SetStaticIntField(IntPtr clazz, IntPtr fieldID, int val); // 0x009B2B78-0x009B2BFC
		[ThreadSafe] // 0x003ABED8-0x003ABEE8
		public static void SetStaticLongField(IntPtr clazz, IntPtr fieldID, long val); // 0x009B2BFC-0x009B2C80
		[ThreadSafe] // 0x003ABEE8-0x003ABEF8
		public static void SetStaticFloatField(IntPtr clazz, IntPtr fieldID, float val); // 0x009B2C80-0x009B2D0C
		[ThreadSafe] // 0x003ABEF8-0x003ABF08
		public static void SetStaticDoubleField(IntPtr clazz, IntPtr fieldID, double val); // 0x009B2D0C-0x009B2D98
		[ThreadSafe] // 0x003ABF08-0x003ABF18
		public static IntPtr ToBooleanArray(bool[] array); // 0x009B2D98-0x009B2E04
		[ThreadSafe] // 0x003ABF18-0x003ABF28
		public static IntPtr ToByteArray(byte[] array); // 0x009B2E04-0x009B2E70
		[ThreadSafe] // 0x003ABF28-0x003ABF38
		public static IntPtr ToCharArray(char[] array); // 0x009B2E70-0x009B2EDC
		[ThreadSafe] // 0x003ABF38-0x003ABF48
		public static IntPtr ToShortArray(short[] array); // 0x009B2EDC-0x009B2F48
		[ThreadSafe] // 0x003ABF48-0x003ABF58
		public static IntPtr ToIntArray(int[] array); // 0x009B2F48-0x009B2FB4
		[ThreadSafe] // 0x003ABF58-0x003ABF68
		public static IntPtr ToLongArray(long[] array); // 0x009B2FB4-0x009B3020
		[ThreadSafe] // 0x003ABF68-0x003ABF78
		public static IntPtr ToFloatArray(float[] array); // 0x009B3020-0x009B308C
		[ThreadSafe] // 0x003ABF78-0x003ABF88
		public static IntPtr ToDoubleArray(double[] array); // 0x009B308C-0x009B30F8
		[ThreadSafe] // 0x003ABF88-0x003ABF98
		public static IntPtr ToObjectArray(IntPtr[] array, IntPtr arrayClass); // 0x009B30F8-0x009B316C
		public static IntPtr ToObjectArray(IntPtr[] array); // 0x009B316C-0x009B31B4
		[ThreadSafe] // 0x003ABF98-0x003ABFA8
		public static bool[] FromBooleanArray(IntPtr array); // 0x009B31B4-0x009B3220
		[ThreadSafe] // 0x003ABFA8-0x003ABFB8
		public static byte[] FromByteArray(IntPtr array); // 0x009B3220-0x009B328C
		[ThreadSafe] // 0x003ABFB8-0x003ABFC8
		public static char[] FromCharArray(IntPtr array); // 0x009B328C-0x009B32F8
		[ThreadSafe] // 0x003ABFC8-0x003ABFD8
		public static short[] FromShortArray(IntPtr array); // 0x009B32F8-0x009B3364
		[ThreadSafe] // 0x003ABFD8-0x003ABFE8
		public static int[] FromIntArray(IntPtr array); // 0x009B3364-0x009B33D0
		[ThreadSafe] // 0x003ABFE8-0x003ABFF8
		public static long[] FromLongArray(IntPtr array); // 0x009B33D0-0x009B343C
		[ThreadSafe] // 0x003ABFF8-0x003AC008
		public static float[] FromFloatArray(IntPtr array); // 0x009B343C-0x009B34A8
		[ThreadSafe] // 0x003AC008-0x003AC018
		public static double[] FromDoubleArray(IntPtr array); // 0x009B34A8-0x009B3514
		[ThreadSafe] // 0x003AC018-0x003AC028
		public static IntPtr[] FromObjectArray(IntPtr array); // 0x009B3514-0x009B3580
		[ThreadSafe] // 0x003AC028-0x003AC038
		public static int GetArrayLength(IntPtr array); // 0x009B3580-0x009B35EC
		[ThreadSafe] // 0x003AC038-0x003AC048
		public static IntPtr NewBooleanArray(int size); // 0x009B35EC-0x009B3658
		[ThreadSafe] // 0x003AC048-0x003AC058
		public static IntPtr NewByteArray(int size); // 0x009B3658-0x009B36C4
		[ThreadSafe] // 0x003AC058-0x003AC068
		public static IntPtr NewCharArray(int size); // 0x009B36C4-0x009B3730
		[ThreadSafe] // 0x003AC068-0x003AC078
		public static IntPtr NewShortArray(int size); // 0x009B3730-0x009B379C
		[ThreadSafe] // 0x003AC078-0x003AC088
		public static IntPtr NewIntArray(int size); // 0x009B379C-0x009B3808
		[ThreadSafe] // 0x003AC088-0x003AC098
		public static IntPtr NewLongArray(int size); // 0x009B3808-0x009B3874
		[ThreadSafe] // 0x003AC098-0x003AC0A8
		public static IntPtr NewFloatArray(int size); // 0x009B3874-0x009B38E0
		[ThreadSafe] // 0x003AC0A8-0x003AC0B8
		public static IntPtr NewDoubleArray(int size); // 0x009B38E0-0x009B394C
		[ThreadSafe] // 0x003AC0B8-0x003AC0C8
		public static IntPtr NewObjectArray(int size, IntPtr clazz, IntPtr obj); // 0x009B394C-0x009B39D0
		[ThreadSafe] // 0x003AC0C8-0x003AC0D8
		public static bool GetBooleanArrayElement(IntPtr array, int index); // 0x009B39D0-0x009B3A44
		[ThreadSafe] // 0x003AC0D8-0x003AC0E8
		public static byte GetByteArrayElement(IntPtr array, int index); // 0x009B3A44-0x009B3AB8
		[ThreadSafe] // 0x003AC0E8-0x003AC0F8
		public static char GetCharArrayElement(IntPtr array, int index); // 0x009B3AB8-0x009B3B2C
		[ThreadSafe] // 0x003AC0F8-0x003AC108
		public static short GetShortArrayElement(IntPtr array, int index); // 0x009B3B2C-0x009B3BA0
		[ThreadSafe] // 0x003AC108-0x003AC118
		public static int GetIntArrayElement(IntPtr array, int index); // 0x009B3BA0-0x009B3C14
		[ThreadSafe] // 0x003AC118-0x003AC128
		public static long GetLongArrayElement(IntPtr array, int index); // 0x009B3C14-0x009B3C88
		[ThreadSafe] // 0x003AC128-0x003AC138
		public static float GetFloatArrayElement(IntPtr array, int index); // 0x009B3C88-0x009B3CFC
		[ThreadSafe] // 0x003AC138-0x003AC148
		public static double GetDoubleArrayElement(IntPtr array, int index); // 0x009B3CFC-0x009B3D70
		[ThreadSafe] // 0x003AC148-0x003AC158
		public static IntPtr GetObjectArrayElement(IntPtr array, int index); // 0x009B3D70-0x009B3DE4
		[ThreadSafe] // 0x003AC158-0x003AC168
		public static void SetBooleanArrayElement(IntPtr array, int index, byte val); // 0x009B3DE4-0x009B3E68
		[ThreadSafe] // 0x003AC168-0x003AC178
		public static void SetByteArrayElement(IntPtr array, int index, sbyte val); // 0x009B3E68-0x009B3EEC
		[ThreadSafe] // 0x003AC178-0x003AC188
		public static void SetCharArrayElement(IntPtr array, int index, char val); // 0x009B3EEC-0x009B3F70
		[ThreadSafe] // 0x003AC188-0x003AC198
		public static void SetShortArrayElement(IntPtr array, int index, short val); // 0x009B3F70-0x009B3FF4
		[ThreadSafe] // 0x003AC198-0x003AC1A8
		public static void SetIntArrayElement(IntPtr array, int index, int val); // 0x009B3FF4-0x009B4078
		[ThreadSafe] // 0x003AC1A8-0x003AC1B8
		public static void SetLongArrayElement(IntPtr array, int index, long val); // 0x009B4078-0x009B40FC
		[ThreadSafe] // 0x003AC1B8-0x003AC1C8
		public static void SetFloatArrayElement(IntPtr array, int index, float val); // 0x009B40FC-0x009B4188
		[ThreadSafe] // 0x003AC1C8-0x003AC1D8
		public static void SetDoubleArrayElement(IntPtr array, int index, double val); // 0x009B4188-0x009B4214
		[ThreadSafe] // 0x003AC1D8-0x003AC1E8
		public static void SetObjectArrayElement(IntPtr array, int index, IntPtr obj); // 0x009B4214-0x009B4298
	}

	internal class AndroidJNISafe // TypeDefIndex: 1806
	{
		// Methods
		public static void CheckException(); // 0x009B4570-0x009B4778
		public static void DeleteGlobalRef(IntPtr globalref); // 0x009B4860-0x009B48C4
		public static void DeleteLocalRef(IntPtr localref); // 0x009B47FC-0x009B4860
		public static IntPtr NewStringUTF(string bytes); // 0x009B48C4-0x009B4924
		public static string GetStringUTFChars(IntPtr str); // 0x009B4924-0x009B4984
		public static IntPtr GetObjectClass(IntPtr ptr); // 0x009B4984-0x009B49E4
		public static IntPtr GetStaticMethodID(IntPtr clazz, string name, string sig); // 0x009B49E4-0x009B4A44
		public static IntPtr GetMethodID(IntPtr obj, string name, string sig); // 0x009B4A44-0x009B4AA4
		public static IntPtr GetFieldID(IntPtr clazz, string name, string sig); // 0x009B4AA4-0x009B4B04
		public static IntPtr GetStaticFieldID(IntPtr clazz, string name, string sig); // 0x009B4B04-0x009B4B64
		public static IntPtr FromReflectedMethod(IntPtr refMethod); // 0x009B4B64-0x009B4BC4
		public static IntPtr FromReflectedField(IntPtr refField); // 0x009B4BC4-0x009B4C24
		public static IntPtr FindClass(string name); // 0x009B4C24-0x009B4C84
		public static IntPtr NewObject(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x009B4C84-0x009B4CE4
		public static void SetStaticObjectField(IntPtr clazz, IntPtr fieldID, IntPtr val); // 0x009B4CE4-0x009B4D44
		public static void SetStaticStringField(IntPtr clazz, IntPtr fieldID, string val); // 0x009B4D44-0x009B4DA4
		public static void SetStaticCharField(IntPtr clazz, IntPtr fieldID, char val); // 0x009B4DA4-0x009B4E04
		public static void SetStaticDoubleField(IntPtr clazz, IntPtr fieldID, double val); // 0x009B4E04-0x009B4E64
		public static void SetStaticFloatField(IntPtr clazz, IntPtr fieldID, float val); // 0x009B4E64-0x009B4EC4
		public static void SetStaticLongField(IntPtr clazz, IntPtr fieldID, long val); // 0x009B4EC4-0x009B4F24
		public static void SetStaticShortField(IntPtr clazz, IntPtr fieldID, short val); // 0x009B4F24-0x009B4F84
		public static void SetStaticByteField(IntPtr clazz, IntPtr fieldID, byte val); // 0x009B4F84-0x009B4FE4
		public static void SetStaticBooleanField(IntPtr clazz, IntPtr fieldID, bool val); // 0x009B4FE4-0x009B5048
		public static void SetStaticIntField(IntPtr clazz, IntPtr fieldID, int val); // 0x009B5048-0x009B50A8
		public static IntPtr GetStaticObjectField(IntPtr clazz, IntPtr fieldID); // 0x009B50A8-0x009B5108
		public static string GetStaticStringField(IntPtr clazz, IntPtr fieldID); // 0x009B5108-0x009B5168
		public static char GetStaticCharField(IntPtr clazz, IntPtr fieldID); // 0x009B5168-0x009B51C8
		public static double GetStaticDoubleField(IntPtr clazz, IntPtr fieldID); // 0x009B51C8-0x009B5230
		public static float GetStaticFloatField(IntPtr clazz, IntPtr fieldID); // 0x009B5230-0x009B5298
		public static long GetStaticLongField(IntPtr clazz, IntPtr fieldID); // 0x009B5298-0x009B52F8
		public static short GetStaticShortField(IntPtr clazz, IntPtr fieldID); // 0x009B52F8-0x009B5358
		public static byte GetStaticByteField(IntPtr clazz, IntPtr fieldID); // 0x009B5358-0x009B53B8
		public static bool GetStaticBooleanField(IntPtr clazz, IntPtr fieldID); // 0x009B53B8-0x009B5418
		public static int GetStaticIntField(IntPtr clazz, IntPtr fieldID); // 0x009B5418-0x009B5478
		public static void CallStaticVoidMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x009B5478-0x009B54D8
		public static IntPtr CallStaticObjectMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x009B54D8-0x009B5538
		public static string CallStaticStringMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x009B5538-0x009B5598
		public static char CallStaticCharMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x009B5598-0x009B55F8
		public static double CallStaticDoubleMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x009B55F8-0x009B5660
		public static float CallStaticFloatMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x009B5660-0x009B56C8
		public static long CallStaticLongMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x009B56C8-0x009B5728
		public static short CallStaticShortMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x009B5728-0x009B5788
		public static byte CallStaticByteMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x009B5788-0x009B57E8
		public static bool CallStaticBooleanMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x009B57E8-0x009B5848
		public static int CallStaticIntMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x009B5848-0x009B58A8
		public static void SetObjectField(IntPtr obj, IntPtr fieldID, IntPtr val); // 0x009B58A8-0x009B5908
		public static void SetStringField(IntPtr obj, IntPtr fieldID, string val); // 0x009B5908-0x009B5968
		public static void SetCharField(IntPtr obj, IntPtr fieldID, char val); // 0x009B5968-0x009B59C8
		public static void SetDoubleField(IntPtr obj, IntPtr fieldID, double val); // 0x009B59C8-0x009B5A28
		public static void SetFloatField(IntPtr obj, IntPtr fieldID, float val); // 0x009B5A28-0x009B5A88
		public static void SetLongField(IntPtr obj, IntPtr fieldID, long val); // 0x009B5A88-0x009B5AE8
		public static void SetShortField(IntPtr obj, IntPtr fieldID, short val); // 0x009B5AE8-0x009B5B48
		public static void SetByteField(IntPtr obj, IntPtr fieldID, byte val); // 0x009B5B48-0x009B5BA8
		public static void SetBooleanField(IntPtr obj, IntPtr fieldID, bool val); // 0x009B5BA8-0x009B5C0C
		public static void SetIntField(IntPtr obj, IntPtr fieldID, int val); // 0x009B5C0C-0x009B5C6C
		public static IntPtr GetObjectField(IntPtr obj, IntPtr fieldID); // 0x009B5C6C-0x009B5CCC
		public static string GetStringField(IntPtr obj, IntPtr fieldID); // 0x009B5CCC-0x009B5D2C
		public static char GetCharField(IntPtr obj, IntPtr fieldID); // 0x009B5D2C-0x009B5D8C
		public static double GetDoubleField(IntPtr obj, IntPtr fieldID); // 0x009B5D8C-0x009B5DF4
		public static float GetFloatField(IntPtr obj, IntPtr fieldID); // 0x009B5DF4-0x009B5E5C
		public static long GetLongField(IntPtr obj, IntPtr fieldID); // 0x009B5E5C-0x009B5EBC
		public static short GetShortField(IntPtr obj, IntPtr fieldID); // 0x009B5EBC-0x009B5F1C
		public static byte GetByteField(IntPtr obj, IntPtr fieldID); // 0x009B5F1C-0x009B5F7C
		public static bool GetBooleanField(IntPtr obj, IntPtr fieldID); // 0x009B5F7C-0x009B5FDC
		public static int GetIntField(IntPtr obj, IntPtr fieldID); // 0x009B5FDC-0x009B603C
		public static void CallVoidMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x009B603C-0x009B609C
		public static IntPtr CallObjectMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x009B609C-0x009B60FC
		public static string CallStringMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x009B60FC-0x009B615C
		public static char CallCharMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x009B615C-0x009B61BC
		public static double CallDoubleMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x009B61BC-0x009B6224
		public static float CallFloatMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x009B6224-0x009B628C
		public static long CallLongMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x009B628C-0x009B62EC
		public static short CallShortMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x009B62EC-0x009B634C
		public static byte CallByteMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x009B634C-0x009B63AC
		public static bool CallBooleanMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x009B63AC-0x009B640C
		public static int CallIntMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x009B640C-0x009B646C
		public static char[] FromCharArray(IntPtr array); // 0x009B646C-0x009B64CC
		public static double[] FromDoubleArray(IntPtr array); // 0x009B64CC-0x009B652C
		public static float[] FromFloatArray(IntPtr array); // 0x009B652C-0x009B658C
		public static long[] FromLongArray(IntPtr array); // 0x009B658C-0x009B65EC
		public static short[] FromShortArray(IntPtr array); // 0x009B65EC-0x009B664C
		public static byte[] FromByteArray(IntPtr array); // 0x009B664C-0x009B66AC
		public static bool[] FromBooleanArray(IntPtr array); // 0x009B66AC-0x009B670C
		public static int[] FromIntArray(IntPtr array); // 0x009B670C-0x009B676C
		public static IntPtr ToObjectArray(IntPtr[] array, IntPtr type); // 0x009B676C-0x009B67CC
		public static IntPtr ToCharArray(char[] array); // 0x009B67CC-0x009B682C
		public static IntPtr ToDoubleArray(double[] array); // 0x009B682C-0x009B688C
		public static IntPtr ToFloatArray(float[] array); // 0x009B688C-0x009B68EC
		public static IntPtr ToLongArray(long[] array); // 0x009B68EC-0x009B694C
		public static IntPtr ToShortArray(short[] array); // 0x009B694C-0x009B69AC
		public static IntPtr ToByteArray(byte[] array); // 0x009B69AC-0x009B6A0C
		public static IntPtr ToBooleanArray(bool[] array); // 0x009B6A0C-0x009B6A6C
		public static IntPtr ToIntArray(int[] array); // 0x009B6A6C-0x009B6ACC
		public static IntPtr GetObjectArrayElement(IntPtr array, int index); // 0x009B6ACC-0x009B6B2C
		public static int GetArrayLength(IntPtr array); // 0x009B6B2C-0x009B6B8C
	}

	public class AndroidJavaObject : IDisposable // TypeDefIndex: 1807
	{
		// Fields
		private static bool enableDebugPrints; // 0x00
		internal GlobalJavaObjectRef m_jobject; // 0x10
		internal GlobalJavaObjectRef m_jclass; // 0x18
		private static AndroidJavaClass s_JavaLangClass; // 0x08
	
		// Properties
		protected static AndroidJavaClass JavaLangClass { get; } // 0x009B7F50-0x009B803C 
	
		// Constructors
		public AndroidJavaObject(string className, params /* 0x003B1178-0x003B1188 */ object[] args); // 0x009B7100-0x009B7140
		internal AndroidJavaObject(IntPtr jobject); // 0x009B7418-0x009B7524
		internal AndroidJavaObject(); // 0x009B6C0C-0x009B6C14
		static AndroidJavaObject(); // 0x009B803C-0x009B808C
	
		// Methods
		public void Dispose(); // 0x009B7524-0x009B7528
		public void Call(string methodName, params /* 0x003B1188-0x003B1198 */ object[] args); // 0x009B75A4-0x009B75A8
		public void CallStatic(string methodName, params /* 0x003B1198-0x003B11A8 */ object[] args); // 0x009B76CC-0x009B76D0
		public FieldType Get<FieldType>(string fieldName);
		public void Set<FieldType>(string fieldName, FieldType val);
		public FieldType GetStatic<FieldType>(string fieldName);
		public void SetStatic<FieldType>(string fieldName, FieldType val);
		public IntPtr GetRawObject(); // 0x009B70C4-0x009B70D0
		public IntPtr GetRawClass(); // 0x009B7800-0x009B780C
		public ReturnType Call<ReturnType>(string methodName, params /* 0x003B11A8-0x003B11B8 */ object[] args);
		public ReturnType CallStatic<ReturnType>(string methodName, params /* 0x003B11B8-0x003B11C8 */ object[] args);
		protected void DebugPrint(string msg); // 0x009B6EF0-0x009B6F90
		protected void DebugPrint(string call, string methodName, string signature, object[] args); // 0x009B78F4-0x009B7D28
		private void _AndroidJavaObject(string className, params /* 0x003B11C8-0x003B11D8 */ object[] args); // 0x009B7140-0x009B7418
		~AndroidJavaObject(); // 0x009B7D28-0x009B7DA8
		protected virtual void Dispose(bool disposing); // 0x009B7DA8-0x009B7DF8
		protected void _Dispose(); // 0x009B7528-0x009B75A4
		protected void _Call(string methodName, params /* 0x003B11D8-0x003B11E8 */ object[] args); // 0x009B75A8-0x009B76CC
		protected ReturnType _Call<ReturnType>(string methodName, params /* 0x003B11E8-0x003B11F8 */ object[] args);
		protected FieldType _Get<FieldType>(string fieldName);
		protected void _Set<FieldType>(string fieldName, FieldType val);
		protected void _CallStatic(string methodName, params /* 0x003B11F8-0x003B1208 */ object[] args); // 0x009B76D0-0x009B77F4
		protected ReturnType _CallStatic<ReturnType>(string methodName, params /* 0x003B1208-0x003B1218 */ object[] args);
		protected FieldType _GetStatic<FieldType>(string fieldName);
		protected void _SetStatic<FieldType>(string fieldName, FieldType val);
		internal static AndroidJavaObject AndroidJavaObjectDeleteLocalRef(IntPtr jobject); // 0x009B7DF8-0x009B7EA4
		internal static AndroidJavaClass AndroidJavaClassDeleteLocalRef(IntPtr jclass); // 0x009B7EA4-0x009B7F50
		protected IntPtr _GetRawObject(); // 0x009B77F4-0x009B7800
		protected IntPtr _GetRawClass(); // 0x009B780C-0x009B7818
		protected static AndroidJavaObject FindClass(string name); // 0x009B6F90-0x009B70C4
	}

	public class AndroidJavaClass : AndroidJavaObject // TypeDefIndex: 1808
	{
		// Constructors
		public AndroidJavaClass(string className); // 0x009B6B8C-0x009B6C0C
		internal AndroidJavaClass(IntPtr jclass); // 0x009B6DE0-0x009B6EF0
	
		// Methods
		private void _AndroidJavaClass(string className); // 0x009B6C14-0x009B6DE0
	}

	public delegate void AndroidJavaRunnable(); // TypeDefIndex: 1809; 0x009B8D40-0x009B9140

	public sealed class AndroidJavaException : Exception // TypeDefIndex: 1810
	{
		// Fields
		private string mJavaStackTrace; // 0x88
	
		// Properties
		public override string StackTrace { get; } // 0x009B70D0-0x009B7100 
	
		// Constructors
		internal AndroidJavaException(string message, string javaStackTrace); // 0x009B4778-0x009B47FC
	}

	internal class GlobalJavaObjectRef // TypeDefIndex: 1811
	{
		// Fields
		private bool m_disposed; // 0x10
		protected IntPtr m_jobject; // 0x18
	
		// Constructors
		public GlobalJavaObjectRef(IntPtr jobject); // 0x008D0F58-0x008D0FE0
	
		// Methods
		~GlobalJavaObjectRef(); // 0x008D0FE0-0x008D1054
		public static implicit operator IntPtr(GlobalJavaObjectRef obj); // 0x008D10CC-0x008D1110
		public void Dispose(); // 0x008D1054-0x008D10CC
	}

	internal class AndroidJavaRunnableProxy : AndroidJavaProxy // TypeDefIndex: 1812
	{
		// Fields
		private AndroidJavaRunnable mRunnable; // 0x20
	
		// Constructors
		public AndroidJavaRunnableProxy(AndroidJavaRunnable runnable); // 0x009B9180-0x009B9204
	
		// Methods
		public void run(); // 0x009B9204-0x009B9230
	}

	public class AndroidJavaProxy // TypeDefIndex: 1813
	{
		// Fields
		public readonly AndroidJavaClass javaInterface; // 0x10
		internal AndroidJavaObject proxyObject; // 0x18
		private static readonly GlobalJavaObjectRef s_JavaLangSystemClass; // 0x00
		private static readonly IntPtr s_HashCodeMethodID; // 0x08
	
		// Constructors
		public AndroidJavaProxy(string javaInterface); // 0x009B808C-0x009B8104
		public AndroidJavaProxy(AndroidJavaClass javaInterface); // 0x009B8104-0x009B8130
		static AndroidJavaProxy(); // 0x009B8C58-0x009B8D30
	
		// Methods
		public virtual AndroidJavaObject Invoke(string methodName, object[] args); // 0x009B8130-0x009B8810
		public virtual AndroidJavaObject Invoke(string methodName, AndroidJavaObject[] javaArgs); // 0x009B8810-0x009B8A0C
		public virtual bool equals(AndroidJavaObject obj); // 0x009B8A0C-0x009B8A90
		public virtual int hashCode(); // 0x009B8B14-0x009B8BF8
		public virtual string toString(); // 0x009B8BF8-0x009B8C58
		internal AndroidJavaObject GetProxy(); // 0x009B8A90-0x009B8B14
	}

	internal class AndroidReflection // TypeDefIndex: 1814
	{
		// Fields
		private static readonly GlobalJavaObjectRef s_ReflectionHelperClass; // 0x00
		private static readonly IntPtr s_ReflectionHelperGetConstructorID; // 0x08
		private static readonly IntPtr s_ReflectionHelperGetMethodID; // 0x10
		private static readonly IntPtr s_ReflectionHelperGetFieldID; // 0x18
		private static readonly IntPtr s_ReflectionHelperNewProxyInstance; // 0x20
	
		// Constructors
		static AndroidReflection(); // 0x009B99E8-0x009B9B44
	
		// Methods
		public static bool IsPrimitive(Type t); // 0x009B9230-0x009B925C
		public static bool IsAssignableFrom(Type t, Type from); // 0x009B925C-0x009B9298
		private static IntPtr GetStaticMethodID(string clazz, string methodName, string signature); // 0x009B9298-0x009B9320
		public static IntPtr GetConstructorMember(IntPtr jclass, string signature); // 0x009B9320-0x009B94B4
		public static IntPtr GetMethodMember(IntPtr jclass, string methodName, string signature, bool isStatic); // 0x009B94B4-0x009B96D8
		public static IntPtr GetFieldMember(IntPtr jclass, string fieldName, string signature, bool isStatic); // 0x009B96D8-0x009B98FC
		public static IntPtr NewProxyInstance(int delegateHandle, IntPtr interfaze); // 0x009B98FC-0x009B99E8
	}

	[UsedByNativeCode] // 0x003A437C-0x003A438C
	internal sealed class _AndroidJNIHelper // TypeDefIndex: 1815
	{
		// Constructors
		public _AndroidJNIHelper(); // 0x00C47E60-0x00C47E68
	
		// Methods
		[RequiredByNativeCode] // 0x003AC1E8-0x003AC1F8
		public static IntPtr CreateJavaProxy(int delegateHandle, AndroidJavaProxy proxy); // 0x00C47E68-0x00C47F10
		public static IntPtr CreateJavaRunnable(AndroidJavaRunnable jrunnable); // 0x00C47F10-0x00C47F78
		[RequiredByNativeCode] // 0x003AC1F8-0x003AC208
		public static IntPtr InvokeJavaProxyMethod(AndroidJavaProxy proxy, IntPtr jmethodName, IntPtr jargs); // 0x00C47F78-0x00C48200
		public static jvalue[] CreateJNIArgArray(object[] args); // 0x00C48200-0x00C48C48
		public static object UnboxArray(AndroidJavaObject obj); // 0x00C4970C-0x00C49C84
		public static object Unbox(AndroidJavaObject obj); // 0x00C49C84-0x00C4A334
		public static AndroidJavaObject Box(object obj); // 0x00C4A334-0x00C4ACDC
		public static void DeleteJNIArgArray(object[] args, jvalue[] jniArgs); // 0x00C4ACDC-0x00C4AE18
		public static IntPtr ConvertToJNIArray(Array array); // 0x00C48C48-0x00C4970C
		public static ArrayType ConvertFromJNIArray<ArrayType>(IntPtr array);
		public static IntPtr GetConstructorID(IntPtr jclass, object[] args); // 0x00C4AE18-0x00C4AE48
		public static IntPtr GetMethodID(IntPtr jclass, string methodName, object[] args, bool isStatic); // 0x00C4AF88-0x00C4AFD0
		public static IntPtr GetMethodID<ReturnType>(IntPtr jclass, string methodName, object[] args, bool isStatic);
		public static IntPtr GetFieldID<ReturnType>(IntPtr jclass, string fieldName, bool isStatic);
		public static IntPtr GetConstructorID(IntPtr jclass, string signature); // 0x00C4AFD0-0x00C4C1A4
		public static IntPtr GetMethodID(IntPtr jclass, string methodName, string signature, bool isStatic); // 0x00C4C1A4-0x00C4C388
		private static IntPtr GetMethodIDFallback(IntPtr jclass, string methodName, string signature, bool isStatic); // 0x00C4C388-0x00C4C48C
		public static IntPtr GetFieldID(IntPtr jclass, string fieldName, string signature, bool isStatic); // 0x00C4C48C-0x00C4C694
		public static string GetSignature(object obj); // 0x00C4C694-0x00C4D268
		public static string GetSignature(object[] args); // 0x00C4AE48-0x00C4AF88
		public static string GetSignature<ReturnType>(object[] args);
	}

	[RequiredByNativeCode] // 0x003A438C-0x003A439C
	public struct Keyframe // TypeDefIndex: 1816
	{
		// Fields
		private float m_Time; // 0x00
		private float m_Value; // 0x04
		private float m_InTangent; // 0x08
		private float m_OutTangent; // 0x0C
		private int m_WeightedMode; // 0x10
		private float m_InWeight; // 0x14
		private float m_OutWeight; // 0x18
	
		// Properties
		public float time { get; } // 0x008D24F4-0x008D24FC 
	}

	[NativeHeader] // 0x003A439C-0x003A441C
	[RequiredByNativeCode] // 0x003A439C-0x003A441C
	[ThreadAndSerializationSafe] // 0x003A439C-0x003A441C
	public class AnimationCurve : IEquatable<AnimationCurve> // TypeDefIndex: 1817
	{
		// Fields
		internal IntPtr m_Ptr; // 0x10
	
		// Properties
		public Keyframe this[int index] { get => default; } // 0x009B9DE0-0x009B9E44 
		public int length { [NativeMethod] /* 0x003AC300-0x003AC348 */ get; } // 0x009B9E8C-0x009B9EF8 
	
		// Constructors
		public AnimationCurve(params /* 0x003B1218-0x003B1228 */ Keyframe[] keys); // 0x009B9B44-0x009B9B78
		[RequiredByNativeCode] // 0x003AC208-0x003AC218
		public AnimationCurve(); // 0x009B9BE4-0x009B9C14
	
		// Methods
		[FreeFunction] // 0x003AC218-0x003AC260
		private static void Internal_Destroy(IntPtr ptr); // 0x009B9C14-0x009B9C80
		[FreeFunction] // 0x003AC260-0x003AC2A8
		private static IntPtr Internal_Create(Keyframe[] keys); // 0x009B9B78-0x009B9BE4
		[FreeFunction] // 0x003AC2A8-0x003AC2F0
		private bool Internal_Equals(IntPtr other); // 0x009B9C80-0x009B9CF4
		~AnimationCurve(); // 0x009B9CF4-0x009B9D6C
		[ThreadSafe] // 0x003AC2F0-0x003AC300
		public float Evaluate(float time); // 0x009B9D6C-0x009B9DE0
		[FreeFunction] // 0x003AC348-0x003AC3B4
		[NativeThrows] // 0x003AC348-0x003AC3B4
		private Keyframe GetKey(int index); // 0x009B9E44-0x009B9E8C
		public override bool Equals(object o); // 0x009B9F7C-0x009BB094
		public bool Equals(AnimationCurve other); // 0x009BB094-0x009BB140
		public override int GetHashCode(); // 0x009BB140-0x009BB14C
		private void GetKey_Injected(int index, out Keyframe ret); // 0x009B9EF8-0x009B9F7C
	}

	[NativeHeader] // 0x003A441C-0x003A4698
	[NativeHeader] // 0x003A441C-0x003A4698
	[NativeHeader] // 0x003A441C-0x003A4698
	[NativeHeader] // 0x003A441C-0x003A4698
	[NativeHeader] // 0x003A441C-0x003A4698
	[NativeHeader] // 0x003A441C-0x003A4698
	[NativeHeader] // 0x003A441C-0x003A4698
	[NativeHeader] // 0x003A441C-0x003A4698
	[NativeHeader] // 0x003A441C-0x003A4698
	[NativeHeader] // 0x003A441C-0x003A4698
	[NativeHeader] // 0x003A441C-0x003A4698
	[NativeHeader] // 0x003A441C-0x003A4698
	[NativeHeader] // 0x003A441C-0x003A4698
	[NativeHeader] // 0x003A441C-0x003A4698
	[NativeHeader] // 0x003A441C-0x003A4698
	[NativeHeader] // 0x003A441C-0x003A4698
	[NativeHeader] // 0x003A441C-0x003A4698
	public class Application // TypeDefIndex: 1818
	{
		// Fields
		[CompilerGenerated] // 0x003A98F8-0x003A9934
		[DebuggerBrowsable] // 0x003A98F8-0x003A9934
		private static LowMemoryCallback lowMemory; // 0x00
		private static LogCallback s_LogCallbackHandler; // 0x08
		private static LogCallback s_LogCallbackHandlerThreaded; // 0x10
		[CompilerGenerated] // 0x003A9934-0x003A9970
		[DebuggerBrowsable] // 0x003A9934-0x003A9970
		private static Func<bool> wantsToQuit; // 0x18
		[CompilerGenerated] // 0x003A9970-0x003A99AC
		[DebuggerBrowsable] // 0x003A9970-0x003A99AC
		private static Action quitting; // 0x20
	
		// Properties
		public static bool isPlaying { [FreeFunction] /* 0x003AC3EC-0x003AC424 */ get; } // 0x009BB1C0-0x009BB218 
		public static RuntimePlatform platform { [FreeFunction] /* 0x003AC424-0x003AC46C */ get; } // 0x009BB218-0x009BB270 
		public static bool runInBackground { [FreeFunction] /* 0x003AC46C-0x003AC4A4 */ set; } // 0x009BB270-0x009BB2DC
		public static string streamingAssetsPath { [FreeFunction] /* 0x003AC4A4-0x003AC4EC */ get; } // 0x009BB2DC-0x009BB334 
		[SecurityCritical] // 0x003B1E38-0x003B1E48
		public static string persistentDataPath { [FreeFunction] /* 0x003AC4EC-0x003AC524 */ get; } // 0x009BB334-0x009BB38C 
		public static string unityVersion { [FreeFunction] /* 0x003AC524-0x003AC55C */ get; } // 0x009BB38C-0x009BB3E4 
		public static string productName { [FreeFunction] /* 0x003AC55C-0x003AC594 */ get; } // 0x009BB3E4-0x009BB43C 
		public static string cloudProjectId { [FreeFunction] /* 0x003AC594-0x003AC5CC */ get; } // 0x009BB43C-0x009BB494 
		public static int targetFrameRate { [FreeFunction] /* 0x003AC604-0x003AC63C */ set; } // 0x009BB500-0x009BB56C
		public static bool isEditor { get; } // 0x009BC324-0x009BC32C 
	
		// Events
		public static event UnityAction onBeforeRender {
			add; // 0x009BC32C-0x009BC390
			remove; // 0x009BC768-0x009BC7CC
		}
		public static event Action quitting {
			add; // 0x009BCB20-0x009BCC20
			remove; // 0x009BCC20-0x009BCD20
		}
	
		// Nested types
		public delegate void LowMemoryCallback(); // TypeDefIndex: 1819; 0x009BB6A4-0x009BBAA4
	
		public delegate void LogCallback(string condition, string stackTrace, LogType type); // TypeDefIndex: 1820; 0x009BBB64-0x009BC324
	
		// Methods
		[FreeFunction] // 0x003AC3B4-0x003AC3EC
		public static void Quit(int exitCode); // 0x009BB14C-0x009BB1B8
		public static void Quit(); // 0x009BB1B8-0x009BB1C0
		[FreeFunction] // 0x003AC5CC-0x003AC604
		public static void OpenURL(string url); // 0x009BB494-0x009BB500
		[FreeFunction] // 0x003AC63C-0x003AC674
		public static AsyncOperation RequestUserAuthorization(UserAuthorization mode); // 0x009BB56C-0x009BB5D8
		[FreeFunction] // 0x003AC674-0x003AC6AC
		public static bool HasUserAuthorization(UserAuthorization mode); // 0x009BB5D8-0x009BB644
		[RequiredByNativeCode] // 0x003AC6AC-0x003AC6BC
		private static void CallLowMemory(); // 0x009BB644-0x009BB6A4
		[RequiredByNativeCode] // 0x003AC6BC-0x003AC6CC
		private static void CallLogCallback(string logString, string stackTrace, LogType type, bool invokedOnMainThread); // 0x009BBAA4-0x009BBB64
		[RequiredByNativeCode] // 0x003AC6CC-0x003AC6DC
		private static bool Internal_ApplicationWantsToQuit(); // 0x009BCD20-0x009BCF24
		[RequiredByNativeCode] // 0x003AC6DC-0x003AC6EC
		private static void Internal_ApplicationQuit(); // 0x009BD004-0x009BD068
		[RequiredByNativeCode] // 0x003AC6EC-0x003AC6FC
		internal static void InvokeOnBeforeRender(); // 0x009BD068-0x009BD0C4
		[Obsolete] // 0x003AC6FC-0x003AC734
		public static void LoadLevel(string name); // 0x009BD268-0x009BD2D8
	}

	public enum UserAuthorization // TypeDefIndex: 1821
	{
		WebCam = 1,
		Microphone = 2
	}

	[NativeHeader] // 0x003A4698-0x003A4718
	[NativeHeader] // 0x003A4698-0x003A4718
	[RequiredByNativeCode] // 0x003A4698-0x003A4718
	[ThreadAndSerializationSafe] // 0x003A4698-0x003A4718
	public class AsyncOperation : YieldInstruction // TypeDefIndex: 1822
	{
		// Fields
		internal IntPtr m_Ptr; // 0x10
		private Action<AsyncOperation> m_completeCallback; // 0x18
	
		// Properties
		public bool isDone { [NativeMethod] /* 0x003AC798-0x003AC7D0 */ get; } // 0x009BDF28-0x009BDF94 
		public bool allowSceneActivation { [NativeMethod] /* 0x003AC7D0-0x003AC808 */ set; } // 0x009BDF94-0x009BE008
	
		// Constructors
		public AsyncOperation(); // 0x009BDEB4-0x009BDEBC
	
		// Methods
		[NativeMethod] // 0x003AC734-0x003AC798
		[StaticAccessor] // 0x003AC734-0x003AC798
		private static void InternalDestroy(IntPtr ptr); // 0x009BDEBC-0x009BDF28
		~AsyncOperation(); // 0x009BE008-0x009BE080
		[RequiredByNativeCode] // 0x003AC808-0x003AC818
		internal void InvokeCompletionEvent(); // 0x009BE080-0x009BE0E0
	}

	internal class AttributeHelperEngine // TypeDefIndex: 1823
	{
		// Fields
		public static DisallowMultipleComponent[] _disallowMultipleComponentArray; // 0x00
		public static ExecuteInEditMode[] _executeInEditModeArray; // 0x08
		public static RequireComponent[] _requireComponentArray; // 0x10
	
		// Constructors
		static AttributeHelperEngine(); // 0x009BE85C-0x009BE900
	
		// Methods
		[RequiredByNativeCode] // 0x003AC818-0x003AC828
		private static Type GetParentTypeDisallowingMultipleInclusion(Type type); // 0x009BE0E0-0x009BE1E8
		[RequiredByNativeCode] // 0x003AC828-0x003AC838
		private static Type[] GetRequiredComponents(Type klass); // 0x009BE1E8-0x009BE5F0
		private static int GetExecuteMode(Type klass); // 0x009BE5F0-0x009BE6F0
		[RequiredByNativeCode] // 0x003AC838-0x003AC848
		private static int CheckIsEditorScript(Type klass); // 0x009BE6F0-0x009BE7D8
		[RequiredByNativeCode] // 0x003AC848-0x003AC858
		private static int GetDefaultExecutionOrderFor(Type klass); // 0x009BE7D8-0x009BE854
		private static T GetCustomAttributeOfType<T>(Type klass)
			where T : Attribute;
	}

	[AttributeUsage] // 0x003A4718-0x003A4754
	public sealed class DisallowMultipleComponent : Attribute // TypeDefIndex: 1824
	{
		// Constructors
		public DisallowMultipleComponent(); // 0x009C5534-0x009C553C
	}

	[AttributeUsage] // 0x003A4754-0x003A4790
	public sealed class RequireComponent : Attribute // TypeDefIndex: 1825
	{
		// Fields
		public Type m_Type0; // 0x10
		public Type m_Type1; // 0x18
		public Type m_Type2; // 0x20
	
		// Constructors
		public RequireComponent(Type requiredComponent); // 0x008E7020-0x008E7204
	}

	public sealed class AddComponentMenu : Attribute // TypeDefIndex: 1826
	{
		// Fields
		private string m_AddComponentMenu; // 0x10
		private int m_Ordering; // 0x18
	
		// Constructors
		public AddComponentMenu(string menuName); // 0x009AFF38-0x009AFF68
		public AddComponentMenu(string menuName, int order); // 0x009AFF68-0x009AFFA4
	}

	[AttributeUsage] // 0x003A4790-0x003A47E0
	[RequiredByNativeCode] // 0x003A4790-0x003A47E0
	public sealed class ContextMenu : Attribute // TypeDefIndex: 1827
	{
	}

	[UsedByNativeCode] // 0x003A47E0-0x003A47F0
	public sealed class ExecuteInEditMode : Attribute // TypeDefIndex: 1828
	{
		// Constructors
		public ExecuteInEditMode(); // 0x009C98BC-0x009C991C
	}

	[UsedByNativeCode] // 0x003A47F0-0x003A4800
	public sealed class ExecuteAlways : Attribute // TypeDefIndex: 1829
	{
		// Constructors
		public ExecuteAlways(); // 0x009C98B4-0x009C98BC
	}

	[UsedByNativeCode] // 0x003A4800-0x003A4810
	public sealed class HideInInspector : Attribute // TypeDefIndex: 1830
	{
		// Constructors
		public HideInInspector(); // 0x008D1928-0x008D1930
	}

	[AttributeUsage] // 0x003A4810-0x003A484C
	[UsedByNativeCode] // 0x003A4810-0x003A484C
	public class DefaultExecutionOrder : Attribute // TypeDefIndex: 1831
	{
		// Fields
		[CompilerGenerated] // 0x003A99AC-0x003A99E8
		[DebuggerBrowsable] // 0x003A99AC-0x003A99E8
		private int <order>k__BackingField; // 0x10
	
		// Properties
		public int order { [CompilerGenerated] /* 0x003AC858-0x003AC868 */ get; } // 0x009BE854-0x009BE85C 
	}

	[AttributeUsage] // 0x003A484C-0x003A4888
	[RequiredByNativeCode] // 0x003A484C-0x003A4888
	public class AssemblyIsEditorAssembly : Attribute // TypeDefIndex: 1832
	{
	}

	[AttributeUsage] // 0x003A4888-0x003A48D8
	[UsedByNativeCode] // 0x003A4888-0x003A48D8
	public class ExcludeFromPresetAttribute : Attribute // TypeDefIndex: 1833
	{
		// Constructors
		public ExcludeFromPresetAttribute(); // 0x009C98AC-0x009C98B4
	}

	public enum SendMessageOptions // TypeDefIndex: 1834
	{
		RequireReceiver = 0,
		DontRequireReceiver = 1
	}

	public enum PrimitiveType // TypeDefIndex: 1835
	{
		Sphere = 0,
		Capsule = 1,
		Cylinder = 2,
		Cube = 3,
		Plane = 4,
		Quad = 5
	}

	public enum Space // TypeDefIndex: 1836
	{
		World = 0,
		Self = 1
	}

	public enum RuntimePlatform // TypeDefIndex: 1837
	{
		OSXEditor = 0,
		OSXPlayer = 1,
		WindowsPlayer = 2,
		OSXWebPlayer = 3,
		OSXDashboardPlayer = 4,
		WindowsWebPlayer = 5,
		WindowsEditor = 7,
		IPhonePlayer = 8,
		PS3 = 9,
		XBOX360 = 10,
		Android = 11,
		NaCl = 12,
		LinuxPlayer = 13,
		FlashPlayer = 15,
		LinuxEditor = 16,
		WebGLPlayer = 17,
		MetroPlayerX86 = 18,
		WSAPlayerX86 = 18,
		MetroPlayerX64 = 19,
		WSAPlayerX64 = 19,
		MetroPlayerARM = 20,
		WSAPlayerARM = 20,
		WP8Player = 21,
		BlackBerryPlayer = 22,
		TizenPlayer = 23,
		PSP2 = 24,
		PS4 = 25,
		PSM = 26,
		XboxOne = 27,
		SamsungTVPlayer = 28,
		WiiU = 30,
		tvOS = 31,
		Switch = 32,
		Lumin = 33
	}

	public enum LogType // TypeDefIndex: 1838
	{
		Error = 0,
		Assert = 1,
		Warning = 2,
		Log = 3,
		Exception = 4
	}

	[AttributeUsage] // 0x003A48D8-0x003A48EC
	public class BeforeRenderOrderAttribute : Attribute // TypeDefIndex: 1839
	{
		// Fields
		[CompilerGenerated] // 0x003A9DAC-0x003A9DE8
		[DebuggerBrowsable] // 0x003A9DAC-0x003A9DE8
		private int <order>k__BackingField; // 0x10
	
		// Properties
		public int order { [CompilerGenerated] /* 0x003AC868-0x003AC878 */ get; } // 0x009BEA18-0x009BEA20 
	}

	internal static class BeforeRenderHelper // TypeDefIndex: 1840
	{
		// Fields
		private static List<OrderBlock> s_OrderBlocks; // 0x00
	
		// Nested types
		private struct OrderBlock // TypeDefIndex: 1841
		{
			// Fields
			internal int order; // 0x00
			internal UnityAction callback; // 0x08
		}
	
		// Constructors
		static BeforeRenderHelper(); // 0x009BEE20-0x009BEF34
	
		// Methods
		private static int GetUpdateOrder(UnityAction callback); // 0x009BE900-0x009BEA18
		public static void RegisterCallback(UnityAction callback); // 0x009BC390-0x009BC768
		public static void UnregisterCallback(UnityAction callback); // 0x009BC7CC-0x009BCB20
		public static void Invoke(); // 0x009BD0C4-0x009BD268
	}

	[NativeHeader] // 0x003A48EC-0x003A4938
	[UsedByNativeCode] // 0x003A48EC-0x003A4938
	public class Behaviour : Component // TypeDefIndex: 1842
	{
		// Properties
		[NativeProperty] // 0x003B1E48-0x003B1E80
		[RequiredByNativeCode] // 0x003B1E48-0x003B1E80
		public bool enabled { get; set; } // 0x009BEFA0-0x009BF00C 0x009BF00C-0x009BF080
		[NativeProperty] // 0x003B1E80-0x003B1E90
		public bool isActiveAndEnabled { [NativeMethod] /* 0x003AC878-0x003AC8B0 */ get; } // 0x009BF080-0x009BF0EC 
	
		// Constructors
		public Behaviour(); // 0x009BEF34-0x009BEF38
	}

	[NativeHeader] // 0x003A4938-0x003A4970
	internal class BootConfigData // TypeDefIndex: 1843
	{
		// Fields
		private IntPtr m_Ptr; // 0x10
	
		// Constructors
		private BootConfigData(IntPtr nativeHandle); // 0x009BF0EC-0x009BF1A0
	
		// Methods
		[RequiredByNativeCode] // 0x003AC8B0-0x003AC8C0
		private static BootConfigData WrapBootConfigData(IntPtr nativeHandle); // 0x009BF1A0-0x009BF2B8
	}

	[NativeClass] // 0x003A4970-0x003A4AB8
	[NativeHeader] // 0x003A4970-0x003A4AB8
	[NativeHeader] // 0x003A4970-0x003A4AB8
	[NativeHeader] // 0x003A4970-0x003A4AB8
	[NativeHeader] // 0x003A4970-0x003A4AB8
	[NativeType] // 0x003A4970-0x003A4AB8
	[RequiredByNativeCode] // 0x003A4970-0x003A4AB8
	[ThreadAndSerializationSafe] // 0x003A4970-0x003A4AB8
	public struct Bounds : IEquatable<Bounds> // TypeDefIndex: 1844
	{
		// Fields
		private Vector3 m_Center; // 0x00
		[NativeName] // 0x003A9DE8-0x003A9E20
		private Vector3 m_Extents; // 0x0C
	
		// Properties
		public Vector3 center { get; set; } // 0x009BF4A0-0x009BF4B8 0x009BF4B8-0x009BF550
		public Vector3 size { get; set; } // 0x009BF550-0x009BF5F4 0x009BF5F4-0x009BF5FC
		public Vector3 extents { get; set; } // 0x009BF5FC-0x009BF614 0x009BF614-0x009BF6C0
		public Vector3 min { get; } // 0x009BF6C0-0x009BF768 
		public Vector3 max { get; } // 0x009BF768-0x009BF770 
	
		// Constructors
		public Bounds(Vector3 center, Vector3 size); // 0x009BF2B8-0x009BF330
	
		// Methods
		public override int GetHashCode(); // 0x009BF330-0x009BF460
		public override bool Equals(object other); // 0x009BF460-0x009BF468
		public bool Equals(Bounds other); // 0x009BF468-0x009BF4A0
		public static bool operator ==(Bounds lhs, Bounds rhs); // 0x009BF770-0x009BF88C
		public static bool operator !=(Bounds lhs, Bounds rhs); // 0x009BF88C-0x009BF9C4
		public void SetMinMax(Vector3 min, Vector3 max); // 0x009BF9C4-0x009BFAC8
		public void Encapsulate(Vector3 point); // 0x009BFAC8-0x009BFC38
		public override string ToString(); // 0x009BFC38-0x009BFC40
	}

	[NativeHeader] // 0x003A4AB8-0x003A4C28
	[NativeHeader] // 0x003A4AB8-0x003A4C28
	[NativeHeader] // 0x003A4AB8-0x003A4C28
	[NativeHeader] // 0x003A4AB8-0x003A4C28
	[NativeHeader] // 0x003A4AB8-0x003A4C28
	[NativeHeader] // 0x003A4AB8-0x003A4C28
	[NativeHeader] // 0x003A4AB8-0x003A4C28
	[RequireComponent] // 0x003A4AB8-0x003A4C28
	[UsedByNativeCode] // 0x003A4AB8-0x003A4C28
	public sealed class Camera : Behaviour // TypeDefIndex: 1845
	{
		// Fields
		public static CameraCallback onPreCull; // 0x00
		public static CameraCallback onPreRender; // 0x08
		public static CameraCallback onPostRender; // 0x10
	
		// Properties
		[NativeProperty] // 0x003B1E90-0x003B1EC8
		public float nearClipPlane { get; set; } // 0x009BFC44-0x009BFCB0 0x009BFCB0-0x009BFD24
		[NativeProperty] // 0x003B1EC8-0x003B1F00
		public float farClipPlane { get; set; } // 0x009BFD24-0x009BFD90 0x009BFD90-0x009BFE04
		[NativeProperty] // 0x003B1F00-0x003B1F38
		public float fieldOfView { get; set; } // 0x009BFE04-0x009BFE70 0x009BFE70-0x009BFEE4
		public float orthographicSize { get; set; } // 0x009BFEE4-0x009BFF50 0x009BFF50-0x009BFFC4
		public bool orthographic { set; } // 0x009BFFC4-0x009C0038
		public float depth { get; } // 0x009C0038-0x009C00A4 
		public float aspect { get; set; } // 0x009C00A4-0x009C0110 0x009C0110-0x009C0184
		public int cullingMask { get; set; } // 0x009C0184-0x009C01F0 0x009C01F0-0x009C0264
		public int eventMask { get; } // 0x009C0264-0x009C02D0 
		public Color backgroundColor { get; set; } // 0x009C02D0-0x009C02FC 0x009C0370-0x009C0398
		public CameraClearFlags clearFlags { get; set; } // 0x009C040C-0x009C0478 0x009C0478-0x009C04EC
		public DepthTextureMode depthTextureMode { get; set; } // 0x009C04EC-0x009C0558 0x009C0558-0x009C05CC
		[NativeProperty] // 0x003B1F38-0x003B1F70
		public Rect rect { get; set; } // 0x009C05CC-0x009C05F8 0x009C066C-0x009C0694
		[NativeProperty] // 0x003B1F70-0x003B1FA8
		public Rect pixelRect { get; set; } // 0x009C0708-0x009C0734 0x009C07A8-0x009C07D0
		public RenderTexture targetTexture { get; set; } // 0x009C0844-0x009C08B0 0x009C08B0-0x009C0924
		public int targetDisplay { get; } // 0x009C0924-0x009C0990 
		public Matrix4x4 worldToCameraMatrix { get; } // 0x009C0990-0x009C09D8 
		public Matrix4x4 projectionMatrix { get; set; } // 0x009C0A4C-0x009C0A94 0x009C0B08-0x009C0B0C
		public static Camera main { [FreeFunction] /* 0x003AC950-0x003AC988 */ get; } // 0x009C1310-0x009C1368 
		public static Camera current { [FreeFunction] /* 0x003AC988-0x003AC9C0 */ get; } // 0x009C1368-0x009C13C0 
		public static int allCamerasCount { get; } // 0x009C1710-0x009C1714 
		public static Camera[] allCameras { get; } // 0x009C1714-0x009C1778 
	
		// Nested types
		public enum StereoscopicEye // TypeDefIndex: 1846
		{
			Left = 0,
			Right = 1
		}
	
		public enum MonoOrStereoscopicEye // TypeDefIndex: 1847
		{
			Left = 0,
			Right = 1,
			Mono = 2
		}
	
		public delegate void CameraCallback(Camera cam); // TypeDefIndex: 1848; 0x009C1908-0x009C203C
	
		// Constructors
		public Camera(); // 0x009BFC40-0x009BFC44
	
		// Methods
		public Vector3 WorldToScreenPoint(Vector3 position, MonoOrStereoscopicEye eye); // 0x009C0B80-0x009C0BC4
		public Vector3 WorldToScreenPoint(Vector3 position); // 0x009C0C50-0x009C0C58
		public Vector3 ScreenToViewportPoint(Vector3 position); // 0x009C0C58-0x009C0C94
		public Vector3 ViewportToScreenPoint(Vector3 position); // 0x009C0D18-0x009C0D54
		private Ray ViewportPointToRay(Vector2 pos, MonoOrStereoscopicEye eye); // 0x009C0DD8-0x009C0E28
		public Ray ViewportPointToRay(Vector3 pos, MonoOrStereoscopicEye eye); // 0x009C0EB4-0x009C0FA0
		public Ray ViewportPointToRay(Vector3 pos); // 0x009C0FA0-0x009C0FE4
		private Ray ScreenPointToRay(Vector2 pos, MonoOrStereoscopicEye eye); // 0x009C0FE4-0x009C1034
		public Ray ScreenPointToRay(Vector3 pos, MonoOrStereoscopicEye eye); // 0x009C10C0-0x009C11AC
		public Ray ScreenPointToRay(Vector3 pos); // 0x009C11AC-0x009C11F0
		[FreeFunction] // 0x003AC8C0-0x003AC908
		internal GameObject RaycastTry(Ray ray, float distance, int layerMask); // 0x009C11F0-0x009C11F4
		[FreeFunction] // 0x003AC908-0x003AC950
		internal GameObject RaycastTry2D(Ray ray, float distance, int layerMask); // 0x009C1280-0x009C1284
		public Matrix4x4 GetStereoViewMatrix(StereoscopicEye eye); // 0x009C13C0-0x009C1408
		public Matrix4x4 GetStereoProjectionMatrix(StereoscopicEye eye); // 0x009C148C-0x009C14D4
		public void SetStereoProjectionMatrix(StereoscopicEye eye, Matrix4x4 matrix); // 0x009C1558-0x009C155C
		public void ResetStereoProjectionMatrices(); // 0x009C15E0-0x009C164C
		[FreeFunction] // 0x003AC9C0-0x003AC9F8
		private static int GetAllCamerasCount(); // 0x009C164C-0x009C16A4
		[FreeFunction] // 0x003AC9F8-0x003ACA30
		private static int GetAllCamerasImpl([NotNull] /* 0x003B1228-0x003B1238 */ out Camera[] cam); // 0x009C16A4-0x009C1710
		public static int GetAllCameras(Camera[] cameras); // 0x009C1778-0x009C1834
		[FreeFunction] // 0x003ACA30-0x003ACA78
		public void Render(); // 0x009C1834-0x009C18A0
		[RequiredByNativeCode] // 0x003ACA78-0x003ACA88
		private static void FireOnPreCull(Camera cam); // 0x009C18A0-0x009C1908
		[RequiredByNativeCode] // 0x003ACA88-0x003ACA98
		private static void FireOnPreRender(Camera cam); // 0x009C203C-0x009C20A4
		[RequiredByNativeCode] // 0x003ACA98-0x003ACAA8
		private static void FireOnPostRender(Camera cam); // 0x009C20A4-0x009C210C
		private void get_backgroundColor_Injected(out Color ret); // 0x009C02FC-0x009C0370
		private void set_backgroundColor_Injected(ref Color value); // 0x009C0398-0x009C040C
		private void get_rect_Injected(out Rect ret); // 0x009C05F8-0x009C066C
		private void set_rect_Injected(ref Rect value); // 0x009C0694-0x009C0708
		private void get_pixelRect_Injected(out Rect ret); // 0x009C0734-0x009C07A8
		private void set_pixelRect_Injected(ref Rect value); // 0x009C07D0-0x009C0844
		private void get_worldToCameraMatrix_Injected(out Matrix4x4 ret); // 0x009C09D8-0x009C0A4C
		private void get_projectionMatrix_Injected(out Matrix4x4 ret); // 0x009C0A94-0x009C0B08
		private void set_projectionMatrix_Injected(ref Matrix4x4 value); // 0x009C0B0C-0x009C0B80
		private void WorldToScreenPoint_Injected(ref Vector3 position, MonoOrStereoscopicEye eye, out Vector3 ret); // 0x009C0BC4-0x009C0C50
		private void ScreenToViewportPoint_Injected(ref Vector3 position, out Vector3 ret); // 0x009C0C94-0x009C0D18
		private void ViewportToScreenPoint_Injected(ref Vector3 position, out Vector3 ret); // 0x009C0D54-0x009C0DD8
		private void ViewportPointToRay_Injected(ref Vector2 pos, MonoOrStereoscopicEye eye, out Ray ret); // 0x009C0E28-0x009C0EB4
		private void ScreenPointToRay_Injected(ref Vector2 pos, MonoOrStereoscopicEye eye, out Ray ret); // 0x009C1034-0x009C10C0
		private GameObject RaycastTry_Injected(ref Ray ray, float distance, int layerMask); // 0x009C11F4-0x009C1280
		private GameObject RaycastTry2D_Injected(ref Ray ray, float distance, int layerMask); // 0x009C1284-0x009C1310
		private void GetStereoViewMatrix_Injected(StereoscopicEye eye, out Matrix4x4 ret); // 0x009C1408-0x009C148C
		private void GetStereoProjectionMatrix_Injected(StereoscopicEye eye, out Matrix4x4 ret); // 0x009C14D4-0x009C1558
		private void SetStereoProjectionMatrix_Injected(StereoscopicEye eye, ref Matrix4x4 matrix); // 0x009C155C-0x009C15E0
	}

	internal struct CastHelper<T> // TypeDefIndex: 1849
	{
		// Fields
		public T t;
		public IntPtr onePointerFurtherThanT;
	}

	internal static class ClassLibraryInitializer // TypeDefIndex: 1850
	{
		// Methods
		[RequiredByNativeCode] // 0x003ACAA8-0x003ACAB8
		private static void Init(); // 0x009C214C-0x009C2160
	}

	internal class LowerResBlitTexture : UnityEngine.Object // TypeDefIndex: 1851
	{
		// Methods
		[RequiredByNativeCode] // 0x003ACAB8-0x003ACAC8
		internal void LowerResBlitTextureDontStripMe(); // 0x008D30F4-0x008D30F8
	}

	internal class PreloadData : UnityEngine.Object // TypeDefIndex: 1852
	{
		// Methods
		[RequiredByNativeCode] // 0x003ACAC8-0x003ACAD8
		internal void PreloadDataDontStripMe(); // 0x008E018C-0x008E0190
	}

	[NativeClass] // 0x003A4C28-0x003A4CE0
	[NativeHeader] // 0x003A4C28-0x003A4CE0
	[RequiredByNativeCode] // 0x003A4C28-0x003A4CE0
	public struct Color : IEquatable<Color> // TypeDefIndex: 1853
	{
		// Fields
		public float r; // 0x00
		public float g; // 0x04
		public float b; // 0x08
		public float a; // 0x0C
	
		// Properties
		public static Color red { get; } // 0x009C2778-0x009C278C 
		public static Color green { get; } // 0x009C278C-0x009C27A0 
		public static Color blue { get; } // 0x009C27A0-0x009C27B4 
		public static Color white { get; } // 0x009C27B4-0x009C27C8 
		public static Color black { get; } // 0x009C27C8-0x009C27DC 
		public static Color yellow { get; } // 0x009C27DC-0x009C27F8 
		public static Color magenta { get; } // 0x009C27F8-0x009C280C 
		public static Color clear { get; } // 0x009C280C-0x009C2820 
		public float grayscale { get; } // 0x009C2820-0x009C2908 
		public Color linear { get; } // 0x009C2908-0x009C29C0 
		public Color gamma { get; } // 0x009C29C0-0x009C2A4C 
		public float maxColorComponent { get; } // 0x009C2A4C-0x009C2A54 
		public float this[int index] { get => default; set {} } // 0x009C2B20-0x009C2BFC 0x009C2BFC-0x009C2C04
	
		// Constructors
		public Color(float r, float g, float b, float a); // 0x009C2160-0x009C2180
		public Color(float r, float g, float b); // 0x009C2180-0x009C23AC
	
		// Methods
		public override string ToString(); // 0x009C23AC-0x009C23EC
		public override int GetHashCode(); // 0x009C241C-0x009C2544
		public override bool Equals(object other); // 0x009C2544-0x009C254C
		public bool Equals(Color other); // 0x009C254C-0x009C2554
		public static Color operator +(Color a, Color b); // 0x009C2554-0x009C2568
		public static Color operator -(Color a, Color b); // 0x009C2568-0x009C257C
		public static Color operator *(Color a, float b); // 0x009C257C-0x009C2590
		public static bool operator ==(Color lhs, Color rhs); // 0x009C2590-0x009C2698
		public static Color Lerp(Color a, Color b, float t); // 0x009C2698-0x009C2778
		public static implicit operator Vector4(Color c); // 0x009C23EC-0x009C241C
		public static implicit operator Color(Vector4 v); // 0x009C2A54-0x009C2B20
		public static Color HSVToRGB(float H, float S, float V); // 0x009C2C04-0x009C2C0C
		public static Color HSVToRGB(float H, float S, float V, bool hdr); // 0x009C2C0C-0x009C2E18
	}

	[UsedByNativeCode] // 0x003A4CE0-0x003A4CF0
	public struct Color32 // TypeDefIndex: 1854
	{
		// Fields
		[Ignore] // 0x003A9E20-0x003A9E58
		private int rgba; // 0x00
		public byte r; // 0x00
		public byte g; // 0x01
		public byte b; // 0x02
		public byte a; // 0x03
	
		// Constructors
		public Color32(byte r, byte g, byte b, byte a); // 0x009C2E18-0x009C2E2C
	
		// Methods
		public static implicit operator Color32(Color c); // 0x009C2E2C-0x009C2F18
		public static implicit operator Color(Color32 c); // 0x009C2F18-0x009C316C
		public override string ToString(); // 0x009C316C-0x009C3174
	}

	[NativeClass] // 0x003A4CF0-0x003A4D60
	[NativeHeader] // 0x003A4CF0-0x003A4D60
	[RequiredByNativeCode] // 0x003A4CF0-0x003A4D60
	public class Component : UnityEngine.Object // TypeDefIndex: 1855
	{
		// Properties
		public Transform transform { [FreeFunction] /* 0x003ACAD8-0x003ACB30 */ get; } // 0x009C3174-0x009C31E0 
		public GameObject gameObject { [FreeFunction] /* 0x003ACB30-0x003ACB78 */ get; } // 0x009C31E0-0x009C324C 
		public string tag { get; } // 0x009C3570-0x009C359C 
	
		// Constructors
		public Component(); // 0x009BEF38-0x009BEFA0
	
		// Methods
		[TypeInferenceRule] // 0x003ACB78-0x003ACB8C
		public Component GetComponent(Type type); // 0x009C324C-0x009C3280
		[FreeFunction] // 0x003ACB8C-0x003ACBD4
		internal void GetComponentFastPath(Type type, IntPtr oneFurtherThanResultValue); // 0x009C32F4-0x009C3378
		public T GetComponent<T>();
		[TypeInferenceRule] // 0x003ACBD4-0x003ACBE8
		public Component GetComponentInChildren(Type t, bool includeInactive); // 0x009C3378-0x009C33BC
		public T GetComponentInChildren<T>([UnityEngine.Internal.DefaultValue] /* 0x003B1238-0x003B1270 */ bool includeInactive);
		[ExcludeFromDocs] // 0x003ACBE8-0x003ACBF8
		public T GetComponentInChildren<T>();
		public T[] GetComponentsInChildren<T>(bool includeInactive);
		public void GetComponentsInChildren<T>(bool includeInactive, List<T> result);
		public T[] GetComponentsInChildren<T>();
		public void GetComponentsInChildren<T>(List<T> results);
		[TypeInferenceRule] // 0x003ACBF8-0x003ACC0C
		public Component GetComponentInParent(Type t); // 0x009C3440-0x009C3474
		public T GetComponentInParent<T>();
		public void GetComponentsInParent<T>(bool includeInactive, List<T> results);
		[FreeFunction] // 0x003ACC0C-0x003ACC54
		private void GetComponentsForListInternal(Type searchType, object resultList); // 0x009C34E8-0x009C356C
		public void GetComponents(Type type, List<Component> results); // 0x009C356C-0x009C3570
		public void GetComponents<T>(List<T> results);
		public T[] GetComponents<T>();
		public bool CompareTag(string tag); // 0x009C3608-0x009C363C
	}

	[NativeHeader] // 0x003A4D60-0x003A4DAC
	[RequiredByNativeCode] // 0x003A4D60-0x003A4DAC
	public sealed class Coroutine : YieldInstruction // TypeDefIndex: 1856
	{
		// Fields
		internal IntPtr m_Ptr; // 0x10
	
		// Constructors
		private Coroutine(); // 0x009C3740-0x009C3748
	
		// Methods
		~Coroutine(); // 0x009C3748-0x009C37C0
		[FreeFunction] // 0x003ACC54-0x003ACC90
		private static void ReleaseCoroutine(IntPtr ptr); // 0x009C37C0-0x009C382C
	}

	[RequiredByNativeCode] // 0x003A4DAC-0x003A4DBC
	internal class SetupCoroutine // TypeDefIndex: 1857
	{
		// Methods
		[RequiredByNativeCode] // 0x003ACC90-0x003ACCA0
		public static void InvokeMoveNext(IEnumerator enumerator, IntPtr returnValueAddress); // 0x008E9FF8-0x008EA134
		[RequiredByNativeCode] // 0x003ACCA0-0x003ACCB0
		public static object InvokeMember(object behaviour, string name, object variable); // 0x008EA134-0x008EA254
	}

	public struct CullingGroupEvent // TypeDefIndex: 1858
	{
		// Fields
		private int m_Index; // 0x00
		private byte m_PrevState; // 0x04
		private byte m_ThisState; // 0x05
	}

	[NativeHeader] // 0x003A4DBC-0x003A4DF4
	public class CullingGroup : IDisposable // TypeDefIndex: 1859
	{
		// Fields
		internal IntPtr m_Ptr; // 0x10
		private StateChanged m_OnStateChanged; // 0x18
	
		// Nested types
		public delegate void StateChanged(CullingGroupEvent sphere); // TypeDefIndex: 1860; 0x009C4214-0x009C4664
	
		// Methods
		~CullingGroup(); // 0x009C3FA8-0x009C405C
		[FreeFunction] // 0x003ACCB0-0x003ACCF8
		private void DisposeInternal(); // 0x009C40C8-0x009C4134
		public void Dispose(); // 0x009C4134-0x009C4180
		[RequiredByNativeCode] // 0x003ACCF8-0x003ACD08
		private static void SendEvents(CullingGroup cullingGroup, IntPtr eventsPtr, int count); // 0x009C4180-0x009C4214
		[FreeFunction] // 0x003ACD08-0x003ACD60
		private void FinalizerFailure(); // 0x009C405C-0x009C40C8
	}

	public enum CursorLockMode // TypeDefIndex: 1861
	{
		None = 0,
		Locked = 1,
		Confined = 2
	}

	[NativeHeader] // 0x003A4DF4-0x003A4E2C
	public class Cursor // TypeDefIndex: 1862
	{
		// Properties
		public static CursorLockMode lockState { get; } // 0x009C470C-0x009C4764 
	}

	public abstract class CustomYieldInstruction : IEnumerator // TypeDefIndex: 1863
	{
		// Properties
		public abstract bool keepWaiting { get; }
		public object Current { get; } // 0x009C476C-0x009C4774 
	
		// Constructors
		protected CustomYieldInstruction(); // 0x009C4764-0x009C476C
	
		// Methods
		public bool MoveNext(); // 0x009C4774-0x009C4780
		public void Reset(); // 0x009C4780-0x009C4784
	}

	[NativeHeader] // 0x003A4E2C-0x003A4E64
	internal sealed class DebugLogHandler : ILogHandler // TypeDefIndex: 1864
	{
		// Constructors
		public DebugLogHandler(); // 0x009C535C-0x009C5364
	
		// Methods
		[ThreadAndSerializationSafe] // 0x003ACD60-0x003ACD70
		internal static void Internal_Log(LogType level, string msg, UnityEngine.Object obj); // 0x009C5364-0x009C53E8
		[ThreadAndSerializationSafe] // 0x003ACD70-0x003ACD80
		internal static void Internal_LogException(Exception exception, UnityEngine.Object obj); // 0x009C53E8-0x009C545C
		public void LogFormat(LogType logType, UnityEngine.Object context, string format, params /* 0x003B1270-0x003B1280 */ object[] args); // 0x009C545C-0x009C5498
		public void LogException(Exception exception, UnityEngine.Object context); // 0x009C5498-0x009C5534
	}

	[NativeHeader] // 0x003A4E64-0x003A4E9C
	public class Debug // TypeDefIndex: 1865
	{
		// Fields
		internal static ILogger s_Logger; // 0x00
	
		// Properties
		public static ILogger unityLogger { get; } // 0x009C4784-0x009C47EC 
		[NativeProperty] // 0x003B1FA8-0x003B200C
		[StaticAccessor] // 0x003B1FA8-0x003B200C
		public static bool isDebugBuild { get; } // 0x009C5278-0x009C52D0 
	
		// Constructors
		static Debug(); // 0x009C52D0-0x009C535C
	
		// Methods
		[FreeFunction] // 0x003ACD80-0x003ACDB8
		public static void DrawLine(Vector3 start, Vector3 end, [UnityEngine.Internal.DefaultValue] /* 0x003B1280-0x003B12B8 */ Color color, [UnityEngine.Internal.DefaultValue] /* 0x003B12B8-0x003B12F0 */ float duration, [UnityEngine.Internal.DefaultValue] /* 0x003B12F0-0x003B1328 */ bool depthTest); // 0x009C47EC-0x009C4898
		public static void Log(object message); // 0x009B7818-0x009B78F4
		public static void LogFormat(string format, params /* 0x003B1328-0x003B1338 */ object[] args); // 0x009C493C-0x009C4A2C
		public static void LogError(object message); // 0x009C4A2C-0x009C4B08
		public static void LogError(object message, UnityEngine.Object context); // 0x009C4B08-0x009C4BF8
		public static void LogErrorFormat(string format, params /* 0x003B1338-0x003B1348 */ object[] args); // 0x009C4BF8-0x009C4CE8
		public static void LogErrorFormat(UnityEngine.Object context, string format, params /* 0x003B1348-0x003B1358 */ object[] args); // 0x009C4CE8-0x009C4DDC
		public static void LogException(Exception exception); // 0x009BCF24-0x009BD004
		public static void LogException(Exception exception, UnityEngine.Object context); // 0x009C4DDC-0x009C4EC8
		public static void LogWarning(object message); // 0x009C4EC8-0x009C4FA4
		public static void LogWarning(object message, UnityEngine.Object context); // 0x009C4FA4-0x009C5094
		public static void LogWarningFormat(string format, params /* 0x003B1358-0x003B1368 */ object[] args); // 0x009C5094-0x009C5184
		public static void LogWarningFormat(UnityEngine.Object context, string format, params /* 0x003B1368-0x003B1378 */ object[] args); // 0x009C5184-0x009C5278
		[Conditional] // 0x003ACDB8-0x003ACDF0
		public static void LogAssertion(object message); // 0x009BD5CC-0x009BD6A8
		private static void DrawLine_Injected(ref Vector3 start, ref Vector3 end, [UnityEngine.Internal.DefaultValue] /* 0x003B1378-0x003B13B0 */ ref Color color, [UnityEngine.Internal.DefaultValue] /* 0x003B13B0-0x003B13E8 */ float duration, [UnityEngine.Internal.DefaultValue] /* 0x003B13E8-0x003B1420 */ bool depthTest); // 0x009C4898-0x009C493C
	}

	[NativeHeader] // 0x003A4E9C-0x003A4EE8
	[UsedByNativeCode] // 0x003A4E9C-0x003A4EE8
	public class Display // TypeDefIndex: 1866
	{
		// Fields
		internal IntPtr nativeDisplay; // 0x10
		public static Display[] displays; // 0x00
		private static Display _mainDisplay; // 0x08
		[CompilerGenerated] // 0x003A9E58-0x003A9E94
		[DebuggerBrowsable] // 0x003A9E58-0x003A9E94
		private static DisplaysUpdatedDelegate onDisplaysUpdated; // 0x10
	
		// Properties
		public int renderingWidth { get; } // 0x009C55A8-0x009C562C 
		public int renderingHeight { get; } // 0x009C56B0-0x009C5734 
		public int systemWidth { get; } // 0x009C5734-0x009C57B8 
		public int systemHeight { get; } // 0x009C583C-0x009C58C0 
		public RenderBuffer colorBuffer { get; } // 0x009C58C0-0x009C594C 
		public RenderBuffer depthBuffer { get; } // 0x009C59D0-0x009C5A5C 
		public static Display main { get; } // 0x009C5B8C-0x009C5BF4 
	
		// Nested types
		public delegate void DisplaysUpdatedDelegate(); // TypeDefIndex: 1867; 0x009C5E98-0x009C6298
	
		// Constructors
		internal Display(); // 0x009C553C-0x009C557C
		internal Display(IntPtr nativeDisplay); // 0x009C557C-0x009C55A8
		static Display(); // 0x009C6298-0x009C63E8
	
		// Methods
		public static Vector3 RelativeMouseAt(Vector3 inputMouseCoordinates); // 0x009C5A5C-0x009C5B00
		[RequiredByNativeCode] // 0x003ACDF0-0x003ACE00
		private static void RecreateDisplayList(IntPtr[] nativeDisplay); // 0x009C5BF4-0x009C5DEC
		[RequiredByNativeCode] // 0x003ACE00-0x003ACE10
		private static void FireDisplaysUpdated(); // 0x009C5DEC-0x009C5E98
		[FreeFunction] // 0x003ACE10-0x003ACE48
		private static void GetSystemExtImpl(IntPtr nativeDisplay, out int w, out int h); // 0x009C57B8-0x009C583C
		[FreeFunction] // 0x003ACE48-0x003ACE80
		private static void GetRenderingExtImpl(IntPtr nativeDisplay, out int w, out int h); // 0x009C562C-0x009C56B0
		[FreeFunction] // 0x003ACE80-0x003ACEB8
		private static void GetRenderingBuffersImpl(IntPtr nativeDisplay, out RenderBuffer color, out RenderBuffer depth); // 0x009C594C-0x009C59D0
		[FreeFunction] // 0x003ACEB8-0x003ACEF0
		private static int RelativeMouseAtImpl(int x, int y, out int rx, out int ry); // 0x009C5B00-0x009C5B8C
	}

	[AttributeUsage] // 0x003A4EE8-0x003A4F24
	[UsedByNativeCode] // 0x003A4EE8-0x003A4F24
	public class ExcludeFromObjectFactoryAttribute : Attribute // TypeDefIndex: 1868
	{
		// Constructors
		public ExcludeFromObjectFactoryAttribute(); // 0x009C98A4-0x009C98AC
	}

	[ExcludeFromObjectFactory] // 0x003A4F24-0x003A4F70
	[NativeClass] // 0x003A4F24-0x003A4F70
	[RequiredByNativeCode] // 0x003A4F24-0x003A4F70
	internal class FailedToLoadScriptObject : UnityEngine.Object // TypeDefIndex: 1869
	{
	}

	[Serializable]
	[NativeHeader] // 0x003A4F70-0x003A4FE0
	[NativeHeader] // 0x003A4F70-0x003A4FE0
	[UsedByNativeCode] // 0x003A4F70-0x003A4FE0
	public class RectOffset // TypeDefIndex: 1870
	{
		// Fields
		[NonSerialized]
		[VisibleToOtherModules] // 0x003A9E94-0x003A9F0C
		internal IntPtr m_Ptr; // 0x10
		private readonly object m_SourceStyle; // 0x18
	
		// Properties
		[NativeProperty] // 0x003B200C-0x003B204C
		public int left { get; set; } // 0x008E2D0C-0x008E2D78 0x008E2AD0-0x008E2B44
		[NativeProperty] // 0x003B204C-0x003B208C
		public int right { get; set; } // 0x008E2D78-0x008E2DE4 0x008E2B44-0x008E2BB8
		[NativeProperty] // 0x003B208C-0x003B20CC
		public int top { get; set; } // 0x008E2DE4-0x008E2E50 0x008E2BB8-0x008E2C2C
		[NativeProperty] // 0x003B20CC-0x003B210C
		public int bottom { get; set; } // 0x008E2E50-0x008E2EBC 0x008E2C2C-0x008E2CA0
		public int horizontal { get; } // 0x008E2EBC-0x008E2F28 
		public int vertical { get; } // 0x008E2F28-0x008E2F94 
	
		// Constructors
		public RectOffset(); // 0x008E299C-0x008E29C8
		[VisibleToOtherModules] // 0x003ACEF0-0x003ACF68
		internal RectOffset(object sourceStyle, IntPtr source); // 0x008E2A20-0x008E2A58
		public RectOffset(int left, int right, int top, int bottom); // 0x008E2A58-0x008E2AD0
	
		// Methods
		[ThreadAndSerializationSafe] // 0x003ACF68-0x003ACF78
		private static IntPtr InternalCreate(); // 0x008E29C8-0x008E2A20
		[ThreadAndSerializationSafe] // 0x003ACF78-0x003ACF88
		private static void InternalDestroy(IntPtr ptr); // 0x008E2CA0-0x008E2D0C
		public Rect Add(Rect rect); // 0x008E2F94-0x008E2FCC
		public Rect Remove(Rect rect); // 0x008E3050-0x008E3088
		~RectOffset(); // 0x008E310C-0x008E318C
		public override string ToString(); // 0x008E3214-0x008E344C
		private void Dispose(); // 0x008E318C-0x008E3214
		private void Add_Injected(ref Rect rect, out Rect ret); // 0x008E2FCC-0x008E3050
		private void Remove_Injected(ref Rect rect, out Rect ret); // 0x008E3088-0x008E310C
	}

	[RequireComponent] // 0x003A4FE0-0x003A6044
	public class GUIElement : Behaviour // TypeDefIndex: 1871
	{
		// Constructors
		public GUIElement(); // 0x009CBD44-0x009CBD48
	}

	[Obsolete] // 0x003A6044-0x003A60CC
	[RequireComponent] // 0x003A6044-0x003A60CC
	public class GUILayer : Behaviour // TypeDefIndex: 1872
	{
		// Methods
		public GUIElement HitTest(Vector3 screenPosition); // 0x009CBD48-0x009CBD8C
		private GUIElement HitTest(Vector2 screenPosition); // 0x009CBD8C-0x009CBDB0
		private GUIElement HitTest_Injected(ref Vector2 screenPosition); // 0x009CBDB0-0x009CBE24
	}

	[ExcludeFromPreset] // 0x003A60CC-0x003A6128
	[NativeHeader] // 0x003A60CC-0x003A6128
	[UsedByNativeCode] // 0x003A60CC-0x003A6128
	public sealed class GameObject : UnityEngine.Object // TypeDefIndex: 1873
	{
		// Properties
		public Transform transform { [FreeFunction] /* 0x003AD288-0x003AD2D0 */ get; } // 0x009CC280-0x009CC2EC 
		public int layer { get; set; } // 0x009CC2EC-0x009CC358 0x009CC358-0x009CC3CC
		public bool activeSelf { [NativeMethod] /* 0x003AD314-0x003AD358 */ get; } // 0x009CC440-0x009CC4AC 
		public bool activeInHierarchy { [NativeMethod] /* 0x003AD358-0x003AD39C */ get; } // 0x009CC4AC-0x009CC518 
		public string tag { [FreeFunction] /* 0x003AD39C-0x003AD3F4 */ get; [FreeFunction] /* 0x003AD3F4-0x003AD43C */ set; } // 0x009C359C-0x009C3608 0x009CC518-0x009CC58C
		public Scene scene { [FreeFunction] /* 0x003AD56C-0x003AD5B4 */ get; } // 0x009CC684-0x009CC6AC 
		public GameObject gameObject { get; } // 0x009CC720-0x009CC724 
	
		// Constructors
		public GameObject(string name); // 0x009CBE24-0x009CBEA4
		public GameObject(); // 0x009CBF18-0x009CBF8C
		public GameObject(string name, params /* 0x003B1420-0x003B1430 */ Type[] components); // 0x009CBF8C-0x009CC064
	
		// Methods
		[FreeFunction] // 0x003ACF88-0x003ACFC0
		public static GameObject CreatePrimitive(PrimitiveType type); // 0x009CC068-0x009CC0D4
		public T GetComponent<T>();
		[FreeFunction] // 0x003ACFC0-0x003AD03C
		[TypeInferenceRule] // 0x003ACFC0-0x003AD03C
		public Component GetComponent(Type type); // 0x009C3280-0x009C32F4
		[FreeFunction] // 0x003AD03C-0x003AD0B4
		[NativeWritableSelf] // 0x003AD03C-0x003AD0B4
		internal void GetComponentFastPath(Type type, IntPtr oneFurtherThanResultValue); // 0x009CC0D4-0x009CC158
		[FreeFunction] // 0x003AD0B4-0x003AD130
		[TypeInferenceRule] // 0x003AD0B4-0x003AD130
		public Component GetComponentInChildren(Type type, bool includeInactive); // 0x009C33BC-0x009C3440
		[ExcludeFromDocs] // 0x003AD130-0x003AD140
		public T GetComponentInChildren<T>();
		public T GetComponentInChildren<T>([UnityEngine.Internal.DefaultValue] /* 0x003B1430-0x003B1468 */ bool includeInactive);
		[FreeFunction] // 0x003AD140-0x003AD1BC
		[TypeInferenceRule] // 0x003AD140-0x003AD1BC
		public Component GetComponentInParent(Type type); // 0x009C3474-0x009C34E8
		public T GetComponentInParent<T>();
		[FreeFunction] // 0x003AD1BC-0x003AD220
		private Array GetComponentsInternal(Type type, bool useSearchTypeAsArrayReturnType, bool recursive, bool includeInactive, bool reverse, object resultList); // 0x009CC158-0x009CC20C
		public T[] GetComponents<T>();
		public void GetComponents<T>(List<T> results);
		public T[] GetComponentsInChildren<T>(bool includeInactive);
		public void GetComponentsInChildren<T>(bool includeInactive, List<T> results);
		public T[] GetComponentsInChildren<T>();
		public void GetComponentsInParent<T>(bool includeInactive, List<T> results);
		[FreeFunction] // 0x003AD220-0x003AD274
		private Component Internal_AddComponentWithType(Type componentType); // 0x009CC20C-0x009CC280
		[TypeInferenceRule] // 0x003AD274-0x003AD288
		public Component AddComponent(Type componentType); // 0x009CC064-0x009CC068
		public T AddComponent<T>()
			where T : Component;
		[NativeMethod] // 0x003AD2D0-0x003AD314
		public void SetActive(bool value); // 0x009CC3CC-0x009CC440
		[FreeFunction] // 0x003AD43C-0x003AD490
		public bool CompareTag(string tag); // 0x009C363C-0x009C36B0
		[FreeFunction] // 0x003AD490-0x003AD4E4
		public void SendMessage(string methodName, [UnityEngine.Internal.DefaultValue] /* 0x003B1468-0x003B14A0 */ object value, [UnityEngine.Internal.DefaultValue] /* 0x003B14A0-0x003B14D8 */ SendMessageOptions options); // 0x009CC58C-0x009CC618
		[FreeFunction] // 0x003AD4E4-0x003AD528
		private static void Internal_CreateGameObject([Writable] /* 0x003B14D8-0x003B14E8 */ GameObject self, string name); // 0x009CBEA4-0x009CBF18
		[FreeFunction] // 0x003AD528-0x003AD56C
		public static GameObject Find(string name); // 0x009CC618-0x009CC684
		private void get_scene_Injected(out Scene ret); // 0x009CC6AC-0x009CC720
	}

	[NativeHeader] // 0x003A6128-0x003A618C
	[StaticAccessor] // 0x003A6128-0x003A618C
	public sealed class GeometryUtility // TypeDefIndex: 1874
	{
		// Methods
		public static Plane[] CalculateFrustumPlanes(Camera camera); // 0x008D044C-0x008D04B4
		public static void CalculateFrustumPlanes(Camera camera, Plane[] planes); // 0x008D04B4-0x008D05B4
		public static void CalculateFrustumPlanes(Matrix4x4 worldToProjectionMatrix, Plane[] planes); // 0x008D0920-0x008D0A2C
		public static bool TestPlanesAABB(Plane[] planes, Bounds bounds); // 0x008D0A30-0x008D0A34
		[NativeName] // 0x003AD5B4-0x003AD5EC
		private static void Internal_ExtractPlanes(out Plane[] planes, Matrix4x4 worldToProjectionMatrix); // 0x008D0A2C-0x008D0A30
		private static bool TestPlanesAABB_Injected(Plane[] planes, ref Bounds bounds); // 0x008D0A34-0x008D0AA8
		private static void Internal_ExtractPlanes_Injected(out Plane[] planes, ref Matrix4x4 worldToProjectionMatrix); // 0x008D0AA8-0x008D0B1C
	}

	[NativeHeader] // 0x003A618C-0x003A61F0
	[StaticAccessor] // 0x003A618C-0x003A61F0
	public sealed class Gizmos // TypeDefIndex: 1875
	{
		// Properties
		public static Color color { set; } // 0x008D0E54-0x008D0E7C
		public static Matrix4x4 matrix { set; } // 0x008D0EE8-0x008D0EEC
	
		// Methods
		[NativeThrows] // 0x003AD5EC-0x003AD5FC
		public static void DrawLine(Vector3 from, Vector3 to); // 0x008D0B1C-0x008D0B50
		[NativeThrows] // 0x003AD5FC-0x003AD60C
		public static void DrawWireSphere(Vector3 center, float radius); // 0x008D0BC4-0x008D0BF0
		[NativeThrows] // 0x003AD60C-0x003AD61C
		public static void DrawSphere(Vector3 center, float radius); // 0x008D0C64-0x008D0C90
		[NativeThrows] // 0x003AD61C-0x003AD62C
		public static void DrawWireCube(Vector3 center, Vector3 size); // 0x008D0D04-0x008D0D38
		[NativeThrows] // 0x003AD62C-0x003AD63C
		public static void DrawCube(Vector3 center, Vector3 size); // 0x008D0DAC-0x008D0DE0
		private static void DrawLine_Injected(ref Vector3 from, ref Vector3 to); // 0x008D0B50-0x008D0BC4
		private static void DrawWireSphere_Injected(ref Vector3 center, float radius); // 0x008D0BF0-0x008D0C64
		private static void DrawSphere_Injected(ref Vector3 center, float radius); // 0x008D0C90-0x008D0D04
		private static void DrawWireCube_Injected(ref Vector3 center, ref Vector3 size); // 0x008D0D38-0x008D0DAC
		private static void DrawCube_Injected(ref Vector3 center, ref Vector3 size); // 0x008D0DE0-0x008D0E54
		private static void set_color_Injected(ref Color value); // 0x008D0E7C-0x008D0EE8
		private static void set_matrix_Injected(ref Matrix4x4 value); // 0x008D0EEC-0x008D0F58
	}

	[NativeHeader] // 0x003A61F0-0x003A623C
	[RequiredByNativeCode] // 0x003A61F0-0x003A623C
	public class Gradient : IEquatable<Gradient> // TypeDefIndex: 1876
	{
		// Fields
		internal IntPtr m_Ptr; // 0x10
	
		// Constructors
		[RequiredByNativeCode] // 0x003AD63C-0x003AD64C
		public Gradient(); // 0x008D1110-0x008D113C
	
		// Methods
		[FreeFunction] // 0x003AD64C-0x003AD6A0
		private static IntPtr Init(); // 0x008D113C-0x008D1194
		[FreeFunction] // 0x003AD6A0-0x003AD704
		private void Cleanup(); // 0x008D1194-0x008D1200
		[FreeFunction] // 0x003AD704-0x003AD75C
		private bool Internal_Equals(IntPtr other); // 0x008D1200-0x008D1274
		~Gradient(); // 0x008D1274-0x008D12E8
		public override bool Equals(object o); // 0x008D12E8-0x008D1400
		public bool Equals(Gradient other); // 0x008D1400-0x008D14AC
		public override int GetHashCode(); // 0x008D14AC-0x008D14B8
	}

	internal enum EnabledOrientation // TypeDefIndex: 1877
	{
		kAutorotateToPortrait = 1,
		kAutorotateToPortraitUpsideDown = 2,
		kAutorotateToLandscapeLeft = 4,
		kAutorotateToLandscapeRight = 8
	}

	[NativeHeader] // 0x003A623C-0x003A62C4
	[NativeHeader] // 0x003A623C-0x003A62C4
	[StaticAccessor] // 0x003A623C-0x003A62C4
	public sealed class Screen // TypeDefIndex: 1878
	{
		// Properties
		public static int width { [NativeMethod] /* 0x003AD75C-0x003AD7B0 */ get; } // 0x008E8250-0x008E82A8 
		public static int height { [NativeMethod] /* 0x003AD7B0-0x003AD804 */ get; } // 0x008E82A8-0x008E8300 
		public static float dpi { [NativeName] /* 0x003AD804-0x003AD83C */ get; } // 0x008E8300-0x008E8358 
		public static ScreenOrientation orientation { get; set; } // 0x008E841C-0x008E8420 0x008E8420-0x008E84A0
		[NativeProperty] // 0x003B210C-0x003B2144
		public static int sleepTimeout { set; } // 0x008E84A0-0x008E850C
		public static bool autorotateToPortrait { get; set; } // 0x008E85EC-0x008E85F4 0x008E85F4-0x008E8600
		public static bool autorotateToPortraitUpsideDown { get; set; } // 0x008E8600-0x008E8608 0x008E8608-0x008E8614
		public static bool autorotateToLandscapeLeft { get; set; } // 0x008E8614-0x008E861C 0x008E861C-0x008E8628
		public static bool autorotateToLandscapeRight { get; set; } // 0x008E8628-0x008E8630 0x008E8630-0x008E8658
	
		// Methods
		private static void RequestOrientation(ScreenOrientation orient); // 0x008E8358-0x008E83C4
		private static ScreenOrientation GetScreenOrientation(); // 0x008E83C4-0x008E841C
		[NativeName] // 0x003AD83C-0x003AD874
		private static bool IsOrientationEnabled(EnabledOrientation orient); // 0x008E850C-0x008E8578
		[NativeName] // 0x003AD874-0x003AD8AC
		private static void SetOrientationEnabled(EnabledOrientation orient, bool enabled); // 0x008E8578-0x008E85EC
	}

	[NativeHeader] // 0x003A62C4-0x003A62FC
	public struct RenderBuffer // TypeDefIndex: 1879
	{
		// Fields
		internal int m_RenderTextureInstanceID; // 0x00
		internal IntPtr m_BufferPtr; // 0x08
	
		// Methods
		[FreeFunction] // 0x003AD8AC-0x003AD900
		public IntPtr GetNativeRenderBufferPtr(); // 0x008E511C-0x008E5124
		private static IntPtr GetNativeRenderBufferPtr_Injected(ref RenderBuffer _unity_self); // 0x008E50B0-0x008E511C
	}

	[NativeHeader] // 0x003A62FC-0x003A63C8
	[NativeHeader] // 0x003A62FC-0x003A63C8
	[NativeHeader] // 0x003A62FC-0x003A63C8
	[NativeHeader] // 0x003A62FC-0x003A63C8
	[NativeHeader] // 0x003A62FC-0x003A63C8
	public class Graphics // TypeDefIndex: 1880
	{
		// Fields
		internal static readonly int kMaxDrawMeshInstanceCount; // 0x00
	
		// Constructors
		static Graphics(); // 0x008D18A0-0x008D18F4
	
		// Methods
		[FreeFunction] // 0x003AD900-0x003AD938
		private static int Internal_GetMaxDrawMeshInstanceCount(); // 0x008D14B8-0x008D1510
		[NativeMethod] // 0x003AD938-0x003AD99C
		private static void Internal_SetRTSimple(RenderBuffer color, RenderBuffer depth, int mip, CubemapFace face, int depthSlice); // 0x008D1510-0x008D15A8
		[NativeMethod] // 0x003AD99C-0x003ADA00
		public static void ExecuteCommandBuffer([NotNull] /* 0x003B14E8-0x003B14F8 */ CommandBuffer buffer); // 0x008D1644-0x008D16B0
		internal static void SetRenderTargetImpl(RenderBuffer colorBuffer, RenderBuffer depthBuffer, int mipLevel, CubemapFace face, int depthSlice); // 0x008D16B0-0x008D175C
		public static void SetRenderTarget(RenderBuffer colorBuffer, RenderBuffer depthBuffer, [UnityEngine.Internal.DefaultValue] /* 0x003B14F8-0x003B1530 */ int mipLevel, [UnityEngine.Internal.DefaultValue] /* 0x003B1530-0x003B1568 */ CubemapFace face, [UnityEngine.Internal.DefaultValue] /* 0x003B1568-0x003B15A0 */ int depthSlice); // 0x008D175C-0x008D1808
		[ExcludeFromDocs] // 0x003ADA00-0x003ADA10
		public static void SetRenderTarget(RenderBuffer colorBuffer, RenderBuffer depthBuffer); // 0x008D1808-0x008D18A0
		private static void Internal_SetRTSimple_Injected(ref RenderBuffer color, ref RenderBuffer depth, int mip, CubemapFace face, int depthSlice); // 0x008D15A8-0x008D1644
	}

	[NativeHeader] // 0x003A63C8-0x003A6498
	[NativeHeader] // 0x003A63C8-0x003A6498
	[NativeHeader] // 0x003A63C8-0x003A6498
	[NativeHeader] // 0x003A63C8-0x003A6498
	[StaticAccessor] // 0x003A63C8-0x003A6498
	public sealed class GL // TypeDefIndex: 1881
	{
		// Methods
		[NativeName] // 0x003ADA10-0x003ADA48
		public static void Vertex3(float x, float y, float z); // 0x009CB828-0x009CB8B0
		public static void Vertex(Vector3 v); // 0x009CB8B0-0x009CB8B4
		[NativeName] // 0x003ADA48-0x003ADA80
		private static void ImmediateColor(float r, float g, float b, float a); // 0x009CB8B4-0x009CB93C
		public static void Color(Color c); // 0x009CB93C-0x009CB940
		[NativeName] // 0x003ADA80-0x003ADAB8
		public static void MultMatrix(Matrix4x4 m); // 0x009CB940-0x009CB944
		[FreeFunction] // 0x003ADAB8-0x003ADAF0
		public static void PushMatrix(); // 0x009CB9B0-0x009CBA08
		[FreeFunction] // 0x003ADAF0-0x003ADB28
		public static void PopMatrix(); // 0x009CBA08-0x009CBA60
		[FreeFunction] // 0x003ADB28-0x003ADB38
		private static void GLIssuePluginEvent(IntPtr callback, int eventID); // 0x009CBA60-0x009CBAD4
		public static void IssuePluginEvent(IntPtr callback, int eventID); // 0x009CBAD4-0x009CBB8C
		[FreeFunction] // 0x003ADB38-0x003ADB80
		public static void Begin(int mode); // 0x009CBB8C-0x009CBBF8
		[FreeFunction] // 0x003ADB80-0x003ADBB8
		public static void End(); // 0x009CBBF8-0x009CBC50
		[FreeFunction] // 0x003ADBB8-0x003ADBC8
		private static void GLClear(bool clearDepth, bool clearColor, Color backgroundColor, float depth); // 0x009CBC50-0x009CBC84
		public static void Clear(bool clearDepth, bool clearColor, Color backgroundColor); // 0x009CBD10-0x009CBD44
		private static void MultMatrix_Injected(ref Matrix4x4 m); // 0x009CB944-0x009CB9B0
		private static void GLClear_Injected(bool clearDepth, bool clearColor, ref Color backgroundColor, float depth); // 0x009CBC84-0x009CBD10
	}

	[RequiredByNativeCode] // 0x003A6498-0x003A64A8
	public struct Resolution // TypeDefIndex: 1882
	{
		// Fields
		private int m_Width; // 0x00
		private int m_Height; // 0x04
		private int m_RefreshRate; // 0x08
	
		// Methods
		public override string ToString(); // 0x008E7204-0x008E7258
	}

	[NativeHeader] // 0x003A64A8-0x003A6530
	[NativeHeader] // 0x003A64A8-0x003A6530
	[StaticAccessor] // 0x003A64A8-0x003A6530
	public sealed class QualitySettings : UnityEngine.Object // TypeDefIndex: 1883
	{
		// Properties
		public static ColorSpace activeColorSpace { [NativeName] /* 0x003ADBC8-0x003ADC2C */ [StaticAccessor] /* 0x003ADBC8-0x003ADC2C */ get; } // 0x008E0A60-0x008E0AC4 
	}

	[NativeHeader] // 0x003A6530-0x003A6590
	[NativeHeader] // 0x003A6530-0x003A6590
	public sealed class TrailRenderer : Renderer // TypeDefIndex: 1884
	{
		// Properties
		public float time { get; set; } // 0x00C410EC-0x00C41158 0x00C41158-0x00C411CC
		public float startWidth { get; set; } // 0x00C411CC-0x00C41238 0x00C41238-0x00C412AC
		public float endWidth { get; set; } // 0x00C412AC-0x00C41318 0x00C41318-0x00C4138C
	}

	[NativeHeader] // 0x003A6590-0x003A65F0
	[NativeHeader] // 0x003A6590-0x003A65F0
	public sealed class LineRenderer : Renderer // TypeDefIndex: 1885
	{
		// Properties
		public Color startColor { set; } // 0x008D286C-0x008D2894
		public Color endColor { set; } // 0x008D2894-0x008D28BC
	
		// Methods
		[Obsolete] // 0x003ADC2C-0x003ADC68
		public void SetColors(Color start, Color end); // 0x008D2804-0x008D286C
		private void set_startColor_Injected(ref Color value); // 0x008D28BC-0x008D2930
		private void set_endColor_Injected(ref Color value); // 0x008D2930-0x008D29A4
	}

	[NativeHeader] // 0x003A65F0-0x003A66AC
	[NativeHeader] // 0x003A65F0-0x003A66AC
	[RequireComponent] // 0x003A65F0-0x003A66AC
	[UsedByNativeCode] // 0x003A65F0-0x003A66AC
	public class Renderer : Component // TypeDefIndex: 1886
	{
		// Properties
		public bool enabled { get; set; } // 0x008E6AA4-0x008E6B10 0x008E6B10-0x008E6B84
		public int sortingLayerID { get; } // 0x008E6B84-0x008E6BF0 
		public int sortingOrder { get; } // 0x008E6BF0-0x008E6C5C 
		public Material[] materials { get; } // 0x008E6C5C-0x008E6C60 
		public Material material { get; set; } // 0x008E6C60-0x008E6C64 0x008E6C64-0x008E6C68
		public Material sharedMaterial { get; set; } // 0x008E6C68-0x008E6C6C 0x008E6C6C-0x008E6C70
		public Material[] sharedMaterials { set; } // 0x008E6C70-0x008E6C74
	
		// Methods
		[FreeFunction] // 0x003ADC68-0x003ADCBC
		private Material GetMaterial(); // 0x008E6878-0x008E68E4
		[FreeFunction] // 0x003ADCBC-0x003ADD10
		private Material GetSharedMaterial(); // 0x008E68E4-0x008E6950
		[FreeFunction] // 0x003ADD10-0x003ADD64
		private void SetMaterial(Material m); // 0x008E6950-0x008E69C4
		[FreeFunction] // 0x003ADD64-0x003ADDB8
		private Material[] GetMaterialArray(); // 0x008E69C4-0x008E6A30
		[FreeFunction] // 0x003ADDB8-0x003ADE0C
		private void SetMaterialArray([NotNull] /* 0x003B15A0-0x003B15B0 */ Material[] m); // 0x008E6A30-0x008E6AA4
	}

	[NativeHeader] // 0x003A66AC-0x003A6758
	[NativeHeader] // 0x003A66AC-0x003A6758
	[NativeHeader] // 0x003A66AC-0x003A6758
	[StaticAccessor] // 0x003A66AC-0x003A6758
	public sealed class RenderSettings : UnityEngine.Object // TypeDefIndex: 1887
	{
		// Properties
		[NativeProperty] // 0x003B2144-0x003B217C
		public static bool fog { get; set; } // 0x008E5124-0x008E517C 0x008E517C-0x008E51E8
		[NativeProperty] // 0x003B217C-0x003B21B4
		public static float fogStartDistance { get; set; } // 0x008E51E8-0x008E5240 0x008E5240-0x008E52B0
		[NativeProperty] // 0x003B21B4-0x003B21EC
		public static float fogEndDistance { get; set; } // 0x008E52B0-0x008E5308 0x008E5308-0x008E5378
		public static FogMode fogMode { get; set; } // 0x008E5378-0x008E53D0 0x008E53D0-0x008E543C
		public static Color fogColor { get; set; } // 0x008E543C-0x008E5468 0x008E54D4-0x008E54FC
		public static float fogDensity { get; set; } // 0x008E5568-0x008E55C0 0x008E55C0-0x008E5630
		[NativeProperty] // 0x003B21EC-0x003B2224
		public static Material skybox { get; set; } // 0x008E5630-0x008E5688 0x008E5688-0x008E56F4
	
		// Methods
		private static void get_fogColor_Injected(out Color ret); // 0x008E5468-0x008E54D4
		private static void set_fogColor_Injected(ref Color value); // 0x008E54FC-0x008E5568
	}

	[NativeHeader] // 0x003A6758-0x003A6848
	[NativeHeader] // 0x003A6758-0x003A6848
	[NativeHeader] // 0x003A6758-0x003A6848
	[NativeHeader] // 0x003A6758-0x003A6848
	[NativeHeader] // 0x003A6758-0x003A6848
	[NativeHeader] // 0x003A6758-0x003A6848
	public sealed class Shader : UnityEngine.Object // TypeDefIndex: 1888
	{
		// Constructors
		private Shader(); // 0x008EA254-0x008EA2BC
	
		// Methods
		[FreeFunction] // 0x003ADE0C-0x003ADE44
		public static Shader Find(string name); // 0x008EA2BC-0x008EA328
		[FreeFunction] // 0x003ADE44-0x003ADE7C
		public static void DisableKeyword(string keyword); // 0x008EA328-0x008EA394
		[FreeFunction] // 0x003ADE7C-0x003ADED0
		public static int PropertyToID(string name); // 0x008D3D98-0x008D3E04
	}

	[NativeHeader] // 0x003A6848-0x003A68A8
	[NativeHeader] // 0x003A6848-0x003A68A8
	public class Material : UnityEngine.Object // TypeDefIndex: 1889
	{
		// Properties
		public Color color { get; set; } // 0x008D37CC-0x008D381C 0x008D3864-0x008D38E4
		public Texture mainTexture { get; set; } // 0x008D3948-0x008D39A0 0x008D39CC-0x008D3A34
		public Vector2 mainTextureOffset { get; set; } // 0x008D3A68-0x008D3AC0 0x008D3AEC-0x008D3B68
		public Vector2 mainTextureScale { get; set; } // 0x008D3BB0-0x008D3C08 0x008D3C34-0x008D3CB0
	
		// Constructors
		public Material(Shader shader); // 0x008D3500-0x008D3580
		[RequiredByNativeCode] // 0x003ADED0-0x003ADEE0
		public Material(Material source); // 0x008D35FC-0x008D367C
		[EditorBrowsable] // 0x003ADEE0-0x003ADF34
		[Obsolete] // 0x003ADEE0-0x003ADF34
		public Material(string contents); // 0x008D36F0-0x008D3760
	
		// Methods
		[FreeFunction] // 0x003ADF34-0x003ADF6C
		private static void CreateWithShader([Writable] /* 0x003B15B0-0x003B15C0 */ Material self, [NotNull] /* 0x003B15C0-0x003B15D0 */ Shader shader); // 0x008D3588-0x008D35FC
		[FreeFunction] // 0x003ADF6C-0x003ADFA4
		private static void CreateWithMaterial([Writable] /* 0x003B15D0-0x003B15E0 */ Material self, [NotNull] /* 0x003B15E0-0x003B15F0 */ Material source); // 0x008D367C-0x008D36F0
		[FreeFunction] // 0x003ADFA4-0x003ADFDC
		private static void CreateWithString([Writable] /* 0x003B15F0-0x003B1600 */ Material self); // 0x008D3760-0x008D37CC
		[NativeName] // 0x003ADFDC-0x003AE014
		public bool HasProperty(int nameID); // 0x008D3CF8-0x008D3D6C
		public bool HasProperty(string name); // 0x008D3D6C-0x008D3D98
		public void EnableKeyword(string keyword); // 0x008D3E04-0x008D3E78
		public void DisableKeyword(string keyword); // 0x008D3E78-0x008D3EEC
		[FreeFunction] // 0x003AE014-0x003AE05C
		public bool SetPass(int pass); // 0x008D3EEC-0x008D3F60
		[NativeName] // 0x003AE05C-0x003AE094
		private void SetFloatImpl(int name, float value); // 0x008D3F60-0x008D3FEC
		[NativeName] // 0x003AE094-0x003AE0CC
		private void SetColorImpl(int name, Color value); // 0x008D3FEC-0x008D4014
		[NativeName] // 0x003AE0CC-0x003AE104
		private void SetTextureImpl(int name, Texture value); // 0x008D4098-0x008D411C
		[NativeName] // 0x003AE104-0x003AE13C
		private float GetFloatImpl(int name); // 0x008D411C-0x008D4190
		[NativeName] // 0x003AE13C-0x003AE174
		private Color GetColorImpl(int name); // 0x008D4190-0x008D41BC
		[NativeName] // 0x003AE174-0x003AE1AC
		private Texture GetTextureImpl(int name); // 0x008D4240-0x008D42B4
		[NativeName] // 0x003AE1AC-0x003AE1E4
		private Vector4 GetTextureScaleAndOffsetImpl(int name); // 0x008D42B4-0x008D42E0
		[NativeName] // 0x003AE1E4-0x003AE21C
		private void SetTextureOffsetImpl(int name, Vector2 offset); // 0x008D4364-0x008D4388
		[NativeName] // 0x003AE21C-0x003AE254
		private void SetTextureScaleImpl(int name, Vector2 scale); // 0x008D440C-0x008D4430
		public void SetFloat(string name, float value); // 0x008D44B4-0x008D44F0
		public void SetInt(string name, int value); // 0x008D44F0-0x008D4524
		public void SetColor(string name, Color value); // 0x008D38E4-0x008D3948
		public void SetVector(string name, Vector4 value); // 0x008D4524-0x008D45A4
		public void SetTexture(string name, Texture value); // 0x008D3A34-0x008D3A68
		public float GetFloat(string name); // 0x008D45A4-0x008D45D0
		public Color GetColor(string name); // 0x008D381C-0x008D3864
		public Vector4 GetVector(string name); // 0x008D45D0-0x008D4620
		public Texture GetTexture(string name); // 0x008D39A0-0x008D39CC
		public void SetTextureOffset(string name, Vector2 value); // 0x008D3B68-0x008D3BB0
		public void SetTextureScale(string name, Vector2 value); // 0x008D3CB0-0x008D3CF8
		public Vector2 GetTextureOffset(string name); // 0x008D3AC0-0x008D3AEC
		public Vector2 GetTextureOffset(int nameID); // 0x008D4620-0x008D465C
		public Vector2 GetTextureScale(string name); // 0x008D3C08-0x008D3C34
		public Vector2 GetTextureScale(int nameID); // 0x008D465C-0x008D4698
		private void SetColorImpl_Injected(int name, ref Color value); // 0x008D4014-0x008D4098
		private void GetColorImpl_Injected(int name, out Color ret); // 0x008D41BC-0x008D4240
		private void GetTextureScaleAndOffsetImpl_Injected(int name, out Vector4 ret); // 0x008D42E0-0x008D4364
		private void SetTextureOffsetImpl_Injected(int name, ref Vector2 offset); // 0x008D4388-0x008D440C
		private void SetTextureScaleImpl_Injected(int name, ref Vector2 scale); // 0x008D4430-0x008D44B4
	}

	[NativeHeader] // 0x003A68A8-0x003A697C
	[NativeHeader] // 0x003A68A8-0x003A697C
	[RequireComponent] // 0x003A68A8-0x003A697C
	[RequireComponent] // 0x003A68A8-0x003A697C
	public sealed class Light : Behaviour // TypeDefIndex: 1890
	{
		// Fields
		private int m_BakedIndex; // 0x18
	
		// Properties
		public Color color { get; set; } // 0x008D2508-0x008D2534 0x008D25A8-0x008D25D0
		public float intensity { get; set; } // 0x008D2644-0x008D26B0 0x008D26B0-0x008D2724
		public float shadowStrength { get; [FreeFunction] /* 0x003AE254-0x003AE29C */ set; } // 0x008D2724-0x008D2790 0x008D2790-0x008D2804
	
		// Methods
		private void get_color_Injected(out Color ret); // 0x008D2534-0x008D25A8
		private void set_color_Injected(ref Color value); // 0x008D25D0-0x008D2644
	}

	[NativeHeader] // 0x003A697C-0x003A6A04
	[RequireComponent] // 0x003A697C-0x003A6A04
	public sealed class MeshFilter : Component // TypeDefIndex: 1891
	{
		// Properties
		public Mesh sharedMesh { get; } // 0x008D8778-0x008D87E4 
		public Mesh mesh { [NativeName] /* 0x003AE2AC-0x003AE2E4 */ get; [NativeName] /* 0x003AE2E4-0x003AE31C */ set; } // 0x008D87E4-0x008D8850 0x008D8850-0x008D88C4
	
		// Methods
		[RequiredByNativeCode] // 0x003AE29C-0x003AE2AC
		private void DontStripMeshFilter(); // 0x008D8774-0x008D8778
	}

	public enum FogMode // TypeDefIndex: 1892
	{
		Linear = 1,
		Exponential = 2,
		ExponentialSquared = 3
	}

	[Flags] // 0x003A6A04-0x003A6A14
	public enum LightmapBakeType // TypeDefIndex: 1893
	{
		Mixed = 1,
		Baked = 2,
		Realtime = 4
	}

	public enum MixedLightingMode // TypeDefIndex: 1894
	{
		IndirectOnly = 0,
		Subtractive = 1,
		Shadowmask = 2
	}

	public enum CameraClearFlags // TypeDefIndex: 1895
	{
		Skybox = 1,
		Color = 2,
		SolidColor = 2,
		Depth = 3,
		Nothing = 4
	}

	[Flags] // 0x003A6A14-0x003A6A24
	public enum DepthTextureMode // TypeDefIndex: 1896
	{
		None = 0,
		Depth = 1,
		DepthNormals = 2,
		MotionVectors = 4
	}

	public enum MeshTopology // TypeDefIndex: 1897
	{
		Triangles = 0,
		Quads = 2,
		Lines = 3,
		LineStrip = 4,
		Points = 5
	}

	public enum ColorSpace // TypeDefIndex: 1898
	{
		Uninitialized = -1,
		Gamma = 0,
		Linear = 1
	}

	public enum ScreenOrientation // TypeDefIndex: 1899
	{
		Unknown = 0,
		Portrait = 1,
		PortraitUpsideDown = 2,
		LandscapeLeft = 3,
		Landscape = 3,
		LandscapeRight = 4,
		AutoRotation = 5
	}

	public enum FilterMode // TypeDefIndex: 1900
	{
		Point = 0,
		Bilinear = 1,
		Trilinear = 2
	}

	public enum TextureWrapMode // TypeDefIndex: 1901
	{
		Repeat = 0,
		Clamp = 1,
		Mirror = 2,
		MirrorOnce = 3
	}

	public enum TextureFormat // TypeDefIndex: 1902
	{
		Alpha8 = 1,
		ARGB4444 = 2,
		RGB24 = 3,
		RGBA32 = 4,
		ARGB32 = 5,
		RGB565 = 7,
		R16 = 9,
		DXT1 = 10,
		DXT5 = 12,
		RGBA4444 = 13,
		BGRA32 = 14,
		RHalf = 15,
		RGHalf = 16,
		RGBAHalf = 17,
		RFloat = 18,
		RGFloat = 19,
		RGBAFloat = 20,
		YUY2 = 21,
		RGB9e5Float = 22,
		BC6H = 24,
		BC7 = 25,
		BC4 = 26,
		BC5 = 27,
		DXT1Crunched = 28,
		DXT5Crunched = 29,
		PVRTC_RGB2 = 30,
		PVRTC_RGBA2 = 31,
		PVRTC_RGB4 = 32,
		PVRTC_RGBA4 = 33,
		ETC_RGB4 = 34,
		EAC_R = 41,
		EAC_R_SIGNED = 42,
		EAC_RG = 43,
		EAC_RG_SIGNED = 44,
		ETC2_RGB = 45,
		ETC2_RGBA1 = 46,
		ETC2_RGBA8 = 47,
		ASTC_RGB_4x4 = 48,
		ASTC_RGB_5x5 = 49,
		ASTC_RGB_6x6 = 50,
		ASTC_RGB_8x8 = 51,
		ASTC_RGB_10x10 = 52,
		ASTC_RGB_12x12 = 53,
		ASTC_RGBA_4x4 = 54,
		ASTC_RGBA_5x5 = 55,
		ASTC_RGBA_6x6 = 56,
		ASTC_RGBA_8x8 = 57,
		ASTC_RGBA_10x10 = 58,
		ASTC_RGBA_12x12 = 59,
		ETC_RGB4_3DS = 60,
		ETC_RGBA8_3DS = 61,
		RG16 = 62,
		R8 = 63,
		ETC_RGB4Crunched = 64,
		ETC2_RGBA8Crunched = 65
	}

	public enum CubemapFace // TypeDefIndex: 1903
	{
		Unknown = -1,
		PositiveX = 0,
		NegativeX = 1,
		PositiveY = 2,
		NegativeY = 3,
		PositiveZ = 4,
		NegativeZ = 5
	}

	public enum RenderTextureFormat // TypeDefIndex: 1904
	{
		ARGB32 = 0,
		Depth = 1,
		ARGBHalf = 2,
		Shadowmap = 3,
		RGB565 = 4,
		ARGB4444 = 5,
		ARGB1555 = 6,
		Default = 7,
		ARGB2101010 = 8,
		DefaultHDR = 9,
		ARGB64 = 10,
		ARGBFloat = 11,
		RGFloat = 12,
		RGHalf = 13,
		RFloat = 14,
		RHalf = 15,
		R8 = 16,
		ARGBInt = 17,
		RGInt = 18,
		RInt = 19,
		BGRA32 = 20,
		RGB111110Float = 22,
		RG32 = 23,
		RGBAUShort = 24,
		RG16 = 25,
		BGRA10101010_XR = 26,
		BGR101010_XR = 27,
		R16 = 28
	}

	public enum VRTextureUsage // TypeDefIndex: 1905
	{
		None = 0,
		OneEye = 1,
		TwoEyes = 2
	}

	[Flags] // 0x003A6A24-0x003A6A34
	public enum RenderTextureCreationFlags // TypeDefIndex: 1906
	{
		MipMap = 1,
		AutoGenerateMips = 2,
		SRGB = 4,
		EyeTexture = 8,
		EnableRandomWrite = 16,
		CreatedFromScript = 32,
		AllowVerticalFlip = 128,
		NoResolvedColorSurface = 256,
		DynamicallyScalable = 1024,
		BindMS = 2048
	}

	public enum RenderTextureReadWrite // TypeDefIndex: 1907
	{
		Default = 0,
		Linear = 1,
		sRGB = 2
	}

	[Flags] // 0x003A6A34-0x003A6A44
	public enum RenderTextureMemoryless // TypeDefIndex: 1908
	{
		None = 0,
		Color = 1,
		Depth = 2,
		MSAA = 4
	}
}

namespace UnityEngine.Experimental.Rendering
{
	[Flags] // 0x003A6A44-0x003A6A54
	public enum TextureCreationFlags // TypeDefIndex: 1909
	{
		None = 0,
		MipChain = 1,
		Crunch = 64
	}

	public enum FormatUsage // TypeDefIndex: 1910
	{
		Sample = 0,
		Linear = 1,
		Render = 3,
		Blend = 4,
		LoadStore = 8,
		MSAA2x = 9,
		MSAA4x = 10,
		MSAA8x = 11
	}

	public enum GraphicsFormat // TypeDefIndex: 1911
	{
		None = 0,
		R8_SRGB = 1,
		R8G8_SRGB = 2,
		R8G8B8_SRGB = 3,
		R8G8B8A8_SRGB = 4,
		R8_UNorm = 5,
		R8G8_UNorm = 6,
		R8G8B8_UNorm = 7,
		R8G8B8A8_UNorm = 8,
		R8_SNorm = 9,
		R8G8_SNorm = 10,
		R8G8B8_SNorm = 11,
		R8G8B8A8_SNorm = 12,
		R8_UInt = 13,
		R8G8_UInt = 14,
		R8G8B8_UInt = 15,
		R8G8B8A8_UInt = 16,
		R8_SInt = 17,
		R8G8_SInt = 18,
		R8G8B8_SInt = 19,
		R8G8B8A8_SInt = 20,
		R16_UNorm = 21,
		R16G16_UNorm = 22,
		R16G16B16_UNorm = 23,
		R16G16B16A16_UNorm = 24,
		R16_SNorm = 25,
		R16G16_SNorm = 26,
		R16G16B16_SNorm = 27,
		R16G16B16A16_SNorm = 28,
		R16_UInt = 29,
		R16G16_UInt = 30,
		R16G16B16_UInt = 31,
		R16G16B16A16_UInt = 32,
		R16_SInt = 33,
		R16G16_SInt = 34,
		R16G16B16_SInt = 35,
		R16G16B16A16_SInt = 36,
		R32_UInt = 37,
		R32G32_UInt = 38,
		R32G32B32_UInt = 39,
		R32G32B32A32_UInt = 40,
		R32_SInt = 41,
		R32G32_SInt = 42,
		R32G32B32_SInt = 43,
		R32G32B32A32_SInt = 44,
		R16_SFloat = 45,
		R16G16_SFloat = 46,
		R16G16B16_SFloat = 47,
		R16G16B16A16_SFloat = 48,
		R32_SFloat = 49,
		R32G32_SFloat = 50,
		R32G32B32_SFloat = 51,
		R32G32B32A32_SFloat = 52,
		B8G8R8_SRGB = 56,
		B8G8R8A8_SRGB = 57,
		B8G8R8_UNorm = 58,
		B8G8R8A8_UNorm = 59,
		B8G8R8_SNorm = 60,
		B8G8R8A8_SNorm = 61,
		B8G8R8_UInt = 62,
		B8G8R8A8_UInt = 63,
		B8G8R8_SInt = 64,
		B8G8R8A8_SInt = 65,
		R4G4B4A4_UNormPack16 = 66,
		B4G4R4A4_UNormPack16 = 67,
		R5G6B5_UNormPack16 = 68,
		B5G6R5_UNormPack16 = 69,
		R5G5B5A1_UNormPack16 = 70,
		B5G5R5A1_UNormPack16 = 71,
		A1R5G5B5_UNormPack16 = 72,
		E5B9G9R9_UFloatPack32 = 73,
		B10G11R11_UFloatPack32 = 74,
		A2B10G10R10_UNormPack32 = 75,
		A2B10G10R10_UIntPack32 = 76,
		A2B10G10R10_SIntPack32 = 77,
		A2R10G10B10_UNormPack32 = 78,
		A2R10G10B10_UIntPack32 = 79,
		A2R10G10B10_SIntPack32 = 80,
		A2R10G10B10_XRSRGBPack32 = 81,
		A2R10G10B10_XRUNormPack32 = 82,
		R10G10B10_XRSRGBPack32 = 83,
		R10G10B10_XRUNormPack32 = 84,
		A10R10G10B10_XRSRGBPack32 = 85,
		A10R10G10B10_XRUNormPack32 = 86,
		D16_UNorm = 90,
		D24_UNorm = 91,
		D24_UNorm_S8_UInt = 92,
		D32_SFloat = 93,
		D32_SFloat_S8_Uint = 94,
		S8_Uint = 95,
		RGB_DXT1_SRGB = 96,
		RGBA_DXT1_SRGB = 96,
		RGB_DXT1_UNorm = 97,
		RGBA_DXT1_UNorm = 97,
		RGBA_DXT3_SRGB = 98,
		RGBA_DXT3_UNorm = 99,
		RGBA_DXT5_SRGB = 100,
		RGBA_DXT5_UNorm = 101,
		R_BC4_UNorm = 102,
		R_BC4_SNorm = 103,
		RG_BC5_UNorm = 104,
		RG_BC5_SNorm = 105,
		RGB_BC6H_UFloat = 106,
		RGB_BC6H_SFloat = 107,
		RGBA_BC7_SRGB = 108,
		RGBA_BC7_UNorm = 109,
		RGB_PVRTC_2Bpp_SRGB = 110,
		RGB_PVRTC_2Bpp_UNorm = 111,
		RGB_PVRTC_4Bpp_SRGB = 112,
		RGB_PVRTC_4Bpp_UNorm = 113,
		RGBA_PVRTC_2Bpp_SRGB = 114,
		RGBA_PVRTC_2Bpp_UNorm = 115,
		RGBA_PVRTC_4Bpp_SRGB = 116,
		RGBA_PVRTC_4Bpp_UNorm = 117,
		RGB_ETC_UNorm = 118,
		RGB_ETC2_SRGB = 119,
		RGB_ETC2_UNorm = 120,
		RGB_A1_ETC2_SRGB = 121,
		RGB_A1_ETC2_UNorm = 122,
		RGBA_ETC2_SRGB = 123,
		RGBA_ETC2_UNorm = 124,
		R_EAC_UNorm = 125,
		R_EAC_SNorm = 126,
		RG_EAC_UNorm = 127,
		RG_EAC_SNorm = 128,
		RGBA_ASTC4X4_SRGB = 129,
		RGBA_ASTC4X4_UNorm = 130,
		RGBA_ASTC5X5_SRGB = 131,
		RGBA_ASTC5X5_UNorm = 132,
		RGBA_ASTC6X6_SRGB = 133,
		RGBA_ASTC6X6_UNorm = 134,
		RGBA_ASTC8X8_SRGB = 135,
		RGBA_ASTC8X8_UNorm = 136,
		RGBA_ASTC10X10_SRGB = 137,
		RGBA_ASTC10X10_UNorm = 138,
		RGBA_ASTC12X12_SRGB = 139,
		RGBA_ASTC12X12_UNorm = 140
	}
}

namespace UnityEngine
{
	[Flags] // 0x003A6A54-0x003A6A64
	public enum LightmapsMode // TypeDefIndex: 1912
	{
		NonDirectional = 0,
		CombinedDirectional = 1
	}
}

namespace UnityEngine.Rendering
{
	[MovedFrom] // 0x003A6A64-0x003A6A9C
	public enum VertexAttribute // TypeDefIndex: 1913
	{
		Position = 0,
		Normal = 1,
		Tangent = 2,
		Color = 3,
		TexCoord0 = 4,
		TexCoord1 = 5,
		TexCoord2 = 6,
		TexCoord3 = 7,
		TexCoord4 = 8,
		TexCoord5 = 9,
		TexCoord6 = 10,
		TexCoord7 = 11,
		BlendWeight = 12,
		BlendIndices = 13
	}

	public enum CompareFunction // TypeDefIndex: 1914
	{
		Disabled = 0,
		Never = 1,
		Less = 2,
		Equal = 3,
		LessEqual = 4,
		Greater = 5,
		NotEqual = 6,
		GreaterEqual = 7,
		Always = 8
	}

	[Flags] // 0x003A6A9C-0x003A6AAC
	public enum ColorWriteMask // TypeDefIndex: 1915
	{
		Alpha = 1,
		Blue = 2,
		Green = 4,
		Red = 8,
		All = 15
	}

	public enum StencilOp // TypeDefIndex: 1916
	{
		Keep = 0,
		Zero = 1,
		Replace = 2,
		IncrementSaturate = 3,
		DecrementSaturate = 4,
		Invert = 5,
		IncrementWrap = 6,
		DecrementWrap = 7
	}

	[UsedByNativeCode] // 0x003A6AAC-0x003A6ABC
	public enum GraphicsDeviceType // TypeDefIndex: 1917
	{
		OpenGL2 = 0,
		Direct3D9 = 1,
		Direct3D11 = 2,
		PlayStation3 = 3,
		Null = 4,
		Xbox360 = 6,
		OpenGLES2 = 8,
		OpenGLES3 = 11,
		PlayStationVita = 12,
		PlayStation4 = 13,
		XboxOne = 14,
		PlayStationMobile = 15,
		Metal = 16,
		OpenGLCore = 17,
		Direct3D12 = 18,
		N3DS = 19,
		Vulkan = 21,
		Switch = 22,
		XboxOneD3D12 = 23
	}

	public enum ShadowSamplingMode // TypeDefIndex: 1918
	{
		CompareDepths = 0,
		RawDepth = 1,
		None = 2
	}

	public enum TextureDimension // TypeDefIndex: 1919
	{
		Unknown = -1,
		None = 0,
		Any = 1,
		Tex2D = 2,
		Tex3D = 3,
		Cube = 4,
		Tex2DArray = 5,
		CubeArray = 6
	}
}

namespace UnityEngine.Experimental.Rendering
{
	[NativeHeader] // 0x003A6ABC-0x003A6B1C
	[NativeHeader] // 0x003A6ABC-0x003A6B1C
	public class GraphicsFormatUtility // TypeDefIndex: 1920
	{
		// Methods
		public static GraphicsFormat GetGraphicsFormat(TextureFormat format, bool isSRGB); // 0x009C3A48-0x009C3A50
		[FreeFunction] // 0x003AE31C-0x003AE32C
		private static GraphicsFormat GetGraphicsFormat_Native_TextureFormat(TextureFormat format, bool isSRGB); // 0x009CA054-0x009CA0C8
		[FreeFunction] // 0x003AE32C-0x003AE33C
		public static bool IsSRGBFormat(GraphicsFormat format); // 0x009CA0C8-0x009CA134
		[FreeFunction] // 0x003AE33C-0x003AE34C
		public static RenderTextureFormat GetRenderTextureFormat(GraphicsFormat format); // 0x009CA134-0x009CA1A0
		[FreeFunction] // 0x003AE34C-0x003AE384
		internal static bool IsCompressedTextureFormat(TextureFormat format); // 0x009CA1A0-0x009CA20C
		public static bool IsCrunchFormat(TextureFormat format); // 0x009C3A50-0x009C3A7C
	}
}

namespace UnityEngine
{
	[NativeHeader] // 0x003A6B1C-0x003A6B54
	public class SkinnedMeshRenderer : Renderer // TypeDefIndex: 1921
	{
	}

	[NativeHeader] // 0x003A6B54-0x003A6B8C
	public class MeshRenderer : Renderer // TypeDefIndex: 1922
	{
		// Methods
		[RequiredByNativeCode] // 0x003AE384-0x003AE394
		private void DontStripMeshRenderer(); // 0x008D88C4-0x008D88C8
	}

	internal struct TouchScreenKeyboard_InternalConstructorHelperArguments // TypeDefIndex: 1923
	{
		// Fields
		public uint keyboardType; // 0x00
		public uint autocorrection; // 0x04
		public uint multiline; // 0x08
		public uint secure; // 0x0C
		public uint alert; // 0x10
		public int characterLimit; // 0x14
	}

	[NativeHeader] // 0x003A6B8C-0x003A6BEC
	[NativeHeader] // 0x003A6B8C-0x003A6BEC
	public class TouchScreenKeyboard // TypeDefIndex: 1924
	{
		// Fields
		[NonSerialized]
		internal IntPtr m_Ptr; // 0x10
		[CompilerGenerated] // 0x003AA1E8-0x003AA224
		[DebuggerBrowsable] // 0x003AA1E8-0x003AA224
		private readonly bool <canGetSelection>k__BackingField; // 0x18
		[CompilerGenerated] // 0x003AA224-0x003AA260
		[DebuggerBrowsable] // 0x003AA224-0x003AA260
		private readonly bool <canSetSelection>k__BackingField; // 0x19
		[CompilerGenerated] // 0x003AA260-0x003AA29C
		[DebuggerBrowsable] // 0x003AA260-0x003AA29C
		private readonly TouchScreenKeyboardType <type>k__BackingField; // 0x1C
	
		// Properties
		public static bool isSupported { get; } // 0x00C408E4-0x00C40944 
		public string text { [NativeName] /* 0x003AE424-0x003AE45C */ get; [NativeName] /* 0x003AE45C-0x003AE494 */ set; } // 0x00C40A98-0x00C40B04 0x00C40B04-0x00C40B78
		public static bool hideInput { [NativeName] /* 0x003AE494-0x003AE4CC */ set; } // 0x00C40B78-0x00C40BE4
		public bool active { [NativeName] /* 0x003AE4CC-0x003AE504 */ get; [NativeName] /* 0x003AE504-0x003AE53C */ set; } // 0x00C40BE4-0x00C40C50 0x00C40C50-0x00C40CC4
		public Status status { [NativeName] /* 0x003AE53C-0x003AE574 */ get; } // 0x00C40CC4-0x00C40D30 
		public int characterLimit { [NativeName] /* 0x003AE574-0x003AE5AC */ set; } // 0x00C40D30-0x00C40DA4
		public bool canGetSelection { [CompilerGenerated] /* 0x003AE5AC-0x003AE5F8 */ [NativeName] /* 0x003AE5AC-0x003AE5F8 */ get; } // 0x00C40DA4-0x00C40DAC 
		public bool canSetSelection { [CompilerGenerated] /* 0x003AE5F8-0x003AE644 */ [NativeName] /* 0x003AE5F8-0x003AE644 */ get; } // 0x00C40DAC-0x00C40DB4 
		public RangeInt selection { get; set; } // 0x00C40DB4-0x00C40DE4 0x00C40E58-0x00C40F34
	
		// Nested types
		public enum Status // TypeDefIndex: 1925
		{
			Visible = 0,
			Done = 1,
			Canceled = 2,
			LostFocus = 3
		}
	
		// Constructors
		public TouchScreenKeyboard(string text, TouchScreenKeyboardType keyboardType, bool autocorrection, bool multiline, bool secure, bool alert, string textPlaceholder, int characterLimit); // 0x00C405B8-0x00C406F8
	
		// Methods
		[FreeFunction] // 0x003AE394-0x003AE3DC
		private static void Internal_Destroy(IntPtr ptr); // 0x00C4077C-0x00C407E8
		private void Destroy(); // 0x00C407E8-0x00C40870
		~TouchScreenKeyboard(); // 0x00C40870-0x00C408E4
		[FreeFunction] // 0x003AE3DC-0x003AE414
		private static IntPtr TouchScreenKeyboard_InternalConstructorHelper(ref TouchScreenKeyboard_InternalConstructorHelperArguments arguments, string text, string textPlaceholder); // 0x00C406F8-0x00C4077C
		public static TouchScreenKeyboard Open(string text, [UnityEngine.Internal.DefaultValue] /* 0x003B1600-0x003B1638 */ TouchScreenKeyboardType keyboardType, [UnityEngine.Internal.DefaultValue] /* 0x003B1638-0x003B1670 */ bool autocorrection, [UnityEngine.Internal.DefaultValue] /* 0x003B1670-0x003B16A8 */ bool multiline, [UnityEngine.Internal.DefaultValue] /* 0x003B16A8-0x003B16E0 */ bool secure, [UnityEngine.Internal.DefaultValue] /* 0x003B16E0-0x003B1718 */ bool alert, [UnityEngine.Internal.DefaultValue] /* 0x003B1718-0x003B1750 */ string textPlaceholder, [UnityEngine.Internal.DefaultValue] /* 0x003B1750-0x003B1788 */ int characterLimit); // 0x00C40944-0x00C40A04
		[ExcludeFromDocs] // 0x003AE414-0x003AE424
		public static TouchScreenKeyboard Open(string text, TouchScreenKeyboardType keyboardType, bool autocorrection, bool multiline, bool secure); // 0x00C40A04-0x00C40A98
		private static void GetSelection(out int start, out int length); // 0x00C40DE4-0x00C40E58
		private static void SetSelection(int start, int length); // 0x00C40F34-0x00C40FC4
	}

	public enum TouchPhase // TypeDefIndex: 1926
	{
		Began = 0,
		Moved = 1,
		Stationary = 2,
		Ended = 3,
		Canceled = 4
	}

	public enum IMECompositionMode // TypeDefIndex: 1927
	{
		Auto = 0,
		On = 1,
		Off = 2
	}

	public enum TouchType // TypeDefIndex: 1928
	{
		Direct = 0,
		Indirect = 1,
		Stylus = 2
	}

	[NativeHeader] // 0x003A6BEC-0x003A6C24
	public struct Touch // TypeDefIndex: 1929
	{
		// Fields
		private int m_FingerId; // 0x00
		private Vector2 m_Position; // 0x04
		private Vector2 m_RawPosition; // 0x0C
		private Vector2 m_PositionDelta; // 0x14
		private float m_TimeDelta; // 0x1C
		private int m_TapCount; // 0x20
		private TouchPhase m_Phase; // 0x24
		private TouchType m_Type; // 0x28
		private float m_Pressure; // 0x2C
		private float m_maximumPossiblePressure; // 0x30
		private float m_Radius; // 0x34
		private float m_RadiusVariance; // 0x38
		private float m_AltitudeAngle; // 0x3C
		private float m_AzimuthAngle; // 0x40
	
		// Properties
		public int fingerId { get; } // 0x00C40570-0x00C40580 
		public Vector2 position { get; } // 0x00C40580-0x00C40590 
		public Vector2 deltaPosition { get; } // 0x00C40590-0x00C405A0 
		public TouchPhase phase { get; } // 0x00C405A0-0x00C405B0 
		public TouchType type { get; } // 0x00C405B0-0x00C405B8 
	}

	[NativeHeader] // 0x003A6C24-0x003A6C5C
	public class Input // TypeDefIndex: 1930
	{
		// Properties
		public static Vector3 mousePosition { get; } // 0x008D1E3C-0x008D1E6C 
		public static Vector2 mouseScrollDelta { get; } // 0x008D1ED8-0x008D1F00 
		public static IMECompositionMode imeCompositionMode { get; set; } // 0x008D1F6C-0x008D1FC4 0x008D1FC4-0x008D2030
		public static string compositionString { get; } // 0x008D2030-0x008D2088 
		public static Vector2 compositionCursorPos { get; set; } // 0x008D2088-0x008D20B0 0x008D211C-0x008D2140
		public static bool mousePresent { [FreeFunction] /* 0x003AE6F4-0x003AE72C */ get; } // 0x008D21AC-0x008D2204 
		public static int touchCount { [FreeFunction] /* 0x003AE72C-0x003AE764 */ get; } // 0x008D2204-0x008D225C 
		public static bool touchSupported { [FreeFunction] /* 0x003AE764-0x003AE79C */ get; } // 0x008D225C-0x008D22B4 
		public static Touch[] touches { get; } // 0x008D22B4-0x008D23B0 
	
		// Methods
		[NativeThrows] // 0x003AE644-0x003AE654
		private static bool GetKeyInt(KeyCode key); // 0x008D1930-0x008D199C
		[NativeThrows] // 0x003AE654-0x003AE664
		private static bool GetKeyUpInt(KeyCode key); // 0x008D199C-0x008D1A08
		[NativeThrows] // 0x003AE664-0x003AE674
		private static bool GetKeyDownInt(KeyCode key); // 0x008D1A08-0x008D1A74
		[NativeThrows] // 0x003AE674-0x003AE684
		public static float GetAxis(string axisName); // 0x008D1A74-0x008D1AE0
		[NativeThrows] // 0x003AE684-0x003AE694
		public static float GetAxisRaw(string axisName); // 0x008D1AE0-0x008D1B4C
		[NativeThrows] // 0x003AE694-0x003AE6A4
		public static bool GetButton(string buttonName); // 0x008D1B4C-0x008D1BB8
		[NativeThrows] // 0x003AE6A4-0x003AE6B4
		public static bool GetButtonDown(string buttonName); // 0x008D1BB8-0x008D1C24
		[NativeThrows] // 0x003AE6B4-0x003AE6C4
		public static bool GetMouseButton(int button); // 0x008D1C24-0x008D1C90
		[NativeThrows] // 0x003AE6C4-0x003AE6D4
		public static bool GetMouseButtonDown(int button); // 0x008D1C90-0x008D1CFC
		[NativeThrows] // 0x003AE6D4-0x003AE6E4
		public static bool GetMouseButtonUp(int button); // 0x008D1CFC-0x008D1D68
		[NativeThrows] // 0x003AE6E4-0x003AE6F4
		public static Touch GetTouch(int index); // 0x008D1D68-0x008D1DBC
		public static bool GetKey(KeyCode key); // 0x008D1E30-0x008D1E34
		public static bool GetKeyUp(KeyCode key); // 0x008D1E34-0x008D1E38
		public static bool GetKeyDown(KeyCode key); // 0x008D1E38-0x008D1E3C
		private static void GetTouch_Injected(int index, out Touch ret); // 0x008D1DBC-0x008D1E30
		private static void get_mousePosition_Injected(out Vector3 ret); // 0x008D1E6C-0x008D1ED8
		private static void get_mouseScrollDelta_Injected(out Vector2 ret); // 0x008D1F00-0x008D1F6C
		private static void get_compositionCursorPos_Injected(out Vector2 ret); // 0x008D20B0-0x008D211C
		private static void set_compositionCursorPos_Injected(ref Vector2 value); // 0x008D2140-0x008D21AC
	}

	public enum KeyCode // TypeDefIndex: 1931
	{
		None = 0,
		Backspace = 8,
		Tab = 9,
		Clear = 12,
		Return = 13,
		Pause = 19,
		Escape = 27,
		Space = 32,
		Exclaim = 33,
		DoubleQuote = 34,
		Hash = 35,
		Dollar = 36,
		Percent = 37,
		Ampersand = 38,
		Quote = 39,
		LeftParen = 40,
		RightParen = 41,
		Asterisk = 42,
		Plus = 43,
		Comma = 44,
		Minus = 45,
		Period = 46,
		Slash = 47,
		Alpha0 = 48,
		Alpha1 = 49,
		Alpha2 = 50,
		Alpha3 = 51,
		Alpha4 = 52,
		Alpha5 = 53,
		Alpha6 = 54,
		Alpha7 = 55,
		Alpha8 = 56,
		Alpha9 = 57,
		Colon = 58,
		Semicolon = 59,
		Less = 60,
		Equals = 61,
		Greater = 62,
		Question = 63,
		At = 64,
		LeftBracket = 91,
		Backslash = 92,
		RightBracket = 93,
		Caret = 94,
		Underscore = 95,
		BackQuote = 96,
		A = 97,
		B = 98,
		C = 99,
		D = 100,
		E = 101,
		F = 102,
		G = 103,
		H = 104,
		I = 105,
		J = 106,
		K = 107,
		L = 108,
		M = 109,
		N = 110,
		O = 111,
		P = 112,
		Q = 113,
		R = 114,
		S = 115,
		T = 116,
		U = 117,
		V = 118,
		W = 119,
		X = 120,
		Y = 121,
		Z = 122,
		LeftCurlyBracket = 123,
		Pipe = 124,
		RightCurlyBracket = 125,
		Tilde = 126,
		Delete = 127,
		Keypad0 = 256,
		Keypad1 = 257,
		Keypad2 = 258,
		Keypad3 = 259,
		Keypad4 = 260,
		Keypad5 = 261,
		Keypad6 = 262,
		Keypad7 = 263,
		Keypad8 = 264,
		Keypad9 = 265,
		KeypadPeriod = 266,
		KeypadDivide = 267,
		KeypadMultiply = 268,
		KeypadMinus = 269,
		KeypadPlus = 270,
		KeypadEnter = 271,
		KeypadEquals = 272,
		UpArrow = 273,
		DownArrow = 274,
		RightArrow = 275,
		LeftArrow = 276,
		Insert = 277,
		Home = 278,
		End = 279,
		PageUp = 280,
		PageDown = 281,
		F1 = 282,
		F2 = 283,
		F3 = 284,
		F4 = 285,
		F5 = 286,
		F6 = 287,
		F7 = 288,
		F8 = 289,
		F9 = 290,
		F10 = 291,
		F11 = 292,
		F12 = 293,
		F13 = 294,
		F14 = 295,
		F15 = 296,
		Numlock = 300,
		CapsLock = 301,
		ScrollLock = 302,
		RightShift = 303,
		LeftShift = 304,
		RightControl = 305,
		LeftControl = 306,
		RightAlt = 307,
		LeftAlt = 308,
		RightCommand = 309,
		RightApple = 309,
		LeftCommand = 310,
		LeftApple = 310,
		LeftWindows = 311,
		RightWindows = 312,
		AltGr = 313,
		Help = 315,
		Print = 316,
		SysReq = 317,
		Break = 318,
		Menu = 319,
		Mouse0 = 323,
		Mouse1 = 324,
		Mouse2 = 325,
		Mouse3 = 326,
		Mouse4 = 327,
		Mouse5 = 328,
		Mouse6 = 329,
		JoystickButton0 = 330,
		JoystickButton1 = 331,
		JoystickButton2 = 332,
		JoystickButton3 = 333,
		JoystickButton4 = 334,
		JoystickButton5 = 335,
		JoystickButton6 = 336,
		JoystickButton7 = 337,
		JoystickButton8 = 338,
		JoystickButton9 = 339,
		JoystickButton10 = 340,
		JoystickButton11 = 341,
		JoystickButton12 = 342,
		JoystickButton13 = 343,
		JoystickButton14 = 344,
		JoystickButton15 = 345,
		JoystickButton16 = 346,
		JoystickButton17 = 347,
		JoystickButton18 = 348,
		JoystickButton19 = 349,
		Joystick1Button0 = 350,
		Joystick1Button1 = 351,
		Joystick1Button2 = 352,
		Joystick1Button3 = 353,
		Joystick1Button4 = 354,
		Joystick1Button5 = 355,
		Joystick1Button6 = 356,
		Joystick1Button7 = 357,
		Joystick1Button8 = 358,
		Joystick1Button9 = 359,
		Joystick1Button10 = 360,
		Joystick1Button11 = 361,
		Joystick1Button12 = 362,
		Joystick1Button13 = 363,
		Joystick1Button14 = 364,
		Joystick1Button15 = 365,
		Joystick1Button16 = 366,
		Joystick1Button17 = 367,
		Joystick1Button18 = 368,
		Joystick1Button19 = 369,
		Joystick2Button0 = 370,
		Joystick2Button1 = 371,
		Joystick2Button2 = 372,
		Joystick2Button3 = 373,
		Joystick2Button4 = 374,
		Joystick2Button5 = 375,
		Joystick2Button6 = 376,
		Joystick2Button7 = 377,
		Joystick2Button8 = 378,
		Joystick2Button9 = 379,
		Joystick2Button10 = 380,
		Joystick2Button11 = 381,
		Joystick2Button12 = 382,
		Joystick2Button13 = 383,
		Joystick2Button14 = 384,
		Joystick2Button15 = 385,
		Joystick2Button16 = 386,
		Joystick2Button17 = 387,
		Joystick2Button18 = 388,
		Joystick2Button19 = 389,
		Joystick3Button0 = 390,
		Joystick3Button1 = 391,
		Joystick3Button2 = 392,
		Joystick3Button3 = 393,
		Joystick3Button4 = 394,
		Joystick3Button5 = 395,
		Joystick3Button6 = 396,
		Joystick3Button7 = 397,
		Joystick3Button8 = 398,
		Joystick3Button9 = 399,
		Joystick3Button10 = 400,
		Joystick3Button11 = 401,
		Joystick3Button12 = 402,
		Joystick3Button13 = 403,
		Joystick3Button14 = 404,
		Joystick3Button15 = 405,
		Joystick3Button16 = 406,
		Joystick3Button17 = 407,
		Joystick3Button18 = 408,
		Joystick3Button19 = 409,
		Joystick4Button0 = 410,
		Joystick4Button1 = 411,
		Joystick4Button2 = 412,
		Joystick4Button3 = 413,
		Joystick4Button4 = 414,
		Joystick4Button5 = 415,
		Joystick4Button6 = 416,
		Joystick4Button7 = 417,
		Joystick4Button8 = 418,
		Joystick4Button9 = 419,
		Joystick4Button10 = 420,
		Joystick4Button11 = 421,
		Joystick4Button12 = 422,
		Joystick4Button13 = 423,
		Joystick4Button14 = 424,
		Joystick4Button15 = 425,
		Joystick4Button16 = 426,
		Joystick4Button17 = 427,
		Joystick4Button18 = 428,
		Joystick4Button19 = 429,
		Joystick5Button0 = 430,
		Joystick5Button1 = 431,
		Joystick5Button2 = 432,
		Joystick5Button3 = 433,
		Joystick5Button4 = 434,
		Joystick5Button5 = 435,
		Joystick5Button6 = 436,
		Joystick5Button7 = 437,
		Joystick5Button8 = 438,
		Joystick5Button9 = 439,
		Joystick5Button10 = 440,
		Joystick5Button11 = 441,
		Joystick5Button12 = 442,
		Joystick5Button13 = 443,
		Joystick5Button14 = 444,
		Joystick5Button15 = 445,
		Joystick5Button16 = 446,
		Joystick5Button17 = 447,
		Joystick5Button18 = 448,
		Joystick5Button19 = 449,
		Joystick6Button0 = 450,
		Joystick6Button1 = 451,
		Joystick6Button2 = 452,
		Joystick6Button3 = 453,
		Joystick6Button4 = 454,
		Joystick6Button5 = 455,
		Joystick6Button6 = 456,
		Joystick6Button7 = 457,
		Joystick6Button8 = 458,
		Joystick6Button9 = 459,
		Joystick6Button10 = 460,
		Joystick6Button11 = 461,
		Joystick6Button12 = 462,
		Joystick6Button13 = 463,
		Joystick6Button14 = 464,
		Joystick6Button15 = 465,
		Joystick6Button16 = 466,
		Joystick6Button17 = 467,
		Joystick6Button18 = 468,
		Joystick6Button19 = 469,
		Joystick7Button0 = 470,
		Joystick7Button1 = 471,
		Joystick7Button2 = 472,
		Joystick7Button3 = 473,
		Joystick7Button4 = 474,
		Joystick7Button5 = 475,
		Joystick7Button6 = 476,
		Joystick7Button7 = 477,
		Joystick7Button8 = 478,
		Joystick7Button9 = 479,
		Joystick7Button10 = 480,
		Joystick7Button11 = 481,
		Joystick7Button12 = 482,
		Joystick7Button13 = 483,
		Joystick7Button14 = 484,
		Joystick7Button15 = 485,
		Joystick7Button16 = 486,
		Joystick7Button17 = 487,
		Joystick7Button18 = 488,
		Joystick7Button19 = 489,
		Joystick8Button0 = 490,
		Joystick8Button1 = 491,
		Joystick8Button2 = 492,
		Joystick8Button3 = 493,
		Joystick8Button4 = 494,
		Joystick8Button5 = 495,
		Joystick8Button6 = 496,
		Joystick8Button7 = 497,
		Joystick8Button8 = 498,
		Joystick8Button9 = 499,
		Joystick8Button10 = 500,
		Joystick8Button11 = 501,
		Joystick8Button12 = 502,
		Joystick8Button13 = 503,
		Joystick8Button14 = 504,
		Joystick8Button15 = 505,
		Joystick8Button16 = 506,
		Joystick8Button17 = 507,
		Joystick8Button18 = 508,
		Joystick8Button19 = 509
	}

	[NativeClass] // 0x003A6C5C-0x003A6D30
	[NativeHeader] // 0x003A6C5C-0x003A6D30
	[NativeHeader] // 0x003A6C5C-0x003A6D30
	[RequiredByNativeCode] // 0x003A6C5C-0x003A6D30
	public struct LayerMask // TypeDefIndex: 1932
	{
		// Fields
		[NativeName] // 0x003AA29C-0x003AA2D4
		private int m_Mask; // 0x00
	
		// Methods
		public static implicit operator int(LayerMask mask); // 0x008D24FC-0x008D2500
		public static implicit operator LayerMask(int intVal); // 0x008D2500-0x008D2508
	}

	internal static class ManagedStreamHelpers // TypeDefIndex: 1933
	{
		// Methods
		internal static void ValidateLoadFromStream(Stream stream); // 0x008D30F8-0x008D3208
		[RequiredByNativeCode] // 0x003AE79C-0x003AE7AC
		internal static void ManagedStreamRead(byte[] buffer, int offset, int count, Stream stream, IntPtr returnValueAddress); // 0x008D3208-0x008D3314
		[RequiredByNativeCode] // 0x003AE7AC-0x003AE7BC
		internal static void ManagedStreamSeek(long offset, uint origin, Stream stream, IntPtr returnValueAddress); // 0x008D3314-0x008D3418
		[RequiredByNativeCode] // 0x003AE7BC-0x003AE7CC
		internal static void ManagedStreamLength(Stream stream, IntPtr returnValueAddress); // 0x008D3418-0x008D3500
	}

	[NativeClass] // 0x003A6D30-0x003A6E28
	[NativeHeader] // 0x003A6D30-0x003A6E28
	[NativeType] // 0x003A6D30-0x003A6E28
	[RequiredByNativeCode] // 0x003A6D30-0x003A6E28
	[ThreadAndSerializationSafe] // 0x003A6D30-0x003A6E28
	public struct Matrix4x4 : IEquatable<Matrix4x4> // TypeDefIndex: 1934
	{
		// Fields
		[NativeName] // 0x003AA2D4-0x003AA30C
		public float m00; // 0x00
		[NativeName] // 0x003AA30C-0x003AA344
		public float m10; // 0x04
		[NativeName] // 0x003AA344-0x003AA37C
		public float m20; // 0x08
		[NativeName] // 0x003AA37C-0x003AA3B4
		public float m30; // 0x0C
		[NativeName] // 0x003AA3B4-0x003AA3EC
		public float m01; // 0x10
		[NativeName] // 0x003AA3EC-0x003AA424
		public float m11; // 0x14
		[NativeName] // 0x003AA424-0x003AA45C
		public float m21; // 0x18
		[NativeName] // 0x003AA45C-0x003AA494
		public float m31; // 0x1C
		[NativeName] // 0x003AA494-0x003AA4CC
		public float m02; // 0x20
		[NativeName] // 0x003AA4CC-0x003AA504
		public float m12; // 0x24
		[NativeName] // 0x003AA504-0x003AA53C
		public float m22; // 0x28
		[NativeName] // 0x003AA53C-0x003AA574
		public float m32; // 0x2C
		[NativeName] // 0x003AA574-0x003AA5AC
		public float m03; // 0x30
		[NativeName] // 0x003AA5AC-0x003AA5E4
		public float m13; // 0x34
		[NativeName] // 0x003AA5E4-0x003AA61C
		public float m23; // 0x38
		[NativeName] // 0x003AA61C-0x003AA654
		public float m33; // 0x3C
		private static readonly Matrix4x4 zeroMatrix; // 0x00
		private static readonly Matrix4x4 identityMatrix; // 0x40
	
		// Properties
		public Quaternion rotation { get; } // 0x008D5970-0x008D597C 
		public bool isIdentity { get; } // 0x008D597C-0x008D5984 
		public Matrix4x4 inverse { get; } // 0x008D5DAC-0x008D5EE4 
		public float this[int row, int column] { get => default; set {} } // 0x008D5EE4-0x008D602C 0x008D602C-0x008D6038
		public float this[int index] { get => default; set {} } // 0x008D6038-0x008D6040 0x008D6040-0x008D6204
		public static Matrix4x4 zero { get; } // 0x008D6924-0x008D69AC 
		public static Matrix4x4 identity { get; } // 0x008D69AC-0x008D70CC 
	
		// Constructors
		public Matrix4x4(Vector4 column0, Vector4 column1, Vector4 column2, Vector4 column3); // 0x008D576C-0x008D5818
		static Matrix4x4(); // 0x008D70D4-0x008D7298
	
		// Methods
		[ThreadSafe] // 0x003AE7CC-0x003AE7DC
		private Quaternion GetRotation(); // 0x008D588C-0x008D58F8
		[ThreadSafe] // 0x003AE7DC-0x003AE7EC
		private bool IsIdentity(); // 0x008D5964-0x008D5970
		[FreeFunction] // 0x003AE7EC-0x003AE834
		public static Matrix4x4 TRS(Vector3 pos, Quaternion q, Vector3 s); // 0x008D5984-0x008D5A3C
		public void SetTRS(Vector3 pos, Quaternion q, Vector3 s); // 0x008D5BC8-0x008D5BE0
		[FreeFunction] // 0x003AE834-0x003AE87C
		public static Matrix4x4 Inverse(Matrix4x4 m); // 0x008D5BE0-0x008D5C7C
		public override int GetHashCode(); // 0x008D6204-0x008D63BC
		public override bool Equals(object other); // 0x008D63BC-0x008D63C4
		public bool Equals(Matrix4x4 other); // 0x008D63C4-0x008D640C
		public static Matrix4x4 operator *(Matrix4x4 lhs, Matrix4x4 rhs); // 0x008D05B4-0x008D0920
		public static Vector4 operator *(Matrix4x4 lhs, Vector4 vector); // 0x008D640C-0x008D64A0
		public static bool operator ==(Matrix4x4 lhs, Matrix4x4 rhs); // 0x008D64A0-0x008D6720
		public static bool operator !=(Matrix4x4 lhs, Matrix4x4 rhs); // 0x008D6720-0x008D6808
		public Vector4 GetColumn(int index); // 0x008D6808-0x008D68A8
		public Vector3 MultiplyPoint(Vector3 point); // 0x008D68A8-0x008D691C
		public Vector3 MultiplyPoint3x4(Vector3 point); // 0x008D691C-0x008D6924
		public override string ToString(); // 0x008D70CC-0x008D70D4
		private static void GetRotation_Injected(ref Matrix4x4 _unity_self, out Quaternion ret); // 0x008D5818-0x008D588C
		private static bool IsIdentity_Injected(ref Matrix4x4 _unity_self); // 0x008D58F8-0x008D5964
		private static void TRS_Injected(ref Vector3 pos, ref Quaternion q, ref Vector3 s, out Matrix4x4 ret); // 0x008D5A3C-0x008D5BC8
		private static void Inverse_Injected(ref Matrix4x4 m, out Matrix4x4 ret); // 0x008D5C7C-0x008D5DAC
	}

	[NativeClass] // 0x003A6E28-0x003A6F4C
	[NativeHeader] // 0x003A6E28-0x003A6F4C
	[NativeHeader] // 0x003A6E28-0x003A6F4C
	[NativeType] // 0x003A6E28-0x003A6F4C
	[RequiredByNativeCode] // 0x003A6E28-0x003A6F4C
	[ThreadAndSerializationSafe] // 0x003A6E28-0x003A6F4C
	public struct Vector3 : IEquatable<Vector3> // TypeDefIndex: 1935
	{
		// Fields
		public const float kEpsilon = 1E-05f; // Metadata: 0x0021A93E
		public const float kEpsilonNormalSqrt = 1E-15f; // Metadata: 0x0021A942
		public float x; // 0x00
		public float y; // 0x04
		public float z; // 0x08
		private static readonly Vector3 zeroVector; // 0x00
		private static readonly Vector3 oneVector; // 0x0C
		private static readonly Vector3 upVector; // 0x18
		private static readonly Vector3 downVector; // 0x24
		private static readonly Vector3 leftVector; // 0x30
		private static readonly Vector3 rightVector; // 0x3C
		private static readonly Vector3 forwardVector; // 0x48
		private static readonly Vector3 backVector; // 0x54
		private static readonly Vector3 positiveInfinityVector; // 0x60
		private static readonly Vector3 negativeInfinityVector; // 0x6C
	
		// Properties
		public float this[int index] { get => default; set {} } // 0x00C451D0-0x00C45298 0x00C45298-0x00C452AC
		public Vector3 normalized { get; } // 0x00C457E4-0x00C457EC 
		public float magnitude { get; } // 0x00C45BF0-0x00C45BF8 
		public float sqrMagnitude { get; } // 0x00C45C10-0x00C45C30 
		public static Vector3 zero { get; } // 0x00C45630-0x00C45774 
		public static Vector3 one { get; } // 0x00C45DD0-0x00C45E3C 
		public static Vector3 forward { get; } // 0x00C41C38-0x00C41CA4 
		public static Vector3 back { get; } // 0x00C45E3C-0x00C45EA8 
		public static Vector3 up { get; } // 0x00C41AD8-0x00C41B44 
		public static Vector3 down { get; } // 0x00C45EA8-0x00C45F14 
		public static Vector3 left { get; } // 0x00C45F14-0x00C45F80 
		public static Vector3 right { get; } // 0x00C41978-0x00C419E4 
	
		// Constructors
		public Vector3(float x, float y, float z); // 0x00C44F48-0x00C44F60
		public Vector3(float x, float y); // 0x00C44F60-0x00C44F6C
		static Vector3(); // 0x00C472D0-0x00C473C4
	
		// Methods
		[FreeFunction] // 0x003AE87C-0x003AE8C4
		private static void OrthoNormalize2(ref Vector3 a, ref Vector3 b); // 0x00C44F6C-0x00C44FE0
		public static void OrthoNormalize(ref Vector3 normal, ref Vector3 tangent); // 0x00C44FE0-0x00C45054
		public static Vector3 Lerp(Vector3 a, Vector3 b, float t); // 0x00C45054-0x00C451D0
		public void Set(float newX, float newY, float newZ); // 0x00C452AC-0x00C452D8
		public void Scale(Vector3 scale); // 0x00C452D8-0x00C452F8
		public static Vector3 Cross(Vector3 lhs, Vector3 rhs); // 0x00C452F8-0x00C45374
		public override int GetHashCode(); // 0x00C45374-0x00C45478
		public override bool Equals(object other); // 0x00C45478-0x00C45480
		public bool Equals(Vector3 other); // 0x00C45480-0x00C45488
		public static Vector3 Normalize(Vector3 value); // 0x00C45488-0x00C45570
		public void Normalize(); // 0x00C45774-0x00C457E4
		public static float Dot(Vector3 lhs, Vector3 rhs); // 0x00C457EC-0x00C45804
		public static float Angle(Vector3 from, Vector3 to); // 0x00C45804-0x00C4597C
		public static float Distance(Vector3 a, Vector3 b); // 0x00C4597C-0x00C45A50
		public static Vector3 ClampMagnitude(Vector3 vector, float maxLength); // 0x00C45A50-0x00C45B30
		public static float Magnitude(Vector3 vector); // 0x00C45570-0x00C45620
		public static float SqrMagnitude(Vector3 vector); // 0x00C45BF8-0x00C45C10
		public static Vector3 Min(Vector3 lhs, Vector3 rhs); // 0x00C45C30-0x00C45D00
		public static Vector3 Max(Vector3 lhs, Vector3 rhs); // 0x00C45D00-0x00C45DD0
		public static Vector3 operator +(Vector3 a, Vector3 b); // 0x00C424B4-0x00C424C4
		public static Vector3 operator -(Vector3 a, Vector3 b); // 0x00C429A8-0x00C429B8
		public static Vector3 operator -(Vector3 a); // 0x00C45F80-0x00C45F90
		public static Vector3 operator *(Vector3 a, float d); // 0x00C45B30-0x00C45BF0
		public static Vector3 operator *(float d, Vector3 a); // 0x00C45F90-0x00C45FA4
		public static Vector3 operator /(Vector3 a, float d); // 0x00C45620-0x00C45630
		public static bool operator ==(Vector3 lhs, Vector3 rhs); // 0x00C45FA4-0x00C47060
		public static bool operator !=(Vector3 lhs, Vector3 rhs); // 0x00C47060-0x00C472C8
		public override string ToString(); // 0x00C472C8-0x00C472D0
	}

	[DefaultMember] // 0x003A6F4C-0x003A6FFC
	[NativeHeader] // 0x003A6F4C-0x003A6FFC
	[NativeType] // 0x003A6F4C-0x003A6FFC
	[ThreadAndSerializationSafe] // 0x003A6F4C-0x003A6FFC
	[UsedByNativeCode] // 0x003A6F4C-0x003A6FFC
	public struct Quaternion : IEquatable<Quaternion> // TypeDefIndex: 1936
	{
		// Fields
		public float x; // 0x00
		public float y; // 0x04
		public float z; // 0x08
		public float w; // 0x0C
		private static readonly Quaternion identityQuaternion; // 0x00
		public const float kEpsilon = 1E-06f; // Metadata: 0x0021A946
	
		// Properties
		public static Quaternion identity { get; } // 0x008E0120-0x008E018C 
		public Vector3 eulerAngles { get; set; } // 0x008E1668-0x008E174C 0x008E174C-0x008E1754
	
		// Constructors
		public Quaternion(float x, float y, float z, float w); // 0x008E0AC4-0x008E0AD0
		static Quaternion(); // 0x008E1A54-0x008E1AAC
	
		// Methods
		[FreeFunction] // 0x003AE8C4-0x003AE8FC
		public static Quaternion Inverse(Quaternion rotation); // 0x008E0AD0-0x008E0B54
		[FreeFunction] // 0x003AE8FC-0x003AE944
		public static Quaternion Slerp(Quaternion a, Quaternion b, float t); // 0x008E0BC8-0x008E0C68
		[FreeFunction] // 0x003AE944-0x003AE98C
		private static Quaternion Internal_FromEulerRad(Vector3 euler); // 0x008E0CF4-0x008E0D78
		[FreeFunction] // 0x003AE98C-0x003AE9D4
		private static Vector3 Internal_ToEulerRad(Quaternion rotation); // 0x008E0DEC-0x008E0E74
		[FreeFunction] // 0x003AE9D4-0x003AEA1C
		public static Quaternion AngleAxis(float angle, Vector3 axis); // 0x008E0EE8-0x008E0F7C
		[FreeFunction] // 0x003AEA1C-0x003AEA64
		public static Quaternion LookRotation(Vector3 forward, [UnityEngine.Internal.DefaultValue] /* 0x003B1788-0x003B17C0 */ Vector3 upwards); // 0x008E1008-0x008E1098
		[ExcludeFromDocs] // 0x003AEA64-0x003AEA74
		public static Quaternion LookRotation(Vector3 forward); // 0x008E111C-0x008E11E8
		public static Quaternion operator *(Quaternion lhs, Quaternion rhs); // 0x008E11E8-0x008E125C
		public static Vector3 operator *(Quaternion rotation, Vector3 point); // 0x008E125C-0x008E1300
		private static bool IsEqualUsingDot(float dot); // 0x008E1300-0x008E1314
		public static bool operator ==(Quaternion lhs, Quaternion rhs); // 0x008DFEBC-0x008DFF84
		public static bool operator !=(Quaternion lhs, Quaternion rhs); // 0x008E1334-0x008E13FC
		public static float Dot(Quaternion a, Quaternion b); // 0x008E1314-0x008E1334
		public static float Angle(Quaternion a, Quaternion b); // 0x008E13FC-0x008E1508
		private static Vector3 Internal_MakePositive(Vector3 euler); // 0x008E1508-0x008E1668
		public static Quaternion Euler(float x, float y, float z); // 0x008E1754-0x008E1848
		public static Quaternion Euler(Vector3 euler); // 0x008E1848-0x008E1914
		public override int GetHashCode(); // 0x008E1914-0x008E1A3C
		public override bool Equals(object other); // 0x008E1A3C-0x008E1A44
		public bool Equals(Quaternion other); // 0x008E1A44-0x008E1A4C
		public override string ToString(); // 0x008E1A4C-0x008E1A54
		private static void Inverse_Injected(ref Quaternion rotation, out Quaternion ret); // 0x008E0B54-0x008E0BC8
		private static void Slerp_Injected(ref Quaternion a, ref Quaternion b, float t, out Quaternion ret); // 0x008E0C68-0x008E0CF4
		private static void Internal_FromEulerRad_Injected(ref Vector3 euler, out Quaternion ret); // 0x008E0D78-0x008E0DEC
		private static void Internal_ToEulerRad_Injected(ref Quaternion rotation, out Vector3 ret); // 0x008E0E74-0x008E0EE8
		private static void AngleAxis_Injected(float angle, ref Vector3 axis, out Quaternion ret); // 0x008E0F7C-0x008E1008
		private static void LookRotation_Injected(ref Vector3 forward, [UnityEngine.Internal.DefaultValue] /* 0x003B17C0-0x003B17F8 */ ref Vector3 upwards, out Quaternion ret); // 0x008E1098-0x008E111C
	}

	[NativeHeader] // 0x003A6FFC-0x003A70B4
	[NativeHeader] // 0x003A6FFC-0x003A70B4
	[NativeHeader] // 0x003A6FFC-0x003A70B4
	[NativeHeader] // 0x003A6FFC-0x003A70B4
	[ThreadAndSerializationSafe] // 0x003A6FFC-0x003A70B4
	public struct Mathf // TypeDefIndex: 1937
	{
		// Fields
		public static readonly float Epsilon; // 0x00
	
		// Constructors
		static Mathf(); // 0x008D5664-0x008D576C
	
		// Methods
		[FreeFunction] // 0x003AEA74-0x003AEAAC
		public static float GammaToLinearSpace(float value); // 0x008D4698-0x008D4708
		[FreeFunction] // 0x003AEAAC-0x003AEAE4
		public static float LinearToGammaSpace(float value); // 0x008D4708-0x008D4778
		public static float Sin(float f); // 0x008D4778-0x008D47EC
		public static float Cos(float f); // 0x008D47EC-0x008D4860
		public static float Tan(float f); // 0x008D4860-0x008D48D4
		public static float Acos(float f); // 0x008D48D4-0x008D4948
		public static float Atan(float f); // 0x008D4948-0x008D49BC
		public static float Atan2(float y, float x); // 0x008D49BC-0x008D4A38
		public static float Sqrt(float f); // 0x008D4A38-0x008D4AC0
		public static float Abs(float f); // 0x008D4AC0-0x008D4B2C
		public static float Min(float a, float b); // 0x008D4B2C-0x008D4B38
		public static float Min(params /* 0x003B17F8-0x003B1808 */ float[] values); // 0x008D4B38-0x008D4C04
		public static int Min(int a, int b); // 0x008D4C04-0x008D4C10
		public static float Max(float a, float b); // 0x008D4C10-0x008D4C1C
		public static float Max(params /* 0x003B1808-0x003B1818 */ float[] values); // 0x008D4C1C-0x008D4CE8
		public static int Max(int a, int b); // 0x008D4CE8-0x008D4CF4
		public static float Pow(float f, float p); // 0x008D4CF4-0x008D4D70
		public static float Log(float f, float p); // 0x008D4D70-0x008D4DF0
		public static float Ceil(float f); // 0x008D4DF0-0x008D4E5C
		public static float Floor(float f); // 0x008D4E5C-0x008D4EC8
		public static float Round(float f); // 0x008D4EC8-0x008D4FA0
		public static int CeilToInt(float f); // 0x008D4FA0-0x008D500C
		public static int FloorToInt(float f); // 0x008D500C-0x008D5078
		public static int RoundToInt(float f); // 0x008D5078-0x008D5150
		public static float Sign(float f); // 0x008D5150-0x008D5164
		public static float Clamp(float value, float min, float max); // 0x008D5164-0x008D5180
		public static int Clamp(int value, int min, int max); // 0x008D5180-0x008D519C
		public static float Clamp01(float value); // 0x008D519C-0x008D51B8
		public static float Lerp(float a, float b, float t); // 0x008D51B8-0x008D5250
		public static float LerpAngle(float a, float b, float t); // 0x008D5250-0x008D5328
		public static bool Approximately(float a, float b); // 0x008D53B8-0x008D546C
		public static float SmoothDamp(float current, float target, ref float currentVelocity, float smoothTime, [UnityEngine.Internal.DefaultValue] /* 0x003B1818-0x003B1850 */ float maxSpeed, [UnityEngine.Internal.DefaultValue] /* 0x003B1850-0x003B1888 */ float deltaTime); // 0x008D546C-0x008D55C0
		public static float Repeat(float t, float length); // 0x008D5328-0x008D53B8
		public static float InverseLerp(float a, float b, float value); // 0x008D55C0-0x008D5664
	}
}

namespace UnityEngineInternal
{
	public struct MathfInternal // TypeDefIndex: 1938
	{
		// Fields
		public static float FloatMinNormal; // 0x00
		public static float FloatMinDenormal; // 0x04
		public static bool IsFlushToZeroEnabled; // 0x08
	
		// Constructors
		static MathfInternal(); // 0x00C4D270-0x00C4D324
	}
}

namespace UnityEngine
{
	[NativeHeader] // 0x003A70B4-0x003A7100
	[RequiredByNativeCode] // 0x003A70B4-0x003A7100
	public sealed class Mesh : UnityEngine.Object // TypeDefIndex: 1939
	{
		// Properties
		internal bool canAccess { [NativeMethod] /* 0x003AED78-0x003AEDB0 */ get; } // 0x008D7748-0x008D77B4 
		public int subMeshCount { [NativeMethod] /* 0x003AEDB0-0x003AEDF4 */ get; } // 0x008D77B4-0x008D7820 
		public Vector3[] vertices { get; set; } // 0x008D7B4C-0x008D7BA0 0x008D7BA0-0x008D7C04
		public Vector3[] normals { get; set; } // 0x008D7C04-0x008D7C58 0x008D7C58-0x008D7CBC
		public Vector4[] tangents { get; } // 0x008D7CBC-0x008D7D10 
		public Vector2[] uv { get; set; } // 0x008D7D10-0x008D7D64 0x008D7D64-0x008D7DC8
		public Vector2[] uv2 { get; } // 0x008D7DC8-0x008D7E1C 
		public Vector2[] uv3 { get; } // 0x008D7E1C-0x008D7E70 
		public Vector2[] uv4 { get; } // 0x008D7E70-0x008D7EC4 
		public Color32[] colors32 { get; } // 0x008D7EC4-0x008D7F20 
		public int[] triangles { get; set; } // 0x008D831C-0x008D8398 0x008D8398-0x008D8404
	
		// Nested types
		internal enum InternalVertexChannelType // TypeDefIndex: 1940
		{
			Float = 0,
			Color = 2
		}
	
		// Constructors
		[RequiredByNativeCode] // 0x003AEAE4-0x003AEAF4
		public Mesh(); // 0x008D7298-0x008D7308
	
		// Methods
		[FreeFunction] // 0x003AEAF4-0x003AEB2C
		private static void Internal_Create([Writable] /* 0x003B1888-0x003B1898 */ Mesh mono); // 0x008D7308-0x008D7374
		[FreeFunction] // 0x003AEB2C-0x003AEB80
		private int[] GetTrianglesImpl(int submesh, bool applyBaseVertex); // 0x008D7374-0x008D73F8
		[FreeFunction] // 0x003AEB80-0x003AEBD4
		private int[] GetIndicesImpl(int submesh, bool applyBaseVertex); // 0x008D73F8-0x008D747C
		[FreeFunction] // 0x003AEBD4-0x003AEC28
		private void SetIndicesImpl(int submesh, MeshTopology topology, Array indices, int arraySize, bool calculateBounds, int baseVertex); // 0x008D747C-0x008D7530
		[FreeFunction] // 0x003AEC28-0x003AEC7C
		private void PrintErrorCantAccessChannel(VertexAttribute ch); // 0x008D7530-0x008D75A4
		[FreeFunction] // 0x003AEC7C-0x003AECD0
		internal bool HasChannel(VertexAttribute ch); // 0x008D75A4-0x008D7618
		[FreeFunction] // 0x003AECD0-0x003AED24
		private void SetArrayForChannelImpl(VertexAttribute channel, InternalVertexChannelType format, int dim, Array values, int arraySize); // 0x008D7618-0x008D76BC
		[FreeFunction] // 0x003AED24-0x003AED78
		private Array GetAllocArrayFromChannelImpl(VertexAttribute channel, InternalVertexChannelType format, int dim); // 0x008D76BC-0x008D7748
		[NativeMethod] // 0x003AEDF4-0x003AEE2C
		private void ClearImpl(bool keepVertexLayout); // 0x008D7820-0x008D7894
		[NativeMethod] // 0x003AEE2C-0x003AEE64
		private void RecalculateBoundsImpl(); // 0x008D7894-0x008D7900
		[NativeMethod] // 0x003AEE64-0x003AEE9C
		private void RecalculateNormalsImpl(); // 0x008D7900-0x008D796C
		internal VertexAttribute GetUVChannel(int uvIndex); // 0x008D796C-0x008D7A08
		internal static int DefaultDimensionForChannel(VertexAttribute channel); // 0x008D7A08-0x008D7AD0
		private T[] GetAllocArrayFromChannel<T>(VertexAttribute channel, InternalVertexChannelType format, int dim);
		private T[] GetAllocArrayFromChannel<T>(VertexAttribute channel);
		private void SetSizedArrayForChannel(VertexAttribute channel, InternalVertexChannelType format, int dim, Array values, int valuesCount); // 0x008D7AD0-0x008D7B4C
		private void SetArrayForChannel<T>(VertexAttribute channel, T[] values);
		private void SetListForChannel<T>(VertexAttribute channel, InternalVertexChannelType format, int dim, List<T> values);
		private void SetListForChannel<T>(VertexAttribute channel, List<T> values);
		public void SetVertices(List<Vector3> inVertices); // 0x008D7F20-0x008D7F84
		public void SetNormals(List<Vector3> inNormals); // 0x008D7F84-0x008D7FE8
		public void SetTangents(List<Vector4> inTangents); // 0x008D7FE8-0x008D804C
		public void SetColors(List<Color32> inColors); // 0x008D804C-0x008D80B8
		private void SetUvsImpl<T>(int uvIndex, int dim, List<T> uvs);
		public void SetUVs(int channel, List<Vector2> uvs); // 0x008D80B8-0x008D8124
		private void PrintErrorCantAccessIndices(); // 0x008D8124-0x008D81B8
		private bool CheckCanAccessSubmesh(int submesh, bool errorAboutTriangles); // 0x008D821C-0x008D830C
		private bool CheckCanAccessSubmeshTriangles(int submesh); // 0x008D830C-0x008D8314
		private bool CheckCanAccessSubmeshIndices(int submesh); // 0x008D8314-0x008D831C
		public int[] GetIndices(int submesh); // 0x008D8438-0x008D8440
		public int[] GetIndices(int submesh, [UnityEngine.Internal.DefaultValue] /* 0x003B1898-0x003B18D0 */ bool applyBaseVertex); // 0x008D8440-0x008D84D0
		private void SetTrianglesImpl(int submesh, Array triangles, int arraySize, bool calculateBounds, int baseVertex); // 0x008D8414-0x008D8438
		public void SetTriangles(List<int> triangles, int submesh); // 0x008D84D0-0x008D84DC
		public void SetTriangles(List<int> triangles, int submesh, [UnityEngine.Internal.DefaultValue] /* 0x003B18D0-0x003B1908 */ bool calculateBounds, [UnityEngine.Internal.DefaultValue] /* 0x003B1908-0x003B1940 */ int baseVertex); // 0x008D84DC-0x008D85A0
		public void Clear(); // 0x008D860C-0x008D8614
		public void RecalculateBounds(); // 0x008D8614-0x008D86C4
		public void RecalculateNormals(); // 0x008D86C4-0x008D8774
	}
}

namespace UnityEngineInternal
{
	public class ScriptingUtils // TypeDefIndex: 1941
	{
		// Methods
		public static Delegate CreateDelegate(Type type, MethodInfo methodInfo); // 0x00C4D368-0x00C4D370
	}
}

namespace UnityEngine
{
	[ExtensionOfNativeClass] // 0x003A7100-0x003A7180
	[NativeHeader] // 0x003A7100-0x003A7180
	[NativeHeader] // 0x003A7100-0x003A7180
	[RequiredByNativeCode] // 0x003A7100-0x003A7180
	public class MonoBehaviour : Behaviour // TypeDefIndex: 1942
	{
		// Properties
		public bool useGUILayout { get; set; } // 0x008D93B0-0x008D941C 0x008D941C-0x008D9490
	
		// Constructors
		public MonoBehaviour(); // 0x008D89E0-0x008D89E8
	
		// Methods
		public bool IsInvoking(); // 0x008D89E8-0x008D89EC
		public void CancelInvoke(); // 0x008D8A58-0x008D8A5C
		public void Invoke(string methodName, float time); // 0x008D8AC8-0x008D8AD0
		public void InvokeRepeating(string methodName, float time, float repeatRate); // 0x008D8B5C-0x008D8C24
		public void CancelInvoke(string methodName); // 0x008D8C24-0x008D8C28
		public bool IsInvoking(string methodName); // 0x008D8C9C-0x008D8CA0
		[ExcludeFromDocs] // 0x003AEE9C-0x003AEEAC
		public Coroutine StartCoroutine(string methodName); // 0x008D8D14-0x008D8D1C
		public Coroutine StartCoroutine(string methodName, [UnityEngine.Internal.DefaultValue] /* 0x003B1940-0x003B1978 */ object value); // 0x008D8D1C-0x008D8E04
		public Coroutine StartCoroutine(IEnumerator routine); // 0x008D8EF4-0x008D8FC8
		[Obsolete] // 0x003AEEAC-0x003AEEE8
		public Coroutine StartCoroutine_Auto(IEnumerator routine); // 0x008D903C-0x008D9040
		public void StopCoroutine(IEnumerator routine); // 0x008D9040-0x008D9114
		public void StopCoroutine(Coroutine routine); // 0x008D9188-0x008D925C
		public void StopCoroutine(string methodName); // 0x008D92D0-0x008D9344
		public void StopAllCoroutines(); // 0x008D9344-0x008D93B0
		public static void print(object message); // 0x008D9490-0x008D94F8
		[FreeFunction] // 0x003AEEE8-0x003AEF20
		private static void Internal_CancelInvokeAll(MonoBehaviour self); // 0x008D8A5C-0x008D8AC8
		[FreeFunction] // 0x003AEF20-0x003AEF58
		private static bool Internal_IsInvokingAll(MonoBehaviour self); // 0x008D89EC-0x008D8A58
		[FreeFunction] // 0x003AEF58-0x003AEF68
		private static void InvokeDelayed(MonoBehaviour self, string methodName, float time, float repeatRate); // 0x008D8AD0-0x008D8B5C
		[FreeFunction] // 0x003AEF68-0x003AEF78
		private static void CancelInvoke(MonoBehaviour self, string methodName); // 0x008D8C28-0x008D8C9C
		[FreeFunction] // 0x003AEF78-0x003AEF88
		private static bool IsInvoking(MonoBehaviour self, string methodName); // 0x008D8CA0-0x008D8D14
		[FreeFunction] // 0x003AEF88-0x003AEF98
		private static bool IsObjectMonoBehaviour(UnityEngine.Object obj); // 0x008D8E04-0x008D8E70
		private Coroutine StartCoroutineManaged(string methodName, object value); // 0x008D8E70-0x008D8EF4
		private Coroutine StartCoroutineManaged2(IEnumerator enumerator); // 0x008D8FC8-0x008D903C
		private void StopCoroutineManaged(Coroutine routine); // 0x008D925C-0x008D92D0
		private void StopCoroutineFromEnumeratorManaged(IEnumerator routine); // 0x008D9114-0x008D9188
		internal string GetScriptClassName(); // 0x008D94F8-0x008D9564
	}

	internal class SendMouseEvents // TypeDefIndex: 1943
	{
		// Fields
		private static bool s_MouseUsed; // 0x00
		private static readonly HitInfo[] m_LastHit; // 0x08
		private static readonly HitInfo[] m_MouseDownHit; // 0x10
		private static readonly HitInfo[] m_CurrentHit; // 0x18
		private static Camera[] m_Cameras; // 0x20
	
		// Nested types
		private struct HitInfo // TypeDefIndex: 1944
		{
			// Fields
			public GameObject target; // 0x00
			public Camera camera; // 0x08
	
			// Methods
			public void SendMessage(string name); // 0x008E9FBC-0x008E9FC4
			public static implicit operator bool(HitInfo exists); // 0x008E9B8C-0x008E9C7C
			public static bool Compare(HitInfo lhs, HitInfo rhs); // 0x008E9C7C-0x008E9D40
		}
	
		// Constructors
		static SendMouseEvents(); // 0x008E9D40-0x008E9FBC
	
		// Methods
		[RequiredByNativeCode] // 0x003AEF98-0x003AEFA8
		private static void SetMouseMoved(); // 0x008E87C0-0x008E882C
		private static void HitTestLegacyGUI(Camera camera, Vector3 mousePosition, ref HitInfo hitInfo); // 0x008E882C-0x008E8960
		[RequiredByNativeCode] // 0x003AEFA8-0x003AEFB8
		private static void DoSendMouseEvents(int skipRTCameras); // 0x008E8960-0x008E95D4
		private static void SendEvents(int i, HitInfo hit); // 0x008E95D4-0x008E9B8C
	}

	[NativeHeader] // 0x003A7180-0x003A71B8
	internal sealed class NoAllocHelpers // TypeDefIndex: 1945
	{
		// Methods
		public static int SafeLength(Array values); // 0x008D8404-0x008D8414
		public static int SafeLength<T>(List<T> values);
		[FreeFunction] // 0x003AEFB8-0x003AEFF0
		public static Array ExtractArrayFromList(object list); // 0x008D85A0-0x008D860C
	}

	[UsedByNativeCode] // 0x003A71B8-0x003A71C8
	public struct Plane // TypeDefIndex: 1946
	{
		// Fields
		private Vector3 m_Normal; // 0x00
		private float m_Distance; // 0x0C
	
		// Properties
		public Vector3 normal { get; } // 0x008DD6EC-0x008DD700 
		public float distance { get; } // 0x008DD700-0x008DD858 
	
		// Constructors
		public Plane(Vector3 inNormal, Vector3 inPoint); // 0x008DD6D8-0x008DD6EC
	
		// Methods
		public void Set3Points(Vector3 a, Vector3 b, Vector3 c); // 0x008DD858-0x008DD9BC
		public bool Raycast(Ray ray, out float enter); // 0x008DD9BC-0x008DDC0C
		public override string ToString(); // 0x008DDC0C-0x008DDC14
	}

	internal interface IPlayerEditorConnectionNative // TypeDefIndex: 1947
	{
		// Methods
		void Initialize();
		void DisconnectAll();
		void SendMessage(Guid messageId, byte[] data, int playerId);
		void Poll();
		void RegisterInternal(Guid messageId);
		void UnregisterInternal(Guid messageId);
		bool IsConnected();
	}

	[NativeHeader] // 0x003A71C8-0x003A7200
	internal class PlayerConnectionInternal : IPlayerEditorConnectionNative // TypeDefIndex: 1948
	{
		// Constructors
		public PlayerConnectionInternal(); // 0x008D9B10-0x008D9B18
	
		// Methods
		void IPlayerEditorConnectionNative.SendMessage(Guid messageId, byte[] data, int playerId); // 0x008DEF24-0x008DF034
		void IPlayerEditorConnectionNative.Poll(); // 0x008DF0B8-0x008DF0BC
		void IPlayerEditorConnectionNative.RegisterInternal(Guid messageId); // 0x008DF114-0x008DF178
		void IPlayerEditorConnectionNative.UnregisterInternal(Guid messageId); // 0x008DF1E4-0x008DF248
		void IPlayerEditorConnectionNative.Initialize(); // 0x008DF2B4-0x008DF2B8
		bool IPlayerEditorConnectionNative.IsConnected(); // 0x008DF310-0x008DF314
		void IPlayerEditorConnectionNative.DisconnectAll(); // 0x008DF36C-0x008DF370
		[FreeFunction] // 0x003AEFF0-0x003AF028
		private static bool IsConnected(); // 0x008DF314-0x008DF36C
		[FreeFunction] // 0x003AF028-0x003AF060
		private static void Initialize(); // 0x008DF2B8-0x008DF310
		[FreeFunction] // 0x003AF060-0x003AF098
		private static void RegisterInternal(string messageId); // 0x008DF178-0x008DF1E4
		[FreeFunction] // 0x003AF098-0x003AF0D0
		private static void UnregisterInternal(string messageId); // 0x008DF248-0x008DF2B4
		[FreeFunction] // 0x003AF0D0-0x003AF108
		private static void SendMessage(string messageId, byte[] data, int playerId); // 0x008DF034-0x008DF0B8
		[FreeFunction] // 0x003AF108-0x003AF140
		private static void PollInternal(); // 0x008DF0BC-0x008DF114
		[FreeFunction] // 0x003AF140-0x003AF178
		private static void DisconnectAll(); // 0x008DF370-0x008DF3C8
	}
}

namespace UnityEngine.Experimental.PlayerLoop
{
	[RequiredByNativeCode] // 0x003A7200-0x003A7210
	public struct Initialization // TypeDefIndex: 1949
	{
		// Nested types
		[RequiredByNativeCode] // 0x003A7210-0x003A7220
		public struct PlayerUpdateTime // TypeDefIndex: 1950
		{
		}
	
		[RequiredByNativeCode] // 0x003A7220-0x003A7230
		public struct AsyncUploadTimeSlicedUpdate // TypeDefIndex: 1951
		{
		}
	
		[RequiredByNativeCode] // 0x003A7230-0x003A7240
		public struct SynchronizeState // TypeDefIndex: 1952
		{
		}
	
		[RequiredByNativeCode] // 0x003A7240-0x003A7250
		public struct SynchronizeInputs // TypeDefIndex: 1953
		{
		}
	
		[RequiredByNativeCode] // 0x003A7250-0x003A7260
		public struct XREarlyUpdate // TypeDefIndex: 1954
		{
		}
	}

	[RequiredByNativeCode] // 0x003A7260-0x003A7270
	public struct EarlyUpdate // TypeDefIndex: 1955
	{
		// Nested types
		[RequiredByNativeCode] // 0x003A7270-0x003A7280
		public struct PollPlayerConnection // TypeDefIndex: 1956
		{
		}
	
		[RequiredByNativeCode] // 0x003A7280-0x003A7290
		public struct ProfilerStartFrame // TypeDefIndex: 1957
		{
		}
	
		[RequiredByNativeCode] // 0x003A7290-0x003A72A0
		public struct PollHtcsPlayerConnection // TypeDefIndex: 1958
		{
		}
	
		[RequiredByNativeCode] // 0x003A72A0-0x003A72B0
		public struct GpuTimestamp // TypeDefIndex: 1959
		{
		}
	
		[RequiredByNativeCode] // 0x003A72B0-0x003A72C0
		public struct AnalyticsCoreStatsUpdate // TypeDefIndex: 1960
		{
		}
	
		[RequiredByNativeCode] // 0x003A72C0-0x003A72D0
		public struct UnityWebRequestUpdate // TypeDefIndex: 1961
		{
		}
	
		[RequiredByNativeCode] // 0x003A72D0-0x003A72E0
		public struct UpdateStreamingManager // TypeDefIndex: 1962
		{
		}
	
		[RequiredByNativeCode] // 0x003A72E0-0x003A72F0
		public struct ExecuteMainThreadJobs // TypeDefIndex: 1963
		{
		}
	
		[RequiredByNativeCode] // 0x003A72F0-0x003A7300
		public struct ProcessMouseInWindow // TypeDefIndex: 1964
		{
		}
	
		[RequiredByNativeCode] // 0x003A7300-0x003A7310
		public struct ClearIntermediateRenderers // TypeDefIndex: 1965
		{
		}
	
		[RequiredByNativeCode] // 0x003A7310-0x003A7320
		public struct ClearLines // TypeDefIndex: 1966
		{
		}
	
		[RequiredByNativeCode] // 0x003A7320-0x003A7330
		public struct PresentBeforeUpdate // TypeDefIndex: 1967
		{
		}
	
		[RequiredByNativeCode] // 0x003A7330-0x003A7340
		public struct ResetFrameStatsAfterPresent // TypeDefIndex: 1968
		{
		}
	
		[RequiredByNativeCode] // 0x003A7340-0x003A7350
		public struct UpdateAllUnityWebStreams // TypeDefIndex: 1969
		{
		}
	
		[RequiredByNativeCode] // 0x003A7350-0x003A7360
		public struct UpdateAsyncReadbackManager // TypeDefIndex: 1970
		{
		}
	
		[RequiredByNativeCode] // 0x003A7360-0x003A7370
		public struct UpdateTextureStreamingManager // TypeDefIndex: 1971
		{
		}
	
		[RequiredByNativeCode] // 0x003A7370-0x003A7380
		public struct UpdatePreloading // TypeDefIndex: 1972
		{
		}
	
		[RequiredByNativeCode] // 0x003A7380-0x003A7390
		public struct RendererNotifyInvisible // TypeDefIndex: 1973
		{
		}
	
		[RequiredByNativeCode] // 0x003A7390-0x003A73A0
		public struct PlayerCleanupCachedData // TypeDefIndex: 1974
		{
		}
	
		[RequiredByNativeCode] // 0x003A73A0-0x003A73B0
		public struct UpdateMainGameViewRect // TypeDefIndex: 1975
		{
		}
	
		[RequiredByNativeCode] // 0x003A73B0-0x003A73C0
		public struct UpdateCanvasRectTransform // TypeDefIndex: 1976
		{
		}
	
		[RequiredByNativeCode] // 0x003A73C0-0x003A73D0
		public struct UpdateInputManager // TypeDefIndex: 1977
		{
		}
	
		[RequiredByNativeCode] // 0x003A73D0-0x003A73E0
		public struct ProcessRemoteInput // TypeDefIndex: 1978
		{
		}
	
		[RequiredByNativeCode] // 0x003A73E0-0x003A73F0
		public struct XRUpdate // TypeDefIndex: 1979
		{
		}
	
		[RequiredByNativeCode] // 0x003A73F0-0x003A7400
		public struct ScriptRunDelayedStartupFrame // TypeDefIndex: 1980
		{
		}
	
		[RequiredByNativeCode] // 0x003A7400-0x003A7410
		public struct UpdateKinect // TypeDefIndex: 1981
		{
		}
	
		[RequiredByNativeCode] // 0x003A7410-0x003A7420
		public struct DeliverIosPlatformEvents // TypeDefIndex: 1982
		{
		}
	
		[RequiredByNativeCode] // 0x003A7420-0x003A7430
		public struct DispatchEventQueueEvents // TypeDefIndex: 1983
		{
		}
	
		[RequiredByNativeCode] // 0x003A7430-0x003A7440
		public struct DirectorSampleTime // TypeDefIndex: 1984
		{
		}
	
		[RequiredByNativeCode] // 0x003A7440-0x003A7450
		public struct PhysicsResetInterpolatedTransformPosition // TypeDefIndex: 1985
		{
		}
	
		[RequiredByNativeCode] // 0x003A7450-0x003A7460
		public struct SpriteAtlasManagerUpdate // TypeDefIndex: 1986
		{
		}
	
		[RequiredByNativeCode] // 0x003A7460-0x003A7470
		public struct TangoUpdate // TypeDefIndex: 1987
		{
		}
	
		[RequiredByNativeCode] // 0x003A7470-0x003A7480
		public struct PerformanceAnalyticsUpdate // TypeDefIndex: 1988
		{
		}
	}

	[RequiredByNativeCode] // 0x003A7480-0x003A7490
	public struct FixedUpdate // TypeDefIndex: 1989
	{
		// Nested types
		[RequiredByNativeCode] // 0x003A7490-0x003A74A0
		public struct ClearLines // TypeDefIndex: 1990
		{
		}
	
		[RequiredByNativeCode] // 0x003A74A0-0x003A74B0
		public struct DirectorFixedSampleTime // TypeDefIndex: 1991
		{
		}
	
		[RequiredByNativeCode] // 0x003A74B0-0x003A74C0
		public struct AudioFixedUpdate // TypeDefIndex: 1992
		{
		}
	
		[RequiredByNativeCode] // 0x003A74C0-0x003A74D0
		public struct ScriptRunBehaviourFixedUpdate // TypeDefIndex: 1993
		{
		}
	
		[RequiredByNativeCode] // 0x003A74D0-0x003A74E0
		public struct DirectorFixedUpdate // TypeDefIndex: 1994
		{
		}
	
		[RequiredByNativeCode] // 0x003A74E0-0x003A74F0
		public struct LegacyFixedAnimationUpdate // TypeDefIndex: 1995
		{
		}
	
		[RequiredByNativeCode] // 0x003A74F0-0x003A7500
		public struct XRFixedUpdate // TypeDefIndex: 1996
		{
		}
	
		[RequiredByNativeCode] // 0x003A7500-0x003A7510
		public struct PhysicsFixedUpdate // TypeDefIndex: 1997
		{
		}
	
		[RequiredByNativeCode] // 0x003A7510-0x003A7520
		public struct Physics2DFixedUpdate // TypeDefIndex: 1998
		{
		}
	
		[RequiredByNativeCode] // 0x003A7520-0x003A7530
		public struct DirectorFixedUpdatePostPhysics // TypeDefIndex: 1999
		{
		}
	
		[RequiredByNativeCode] // 0x003A7530-0x003A7540
		public struct ScriptRunDelayedFixedFrameRate // TypeDefIndex: 2000
		{
		}
	
		[RequiredByNativeCode] // 0x003A7540-0x003A7550
		public struct NewInputFixedUpdate // TypeDefIndex: 2001
		{
		}
	}

	[RequiredByNativeCode] // 0x003A7550-0x003A7560
	public struct PreUpdate // TypeDefIndex: 2002
	{
		// Nested types
		[RequiredByNativeCode] // 0x003A7560-0x003A7570
		public struct PhysicsUpdate // TypeDefIndex: 2003
		{
		}
	
		[RequiredByNativeCode] // 0x003A7570-0x003A7580
		public struct Physics2DUpdate // TypeDefIndex: 2004
		{
		}
	
		[RequiredByNativeCode] // 0x003A7580-0x003A7590
		public struct CheckTexFieldInput // TypeDefIndex: 2005
		{
		}
	
		[RequiredByNativeCode] // 0x003A7590-0x003A75A0
		public struct IMGUISendQueuedEvents // TypeDefIndex: 2006
		{
		}
	
		[RequiredByNativeCode] // 0x003A75A0-0x003A75B0
		public struct SendMouseEvents // TypeDefIndex: 2007
		{
		}
	
		[RequiredByNativeCode] // 0x003A75B0-0x003A75C0
		public struct AIUpdate // TypeDefIndex: 2008
		{
		}
	
		[RequiredByNativeCode] // 0x003A75C0-0x003A75D0
		public struct WindUpdate // TypeDefIndex: 2009
		{
		}
	
		[RequiredByNativeCode] // 0x003A75D0-0x003A75E0
		public struct UpdateVideo // TypeDefIndex: 2010
		{
		}
	
		[RequiredByNativeCode] // 0x003A75E0-0x003A75F0
		public struct NewInputUpdate // TypeDefIndex: 2011
		{
		}
	}

	[RequiredByNativeCode] // 0x003A75F0-0x003A7600
	public struct Update // TypeDefIndex: 2012
	{
		// Nested types
		[RequiredByNativeCode] // 0x003A7600-0x003A7610
		public struct ScriptRunBehaviourUpdate // TypeDefIndex: 2013
		{
		}
	
		[RequiredByNativeCode] // 0x003A7610-0x003A7620
		public struct DirectorUpdate // TypeDefIndex: 2014
		{
		}
	
		[RequiredByNativeCode] // 0x003A7620-0x003A7630
		public struct ScriptRunDelayedDynamicFrameRate // TypeDefIndex: 2015
		{
		}
	
		[RequiredByNativeCode] // 0x003A7630-0x003A7640
		public struct ScriptRunDelayedTasks // TypeDefIndex: 2016
		{
		}
	}

	[RequiredByNativeCode] // 0x003A7640-0x003A7650
	public struct PreLateUpdate // TypeDefIndex: 2017
	{
		// Nested types
		[RequiredByNativeCode] // 0x003A7650-0x003A7660
		public struct AIUpdatePostScript // TypeDefIndex: 2018
		{
		}
	
		[RequiredByNativeCode] // 0x003A7660-0x003A7670
		public struct DirectorUpdateAnimationBegin // TypeDefIndex: 2019
		{
		}
	
		[RequiredByNativeCode] // 0x003A7670-0x003A7680
		public struct LegacyAnimationUpdate // TypeDefIndex: 2020
		{
		}
	
		[RequiredByNativeCode] // 0x003A7680-0x003A7690
		public struct DirectorUpdateAnimationEnd // TypeDefIndex: 2021
		{
		}
	
		[RequiredByNativeCode] // 0x003A7690-0x003A76A0
		public struct DirectorDeferredEvaluate // TypeDefIndex: 2022
		{
		}
	
		[RequiredByNativeCode] // 0x003A76A0-0x003A76B0
		public struct UpdateNetworkManager // TypeDefIndex: 2023
		{
		}
	
		[RequiredByNativeCode] // 0x003A76B0-0x003A76C0
		public struct UpdateMasterServerInterface // TypeDefIndex: 2024
		{
		}
	
		[RequiredByNativeCode] // 0x003A76C0-0x003A76D0
		public struct UNetUpdate // TypeDefIndex: 2025
		{
		}
	
		[RequiredByNativeCode] // 0x003A76D0-0x003A76E0
		public struct EndGraphicsJobsAfterScriptUpdate // TypeDefIndex: 2026
		{
		}
	
		[RequiredByNativeCode] // 0x003A76E0-0x003A76F0
		public struct ParticleSystemBeginUpdateAll // TypeDefIndex: 2027
		{
		}
	
		[RequiredByNativeCode] // 0x003A76F0-0x003A7700
		public struct ScriptRunBehaviourLateUpdate // TypeDefIndex: 2028
		{
		}
	
		[RequiredByNativeCode] // 0x003A7700-0x003A7710
		public struct ConstraintManagerUpdate // TypeDefIndex: 2029
		{
		}
	}

	[RequiredByNativeCode] // 0x003A7710-0x003A7720
	public struct PostLateUpdate // TypeDefIndex: 2030
	{
		// Nested types
		[RequiredByNativeCode] // 0x003A7720-0x003A7730
		public struct PlayerSendFrameStarted // TypeDefIndex: 2031
		{
		}
	
		[RequiredByNativeCode] // 0x003A7730-0x003A7740
		public struct UpdateRectTransform // TypeDefIndex: 2032
		{
		}
	
		[RequiredByNativeCode] // 0x003A7740-0x003A7750
		public struct UpdateCanvasRectTransform // TypeDefIndex: 2033
		{
		}
	
		[RequiredByNativeCode] // 0x003A7750-0x003A7760
		public struct PlayerUpdateCanvases // TypeDefIndex: 2034
		{
		}
	
		[RequiredByNativeCode] // 0x003A7760-0x003A7770
		public struct UpdateAudio // TypeDefIndex: 2035
		{
		}
	
		[RequiredByNativeCode] // 0x003A7770-0x003A7780
		public struct UpdateVideo // TypeDefIndex: 2036
		{
		}
	
		[RequiredByNativeCode] // 0x003A7780-0x003A7790
		public struct DirectorLateUpdate // TypeDefIndex: 2037
		{
		}
	
		[RequiredByNativeCode] // 0x003A7790-0x003A77A0
		public struct ScriptRunDelayedDynamicFrameRate // TypeDefIndex: 2038
		{
		}
	
		[RequiredByNativeCode] // 0x003A77A0-0x003A77B0
		public struct VFXUpdate // TypeDefIndex: 2039
		{
		}
	
		[RequiredByNativeCode] // 0x003A77B0-0x003A77C0
		public struct ParticleSystemEndUpdateAll // TypeDefIndex: 2040
		{
		}
	
		[RequiredByNativeCode] // 0x003A77C0-0x003A77D0
		public struct EndGraphicsJobsAfterScriptLateUpdate // TypeDefIndex: 2041
		{
		}
	
		[RequiredByNativeCode] // 0x003A77D0-0x003A77E0
		public struct UpdateSubstance // TypeDefIndex: 2042
		{
		}
	
		[RequiredByNativeCode] // 0x003A77E0-0x003A77F0
		public struct UpdateCustomRenderTextures // TypeDefIndex: 2043
		{
		}
	
		[RequiredByNativeCode] // 0x003A77F0-0x003A7800
		public struct UpdateAllRenderers // TypeDefIndex: 2044
		{
		}
	
		[RequiredByNativeCode] // 0x003A7800-0x003A7810
		public struct EnlightenRuntimeUpdate // TypeDefIndex: 2045
		{
		}
	
		[RequiredByNativeCode] // 0x003A7810-0x003A7820
		public struct UpdateAllSkinnedMeshes // TypeDefIndex: 2046
		{
		}
	
		[RequiredByNativeCode] // 0x003A7820-0x003A7830
		public struct ProcessWebSendMessages // TypeDefIndex: 2047
		{
		}
	
		[RequiredByNativeCode] // 0x003A7830-0x003A7840
		public struct SortingGroupsUpdate // TypeDefIndex: 2048
		{
		}
	
		[RequiredByNativeCode] // 0x003A7840-0x003A7850
		public struct UpdateVideoTextures // TypeDefIndex: 2049
		{
		}
	
		[RequiredByNativeCode] // 0x003A7850-0x003A7860
		public struct DirectorRenderImage // TypeDefIndex: 2050
		{
		}
	
		[RequiredByNativeCode] // 0x003A7860-0x003A7870
		public struct PlayerEmitCanvasGeometry // TypeDefIndex: 2051
		{
		}
	
		[RequiredByNativeCode] // 0x003A7870-0x003A7880
		public struct FinishFrameRendering // TypeDefIndex: 2052
		{
		}
	
		[RequiredByNativeCode] // 0x003A7880-0x003A7890
		public struct BatchModeUpdate // TypeDefIndex: 2053
		{
		}
	
		[RequiredByNativeCode] // 0x003A7890-0x003A78A0
		public struct PlayerSendFrameComplete // TypeDefIndex: 2054
		{
		}
	
		[RequiredByNativeCode] // 0x003A78A0-0x003A78B0
		public struct UpdateCaptureScreenshot // TypeDefIndex: 2055
		{
		}
	
		[RequiredByNativeCode] // 0x003A78B0-0x003A78C0
		public struct PresentAfterDraw // TypeDefIndex: 2056
		{
		}
	
		[RequiredByNativeCode] // 0x003A78C0-0x003A78D0
		public struct ClearImmediateRenderers // TypeDefIndex: 2057
		{
		}
	
		[RequiredByNativeCode] // 0x003A78D0-0x003A78E0
		public struct XRPostPresent // TypeDefIndex: 2058
		{
		}
	
		[RequiredByNativeCode] // 0x003A78E0-0x003A78F0
		public struct UpdateResolution // TypeDefIndex: 2059
		{
		}
	
		[RequiredByNativeCode] // 0x003A78F0-0x003A7900
		public struct InputEndFrame // TypeDefIndex: 2060
		{
		}
	
		[RequiredByNativeCode] // 0x003A7900-0x003A7910
		public struct GUIClearEvents // TypeDefIndex: 2061
		{
		}
	
		[RequiredByNativeCode] // 0x003A7910-0x003A7920
		public struct ShaderHandleErrors // TypeDefIndex: 2062
		{
		}
	
		[RequiredByNativeCode] // 0x003A7920-0x003A7930
		public struct ResetInputAxis // TypeDefIndex: 2063
		{
		}
	
		[RequiredByNativeCode] // 0x003A7930-0x003A7940
		public struct ThreadedLoadingDebug // TypeDefIndex: 2064
		{
		}
	
		[RequiredByNativeCode] // 0x003A7940-0x003A7950
		public struct ProfilerSynchronizeStats // TypeDefIndex: 2065
		{
		}
	
		[RequiredByNativeCode] // 0x003A7950-0x003A7960
		public struct MemoryFrameMaintenance // TypeDefIndex: 2066
		{
		}
	
		[RequiredByNativeCode] // 0x003A7960-0x003A7970
		public struct ExecuteGameCenterCallbacks // TypeDefIndex: 2067
		{
		}
	
		[RequiredByNativeCode] // 0x003A7970-0x003A7980
		public struct ProfilerEndFrame // TypeDefIndex: 2068
		{
		}
	
		[RequiredByNativeCode] // 0x003A7980-0x003A7990
		public struct PlayerSendFramePostPresent // TypeDefIndex: 2069
		{
		}
	
		[RequiredByNativeCode] // 0x003A7990-0x003A79A0
		public struct PhysicsSkinnedClothBeginUpdate // TypeDefIndex: 2070
		{
		}
	
		[RequiredByNativeCode] // 0x003A79A0-0x003A79B0
		public struct PhysicsSkinnedClothFinishUpdate // TypeDefIndex: 2071
		{
		}
	
		[RequiredByNativeCode] // 0x003A79B0-0x003A79C0
		public struct TriggerEndOfFrameCallbacks // TypeDefIndex: 2072
		{
		}
	}
}

namespace UnityEngine.Experimental.LowLevel
{
	[NativeType] // 0x003A79C0-0x003A7A18
	[RequiredByNativeCode] // 0x003A79C0-0x003A7A18
	internal struct PlayerLoopSystemInternal // TypeDefIndex: 2073
	{
		// Fields
		public Type type; // 0x00
		public PlayerLoopSystem.UpdateFunction updateDelegate; // 0x08
		public IntPtr updateFunction; // 0x10
		public IntPtr loopConditionFunction; // 0x18
		public int numSubSystems; // 0x20
	}

	public struct PlayerLoopSystem // TypeDefIndex: 2074
	{
		// Fields
		public Type type; // 0x00
		public PlayerLoopSystem[] subSystemList; // 0x08
		public UpdateFunction updateDelegate; // 0x10
		public IntPtr updateFunction; // 0x18
		public IntPtr loopConditionFunction; // 0x20
	
		// Nested types
		public delegate void UpdateFunction(); // TypeDefIndex: 2075; 0x009C992C-0x009C9D2C
	}
}

namespace UnityEngine
{
	public class PlayerPrefsException : Exception // TypeDefIndex: 2076
	{
		// Constructors
		public PlayerPrefsException(string error); // 0x008DF5C0-0x008DF638
	}

	[NativeHeader] // 0x003A7A18-0x003A7A50
	public class PlayerPrefs // TypeDefIndex: 2077
	{
		// Methods
		[NativeMethod] // 0x003AF178-0x003AF1B0
		private static bool TrySetInt(string key, int value); // 0x008DF3C8-0x008DF43C
		[NativeMethod] // 0x003AF1B0-0x003AF1E8
		private static bool TrySetFloat(string key, float value); // 0x008DF43C-0x008DF4B0
		[NativeMethod] // 0x003AF1E8-0x003AF220
		private static bool TrySetSetString(string key, string value); // 0x008DF4B0-0x008DF524
		public static void SetInt(string key, int value); // 0x008DF524-0x008DF5C0
		public static int GetInt(string key, int defaultValue); // 0x008DF638-0x008DF6AC
		public static int GetInt(string key); // 0x008DF6AC-0x008DF6B4
		public static void SetFloat(string key, float value); // 0x008DF6B4-0x008DF750
		public static void SetString(string key, string value); // 0x008DF750-0x008DF7EC
		public static string GetString(string key, string defaultValue); // 0x008DF7EC-0x008DF860
		public static string GetString(string key); // 0x008DF860-0x008DF8B0
		public static bool HasKey(string key); // 0x008DF8B0-0x008DF91C
		public static void DeleteKey(string key); // 0x008DF91C-0x008DF988
		[NativeMethod] // 0x003AF220-0x003AF258
		public static void DeleteAll(); // 0x008DF988-0x008DF9E0
		[NativeMethod] // 0x003AF258-0x003AF290
		public static void Save(); // 0x008DF9E0-0x008DFA38
	}

	[Serializable]
	public struct Pose : IEquatable<Pose> // TypeDefIndex: 2078
	{
		// Fields
		public Vector3 position; // 0x00
		public Quaternion rotation; // 0x0C
		private static readonly Pose k_Identity; // 0x00
	
		// Constructors
		public Pose(Vector3 position, Quaternion rotation); // 0x008DFA38-0x008DFCD8
		static Pose(); // 0x008E005C-0x008E0120
	
		// Methods
		public override string ToString(); // 0x008DFCD8-0x008DFEB4
		public override bool Equals(object obj); // 0x008DFEB4-0x008DFEBC
		public bool Equals(Pose other); // 0x008DFF84-0x008E0024
		public override int GetHashCode(); // 0x008E0024-0x008E005C
	}

	[AttributeUsage] // 0x003A7A50-0x003A7A9C
	public abstract class PropertyAttribute : Attribute // TypeDefIndex: 2079
	{
		// Constructors
		protected PropertyAttribute(); // 0x008D1920-0x008D1928
	}

	[AttributeUsage] // 0x003A7A9C-0x003A7AE8
	public class TooltipAttribute : PropertyAttribute // TypeDefIndex: 2080
	{
		// Fields
		public readonly string tooltip; // 0x10
	
		// Constructors
		public TooltipAttribute(string tooltip); // 0x00C4053C-0x00C40570
	}

	[AttributeUsage] // 0x003A7AE8-0x003A7B34
	public class SpaceAttribute : PropertyAttribute // TypeDefIndex: 2081
	{
		// Fields
		public readonly float height; // 0x10
	
		// Constructors
		public SpaceAttribute(); // 0x008EA400-0x008EA42C
		public SpaceAttribute(float height); // 0x008EA42C-0x008EA460
	}

	[AttributeUsage] // 0x003A7B34-0x003A7B80
	public class HeaderAttribute : PropertyAttribute // TypeDefIndex: 2082
	{
		// Fields
		public readonly string header; // 0x10
	
		// Constructors
		public HeaderAttribute(string header); // 0x008D18F4-0x008D1920
	}

	[AttributeUsage] // 0x003A7B80-0x003A7BCC
	public sealed class RangeAttribute : PropertyAttribute // TypeDefIndex: 2083
	{
		// Fields
		public readonly float min; // 0x10
		public readonly float max; // 0x14
	
		// Constructors
		public RangeAttribute(float min, float max); // 0x008E1B94-0x008E1BD4
	}

	[AttributeUsage] // 0x003A7BCC-0x003A7C18
	public sealed class TextAreaAttribute : PropertyAttribute // TypeDefIndex: 2084
	{
		// Fields
		public readonly int minLines; // 0x10
		public readonly int maxLines; // 0x14
	
		// Constructors
		public TextAreaAttribute(int minLines, int maxLines); // 0x00C3CE50-0x00C3CE88
	}

	[NativeHeader] // 0x003A7C18-0x003A7C50
	internal class PropertyNameUtils // TypeDefIndex: 2085
	{
		// Methods
		[FreeFunction] // 0x003AF290-0x003AF2A0
		public static PropertyName PropertyNameFromString([Unmarshalled] /* 0x003B1978-0x003B1988 */ string name); // 0x008E0810-0x008E0838
		private static void PropertyNameFromString_Injected(string name, out PropertyName ret); // 0x008E09EC-0x008E0A60
	}

	[UsedByNativeCode] // 0x003A7C50-0x003A7C60
	public struct PropertyName : IEquatable<PropertyName> // TypeDefIndex: 2086
	{
		// Fields
		internal int id; // 0x00
	
		// Constructors
		public PropertyName(string name); // 0x008E0838-0x008E0870
		public PropertyName(PropertyName other); // 0x008E0870-0x008E0878
		public PropertyName(int id); // 0x008E0878-0x008E0880
	
		// Methods
		public static bool operator ==(PropertyName lhs, PropertyName rhs); // 0x008E0880-0x008E088C
		public override int GetHashCode(); // 0x008E088C-0x008E091C
		public override bool Equals(object other); // 0x008E091C-0x008E0924
		public bool Equals(PropertyName other); // 0x008E0924-0x008E0934
		public static implicit operator PropertyName(string name); // 0x008E0934-0x008E095C
		public static implicit operator PropertyName(int id); // 0x008E095C-0x008E09E4
		public override string ToString(); // 0x008E09E4-0x008E09EC
	}

	[NativeHeader] // 0x003A7C60-0x003A7C98
	public sealed class Random // TypeDefIndex: 2087
	{
		// Methods
		[FreeFunction] // 0x003AF2A0-0x003AF2B0
		public static float Range(float min, float max); // 0x008E1AAC-0x008E1B1C
		public static int Range(int min, int max); // 0x008E1B1C-0x008E1B20
		[FreeFunction] // 0x003AF2B0-0x003AF2C0
		private static int RandomRangeInt(int min, int max); // 0x008E1B20-0x008E1B94
	}

	public struct RangeInt // TypeDefIndex: 2088
	{
		// Fields
		public int start; // 0x00
		public int length; // 0x04
	
		// Properties
		public int end { get; } // 0x008E1BE8-0x008E1C3C 
	
		// Constructors
		public RangeInt(int start, int length); // 0x008E1BD4-0x008E1BE8
	}

	public struct Ray // TypeDefIndex: 2089
	{
		// Fields
		private Vector3 m_Origin; // 0x00
		private Vector3 m_Direction; // 0x0C
	
		// Properties
		public Vector3 origin { get; } // 0x008E1C44-0x008E1C50 
		public Vector3 direction { get; } // 0x008E1C50-0x008E1D20 
	
		// Constructors
		public Ray(Vector3 origin, Vector3 direction); // 0x008E1C3C-0x008E1C44
	
		// Methods
		public Vector3 GetPoint(float distance); // 0x008E1D20-0x008E1E90
		public override string ToString(); // 0x008E1E90-0x008E1EA4
	}

	[NativeClass] // 0x003A7C98-0x003A7D40
	[NativeHeader] // 0x003A7C98-0x003A7D40
	[RequiredByNativeCode] // 0x003A7C98-0x003A7D40
	public struct Rect : IEquatable<Rect> // TypeDefIndex: 2090
	{
		// Fields
		[NativeName] // 0x003AA654-0x003AA68C
		private float m_XMin; // 0x00
		[NativeName] // 0x003AA68C-0x003AA6C4
		private float m_YMin; // 0x04
		[NativeName] // 0x003AA6C4-0x003AA6FC
		private float m_Width; // 0x08
		[NativeName] // 0x003AA6FC-0x003AA734
		private float m_Height; // 0x0C
	
		// Properties
		public static Rect zero { [CompilerGenerated] /* 0x003AF2C0-0x003AF2D0 */ get; } // 0x008E1EC8-0x008E1EDC 
		public float x { get; set; } // 0x008E1EF0-0x008E1F00 0x008E1F00-0x008E1F10
		public float y { get; set; } // 0x008E1F10-0x008E1F20 0x008E1F20-0x008E1F58
		public Vector2 position { get; } // 0x008E1F58-0x008E1FD0 
		public Vector2 center { get; } // 0x008E1FD0-0x008E2018 
		public Vector2 min { get; } // 0x008E2018-0x008E20A4 
		public Vector2 max { get; } // 0x008E20A4-0x008E20E8 
		public float width { get; set; } // 0x008E20E8-0x008E20F8 0x008E20F8-0x008E2108
		public float height { get; set; } // 0x008E2108-0x008E2118 0x008E2118-0x008E2150
		public Vector2 size { get; } // 0x008E2150-0x008E2180 
		public float xMin { get; set; } // 0x008E2180-0x008E2188 0x008E2188-0x008E21A4
		public float yMin { get; set; } // 0x008E21A4-0x008E21AC 0x008E21AC-0x008E21C8
		public float xMax { get; set; } // 0x008E21C8-0x008E21D8 0x008E21D8-0x008E21E8
		public float yMax { get; set; } // 0x008E21E8-0x008E21F8 0x008E21F8-0x008E224C
	
		// Constructors
		public Rect(float x, float y, float width, float height); // 0x008E1EA4-0x008E1EBC
		public Rect(Rect source); // 0x008E1EBC-0x008E1EC8
	
		// Methods
		public static Rect MinMaxRect(float xmin, float ymin, float xmax, float ymax); // 0x008E1EDC-0x008E1EF0
		public bool Contains(Vector2 point); // 0x008E224C-0x008E2290
		public bool Contains(Vector3 point); // 0x008E2290-0x008E22D4
		private static Rect OrderMinMax(Rect rect); // 0x008E22D4-0x008E234C
		public bool Overlaps(Rect other); // 0x008E234C-0x008E23E8
		public bool Overlaps(Rect other, bool allowInverse); // 0x008E23E8-0x008E23F4
		public static bool operator !=(Rect lhs, Rect rhs); // 0x008E23F4-0x008E2424
		public static bool operator ==(Rect lhs, Rect rhs); // 0x008E2424-0x008E24E8
		public override int GetHashCode(); // 0x008E24E8-0x008E2640
		public override bool Equals(object other); // 0x008E2640-0x008E2648
		public bool Equals(Rect other); // 0x008E2648-0x008E2868
		public override string ToString(); // 0x008E2868-0x008E299C
	}

	[NativeHeader] // 0x003A7D40-0x003A7D78
	public sealed class ReflectionProbe : Behaviour // TypeDefIndex: 2091
	{
		// Fields
		[CompilerGenerated] // 0x003AA734-0x003AA770
		[DebuggerBrowsable] // 0x003AA734-0x003AA770
		private static Action<ReflectionProbe, ReflectionProbeEvent> reflectionProbeChanged; // 0x00
		[CompilerGenerated] // 0x003AA770-0x003AA7AC
		[DebuggerBrowsable] // 0x003AA770-0x003AA7AC
		private static Action<Cubemap> defaultReflectionSet; // 0x08
	
		// Nested types
		public enum ReflectionProbeEvent // TypeDefIndex: 2092
		{
			ReflectionProbeAdded = 0,
			ReflectionProbeRemoved = 1
		}
	
		// Methods
		[RequiredByNativeCode] // 0x003AF2D0-0x003AF2E0
		private static void CallReflectionProbeEvent(ReflectionProbe probe, ReflectionProbeEvent probeEvent); // 0x008E4FB0-0x008E5038
		[RequiredByNativeCode] // 0x003AF2E0-0x003AF2F0
		private static void CallSetDefaultReflection(Cubemap defaultReflectionCubemap); // 0x008E5038-0x008E50B0
	}
}

namespace UnityEngine.Rendering
{
	[NativeHeader] // 0x003A7D78-0x003A7E0C
	[NativeHeader] // 0x003A7D78-0x003A7E0C
	[NativeType] // 0x003A7D78-0x003A7E0C
	[UsedByNativeCode] // 0x003A7D78-0x003A7E0C
	public class CommandBuffer : IDisposable // TypeDefIndex: 2093
	{
		// Fields
		internal IntPtr m_Ptr; // 0x10
	
		// Properties
		public string name { set; } // 0x008E6D64-0x008E6DD8
	
		// Constructors
		public CommandBuffer(); // 0x008E6C74-0x008E6CA0
	
		// Methods
		[FreeFunction] // 0x003AF2F0-0x003AF328
		private static IntPtr InitBuffer(); // 0x008E6CA0-0x008E6CF8
		[FreeFunction] // 0x003AF328-0x003AF380
		private void ReleaseBuffer(); // 0x008E6CF8-0x008E6D64
		[NativeMethod] // 0x003AF380-0x003AF3B8
		public void Clear(); // 0x008E6DD8-0x008E6E44
		[FreeFunction] // 0x003AF3B8-0x003AF400
		private void IssuePluginCustomTextureUpdateInternal(IntPtr callback, Texture targetTexture, uint userData, bool useNewUnityRenderingExtTextureUpdateParamsV2); // 0x008E6E44-0x008E6EE0
		~CommandBuffer(); // 0x008E6EE0-0x008E6F58
		public void Dispose(); // 0x008E6FA4-0x008E7018
		private void Dispose(bool disposing); // 0x008E6F58-0x008E6FA4
		[Obsolete] // 0x003AF400-0x003AF43C
		public void IssuePluginCustomTextureUpdate(IntPtr callback, Texture targetTexture, uint userData); // 0x008E7018-0x008E7020
	}
}

namespace UnityEngine
{
	[RequiredByNativeCode] // 0x003A7E0C-0x003A7E1C
	public class ResourceRequest : AsyncOperation // TypeDefIndex: 2094
	{
		// Fields
		internal string m_Path; // 0x20
		internal Type m_Type; // 0x28
	}

	[NativeHeader] // 0x003A7E1C-0x003A7E7C
	[NativeHeader] // 0x003A7E1C-0x003A7E7C
	public sealed class Resources // TypeDefIndex: 2095
	{
		// Methods
		internal static T[] ConvertObjects<T>(UnityEngine.Object[] rawObjects)
			where T : UnityEngine.Object;
		[FreeFunction] // 0x003AF43C-0x003AF48C
		[TypeInferenceRule] // 0x003AF43C-0x003AF48C
		public static UnityEngine.Object[] FindObjectsOfTypeAll(Type type); // 0x008E7258-0x008E72C4
		public static T[] FindObjectsOfTypeAll<T>()
			where T : UnityEngine.Object;
		public static UnityEngine.Object Load(string path); // 0x008E72C4-0x008E7344
		public static T Load<T>(string path)
			where T : UnityEngine.Object;
		[FreeFunction] // 0x003AF48C-0x003AF4EC
		[NativeThrows] // 0x003AF48C-0x003AF4EC
		[TypeInferenceRule] // 0x003AF48C-0x003AF4EC
		public static UnityEngine.Object Load(string path, [NotNull] /* 0x003B1988-0x003B1998 */ Type systemTypeInstance); // 0x008E7344-0x008E73B8
		[FreeFunction] // 0x003AF4EC-0x003AF53C
		[TypeInferenceRule] // 0x003AF4EC-0x003AF53C
		public static UnityEngine.Object GetBuiltinResource([NotNull] /* 0x003B1998-0x003B19A8 */ Type type, string path); // 0x008E73B8-0x008E742C
		public static T GetBuiltinResource<T>(string path)
			where T : UnityEngine.Object;
	}

	public enum RuntimeInitializeLoadType // TypeDefIndex: 2096
	{
		AfterSceneLoad = 0,
		BeforeSceneLoad = 1
	}

	[AttributeUsage] // 0x003A7E7C-0x003A7EB8
	public class RuntimeInitializeOnLoadMethodAttribute : PreserveAttribute // TypeDefIndex: 2097
	{
		// Fields
		[CompilerGenerated] // 0x003AA7AC-0x003AA7E8
		[DebuggerBrowsable] // 0x003AA7AC-0x003AA7E8
		private RuntimeInitializeLoadType <loadType>k__BackingField; // 0x10
	
		// Properties
		private RuntimeInitializeLoadType loadType { [CompilerGenerated] /* 0x003AF53C-0x003AF54C */ set; } // 0x008E7460-0x008E7468
	
		// Constructors
		public RuntimeInitializeOnLoadMethodAttribute(RuntimeInitializeLoadType loadType); // 0x008E742C-0x008E7458
	}

	[ExtensionOfNativeClass] // 0x003A7EB8-0x003A7F28
	[NativeClass] // 0x003A7EB8-0x003A7F28
	[NativeHeader] // 0x003A7EB8-0x003A7F28
	[RequiredByNativeCode] // 0x003A7EB8-0x003A7F28
	public class ScriptableObject : UnityEngine.Object // TypeDefIndex: 2098
	{
		// Constructors
		public ScriptableObject(); // 0x008D969C-0x008D970C
	
		// Methods
		public static ScriptableObject CreateInstance(Type type); // 0x008E86C4-0x008E86C8
		public static T CreateInstance<T>()
			where T : ScriptableObject;
		[NativeMethod] // 0x003AF54C-0x003AF584
		private static void CreateScriptableObject([Writable] /* 0x003B19A8-0x003B19B8 */ ScriptableObject self); // 0x008E8658-0x008E86C4
		[FreeFunction] // 0x003AF584-0x003AF5BC
		private static ScriptableObject CreateScriptableObjectInstanceFromType(Type type); // 0x008E86C8-0x008E8734
	}
}

namespace UnityEngine.Experimental.Rendering
{
	[NativeHeader] // 0x003A7F28-0x003A7FD0
	[NativeHeader] // 0x003A7F28-0x003A7FD0
	[NativeHeader] // 0x003A7F28-0x003A7FD0
	[NativeType] // 0x003A7F28-0x003A7FD0
	public struct ScriptableRenderContext // TypeDefIndex: 2099
	{
		// Fields
		private IntPtr m_Ptr; // 0x00
	
		// Constructors
		internal ScriptableRenderContext(IntPtr ptr); // 0x009CAC58-0x009CAC60
	}
}

namespace UnityEngine
{
	[AttributeUsage] // 0x003A7FD0-0x003A801C
	public class SelectionBaseAttribute : Attribute // TypeDefIndex: 2100
	{
		// Constructors
		public SelectionBaseAttribute(); // 0x008E87B8-0x008E87C0
	}

	[Obsolete] // 0x003A801C-0x003A8068
	[RequiredByNativeCode] // 0x003A801C-0x003A8068
	public sealed class SerializePrivateVariables : Attribute // TypeDefIndex: 2101
	{
	}

	[RequiredByNativeCode] // 0x003A8068-0x003A8078
	public sealed class SerializeField : Attribute // TypeDefIndex: 2102
	{
		// Constructors
		public SerializeField(); // 0x008E9FF0-0x008E9FF8
	}

	[AttributeUsage] // 0x003A8078-0x003A80B4
	[RequiredByNativeCode] // 0x003A8078-0x003A80B4
	public sealed class PreferBinarySerialization : Attribute // TypeDefIndex: 2103
	{
	}

	[RequiredByNativeCode] // 0x003A80B4-0x003A80C4
	public interface ISerializationCallbackReceiver // TypeDefIndex: 2104
	{
		// Methods
		[RequiredByNativeCode] // 0x003AF5BC-0x003AF5CC
		void OnBeforeSerialize();
		[RequiredByNativeCode] // 0x003AF5CC-0x003AF5DC
		void OnAfterDeserialize();
	}

	[NativeHeader] // 0x003A80C4-0x003A8110
	[UsedByNativeCode] // 0x003A80C4-0x003A8110
	public sealed class ComputeShader : UnityEngine.Object // TypeDefIndex: 2105
	{
		// Methods
		[NativeMethod] // 0x003AF5DC-0x003AF664
		[RequiredByNativeCode] // 0x003AF5DC-0x003AF664
		public int FindKernel(string name); // 0x009C36B0-0x009C3740
	}

	[NativeHeader] // 0x003A8110-0x003A8148
	public struct SortingLayer // TypeDefIndex: 2106
	{
		// Fields
		private int m_Id; // 0x00
	
		// Methods
		[FreeFunction] // 0x003AF664-0x003AF69C
		public static int GetLayerValueFromID(int id); // 0x008EA394-0x008EA400
	}

	public static class StackTraceUtility // TypeDefIndex: 2107
	{
		// Fields
		private static string projectFolder; // 0x00
	
		// Constructors
		static StackTraceUtility(); // 0x00C3C8B0-0x00C3C90C
	
		// Methods
		[RequiredByNativeCode] // 0x003AF69C-0x003AF6AC
		internal static void SetProjectFolder(string folder); // 0x00C3B294-0x00C3B378
		[RequiredByNativeCode] // 0x003AF6AC-0x003AF6BC
		public static string ExtractStackTrace(); // 0x00C3B378-0x00C3B418
		private static bool IsSystemStacktraceType(object name); // 0x00C3BBF4-0x00C3BD78
		[RequiredByNativeCode] // 0x003AF6BC-0x003AF6CC
		internal static void ExtractStringFromExceptionInternal(object exceptiono, out string message, out string stackTrace); // 0x00C3BD78-0x00C3C12C
		[RequiredByNativeCode] // 0x003AF6CC-0x003AF6DC
		internal static string PostprocessStacktrace(string oldString, bool stripEngineInternalInformation); // 0x00C3C12C-0x00C3C8B0
		internal static string ExtractFormattedStackTrace(StackTrace stackTrace); // 0x00C3B418-0x00C3BBF4
	}

	[Serializable]
	[RequiredByNativeCode] // 0x003A8148-0x003A8158
	public class UnityException : Exception // TypeDefIndex: 2108
	{
		// Constructors
		public UnityException(); // 0x00C43870-0x00C438F8
		public UnityException(string message); // 0x00C3E864-0x00C3E8F0
		protected UnityException(SerializationInfo info, StreamingContext context); // 0x00C438F8-0x00C43988
	}

	[Serializable]
	public class MissingReferenceException : Exception // TypeDefIndex: 2109
	{
		// Constructors
		public MissingReferenceException(); // 0x008D88C8-0x008D8950
		protected MissingReferenceException(SerializationInfo info, StreamingContext context); // 0x008D8950-0x008D89E0
	}

	[VisibleToOtherModules] // 0x003A8158-0x003A8168
	internal class SystemClock // TypeDefIndex: 2110
	{
		// Fields
		private static readonly DateTime s_Epoch; // 0x00
	
		// Properties
		public static DateTime now { get; } // 0x00C3C90C-0x00C3C96C 
	
		// Constructors
		static SystemClock(); // 0x00C3C96C-0x00C3C9F4
	}

	public enum OperatingSystemFamily // TypeDefIndex: 2111
	{
		Other = 0,
		MacOSX = 1,
		Windows = 2,
		Linux = 3
	}

	[NativeHeader] // 0x003A8168-0x003A8234
	[NativeHeader] // 0x003A8168-0x003A8234
	[NativeHeader] // 0x003A8168-0x003A8234
	[NativeHeader] // 0x003A8168-0x003A8234
	[NativeHeader] // 0x003A8168-0x003A8234
	public sealed class SystemInfo // TypeDefIndex: 2112
	{
		// Properties
		public static OperatingSystemFamily operatingSystemFamily { get; } // 0x00C3C9F4-0x00C3C9F8 
		public static string deviceUniqueIdentifier { get; } // 0x00C3CA50-0x00C3CA54 
		public static GraphicsDeviceType graphicsDeviceType { get; } // 0x00C3CAAC-0x00C3CAB0 
	
		// Methods
		private static bool IsValidEnumValue(Enum value); // 0x00C3CB08-0x00C3CB94
		public static bool SupportsRenderTextureFormat(RenderTextureFormat format); // 0x00C3CB94-0x00C3CC4C
		public static bool SupportsTextureFormat(TextureFormat format); // 0x00C3CCB8-0x00C3CD70
		[FreeFunction] // 0x003AF6DC-0x003AF714
		private static OperatingSystemFamily GetOperatingSystemFamily(); // 0x00C3C9F8-0x00C3CA50
		[FreeFunction] // 0x003AF714-0x003AF74C
		private static string GetDeviceUniqueIdentifier(); // 0x00C3CA54-0x00C3CAAC
		[FreeFunction] // 0x003AF74C-0x003AF784
		private static GraphicsDeviceType GetGraphicsDeviceType(); // 0x00C3CAB0-0x00C3CB08
		[FreeFunction] // 0x003AF784-0x003AF7BC
		private static bool HasRenderTextureNative(RenderTextureFormat format); // 0x00C3CC4C-0x00C3CCB8
		[FreeFunction] // 0x003AF7BC-0x003AF7F4
		private static bool SupportsTextureFormatNative(TextureFormat format); // 0x00C3CD70-0x00C3CDDC
		[FreeFunction] // 0x003AF7F4-0x003AF82C
		public static bool IsFormatSupported(GraphicsFormat format, FormatUsage usage); // 0x00C3CDDC-0x00C3CE50
	}

	[NativeHeader] // 0x003A8234-0x003A82A4
	[NativeHeader] // 0x003A8234-0x003A82A4
	[UsedByNativeCode] // 0x003A8234-0x003A82A4
	public class Texture : UnityEngine.Object // TypeDefIndex: 2113
	{
		// Properties
		public virtual int width { get; set; } // 0x00C3CFC8-0x00C3CFCC 0x00C3CFCC-0x00C3E034
		public virtual int height { get; set; } // 0x00C3E034-0x00C3E038 0x00C3E038-0x00C3E0A0
		public virtual bool isReadable { get; } // 0x00C3E0A0-0x00C3E10C 
		public TextureWrapMode wrapMode { [NativeName] /* 0x003AF82C-0x003AF864 */ get; set; } // 0x00C3E10C-0x00C3E178 0x00C3E178-0x00C3E1EC
		public FilterMode filterMode { set; } // 0x00C3E1EC-0x00C3E260
		public int anisoLevel { set; } // 0x00C3E260-0x00C3E2D4
		public Vector2 texelSize { [NativeName] /* 0x003AF864-0x003AF89C */ get; } // 0x00C3E2D4-0x00C3E2FC 
	
		// Constructors
		protected Texture(); // 0x00C3CE88-0x00C3CEF0
	
		// Methods
		private int GetDataWidth(); // 0x00C3CEF0-0x00C3CF5C
		private int GetDataHeight(); // 0x00C3CF5C-0x00C3CFC8
		public IntPtr GetNativeTexturePtr(); // 0x00C3E370-0x00C3E3DC
		internal bool ValidateFormat(RenderTextureFormat format); // 0x00C3E3DC-0x00C3E4E4
		internal bool ValidateFormat(TextureFormat format); // 0x00C3E4E4-0x00C3E65C
		internal bool ValidateFormat(GraphicsFormat format, FormatUsage usage); // 0x00C3E65C-0x00C3E7C8
		internal UnityException CreateNonReadableException(Texture t); // 0x00C3E7C8-0x00C3E864
		private void get_texelSize_Injected(out Vector2 ret); // 0x00C3E2FC-0x00C3E370
	}

	[NativeHeader] // 0x003A82A4-0x003A8314
	[NativeHeader] // 0x003A82A4-0x003A8314
	[UsedByNativeCode] // 0x003A82A4-0x003A8314
	public sealed class Texture2D : Texture // TypeDefIndex: 2114
	{
		// Properties
		public TextureFormat format { [NativeName] /* 0x003AF89C-0x003AF8D4 */ get; } // 0x00C3EBF0-0x00C3EC5C 
		[StaticAccessor] // 0x003B2224-0x003B2260
		public static Texture2D whiteTexture { get; } // 0x00C3EC5C-0x00C3ECB4 
		public override bool isReadable { get; } // 0x00C3ED58-0x00C3EDC4 
	
		// Constructors
		internal Texture2D(int width, int height, TextureFormat textureFormat, bool mipChain, bool linear, IntPtr nativeTex); // 0x00C3E8F0-0x00C3E9B4
		public Texture2D(int width, int height, [UnityEngine.Internal.DefaultValue] /* 0x003B19B8-0x003B19F0 */ TextureFormat textureFormat, [UnityEngine.Internal.DefaultValue] /* 0x003B19F0-0x003B1A28 */ bool mipChain, [UnityEngine.Internal.DefaultValue] /* 0x003B1A28-0x003B1A60 */ bool linear); // 0x00C3EA80-0x00C3EB08
		public Texture2D(int width, int height, TextureFormat textureFormat, bool mipChain); // 0x00C3EB08-0x00C3EB84
		public Texture2D(int width, int height); // 0x00C3EB84-0x00C3EBF0
	
		// Methods
		[FreeFunction] // 0x003AF8D4-0x003AF90C
		private static bool Internal_CreateImpl([Writable] /* 0x003B1A60-0x003B1A70 */ Texture2D mono, int w, int h, GraphicsFormat format, TextureCreationFlags flags, IntPtr nativeTex); // 0x00C3ECB4-0x00C3ED58
		private static void Internal_Create([Writable] /* 0x003B1A70-0x003B1A80 */ Texture2D mono, int w, int h, GraphicsFormat format, TextureCreationFlags flags, IntPtr nativeTex); // 0x00C3E9B4-0x00C3EA80
		[NativeName] // 0x003AF90C-0x003AF944
		private void ApplyImpl(bool updateMipmaps, bool makeNoLongerReadable); // 0x00C3EDC4-0x00C3EE48
		[NativeName] // 0x003AF944-0x003AF97C
		private void SetPixelImpl(int image, int x, int y, Color color); // 0x00C3EE48-0x00C3EE70
		[NativeName] // 0x003AF97C-0x003AF9B4
		private Color GetPixelBilinearImpl(int image, float x, float y); // 0x00C3EF0C-0x00C3EF38
		[FreeFunction] // 0x003AF9B4-0x003AFA08
		private bool ResizeWithFormatImpl(int width, int height, TextureFormat format, bool hasMipMap); // 0x00C3EFD4-0x00C3F070
		[FreeFunction] // 0x003AFA08-0x003AFA5C
		private void ReadPixelsImpl(Rect source, int destX, int destY, bool recalculateMipMaps); // 0x00C3F070-0x00C3F0AC
		[FreeFunction] // 0x003AFA5C-0x003AFAB0
		private void SetPixelsImpl(int x, int y, int w, int h, Color[] pixel, int miplevel, int frame); // 0x00C3F148-0x00C3F204
		[FreeFunction] // 0x003AFAB0-0x003AFB04
		private bool LoadRawTextureDataImplArray(byte[] data); // 0x00C3F204-0x00C3F278
		[FreeFunction] // 0x003AFB04-0x003AFB4C
		public byte[] GetRawTextureData(); // 0x00C3F278-0x00C3F2E4
		[FreeFunction] // 0x003AFB4C-0x003AFBA4
		public Color[] GetPixels(int x, int y, int blockWidth, int blockHeight, int miplevel); // 0x00C3F2E4-0x00C3F388
		[FreeFunction] // 0x003AFBA4-0x003AFBFC
		public Color32[] GetPixels32(int miplevel); // 0x00C3F388-0x00C3F3FC
		public Color32[] GetPixels32(); // 0x00C3F3FC-0x00C3F404
		public static Texture2D CreateExternalTexture(int width, int height, TextureFormat format, bool mipChain, bool linear, IntPtr nativeTex); // 0x00C3F404-0x00C3F4FC
		public void SetPixel(int x, int y, Color color); // 0x00C3F4FC-0x00C3F5C8
		public void SetPixels(int x, int y, int blockWidth, int blockHeight, Color[] colors, [UnityEngine.Internal.DefaultValue] /* 0x003B1A80-0x003B1AB8 */ int miplevel); // 0x00C3F5C8-0x00C3F698
		public void SetPixels(Color[] colors); // 0x00C3F698-0x00C3F700
		public Color GetPixelBilinear(float x, float y); // 0x00C3F700-0x00C3F7B0
		public void LoadRawTextureData(byte[] data); // 0x00C3F7B0-0x00C3F8C4
		public void Apply([UnityEngine.Internal.DefaultValue] /* 0x003B1AB8-0x003B1AF0 */ bool updateMipmaps, [UnityEngine.Internal.DefaultValue] /* 0x003B1AF0-0x003B1B28 */ bool makeNoLongerReadable); // 0x00C3F8C4-0x00C3F954
		public void Apply(); // 0x00C3F954-0x00C3F960
		public bool Resize(int width, int height, TextureFormat format, bool hasMipMap); // 0x00C3F960-0x00C3FA08
		public void ReadPixels(Rect source, int destX, int destY, [UnityEngine.Internal.DefaultValue] /* 0x003B1B28-0x003B1B60 */ bool recalculateMipMaps); // 0x00C3FA08-0x00C3FAE0
		[ExcludeFromDocs] // 0x003AFBFC-0x003AFC0C
		public void ReadPixels(Rect source, int destX, int destY); // 0x00C3FAE0-0x00C3FAE8
		public Color[] GetPixels(int miplevel); // 0x00C3FAE8-0x00C3FB60
		public Color[] GetPixels(); // 0x00C3FB60-0x00C3FB68
		private void SetPixelImpl_Injected(int image, int x, int y, ref Color color); // 0x00C3EE70-0x00C3EF0C
		private void GetPixelBilinearImpl_Injected(int image, float x, float y, out Color ret); // 0x00C3EF38-0x00C3EFD4
		private void ReadPixelsImpl_Injected(ref Rect source, int destX, int destY, bool recalculateMipMaps); // 0x00C3F0AC-0x00C3F148
	}

	[ExcludeFromPreset] // 0x003A8314-0x003A8360
	[NativeHeader] // 0x003A8314-0x003A8360
	public sealed class Cubemap : Texture // TypeDefIndex: 2115
	{
		// Properties
		public override bool isReadable { get; } // 0x009C3B88-0x009C3BF4 
	
		// Constructors
		[RequiredByNativeCode] // 0x003AFC0C-0x003AFC1C
		public Cubemap(int width, GraphicsFormat format, TextureCreationFlags flags); // 0x009C382C-0x009C38D4
		internal Cubemap(int width, TextureFormat textureFormat, bool mipChain, IntPtr nativeTex); // 0x009C3994-0x009C3A48
		public Cubemap(int width, TextureFormat textureFormat, bool mipChain); // 0x009C3A7C-0x009C3AEC
	
		// Methods
		[FreeFunction] // 0x003AFC1C-0x003AFC54
		private static bool Internal_CreateImpl([Writable] /* 0x003B1B60-0x003B1B70 */ Cubemap mono, int ext, GraphicsFormat format, TextureCreationFlags flags, IntPtr nativeTex); // 0x009C3AEC-0x009C3B88
		private static void Internal_Create([Writable] /* 0x003B1B70-0x003B1B80 */ Cubemap mono, int ext, GraphicsFormat format, TextureCreationFlags flags, IntPtr nativeTex); // 0x009C38D4-0x009C3994
	}

	[ExcludeFromPreset] // 0x003A8360-0x003A83AC
	[NativeHeader] // 0x003A8360-0x003A83AC
	public sealed class Texture3D : Texture // TypeDefIndex: 2116
	{
		// Properties
		public override bool isReadable { get; } // 0x00C400A4-0x00C40110 
	
		// Constructors
		[RequiredByNativeCode] // 0x003AFC54-0x003AFC64
		public Texture3D(int width, int height, int depth, GraphicsFormat format, TextureCreationFlags flags); // 0x00C3FE98-0x00C3FF1C
		public Texture3D(int width, int height, int depth, TextureFormat textureFormat, bool mipChain); // 0x00C3FFE8-0x00C400A4
	
		// Methods
		[FreeFunction] // 0x003AFC64-0x003AFC9C
		private static bool Internal_CreateImpl([Writable] /* 0x003B1B80-0x003B1B90 */ Texture3D mono, int w, int h, int d, GraphicsFormat format, TextureCreationFlags flags); // 0x00C40110-0x00C401B4
		private static void Internal_Create([Writable] /* 0x003B1B90-0x003B1BA0 */ Texture3D mono, int w, int h, int d, GraphicsFormat format, TextureCreationFlags flags); // 0x00C3FF1C-0x00C3FFE8
	}

	[NativeHeader] // 0x003A83AC-0x003A83E4
	public sealed class Texture2DArray : Texture // TypeDefIndex: 2117
	{
		// Properties
		public override bool isReadable { get; } // 0x00C3FD88-0x00C3FDF4 
	
		// Constructors
		[RequiredByNativeCode] // 0x003AFC9C-0x003AFCAC
		public Texture2DArray(int width, int height, int depth, GraphicsFormat format, TextureCreationFlags flags); // 0x00C3FB68-0x00C3FBEC
		public Texture2DArray(int width, int height, int depth, TextureFormat textureFormat, bool mipChain, [UnityEngine.Internal.DefaultValue] /* 0x003B1BA0-0x003B1BD8 */ bool linear); // 0x00C3FCB8-0x00C3FD7C
		public Texture2DArray(int width, int height, int depth, TextureFormat textureFormat, bool mipChain); // 0x00C3FD7C-0x00C3FD88
	
		// Methods
		[FreeFunction] // 0x003AFCAC-0x003AFCE4
		private static bool Internal_CreateImpl([Writable] /* 0x003B1BD8-0x003B1BE8 */ Texture2DArray mono, int w, int h, int d, GraphicsFormat format, TextureCreationFlags flags); // 0x00C3FDF4-0x00C3FE98
		private static void Internal_Create([Writable] /* 0x003B1BE8-0x003B1BF8 */ Texture2DArray mono, int w, int h, int d, GraphicsFormat format, TextureCreationFlags flags); // 0x00C3FBEC-0x00C3FCB8
	}

	[NativeHeader] // 0x003A83E4-0x003A841C
	public sealed class CubemapArray : Texture // TypeDefIndex: 2118
	{
		// Properties
		public override bool isReadable { get; } // 0x009C3E00-0x009C3E6C 
	
		// Constructors
		[RequiredByNativeCode] // 0x003AFCE4-0x003AFCF4
		public CubemapArray(int width, int cubemapCount, GraphicsFormat format, TextureCreationFlags flags); // 0x009C3BF4-0x009C3C78
		public CubemapArray(int width, int cubemapCount, TextureFormat textureFormat, bool mipChain, [UnityEngine.Internal.DefaultValue] /* 0x003B1BF8-0x003B1C30 */ bool linear); // 0x009C3D38-0x009C3DF4
		public CubemapArray(int width, int cubemapCount, TextureFormat textureFormat, bool mipChain); // 0x009C3DF4-0x009C3E00
	
		// Methods
		[FreeFunction] // 0x003AFCF4-0x003AFD2C
		private static bool Internal_CreateImpl([Writable] /* 0x003B1C30-0x003B1C40 */ CubemapArray mono, int ext, int count, GraphicsFormat format, TextureCreationFlags flags); // 0x009C3E6C-0x009C3FA8
		private static void Internal_Create([Writable] /* 0x003B1C40-0x003B1C50 */ CubemapArray mono, int ext, int count, GraphicsFormat format, TextureCreationFlags flags); // 0x009C3C78-0x009C3D38
	}

	[NativeHeader] // 0x003A841C-0x003A84D4
	[NativeHeader] // 0x003A841C-0x003A84D4
	[NativeHeader] // 0x003A841C-0x003A84D4
	[NativeHeader] // 0x003A841C-0x003A84D4
	[UsedByNativeCode] // 0x003A841C-0x003A84D4
	public class RenderTexture : Texture // TypeDefIndex: 2119
	{
		// Properties
		public override int width { get; set; } // 0x008E5EAC-0x008E5F18 0x008E5F18-0x008E5F8C
		public override int height { get; set; } // 0x008E5F8C-0x008E5FF8 0x008E5FF8-0x008E606C
		[NativeProperty] // 0x003B2260-0x003B2298
		public RenderTextureFormat format { set; } // 0x008E5CC8-0x008E5D3C
		public static RenderTexture active { set; } // 0x008E60D8-0x008E60DC
		public RenderBuffer colorBuffer { get; } // 0x008E6214-0x008E623C 
		public RenderBuffer depthBuffer { get; } // 0x008E623C-0x008E6264 
		public int depth { [FreeFunction] /* 0x003AFF54-0x003AFF9C */ set; } // 0x008E5C54-0x008E5CC8
		public RenderTextureDescriptor descriptor { get; } // 0x008E5B14-0x008E5B7C 
	
		// Constructors
		[RequiredByNativeCode] // 0x003AFD2C-0x003AFD3C
		protected internal RenderTexture(); // 0x008E56F4-0x008E56FC
		public RenderTexture(RenderTextureDescriptor desc); // 0x008E56FC-0x008E5778
		public RenderTexture(RenderTexture textureToCopy); // 0x008E5978-0x008E5B14
		public RenderTexture(int width, int height, int depth, GraphicsFormat format); // 0x008E5B7C-0x008E5C54
		public RenderTexture(int width, int height, int depth, [UnityEngine.Internal.DefaultValue] /* 0x003B1C50-0x003B1C88 */ RenderTextureFormat format, [UnityEngine.Internal.DefaultValue] /* 0x003B1C88-0x003B1CC0 */ RenderTextureReadWrite readWrite); // 0x008E5DB0-0x008E5E98
		[ExcludeFromDocs] // 0x003AFD3C-0x003AFD4C
		public RenderTexture(int width, int height, int depth, RenderTextureFormat format); // 0x008E5E98-0x008E5EA0
		[ExcludeFromDocs] // 0x003AFD4C-0x003AFD5C
		public RenderTexture(int width, int height, int depth); // 0x008E5EA0-0x008E5EAC
	
		// Methods
		[FreeFunction] // 0x003AFD5C-0x003AFD94
		private static void SetActive(RenderTexture rt); // 0x008E606C-0x008E60D8
		[FreeFunction] // 0x003AFD94-0x003AFDE8
		private RenderBuffer GetColorBuffer(); // 0x008E60DC-0x008E6104
		[FreeFunction] // 0x003AFDE8-0x003AFE3C
		private RenderBuffer GetDepthBuffer(); // 0x008E6178-0x008E61A0
		internal void SetSRGBReadWrite(bool srgb); // 0x008E5D3C-0x008E5DB0
		[FreeFunction] // 0x003AFE3C-0x003AFE74
		private static void Internal_Create([Writable] /* 0x003B1CC0-0x003B1CD0 */ RenderTexture rt); // 0x008E5908-0x008E5974
		[NativeName] // 0x003AFE74-0x003AFEAC
		private void SetRenderTextureDescriptor(RenderTextureDescriptor desc); // 0x008E5974-0x008E5978
		[NativeName] // 0x003AFEAC-0x003AFEE4
		private RenderTextureDescriptor GetDescriptor(); // 0x008E62D8-0x008E6324
		[FreeFunction] // 0x003AFEE4-0x003AFF1C
		private static RenderTexture GetTemporary_Internal(RenderTextureDescriptor desc); // 0x008E6398-0x008E639C
		[FreeFunction] // 0x003AFF1C-0x003AFF54
		public static void ReleaseTemporary(RenderTexture temp); // 0x008E6408-0x008E6514
		private static void ValidateRenderTextureDesc(RenderTextureDescriptor desc); // 0x008E5778-0x008E5908
		public static RenderTexture GetTemporary(RenderTextureDescriptor desc); // 0x008E6514-0x008E6584
		private static RenderTexture GetTemporaryImpl(int width, int height, int depthBuffer = 0 /* Metadata: 0x0021A972 */, RenderTextureFormat format = RenderTextureFormat.Default /* Metadata: 0x0021A976 */, RenderTextureReadWrite readWrite = RenderTextureReadWrite.Default /* Metadata: 0x0021A97A */, int antiAliasing = 1 /* Metadata: 0x0021A97E */, RenderTextureMemoryless memorylessMode = RenderTextureMemoryless.None /* Metadata: 0x0021A982 */, VRTextureUsage vrUsage = VRTextureUsage.None /* Metadata: 0x0021A986 */, bool useDynamicScale = false /* Metadata: 0x0021A98A */); // 0x008E6584-0x008E6658
		[ExcludeFromDocs] // 0x003AFF9C-0x003AFFAC
		public static RenderTexture GetTemporary(int width, int height, int depthBuffer); // 0x008E6658-0x008E668C
		private void GetColorBuffer_Injected(out RenderBuffer ret); // 0x008E6104-0x008E6178
		private void GetDepthBuffer_Injected(out RenderBuffer ret); // 0x008E61A0-0x008E6214
		private void SetRenderTextureDescriptor_Injected(ref RenderTextureDescriptor desc); // 0x008E6264-0x008E62D8
		private void GetDescriptor_Injected(out RenderTextureDescriptor ret); // 0x008E6324-0x008E6398
		private static RenderTexture GetTemporary_Internal_Injected(ref RenderTextureDescriptor desc); // 0x008E639C-0x008E6408
	}

	public struct RenderTextureDescriptor // TypeDefIndex: 2120
	{
		// Fields
		[CompilerGenerated] // 0x003AA7E8-0x003AA824
		[DebuggerBrowsable] // 0x003AA7E8-0x003AA824
		private int <width>k__BackingField; // 0x00
		[CompilerGenerated] // 0x003AA824-0x003AA860
		[DebuggerBrowsable] // 0x003AA824-0x003AA860
		private int <height>k__BackingField; // 0x04
		[CompilerGenerated] // 0x003AA860-0x003AA89C
		[DebuggerBrowsable] // 0x003AA860-0x003AA89C
		private int <msaaSamples>k__BackingField; // 0x08
		[CompilerGenerated] // 0x003AA89C-0x003AA8D8
		[DebuggerBrowsable] // 0x003AA89C-0x003AA8D8
		private int <volumeDepth>k__BackingField; // 0x0C
		[CompilerGenerated] // 0x003AA8D8-0x003AA914
		[DebuggerBrowsable] // 0x003AA8D8-0x003AA914
		private RenderTextureFormat <colorFormat>k__BackingField; // 0x10
		private int _depthBufferBits; // 0x14
		private static int[] depthFormatBits; // 0x00
		[CompilerGenerated] // 0x003AA914-0x003AA950
		[DebuggerBrowsable] // 0x003AA914-0x003AA950
		private TextureDimension <dimension>k__BackingField; // 0x18
		[CompilerGenerated] // 0x003AA950-0x003AA98C
		[DebuggerBrowsable] // 0x003AA950-0x003AA98C
		private ShadowSamplingMode <shadowSamplingMode>k__BackingField; // 0x1C
		[CompilerGenerated] // 0x003AA98C-0x003AA9C8
		[DebuggerBrowsable] // 0x003AA98C-0x003AA9C8
		private VRTextureUsage <vrUsage>k__BackingField; // 0x20
		private RenderTextureCreationFlags _flags; // 0x24
		[CompilerGenerated] // 0x003AA9C8-0x003AAA04
		[DebuggerBrowsable] // 0x003AA9C8-0x003AAA04
		private RenderTextureMemoryless <memoryless>k__BackingField; // 0x28
	
		// Properties
		public int width { [CompilerGenerated] /* 0x003AFFAC-0x003AFFBC */ get; [CompilerGenerated] /* 0x003AFFBC-0x003AFFCC */ set; } // 0x008E66C4-0x008E66CC 0x008E66CC-0x008E66D4
		public int height { [CompilerGenerated] /* 0x003AFFCC-0x003AFFDC */ get; [CompilerGenerated] /* 0x003AFFDC-0x003AFFEC */ set; } // 0x008E66D4-0x008E66DC 0x008E66DC-0x008E66E4
		public int msaaSamples { [CompilerGenerated] /* 0x003AFFEC-0x003AFFFC */ get; [CompilerGenerated] /* 0x003AFFFC-0x003B000C */ set; } // 0x008E66E4-0x008E66EC 0x008E66EC-0x008E66F4
		public int volumeDepth { [CompilerGenerated] /* 0x003B000C-0x003B001C */ get; [CompilerGenerated] /* 0x003B001C-0x003B002C */ set; } // 0x008E66F4-0x008E66FC 0x008E66FC-0x008E6704
		public RenderTextureFormat colorFormat { [CompilerGenerated] /* 0x003B002C-0x003B003C */ set; } // 0x008E6704-0x008E670C
		public int depthBufferBits { get; set; } // 0x008E670C-0x008E6714 0x008E6714-0x008E6730
		public TextureDimension dimension { [CompilerGenerated] /* 0x003B003C-0x003B004C */ set; } // 0x008E6730-0x008E6738
		public ShadowSamplingMode shadowSamplingMode { [CompilerGenerated] /* 0x003B004C-0x003B005C */ set; } // 0x008E6738-0x008E6740
		public VRTextureUsage vrUsage { [CompilerGenerated] /* 0x003B005C-0x003B006C */ set; } // 0x008E6740-0x008E6748
		public RenderTextureMemoryless memoryless { [CompilerGenerated] /* 0x003B006C-0x003B007C */ set; } // 0x008E6748-0x008E6750
		public bool sRGB { set; } // 0x008E676C-0x008E6788
		internal bool createdFromScript { set; } // 0x008E6788-0x008E67A4
		internal bool useDynamicScale { set; } // 0x008E67A4-0x008E67C0
	
		// Constructors
		public RenderTextureDescriptor(int width, int height, RenderTextureFormat colorFormat, int depthBufferBits); // 0x008E668C-0x008E66C4
		static RenderTextureDescriptor(); // 0x008E67C0-0x008E6878
	
		// Methods
		private void SetOrClearRenderTextureCreationFlag(bool value, RenderTextureCreationFlags flag); // 0x008E6750-0x008E676C
	}

	[NativeHeader] // 0x003A84D4-0x003A8538
	[StaticAccessor] // 0x003A84D4-0x003A8538
	public class Time // TypeDefIndex: 2121
	{
		// Properties
		[NativeProperty] // 0x003B2298-0x003B22D0
		public static float time { get; } // 0x00C401B4-0x00C4020C 
		public static float deltaTime { get; } // 0x00C4020C-0x00C40264 
		public static float unscaledTime { get; } // 0x00C40264-0x00C402BC 
		public static float unscaledDeltaTime { get; } // 0x00C402BC-0x00C40314 
		public static float fixedDeltaTime { get; } // 0x00C40314-0x00C4036C 
		public static float smoothDeltaTime { get; } // 0x00C4036C-0x00C403C4 
		public static float timeScale { get; set; } // 0x00C403C4-0x00C4041C 0x00C4041C-0x00C4048C
		public static int frameCount { get; } // 0x00C4048C-0x00C404E4 
		[NativeProperty] // 0x003B22D0-0x003B2308
		public static float realtimeSinceStartup { get; } // 0x00C404E4-0x00C4053C 
	}

	public enum TouchScreenKeyboardType // TypeDefIndex: 2122
	{
		Default = 0,
		ASCIICapable = 1,
		NumbersAndPunctuation = 2,
		URL = 3,
		NumberPad = 4,
		PhonePad = 5,
		NamePhonePad = 6,
		EmailAddress = 7,
		NintendoNetworkAccount = 8,
		Social = 9,
		Search = 10
	}

	[UsedByNativeCode] // 0x003A8538-0x003A8548
	public class TrackedReference // TypeDefIndex: 2123
	{
		// Fields
		internal IntPtr m_Ptr; // 0x10
	
		// Methods
		public static bool operator ==(TrackedReference x, TrackedReference y); // 0x00C40FC4-0x00C41050
		public override bool Equals(object o); // 0x00C41050-0x00C410E0
		public override int GetHashCode(); // 0x00C410E0-0x00C410EC
	}

	[NativeHeader] // 0x003A8548-0x003A8580
	internal sealed class UnhandledExceptionHandler // TypeDefIndex: 2124
	{
		// Fields
		[CompilerGenerated] // 0x003AAA3C-0x003AAA4C
		private static UnhandledExceptionEventHandler <>f__am$cache0; // 0x00
	
		// Methods
		[RequiredByNativeCode] // 0x003B007C-0x003B008C
		private static void RegisterUECatcher(); // 0x00C436B0-0x00C4377C
		[CompilerGenerated] // 0x003B008C-0x003B009C
		private static void <RegisterUECatcher>m__0(object sender, UnhandledExceptionEventArgs e); // 0x00C4377C-0x00C43844
	}

	[AttributeUsage] // 0x003A8580-0x003A85BC
	public class UnityAPICompatibilityVersionAttribute : Attribute // TypeDefIndex: 2125
	{
		// Fields
		private string _version; // 0x10
	
		// Constructors
		public UnityAPICompatibilityVersionAttribute(string version); // 0x00C43844-0x00C43870
	}

	[Flags] // 0x003A85BC-0x003A85CC
	public enum HideFlags // TypeDefIndex: 2126
	{
		None = 0,
		HideInHierarchy = 1,
		HideInInspector = 2,
		DontSaveInEditor = 4,
		NotEditable = 8,
		DontSaveInBuild = 16,
		DontUnloadUnusedAsset = 32,
		DontSave = 52,
		HideAndDontSave = 61
	}

	[NativeHeader] // 0x003A85CC-0x003A8674
	[NativeHeader] // 0x003A85CC-0x003A8674
	[NativeHeader] // 0x003A85CC-0x003A8674
	[RequiredByNativeCode] // 0x003A85CC-0x003A8674
	public class Object // TypeDefIndex: 2127
	{
		// Fields
		private IntPtr m_CachedPtr; // 0x10
		internal static int OffsetOfInstanceIDInCPlusPlusObject; // 0x00
		private const string objectIsNullMessage = "The Object you want to instantiate is null."; // Metadata: 0x0021A9DB
		private const string cloneDestroyedMessage = "Instantiate failed because the clone was destroyed during creation. This can happen if DestroyImmediate is called in MonoBehaviour.Awake."; // Metadata: 0x0021AA0A
	
		// Properties
		public string name { get; set; } // 0x008D81B8-0x008D821C 0x008DC948-0x008DC9BC
		public HideFlags hideFlags { get; set; } // 0x008DD284-0x008DD2F0 0x008D99CC-0x008D9A40
	
		// Constructors
		public Object(); // 0x008D3580-0x008D3588
		static Object(); // 0x008DD5BC-0x008DD6D8
	
		// Methods
		public int GetInstanceID(); // 0x008DC4B4-0x008DC5CC
		public override int GetHashCode(); // 0x008DC624-0x008DC62C
		public override bool Equals(object other); // 0x008DC62C-0x008DC740
		public static implicit operator bool(Object exists); // 0x008DC808-0x008DC87C
		private static bool CompareBaseObjects(Object lhs, Object rhs); // 0x008DC740-0x008DC808
		private static bool IsNativeObjectAlive(Object o); // 0x008DC87C-0x008DC8D4
		private IntPtr GetCachedPtr(); // 0x008DC8D4-0x008DC8DC
		[TypeInferenceRule] // 0x003B009C-0x003B00B0
		public static Object Instantiate(Object original, Vector3 position, Quaternion rotation); // 0x008DCA30-0x008DCBD8
		[TypeInferenceRule] // 0x003B00B0-0x003B00C4
		public static Object Instantiate(Object original); // 0x008DCCEC-0x008DCDC0
		[TypeInferenceRule] // 0x003B00C4-0x003B00D8
		public static Object Instantiate(Object original, Transform parent, bool instantiateInWorldSpace); // 0x008DCE2C-0x008DCF70
		public static T Instantiate<T>(T original)
			where T : Object;
		public static T Instantiate<T>(T original, Vector3 position, Quaternion rotation)
			where T : Object;
		public static T Instantiate<T>(T original, Transform parent)
			where T : Object;
		public static T Instantiate<T>(T original, Transform parent, bool worldPositionStays)
			where T : Object;
		[NativeMethod] // 0x003B00D8-0x003B013C
		public static void Destroy(Object obj, [UnityEngine.Internal.DefaultValue] /* 0x003B1CD0-0x003B1D08 */ float t); // 0x008DCFF4-0x008DD068
		[ExcludeFromDocs] // 0x003B013C-0x003B014C
		public static void Destroy(Object obj); // 0x008DD068-0x008DD0D0
		[NativeMethod] // 0x003B014C-0x003B01B0
		public static void DestroyImmediate(Object obj, [UnityEngine.Internal.DefaultValue] /* 0x003B1D08-0x003B1D40 */ bool allowDestroyingAssets); // 0x008DD0D0-0x008DD144
		[ExcludeFromDocs] // 0x003B01B0-0x003B01C0
		public static void DestroyImmediate(Object obj); // 0x008DD144-0x008DD1AC
		[FreeFunction] // 0x003B01C0-0x003B0210
		[TypeInferenceRule] // 0x003B01C0-0x003B0210
		public static Object[] FindObjectsOfType(Type type); // 0x008DD1AC-0x008DD218
		[FreeFunction] // 0x003B0210-0x003B0248
		public static void DontDestroyOnLoad(Object target); // 0x008DD218-0x008DD284
		public static T[] FindObjectsOfType<T>()
			where T : Object;
		public static T FindObjectOfType<T>()
			where T : Object;
		private static void CheckNullArgument(object arg, string message); // 0x008DCBD8-0x008DCC64
		[TypeInferenceRule] // 0x003B0248-0x003B025C
		public static Object FindObjectOfType(Type type); // 0x008DD2F0-0x008DD37C
		public override string ToString(); // 0x008DD37C-0x008DD3E0
		public static bool operator ==(Object x, Object y); // 0x008D97A4-0x008D9818
		public static bool operator !=(Object x, Object y); // 0x008DD44C-0x008DD4CC
		[NativeMethod] // 0x003B025C-0x003B02C0
		private static int GetOffsetOfInstanceIDInCPlusPlusObject(); // 0x008DC5CC-0x008DC624
		[FreeFunction] // 0x003B02C0-0x003B02F8
		private static Object Internal_CloneSingle(Object data); // 0x008DCDC0-0x008DCE2C
		[FreeFunction] // 0x003B02F8-0x003B0330
		private static Object Internal_CloneSingleWithParent(Object data, Transform parent, bool worldPositionStays); // 0x008DCF70-0x008DCFF4
		[FreeFunction] // 0x003B0330-0x003B0368
		private static Object Internal_InstantiateSingle(Object data, Vector3 pos, Quaternion rot); // 0x008DCC64-0x008DCCEC
		[FreeFunction] // 0x003B0368-0x003B03A0
		private static string ToString(Object obj); // 0x008DD3E0-0x008DD44C
		[FreeFunction] // 0x003B03A0-0x003B03D8
		private static string GetName(Object obj); // 0x008DC8DC-0x008DC948
		[FreeFunction] // 0x003B03D8-0x003B0410
		private static void SetName(Object obj, string name); // 0x008DC9BC-0x008DCA30
		[FreeFunction] // 0x003B0410-0x003B045C
		[VisibleToOtherModules] // 0x003B0410-0x003B045C
		internal static Object FindObjectFromInstanceID(int instanceID); // 0x008DD550-0x008DD5BC
		private static Object Internal_InstantiateSingle_Injected(Object data, ref Vector3 pos, ref Quaternion rot); // 0x008DD4CC-0x008DD550
	}
}

namespace UnityEngine.Events
{
	[Serializable]
	public enum PersistentListenerMode // TypeDefIndex: 2128
	{
		EventDefined = 0,
		Void = 1,
		Object = 2,
		Int = 3,
		Float = 4,
		String = 5,
		Bool = 6
	}

	[Serializable]
	internal class ArgumentCache : ISerializationCallbackReceiver // TypeDefIndex: 2129
	{
		// Fields
		[FormerlySerializedAs] // 0x003AAA4C-0x003AAA98
		[SerializeField] // 0x003AAA4C-0x003AAA98
		private UnityEngine.Object m_ObjectArgument; // 0x10
		[FormerlySerializedAs] // 0x003AAA98-0x003AAAE4
		[SerializeField] // 0x003AAA98-0x003AAAE4
		private string m_ObjectArgumentAssemblyTypeName; // 0x18
		[FormerlySerializedAs] // 0x003AAAE4-0x003AAB30
		[SerializeField] // 0x003AAAE4-0x003AAB30
		private int m_IntArgument; // 0x20
		[FormerlySerializedAs] // 0x003AAB30-0x003AAB7C
		[SerializeField] // 0x003AAB30-0x003AAB7C
		private float m_FloatArgument; // 0x24
		[FormerlySerializedAs] // 0x003AAB7C-0x003AABC8
		[SerializeField] // 0x003AAB7C-0x003AABC8
		private string m_StringArgument; // 0x28
		[SerializeField] // 0x003AABC8-0x003AABD8
		private bool m_BoolArgument; // 0x30
	
		// Properties
		public UnityEngine.Object unityObjectArgument { get; } // 0x009C6450-0x009C6458 
		public string unityObjectArgumentAssemblyTypeName { get; } // 0x009C6458-0x009C6460 
		public int intArgument { get; } // 0x009C6460-0x009C6468 
		public float floatArgument { get; } // 0x009C6468-0x009C6470 
		public string stringArgument { get; } // 0x009C6470-0x009C6478 
		public bool boolArgument { get; } // 0x009C6478-0x009C6480 
	
		// Constructors
		public ArgumentCache(); // 0x009C6448-0x009C6450
	
		// Methods
		private void TidyAssemblyTypeName(); // 0x009C6480-0x009C66E8
		public void OnBeforeSerialize(); // 0x009C66E8-0x009C66EC
		public void OnAfterDeserialize(); // 0x009C66EC-0x009C66F0
	}

	internal abstract class BaseInvokableCall // TypeDefIndex: 2130
	{
		// Constructors
		protected BaseInvokableCall(); // 0x009C66F0-0x009C66F8
		protected BaseInvokableCall(object target, MethodInfo function); // 0x009C66F8-0x009C67BC
	
		// Methods
		public abstract void Invoke(object[] args);
		protected static void ThrowOnInvalidArg<T>(object arg);
		protected static bool AllowInvoke(Delegate @delegate); // 0x009C67BC-0x009C6884
		public abstract bool Find(object targetObj, MethodInfo method);
	}

	internal class InvokableCall : BaseInvokableCall // TypeDefIndex: 2131
	{
		// Fields
		[CompilerGenerated] // 0x003AABD8-0x003AAC14
		[DebuggerBrowsable] // 0x003AABD8-0x003AAC14
		private UnityAction Delegate; // 0x10
	
		// Events
		private event UnityAction Delegate {
			add; // 0x009C69AC-0x009C6A98
			remove; // 0x009C6AC8-0x009C6BB4
		}
	
		// Constructors
		public InvokableCall(object target, MethodInfo theFunction); // 0x009C6884-0x009C69AC
		public InvokableCall(UnityAction action); // 0x009C6A98-0x009C6AC8
	
		// Methods
		public override void Invoke(object[] args); // 0x009C6BB4-0x009C6BFC
		public void Invoke(); // 0x009C6BFC-0x009C6C44
		public override bool Find(object targetObj, MethodInfo method); // 0x009C6C44-0x009C6CD0
	}

	internal class InvokableCall<T1> : BaseInvokableCall // TypeDefIndex: 2132
	{
		// Fields
		[CompilerGenerated] // 0x003AAC14-0x003AAC50
		[DebuggerBrowsable] // 0x003AAC14-0x003AAC50
		private UnityAction<T1> Delegate;
	
		// Events
		protected event UnityAction<T1> Delegate {
			add; // 0x00000000-0x00000000
			remove; // 0x00000000-0x00000000
		}
	
		// Constructors
		public InvokableCall(object target, MethodInfo theFunction);
		public InvokableCall(UnityAction<T1> action);
	
		// Methods
		public override void Invoke(object[] args);
		public virtual void Invoke(T1 args0);
		public override bool Find(object targetObj, MethodInfo method);
	}

	internal class InvokableCall<T1, T2> : BaseInvokableCall // TypeDefIndex: 2133
	{
		// Fields
		[CompilerGenerated] // 0x003AAC50-0x003AAC8C
		[DebuggerBrowsable] // 0x003AAC50-0x003AAC8C
		private UnityAction<T1, T2> Delegate;
	
		// Constructors
		public InvokableCall(object target, MethodInfo theFunction);
	
		// Methods
		public override void Invoke(object[] args);
		public override bool Find(object targetObj, MethodInfo method);
	}

	internal class InvokableCall<T1, T2, T3> : BaseInvokableCall // TypeDefIndex: 2134
	{
		// Fields
		[CompilerGenerated] // 0x003AAC8C-0x003AACC8
		[DebuggerBrowsable] // 0x003AAC8C-0x003AACC8
		private UnityAction<T1, T2, T3> Delegate;
	
		// Constructors
		public InvokableCall(object target, MethodInfo theFunction);
	
		// Methods
		public override void Invoke(object[] args);
		public override bool Find(object targetObj, MethodInfo method);
	}

	internal class InvokableCall<T1, T2, T3, T4> : BaseInvokableCall // TypeDefIndex: 2135
	{
		// Fields
		[CompilerGenerated] // 0x003AACC8-0x003AAD04
		[DebuggerBrowsable] // 0x003AACC8-0x003AAD04
		private UnityAction<T1, T2, T3, T4> Delegate;
	
		// Constructors
		public InvokableCall(object target, MethodInfo theFunction);
	
		// Methods
		public override void Invoke(object[] args);
		public override bool Find(object targetObj, MethodInfo method);
	}

	internal class CachedInvokableCall<T> : InvokableCall<T> // TypeDefIndex: 2136
	{
		// Fields
		private readonly T m_Arg1;
	
		// Constructors
		public CachedInvokableCall(UnityEngine.Object target, MethodInfo theFunction, T argument);
	
		// Methods
		public override void Invoke(object[] args);
		public override void Invoke(T arg0);
	}

	public enum UnityEventCallState // TypeDefIndex: 2137
	{
		Off = 0,
		EditorAndRuntime = 1,
		RuntimeOnly = 2
	}

	[Serializable]
	internal class PersistentCall // TypeDefIndex: 2138
	{
		// Fields
		[FormerlySerializedAs] // 0x003AAD04-0x003AAD50
		[SerializeField] // 0x003AAD04-0x003AAD50
		private UnityEngine.Object m_Target; // 0x10
		[FormerlySerializedAs] // 0x003AAD50-0x003AAD9C
		[SerializeField] // 0x003AAD50-0x003AAD9C
		private string m_MethodName; // 0x18
		[FormerlySerializedAs] // 0x003AAD9C-0x003AADE8
		[SerializeField] // 0x003AAD9C-0x003AADE8
		private PersistentListenerMode m_Mode; // 0x20
		[FormerlySerializedAs] // 0x003AADE8-0x003AAE34
		[SerializeField] // 0x003AADE8-0x003AAE34
		private ArgumentCache m_Arguments; // 0x28
		[FormerlySerializedAs] // 0x003AAE34-0x003AAEA4
		[FormerlySerializedAs] // 0x003AAE34-0x003AAEA4
		[SerializeField] // 0x003AAE34-0x003AAEA4
		private UnityEventCallState m_CallState; // 0x30
	
		// Properties
		public UnityEngine.Object target { get; } // 0x009C7248-0x009C7250 
		public string methodName { get; } // 0x009C7250-0x009C7258 
		public PersistentListenerMode mode { get; } // 0x009C7258-0x009C7260 
		public ArgumentCache arguments { get; } // 0x009C7260-0x009C7268 
	
		// Constructors
		public PersistentCall(); // 0x009C71D4-0x009C7248
	
		// Methods
		public bool IsValid(); // 0x009C7268-0x009C72FC
		public BaseInvokableCall GetRuntimeCall(UnityEventBase theEvent); // 0x009C72FC-0x009C753C
		private static BaseInvokableCall GetObjectCall(UnityEngine.Object target, MethodInfo method, ArgumentCache arguments); // 0x009C769C-0x009C7BB0
	}

	[Serializable]
	internal class PersistentCallGroup // TypeDefIndex: 2139
	{
		// Fields
		[FormerlySerializedAs] // 0x003AAEA4-0x003AAEF0
		[SerializeField] // 0x003AAEA4-0x003AAEF0
		private List<PersistentCall> m_Calls; // 0x10
	
		// Constructors
		public PersistentCallGroup(); // 0x009C7BB0-0x009C7C24
	
		// Methods
		public void Initialize(InvokableCallList invokableList, UnityEventBase unityEventBase); // 0x009C7C24-0x009C7DA8
	}

	internal class InvokableCallList // TypeDefIndex: 2140
	{
		// Fields
		private readonly List<BaseInvokableCall> m_PersistentCalls; // 0x10
		private readonly List<BaseInvokableCall> m_RuntimeCalls; // 0x18
		private readonly List<BaseInvokableCall> m_ExecutingCalls; // 0x20
		private bool m_NeedsUpdate; // 0x28
	
		// Constructors
		public InvokableCallList(); // 0x009C6CD0-0x009C6D80
	
		// Methods
		public void AddPersistentInvokableCall(BaseInvokableCall call); // 0x009C6D80-0x009C6DFC
		public void AddListener(BaseInvokableCall call); // 0x009C6DFC-0x009C6E78
		public void RemoveListener(object targetObj, MethodInfo method); // 0x009C6E78-0x009C7034
		public void Clear(); // 0x009C7034-0x009C70A0
		public void ClearPersistent(); // 0x009C70A0-0x009C710C
		public List<BaseInvokableCall> PrepareInvoke(); // 0x009C710C-0x009C71D4
	}

	[Serializable]
	[UsedByNativeCode] // 0x003A8674-0x003A8684
	public abstract class UnityEventBase : ISerializationCallbackReceiver // TypeDefIndex: 2141
	{
		// Fields
		private InvokableCallList m_Calls; // 0x10
		[FormerlySerializedAs] // 0x003AAEF0-0x003AAF3C
		[SerializeField] // 0x003AAEF0-0x003AAF3C
		private PersistentCallGroup m_PersistentCalls; // 0x18
		[SerializeField] // 0x003AAF3C-0x003AAF4C
		private string m_TypeName; // 0x20
		private bool m_CallsDirty; // 0x28
	
		// Constructors
		protected UnityEventBase(); // 0x009C7E00-0x009C7E8C
	
		// Methods
		void ISerializationCallbackReceiver.OnBeforeSerialize(); // 0x009C942C-0x009C9430
		void ISerializationCallbackReceiver.OnAfterDeserialize(); // 0x009C9430-0x009C9434
		protected abstract MethodInfo FindMethod_Impl(string name, object targetObj);
		internal abstract BaseInvokableCall GetDelegate(object target, MethodInfo theFunction);
		internal MethodInfo FindMethod(PersistentCall call); // 0x009C753C-0x009C769C
		internal MethodInfo FindMethod(string name, object listener, PersistentListenerMode mode, Type argumentType); // 0x009C9470-0x009C9750
		private void DirtyPersistentCalls(); // 0x009C9434-0x009C9470
		private void RebuildPersistentCallsIfNeeded(); // 0x009C9750-0x009C97A0
		internal void AddCall(BaseInvokableCall call); // 0x009C7F24-0x009C7F58
		protected void RemoveListener(object targetObj, MethodInfo method); // 0x009C97A0-0x009C97E4
		public void RemoveAllListeners(); // 0x009C97E4-0x009C9810
		internal List<BaseInvokableCall> PrepareInvoke(); // 0x009C93F8-0x009C942C
		public override string ToString(); // 0x009C9810-0x009C98A4
		public static MethodInfo GetValidMethodInfo(object obj, string functionName, Type[] argumentTypes); // 0x009C7FC4-0x009C91CC
	}

	public delegate void UnityAction(); // TypeDefIndex: 2142; 0x009BEA20-0x009BEE20

	[Serializable]
	public class UnityEvent : UnityEventBase // TypeDefIndex: 2143
	{
		// Fields
		private object[] m_InvokeArray; // 0x30
	
		// Constructors
		[RequiredByNativeCode] // 0x003B045C-0x003B046C
		public UnityEvent(); // 0x009C7DF8-0x009C7E00
	
		// Methods
		public void AddListener(UnityAction call); // 0x009C7E8C-0x009C7EB8
		protected override MethodInfo FindMethod_Impl(string name, object targetObj); // 0x009C7F58-0x009C7FC4
		internal override BaseInvokableCall GetDelegate(object target, MethodInfo theFunction); // 0x009C91CC-0x009C923C
		private static BaseInvokableCall GetDelegate(UnityAction action); // 0x009C7EB8-0x009C7F24
		public void Invoke(); // 0x009C923C-0x009C93F8
	}

	public delegate void UnityAction<T0>(T0 arg0); // TypeDefIndex: 2144; 0x00000000-0x00000000

	[Serializable]
	public abstract class UnityEvent<T0> : UnityEventBase // TypeDefIndex: 2145
	{
		// Fields
		private object[] m_InvokeArray;
	
		// Constructors
		[RequiredByNativeCode] // 0x003B046C-0x003B047C
		public UnityEvent();
	
		// Methods
		public void AddListener(UnityAction<T0> call);
		public void RemoveListener(UnityAction<T0> call);
		protected override MethodInfo FindMethod_Impl(string name, object targetObj);
		internal override BaseInvokableCall GetDelegate(object target, MethodInfo theFunction);
		private static BaseInvokableCall GetDelegate(UnityAction<T0> action);
		public void Invoke(T0 arg0);
	}

	public delegate void UnityAction<T0, T1>(T0 arg0, T1 arg1); // TypeDefIndex: 2146; 0x00000000-0x00000000

	[Serializable]
	public abstract class UnityEvent<T0, T1> : UnityEventBase // TypeDefIndex: 2147
	{
		// Fields
		private object[] m_InvokeArray;
	
		// Constructors
		[RequiredByNativeCode] // 0x003B047C-0x003B048C
		public UnityEvent();
	
		// Methods
		protected override MethodInfo FindMethod_Impl(string name, object targetObj);
		internal override BaseInvokableCall GetDelegate(object target, MethodInfo theFunction);
	}

	public delegate void UnityAction<T0, T1, T2>(T0 arg0, T1 arg1, T2 arg2); // TypeDefIndex: 2148; 0x00000000-0x00000000

	[Serializable]
	public abstract class UnityEvent<T0, T1, T2> : UnityEventBase // TypeDefIndex: 2149
	{
		// Fields
		private object[] m_InvokeArray;
	
		// Constructors
		[RequiredByNativeCode] // 0x003B048C-0x003B049C
		public UnityEvent();
	
		// Methods
		protected override MethodInfo FindMethod_Impl(string name, object targetObj);
		internal override BaseInvokableCall GetDelegate(object target, MethodInfo theFunction);
	}

	public delegate void UnityAction<T0, T1, T2, T3>(T0 arg0, T1 arg1, T2 arg2, T3 arg3); // TypeDefIndex: 2150; 0x00000000-0x00000000

	[Serializable]
	public abstract class UnityEvent<T0, T1, T2, T3> : UnityEventBase // TypeDefIndex: 2151
	{
		// Fields
		private object[] m_InvokeArray;
	
		// Constructors
		[RequiredByNativeCode] // 0x003B049C-0x003B04AC
		public UnityEvent();
	
		// Methods
		protected override MethodInfo FindMethod_Impl(string name, object targetObj);
		internal override BaseInvokableCall GetDelegate(object target, MethodInfo theFunction);
	}
}

namespace UnityEngine
{
	[NativeHeader] // 0x003A8684-0x003A86BC
	internal class UnityLogWriter : TextWriter // TypeDefIndex: 2152
	{
		// Constructors
		public UnityLogWriter(); // 0x00C43988-0x00C439F0
	
		// Methods
		[ThreadAndSerializationSafe] // 0x003B04AC-0x003B04BC
		public static void WriteStringToUnityLog(string s); // 0x00C439F0-0x00C439FC
		[FreeFunction] // 0x003B04BC-0x003B04F4
		private static void WriteStringToUnityLogImpl(string s); // 0x00C439FC-0x00C43A68
		public static void Init(); // 0x00C43A68-0x00C43AE4
		public override void Write(char value); // 0x00C43AE4-0x00C43B14
		public override void Write(string s); // 0x00C43B14-0x00C43B24
		public override void Write(char[] buffer, int index, int count); // 0x00C43B24-0x00C43B40
	}

	internal sealed class UnitySynchronizationContext : SynchronizationContext // TypeDefIndex: 2153
	{
		// Fields
		private readonly Queue<WorkRequest> m_AsyncWorkQueue; // 0x10
		private readonly int m_MainThreadID; // 0x18
	
		// Nested types
		private struct WorkRequest // TypeDefIndex: 2154
		{
			// Fields
			private readonly SendOrPostCallback m_DelagateCallback; // 0x00
			private readonly object m_DelagateState; // 0x08
			private readonly ManualResetEvent m_WaitHandle; // 0x10
	
			// Constructors
			public WorkRequest(SendOrPostCallback callback, object state, ManualResetEvent waitHandle = null); // 0x00C442B4-0x00C442C0
	
			// Methods
			public void Invoke(); // 0x00C442C0-0x00C442D0
		}
	
		// Constructors
		private UnitySynchronizationContext(int mainThreadID); // 0x00C43B40-0x00C43BC8
		private UnitySynchronizationContext(Queue<WorkRequest> queue, int mainThreadID); // 0x00C43BC8-0x00C43C04
	
		// Methods
		public override void Send(SendOrPostCallback callback, object state); // 0x00C43C04-0x00C43E54
		public override void Post(SendOrPostCallback callback, object state); // 0x00C43E54-0x00C43F34
		public override SynchronizationContext CreateCopy(); // 0x00C43F34-0x00C43FAC
		private void Exec(); // 0x00C43FAC-0x00C4414C
		[RequiredByNativeCode] // 0x003B04F4-0x003B0504
		private static void InitializeSynchronizationContext(); // 0x00C4414C-0x00C441E8
		[RequiredByNativeCode] // 0x003B0504-0x003B0514
		private static void ExecuteTasks(); // 0x00C441E8-0x00C442B4
	}

	[NativeClass] // 0x003A86BC-0x003A8750
	[RequiredByNativeCode] // 0x003A86BC-0x003A8750
	public struct Vector2 : IEquatable<Vector2> // TypeDefIndex: 2155
	{
		// Fields
		public float x; // 0x00
		public float y; // 0x04
		private static readonly Vector2 zeroVector; // 0x00
		private static readonly Vector2 oneVector; // 0x08
		private static readonly Vector2 upVector; // 0x10
		private static readonly Vector2 downVector; // 0x18
		private static readonly Vector2 leftVector; // 0x20
		private static readonly Vector2 rightVector; // 0x28
		private static readonly Vector2 positiveInfinityVector; // 0x30
		private static readonly Vector2 negativeInfinityVector; // 0x38
		public const float kEpsilon = 1E-05f; // Metadata: 0x0021AABF
		public const float kEpsilonNormalSqrt = 1E-15f; // Metadata: 0x0021AAC3
	
		// Properties
		public float this[int index] { get => default; set {} } // 0x00C4437C-0x00C44434 0x00C44434-0x00C4443C
		public Vector2 normalized { get; } // 0x00C446E4-0x00C44868 
		public float magnitude { get; } // 0x00C449E4-0x00C44A00 
		public float sqrMagnitude { get; } // 0x00C44A00-0x00C44A14 
		public static Vector2 zero { get; } // 0x00C44648-0x00C446B0 
		public static Vector2 one { get; } // 0x00C44D68-0x00C44DD0 
		public static Vector2 up { get; } // 0x00C44DD0-0x00C44E38 
		public static Vector2 right { get; } // 0x00C44E38-0x00C44EA0 
	
		// Constructors
		public Vector2(float x, float y); // 0x00C442D0-0x00C4437C
		static Vector2(); // 0x00C44EA0-0x00C44F48
	
		// Methods
		public static Vector2 Lerp(Vector2 a, Vector2 b, float t); // 0x00C4443C-0x00C444E8
		public static Vector2 Scale(Vector2 a, Vector2 b); // 0x00C444E8-0x00C4463C
		public void Normalize(); // 0x00C446B0-0x00C446E4
		public override string ToString(); // 0x00C44868-0x00C448A8
		public override int GetHashCode(); // 0x00C448A8-0x00C449C4
		public override bool Equals(object other); // 0x00C449C4-0x00C449CC
		public bool Equals(Vector2 other); // 0x00C449CC-0x00C449D4
		public static float Dot(Vector2 lhs, Vector2 rhs); // 0x00C449D4-0x00C449E4
		public static float Angle(Vector2 from, Vector2 to); // 0x00C44A14-0x00C44B44
		public static float Distance(Vector2 a, Vector2 b); // 0x00C44B44-0x00C44BD8
		public static Vector2 operator +(Vector2 a, Vector2 b); // 0x00C44BE4-0x00C44BF0
		public static Vector2 operator -(Vector2 a, Vector2 b); // 0x00C44BD8-0x00C44BE4
		public static Vector2 operator *(Vector2 a, Vector2 b); // 0x00C44BF0-0x00C44BFC
		public static Vector2 operator /(Vector2 a, Vector2 b); // 0x00C44BFC-0x00C44C08
		public static Vector2 operator *(Vector2 a, float d); // 0x00C44C08-0x00C44C14
		public static Vector2 operator *(float d, Vector2 a); // 0x00C44C14-0x00C44C24
		public static Vector2 operator /(Vector2 a, float d); // 0x00C4463C-0x00C44648
		public static bool operator ==(Vector2 lhs, Vector2 rhs); // 0x00C44C24-0x00C44CC4
		public static bool operator !=(Vector2 lhs, Vector2 rhs); // 0x00C44CC4-0x00C44D5C
		public static implicit operator Vector2(Vector3 v); // 0x00C44D5C-0x00C44D60
		public static implicit operator Vector3(Vector2 v); // 0x00C44D60-0x00C44D68
	}

	[NativeClass] // 0x003A8750-0x003A8808
	[NativeHeader] // 0x003A8750-0x003A8808
	[RequiredByNativeCode] // 0x003A8750-0x003A8808
	public struct Vector4 : IEquatable<Vector4> // TypeDefIndex: 2156
	{
		// Fields
		public float x; // 0x00
		public float y; // 0x04
		public float z; // 0x08
		public float w; // 0x0C
		private static readonly Vector4 zeroVector; // 0x00
		private static readonly Vector4 oneVector; // 0x10
		private static readonly Vector4 positiveInfinityVector; // 0x20
		private static readonly Vector4 negativeInfinityVector; // 0x30
	
		// Properties
		public float this[int index] { get => default; set {} } // 0x00C47498-0x00C47574 0x00C47574-0x00C475E4
		public float magnitude { get; } // 0x00C47808-0x00C47894 
		public float sqrMagnitude { get; } // 0x00C47894-0x00C4789C 
		public static Vector4 zero { get; } // 0x00C4789C-0x00C47908 
	
		// Constructors
		public Vector4(float x, float y, float z, float w); // 0x00C473C4-0x00C47498
		static Vector4(); // 0x00C47CD4-0x00C47D50
	
		// Methods
		public override int GetHashCode(); // 0x00C475E4-0x00C4770C
		public override bool Equals(object other); // 0x00C4770C-0x00C47714
		public bool Equals(Vector4 other); // 0x00C47714-0x00C4771C
		public static float Dot(Vector4 a, Vector4 b); // 0x00C4771C-0x00C47808
		public static Vector4 operator +(Vector4 a, Vector4 b); // 0x00C47908-0x00C4791C
		public static Vector4 operator -(Vector4 a, Vector4 b); // 0x00C4791C-0x00C47930
		public static Vector4 operator *(Vector4 a, float d); // 0x00C47930-0x00C47944
		public static Vector4 operator /(Vector4 a, float d); // 0x00C47944-0x00C47958
		public static bool operator ==(Vector4 lhs, Vector4 rhs); // 0x00C47958-0x00C47A18
		public static implicit operator Vector3(Vector4 v); // 0x00C47AB0-0x00C47CCC
		public override string ToString(); // 0x00C47CCC-0x00C47CD4
		public static float SqrMagnitude(Vector4 a); // 0x00C47A18-0x00C47AB0
	}

	[RequiredByNativeCode] // 0x003A8808-0x003A8818
	public sealed class WaitForEndOfFrame : YieldInstruction // TypeDefIndex: 2157
	{
		// Constructors
		public WaitForEndOfFrame(); // 0x00C47D50-0x00C47D58
	}

	[RequiredByNativeCode] // 0x003A8818-0x003A8828
	public sealed class WaitForFixedUpdate : YieldInstruction // TypeDefIndex: 2158
	{
	}

	[RequiredByNativeCode] // 0x003A8828-0x003A8838
	public sealed class WaitForSeconds : YieldInstruction // TypeDefIndex: 2159
	{
		// Fields
		internal float m_Seconds; // 0x10
	
		// Constructors
		public WaitForSeconds(float seconds); // 0x00C47D7C-0x00C47DB0
	}

	public class WaitForSecondsRealtime : CustomYieldInstruction // TypeDefIndex: 2160
	{
		// Fields
		[CompilerGenerated] // 0x003AAF4C-0x003AAF88
		[DebuggerBrowsable] // 0x003AAF4C-0x003AAF88
		private float <waitTime>k__BackingField; // 0x10
		private float m_WaitUntilTime; // 0x14
	
		// Properties
		public float waitTime { [CompilerGenerated] /* 0x003B0514-0x003B0524 */ get; [CompilerGenerated] /* 0x003B0524-0x003B0534 */ set; } // 0x00C47DF4-0x00C47DFC 0x00C47DEC-0x00C47DF4
		public override bool keepWaiting { get; } // 0x00C47DFC-0x00C47E60 
	
		// Constructors
		public WaitForSecondsRealtime(float time); // 0x00C47DB0-0x00C47DEC
	}

	[UsedByNativeCode] // 0x003A8838-0x003A8848
	public class YieldInstruction // TypeDefIndex: 2161
	{
		// Constructors
		public YieldInstruction(); // 0x00C47D58-0x00C47D7C
	}
}

namespace UnityEngine.Assertions
{
	[DebuggerStepThrough] // 0x003A8848-0x003A8858
	public static class Assert // TypeDefIndex: 2162
	{
		// Fields
		public static bool raiseExceptions; // 0x00
	
		// Constructors
		static Assert(); // 0x009BDA58-0x009BDAA8
	
		// Methods
		private static void Fail(string message, string userMessage); // 0x009BD3F0-0x009BD548
		[Conditional] // 0x003B0534-0x003B056C
		public static void AreEqual<T>(T expected, T actual, string message);
		[Conditional] // 0x003B056C-0x003B05A4
		public static void AreEqual<T>(T expected, T actual, string message, IEqualityComparer<T> comparer);
		[Conditional] // 0x003B05A4-0x003B05DC
		public static void AreEqual(UnityEngine.Object expected, UnityEngine.Object actual, string message); // 0x009BD6A8-0x009BD77C
		[Conditional] // 0x003B05DC-0x003B0614
		public static void AreEqual(int expected, int actual); // 0x009BD9BC-0x009BDA58
	}

	public class AssertionException : Exception // TypeDefIndex: 2163
	{
		// Fields
		private string m_UserMessage; // 0x88
	
		// Properties
		public override string Message { get; } // 0x009BDAA8-0x009BDB40 
	
		// Constructors
		public AssertionException(string message, string userMessage); // 0x009BD548-0x009BD5CC
	}

	internal class AssertionMessageUtil // TypeDefIndex: 2164
	{
		// Methods
		public static string GetMessage(string failureMessage); // 0x009BDB40-0x009BDC54
		public static string GetMessage(string failureMessage, string expected); // 0x009BDC54-0x009BDEB4
		public static string GetEqualityMessage(object actual, object expected, bool expectEqual); // 0x009BD77C-0x009BD9BC
	}
}

namespace UnityEngine.Experimental.Rendering
{
	[NativeHeader] // 0x003A8858-0x003A8890
	internal class BuiltinRuntimeReflectionSystem : IScriptableRuntimeReflectionSystem // TypeDefIndex: 2165
	{
		// Constructors
		public BuiltinRuntimeReflectionSystem(); // 0x009C9F8C-0x009C9F94
	
		// Methods
		public bool TickRealtimeProbes(); // 0x009C9F94-0x009C9F98
		public void Dispose(); // 0x009C9FF0-0x009C9FF4
		private void Dispose(bool disposing); // 0x009C9FF4-0x009C9FF8
		[StaticAccessor] // 0x003B0614-0x003B065C
		private static bool BuiltinUpdate(); // 0x009C9F98-0x009C9FF0
		[RequiredByNativeCode] // 0x003B065C-0x003B066C
		private static BuiltinRuntimeReflectionSystem Internal_BuiltinRuntimeReflectionSystem_New(); // 0x009C9FF8-0x009CA054
	}

	public interface IScriptableRuntimeReflectionSystem : IDisposable // TypeDefIndex: 2166
	{
		// Methods
		bool TickRealtimeProbes();
	}

	[NativeHeader] // 0x003A8890-0x003A88DC
	[RequiredByNativeCode] // 0x003A8890-0x003A88DC
	public static class ScriptableRuntimeReflectionSystemSettings // TypeDefIndex: 2167
	{
		// Fields
		private static ScriptableRuntimeReflectionSystemWrapper s_Instance; // 0x00
	
		// Properties
		private static IScriptableRuntimeReflectionSystem Internal_ScriptableRuntimeReflectionSystemSettings_system { [RequiredByNativeCode] /* 0x003B066C-0x003B067C */ set; } // 0x009CAC60-0x009CAE00
		private static ScriptableRuntimeReflectionSystemWrapper Internal_ScriptableRuntimeReflectionSystemSettings_instance { [RequiredByNativeCode] /* 0x003B067C-0x003B068C */ get; } // 0x009CAE10-0x009CAE78 
	
		// Constructors
		static ScriptableRuntimeReflectionSystemSettings(); // 0x009CAED0-0x009CAF3C
	
		// Methods
		[RuntimeInitializeOnLoadMethod] // 0x003B068C-0x003B06E0
		[StaticAccessor] // 0x003B068C-0x003B06E0
		private static void ScriptingDirtyReflectionSystemInstance(); // 0x009CAE78-0x009CAED0
	}

	[RequiredByNativeCode] // 0x003A88DC-0x003A88EC
	internal class ScriptableRuntimeReflectionSystemWrapper // TypeDefIndex: 2168
	{
		// Fields
		[CompilerGenerated] // 0x003AAF88-0x003AAFC4
		[DebuggerBrowsable] // 0x003AAF88-0x003AAFC4
		private IScriptableRuntimeReflectionSystem <implementation>k__BackingField; // 0x10
	
		// Properties
		internal IScriptableRuntimeReflectionSystem implementation { [CompilerGenerated] /* 0x003B06E0-0x003B06F0 */ get; [CompilerGenerated] /* 0x003B06F0-0x003B0700 */ set; } // 0x009CAE00-0x009CAE08 0x009CAE08-0x009CAE10
	
		// Constructors
		public ScriptableRuntimeReflectionSystemWrapper(); // 0x009CAF3C-0x009CAF44
	
		// Methods
		[RequiredByNativeCode] // 0x003B0700-0x003B0710
		private bool Internal_ScriptableRuntimeReflectionSystemWrapper_TickRealtimeProbes(); // 0x009CAF44-0x009CB000
	}
}

namespace Unity.Collections
{
	[AttributeUsage] // 0x003A88EC-0x003A8928
	[RequiredByNativeCode] // 0x003A88EC-0x003A8928
	public sealed class ReadOnlyAttribute : Attribute // TypeDefIndex: 2169
	{
	}

	[AttributeUsage] // 0x003A8928-0x003A8964
	[RequiredByNativeCode] // 0x003A8928-0x003A8964
	public sealed class WriteOnlyAttribute : Attribute // TypeDefIndex: 2170
	{
	}

	[AttributeUsage] // 0x003A8964-0x003A89A0
	[RequiredByNativeCode] // 0x003A8964-0x003A89A0
	public sealed class DeallocateOnJobCompletionAttribute : Attribute // TypeDefIndex: 2171
	{
	}

	[AttributeUsage] // 0x003A89A0-0x003A89DC
	[RequiredByNativeCode] // 0x003A89A0-0x003A89DC
	public sealed class NativeFixedLengthAttribute : Attribute // TypeDefIndex: 2172
	{
	}

	[AttributeUsage] // 0x003A89DC-0x003A8A18
	[RequiredByNativeCode] // 0x003A89DC-0x003A8A18
	public sealed class NativeMatchesParallelForLengthAttribute : Attribute // TypeDefIndex: 2173
	{
	}

	[AttributeUsage] // 0x003A8A18-0x003A8A54
	[RequiredByNativeCode] // 0x003A8A18-0x003A8A54
	public sealed class NativeDisableParallelForRestrictionAttribute : Attribute // TypeDefIndex: 2174
	{
	}
}

namespace Unity.Collections.LowLevel.Unsafe
{
	[AttributeUsage] // 0x003A8A54-0x003A8A90
	[RequiredByNativeCode] // 0x003A8A54-0x003A8A90
	public sealed class NativeContainerAttribute : Attribute // TypeDefIndex: 2175
	{
	}

	[AttributeUsage] // 0x003A8A90-0x003A8ACC
	[RequiredByNativeCode] // 0x003A8A90-0x003A8ACC
	public sealed class NativeContainerIsReadOnlyAttribute : Attribute // TypeDefIndex: 2176
	{
	}

	[AttributeUsage] // 0x003A8ACC-0x003A8B08
	[RequiredByNativeCode] // 0x003A8ACC-0x003A8B08
	public sealed class NativeContainerIsAtomicWriteOnlyAttribute : Attribute // TypeDefIndex: 2177
	{
	}

	[AttributeUsage] // 0x003A8B08-0x003A8B44
	[RequiredByNativeCode] // 0x003A8B08-0x003A8B44
	public sealed class NativeContainerSupportsMinMaxWriteRestrictionAttribute : Attribute // TypeDefIndex: 2178
	{
	}

	[AttributeUsage] // 0x003A8B44-0x003A8B80
	[RequiredByNativeCode] // 0x003A8B44-0x003A8B80
	public sealed class NativeContainerSupportsDeallocateOnJobCompletionAttribute : Attribute // TypeDefIndex: 2179
	{
	}

	[AttributeUsage] // 0x003A8B80-0x003A8BBC
	[RequiredByNativeCode] // 0x003A8B80-0x003A8BBC
	public sealed class NativeContainerSupportsDeferredConvertListToArray : Attribute // TypeDefIndex: 2180
	{
	}

	[AttributeUsage] // 0x003A8BBC-0x003A8BF8
	[RequiredByNativeCode] // 0x003A8BBC-0x003A8BF8
	public sealed class NativeSetThreadIndexAttribute : Attribute // TypeDefIndex: 2181
	{
	}

	[AttributeUsage] // 0x003A8BF8-0x003A8C58
	[Obsolete] // 0x003A8BF8-0x003A8C58
	[RequiredByNativeCode] // 0x003A8BF8-0x003A8C58
	public sealed class NativeContainerNeedsThreadIndexAttribute : Attribute // TypeDefIndex: 2182
	{
	}

	[AttributeUsage] // 0x003A8C58-0x003A8C94
	[RequiredByNativeCode] // 0x003A8C58-0x003A8C94
	public sealed class NativeDisableUnsafePtrRestrictionAttribute : Attribute // TypeDefIndex: 2183
	{
	}

	[AttributeUsage] // 0x003A8C94-0x003A8CD0
	[RequiredByNativeCode] // 0x003A8C94-0x003A8CD0
	public sealed class NativeDisableContainerSafetyRestrictionAttribute : Attribute // TypeDefIndex: 2184
	{
	}

	[AttributeUsage] // 0x003A8CD0-0x003A8D0C
	[RequiredByNativeCode] // 0x003A8CD0-0x003A8D0C
	public sealed class NativeSetClassTypeToNullOnScheduleAttribute : Attribute // TypeDefIndex: 2185
	{
	}
}

namespace UnityEngine.Experimental.Playables
{
	[NativeHeader] // 0x003A8D0C-0x003A8DC8
	[NativeHeader] // 0x003A8D0C-0x003A8DC8
	[NativeHeader] // 0x003A8D0C-0x003A8DC8
	[RequiredByNativeCode] // 0x003A8D0C-0x003A8DC8
	[StaticAccessor] // 0x003A8D0C-0x003A8DC8
	public struct CameraPlayable : IPlayable, IEquatable<CameraPlayable> // TypeDefIndex: 2186
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
	
		// Methods
		public PlayableHandle GetHandle(); // 0x009C9DB8-0x009C9E4C
		public bool Equals(CameraPlayable other); // 0x009C9E4C-0x009C9E54
	}
}

namespace UnityEngine.Playables
{
	[RequiredByNativeCode] // 0x003A8DC8-0x003A8DD8
	public interface INotificationReceiver // TypeDefIndex: 2187
	{
	}

	public interface IPlayable // TypeDefIndex: 2188
	{
	}

	public interface IPlayableBehaviour // TypeDefIndex: 2189
	{
	}

	public interface IPlayableOutput // TypeDefIndex: 2190
	{
	}
}

namespace UnityEngine.Experimental.Playables
{
	[NativeHeader] // 0x003A8DD8-0x003A8E94
	[NativeHeader] // 0x003A8DD8-0x003A8E94
	[NativeHeader] // 0x003A8DD8-0x003A8E94
	[RequiredByNativeCode] // 0x003A8DD8-0x003A8E94
	[StaticAccessor] // 0x003A8DD8-0x003A8E94
	public struct MaterialEffectPlayable : IPlayable, IEquatable<MaterialEffectPlayable> // TypeDefIndex: 2191
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
	
		// Methods
		public PlayableHandle GetHandle(); // 0x009C9E54-0x009C9EE8
		public bool Equals(MaterialEffectPlayable other); // 0x009C9EE8-0x009C9EF0
	}
}

namespace UnityEngine.Playables
{
	[RequiredByNativeCode] // 0x003A8E94-0x003A8EA4
	public struct Playable : IPlayable, IEquatable<Playable> // TypeDefIndex: 2192
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
		private static readonly Playable m_NullPlayable; // 0x00
	
		// Properties
		public static Playable Null { get; } // 0x008DDC1C-0x008DDC84 
	
		// Constructors
		[VisibleToOtherModules] // 0x003B0710-0x003B0720
		internal Playable(PlayableHandle handle); // 0x008DDC14-0x008DDC1C
		static Playable(); // 0x008DDDB4-0x008DDE28
	
		// Methods
		public PlayableHandle GetHandle(); // 0x008DDC84-0x008DDD14
		public bool Equals(Playable other); // 0x008DDDAC-0x008DDDB4
	}

	public interface IPlayableAsset // TypeDefIndex: 2193
	{
	}

	[Serializable]
	[AssetFileNameExtension] // 0x003A8EA4-0x003A8F30
	[RequiredByNativeCode] // 0x003A8EA4-0x003A8F30
	public abstract class PlayableAsset : ScriptableObject, IPlayableAsset // TypeDefIndex: 2194
	{
		// Properties
		public virtual double duration { get; } // 0x008DDE94-0x008DDEFC 
		public virtual IEnumerable<PlayableBinding> outputs { get; } // 0x008DDEFC-0x008DDF64 
	
		// Constructors
		protected PlayableAsset(); // 0x008DDE90-0x008DDE94
	
		// Methods
		public abstract Playable CreatePlayable(PlayableGraph graph, GameObject owner);
		[RequiredByNativeCode] // 0x003B0720-0x003B0730
		internal static void Internal_CreatePlayable(PlayableAsset asset, PlayableGraph graph, GameObject go, IntPtr ptr); // 0x008DDF64-0x008DE05C
		[RequiredByNativeCode] // 0x003B0730-0x003B0740
		internal static void Internal_GetPlayableAssetDuration(PlayableAsset asset, IntPtr ptrToDouble); // 0x008DE05C-0x008DE0B8
	}

	[Serializable]
	[RequiredByNativeCode] // 0x003A8F30-0x003A8F40
	public abstract class PlayableBehaviour : IPlayableBehaviour, ICloneable // TypeDefIndex: 2195
	{
		// Constructors
		public PlayableBehaviour(); // 0x008DE0B8-0x008DE0C0
	
		// Methods
		public virtual object Clone(); // 0x008DE0C0-0x008DE114
	}

	public struct PlayableBinding // TypeDefIndex: 2196
	{
		// Fields
		private string m_StreamName; // 0x00
		private UnityEngine.Object m_SourceObject; // 0x08
		private Type m_SourceBindingType; // 0x10
		private CreateOutputMethod m_CreateOutputMethod; // 0x18
		public static readonly PlayableBinding[] None; // 0x00
		public static readonly double DefaultDuration; // 0x08
	
		// Nested types
		[VisibleToOtherModules] // 0x003A8F40-0x003A8F50
		internal delegate PlayableOutput CreateOutputMethod(PlayableGraph graph, string name); // TypeDefIndex: 2197; 0x008DE1FC-0x008DE6A8
	
		// Constructors
		static PlayableBinding(); // 0x008DE114-0x008DE1EC
	}

	[NativeHeader] // 0x003A8F50-0x003A9008
	[NativeHeader] // 0x003A8F50-0x003A9008
	[NativeHeader] // 0x003A8F50-0x003A9008
	[NativeHeader] // 0x003A8F50-0x003A9008
	[UsedByNativeCode] // 0x003A8F50-0x003A9008
	public struct PlayableGraph // TypeDefIndex: 2198
	{
		// Fields
		internal IntPtr m_Handle; // 0x00
		internal uint m_Version; // 0x08
	}

	[NativeHeader] // 0x003A9008-0x003A909C
	[NativeHeader] // 0x003A9008-0x003A909C
	[NativeHeader] // 0x003A9008-0x003A909C
	[UsedByNativeCode] // 0x003A9008-0x003A909C
	public struct PlayableHandle : IEquatable<PlayableHandle> // TypeDefIndex: 2199
	{
		// Fields
		internal IntPtr m_Handle; // 0x00
		internal uint m_Version; // 0x08
		private static readonly PlayableHandle m_Null; // 0x00
	
		// Properties
		public static PlayableHandle Null { get; } // 0x008DDE28-0x008DDE90 
	
		// Constructors
		static PlayableHandle(); // 0x008DEAD0-0x008DEB20
	
		// Methods
		[VisibleToOtherModules] // 0x003B0740-0x003B0750
		internal bool IsPlayableOfType<T>();
		public static bool operator ==(PlayableHandle x, PlayableHandle y); // 0x008DDD14-0x008DDDAC
		public override bool Equals(object p); // 0x008DE8D4-0x008DE8DC
		public bool Equals(PlayableHandle other); // 0x008DE8DC-0x008DE8E4
		public override int GetHashCode(); // 0x008DE8E4-0x008DE984
		internal static bool CompareVersion(PlayableHandle lhs, PlayableHandle rhs); // 0x008DE780-0x008DE8D4
		[VisibleToOtherModules] // 0x003B0750-0x003B0760
		internal bool IsValid(); // 0x008DE9F0-0x008DEA5C
		[FreeFunction] // 0x003B0760-0x003B07CC
		[VisibleToOtherModules] // 0x003B0760-0x003B07CC
		internal Type GetPlayableType(); // 0x008DEAC8-0x008DEAD0
		private static bool IsValid_Injected(ref PlayableHandle _unity_self); // 0x008DE984-0x008DE9F0
		private static Type GetPlayableType_Injected(ref PlayableHandle _unity_self); // 0x008DEA5C-0x008DEAC8
	}

	[RequiredByNativeCode] // 0x003A909C-0x003A90AC
	public struct PlayableOutput : IPlayableOutput, IEquatable<PlayableOutput> // TypeDefIndex: 2200
	{
		// Fields
		private PlayableOutputHandle m_Handle; // 0x00
		private static readonly PlayableOutput m_NullPlayableOutput; // 0x00
	
		// Constructors
		[VisibleToOtherModules] // 0x003B07CC-0x003B07DC
		internal PlayableOutput(PlayableOutputHandle handle); // 0x008DEB20-0x008DEB28
		static PlayableOutput(); // 0x008DEC58-0x008DECCC
	
		// Methods
		public PlayableOutputHandle GetHandle(); // 0x008DEB28-0x008DEBB8
		public bool Equals(PlayableOutput other); // 0x008DEC50-0x008DEC58
	}

	[NativeHeader] // 0x003A90AC-0x003A9140
	[NativeHeader] // 0x003A90AC-0x003A9140
	[NativeHeader] // 0x003A90AC-0x003A9140
	[UsedByNativeCode] // 0x003A90AC-0x003A9140
	public struct PlayableOutputHandle : IEquatable<PlayableOutputHandle> // TypeDefIndex: 2201
	{
		// Fields
		internal IntPtr m_Handle; // 0x00
		internal uint m_Version; // 0x08
		private static readonly PlayableOutputHandle m_Null; // 0x00
	
		// Properties
		public static PlayableOutputHandle Null { get; } // 0x008DECCC-0x008DED34 
	
		// Constructors
		static PlayableOutputHandle(); // 0x008DEED4-0x008DEF24
	
		// Methods
		public override int GetHashCode(); // 0x008DED34-0x008DED70
		public static bool operator ==(PlayableOutputHandle lhs, PlayableOutputHandle rhs); // 0x008DEBB8-0x008DEC50
		public override bool Equals(object p); // 0x008DEEC4-0x008DEECC
		public bool Equals(PlayableOutputHandle other); // 0x008DEECC-0x008DEED4
		internal static bool CompareVersion(PlayableOutputHandle lhs, PlayableOutputHandle rhs); // 0x008DED70-0x008DEEC4
	}

	[RequiredByNativeCode] // 0x003A9140-0x003A9150
	public struct ScriptPlayableOutput : IPlayableOutput // TypeDefIndex: 2202
	{
		// Fields
		private PlayableOutputHandle m_Handle; // 0x00
	}
}

namespace UnityEngine.Experimental.Playables
{
	[NativeHeader] // 0x003A9150-0x003A920C
	[NativeHeader] // 0x003A9150-0x003A920C
	[NativeHeader] // 0x003A9150-0x003A920C
	[RequiredByNativeCode] // 0x003A9150-0x003A920C
	[StaticAccessor] // 0x003A9150-0x003A920C
	public struct TextureMixerPlayable : IPlayable, IEquatable<TextureMixerPlayable> // TypeDefIndex: 2203
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
	
		// Methods
		public PlayableHandle GetHandle(); // 0x009C9EF0-0x009C9F84
		public bool Equals(TextureMixerPlayable other); // 0x009C9F84-0x009C9F8C
	}

	[NativeHeader] // 0x003A920C-0x003A92C8
	[NativeHeader] // 0x003A920C-0x003A92C8
	[NativeHeader] // 0x003A920C-0x003A92C8
	[RequiredByNativeCode] // 0x003A920C-0x003A92C8
	[StaticAccessor] // 0x003A920C-0x003A92C8
	public struct TexturePlayableOutput : IPlayableOutput // TypeDefIndex: 2204
	{
		// Fields
		private PlayableOutputHandle m_Handle; // 0x00
	}
}

namespace UnityEngine.Internal
{
	[Serializable]
	[AttributeUsage] // 0x003A92C8-0x003A92DC
	public class DefaultValueAttribute : Attribute // TypeDefIndex: 2205
	{
		// Fields
		private object DefaultValue; // 0x10
	
		// Properties
		public object Value { get; } // 0x008D23DC-0x008D23E4 
	
		// Constructors
		public DefaultValueAttribute(string value); // 0x008D23B0-0x008D23DC
	
		// Methods
		public override bool Equals(object obj); // 0x008D23E4-0x008D24C0
		public override int GetHashCode(); // 0x008D24C0-0x008D24E4
	}

	[Serializable]
	public class ExcludeFromDocsAttribute : Attribute // TypeDefIndex: 2206
	{
		// Constructors
		public ExcludeFromDocsAttribute(); // 0x008D24E4-0x008D24F4
	}
}

namespace UnityEngine
{
	public interface ILogHandler // TypeDefIndex: 2207
	{
		// Methods
		void LogFormat(LogType logType, UnityEngine.Object context, string format, params /* 0x003B1D40-0x003B1D50 */ object[] args);
		void LogException(Exception exception, UnityEngine.Object context);
	}

	public interface ILogger : ILogHandler // TypeDefIndex: 2208
	{
		// Methods
		void Log(LogType logType, object message);
		void Log(LogType logType, object message, UnityEngine.Object context);
		void LogFormat(LogType logType, string format, params /* 0x003B1D50-0x003B1D60 */ object[] args);
	}

	public class Logger : ILogger // TypeDefIndex: 2209
	{
		// Fields
		[CompilerGenerated] // 0x003AAFC4-0x003AB000
		[DebuggerBrowsable] // 0x003AAFC4-0x003AB000
		private ILogHandler <logHandler>k__BackingField; // 0x10
		[CompilerGenerated] // 0x003AB000-0x003AB03C
		[DebuggerBrowsable] // 0x003AB000-0x003AB03C
		private bool <logEnabled>k__BackingField; // 0x18
		[CompilerGenerated] // 0x003AB03C-0x003AB078
		[DebuggerBrowsable] // 0x003AB03C-0x003AB078
		private LogType <filterLogType>k__BackingField; // 0x1C
	
		// Properties
		public ILogHandler logHandler { [CompilerGenerated] /* 0x003B07DC-0x003B07EC */ get; [CompilerGenerated] /* 0x003B07EC-0x003B07FC */ set; } // 0x008D29FC-0x008D2A04 0x008D29E0-0x008D29E8
		public bool logEnabled { [CompilerGenerated] /* 0x003B07FC-0x003B080C */ get; [CompilerGenerated] /* 0x003B080C-0x003B081C */ set; } // 0x008D2A04-0x008D2A0C 0x008D29E8-0x008D29F4
		public LogType filterLogType { [CompilerGenerated] /* 0x003B081C-0x003B082C */ get; [CompilerGenerated] /* 0x003B082C-0x003B083C */ set; } // 0x008D2A0C-0x008D2A14 0x008D29F4-0x008D29FC
	
		// Constructors
		public Logger(ILogHandler logHandler); // 0x008D29A4-0x008D29E0
	
		// Methods
		public bool IsLogTypeAllowed(LogType logType); // 0x008D2A14-0x008D2A50
		private static string GetString(object message); // 0x008D2A50-0x008D2AB8
		public void Log(LogType logType, object message); // 0x008D2AB8-0x008D2C40
		public void Log(LogType logType, object message, UnityEngine.Object context); // 0x008D2C40-0x008D2DD8
		public void LogFormat(LogType logType, string format, params /* 0x003B1D60-0x003B1D70 */ object[] args); // 0x008D2DD8-0x008D2EF0
		public void LogFormat(LogType logType, UnityEngine.Object context, string format, params /* 0x003B1D70-0x003B1D80 */ object[] args); // 0x008D2EF0-0x008D300C
		public void LogException(Exception exception, UnityEngine.Object context); // 0x008D300C-0x008D30F4
	}
}

namespace UnityEngine.Networking.PlayerConnection
{
	[Serializable]
	public class MessageEventArgs // TypeDefIndex: 2210
	{
		// Fields
		public int playerId; // 0x10
		public byte[] data; // 0x18
	
		// Constructors
		public MessageEventArgs(); // 0x008D9564-0x008D956C
	}

	public interface IEditorPlayerConnection // TypeDefIndex: 2211
	{
	}

	[Serializable]
	public class PlayerConnection : ScriptableObject, IEditorPlayerConnection // TypeDefIndex: 2212
	{
		// Fields
		internal static IPlayerEditorConnectionNative connectionNative; // 0x00
		[SerializeField] // 0x003AB078-0x003AB088
		private PlayerEditorConnectionEvents m_PlayerEditorConnectionEvents; // 0x18
		[SerializeField] // 0x003AB088-0x003AB098
		private List<int> m_connectedPlayers; // 0x20
		private bool m_IsInitilized; // 0x28
		private static PlayerConnection s_Instance; // 0x08
	
		// Properties
		public static PlayerConnection instance { get; } // 0x008D970C-0x008D97A4 
		public bool isConnected { get; } // 0x008D98A4-0x008D9958 
	
		// Nested types
		[CompilerGenerated] // 0x003A92DC-0x003A92EC
		private sealed class <Register>c__AnonStorey0 // TypeDefIndex: 2213
		{
			// Fields
			internal Guid messageId; // 0x10
	
			// Constructors
			public <Register>c__AnonStorey0(); // 0x008D9DBC-0x008D9DC4
	
			// Methods
			internal bool <>m__0(PlayerEditorConnectionEvents.MessageTypeSubscribers x); // 0x008DBF78-0x008DC030
		}
	
		[CompilerGenerated] // 0x003A92EC-0x003A92FC
		private sealed class <Unregister>c__AnonStorey1 // TypeDefIndex: 2214
		{
			// Fields
			internal Guid messageId; // 0x10
	
			// Constructors
			public <Unregister>c__AnonStorey1(); // 0x008DB0FC-0x008DB104
	
			// Methods
			internal bool <>m__0(PlayerEditorConnectionEvents.MessageTypeSubscribers x); // 0x008DC060-0x008DC118
		}
	
		[CompilerGenerated] // 0x003A92FC-0x003A930C
		private sealed class <BlockUntilRecvMsg>c__AnonStorey2 // TypeDefIndex: 2215
		{
			// Fields
			internal bool msgReceived; // 0x10
	
			// Constructors
			public <BlockUntilRecvMsg>c__AnonStorey2(); // 0x008DB7EC-0x008DB7F4
	
			// Methods
			internal void <>m__0(MessageEventArgs args); // 0x008DBF6C-0x008DBF78
		}
	
		// Constructors
		public PlayerConnection(); // 0x008D956C-0x008D95F4
	
		// Methods
		private static PlayerConnection CreateInstance(); // 0x008D9818-0x008D98A4
		public void OnEnable(); // 0x008D9A40-0x008D9B10
		private IPlayerEditorConnectionNative GetConnectionNativeApi(); // 0x008D9958-0x008D99CC
		public void Register(Guid messageId, UnityAction<MessageEventArgs> callback); // 0x008D9B18-0x008D9DBC
		public void Unregister(Guid messageId, UnityAction<MessageEventArgs> callback); // 0x008D9F3C-0x008DB0FC
		public void RegisterConnection(UnityAction<int> callback); // 0x008DB25C-0x008DB3E4
		public void RegisterDisconnection(UnityAction<int> callback); // 0x008DB3E4-0x008DB464
		public void Send(Guid messageId, byte[] data); // 0x008DB464-0x008DB5CC
		public bool BlockUntilRecvMsg(Guid messageId, int timeout); // 0x008DB5CC-0x008DB7EC
		public void DisconnectAll(); // 0x008DB7F4-0x008DB8A8
		[RequiredByNativeCode] // 0x003B083C-0x003B084C
		private static void MessageCallbackInternal(IntPtr data, ulong size, ulong guid, string messageId); // 0x008DB8A8-0x008DB9D4
		[RequiredByNativeCode] // 0x003B084C-0x003B085C
		private static void ConnectedCallbackInternal(int playerId); // 0x008DBDF4-0x008DBEB0
		[RequiredByNativeCode] // 0x003B085C-0x003B086C
		private static void DisconnectedCallback(int playerId); // 0x008DBEB0-0x008DBF6C
	}

	[Serializable]
	internal class PlayerEditorConnectionEvents // TypeDefIndex: 2216
	{
		// Fields
		[SerializeField] // 0x003AB098-0x003AB0A8
		public List<MessageTypeSubscribers> messageTypeSubscribers; // 0x10
		[SerializeField] // 0x003AB0A8-0x003AB0B8
		public ConnectionChangeEvent connectionEvent; // 0x18
		[SerializeField] // 0x003AB0B8-0x003AB0C8
		public ConnectionChangeEvent disconnectionEvent; // 0x20
	
		// Nested types
		[Serializable]
		public class MessageEvent : UnityEvent<MessageEventArgs> // TypeDefIndex: 2217
		{
			// Constructors
			public MessageEvent(); // 0x008DC218-0x008DC268
		}
	
		[Serializable]
		public class ConnectionChangeEvent : UnityEvent<int> // TypeDefIndex: 2218
		{
			// Constructors
			public ConnectionChangeEvent(); // 0x008DC118-0x008DC168
		}
	
		[Serializable]
		public class MessageTypeSubscribers // TypeDefIndex: 2219
		{
			// Fields
			[SerializeField] // 0x003AB0C8-0x003AB0D8
			private string m_messageTypeId; // 0x10
			public int subscriberCount; // 0x18
			public MessageEvent messageCallback; // 0x20
	
			// Properties
			public Guid MessageTypeId { get; set; } // 0x008DC030-0x008DC060 0x008DC1E0-0x008DC218
	
			// Constructors
			public MessageTypeSubscribers(); // 0x008DC178-0x008DC1E0
		}
	
		[CompilerGenerated] // 0x003A930C-0x003A931C
		private sealed class <InvokeMessageIdSubscribers>c__AnonStorey0 // TypeDefIndex: 2220
		{
			// Fields
			internal Guid messageId; // 0x10
	
			// Constructors
			public <InvokeMessageIdSubscribers>c__AnonStorey0(); // 0x008DC168-0x008DC170
	
			// Methods
			internal bool <>m__0(MessageTypeSubscribers x); // 0x008DC328-0x008DC3E0
		}
	
		[CompilerGenerated] // 0x003A931C-0x003A932C
		private sealed class <AddAndCreate>c__AnonStorey1 // TypeDefIndex: 2221
		{
			// Fields
			internal Guid messageId; // 0x10
	
			// Constructors
			public <AddAndCreate>c__AnonStorey1(); // 0x008DC170-0x008DC178
	
			// Methods
			internal bool <>m__0(MessageTypeSubscribers x); // 0x008DC270-0x008DC328
		}
	
		[CompilerGenerated] // 0x003A932C-0x003A933C
		private sealed class <UnregisterManagedCallback>c__AnonStorey2 // TypeDefIndex: 2222
		{
			// Fields
			internal Guid messageId; // 0x10
	
			// Constructors
			public <UnregisterManagedCallback>c__AnonStorey2(); // 0x008DC268-0x008DC270
	
			// Methods
			internal bool <>m__0(MessageTypeSubscribers x); // 0x008DC3E0-0x008DC4B4
		}
	
		// Constructors
		public PlayerEditorConnectionEvents(); // 0x008D95F4-0x008D969C
	
		// Methods
		public void InvokeMessageIdSubscribers(Guid messageId, byte[] data, int playerId); // 0x008DB9D4-0x008DBDF4
		public UnityEvent<MessageEventArgs> AddAndCreate(Guid messageId); // 0x008D9DC4-0x008D9F3C
		public void UnregisterManagedCallback(Guid messageId, UnityAction<MessageEventArgs> callback); // 0x008DB104-0x008DB25C
	}
}

namespace UnityEngine.Experimental.Rendering
{
	public interface IRenderPipeline : IDisposable // TypeDefIndex: 2223
	{
		// Properties
		bool disposed { get; }
	
		// Methods
		void Render(ScriptableRenderContext renderContext, Camera[] cameras);
	}

	public interface IRenderPipelineAsset // TypeDefIndex: 2224
	{
		// Methods
		void DestroyCreatedInstances();
		IRenderPipeline CreatePipeline();
	}

	public abstract class RenderPipeline : IRenderPipeline // TypeDefIndex: 2225
	{
		// Fields
		[CompilerGenerated] // 0x003AB0D8-0x003AB114
		[DebuggerBrowsable] // 0x003AB0D8-0x003AB114
		private static Action<Camera[]> beginFrameRendering; // 0x00
		[CompilerGenerated] // 0x003AB114-0x003AB150
		[DebuggerBrowsable] // 0x003AB114-0x003AB150
		private static Action<Camera> beginCameraRendering; // 0x08
		[CompilerGenerated] // 0x003AB150-0x003AB18C
		[DebuggerBrowsable] // 0x003AB150-0x003AB18C
		private bool <disposed>k__BackingField; // 0x10
	
		// Properties
		public bool disposed { [CompilerGenerated] /* 0x003B086C-0x003B087C */ get; [CompilerGenerated] /* 0x003B087C-0x003B088C */ private set; } // 0x009CA6B0-0x009CA6B8 0x009CA6B8-0x009CA6C4
	
		// Events
		public static event Action<Camera[]> beginFrameRendering {
			add; // 0x009CA20C-0x009CA30C
			remove; // 0x009CA30C-0x009CA40C
		}
		public static event Action<Camera> beginCameraRendering {
			add; // 0x009CA40C-0x009CA50C
			remove; // 0x009CA50C-0x009CA60C
		}
	
		// Methods
		public virtual void Render(ScriptableRenderContext renderContext, Camera[] cameras); // 0x009CA60C-0x009CA6B0
		public virtual void Dispose(); // 0x009CA6C4-0x009CA6D0
	}

	public static class RenderPipelineManager // TypeDefIndex: 2226
	{
		// Fields
		private static IRenderPipelineAsset s_CurrentPipelineAsset; // 0x00
		[CompilerGenerated] // 0x003AB18C-0x003AB1C8
		[DebuggerBrowsable] // 0x003AB18C-0x003AB1C8
		private static IRenderPipeline <currentPipeline>k__BackingField; // 0x08
	
		// Properties
		public static IRenderPipeline currentPipeline { [CompilerGenerated] /* 0x003B088C-0x003B089C */ get; [CompilerGenerated] /* 0x003B089C-0x003B08AC */ private set; } // 0x009CA6D0-0x009CA720 0x009CA720-0x009CA774
	
		// Methods
		[RequiredByNativeCode] // 0x003B08AC-0x003B08BC
		internal static void CleanupRenderPipeline(); // 0x009CA774-0x009CA8D0
		[RequiredByNativeCode] // 0x003B08BC-0x003B08CC
		private static void DoRenderLoop_Internal(IRenderPipelineAsset pipe, Camera[] cameras, IntPtr loopPtr); // 0x009CA964-0x009CAA78
		private static void PrepareRenderPipeline(IRenderPipelineAsset pipe); // 0x009CAA78-0x009CAC58
	}

	public class SupportedRenderingFeatures // TypeDefIndex: 2227
	{
		// Fields
		private static SupportedRenderingFeatures s_Active; // 0x00
		[CompilerGenerated] // 0x003AB1C8-0x003AB204
		[DebuggerBrowsable] // 0x003AB1C8-0x003AB204
		private ReflectionProbeSupportFlags <reflectionProbeSupportFlags>k__BackingField; // 0x10
		[CompilerGenerated] // 0x003AB204-0x003AB240
		[DebuggerBrowsable] // 0x003AB204-0x003AB240
		private LightmapMixedBakeMode <defaultMixedLightingMode>k__BackingField; // 0x14
		[CompilerGenerated] // 0x003AB240-0x003AB27C
		[DebuggerBrowsable] // 0x003AB240-0x003AB27C
		private LightmapMixedBakeMode <supportedMixedLightingModes>k__BackingField; // 0x18
		[CompilerGenerated] // 0x003AB27C-0x003AB2B8
		[DebuggerBrowsable] // 0x003AB27C-0x003AB2B8
		private LightmapBakeType <supportedLightmapBakeTypes>k__BackingField; // 0x1C
		[CompilerGenerated] // 0x003AB2B8-0x003AB2F4
		[DebuggerBrowsable] // 0x003AB2B8-0x003AB2F4
		private LightmapsMode <supportedLightmapsModes>k__BackingField; // 0x20
		[CompilerGenerated] // 0x003AB2F4-0x003AB330
		[DebuggerBrowsable] // 0x003AB2F4-0x003AB330
		private bool <rendererSupportsLightProbeProxyVolumes>k__BackingField; // 0x24
		[CompilerGenerated] // 0x003AB330-0x003AB36C
		[DebuggerBrowsable] // 0x003AB330-0x003AB36C
		private bool <rendererSupportsMotionVectors>k__BackingField; // 0x25
		[CompilerGenerated] // 0x003AB36C-0x003AB3A8
		[DebuggerBrowsable] // 0x003AB36C-0x003AB3A8
		private bool <rendererSupportsReceiveShadows>k__BackingField; // 0x26
		[CompilerGenerated] // 0x003AB3A8-0x003AB3E4
		[DebuggerBrowsable] // 0x003AB3A8-0x003AB3E4
		private bool <rendererSupportsReflectionProbes>k__BackingField; // 0x27
		[CompilerGenerated] // 0x003AB3E4-0x003AB420
		[DebuggerBrowsable] // 0x003AB3E4-0x003AB420
		private bool <rendererSupportsRendererPriority>k__BackingField; // 0x28
		[CompilerGenerated] // 0x003AB420-0x003AB45C
		[DebuggerBrowsable] // 0x003AB420-0x003AB45C
		private bool <rendererOverridesEnvironmentLighting>k__BackingField; // 0x29
		[CompilerGenerated] // 0x003AB45C-0x003AB498
		[DebuggerBrowsable] // 0x003AB45C-0x003AB498
		private bool <rendererOverridesFog>k__BackingField; // 0x2A
		[CompilerGenerated] // 0x003AB498-0x003AB4D4
		[DebuggerBrowsable] // 0x003AB498-0x003AB4D4
		private bool <rendererOverridesOtherLightingSettings>k__BackingField; // 0x2B
	
		// Properties
		public static SupportedRenderingFeatures active { get; set; } // 0x009CB000-0x009CB0E4 0x009CA8F8-0x009CA964
		public LightmapMixedBakeMode defaultMixedLightingMode { [CompilerGenerated] /* 0x003B08CC-0x003B08DC */ get; } // 0x009CB0E4-0x009CB0EC 
		public LightmapMixedBakeMode supportedMixedLightingModes { [CompilerGenerated] /* 0x003B08DC-0x003B08EC */ get; } // 0x009CB0EC-0x009CB0F4 
		public LightmapBakeType supportedLightmapBakeTypes { [CompilerGenerated] /* 0x003B08EC-0x003B08FC */ get; } // 0x009CB0F4-0x009CB0FC 
		public LightmapsMode supportedLightmapsModes { [CompilerGenerated] /* 0x003B08FC-0x003B090C */ get; } // 0x009CB0FC-0x009CB104 
	
		// Nested types
		[Flags] // 0x003A933C-0x003A934C
		public enum ReflectionProbeSupportFlags // TypeDefIndex: 2228
		{
			None = 0,
			Rotation = 1
		}
	
		[Flags] // 0x003A934C-0x003A935C
		public enum LightmapMixedBakeMode // TypeDefIndex: 2229
		{
			None = 0,
			IndirectOnly = 1,
			Subtractive = 2,
			Shadowmask = 4
		}
	
		// Constructors
		public SupportedRenderingFeatures(); // 0x009CA8D0-0x009CA8F8
		static SupportedRenderingFeatures(); // 0x009CB6A0-0x009CB804
	
		// Methods
		[RequiredByNativeCode] // 0x003B090C-0x003B091C
		internal static void FallbackMixedLightingModeByRef(IntPtr fallbackModePtr); // 0x009CB104-0x009CB294
		internal static bool IsMixedLightingModeSupported(MixedLightingMode mixedMode); // 0x009CB294-0x009CB324
		[RequiredByNativeCode] // 0x003B091C-0x003B092C
		internal static void IsMixedLightingModeSupportedByRef(MixedLightingMode mixedMode, IntPtr isSupportedPtr); // 0x009CB324-0x009CB468
		internal static bool IsLightmapBakeTypeSupported(LightmapBakeType bakeType); // 0x009CB468-0x009CB4F8
		[RequiredByNativeCode] // 0x003B092C-0x003B093C
		internal static void IsLightmapBakeTypeSupportedByRef(LightmapBakeType bakeType, IntPtr isSupportedPtr); // 0x009CB4F8-0x009CB600
		[RequiredByNativeCode] // 0x003B093C-0x003B094C
		internal static void IsLightmapsModeSupportedByRef(LightmapsMode mode, IntPtr isSupportedPtr); // 0x009CB600-0x009CB6A0
	}
}

namespace UnityEngine.SceneManagement
{
	[Serializable]
	[NativeHeader] // 0x003A935C-0x003A9394
	public struct Scene // TypeDefIndex: 2230
	{
		// Fields
		[SerializeField] // 0x003AB4D4-0x003AB4E4
		private int m_Handle; // 0x00
	
		// Properties
		public int handle { get; } // 0x008E7694-0x008E769C 
		public string name { get; } // 0x008E76AC-0x008E76B4 
		public bool isLoaded { get; } // 0x008E76B4-0x008E76BC 
		public int rootCount { get; } // 0x008E76BC-0x008E78E8 
	
		// Methods
		[StaticAccessor] // 0x003B094C-0x003B0988
		private static bool IsValidInternal(int sceneHandle); // 0x008E7470-0x008E74DC
		[StaticAccessor] // 0x003B0988-0x003B09C4
		private static string GetNameInternal(int sceneHandle); // 0x008E74DC-0x008E7548
		[StaticAccessor] // 0x003B09C4-0x003B0A00
		private static bool GetIsLoadedInternal(int sceneHandle); // 0x008E7548-0x008E75B4
		[StaticAccessor] // 0x003B0A00-0x003B0A3C
		private static int GetRootCountInternal(int sceneHandle); // 0x008E75B4-0x008E7620
		[StaticAccessor] // 0x003B0A3C-0x003B0A78
		private static void GetRootGameObjectsInternal(int sceneHandle, object resultRootList); // 0x008E7620-0x008E7694
		public bool IsValid(); // 0x008E769C-0x008E76AC
		public GameObject[] GetRootGameObjects(); // 0x008E78E8-0x008E78F0
		public void GetRootGameObjects(List<GameObject> rootGameObjects); // 0x008E78F0-0x008E78F8
		public override int GetHashCode(); // 0x008E78F8-0x008E7988
		public override bool Equals(object other); // 0x008E7988-0x008E7990
	}

	[NativeHeader] // 0x003A9394-0x003A93E0
	[RequiredByNativeCode] // 0x003A9394-0x003A93E0
	public class SceneManager // TypeDefIndex: 2231
	{
		// Fields
		[CompilerGenerated] // 0x003AB4E4-0x003AB520
		[DebuggerBrowsable] // 0x003AB4E4-0x003AB520
		private static UnityAction<Scene, LoadSceneMode> sceneLoaded; // 0x00
		[CompilerGenerated] // 0x003AB520-0x003AB55C
		[DebuggerBrowsable] // 0x003AB520-0x003AB55C
		private static UnityAction<Scene> sceneUnloaded; // 0x08
		[CompilerGenerated] // 0x003AB55C-0x003AB598
		[DebuggerBrowsable] // 0x003AB55C-0x003AB598
		private static UnityAction<Scene, Scene> activeSceneChanged; // 0x10
	
		// Properties
		public static int sceneCount { [NativeHeader] /* 0x003B0A78-0x003B0B00 */ [StaticAccessor] /* 0x003B0A78-0x003B0B00 */ [NativeMethod] /* 0x003B0A78-0x003B0B00 */ get; } // 0x008E7990-0x008E79E8 
	
		// Events
		public static event UnityAction<Scene, LoadSceneMode> sceneLoaded {
			add; // 0x008E7BCC-0x008E7CCC
			remove; // 0x008E7CCC-0x008E7DCC
		}
		public static event UnityAction<Scene, Scene> activeSceneChanged {
			add; // 0x008E7DCC-0x008E7ECC
			remove; // 0x008E7ECC-0x008E7FCC
		}
	
		// Methods
		[StaticAccessor] // 0x003B0B00-0x003B0B3C
		public static Scene GetActiveScene(); // 0x008E79E8-0x008E7A10
		[NativeThrows] // 0x003B0B3C-0x003B0B8C
		[StaticAccessor] // 0x003B0B3C-0x003B0B8C
		public static Scene GetSceneAt(int index); // 0x008E7A7C-0x008E7AA4
		[NativeThrows] // 0x003B0B8C-0x003B0BDC
		[StaticAccessor] // 0x003B0B8C-0x003B0BDC
		private static AsyncOperation LoadSceneAsyncNameIndexInternal(string sceneName, int sceneBuildIndex, LoadSceneParameters parameters, bool mustCompleteNextFrame); // 0x008E7B18-0x008E7B40
		public static void LoadScene(string sceneName, [UnityEngine.Internal.DefaultValue] /* 0x003B1D80-0x003B1DB8 */ LoadSceneMode mode); // 0x008E7FCC-0x008E7FD4
		[ExcludeFromDocs] // 0x003B0BDC-0x003B0BEC
		public static void LoadScene(string sceneName); // 0x008E8018-0x008E8020
		public static Scene LoadScene(string sceneName, LoadSceneParameters parameters); // 0x008E7FD4-0x008E8018
		[ExcludeFromDocs] // 0x003B0BEC-0x003B0BFC
		public static void LoadScene(int sceneBuildIndex); // 0x008E8020-0x008E8028
		public static Scene LoadScene(int sceneBuildIndex, LoadSceneParameters parameters); // 0x008E8028-0x008E8074
		[ExcludeFromDocs] // 0x003B0BFC-0x003B0C0C
		public static AsyncOperation LoadSceneAsync(string sceneName); // 0x008E8074-0x008E80A0
		public static AsyncOperation LoadSceneAsync(string sceneName, LoadSceneParameters parameters); // 0x008E80A0-0x008E80CC
		[RequiredByNativeCode] // 0x003B0C0C-0x003B0C1C
		private static void Internal_SceneLoaded(Scene scene, LoadSceneMode mode); // 0x008E80CC-0x008E8154
		[RequiredByNativeCode] // 0x003B0C1C-0x003B0C2C
		private static void Internal_SceneUnloaded(Scene scene); // 0x008E8154-0x008E81C8
		[RequiredByNativeCode] // 0x003B0C2C-0x003B0C3C
		private static void Internal_ActiveSceneChanged(Scene previousActiveScene, Scene newActiveScene); // 0x008E81C8-0x008E8250
		private static void GetActiveScene_Injected(out Scene ret); // 0x008E7A10-0x008E7A7C
		private static void GetSceneAt_Injected(int index, out Scene ret); // 0x008E7AA4-0x008E7B18
		private static AsyncOperation LoadSceneAsyncNameIndexInternal_Injected(string sceneName, int sceneBuildIndex, ref LoadSceneParameters parameters, bool mustCompleteNextFrame); // 0x008E7B40-0x008E7BCC
	}

	public enum LoadSceneMode // TypeDefIndex: 2232
	{
		Single = 0,
		Additive = 1
	}

	[Flags] // 0x003A93E0-0x003A93F0
	public enum LocalPhysicsMode // TypeDefIndex: 2233
	{
		None = 0,
		Physics2D = 1,
		Physics3D = 2
	}

	[Serializable]
	public struct LoadSceneParameters // TypeDefIndex: 2234
	{
		// Fields
		[SerializeField] // 0x003AB598-0x003AB5A8
		private LoadSceneMode m_LoadSceneMode; // 0x00
		[SerializeField] // 0x003AB5A8-0x003AB5B8
		private LocalPhysicsMode m_LocalPhysicsMode; // 0x04
	
		// Constructors
		public LoadSceneParameters(LoadSceneMode mode); // 0x008E7468-0x008E7470
	}
}

namespace UnityEngine
{
	[AttributeUsage] // 0x003A93F0-0x003A9440
	[RequiredByNativeCode] // 0x003A93F0-0x003A9440
	internal sealed class ExtensionOfNativeClassAttribute : Attribute // TypeDefIndex: 2235
	{
		// Constructors
		public ExtensionOfNativeClassAttribute(); // 0x009CB804-0x009CB828
	}
}

namespace UnityEngine.Scripting
{
	[AttributeUsage] // 0x003A9440-0x003A947C
	public class PreserveAttribute : Attribute // TypeDefIndex: 2236
	{
		// Constructors
		public PreserveAttribute(); // 0x008E7458-0x008E7460
	}
}

namespace UnityEngine.Scripting.APIUpdating
{
	[AttributeUsage] // 0x003A947C-0x003A9490
	public class MovedFromAttribute : Attribute // TypeDefIndex: 2237
	{
		// Fields
		[CompilerGenerated] // 0x003AB5B8-0x003AB5F4
		[DebuggerBrowsable] // 0x003AB5B8-0x003AB5F4
		private string <Namespace>k__BackingField; // 0x10
		[CompilerGenerated] // 0x003AB5F4-0x003AB630
		[DebuggerBrowsable] // 0x003AB5F4-0x003AB630
		private bool <IsInDifferentAssembly>k__BackingField; // 0x18
	
		// Properties
		private string Namespace { [CompilerGenerated] /* 0x003B0C3C-0x003B0C4C */ set; } // 0x008E87A4-0x008E87AC
		private bool IsInDifferentAssembly { [CompilerGenerated] /* 0x003B0C4C-0x003B0C5C */ set; } // 0x008E87AC-0x008E87B8
	
		// Constructors
		public MovedFromAttribute(string sourceNamespace); // 0x008E8734-0x008E8764
		public MovedFromAttribute(string sourceNamespace, bool isInDifferentAssembly); // 0x008E8764-0x008E87A4
	}
}

namespace UnityEngine.Serialization
{
	[AttributeUsage] // 0x003A9490-0x003A94F0
	[RequiredByNativeCode] // 0x003A9490-0x003A94F0
	public class FormerlySerializedAsAttribute : Attribute // TypeDefIndex: 2238
	{
		// Fields
		private string m_oldName; // 0x10
	
		// Constructors
		public FormerlySerializedAsAttribute(string oldName); // 0x008E9FC4-0x008E9FF0
	}
}

namespace UnityEngineInternal
{
	public enum TypeInferenceRules // TypeDefIndex: 2239
	{
		TypeReferencedByFirstArgument = 0,
		TypeReferencedBySecondArgument = 1,
		ArrayOfTypeReferencedByFirstArgument = 2,
		TypeOfFirstArgument = 3
	}

	[Serializable]
	[AttributeUsage] // 0x003A94F0-0x003A9504
	public class TypeInferenceRuleAttribute : Attribute // TypeDefIndex: 2240
	{
		// Fields
		private readonly string _rule; // 0x10
	
		// Constructors
		public TypeInferenceRuleAttribute(TypeInferenceRules rule); // 0x00C4D370-0x00C4D41C
		public TypeInferenceRuleAttribute(string rule); // 0x00C4D41C-0x00C4D448
	
		// Methods
		public override string ToString(); // 0x00C4D448-0x00C4D450
	}

	public class GenericStack : Stack // TypeDefIndex: 2241
	{
		// Constructors
		public GenericStack(); // 0x00C4D268-0x00C4D270
	}

	internal static class NetFxCoreExtensions // TypeDefIndex: 2242
	{
		// Extension methods
		public static Delegate CreateDelegate(this MethodInfo self, Type delegateType, object target); // 0x00C4D324-0x00C4D33C
		public static MethodInfo GetMethodInfo(this Delegate self); // 0x00C4D33C-0x00C4D368
	}
}

namespace UnityEngine.Profiling.Memory.Experimental
{
	public class MetaData // TypeDefIndex: 2243
	{
		// Fields
		public string content; // 0x10
		public string platform; // 0x18
		public Texture2D screenshot; // 0x20
	
		// Constructors
		public MetaData(); // 0x008E0580-0x008E0588
	}

	[NativeHeader] // 0x003A9514-0x003A954C
	public sealed class MemoryProfiler // TypeDefIndex: 2244
	{
		// Fields
		[CompilerGenerated] // 0x003AB630-0x003AB66C
		[DebuggerBrowsable] // 0x003AB630-0x003AB66C
		private static Action<string, bool> snapshotFinished; // 0x00
		[CompilerGenerated] // 0x003AB66C-0x003AB6A8
		[DebuggerBrowsable] // 0x003AB66C-0x003AB6A8
		private static Action<MetaData> createMetaData; // 0x08
	
		// Methods
		[RequiredByNativeCode] // 0x003B0C7C-0x003B0C8C
		private static byte[] PrepareMetadata(); // 0x008E0190-0x008E0580
		internal static int WriteIntToByteArray(byte[] array, int offset, int value); // 0x008E0588-0x008E0688
		internal static int WriteStringToByteArray(byte[] array, int offset, string value); // 0x008E0688-0x008E0784
		[RequiredByNativeCode] // 0x003B0C8C-0x003B0C9C
		private static void FinalizeSnapshot(string path, bool result); // 0x008E0784-0x008E0810
	}
}

namespace UnityEngine
{
	[Flags] // 0x003A954C-0x003A955C
	public enum DrivenTransformProperties // TypeDefIndex: 2245
	{
		All = -1,
		None = 0,
		AnchoredPositionX = 2,
		AnchoredPositionY = 4,
		AnchoredPosition = 6,
		AnchoredPositionZ = 8,
		AnchoredPosition3D = 14,
		Rotation = 16,
		ScaleX = 32,
		ScaleY = 64,
		ScaleZ = 128,
		Scale = 224,
		AnchorMinX = 256,
		AnchorMinY = 512,
		AnchorMin = 768,
		AnchorMaxX = 1024,
		AnchorMaxY = 2048,
		AnchorMax = 3072,
		Anchors = 3840,
		SizeDeltaX = 4096,
		SizeDeltaY = 8192,
		SizeDelta = 12288,
		PivotX = 16384,
		PivotY = 32768,
		Pivot = 49152
	}

	public struct DrivenRectTransformTracker // TypeDefIndex: 2246
	{
		// Methods
		public void Add(UnityEngine.Object driver, RectTransform rectTransform, DrivenTransformProperties drivenProperties); // 0x009C643C-0x009C6444
		public void Clear(); // 0x009C6444-0x009C6448
	}

	[NativeClass] // 0x003A955C-0x003A95BC
	[NativeHeader] // 0x003A955C-0x003A95BC
	public sealed class RectTransform : Transform // TypeDefIndex: 2247
	{
		// Fields
		[CompilerGenerated] // 0x003AB6A8-0x003AB6E4
		[DebuggerBrowsable] // 0x003AB6A8-0x003AB6E4
		private static ReapplyDrivenProperties reapplyDrivenProperties; // 0x00
	
		// Properties
		public Rect rect { get; } // 0x008E364C-0x008E3678 
		public Vector2 anchorMin { get; set; } // 0x008E36EC-0x008E3714 0x008E3788-0x008E37AC
		public Vector2 anchorMax { get; set; } // 0x008E3820-0x008E3848 0x008E38BC-0x008E38E0
		public Vector2 anchoredPosition { get; set; } // 0x008E3954-0x008E397C 0x008E39F0-0x008E3A14
		public Vector2 sizeDelta { get; set; } // 0x008E3A88-0x008E3AB0 0x008E3B24-0x008E3B48
		public Vector2 pivot { get; set; } // 0x008E3BBC-0x008E3BE4 0x008E3C58-0x008E3C7C
		public Vector2 offsetMin { set; } // 0x008E3CF0-0x008E3EC8
		public Vector2 offsetMax { set; } // 0x008E3EC8-0x008E4098
	
		// Events
		public static event ReapplyDrivenProperties reapplyDrivenProperties {
			add; // 0x008E344C-0x008E354C
			remove; // 0x008E354C-0x008E364C
		}
	
		// Nested types
		public enum Edge // TypeDefIndex: 2248
		{
			Left = 0,
			Right = 1,
			Top = 2,
			Bottom = 3
		}
	
		public enum Axis // TypeDefIndex: 2249
		{
			Horizontal = 0,
			Vertical = 1
		}
	
		public delegate void ReapplyDrivenProperties(RectTransform driven); // TypeDefIndex: 2250; 0x008E483C-0x008E4F70
	
		// Methods
		public void GetLocalCorners(Vector3[] fourCornersArray); // 0x008E4098-0x008E42A4
		public void GetWorldCorners(Vector3[] fourCornersArray); // 0x008E42A4-0x008E4410
		public void SetInsetAndSizeFromParentEdge(Edge edge, float inset, float size); // 0x008E4410-0x008E45D4
		public void SetSizeWithCurrentAnchors(Axis axis, float size); // 0x008E45D4-0x008E46C8
		[RequiredByNativeCode] // 0x003B0C9C-0x003B0CAC
		internal static void SendReapplyDrivenProperties(RectTransform driven); // 0x008E47D4-0x008E483C
		private Vector2 GetParentSize(); // 0x008E46C8-0x008E47D4
		private void get_rect_Injected(out Rect ret); // 0x008E3678-0x008E36EC
		private void get_anchorMin_Injected(out Vector2 ret); // 0x008E3714-0x008E3788
		private void set_anchorMin_Injected(ref Vector2 value); // 0x008E37AC-0x008E3820
		private void get_anchorMax_Injected(out Vector2 ret); // 0x008E3848-0x008E38BC
		private void set_anchorMax_Injected(ref Vector2 value); // 0x008E38E0-0x008E3954
		private void get_anchoredPosition_Injected(out Vector2 ret); // 0x008E397C-0x008E39F0
		private void set_anchoredPosition_Injected(ref Vector2 value); // 0x008E3A14-0x008E3A88
		private void get_sizeDelta_Injected(out Vector2 ret); // 0x008E3AB0-0x008E3B24
		private void set_sizeDelta_Injected(ref Vector2 value); // 0x008E3B48-0x008E3BBC
		private void get_pivot_Injected(out Vector2 ret); // 0x008E3BE4-0x008E3C58
		private void set_pivot_Injected(ref Vector2 value); // 0x008E3C7C-0x008E3CF0
	}

	[NativeHeader] // 0x003A95BC-0x003A9650
	[NativeHeader] // 0x003A95BC-0x003A9650
	[NativeHeader] // 0x003A95BC-0x003A9650
	[RequiredByNativeCode] // 0x003A95BC-0x003A9650
	public class Transform : Component, IEnumerable // TypeDefIndex: 2251
	{
		// Properties
		public Vector3 position { get; set; } // 0x00C41394-0x00C413C4 0x00C41438-0x00C41460
		public Vector3 localPosition { get; set; } // 0x00C414D4-0x00C41504 0x00C41578-0x00C415A0
		public Vector3 eulerAngles { get; set; } // 0x00C41614-0x00C4164C 0x00C41678-0x00C41724
		public Vector3 localEulerAngles { get; set; } // 0x00C4174C-0x00C41784 0x00C417B0-0x00C4185C
		public Vector3 right { get; } // 0x00C41884-0x00C41978 
		public Vector3 up { get; } // 0x00C419E4-0x00C41AD8 
		public Vector3 forward { get; set; } // 0x00C41B44-0x00C41C38 0x00C41CA4-0x00C41D50
		public Quaternion rotation { get; set; } // 0x00C4164C-0x00C41678 0x00C41724-0x00C4174C
		public Quaternion localRotation { get; set; } // 0x00C41784-0x00C417B0 0x00C4185C-0x00C41884
		public Vector3 localScale { get; set; } // 0x00C41F20-0x00C41F50 0x00C41FC4-0x00C41FEC
		public Transform parent { get; set; } // 0x00C42060-0x00C42064 0x00C42068-0x00C42114
		internal Transform parentInternal { get; set; } // 0x00C42064-0x00C42068 0x00C42114-0x00C4211C
		public Matrix4x4 worldToLocalMatrix { get; } // 0x00C42214-0x00C4225C 
		public Matrix4x4 localToWorldMatrix { get; } // 0x00C422D0-0x00C42318 
		public Transform root { get; } // 0x00C42C80-0x00C42C84 
		public int childCount { [NativeMethod] /* 0x003B0D2C-0x003B0D64 */ get; } // 0x00C42CF0-0x00C42D5C 
		public Vector3 lossyScale { [NativeMethod] /* 0x003B0D64-0x003B0D9C */ get; } // 0x00C42E34-0x00C42E64 
	
		// Nested types
		private class Enumerator : IEnumerator // TypeDefIndex: 2252
		{
			// Fields
			private Transform outer; // 0x10
			private int currentIndex; // 0x18
	
			// Properties
			public object Current { get; } // 0x00C43060-0x00C43094 
	
			// Constructors
			internal Enumerator(Transform outer); // 0x00C42FB8-0x00C42FEC
	
			// Methods
			public bool MoveNext(); // 0x00C43094-0x00C430DC
			public void Reset(); // 0x00C430DC-0x00C430E8
		}
	
		// Constructors
		protected Transform(); // 0x00C4138C-0x00C41394
	
		// Methods
		private Transform GetParent(); // 0x00C4211C-0x00C42188
		public void SetParent(Transform p); // 0x00C42188-0x00C42190
		[FreeFunction] // 0x003B0CAC-0x003B0CF4
		public void SetParent(Transform parent, bool worldPositionStays); // 0x00C42190-0x00C42214
		public void Translate(Vector3 translation, [UnityEngine.Internal.DefaultValue] /* 0x003B1DB8-0x003B1DF0 */ Space relativeTo); // 0x00C4238C-0x00C424B4
		public void Translate(Vector3 translation); // 0x00C42500-0x00C42508
		public void Translate(float x, float y, float z); // 0x00C42508-0x00C4251C
		public void Rotate(Vector3 eulers, [UnityEngine.Internal.DefaultValue] /* 0x003B1DF0-0x003B1E28 */ Space relativeTo); // 0x00C4251C-0x00C4275C
		public void Rotate(Vector3 eulers); // 0x00C4275C-0x00C42764
		[NativeMethod] // 0x003B0CF4-0x003B0D2C
		internal void RotateAroundInternal(Vector3 axis, float angle); // 0x00C42764-0x00C42790
		public void RotateAround(Vector3 point, Vector3 axis, float angle); // 0x00C4281C-0x00C429A8
		public Vector3 TransformDirection(Vector3 direction); // 0x00C424C4-0x00C42500
		public Vector3 TransformVector(Vector3 vector); // 0x00C42A3C-0x00C42A78
		public Vector3 TransformVector(float x, float y, float z); // 0x00C42AFC-0x00C42B00
		public Vector3 TransformPoint(Vector3 position); // 0x00C42B00-0x00C42B3C
		public Vector3 InverseTransformPoint(Vector3 position); // 0x00C42BC0-0x00C42BFC
		private Transform GetRoot(); // 0x00C42C84-0x00C42CF0
		public void SetAsFirstSibling(); // 0x00C42D5C-0x00C42DC8
		public int GetSiblingIndex(); // 0x00C42DC8-0x00C42E34
		[FreeFunction] // 0x003B0D9C-0x003B0DE4
		public bool IsChildOf([NotNull] /* 0x003B1E28-0x003B1E38 */ Transform parent); // 0x00C42ED8-0x00C42F4C
		public IEnumerator GetEnumerator(); // 0x00C42F4C-0x00C42FB8
		[FreeFunction] // 0x003B0DE4-0x003B0E40
		[NativeThrows] // 0x003B0DE4-0x003B0E40
		public Transform GetChild(int index); // 0x00C42FEC-0x00C43060
		private void get_position_Injected(out Vector3 ret); // 0x00C413C4-0x00C41438
		private void set_position_Injected(ref Vector3 value); // 0x00C41460-0x00C414D4
		private void get_localPosition_Injected(out Vector3 ret); // 0x00C41504-0x00C41578
		private void set_localPosition_Injected(ref Vector3 value); // 0x00C415A0-0x00C41614
		private void get_rotation_Injected(out Quaternion ret); // 0x00C41D50-0x00C41DC4
		private void set_rotation_Injected(ref Quaternion value); // 0x00C41DC4-0x00C41E38
		private void get_localRotation_Injected(out Quaternion ret); // 0x00C41E38-0x00C41EAC
		private void set_localRotation_Injected(ref Quaternion value); // 0x00C41EAC-0x00C41F20
		private void get_localScale_Injected(out Vector3 ret); // 0x00C41F50-0x00C41FC4
		private void set_localScale_Injected(ref Vector3 value); // 0x00C41FEC-0x00C42060
		private void get_worldToLocalMatrix_Injected(out Matrix4x4 ret); // 0x00C4225C-0x00C422D0
		private void get_localToWorldMatrix_Injected(out Matrix4x4 ret); // 0x00C42318-0x00C4238C
		private void RotateAroundInternal_Injected(ref Vector3 axis, float angle); // 0x00C42790-0x00C4281C
		private void TransformDirection_Injected(ref Vector3 direction, out Vector3 ret); // 0x00C429B8-0x00C42A3C
		private void TransformVector_Injected(ref Vector3 vector, out Vector3 ret); // 0x00C42A78-0x00C42AFC
		private void TransformPoint_Injected(ref Vector3 position, out Vector3 ret); // 0x00C42B3C-0x00C42BC0
		private void InverseTransformPoint_Injected(ref Vector3 position, out Vector3 ret); // 0x00C42BFC-0x00C42C80
		private void get_lossyScale_Injected(out Vector3 ret); // 0x00C42E64-0x00C42ED8
	}
}

namespace UnityEngine.Experimental.U2D
{
	[Serializable]
	[NativeHeader] // 0x003A9650-0x003A96C4
	[NativeType] // 0x003A9650-0x003A96C4
	[RequiredByNativeCode] // 0x003A9650-0x003A96C4
	public struct SpriteBone // TypeDefIndex: 2253
	{
		// Fields
		[NativeName] // 0x003AB6E4-0x003AB730
		[SerializeField] // 0x003AB6E4-0x003AB730
		private string m_Name; // 0x00
		[NativeName] // 0x003AB730-0x003AB77C
		[SerializeField] // 0x003AB730-0x003AB77C
		private Vector3 m_Position; // 0x08
		[NativeName] // 0x003AB77C-0x003AB7C8
		[SerializeField] // 0x003AB77C-0x003AB7C8
		private Quaternion m_Rotation; // 0x14
		[NativeName] // 0x003AB7C8-0x003AB814
		[SerializeField] // 0x003AB7C8-0x003AB814
		private float m_Length; // 0x24
		[NativeName] // 0x003AB814-0x003AB860
		[SerializeField] // 0x003AB814-0x003AB860
		private int m_ParentId; // 0x28
	}
}

namespace UnityEngine.Sprites
{
	public sealed class DataUtility // TypeDefIndex: 2254
	{
		// Methods
		public static Vector4 GetInnerUV(Sprite sprite); // 0x00C3B154-0x00C3B180
		public static Vector4 GetOuterUV(Sprite sprite); // 0x00C3B180-0x00C3B1AC
		public static Vector4 GetPadding(Sprite sprite); // 0x00C3B1AC-0x00C3B1D8
		public static Vector2 GetMinSize(Sprite sprite); // 0x00C3B1D8-0x00C3B294
	}
}

namespace UnityEngine
{
	[NativeType] // 0x003A96C4-0x003A974C
	[RequireComponent] // 0x003A96C4-0x003A974C
	public sealed class SpriteRenderer : Renderer // TypeDefIndex: 2255
	{
	}

	public enum SpritePackingMode // TypeDefIndex: 2256
	{
		Tight = 0,
		Rectangle = 1
	}

	[ExcludeFromPreset] // 0x003A974C-0x003A9804
	[NativeHeader] // 0x003A974C-0x003A9804
	[NativeHeader] // 0x003A974C-0x003A9804
	[NativeHeader] // 0x003A974C-0x003A9804
	[NativeType] // 0x003A974C-0x003A9804
	public sealed class Sprite : UnityEngine.Object // TypeDefIndex: 2257
	{
		// Properties
		public Bounds bounds { get; } // 0x008EA820-0x008EA860 
		public Rect rect { get; } // 0x008EA8D4-0x008EA900 
		public Vector4 border { get; } // 0x008EA974-0x008EA9A0 
		public Texture2D texture { get; } // 0x008EAA14-0x008EAA80 
		public float pixelsPerUnit { [NativeMethod] /* 0x003B0E50-0x003B0E88 */ get; } // 0x008EAA80-0x008EAAEC 
		public Texture2D associatedAlphaSplitTexture { [NativeMethod] /* 0x003B0E88-0x003B0EC0 */ get; } // 0x008EAAEC-0x008EAB58 
		public Vector2 pivot { [NativeMethod] /* 0x003B0EC0-0x003B0EF8 */ get; } // 0x008EAB58-0x008EAB80 
		public bool packed { get; } // 0x008EABF4-0x008EAC10 
		public SpritePackingMode packingMode { get; } // 0x008EAC10-0x008EAC14 
		public Rect textureRect { get; } // 0x008EAC14-0x008EAC80 
		public Vector2[] vertices { [FreeFunction] /* 0x003B0EF8-0x003B0F40 */ get; } // 0x008EAC80-0x008EACEC 
		public ushort[] triangles { [FreeFunction] /* 0x003B0F40-0x003B0F88 */ get; } // 0x008EACEC-0x008EAD58 
		public Vector2[] uv { [FreeFunction] /* 0x003B0F88-0x003B0FD0 */ get; } // 0x008EAD58-0x008EADC4 
	
		// Constructors
		[RequiredByNativeCode] // 0x003B0E40-0x003B0E50
		private Sprite(); // 0x008EA460-0x008EA4C8
	
		// Methods
		internal int GetPackingMode(); // 0x008EA4C8-0x008EA534
		internal int GetPacked(); // 0x008EA534-0x008EA5A0
		internal Rect GetTextureRect(); // 0x008EA5A0-0x008EA5CC
		internal Vector4 GetInnerUVs(); // 0x008EA640-0x008EA66C
		internal Vector4 GetOuterUVs(); // 0x008EA6E0-0x008EA70C
		internal Vector4 GetPadding(); // 0x008EA780-0x008EA7AC
		private void GetTextureRect_Injected(out Rect ret); // 0x008EA5CC-0x008EA640
		private void GetInnerUVs_Injected(out Vector4 ret); // 0x008EA66C-0x008EA6E0
		private void GetOuterUVs_Injected(out Vector4 ret); // 0x008EA70C-0x008EA780
		private void GetPadding_Injected(out Vector4 ret); // 0x008EA7AC-0x008EA820
		private void get_bounds_Injected(out Bounds ret); // 0x008EA860-0x008EA8D4
		private void get_rect_Injected(out Rect ret); // 0x008EA900-0x008EA974
		private void get_border_Injected(out Vector4 ret); // 0x008EA9A0-0x008EAA14
		private void get_pivot_Injected(out Vector2 ret); // 0x008EAB80-0x008EABF4
	}
}

namespace UnityEngine.U2D
{
	[NativeHeader] // 0x003A9804-0x003A988C
	[NativeHeader] // 0x003A9804-0x003A988C
	[StaticAccessor] // 0x003A9804-0x003A988C
	public class SpriteAtlasManager // TypeDefIndex: 2258
	{
		// Fields
		[CompilerGenerated] // 0x003AB860-0x003AB89C
		[DebuggerBrowsable] // 0x003AB860-0x003AB89C
		private static Action<string, Action<SpriteAtlas>> atlasRequested; // 0x00
		[CompilerGenerated] // 0x003AB89C-0x003AB8D8
		[DebuggerBrowsable] // 0x003AB89C-0x003AB8D8
		private static Action<SpriteAtlas> atlasRegistered; // 0x08
		[CompilerGenerated] // 0x003AB8D8-0x003AB8E8
		private static Action<SpriteAtlas> <>f__mg$cache0; // 0x10
	
		// Events
		public static event Action<SpriteAtlas> atlasRegistered {
			add; // 0x00C432A8-0x00C433E8
			remove; // 0x00C433E8-0x00C43528
		}
	
		// Constructors
		static SpriteAtlasManager(); // 0x00C43654-0x00C436B0
	
		// Methods
		[RequiredByNativeCode] // 0x003B0FD0-0x003B0FE0
		private static bool RequestAtlas(string tag); // 0x00C4315C-0x00C432A8
		[RequiredByNativeCode] // 0x003B0FE0-0x003B0FF0
		private static void PostRegisteredAtlas(SpriteAtlas spriteAtlas); // 0x00C43528-0x00C435E8
		internal static void Register(SpriteAtlas spriteAtlas); // 0x00C435E8-0x00C43654
	}

	[NativeHeader] // 0x003A988C-0x003A98F8
	[NativeType] // 0x003A988C-0x003A98F8
	public class SpriteAtlas : UnityEngine.Object // TypeDefIndex: 2259
	{
		// Methods
		public bool CanBindTo(Sprite sprite); // 0x00C430E8-0x00C4315C
	}
}

namespace UnityEngine
{
	[RequiredByNativeCode] // 0x003B3550-0x003B3560
	public class ControllerColliderHit // TypeDefIndex: 2261
	{
		// Fields
		internal CharacterController m_Controller; // 0x10
		internal Collider m_Collider; // 0x18
		internal Vector3 m_Point; // 0x20
		internal Vector3 m_Normal; // 0x2C
		internal Vector3 m_MoveDirection; // 0x38
		internal float m_MoveLength; // 0x44
		internal int m_Push; // 0x48
	
		// Properties
		public Vector3 point { get; } // 0x00C886BC-0x00C886C8 
	}

	[RequiredByNativeCode] // 0x003B3560-0x003B3570
	public class Collision // TypeDefIndex: 2262
	{
		// Fields
		internal Vector3 m_Impulse; // 0x10
		internal Vector3 m_RelativeVelocity; // 0x1C
		internal Rigidbody m_Rigidbody; // 0x28
		internal Collider m_Collider; // 0x30
		internal int m_ContactCount; // 0x38
		internal ContactPoint[] m_RecycledContacts; // 0x40
		internal ContactPoint[] m_LegacyContacts; // 0x48
	
		// Properties
		public GameObject gameObject { get; } // 0x00C885D4-0x00C886BC 
	}

	public enum CollisionFlags // TypeDefIndex: 2263
	{
		None = 0,
		Sides = 1,
		CollidedSides = 1,
		Above = 2,
		CollidedAbove = 2,
		Below = 4,
		CollidedBelow = 4
	}

	public enum QueryTriggerInteraction // TypeDefIndex: 2264
	{
		UseGlobal = 0,
		Ignore = 1,
		Collide = 2
	}

	[NativeHeader] // 0x003B3570-0x003B3604
	[NativeHeader] // 0x003B3570-0x003B3604
	[NativeHeader] // 0x003B3570-0x003B3604
	[UsedByNativeCode] // 0x003B3570-0x003B3604
	public struct RaycastHit // TypeDefIndex: 2265
	{
		// Fields
		[NativeName] // 0x003B3998-0x003B39D0
		internal Vector3 m_Point; // 0x00
		[NativeName] // 0x003B39D0-0x003B3A08
		internal Vector3 m_Normal; // 0x0C
		[NativeName] // 0x003B3A08-0x003B3A40
		internal uint m_FaceID; // 0x18
		[NativeName] // 0x003B3A40-0x003B3A78
		internal float m_Distance; // 0x1C
		[NativeName] // 0x003B3A78-0x003B3AB0
		internal Vector2 m_UV; // 0x20
		[NativeName] // 0x003B3AB0-0x003B3AE8
		internal int m_Collider; // 0x28
	
		// Properties
		public Collider collider { get; } // 0x00C89EDC-0x00C89EF0 
		public Vector3 point { get; } // 0x00C89EF0-0x00C89F08 
		public Vector3 normal { get; } // 0x00C89F08-0x00C89F1C 
		public float distance { get; } // 0x00C89F1C-0x00C8A0D4 
		public Transform transform { get; } // 0x00C8A0D4-0x00C8A0DC 
		public Rigidbody rigidbody { get; } // 0x00C8A0DC-0x00C8A0E4 
	}

	[NativeHeader] // 0x003B3604-0x003B368C
	[RequireComponent] // 0x003B3604-0x003B368C
	public class Rigidbody : Component // TypeDefIndex: 2266
	{
		// Properties
		public Vector3 velocity { get; set; } // 0x00C8A0EC-0x00C8A11C 0x00C8A190-0x00C8A1B8
		public Vector3 angularVelocity { get; set; } // 0x00C8A22C-0x00C8A25C 0x00C8A2D0-0x00C8A2F8
		public bool freezeRotation { set; } // 0x00C8A36C-0x00C8A3E0
		public Vector3 position { get; set; } // 0x00C8A3E0-0x00C8A410 0x00C8A484-0x00C8A4AC
		public Quaternion rotation { get; set; } // 0x00C8A520-0x00C8A54C 0x00C8A5C0-0x00C8A5E8
	
		// Constructors
		public Rigidbody(); // 0x00C8A0E4-0x00C8A0EC
	
		// Methods
		public void MovePosition(Vector3 position); // 0x00C8A65C-0x00C8A684
		public void MoveRotation(Quaternion rot); // 0x00C8A6F8-0x00C8A720
		private void get_velocity_Injected(out Vector3 ret); // 0x00C8A11C-0x00C8A190
		private void set_velocity_Injected(ref Vector3 value); // 0x00C8A1B8-0x00C8A22C
		private void get_angularVelocity_Injected(out Vector3 ret); // 0x00C8A25C-0x00C8A2D0
		private void set_angularVelocity_Injected(ref Vector3 value); // 0x00C8A2F8-0x00C8A36C
		private void get_position_Injected(out Vector3 ret); // 0x00C8A410-0x00C8A484
		private void set_position_Injected(ref Vector3 value); // 0x00C8A4AC-0x00C8A520
		private void get_rotation_Injected(out Quaternion ret); // 0x00C8A54C-0x00C8A5C0
		private void set_rotation_Injected(ref Quaternion value); // 0x00C8A5E8-0x00C8A65C
		private void MovePosition_Injected(ref Vector3 position); // 0x00C8A684-0x00C8A6F8
		private void MoveRotation_Injected(ref Quaternion rot); // 0x00C8A720-0x00C8A794
	}

	[NativeHeader] // 0x003B368C-0x003B3724
	[RequireComponent] // 0x003B368C-0x003B3724
	[RequiredByNativeCode] // 0x003B368C-0x003B3724
	public class Collider : Component // TypeDefIndex: 2267
	{
		// Properties
		public bool enabled { set; } // 0x00C88280-0x00C882F4
		public Rigidbody attachedRigidbody { [NativeMethod] /* 0x003B3AE8-0x003B3B20 */ get; } // 0x00C882F4-0x00C88360 
		public Bounds bounds { get; } // 0x00C88360-0x00C883A0 
	
		// Constructors
		public Collider(); // 0x00C88278-0x00C88280
	
		// Methods
		private RaycastHit Raycast(Ray ray, float maxDistance, ref bool hasHit); // 0x00C88414-0x00C88460
		public bool Raycast(Ray ray, out RaycastHit hitInfo, float maxDistance); // 0x00C88504-0x00C885D4
		private void get_bounds_Injected(out Bounds ret); // 0x00C883A0-0x00C88414
		private void Raycast_Injected(ref Ray ray, float maxDistance, ref bool hasHit, out RaycastHit ret); // 0x00C88460-0x00C88504
	}

	[NativeHeader] // 0x003B3724-0x003B375C
	public class CharacterController : Collider // TypeDefIndex: 2268
	{
		// Properties
		public Vector3 velocity { get; } // 0x00C88090-0x00C880C0 
		public float radius { get; } // 0x00C88134-0x00C881A0 
		public float height { get; } // 0x00C881A0-0x00C8820C 
		public float slopeLimit { get; } // 0x00C8820C-0x00C88278 
	
		// Methods
		public CollisionFlags Move(Vector3 motion); // 0x00C87FF4-0x00C8801C
		private CollisionFlags Move_Injected(ref Vector3 motion); // 0x00C8801C-0x00C88090
		private void get_velocity_Injected(out Vector3 ret); // 0x00C880C0-0x00C88134
	}

	[NativeHeader] // 0x003B375C-0x003B37CC
	[NativeHeader] // 0x003B375C-0x003B37CC
	[RequiredByNativeCode] // 0x003B375C-0x003B37CC
	public class MeshCollider : Collider // TypeDefIndex: 2269
	{
	}

	[NativeHeader] // 0x003B37CC-0x003B3818
	[RequiredByNativeCode] // 0x003B37CC-0x003B3818
	public class CapsuleCollider : Collider // TypeDefIndex: 2270
	{
	}

	[NativeHeader] // 0x003B3818-0x003B3864
	[RequiredByNativeCode] // 0x003B3818-0x003B3864
	public class BoxCollider : Collider // TypeDefIndex: 2271
	{
		// Properties
		public Vector3 size { set; } // 0x00C87F58-0x00C87F80
	
		// Methods
		private void set_size_Injected(ref Vector3 value); // 0x00C87F80-0x00C87FF4
	}

	[NativeHeader] // 0x003B3864-0x003B38B0
	[RequiredByNativeCode] // 0x003B3864-0x003B38B0
	public class SphereCollider : Collider // TypeDefIndex: 2272
	{
	}

	[NativeHeader] // 0x003B38B0-0x003B38FC
	[UsedByNativeCode] // 0x003B38B0-0x003B38FC
	public struct ContactPoint // TypeDefIndex: 2273
	{
		// Fields
		internal Vector3 m_Point; // 0x00
		internal Vector3 m_Normal; // 0x0C
		internal int m_ThisColliderInstanceID; // 0x18
		internal int m_OtherColliderInstanceID; // 0x1C
		internal float m_Separation; // 0x20
	}

	[NativeHeader] // 0x003B38FC-0x003B3934
	public struct PhysicsScene : IEquatable<PhysicsScene> // TypeDefIndex: 2274
	{
		// Fields
		private int m_Handle; // 0x00
	
		// Methods
		public override string ToString(); // 0x00C89BD4-0x00C89BDC
		public override int GetHashCode(); // 0x00C89BDC-0x00C89C6C
		public override bool Equals(object other); // 0x00C89C6C-0x00C89C74
		public bool Equals(PhysicsScene other); // 0x00C89C74-0x00C89C84
		public bool Raycast(Vector3 origin, Vector3 direction, [UnityEngine.Internal.DefaultValue] /* 0x003B3E40-0x003B3E78 */ float maxDistance = 1F / 0F /* Metadata: 0x0021ABAF */, [UnityEngine.Internal.DefaultValue] /* 0x003B3E78-0x003B3EB0 */ int layerMask = -5 /* Metadata: 0x0021ABB3 */, [UnityEngine.Internal.DefaultValue] /* 0x003B3EB0-0x003B3EE8 */ QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal /* Metadata: 0x0021ABB7 */); // 0x00C89CAC-0x00C89CB4
		[NativeName] // 0x003B3B20-0x003B3B84
		[StaticAccessor] // 0x003B3B20-0x003B3B84
		private static bool Internal_RaycastTest(PhysicsScene physicsScene, Ray ray, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction); // 0x00C89C84-0x00C89CAC
		public bool Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo, [UnityEngine.Internal.DefaultValue] /* 0x003B3EE8-0x003B3F20 */ float maxDistance = 1F / 0F /* Metadata: 0x0021ABBB */, [UnityEngine.Internal.DefaultValue] /* 0x003B3F20-0x003B3F58 */ int layerMask = -5 /* Metadata: 0x0021ABBF */, [UnityEngine.Internal.DefaultValue] /* 0x003B3F58-0x003B3F90 */ QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal /* Metadata: 0x0021ABC3 */); // 0x00C89D80-0x00C89D88
		[NativeName] // 0x003B3B84-0x003B3BE8
		[StaticAccessor] // 0x003B3B84-0x003B3BE8
		private static bool Internal_Raycast(PhysicsScene physicsScene, Ray ray, float maxDistance, ref RaycastHit hit, int layerMask, QueryTriggerInteraction queryTriggerInteraction); // 0x00C89D58-0x00C89D80
		private static bool Internal_RaycastTest_Injected(ref PhysicsScene physicsScene, ref Ray ray, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction); // 0x00C89CB4-0x00C89D58
		private static bool Internal_Raycast_Injected(ref PhysicsScene physicsScene, ref Ray ray, float maxDistance, ref RaycastHit hit, int layerMask, QueryTriggerInteraction queryTriggerInteraction); // 0x00C89D88-0x00C89EDC
	}

	[NativeHeader] // 0x003B3934-0x003B3998
	[StaticAccessor] // 0x003B3934-0x003B3998
	public class Physics // TypeDefIndex: 2275
	{
		// Properties
		public static Vector3 gravity { [ThreadSafe] /* 0x003B3BE8-0x003B3BF8 */ get; } // 0x00C886C8-0x00C886F8 
		[NativeProperty] // 0x003B4348-0x003B4380
		public static PhysicsScene defaultPhysicsScene { get; } // 0x00C88764-0x00C8878C 
	
		// Methods
		public static bool Raycast(Vector3 origin, Vector3 direction, [UnityEngine.Internal.DefaultValue] /* 0x003B3F90-0x003B3FC8 */ float maxDistance, [UnityEngine.Internal.DefaultValue] /* 0x003B3FC8-0x003B4000 */ int layerMask, [UnityEngine.Internal.DefaultValue] /* 0x003B4000-0x003B4038 */ QueryTriggerInteraction queryTriggerInteraction); // 0x00C887F8-0x00C889F8
		[ExcludeFromDocs] // 0x003B3BF8-0x003B3C08
		public static bool Raycast(Vector3 origin, Vector3 direction, float maxDistance, int layerMask); // 0x00C889F8-0x00C88A9C
		[ExcludeFromDocs] // 0x003B3C08-0x003B3C18
		public static bool Raycast(Vector3 origin, Vector3 direction, float maxDistance); // 0x00C88A9C-0x00C88B34
		[ExcludeFromDocs] // 0x003B3C18-0x003B3C28
		public static bool Raycast(Vector3 origin, Vector3 direction); // 0x00C88B34-0x00C88BC4
		public static bool Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction); // 0x00C88BC4-0x00C88DF0
		[ExcludeFromDocs] // 0x003B3C28-0x003B3C60
		[RequiredByNativeCode] // 0x003B3C28-0x003B3C60
		public static bool Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo, float maxDistance, int layerMask); // 0x00C88DF0-0x00C88E9C
		[ExcludeFromDocs] // 0x003B3C60-0x003B3C70
		public static bool Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo, float maxDistance); // 0x00C88E9C-0x00C88F44
		[ExcludeFromDocs] // 0x003B3C70-0x003B3C80
		public static bool Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo); // 0x00C88F44-0x00C88FE4
		public static bool Raycast(Ray ray, [UnityEngine.Internal.DefaultValue] /* 0x003B4038-0x003B4070 */ float maxDistance, [UnityEngine.Internal.DefaultValue] /* 0x003B4070-0x003B40A8 */ int layerMask, [UnityEngine.Internal.DefaultValue] /* 0x003B40A8-0x003B40E0 */ QueryTriggerInteraction queryTriggerInteraction); // 0x00C88FE4-0x00C89094
		[ExcludeFromDocs] // 0x003B3C80-0x003B3C90
		public static bool Raycast(Ray ray, float maxDistance, int layerMask); // 0x00C89094-0x00C89138
		[ExcludeFromDocs] // 0x003B3C90-0x003B3CA0
		public static bool Raycast(Ray ray, float maxDistance); // 0x00C89138-0x00C891D8
		[ExcludeFromDocs] // 0x003B3CA0-0x003B3CB0
		public static bool Raycast(Ray ray); // 0x00C891D8-0x00C89278
		public static bool Raycast(Ray ray, out RaycastHit hitInfo, [UnityEngine.Internal.DefaultValue] /* 0x003B40E0-0x003B4118 */ float maxDistance, [UnityEngine.Internal.DefaultValue] /* 0x003B4118-0x003B4150 */ int layerMask, [UnityEngine.Internal.DefaultValue] /* 0x003B4150-0x003B4188 */ QueryTriggerInteraction queryTriggerInteraction); // 0x00C89278-0x00C89330
		[ExcludeFromDocs] // 0x003B3CB0-0x003B3CC0
		public static bool Raycast(Ray ray, out RaycastHit hitInfo, float maxDistance, int layerMask); // 0x00C89330-0x00C893E4
		[ExcludeFromDocs] // 0x003B3CC0-0x003B3CD0
		public static bool Raycast(Ray ray, out RaycastHit hitInfo, float maxDistance); // 0x00C893E4-0x00C8948C
		[ExcludeFromDocs] // 0x003B3CD0-0x003B3CE0
		public static bool Raycast(Ray ray, out RaycastHit hitInfo); // 0x00C8948C-0x00C89534
		[NativeName] // 0x003B3CE0-0x003B3D44
		[StaticAccessor] // 0x003B3CE0-0x003B3D44
		private static RaycastHit[] Internal_RaycastAll(PhysicsScene physicsScene, Ray ray, float maxDistance, int mask, QueryTriggerInteraction queryTriggerInteraction); // 0x00C89534-0x00C89558
		public static RaycastHit[] RaycastAll(Vector3 origin, Vector3 direction, [UnityEngine.Internal.DefaultValue] /* 0x003B4188-0x003B41C0 */ float maxDistance, [UnityEngine.Internal.DefaultValue] /* 0x003B41C0-0x003B41F8 */ int layerMask, [UnityEngine.Internal.DefaultValue] /* 0x003B41F8-0x003B4230 */ QueryTriggerInteraction queryTriggerInteraction); // 0x00C895FC-0x00C89768
		[ExcludeFromDocs] // 0x003B3D44-0x003B3D54
		public static RaycastHit[] RaycastAll(Vector3 origin, Vector3 direction, float maxDistance, int layerMask); // 0x00C89768-0x00C89770
		[ExcludeFromDocs] // 0x003B3D54-0x003B3D64
		public static RaycastHit[] RaycastAll(Vector3 origin, Vector3 direction, float maxDistance); // 0x00C89770-0x00C8977C
		[ExcludeFromDocs] // 0x003B3D64-0x003B3D74
		public static RaycastHit[] RaycastAll(Vector3 origin, Vector3 direction); // 0x00C8977C-0x00C89790
		public static RaycastHit[] RaycastAll(Ray ray, [UnityEngine.Internal.DefaultValue] /* 0x003B4230-0x003B4268 */ float maxDistance, [UnityEngine.Internal.DefaultValue] /* 0x003B4268-0x003B42A0 */ int layerMask, [UnityEngine.Internal.DefaultValue] /* 0x003B42A0-0x003B42D8 */ QueryTriggerInteraction queryTriggerInteraction); // 0x00C89790-0x00C89814
		[ExcludeFromDocs] // 0x003B3D74-0x003B3DAC
		[RequiredByNativeCode] // 0x003B3D74-0x003B3DAC
		public static RaycastHit[] RaycastAll(Ray ray, float maxDistance, int layerMask); // 0x00C89814-0x00C8988C
		[ExcludeFromDocs] // 0x003B3DAC-0x003B3DBC
		public static RaycastHit[] RaycastAll(Ray ray, float maxDistance); // 0x00C8988C-0x00C89900
		[ExcludeFromDocs] // 0x003B3DBC-0x003B3DCC
		public static RaycastHit[] RaycastAll(Ray ray); // 0x00C89900-0x00C89974
		[NativeName] // 0x003B3DCC-0x003B3E30
		[StaticAccessor] // 0x003B3DCC-0x003B3E30
		private static Collider[] OverlapSphere_Internal(PhysicsScene physicsScene, Vector3 position, float radius, int layerMask, QueryTriggerInteraction queryTriggerInteraction); // 0x00C89974-0x00C899B8
		public static Collider[] OverlapSphere(Vector3 position, float radius, [UnityEngine.Internal.DefaultValue] /* 0x003B42D8-0x003B4310 */ int layerMask, [UnityEngine.Internal.DefaultValue] /* 0x003B4310-0x003B4348 */ QueryTriggerInteraction queryTriggerInteraction); // 0x00C89A5C-0x00C89AD8
		[ExcludeFromDocs] // 0x003B3E30-0x003B3E40
		public static Collider[] OverlapSphere(Vector3 position, float radius); // 0x00C89AD8-0x00C89BD4
		private static void get_gravity_Injected(out Vector3 ret); // 0x00C886F8-0x00C88764
		private static void get_defaultPhysicsScene_Injected(out PhysicsScene ret); // 0x00C8878C-0x00C887F8
		private static RaycastHit[] Internal_RaycastAll_Injected(ref PhysicsScene physicsScene, ref Ray ray, float maxDistance, int mask, QueryTriggerInteraction queryTriggerInteraction); // 0x00C89558-0x00C895FC
		private static Collider[] OverlapSphere_Internal_Injected(ref PhysicsScene physicsScene, ref Vector3 position, float radius, int layerMask, QueryTriggerInteraction queryTriggerInteraction); // 0x00C899B8-0x00C89A5C
	}
}

namespace UnityEngine.Analytics
{
	[NativeHeader] // 0x003B5490-0x003B5500
	[NativeHeader] // 0x003B5490-0x003B5500
	[RequiredByNativeCode] // 0x003B5490-0x003B5500
	internal class ContinuousEvent // TypeDefIndex: 2277
	{
	}

	[RequiredByNativeCode] // 0x003B5500-0x003B5510
	public enum AnalyticsSessionState // TypeDefIndex: 2278
	{
		kSessionStopped = 0,
		kSessionStarted = 1,
		kSessionPaused = 2,
		kSessionResumed = 3
	}

	[NativeHeader] // 0x003B5510-0x003B5580
	[NativeHeader] // 0x003B5510-0x003B5580
	[RequiredByNativeCode] // 0x003B5510-0x003B5580
	public static class AnalyticsSessionInfo // TypeDefIndex: 2279
	{
		// Fields
		[CompilerGenerated] // 0x003B56B0-0x003B56EC
		[DebuggerBrowsable] // 0x003B56B0-0x003B56EC
		private static SessionStateChanged sessionStateChanged; // 0x00
	
		// Nested types
		public delegate void SessionStateChanged(AnalyticsSessionState sessionState, long sessionId, long sessionElapsedTime, bool sessionChanged); // TypeDefIndex: 2280; 0x00C95318-0x00C95808
	
		// Methods
		[RequiredByNativeCode] // 0x003B57DC-0x003B57EC
		internal static void CallSessionStateChanged(AnalyticsSessionState sessionState, long sessionId, long sessionElapsedTime, bool sessionChanged); // 0x00C95280-0x00C95318
	}

	[NativeHeader] // 0x003B5580-0x003B55E0
	[NativeHeader] // 0x003B5580-0x003B55E0
	public static class Analytics // TypeDefIndex: 2281
	{
		// Methods
		[ThreadSafe] // 0x003B57EC-0x003B57FC
		private static bool IsInitialized(); // 0x00C94E40-0x00C94E98
		[StaticAccessor] // 0x003B57FC-0x003B5838
		internal static AnalyticsResult RegisterEventWithLimit(string eventName, int maxEventPerHour, int maxItems, string vendorKey, int ver, string prefix, string assemblyInfo, bool notifyServer); // 0x00C94E98-0x00C94F54
		[StaticAccessor] // 0x003B5838-0x003B5888
		[ThreadSafe] // 0x003B5838-0x003B5888
		internal static AnalyticsResult SendEventWithLimit(string eventName, object parameters, int ver, string prefix); // 0x00C94F54-0x00C94FE0
		public static AnalyticsResult RegisterEvent(string eventName, int maxEventPerHour, int maxItems, string vendorKey = "" /* Metadata: 0x0021ABD7 */, string prefix = "" /* Metadata: 0x0021ABDB */); // 0x00C94FE0-0x00C95080
		private static AnalyticsResult RegisterEvent(string eventName, int maxEventPerHour, int maxItems, string vendorKey, int ver, string prefix, string assemblyInfo); // 0x00C95080-0x00C95180
		public static AnalyticsResult SendEvent(string eventName, object parameters, int ver = 1 /* Metadata: 0x0021ABDF */, string prefix = "" /* Metadata: 0x0021ABE3 */); // 0x00C95180-0x00C95280
	}

	public enum AnalyticsResult // TypeDefIndex: 2282
	{
		Ok = 0,
		NotInitialized = 1,
		AnalyticsDisabled = 2,
		TooManyItems = 3,
		SizeLimitReached = 4,
		TooManyRequests = 5,
		InvalidData = 6,
		UnsupportedPlatform = 7
	}
}

namespace UnityEngine
{
	[NativeHeader] // 0x003B55E0-0x003B5640
	[NativeHeader] // 0x003B55E0-0x003B5640
	public static class RemoteSettings // TypeDefIndex: 2283
	{
		// Fields
		[CompilerGenerated] // 0x003B56EC-0x003B5728
		[DebuggerBrowsable] // 0x003B56EC-0x003B5728
		private static UpdatedEventHandler Updated; // 0x00
		[CompilerGenerated] // 0x003B5728-0x003B5764
		[DebuggerBrowsable] // 0x003B5728-0x003B5764
		private static Action BeforeFetchFromServer; // 0x08
		[CompilerGenerated] // 0x003B5764-0x003B57A0
		[DebuggerBrowsable] // 0x003B5764-0x003B57A0
		private static Action<bool, bool, int> Completed; // 0x10
	
		// Nested types
		public delegate void UpdatedEventHandler(); // TypeDefIndex: 2284; 0x00C95C3C-0x00C9603C
	
		// Methods
		[RequiredByNativeCode] // 0x003B5888-0x003B5898
		internal static void RemoteSettingsUpdated(bool wasLastUpdatedFromServer); // 0x00C95BDC-0x00C95C3C
		[RequiredByNativeCode] // 0x003B5898-0x003B58A8
		internal static void RemoteSettingsBeforeFetchFromServer(); // 0x00C9603C-0x00C960A0
		[RequiredByNativeCode] // 0x003B58A8-0x003B58B8
		internal static void RemoteSettingsUpdateCompleted(bool wasLastUpdatedFromServer, bool settingsChanged, int response); // 0x00C960A0-0x00C9613C
	}

	[ExcludeFromDocs] // 0x003B5640-0x003B56B0
	[NativeHeader] // 0x003B5640-0x003B56B0
	[NativeHeader] // 0x003B5640-0x003B56B0
	public class RemoteConfigSettings : IDisposable // TypeDefIndex: 2285
	{
		// Fields
		[NonSerialized]
		internal IntPtr m_Ptr; // 0x10
		[CompilerGenerated] // 0x003B57A0-0x003B57DC
		[DebuggerBrowsable] // 0x003B57A0-0x003B57DC
		private Action<bool> Updated; // 0x18
	
		// Methods
		~RemoteConfigSettings(); // 0x00C959AC-0x00C95A20
		private void Destroy(); // 0x00C95A20-0x00C95A80
		public void Dispose(); // 0x00C95AEC-0x00C95B5C
		[ThreadSafe] // 0x003B58B8-0x003B58C8
		internal static void Internal_Destroy(IntPtr ptr); // 0x00C95A80-0x00C95AEC
		[RequiredByNativeCode] // 0x003B58C8-0x003B58D8
		internal static void RemoteConfigSettingsUpdated(RemoteConfigSettings rcs, bool wasLastUpdatedFromServer); // 0x00C95B5C-0x00C95BDC
	}

	internal class AudioExtensionDefinition // TypeDefIndex: 2287
	{
		// Fields
		private string assemblyName; // 0x10
		private string extensionNamespace; // 0x18
		private string extensionTypeName; // 0x20
		private Type extensionType; // 0x28
	
		// Methods
		public Type GetExtensionType(); // 0x00C75C28-0x00C75E80
	}

	internal class AudioSpatializerExtensionDefinition // TypeDefIndex: 2288
	{
		// Fields
		public PropertyName spatializerName; // 0x10
		public AudioExtensionDefinition definition; // 0x18
	}

	internal class AudioAmbisonicExtensionDefinition // TypeDefIndex: 2289
	{
		// Fields
		public PropertyName ambisonicPluginName; // 0x10
		public AudioExtensionDefinition definition; // 0x18
	}

	internal class AudioListenerExtension : ScriptableObject // TypeDefIndex: 2290
	{
		// Fields
		[SerializeField] // 0x003B6DA0-0x003B6DB0
		private AudioListener m_audioListener; // 0x18
	
		// Properties
		public AudioListener audioListener { get; set; } // 0x00C770E0-0x00C770E8 0x00C76ECC-0x00C76ED4
	
		// Constructors
		public AudioListenerExtension(); // 0x00C77E40-0x00C77E48
	
		// Methods
		public virtual float ReadExtensionProperty(PropertyName propertyName); // 0x00C77E48-0x00C77E50
		public virtual void WriteExtensionProperty(PropertyName propertyName, float propertyValue); // 0x00C77E50-0x00C77E54
		public virtual void ExtensionUpdate(); // 0x00C77E54-0x00C77E58
	}

	internal class AudioSourceExtension : ScriptableObject // TypeDefIndex: 2291
	{
		// Fields
		[SerializeField] // 0x003B6DB0-0x003B6DC0
		private AudioSource m_audioSource; // 0x18
		internal int m_ExtensionManagerUpdateIndex; // 0x20
	
		// Properties
		public AudioSource audioSource { get; set; } // 0x00C76968-0x00C76970 0x00C76390-0x00C76398
	
		// Constructors
		public AudioSourceExtension(); // 0x00C78C28-0x00C78C38
	
		// Methods
		public virtual float ReadExtensionProperty(PropertyName propertyName); // 0x00C78C38-0x00C78C40
		public virtual void WriteExtensionProperty(PropertyName propertyName, float propertyValue); // 0x00C78C40-0x00C78C44
		public virtual void Play(); // 0x00C78C44-0x00C78C48
		public virtual void Stop(); // 0x00C78C48-0x00C78C4C
		public virtual void ExtensionUpdate(); // 0x00C78C4C-0x00C78C50
		public void OnDestroy(); // 0x00C78C50-0x00C78DB0
	}

	internal sealed class AudioExtensionManager // TypeDefIndex: 2292
	{
		// Fields
		private static List<AudioSpatializerExtensionDefinition> m_ListenerSpatializerExtensionDefinitions; // 0x00
		private static List<AudioSpatializerExtensionDefinition> m_SourceSpatializerExtensionDefinitions; // 0x08
		private static List<AudioAmbisonicExtensionDefinition> m_SourceAmbisonicDecoderExtensionDefinitions; // 0x10
		private static List<AudioSourceExtension> m_SourceExtensionsToUpdate; // 0x18
		private static int m_NextStopIndex; // 0x20
		private static bool m_BuiltinDefinitionsRegistered; // 0x24
		private static PropertyName m_SpatializerName; // 0x28
		private static PropertyName m_SpatializerExtensionName; // 0x2C
		private static PropertyName m_ListenerSpatializerExtensionName; // 0x30
	
		// Constructors
		static AudioExtensionManager(); // 0x00C77B70-0x00C77CC4
	
		// Methods
		internal static AudioSourceExtension AddSpatializerExtension(AudioSource source); // 0x00C75E80-0x00C7619C
		internal static AudioSourceExtension AddAmbisonicDecoderExtension(AudioSource source); // 0x00C765A4-0x00C76834
		internal static void WriteExtensionProperties(AudioSourceExtension extension, string extensionName); // 0x00C76398-0x00C765A4
		internal static AudioListenerExtension AddSpatializerExtension(AudioListener listener); // 0x00C76AC4-0x00C76DF0
		internal static void WriteExtensionProperties(AudioListenerExtension extension, string extensionName); // 0x00C76ED4-0x00C770E0
		internal static void AddExtensionToManager(AudioSourceExtension extension); // 0x00C7723C-0x00C7733C
		internal static void RemoveExtensionFromManager(AudioSourceExtension extension); // 0x00C7733C-0x00C77524
		internal static void Update(); // 0x00C77524-0x00C779EC
		internal static void GetReadyToPlay(AudioSourceExtension extension); // 0x00C77AB0-0x00C77B70
		private static void RegisterBuiltinDefinitions(); // 0x00C761A0-0x00C7625C
		[GeneratedByOldBindingsGenerator] // 0x003B7018-0x003B7028
		internal static UnityEngine.Object GetAudioListener(); // 0x00C779EC-0x00C77A44
	}
}

namespace UnityEngine.Audio
{
	[NativeHeader] // 0x003B69D8-0x003B6A94
	[NativeHeader] // 0x003B69D8-0x003B6A94
	[NativeHeader] // 0x003B69D8-0x003B6A94
	[RequiredByNativeCode] // 0x003B69D8-0x003B6A94
	[StaticAccessor] // 0x003B69D8-0x003B6A94
	public struct AudioPlayableOutput : IPlayableOutput // TypeDefIndex: 2293
	{
		// Fields
		private PlayableOutputHandle m_Handle; // 0x00
	}

	[NativeHeader] // 0x003B6A94-0x003B6B50
	[NativeHeader] // 0x003B6A94-0x003B6B50
	[NativeHeader] // 0x003B6A94-0x003B6B50
	[RequiredByNativeCode] // 0x003B6A94-0x003B6B50
	[StaticAccessor] // 0x003B6A94-0x003B6B50
	public struct AudioClipPlayable : IPlayable, IEquatable<AudioClipPlayable> // TypeDefIndex: 2294
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
	
		// Methods
		public PlayableHandle GetHandle(); // 0x00C74D74-0x00C74E08
		public bool Equals(AudioClipPlayable other); // 0x00C74E08-0x00C74E10
	}

	[NativeHeader] // 0x003B6B50-0x003B6C0C
	[NativeHeader] // 0x003B6B50-0x003B6C0C
	[NativeHeader] // 0x003B6B50-0x003B6C0C
	[RequiredByNativeCode] // 0x003B6B50-0x003B6C0C
	[StaticAccessor] // 0x003B6B50-0x003B6C0C
	public struct AudioMixerPlayable : IPlayable, IEquatable<AudioMixerPlayable> // TypeDefIndex: 2295
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
	
		// Methods
		public PlayableHandle GetHandle(); // 0x00C74E10-0x00C74EA4
		public bool Equals(AudioMixerPlayable other); // 0x00C74EA4-0x00C74EAC
	}
}

namespace UnityEngine.Experimental.Audio
{
	[NativeType] // 0x003B6C0C-0x003B6C7C
	[StaticAccessor] // 0x003B6C0C-0x003B6C7C
	public class AudioSampleProvider : IDisposable // TypeDefIndex: 2296
	{
		// Fields
		private ConsumeSampleFramesNativeFunction m_ConsumeSampleFramesNativeFunction; // 0x10
		[CompilerGenerated] // 0x003B6DC0-0x003B6DFC
		[DebuggerBrowsable] // 0x003B6DC0-0x003B6DFC
		private uint <id>k__BackingField; // 0x18
		[CompilerGenerated] // 0x003B6DFC-0x003B6E38
		[DebuggerBrowsable] // 0x003B6DFC-0x003B6E38
		private ushort <trackIndex>k__BackingField; // 0x1C
		[CompilerGenerated] // 0x003B6E38-0x003B6E74
		[DebuggerBrowsable] // 0x003B6E38-0x003B6E74
		private UnityEngine.Object <owner>k__BackingField; // 0x20
		[CompilerGenerated] // 0x003B6E74-0x003B6EB0
		[DebuggerBrowsable] // 0x003B6E74-0x003B6EB0
		private ushort <channelCount>k__BackingField; // 0x28
		[CompilerGenerated] // 0x003B6EB0-0x003B6EEC
		[DebuggerBrowsable] // 0x003B6EB0-0x003B6EEC
		private uint <sampleRate>k__BackingField; // 0x2C
		[CompilerGenerated] // 0x003B6EEC-0x003B6F28
		[DebuggerBrowsable] // 0x003B6EEC-0x003B6F28
		private SampleFramesHandler sampleFramesAvailable; // 0x30
		[CompilerGenerated] // 0x003B6F28-0x003B6F64
		[DebuggerBrowsable] // 0x003B6F28-0x003B6F64
		private SampleFramesHandler sampleFramesOverflow; // 0x38
	
		// Properties
		public uint id { [CompilerGenerated] /* 0x003B7028-0x003B7038 */ get; [CompilerGenerated] /* 0x003B7038-0x003B7048 */ private set; } // 0x00C78EAC-0x00C78EB4 0x00C78F28-0x00C78F30
	
		// Nested types
		[UnmanagedFunctionPointer] // 0x003B6C7C-0x003B6C90
		public delegate uint ConsumeSampleFramesNativeFunction(uint providerId, IntPtr interleavedSampleFrames, uint sampleFrameCount); // TypeDefIndex: 2297; 0x00C79718-0x00C79BD0
	
		public delegate void SampleFramesHandler(AudioSampleProvider provider, uint sampleFrameCount); // TypeDefIndex: 2298; 0x00C78F50-0x00C796D0
	
		// Methods
		~AudioSampleProvider(); // 0x00C78DB0-0x00C78E30
		public void Dispose(); // 0x00C78E30-0x00C78EAC
		[RequiredByNativeCode] // 0x003B7048-0x003B7058
		private void InvokeSampleFramesAvailable(int sampleFrameCount); // 0x00C78F30-0x00C78F50
		[RequiredByNativeCode] // 0x003B7058-0x003B7068
		private void InvokeSampleFramesOverflow(int droppedSampleFrameCount); // 0x00C796D0-0x00C79708
		[NativeMethod] // 0x003B7068-0x003B70A0
		private static void InternalSetScriptingPtr(uint providerId, AudioSampleProvider provider); // 0x00C78EB4-0x00C78F28
	}
}

namespace UnityEngine
{
	public enum WebCamKind // TypeDefIndex: 2299
	{
		WideAngle = 1,
		Telephoto = 2,
		ColorAndDepth = 3
	}

	[UsedByNativeCode] // 0x003B6C90-0x003B6CA0
	public struct WebCamDevice // TypeDefIndex: 2300
	{
		// Fields
		internal string m_Name; // 0x00
		internal string m_DepthCameraName; // 0x08
		internal int m_Flags; // 0x10
		internal WebCamKind m_Kind; // 0x14
		internal Resolution[] m_Resolutions; // 0x18
	
		// Properties
		public string name { get; } // 0x00C79F98-0x00C79FA0 
	}

	[NativeHeader] // 0x003B6CA0-0x003B6CD8
	public sealed class WebCamTexture : Texture // TypeDefIndex: 2301
	{
		// Properties
		public bool isPlaying { [GeneratedByOldBindingsGenerator] /* 0x003B70D0-0x003B70E0 */ get; } // 0x00C7A184-0x00C7A1F0 
		public string deviceName { [GeneratedByOldBindingsGenerator] /* 0x003B70E0-0x003B70F0 */ set; } // 0x00C7A1F0-0x00C7A264
		public float requestedFPS { [GeneratedByOldBindingsGenerator] /* 0x003B70F0-0x003B7100 */ set; } // 0x00C7A264-0x00C7A2D8
		public int requestedWidth { [GeneratedByOldBindingsGenerator] /* 0x003B7100-0x003B7110 */ set; } // 0x00C7A2D8-0x00C7A34C
		public int requestedHeight { [GeneratedByOldBindingsGenerator] /* 0x003B7110-0x003B7120 */ set; } // 0x00C7A34C-0x00C7A3C0
		public static WebCamDevice[] devices { [GeneratedByOldBindingsGenerator] /* 0x003B7120-0x003B7130 */ get; } // 0x00C7A3C0-0x00C7A418 
		public bool didUpdateThisFrame { [GeneratedByOldBindingsGenerator] /* 0x003B7130-0x003B7140 */ get; } // 0x00C7A418-0x00C7A4D0 
	
		// Constructors
		public WebCamTexture(); // 0x00C79FA0-0x00C7A008
	
		// Methods
		[GeneratedByOldBindingsGenerator] // 0x003B70A0-0x003B70B0
		private static void Internal_CreateWebCamTexture([Writable] /* 0x003B7330-0x003B7340 */ WebCamTexture self, string scriptingDevice, int requestedWidth, int requestedHeight, int maxFramerate); // 0x00C7A008-0x00C7A0A4
		public void Play(); // 0x00C7A0A4-0x00C7A0A8
		[GeneratedByOldBindingsGenerator] // 0x003B70B0-0x003B70C0
		private static void INTERNAL_CALL_Play(WebCamTexture self); // 0x00C7A0A8-0x00C7A114
		public void Stop(); // 0x00C7A114-0x00C7A118
		[GeneratedByOldBindingsGenerator] // 0x003B70C0-0x003B70D0
		private static void INTERNAL_CALL_Stop(WebCamTexture self); // 0x00C7A118-0x00C7A184
	}

	public sealed class AudioSettings // TypeDefIndex: 2302
	{
		// Fields
		[CompilerGenerated] // 0x003B6F64-0x003B6FA0
		[DebuggerBrowsable] // 0x003B6F64-0x003B6FA0
		private static AudioConfigurationChangeHandler OnAudioConfigurationChanged; // 0x00
	
		// Nested types
		public delegate void AudioConfigurationChangeHandler(bool deviceWasChanged); // TypeDefIndex: 2303; 0x00C77EC0-0x00C78300
	
		// Methods
		[GeneratedByOldBindingsGenerator] // 0x003B7140-0x003B7150
		public static string GetSpatializerPluginName(); // 0x00C7625C-0x00C762B4
		[RequiredByNativeCode] // 0x003B7150-0x003B7160
		internal static void InvokeOnAudioConfigurationChanged(bool deviceWasChanged); // 0x00C77E58-0x00C77EC0
		[RequiredByNativeCode] // 0x003B7160-0x003B7170
		internal static void InvokeOnAudioManagerUpdate(); // 0x00C78300-0x00C7835C
		[RequiredByNativeCode] // 0x003B7170-0x003B7180
		internal static void InvokeOnAudioSourcePlay(AudioSource source); // 0x00C7835C-0x00C7851C
		[GeneratedByOldBindingsGenerator] // 0x003B7180-0x003B7190
		internal static string GetAmbisonicDecoderPluginName(); // 0x00C76834-0x00C7688C
	}

	public sealed class AudioClip : UnityEngine.Object // TypeDefIndex: 2304
	{
		// Fields
		[CompilerGenerated] // 0x003B6FA0-0x003B6FDC
		[DebuggerBrowsable] // 0x003B6FA0-0x003B6FDC
		private PCMReaderCallback m_PCMReaderCallback; // 0x18
		[CompilerGenerated] // 0x003B6FDC-0x003B7018
		[DebuggerBrowsable] // 0x003B6FDC-0x003B7018
		private PCMSetPositionCallback m_PCMSetPositionCallback; // 0x20
	
		// Properties
		public bool ambisonic { [GeneratedByOldBindingsGenerator] /* 0x003B7190-0x003B71A0 */ get; } // 0x00C74F18-0x00C74F84 
	
		// Nested types
		public delegate void PCMReaderCallback(float[] data); // TypeDefIndex: 2305; 0x00C74F94-0x00C756C8
	
		public delegate void PCMSetPositionCallback(int position); // TypeDefIndex: 2306; 0x00C756D8-0x00C75B30
	
		// Constructors
		private AudioClip(); // 0x00C74EAC-0x00C74F18
	
		// Methods
		[RequiredByNativeCode] // 0x003B71A0-0x003B71B0
		private void InvokePCMReaderCallback_Internal(float[] data); // 0x00C74F84-0x00C74F94
		[RequiredByNativeCode] // 0x003B71B0-0x003B71C0
		private void InvokePCMSetPositionCallback_Internal(int position); // 0x00C756C8-0x00C756D8
	}

	public class AudioBehaviour : Behaviour // TypeDefIndex: 2307
	{
	}

	[RequireComponent] // 0x003B6CD8-0x003B6D3C
	public sealed class AudioListener : AudioBehaviour // TypeDefIndex: 2308
	{
		// Fields
		internal AudioListenerExtension spatializerExtension; // 0x18
	
		// Methods
		[GeneratedByOldBindingsGenerator] // 0x003B71C0-0x003B71D0
		internal int GetNumExtensionProperties(); // 0x00C771AC-0x00C77218
		internal PropertyName ReadExtensionName(int listenerIndex); // 0x00C770E8-0x00C77110
		[GeneratedByOldBindingsGenerator] // 0x003B71D0-0x003B71E0
		private static void INTERNAL_CALL_ReadExtensionName(AudioListener self, int listenerIndex, out PropertyName value); // 0x00C77CC4-0x00C77D48
		internal PropertyName ReadExtensionPropertyName(int listenerIndex); // 0x00C77110-0x00C77138
		[GeneratedByOldBindingsGenerator] // 0x003B71E0-0x003B71F0
		private static void INTERNAL_CALL_ReadExtensionPropertyName(AudioListener self, int listenerIndex, out PropertyName value); // 0x00C77D48-0x00C77DCC
		[GeneratedByOldBindingsGenerator] // 0x003B71F0-0x003B7200
		internal float ReadExtensionPropertyValue(int listenerIndex); // 0x00C77138-0x00C771AC
		internal void ClearExtensionProperties(PropertyName extensionName); // 0x00C77218-0x00C7723C
		[GeneratedByOldBindingsGenerator] // 0x003B7200-0x003B7210
		private static void INTERNAL_CALL_ClearExtensionProperties(AudioListener self, ref PropertyName extensionName); // 0x00C77DCC-0x00C77E40
		internal AudioListenerExtension AddExtension(Type extensionType); // 0x00C76DF0-0x00C76ECC
	}

	[RequireComponent] // 0x003B6D3C-0x003B6DA0
	public sealed class AudioSource : AudioBehaviour // TypeDefIndex: 2309
	{
		// Fields
		internal AudioSourceExtension spatializerExtension; // 0x18
		internal AudioSourceExtension ambisonicExtension; // 0x20
	
		// Properties
		public float volume { [GeneratedByOldBindingsGenerator] /* 0x003B7210-0x003B7220 */ get; [GeneratedByOldBindingsGenerator] /* 0x003B7220-0x003B7230 */ set; } // 0x00C78644-0x00C786B0 0x00C786B0-0x00C78724
		public float pitch { [GeneratedByOldBindingsGenerator] /* 0x003B7230-0x003B7240 */ get; [GeneratedByOldBindingsGenerator] /* 0x003B7240-0x003B7250 */ set; } // 0x00C78724-0x00C78790 0x00C78790-0x00C78804
		[ThreadAndSerializationSafe] // 0x003B7378-0x003B7388
		public int timeSamples { [GeneratedByOldBindingsGenerator] /* 0x003B7250-0x003B7260 */ get; [GeneratedByOldBindingsGenerator] /* 0x003B7260-0x003B7270 */ set; } // 0x00C78804-0x00C78870 0x00C78870-0x00C788E4
		[ThreadAndSerializationSafe] // 0x003B7388-0x003B7398
		public AudioClip clip { [GeneratedByOldBindingsGenerator] /* 0x003B7270-0x003B7280 */ get; [GeneratedByOldBindingsGenerator] /* 0x003B7280-0x003B7290 */ set; } // 0x00C7851C-0x00C78598 0x00C788E4-0x00C78958
		public bool isPlaying { [GeneratedByOldBindingsGenerator] /* 0x003B72C0-0x003B72D0 */ get; } // 0x00C77A44-0x00C77AB0 
		internal bool spatializeInternal { [GeneratedByOldBindingsGenerator] /* 0x003B72D0-0x003B72E0 */ get; } // 0x00C78A40-0x00C78AAC 
		public bool spatialize { get; } // 0x00C7619C-0x00C761A0 
	
		// Methods
		[GeneratedByOldBindingsGenerator] // 0x003B7290-0x003B72A0
		public void Play([UnityEngine.Internal.DefaultValue] /* 0x003B7340-0x003B7378 */ ulong delay); // 0x00C78958-0x00C789CC
		[ExcludeFromDocs] // 0x003B72A0-0x003B72B0
		public void Play(); // 0x00C789CC-0x00C789D4
		[GeneratedByOldBindingsGenerator] // 0x003B72B0-0x003B72C0
		public void Stop(); // 0x00C789D4-0x00C78A40
		[GeneratedByOldBindingsGenerator] // 0x003B72E0-0x003B72F0
		internal int GetNumExtensionProperties(); // 0x00C76A34-0x00C76AA0
		internal PropertyName ReadExtensionName(int sourceIndex); // 0x00C76970-0x00C76998
		[GeneratedByOldBindingsGenerator] // 0x003B72F0-0x003B7300
		private static void INTERNAL_CALL_ReadExtensionName(AudioSource self, int sourceIndex, out PropertyName value); // 0x00C78AAC-0x00C78B30
		internal PropertyName ReadExtensionPropertyName(int sourceIndex); // 0x00C76998-0x00C769C0
		[GeneratedByOldBindingsGenerator] // 0x003B7300-0x003B7310
		private static void INTERNAL_CALL_ReadExtensionPropertyName(AudioSource self, int sourceIndex, out PropertyName value); // 0x00C78B30-0x00C78BB4
		[GeneratedByOldBindingsGenerator] // 0x003B7310-0x003B7320
		internal float ReadExtensionPropertyValue(int sourceIndex); // 0x00C769C0-0x00C76A34
		internal void ClearExtensionProperties(PropertyName extensionName); // 0x00C76AA0-0x00C76AC4
		[GeneratedByOldBindingsGenerator] // 0x003B7320-0x003B7330
		private static void INTERNAL_CALL_ClearExtensionProperties(AudioSource self, ref PropertyName extensionName); // 0x00C78BB4-0x00C78C28
		internal AudioSourceExtension AddSpatializerExtension(Type extensionType); // 0x00C762B4-0x00C76390
		internal AudioSourceExtension AddAmbisonicExtension(Type extensionType); // 0x00C7688C-0x00C76968
	}

	[NativeHeader] // 0x003B84BC-0x003B8508
	public static class ImageConversion // TypeDefIndex: 2311
	{
		// Extension methods
		[NativeMethod] // 0x003B8508-0x003B8580
		public static byte[] EncodeToPNG(this Texture2D tex); // 0x00CD53B4-0x00CD5420
		[NativeMethod] // 0x003B8580-0x003B85F8
		public static byte[] EncodeToJPG(this Texture2D tex, int quality); // 0x00CD5420-0x00CD5494
		public static byte[] EncodeToJPG(this Texture2D tex); // 0x00CD5494-0x00CD549C
		[NativeMethod] // 0x003B8608-0x003B8670
		public static bool LoadImage([NotNull] /* 0x003B8670-0x003B8680 */ this Texture2D tex, byte[] data, bool markNonReadable); // 0x00CD549C-0x00CD82F8
	}

	[NativeHeader] // 0x003B9790-0x003B97C8
	public static class JsonUtility // TypeDefIndex: 2313
	{
		// Methods
		[FreeFunction] // 0x003B97C8-0x003B9828
		[ThreadSafe] // 0x003B97C8-0x003B9828
		private static object FromJsonInternal(string json, object objectToOverwrite, Type type); // 0x00CAD04C-0x00CAD0D0
		public static T FromJson<T>(string json);
		public static object FromJson(string json, Type type); // 0x00CAD0D0-0x00CAD274
		public static void FromJsonOverwrite(string json, object objectToOverwrite); // 0x00CAD274-0x00CAD3F0
	}

	public enum FontStyle // TypeDefIndex: 2315
	{
		Normal = 0,
		Bold = 1,
		Italic = 2,
		BoldAndItalic = 3
	}

	[Flags] // 0x003BA928-0x003BA938
	internal enum TextGenerationError // TypeDefIndex: 2316
	{
		None = 0,
		CustomSizeOnNonDynamicFont = 1,
		CustomStyleOnNonDynamicFont = 2,
		NoFont = 4
	}

	public struct TextGenerationSettings // TypeDefIndex: 2317
	{
		// Fields
		public Font font; // 0x00
		public Color color; // 0x08
		public int fontSize; // 0x18
		public float lineSpacing; // 0x1C
		public bool richText; // 0x20
		public float scaleFactor; // 0x24
		public FontStyle fontStyle; // 0x28
		public TextAnchor textAnchor; // 0x2C
		public bool alignByGeometry; // 0x30
		public bool resizeTextForBestFit; // 0x31
		public int resizeTextMinSize; // 0x34
		public int resizeTextMaxSize; // 0x38
		public bool updateBounds; // 0x3C
		public VerticalWrapMode verticalOverflow; // 0x40
		public HorizontalWrapMode horizontalOverflow; // 0x44
		public Vector2 generationExtents; // 0x48
		public Vector2 pivot; // 0x50
		public bool generateOutOfBounds; // 0x58
	
		// Methods
		private bool CompareColors(Color left, Color right); // 0x00C837E4-0x00C838B4
		private bool CompareVector2(Vector2 left, Vector2 right); // 0x00C838B4-0x00C83B10
		public bool Equals(TextGenerationSettings other); // 0x00C83B10-0x00C83B9C
	}

	[NativeHeader] // 0x003BA938-0x003BA984
	[UsedByNativeCode] // 0x003BA938-0x003BA984
	public sealed class TextGenerator : IDisposable // TypeDefIndex: 2318
	{
		// Fields
		internal IntPtr m_Ptr; // 0x10
		private string m_LastString; // 0x18
		private TextGenerationSettings m_LastSettings; // 0x20
		private bool m_HasGenerated; // 0x80
		private TextGenerationError m_LastValid; // 0x84
		private readonly List<UIVertex> m_Verts; // 0x88
		private readonly List<UICharInfo> m_Characters; // 0x90
		private readonly List<UILineInfo> m_Lines; // 0x98
		private bool m_CachedVerts; // 0xA0
		private bool m_CachedCharacters; // 0xA1
		private bool m_CachedLines; // 0xA2
	
		// Properties
		public int characterCountVisible { [CompilerGenerated] /* 0x003BAAD8-0x003BAAE8 */ get; } // 0x00C83EAC-0x00C83EC4 
		public IList<UIVertex> verts { get; } // 0x00C84A68-0x00C84AA4 
		public IList<UICharInfo> characters { get; } // 0x00C84AA4-0x00C84AE0 
		public IList<UILineInfo> lines { get; } // 0x00C84AE0-0x00C84B1C 
		public Rect rectExtents { get; } // 0x00C84468-0x00C84494 
		public int characterCount { get; } // 0x00C83EC4-0x00C83F30 
		public int lineCount { get; } // 0x00C84B90-0x00C84BFC 
	
		// Constructors
		public TextGenerator(); // 0x00C83B9C-0x00C83BA4
		public TextGenerator(int initialCapacity); // 0x00C83BA4-0x00C83C8C
	
		// Methods
		~TextGenerator(); // 0x00C83CE4-0x00C83DE0
		void IDisposable.Dispose(); // 0x00C83DE0-0x00C83E40
		private TextGenerationSettings ValidatedSettings(TextGenerationSettings settings); // 0x00C83F30-0x00C84224
		public void Invalidate(); // 0x00C84224-0x00C8422C
		public void GetCharacters(List<UICharInfo> characters); // 0x00C8422C-0x00C84230
		public void GetLines(List<UILineInfo> lines); // 0x00C842A4-0x00C842A8
		public void GetVertices(List<UIVertex> vertices); // 0x00C8431C-0x00C84320
		public float GetPreferredWidth(string str, TextGenerationSettings settings); // 0x00C84394-0x00C84414
		public float GetPreferredHeight(string str, TextGenerationSettings settings); // 0x00C84494-0x00C84510
		public bool PopulateWithErrors(string str, TextGenerationSettings settings, GameObject context); // 0x00C84510-0x00C84704
		public bool Populate(string str, TextGenerationSettings settings); // 0x00C84414-0x00C84468
		private TextGenerationError PopulateWithError(string str, TextGenerationSettings settings); // 0x00C84704-0x00C847A0
		private TextGenerationError PopulateAlways(string str, TextGenerationSettings settings); // 0x00C847A0-0x00C848BC
		[NativeMethod] // 0x003BAAE8-0x003BAB20
		private static IntPtr Internal_Create(); // 0x00C83C8C-0x00C83CE4
		[NativeMethod] // 0x003BAB20-0x003BAB58
		private static void Internal_Destroy(IntPtr ptr); // 0x00C83E40-0x00C83EAC
		internal bool Populate_Internal(string str, Font font, Color color, int fontSize, float scaleFactor, float lineSpacing, FontStyle style, bool richText, bool resizeTextForBestFit, int resizeTextMinSize, int resizeTextMaxSize, int verticalOverFlow, int horizontalOverflow, bool updateBounds, TextAnchor anchor, float extentsX, float extentsY, float pivotX, float pivotY, bool generateOutOfBounds, bool alignByGeometry, out uint error); // 0x00C84BFC-0x00C84CB8
		internal bool Populate_Internal(string str, Font font, Color color, int fontSize, float scaleFactor, float lineSpacing, FontStyle style, bool richText, bool resizeTextForBestFit, int resizeTextMinSize, int resizeTextMaxSize, VerticalWrapMode verticalOverFlow, HorizontalWrapMode horizontalOverflow, bool updateBounds, TextAnchor anchor, Vector2 extents, Vector2 pivot, bool generateOutOfBounds, bool alignByGeometry, out TextGenerationError error); // 0x00C848BC-0x00C84A68
		[NativeThrows] // 0x003BAB58-0x003BAB68
		private void GetVerticesInternal(object vertices); // 0x00C84320-0x00C84394
		[NativeThrows] // 0x003BAB68-0x003BAB78
		private void GetCharactersInternal(object characters); // 0x00C84230-0x00C842A4
		[NativeThrows] // 0x003BAB78-0x003BAB88
		private void GetLinesInternal(object lines); // 0x00C842A8-0x00C8431C
		private void get_rectExtents_Injected(out Rect ret); // 0x00C84B1C-0x00C84B90
		private bool Populate_Internal_Injected(string str, Font font, ref Color color, int fontSize, float scaleFactor, float lineSpacing, FontStyle style, bool richText, bool resizeTextForBestFit, int resizeTextMinSize, int resizeTextMaxSize, int verticalOverFlow, int horizontalOverflow, bool updateBounds, TextAnchor anchor, float extentsX, float extentsY, float pivotX, float pivotY, bool generateOutOfBounds, bool alignByGeometry, out uint error); // 0x00C84CB8-0x00C84E14
	}

	public enum TextAnchor // TypeDefIndex: 2319
	{
		UpperLeft = 0,
		UpperCenter = 1,
		UpperRight = 2,
		MiddleLeft = 3,
		MiddleCenter = 4,
		MiddleRight = 5,
		LowerLeft = 6,
		LowerCenter = 7,
		LowerRight = 8
	}

	public enum HorizontalWrapMode // TypeDefIndex: 2320
	{
		Wrap = 0,
		Overflow = 1
	}

	public enum VerticalWrapMode // TypeDefIndex: 2321
	{
		Truncate = 0,
		Overflow = 1
	}

	[UsedByNativeCode] // 0x003BA984-0x003BA994
	public struct UICharInfo // TypeDefIndex: 2322
	{
		// Fields
		public Vector2 cursorPos; // 0x00
		public float charWidth; // 0x08
	}

	[UsedByNativeCode] // 0x003BA994-0x003BA9A4
	public struct UILineInfo // TypeDefIndex: 2323
	{
		// Fields
		public int startCharIdx; // 0x00
		public int height; // 0x04
		public float topY; // 0x08
		public float leading; // 0x0C
	}

	[UsedByNativeCode] // 0x003BA9A4-0x003BA9B4
	public struct UIVertex // TypeDefIndex: 2324
	{
		// Fields
		public Vector3 position; // 0x00
		public Vector3 normal; // 0x0C
		public Vector4 tangent; // 0x18
		public Color32 color; // 0x28
		public Vector2 uv0; // 0x2C
		public Vector2 uv1; // 0x34
		public Vector2 uv2; // 0x3C
		public Vector2 uv3; // 0x44
		private static readonly Color32 s_DefaultColor; // 0x00
		private static readonly Vector4 s_DefaultTangent; // 0x04
		public static UIVertex simpleVert; // 0x14
	
		// Constructors
		static UIVertex(); // 0x00C84E14-0x00C84FF8
	}

	[NativeClass] // 0x003BA9B4-0x003BAA60
	[NativeHeader] // 0x003BA9B4-0x003BAA60
	[NativeHeader] // 0x003BA9B4-0x003BAA60
	[StaticAccessor] // 0x003BA9B4-0x003BAA60
	public sealed class Font : UnityEngine.Object // TypeDefIndex: 2325
	{
		// Fields
		[CompilerGenerated] // 0x003BAA60-0x003BAA9C
		[DebuggerBrowsable] // 0x003BAA60-0x003BAA9C
		private static Action<Font> textureRebuilt; // 0x00
		[CompilerGenerated] // 0x003BAA9C-0x003BAAD8
		[DebuggerBrowsable] // 0x003BAA9C-0x003BAAD8
		private FontTextureRebuildCallback m_FontTextureRebuildCallback; // 0x18
	
		// Properties
		public Material material { get; } // 0x00C82FA4-0x00C83010 
		public bool dynamic { get; } // 0x00C83010-0x00C8307C 
		public int fontSize { get; } // 0x00C8307C-0x00C830E8 
	
		// Events
		public static event Action<Font> textureRebuilt {
			add; // 0x00C82DA4-0x00C82EA4
			remove; // 0x00C82EA4-0x00C82FA4
		}
	
		// Nested types
		public delegate void FontTextureRebuildCallback(); // TypeDefIndex: 2326; 0x00C83174-0x00C83574
	
		// Constructors
		public Font(); // 0x00C82CBC-0x00C82D30
	
		// Methods
		[RequiredByNativeCode] // 0x003BAB88-0x003BAB98
		internal static void InvokeTextureRebuilt_Internal(Font font); // 0x00C830E8-0x00C83174
		public bool HasCharacter(char c); // 0x00C83574-0x00C8357C
		private bool HasCharacter(int c); // 0x00C8357C-0x00C835FC
		private static void Internal_CreateFont([Writable] /* 0x003BAB98-0x003BABA8 */ Font self, string name); // 0x00C82D30-0x00C82DA4
	}
}

namespace UnityEngine.Networking
{
	[NativeHeader] // 0x003BBCA8-0x003BBD18
	[NativeHeader] // 0x003BBCA8-0x003BBD18
	[UsedByNativeCode] // 0x003BBCA8-0x003BBD18
	public class UnityWebRequestAsyncOperation : AsyncOperation // TypeDefIndex: 2328
	{
		// Fields
		[CompilerGenerated] // 0x003BBEE0-0x003BBF1C
		[DebuggerBrowsable] // 0x003BBEE0-0x003BBF1C
		private UnityWebRequest <webRequest>k__BackingField; // 0x20
	
		// Properties
		internal UnityWebRequest webRequest { [CompilerGenerated] /* 0x003BBFE0-0x003BBFF0 */ set; } // 0x00C658EC-0x00C658F4
	
		// Constructors
		public UnityWebRequestAsyncOperation(); // 0x00C682F4-0x00C68318
	}

	[NativeHeader] // 0x003BBD18-0x003BBD50
	public class UnityWebRequest : IDisposable // TypeDefIndex: 2329
	{
		// Fields
		[NonSerialized]
		internal IntPtr m_Ptr; // 0x10
		[NonSerialized]
		internal DownloadHandler m_DownloadHandler; // 0x18
		[NonSerialized]
		internal UploadHandler m_UploadHandler; // 0x20
		[NonSerialized]
		internal CertificateHandler m_CertificateHandler; // 0x28
		[NonSerialized]
		internal Uri m_Uri; // 0x30
		[CompilerGenerated] // 0x003BBF1C-0x003BBF58
		[DebuggerBrowsable] // 0x003BBF1C-0x003BBF58
		private bool <disposeCertificateHandlerOnDispose>k__BackingField; // 0x38
		[CompilerGenerated] // 0x003BBF58-0x003BBF94
		[DebuggerBrowsable] // 0x003BBF58-0x003BBF94
		private bool <disposeDownloadHandlerOnDispose>k__BackingField; // 0x39
		[CompilerGenerated] // 0x003BBF94-0x003BBFD0
		[DebuggerBrowsable] // 0x003BBF94-0x003BBFD0
		private bool <disposeUploadHandlerOnDispose>k__BackingField; // 0x3A
	
		// Properties
		public bool disposeCertificateHandlerOnDispose { [CompilerGenerated] /* 0x003BC060-0x003BC070 */ get; [CompilerGenerated] /* 0x003BC070-0x003BC080 */ set; } // 0x00C654E8-0x00C654F0 0x00C654F0-0x00C654FC
		public bool disposeDownloadHandlerOnDispose { [CompilerGenerated] /* 0x003BC080-0x003BC090 */ get; [CompilerGenerated] /* 0x003BC090-0x003BC0A0 */ set; } // 0x00C654FC-0x00C65504 0x00C65504-0x00C65510
		public bool disposeUploadHandlerOnDispose { [CompilerGenerated] /* 0x003BC0A0-0x003BC0B0 */ get; [CompilerGenerated] /* 0x003BC0B0-0x003BC0C0 */ set; } // 0x00C65510-0x00C65518 0x00C65518-0x00C65524
		public string method { set; } // 0x00C6502C-0x00C651B0
		public string error { get; } // 0x00C65C84-0x00C65D64 
		public string url { get; set; } // 0x00C65EA8-0x00C65EAC 0x00C64FA0-0x00C6502C
		public long responseCode { get; } // 0x00C65E3C-0x00C65EA8 
		public bool isModifiable { [NativeMethod] /* 0x003BC17C-0x003BC1B4 */ get; } // 0x00C65A50-0x00C65ABC 
		public bool isDone { [NativeMethod] /* 0x003BC1B4-0x003BC1EC */ get; } // 0x00C66428-0x00C66494 
		public bool isNetworkError { [NativeMethod] /* 0x003BC1EC-0x003BC224 */ get; } // 0x00C65D64-0x00C65DD0 
		public bool isHttpError { [NativeMethod] /* 0x003BC224-0x003BC25C */ get; } // 0x00C65DD0-0x00C65E3C 
		public bool chunkedTransfer { set; } // 0x00C66508-0x00C665F0
		public UploadHandler uploadHandler { get; set; } // 0x00C657C0-0x00C657C8 0x00C65324-0x00C65410
		public DownloadHandler downloadHandler { get; set; } // 0x00C657B8-0x00C657C0 0x00C65238-0x00C65324
		public CertificateHandler certificateHandler { get; } // 0x00C65828-0x00C65830 
	
		// Nested types
		internal enum UnityWebRequestMethod // TypeDefIndex: 2330
		{
			Get = 0,
			Post = 1,
			Put = 2,
			Head = 3,
			Custom = 4
		}
	
		internal enum UnityWebRequestError // TypeDefIndex: 2331
		{
			OK = 0,
			Unknown = 1,
			SDKError = 2,
			UnsupportedProtocol = 3,
			MalformattedUrl = 4,
			CannotResolveProxy = 5,
			CannotResolveHost = 6,
			CannotConnectToHost = 7,
			AccessDenied = 8,
			GenericHttpError = 9,
			WriteError = 10,
			ReadError = 11,
			OutOfMemory = 12,
			Timeout = 13,
			HTTPPostError = 14,
			SSLCannotConnect = 15,
			Aborted = 16,
			TooManyRedirects = 17,
			ReceivedNoData = 18,
			SSLNotSupported = 19,
			FailedToSendData = 20,
			FailedToReceiveData = 21,
			SSLCertificateError = 22,
			SSLCipherNotAvailable = 23,
			SSLCACertError = 24,
			UnrecognizedContentEncoding = 25,
			LoginFailed = 26,
			SSLShutdownFailed = 27,
			NoInternetConnection = 28
		}
	
		// Constructors
		public UnityWebRequest(string url, string method); // 0x00C64ED4-0x00C64F34
		public UnityWebRequest(string url, string method, DownloadHandler downloadHandler, UploadHandler uploadHandler); // 0x00C651B0-0x00C65238
	
		// Methods
		[NativeConditional] // 0x003BBFF0-0x003BC050
		[NativeMethod] // 0x003BBFF0-0x003BC050
		private static string GetWebErrorString(UnityWebRequestError err); // 0x00C65410-0x00C6547C
		[VisibleToOtherModules] // 0x003BC050-0x003BC060
		internal static string GetHTTPStatusString(long responseCode); // 0x00C6547C-0x00C654E8
		internal static IntPtr Create(); // 0x00C64F34-0x00C64F8C
		[NativeMethod] // 0x003BC0C0-0x003BC0F8
		private void Release(); // 0x00C65524-0x00C65590
		internal void InternalDestroy(); // 0x00C65590-0x00C655F8
		private void InternalSetDefaults(); // 0x00C64F8C-0x00C64FA0
		~UnityWebRequest(); // 0x00C65664-0x00C656E0
		public void Dispose(); // 0x00C65740-0x00C657B8
		private void DisposeHandlers(); // 0x00C656E0-0x00C65740
		[NativeThrows] // 0x003BC0F8-0x003BC108
		internal UnityWebRequestAsyncOperation BeginWebRequest(); // 0x00C65830-0x00C6589C
		[Obsolete] // 0x003BC108-0x003BC144
		public AsyncOperation Send(); // 0x00C6589C-0x00C658C4
		public UnityWebRequestAsyncOperation SendWebRequest(); // 0x00C658C4-0x00C658EC
		[NativeMethod] // 0x003BC144-0x003BC17C
		public void Abort(); // 0x00C655F8-0x00C65664
		private UnityWebRequestError SetMethod(UnityWebRequestMethod methodType); // 0x00C658F4-0x00C65968
		internal void InternalSetMethod(UnityWebRequestMethod methodType); // 0x00C65968-0x00C65A50
		private UnityWebRequestError SetCustomMethod(string customMethodName); // 0x00C65ABC-0x00C65B30
		internal void InternalSetCustomMethod(string customMethodName); // 0x00C65B30-0x00C65C18
		private UnityWebRequestError GetError(); // 0x00C65C18-0x00C65C84
		private string GetUrl(); // 0x00C65EAC-0x00C65F18
		private UnityWebRequestError SetUrl(string url); // 0x00C663B4-0x00C66428
		private void InternalSetUrl(string url); // 0x00C662CC-0x00C663B4
		private UnityWebRequestError SetChunked(bool chunked); // 0x00C66494-0x00C66508
		[NativeMethod] // 0x003BC25C-0x003BC294
		internal UnityWebRequestError InternalSetRequestHeader(string name, string value); // 0x00C665F0-0x00C66674
		public void SetRequestHeader(string name, string value); // 0x00C66674-0x00C667C0
		private UnityWebRequestError SetUploadHandler(UploadHandler uh); // 0x00C667C0-0x00C66834
		private UnityWebRequestError SetDownloadHandler(DownloadHandler dh); // 0x00C66834-0x00C668A8
		public static UnityWebRequest Get(string uri); // 0x00C668A8-0x00C6694C
		public static UnityWebRequest Post(string uri, string postData); // 0x00C6694C-0x00C669D0
		private static void SetupPost(UnityWebRequest request, string postData); // 0x00C669D0-0x00C66B48
		public static UnityWebRequest Post(string uri, WWWForm formData); // 0x00C66D0C-0x00C66D90
		private static void SetupPost(UnityWebRequest request, WWWForm formData); // 0x00C66D90-0x00C66FC0
	}
}

namespace UnityEngine
{
	public class WWWForm // TypeDefIndex: 2332
	{
		// Fields
		private List<byte[]> formData; // 0x10
		private List<string> fieldNames; // 0x18
		private List<string> fileNames; // 0x20
		private List<string> types; // 0x28
		private byte[] boundary; // 0x30
		private bool containsFiles; // 0x38
	
		// Properties
		internal static Encoding DefaultEncoding { get; } // 0x00C6866C-0x00C68674 
		public Dictionary<string, string> headers { get; } // 0x00C6814C-0x00C682F4 
		public byte[] data { get; } // 0x00C66FC0-0x00C6814C 
	
		// Constructors
		public WWWForm(); // 0x00C6850C-0x00C6866C
	
		// Methods
		public void AddField(string fieldName, string value); // 0x00C68674-0x00C686B8
		public void AddField(string fieldName, string value, Encoding e); // 0x00C686B8-0x00C68804
		public void AddField(string fieldName, int i); // 0x00C68804-0x00C6885C
		[ExcludeFromDocs] // 0x003BC294-0x003BC2A4
		public void AddBinaryData(string fieldName, byte[] contents, string fileName); // 0x00C6885C-0x00C68864
		public void AddBinaryData(string fieldName, byte[] contents, [UnityEngine.Internal.DefaultValue] /* 0x003BC3EC-0x003BC424 */ string fileName, [UnityEngine.Internal.DefaultValue] /* 0x003BC424-0x003BC45C */ string mimeType); // 0x00C68864-0x00C68B00
	}

	[VisibleToOtherModules] // 0x003BBD50-0x003BBDC8
	internal class WWWTranscoder // TypeDefIndex: 2333
	{
		// Fields
		private static byte[] ucHexChars; // 0x00
		private static byte[] lcHexChars; // 0x08
		private static byte urlEscapeChar; // 0x10
		private static byte[] urlSpace; // 0x18
		private static byte[] dataSpace; // 0x20
		private static byte[] urlForbidden; // 0x28
		private static byte qpEscapeChar; // 0x30
		private static byte[] qpSpace; // 0x38
		private static byte[] qpForbidden; // 0x40
	
		// Constructors
		static WWWTranscoder(); // 0x00C69898-0x00C69ACC
	
		// Methods
		private static byte Hex2Byte(byte[] b, int offset); // 0x00C68D14-0x00C68E00
		private static byte[] Byte2Hex(byte b, byte[] hexChars); // 0x00C68E00-0x00C68F10
		public static string DataEncode(string toEncode, Encoding e); // 0x00C66B48-0x00C66C48
		public static byte[] DataEncode(byte[] toEncode); // 0x00C68C9C-0x00C68D14
		public static string QPEncode(string toEncode, Encoding e); // 0x00C68B9C-0x00C68C9C
		public static byte[] Encode(byte[] input, byte escapeChar, byte[] space, byte[] forbidden, bool uppercase); // 0x00C68F10-0x00C69300
		private static bool ByteArrayContains(byte[] array, byte b); // 0x00C69300-0x00C69398
		public static byte[] URLDecode(byte[] toEncode); // 0x00C69398-0x00C6940C
		private static bool ByteSubArrayEquals(byte[] array, int index, byte[] comperand); // 0x00C69708-0x00C697F4
		public static byte[] Decode(byte[] input, byte escapeChar, byte[] space); // 0x00C6940C-0x00C69708
		public static bool SevenBitClean(string s, Encoding e); // 0x00C68B00-0x00C68B9C
		public static bool SevenBitClean(byte[] input); // 0x00C697F4-0x00C69898
	}
}

namespace UnityEngineInternal
{
	internal static class WebRequestUtils // TypeDefIndex: 2334
	{
		// Fields
		private static Regex domainRegex; // 0x00
	
		// Constructors
		static WebRequestUtils(); // 0x00C6A100-0x00C6A178
	
		// Methods
		[RequiredByNativeCode] // 0x003BC2A4-0x003BC2B4
		internal static string RedirectTo(string baseUri, string redirectUri); // 0x00C69ACC-0x00C69BFC
		internal static string MakeInitialUrl(string targetUrl, string localUrl); // 0x00C65F18-0x00C662CC
		internal static string MakeUriString(Uri targetUri, string targetUrl, bool prependProtocol); // 0x00C69BFC-0x00C6A038
		private static string URLDecode(string encoded); // 0x00C6A038-0x00C6A100
	}
}

namespace UnityEngine.Networking
{
	[NativeHeader] // 0x003BBDC8-0x003BBE00
	public class CertificateHandler : IDisposable // TypeDefIndex: 2335
	{
		// Fields
		[NonSerialized]
		internal IntPtr m_Ptr; // 0x10
	
		// Methods
		[NativeMethod] // 0x003BC2B4-0x003BC2EC
		private void Release(); // 0x00C64678-0x00C646E4
		~CertificateHandler(); // 0x00C646E4-0x00C64758
		protected virtual bool ValidateCertificate(byte[] certificateData); // 0x00C647B8-0x00C647C0
		[RequiredByNativeCode] // 0x003BC2EC-0x003BC2FC
		internal bool ValidateCertificateNative(byte[] certificateData); // 0x00C647C0-0x00C647E8
		public void Dispose(); // 0x00C64758-0x00C647B8
	}

	[NativeHeader] // 0x003BBE00-0x003BBE38
	public class DownloadHandler : IDisposable // TypeDefIndex: 2336
	{
		// Fields
		[NonSerialized]
		[VisibleToOtherModules] // 0x003BBFD0-0x003BBFE0
		internal IntPtr m_Ptr; // 0x10
	
		// Properties
		public byte[] data { get; } // 0x00C64930-0x00C6493C 
		public string text { get; } // 0x00C6493C-0x00C64948 
	
		// Constructors
		[VisibleToOtherModules] // 0x003BC2FC-0x003BC30C
		internal DownloadHandler(); // 0x00C647E8-0x00C647F0
	
		// Methods
		[NativeMethod] // 0x003BC30C-0x003BC344
		private void Release(); // 0x00C647F0-0x00C6485C
		~DownloadHandler(); // 0x00C6485C-0x00C648D0
		public void Dispose(); // 0x00C648D0-0x00C64930
		protected virtual byte[] GetData(); // 0x00C64948-0x00C64950
		protected virtual string GetText(); // 0x00C64950-0x00C649FC
		private Encoding GetTextEncoder(); // 0x00C649FC-0x00C64CCC
		private string GetContentType(); // 0x00C64CCC-0x00C64D38
		[NativeThrows] // 0x003BC344-0x003BC37C
		[VisibleToOtherModules] // 0x003BC344-0x003BC37C
		internal static byte[] InternalGetByteArray(DownloadHandler dh); // 0x00C64D38-0x00C64DC0
	}

	[NativeHeader] // 0x003BBE38-0x003BBE70
	public sealed class DownloadHandlerBuffer : DownloadHandler // TypeDefIndex: 2337
	{
		// Constructors
		public DownloadHandlerBuffer(); // 0x00C64DC0-0x00C64DF0
	
		// Methods
		private static IntPtr Create(DownloadHandlerBuffer obj); // 0x00C64E14-0x00C64E80
		private void InternalCreateBuffer(); // 0x00C64DF0-0x00C64E14
		protected override byte[] GetData(); // 0x00C64E80-0x00C64E84
		private byte[] InternalGetData(); // 0x00C64E84-0x00C64ED4
	}

	[NativeHeader] // 0x003BBE70-0x003BBEA8
	public class UploadHandler : IDisposable // TypeDefIndex: 2338
	{
		// Fields
		[NonSerialized]
		internal IntPtr m_Ptr; // 0x10
	
		// Properties
		public string contentType { set; } // 0x00C66D00-0x00C66D0C
	
		// Constructors
		internal UploadHandler(); // 0x00C68318-0x00C68320
	
		// Methods
		[NativeMethod] // 0x003BC37C-0x003BC3B4
		private void Release(); // 0x00C68320-0x00C6838C
		~UploadHandler(); // 0x00C6838C-0x00C68400
		public void Dispose(); // 0x00C657C8-0x00C65828
		internal virtual void SetContentType(string newContentType); // 0x00C68400-0x00C68420
	}

	[NativeHeader] // 0x003BBEA8-0x003BBEE0
	public sealed class UploadHandlerRaw : UploadHandler // TypeDefIndex: 2339
	{
		// Constructors
		public UploadHandlerRaw(byte[] data); // 0x00C66C48-0x00C66D00
	
		// Methods
		private static IntPtr Create(UploadHandlerRaw self, byte[] data); // 0x00C68420-0x00C68494
		[NativeMethod] // 0x003BC3B4-0x003BC3EC
		private void InternalSetContentType(string newContentType); // 0x00C68494-0x00C68508
		internal override void SetContentType(string newContentType); // 0x00C68508-0x00C6850C
	}
}

namespace UnityEngine.Experimental.XR
{
	[NativeHeader] // 0x003BD5F4-0x003BD640
	[UsedByNativeCode] // 0x003BD5F4-0x003BD640
	public struct TrackableId : IEquatable<TrackableId> // TypeDefIndex: 2341
	{
		// Fields
		private static TrackableId s_InvalidId; // 0x00
		private ulong m_SubId1; // 0x00
		private ulong m_SubId2; // 0x08
	
		// Constructors
		static TrackableId(); // 0x00C7BBCC-0x00C7BC1C
	
		// Methods
		public override string ToString(); // 0x00C7BAC4-0x00C7BACC
		public override int GetHashCode(); // 0x00C7BACC-0x00C7BBA0
		public override bool Equals(object obj); // 0x00C7BBA0-0x00C7BBA8
		public bool Equals(TrackableId other); // 0x00C7BBA8-0x00C7BBCC
	}
}

namespace UnityEngine.Experimental
{
	public interface ISubsystemDescriptor // TypeDefIndex: 2342
	{
	}

	internal interface ISubsystemDescriptorImpl // TypeDefIndex: 2343
	{
		// Properties
		IntPtr ptr { set; }
	}

	[UsedByNativeCode] // 0x003BD640-0x003BD678
	public class IntegratedSubsystemDescriptor : ISubsystemDescriptor, ISubsystemDescriptorImpl // TypeDefIndex: 2344
	{
		// Fields
		internal IntPtr m_Ptr; // 0x10
	
		// Properties
		IntPtr ISubsystemDescriptorImpl.ptr { set; } // 0x00C7A560-0x00C7A568
	}

	public abstract class SubsystemDescriptor : ISubsystemDescriptor // TypeDefIndex: 2345
	{
		// Fields
		[CompilerGenerated] // 0x003BE17C-0x003BE1B8
		[DebuggerBrowsable] // 0x003BE17C-0x003BE1B8
		private string <id>k__BackingField; // 0x10
	
		// Properties
		public string id { [CompilerGenerated] /* 0x003BE9EC-0x003BE9FC */ get; } // 0x00C7A7D8-0x00C7A7E0 
	}

	[NativeType] // 0x003BD678-0x003BD6E4
	[UsedByNativeCode] // 0x003BD678-0x003BD6E4
	public class IntegratedSubsystemDescriptor<TSubsystem> : IntegratedSubsystemDescriptor // TypeDefIndex: 2346
		where TSubsystem : IntegratedSubsystem
	{
	}

	internal static class Internal_SubsystemInstances // TypeDefIndex: 2347
	{
		// Fields
		internal static List<ISubsystem> s_IntegratedSubsystemInstances; // 0x00
		internal static List<ISubsystem> s_StandaloneSubsystemInstances; // 0x08
	
		// Constructors
		static Internal_SubsystemInstances(); // 0x00C7B2F0-0x00C7B3D8
	
		// Methods
		[RequiredByNativeCode] // 0x003BE9FC-0x003BEA0C
		internal static void Internal_InitializeManagedInstance(IntPtr ptr, IntegratedSubsystem inst); // 0x00C7AC10-0x00C7ACD8
		[RequiredByNativeCode] // 0x003BEA0C-0x003BEA1C
		internal static void Internal_ClearManagedInstances(); // 0x00C7ACD8-0x00C7AF94
		[RequiredByNativeCode] // 0x003BEA1C-0x003BEA2C
		internal static void Internal_RemoveInstanceByPtr(IntPtr ptr); // 0x00C7AF94-0x00C7B2F0
	}

	internal static class Internal_SubsystemDescriptors // TypeDefIndex: 2348
	{
		// Fields
		private static bool analyticsEventRegistered; // 0x00
		internal static List<ISubsystemDescriptorImpl> s_IntegratedSubsystemDescriptors; // 0x08
		internal static List<ISubsystemDescriptor> s_StandaloneSubsystemDescriptors; // 0x10
	
		// Nested types
		[Serializable]
		private struct SubsystemInfo // TypeDefIndex: 2349
		{
			// Fields
			internal string id; // 0x00
		}
	
		// Constructors
		static Internal_SubsystemDescriptors(); // 0x00C7AAE8-0x00C7AC10
	
		// Methods
		[RequiredByNativeCode] // 0x003BEA2C-0x003BEA3C
		internal static bool Internal_AddDescriptor(SubsystemDescriptor descriptor); // 0x00C7A568-0x00C7A7D8
		[RequiredByNativeCode] // 0x003BEA3C-0x003BEA4C
		internal static void Internal_InitializeManagedDescriptor(IntPtr ptr, ISubsystemDescriptorImpl desc); // 0x00C7A7E0-0x00C7A8F0
		[RequiredByNativeCode] // 0x003BEA4C-0x003BEA5C
		internal static void Internal_ClearManagedDescriptors(); // 0x00C7A8F0-0x00C7AAE8
	}

	public interface ISubsystem // TypeDefIndex: 2350
	{
	}

	[NativeType] // 0x003BD6E4-0x003BD73C
	[UsedByNativeCode] // 0x003BD6E4-0x003BD73C
	public class IntegratedSubsystem : ISubsystem // TypeDefIndex: 2351
	{
		// Fields
		internal IntPtr m_Ptr; // 0x10
		internal ISubsystemDescriptor m_subsystemDescriptor; // 0x18
	
		// Methods
		internal void SetHandle(IntegratedSubsystem inst); // 0x00C7A4D0-0x00C7A560
	}

	[UsedByNativeCode] // 0x003BD73C-0x003BD774
	public class IntegratedSubsystem<TSubsystemDescriptor> : IntegratedSubsystem // TypeDefIndex: 2352
		where TSubsystemDescriptor : ISubsystemDescriptor
	{
	}
}

namespace UnityEngine.XR
{
	[NativeConditional] // 0x003BD774-0x003BD80C
	[NativeHeader] // 0x003BD774-0x003BD80C
	[RequiredByNativeCode] // 0x003BD774-0x003BD80C
	[StaticAccessor] // 0x003BD774-0x003BD80C
	public static class InputTracking // TypeDefIndex: 2353
	{
		// Fields
		[CompilerGenerated] // 0x003BE1B8-0x003BE1F4
		[DebuggerBrowsable] // 0x003BE1B8-0x003BE1F4
		private static Action<XRNodeState> trackingAcquired; // 0x00
		[CompilerGenerated] // 0x003BE1F4-0x003BE230
		[DebuggerBrowsable] // 0x003BE1F4-0x003BE230
		private static Action<XRNodeState> trackingLost; // 0x08
		[CompilerGenerated] // 0x003BE230-0x003BE26C
		[DebuggerBrowsable] // 0x003BE230-0x003BE26C
		private static Action<XRNodeState> nodeAdded; // 0x10
		[CompilerGenerated] // 0x003BE26C-0x003BE2A8
		[DebuggerBrowsable] // 0x003BE26C-0x003BE2A8
		private static Action<XRNodeState> nodeRemoved; // 0x18
	
		// Nested types
		private enum TrackingStateEventType // TypeDefIndex: 2354
		{
			NodeAdded = 0,
			NodeRemoved = 1,
			TrackingAcquired = 2,
			TrackingLost = 3
		}
	
		// Constructors
		static InputTracking(); // 0x00C7C2B8-0x00C7C324
	
		// Methods
		[RequiredByNativeCode] // 0x003BEA5C-0x003BEA6C
		private static void InvokeTrackingEvent(TrackingStateEventType eventType, XRNode nodeType, long uniqueID, bool tracked); // 0x00C7C0AC-0x00C7C2B8
	}

	public enum XRNode // TypeDefIndex: 2355
	{
		LeftEye = 0,
		RightEye = 1,
		CenterEye = 2,
		Head = 3,
		LeftHand = 4,
		RightHand = 5,
		GameController = 6,
		TrackingReference = 7,
		HardwareTracker = 8
	}

	[Flags] // 0x003BD80C-0x003BD81C
	internal enum AvailableTrackingData // TypeDefIndex: 2356
	{
		None = 0,
		PositionAvailable = 1,
		RotationAvailable = 2,
		VelocityAvailable = 4,
		AngularVelocityAvailable = 8,
		AccelerationAvailable = 16,
		AngularAccelerationAvailable = 32
	}

	[UsedByNativeCode] // 0x003BD81C-0x003BD82C
	public struct XRNodeState // TypeDefIndex: 2357
	{
		// Fields
		private XRNode m_Type; // 0x00
		private AvailableTrackingData m_AvailableFields; // 0x04
		private Vector3 m_Position; // 0x08
		private Quaternion m_Rotation; // 0x14
		private Vector3 m_Velocity; // 0x24
		private Vector3 m_AngularVelocity; // 0x30
		private Vector3 m_Acceleration; // 0x3C
		private Vector3 m_AngularAcceleration; // 0x48
		private int m_Tracked; // 0x54
		private ulong m_UniqueID; // 0x58
	
		// Properties
		public ulong uniqueID { set; } // 0x00C7C324-0x00C7C32C
		public XRNode nodeType { set; } // 0x00C7C32C-0x00C7C334
		public bool tracked { set; } // 0x00C7C334-0x00C7C340
	}
}

namespace UnityEngine.Experimental.XR
{
	public struct FrameReceivedEventArgs // TypeDefIndex: 2358
	{
		// Fields
		internal XRCameraSubsystem m_CameraSubsystem; // 0x00
	}

	[NativeConditional] // 0x003BD82C-0x003BD8CC
	[NativeHeader] // 0x003BD82C-0x003BD8CC
	[NativeType] // 0x003BD82C-0x003BD8CC
	[UsedByNativeCode] // 0x003BD82C-0x003BD8CC
	public class XRCameraSubsystem : IntegratedSubsystem<XRCameraSubsystemDescriptor> // TypeDefIndex: 2359
	{
		// Fields
		[CompilerGenerated] // 0x003BE2A8-0x003BE2E4
		[DebuggerBrowsable] // 0x003BE2A8-0x003BE2E4
		private Action<FrameReceivedEventArgs> FrameReceived; // 0x20
	
		// Methods
		[RequiredByNativeCode] // 0x003BEA6C-0x003BEA7C
		private void InvokeFrameReceivedEvent(); // 0x00C7BC1C-0x00C7BC80
	}

	[NativeConditional] // 0x003BD8CC-0x003BD96C
	[NativeHeader] // 0x003BD8CC-0x003BD96C
	[NativeType] // 0x003BD8CC-0x003BD96C
	[UsedByNativeCode] // 0x003BD8CC-0x003BD96C
	public class XRCameraSubsystemDescriptor : IntegratedSubsystemDescriptor<XRCameraSubsystem> // TypeDefIndex: 2360
	{
	}

	public struct PointCloudUpdatedEventArgs // TypeDefIndex: 2361
	{
		// Fields
		internal XRDepthSubsystem m_DepthSubsystem; // 0x00
	}

	[NativeConditional] // 0x003BD96C-0x003BDA00
	[NativeHeader] // 0x003BD96C-0x003BDA00
	[NativeHeader] // 0x003BD96C-0x003BDA00
	[UsedByNativeCode] // 0x003BD96C-0x003BDA00
	public class XRDepthSubsystem : IntegratedSubsystem<XRDepthSubsystemDescriptor> // TypeDefIndex: 2362
	{
		// Fields
		[CompilerGenerated] // 0x003BE2E4-0x003BE320
		[DebuggerBrowsable] // 0x003BE2E4-0x003BE320
		private Action<PointCloudUpdatedEventArgs> PointCloudUpdated; // 0x20
	
		// Methods
		[RequiredByNativeCode] // 0x003BEA7C-0x003BEA8C
		private void InvokePointCloudUpdatedEvent(); // 0x00C7BC80-0x00C7BCE4
	}

	[NativeConditional] // 0x003BDA00-0x003BDAA0
	[NativeHeader] // 0x003BDA00-0x003BDAA0
	[NativeType] // 0x003BDA00-0x003BDAA0
	[UsedByNativeCode] // 0x003BDA00-0x003BDAA0
	public class XRDepthSubsystemDescriptor : IntegratedSubsystemDescriptor<XRDepthSubsystem> // TypeDefIndex: 2363
	{
	}

	[NativeHeader] // 0x003BDAA0-0x003BDAEC
	[RequiredByNativeCode] // 0x003BDAA0-0x003BDAEC
	public enum MeshGenerationStatus // TypeDefIndex: 2364
	{
		Success = 0,
		InvalidMeshId = 1,
		GenerationAlreadyInProgress = 2,
		Canceled = 3,
		UnknownError = 4
	}

	internal static class HashCodeHelper // TypeDefIndex: 2365
	{
		// Methods
		public static int Combine(int hash1, int hash2); // 0x00C7B3D8-0x00C7B434
	}

	[NativeHeader] // 0x003BDAEC-0x003BDB38
	[RequiredByNativeCode] // 0x003BDAEC-0x003BDB38
	public struct MeshGenerationResult : IEquatable<MeshGenerationResult> // TypeDefIndex: 2366
	{
		// Fields
		[CompilerGenerated] // 0x003BE320-0x003BE35C
		[DebuggerBrowsable] // 0x003BE320-0x003BE35C
		private readonly TrackableId <MeshId>k__BackingField; // 0x00
		[CompilerGenerated] // 0x003BE35C-0x003BE398
		[DebuggerBrowsable] // 0x003BE35C-0x003BE398
		private readonly Mesh <Mesh>k__BackingField; // 0x10
		[CompilerGenerated] // 0x003BE398-0x003BE3D4
		[DebuggerBrowsable] // 0x003BE398-0x003BE3D4
		private readonly MeshCollider <MeshCollider>k__BackingField; // 0x18
		[CompilerGenerated] // 0x003BE3D4-0x003BE410
		[DebuggerBrowsable] // 0x003BE3D4-0x003BE410
		private readonly MeshGenerationStatus <Status>k__BackingField; // 0x20
		[CompilerGenerated] // 0x003BE410-0x003BE44C
		[DebuggerBrowsable] // 0x003BE410-0x003BE44C
		private readonly MeshVertexAttributes <Attributes>k__BackingField; // 0x24
	
		// Properties
		public TrackableId MeshId { [CompilerGenerated] /* 0x003BEA8C-0x003BEA9C */ get; } // 0x00C7B434-0x00C7B440 
		public Mesh Mesh { [CompilerGenerated] /* 0x003BEA9C-0x003BEAAC */ get; } // 0x00C7B440-0x00C7B448 
		public MeshCollider MeshCollider { [CompilerGenerated] /* 0x003BEAAC-0x003BEABC */ get; } // 0x00C7B448-0x00C7B450 
		public MeshGenerationStatus Status { [CompilerGenerated] /* 0x003BEABC-0x003BEACC */ get; } // 0x00C7B450-0x00C7B458 
		public MeshVertexAttributes Attributes { [CompilerGenerated] /* 0x003BEACC-0x003BEADC */ get; } // 0x00C7B458-0x00C7B6DC 
	
		// Methods
		public override bool Equals(object obj); // 0x00C7B6DC-0x00C7B6E4
		public bool Equals(MeshGenerationResult other); // 0x00C7B6E4-0x00C7B804
		public override int GetHashCode(); // 0x00C7B804-0x00C7B858
	}

	[Flags] // 0x003BDB38-0x003BDB94
	[NativeHeader] // 0x003BDB38-0x003BDB94
	[UsedByNativeCode] // 0x003BDB38-0x003BDB94
	public enum MeshVertexAttributes // TypeDefIndex: 2367
	{
		None = 0,
		Normals = 1,
		Tangents = 2,
		UVs = 4,
		Colors = 8
	}

	[NativeConditional] // 0x003BDB94-0x003BDC28
	[NativeHeader] // 0x003BDB94-0x003BDC28
	[NativeHeader] // 0x003BDB94-0x003BDC28
	[UsedByNativeCode] // 0x003BDB94-0x003BDC28
	public class XRMeshSubsystem : IntegratedSubsystem<XRMeshSubsystemDescriptor> // TypeDefIndex: 2368
	{
		// Methods
		[RequiredByNativeCode] // 0x003BEADC-0x003BEAEC
		private void InvokeMeshReadyDelegate(MeshGenerationResult result, Action<MeshGenerationResult> onMeshGenerationComplete); // 0x00C7BCE4-0x00C7BD7C
	}

	[NativeHeader] // 0x003BDC28-0x003BDCA4
	[NativeType] // 0x003BDC28-0x003BDCA4
	[UsedByNativeCode] // 0x003BDC28-0x003BDCA4
	public class XRMeshSubsystemDescriptor : IntegratedSubsystemDescriptor<XRMeshSubsystem> // TypeDefIndex: 2369
	{
	}

	[Flags] // 0x003BDCA4-0x003BDCDC
	[UsedByNativeCode] // 0x003BDCA4-0x003BDCDC
	public enum PlaneAlignment // TypeDefIndex: 2370
	{
		Horizontal = 1,
		Vertical = 2,
		NonAxis = 4
	}

	[NativeConditional] // 0x003BDCDC-0x003BDD94
	[NativeHeader] // 0x003BDCDC-0x003BDD94
	[NativeHeader] // 0x003BDCDC-0x003BDD94
	[NativeHeader] // 0x003BDCDC-0x003BDD94
	[UsedByNativeCode] // 0x003BDCDC-0x003BDD94
	public struct BoundedPlane // TypeDefIndex: 2371
	{
		// Fields
		private uint m_InstanceId; // 0x00
		[CompilerGenerated] // 0x003BE44C-0x003BE488
		[DebuggerBrowsable] // 0x003BE44C-0x003BE488
		private TrackableId <Id>k__BackingField; // 0x08
		[CompilerGenerated] // 0x003BE488-0x003BE4C4
		[DebuggerBrowsable] // 0x003BE488-0x003BE4C4
		private TrackableId <SubsumedById>k__BackingField; // 0x18
		[CompilerGenerated] // 0x003BE4C4-0x003BE500
		[DebuggerBrowsable] // 0x003BE4C4-0x003BE500
		private Pose <Pose>k__BackingField; // 0x28
		[CompilerGenerated] // 0x003BE500-0x003BE53C
		[DebuggerBrowsable] // 0x003BE500-0x003BE53C
		private Vector3 <Center>k__BackingField; // 0x44
		[CompilerGenerated] // 0x003BE53C-0x003BE578
		[DebuggerBrowsable] // 0x003BE53C-0x003BE578
		private Vector2 <Size>k__BackingField; // 0x50
		[CompilerGenerated] // 0x003BE578-0x003BE5B4
		[DebuggerBrowsable] // 0x003BE578-0x003BE5B4
		private PlaneAlignment <Alignment>k__BackingField; // 0x58
	}

	public struct PlaneAddedEventArgs // TypeDefIndex: 2372
	{
		// Fields
		[CompilerGenerated] // 0x003BE5B4-0x003BE5F0
		[DebuggerBrowsable] // 0x003BE5B4-0x003BE5F0
		private XRPlaneSubsystem <PlaneSubsystem>k__BackingField; // 0x00
		[CompilerGenerated] // 0x003BE5F0-0x003BE62C
		[DebuggerBrowsable] // 0x003BE5F0-0x003BE62C
		private BoundedPlane <Plane>k__BackingField; // 0x08
	
		// Properties
		internal XRPlaneSubsystem PlaneSubsystem { [CompilerGenerated] /* 0x003BEAEC-0x003BEAFC */ set; } // 0x00C7B858-0x00C7B860
		internal BoundedPlane Plane { [CompilerGenerated] /* 0x003BEAFC-0x003BEB0C */ set; } // 0x00C7B860-0x00C7B8C8
	}

	public struct PlaneUpdatedEventArgs // TypeDefIndex: 2373
	{
		// Fields
		[CompilerGenerated] // 0x003BE62C-0x003BE668
		[DebuggerBrowsable] // 0x003BE62C-0x003BE668
		private XRPlaneSubsystem <PlaneSubsystem>k__BackingField; // 0x00
		[CompilerGenerated] // 0x003BE668-0x003BE6A4
		[DebuggerBrowsable] // 0x003BE668-0x003BE6A4
		private BoundedPlane <Plane>k__BackingField; // 0x08
	
		// Properties
		internal XRPlaneSubsystem PlaneSubsystem { [CompilerGenerated] /* 0x003BEB0C-0x003BEB1C */ set; } // 0x00C7B938-0x00C7B940
		internal BoundedPlane Plane { [CompilerGenerated] /* 0x003BEB1C-0x003BEB2C */ set; } // 0x00C7B940-0x00C7B9A8
	}

	public struct PlaneRemovedEventArgs // TypeDefIndex: 2374
	{
		// Fields
		[CompilerGenerated] // 0x003BE6A4-0x003BE6E0
		[DebuggerBrowsable] // 0x003BE6A4-0x003BE6E0
		private XRPlaneSubsystem <PlaneSubsystem>k__BackingField; // 0x00
		[CompilerGenerated] // 0x003BE6E0-0x003BE71C
		[DebuggerBrowsable] // 0x003BE6E0-0x003BE71C
		private BoundedPlane <Plane>k__BackingField; // 0x08
	
		// Properties
		internal XRPlaneSubsystem PlaneSubsystem { [CompilerGenerated] /* 0x003BEB2C-0x003BEB3C */ set; } // 0x00C7B8C8-0x00C7B8D0
		internal BoundedPlane Plane { [CompilerGenerated] /* 0x003BEB3C-0x003BEB4C */ set; } // 0x00C7B8D0-0x00C7B938
	}

	[NativeConditional] // 0x003BDD94-0x003BDE28
	[NativeHeader] // 0x003BDD94-0x003BDE28
	[NativeHeader] // 0x003BDD94-0x003BDE28
	[UsedByNativeCode] // 0x003BDD94-0x003BDE28
	public class XRPlaneSubsystem : IntegratedSubsystem<XRPlaneSubsystemDescriptor> // TypeDefIndex: 2375
	{
		// Fields
		[CompilerGenerated] // 0x003BE71C-0x003BE758
		[DebuggerBrowsable] // 0x003BE71C-0x003BE758
		private Action<PlaneAddedEventArgs> PlaneAdded; // 0x20
		[CompilerGenerated] // 0x003BE758-0x003BE794
		[DebuggerBrowsable] // 0x003BE758-0x003BE794
		private Action<PlaneUpdatedEventArgs> PlaneUpdated; // 0x28
		[CompilerGenerated] // 0x003BE794-0x003BE7D0
		[DebuggerBrowsable] // 0x003BE794-0x003BE7D0
		private Action<PlaneRemovedEventArgs> PlaneRemoved; // 0x30
	
		// Methods
		[RequiredByNativeCode] // 0x003BEB4C-0x003BEB5C
		private void InvokePlaneAddedEvent(BoundedPlane plane); // 0x00C7BD7C-0x00C7BE1C
		[RequiredByNativeCode] // 0x003BEB5C-0x003BEB6C
		private void InvokePlaneUpdatedEvent(BoundedPlane plane); // 0x00C7BE1C-0x00C7BEBC
		[RequiredByNativeCode] // 0x003BEB6C-0x003BEB7C
		private void InvokePlaneRemovedEvent(BoundedPlane removedPlane); // 0x00C7BEBC-0x00C7BF5C
	}

	[NativeHeader] // 0x003BDE28-0x003BDEA4
	[NativeType] // 0x003BDE28-0x003BDEA4
	[UsedByNativeCode] // 0x003BDE28-0x003BDEA4
	public class XRPlaneSubsystemDescriptor : IntegratedSubsystemDescriptor<XRPlaneSubsystem> // TypeDefIndex: 2376
	{
	}

	[NativeHeader] // 0x003BDEA4-0x003BDF14
	[NativeHeader] // 0x003BDEA4-0x003BDF14
	[UsedByNativeCode] // 0x003BDEA4-0x003BDF14
	public struct ReferencePoint // TypeDefIndex: 2377
	{
		// Fields
		[CompilerGenerated] // 0x003BE7D0-0x003BE80C
		[DebuggerBrowsable] // 0x003BE7D0-0x003BE80C
		private TrackableId <Id>k__BackingField; // 0x00
		[CompilerGenerated] // 0x003BE80C-0x003BE848
		[DebuggerBrowsable] // 0x003BE80C-0x003BE848
		private TrackingState <TrackingState>k__BackingField; // 0x10
		[CompilerGenerated] // 0x003BE848-0x003BE884
		[DebuggerBrowsable] // 0x003BE848-0x003BE884
		private Pose <Pose>k__BackingField; // 0x14
	}

	[NativeHeader] // 0x003BDF14-0x003BDF4C
	public struct ReferencePointUpdatedEventArgs // TypeDefIndex: 2378
	{
		// Fields
		[CompilerGenerated] // 0x003BE884-0x003BE8C0
		[DebuggerBrowsable] // 0x003BE884-0x003BE8C0
		private ReferencePoint <ReferencePoint>k__BackingField; // 0x00
		[CompilerGenerated] // 0x003BE8C0-0x003BE8FC
		[DebuggerBrowsable] // 0x003BE8C0-0x003BE8FC
		private TrackingState <PreviousTrackingState>k__BackingField; // 0x30
		[CompilerGenerated] // 0x003BE8FC-0x003BE938
		[DebuggerBrowsable] // 0x003BE8FC-0x003BE938
		private Pose <PreviousPose>k__BackingField; // 0x34
	
		// Properties
		internal ReferencePoint ReferencePoint { [CompilerGenerated] /* 0x003BEB7C-0x003BEB8C */ set; } // 0x00C7B9A8-0x00C7B9BC
		internal TrackingState PreviousTrackingState { [CompilerGenerated] /* 0x003BEB8C-0x003BEB9C */ set; } // 0x00C7B9BC-0x00C7B9C4
		internal Pose PreviousPose { [CompilerGenerated] /* 0x003BEB9C-0x003BEBAC */ set; } // 0x00C7B9C4-0x00C7BA2C
	}

	[NativeConditional] // 0x003BDF4C-0x003BDFE0
	[NativeHeader] // 0x003BDF4C-0x003BDFE0
	[NativeHeader] // 0x003BDF4C-0x003BDFE0
	[UsedByNativeCode] // 0x003BDF4C-0x003BDFE0
	public class XRReferencePointSubsystem : IntegratedSubsystem<XRReferencePointSubsystemDescriptor> // TypeDefIndex: 2379
	{
		// Fields
		[CompilerGenerated] // 0x003BE938-0x003BE974
		[DebuggerBrowsable] // 0x003BE938-0x003BE974
		private Action<ReferencePointUpdatedEventArgs> ReferencePointUpdated; // 0x20
	
		// Methods
		[RequiredByNativeCode] // 0x003BEBAC-0x003BEBBC
		private void InvokeReferencePointUpdatedEvent(ReferencePoint updatedReferencePoint, TrackingState previousTrackingState, Pose previousPose); // 0x00C7BF5C-0x00C7C034
	}

	[NativeHeader] // 0x003BDFE0-0x003BE05C
	[NativeType] // 0x003BDFE0-0x003BE05C
	[UsedByNativeCode] // 0x003BDFE0-0x003BE05C
	public class XRReferencePointSubsystemDescriptor : IntegratedSubsystemDescriptor<XRReferencePointSubsystem> // TypeDefIndex: 2380
	{
	}

	[UsedByNativeCode] // 0x003BE05C-0x003BE06C
	public enum TrackingState // TypeDefIndex: 2381
	{
		Unknown = 0,
		Tracking = 1,
		Unavailable = 2
	}

	public struct SessionTrackingStateChangedEventArgs // TypeDefIndex: 2382
	{
		// Fields
		internal XRSessionSubsystem m_Session; // 0x00
		[CompilerGenerated] // 0x003BE974-0x003BE9B0
		[DebuggerBrowsable] // 0x003BE974-0x003BE9B0
		private TrackingState <NewState>k__BackingField; // 0x08
	
		// Properties
		public TrackingState NewState { [CompilerGenerated] /* 0x003BEBBC-0x003BEBCC */ set; } // 0x00C7BA2C-0x00C7BAC4
	}

	[NativeConditional] // 0x003BE06C-0x003BE100
	[NativeHeader] // 0x003BE06C-0x003BE100
	[NativeHeader] // 0x003BE06C-0x003BE100
	[UsedByNativeCode] // 0x003BE06C-0x003BE100
	public class XRSessionSubsystem : IntegratedSubsystem<XRSessionSubsystemDescriptor> // TypeDefIndex: 2383
	{
		// Fields
		[CompilerGenerated] // 0x003BE9B0-0x003BE9EC
		[DebuggerBrowsable] // 0x003BE9B0-0x003BE9EC
		private Action<SessionTrackingStateChangedEventArgs> TrackingStateChanged; // 0x20
	
		// Methods
		[RequiredByNativeCode] // 0x003BEBCC-0x003BEBDC
		private void InvokeTrackingStateChangedEvent(TrackingState newState); // 0x00C7C034-0x00C7C0AC
	}

	[NativeHeader] // 0x003BE100-0x003BE17C
	[NativeType] // 0x003BE100-0x003BE17C
	[UsedByNativeCode] // 0x003BE100-0x003BE17C
	public class XRSessionSubsystemDescriptor : IntegratedSubsystemDescriptor<XRSessionSubsystem> // TypeDefIndex: 2384
	{
	}
}

namespace UnityEngine.Experimental.Animations
{
	public interface IAnimationJobPlayable : IPlayable // TypeDefIndex: 2386
	{
	}
}

namespace UnityEngine
{
	[AttributeUsage] // 0x003BFCDC-0x003BFD2C
	[RequiredByNativeCode] // 0x003BFCDC-0x003BFD2C
	public sealed class SharedBetweenAnimatorsAttribute : Attribute // TypeDefIndex: 2387
	{
	}

	[RequiredByNativeCode] // 0x003BFD2C-0x003BFD3C
	public abstract class StateMachineBehaviour : ScriptableObject // TypeDefIndex: 2388
	{
		// Constructors
		protected StateMachineBehaviour(); // 0x00C82C7C-0x00C82C84
	
		// Methods
		public virtual void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex); // 0x00C82C84-0x00C82C88
		public virtual void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex); // 0x00C82C88-0x00C82C8C
		public virtual void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex); // 0x00C82C8C-0x00C82C90
		public virtual void OnStateMove(Animator animator, AnimatorStateInfo stateInfo, int layerIndex); // 0x00C82C90-0x00C82C94
		public virtual void OnStateIK(Animator animator, AnimatorStateInfo stateInfo, int layerIndex); // 0x00C82C94-0x00C82C98
		public virtual void OnStateMachineEnter(Animator animator, int stateMachinePathHash); // 0x00C82C98-0x00C82C9C
		public virtual void OnStateMachineExit(Animator animator, int stateMachinePathHash); // 0x00C82C9C-0x00C82CA0
		public virtual void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller); // 0x00C82CA0-0x00C82CA4
		public virtual void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller); // 0x00C82CA4-0x00C82CA8
		public virtual void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller); // 0x00C82CA8-0x00C82CAC
		public virtual void OnStateMove(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller); // 0x00C82CAC-0x00C82CB0
		public virtual void OnStateIK(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller); // 0x00C82CB0-0x00C82CB4
		public virtual void OnStateMachineEnter(Animator animator, int stateMachinePathHash, AnimatorControllerPlayable controller); // 0x00C82CB4-0x00C82CB8
		public virtual void OnStateMachineExit(Animator animator, int stateMachinePathHash, AnimatorControllerPlayable controller); // 0x00C82CB8-0x00C82CBC
	}
}

namespace UnityEngine.Animations
{
	[NativeHeader] // 0x003BFD3C-0x003BFDD4
	[NativeHeader] // 0x003BFD3C-0x003BFDD4
	[RequiredByNativeCode] // 0x003BFD3C-0x003BFDD4
	[StaticAccessor] // 0x003BFD3C-0x003BFDD4
	public struct AnimationClipPlayable : IPlayable, IEquatable<AnimationClipPlayable> // TypeDefIndex: 2389
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
	
		// Methods
		public PlayableHandle GetHandle(); // 0x00C805F4-0x00C80688
		public bool Equals(AnimationClipPlayable other); // 0x00C80688-0x00C80750
	}
}

namespace UnityEngine.Experimental.Animations
{
	[NativeHeader] // 0x003BFDD4-0x003BFE44
	[NativeHeader] // 0x003BFDD4-0x003BFE44
	[RequiredByNativeCode] // 0x003BFDD4-0x003BFE44
	public struct AnimationHumanStream // TypeDefIndex: 2390
	{
		// Fields
		private IntPtr stream; // 0x00
	}
}

namespace UnityEngine.Animations
{
	[NativeHeader] // 0x003BFE44-0x003BFF00
	[NativeHeader] // 0x003BFE44-0x003BFF00
	[NativeHeader] // 0x003BFE44-0x003BFF00
	[RequiredByNativeCode] // 0x003BFE44-0x003BFF00
	[StaticAccessor] // 0x003BFE44-0x003BFF00
	public struct AnimationLayerMixerPlayable : IPlayable, IEquatable<AnimationLayerMixerPlayable> // TypeDefIndex: 2391
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
		private static readonly AnimationLayerMixerPlayable m_NullPlayable; // 0x00
	
		// Constructors
		internal AnimationLayerMixerPlayable(PlayableHandle handle); // 0x00C80750-0x00C80758
		static AnimationLayerMixerPlayable(); // 0x00C807F4-0x00C80954
	
		// Methods
		public PlayableHandle GetHandle(); // 0x00C80758-0x00C807EC
		public bool Equals(AnimationLayerMixerPlayable other); // 0x00C807EC-0x00C807F4
	}

	[NativeHeader] // 0x003BFF00-0x003BFFBC
	[NativeHeader] // 0x003BFF00-0x003BFFBC
	[NativeHeader] // 0x003BFF00-0x003BFFBC
	[RequiredByNativeCode] // 0x003BFF00-0x003BFFBC
	[StaticAccessor] // 0x003BFF00-0x003BFFBC
	public struct AnimationMixerPlayable : IPlayable, IEquatable<AnimationMixerPlayable> // TypeDefIndex: 2392
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
		private static readonly AnimationMixerPlayable m_NullPlayable; // 0x00
	
		// Constructors
		internal AnimationMixerPlayable(PlayableHandle handle); // 0x00C80954-0x00C8095C
		static AnimationMixerPlayable(); // 0x00C809F8-0x00C80B58
	
		// Methods
		public PlayableHandle GetHandle(); // 0x00C8095C-0x00C809F0
		public bool Equals(AnimationMixerPlayable other); // 0x00C809F0-0x00C809F8
	}

	[NativeHeader] // 0x003BFFBC-0x003C0030
	[RequiredByNativeCode] // 0x003BFFBC-0x003C0030
	[StaticAccessor] // 0x003BFFBC-0x003C0030
	internal struct AnimationMotionXToDeltaPlayable : IPlayable, IEquatable<AnimationMotionXToDeltaPlayable> // TypeDefIndex: 2393
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
		private static readonly AnimationMotionXToDeltaPlayable m_NullPlayable; // 0x00
	
		// Constructors
		private AnimationMotionXToDeltaPlayable(PlayableHandle handle); // 0x00C80B58-0x00C80B60
		static AnimationMotionXToDeltaPlayable(); // 0x00C80BFC-0x00C80D5C
	
		// Methods
		public PlayableHandle GetHandle(); // 0x00C80B60-0x00C80BF4
		public bool Equals(AnimationMotionXToDeltaPlayable other); // 0x00C80BF4-0x00C80BFC
	}

	[NativeHeader] // 0x003C0030-0x003C00EC
	[NativeHeader] // 0x003C0030-0x003C00EC
	[NativeHeader] // 0x003C0030-0x003C00EC
	[RequiredByNativeCode] // 0x003C0030-0x003C00EC
	[StaticAccessor] // 0x003C0030-0x003C00EC
	internal struct AnimationOffsetPlayable : IPlayable, IEquatable<AnimationOffsetPlayable> // TypeDefIndex: 2394
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
		private static readonly AnimationOffsetPlayable m_NullPlayable; // 0x00
	
		// Constructors
		internal AnimationOffsetPlayable(PlayableHandle handle); // 0x00C80D5C-0x00C80D64
		static AnimationOffsetPlayable(); // 0x00C80E48-0x00C80FA8
	
		// Methods
		public PlayableHandle GetHandle(); // 0x00C80D64-0x00C80E40
		public bool Equals(AnimationOffsetPlayable other); // 0x00C80E40-0x00C80E48
	}

	[NativeHeader] // 0x003C00EC-0x003C01F0
	[NativeHeader] // 0x003C00EC-0x003C01F0
	[NativeHeader] // 0x003C00EC-0x003C01F0
	[NativeHeader] // 0x003C00EC-0x003C01F0
	[NativeHeader] // 0x003C00EC-0x003C01F0
	[RequiredByNativeCode] // 0x003C00EC-0x003C01F0
	[StaticAccessor] // 0x003C00EC-0x003C01F0
	public struct AnimationPlayableOutput : IPlayableOutput // TypeDefIndex: 2395
	{
		// Fields
		private PlayableOutputHandle m_Handle; // 0x00
	}

	[NativeHeader] // 0x003C01F0-0x003C02AC
	[NativeHeader] // 0x003C01F0-0x003C02AC
	[NativeHeader] // 0x003C01F0-0x003C02AC
	[RequiredByNativeCode] // 0x003C01F0-0x003C02AC
	[StaticAccessor] // 0x003C01F0-0x003C02AC
	internal struct AnimationPosePlayable : IPlayable, IEquatable<AnimationPosePlayable> // TypeDefIndex: 2396
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
		private static readonly AnimationPosePlayable m_NullPlayable; // 0x00
	
		// Constructors
		internal AnimationPosePlayable(PlayableHandle handle); // 0x00C80FA8-0x00C80FB0
		static AnimationPosePlayable(); // 0x00C81094-0x00C811F4
	
		// Methods
		public PlayableHandle GetHandle(); // 0x00C80FB0-0x00C8108C
		public bool Equals(AnimationPosePlayable other); // 0x00C8108C-0x00C81094
	}

	[NativeHeader] // 0x003C02AC-0x003C0368
	[NativeHeader] // 0x003C02AC-0x003C0368
	[NativeHeader] // 0x003C02AC-0x003C0368
	[RequiredByNativeCode] // 0x003C02AC-0x003C0368
	[StaticAccessor] // 0x003C02AC-0x003C0368
	internal struct AnimationRemoveScalePlayable : IPlayable, IEquatable<AnimationRemoveScalePlayable> // TypeDefIndex: 2397
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
		private static readonly AnimationRemoveScalePlayable m_NullPlayable; // 0x00
	
		// Constructors
		internal AnimationRemoveScalePlayable(PlayableHandle handle); // 0x00C811F4-0x00C811FC
		static AnimationRemoveScalePlayable(); // 0x00C812E0-0x00C81504
	
		// Methods
		public PlayableHandle GetHandle(); // 0x00C811FC-0x00C812D8
		public bool Equals(AnimationRemoveScalePlayable other); // 0x00C812D8-0x00C812E0
	}
}

namespace UnityEngine.Experimental.Animations
{
	[NativeHeader] // 0x003C0368-0x003C0424
	[NativeHeader] // 0x003C0368-0x003C0424
	[NativeHeader] // 0x003C0368-0x003C0424
	[RequiredByNativeCode] // 0x003C0368-0x003C0424
	[StaticAccessor] // 0x003C0368-0x003C0424
	public struct AnimationScriptPlayable : IAnimationJobPlayable, IEquatable<AnimationScriptPlayable> // TypeDefIndex: 2398
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
		private static readonly AnimationScriptPlayable m_NullPlayable; // 0x00
	
		// Constructors
		internal AnimationScriptPlayable(PlayableHandle handle); // 0x00C82960-0x00C82968
		static AnimationScriptPlayable(); // 0x00C82A04-0x00C82C7C
	
		// Methods
		public PlayableHandle GetHandle(); // 0x00C82968-0x00C829FC
		public bool Equals(AnimationScriptPlayable other); // 0x00C829FC-0x00C82A04
	}

	[NativeHeader] // 0x003C0424-0x003C0494
	[NativeHeader] // 0x003C0424-0x003C0494
	[RequiredByNativeCode] // 0x003C0424-0x003C0494
	public struct AnimationStream // TypeDefIndex: 2399
	{
		// Fields
		private uint m_AnimatorBindingsVersion; // 0x00
		private IntPtr constant; // 0x08
		private IntPtr input; // 0x10
		private IntPtr output; // 0x18
		private IntPtr workspace; // 0x20
		private IntPtr inputStreamAccessor; // 0x28
		private IntPtr animationHandleBinder; // 0x30
	}
}

namespace UnityEngine
{
	public enum AnimatorControllerParameterType // TypeDefIndex: 2400
	{
		Float = 1,
		Int = 3,
		Bool = 4,
		Trigger = 9
	}

	internal enum StateInfoIndex // TypeDefIndex: 2401
	{
		CurrentState = 0,
		NextState = 1,
		ExitState = 2,
		InterruptedState = 3
	}

	[NativeHeader] // 0x003C0494-0x003C0504
	[NativeHeader] // 0x003C0494-0x003C0504
	[UsedByNativeCode] // 0x003C0494-0x003C0504
	public struct AnimatorClipInfo // TypeDefIndex: 2402
	{
		// Fields
		private int m_ClipInstanceID; // 0x00
		private float m_Weight; // 0x04
	}

	[NativeHeader] // 0x003C0504-0x003C0550
	[RequiredByNativeCode] // 0x003C0504-0x003C0550
	public struct AnimatorStateInfo // TypeDefIndex: 2403
	{
		// Fields
		private int m_Name; // 0x00
		private int m_Path; // 0x04
		private int m_FullPath; // 0x08
		private float m_NormalizedTime; // 0x0C
		private float m_Length; // 0x10
		private float m_Speed; // 0x14
		private float m_SpeedMultiplier; // 0x18
		private int m_Tag; // 0x1C
		private int m_Loop; // 0x20
	
		// Properties
		public int fullPathHash { get; } // 0x00C827DC-0x00C827EC 
		public float normalizedTime { get; } // 0x00C827EC-0x00C82898 
	}

	[NativeHeader] // 0x003C0550-0x003C059C
	[RequiredByNativeCode] // 0x003C0550-0x003C059C
	public struct AnimatorTransitionInfo // TypeDefIndex: 2404
	{
		// Fields
		[NativeName] // 0x003C0A5C-0x003C0A94
		private int m_FullPath; // 0x00
		[NativeName] // 0x003C0A94-0x003C0ACC
		private int m_UserName; // 0x04
		[NativeName] // 0x003C0ACC-0x003C0B04
		private int m_Name; // 0x08
		[NativeName] // 0x003C0B04-0x003C0B3C
		private bool m_HasFixedDuration; // 0x0C
		[NativeName] // 0x003C0B3C-0x003C0B74
		private float m_Duration; // 0x10
		[NativeName] // 0x003C0B74-0x003C0BAC
		private float m_NormalizedTime; // 0x14
		[NativeName] // 0x003C0BAC-0x003C0BE4
		private bool m_AnyState; // 0x18
		[NativeName] // 0x003C0BE4-0x003C0C1C
		private int m_TransitionType; // 0x1C
	
		// Properties
		public int fullPathHash { get; } // 0x00C82898-0x00C82960 
	}

	[NativeHeader] // 0x003C059C-0x003C0630
	[NativeHeader] // 0x003C059C-0x003C0630
	[NativeHeader] // 0x003C059C-0x003C0630
	[UsedByNativeCode] // 0x003C059C-0x003C0630
	public class Animator : Behaviour // TypeDefIndex: 2405
	{
		// Properties
		public AnimatorControllerParameter[] parameters { [FreeFunction] /* 0x003C0D6C-0x003C0DC0 */ get; } // 0x00C81ED0-0x00C81F3C 
		public bool hasBoundPlayables { [NativeMethod] /* 0x003C0E14-0x003C0E4C */ get; } // 0x00C82078-0x00C821AC 
	
		// Methods
		public float GetFloat(int id); // 0x00C81650-0x00C81654
		public void SetFloat(string name, float value); // 0x00C816C8-0x00C816CC
		public void SetFloat(int id, float value); // 0x00C81758-0x00C8175C
		public bool GetBool(int id); // 0x00C817E8-0x00C817EC
		public void SetBool(string name, bool value); // 0x00C81860-0x00C81868
		public void SetBool(int id, bool value); // 0x00C818EC-0x00C818F4
		public int GetInteger(int id); // 0x00C81978-0x00C8197C
		public void SetInteger(string name, int value); // 0x00C819F0-0x00C819F4
		public void SetInteger(int id, int value); // 0x00C81A78-0x00C81A7C
		public void SetTrigger(string name); // 0x00C81B00-0x00C81B04
		public void SetTrigger(int id); // 0x00C81B78-0x00C81B7C
		public void ResetTrigger(string name); // 0x00C81BF0-0x00C81BF4
		private void GetAnimatorStateInfo(int layerIndex, StateInfoIndex stateInfoIndex, out AnimatorStateInfo info); // 0x00C81C68-0x00C81CF4
		public AnimatorStateInfo GetCurrentAnimatorStateInfo(int layerIndex); // 0x00C81CF4-0x00C81D48
		public AnimatorStateInfo GetNextAnimatorStateInfo(int layerIndex); // 0x00C81D48-0x00C81D9C
		private void GetAnimatorTransitionInfo(int layerIndex, out AnimatorTransitionInfo info); // 0x00C81D9C-0x00C81E20
		public AnimatorTransitionInfo GetAnimatorTransitionInfo(int layerIndex); // 0x00C81E20-0x00C81E5C
		public bool IsInTransition(int layerIndex); // 0x00C81E5C-0x00C81ED0
		public void Play(string stateName, [UnityEngine.Internal.DefaultValue] /* 0x003C12DC-0x003C1314 */ int layer, [UnityEngine.Internal.DefaultValue] /* 0x003C1314-0x003C134C */ float normalizedTime); // 0x00C81F3C-0x00C81F80
		[FreeFunction] // 0x003C0DC0-0x003C0E14
		public void Play(int stateNameHash, [UnityEngine.Internal.DefaultValue] /* 0x003C134C-0x003C1384 */ int layer, [UnityEngine.Internal.DefaultValue] /* 0x003C1384-0x003C13BC */ float normalizedTime); // 0x00C81FEC-0x00C82078
		[NativeMethod] // 0x003C0E4C-0x003C0EA0
		public static int StringToHash(string name); // 0x00C81F80-0x00C81FEC
		[FreeFunction] // 0x003C0EA0-0x003C0EF4
		private void SetFloatString(string name, float value); // 0x00C816CC-0x00C81758
		[FreeFunction] // 0x003C0EF4-0x003C0F48
		private void SetFloatID(int id, float value); // 0x00C8175C-0x00C817E8
		[FreeFunction] // 0x003C0F48-0x003C0F9C
		private float GetFloatID(int id); // 0x00C81654-0x00C816C8
		[FreeFunction] // 0x003C0F9C-0x003C0FF0
		private void SetBoolString(string name, bool value); // 0x00C81868-0x00C818EC
		[FreeFunction] // 0x003C0FF0-0x003C1044
		private void SetBoolID(int id, bool value); // 0x00C818F4-0x00C81978
		[FreeFunction] // 0x003C1044-0x003C1098
		private bool GetBoolID(int id); // 0x00C817EC-0x00C81860
		[FreeFunction] // 0x003C1098-0x003C10EC
		private void SetIntegerString(string name, int value); // 0x00C819F4-0x00C81A78
		[FreeFunction] // 0x003C10EC-0x003C1140
		private void SetIntegerID(int id, int value); // 0x00C81A7C-0x00C81B00
		[FreeFunction] // 0x003C1140-0x003C1194
		private int GetIntegerID(int id); // 0x00C8197C-0x00C819F0
		[FreeFunction] // 0x003C1194-0x003C11E8
		private void SetTriggerString(string name); // 0x00C81B04-0x00C81B78
		[FreeFunction] // 0x003C11E8-0x003C123C
		private void SetTriggerID(int id); // 0x00C81B7C-0x00C81BF0
		[FreeFunction] // 0x003C123C-0x003C1290
		private void ResetTriggerString(string name); // 0x00C81BF4-0x00C81C68
	}

	[NativeAsStruct] // 0x003C0630-0x003C06D8
	[NativeHeader] // 0x003C0630-0x003C06D8
	[NativeHeader] // 0x003C0630-0x003C06D8
	[NativeType] // 0x003C0630-0x003C06D8
	[UsedByNativeCode] // 0x003C0630-0x003C06D8
	public class AnimatorControllerParameter // TypeDefIndex: 2406
	{
		// Fields
		internal string m_Name; // 0x10
		internal AnimatorControllerParameterType m_Type; // 0x18
		internal float m_DefaultFloat; // 0x1C
		internal int m_DefaultInt; // 0x20
		internal bool m_DefaultBool; // 0x24
	
		// Properties
		public string name { get; } // 0x00C82204-0x00C8220C 
		public int nameHash { get; } // 0x00C8220C-0x00C82214 
		public AnimatorControllerParameterType type { get; } // 0x00C82214-0x00C8221C 
	
		// Constructors
		public AnimatorControllerParameter(); // 0x00C821AC-0x00C82204
	
		// Methods
		public override bool Equals(object o); // 0x00C8221C-0x00C8230C
		public override int GetHashCode(); // 0x00C8230C-0x00C82340
	}
}

namespace UnityEngine.Animations
{
	[NativeHeader] // 0x003C06D8-0x003C07DC
	[NativeHeader] // 0x003C06D8-0x003C07DC
	[NativeHeader] // 0x003C06D8-0x003C07DC
	[NativeHeader] // 0x003C06D8-0x003C07DC
	[NativeHeader] // 0x003C06D8-0x003C07DC
	[RequiredByNativeCode] // 0x003C06D8-0x003C07DC
	[StaticAccessor] // 0x003C06D8-0x003C07DC
	public struct AnimatorControllerPlayable : IPlayable, IEquatable<AnimatorControllerPlayable> // TypeDefIndex: 2407
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
		private static readonly AnimatorControllerPlayable m_NullPlayable; // 0x00
	
		// Constructors
		internal AnimatorControllerPlayable(PlayableHandle handle); // 0x00C81504-0x00C8150C
		static AnimatorControllerPlayable(); // 0x00C815B0-0x00C81650
	
		// Methods
		public PlayableHandle GetHandle(); // 0x00C8150C-0x00C81518
		public void SetHandle(PlayableHandle handle); // 0x00C81518-0x00C815A8
		public bool Equals(AnimatorControllerPlayable other); // 0x00C815A8-0x00C815B0
	}
}

namespace UnityEngine
{
	[DefaultMember] // 0x003C07DC-0x003C0870
	[NativeHeader] // 0x003C07DC-0x003C0870
	[NativeHeader] // 0x003C07DC-0x003C0870
	[UsedByNativeCode] // 0x003C07DC-0x003C0870
	public class AnimatorOverrideController : RuntimeAnimatorController // TypeDefIndex: 2408
	{
		// Fields
		internal OnOverrideControllerDirtyCallback OnOverrideControllerDirty; // 0x18
	
		// Nested types
		internal delegate void OnOverrideControllerDirtyCallback(); // TypeDefIndex: 2409; 0x00C82378-0x00C82784
	
		// Methods
		[NativeConditional] // 0x003C1290-0x003C12DC
		[RequiredByNativeCode] // 0x003C1290-0x003C12DC
		internal static void OnInvalidateOverrideController(AnimatorOverrideController controller); // 0x00C82340-0x00C82378
	}

	[NativeHeader] // 0x003C0870-0x003C08E4
	[NativeType] // 0x003C0870-0x003C08E4
	[RequiredByNativeCode] // 0x003C0870-0x003C08E4
	public struct SkeletonBone // TypeDefIndex: 2410
	{
		// Fields
		[NativeName] // 0x003C0C1C-0x003C0C54
		public string name; // 0x00
		[NativeName] // 0x003C0C54-0x003C0C8C
		internal string parentName; // 0x08
		[NativeName] // 0x003C0C8C-0x003C0CC4
		public Vector3 position; // 0x10
		[NativeName] // 0x003C0CC4-0x003C0CFC
		public Quaternion rotation; // 0x1C
		[NativeName] // 0x003C0CFC-0x003C0D34
		public Vector3 scale; // 0x2C
	}

	[NativeHeader] // 0x003C08E4-0x003C096C
	[NativeHeader] // 0x003C08E4-0x003C096C
	[NativeType] // 0x003C08E4-0x003C096C
	public struct HumanLimit // TypeDefIndex: 2411
	{
		// Fields
		private Vector3 m_Min; // 0x00
		private Vector3 m_Max; // 0x0C
		private Vector3 m_Center; // 0x18
		private float m_AxisLength; // 0x24
		private int m_UseDefaultValues; // 0x28
	}

	[NativeHeader] // 0x003C096C-0x003C09E0
	[NativeType] // 0x003C096C-0x003C09E0
	[RequiredByNativeCode] // 0x003C096C-0x003C09E0
	public struct HumanBone // TypeDefIndex: 2412
	{
		// Fields
		private string m_BoneName; // 0x00
		private string m_HumanName; // 0x08
		[NativeName] // 0x003C0D34-0x003C0D6C
		public HumanLimit limit; // 0x10
	}

	[ExcludeFromObjectFactory] // 0x003C09E0-0x003C0A3C
	[NativeHeader] // 0x003C09E0-0x003C0A3C
	[UsedByNativeCode] // 0x003C09E0-0x003C0A3C
	public class RuntimeAnimatorController : UnityEngine.Object // TypeDefIndex: 2413
	{
	}

	internal enum AnimationEventSource // TypeDefIndex: 2414
	{
		NoSource = 0,
		Legacy = 1,
		Animator = 2
	}

	[Serializable]
	[RequiredByNativeCode] // 0x003C0A3C-0x003C0A4C
	public sealed class AnimationEvent // TypeDefIndex: 2415
	{
		// Fields
		internal float m_Time; // 0x10
		internal string m_FunctionName; // 0x18
		internal string m_StringParameter; // 0x20
		internal UnityEngine.Object m_ObjectReferenceParameter; // 0x28
		internal float m_FloatParameter; // 0x30
		internal int m_IntParameter; // 0x34
		internal int m_MessageOptions; // 0x38
		internal AnimationEventSource m_Source; // 0x3C
		internal AnimationState m_StateSender; // 0x40
		internal AnimatorStateInfo m_AnimatorStateInfo; // 0x48
		internal AnimatorClipInfo m_AnimatorClipInfo; // 0x6C
	
		// Constructors
		public AnimationEvent(); // 0x00C80588-0x00C805F4
	}

	[UsedByNativeCode] // 0x003C0A4C-0x003C0A5C
	public sealed class AnimationState : TrackedReference // TypeDefIndex: 2416
	{
	}

	[NativeHeader] // 0x003C24CC-0x003C2530
	[StaticAccessor] // 0x003C24CC-0x003C2530
	public sealed class Event // TypeDefIndex: 2418
	{
		// Fields
		[NonSerialized]
		internal IntPtr m_Ptr; // 0x10
		private static Event s_Current; // 0x00
		private static Event s_MasterEvent; // 0x08
		[CompilerGenerated] // 0x003C2ACC-0x003C2ADC
		private static Dictionary<string, int> <>f__switch$map0; // 0x10
	
		// Properties
		[NativeProperty] // 0x003C484C-0x003C488C
		public EventType rawType { get; } // 0x0093E07C-0x0093E0E8 
		[NativeProperty] // 0x003C488C-0x003C48CC
		public Vector2 mousePosition { get; } // 0x0093E0E8-0x0093E110 
		[NativeProperty] // 0x003C48CC-0x003C490C
		public Vector2 delta { get; } // 0x0093E184-0x0093E1AC 
		[NativeProperty] // 0x003C490C-0x003C494C
		public EventModifiers modifiers { get; set; } // 0x0093E220-0x0093E28C 0x0093E28C-0x0093E300
		[NativeProperty] // 0x003C494C-0x003C498C
		public int clickCount { get; } // 0x0093E300-0x0093E36C 
		[NativeProperty] // 0x003C498C-0x003C49CC
		public char character { get; set; } // 0x0093E36C-0x0093E3D8 0x0093E3D8-0x0093E44C
		[NativeProperty] // 0x003C49CC-0x003C4A0C
		public KeyCode keyCode { get; set; } // 0x0093E44C-0x0093E4B8 0x0093E4B8-0x0093E52C
		[NativeProperty] // 0x003C4A0C-0x003C4A4C
		public int displayIndex { set; } // 0x0093E52C-0x0093E5A0
		public EventType type { [FreeFunction] /* 0x003C3638-0x003C3680 */ get; [FreeFunction] /* 0x003C3680-0x003C36C8 */ set; } // 0x0093E5A0-0x0093E60C 0x0093E60C-0x0093E680
		public string commandName { [FreeFunction] /* 0x003C36C8-0x003C3710 */ get; } // 0x0093E680-0x0093E6EC 
		public bool shift { get; } // 0x0093EA9C-0x0093EAB4 
		public bool alt { get; } // 0x0093EAB4-0x0093EACC 
		public static Event current { get; } // 0x0093EACC-0x0093EB1C 
		public bool isKey { get; } // 0x0093EB1C-0x0093EB3C 
		public bool isMouse { get; } // 0x0093EB3C-0x0093EB78 
	
		// Constructors
		public Event(); // 0x0093DFAC-0x0093DFDC
		public Event(int displayIndex); // 0x0093E048-0x0093E07C
	
		// Methods
		[NativeMethod] // 0x003C3710-0x003C3748
		private void Internal_Use(); // 0x0093E6EC-0x0093E758
		[FreeFunction] // 0x003C3748-0x003C3790
		private static IntPtr Internal_Create(int displayIndex); // 0x0093DFDC-0x0093E048
		[FreeFunction] // 0x003C3790-0x003C37D8
		private static void Internal_Destroy(IntPtr ptr); // 0x0093E758-0x0093E7C4
		[FreeFunction] // 0x003C37D8-0x003C3820
		public EventType GetTypeForControl(int controlID); // 0x0093E7C4-0x0093E838
		public static bool PopEvent(Event outEvent); // 0x0093E838-0x0093E8A4
		private static void Internal_SetNativeEvent(IntPtr ptr); // 0x0093E8A4-0x0093E910
		[RequiredByNativeCode] // 0x003C3820-0x003C3830
		internal static void Internal_MakeMasterEventCurrent(int displayIndex); // 0x0093E910-0x0093E9E4
		~Event(); // 0x0093E9E4-0x0093EA9C
		public static Event KeyboardEvent(string key); // 0x0093EB78-0x00940318
		public override int GetHashCode(); // 0x00940318-0x009403C8
		public override bool Equals(object obj); // 0x009403C8-0x00940614
		public override string ToString(); // 0x00940614-0x00940E48
		public void Use(); // 0x00940E48-0x00940F94
		private void get_mousePosition_Injected(out Vector2 ret); // 0x0093E110-0x0093E184
		private void get_delta_Injected(out Vector2 ret); // 0x0093E1AC-0x0093E220
	}

	public enum EventType // TypeDefIndex: 2419
	{
		MouseDown = 0,
		mouseDown = 0,
		MouseUp = 1,
		mouseUp = 1,
		MouseMove = 2,
		mouseMove = 2,
		MouseDrag = 3,
		mouseDrag = 3,
		KeyDown = 4,
		keyDown = 4,
		KeyUp = 5,
		keyUp = 5,
		ScrollWheel = 6,
		scrollWheel = 6,
		Repaint = 7,
		repaint = 7,
		Layout = 8,
		layout = 8,
		DragUpdated = 9,
		dragUpdated = 9,
		DragPerform = 10,
		dragPerform = 10,
		Ignore = 11,
		ignore = 11,
		Used = 12,
		used = 12,
		ValidateCommand = 13,
		ExecuteCommand = 14,
		DragExited = 15,
		ContextClick = 16,
		MouseEnterWindow = 20,
		MouseLeaveWindow = 21
	}

	[Flags] // 0x003C2530-0x003C2540
	public enum EventModifiers // TypeDefIndex: 2420
	{
		None = 0,
		Shift = 1,
		Control = 2,
		Alt = 4,
		Command = 8,
		Numeric = 16,
		CapsLock = 32,
		FunctionKey = 64
	}

	[NativeHeader] // 0x003C2540-0x003C25A0
	[NativeHeader] // 0x003C2540-0x003C25A0
	public class GUI // TypeDefIndex: 2421
	{
		// Fields
		private static int s_ScrollControlId; // 0x00
		private static int s_HotTextField; // 0x04
		private static readonly int s_BoxHash; // 0x08
		private static readonly int s_ButonHash; // 0x0C
		private static readonly int s_RepeatButtonHash; // 0x10
		private static readonly int s_ToggleHash; // 0x14
		private static readonly int s_ButtonGridHash; // 0x18
		private static readonly int s_SliderHash; // 0x1C
		private static readonly int s_BeginGroupHash; // 0x20
		private static readonly int s_ScrollviewHash; // 0x24
		[CompilerGenerated] // 0x003C2F20-0x003C2F5C
		[DebuggerBrowsable] // 0x003C2F20-0x003C2F5C
		private static int <scrollTroughSide>k__BackingField; // 0x28
		[CompilerGenerated] // 0x003C2F5C-0x003C2F98
		[DebuggerBrowsable] // 0x003C2F5C-0x003C2F98
		private static DateTime <nextScrollStepTime>k__BackingField; // 0x30
		private static GUISkin s_Skin; // 0x38
		private static readonly GenericStack s_ScrollViewStates; // 0x40
	
		// Properties
		public static bool changed { set; } // 0x00941224-0x00941290
		public static bool enabled { get; set; } // 0x00941290-0x009412E8 0x009412E8-0x00941354
		internal static bool usePageScrollbars { get; } // 0x00941354-0x009413AC 
		internal static int scrollTroughSide { [CompilerGenerated] /* 0x003C3868-0x003C3878 */ get; [CompilerGenerated] /* 0x003C3878-0x003C3888 */ set; } // 0x009418CC-0x00941934 0x00941934-0x009419A0
		internal static DateTime nextScrollStepTime { [CompilerGenerated] /* 0x003C3888-0x003C3898 */ get; [CompilerGenerated] /* 0x003C3898-0x003C38A8 */ set; } // 0x009419A0-0x00941A08 0x009411B8-0x00941224
		public static GUISkin skin { get; set; } // 0x00941BB0-0x00941C1C 0x00941A08-0x00941A70
	
		// Nested types
		public enum ToolbarButtonSize // TypeDefIndex: 2422
		{
			Fixed = 0,
			FitToContents = 1
		}
	
		public delegate void WindowFunction(int id); // TypeDefIndex: 2423; 0x0094A4E4-0x0094A924
	
		// Constructors
		static GUI(); // 0x00940F94-0x009411B8
	
		// Methods
		private static void GrabMouseControl(int id); // 0x009413AC-0x00941418
		private static bool HasMouseControl(int id); // 0x00941418-0x00941484
		private static void ReleaseMouseControl(); // 0x00941484-0x009414DC
		[FreeFunction] // 0x003C3830-0x003C3868
		public static void SetNextControlName(string name); // 0x009414DC-0x00941548
		internal static void InternalRepaintEditorWindow(); // 0x00941548-0x009415A0
		private static Rect Internal_DoModalWindow(int id, int instanceID, Rect clientRect, WindowFunction func, GUIContent content, GUIStyle style, object skin); // 0x009415A0-0x0094166C
		private static Rect Internal_DoWindow(int id, int instanceID, Rect clientRect, WindowFunction func, GUIContent title, GUIStyle style, object skin, bool forceRectOnLayout); // 0x00941728-0x00941800
		internal static void DoSetSkin(GUISkin newSkin); // 0x00941AFC-0x00941BB0
		public static void Label(Rect position, string text); // 0x00941D28-0x00941E08
		public static void Label(Rect position, string text, GUIStyle style); // 0x00941F78-0x0094204C
		public static void Label(Rect position, GUIContent content, GUIStyle style); // 0x00941ED0-0x00941F78
		public static void Box(Rect position, string text); // 0x00942228-0x00942308
		public static void Box(Rect position, GUIContent content, GUIStyle style); // 0x00942310-0x0094245C
		public static bool Button(Rect position, string text); // 0x009424B8-0x00942598
		public static bool Button(Rect position, GUIContent content); // 0x00942678-0x00942728
		public static bool Button(Rect position, string text, GUIStyle style); // 0x00942728-0x009427FC
		public static bool Button(Rect position, GUIContent content, GUIStyle style); // 0x009425A0-0x00942678
		private static bool DoRepeatButton(Rect position, GUIContent content, GUIStyle style, FocusType focusType); // 0x009428D4-0x00942BC0
		public static string TextField(Rect position, string text); // 0x00942BC8-0x00942CEC
		internal static string PasswordFieldGetStrToShow(string password, char maskChar); // 0x00942DF8-0x00942F44
		internal static void DoTextField(Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style); // 0x00942D28-0x00942DF0
		internal static void DoTextField(Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style, string secureText); // 0x00942F44-0x0094301C
		internal static void DoTextField(Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style, string secureText, char maskChar); // 0x0094301C-0x00943364
		private static void HandleTextFieldEventForTouchscreen(Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style, string secureText, char maskChar, TextEditor editor); // 0x00943540-0x009439B4
		private static void HandleTextFieldEventForDesktop(Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style, TextEditor editor); // 0x009439B4-0x0094414C
		public static int Toolbar(Rect position, int selected, GUIContent[] contents, GUIStyle style, ToolbarButtonSize buttonSize); // 0x00945034-0x009450F4
		internal static int Toolbar(Rect position, int selected, GUIContent[] contents, string[] controlNames, GUIStyle style, ToolbarButtonSize buttonSize); // 0x009450F4-0x00945220
		internal static void FindStyles(ref GUIStyle style, out GUIStyle firstStyle, out GUIStyle midStyle, out GUIStyle lastStyle, string first, string mid, string last); // 0x00945220-0x00945400
		internal static int CalcTotalHorizSpacing(int xCount, GUIStyle style, GUIStyle firstStyle, GUIStyle midStyle, GUIStyle lastStyle); // 0x00945F54-0x009461E8
		private static bool DoControl(Rect position, int id, bool on, GUIContent content, GUIStyle style); // 0x00946278-0x00946560
		private static void DoLabel(Rect position, GUIContent content, GUIStyle style); // 0x0094204C-0x00942228
		internal static bool DoButton(Rect position, int id, GUIContent content, GUIStyle style); // 0x00942824-0x009428D4
		private static int DoButtonGrid(Rect position, int selected, GUIContent[] contents, string[] controlNames, int xCount, GUIStyle style, GUIStyle firstStyle, GUIStyle midStyle, GUIStyle lastStyle, ToolbarButtonSize buttonSize); // 0x00945400-0x00945DE4
		private static Rect[] CalcMouseRects(Rect position, GUIContent[] contents, int xCount, float elemWidth, float elemHeight, GUIStyle style, GUIStyle firstStyle, GUIStyle midStyle, GUIStyle lastStyle, bool addBorders, ToolbarButtonSize buttonSize); // 0x00946734-0x00946DC8
		public static float Slider(Rect position, float value, float size, float start, float end, GUIStyle slider, GUIStyle thumb, bool horiz, int id); // 0x00946E5C-0x00947020
		public static float HorizontalScrollbar(Rect position, float value, float size, float leftValue, float rightValue, GUIStyle style); // 0x00947020-0x009471F0
		internal static bool ScrollerRepeatButton(int scrollerID, Rect rect, GUIStyle style); // 0x00947B4C-0x00947DE4
		public static float VerticalScrollbar(Rect position, float value, float size, float topValue, float bottomValue, GUIStyle style); // 0x00947DE4-0x00947FB4
		internal static float Scroller(Rect position, float value, float size, float leftValue, float rightValue, GUIStyle slider, GUIStyle thumb, GUIStyle leftButton, GUIStyle rightButton, bool horiz); // 0x00947548-0x00947B4C
		public static void BeginGroup(Rect position, GUIContent content, GUIStyle style); // 0x00947FB4-0x00948098
		internal static void BeginGroup(Rect position, GUIContent content, GUIStyle style, Vector2 scrollOffset); // 0x00948098-0x0094831C
		public static void EndGroup(); // 0x009483C4-0x009483D8
		internal static Vector2 BeginScrollView(Rect position, Vector2 scrollPosition, Rect viewRect, bool alwaysShowHorizontal, bool alwaysShowVertical, GUIStyle horizontalScrollbar, GUIStyle verticalScrollbar, GUIStyle background); // 0x00948430-0x009492B4
		public static void EndScrollView(bool handleScrollWheel); // 0x0094938C-0x00949774
		public static Rect Window(int id, Rect clientRect, WindowFunction func, string text); // 0x00949778-0x0094987C
		public static Rect ModalWindow(int id, Rect clientRect, WindowFunction func, string text, GUIStyle style); // 0x00949970-0x00949A68
		private static Rect DoWindow(int id, Rect clientRect, WindowFunction func, GUIContent title, GUIStyle style, GUISkin skin, bool forceRectOnLayout); // 0x00949884-0x00949970
		private static Rect DoModalWindow(int id, Rect clientRect, WindowFunction func, GUIContent content, GUIStyle style, GUISkin skin); // 0x00949A68-0x00949B44
		[RequiredByNativeCode] // 0x003C38A8-0x003C38B8
		internal static void CallWindowDelegate(WindowFunction func, int id, int instanceID, GUISkin _skin, int forceRect, float width, float height, GUIStyle style); // 0x00949B44-0x00949E9C
		private static void Internal_DoModalWindow_Injected(int id, int instanceID, ref Rect clientRect, WindowFunction func, GUIContent content, GUIStyle style, object skin, out Rect ret); // 0x0094166C-0x00941728
		private static void Internal_DoWindow_Injected(int id, int instanceID, ref Rect clientRect, WindowFunction func, GUIContent title, GUIStyle style, object skin, bool forceRectOnLayout, out Rect ret); // 0x00941800-0x009418CC
	}

	[NativeHeader] // 0x003C25A0-0x003C2660
	[NativeHeader] // 0x003C25A0-0x003C2660
	[VisibleToOtherModules] // 0x003C25A0-0x003C2660
	internal sealed class GUIClip // TypeDefIndex: 2424
	{
		// Properties
		internal static Rect visibleRect { [FreeFunction] /* 0x003C38B8-0x003C38F0 */ get; } // 0x009465B4-0x009465E0 
	
		// Methods
		[VisibleToOtherModules] // 0x003C38F0-0x003C3968
		internal static void Internal_Push(Rect screenRect, Vector2 scrollOffset, Vector2 renderOffset, bool resetOffset); // 0x0094AD10-0x0094AD4C
		[VisibleToOtherModules] // 0x003C3968-0x003C39E0
		internal static void Internal_Pop(); // 0x009483D8-0x00948430
		internal static void Push(Rect screenRect, Vector2 scrollOffset, Vector2 renderOffset, bool resetOffset); // 0x009483BC-0x009483C4
		internal static void Pop(); // 0x00949774-0x00949778
		private static void get_visibleRect_Injected(out Rect ret); // 0x0094ACA4-0x0094AD10
		private static void Internal_Push_Injected(ref Rect screenRect, ref Vector2 scrollOffset, ref Vector2 renderOffset, bool resetOffset); // 0x0094AD4C-0x0094AE24
	}

	[Serializable]
	[NativeHeader] // 0x003C2660-0x003C26D0
	[RequiredByNativeCode] // 0x003C2660-0x003C26D0
	public class GUIContent // TypeDefIndex: 2425
	{
		// Fields
		[SerializeField] // 0x003C2F98-0x003C2FA8
		private string m_Text; // 0x10
		[SerializeField] // 0x003C2FA8-0x003C2FB8
		private Texture m_Image; // 0x18
		[SerializeField] // 0x003C2FB8-0x003C2FC8
		private string m_Tooltip; // 0x20
		private static readonly GUIContent s_Text; // 0x00
		private static readonly GUIContent s_Image; // 0x08
		private static readonly GUIContent s_TextImage; // 0x10
		public static GUIContent none; // 0x18
	
		// Properties
		public string text { get; set; } // 0x00942DF0-0x00942DF8 0x00943364-0x0094336C
		public Texture image { set; } // 0x0094AF90-0x0094AF98
		public string tooltip { get; set; } // 0x009465AC-0x009465B4 0x0094AF98-0x0094AFA0
	
		// Constructors
		public GUIContent(); // 0x0094AE24-0x0094AE90
		public GUIContent(string text); // 0x0094AE90-0x0094AEFC
		public GUIContent(string text, Texture image, string tooltip); // 0x0094AEFC-0x0094AF90
		public GUIContent(GUIContent src); // 0x0094AFA0-0x0094B06C
		static GUIContent(); // 0x0094B390-0x0094B448
	
		// Methods
		internal static GUIContent Temp(string t); // 0x00941E08-0x00941EC8
		internal static GUIContent Temp(Texture i); // 0x0094B06C-0x0094B12C
		[VisibleToOtherModules] // 0x003C39E0-0x003C3A58
		internal static void ClearStaticCache(); // 0x0094B12C-0x0094B258
		internal static GUIContent[] Temp(string[] texts); // 0x0094B258-0x0094B390
	}

	public enum FocusType // TypeDefIndex: 2426
	{
		Native = 0,
		Keyboard = 1,
		Passive = 2
	}

	public class GUILayout // TypeDefIndex: 2427
	{
		// Methods
		public static void Label(string text, params /* 0x003C46FC-0x003C470C */ GUILayoutOption[] options); // 0x0094B448-0x0094B500
		public static void Label(GUIContent content, params /* 0x003C470C-0x003C471C */ GUILayoutOption[] options); // 0x0094B5D8-0x0094B660
		public static void Label(string text, GUIStyle style, params /* 0x003C471C-0x003C472C */ GUILayoutOption[] options); // 0x0094B660-0x0094B6E0
		private static void DoLabel(GUIContent content, GUIStyle style, GUILayoutOption[] options); // 0x0094B500-0x0094B5D8
		public static void Box(Texture image, params /* 0x003C472C-0x003C473C */ GUILayoutOption[] options); // 0x0094B75C-0x0094B814
		public static void Box(string text, GUIStyle style, params /* 0x003C473C-0x003C474C */ GUILayoutOption[] options); // 0x0094B8EC-0x0094B96C
		private static void DoBox(GUIContent content, GUIStyle style, GUILayoutOption[] options); // 0x0094B814-0x0094B8EC
		public static bool Button(string text, params /* 0x003C474C-0x003C475C */ GUILayoutOption[] options); // 0x0094B96C-0x0094BA24
		public static bool Button(string text, GUIStyle style, params /* 0x003C475C-0x003C476C */ GUILayoutOption[] options); // 0x0094BAFC-0x0094BB7C
		private static bool DoButton(GUIContent content, GUIStyle style, GUILayoutOption[] options); // 0x0094BA24-0x0094BAFC
		public static string TextField(string text, int maxLength, params /* 0x003C476C-0x003C477C */ GUILayoutOption[] options); // 0x0094BB7C-0x0094BC10
		public static string TextField(string text, GUIStyle style, params /* 0x003C477C-0x003C478C */ GUILayoutOption[] options); // 0x0094BE08-0x0094BE24
		public static string TextArea(string text, GUIStyle style, params /* 0x003C478C-0x003C479C */ GUILayoutOption[] options); // 0x0094BE24-0x0094BE40
		private static string DoTextField(string text, int maxLength, bool multiline, GUIStyle style, GUILayoutOption[] options); // 0x0094BC10-0x0094BE08
		public static int Toolbar(int selected, string[] texts, GUIStyle style, params /* 0x003C479C-0x003C47AC */ GUILayoutOption[] options); // 0x0094BE50-0x0094BEE8
		public static int Toolbar(int selected, GUIContent[] contents, GUIStyle style, params /* 0x003C47AC-0x003C47BC */ GUILayoutOption[] options); // 0x0094BEE8-0x0094BEF8
		public static int Toolbar(int selected, GUIContent[] contents, GUIStyle style, GUI.ToolbarButtonSize buttonSize, params /* 0x003C47BC-0x003C47CC */ GUILayoutOption[] options); // 0x0094BEF8-0x0094C238
		public static void Space(float pixels); // 0x0094C2CC-0x0094C5D8
		public static void FlexibleSpace(); // 0x0094C6C4-0x0094C960
		public static void BeginHorizontal(params /* 0x003C47CC-0x003C47DC */ GUILayoutOption[] options); // 0x0094CA90-0x0094CB30
		public static void BeginHorizontal(GUIContent content, GUIStyle style, params /* 0x003C47DC-0x003C47EC */ GUILayoutOption[] options); // 0x0094CB30-0x0094CCC8
		public static void EndHorizontal(); // 0x0094CFD0-0x0094D02C
		public static void BeginVertical(params /* 0x003C47EC-0x003C47FC */ GUILayoutOption[] options); // 0x0094D2CC-0x0094D36C
		public static void BeginVertical(GUIContent content, GUIStyle style, params /* 0x003C47FC-0x003C480C */ GUILayoutOption[] options); // 0x0094D36C-0x0094D508
		public static void EndVertical(); // 0x0094D508-0x0094D564
		public static void BeginArea(Rect screenRect); // 0x0094D564-0x0094D62C
		public static void BeginArea(Rect screenRect, GUIContent content, GUIStyle style); // 0x0094D62C-0x0094D900
		public static void EndArea(); // 0x0094DBCC-0x0094DDAC
		public static Vector2 BeginScrollView(Vector2 scrollPosition, params /* 0x003C480C-0x003C481C */ GUILayoutOption[] options); // 0x0094DDAC-0x0094DE7C
		public static Vector2 BeginScrollView(Vector2 scrollPosition, bool alwaysShowHorizontal, bool alwaysShowVertical, GUIStyle horizontalScrollbar, GUIStyle verticalScrollbar, GUIStyle background, params /* 0x003C481C-0x003C482C */ GUILayoutOption[] options); // 0x0094DE94-0x0094E204
		public static void EndScrollView(); // 0x0094E204-0x0094E20C
		internal static void EndScrollView(bool handleScrollWheel); // 0x0094E20C-0x0094E294
		public static GUILayoutOption Width(float width); // 0x0094A064-0x0094A0F4
		public static GUILayoutOption MinWidth(float minWidth); // 0x0094E2D0-0x0094E364
		public static GUILayoutOption MaxWidth(float maxWidth); // 0x0094E364-0x0094E3F8
		public static GUILayoutOption Height(float height); // 0x0094A0F4-0x0094A188
		public static GUILayoutOption MinHeight(float minHeight); // 0x0094E3F8-0x0094E48C
		public static GUILayoutOption ExpandWidth(bool expand); // 0x0094C9F8-0x0094CA90
		public static GUILayoutOption ExpandHeight(bool expand); // 0x0094C960-0x0094C9F8
	}

	public sealed class GUILayoutOption // TypeDefIndex: 2428
	{
		// Fields
		internal Type type; // 0x10
		internal object value; // 0x18
	
		// Nested types
		internal enum Type // TypeDefIndex: 2429
		{
			fixedWidth = 0,
			fixedHeight = 1,
			minWidth = 2,
			maxWidth = 3,
			minHeight = 4,
			maxHeight = 5,
			stretchWidth = 6,
			stretchHeight = 7,
			alignStart = 8,
			alignMiddle = 9,
			alignEnd = 10,
			alignJustify = 11,
			equalSize = 12,
			spacing = 13
		}
	
		// Constructors
		internal GUILayoutOption(Type type, object value); // 0x0094E294-0x0094E2D0
	}

	[NativeHeader] // 0x003C26D0-0x003C2708
	public class GUILayoutUtility // TypeDefIndex: 2430
	{
		// Fields
		private static readonly Dictionary<int, LayoutCache> s_StoredLayouts; // 0x00
		private static readonly Dictionary<int, LayoutCache> s_StoredWindows; // 0x08
		internal static LayoutCache current; // 0x10
		internal static readonly Rect kDummyRect; // 0x18
		private static GUIStyle s_SpaceStyle; // 0x28
	
		// Properties
		internal static GUIStyle spaceStyle { get; } // 0x0094C5D8-0x0094C6C4 
	
		// Nested types
		[VisibleToOtherModules] // 0x003C2708-0x003C2780
		internal sealed class LayoutCache // TypeDefIndex: 2431
		{
			// Fields
			[VisibleToOtherModules] // 0x003C3004-0x003C307C
			internal GUILayoutGroup topLevel; // 0x10
			internal GenericStack layoutGroups; // 0x18
			internal GUILayoutGroup windows; // 0x20
	
			// Constructors
			[VisibleToOtherModules] // 0x003C3AD0-0x003C3B48
			internal LayoutCache(); // 0x0095287C-0x00952944
		}
	
		// Constructors
		static GUILayoutUtility(); // 0x00953D68-0x00953E70
	
		// Methods
		private static Rect Internal_GetWindowRect(int windowID); // 0x00952698-0x00952718
		private static void Internal_MoveWindow(int windowID, Rect r); // 0x0095278C-0x00952808
		[VisibleToOtherModules] // 0x003C3A58-0x003C3AD0
		internal static LayoutCache SelectIDList(int instanceID, bool isWindow); // 0x00949E9C-0x0094A064
		internal static void Begin(int instanceID); // 0x00952944-0x00952BB4
		internal static void BeginWindow(int windowID, GUIStyle style, GUILayoutOption[] options); // 0x0094A188-0x0094A4E4
		internal static void Layout(); // 0x0094A924-0x0094ABFC
		internal static void LayoutFromEditorWindow(); // 0x00953188-0x009533AC
		internal static void LayoutFreeGroup(GUILayoutGroup toplevel); // 0x00952C0C-0x00952E0C
		private static void LayoutSingleGroup(GUILayoutGroup i); // 0x00952E0C-0x00953188
		private static GUILayoutGroup CreateGUILayoutGroupInstanceOfType(Type LayoutType); // 0x009533AC-0x00953524
		internal static GUILayoutGroup BeginLayoutGroup(GUIStyle style, GUILayoutOption[] options, Type layoutType); // 0x0094CCC8-0x0094CFD0
		internal static void EndLayoutGroup(); // 0x0094D02C-0x0094D2CC
		internal static GUILayoutGroup BeginLayoutArea(GUIStyle style, Type layoutType); // 0x0094D900-0x0094DBCC
		public static Rect GetRect(GUIContent content, GUIStyle style); // 0x00953524-0x0095359C
		public static Rect GetRect(GUIContent content, GUIStyle style, params /* 0x003C482C-0x003C483C */ GUILayoutOption[] options); // 0x0094B6E0-0x0094B75C
		private static Rect DoGetRect(GUIContent content, GUIStyle style, GUILayoutOption[] options); // 0x0095359C-0x00953914
		public static Rect GetRect(float width, float height, GUIStyle style, params /* 0x003C483C-0x003C484C */ GUILayoutOption[] options); // 0x0094C238-0x0094C2CC
		private static Rect DoGetRect(float minWidth, float maxWidth, float minHeight, float maxHeight, GUIStyle style, GUILayoutOption[] options); // 0x00953A64-0x00953C7C
		private static void Internal_GetWindowRect_Injected(int windowID, out Rect ret); // 0x00952718-0x0095278C
		private static void Internal_MoveWindow_Injected(int windowID, ref Rect r); // 0x00952808-0x0095287C
	}

	[Serializable]
	[NativeHeader] // 0x003C2780-0x003C27B8
	public sealed class GUISettings // TypeDefIndex: 2432
	{
		// Fields
		[SerializeField] // 0x003C307C-0x003C308C
		private bool m_DoubleClickSelectsWord; // 0x10
		[SerializeField] // 0x003C308C-0x003C309C
		private bool m_TripleClickSelectsLine; // 0x11
		[SerializeField] // 0x003C309C-0x003C30AC
		private Color m_CursorColor; // 0x14
		[SerializeField] // 0x003C30AC-0x003C30BC
		private float m_CursorFlashSpeed; // 0x24
		[SerializeField] // 0x003C30BC-0x003C30CC
		private Color m_SelectionColor; // 0x28
	
		// Properties
		public bool doubleClickSelectsWord { get; } // 0x00944260-0x00944268 
		public bool tripleClickSelectsLine { get; } // 0x00944324-0x0094432C 
		public Color cursorColor { get; } // 0x009543FC-0x00954408 
		public float cursorFlashSpeed { get; } // 0x00954408-0x0095441C 
		public Color selectionColor { get; } // 0x0095441C-0x00954428 
	
		// Constructors
		public GUISettings(); // 0x00954320-0x009543A4
	
		// Methods
		private static float Internal_GetCursorFlashSpeed(); // 0x009543A4-0x009543FC
	}

	[Serializable]
	[AssetFileNameExtension] // 0x003C27B8-0x003C2854
	[ExecuteInEditMode] // 0x003C27B8-0x003C2854
	[RequiredByNativeCode] // 0x003C27B8-0x003C2854
	public sealed class GUISkin : ScriptableObject // TypeDefIndex: 2433
	{
		// Fields
		[SerializeField] // 0x003C30CC-0x003C30DC
		private Font m_Font; // 0x18
		[SerializeField] // 0x003C30DC-0x003C30EC
		private GUIStyle m_box; // 0x20
		[SerializeField] // 0x003C30EC-0x003C30FC
		private GUIStyle m_button; // 0x28
		[SerializeField] // 0x003C30FC-0x003C310C
		private GUIStyle m_toggle; // 0x30
		[SerializeField] // 0x003C310C-0x003C311C
		private GUIStyle m_label; // 0x38
		[SerializeField] // 0x003C311C-0x003C312C
		private GUIStyle m_textField; // 0x40
		[SerializeField] // 0x003C312C-0x003C313C
		private GUIStyle m_textArea; // 0x48
		[SerializeField] // 0x003C313C-0x003C314C
		private GUIStyle m_window; // 0x50
		[SerializeField] // 0x003C314C-0x003C315C
		private GUIStyle m_horizontalSlider; // 0x58
		[SerializeField] // 0x003C315C-0x003C316C
		private GUIStyle m_horizontalSliderThumb; // 0x60
		[SerializeField] // 0x003C316C-0x003C317C
		private GUIStyle m_verticalSlider; // 0x68
		[SerializeField] // 0x003C317C-0x003C318C
		private GUIStyle m_verticalSliderThumb; // 0x70
		[SerializeField] // 0x003C318C-0x003C319C
		private GUIStyle m_horizontalScrollbar; // 0x78
		[SerializeField] // 0x003C319C-0x003C31AC
		private GUIStyle m_horizontalScrollbarThumb; // 0x80
		[SerializeField] // 0x003C31AC-0x003C31BC
		private GUIStyle m_horizontalScrollbarLeftButton; // 0x88
		[SerializeField] // 0x003C31BC-0x003C31CC
		private GUIStyle m_horizontalScrollbarRightButton; // 0x90
		[SerializeField] // 0x003C31CC-0x003C31DC
		private GUIStyle m_verticalScrollbar; // 0x98
		[SerializeField] // 0x003C31DC-0x003C31EC
		private GUIStyle m_verticalScrollbarThumb; // 0xA0
		[SerializeField] // 0x003C31EC-0x003C31FC
		private GUIStyle m_verticalScrollbarUpButton; // 0xA8
		[SerializeField] // 0x003C31FC-0x003C320C
		private GUIStyle m_verticalScrollbarDownButton; // 0xB0
		[SerializeField] // 0x003C320C-0x003C321C
		private GUIStyle m_ScrollView; // 0xB8
		[SerializeField] // 0x003C321C-0x003C322C
		internal GUIStyle[] m_CustomStyles; // 0xC0
		[SerializeField] // 0x003C322C-0x003C323C
		private GUISettings m_Settings; // 0xC8
		internal static GUIStyle ms_Error; // 0x00
		private Dictionary<string, GUIStyle> m_Styles; // 0xD0
		internal static SkinChangedDelegate m_SkinChanged; // 0x08
		internal static GUISkin current; // 0x10
	
		// Properties
		public Font font { get; set; } // 0x009449E0-0x009449E8 0x00954584-0x0095464C
		public GUIStyle box { get; set; } // 0x00942308-0x00942310 0x009546B8-0x009546C0
		public GUIStyle label { get; set; } // 0x00941EC8-0x00941ED0 0x009546C0-0x009546C8
		public GUIStyle textField { get; set; } // 0x00942D20-0x00942D28 0x009546C8-0x009546D0
		public GUIStyle textArea { get; set; } // 0x009546D0-0x009546D8 0x009546D8-0x009546E0
		public GUIStyle button { get; set; } // 0x00942598-0x009425A0 0x009546E0-0x009546E8
		public GUIStyle toggle { get; set; } // 0x009546E8-0x009546F0 0x009546F0-0x009546F8
		public GUIStyle window { get; set; } // 0x0094987C-0x00949884 0x009546F8-0x00954700
		public GUIStyle horizontalSlider { get; set; } // 0x00954700-0x00954708 0x00954708-0x00954710
		public GUIStyle horizontalSliderThumb { get; set; } // 0x00954710-0x00954718 0x00954718-0x00954720
		public GUIStyle verticalSlider { get; set; } // 0x00954720-0x00954728 0x00954728-0x00954730
		public GUIStyle verticalSliderThumb { get; set; } // 0x00954730-0x00954738 0x00954738-0x00954740
		public GUIStyle horizontalScrollbar { get; set; } // 0x0094DE7C-0x0094DE84 0x00954740-0x00954748
		public GUIStyle horizontalScrollbarThumb { get; set; } // 0x00954748-0x00954750 0x00954750-0x00954758
		public GUIStyle horizontalScrollbarLeftButton { get; set; } // 0x00954758-0x00954760 0x00954760-0x00954768
		public GUIStyle horizontalScrollbarRightButton { get; set; } // 0x00954768-0x00954770 0x00954770-0x00954778
		public GUIStyle verticalScrollbar { get; set; } // 0x0094DE84-0x0094DE8C 0x00954778-0x00954780
		public GUIStyle verticalScrollbarThumb { get; set; } // 0x00954780-0x00954788 0x00954788-0x00954790
		public GUIStyle verticalScrollbarUpButton { get; set; } // 0x00954790-0x00954798 0x00954798-0x009547A0
		public GUIStyle verticalScrollbarDownButton { get; set; } // 0x009547A0-0x009547A8 0x009547A8-0x009547B0
		public GUIStyle scrollView { get; set; } // 0x0094DE8C-0x0094DE94 0x009547B0-0x009547B8
		public GUIStyle[] customStyles { get; set; } // 0x009547B8-0x009547C0 0x009547C0-0x009547C8
		public GUISettings settings { get; } // 0x00944258-0x00944260 
		internal static GUIStyle error { get; } // 0x009547C8-0x00954878 
	
		// Nested types
		internal delegate void SkinChangedDelegate(); // TypeDefIndex: 2434; 0x009554D8-0x009558D8
	
		// Constructors
		public GUISkin(); // 0x00954428-0x009544A8
	
		// Methods
		internal void OnEnable(); // 0x009544A8-0x009544AC
		internal static void CleanupRoots(); // 0x0095452C-0x00954584
		internal void Apply(); // 0x009544AC-0x0095452C
		private void BuildStyleCache(); // 0x009548EC-0x009553FC
		public GUIStyle GetStyle(string styleName); // 0x009471F0-0x00947548
		public GUIStyle FindStyle(string styleName); // 0x00945E50-0x00945F54
		internal void MakeCurrent(); // 0x00941C8C-0x00941D28
		public IEnumerator GetEnumerator(); // 0x009558D8-0x009559A4
	}

	internal class GUIStateObjects // TypeDefIndex: 2435
	{
		// Fields
		private static Dictionary<int, object> s_StateCache; // 0x00
	
		// Constructors
		static GUIStateObjects(); // 0x00955B34-0x00955BF4
	
		// Methods
		internal static object GetStateObject(Type t, int controlID); // 0x009559F4-0x00955B34
	}

	[Serializable]
	[NativeHeader] // 0x003C2854-0x003C288C
	public sealed class GUIStyleState // TypeDefIndex: 2436
	{
		// Fields
		[NonSerialized]
		internal IntPtr m_Ptr; // 0x10
		private readonly GUIStyle m_SourceStyle; // 0x18
	
		// Properties
		[NativeProperty] // 0x003C4A4C-0x003C4A8C
		public Texture2D background { set; } // 0x009579F0-0x00957A64
		[NativeProperty] // 0x003C4A8C-0x003C4ACC
		public Color textColor { set; } // 0x009554B0-0x009554D8
	
		// Constructors
		public GUIStyleState(); // 0x00957934-0x00957960
		private GUIStyleState(GUIStyle sourceStyle, IntPtr source); // 0x009579B8-0x009579F0
	
		// Methods
		[FreeFunction] // 0x003C3B48-0x003C3B9C
		private static IntPtr Init(); // 0x00957960-0x009579B8
		[FreeFunction] // 0x003C3B9C-0x003C3C00
		private void Cleanup(); // 0x00957AD8-0x00957B44
		internal static GUIStyleState GetGUIStyleState(GUIStyle sourceStyle, IntPtr source); // 0x00956E64-0x00956ED4
		~GUIStyleState(); // 0x00957B44-0x00957BEC
		private void set_textColor_Injected(ref Color value); // 0x00957A64-0x00957AD8
	}

	[Serializable]
	[NativeHeader] // 0x003C288C-0x003C28FC
	[NativeHeader] // 0x003C288C-0x003C28FC
	[RequiredByNativeCode] // 0x003C288C-0x003C28FC
	public sealed class GUIStyle // TypeDefIndex: 2437
	{
		// Fields
		[NonSerialized]
		internal IntPtr m_Ptr; // 0x10
		[NonSerialized]
		private GUIStyleState m_Normal; // 0x18
		[NonSerialized]
		private GUIStyleState m_Hover; // 0x20
		[NonSerialized]
		private GUIStyleState m_Active; // 0x28
		[NonSerialized]
		private GUIStyleState m_Focused; // 0x30
		[NonSerialized]
		private GUIStyleState m_OnNormal; // 0x38
		[NonSerialized]
		private GUIStyleState m_OnHover; // 0x40
		[NonSerialized]
		private GUIStyleState m_OnActive; // 0x48
		[NonSerialized]
		private GUIStyleState m_OnFocused; // 0x50
		[NonSerialized]
		private RectOffset m_Border; // 0x58
		[NonSerialized]
		private RectOffset m_Padding; // 0x60
		[NonSerialized]
		private RectOffset m_Margin; // 0x68
		[NonSerialized]
		private RectOffset m_Overflow; // 0x70
		internal static bool showKeyboardFocus; // 0x00
		private static GUIStyle s_None; // 0x08
	
		// Properties
		[NativeProperty] // 0x003C4ACC-0x003C4B0C
		public string name { get; set; } // 0x00945DE4-0x00945E50 0x00954878-0x009548EC
		[NativeProperty] // 0x003C4B0C-0x003C4B4C
		public Font font { get; set; } // 0x00944974-0x009449E0 0x00955D9C-0x00955E10
		[NativeProperty] // 0x003C4B4C-0x003C4B8C
		public ImagePosition imagePosition { get; } // 0x00955E10-0x00955E7C 
		[NativeProperty] // 0x003C4B8C-0x003C4BCC
		public TextAnchor alignment { set; } // 0x00955E7C-0x00955EF0
		[NativeProperty] // 0x003C4BCC-0x003C4C0C
		public bool wordWrap { get; set; } // 0x00955EF0-0x00955F5C 0x00955F5C-0x00955FD0
		[NativeProperty] // 0x003C4C0C-0x003C4C4C
		public Vector2 contentOffset { get; set; } // 0x00955FD0-0x00955FF8 0x0095606C-0x00956090
		[NativeProperty] // 0x003C4C4C-0x003C4C8C
		public float fixedWidth { get; } // 0x0094665C-0x009466C8 
		[NativeProperty] // 0x003C4C8C-0x003C4CCC
		public float fixedHeight { get; } // 0x009466C8-0x00946734 
		[NativeProperty] // 0x003C4CCC-0x003C4D0C
		public bool stretchWidth { get; set; } // 0x0094E868-0x0094E8D4 0x00953CF4-0x00953D68
		[NativeProperty] // 0x003C4D0C-0x003C4D4C
		public bool stretchHeight { get; set; } // 0x0094E8D4-0x0094E940 0x009553FC-0x00955470
		[NativeProperty] // 0x003C4D4C-0x003C4D8C
		public int fontSize { set; } // 0x00956104-0x00956178
		[NativeProperty] // 0x003C4D8C-0x003C4DCC
		internal Vector2 Internal_clipOffset { set; } // 0x00956178-0x0095619C
		public GUIStyleState normal { get; } // 0x00955470-0x009554B0 
		public RectOffset margin { get; } // 0x009461E8-0x00946278 
		public RectOffset padding { get; set; } // 0x009502D4-0x00950364 0x00956ED4-0x00956F0C
		public float lineHeight { [CompilerGenerated] /* 0x003C4260-0x003C4270 */ get; } // 0x00956F0C-0x00957018 
		public static GUIStyle none { [CompilerGenerated] /* 0x003C4270-0x003C4280 */ get; } // 0x0094831C-0x009483BC 
		public bool isHeightDependantOnWidth { [CompilerGenerated] /* 0x003C4280-0x003C4290 */ get; } // 0x00953914-0x00953960 
	
		// Constructors
		public GUIStyle(); // 0x00953C7C-0x00953CF4
		public GUIStyle(GUIStyle other); // 0x00955C60-0x00955D28
		static GUIStyle(); // 0x00957894-0x00957934
	
		// Methods
		[FreeFunction] // 0x003C3C00-0x003C3C54
		private static IntPtr Internal_Create(GUIStyle self); // 0x00955BF4-0x00955C60
		[FreeFunction] // 0x003C3C54-0x003C3CA8
		private static IntPtr Internal_Copy(GUIStyle self, GUIStyle other); // 0x00955D28-0x00955D9C
		[FreeFunction] // 0x003C3CA8-0x003C3CFC
		private static void Internal_Destroy(IntPtr self); // 0x00956210-0x0095627C
		[FreeFunction] // 0x003C3CFC-0x003C3D60
		private IntPtr GetStyleStatePtr(int idx); // 0x0095627C-0x009562F0
		[FreeFunction] // 0x003C3D60-0x003C3DB4
		private IntPtr GetRectOffsetPtr(int idx); // 0x009562F0-0x00956364
		[FreeFunction] // 0x003C3DB4-0x003C3E08
		private void AssignRectOffset(int idx, IntPtr srcRectOffset); // 0x00956364-0x009563E8
		[FreeFunction] // 0x003C3E08-0x003C3E4C
		private static float Internal_GetLineHeight(IntPtr target); // 0x009563E8-0x00956454
		[FreeFunction] // 0x003C3E4C-0x003C3EA0
		private void Internal_Draw(Rect screenRect, GUIContent content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus); // 0x00956454-0x009564A0
		[FreeFunction] // 0x003C3EA0-0x003C3EF4
		private void Internal_Draw2(Rect position, GUIContent content, int controlID, bool on); // 0x00956554-0x00956590
		[FreeFunction] // 0x003C3EF4-0x003C3F48
		private void Internal_DrawCursor(Rect position, GUIContent content, int pos, Color cursorColor); // 0x0095662C-0x00956670
		[FreeFunction] // 0x003C3F48-0x003C3F9C
		private void Internal_DrawWithTextSelection(Rect screenRect, GUIContent content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus, bool drawSelectionAsComposition, int cursorFirst, int cursorLast, Color cursorColor, Color selectionColor); // 0x0095670C-0x00956794
		[FreeFunction] // 0x003C3F9C-0x003C3FF0
		internal Vector2 Internal_GetCursorPixelPosition(Rect position, GUIContent content, int cursorStringIndex); // 0x00956878-0x009568BC
		[FreeFunction] // 0x003C3FF0-0x003C4044
		internal int Internal_GetCursorStringIndex(Rect position, GUIContent content, Vector2 cursorPixelPosition); // 0x00956958-0x00956990
		[FreeFunction] // 0x003C4044-0x003C4098
		internal Vector2 Internal_CalcSize(GUIContent content); // 0x00956A1C-0x00956A44
		[FreeFunction] // 0x003C4098-0x003C40EC
		internal Vector2 Internal_CalcSizeWithConstraints(GUIContent content, Vector2 maxSize); // 0x00956AC8-0x00956AF8
		[FreeFunction] // 0x003C40EC-0x003C4140
		private float Internal_CalcHeight(GUIContent content, float width); // 0x00956B84-0x00956C10
		[FreeFunction] // 0x003C4140-0x003C4194
		private Vector2 Internal_CalcMinMaxWidth(GUIContent content); // 0x00956C10-0x00956C38
		[FreeFunction] // 0x003C4194-0x003C41D8
		internal static void SetMouseTooltip(string tooltip, Rect screenRect); // 0x009465E0-0x0094665C
		[FreeFunction] // 0x003C41D8-0x003C421C
		private static float Internal_GetCursorFlashOffset(); // 0x00956D30-0x00956D88
		[FreeFunction] // 0x003C421C-0x003C4260
		internal static void SetDefaultFont(Font font); // 0x0095464C-0x009546B8
		~GUIStyle(); // 0x00956D88-0x00956E64
		public void Draw(Rect position, bool isHover, bool isActive, bool on, bool hasKeyboardFocus); // 0x009492B4-0x0094938C
		public void Draw(Rect position, GUIContent content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus); // 0x00946560-0x009465AC
		public void Draw(Rect position, GUIContent content, int controlID); // 0x009424A4-0x009424B8
		public void Draw(Rect position, GUIContent content, int controlID, bool on); // 0x009441BC-0x009441D0
		private void Draw(Rect position, GUIContent content, int controlId, bool isHover, bool isActive, bool on, bool hasKeyboardFocus); // 0x00957018-0x00957084
		public void DrawCursor(Rect position, GUIContent content, int controlID, int character); // 0x00957084-0x009572AC
		internal void DrawWithTextSelection(Rect position, GUIContent content, bool isActive, bool hasKeyboardFocus, int firstSelectedCharacter, int lastSelectedCharacter, bool drawSelectionAsComposition, Color selectionColor); // 0x009572AC-0x00957520
		internal void DrawWithTextSelection(Rect position, GUIContent content, bool isActive, bool hasKeyboardFocus, int firstSelectedCharacter, int lastSelectedCharacter, bool drawSelectionAsComposition); // 0x00957520-0x00957624
		internal void DrawWithTextSelection(Rect position, GUIContent content, int controlID, int firstSelectedCharacter, int lastSelectedCharacter, bool drawSelectionAsComposition); // 0x00957624-0x0095773C
		public void DrawWithTextSelection(Rect position, GUIContent content, int controlID, int firstSelectedCharacter, int lastSelectedCharacter); // 0x0095773C-0x00957744
		public Vector2 GetCursorPixelPosition(Rect position, GUIContent content, int cursorStringIndex); // 0x00957744-0x00957748
		public int GetCursorStringIndex(Rect position, GUIContent content, Vector2 cursorPixelPosition); // 0x00957748-0x00957780
		public Vector2 CalcSize(GUIContent content); // 0x00946E34-0x00946E5C
		internal Vector2 CalcSizeWithConstraints(GUIContent content, Vector2 constraints); // 0x00953A34-0x00953A64
		public float CalcHeight(GUIContent content, float width); // 0x00957780-0x00957784
		public void CalcMinMaxWidth(GUIContent content, out float minWidth, out float maxWidth); // 0x00957784-0x009577C4
		public override string ToString(); // 0x009577C4-0x00957894
		private void get_contentOffset_Injected(out Vector2 ret); // 0x00955FF8-0x0095606C
		private void set_contentOffset_Injected(ref Vector2 value); // 0x00956090-0x00956104
		private void set_Internal_clipOffset_Injected(ref Vector2 value); // 0x0095619C-0x00956210
		private void Internal_Draw_Injected(ref Rect screenRect, GUIContent content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus); // 0x009564A0-0x00956554
		private void Internal_Draw2_Injected(ref Rect position, GUIContent content, int controlID, bool on); // 0x00956590-0x0095662C
		private void Internal_DrawCursor_Injected(ref Rect position, GUIContent content, int pos, ref Color cursorColor); // 0x00956670-0x0095670C
		private void Internal_DrawWithTextSelection_Injected(ref Rect screenRect, GUIContent content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus, bool drawSelectionAsComposition, int cursorFirst, int cursorLast, ref Color cursorColor, ref Color selectionColor); // 0x00956794-0x00956878
		private void Internal_GetCursorPixelPosition_Injected(ref Rect position, GUIContent content, int cursorStringIndex, out Vector2 ret); // 0x009568BC-0x00956958
		private int Internal_GetCursorStringIndex_Injected(ref Rect position, GUIContent content, ref Vector2 cursorPixelPosition); // 0x00956990-0x00956A1C
		private void Internal_CalcSize_Injected(GUIContent content, out Vector2 ret); // 0x00956A44-0x00956AC8
		private void Internal_CalcSizeWithConstraints_Injected(GUIContent content, ref Vector2 maxSize, out Vector2 ret); // 0x00956AF8-0x00956B84
		private void Internal_CalcMinMaxWidth_Injected(GUIContent content, out Vector2 ret); // 0x00956C38-0x00956CBC
		private static void SetMouseTooltip_Injected(string tooltip, ref Rect screenRect); // 0x00956CBC-0x00956D30
	}

	public enum ImagePosition // TypeDefIndex: 2438
	{
		ImageLeft = 0,
		ImageAbove = 1,
		ImageOnly = 2,
		TextOnly = 3
	}

	[AttributeUsage] // 0x003C28FC-0x003C2910
	public class GUITargetAttribute : Attribute // TypeDefIndex: 2439
	{
		// Fields
		internal int displayMask; // 0x10
	
		// Methods
		[RequiredByNativeCode] // 0x003C4290-0x003C42A0
		private static int GetGUITargetAttrValue(Type klass, string methodName); // 0x00957BEC-0x00957D94
	}

	[NativeHeader] // 0x003C2910-0x003C29DC
	[NativeHeader] // 0x003C2910-0x003C29DC
	[NativeHeader] // 0x003C2910-0x003C29DC
	[NativeHeader] // 0x003C2910-0x003C29DC
	[NativeHeader] // 0x003C2910-0x003C29DC
	public class GUIUtility // TypeDefIndex: 2440
	{
		// Fields
		[VisibleToOtherModules] // 0x003C323C-0x003C32B4
		internal static int s_SkinMode; // 0x00
		[VisibleToOtherModules] // 0x003C32B4-0x003C332C
		internal static int s_OriginalID; // 0x04
		[VisibleToOtherModules] // 0x003C332C-0x003C33A4
		internal static Action takeCapture; // 0x08
		[VisibleToOtherModules] // 0x003C33A4-0x003C341C
		internal static Action releaseCapture; // 0x10
		[VisibleToOtherModules] // 0x003C341C-0x003C3494
		internal static Func<int, IntPtr, bool> processEvent; // 0x18
		[VisibleToOtherModules] // 0x003C3494-0x003C350C
		internal static Func<Exception, bool> endContainerGUIFromException; // 0x20
		[VisibleToOtherModules] // 0x003C350C-0x003C3584
		internal static Action enabledStateChanged; // 0x28
		[CompilerGenerated] // 0x003C3584-0x003C35C0
		[DebuggerBrowsable] // 0x003C3584-0x003C35C0
		private static bool <guiIsExiting>k__BackingField; // 0x30
	
		// Properties
		[NativeProperty] // 0x003C4DCC-0x003C4E0C
		internal static float pixelsPerPoint { [VisibleToOtherModules] /* 0x003C42A0-0x003C4318 */ get; } // 0x00952BB4-0x00952C0C 
		[NativeProperty] // 0x003C4E0C-0x003C4E4C
		internal static int guiDepth { [VisibleToOtherModules] /* 0x003C4318-0x003C4390 */ get; } // 0x00957D94-0x00957DEC 
		[NativeProperty] // 0x003C4E4C-0x003C4E8C
		internal static bool mouseUsed { set; } // 0x00946DC8-0x00946E34
		[StaticAccessor] // 0x003C4E8C-0x003C4EC8
		internal static bool textFieldInput { set; } // 0x00944FC8-0x00945034
		public static string systemCopyBuffer { [FreeFunction] /* 0x003C4390-0x003C43C8 */ get; [FreeFunction] /* 0x003C43C8-0x003C4400 */ set; } // 0x00957DEC-0x00957E44 0x00957E44-0x00957EB0
		internal static bool guiIsExiting { [CompilerGenerated] /* 0x003C444C-0x003C445C */ set; } // 0x009581E4-0x0095823C
		public static int hotControl { get; set; } // 0x00942BC4-0x00942BC8 0x00942BC0-0x00942BC4
		public static int keyboardControl { get; set; } // 0x009441B4-0x009441B8 0x009441B8-0x009441BC
	
		// Methods
		[StaticAccessor] // 0x003C4400-0x003C443C
		public static int GetControlID(int hint, FocusType focusType, Rect rect); // 0x009427FC-0x00942824
		private static int Internal_GetHotControl(); // 0x00957F34-0x00957F8C
		private static int Internal_GetKeyboardControl(); // 0x00957F8C-0x00957FE4
		private static void Internal_SetHotControl(int value); // 0x00957FE4-0x00958050
		private static void Internal_SetKeyboardControl(int value); // 0x00958050-0x009580BC
		private static object Internal_GetDefaultSkin(int skinMode); // 0x009580BC-0x00958128
		private static void Internal_ExitGUI(); // 0x00958128-0x00958180
		[RequiredByNativeCode] // 0x003C443C-0x003C444C
		private static void MarkGUIChanged(); // 0x00958180-0x009581E4
		public static int GetControlID(FocusType focus); // 0x0094BE40-0x0094BE50
		public static int GetControlID(FocusType focus, Rect position); // 0x00942CEC-0x00942D20
		public static int GetControlID(int hint, FocusType focus); // 0x0094245C-0x009424A4
		public static object GetStateObject(Type t, int controlID); // 0x0094336C-0x009433E0
		[RequiredByNativeCode] // 0x003C445C-0x003C446C
		internal static void TakeCapture(); // 0x0095823C-0x009582A0
		[RequiredByNativeCode] // 0x003C446C-0x003C447C
		internal static void RemoveCapture(); // 0x009582A0-0x00958304
		internal static GUISkin GetDefaultSkin(); // 0x00941C1C-0x00941C8C
		[RequiredByNativeCode] // 0x003C447C-0x003C448C
		internal static bool ProcessEvent(int instanceID, IntPtr nativeEventPtr); // 0x00958304-0x0095838C
		[RequiredByNativeCode] // 0x003C448C-0x003C449C
		internal static void BeginGUI(int skinMode, int instanceID, int useGUILayout); // 0x0095838C-0x00958438
		[RequiredByNativeCode] // 0x003C449C-0x003C44AC
		internal static void EndGUI(int layoutType); // 0x009584D8-0x0095867C
		[RequiredByNativeCode] // 0x003C44AC-0x003C44BC
		internal static bool EndGUIFromException(Exception exception); // 0x0095867C-0x009586A0
		[RequiredByNativeCode] // 0x003C44BC-0x003C44CC
		internal static bool EndContainerGUIFromException(Exception exception); // 0x009586A4-0x00958718
		[VisibleToOtherModules] // 0x003C44CC-0x003C4544
		internal static void ResetGlobalState(); // 0x00958438-0x009584D8
		[VisibleToOtherModules] // 0x003C4544-0x003C45BC
		internal static bool IsExitGUIException(Exception exception); // 0x00958718-0x009587BC
		[VisibleToOtherModules] // 0x003C45BC-0x003C4634
		internal static bool ShouldRethrowException(Exception exception); // 0x009586A0-0x009586A4
		internal static void CheckOnGUI(); // 0x00941A70-0x00941AFC
		private static int GetControlID_Injected(int hint, FocusType focusType, ref Rect rect); // 0x00957EB0-0x00957F34
	}

	public sealed class ExitGUIException : Exception // TypeDefIndex: 2441
	{
	}

	[VisibleToOtherModules] // 0x003C29DC-0x003C2A54
	internal class GUILayoutEntry // TypeDefIndex: 2442
	{
		// Fields
		public float minWidth; // 0x10
		public float maxWidth; // 0x14
		public float minHeight; // 0x18
		public float maxHeight; // 0x1C
		public Rect rect; // 0x20
		public int stretchWidth; // 0x30
		public int stretchHeight; // 0x34
		public bool consideredForMargin; // 0x38
		private GUIStyle m_Style; // 0x40
		internal static Rect kDummyRect; // 0x00
		protected static int indent; // 0x10
	
		// Properties
		public GUIStyle style { get; set; } // 0x0094E6E8-0x0094E6F0 0x0094E5B8-0x0094E5C8
		public virtual RectOffset margin { get; } // 0x0094E6F0-0x0094E71C 
	
		// Constructors
		public GUILayoutEntry(float _minWidth, float _maxWidth, float _minHeight, float _maxHeight, GUIStyle _style); // 0x0094E48C-0x0094E5B8
		public GUILayoutEntry(float _minWidth, float _maxWidth, float _minHeight, float _maxHeight, GUIStyle _style, GUILayoutOption[] options); // 0x0094E5C8-0x0094E6E8
		static GUILayoutEntry(); // 0x0094F318-0x0094F3A0
	
		// Methods
		public virtual void CalcWidth(); // 0x0094E71C-0x0094E720
		public virtual void CalcHeight(); // 0x0094E720-0x0094E724
		public virtual void SetHorizontal(float x, float width); // 0x0094E724-0x0094E764
		public virtual void SetVertical(float y, float height); // 0x0094E764-0x0094E7A4
		protected virtual void ApplyStyleSettings(GUIStyle style); // 0x0094E7A4-0x0094E868
		public virtual void ApplyOptions(GUILayoutOption[] options); // 0x0094E940-0x0094EB64
		public override string ToString(); // 0x0094EB64-0x0094F318
	}

	internal sealed class GUIWordWrapSizer : GUILayoutEntry // TypeDefIndex: 2443
	{
		// Fields
		private readonly GUIContent m_Content; // 0x48
		private readonly float m_ForcedMinHeight; // 0x50
		private readonly float m_ForcedMaxHeight; // 0x54
	
		// Constructors
		public GUIWordWrapSizer(GUIStyle style, GUIContent content, GUILayoutOption[] options); // 0x00953960-0x00953A34
	
		// Methods
		public override void CalcWidth(); // 0x009587BC-0x00958894
		public override void CalcHeight(); // 0x00958894-0x00958920
	}

	[VisibleToOtherModules] // 0x003C2A54-0x003C2ACC
	internal class GUILayoutGroup : GUILayoutEntry // TypeDefIndex: 2444
	{
		// Fields
		public List<GUILayoutEntry> entries; // 0x48
		public bool isVertical; // 0x50
		public bool resetCoords; // 0x51
		public float spacing; // 0x54
		public bool sameSize; // 0x58
		public bool isWindow; // 0x59
		public int windowID; // 0x5C
		private int m_Cursor; // 0x60
		protected int m_StretchableCountX; // 0x64
		protected int m_StretchableCountY; // 0x68
		protected bool m_UserSpecifiedWidth; // 0x6C
		protected bool m_UserSpecifiedHeight; // 0x6D
		protected float m_ChildMinWidth; // 0x70
		protected float m_ChildMaxWidth; // 0x74
		protected float m_ChildMinHeight; // 0x78
		protected float m_ChildMaxHeight; // 0x7C
		private readonly RectOffset m_Margin; // 0x80
	
		// Properties
		public override RectOffset margin { get; } // 0x0094F4B8-0x0094F4C0 
	
		// Constructors
		public GUILayoutGroup(); // 0x0094F3A0-0x0094F4B8
	
		// Methods
		public override void ApplyOptions(GUILayoutOption[] options); // 0x0094F4C0-0x0094F5E0
		protected override void ApplyStyleSettings(GUIStyle style); // 0x0094F5E0-0x0094F70C
		public void ResetCursor(); // 0x0094F70C-0x0094F714
		public GUILayoutEntry GetNext(); // 0x0094F714-0x0094FA00
		public void Add(GUILayoutEntry e); // 0x0094FA00-0x0094FA70
		public override void CalcWidth(); // 0x0094FA70-0x009502D4
		public override void SetHorizontal(float x, float width); // 0x00950364-0x00950EE0
		public override void CalcHeight(); // 0x00950EE0-0x009516EC
		public override void SetVertical(float y, float height); // 0x009516EC-0x0095226C
		public override string ToString(); // 0x0095226C-0x00952698
	}

	internal sealed class GUIScrollGroup : GUILayoutGroup // TypeDefIndex: 2445
	{
		// Fields
		public float calcMinWidth; // 0x88
		public float calcMaxWidth; // 0x8C
		public float calcMinHeight; // 0x90
		public float calcMaxHeight; // 0x94
		public float clientWidth; // 0x98
		public float clientHeight; // 0x9C
		public bool allowHorizontalScroll; // 0xA0
		public bool allowVerticalScroll; // 0xA1
		public bool needsHorizontalScrollbar; // 0xA2
		public bool needsVerticalScrollbar; // 0xA3
		public GUIStyle horizontalScrollbar; // 0xA8
		public GUIStyle verticalScrollbar; // 0xB0
	
		// Constructors
		[RequiredByNativeCode] // 0x003C4634-0x003C4644
		public GUIScrollGroup(); // 0x00953E70-0x00953E7C
	
		// Methods
		public override void CalcWidth(); // 0x00953E7C-0x00953F00
		public override void SetHorizontal(float x, float width); // 0x00953F00-0x00954020
		public override void CalcHeight(); // 0x00954020-0x0095411C
		public override void SetVertical(float y, float height); // 0x0095411C-0x00954320
	}

	internal class ScrollViewState // TypeDefIndex: 2446
	{
		// Fields
		public Rect position; // 0x10
		public Rect visibleRect; // 0x20
		public Rect viewRect; // 0x30
		public Vector2 scrollPosition; // 0x40
		public bool apply; // 0x48
	
		// Constructors
		[RequiredByNativeCode] // 0x003C4644-0x003C4654
		public ScrollViewState(); // 0x00958920-0x00958974
	}

	internal class SliderState // TypeDefIndex: 2447
	{
		// Fields
		public float dragStartPos; // 0x10
		public float dragStartValue; // 0x14
		public bool isDragging; // 0x18
	
		// Constructors
		[RequiredByNativeCode] // 0x003C4654-0x003C4664
		public SliderState(); // 0x0095A2A0-0x0095A2A8
	}

	internal struct SliderHandler // TypeDefIndex: 2448
	{
		// Fields
		private readonly Rect position; // 0x00
		private readonly float currentValue; // 0x10
		private readonly float size; // 0x14
		private readonly float start; // 0x18
		private readonly float end; // 0x1C
		private readonly GUIStyle slider; // 0x20
		private readonly GUIStyle thumb; // 0x28
		private readonly bool horiz; // 0x30
		private readonly int id; // 0x34
	
		// Constructors
		public SliderHandler(Rect position, float currentValue, float size, float start, float end, GUIStyle slider, GUIStyle thumb, bool horiz, int id); // 0x00958974-0x009592C0
	
		// Methods
		public float Handle(); // 0x009592C0-0x00959770
		private float OnMouseDown(); // 0x00959770-0x0095994C
		private float OnMouseDrag(); // 0x0095994C-0x00959954
		private float OnMouseUp(); // 0x00959954-0x00959A68
		private float OnRepaint(); // 0x00959A68-0x00959A70
		private EventType CurrentEventType(); // 0x00959A70-0x00959A78
		private int CurrentScrollTroughSide(); // 0x00959A78-0x00959A80
		private bool IsEmptySlider(); // 0x00959A80-0x00959A90
		private bool SupportsPageMovements(); // 0x00959A90-0x00959B40
		private float PageMovementValue(); // 0x00959B40-0x00959B48
		private float PageUpMovementBound(); // 0x00959B48-0x00959B50
		private Event CurrentEvent(); // 0x00959B50-0x00959BA0
		private float ValueForCurrentMousePosition(); // 0x00959BA0-0x00959BA8
		private float Clamp(float value); // 0x00959BA8-0x00959BB0
		private Rect ThumbSelectionRect(); // 0x00959BB0-0x00959BB8
		private void StartDraggingWithValue(float dragStartValue); // 0x00959BB8-0x00959BC0
		private SliderState SliderState(); // 0x00959BC0-0x0095A154
		private Rect ThumbRect(); // 0x0095A154-0x0095A25C
		private Rect VerticalThumbRect(); // 0x0095A25C-0x0095A264
		private Rect HorizontalThumbRect(); // 0x0095A264-0x0095A26C
		private float ClampedCurrentValue(); // 0x0095A26C-0x0095A278
		private float MousePosition(); // 0x0095A278-0x0095A280
		private float ValuesPerPixel(); // 0x0095A280-0x0095A288
		private float ThumbSize(); // 0x0095A288-0x0095A290
		private float MaxValue(); // 0x0095A290-0x0095A298
		private float MinValue(); // 0x0095A298-0x0095A2A0
	}

	public class TextEditor // TypeDefIndex: 2449
	{
		// Fields
		public TouchScreenKeyboard keyboardOnScreen; // 0x10
		public int controlID; // 0x18
		public GUIStyle style; // 0x20
		public bool multiline; // 0x28
		public bool hasHorizontalCursorPos; // 0x29
		public bool isPasswordField; // 0x2A
		[VisibleToOtherModules] // 0x003C35C0-0x003C3638
		internal bool m_HasFocus; // 0x2B
		public Vector2 scrollOffset; // 0x2C
		private GUIContent m_Content; // 0x38
		private Rect m_Position; // 0x40
		private int m_CursorIndex; // 0x50
		private int m_SelectIndex; // 0x54
		private bool m_RevealCursor; // 0x58
		public Vector2 graphicalCursorPos; // 0x5C
		public Vector2 graphicalSelectCursorPos; // 0x64
		private bool m_MouseDragSelectsWholeWords; // 0x6C
		private int m_DblClickInitPos; // 0x70
		private DblClickSnapping m_DblClickSnap; // 0x74
		private bool m_bJustSelected; // 0x75
		private int m_iAltCursorPos; // 0x78
		private string oldText; // 0x80
		private int oldPos; // 0x88
		private int oldSelectPos; // 0x8C
		private static Dictionary<Event, TextEditOp> s_Keyactions; // 0x00
	
		// Properties
		public string text { get; set; } // 0x00944948-0x00944974 0x009433E0-0x00943474
		public Rect position { get; set; } // 0x0095A3D0-0x0095A3DC 0x009434B0-0x00943534
		internal virtual Rect localPosition { [VisibleToOtherModules] /* 0x003C4674-0x003C46EC */ get; } // 0x0095A984-0x0095A990 
		public int cursorIndex { get; set; } // 0x0095A990-0x0095A998 0x0095A998-0x0095AA00
		public int selectIndex { get; set; } // 0x0095AA00-0x0095AA08 0x0095AA08-0x0095AA68
		public bool hasSelection { get; } // 0x0095C788-0x0095C798 
	
		// Nested types
		public enum DblClickSnapping : byte // TypeDefIndex: 2450
		{
			WORDS = 0,
			PARAGRAPHS = 1
		}
	
		private enum CharacterType // TypeDefIndex: 2451
		{
			LetterLike = 0,
			Symbol = 1,
			Symbol2 = 2,
			WhiteSpace = 3
		}
	
		private enum Direction // TypeDefIndex: 2452
		{
			Forward = 0,
			Backward = 1
		}
	
		private enum TextEditOp // TypeDefIndex: 2453
		{
			MoveLeft = 0,
			MoveRight = 1,
			MoveUp = 2,
			MoveDown = 3,
			MoveLineStart = 4,
			MoveLineEnd = 5,
			MoveTextStart = 6,
			MoveTextEnd = 7,
			MovePageUp = 8,
			MovePageDown = 9,
			MoveGraphicalLineStart = 10,
			MoveGraphicalLineEnd = 11,
			MoveWordLeft = 12,
			MoveWordRight = 13,
			MoveParagraphForward = 14,
			MoveParagraphBackward = 15,
			MoveToStartOfNextWord = 16,
			MoveToEndOfPreviousWord = 17,
			SelectLeft = 18,
			SelectRight = 19,
			SelectUp = 20,
			SelectDown = 21,
			SelectTextStart = 22,
			SelectTextEnd = 23,
			SelectPageUp = 24,
			SelectPageDown = 25,
			ExpandSelectGraphicalLineStart = 26,
			ExpandSelectGraphicalLineEnd = 27,
			SelectGraphicalLineStart = 28,
			SelectGraphicalLineEnd = 29,
			SelectWordLeft = 30,
			SelectWordRight = 31,
			SelectToEndOfPreviousWord = 32,
			SelectToStartOfNextWord = 33,
			SelectParagraphBackward = 34,
			SelectParagraphForward = 35,
			Delete = 36,
			Backspace = 37,
			DeleteWordBack = 38,
			DeleteWordForward = 39,
			DeleteLineBack = 40,
			Cut = 41,
			Copy = 42,
			Paste = 43,
			SelectAll = 44,
			SelectNone = 45,
			ScrollStart = 46,
			ScrollEnd = 47,
			ScrollPageUp = 48,
			ScrollPageDown = 49
		}
	
		// Constructors
		[RequiredByNativeCode] // 0x003C4664-0x003C4674
		public TextEditor(); // 0x0095A2A8-0x0095A38C
	
		// Methods
		private void ClearCursorPos(); // 0x0095AA68-0x0095AA78
		public void OnFocus(); // 0x0095AA78-0x0095AAC8
		public void OnLostFocus(); // 0x0095AB30-0x0095ABA0
		private void GrabGraphicalCursorPos(); // 0x0095ABA0-0x0095AC98
		public bool HandleKeyEvent(Event e); // 0x009447E0-0x00944948
		public bool DeleteLineBack(); // 0x0095C674-0x0095C788
		public bool DeleteWordBack(); // 0x0095C978-0x0095CA34
		public bool DeleteWordForward(); // 0x0095CB0C-0x0095CBD4
		public bool Delete(); // 0x0095CE08-0x0095CEDC
		public bool Backspace(); // 0x0095D000-0x0095D0C4
		public void SelectAll(); // 0x0095AAC8-0x0095AB30
		public void SelectNone(); // 0x0095D190-0x0095D1C0
		public bool DeleteSelection(); // 0x0095C798-0x0095C978
		public void ReplaceSelection(string replace); // 0x00944A20-0x00944AD4
		public void Insert(char c); // 0x009449E8-0x00944A20
		public void MoveRight(); // 0x0095D1C0-0x0095D23C
		public void MoveLeft(); // 0x0095D23C-0x0095D2A4
		public void MoveUp(); // 0x0095D2A4-0x0095D3A8
		public void MoveDown(); // 0x0095D3A8-0x0095D4F4
		public void MoveLineStart(); // 0x0095D4F4-0x0095D5A0
		public void MoveLineEnd(); // 0x0095D5A0-0x0095D678
		public void MoveGraphicalLineStart(); // 0x0095D678-0x0095D6D8
		public void MoveGraphicalLineEnd(); // 0x0095D7D0-0x0095D830
		public void MoveTextStart(); // 0x0095D930-0x0095D95C
		public void MoveTextEnd(); // 0x0095D95C-0x0095D9BC
		private int IndexOfEndOfLine(int startIndex); // 0x0095D9BC-0x0095DA58
		public void MoveParagraphForward(); // 0x0095DA58-0x0095DB0C
		public void MoveParagraphBackward(); // 0x0095DB0C-0x0095DBC4
		public void MoveCursorToPosition(Vector2 cursorPosition); // 0x009441D0-0x00944258
		protected internal void MoveCursorToPosition_Internal(Vector2 cursorPosition, bool shift); // 0x0095DBC4-0x0095DD04
		public void SelectToPosition(Vector2 cursorPosition); // 0x00944400-0x009447E0
		public void SelectLeft(); // 0x0095DEBC-0x0095DF18
		public void SelectRight(); // 0x0095DF18-0x0095DF74
		public void SelectUp(); // 0x0095DF74-0x0095E030
		public void SelectDown(); // 0x0095E030-0x0095E108
		public void SelectTextEnd(); // 0x0095E108-0x0095E158
		public void SelectTextStart(); // 0x0095E158-0x0095E160
		public void MouseDragSelectsWholeWords(bool on); // 0x00944310-0x00944324
		public void DblClickSnap(DblClickSnapping snapping); // 0x00944308-0x00944310
		private int GetGraphicalLineStart(int p); // 0x0095D6D8-0x0095D7D0
		private int GetGraphicalLineEnd(int p); // 0x0095D830-0x0095D930
		private int FindNextSeperator(int startPos); // 0x0095E160-0x0095E218
		private int FindPrevSeperator(int startPos); // 0x0095E338-0x0095E3D8
		public void MoveWordRight(); // 0x0095E3D8-0x0095E448
		public void MoveToStartOfNextWord(); // 0x0095E448-0x0095E4AC
		public void MoveToEndOfPreviousWord(); // 0x0095E4AC-0x0095E510
		public void SelectToStartOfNextWord(); // 0x0095E510-0x0095E548
		public void SelectToEndOfPreviousWord(); // 0x0095E548-0x0095E580
		private CharacterType ClassifyChar(int index); // 0x0095E218-0x0095E338
		public int FindStartOfNextWord(int p); // 0x0095CBD4-0x0095CE08
		private int FindEndOfPreviousWord(int p); // 0x0095CA34-0x0095CB0C
		public void MoveWordLeft(); // 0x0095E580-0x0095E5DC
		public void SelectWordRight(); // 0x0095E5DC-0x0095E654
		public void SelectWordLeft(); // 0x0095E654-0x0095E6CC
		public void ExpandSelectGraphicalLineStart(); // 0x0095E6CC-0x0095E734
		public void ExpandSelectGraphicalLineEnd(); // 0x0095E734-0x0095E79C
		public void SelectGraphicalLineStart(); // 0x0095E79C-0x0095E7D4
		public void SelectGraphicalLineEnd(); // 0x0095E7D4-0x0095E80C
		public void SelectParagraphForward(); // 0x0095E80C-0x0095E8B8
		public void SelectParagraphBackward(); // 0x0095E8B8-0x0095E9A0
		public void SelectCurrentWord(); // 0x00944268-0x00944308
		private int FindEndOfClassification(int p, Direction dir); // 0x0095DD04-0x0095DEBC
		public void SelectCurrentParagraph(); // 0x0094432C-0x00944400
		public void UpdateScrollOffsetIfNeeded(Event evt); // 0x0094414C-0x009441B4
		[VisibleToOtherModules] // 0x003C46EC-0x003C46FC
		internal void UpdateScrollOffset(); // 0x0095A3DC-0x0095A984
		public void DrawCursor(string newText); // 0x00944AD4-0x00944FC8
		private bool PerformOperation(TextEditOp operation); // 0x0095C2F8-0x0095C674
		public void SaveBackup(); // 0x00943474-0x009434B0
		public bool Cut(); // 0x0095E9A0-0x0095E9E0
		public void Copy(); // 0x0095E9E0-0x0095EA84
		private static string ReplaceNewlinesWithSpaces(string value); // 0x0095EB10-0x0095EBBC
		public bool Paste(); // 0x0095EA84-0x0095EB10
		private static void MapKey(string key, TextEditOp action); // 0x0095EBBC-0x0095EC4C
		private void InitKeyActions(); // 0x0095AC98-0x0095C2F8
		public void DetectFocusChange(); // 0x00943534-0x00943540
		internal virtual void OnDetectFocusChange(); // 0x0095EC4C-0x0095ECB0
		internal virtual void OnCursorIndexChange(); // 0x0095ECB0-0x0095ECB4
		internal virtual void OnSelectIndexChange(); // 0x0095ECB4-0x0095ECB8
		private void ClampTextIndex(ref int index); // 0x0095ECB8-0x0095ED74
		private void EnsureValidCodePointIndex(ref int index); // 0x0095A38C-0x0095A3D0
		private bool IsValidCodePointIndex(int index); // 0x0095ED74-0x0095EEBC
		private int PreviousCodePointIndex(int index); // 0x0095D0C4-0x0095D190
		private int NextCodePointIndex(int index); // 0x0095CEDC-0x0095D000
	}
}

namespace UnityEngineInternal.Input
{
	[Flags] // 0x003C5FEC-0x003C5FFC
	public enum NativeInputUpdateType // TypeDefIndex: 2455
	{
		IgnoreFocus = -2147483648,
		Dynamic = 1,
		Fixed = 2,
		BeforeRender = 4,
		Editor = 8
	}

	[NativeConditional] // 0x003C5FFC-0x003C6080
	[NativeHeader] // 0x003C5FFC-0x003C6080
	[NativeHeader] // 0x003C5FFC-0x003C6080
	public class NativeInputSystem // TypeDefIndex: 2456
	{
		// Fields
		public static Action<NativeInputUpdateType, int, IntPtr> onUpdate; // 0x00
		public static Action<NativeInputUpdateType> onBeforeUpdate; // 0x08
		private static Action<int, string> s_OnDeviceDiscoveredCallback; // 0x10
	
		// Properties
		internal static bool hasDeviceDiscoveredCallback { set; } // 0x00CB1AD0-0x00CB1B3C
	
		// Constructors
		static NativeInputSystem(); // 0x00CB1AC8-0x00CB1AD0
	
		// Methods
		[RequiredByNativeCode] // 0x003C6080-0x003C6090
		internal static void NotifyBeforeUpdate(NativeInputUpdateType updateType); // 0x00CB1B3C-0x00CB1BC8
		[RequiredByNativeCode] // 0x003C6090-0x003C60A0
		internal static void NotifyUpdate(NativeInputUpdateType updateType, int eventCount, IntPtr eventData); // 0x00CB1BC8-0x00CB1C70
		[RequiredByNativeCode] // 0x003C60A0-0x003C60B0
		internal static void NotifyDeviceDiscovered(int deviceId, string deviceDescriptor); // 0x00CB1C70-0x00CB6734
	}
}

namespace UnityEngine
{
	[NativeHeader] // 0x003C71B0-0x003C72DC
	[NativeHeader] // 0x003C71B0-0x003C72DC
	[NativeHeader] // 0x003C71B0-0x003C72DC
	[NativeHeader] // 0x003C71B0-0x003C72DC
	[RequireComponent] // 0x003C71B0-0x003C72DC
	[RequireComponent] // 0x003C71B0-0x003C72DC
	[UsedByNativeCode] // 0x003C71B0-0x003C72DC
	public sealed class ParticleSystem : Component // TypeDefIndex: 2458
	{
		// Properties
		[Obsolete] // 0x003C79B8-0x003C79F4
		public bool loop { get; } // 0x00C923DC-0x00C923E0 
		[Obsolete] // 0x003C79F4-0x003C7A30
		public bool enableEmission { set; } // 0x00C923E4-0x00C923EC
		[Obsolete] // 0x003C7A30-0x003C7A6C
		public Color startColor { set; } // 0x00C923F0-0x00C92460
		public MainModule main { get; } // 0x00C923E0-0x00C923E4 
		public EmissionModule emission { get; } // 0x00C923EC-0x00C923F0 
	
		// Nested types
		public struct MainModule // TypeDefIndex: 2459
		{
			// Fields
			private ParticleSystem m_ParticleSystem; // 0x00
	
			// Properties
			public bool loop { get; } // 0x00C92A30-0x00C92A38 
			public MinMaxGradient startColor { set; } // 0x00C92AAC-0x00C92C98
	
			// Constructors
			internal MainModule(ParticleSystem particleSystem); // 0x00C929BC-0x00C929C4
	
			// Methods
			[GeneratedByOldBindingsGenerator] // 0x003C7950-0x003C7960
			private static bool GetLoop(ParticleSystem system); // 0x00C929C4-0x00C92A30
			[GeneratedByOldBindingsGenerator] // 0x003C7960-0x003C7970
			private static void SetStartColor(ParticleSystem system, ref MinMaxGradient gradient); // 0x00C92A38-0x00C92AAC
		}
	
		public struct EmissionModule // TypeDefIndex: 2460
		{
			// Fields
			private ParticleSystem m_ParticleSystem; // 0x00
	
			// Properties
			public bool enabled { set; } // 0x00C92810-0x00C929BC
	
			// Constructors
			internal EmissionModule(ParticleSystem particleSystem); // 0x00C92794-0x00C9279C
	
			// Methods
			[GeneratedByOldBindingsGenerator] // 0x003C7970-0x003C7980
			private static void SetEnabled(ParticleSystem system, bool value); // 0x00C9279C-0x00C92810
		}
	
		[RequiredByNativeCode] // 0x003C72DC-0x003C7324
		public struct Particle // TypeDefIndex: 2461
		{
			// Fields
			private Vector3 m_Position; // 0x00
			private Vector3 m_Velocity; // 0x0C
			private Vector3 m_AnimatedVelocity; // 0x18
			private Vector3 m_InitialVelocity; // 0x24
			private Vector3 m_AxisOfRotation; // 0x30
			private Vector3 m_Rotation; // 0x3C
			private Vector3 m_AngularVelocity; // 0x48
			private Vector3 m_StartSize; // 0x54
			private Color32 m_StartColor; // 0x60
			private uint m_RandomSeed; // 0x64
			private float m_Lifetime; // 0x68
			private float m_StartLifetime; // 0x6C
			private float m_EmitAccumulator0; // 0x70
			private float m_EmitAccumulator1; // 0x74
			private uint m_Flags; // 0x78
	
			// Properties
			[Obsolete] // 0x003C7A6C-0x003C7AA8
			public float lifetime { set; } // 0x00C92CA0-0x00C92CA8
			public Vector3 position { set; } // 0x00C92CA8-0x00C92CB4
			public Vector3 velocity { set; } // 0x00C92CB4-0x00C92CC0
			public float remainingLifetime { set; } // 0x00C92CC0-0x00C92CC8
			public float startLifetime { set; } // 0x00C92CC8-0x00C92CD0
			public Color32 startColor { set; } // 0x00C92CD0-0x00C92CD8
			public uint randomSeed { set; } // 0x00C92CD8-0x00C92CE0
			public float startSize { set; } // 0x00C92CE0-0x00C92D30
			public Vector3 rotation3D { set; } // 0x00C92D30-0x00C92D38
			public Vector3 angularVelocity3D { set; } // 0x00C92D38-0x00C92D40
		}
	
		[Serializable]
		public struct MinMaxGradient // TypeDefIndex: 2462
		{
			// Fields
			[SerializeField] // 0x003C73F8-0x003C7408
			private ParticleSystemGradientMode m_Mode; // 0x00
			[SerializeField] // 0x003C7408-0x003C7418
			private Gradient m_GradientMin; // 0x08
			[SerializeField] // 0x003C7418-0x003C7428
			private Gradient m_GradientMax; // 0x10
			[SerializeField] // 0x003C7428-0x003C7438
			private Color m_ColorMin; // 0x18
			[SerializeField] // 0x003C7438-0x003C7448
			private Color m_ColorMax; // 0x28
	
			// Constructors
			public MinMaxGradient(Color color); // 0x00C92C98-0x00C92CA0
	
			// Methods
			public static implicit operator MinMaxGradient(Color color); // 0x00C92460-0x00C924BC
		}
	
		public struct EmitParams // TypeDefIndex: 2463
		{
			// Fields
			[NativeName] // 0x003C7448-0x003C748C
			private Particle m_Particle; // 0x00
			[NativeName] // 0x003C748C-0x003C74D0
			private bool m_PositionSet; // 0x7C
			[NativeName] // 0x003C74D0-0x003C7514
			private bool m_VelocitySet; // 0x7D
			[NativeName] // 0x003C7514-0x003C7558
			private bool m_AxisOfRotationSet; // 0x7E
			[NativeName] // 0x003C7558-0x003C759C
			private bool m_RotationSet; // 0x7F
			[NativeName] // 0x003C759C-0x003C75E0
			private bool m_AngularVelocitySet; // 0x80
			[NativeName] // 0x003C75E0-0x003C7624
			private bool m_StartSizeSet; // 0x81
			[NativeName] // 0x003C7624-0x003C7668
			private bool m_StartColorSet; // 0x82
			[NativeName] // 0x003C7668-0x003C76AC
			private bool m_RandomSeedSet; // 0x83
			[NativeName] // 0x003C76AC-0x003C76F0
			private bool m_StartLifetimeSet; // 0x84
			[NativeName] // 0x003C76F0-0x003C7734
			private bool m_ApplyShapeToPosition; // 0x85
		}
	
		// Methods
		[Obsolete] // 0x003C7734-0x003C7770
		public void Emit(Vector3 position, Vector3 velocity, float size, float lifetime, Color32 color); // 0x00C920D0-0x00C92364
		[Obsolete] // 0x003C7770-0x003C77AC
		public void Emit(Particle particle); // 0x00C923D8-0x00C923DC
		[FreeFunction] // 0x003C77AC-0x003C7800
		public void Play(bool withChildren); // 0x00C924BC-0x00C92530
		public void Play(); // 0x00C92530-0x00C92538
		[FreeFunction] // 0x003C7800-0x003C7854
		public void Stop(bool withChildren, ParticleSystemStopBehavior stopBehavior); // 0x00C92538-0x00C925BC
		public void Stop(bool withChildren); // 0x00C925BC-0x00C925C8
		public void Stop(); // 0x00C925C8-0x00C925D4
		[FreeFunction] // 0x003C7854-0x003C78A8
		public bool IsAlive(bool withChildren); // 0x00C925D4-0x00C92648
		[RequiredByNativeCode] // 0x003C78A8-0x003C78B8
		public void Emit(int count); // 0x00C92648-0x00C9264C
		[NativeName] // 0x003C78B8-0x003C78FC
		private void Emit_Internal(int count); // 0x00C9264C-0x00C926C0
		[NativeName] // 0x003C78FC-0x003C7940
		public void Emit(EmitParams emitParams, int count); // 0x00C926C0-0x00C926C4
		[GeneratedByOldBindingsGenerator] // 0x003C7940-0x003C7950
		private void Internal_EmitOld(ref Particle particle); // 0x00C92364-0x00C923D8
		private void Emit_Injected(ref EmitParams emitParams, int count); // 0x00C926C4-0x00C92794
	}

	[NativeHeader] // 0x003C7324-0x003C73F8
	[NativeHeader] // 0x003C7324-0x003C73F8
	[RequireComponent] // 0x003C7324-0x003C73F8
	[RequireComponent] // 0x003C7324-0x003C73F8
	public sealed class ParticleSystemRenderer : Renderer // TypeDefIndex: 2464
	{
		// Methods
		[GeneratedByOldBindingsGenerator] // 0x003C7980-0x003C79B8
		[RequiredByNativeCode] // 0x003C7980-0x003C79B8
		private int Internal_GetMeshCount(); // 0x00C92D40-0x00C92DAC
	}

	public enum ParticleSystemGradientMode // TypeDefIndex: 2465
	{
		Color = 0,
		Gradient = 1,
		TwoColors = 2,
		TwoGradients = 3,
		RandomColor = 4
	}

	public enum ParticleSystemStopBehavior // TypeDefIndex: 2466
	{
		StopEmittingAndClear = 0,
		StopEmitting = 1
	}

	[NativeHeader] // 0x003C8BB8-0x003C8BF0
	public struct PhysicsScene2D : IEquatable<PhysicsScene2D> // TypeDefIndex: 2468
	{
		// Fields
		private int m_Handle; // 0x00
	
		// Methods
		public override string ToString(); // 0x00C8D998-0x00C8D9A0
		public override int GetHashCode(); // 0x00C8D9A0-0x00C8DA30
		public override bool Equals(object other); // 0x00C8DA30-0x00C8DA38
		public bool Equals(PhysicsScene2D other); // 0x00C8DA38-0x00C8DA48
		public RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, [UnityEngine.Internal.DefaultValue] /* 0x003C95C4-0x003C95FC */ int layerMask = -5 /* Metadata: 0x0021AFB9 */); // 0x00C8DABC-0x00C8DAC4
		public RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter); // 0x00C8DAC4-0x00C8DB2C
		[NativeMethod] // 0x003C92E8-0x003C934C
		[StaticAccessor] // 0x003C92E8-0x003C934C
		private static RaycastHit2D Raycast_Internal(PhysicsScene2D physicsScene, Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter); // 0x00C8DA48-0x00C8DABC
		public int Raycast(Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter, RaycastHit2D[] results); // 0x00C8DC18-0x00C8DC4C
		[NativeMethod] // 0x003C934C-0x003C93B0
		[StaticAccessor] // 0x003C934C-0x003C93B0
		private static int RaycastNonAlloc_Internal(PhysicsScene2D physicsScene, Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter, out RaycastHit2D[] results); // 0x00C8DBD0-0x00C8DC18
		public int GetRayIntersection(Ray ray, float distance, RaycastHit2D[] results, [UnityEngine.Internal.DefaultValue] /* 0x003C95FC-0x003C9634 */ int layerMask = -5 /* Metadata: 0x0021AFBD */); // 0x00C8DD40-0x00C8DD74
		[NativeMethod] // 0x003C93B0-0x003C9414
		[StaticAccessor] // 0x003C93B0-0x003C9414
		private static int GetRayIntersectionNonAlloc_Internal(PhysicsScene2D physicsScene, Vector3 origin, Vector3 direction, float distance, int layerMask, out RaycastHit2D[] results); // 0x00C8DCF0-0x00C8DD40
		private static void Raycast_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector2 origin, ref Vector2 direction, float distance, ref ContactFilter2D contactFilter, out RaycastHit2D ret); // 0x00C8DB2C-0x00C8DBD0
		private static int RaycastNonAlloc_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector2 origin, ref Vector2 direction, float distance, ref ContactFilter2D contactFilter, out RaycastHit2D[] results); // 0x00C8DC4C-0x00C8DCF0
		private static int GetRayIntersectionNonAlloc_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector3 origin, ref Vector3 direction, float distance, int layerMask, out RaycastHit2D[] results); // 0x00C8DD74-0x00C8DE20
	}

	[NativeHeader] // 0x003C8BF0-0x003C8CA4
	[NativeHeader] // 0x003C8BF0-0x003C8CA4
	[NativeHeader] // 0x003C8BF0-0x003C8CA4
	[StaticAccessor] // 0x003C8BF0-0x003C8CA4
	public class Physics2D // TypeDefIndex: 2469
	{
		// Fields
		private static List<Rigidbody2D> m_LastDisabledRigidbody2D; // 0x00
	
		// Properties
		[NativeProperty] // 0x003C982C-0x003C9890
		[StaticAccessor] // 0x003C982C-0x003C9890
		public static PhysicsScene2D defaultPhysicsScene { get; } // 0x00C8C6B8-0x00C8C724 
		[StaticAccessor] // 0x003C9890-0x003C98C8
		public static bool queriesHitTriggers { get; } // 0x00C8C660-0x00C8C6B8 
	
		// Constructors
		static Physics2D(); // 0x00C8D834-0x00C8D998
	
		// Methods
		[ExcludeFromDocs] // 0x003C9414-0x003C9424
		public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction); // 0x00C8C790-0x00C8C93C
		[ExcludeFromDocs] // 0x003C9424-0x003C9434
		public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance); // 0x00C8C93C-0x00C8CA24
		[ExcludeFromDocs] // 0x003C9434-0x003C946C
		[RequiredByNativeCode] // 0x003C9434-0x003C946C
		public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, int layerMask); // 0x00C8CA24-0x00C8CB68
		[ExcludeFromDocs] // 0x003C946C-0x003C947C
		public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, int layerMask, float minDepth); // 0x00C8CB68-0x00C8CCAC
		public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction, [UnityEngine.Internal.DefaultValue] /* 0x003C9634-0x003C966C */ float distance, [UnityEngine.Internal.DefaultValue] /* 0x003C966C-0x003C96A4 */ int layerMask, [UnityEngine.Internal.DefaultValue] /* 0x003C96A4-0x003C96DC */ float minDepth, [UnityEngine.Internal.DefaultValue] /* 0x003C96DC-0x003C9714 */ float maxDepth); // 0x00C8CCAC-0x00C8CDF8
		[ExcludeFromDocs] // 0x003C947C-0x003C948C
		public static int Raycast(Vector2 origin, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results); // 0x00C8CDF8-0x00C8CF24
		public static int Raycast(Vector2 origin, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results, [UnityEngine.Internal.DefaultValue] /* 0x003C9714-0x003C974C */ float distance); // 0x00C8CF24-0x00C8D000
		[ExcludeFromDocs] // 0x003C948C-0x003C949C
		public static RaycastHit2D[] GetRayIntersectionAll(Ray ray); // 0x00C8D000-0x00C8D0C4
		[ExcludeFromDocs] // 0x003C949C-0x003C94AC
		public static RaycastHit2D[] GetRayIntersectionAll(Ray ray, float distance); // 0x00C8D164-0x00C8D228
		[RequiredByNativeCode] // 0x003C94AC-0x003C94BC
		public static RaycastHit2D[] GetRayIntersectionAll(Ray ray, [UnityEngine.Internal.DefaultValue] /* 0x003C974C-0x003C9784 */ float distance, [UnityEngine.Internal.DefaultValue] /* 0x003C9784-0x003C97BC */ int layerMask); // 0x00C8D228-0x00C8D2F8
		[NativeMethod] // 0x003C94BC-0x003C9520
		[StaticAccessor] // 0x003C94BC-0x003C9520
		private static RaycastHit2D[] GetRayIntersectionAll_Internal(PhysicsScene2D physicsScene, Vector3 origin, Vector3 direction, float distance, int layerMask); // 0x00C8D0C4-0x00C8D164
		[ExcludeFromDocs] // 0x003C9520-0x003C9530
		public static int GetRayIntersectionNonAlloc(Ray ray, RaycastHit2D[] results); // 0x00C8D39C-0x00C8D4D8
		[ExcludeFromDocs] // 0x003C9530-0x003C9540
		public static int GetRayIntersectionNonAlloc(Ray ray, RaycastHit2D[] results, float distance); // 0x00C8D4D8-0x00C8D58C
		[RequiredByNativeCode] // 0x003C9540-0x003C9550
		public static int GetRayIntersectionNonAlloc(Ray ray, RaycastHit2D[] results, [UnityEngine.Internal.DefaultValue] /* 0x003C97BC-0x003C97F4 */ float distance, [UnityEngine.Internal.DefaultValue] /* 0x003C97F4-0x003C982C */ int layerMask); // 0x00C8D58C-0x00C8D644
		[ExcludeFromDocs] // 0x003C9550-0x003C9560
		public static Collider2D[] OverlapCircleAll(Vector2 point, float radius); // 0x00C8D644-0x00C8D718
		[NativeMethod] // 0x003C9560-0x003C95C4
		[StaticAccessor] // 0x003C9560-0x003C95C4
		private static Collider2D[] OverlapCircleAll_Internal(PhysicsScene2D physicsScene, Vector2 point, float radius, ContactFilter2D contactFilter); // 0x00C8D718-0x00C8D7A8
		private static void get_defaultPhysicsScene_Injected(out PhysicsScene2D ret); // 0x00C8C724-0x00C8C790
		private static RaycastHit2D[] GetRayIntersectionAll_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector3 origin, ref Vector3 direction, float distance, int layerMask); // 0x00C8D2F8-0x00C8D39C
		private static Collider2D[] OverlapCircleAll_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector2 point, float radius, ref ContactFilter2D contactFilter); // 0x00C8D7A8-0x00C8D834
	}

	[Serializable]
	[NativeClass] // 0x003C8CA4-0x003C8D4C
	[NativeHeader] // 0x003C8CA4-0x003C8D4C
	[RequiredByNativeCode] // 0x003C8CA4-0x003C8D4C
	public struct ContactFilter2D // TypeDefIndex: 2470
	{
		// Fields
		[NativeName] // 0x003C8F30-0x003C8F68
		public bool useTriggers; // 0x00
		[NativeName] // 0x003C8F68-0x003C8FA0
		public bool useLayerMask; // 0x01
		[NativeName] // 0x003C8FA0-0x003C8FD8
		public bool useDepth; // 0x02
		[NativeName] // 0x003C8FD8-0x003C9010
		public bool useOutsideDepth; // 0x03
		[NativeName] // 0x003C9010-0x003C9048
		public bool useNormalAngle; // 0x04
		[NativeName] // 0x003C9048-0x003C9080
		public bool useOutsideNormalAngle; // 0x05
		[NativeName] // 0x003C9080-0x003C90B8
		public LayerMask layerMask; // 0x08
		[NativeName] // 0x003C90B8-0x003C90F0
		public float minDepth; // 0x0C
		[NativeName] // 0x003C90F0-0x003C9128
		public float maxDepth; // 0x10
		[NativeName] // 0x003C9128-0x003C9160
		public float minNormalAngle; // 0x14
		[NativeName] // 0x003C9160-0x003C9198
		public float maxNormalAngle; // 0x18
	
		// Methods
		private void CheckConsistency(); // 0x00C8C560-0x00C8C568
		public void SetLayerMask(LayerMask layerMask); // 0x00C8C568-0x00C8C578
		public void SetDepth(float minDepth, float maxDepth); // 0x00C8C578-0x00C8C590
		internal static ContactFilter2D CreateLegacyFilter(int layerMask, float minDepth, float maxDepth); // 0x00C8C590-0x00C8C660
	}

	[NativeClass] // 0x003C8D4C-0x003C8DFC
	[NativeHeader] // 0x003C8D4C-0x003C8DFC
	[RequiredByNativeCode] // 0x003C8D4C-0x003C8DFC
	public struct RaycastHit2D // TypeDefIndex: 2471
	{
		// Fields
		[NativeName] // 0x003C9198-0x003C91D0
		private Vector2 m_Centroid; // 0x00
		[NativeName] // 0x003C91D0-0x003C9208
		private Vector2 m_Point; // 0x08
		[NativeName] // 0x003C9208-0x003C9240
		private Vector2 m_Normal; // 0x10
		[NativeName] // 0x003C9240-0x003C9278
		private float m_Distance; // 0x18
		[NativeName] // 0x003C9278-0x003C92B0
		private float m_Fraction; // 0x1C
		[NativeName] // 0x003C92B0-0x003C92E8
		private int m_Collider; // 0x20
	
		// Properties
		public Vector2 point { get; } // 0x00C8DE20-0x00C8DE30 
		public Vector2 normal { get; } // 0x00C8DE30-0x00C8DE40 
		public float distance { get; } // 0x00C8DE40-0x00C8DEF8 
		public Collider2D collider { get; } // 0x00C8DEF8-0x00C8DF00 
	}

	[NativeHeader] // 0x003C8DFC-0x003C8E84
	[RequireComponent] // 0x003C8DFC-0x003C8E84
	public sealed class Rigidbody2D : Component // TypeDefIndex: 2472
	{
		// Properties
		public Vector2 position { get; set; } // 0x00C8DF00-0x00C8DF28 0x00C8DF9C-0x00C8DFC0
		public float rotation { get; set; } // 0x00C8E034-0x00C8E0A0 0x00C8E0A0-0x00C8E114
		public Vector2 velocity { get; set; } // 0x00C8E188-0x00C8E1B0 0x00C8E224-0x00C8E248
		public float angularVelocity { get; set; } // 0x00C8E2BC-0x00C8E328 0x00C8E328-0x00C8E39C
	
		// Methods
		public void MoveRotation(float angle); // 0x00C8E114-0x00C8E188
		private void get_position_Injected(out Vector2 ret); // 0x00C8DF28-0x00C8DF9C
		private void set_position_Injected(ref Vector2 value); // 0x00C8DFC0-0x00C8E034
		private void get_velocity_Injected(out Vector2 ret); // 0x00C8E1B0-0x00C8E224
		private void set_velocity_Injected(ref Vector2 value); // 0x00C8E248-0x00C8E2BC
	}

	[NativeHeader] // 0x003C8E84-0x003C8F30
	[RequireComponent] // 0x003C8E84-0x003C8F30
	[RequiredByNativeCode] // 0x003C8E84-0x003C8F30
	public class Collider2D : Behaviour // TypeDefIndex: 2473
	{
		// Constructors
		public Collider2D(); // 0x00C8C2D4-0x00C8C560
	}

	[NativeHeader] // 0x003CA9D8-0x003CAA10
	public static class ScreenCapture // TypeDefIndex: 2475
	{
		// Nested types
		public enum StereoScreenCaptureMode // TypeDefIndex: 2476
		{
			LeftEye = 1,
			RightEye = 2,
			BothEyes = 3
		}
	
		// Methods
		public static void CaptureScreenshot(string filename); // 0x00CE0B88-0x00CE0B94
		private static void CaptureScreenshot(string filename, [UnityEngine.Internal.DefaultValue] /* 0x003CAA10-0x003CAA48 */ int superSize, [UnityEngine.Internal.DefaultValue] /* 0x003CAA48-0x003CAA80 */ StereoScreenCaptureMode CaptureMode); // 0x00CE0B94-0x00CEF548
	}

	public enum RenderMode // TypeDefIndex: 2478
	{
		ScreenSpaceOverlay = 0,
		ScreenSpaceCamera = 1,
		WorldSpace = 2
	}

	[NativeClass] // 0x003CBB80-0x003CBC50
	[NativeHeader] // 0x003CBB80-0x003CBC50
	[NativeHeader] // 0x003CBB80-0x003CBC50
	[RequireComponent] // 0x003CBB80-0x003CBC50
	public sealed class Canvas : Behaviour // TypeDefIndex: 2479
	{
		// Fields
		[CompilerGenerated] // 0x003CBE44-0x003CBE80
		[DebuggerBrowsable] // 0x003CBE44-0x003CBE80
		private static WillRenderCanvases willRenderCanvases; // 0x00
	
		// Properties
		public RenderMode renderMode { get; } // 0x00C85200-0x00C8526C 
		public bool isRootCanvas { get; } // 0x00C8526C-0x00C852D8 
		public float scaleFactor { get; set; } // 0x00C852D8-0x00C85344 0x00C85344-0x00C853B8
		public float referencePixelsPerUnit { get; set; } // 0x00C853B8-0x00C85424 0x00C85424-0x00C85498
		public bool pixelPerfect { get; } // 0x00C85498-0x00C85504 
		public int renderOrder { get; } // 0x00C85504-0x00C85570 
		public bool overrideSorting { get; set; } // 0x00C85570-0x00C855DC 0x00C855DC-0x00C85650
		public int sortingOrder { get; set; } // 0x00C85650-0x00C856BC 0x00C856BC-0x00C85730
		public int targetDisplay { get; } // 0x00C85730-0x00C8579C 
		public int sortingLayerID { get; set; } // 0x00C8579C-0x00C85808 0x00C85808-0x00C8587C
		public Canvas rootCanvas { get; } // 0x00C8587C-0x00C858E8 
		[NativeProperty] // 0x003CBFF0-0x003CC030
		public Camera worldCamera { get; } // 0x00C858E8-0x00C85954 
	
		// Events
		public static event WillRenderCanvases willRenderCanvases {
			add; // 0x00C85000-0x00C85100
			remove; // 0x00C85100-0x00C85200
		}
	
		// Nested types
		public delegate void WillRenderCanvases(); // TypeDefIndex: 2480; 0x00C85A68-0x00C85E74
	
		// Constructors
		public Canvas(); // 0x00C84FF8-0x00C85000
	
		// Methods
		[FreeFunction] // 0x003CBEBC-0x003CBEF4
		public static Material GetDefaultCanvasMaterial(); // 0x00C85954-0x00C859AC
		[FreeFunction] // 0x003CBEF4-0x003CBF2C
		public static Material GetETC1SupportedCanvasMaterial(); // 0x00C859AC-0x00C85A04
		public static void ForceUpdateCanvases(); // 0x00C85A04-0x00C85A08
		[RequiredByNativeCode] // 0x003CBF2C-0x003CBF3C
		private static void SendWillRenderCanvases(); // 0x00C85A08-0x00C85A68
	}

	[NativeHeader] // 0x003CBC50-0x003CBCB4
	[StaticAccessor] // 0x003CBC50-0x003CBCB4
	public static class UISystemProfilerApi // TypeDefIndex: 2481
	{
		// Nested types
		public enum SampleType // TypeDefIndex: 2482
		{
			Layout = 0,
			Render = 1
		}
	
		// Methods
		public static void BeginSample(SampleType type); // 0x00C87E0C-0x00C87E78
		public static void EndSample(SampleType type); // 0x00C87E78-0x00C87EE4
		public static void AddMarker(string name, UnityEngine.Object obj); // 0x00C87EE4-0x00C87F58
	}

	public interface ICanvasRaycastFilter // TypeDefIndex: 2483
	{
		// Methods
		bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera);
	}

	[NativeClass] // 0x003CBCB4-0x003CBD14
	[NativeHeader] // 0x003CBCB4-0x003CBD14
	public sealed class CanvasGroup : Behaviour, ICanvasRaycastFilter // TypeDefIndex: 2484
	{
		// Properties
		[NativeProperty] // 0x003CC030-0x003CC070
		public float alpha { get; set; } // 0x00C85EC4-0x00C85F30 0x00C85F30-0x00C85FA4
		[NativeProperty] // 0x003CC070-0x003CC0B0
		public bool interactable { get; set; } // 0x00C85FA4-0x00C86010 0x00C86010-0x00C86084
		[NativeProperty] // 0x003CC0B0-0x003CC0F0
		public bool blocksRaycasts { get; } // 0x00C86084-0x00C860F0 
		[NativeProperty] // 0x003CC0F0-0x003CC130
		public bool ignoreParentGroups { get; } // 0x00C860F0-0x00C8615C 
	
		// Methods
		public bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera); // 0x00C8615C-0x00C86160
	}

	[NativeClass] // 0x003CBD14-0x003CBD74
	[NativeHeader] // 0x003CBD14-0x003CBD74
	public sealed class CanvasRenderer : Component // TypeDefIndex: 2485
	{
		// Fields
		[CompilerGenerated] // 0x003CBE80-0x003CBEBC
		[DebuggerBrowsable] // 0x003CBE80-0x003CBEBC
		private bool <isMask>k__BackingField; // 0x18
	
		// Properties
		public bool hasPopInstruction { set; } // 0x00C86160-0x00C861D4
		public int materialCount { get; set; } // 0x00C861D4-0x00C86240 0x00C86240-0x00C862B4
		public int popMaterialCount { set; } // 0x00C862B4-0x00C86328
		public int absoluteDepth { get; } // 0x00C86328-0x00C86394 
		public bool hasMoved { get; } // 0x00C86394-0x00C86400 
		[NativeProperty] // 0x003CC130-0x003CC170
		public bool cull { get; set; } // 0x00C86400-0x00C8646C 0x00C8646C-0x00C864E0
	
		// Methods
		public void SetColor(Color color); // 0x00C864E0-0x00C86508
		public Color GetColor(); // 0x00C8657C-0x00C865A8
		public void EnableRectClipping(Rect rect); // 0x00C8661C-0x00C86644
		public void DisableRectClipping(); // 0x00C866B8-0x00C86724
		public void SetMaterial(Material material, int index); // 0x00C86724-0x00C867A8
		public void SetPopMaterial(Material material, int index); // 0x00C867A8-0x00C8682C
		public void SetTexture(Texture texture); // 0x00C8682C-0x00C868A0
		public void SetAlphaTexture(Texture texture); // 0x00C868A0-0x00C86914
		public void SetMesh(Mesh mesh); // 0x00C86914-0x00C86988
		public void Clear(); // 0x00C86988-0x00C869F4
		public void SetMaterial(Material material, Texture texture); // 0x00C869F4-0x00C86AA8
		public static void SplitUIVertexStreams(List<UIVertex> verts, List<Vector3> positions, List<Color32> colors, List<Vector2> uv0S, List<Vector2> uv1S, List<Vector2> uv2S, List<Vector2> uv3S, List<Vector3> normals, List<Vector4> tangents, List<int> indices); // 0x00C86AA8-0x00C86AE0
		public static void CreateUIVertexStream(List<UIVertex> verts, List<Vector3> positions, List<Color32> colors, List<Vector2> uv0S, List<Vector2> uv1S, List<Vector2> uv2S, List<Vector2> uv3S, List<Vector3> normals, List<Vector4> tangents, List<int> indices); // 0x00C86C20-0x00C86C2C
		public static void AddUIVertexStream(List<UIVertex> verts, List<Vector3> positions, List<Color32> colors, List<Vector2> uv0S, List<Vector2> uv1S, List<Vector2> uv2S, List<Vector2> uv3S, List<Vector3> normals, List<Vector4> tangents); // 0x00C86CFC-0x00C86D08
		[StaticAccessor] // 0x003CBF3C-0x003CBF78
		private static void SplitIndicesStreamsInternal(object verts, object indices); // 0x00C86BAC-0x00C86C20
		[StaticAccessor] // 0x003CBF78-0x003CBFB4
		private static void SplitUIVertexStreamsInternal(object verts, object positions, object colors, object uv0S, object uv1S, object uv2S, object uv3S, object normals, object tangents); // 0x00C86AE0-0x00C86BAC
		[StaticAccessor] // 0x003CBFB4-0x003CBFF0
		private static void CreateUIVertexStreamInternal(object verts, object positions, object colors, object uv0S, object uv1S, object uv2S, object uv3S, object normals, object tangents, object indices); // 0x00C86C2C-0x00C86CFC
		private void SetColor_Injected(ref Color color); // 0x00C86508-0x00C8657C
		private void GetColor_Injected(out Color ret); // 0x00C865A8-0x00C8661C
		private void EnableRectClipping_Injected(ref Rect rect); // 0x00C86644-0x00C866B8
	}

	[NativeHeader] // 0x003CBD74-0x003CBE44
	[NativeHeader] // 0x003CBD74-0x003CBE44
	[NativeHeader] // 0x003CBD74-0x003CBE44
	[NativeHeader] // 0x003CBD74-0x003CBE44
	[StaticAccessor] // 0x003CBD74-0x003CBE44
	public sealed class RectTransformUtility // TypeDefIndex: 2486
	{
		// Fields
		private static readonly Vector3[] s_Corners; // 0x00
	
		// Constructors
		static RectTransformUtility(); // 0x00C87DA8-0x00C87E0C
	
		// Methods
		public static bool RectangleContainsScreenPoint(RectTransform rect, Vector2 screenPoint); // 0x00C86D08-0x00C86D88
		public static bool RectangleContainsScreenPoint(RectTransform rect, Vector2 screenPoint, Camera cam); // 0x00C86D88-0x00C86E14
		public static bool ScreenPointToWorldPointInRectangle(RectTransform rect, Vector2 screenPoint, Camera cam, out Vector3 worldPoint); // 0x00C86E98-0x00C870C8
		public static bool ScreenPointToLocalPointInRectangle(RectTransform rect, Vector2 screenPoint, Camera cam, out Vector2 localPoint); // 0x00C87288-0x00C873DC
		public static Ray ScreenPointToRay(Camera cam, Vector2 screenPos); // 0x00C870C8-0x00C87288
		public static void FlipLayoutOnAxis(RectTransform rect, int axis, bool keepPositioning, bool recursive); // 0x00C873DC-0x00C87718
		public static void FlipLayoutAxes(RectTransform rect, bool keepPositioning, bool recursive); // 0x00C87718-0x00C87AB8
		private static Vector2 GetTransposed(Vector2 input); // 0x00C87AB8-0x00C87AF0
		public static Vector2 PixelAdjustPoint(Vector2 point, Transform elementTransform, Canvas canvas); // 0x00C87AF0-0x00C87B84
		public static Rect PixelAdjustRect(RectTransform rectTransform, Canvas canvas); // 0x00C87C10-0x00C87CA0
		private static bool PointInRectangle(Vector2 screenPoint, RectTransform rect, Camera cam); // 0x00C86E14-0x00C86E98
		private static void PixelAdjustPoint_Injected(ref Vector2 point, Transform elementTransform, Canvas canvas, out Vector2 ret); // 0x00C87B84-0x00C87C10
		private static void PixelAdjustRect_Injected(RectTransform rectTransform, Canvas canvas, out Rect ret); // 0x00C87CA0-0x00C87D24
		private static bool PointInRectangle_Injected(ref Vector2 screenPoint, RectTransform rect, Camera cam); // 0x00C87D24-0x00C87DA8
	}
}

namespace UnityEngine.Networking.Match
{
	internal abstract class Request // TypeDefIndex: 2488
	{
		// Fields
		public static readonly int currentVersion; // 0x00
		[CompilerGenerated] // 0x003CD960-0x003CD99C
		[DebuggerBrowsable] // 0x003CD960-0x003CD99C
		private SourceID <sourceId>k__BackingField; // 0x10
		[CompilerGenerated] // 0x003CD99C-0x003CD9D8
		[DebuggerBrowsable] // 0x003CD99C-0x003CD9D8
		private string <projectId>k__BackingField; // 0x18
		[CompilerGenerated] // 0x003CD9D8-0x003CDA14
		[DebuggerBrowsable] // 0x003CD9D8-0x003CDA14
		private string <accessTokenString>k__BackingField; // 0x20
		[CompilerGenerated] // 0x003CDA14-0x003CDA50
		[DebuggerBrowsable] // 0x003CDA14-0x003CDA50
		private int <domain>k__BackingField; // 0x28
	
		// Properties
		public SourceID sourceId { [CompilerGenerated] /* 0x003CE828-0x003CE838 */ get; } // 0x00C591E4-0x00C591EC 
		public string projectId { [CompilerGenerated] /* 0x003CE838-0x003CE848 */ get; } // 0x00C591EC-0x00C591F4 
		public string accessTokenString { [CompilerGenerated] /* 0x003CE848-0x003CE858 */ get; } // 0x00C591F4-0x00C591FC 
		public int domain { [CompilerGenerated] /* 0x003CE858-0x003CE868 */ get; [CompilerGenerated] /* 0x003CE868-0x003CE878 */ set; } // 0x00C556F8-0x00C55700 0x00C5514C-0x00C55154
	
		// Constructors
		protected Request(); // 0x00C50CE4-0x00C50CEC
		static Request(); // 0x00C591FC-0x00C59250
	
		// Methods
		public override string ToString(); // 0x00C5115C-0x00C51438
	}

	internal interface IResponse // TypeDefIndex: 2489
	{
	}

	[Serializable]
	internal abstract class Response : IResponse // TypeDefIndex: 2490
	{
		// Fields
		public bool success; // 0x10
		public string extendedInfo; // 0x18
	
		// Constructors
		protected Response(); // 0x00C50C74-0x00C50C7C
	
		// Methods
		public void SetFailure(string info); // 0x00C59250-0x00C59280
		public override string ToString(); // 0x00C517D8-0x00C5196C
	}

	internal class BasicResponse : Response // TypeDefIndex: 2491
	{
		// Constructors
		public BasicResponse(); // 0x00C50C6C-0x00C50C74
	}

	internal class CreateMatchRequest : Request // TypeDefIndex: 2492
	{
		// Fields
		[CompilerGenerated] // 0x003CDA50-0x003CDA8C
		[DebuggerBrowsable] // 0x003CDA50-0x003CDA8C
		private string <name>k__BackingField; // 0x30
		[CompilerGenerated] // 0x003CDA8C-0x003CDAC8
		[DebuggerBrowsable] // 0x003CDA8C-0x003CDAC8
		private uint <size>k__BackingField; // 0x38
		[CompilerGenerated] // 0x003CDAC8-0x003CDB04
		[DebuggerBrowsable] // 0x003CDAC8-0x003CDB04
		private string <publicAddress>k__BackingField; // 0x40
		[CompilerGenerated] // 0x003CDB04-0x003CDB40
		[DebuggerBrowsable] // 0x003CDB04-0x003CDB40
		private string <privateAddress>k__BackingField; // 0x48
		[CompilerGenerated] // 0x003CDB40-0x003CDB7C
		[DebuggerBrowsable] // 0x003CDB40-0x003CDB7C
		private int <eloScore>k__BackingField; // 0x50
		[CompilerGenerated] // 0x003CDB7C-0x003CDBB8
		[DebuggerBrowsable] // 0x003CDB7C-0x003CDBB8
		private bool <advertise>k__BackingField; // 0x54
		[CompilerGenerated] // 0x003CDBB8-0x003CDBF4
		[DebuggerBrowsable] // 0x003CDBB8-0x003CDBF4
		private string <password>k__BackingField; // 0x58
		[CompilerGenerated] // 0x003CDBF4-0x003CDC30
		[DebuggerBrowsable] // 0x003CDBF4-0x003CDC30
		private Dictionary<string, long> <matchAttributes>k__BackingField; // 0x60
	
		// Properties
		public string name { [CompilerGenerated] /* 0x003CE878-0x003CE888 */ get; [CompilerGenerated] /* 0x003CE888-0x003CE898 */ set; } // 0x00C50CEC-0x00C50CF4 0x00C50CF4-0x00C50CFC
		public uint size { [CompilerGenerated] /* 0x003CE898-0x003CE8A8 */ get; [CompilerGenerated] /* 0x003CE8A8-0x003CE8B8 */ set; } // 0x00C50CFC-0x00C50D04 0x00C50D04-0x00C50D0C
		public string publicAddress { [CompilerGenerated] /* 0x003CE8B8-0x003CE8C8 */ get; [CompilerGenerated] /* 0x003CE8C8-0x003CE8D8 */ set; } // 0x00C50D0C-0x00C50D14 0x00C50D14-0x00C50D1C
		public string privateAddress { [CompilerGenerated] /* 0x003CE8D8-0x003CE8E8 */ get; [CompilerGenerated] /* 0x003CE8E8-0x003CE8F8 */ set; } // 0x00C50D1C-0x00C50D24 0x00C50D24-0x00C50D2C
		public int eloScore { [CompilerGenerated] /* 0x003CE8F8-0x003CE908 */ get; [CompilerGenerated] /* 0x003CE908-0x003CE918 */ set; } // 0x00C50D2C-0x00C50D34 0x00C50D34-0x00C50D3C
		public bool advertise { [CompilerGenerated] /* 0x003CE918-0x003CE928 */ get; [CompilerGenerated] /* 0x003CE928-0x003CE938 */ set; } // 0x00C50D3C-0x00C50D44 0x00C50D44-0x00C50D50
		public string password { [CompilerGenerated] /* 0x003CE938-0x003CE948 */ get; [CompilerGenerated] /* 0x003CE948-0x003CE958 */ set; } // 0x00C50D50-0x00C50D58 0x00C50D58-0x00C50D60
		public Dictionary<string, long> matchAttributes { [CompilerGenerated] /* 0x003CE958-0x003CE968 */ get; } // 0x00C50D60-0x00C50D68 
	
		// Constructors
		public CreateMatchRequest(); // 0x00C50C7C-0x00C50CE4
	
		// Methods
		public override string ToString(); // 0x00C50D68-0x00C5115C
	}

	internal class CreateMatchResponse : BasicResponse // TypeDefIndex: 2493
	{
		// Fields
		public string address; // 0x20
		public int port; // 0x28
		public int domain; // 0x2C
		public ulong networkId; // 0x30
		public string accessTokenString; // 0x38
		public NodeID nodeId; // 0x40
		public bool usingRelay; // 0x42
	
		// Constructors
		public CreateMatchResponse(); // 0x00C51438-0x00C51444
	
		// Methods
		public override string ToString(); // 0x00C51444-0x00C517D8
	}

	internal class JoinMatchRequest : Request // TypeDefIndex: 2494
	{
		// Fields
		[CompilerGenerated] // 0x003CDC30-0x003CDC6C
		[DebuggerBrowsable] // 0x003CDC30-0x003CDC6C
		private NetworkID <networkId>k__BackingField; // 0x30
		[CompilerGenerated] // 0x003CDC6C-0x003CDCA8
		[DebuggerBrowsable] // 0x003CDC6C-0x003CDCA8
		private string <publicAddress>k__BackingField; // 0x38
		[CompilerGenerated] // 0x003CDCA8-0x003CDCE4
		[DebuggerBrowsable] // 0x003CDCA8-0x003CDCE4
		private string <privateAddress>k__BackingField; // 0x40
		[CompilerGenerated] // 0x003CDCE4-0x003CDD20
		[DebuggerBrowsable] // 0x003CDCE4-0x003CDD20
		private int <eloScore>k__BackingField; // 0x48
		[CompilerGenerated] // 0x003CDD20-0x003CDD5C
		[DebuggerBrowsable] // 0x003CDD20-0x003CDD5C
		private string <password>k__BackingField; // 0x50
	
		// Properties
		public NetworkID networkId { [CompilerGenerated] /* 0x003CE968-0x003CE978 */ get; [CompilerGenerated] /* 0x003CE978-0x003CE988 */ set; } // 0x00C53030-0x00C53038 0x00C53038-0x00C53040
		public string publicAddress { [CompilerGenerated] /* 0x003CE988-0x003CE998 */ get; [CompilerGenerated] /* 0x003CE998-0x003CE9A8 */ set; } // 0x00C53040-0x00C53048 0x00C53048-0x00C53050
		public string privateAddress { [CompilerGenerated] /* 0x003CE9A8-0x003CE9B8 */ get; [CompilerGenerated] /* 0x003CE9B8-0x003CE9C8 */ set; } // 0x00C53050-0x00C53058 0x00C53058-0x00C53060
		public int eloScore { [CompilerGenerated] /* 0x003CE9C8-0x003CE9D8 */ get; [CompilerGenerated] /* 0x003CE9D8-0x003CE9E8 */ set; } // 0x00C53060-0x00C53068 0x00C53068-0x00C53070
		public string password { [CompilerGenerated] /* 0x003CE9E8-0x003CE9F8 */ get; [CompilerGenerated] /* 0x003CE9F8-0x003CEA08 */ set; } // 0x00C53070-0x00C53078 0x00C53078-0x00C53080
	
		// Constructors
		public JoinMatchRequest(); // 0x00C51FC8-0x00C53030
	
		// Methods
		public override string ToString(); // 0x00C53080-0x00C533A0
	}

	[Serializable]
	internal class JoinMatchResponse : BasicResponse // TypeDefIndex: 2495
	{
		// Fields
		public string address; // 0x20
		public int port; // 0x28
		public int domain; // 0x2C
		public ulong networkId; // 0x30
		public string accessTokenString; // 0x38
		public NodeID nodeId; // 0x40
		public bool usingRelay; // 0x42
	
		// Constructors
		public JoinMatchResponse(); // 0x00C533A0-0x00C533AC
	
		// Methods
		public override string ToString(); // 0x00C533AC-0x00C53740
	}

	internal class DestroyMatchRequest : Request // TypeDefIndex: 2496
	{
		// Fields
		[CompilerGenerated] // 0x003CDD5C-0x003CDD98
		[DebuggerBrowsable] // 0x003CDD5C-0x003CDD98
		private NetworkID <networkId>k__BackingField; // 0x30
	
		// Properties
		public NetworkID networkId { [CompilerGenerated] /* 0x003CEA08-0x003CEA18 */ get; [CompilerGenerated] /* 0x003CEA18-0x003CEA28 */ set; } // 0x00C519D4-0x00C519DC 0x00C519DC-0x00C519E4
	
		// Constructors
		public DestroyMatchRequest(); // 0x00C5196C-0x00C519D4
	
		// Methods
		public override string ToString(); // 0x00C519E4-0x00C51B88
	}

	internal class DropConnectionRequest : Request // TypeDefIndex: 2497
	{
		// Fields
		[CompilerGenerated] // 0x003CDD98-0x003CDDD4
		[DebuggerBrowsable] // 0x003CDD98-0x003CDDD4
		private NetworkID <networkId>k__BackingField; // 0x30
		[CompilerGenerated] // 0x003CDDD4-0x003CDE10
		[DebuggerBrowsable] // 0x003CDDD4-0x003CDE10
		private NodeID <nodeId>k__BackingField; // 0x38
	
		// Properties
		public NetworkID networkId { [CompilerGenerated] /* 0x003CEA28-0x003CEA38 */ get; [CompilerGenerated] /* 0x003CEA38-0x003CEA48 */ set; } // 0x00C51BF0-0x00C51BF8 0x00C51BF8-0x00C51C00
		public NodeID nodeId { [CompilerGenerated] /* 0x003CEA48-0x003CEA58 */ get; [CompilerGenerated] /* 0x003CEA58-0x003CEA68 */ set; } // 0x00C51C00-0x00C51C08 0x00C51C08-0x00C51C10
	
		// Constructors
		public DropConnectionRequest(); // 0x00C51B88-0x00C51BF0
	
		// Methods
		public override string ToString(); // 0x00C51C10-0x00C51E84
	}

	[Serializable]
	internal class DropConnectionResponse : Response // TypeDefIndex: 2498
	{
		// Fields
		public ulong networkId; // 0x20
	
		// Constructors
		public DropConnectionResponse(); // 0x00C51E84-0x00C51E8C
	
		// Methods
		public override string ToString(); // 0x00C51E8C-0x00C51FC8
	}

	internal class ListMatchRequest : Request // TypeDefIndex: 2499
	{
		// Fields
		[CompilerGenerated] // 0x003CDE10-0x003CDE4C
		[DebuggerBrowsable] // 0x003CDE10-0x003CDE4C
		private int <pageSize>k__BackingField; // 0x2C
		[CompilerGenerated] // 0x003CDE4C-0x003CDE88
		[DebuggerBrowsable] // 0x003CDE4C-0x003CDE88
		private int <pageNum>k__BackingField; // 0x30
		[CompilerGenerated] // 0x003CDE88-0x003CDEC4
		[DebuggerBrowsable] // 0x003CDE88-0x003CDEC4
		private string <nameFilter>k__BackingField; // 0x38
		[CompilerGenerated] // 0x003CDEC4-0x003CDF00
		[DebuggerBrowsable] // 0x003CDEC4-0x003CDF00
		private bool <filterOutPrivateMatches>k__BackingField; // 0x40
		[CompilerGenerated] // 0x003CDF00-0x003CDF3C
		[DebuggerBrowsable] // 0x003CDF00-0x003CDF3C
		private int <eloScore>k__BackingField; // 0x44
		[CompilerGenerated] // 0x003CDF3C-0x003CDF78
		[DebuggerBrowsable] // 0x003CDF3C-0x003CDF78
		private Dictionary<string, long> <matchAttributeFilterLessThan>k__BackingField; // 0x48
		[CompilerGenerated] // 0x003CDF78-0x003CDFB4
		[DebuggerBrowsable] // 0x003CDF78-0x003CDFB4
		private Dictionary<string, long> <matchAttributeFilterEqualTo>k__BackingField; // 0x50
		[CompilerGenerated] // 0x003CDFB4-0x003CDFF0
		[DebuggerBrowsable] // 0x003CDFB4-0x003CDFF0
		private Dictionary<string, long> <matchAttributeFilterGreaterThan>k__BackingField; // 0x58
	
		// Properties
		public int pageSize { [CompilerGenerated] /* 0x003CEA68-0x003CEA78 */ get; [CompilerGenerated] /* 0x003CEA78-0x003CEA88 */ set; } // 0x00C537A8-0x00C537B0 0x00C537B0-0x00C537B8
		public int pageNum { [CompilerGenerated] /* 0x003CEA88-0x003CEA98 */ get; [CompilerGenerated] /* 0x003CEA98-0x003CEAA8 */ set; } // 0x00C537B8-0x00C537C0 0x00C537C0-0x00C537C8
		public string nameFilter { [CompilerGenerated] /* 0x003CEAA8-0x003CEAB8 */ get; [CompilerGenerated] /* 0x003CEAB8-0x003CEAC8 */ set; } // 0x00C537C8-0x00C537D0 0x00C537D0-0x00C537D8
		public bool filterOutPrivateMatches { [CompilerGenerated] /* 0x003CEAC8-0x003CEAD8 */ get; [CompilerGenerated] /* 0x003CEAD8-0x003CEAE8 */ set; } // 0x00C537D8-0x00C537E0 0x00C537E0-0x00C537EC
		public int eloScore { [CompilerGenerated] /* 0x003CEAE8-0x003CEAF8 */ get; [CompilerGenerated] /* 0x003CEAF8-0x003CEB08 */ set; } // 0x00C537EC-0x00C537F4 0x00C537F4-0x00C537FC
		public Dictionary<string, long> matchAttributeFilterLessThan { [CompilerGenerated] /* 0x003CEB08-0x003CEB18 */ get; } // 0x00C537FC-0x00C53804 
		public Dictionary<string, long> matchAttributeFilterEqualTo { [CompilerGenerated] /* 0x003CEB18-0x003CEB28 */ get; } // 0x00C53804-0x00C5380C 
		public Dictionary<string, long> matchAttributeFilterGreaterThan { [CompilerGenerated] /* 0x003CEB28-0x003CEB38 */ get; } // 0x00C5380C-0x00C53814 
	
		// Constructors
		public ListMatchRequest(); // 0x00C53740-0x00C537A8
	
		// Methods
		public override string ToString(); // 0x00C53814-0x00C53C48
	}

	[Serializable]
	internal class MatchDirectConnectInfo // TypeDefIndex: 2500
	{
		// Fields
		public NodeID nodeId; // 0x10
		public string publicAddress; // 0x18
		public string privateAddress; // 0x20
		public HostPriority hostPriority; // 0x28
	
		// Constructors
		public MatchDirectConnectInfo(); // 0x00C542BC-0x00C542C4
	
		// Methods
		public override string ToString(); // 0x00C542C4-0x00C5450C
	}

	[Serializable]
	internal class MatchDesc // TypeDefIndex: 2501
	{
		// Fields
		public ulong networkId; // 0x10
		public string name; // 0x18
		public int averageEloScore; // 0x20
		public int maxSize; // 0x24
		public int currentSize; // 0x28
		public bool isPrivate; // 0x2C
		public Dictionary<string, long> matchAttributes; // 0x30
		public NodeID hostNodeId; // 0x38
		public List<MatchDirectConnectInfo> directConnectInfos; // 0x40
	
		// Constructors
		public MatchDesc(); // 0x00C53E1C-0x00C53E24
	
		// Methods
		public override string ToString(); // 0x00C53E24-0x00C542BC
	}

	[Serializable]
	internal class ListMatchResponse : BasicResponse // TypeDefIndex: 2502
	{
		// Fields
		public List<MatchDesc> matches; // 0x20
	
		// Constructors
		public ListMatchResponse(); // 0x00C53C48-0x00C53CBC
	
		// Methods
		public override string ToString(); // 0x00C53CBC-0x00C53E1C
	}

	internal class SetMatchAttributesRequest : Request // TypeDefIndex: 2503
	{
		// Fields
		[CompilerGenerated] // 0x003CDFF0-0x003CE02C
		[DebuggerBrowsable] // 0x003CDFF0-0x003CE02C
		private NetworkID <networkId>k__BackingField; // 0x30
		[CompilerGenerated] // 0x003CE02C-0x003CE068
		[DebuggerBrowsable] // 0x003CE02C-0x003CE068
		private bool <isListed>k__BackingField; // 0x38
	
		// Properties
		public NetworkID networkId { [CompilerGenerated] /* 0x003CEB38-0x003CEB48 */ get; [CompilerGenerated] /* 0x003CEB48-0x003CEB58 */ set; } // 0x00C59068-0x00C59070 0x00C57B9C-0x00C57BA4
		public bool isListed { [CompilerGenerated] /* 0x003CEB58-0x003CEB68 */ get; [CompilerGenerated] /* 0x003CEB68-0x003CEB78 */ set; } // 0x00C59070-0x00C59078 0x00C57BA4-0x00C57BB0
	
		// Constructors
		public SetMatchAttributesRequest(); // 0x00C57B34-0x00C57B9C
	
		// Methods
		public override string ToString(); // 0x00C59280-0x00C59494
	}
}

namespace UnityEngine.Networking.Types
{
	[System.ComponentModel.DefaultValue] // 0x003CD270-0x003CD2EC
	public enum AppID : ulong // TypeDefIndex: 2504
	{
		Invalid = 18446744073709551615
	}

	[System.ComponentModel.DefaultValue] // 0x003CD2EC-0x003CD368
	public enum SourceID : ulong // TypeDefIndex: 2505
	{
		Invalid = 18446744073709551615
	}

	[System.ComponentModel.DefaultValue] // 0x003CD368-0x003CD3E4
	public enum NetworkID : ulong // TypeDefIndex: 2506
	{
		Invalid = 18446744073709551615
	}

	[System.ComponentModel.DefaultValue] // 0x003CD3E4-0x003CD45C
	public enum NodeID : ushort // TypeDefIndex: 2507
	{
		Invalid = 0
	}

	[System.ComponentModel.DefaultValue] // 0x003CD45C-0x003CD4D8
	public enum HostPriority // TypeDefIndex: 2508
	{
		Invalid = 2147483647
	}

	public class NetworkAccessToken // TypeDefIndex: 2509
	{
		// Fields
		public byte[] array; // 0x10
	
		// Constructors
		public NetworkAccessToken(); // 0x00C5BFAC-0x00C5C010
		public NetworkAccessToken(string strArray); // 0x00C5465C-0x00C54768
	
		// Methods
		public string GetByteString(); // 0x00C56698-0x00C56704
	}
}

namespace UnityEngine.Networking
{
	public class Utility // TypeDefIndex: 2510
	{
		// Fields
		private static Dictionary<NetworkID, NetworkAccessToken> s_dictTokens; // 0x00
	
		// Constructors
		static Utility(); // 0x00C5C010-0x00C5F20C
	
		// Methods
		public static SourceID GetSourceID(); // 0x00C556B8-0x00C556F8
		public static void SetAccessTokenForNetwork(NetworkID netId, NetworkAccessToken accessToken); // 0x00C55810-0x00C55940
		public static NetworkAccessToken GetAccessTokenForNetwork(NetworkID netId); // 0x00C565CC-0x00C56698
	}
}

namespace UnityEngine.Networking.Match
{
	[Obsolete] // 0x003CD4D8-0x003CD510
	public class MatchInfo // TypeDefIndex: 2511
	{
		// Fields
		[CompilerGenerated] // 0x003CE068-0x003CE0A4
		[DebuggerBrowsable] // 0x003CE068-0x003CE0A4
		private string <address>k__BackingField; // 0x10
		[CompilerGenerated] // 0x003CE0A4-0x003CE0E0
		[DebuggerBrowsable] // 0x003CE0A4-0x003CE0E0
		private int <port>k__BackingField; // 0x18
		[CompilerGenerated] // 0x003CE0E0-0x003CE11C
		[DebuggerBrowsable] // 0x003CE0E0-0x003CE11C
		private int <domain>k__BackingField; // 0x1C
		[CompilerGenerated] // 0x003CE11C-0x003CE158
		[DebuggerBrowsable] // 0x003CE11C-0x003CE158
		private NetworkID <networkId>k__BackingField; // 0x20
		[CompilerGenerated] // 0x003CE158-0x003CE194
		[DebuggerBrowsable] // 0x003CE158-0x003CE194
		private NetworkAccessToken <accessToken>k__BackingField; // 0x28
		[CompilerGenerated] // 0x003CE194-0x003CE1D0
		[DebuggerBrowsable] // 0x003CE194-0x003CE1D0
		private NodeID <nodeId>k__BackingField; // 0x30
		[CompilerGenerated] // 0x003CE1D0-0x003CE20C
		[DebuggerBrowsable] // 0x003CE1D0-0x003CE20C
		private bool <usingRelay>k__BackingField; // 0x32
	
		// Properties
		public string address { [CompilerGenerated] /* 0x003CEB78-0x003CEB88 */ get; [CompilerGenerated] /* 0x003CEB88-0x003CEB98 */ private set; } // 0x00C548B4-0x00C548BC 0x00C5463C-0x00C54644
		public int port { [CompilerGenerated] /* 0x003CEB98-0x003CEBA8 */ get; [CompilerGenerated] /* 0x003CEBA8-0x003CEBB8 */ private set; } // 0x00C548BC-0x00C548C4 0x00C54644-0x00C5464C
		public int domain { [CompilerGenerated] /* 0x003CEBB8-0x003CEBC8 */ get; [CompilerGenerated] /* 0x003CEBC8-0x003CEBD8 */ private set; } // 0x00C548C4-0x00C548CC 0x00C5464C-0x00C54654
		public NetworkID networkId { [CompilerGenerated] /* 0x003CEBD8-0x003CEBE8 */ get; [CompilerGenerated] /* 0x003CEBE8-0x003CEBF8 */ private set; } // 0x00C548CC-0x00C548D4 0x00C54654-0x00C5465C
		private NetworkAccessToken accessToken { [CompilerGenerated] /* 0x003CEBF8-0x003CEC08 */ set; } // 0x00C54768-0x00C54770
		public NodeID nodeId { [CompilerGenerated] /* 0x003CEC08-0x003CEC18 */ get; [CompilerGenerated] /* 0x003CEC18-0x003CEC28 */ private set; } // 0x00C548D4-0x00C548DC 0x00C54770-0x00C54778
		public bool usingRelay { [CompilerGenerated] /* 0x003CEC28-0x003CEC38 */ get; [CompilerGenerated] /* 0x003CEC38-0x003CEC48 */ private set; } // 0x00C548DC-0x00C548E4 0x00C54778-0x00C54784
	
		// Constructors
		internal MatchInfo(CreateMatchResponse matchResponse); // 0x00C5450C-0x00C5463C
		internal MatchInfo(JoinMatchResponse matchResponse); // 0x00C54784-0x00C548B4
	
		// Methods
		public override string ToString(); // 0x00C548E4-0x00C54B60
	}

	[Obsolete] // 0x003CD510-0x003CD548
	public class MatchInfoSnapshot // TypeDefIndex: 2512
	{
		// Fields
		[CompilerGenerated] // 0x003CE20C-0x003CE248
		[DebuggerBrowsable] // 0x003CE20C-0x003CE248
		private NetworkID <networkId>k__BackingField; // 0x10
		[CompilerGenerated] // 0x003CE248-0x003CE284
		[DebuggerBrowsable] // 0x003CE248-0x003CE284
		private NodeID <hostNodeId>k__BackingField; // 0x18
		[CompilerGenerated] // 0x003CE284-0x003CE2C0
		[DebuggerBrowsable] // 0x003CE284-0x003CE2C0
		private string <name>k__BackingField; // 0x20
		[CompilerGenerated] // 0x003CE2C0-0x003CE2FC
		[DebuggerBrowsable] // 0x003CE2C0-0x003CE2FC
		private int <averageEloScore>k__BackingField; // 0x28
		[CompilerGenerated] // 0x003CE2FC-0x003CE338
		[DebuggerBrowsable] // 0x003CE2FC-0x003CE338
		private int <maxSize>k__BackingField; // 0x2C
		[CompilerGenerated] // 0x003CE338-0x003CE374
		[DebuggerBrowsable] // 0x003CE338-0x003CE374
		private int <currentSize>k__BackingField; // 0x30
		[CompilerGenerated] // 0x003CE374-0x003CE3B0
		[DebuggerBrowsable] // 0x003CE374-0x003CE3B0
		private bool <isPrivate>k__BackingField; // 0x34
		[CompilerGenerated] // 0x003CE3B0-0x003CE3EC
		[DebuggerBrowsable] // 0x003CE3B0-0x003CE3EC
		private Dictionary<string, long> <matchAttributes>k__BackingField; // 0x38
		[CompilerGenerated] // 0x003CE3EC-0x003CE428
		[DebuggerBrowsable] // 0x003CE3EC-0x003CE428
		private List<MatchInfoDirectConnectSnapshot> <directConnectInfos>k__BackingField; // 0x40
	
		// Properties
		public NetworkID networkId { [CompilerGenerated] /* 0x003CEC48-0x003CEC58 */ get; [CompilerGenerated] /* 0x003CEC58-0x003CEC68 */ private set; } // 0x00C54ED4-0x00C54EDC 0x00C54DEC-0x00C54DF4
		private NodeID hostNodeId { [CompilerGenerated] /* 0x003CEC68-0x003CEC78 */ set; } // 0x00C54DF4-0x00C54DFC
		public string name { [CompilerGenerated] /* 0x003CEC78-0x003CEC88 */ get; [CompilerGenerated] /* 0x003CEC88-0x003CEC98 */ private set; } // 0x00C54EDC-0x00C54EE4 0x00C54DFC-0x00C54E04
		private int averageEloScore { [CompilerGenerated] /* 0x003CEC98-0x003CECA8 */ set; } // 0x00C54E04-0x00C54E0C
		private int maxSize { [CompilerGenerated] /* 0x003CECA8-0x003CECB8 */ set; } // 0x00C54E0C-0x00C54E14
		private int currentSize { [CompilerGenerated] /* 0x003CECB8-0x003CECC8 */ set; } // 0x00C54E14-0x00C54E1C
		private bool isPrivate { [CompilerGenerated] /* 0x003CECC8-0x003CECD8 */ set; } // 0x00C54E1C-0x00C54E28
		private Dictionary<string, long> matchAttributes { [CompilerGenerated] /* 0x003CECD8-0x003CECE8 */ set; } // 0x00C54E28-0x00C54E30
		public List<MatchInfoDirectConnectSnapshot> directConnectInfos { [CompilerGenerated] /* 0x003CECE8-0x003CECF8 */ get; [CompilerGenerated] /* 0x003CECF8-0x003CED08 */ private set; } // 0x00C54E38-0x00C54E40 0x00C54E30-0x00C54E38
	
		// Nested types
		public class MatchInfoDirectConnectSnapshot // TypeDefIndex: 2513
		{
			// Fields
			[CompilerGenerated] // 0x003CE428-0x003CE464
			[DebuggerBrowsable] // 0x003CE428-0x003CE464
			private NodeID <nodeId>k__BackingField; // 0x10
			[CompilerGenerated] // 0x003CE464-0x003CE4A0
			[DebuggerBrowsable] // 0x003CE464-0x003CE4A0
			private string <publicAddress>k__BackingField; // 0x18
			[CompilerGenerated] // 0x003CE4A0-0x003CE4DC
			[DebuggerBrowsable] // 0x003CE4A0-0x003CE4DC
			private string <privateAddress>k__BackingField; // 0x20
			[CompilerGenerated] // 0x003CE4DC-0x003CE518
			[DebuggerBrowsable] // 0x003CE4DC-0x003CE518
			private HostPriority <hostPriority>k__BackingField; // 0x28
	
			// Properties
			private NodeID nodeId { [CompilerGenerated] /* 0x003CED08-0x003CED18 */ set; } // 0x00C54EE4-0x00C54EEC
			private string publicAddress { [CompilerGenerated] /* 0x003CED18-0x003CED28 */ set; } // 0x00C54EEC-0x00C54EF4
			private string privateAddress { [CompilerGenerated] /* 0x003CED28-0x003CED38 */ set; } // 0x00C54EF4-0x00C54EFC
			private HostPriority hostPriority { [CompilerGenerated] /* 0x003CED38-0x003CED48 */ set; } // 0x00C54EFC-0x00C54F04
	
			// Constructors
			internal MatchInfoDirectConnectSnapshot(MatchDirectConnectInfo matchDirectConnectInfo); // 0x00C54E40-0x00C54ED4
		}
	
		// Constructors
		internal MatchInfoSnapshot(MatchDesc matchDesc); // 0x00C54B60-0x00C54DEC
	}

	[Obsolete] // 0x003CD548-0x003CD580
	public class NetworkMatch : MonoBehaviour // TypeDefIndex: 2514
	{
		// Fields
		private Uri m_BaseUri; // 0x18
	
		// Properties
		public Uri baseUri { get; set; } // 0x00C54F78-0x00C54F80 0x00C54F80-0x00C54F88
	
		// Nested types
		public delegate void BasicResponseDelegate(bool success, string extendedInfo); // TypeDefIndex: 2515; 0x00C56770-0x00C56BD8
	
		public delegate void DataResponseDelegate<T>(bool success, string extendedInfo, T responseData); // TypeDefIndex: 2516; 0x00000000-0x00000000
	
		private delegate void InternalResponseDelegate<T, U>(T response, U userCallback); // TypeDefIndex: 2517; 0x00000000-0x00000000
	
		[CompilerGenerated] // 0x003CD580-0x003CD590
		private sealed class <ProcessMatchResponse>c__Iterator0<JSONRESPONSE, USERRESPONSEDELEGATETYPE> : IEnumerator<object> // TypeDefIndex: 2518
			where JSONRESPONSE : Response, new()
		{
			// Fields
			internal UnityWebRequest client;
			internal JSONRESPONSE <jsonInterface>__0;
			internal InternalResponseDelegate<JSONRESPONSE, USERRESPONSEDELEGATETYPE> internalCallback;
			internal USERRESPONSEDELEGATETYPE userCallback;
			internal object $current;
			internal bool $disposing;
			internal int $PC;
	
			// Properties
			object IEnumerator<object>.Current { [DebuggerHidden] /* 0x003CEDBC-0x003CEDCC */ get; }
			object IEnumerator.Current { [DebuggerHidden] /* 0x003CEDCC-0x003CEDDC */ get; }
	
			// Constructors
			[DebuggerHidden] // 0x003CEDAC-0x003CEDBC
			public <ProcessMatchResponse>c__Iterator0();
	
			// Methods
			public bool MoveNext();
			[DebuggerHidden] // 0x003CEDDC-0x003CEDEC
			public void Dispose();
			[DebuggerHidden] // 0x003CEDEC-0x003CEDFC
			public void Reset();
		}
	
		// Constructors
		public NetworkMatch(); // 0x00C54F04-0x00C54F78
	
		// Methods
		[EditorBrowsable] // 0x003CED48-0x003CED9C
		[Obsolete] // 0x003CED48-0x003CED9C
		public void SetProgramAppID(AppID programAppID); // 0x00C54F88-0x00C54F8C
		public Coroutine CreateMatch(string matchName, uint matchSize, bool matchAdvertise, string matchPassword, string publicClientAddress, string privateClientAddress, int eloScoreForMatch, int requestDomain, DataResponseDelegate<MatchInfo> callback); // 0x00C54F8C-0x00C5514C
		internal Coroutine CreateMatch(CreateMatchRequest req, DataResponseDelegate<MatchInfo> callback); // 0x00C55154-0x00C556B8
		internal virtual void OnMatchCreate(CreateMatchResponse response, DataResponseDelegate<MatchInfo> userCallback); // 0x00C55700-0x00C55810
		public Coroutine JoinMatch(NetworkID netId, string matchPassword, string publicClientAddress, string privateClientAddress, int eloScoreForClient, int requestDomain, DataResponseDelegate<MatchInfo> callback); // 0x00C55940-0x00C55A54
		internal Coroutine JoinMatch(JoinMatchRequest req, DataResponseDelegate<MatchInfo> callback); // 0x00C55A54-0x00C55F8C
		internal void OnMatchJoined(JoinMatchResponse response, DataResponseDelegate<MatchInfo> userCallback); // 0x00C55F8C-0x00C5609C
		public Coroutine DestroyMatch(NetworkID netId, int requestDomain, BasicResponseDelegate callback); // 0x00C5609C-0x00C56144
		internal Coroutine DestroyMatch(DestroyMatchRequest req, BasicResponseDelegate callback); // 0x00C56144-0x00C565CC
		internal void OnMatchDestroyed(BasicResponse response, BasicResponseDelegate userCallback); // 0x00C56704-0x00C56770
		public Coroutine DropConnection(NetworkID netId, NodeID dropNodeId, int requestDomain, BasicResponseDelegate callback); // 0x00C56BD8-0x00C56C98
		internal Coroutine DropConnection(DropConnectionRequest req, BasicResponseDelegate callback); // 0x00C56C98-0x00C57190
		internal void OnDropConnection(DropConnectionResponse response, BasicResponseDelegate userCallback); // 0x00C57190-0x00C571FC
		public Coroutine ListMatches(int startPageNumber, int resultPageSize, string matchNameFilter, bool filterOutPrivateMatchesFromResults, int eloScoreTarget, int requestDomain, DataResponseDelegate<List<MatchInfoSnapshot>> callback); // 0x00C571FC-0x00C57374
		internal Coroutine ListMatches(ListMatchRequest req, DataResponseDelegate<List<MatchInfoSnapshot>> callback); // 0x00C57374-0x00C5786C
		internal void OnMatchList(ListMatchResponse response, DataResponseDelegate<List<MatchInfoSnapshot>> userCallback); // 0x00C5786C-0x00C57A6C
		public Coroutine SetMatchAttributes(NetworkID networkId, bool isListed, int requestDomain, BasicResponseDelegate callback); // 0x00C57A6C-0x00C57B34
		internal Coroutine SetMatchAttributes(SetMatchAttributesRequest req, BasicResponseDelegate callback); // 0x00C57BB0-0x00C59068
		internal void OnSetMatchAttributes(BasicResponse response, BasicResponseDelegate userCallback); // 0x00C59078-0x00C5912C
		[DebuggerHidden] // 0x003CED9C-0x003CEDAC
		private IEnumerator ProcessMatchResponse<JSONRESPONSE, USERRESPONSEDELEGATETYPE>(UnityWebRequest client, InternalResponseDelegate<JSONRESPONSE, USERRESPONSEDELEGATETYPE> internalCallback, USERRESPONSEDELEGATETYPE userCallback)
			where JSONRESPONSE : Response, new();
	}
}

namespace UnityEngine.Networking
{
	[NativeConditional] // 0x003CD590-0x003CD660
	[NativeHeader] // 0x003CD590-0x003CD660
	[NativeHeader] // 0x003CD590-0x003CD660
	[NativeHeader] // 0x003CD590-0x003CD660
	[Obsolete] // 0x003CD590-0x003CD660
	public sealed class NetworkTransport // TypeDefIndex: 2519
	{
		// Fields
		private static int s_nextSceneId; // 0x00
	
		// Properties
		public static bool IsStarted { get; } // 0x00C5B1B0-0x00C5B20C 
	
		// Constructors
		static NetworkTransport(); // 0x00C5BF58-0x00C5BFAC
	
		// Methods
		internal static bool DoesEndPointUsePlatformProtocols(EndPoint endPoint); // 0x00C59494-0x00C59594
		public static int ConnectEndPoint(int hostId, EndPoint endPoint, int exceptionConnectionId, out byte error); // 0x00C59594-0x00C59D34
		public static void Init(); // 0x00C59DD0-0x00C59E2C
		public static void Init(GlobalConfig config); // 0x00C59E84-0x00C59F70
		[FreeFunction] // 0x003CEDFC-0x003CEE34
		private static void InitializeClass(); // 0x00C59E2C-0x00C59E84
		[FreeFunction] // 0x003CEE34-0x003CEE6C
		private static void InitializeClassWithConfig(GlobalConfigInternal config); // 0x00C5A048-0x00C5A0B4
		public static int AddHostWithSimulator(HostTopology topology, int minTimeout, int maxTimeout, int port, string ip); // 0x00C5A0B4-0x00C5A1B4
		public static int AddHostWithSimulator(HostTopology topology, int minTimeout, int maxTimeout, int port); // 0x00C5A434-0x00C5A4C4
		public static int AddHost(HostTopology topology, int port, string ip); // 0x00C5A4C4-0x00C5A548
		[FreeFunction] // 0x003CEE6C-0x003CEEA4
		private static int AddHostInternal(HostTopologyInternal topologyInt, string ip, int port, int minTimeout, int maxTimeout); // 0x00C5A398-0x00C5A434
		public static int AddWebsocketHost(HostTopology topology, int port, string ip); // 0x00C5A548-0x00C5A6E4
		[FreeFunction] // 0x003CEEA4-0x003CEEDC
		private static int AddWsHostInternal(HostTopologyInternal topologyInt, string ip, int port); // 0x00C5A9E0-0x00C5AA64
		private static bool IsPortOpen(string ip, int port); // 0x00C5A6E4-0x00C5A9E0
		public static void ConnectAsNetworkHost(int hostId, string address, int port, NetworkID network, SourceID source, NodeID node, out byte error); // 0x00C5AA64-0x00C5AB10
		[FreeFunction] // 0x003CEEDC-0x003CEF14
		private static void ConnectAsNetworkHostInternal(int hostId, string address, int port, ulong network, ulong source, ushort node, out byte error); // 0x00C5AB10-0x00C5ABC4
		public static NetworkEventType ReceiveRelayEventFromHost(int hostId, out byte error); // 0x00C5ABC4-0x00C5AC38
		[FreeFunction] // 0x003CEF14-0x003CEF4C
		private static int ReceiveRelayEventFromHostInternal(int hostId, out byte error); // 0x00C5AC38-0x00C5ACAC
		public static int ConnectToNetworkPeer(int hostId, string address, int port, int exceptionConnectionId, int relaySlotId, NetworkID network, SourceID source, NodeID node, int bytesPerSec, float bucketSizeFactor, out byte error); // 0x00C5ACAC-0x00C5ADC0
		public static int ConnectToNetworkPeer(int hostId, string address, int port, int exceptionConnectionId, int relaySlotId, NetworkID network, SourceID source, NodeID node, out byte error); // 0x00C5AEA0-0x00C5AF78
		[FreeFunction] // 0x003CEF4C-0x003CEF84
		private static int ConnectToNetworkPeerInternal(int hostId, string address, int port, int exceptionConnectionId, int relaySlotId, ulong network, ulong source, ushort node, int bytesPerSec, float bucketSizeFactor, out byte error); // 0x00C5ADC0-0x00C5AEA0
		[FreeFunction] // 0x003CEF84-0x003CEFBC
		public static string GetConnectionInfo(int hostId, int connectionId, out int port, out ulong network, out ushort dstNode, out byte error); // 0x00C5AF78-0x00C5B01C
		public static void GetConnectionInfo(int hostId, int connectionId, out string address, out int port, out NetworkID network, out NodeID dstNode, out byte error); // 0x00C5B01C-0x00C5B0EC
		[FreeFunction] // 0x003CEFBC-0x003CEFF4
		private static int GetMaxPacketSize(); // 0x00C5B0EC-0x00C5B144
		[FreeFunction] // 0x003CEFF4-0x003CF02C
		public static bool RemoveHost(int hostId); // 0x00C5B144-0x00C5B1B0
		[FreeFunction] // 0x003CF02C-0x003CF064
		private static bool IsStartedInternal(); // 0x00C5B20C-0x00C5B264
		[FreeFunction] // 0x003CF064-0x003CF09C
		public static int Connect(int hostId, string address, int port, int exeptionConnectionId, out byte error); // 0x00C5B264-0x00C5B300
		[FreeFunction] // 0x003CF09C-0x003CF0D4
		private static int ConnectWithSimulatorInternal(int hostId, string address, int port, int exeptionConnectionId, out byte error, ConnectionSimulatorConfigInternal conf); // 0x00C5B300-0x00C5B3A4
		public static int ConnectWithSimulator(int hostId, string address, int port, int exeptionConnectionId, out byte error, ConnectionSimulatorConfig conf); // 0x00C5B3A4-0x00C5B464
		[FreeFunction] // 0x003CF0D4-0x003CF10C
		public static bool Disconnect(int hostId, int connectionId, out byte error); // 0x00C5B464-0x00C5B4E8
		[FreeFunction] // 0x003CF10C-0x003CF144
		private static int Internal_ConnectEndPoint(int hostId, out byte[] sockAddrStorage, int sockAddrStorageLen, int exceptionConnectionId, out byte error); // 0x00C59D34-0x00C59DD0
		public static bool Send(int hostId, int connectionId, int channelId, byte[] buffer, int size, out byte error); // 0x00C5B4E8-0x00C5B5D4
		[FreeFunction] // 0x003CF144-0x003CF17C
		private static bool SendWrapper(int hostId, int connectionId, int channelId, out byte[] buffer, int size, out byte error); // 0x00C5B5D4-0x00C5B678
		public static NetworkEventType ReceiveFromHost(int hostId, out int connectionId, out int channelId, byte[] buffer, int bufferSize, out int receivedSize, out byte error); // 0x00C5B678-0x00C5B724
		[FreeFunction] // 0x003CF17C-0x003CF1B4
		private static int PopDataFromHost(int hostId, out int connectionId, out int channelId, out byte[] buffer, int bufferSize, out int receivedSize, out byte error); // 0x00C5B724-0x00C5B7D8
		[FreeFunction] // 0x003CF1B4-0x003CF200
		[NativeThrows] // 0x003CF1B4-0x003CF200
		private static void SetNetworkEventAvailableCallback(Action<int> callback); // 0x00C59F70-0x00C59FDC
		[FreeFunction] // 0x003CF200-0x003CF24C
		[NativeThrows] // 0x003CF200-0x003CF24C
		private static void SetConnectionReadyForSendCallback(Action<int, int> callback); // 0x00C59FDC-0x00C5A048
		[FreeFunction] // 0x003CF24C-0x003CF284
		private static bool StartBroadcastDiscoveryWithData(int hostId, int broadcastPort, int key, int version, int subversion, out byte[] buffer, int size, int timeout, out byte error); // 0x00C5B7D8-0x00C5B8A4
		[FreeFunction] // 0x003CF284-0x003CF2BC
		private static bool StartBroadcastDiscoveryWithoutData(int hostId, int broadcastPort, int key, int version, int subversion, int timeout, out byte error); // 0x00C5B8A4-0x00C5B958
		public static bool StartBroadcastDiscovery(int hostId, int broadcastPort, int key, int version, int subversion, byte[] buffer, int size, int timeout, out byte error); // 0x00C5B958-0x00C5BC20
		[FreeFunction] // 0x003CF2BC-0x003CF2F4
		public static void StopBroadcastDiscovery(); // 0x00C5BC20-0x00C5BC78
		[FreeFunction] // 0x003CF2F4-0x003CF32C
		public static void SetBroadcastCredentials(int hostId, int key, int version, int subversion, out byte error); // 0x00C5BC78-0x00C5BD14
		[FreeFunction] // 0x003CF32C-0x003CF364
		public static string GetBroadcastConnectionInfo(int hostId, out int port, out byte error); // 0x00C5BD14-0x00C5BD98
		public static void GetBroadcastConnectionInfo(int hostId, out string address, out int port, out byte error); // 0x00C5BD98-0x00C5BE28
		public static void GetBroadcastConnectionMessage(int hostId, byte[] buffer, int bufferSize, out int receivedSize, out byte error); // 0x00C5BE28-0x00C5BEBC
		[FreeFunction] // 0x003CF364-0x003CF39C
		private static void GetBroadcastConnectionMessageInternal(int hostId, out byte[] buffer, int bufferSize, out int receivedSize, out byte error); // 0x00C5BEBC-0x00C5BF58
		private static void CheckTopology(HostTopology topology); // 0x00C5A1B4-0x00C5A398
	}

	public enum NetworkEventType // TypeDefIndex: 2520
	{
		DataEvent = 0,
		ConnectEvent = 1,
		DisconnectEvent = 2,
		Nothing = 3,
		BroadcastEvent = 4
	}

	public enum QosType // TypeDefIndex: 2521
	{
		Unreliable = 0,
		UnreliableFragmented = 1,
		UnreliableSequenced = 2,
		Reliable = 3,
		ReliableFragmented = 4,
		ReliableSequenced = 5,
		StateUpdate = 6,
		ReliableStateUpdate = 7,
		AllCostDelivery = 8,
		UnreliableFragmentedSequenced = 9,
		ReliableFragmentedSequenced = 10
	}

	public enum NetworkError // TypeDefIndex: 2522
	{
		Ok = 0,
		WrongHost = 1,
		WrongConnection = 2,
		WrongChannel = 3,
		NoResources = 4,
		BadMessage = 5,
		Timeout = 6,
		MessageToLong = 7,
		WrongOperation = 8,
		VersionMismatch = 9,
		CRCMismatch = 10,
		DNSFailure = 11,
		UsageError = 12
	}

	public enum ReactorModel // TypeDefIndex: 2523
	{
		SelectReactor = 0,
		FixRateReactor = 1
	}

	public enum ConnectionAcksType // TypeDefIndex: 2524
	{
		Acks32 = 1,
		Acks64 = 2,
		Acks96 = 3,
		Acks128 = 4
	}

	[Serializable]
	[Obsolete] // 0x003CD660-0x003CD698
	public class ChannelQOS // TypeDefIndex: 2525
	{
		// Fields
		[SerializeField] // 0x003CE518-0x003CE528
		internal QosType m_Type; // 0x10
		[SerializeField] // 0x003CE528-0x003CE538
		internal bool m_BelongsSharedOrderChannel; // 0x14
	
		// Properties
		public QosType QOS { get; } // 0x00C4D55C-0x00C4D564 
	
		// Constructors
		public ChannelQOS(QosType value); // 0x00C4D450-0x00C4D480
		public ChannelQOS(); // 0x00C4D480-0x00C4D4AC
		public ChannelQOS(ChannelQOS channel); // 0x00C4D4AC-0x00C4D55C
	}

	[Serializable]
	[Obsolete] // 0x003CD698-0x003CD6D0
	public class ConnectionConfig // TypeDefIndex: 2526
	{
		// Fields
		private const int g_MinPacketSize = 128; // Metadata: 0x0021B08B
		[SerializeField] // 0x003CE538-0x003CE548
		private ushort m_PacketSize; // 0x10
		[SerializeField] // 0x003CE548-0x003CE558
		private ushort m_FragmentSize; // 0x12
		[SerializeField] // 0x003CE558-0x003CE568
		private uint m_ResendTimeout; // 0x14
		[SerializeField] // 0x003CE568-0x003CE578
		private uint m_DisconnectTimeout; // 0x18
		[SerializeField] // 0x003CE578-0x003CE588
		private uint m_ConnectTimeout; // 0x1C
		[SerializeField] // 0x003CE588-0x003CE598
		private uint m_MinUpdateTimeout; // 0x20
		[SerializeField] // 0x003CE598-0x003CE5A8
		private uint m_PingTimeout; // 0x24
		[SerializeField] // 0x003CE5A8-0x003CE5B8
		private uint m_ReducedPingTimeout; // 0x28
		[SerializeField] // 0x003CE5B8-0x003CE5C8
		private uint m_AllCostTimeout; // 0x2C
		[SerializeField] // 0x003CE5C8-0x003CE5D8
		private byte m_NetworkDropThreshold; // 0x30
		[SerializeField] // 0x003CE5D8-0x003CE5E8
		private byte m_OverflowDropThreshold; // 0x31
		[SerializeField] // 0x003CE5E8-0x003CE5F8
		private byte m_MaxConnectionAttempt; // 0x32
		[SerializeField] // 0x003CE5F8-0x003CE608
		private uint m_AckDelay; // 0x34
		[SerializeField] // 0x003CE608-0x003CE618
		private uint m_SendDelay; // 0x38
		[SerializeField] // 0x003CE618-0x003CE628
		private ushort m_MaxCombinedReliableMessageSize; // 0x3C
		[SerializeField] // 0x003CE628-0x003CE638
		private ushort m_MaxCombinedReliableMessageCount; // 0x3E
		[SerializeField] // 0x003CE638-0x003CE648
		private ushort m_MaxSentMessageQueueSize; // 0x40
		[SerializeField] // 0x003CE648-0x003CE658
		private ConnectionAcksType m_AcksType; // 0x44
		[SerializeField] // 0x003CE658-0x003CE668
		private bool m_UsePlatformSpecificProtocols; // 0x48
		[SerializeField] // 0x003CE668-0x003CE678
		private uint m_InitialBandwidth; // 0x4C
		[SerializeField] // 0x003CE678-0x003CE688
		private float m_BandwidthPeakFactor; // 0x50
		[SerializeField] // 0x003CE688-0x003CE698
		private ushort m_WebSocketReceiveBufferMaxSize; // 0x54
		[SerializeField] // 0x003CE698-0x003CE6A8
		private uint m_UdpSocketReceiveBufferMaxSize; // 0x58
		[SerializeField] // 0x003CE6A8-0x003CE6B8
		private string m_SSLCertFilePath; // 0x60
		[SerializeField] // 0x003CE6B8-0x003CE6C8
		private string m_SSLPrivateKeyFilePath; // 0x68
		[SerializeField] // 0x003CE6C8-0x003CE6D8
		private string m_SSLCAFilePath; // 0x70
		[SerializeField] // 0x003CE6D8-0x003CE6E8
		internal List<ChannelQOS> m_Channels; // 0x78
		[SerializeField] // 0x003CE6E8-0x003CE6F8
		internal List<List<byte>> m_SharedOrderChannels; // 0x80
	
		// Properties
		public ushort PacketSize { get; } // 0x00C4DBEC-0x00C4DBF4 
		public ushort FragmentSize { get; } // 0x00C4DBF4-0x00C4DBFC 
		public uint ResendTimeout { get; } // 0x00C4DBFC-0x00C4DC04 
		public uint DisconnectTimeout { get; } // 0x00C4DC04-0x00C4DC0C 
		public uint ConnectTimeout { get; } // 0x00C4DC0C-0x00C4DC14 
		public uint MinUpdateTimeout { get; set; } // 0x00C4DC14-0x00C4DC1C 0x00C4DC1C-0x00C4DCB4
		public uint PingTimeout { get; } // 0x00C4DCB4-0x00C4DCBC 
		public uint ReducedPingTimeout { get; } // 0x00C4DCBC-0x00C4DCC4 
		public uint AllCostTimeout { get; } // 0x00C4DCC4-0x00C4DCCC 
		public byte NetworkDropThreshold { get; } // 0x00C4DCCC-0x00C4DCD4 
		public byte OverflowDropThreshold { get; } // 0x00C4DCD4-0x00C4DCDC 
		public byte MaxConnectionAttempt { get; } // 0x00C4DCDC-0x00C4DCE4 
		public uint AckDelay { get; } // 0x00C4DCE4-0x00C4DCEC 
		public uint SendDelay { get; } // 0x00C4DCEC-0x00C4DCF4 
		public ushort MaxCombinedReliableMessageSize { get; } // 0x00C4DA78-0x00C4DA80 
		public ushort MaxCombinedReliableMessageCount { get; } // 0x00C4DCF4-0x00C4DCFC 
		public ushort MaxSentMessageQueueSize { get; } // 0x00C4DCFC-0x00C4DD04 
		public ConnectionAcksType AcksType { get; } // 0x00C4DD04-0x00C4DD0C 
		public bool UsePlatformSpecificProtocols { get; set; } // 0x00C4DD0C-0x00C4DD14 0x00C4DD14-0x00C4DDC0
		public uint InitialBandwidth { get; } // 0x00C4DDC0-0x00C4DDC8 
		public float BandwidthPeakFactor { get; } // 0x00C4DDC8-0x00C4DDD0 
		public ushort WebSocketReceiveBufferMaxSize { get; } // 0x00C4DDD0-0x00C4DDD8 
		public uint UdpSocketReceiveBufferMaxSize { get; } // 0x00C4DDD8-0x00C4DDE0 
		public string SSLCertFilePath { get; } // 0x00C4DDE0-0x00C4DDE8 
		public string SSLPrivateKeyFilePath { get; } // 0x00C4DDE8-0x00C4DDF0 
		public string SSLCAFilePath { get; } // 0x00C4DDF0-0x00C4DDF8 
		public int ChannelCount { get; } // 0x00C4DDF8-0x00C4DE58 
		public int SharedOrderChannelCount { get; } // 0x00C4DE58-0x00C4DEB8 
		public List<ChannelQOS> Channels { get; } // 0x00C4E2E0-0x00C4E304 
	
		// Constructors
		public ConnectionConfig(); // 0x00C4D564-0x00C4D678
		public ConnectionConfig(ConnectionConfig config); // 0x00C4D678-0x00C4DA78
	
		// Methods
		public static void Validate(ConnectionConfig config); // 0x00C4DA80-0x00C4DBEC
		public byte AddChannel(QosType value); // 0x00C4DEB8-0x00C4E0E4
		public QosType GetChannel(byte idx); // 0x00C4E0E4-0x00C4E1DC
		public IList<byte> GetSharedOrderChannels(byte idx); // 0x00C4E1DC-0x00C4E2E0
	}

	[Serializable]
	[Obsolete] // 0x003CD6D0-0x003CD708
	public class HostTopology // TypeDefIndex: 2527
	{
		// Fields
		[SerializeField] // 0x003CE6F8-0x003CE708
		private ConnectionConfig m_DefConfig; // 0x10
		[SerializeField] // 0x003CE708-0x003CE718
		private int m_MaxDefConnections; // 0x18
		[SerializeField] // 0x003CE718-0x003CE728
		private List<ConnectionConfig> m_SpecialConnections; // 0x20
		[SerializeField] // 0x003CE728-0x003CE738
		private ushort m_ReceivedMessagePoolSize; // 0x28
		[SerializeField] // 0x003CE738-0x003CE748
		private ushort m_SentMessagePoolSize; // 0x2A
		[SerializeField] // 0x003CE748-0x003CE758
		private float m_MessagePoolSizeGrowthFactor; // 0x2C
	
		// Properties
		public ConnectionConfig DefaultConfig { get; } // 0x00C505AC-0x00C505B4 
		public int MaxDefaultConnections { get; } // 0x00C505B4-0x00C505BC 
		public int SpecialConnectionConfigsCount { get; } // 0x00C505BC-0x00C5061C 
		public List<ConnectionConfig> SpecialConnectionConfigs { get; } // 0x00C5061C-0x00C50624 
		public ushort ReceivedMessagePoolSize { get; } // 0x00C50708-0x00C50710 
		public ushort SentMessagePoolSize { get; } // 0x00C50710-0x00C50718 
		public float MessagePoolSizeGrowthFactor { get; } // 0x00C50718-0x00C50720 
	
		// Constructors
		public HostTopology(ConnectionConfig defaultConfig, int maxDefaultConnections); // 0x00C503AC-0x00C50528
		private HostTopology(); // 0x00C50528-0x00C505AC
	
		// Methods
		public ConnectionConfig GetSpecialConnectionConfig(int i); // 0x00C50624-0x00C50708
	}

	[Serializable]
	[Obsolete] // 0x003CD708-0x003CD740
	public class GlobalConfig // TypeDefIndex: 2528
	{
		// Fields
		private const uint g_MaxTimerTimeout = 12000; // Metadata: 0x0021B08F
		private const uint g_MaxNetSimulatorTimeout = 12000; // Metadata: 0x0021B093
		private const ushort g_MaxHosts = 128; // Metadata: 0x0021B097
		[SerializeField] // 0x003CE758-0x003CE768
		private uint m_ThreadAwakeTimeout; // 0x10
		[SerializeField] // 0x003CE768-0x003CE778
		private ReactorModel m_ReactorModel; // 0x14
		[SerializeField] // 0x003CE778-0x003CE788
		private ushort m_ReactorMaximumReceivedMessages; // 0x18
		[SerializeField] // 0x003CE788-0x003CE798
		private ushort m_ReactorMaximumSentMessages; // 0x1A
		[SerializeField] // 0x003CE798-0x003CE7A8
		private ushort m_MaxPacketSize; // 0x1C
		[SerializeField] // 0x003CE7A8-0x003CE7B8
		private ushort m_MaxHosts; // 0x1E
		[SerializeField] // 0x003CE7B8-0x003CE7C8
		private byte m_ThreadPoolSize; // 0x20
		[SerializeField] // 0x003CE7C8-0x003CE7D8
		private uint m_MinTimerTimeout; // 0x24
		[SerializeField] // 0x003CE7D8-0x003CE7E8
		private uint m_MaxTimerTimeout; // 0x28
		[SerializeField] // 0x003CE7E8-0x003CE7F8
		private uint m_MinNetSimulatorTimeout; // 0x2C
		[SerializeField] // 0x003CE7F8-0x003CE808
		private uint m_MaxNetSimulatorTimeout; // 0x30
		[SerializeField] // 0x003CE808-0x003CE818
		private Action<int, int> m_ConnectionReadyForSend; // 0x38
		[SerializeField] // 0x003CE818-0x003CE828
		private Action<int> m_NetworkEventAvailable; // 0x40
	
		// Properties
		public uint ThreadAwakeTimeout { get; set; } // 0x00C4FA0C-0x00C4FA14 0x00C4FA14-0x00C4FAAC
		public ReactorModel ReactorModel { get; } // 0x00C4FAAC-0x00C4FAB4 
		public ushort ReactorMaximumReceivedMessages { get; } // 0x00C4FAB4-0x00C4FABC 
		public ushort ReactorMaximumSentMessages { get; } // 0x00C4FABC-0x00C4FAC4 
		public ushort MaxPacketSize { get; } // 0x00C4FAC4-0x00C4FACC 
		public ushort MaxHosts { get; } // 0x00C4FACC-0x00C4FAD4 
		public byte ThreadPoolSize { get; } // 0x00C4FAD4-0x00C4FADC 
		public uint MinTimerTimeout { get; } // 0x00C4FADC-0x00C4FAE4 
		public uint MaxTimerTimeout { get; } // 0x00C4FAE4-0x00C4FAEC 
		public uint MinNetSimulatorTimeout { get; } // 0x00C4FAEC-0x00C4FAF4 
		public uint MaxNetSimulatorTimeout { get; } // 0x00C4FAF4-0x00C4FAFC 
		public Action<int> NetworkEventAvailable { get; } // 0x00C4FAFC-0x00C4FB04 
		public Action<int, int> ConnectionReadyForSend { get; } // 0x00C4FB04-0x00C4FB0C 
	
		// Constructors
		public GlobalConfig(); // 0x00C4F9C0-0x00C4FA0C
	}

	[Obsolete] // 0x003CD740-0x003CD778
	public class ConnectionSimulatorConfig : IDisposable // TypeDefIndex: 2529
	{
		// Fields
		internal int m_OutMinDelay; // 0x10
		internal int m_OutAvgDelay; // 0x14
		internal int m_InMinDelay; // 0x18
		internal int m_InAvgDelay; // 0x1C
		internal float m_PacketLossPercentage; // 0x20
	
		// Constructors
		public ConnectionSimulatorConfig(int outMinDelay, int outAvgDelay, int inMinDelay, int inAvgDelay, float packetLossPercentage); // 0x00C4F634-0x00C4F690
	
		// Methods
		[ThreadAndSerializationSafe] // 0x003CF39C-0x003CF3AC
		public void Dispose(); // 0x00C4F690-0x00C4F694
		~ConnectionSimulatorConfig(); // 0x00C4F694-0x00C4F69C
	}

	[NativeConditional] // 0x003CD778-0x003CD824
	[NativeHeader] // 0x003CD778-0x003CD824
	[NativeHeader] // 0x003CD778-0x003CD824
	[NativeHeader] // 0x003CD778-0x003CD824
	internal class ConnectionConfigInternal : IDisposable // TypeDefIndex: 2530
	{
		// Fields
		public IntPtr m_Ptr; // 0x10
	
		// Properties
		[NativeProperty] // 0x003CF56C-0x003CF5A8
		private ushort FragmentSize { set; } // 0x00C4E84C-0x00C4E8C0
		[NativeProperty] // 0x003CF5A8-0x003CF5E4
		private uint ResendTimeout { set; } // 0x00C4E8C0-0x00C4E934
		[NativeProperty] // 0x003CF5E4-0x003CF620
		private uint DisconnectTimeout { set; } // 0x00C4E934-0x00C4E9A8
		[NativeProperty] // 0x003CF620-0x003CF65C
		private uint ConnectTimeout { set; } // 0x00C4E9A8-0x00C4EA1C
		[NativeProperty] // 0x003CF65C-0x003CF698
		private uint MinUpdateTimeout { set; } // 0x00C4EA1C-0x00C4EA90
		[NativeProperty] // 0x003CF698-0x003CF6D4
		private uint PingTimeout { set; } // 0x00C4EA90-0x00C4EB04
		[NativeProperty] // 0x003CF6D4-0x003CF710
		private uint ReducedPingTimeout { set; } // 0x00C4EB04-0x00C4EB78
		[NativeProperty] // 0x003CF710-0x003CF74C
		private uint AllCostTimeout { set; } // 0x00C4EB78-0x00C4EBEC
		[NativeProperty] // 0x003CF74C-0x003CF788
		private byte NetworkDropThreshold { set; } // 0x00C4EBEC-0x00C4EC60
		[NativeProperty] // 0x003CF788-0x003CF7C4
		private byte OverflowDropThreshold { set; } // 0x00C4EC60-0x00C4ECD4
		[NativeProperty] // 0x003CF7C4-0x003CF800
		private byte MaxConnectionAttempt { set; } // 0x00C4ECD4-0x00C4ED48
		[NativeProperty] // 0x003CF800-0x003CF83C
		private uint AckDelay { set; } // 0x00C4ED48-0x00C4EDBC
		[NativeProperty] // 0x003CF83C-0x003CF878
		private uint SendDelay { set; } // 0x00C4EDBC-0x00C4EE30
		[NativeProperty] // 0x003CF878-0x003CF8B4
		private ushort MaxCombinedReliableMessageSize { set; } // 0x00C4EE30-0x00C4EEA4
		[NativeProperty] // 0x003CF8B4-0x003CF8F0
		private ushort MaxCombinedReliableMessageCount { set; } // 0x00C4EEA4-0x00C4EF18
		[NativeProperty] // 0x003CF8F0-0x003CF92C
		private ushort MaxSentMessageQueueSize { set; } // 0x00C4EF18-0x00C4EF8C
		[NativeProperty] // 0x003CF92C-0x003CF968
		private byte AcksType { set; } // 0x00C4EF8C-0x00C4F000
		[NativeProperty] // 0x003CF968-0x003CF9A4
		private bool UsePlatformSpecificProtocols { set; } // 0x00C4F000-0x00C4F074
		[NativeProperty] // 0x003CF9A4-0x003CF9E0
		private uint InitialBandwidth { set; } // 0x00C4F074-0x00C4F0E8
		[NativeProperty] // 0x003CF9E0-0x003CFA1C
		private float BandwidthPeakFactor { set; } // 0x00C4F0E8-0x00C4F15C
		[NativeProperty] // 0x003CFA1C-0x003CFA58
		private ushort WebSocketReceiveBufferMaxSize { set; } // 0x00C4F15C-0x00C4F1D0
		[NativeProperty] // 0x003CFA58-0x003CFA94
		private uint UdpSocketReceiveBufferMaxSize { set; } // 0x00C4F1D0-0x00C4F244
	
		// Constructors
		public ConnectionConfigInternal(ConnectionConfig config); // 0x00C4E304-0x00C4E780
	
		// Methods
		protected virtual void Dispose(bool disposing); // 0x00C4F488-0x00C4F4E8
		~ConnectionConfigInternal(); // 0x00C4F554-0x00C4F5D4
		public void Dispose(); // 0x00C4F5D4-0x00C4F634
		private static IntPtr InternalCreate(); // 0x00C4E780-0x00C4E7D8
		[NativeMethod] // 0x003CF3AC-0x003CF3E4
		private static void InternalDestroy(IntPtr ptr); // 0x00C4F4E8-0x00C4F554
		public byte AddChannel(int value); // 0x00C4F3A0-0x00C4F414
		public bool SetPacketSize(ushort value); // 0x00C4E7D8-0x00C4E84C
		[NativeMethod] // 0x003CF3E4-0x003CF41C
		public int SetSSLCertFilePath(string value); // 0x00C4F244-0x00C4F2B8
		[NativeMethod] // 0x003CF41C-0x003CF454
		public int SetSSLPrivateKeyFilePath(string value); // 0x00C4F2B8-0x00C4F32C
		[NativeMethod] // 0x003CF454-0x003CF48C
		public int SetSSLCAFilePath(string value); // 0x00C4F32C-0x00C4F3A0
		[NativeMethod] // 0x003CF48C-0x003CF4C4
		private bool MakeChannelsSharedOrder(byte[] values); // 0x00C4F414-0x00C4F488
	}

	[NativeConditional] // 0x003CD824-0x003CD888
	[NativeHeader] // 0x003CD824-0x003CD888
	internal class HostTopologyInternal : IDisposable // TypeDefIndex: 2531
	{
		// Fields
		public IntPtr m_Ptr; // 0x10
	
		// Properties
		[NativeProperty] // 0x003CFA94-0x003CFAD0
		private ushort ReceivedMessagePoolSize { set; } // 0x00C50964-0x00C509D8
		[NativeProperty] // 0x003CFAD0-0x003CFB0C
		private ushort SentMessagePoolSize { set; } // 0x00C509D8-0x00C50A4C
		[NativeProperty] // 0x003CFB0C-0x003CFB48
		private float MessagePoolSizeGrowthFactor { set; } // 0x00C50A4C-0x00C50AC0
	
		// Constructors
		public HostTopologyInternal(HostTopology topology); // 0x00C50720-0x00C5087C
	
		// Methods
		protected virtual void Dispose(bool disposing); // 0x00C50AC0-0x00C50B20
		~HostTopologyInternal(); // 0x00C50B8C-0x00C50C0C
		public void Dispose(); // 0x00C50C0C-0x00C50C6C
		private static IntPtr InternalCreate(ConnectionConfigInternal config, int maxDefaultConnections); // 0x00C5087C-0x00C508F0
		[NativeMethod] // 0x003CF4C4-0x003CF4FC
		private static void InternalDestroy(IntPtr ptr); // 0x00C50B20-0x00C50B8C
		public ushort AddSpecialConnectionConfig(ConnectionConfigInternal config); // 0x00C508F0-0x00C50964
	}

	[NativeConditional] // 0x003CD888-0x003CD8EC
	[NativeHeader] // 0x003CD888-0x003CD8EC
	internal class ConnectionSimulatorConfigInternal : IDisposable // TypeDefIndex: 2532
	{
		// Fields
		public IntPtr m_Ptr; // 0x10
	
		// Constructors
		public ConnectionSimulatorConfigInternal(ConnectionSimulatorConfig config); // 0x00C4F69C-0x00C4F748
	
		// Methods
		protected virtual void Dispose(bool disposing); // 0x00C4F7EC-0x00C4F874
		~ConnectionSimulatorConfigInternal(); // 0x00C4F8E0-0x00C4F960
		public void Dispose(); // 0x00C4F960-0x00C4F9C0
		private static IntPtr InternalCreate(int outMinDelay, int outAvgDelay, int inMinDelay, int inAvgDelay, float packetLossPercentage); // 0x00C4F748-0x00C4F7EC
		[NativeMethod] // 0x003CF4FC-0x003CF534
		private static void InternalDestroy(IntPtr ptr); // 0x00C4F874-0x00C4F8E0
	}

	[NativeConditional] // 0x003CD8EC-0x003CD950
	[NativeHeader] // 0x003CD8EC-0x003CD950
	internal class GlobalConfigInternal : IDisposable // TypeDefIndex: 2533
	{
		// Fields
		public IntPtr m_Ptr; // 0x10
	
		// Properties
		[NativeProperty] // 0x003CFB48-0x003CFB84
		private uint ThreadAwakeTimeout { set; } // 0x00C4FD04-0x00C4FD78
		[NativeProperty] // 0x003CFB84-0x003CFBC0
		private byte ReactorModel { set; } // 0x00C4FD78-0x00C4FDEC
		[NativeProperty] // 0x003CFBC0-0x003CFBFC
		private ushort ReactorMaximumReceivedMessages { set; } // 0x00C4FDEC-0x00C4FE60
		[NativeProperty] // 0x003CFBFC-0x003CFC38
		private ushort ReactorMaximumSentMessages { set; } // 0x00C4FE60-0x00C4FED4
		[NativeProperty] // 0x003CFC38-0x003CFC74
		private ushort MaxPacketSize { set; } // 0x00C4FED4-0x00C4FF48
		[NativeProperty] // 0x003CFC74-0x003CFCB0
		private ushort MaxHosts { set; } // 0x00C4FF48-0x00C4FFBC
		[NativeProperty] // 0x003CFCB0-0x003CFCEC
		private byte ThreadPoolSize { set; } // 0x00C4FFBC-0x00C50030
		[NativeProperty] // 0x003CFCEC-0x003CFD28
		private uint MinTimerTimeout { set; } // 0x00C50030-0x00C500A4
		[NativeProperty] // 0x003CFD28-0x003CFD64
		private uint MaxTimerTimeout { set; } // 0x00C500A4-0x00C50118
		[NativeProperty] // 0x003CFD64-0x003CFDA0
		private uint MinNetSimulatorTimeout { set; } // 0x00C50118-0x00C5018C
		[NativeProperty] // 0x003CFDA0-0x003CFDDC
		private uint MaxNetSimulatorTimeout { set; } // 0x00C5018C-0x00C50200
	
		// Constructors
		public GlobalConfigInternal(GlobalConfig config); // 0x00C4FB0C-0x00C4FCAC
	
		// Methods
		protected virtual void Dispose(bool disposing); // 0x00C50200-0x00C50260
		~GlobalConfigInternal(); // 0x00C502CC-0x00C5034C
		public void Dispose(); // 0x00C5034C-0x00C503AC
		private static IntPtr InternalCreate(); // 0x00C4FCAC-0x00C4FD04
		[NativeMethod] // 0x003CF534-0x003CF56C
		private static void InternalDestroy(IntPtr ptr); // 0x00C50260-0x00C502CC
	}
}

[CompilerGenerated] // 0x003CD950-0x003CD960
internal static class <PrivateImplementationDetails> // TypeDefIndex: 2534
{
	// Fields
	internal static readonly $ArrayType=4 $field-95D7E9C7483D5AF10DF20044FCD3E580073E1D4B; // 0x00 // Starts with: 5f 24 13 f6 10 00 00 00 - Metadata: 0x0021B099

	// Nested types
	private struct $ArrayType=4 // TypeDefIndex: 2535
	{
	}
}

namespace UnityEngine
{
	[Obsolete] // 0x003D0EDC-0x003D0F14
	public class WWW : CustomYieldInstruction, IDisposable // TypeDefIndex: 2537
	{
		// Fields
		private UnityWebRequest _uwr; // 0x10
	
		// Properties
		public string error { get; } // 0x00C964BC-0x00C96614 
		public string text { get; } // 0x00C96614-0x00C966BC 
		public Texture2D texture { get; } // 0x00C968C8-0x00C968D0 
		public string url { get; } // 0x00C968D0-0x00C96900 
		public override bool keepWaiting { get; } // 0x00C96900-0x00C9693C 
	
		// Constructors
		public WWW(string url, WWWForm form); // 0x00C9618C-0x00C96208
		public WWW(string url, byte[] postData, Dictionary<string, string> headers); // 0x00C96208-0x00C964BC
	
		// Methods
		private Texture2D CreateTextureFromDownloadedData(bool markNonReadable); // 0x00C967B0-0x00C968C8
		public void Dispose(); // 0x00C9693C-0x00C9696C
		private bool WaitUntilDoneIfPossible(); // 0x00C966BC-0x00C967B0
	}
}

namespace UnityEngine.XR
{
	[NativeConditional] // 0x003D2024-0x003D20F0
	[NativeHeader] // 0x003D2024-0x003D20F0
	[NativeHeader] // 0x003D2024-0x003D20F0
	[NativeHeader] // 0x003D2024-0x003D20F0
	[NativeHeader] // 0x003D2024-0x003D20F0
	public static class XRSettings // TypeDefIndex: 2539
	{
		// Properties
		public static bool enabled { [StaticAccessor] /* 0x003D2164-0x003D21A0 */ get; [NativeMethod] /* 0x003D21A0-0x003D21DC */ set; } // 0x00CB7F14-0x00CB7F6C 0x00CB7F6C-0x00CCCC60
	}

	[NativeConditional] // 0x003D20F0-0x003D2128
	public static class XRDevice // TypeDefIndex: 2540
	{
		// Fields
		[CompilerGenerated] // 0x003D2128-0x003D2164
		[DebuggerBrowsable] // 0x003D2128-0x003D2164
		private static Action<string> deviceLoaded; // 0x00
	
		// Constructors
		static XRDevice(); // 0x00CB7EC4-0x00CB7F14
	
		// Methods
		[NativeName] // 0x003D21DC-0x003D2240
		[StaticAccessor] // 0x003D21DC-0x003D2240
		public static void DisableAutoXRCameraTracking([NotNull] /* 0x003D2250-0x003D2260 */ Camera camera, bool disabled); // 0x00CB7D90-0x00CB7E04
		[RequiredByNativeCode] // 0x003D2240-0x003D2250
		private static void InvokeDeviceLoaded(string loadedDeviceName); // 0x00CB7E04-0x00CB7EC4
	}
}

namespace ImaginationOverflow.UniversalDeepLinking
{
	public delegate void LinkActivationHandler(LinkActivation s); // TypeDefIndex: 2543; 0x00CAD87C-0x00CADFB0

	public interface ILinkProvider // TypeDefIndex: 2544
	{
		// Events
		event Action<string> LinkReceived {
			add; // 0x00000000-0x00000000
			remove; // 0x00000000-0x00000000
		}
	
		// Methods
		bool Initialize();
		void PollInfoAfterPause();
	}

	public class LinkActivation // TypeDefIndex: 2545
	{
		// Fields
		[CompilerGenerated] // 0x003D33B0-0x003D33C0
		private string <Uri>k__BackingField; // 0x10
		[CompilerGenerated] // 0x003D33C0-0x003D33D0
		private string <RawQueryString>k__BackingField; // 0x18
		[CompilerGenerated] // 0x003D33D0-0x003D33E0
		private Dictionary<string, string> <QueryString>k__BackingField; // 0x20
	
		// Properties
		public string Uri { [CompilerGenerated] /* 0x003D3400-0x003D3410 */ get; [CompilerGenerated] /* 0x003D3410-0x003D3420 */ private set; } // 0x00CAD804-0x00CAD80C 0x00CAD80C-0x00CAD814
		private string RawQueryString { [CompilerGenerated] /* 0x003D3420-0x003D3430 */ set; } // 0x00CAD814-0x00CAD81C
		private Dictionary<string, string> QueryString { [CompilerGenerated] /* 0x003D3430-0x003D3440 */ set; } // 0x00CAD81C-0x00CAD824
	
		// Constructors
		public LinkActivation(string uri, string rawQueryString, Dictionary<string, string> queryStringParams); // 0x00CAD824-0x00CAD864
	
		// Methods
		public override string ToString(); // 0x00CAD864-0x00CAD86C
	}

	public class LinkProviderFactory // TypeDefIndex: 2547
	{
		// Constructors
		public LinkProviderFactory(); // 0x00C969D0-0x00C969D8
	
		// Methods
		public ILinkProvider GetProvider(bool isSteamBuild); // 0x00C9696C-0x00C969C8
	}
}

namespace ImaginationOverflow.UniversalDeepLinking.Providers
{
	public class AndroidLinkProvider : ILinkProvider // TypeDefIndex: 2548
	{
		// Fields
		private AndroidJavaClass _unityPlayer; // 0x10
		private AndroidJavaObject _currentActivity; // 0x18
		private AndroidJavaObject _deepLinkIntent; // 0x20
		private string _deepLink; // 0x28
		[CompilerGenerated] // 0x003D35FC-0x003D360C
		private Action<string> _linkReceived; // 0x30
	
		// Events
		private event Action<string> _linkReceived {
			add; // 0x00C96E18-0x00C96F04
			remove; // 0x00C96F04-0x00C96FF0
		}
		public event Action<string> LinkReceived {
			add; // 0x00C96FF0-0x00C97030
			remove; // 0x00C97030-0x00C97034
		}
	
		// Constructors
		public AndroidLinkProvider(); // 0x00C969C8-0x00C969D0
	
		// Methods
		public bool Initialize(); // 0x00C969D8-0x00C96A84
		private void VerifyIfHasOpenByLink(); // 0x00C96A84-0x00C96C0C
		public static string safeCallStringMethod(AndroidJavaObject javaObject, string methodName, params /* 0x003D362C-0x003D363C */ object[] args); // 0x00C96C0C-0x00C96DA4
		public void PollInfoAfterPause(); // 0x00C97034-0x00CAD04C
		private void OnLinkReceived(string lastLink); // 0x00C96DA4-0x00C96E18
	}
}

namespace Facebook.Unity.Settings
{
	public class FacebookSettings : ScriptableObject // TypeDefIndex: 2552
	{
		// Fields
		public const string FacebookSettingsAssetName = "FacebookSettings"; // Metadata: 0x0021B09D
		public const string FacebookSettingsPath = "FacebookSDK/SDK/Resources"; // Metadata: 0x0021B0B1
		public const string FacebookSettingsAssetExtension = ".asset"; // Metadata: 0x0021B0CE
		private static List<OnChangeCallback> onChangeCallbacks; // 0x00
		private static FacebookSettings instance; // 0x08
		[SerializeField] // 0x003D3B38-0x003D3B48
		private int selectedAppIndex; // 0x18
		[SerializeField] // 0x003D3B48-0x003D3B58
		private List<string> clientTokens; // 0x20
		[SerializeField] // 0x003D3B58-0x003D3B68
		private List<string> appIds; // 0x28
		[SerializeField] // 0x003D3B68-0x003D3B78
		private List<string> appLabels; // 0x30
		[SerializeField] // 0x003D3B78-0x003D3B88
		private bool cookie; // 0x38
		[SerializeField] // 0x003D3B88-0x003D3B98
		private bool logging; // 0x39
		[SerializeField] // 0x003D3B98-0x003D3BA8
		private bool status; // 0x3A
		[SerializeField] // 0x003D3BA8-0x003D3BB8
		private bool xfbml; // 0x3B
		[SerializeField] // 0x003D3BB8-0x003D3BC8
		private bool frictionlessRequests; // 0x3C
		[SerializeField] // 0x003D3BC8-0x003D3BD8
		private string iosURLSuffix; // 0x40
		[SerializeField] // 0x003D3BD8-0x003D3BE8
		private List<UrlSchemes> appLinkSchemes; // 0x48
		[SerializeField] // 0x003D3BE8-0x003D3BF8
		private string uploadAccessToken; // 0x50
		[SerializeField] // 0x003D3BF8-0x003D3C08
		private bool autoLogAppEventsEnabled; // 0x58
		[SerializeField] // 0x003D3C08-0x003D3C18
		private bool advertiserIDCollectionEnabled; // 0x59
	
		// Properties
		public static int SelectedAppIndex { get; set; } // 0x00C900D0-0x00C90140 0x00C90250-0x00C90310
		public static List<string> AppIds { get; set; } // 0x00C9043C-0x00C904AC 0x00C904AC-0x00C9056C
		public static List<string> AppLabels { get; set; } // 0x00C9056C-0x00C905DC 0x00C905DC-0x00C9069C
		public static List<string> ClientTokens { get; set; } // 0x00C9069C-0x00C9070C 0x00C9070C-0x00C907CC
		public static string AppId { get; } // 0x00C907CC-0x00C90870 
		public static string ClientToken { get; } // 0x00C90870-0x00C90914 
		public static bool IsValidAppId { get; } // 0x00C90914-0x00C90A04 
		public static bool Cookie { get; set; } // 0x00C90A04-0x00C90A74 0x00C90A74-0x00C90B40
		public static bool Logging { get; set; } // 0x00C90B40-0x00C90BB0 0x00C90BB0-0x00C90C7C
		public static bool Status { get; set; } // 0x00C90C7C-0x00C90CEC 0x00C90CEC-0x00C90DB8
		public static bool Xfbml { get; set; } // 0x00C90DB8-0x00C90E28 0x00C90E28-0x00C90EF4
		public static string IosURLSuffix { get; set; } // 0x00C90EF4-0x00C90F64 0x00C90F64-0x00C9102C
		public static string ChannelUrl { get; } // 0x00C9102C-0x00C91074 
		public static bool FrictionlessRequests { get; set; } // 0x00C91074-0x00C910E4 0x00C910E4-0x00C911B0
		public static List<UrlSchemes> AppLinkSchemes { get; set; } // 0x00C911B0-0x00C91220 0x00C91220-0x00C912E0
		public static string UploadAccessToken { get; set; } // 0x00C912E0-0x00C91350 0x00C91350-0x00C91418
		public static bool AutoLogAppEventsEnabled { get; set; } // 0x00C91418-0x00C91488 0x00C91488-0x00C91554
		public static bool AdvertiserIDCollectionEnabled { get; set; } // 0x00C91554-0x00C915C4 0x00C915C4-0x00C91690
		public static FacebookSettings Instance { get; } // 0x00C90140-0x00C90250 
		public static FacebookSettings NullableInstance { get; } // 0x00C91690-0x00C917D0 
	
		// Nested types
		public delegate void OnChangeCallback(); // TypeDefIndex: 2553; 0x00C91C64-0x00C92070
	
		[Serializable]
		public class UrlSchemes // TypeDefIndex: 2554
		{
			// Fields
			[SerializeField] // 0x003D3C18-0x003D3C28
			private List<string> list; // 0x10
	
			// Properties
			public List<string> Schemes { get; set; } // 0x00C920C0-0x00C920C8 0x00C920C8-0x00C920D0
	
			// Constructors
			public UrlSchemes(List<string> schemes = null); // 0x00C91AC0-0x00C91B58
		}
	
		[Serializable]
		[CompilerGenerated] // 0x003D3B28-0x003D3B38
		private sealed class <>c // TypeDefIndex: 2555
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static Action<OnChangeCallback> <>9__76_0; // 0x08
	
			// Constructors
			static <>c(); // 0x00C91BCC-0x00C91C30
			public <>c(); // 0x00C91C30-0x00C91C38
	
			// Methods
			internal void <SettingsChanged>b__76_0(OnChangeCallback callback); // 0x00C91C38-0x00C91C64
		}
	
		// Constructors
		public FacebookSettings(); // 0x00C918E8-0x00C91AC0
		static FacebookSettings(); // 0x00C91B58-0x00C91BCC
	
		// Methods
		public static void RegisterChangeEventCallback(OnChangeCallback callback); // 0x00C917D0-0x00C9185C
		public static void UnregisterChangeEventCallback(OnChangeCallback callback); // 0x00C9185C-0x00C918E8
		private static void SettingsChanged(); // 0x00C90310-0x00C9043C
	}
}

namespace ImaginationOverflow.UniversalDeepLinking
{
	public sealed class DeepLinkManager // TypeDefIndex: 2557
	{
		// Fields
		[CompilerGenerated] // 0x003D3C9C-0x003D3CAC
		private static DeepLinkManager <Instance>k__BackingField; // 0x00
		[CompilerGenerated] // 0x003D3CAC-0x003D3CBC
		private bool <IsSteamBuild>k__BackingField; // 0x10
		[CompilerGenerated] // 0x003D3CBC-0x003D3CCC
		private LinkActivationHandler _activated; // 0x18
		private ILinkProvider _currProvider; // 0x20
		private GameObject _go; // 0x28
		private string _storedActivation; // 0x30
	
		// Properties
		public static DeepLinkManager Instance { [CompilerGenerated] /* 0x003D3CFC-0x003D3D0C */ get; [CompilerGenerated] /* 0x003D3D0C-0x003D3D1C */ private set; } // 0x00C8A794-0x00C8A7FC 0x00C8A7FC-0x00C8A868
		public bool IsSteamBuild { [CompilerGenerated] /* 0x003D3D1C-0x003D3D2C */ get; } // 0x00C8A868-0x00C8A870 
	
		// Events
		public event LinkActivationHandler LinkActivated {
			add; // 0x00C8A8D4-0x00C8A8F8
			remove; // 0x00C8AD94-0x00C8AD98
		}
		private event LinkActivationHandler _activated {
			add; // 0x00C8A8F8-0x00C8A9E4
			remove; // 0x00C8AD98-0x00C8AE84
		}
	
		// Nested types
		private class UrlEncodingParser : Dictionary<string, string> // TypeDefIndex: 2558
		{
			// Fields
			[CompilerGenerated] // 0x003D3CCC-0x003D3CDC
			private string <Url>k__BackingField; // 0x50
			[CompilerGenerated] // 0x003D3CDC-0x003D3CEC
			private string <Query>k__BackingField; // 0x58
	
			// Properties
			private string Url { [CompilerGenerated] /* 0x003D3D4C-0x003D3D5C */ get; [CompilerGenerated] /* 0x003D3D5C-0x003D3D6C */ set; } // 0x00C8B53C-0x00C8B544 0x00C8B544-0x00C8B54C
			public string Query { [CompilerGenerated] /* 0x003D3D6C-0x003D3D7C */ get; [CompilerGenerated] /* 0x003D3D7C-0x003D3D8C */ private set; } // 0x00C8B478-0x00C8B480 0x00C8B54C-0x00C8B554
	
			// Constructors
			public UrlEncodingParser(string queryStringOrUrl = null); // 0x00C8B3D8-0x00C8B478
	
			// Methods
			public Dictionary<string, string> Parse(string query); // 0x00C8B554-0x00C8B844
			public override string ToString(); // 0x00C8B844-0x00C8BCE0
		}
	
		// Constructors
		static DeepLinkManager(); // 0x00C8A870-0x00C8A8CC
		private DeepLinkManager(); // 0x00C8A8CC-0x00C8A8D4
	
		// Methods
		private void RegisterIfNecessary(); // 0x00C8A9E4-0x00C8AD94
		private void CreatePauseGameObject(); // 0x00C8AF10-0x00C8B12C
		private void _currProvider_LinkReceived(string s); // 0x00C8AE84-0x00C8AEB0
		private void StoreActivation(string s); // 0x00C8B278-0x00C8B280
		private bool OnActivated(string s); // 0x00C8B12C-0x00C8B278
		private LinkActivation CreateLinkActivation(string s); // 0x00C8B280-0x00C8B3D8
		internal void GameCameFromPause(); // 0x00C8B480-0x00C8B53C
	}

	public class UniversalDeeplinkingRuntimeScript : MonoBehaviour // TypeDefIndex: 2559
	{
		// Fields
		private bool _onJob; // 0x18
	
		// Nested types
		[CompilerGenerated] // 0x003D3C8C-0x003D3C9C
		private sealed class <CallDeepLinkManagerAfterDelay>d__4 : IEnumerator<object> // TypeDefIndex: 2560
		{
			// Fields
			private int <>1__state; // 0x10
			private object <>2__current; // 0x18
			public UniversalDeeplinkingRuntimeScript <>4__this; // 0x20
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003D3DAC-0x003D3DBC */ get; } // 0x00C8C25C-0x00C8C264 
			object IEnumerator.Current { [DebuggerHidden] /* 0x003D3DCC-0x003D3DDC */ get; } // 0x00C8C2CC-0x00C8C2D4 
	
			// Constructors
			[DebuggerHidden] // 0x003D3D8C-0x003D3D9C
			public <CallDeepLinkManagerAfterDelay>d__4(int <>1__state); // 0x00C8C034-0x00C8C060
	
			// Methods
			[DebuggerHidden] // 0x003D3D9C-0x003D3DAC
			void IDisposable.Dispose(); // 0x00C8C068-0x00C8C06C
			private bool MoveNext(); // 0x00C8C06C-0x00C8C25C
			[DebuggerHidden] // 0x003D3DBC-0x003D3DCC
			void IEnumerator.Reset(); // 0x00C8C264-0x00C8C2CC
		}
	
		// Constructors
		public UniversalDeeplinkingRuntimeScript(); // 0x00C8C060-0x00C8C068
	
		// Methods
		private void Start(); // 0x00C8BEC4-0x00C8BF40
		private void OnApplicationPause(bool pauseStatus); // 0x00C8BF40-0x00C8BF80
		private void OnApplicationFocus(bool focus); // 0x00C8BFF4-0x00C8C034
		public IEnumerator CallDeepLinkManagerAfterDelay(); // 0x00C8BF80-0x00C8BFF4
	}
}

namespace ImaginationOverflow.UniversalDeepLinking.Providers
{
	public class EditorLinkProvider : ILinkProvider // TypeDefIndex: 2561
	{
		// Fields
		private static EditorLinkProvider _instance; // 0x00
		[CompilerGenerated] // 0x003D3CEC-0x003D3CFC
		private Action<string> LinkReceived; // 0x10
	
		// Events
		public event Action<string> LinkReceived {
			add; // 0x00C8BCE8-0x00C8BDD4
			remove; // 0x00C8BDD4-0x00C8BEC0
		}
	
		// Constructors
		public EditorLinkProvider(); // 0x00C8AEB0-0x00C8AF10
	
		// Methods
		public bool Initialize(); // 0x00C8BCE0-0x00C8BCE8
		public void PollInfoAfterPause(); // 0x00C8BEC0-0x00C8BEC4
	}
}

namespace UnityEngine.EventSystems
{
	[Flags] // 0x003D3FB8-0x003D3FC8
	public enum EventHandle // TypeDefIndex: 2563
	{
		Unused = 0,
		Used = 1
	}

	public interface IEventSystemHandler // TypeDefIndex: 2564
	{
	}

	public interface IPointerEnterHandler : IEventSystemHandler // TypeDefIndex: 2565
	{
		// Methods
		void OnPointerEnter(PointerEventData eventData);
	}

	public interface IPointerExitHandler : IEventSystemHandler // TypeDefIndex: 2566
	{
		// Methods
		void OnPointerExit(PointerEventData eventData);
	}

	public interface IPointerDownHandler : IEventSystemHandler // TypeDefIndex: 2567
	{
		// Methods
		void OnPointerDown(PointerEventData eventData);
	}

	public interface IPointerUpHandler : IEventSystemHandler // TypeDefIndex: 2568
	{
		// Methods
		void OnPointerUp(PointerEventData eventData);
	}

	public interface IPointerClickHandler : IEventSystemHandler // TypeDefIndex: 2569
	{
		// Methods
		void OnPointerClick(PointerEventData eventData);
	}

	public interface IBeginDragHandler : IEventSystemHandler // TypeDefIndex: 2570
	{
		// Methods
		void OnBeginDrag(PointerEventData eventData);
	}

	public interface IInitializePotentialDragHandler : IEventSystemHandler // TypeDefIndex: 2571
	{
		// Methods
		void OnInitializePotentialDrag(PointerEventData eventData);
	}

	public interface IDragHandler : IEventSystemHandler // TypeDefIndex: 2572
	{
		// Methods
		void OnDrag(PointerEventData eventData);
	}

	public interface IEndDragHandler : IEventSystemHandler // TypeDefIndex: 2573
	{
		// Methods
		void OnEndDrag(PointerEventData eventData);
	}

	public interface IDropHandler : IEventSystemHandler // TypeDefIndex: 2574
	{
		// Methods
		void OnDrop(PointerEventData eventData);
	}

	public interface IScrollHandler : IEventSystemHandler // TypeDefIndex: 2575
	{
		// Methods
		void OnScroll(PointerEventData eventData);
	}

	public interface IUpdateSelectedHandler : IEventSystemHandler // TypeDefIndex: 2576
	{
		// Methods
		void OnUpdateSelected(BaseEventData eventData);
	}

	public interface ISelectHandler : IEventSystemHandler // TypeDefIndex: 2577
	{
		// Methods
		void OnSelect(BaseEventData eventData);
	}

	public interface IDeselectHandler : IEventSystemHandler // TypeDefIndex: 2578
	{
		// Methods
		void OnDeselect(BaseEventData eventData);
	}

	public interface IMoveHandler : IEventSystemHandler // TypeDefIndex: 2579
	{
		// Methods
		void OnMove(AxisEventData eventData);
	}

	public interface ISubmitHandler : IEventSystemHandler // TypeDefIndex: 2580
	{
		// Methods
		void OnSubmit(BaseEventData eventData);
	}

	public interface ICancelHandler : IEventSystemHandler // TypeDefIndex: 2581
	{
		// Methods
		void OnCancel(BaseEventData eventData);
	}

	[AddComponentMenu] // 0x003D3FC8-0x003D4000
	public class EventSystem : UIBehaviour // TypeDefIndex: 2582
	{
		// Fields
		private List<BaseInputModule> m_SystemInputModules; // 0x18
		private BaseInputModule m_CurrentInputModule; // 0x20
		private static List<EventSystem> m_EventSystems; // 0x00
		[FormerlySerializedAs] // 0x003D5054-0x003D50A0
		[SerializeField] // 0x003D5054-0x003D50A0
		private GameObject m_FirstSelected; // 0x28
		[SerializeField] // 0x003D50A0-0x003D50B0
		private bool m_sendNavigationEvents; // 0x30
		[SerializeField] // 0x003D50B0-0x003D50C0
		private int m_DragThreshold; // 0x34
		private GameObject m_CurrentSelected; // 0x38
		private bool m_HasFocus; // 0x40
		private bool m_SelectionGuard; // 0x41
		private BaseEventData m_DummyData; // 0x48
		private static readonly Comparison<RaycastResult> s_RaycastComparer; // 0x08
		[CompilerGenerated] // 0x003D50C0-0x003D50D0
		private static Comparison<RaycastResult> <>f__mg$cache0; // 0x10
	
		// Properties
		public static EventSystem current { get; set; } // 0x0068F264-0x0068F344 0x0068F344-0x0068F46C
		public bool sendNavigationEvents { get; set; } // 0x0068F46C-0x0068F474 0x0068F474-0x0068F480
		public int pixelDragThreshold { get; set; } // 0x0068F480-0x0068F488 0x0068F488-0x0068F490
		public BaseInputModule currentInputModule { get; } // 0x0068D6EC-0x0068D6F4 
		public GameObject firstSelectedGameObject { get; set; } // 0x0068F490-0x0068F498 0x0068F498-0x0068F4A0
		public GameObject currentSelectedGameObject { get; } // 0x0068D720-0x0068D728 
		[Obsolete] // 0x003D7F7C-0x003D7FB4
		public GameObject lastSelectedGameObject { get; } // 0x0068F4A0-0x0068F4A8 
		public bool isFocused { get; } // 0x0068F4A8-0x0068F4B0 
		public bool alreadySelecting { get; } // 0x0068F4B0-0x0068F4B8 
		private BaseEventData baseEventDataCache { get; } // 0x0068F588-0x0068F5F8 
	
		// Constructors
		protected EventSystem(); // 0x0068F1E0-0x0068F264
		static EventSystem(); // 0x00691554-0x00691624
	
		// Methods
		public void UpdateModules(); // 0x0068DD80-0x0068DEE4
		public void SetSelectedGameObject(GameObject selected, BaseEventData pointer); // 0x0068D76C-0x0068D8D4
		public void SetSelectedGameObject(GameObject selected); // 0x0068F5F8-0x0068F628
		private static int RaycastComparer(RaycastResult lhs, RaycastResult rhs); // 0x0068F628-0x0068FA1C
		public void RaycastAll(PointerEventData eventData, List<RaycastResult> raycastResults); // 0x0068FA1C-0x0068FBDC
		public bool IsPointerOverGameObject(); // 0x0068FC44-0x0068FC4C
		public bool IsPointerOverGameObject(int pointerId); // 0x0068FC4C-0x0068FD08
		protected override void OnEnable(); // 0x0068FD08-0x0068FD94
		protected override void OnDisable(); // 0x0068FD94-0x0068FE80
		private void TickModules(); // 0x0068FE80-0x0068FFAC
		protected virtual void OnApplicationFocus(bool hasFocus); // 0x0068FFAC-0x0068FFB8
		protected virtual void Update(); // 0x0068FFB8-0x00691298
		private void ChangeEventModule(BaseInputModule module); // 0x00691298-0x006913C0
		public override string ToString(); // 0x006913C0-0x00691554
	}

	[AddComponentMenu] // 0x003D4000-0x003D4038
	public class EventTrigger : MonoBehaviour, IPointerEnterHandler, IPointerExitHandler, IPointerDownHandler, IPointerUpHandler, IPointerClickHandler, IInitializePotentialDragHandler, IBeginDragHandler, IDragHandler, IEndDragHandler, IDropHandler, IScrollHandler, IUpdateSelectedHandler, ISelectHandler, IDeselectHandler, IMoveHandler, ISubmitHandler, ICancelHandler // TypeDefIndex: 2583
	{
		// Fields
		[FormerlySerializedAs] // 0x003D50D0-0x003D511C
		[SerializeField] // 0x003D50D0-0x003D511C
		private List<Entry> m_Delegates; // 0x18
		[EditorBrowsable] // 0x003D511C-0x003D5170
		[Obsolete] // 0x003D511C-0x003D5170
		public List<Entry> delegates; // 0x20
	
		// Properties
		public List<Entry> triggers { get; set; } // 0x0069162C-0x006916A0 0x006916A0-0x006916A8
	
		// Nested types
		[Serializable]
		public class TriggerEvent : UnityEvent<BaseEventData> // TypeDefIndex: 2584
		{
			// Constructors
			public TriggerEvent(); // 0x00691928-0x00691978
		}
	
		[Serializable]
		public class Entry // TypeDefIndex: 2585
		{
			// Fields
			public EventTriggerType eventID; // 0x10
			public TriggerEvent callback; // 0x18
	
			// Constructors
			public Entry(); // 0x006918BC-0x00691928
		}
	
		// Constructors
		protected EventTrigger(); // 0x00691624-0x0069162C
	
		// Methods
		private void Execute(EventTriggerType id, BaseEventData eventData); // 0x006916A8-0x006917AC
		public virtual void OnPointerEnter(PointerEventData eventData); // 0x006917AC-0x006917BC
		public virtual void OnPointerExit(PointerEventData eventData); // 0x006917BC-0x006917CC
		public virtual void OnDrag(PointerEventData eventData); // 0x006917CC-0x006917DC
		public virtual void OnDrop(PointerEventData eventData); // 0x006917DC-0x006917EC
		public virtual void OnPointerDown(PointerEventData eventData); // 0x006917EC-0x006917FC
		public virtual void OnPointerUp(PointerEventData eventData); // 0x006917FC-0x0069180C
		public virtual void OnPointerClick(PointerEventData eventData); // 0x0069180C-0x0069181C
		public virtual void OnSelect(BaseEventData eventData); // 0x0069181C-0x0069182C
		public virtual void OnDeselect(BaseEventData eventData); // 0x0069182C-0x0069183C
		public virtual void OnScroll(PointerEventData eventData); // 0x0069183C-0x0069184C
		public virtual void OnMove(AxisEventData eventData); // 0x0069184C-0x0069185C
		public virtual void OnUpdateSelected(BaseEventData eventData); // 0x0069185C-0x0069186C
		public virtual void OnInitializePotentialDrag(PointerEventData eventData); // 0x0069186C-0x0069187C
		public virtual void OnBeginDrag(PointerEventData eventData); // 0x0069187C-0x0069188C
		public virtual void OnEndDrag(PointerEventData eventData); // 0x0069188C-0x0069189C
		public virtual void OnSubmit(BaseEventData eventData); // 0x0069189C-0x006918AC
		public virtual void OnCancel(BaseEventData eventData); // 0x006918AC-0x006918BC
	}

	public enum EventTriggerType // TypeDefIndex: 2586
	{
		PointerEnter = 0,
		PointerExit = 1,
		PointerDown = 2,
		PointerUp = 3,
		PointerClick = 4,
		Drag = 5,
		Drop = 6,
		Scroll = 7,
		UpdateSelected = 8,
		Select = 9,
		Deselect = 10,
		Move = 11,
		InitializePotentialDrag = 12,
		BeginDrag = 13,
		EndDrag = 14,
		Submit = 15,
		Cancel = 16
	}

	public static class ExecuteEvents // TypeDefIndex: 2587
	{
		// Fields
		private static readonly EventFunction<IPointerEnterHandler> s_PointerEnterHandler; // 0x00
		private static readonly EventFunction<IPointerExitHandler> s_PointerExitHandler; // 0x08
		private static readonly EventFunction<IPointerDownHandler> s_PointerDownHandler; // 0x10
		private static readonly EventFunction<IPointerUpHandler> s_PointerUpHandler; // 0x18
		private static readonly EventFunction<IPointerClickHandler> s_PointerClickHandler; // 0x20
		private static readonly EventFunction<IInitializePotentialDragHandler> s_InitializePotentialDragHandler; // 0x28
		private static readonly EventFunction<IBeginDragHandler> s_BeginDragHandler; // 0x30
		private static readonly EventFunction<IDragHandler> s_DragHandler; // 0x38
		private static readonly EventFunction<IEndDragHandler> s_EndDragHandler; // 0x40
		private static readonly EventFunction<IDropHandler> s_DropHandler; // 0x48
		private static readonly EventFunction<IScrollHandler> s_ScrollHandler; // 0x50
		private static readonly EventFunction<IUpdateSelectedHandler> s_UpdateSelectedHandler; // 0x58
		private static readonly EventFunction<ISelectHandler> s_SelectHandler; // 0x60
		private static readonly EventFunction<IDeselectHandler> s_DeselectHandler; // 0x68
		private static readonly EventFunction<IMoveHandler> s_MoveHandler; // 0x70
		private static readonly EventFunction<ISubmitHandler> s_SubmitHandler; // 0x78
		private static readonly EventFunction<ICancelHandler> s_CancelHandler; // 0x80
		private static readonly ObjectPool<List<IEventSystemHandler>> s_HandlerListPool; // 0x88
		private static readonly List<Transform> s_InternalTransformList; // 0x90
		[CompilerGenerated] // 0x003D5170-0x003D5180
		private static EventFunction<IPointerEnterHandler> <>f__mg$cache0; // 0x98
		[CompilerGenerated] // 0x003D5180-0x003D5190
		private static EventFunction<IPointerExitHandler> <>f__mg$cache1; // 0xA0
		[CompilerGenerated] // 0x003D5190-0x003D51A0
		private static EventFunction<IPointerDownHandler> <>f__mg$cache2; // 0xA8
		[CompilerGenerated] // 0x003D51A0-0x003D51B0
		private static EventFunction<IPointerUpHandler> <>f__mg$cache3; // 0xB0
		[CompilerGenerated] // 0x003D51B0-0x003D51C0
		private static EventFunction<IPointerClickHandler> <>f__mg$cache4; // 0xB8
		[CompilerGenerated] // 0x003D51C0-0x003D51D0
		private static EventFunction<IInitializePotentialDragHandler> <>f__mg$cache5; // 0xC0
		[CompilerGenerated] // 0x003D51D0-0x003D51E0
		private static EventFunction<IBeginDragHandler> <>f__mg$cache6; // 0xC8
		[CompilerGenerated] // 0x003D51E0-0x003D51F0
		private static EventFunction<IDragHandler> <>f__mg$cache7; // 0xD0
		[CompilerGenerated] // 0x003D51F0-0x003D5200
		private static EventFunction<IEndDragHandler> <>f__mg$cache8; // 0xD8
		[CompilerGenerated] // 0x003D5200-0x003D5210
		private static EventFunction<IDropHandler> <>f__mg$cache9; // 0xE0
		[CompilerGenerated] // 0x003D5210-0x003D5220
		private static EventFunction<IScrollHandler> <>f__mg$cacheA; // 0xE8
		[CompilerGenerated] // 0x003D5220-0x003D5230
		private static EventFunction<IUpdateSelectedHandler> <>f__mg$cacheB; // 0xF0
		[CompilerGenerated] // 0x003D5230-0x003D5240
		private static EventFunction<ISelectHandler> <>f__mg$cacheC; // 0xF8
		[CompilerGenerated] // 0x003D5240-0x003D5250
		private static EventFunction<IDeselectHandler> <>f__mg$cacheD; // 0x100
		[CompilerGenerated] // 0x003D5250-0x003D5260
		private static EventFunction<IMoveHandler> <>f__mg$cacheE; // 0x108
		[CompilerGenerated] // 0x003D5260-0x003D5270
		private static EventFunction<ISubmitHandler> <>f__mg$cacheF; // 0x110
		[CompilerGenerated] // 0x003D5270-0x003D5280
		private static EventFunction<ICancelHandler> <>f__mg$cache10; // 0x118
	
		// Properties
		public static EventFunction<IPointerEnterHandler> pointerEnterHandler { get; } // 0x0068E924-0x0068E98C 
		public static EventFunction<IPointerExitHandler> pointerExitHandler { get; } // 0x0068E8B4-0x0068E91C 
		public static EventFunction<IPointerDownHandler> pointerDownHandler { get; } // 0x006928D8-0x00692940 
		public static EventFunction<IPointerUpHandler> pointerUpHandler { get; } // 0x00692940-0x006929A8 
		public static EventFunction<IPointerClickHandler> pointerClickHandler { get; } // 0x006929A8-0x00692A10 
		public static EventFunction<IInitializePotentialDragHandler> initializePotentialDrag { get; } // 0x00692A10-0x00692A78 
		public static EventFunction<IBeginDragHandler> beginDragHandler { get; } // 0x00692A78-0x00692AE0 
		public static EventFunction<IDragHandler> dragHandler { get; } // 0x00692AE0-0x00692B48 
		public static EventFunction<IEndDragHandler> endDragHandler { get; } // 0x00692B48-0x00692BB0 
		public static EventFunction<IDropHandler> dropHandler { get; } // 0x00692BB0-0x00692C18 
		public static EventFunction<IScrollHandler> scrollHandler { get; } // 0x00692C18-0x00692C80 
		public static EventFunction<IUpdateSelectedHandler> updateSelectedHandler { get; } // 0x00692C80-0x00692CE8 
		public static EventFunction<ISelectHandler> selectHandler { get; } // 0x0068F520-0x0068F588 
		public static EventFunction<IDeselectHandler> deselectHandler { get; } // 0x0068F4B8-0x0068F520 
		public static EventFunction<IMoveHandler> moveHandler { get; } // 0x00692CE8-0x00692D50 
		public static EventFunction<ISubmitHandler> submitHandler { get; } // 0x00692D50-0x00692DB8 
		public static EventFunction<ICancelHandler> cancelHandler { get; } // 0x00692DB8-0x00692E20 
	
		// Nested types
		public delegate void EventFunction<T1>(T1 handler, BaseEventData eventData); // TypeDefIndex: 2588; 0x00000000-0x00000000
	
		// Constructors
		static ExecuteEvents(); // 0x00692FF0-0x006936BC
	
		// Methods
		public static T ValidateEventData<T>(BaseEventData data)
			where T : class;
		private static void Execute(IPointerEnterHandler handler, BaseEventData eventData); // 0x00691978-0x00691A70
		private static void Execute(IPointerExitHandler handler, BaseEventData eventData); // 0x00691A70-0x00691B68
		private static void Execute(IPointerDownHandler handler, BaseEventData eventData); // 0x00691B68-0x00691C60
		private static void Execute(IPointerUpHandler handler, BaseEventData eventData); // 0x00691C60-0x00691D58
		private static void Execute(IPointerClickHandler handler, BaseEventData eventData); // 0x00691D58-0x00691E50
		private static void Execute(IInitializePotentialDragHandler handler, BaseEventData eventData); // 0x00691E50-0x00691F48
		private static void Execute(IBeginDragHandler handler, BaseEventData eventData); // 0x00691F48-0x00692040
		private static void Execute(IDragHandler handler, BaseEventData eventData); // 0x00692040-0x00692138
		private static void Execute(IEndDragHandler handler, BaseEventData eventData); // 0x00692138-0x00692230
		private static void Execute(IDropHandler handler, BaseEventData eventData); // 0x00692230-0x00692328
		private static void Execute(IScrollHandler handler, BaseEventData eventData); // 0x00692328-0x00692420
		private static void Execute(IUpdateSelectedHandler handler, BaseEventData eventData); // 0x00692420-0x006924E0
		private static void Execute(ISelectHandler handler, BaseEventData eventData); // 0x006924E0-0x006925A0
		private static void Execute(IDeselectHandler handler, BaseEventData eventData); // 0x006925A0-0x00692660
		private static void Execute(IMoveHandler handler, BaseEventData eventData); // 0x00692660-0x00692758
		private static void Execute(ISubmitHandler handler, BaseEventData eventData); // 0x00692758-0x00692818
		private static void Execute(ICancelHandler handler, BaseEventData eventData); // 0x00692818-0x006928D8
		private static void GetEventChain(GameObject root, IList<Transform> eventChain); // 0x00692E20-0x00692FF0
		public static bool Execute<T>(GameObject target, BaseEventData eventData, EventFunction<T> functor)
			where T : IEventSystemHandler;
		public static GameObject ExecuteHierarchy<T>(GameObject root, BaseEventData eventData, EventFunction<T> callbackFunction)
			where T : IEventSystemHandler;
		private static bool ShouldSendToComponent<T>(Component component)
			where T : IEventSystemHandler;
		private static void GetEventList<T>(GameObject go, IList<IEventSystemHandler> results)
			where T : IEventSystemHandler;
		public static bool CanHandleEvent<T>(GameObject go)
			where T : IEventSystemHandler;
		public static GameObject GetEventHandler<T>(GameObject root)
			where T : IEventSystemHandler;
		[CompilerGenerated] // 0x003D755C-0x003D756C
		private static void <s_HandlerListPool>m__0(List<IEventSystemHandler> l); // 0x006936BC-0x00693718
	}

	public enum MoveDirection // TypeDefIndex: 2589
	{
		Left = 0,
		Up = 1,
		Right = 2,
		Down = 3,
		None = 4
	}

	internal static class RaycasterManager // TypeDefIndex: 2590
	{
		// Fields
		private static readonly List<BaseRaycaster> s_Raycasters; // 0x00
	
		// Constructors
		static RaycasterManager(); // 0x006974D4-0x00697548
	
		// Methods
		public static void AddRaycaster(BaseRaycaster baseRaycaster); // 0x0068EF9C-0x0068F08C
		public static List<BaseRaycaster> GetRaycasters(); // 0x0068FBDC-0x0068FC44
		public static void RemoveRaycasters(BaseRaycaster baseRaycaster); // 0x0068F0F0-0x0068F1E0
	}

	public struct RaycastResult // TypeDefIndex: 2591
	{
		// Fields
		private GameObject m_GameObject; // 0x00
		public BaseRaycaster module; // 0x08
		public float distance; // 0x10
		public float index; // 0x14
		public int depth; // 0x18
		public int sortingLayer; // 0x1C
		public int sortingOrder; // 0x20
		public Vector3 worldPosition; // 0x24
		public Vector3 worldNormal; // 0x30
		public Vector2 screenPosition; // 0x3C
	
		// Properties
		public GameObject gameObject { get; set; } // 0x00697338-0x00697340 0x00697340-0x00697404
		public bool isValid { get; } // 0x00697404-0x006974C4 
	
		// Methods
		public void Clear(); // 0x006974C4-0x006974CC
		public override string ToString(); // 0x006974CC-0x006974D4
	}

	public abstract class UIBehaviour : MonoBehaviour // TypeDefIndex: 2592
	{
		// Constructors
		protected UIBehaviour(); // 0x0068D8DC-0x0068D8E4
	
		// Methods
		protected virtual void Awake(); // 0x0069A0D4-0x0069A0D8
		protected virtual void OnEnable(); // 0x0068DD7C-0x0068DD80
		protected virtual void Start(); // 0x0069A0D8-0x0069A0DC
		protected virtual void OnDisable(); // 0x0068DF10-0x0068DF14
		protected virtual void OnDestroy(); // 0x0069A0DC-0x0069A0E0
		public virtual bool IsActive(); // 0x0069A0E0-0x0069A0E8
		protected virtual void OnRectTransformDimensionsChange(); // 0x0069A0E8-0x0069A0EC
		protected virtual void OnBeforeTransformParentChanged(); // 0x0069A0EC-0x0069A0F0
		protected virtual void OnTransformParentChanged(); // 0x0069A0F0-0x0069A0F4
		protected virtual void OnDidApplyAnimationProperties(); // 0x0069A0F4-0x0069A0F8
		protected virtual void OnCanvasGroupChanged(); // 0x0069A0F8-0x0069A0FC
		protected virtual void OnCanvasHierarchyChanged(); // 0x0069A0FC-0x0069A100
		public bool IsDestroyed(); // 0x0069A100-0x0069A16C
	}

	public class AxisEventData : BaseEventData // TypeDefIndex: 2593
	{
		// Fields
		[CompilerGenerated] // 0x003D5280-0x003D52BC
		[DebuggerBrowsable] // 0x003D5280-0x003D52BC
		private Vector2 <moveVector>k__BackingField; // 0x20
		[CompilerGenerated] // 0x003D52BC-0x003D52F8
		[DebuggerBrowsable] // 0x003D52BC-0x003D52F8
		private MoveDirection <moveDir>k__BackingField; // 0x28
	
		// Properties
		public Vector2 moveVector { [CompilerGenerated] /* 0x003D756C-0x003D757C */ get; [CompilerGenerated] /* 0x003D757C-0x003D758C */ set; } // 0x0068D6B0-0x0068D6B8 0x0068D6A0-0x0068D6A8
		public MoveDirection moveDir { [CompilerGenerated] /* 0x003D758C-0x003D759C */ get; [CompilerGenerated] /* 0x003D759C-0x003D75AC */ set; } // 0x0068D6B8-0x0068D6C0 0x0068D6A8-0x0068D6B0
	
		// Constructors
		public AxisEventData(EventSystem eventSystem); // 0x0068D5E4-0x0068D674
	}

	public abstract class AbstractEventData // TypeDefIndex: 2594
	{
		// Fields
		protected bool m_Used; // 0x10
	
		// Properties
		public virtual bool used { get; } // 0x0068D5DC-0x0068D5E4 
	
		// Constructors
		protected AbstractEventData(); // 0x0068D5C0-0x0068D5C8
	
		// Methods
		public virtual void Reset(); // 0x0068D5C8-0x0068D5D0
		public virtual void Use(); // 0x0068D5D0-0x0068D5DC
	}

	public class BaseEventData : AbstractEventData // TypeDefIndex: 2595
	{
		// Fields
		private readonly EventSystem m_EventSystem; // 0x18
	
		// Properties
		public BaseInputModule currentInputModule { get; } // 0x0068D6C0-0x0068D6EC 
		public GameObject selectedObject { get; set; } // 0x0068D6F4-0x0068D720 0x0068D728-0x0068D76C
	
		// Constructors
		public BaseEventData(EventSystem eventSystem); // 0x0068D674-0x0068D6A0
	}

	public class PointerEventData : BaseEventData // TypeDefIndex: 2596
	{
		// Fields
		[CompilerGenerated] // 0x003D52F8-0x003D5334
		[DebuggerBrowsable] // 0x003D52F8-0x003D5334
		private GameObject <pointerEnter>k__BackingField; // 0x20
		private GameObject m_PointerPress; // 0x28
		[CompilerGenerated] // 0x003D5334-0x003D5370
		[DebuggerBrowsable] // 0x003D5334-0x003D5370
		private GameObject <lastPress>k__BackingField; // 0x30
		[CompilerGenerated] // 0x003D5370-0x003D53AC
		[DebuggerBrowsable] // 0x003D5370-0x003D53AC
		private GameObject <rawPointerPress>k__BackingField; // 0x38
		[CompilerGenerated] // 0x003D53AC-0x003D53E8
		[DebuggerBrowsable] // 0x003D53AC-0x003D53E8
		private GameObject <pointerDrag>k__BackingField; // 0x40
		[CompilerGenerated] // 0x003D53E8-0x003D5424
		[DebuggerBrowsable] // 0x003D53E8-0x003D5424
		private RaycastResult <pointerCurrentRaycast>k__BackingField; // 0x48
		[CompilerGenerated] // 0x003D5424-0x003D5460
		[DebuggerBrowsable] // 0x003D5424-0x003D5460
		private RaycastResult <pointerPressRaycast>k__BackingField; // 0x90
		public List<GameObject> hovered; // 0xD8
		[CompilerGenerated] // 0x003D5460-0x003D549C
		[DebuggerBrowsable] // 0x003D5460-0x003D549C
		private bool <eligibleForClick>k__BackingField; // 0xE0
		[CompilerGenerated] // 0x003D549C-0x003D54D8
		[DebuggerBrowsable] // 0x003D549C-0x003D54D8
		private int <pointerId>k__BackingField; // 0xE4
		[CompilerGenerated] // 0x003D54D8-0x003D5514
		[DebuggerBrowsable] // 0x003D54D8-0x003D5514
		private Vector2 <position>k__BackingField; // 0xE8
		[CompilerGenerated] // 0x003D5514-0x003D5550
		[DebuggerBrowsable] // 0x003D5514-0x003D5550
		private Vector2 <delta>k__BackingField; // 0xF0
		[CompilerGenerated] // 0x003D5550-0x003D558C
		[DebuggerBrowsable] // 0x003D5550-0x003D558C
		private Vector2 <pressPosition>k__BackingField; // 0xF8
		[CompilerGenerated] // 0x003D558C-0x003D55C8
		[DebuggerBrowsable] // 0x003D558C-0x003D55C8
		private Vector3 <worldPosition>k__BackingField; // 0x100
		[CompilerGenerated] // 0x003D55C8-0x003D5604
		[DebuggerBrowsable] // 0x003D55C8-0x003D5604
		private Vector3 <worldNormal>k__BackingField; // 0x10C
		[CompilerGenerated] // 0x003D5604-0x003D5640
		[DebuggerBrowsable] // 0x003D5604-0x003D5640
		private float <clickTime>k__BackingField; // 0x118
		[CompilerGenerated] // 0x003D5640-0x003D567C
		[DebuggerBrowsable] // 0x003D5640-0x003D567C
		private int <clickCount>k__BackingField; // 0x11C
		[CompilerGenerated] // 0x003D567C-0x003D56B8
		[DebuggerBrowsable] // 0x003D567C-0x003D56B8
		private Vector2 <scrollDelta>k__BackingField; // 0x120
		[CompilerGenerated] // 0x003D56B8-0x003D56F4
		[DebuggerBrowsable] // 0x003D56B8-0x003D56F4
		private bool <useDragThreshold>k__BackingField; // 0x128
		[CompilerGenerated] // 0x003D56F4-0x003D5730
		[DebuggerBrowsable] // 0x003D56F4-0x003D5730
		private bool <dragging>k__BackingField; // 0x129
		[CompilerGenerated] // 0x003D5730-0x003D576C
		[DebuggerBrowsable] // 0x003D5730-0x003D576C
		private InputButton <button>k__BackingField; // 0x12C
	
		// Properties
		public GameObject pointerEnter { [CompilerGenerated] /* 0x003D75AC-0x003D75BC */ get; [CompilerGenerated] /* 0x003D75BC-0x003D75CC */ set; } // 0x0068E8AC-0x0068E8B4 0x0068E91C-0x0068E924
		public GameObject lastPress { [CompilerGenerated] /* 0x003D75CC-0x003D75DC */ get; [CompilerGenerated] /* 0x003D75DC-0x003D75EC */ private set; } // 0x006949B0-0x006949B8 0x006949B8-0x006949C0
		public GameObject rawPointerPress { [CompilerGenerated] /* 0x003D75EC-0x003D75FC */ get; [CompilerGenerated] /* 0x003D75FC-0x003D760C */ set; } // 0x006949C0-0x006949C8 0x006949C8-0x006949D0
		public GameObject pointerDrag { [CompilerGenerated] /* 0x003D760C-0x003D761C */ get; [CompilerGenerated] /* 0x003D761C-0x003D762C */ set; } // 0x006949D0-0x006949D8 0x006949D8-0x006949E0
		public RaycastResult pointerCurrentRaycast { [CompilerGenerated] /* 0x003D762C-0x003D763C */ get; [CompilerGenerated] /* 0x003D763C-0x003D764C */ set; } // 0x006949E0-0x00694A00 0x00694A00-0x00694A1C
		public RaycastResult pointerPressRaycast { [CompilerGenerated] /* 0x003D764C-0x003D765C */ get; [CompilerGenerated] /* 0x003D765C-0x003D766C */ set; } // 0x00694A1C-0x00694A3C 0x00694A3C-0x00694A58
		public bool eligibleForClick { [CompilerGenerated] /* 0x003D766C-0x003D767C */ get; [CompilerGenerated] /* 0x003D767C-0x003D768C */ set; } // 0x00694A58-0x00694A60 0x00694948-0x00694954
		public int pointerId { [CompilerGenerated] /* 0x003D768C-0x003D769C */ get; [CompilerGenerated] /* 0x003D769C-0x003D76AC */ set; } // 0x00694A60-0x00694A68 0x00694954-0x0069495C
		public Vector2 position { [CompilerGenerated] /* 0x003D76AC-0x003D76BC */ get; [CompilerGenerated] /* 0x003D76BC-0x003D76CC */ set; } // 0x006940F4-0x006940FC 0x0069495C-0x00694964
		public Vector2 delta { [CompilerGenerated] /* 0x003D76CC-0x003D76DC */ get; [CompilerGenerated] /* 0x003D76DC-0x003D76EC */ set; } // 0x00694A68-0x00694A70 0x00694964-0x0069496C
		public Vector2 pressPosition { [CompilerGenerated] /* 0x003D76EC-0x003D76FC */ get; [CompilerGenerated] /* 0x003D76FC-0x003D770C */ set; } // 0x00694A70-0x00694A78 0x0069496C-0x00694974
		[Obsolete] // 0x003D7FB4-0x003D7FEC
		public Vector3 worldPosition { [CompilerGenerated] /* 0x003D770C-0x003D771C */ get; [CompilerGenerated] /* 0x003D771C-0x003D772C */ set; } // 0x00694A78-0x00694A88 0x00694A88-0x00694A98
		[Obsolete] // 0x003D7FEC-0x003D8024
		public Vector3 worldNormal { [CompilerGenerated] /* 0x003D772C-0x003D773C */ get; [CompilerGenerated] /* 0x003D773C-0x003D774C */ set; } // 0x00694A98-0x00694AA8 0x00694AA8-0x00694AB8
		public float clickTime { [CompilerGenerated] /* 0x003D774C-0x003D775C */ get; [CompilerGenerated] /* 0x003D775C-0x003D776C */ set; } // 0x00694AB8-0x00694AC0 0x00694974-0x0069497C
		public int clickCount { [CompilerGenerated] /* 0x003D776C-0x003D777C */ get; [CompilerGenerated] /* 0x003D777C-0x003D778C */ set; } // 0x00694AC0-0x00694AC8 0x0069497C-0x00694984
		public Vector2 scrollDelta { [CompilerGenerated] /* 0x003D778C-0x003D779C */ get; [CompilerGenerated] /* 0x003D779C-0x003D77AC */ set; } // 0x00694AC8-0x00694AD4 0x00694984-0x00694990
		public bool useDragThreshold { [CompilerGenerated] /* 0x003D77AC-0x003D77BC */ get; [CompilerGenerated] /* 0x003D77BC-0x003D77CC */ set; } // 0x00694AD4-0x00694ADC 0x00694990-0x0069499C
		public bool dragging { [CompilerGenerated] /* 0x003D77CC-0x003D77DC */ get; [CompilerGenerated] /* 0x003D77DC-0x003D77EC */ set; } // 0x00694ADC-0x00694AE4 0x0069499C-0x006949A8
		public InputButton button { [CompilerGenerated] /* 0x003D77EC-0x003D77FC */ get; [CompilerGenerated] /* 0x003D77FC-0x003D780C */ set; } // 0x00694AE4-0x00694AEC 0x006949A8-0x006949B0
		public Camera enterEventCamera { get; } // 0x00694B58-0x00694C00 
		public Camera pressEventCamera { get; } // 0x00694C00-0x00694CA8 
		public GameObject pointerPress { get; set; } // 0x00694CA8-0x00694CB0 0x00694CB0-0x00694D3C
	
		// Nested types
		public enum InputButton // TypeDefIndex: 2597
		{
			Left = 0,
			Right = 1,
			Middle = 2
		}
	
		public enum FramePressState // TypeDefIndex: 2598
		{
			Pressed = 0,
			Released = 1,
			PressedAndReleased = 2,
			NotChanged = 3
		}
	
		// Constructors
		public PointerEventData(EventSystem eventSystem); // 0x00694854-0x00694948
	
		// Methods
		public bool IsPointerMoving(); // 0x00694AEC-0x00694B20
		public bool IsScrolling(); // 0x00694B20-0x00694B58
		public override string ToString(); // 0x00694D3C-0x00695A58
	}

	public class BaseInput : UIBehaviour // TypeDefIndex: 2599
	{
		// Properties
		public virtual string compositionString { get; } // 0x0068D8E4-0x0068D8EC 
		public virtual IMECompositionMode imeCompositionMode { get; set; } // 0x0068D8EC-0x0068D8F4 0x0068D8F4-0x0068D900
		public virtual Vector2 compositionCursorPos { get; set; } // 0x0068D900-0x0068D908 0x0068D908-0x0068D910
		public virtual bool mousePresent { get; } // 0x0068D910-0x0068D918 
		public virtual Vector2 mousePosition { get; } // 0x0068D93C-0x0068D9CC 
		public virtual Vector2 mouseScrollDelta { get; } // 0x0068D9CC-0x0068D9D4 
		public virtual bool touchSupported { get; } // 0x0068D9D4-0x0068D9DC 
		public virtual int touchCount { get; } // 0x0068D9DC-0x0068D9E4 
	
		// Constructors
		public BaseInput(); // 0x0068D8D4-0x0068D8DC
	
		// Methods
		public virtual bool GetMouseButtonDown(int button); // 0x0068D918-0x0068D924
		public virtual bool GetMouseButtonUp(int button); // 0x0068D924-0x0068D930
		public virtual bool GetMouseButton(int button); // 0x0068D930-0x0068D93C
		public virtual Touch GetTouch(int index); // 0x0068D9E4-0x0068DA4C
		public virtual float GetAxisRaw(string axisName); // 0x0068DA4C-0x0068DA58
		public virtual bool GetButtonDown(string buttonName); // 0x0068DA58-0x0068DA64
	}

	[RequireComponent] // 0x003D4038-0x003D409C
	public abstract class BaseInputModule : UIBehaviour // TypeDefIndex: 2600
	{
		// Fields
		[NonSerialized]
		protected List<RaycastResult> m_RaycastResultCache; // 0x18
		private AxisEventData m_AxisEventData; // 0x20
		private EventSystem m_EventSystem; // 0x28
		private BaseEventData m_BaseEventData; // 0x30
		protected BaseInput m_InputOverride; // 0x38
		private BaseInput m_DefaultInput; // 0x40
	
		// Properties
		public BaseInput input { get; } // 0x0068DAD4-0x0068DCFC 
		public BaseInput inputOverride { get; set; } // 0x0068DCFC-0x0068DD04 0x0068DD04-0x0068DD0C
		protected EventSystem eventSystem { get; } // 0x0068DD0C-0x0068DD14 
	
		// Constructors
		protected BaseInputModule(); // 0x0068DA64-0x0068DAD4
	
		// Methods
		protected override void OnEnable(); // 0x0068DD14-0x0068DD7C
		protected override void OnDisable(); // 0x0068DEE4-0x0068DF10
		public abstract void Process();
		protected static RaycastResult FindFirstRaycast(List<RaycastResult> candidates); // 0x0068DF14-0x0068E070
		protected static MoveDirection DetermineMoveDirection(float x, float y); // 0x0068E070-0x0068E07C
		protected static MoveDirection DetermineMoveDirection(float x, float y, float deadZone); // 0x0068E07C-0x0068E160
		protected static GameObject FindCommonRoot(GameObject g1, GameObject g2); // 0x0068E160-0x0068E32C
		protected void HandlePointerExitAndEnter(PointerEventData currentPointerData, GameObject newEnterTarget); // 0x0068E32C-0x0068E8AC
		protected virtual AxisEventData GetAxisEventData(float x, float y, float moveDeadZone); // 0x0068E98C-0x0068EA9C
		protected virtual BaseEventData GetBaseEventData(); // 0x0068EA9C-0x0068EB34
		public virtual bool IsPointerOverGameObject(int pointerId); // 0x0068EB34-0x0068EB3C
		public virtual bool ShouldActivateModule(); // 0x0068EB3C-0x0068EB94
		public virtual void DeactivateModule(); // 0x0068EB94-0x0068EB98
		public virtual void ActivateModule(); // 0x0068EB98-0x0068EB9C
		public virtual void UpdateModule(); // 0x0068EB9C-0x0068EBA0
		public virtual bool IsModuleSupported(); // 0x0068EBA0-0x0068EBA8
	}

	public abstract class PointerInputModule : BaseInputModule // TypeDefIndex: 2601
	{
		// Fields
		public const int kMouseLeftId = -1; // Metadata: 0x0021B154
		public const int kMouseRightId = -2; // Metadata: 0x0021B158
		public const int kMouseMiddleId = -3; // Metadata: 0x0021B15C
		public const int kFakeTouchesId = -4; // Metadata: 0x0021B160
		protected Dictionary<int, PointerEventData> m_PointerData; // 0x48
		private readonly MouseState m_MouseState; // 0x50
	
		// Nested types
		protected class ButtonState // TypeDefIndex: 2602
		{
			// Fields
			private PointerEventData.InputButton m_Button; // 0x10
			private MouseButtonEventData m_EventData; // 0x18
	
			// Properties
			public MouseButtonEventData eventData { get; set; } // 0x00696F54-0x00696F5C 0x00696F5C-0x00696F64
			public PointerEventData.InputButton button { get; set; } // 0x00696F64-0x00696F6C 0x00696F6C-0x00696F74
	
			// Constructors
			public ButtonState(); // 0x00696F48-0x00696F54
		}
	
		protected class MouseState // TypeDefIndex: 2603
		{
			// Fields
			private List<ButtonState> m_TrackedButtons; // 0x10
	
			// Constructors
			public MouseState(); // 0x00695AE0-0x00695B50
	
			// Methods
			public bool AnyPressesThisFrame(); // 0x00696FA4-0x00697088
			public bool AnyReleasesThisFrame(); // 0x00697088-0x0069716C
			public ButtonState GetButtonState(PointerEventData.InputButton button); // 0x0069716C-0x00697338
			public void SetButtonState(PointerEventData.InputButton button, PointerEventData.FramePressState stateForMouseButton, PointerEventData data); // 0x0069657C-0x006965DC
		}
	
		public class MouseButtonEventData // TypeDefIndex: 2604
		{
			// Fields
			public PointerEventData.FramePressState buttonState; // 0x10
			public PointerEventData buttonData; // 0x18
	
			// Constructors
			public MouseButtonEventData(); // 0x00696F74-0x00696F7C
	
			// Methods
			public bool PressedThisFrame(); // 0x00696F7C-0x00696F90
			public bool ReleasedThisFrame(); // 0x00696F90-0x00696FA4
		}
	
		// Constructors
		protected PointerInputModule(); // 0x00695A58-0x00695AE0
	
		// Methods
		protected bool GetPointerData(int id, out PointerEventData data, bool create); // 0x00695B50-0x00695C4C
		protected void RemovePointerData(PointerEventData data); // 0x00695C4C-0x00695CCC
		protected PointerEventData GetTouchPointerEventData(Touch input, out bool pressed, out bool released); // 0x00695CCC-0x00695FE0
		protected void CopyFromTo(PointerEventData from, PointerEventData to); // 0x00695FE0-0x006960B4
		protected PointerEventData.FramePressState StateForMouseButton(int buttonId); // 0x006960B4-0x00696150
		protected virtual MouseState GetMousePointerEventData(); // 0x00696150-0x00696164
		protected virtual MouseState GetMousePointerEventData(int id); // 0x00696164-0x0069657C
		protected PointerEventData GetLastPointerEventData(int id); // 0x006965DC-0x00696608
		private static bool ShouldStartDrag(Vector2 pressPos, Vector2 currentPos, float threshold, bool useDragThreshold); // 0x00696608-0x006966D8
		protected virtual void ProcessMove(PointerEventData pointerEvent); // 0x006966D8-0x0069671C
		protected virtual void ProcessDrag(PointerEventData pointerEvent); // 0x0069671C-0x0069695C
		public override bool IsPointerOverGameObject(int pointerId); // 0x0069695C-0x00696A08
		protected void ClearSelection(); // 0x00696A08-0x00696B9C
		public override string ToString(); // 0x00696B9C-0x00696E4C
		protected void DeselectIfSelectionChanged(GameObject currentOverGo, BaseEventData pointerEvent); // 0x00696E4C-0x00696F48
	}

	[AddComponentMenu] // 0x003D409C-0x003D40D4
	public class StandaloneInputModule : PointerInputModule // TypeDefIndex: 2605
	{
		// Fields
		private float m_PrevActionTime; // 0x58
		private Vector2 m_LastMoveVector; // 0x5C
		private int m_ConsecutiveMoveCount; // 0x64
		private Vector2 m_LastMousePosition; // 0x68
		private Vector2 m_MousePosition; // 0x70
		private GameObject m_CurrentFocusedGameObject; // 0x78
		private PointerEventData m_InputPointerEvent; // 0x80
		[SerializeField] // 0x003D576C-0x003D577C
		private string m_HorizontalAxis; // 0x88
		[SerializeField] // 0x003D577C-0x003D578C
		private string m_VerticalAxis; // 0x90
		[SerializeField] // 0x003D578C-0x003D579C
		private string m_SubmitButton; // 0x98
		[SerializeField] // 0x003D579C-0x003D57AC
		private string m_CancelButton; // 0xA0
		[SerializeField] // 0x003D57AC-0x003D57BC
		private float m_InputActionsPerSecond; // 0xA8
		[SerializeField] // 0x003D57BC-0x003D57CC
		private float m_RepeatDelay; // 0xAC
		[FormerlySerializedAs] // 0x003D57CC-0x003D5818
		[SerializeField] // 0x003D57CC-0x003D5818
		private bool m_ForceModuleActive; // 0xB0
	
		// Properties
		[Obsolete] // 0x003D8024-0x003D8060
		public InputMode inputMode { get; } // 0x006975D8-0x006975E0 
		[Obsolete] // 0x003D8060-0x003D8098
		public bool allowActivationOnMobileDevice { get; set; } // 0x006975E0-0x006975E8 0x006975E8-0x006975F4
		public bool forceModuleActive { get; set; } // 0x006975F4-0x006975FC 0x006975FC-0x00697608
		public float inputActionsPerSecond { get; set; } // 0x00697608-0x00697610 0x00697610-0x00697618
		public float repeatDelay { get; set; } // 0x00697618-0x00697620 0x00697620-0x00697628
		public string horizontalAxis { get; set; } // 0x00697628-0x00697630 0x00697630-0x00697638
		public string verticalAxis { get; set; } // 0x00697638-0x00697640 0x00697640-0x00697648
		public string submitButton { get; set; } // 0x00697648-0x00697650 0x00697650-0x00697658
		public string cancelButton { get; set; } // 0x00697658-0x00697660 0x00697660-0x00697668
	
		// Nested types
		[Obsolete] // 0x003D40D4-0x003D4110
		public enum InputMode // TypeDefIndex: 2606
		{
			Mouse = 0,
			Buttons = 1
		}
	
		// Constructors
		protected StandaloneInputModule(); // 0x00697548-0x006975D8
	
		// Methods
		private bool ShouldIgnoreEventsOnNoFocus(); // 0x00697668-0x0069768C
		public override void UpdateModule(); // 0x0069768C-0x006977F0
		public override bool IsModuleSupported(); // 0x006977F0-0x00697874
		public override bool ShouldActivateModule(); // 0x00697874-0x00697AE0
		public override void ActivateModule(); // 0x00697AE0-0x00697C4C
		public override void DeactivateModule(); // 0x00697C4C-0x00697C50
		public override void Process(); // 0x00697C50-0x00697D34
		private bool ProcessTouchEvents(); // 0x006982F8-0x00698478
		protected void ProcessTouchPress(PointerEventData pointerEvent, bool pressed, bool released); // 0x00698480-0x006989A8
		protected bool SendSubmitEventToSelectedObject(); // 0x00698114-0x006982F8
		private Vector2 GetRawMoveVector(); // 0x006989A8-0x00698B28
		protected bool SendMoveEventToSelectedObject(); // 0x00697E50-0x00698114
		protected void ProcessMouseEvent(); // 0x00698478-0x00698480
		[Obsolete] // 0x003D780C-0x003D7844
		protected virtual bool ForceAutoSelect(); // 0x00698DE8-0x00698DF0
		protected void ProcessMouseEvent(int id); // 0x00698B28-0x00698DE8
		protected bool SendUpdateEventToSelectedObject(); // 0x00697D34-0x00697E50
		protected void ProcessMousePress(MouseButtonEventData data); // 0x00698DF0-0x00699300
		protected GameObject GetCurrentFocusedGameObject(); // 0x00699300-0x00699308
	}

	[AddComponentMenu] // 0x003D4110-0x003D4170
	[Obsolete] // 0x003D4110-0x003D4170
	public class TouchInputModule : PointerInputModule // TypeDefIndex: 2607
	{
		// Fields
		private Vector2 m_LastMousePosition; // 0x58
		private Vector2 m_MousePosition; // 0x60
		private PointerEventData m_InputPointerEvent; // 0x68
		[FormerlySerializedAs] // 0x003D5818-0x003D5864
		[SerializeField] // 0x003D5818-0x003D5864
		private bool m_ForceModuleActive; // 0x70
	
		// Properties
		[Obsolete] // 0x003D8098-0x003D80D0
		public bool allowActivationOnStandalone { get; set; } // 0x0069930C-0x00699314 0x00699314-0x00699320
		public bool forceModuleActive { get; set; } // 0x00699320-0x00699328 0x00699328-0x00699334
	
		// Constructors
		protected TouchInputModule(); // 0x00699308-0x0069930C
	
		// Methods
		public override void UpdateModule(); // 0x00699334-0x00699480
		public override bool IsModuleSupported(); // 0x00699480-0x006994C8
		public override bool ShouldActivateModule(); // 0x006994C8-0x00699608
		private bool UseFakeInput(); // 0x00699608-0x0069964C
		public override void Process(); // 0x0069964C-0x00699684
		private void FakeTouches(); // 0x00699684-0x0069980C
		private void ProcessTouchEvents(); // 0x0069980C-0x0069996C
		protected void ProcessTouchPress(PointerEventData pointerEvent, bool pressed, bool released); // 0x0069996C-0x00699E94
		public override void DeactivateModule(); // 0x00699E94-0x00699E98
		public override string ToString(); // 0x00699E98-0x0069A0D4
	}

	public abstract class BaseRaycaster : UIBehaviour // TypeDefIndex: 2608
	{
		// Properties
		public abstract Camera eventCamera { get; }
		[Obsolete] // 0x003D80D0-0x003D810C
		public virtual int priority { get; } // 0x0068EBB0-0x0068EBB8 
		public virtual int sortOrderPriority { get; } // 0x0068EBB8-0x0068EBC0 
		public virtual int renderOrderPriority { get; } // 0x0068EBC0-0x0068EBC8 
	
		// Constructors
		protected BaseRaycaster(); // 0x0068EBA8-0x0068EBB0
	
		// Methods
		public abstract void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList);
		public override string ToString(); // 0x0068EBC8-0x0068EF38
		protected override void OnEnable(); // 0x0068EF38-0x0068EF9C
		protected override void OnDisable(); // 0x0068F08C-0x0068F0F0
	}

	[AddComponentMenu] // 0x003D4170-0x003D41F8
	[RequireComponent] // 0x003D4170-0x003D41F8
	public class Physics2DRaycaster : PhysicsRaycaster // TypeDefIndex: 2609
	{
		// Fields
		private RaycastHit2D[] m_Hits; // 0x38
	
		// Constructors
		protected Physics2DRaycaster(); // 0x00693718-0x00693750
	
		// Methods
		public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList); // 0x00693788-0x00693E20
	}

	[AddComponentMenu] // 0x003D41F8-0x003D4280
	[RequireComponent] // 0x003D41F8-0x003D4280
	public class PhysicsRaycaster : BaseRaycaster // TypeDefIndex: 2610
	{
		// Fields
		protected const int kNoEventMaskSet = -1; // Metadata: 0x0021B16C
		protected Camera m_EventCamera; // 0x18
		[SerializeField] // 0x003D5864-0x003D5874
		protected LayerMask m_EventMask; // 0x20
		[SerializeField] // 0x003D5874-0x003D5884
		protected int m_MaxRayIntersections; // 0x24
		protected int m_LastMaxRayIntersections; // 0x28
		private RaycastHit[] m_Hits; // 0x30
		[CompilerGenerated] // 0x003D5884-0x003D5894
		private static Comparison<RaycastHit> <>f__am$cache0; // 0x00
	
		// Properties
		public override Camera eventCamera { get; } // 0x006940FC-0x006941A4 
		public virtual int depth { get; } // 0x006941A4-0x0069426C 
		public int finalEventMask { get; } // 0x00694010-0x006940F4 
		public LayerMask eventMask { get; set; } // 0x0069426C-0x00694274 0x00694274-0x0069427C
		public int maxRayIntersections { get; set; } // 0x00694008-0x00694010 0x0069427C-0x00694284
	
		// Constructors
		protected PhysicsRaycaster(); // 0x00693750-0x00693788
	
		// Methods
		protected void ComputeRayAndDistance(PointerEventData eventData, out Ray ray, out float distanceToClipPlane); // 0x00693E20-0x00694008
		public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList); // 0x00694284-0x00694814
		[CompilerGenerated] // 0x003D7844-0x003D7854
		private static int <Raycast>m__0(RaycastHit r1, RaycastHit r2); // 0x00694814-0x00694854
	}
}

namespace UnityEngine.UI.CoroutineTween
{
	internal interface ITweenValue // TypeDefIndex: 2611
	{
		// Properties
		bool ignoreTimeScale { get; }
		float duration { get; }
	
		// Methods
		void TweenValue(float floatPercentage);
		bool ValidTarget();
	}

	internal struct ColorTween : ITweenValue // TypeDefIndex: 2612
	{
		// Fields
		private ColorTweenCallback m_Target; // 0x00
		private Color m_StartColor; // 0x08
		private Color m_TargetColor; // 0x18
		private ColorTweenMode m_TweenMode; // 0x28
		private float m_Duration; // 0x2C
		private bool m_IgnoreTimeScale; // 0x30
	
		// Properties
		public Color startColor { get; set; } // 0x0069E460-0x0069E478 0x0069E478-0x0069E484
		public Color targetColor { get; set; } // 0x0069E484-0x0069E49C 0x0069E49C-0x0069E4A8
		public ColorTweenMode tweenMode { get; set; } // 0x0069E4A8-0x0069E4B8 0x0069E4B8-0x0069E4C8
		public float duration { get; set; } // 0x0069E4C8-0x0069E4D8 0x0069E4D8-0x0069E4E8
		public bool ignoreTimeScale { get; set; } // 0x0069E4E8-0x0069E4FC 0x0069E4FC-0x0069E614
	
		// Nested types
		public enum ColorTweenMode // TypeDefIndex: 2613
		{
			All = 0,
			RGB = 1,
			Alpha = 2
		}
	
		public class ColorTweenCallback : UnityEvent<Color> // TypeDefIndex: 2614
		{
			// Constructors
			public ColorTweenCallback(); // 0x0069E6AC-0x0069E6FC
		}
	
		// Methods
		public void TweenValue(float floatPercentage); // 0x0069E614-0x0069E6AC
		public void AddOnChangedCallback(UnityAction<Color> callback); // 0x0069E6FC-0x0069E704
		public bool GetIgnoreTimescale(); // 0x0069E704-0x0069E70C
		public float GetDuration(); // 0x0069E70C-0x0069E714
		public bool ValidTarget(); // 0x0069E714-0x0069E770
	}

	internal struct FloatTween : ITweenValue // TypeDefIndex: 2615
	{
		// Fields
		private FloatTweenCallback m_Target; // 0x00
		private float m_StartValue; // 0x08
		private float m_TargetValue; // 0x0C
		private float m_Duration; // 0x10
		private bool m_IgnoreTimeScale; // 0x14
	
		// Properties
		public float startValue { get; set; } // 0x0069E770-0x0069E778 0x0069E778-0x0069E780
		public float targetValue { get; set; } // 0x0069E780-0x0069E788 0x0069E788-0x0069E798
		public float duration { get; set; } // 0x0069E798-0x0069E7A0 0x0069E7A0-0x0069E7B0
		public bool ignoreTimeScale { get; set; } // 0x0069E7B0-0x0069E7B8 0x0069E7B8-0x0069E8A4
	
		// Nested types
		public class FloatTweenCallback : UnityEvent<float> // TypeDefIndex: 2616
		{
			// Constructors
			public FloatTweenCallback(); // 0x0069E93C-0x0069E98C
		}
	
		// Methods
		public void TweenValue(float floatPercentage); // 0x0069E8A4-0x0069E93C
		public void AddOnChangedCallback(UnityAction<float> callback); // 0x0069E98C-0x0069E994
		public bool GetIgnoreTimescale(); // 0x0069E994-0x0069E99C
		public float GetDuration(); // 0x0069E99C-0x0069E9A4
		public bool ValidTarget(); // 0x0069E9A4-0x0069E9B4
	}

	internal class TweenRunner<T> // TypeDefIndex: 2617
		where T : struct, ITweenValue
	{
		// Fields
		protected MonoBehaviour m_CoroutineContainer;
		protected IEnumerator m_Tween;
	
		// Nested types
		[CompilerGenerated] // 0x003D4FC4-0x003D4FD4
		private sealed class <Start>c__Iterator0 : IEnumerator<object> // TypeDefIndex: 2618
		{
			// Fields
			internal T tweenInfo;
			internal float <elapsedTime>__0;
			internal float <percentage>__1;
			internal object $current;
			internal bool $disposing;
			internal int $PC;
	
			// Properties
			object IEnumerator<object>.Current { [DebuggerHidden] /* 0x003D7D4C-0x003D7D5C */ get; }
			object IEnumerator.Current { [DebuggerHidden] /* 0x003D7D5C-0x003D7D6C */ get; }
	
			// Constructors
			[DebuggerHidden] // 0x003D7D3C-0x003D7D4C
			public <Start>c__Iterator0();
	
			// Methods
			public bool MoveNext();
			[DebuggerHidden] // 0x003D7D6C-0x003D7D7C
			public void Dispose();
			[DebuggerHidden] // 0x003D7D7C-0x003D7D8C
			public void Reset();
		}
	
		// Constructors
		public TweenRunner();
	
		// Methods
		[DebuggerHidden] // 0x003D7854-0x003D7864
		private static IEnumerator Start(T tweenInfo);
		public void Init(MonoBehaviour coroutineContainer);
		public void StartTween(T info);
		public void StopTween();
	}
}

namespace UnityEngine.UI
{
	[Serializable]
	public class AnimationTriggers // TypeDefIndex: 2619
	{
		// Fields
		private const string kDefaultNormalAnimName = "Normal"; // Metadata: 0x0021B17C
		private const string kDefaultSelectedAnimName = "Highlighted"; // Metadata: 0x0021B186
		private const string kDefaultPressedAnimName = "Pressed"; // Metadata: 0x0021B195
		private const string kDefaultDisabledAnimName = "Disabled"; // Metadata: 0x0021B1A0
		[FormerlySerializedAs] // 0x003D5894-0x003D58E0
		[SerializeField] // 0x003D5894-0x003D58E0
		private string m_NormalTrigger; // 0x10
		[FormerlySerializedAs] // 0x003D58E0-0x003D5950
		[FormerlySerializedAs] // 0x003D58E0-0x003D5950
		[SerializeField] // 0x003D58E0-0x003D5950
		private string m_HighlightedTrigger; // 0x18
		[FormerlySerializedAs] // 0x003D5950-0x003D599C
		[SerializeField] // 0x003D5950-0x003D599C
		private string m_PressedTrigger; // 0x20
		[FormerlySerializedAs] // 0x003D599C-0x003D59E8
		[SerializeField] // 0x003D599C-0x003D59E8
		private string m_DisabledTrigger; // 0x28
	
		// Properties
		public string normalTrigger { get; set; } // 0x0069A1F4-0x0069A1FC 0x0069A1FC-0x0069A204
		public string highlightedTrigger { get; set; } // 0x0069A204-0x0069A20C 0x0069A20C-0x0069A214
		public string pressedTrigger { get; set; } // 0x0069A214-0x0069A21C 0x0069A21C-0x0069A224
		public string disabledTrigger { get; set; } // 0x0069A224-0x0069A22C 0x0069A22C-0x0069A234
	
		// Constructors
		public AnimationTriggers(); // 0x0069A16C-0x0069A1F4
	}

	[AddComponentMenu] // 0x003D4280-0x003D42BC
	public class Button : Selectable, IPointerClickHandler, ISubmitHandler // TypeDefIndex: 2620
	{
		// Fields
		[FormerlySerializedAs] // 0x003D59E8-0x003D5A34
		[SerializeField] // 0x003D59E8-0x003D5A34
		private ButtonClickedEvent m_OnClick; // 0xD8
	
		// Properties
		public ButtonClickedEvent onClick { get; set; } // 0x0069AE7C-0x0069AE84 0x0069AE84-0x0069AE8C
	
		// Nested types
		[Serializable]
		public class ButtonClickedEvent : UnityEvent // TypeDefIndex: 2621
		{
			// Constructors
			public ButtonClickedEvent(); // 0x0069AE74-0x0069AE7C
		}
	
		[CompilerGenerated] // 0x003D4FD4-0x003D4FE4
		private sealed class <OnFinishSubmit>c__Iterator0 : IEnumerator<object> // TypeDefIndex: 2622
		{
			// Fields
			internal float <fadeTime>__0; // 0x10
			internal float <elapsedTime>__0; // 0x14
			internal Button $this; // 0x18
			internal object $current; // 0x20
			internal bool $disposing; // 0x28
			internal int $PC; // 0x2C
	
			// Properties
			object IEnumerator<object>.Current { [DebuggerHidden] /* 0x003D7D9C-0x003D7DAC */ get; } // 0x0069B1BC-0x0069B1C4 
			object IEnumerator.Current { [DebuggerHidden] /* 0x003D7DAC-0x003D7DBC */ get; } // 0x0069B1C4-0x0069B1CC 
	
			// Constructors
			[DebuggerHidden] // 0x003D7D8C-0x003D7D9C
			public <OnFinishSubmit>c__Iterator0(); // 0x0069B070-0x0069B078
	
			// Methods
			public bool MoveNext(); // 0x0069B078-0x0069B1BC
			[DebuggerHidden] // 0x003D7DBC-0x003D7DCC
			public void Dispose(); // 0x0069B1CC-0x0069B1E0
			[DebuggerHidden] // 0x003D7DCC-0x003D7DDC
			public void Reset(); // 0x0069B1E0-0x0069B248
		}
	
		// Constructors
		protected Button(); // 0x0069ADEC-0x0069AE74
	
		// Methods
		private void Press(); // 0x0069AE8C-0x0069AF34
		public virtual void OnPointerClick(PointerEventData eventData); // 0x0069AF34-0x0069AF78
		public virtual void OnSubmit(BaseEventData eventData); // 0x0069AF78-0x0069B000
		[DebuggerHidden] // 0x003D7864-0x003D7874
		private IEnumerator OnFinishSubmit(); // 0x0069B000-0x0069B070
	}

	public enum CanvasUpdate // TypeDefIndex: 2623
	{
		Prelayout = 0,
		Layout = 1,
		PostLayout = 2,
		PreRender = 3,
		LatePreRender = 4,
		MaxUpdateValue = 5
	}

	public interface ICanvasElement // TypeDefIndex: 2624
	{
		// Properties
		Transform transform { get; }
	
		// Methods
		void Rebuild(CanvasUpdate executing);
		void LayoutComplete();
		void GraphicUpdateComplete();
		bool IsDestroyed();
	}

	public class CanvasUpdateRegistry // TypeDefIndex: 2625
	{
		// Fields
		private static CanvasUpdateRegistry s_Instance; // 0x00
		private bool m_PerformingLayoutUpdate; // 0x10
		private bool m_PerformingGraphicUpdate; // 0x11
		private readonly IndexedSet<ICanvasElement> m_LayoutRebuildQueue; // 0x18
		private readonly IndexedSet<ICanvasElement> m_GraphicRebuildQueue; // 0x20
		private static readonly Comparison<ICanvasElement> s_SortLayoutFunction; // 0x08
		[CompilerGenerated] // 0x003D5A34-0x003D5A44
		private static Comparison<ICanvasElement> <>f__mg$cache0; // 0x10
	
		// Properties
		public static CanvasUpdateRegistry instance { get; } // 0x0069BC10-0x0069BCD0 
	
		// Constructors
		protected CanvasUpdateRegistry(); // 0x0069BB48-0x0069BC10
		static CanvasUpdateRegistry(); // 0x0069D4D4-0x0069D574
	
		// Methods
		private bool ObjectValidForUpdate(ICanvasElement element); // 0x0069BCD0-0x0069BDB0
		private void CleanInvalidItems(); // 0x0069BDB0-0x0069C108
		private void PerformUpdate(); // 0x0069C108-0x0069C904
		private static int ParentCount(Transform child); // 0x0069CAA4-0x0069CB90
		private static int SortLayoutList(ICanvasElement x, ICanvasElement y); // 0x0069CB90-0x0069CD08
		public static void RegisterCanvasElementForLayoutRebuild(ICanvasElement element); // 0x0069CD08-0x0069CD80
		public static bool TryRegisterCanvasElementForLayoutRebuild(ICanvasElement element); // 0x0069CE30-0x0069CEA8
		private bool InternalRegisterCanvasElementForLayoutRebuild(ICanvasElement element); // 0x0069CD80-0x0069CE30
		public static void RegisterCanvasElementForGraphicRebuild(ICanvasElement element); // 0x0069CEA8-0x0069CF20
		public static bool TryRegisterCanvasElementForGraphicRebuild(ICanvasElement element); // 0x0069CFF8-0x0069D070
		private bool InternalRegisterCanvasElementForGraphicRebuild(ICanvasElement element); // 0x0069CF20-0x0069CFF8
		public static void UnRegisterCanvasElementForRebuild(ICanvasElement element); // 0x0069D070-0x0069D104
		private void InternalUnRegisterCanvasElementForLayoutRebuild(ICanvasElement element); // 0x0069D104-0x0069D27C
		private void InternalUnRegisterCanvasElementForGraphicRebuild(ICanvasElement element); // 0x0069D27C-0x0069D3F4
		public static bool IsRebuildingLayout(); // 0x0069D3F4-0x0069D464
		public static bool IsRebuildingGraphics(); // 0x0069D464-0x0069D4D4
	}

	[Serializable]
	public struct ColorBlock : IEquatable<ColorBlock> // TypeDefIndex: 2626
	{
		// Fields
		[FormerlySerializedAs] // 0x003D5A44-0x003D5A90
		[SerializeField] // 0x003D5A44-0x003D5A90
		private Color m_NormalColor; // 0x00
		[FormerlySerializedAs] // 0x003D5A90-0x003D5B00
		[FormerlySerializedAs] // 0x003D5A90-0x003D5B00
		[SerializeField] // 0x003D5A90-0x003D5B00
		private Color m_HighlightedColor; // 0x10
		[FormerlySerializedAs] // 0x003D5B00-0x003D5B4C
		[SerializeField] // 0x003D5B00-0x003D5B4C
		private Color m_PressedColor; // 0x20
		[FormerlySerializedAs] // 0x003D5B4C-0x003D5B98
		[SerializeField] // 0x003D5B4C-0x003D5B98
		private Color m_DisabledColor; // 0x30
		[Range] // 0x003D5B98-0x003D5BD8
		[SerializeField] // 0x003D5B98-0x003D5BD8
		private float m_ColorMultiplier; // 0x40
		[FormerlySerializedAs] // 0x003D5BD8-0x003D5C24
		[SerializeField] // 0x003D5BD8-0x003D5C24
		private float m_FadeDuration; // 0x44
	
		// Properties
		public Color normalColor { get; set; } // 0x0069DB60-0x0069DB6C 0x0069DB6C-0x0069DB84
		public Color highlightedColor { get; set; } // 0x0069DB84-0x0069DB90 0x0069DB90-0x0069DBA8
		public Color pressedColor { get; set; } // 0x0069DBA8-0x0069DBB4 0x0069DBB4-0x0069DBCC
		public Color disabledColor { get; set; } // 0x0069DBCC-0x0069DBD8 0x0069DBD8-0x0069DBEC
		public float colorMultiplier { get; set; } // 0x0069DBEC-0x0069DBF4 0x0069DBF4-0x0069DBFC
		public float fadeDuration { get; set; } // 0x0069DBFC-0x0069DC04 0x0069DC04-0x0069DC0C
		public static ColorBlock defaultColorBlock { get; } // 0x0069DC0C-0x0069DECC 
	
		// Methods
		public override bool Equals(object obj); // 0x0069DECC-0x0069DED4
		public bool Equals(ColorBlock other); // 0x0069DED4-0x0069DF14
		public static bool operator ==(ColorBlock point1, ColorBlock point2); // 0x0069DF14-0x0069DF54
		public static bool operator !=(ColorBlock point1, ColorBlock point2); // 0x0069DF54-0x0069E01C
		public override int GetHashCode(); // 0x0069E01C-0x0069E024
	}

	public static class DefaultControls // TypeDefIndex: 2627
	{
		// Fields
		private const float kWidth = 160f; // Metadata: 0x0021B1C4
		private const float kThickHeight = 30f; // Metadata: 0x0021B1C8
		private const float kThinHeight = 20f; // Metadata: 0x0021B1CC
		private static Vector2 s_ThickElementSize; // 0x00
		private static Vector2 s_ThinElementSize; // 0x08
		private static Vector2 s_ImageElementSize; // 0x10
		private static Color s_DefaultSelectableColor; // 0x18
		private static Color s_PanelColor; // 0x28
		private static Color s_TextColor; // 0x38
	
		// Nested types
		public struct Resources // TypeDefIndex: 2628
		{
			// Fields
			public Sprite standard; // 0x00
			public Sprite background; // 0x08
			public Sprite inputField; // 0x10
			public Sprite knob; // 0x18
			public Sprite checkmark; // 0x20
			public Sprite dropdown; // 0x28
			public Sprite mask; // 0x30
		}
	
		// Constructors
		static DefaultControls(); // 0x006A3CD0-0x006A3EC0
	
		// Methods
		private static GameObject CreateUIElementRoot(string name, Vector2 size); // 0x0069E9B4-0x0069EA68
		private static GameObject CreateUIObject(string name, GameObject parent); // 0x0069EA68-0x0069EB24
		private static void SetDefaultTextValues(Text lbl); // 0x0069EC54-0x0069ED18
		private static void SetDefaultColorTransitionValues(Selectable slider); // 0x0069ED18-0x0069EDB4
		private static void SetParentAndAlign(GameObject child, GameObject parent); // 0x0069EB24-0x0069EC54
		private static void SetLayerRecursively(GameObject go, int layer); // 0x0069EDB4-0x0069EEE4
		public static GameObject CreatePanel(Resources resources); // 0x0069EEE4-0x0069F130
		public static GameObject CreateButton(Resources resources); // 0x0069F130-0x0069F434
		public static GameObject CreateText(Resources resources); // 0x0069F434-0x0069F504
		public static GameObject CreateImage(Resources resources); // 0x0069F504-0x0069F5A0
		public static GameObject CreateRawImage(Resources resources); // 0x0069F5A0-0x0069F63C
		public static GameObject CreateSlider(Resources resources); // 0x0069F63C-0x0069FD5C
		public static GameObject CreateScrollbar(Resources resources); // 0x0069FD5C-0x006A0130
		public static GameObject CreateToggle(Resources resources); // 0x006A0130-0x006A06D8
		public static GameObject CreateInputField(Resources resources); // 0x006A06D8-0x006A0C68
		public static GameObject CreateDropdown(Resources resources); // 0x006A0C68-0x006A309C
		public static GameObject CreateScrollView(Resources resources); // 0x006A33CC-0x006A3CD0
	}

	[AddComponentMenu] // 0x003D42BC-0x003D4348
	[RequireComponent] // 0x003D42BC-0x003D4348
	public class Dropdown : Selectable, IPointerClickHandler, ISubmitHandler, ICancelHandler // TypeDefIndex: 2629
	{
		// Fields
		[SerializeField] // 0x003D5C24-0x003D5C34
		private RectTransform m_Template; // 0xD8
		[SerializeField] // 0x003D5C34-0x003D5C44
		private Text m_CaptionText; // 0xE0
		[SerializeField] // 0x003D5C44-0x003D5C54
		private UnityEngine.UI.Image m_CaptionImage; // 0xE8
		[SerializeField] // 0x003D5C54-0x003D5C8C
		[Space] // 0x003D5C54-0x003D5C8C
		private Text m_ItemText; // 0xF0
		[SerializeField] // 0x003D5C8C-0x003D5C9C
		private UnityEngine.UI.Image m_ItemImage; // 0xF8
		[SerializeField] // 0x003D5C9C-0x003D5CD4
		[Space] // 0x003D5C9C-0x003D5CD4
		private int m_Value; // 0x100
		[SerializeField] // 0x003D5CD4-0x003D5D0C
		[Space] // 0x003D5CD4-0x003D5D0C
		private OptionDataList m_Options; // 0x108
		[SerializeField] // 0x003D5D0C-0x003D5D44
		[Space] // 0x003D5D0C-0x003D5D44
		private DropdownEvent m_OnValueChanged; // 0x110
		private GameObject m_Dropdown; // 0x118
		private GameObject m_Blocker; // 0x120
		private List<DropdownItem> m_Items; // 0x128
		private TweenRunner<FloatTween> m_AlphaTweenRunner; // 0x130
		private bool validTemplate; // 0x138
		private static OptionData s_NoOptionData; // 0x00
	
		// Properties
		public RectTransform template { get; set; } // 0x006A3F94-0x006A3F9C 0x006A309C-0x006A30A4
		public Text captionText { get; set; } // 0x006A3F9C-0x006A3FA4 0x006A30A4-0x006A30AC
		public UnityEngine.UI.Image captionImage { get; set; } // 0x006A3FA4-0x006A3FAC 0x006A3FAC-0x006A3FB4
		public Text itemText { get; set; } // 0x006A3FB4-0x006A3FBC 0x006A30AC-0x006A30B4
		public UnityEngine.UI.Image itemImage { get; set; } // 0x006A3FBC-0x006A3FC4 0x006A3FC4-0x006A3FCC
		public List<OptionData> options { get; set; } // 0x006A30B4-0x006A30E4 0x006A3FCC-0x006A4018
		public DropdownEvent onValueChanged { get; set; } // 0x006A4018-0x006A4020 0x006A4020-0x006A4028
		public int value { get; set; } // 0x006A4028-0x006A4030 0x006A4030-0x006A4180
	
		// Nested types
		protected internal class DropdownItem : MonoBehaviour, IPointerEnterHandler, ICancelHandler // TypeDefIndex: 2630
		{
			// Fields
			[SerializeField] // 0x003D5D44-0x003D5D54
			private Text m_Text; // 0x18
			[SerializeField] // 0x003D5D54-0x003D5D64
			private UnityEngine.UI.Image m_Image; // 0x20
			[SerializeField] // 0x003D5D64-0x003D5D74
			private RectTransform m_RectTransform; // 0x28
			[SerializeField] // 0x003D5D74-0x003D5D84
			private Toggle m_Toggle; // 0x30
	
			// Properties
			public Text text { get; set; } // 0x007BA428-0x007BA430 0x007BA430-0x007BA438
			public UnityEngine.UI.Image image { get; set; } // 0x007BA438-0x007BA440 0x007BA440-0x007BA448
			public RectTransform rectTransform { get; set; } // 0x007BA448-0x007BA450 0x007BA450-0x007BA458
			public Toggle toggle { get; set; } // 0x007BA3C8-0x007BA3D0 0x007BA458-0x007BA460
	
			// Constructors
			public DropdownItem(); // 0x007BA420-0x007BA428
	
			// Methods
			public virtual void OnPointerEnter(PointerEventData eventData); // 0x007BA460-0x007BA4F4
			public virtual void OnCancel(BaseEventData eventData); // 0x007BA4F4-0x007BA5A0
		}
	
		[Serializable]
		public class OptionData // TypeDefIndex: 2631
		{
			// Fields
			[SerializeField] // 0x003D5D84-0x003D5D94
			private string m_Text; // 0x10
			[SerializeField] // 0x003D5D94-0x003D5DA4
			private Sprite m_Image; // 0x18
	
			// Properties
			public string text { get; set; } // 0x007BA648-0x007BA650 0x007BA5D4-0x007BA5DC
			public Sprite image { get; set; } // 0x007BA650-0x007BA658 0x007BA608-0x007BA610
	
			// Constructors
			public OptionData(); // 0x007BA5A0-0x007BA5A8
			public OptionData(string text); // 0x007BA5A8-0x007BA5D4
			public OptionData(Sprite image); // 0x007BA5DC-0x007BA608
			public OptionData(string text, Sprite image); // 0x007BA610-0x007BA648
		}
	
		[Serializable]
		public class OptionDataList // TypeDefIndex: 2632
		{
			// Fields
			[SerializeField] // 0x003D5DA4-0x003D5DB4
			private List<OptionData> m_Options; // 0x10
	
			// Properties
			public List<OptionData> options { get; set; } // 0x007BA6D4-0x007BA6DC 0x007BA6CC-0x007BA6D4
	
			// Constructors
			public OptionDataList(); // 0x007BA658-0x007BA6CC
		}
	
		[Serializable]
		public class DropdownEvent : UnityEvent<int> // TypeDefIndex: 2633
		{
			// Constructors
			public DropdownEvent(); // 0x007BA3D0-0x007BA420
		}
	
		[CompilerGenerated] // 0x003D4FE4-0x003D4FF4
		private sealed class <Show>c__AnonStorey1 // TypeDefIndex: 2634
		{
			// Fields
			internal DropdownItem item; // 0x10
			internal Dropdown $this; // 0x18
	
			// Constructors
			public <Show>c__AnonStorey1(); // 0x007BA37C-0x007BA384
	
			// Methods
			internal void <>m__0(bool x); // 0x007BA384-0x007BA3C8
		}
	
		[CompilerGenerated] // 0x003D4FF4-0x003D5004
		private sealed class <DelayedDestroyDropdownList>c__Iterator0 : IEnumerator<object> // TypeDefIndex: 2635
		{
			// Fields
			internal float delay; // 0x10
			internal Dropdown $this; // 0x18
			internal object $current; // 0x20
			internal bool $disposing; // 0x28
			internal int $PC; // 0x2C
	
			// Properties
			object IEnumerator<object>.Current { [DebuggerHidden] /* 0x003D7DEC-0x003D7DFC */ get; } // 0x007BA2F0-0x007BA2F8 
			object IEnumerator.Current { [DebuggerHidden] /* 0x003D7DFC-0x003D7E0C */ get; } // 0x007BA2F8-0x007BA300 
	
			// Constructors
			[DebuggerHidden] // 0x003D7DDC-0x003D7DEC
			public <DelayedDestroyDropdownList>c__Iterator0(); // 0x007BA054-0x007BA05C
	
			// Methods
			public bool MoveNext(); // 0x007BA05C-0x007BA2F0
			[DebuggerHidden] // 0x003D7E0C-0x003D7E1C
			public void Dispose(); // 0x007BA300-0x007BA314
			[DebuggerHidden] // 0x003D7E1C-0x003D7E2C
			public void Reset(); // 0x007BA314-0x007BA37C
		}
	
		// Constructors
		protected Dropdown(); // 0x006A3EC0-0x006A3F94
		static Dropdown(); // 0x006A6D40-0x006A6DAC
	
		// Methods
		protected override void Awake(); // 0x006A4180-0x006A4324
		protected override void Start(); // 0x006A4324-0x006A4328
		public void RefreshShownValue(); // 0x006A30E4-0x006A33CC
		public void AddOptions(List<OptionData> options); // 0x006A4328-0x006A43A4
		public void AddOptions(List<string> options); // 0x006A43A4-0x006A44BC
		public void AddOptions(List<Sprite> options); // 0x006A44BC-0x006A45D4
		public void ClearOptions(); // 0x006A45D4-0x006A4640
		private void SetupTemplate(); // 0x006A4640-0x006A4C94
		private static T GetOrAddComponent<T>(GameObject go)
			where T : Component;
		public virtual void OnPointerClick(PointerEventData eventData); // 0x006A4C94-0x006A4C98
		public virtual void OnSubmit(BaseEventData eventData); // 0x006A5D40-0x006A5D44
		public virtual void OnCancel(BaseEventData eventData); // 0x006A5D44-0x006A5D48
		public void Show(); // 0x006A4C98-0x006A5D40
		protected virtual GameObject CreateBlocker(Canvas rootCanvas); // 0x006A644C-0x006A681C
		protected virtual void DestroyBlocker(GameObject blocker); // 0x006A681C-0x006A6884
		protected virtual GameObject CreateDropdownList(GameObject template); // 0x006A6884-0x006A68F4
		protected virtual void DestroyDropdownList(GameObject dropdownList); // 0x006A68F4-0x006A695C
		protected virtual DropdownItem CreateItem(DropdownItem itemTemplate); // 0x006A695C-0x006A69CC
		protected virtual void DestroyItem(DropdownItem item); // 0x006A69CC-0x006A69D0
		private DropdownItem AddItem(OptionData data, bool selected, DropdownItem itemTemplate, List<DropdownItem> items); // 0x006A5E74-0x006A632C
		private void AlphaFadeList(float duration, float alpha); // 0x006A69D0-0x006A6A6C
		private void AlphaFadeList(float duration, float start, float end); // 0x006A632C-0x006A644C
		private void SetAlpha(float alpha); // 0x006A6A6C-0x006A6B38
		public void Hide(); // 0x006A5D48-0x006A5E74
		[DebuggerHidden] // 0x003D7874-0x003D7884
		private IEnumerator DelayedDestroyDropdownList(float delay); // 0x006A6B38-0x006A6BCC
		private void OnSelectItem(Toggle toggle); // 0x006A6BCC-0x006A6D40
	}

	[Serializable]
	public class FontData : ISerializationCallbackReceiver // TypeDefIndex: 2636
	{
		// Fields
		[FormerlySerializedAs] // 0x003D5DB4-0x003D5E00
		[SerializeField] // 0x003D5DB4-0x003D5E00
		private Font m_Font; // 0x10
		[FormerlySerializedAs] // 0x003D5E00-0x003D5E4C
		[SerializeField] // 0x003D5E00-0x003D5E4C
		private int m_FontSize; // 0x18
		[FormerlySerializedAs] // 0x003D5E4C-0x003D5E98
		[SerializeField] // 0x003D5E4C-0x003D5E98
		private FontStyle m_FontStyle; // 0x1C
		[SerializeField] // 0x003D5E98-0x003D5EA8
		private bool m_BestFit; // 0x20
		[SerializeField] // 0x003D5EA8-0x003D5EB8
		private int m_MinSize; // 0x24
		[SerializeField] // 0x003D5EB8-0x003D5EC8
		private int m_MaxSize; // 0x28
		[FormerlySerializedAs] // 0x003D5EC8-0x003D5F14
		[SerializeField] // 0x003D5EC8-0x003D5F14
		private TextAnchor m_Alignment; // 0x2C
		[SerializeField] // 0x003D5F14-0x003D5F24
		private bool m_AlignByGeometry; // 0x30
		[FormerlySerializedAs] // 0x003D5F24-0x003D5F70
		[SerializeField] // 0x003D5F24-0x003D5F70
		private bool m_RichText; // 0x31
		[SerializeField] // 0x003D5F70-0x003D5F80
		private HorizontalWrapMode m_HorizontalOverflow; // 0x34
		[SerializeField] // 0x003D5F80-0x003D5F90
		private VerticalWrapMode m_VerticalOverflow; // 0x38
		[SerializeField] // 0x003D5F90-0x003D5FA0
		private float m_LineSpacing; // 0x3C
	
		// Properties
		public static FontData defaultFontData { get; } // 0x007BA6E4-0x007BA81C 
		public Font font { get; set; } // 0x007BA81C-0x007BA824 0x007BA824-0x007BA82C
		public int fontSize { get; set; } // 0x007BA82C-0x007BA834 0x007BA834-0x007BA83C
		public FontStyle fontStyle { get; set; } // 0x007BA83C-0x007BA844 0x007BA844-0x007BA84C
		public bool bestFit { get; set; } // 0x007BA84C-0x007BA854 0x007BA854-0x007BA860
		public int minSize { get; set; } // 0x007BA860-0x007BA868 0x007BA868-0x007BA870
		public int maxSize { get; set; } // 0x007BA870-0x007BA878 0x007BA878-0x007BA880
		public TextAnchor alignment { get; set; } // 0x007BA880-0x007BA888 0x007BA888-0x007BA890
		public bool alignByGeometry { get; set; } // 0x007BA890-0x007BA898 0x007BA898-0x007BA8A4
		public bool richText { get; set; } // 0x007BA8A4-0x007BA8AC 0x007BA8AC-0x007BA8B8
		public HorizontalWrapMode horizontalOverflow { get; set; } // 0x007BA8B8-0x007BA8C0 0x007BA8C0-0x007BA8C8
		public VerticalWrapMode verticalOverflow { get; set; } // 0x007BA8C8-0x007BA8D0 0x007BA8D0-0x007BA8D8
		public float lineSpacing { get; set; } // 0x007BA8D8-0x007BA8E0 0x007BA8E0-0x007BA8E8
	
		// Constructors
		public FontData(); // 0x007BA6DC-0x007BA6E4
	
		// Methods
		void ISerializationCallbackReceiver.OnBeforeSerialize(); // 0x007BA8E8-0x007BA8EC
		void ISerializationCallbackReceiver.OnAfterDeserialize(); // 0x007BA8EC-0x007BA9A4
	}

	public static class FontUpdateTracker // TypeDefIndex: 2637
	{
		// Fields
		private static Dictionary<Font, HashSet<Text>> m_Tracked; // 0x00
		[CompilerGenerated] // 0x003D5FA0-0x003D5FB0
		private static Action<Font> <>f__mg$cache0; // 0x08
		[CompilerGenerated] // 0x003D5FB0-0x003D5FC0
		private static Action<Font> <>f__mg$cache1; // 0x10
	
		// Constructors
		static FontUpdateTracker(); // 0x007BB0A4-0x007BB118
	
		// Methods
		public static void TrackText(Text t); // 0x007BA9A4-0x007BAC98
		private static void RebuildForFont(Font f); // 0x007BAC98-0x007BAE0C
		public static void UntrackText(Text t); // 0x007BAE0C-0x007BB0A4
	}

	[DisallowMultipleComponent] // 0x003D4348-0x003D43F4
	[ExecuteAlways] // 0x003D4348-0x003D43F4
	[RequireComponent] // 0x003D4348-0x003D43F4
	[RequireComponent] // 0x003D4348-0x003D43F4
	public abstract class Graphic : UIBehaviour, ICanvasElement // TypeDefIndex: 2638
	{
		// Fields
		protected static Material s_DefaultUI; // 0x00
		protected static Texture2D s_WhiteTexture; // 0x08
		[FormerlySerializedAs] // 0x003D5FC0-0x003D600C
		[SerializeField] // 0x003D5FC0-0x003D600C
		protected Material m_Material; // 0x18
		[SerializeField] // 0x003D600C-0x003D601C
		private Color m_Color; // 0x20
		[SerializeField] // 0x003D601C-0x003D602C
		private bool m_RaycastTarget; // 0x30
		[NonSerialized]
		private RectTransform m_RectTransform; // 0x38
		[NonSerialized]
		private CanvasRenderer m_CanvasRenderer; // 0x40
		[NonSerialized]
		private Canvas m_Canvas; // 0x48
		[NonSerialized]
		private bool m_VertsDirty; // 0x50
		[NonSerialized]
		private bool m_MaterialDirty; // 0x51
		[NonSerialized]
		protected UnityAction m_OnDirtyLayoutCallback; // 0x58
		[NonSerialized]
		protected UnityAction m_OnDirtyVertsCallback; // 0x60
		[NonSerialized]
		protected UnityAction m_OnDirtyMaterialCallback; // 0x68
		[NonSerialized]
		protected static Mesh s_Mesh; // 0x10
		[NonSerialized]
		private static readonly VertexHelper s_VertexHelper; // 0x18
		[NonSerialized]
		private readonly TweenRunner<ColorTween> m_ColorTweenRunner; // 0x70
		[CompilerGenerated] // 0x003D602C-0x003D6068
		[DebuggerBrowsable] // 0x003D602C-0x003D6068
		private bool <useLegacyMeshGeneration>k__BackingField; // 0x78
	
		// Properties
		public static Material defaultGraphicMaterial { get; } // 0x007BB1E8-0x007BB2E0 
		public virtual Color color { get; set; } // 0x007BB2E0-0x007BB2EC 0x007BB2EC-0x007BB334
		public virtual bool raycastTarget { get; set; } // 0x007BB334-0x007BB33C 0x007BB33C-0x007BB348
		protected bool useLegacyMeshGeneration { [CompilerGenerated] /* 0x003D7884-0x003D7894 */ get; [CompilerGenerated] /* 0x003D7894-0x003D78A4 */ set; } // 0x007BB348-0x007BB350 0x007BB1DC-0x007BB1E8
		public int depth { get; } // 0x007BBD8C-0x007BBDBC 
		public RectTransform rectTransform { get; } // 0x007BB448-0x007BB4A8 
		public Canvas canvas { get; } // 0x007BB764-0x007BB7E8 
		public CanvasRenderer canvasRenderer { get; } // 0x007BBDBC-0x007BBE1C 
		public virtual Material defaultMaterial { get; } // 0x007BBE1C-0x007BBE78 
		public virtual Material material { get; set; } // 0x007BBE78-0x007BBF10 0x007BBF10-0x007BBFB8
		public virtual Material materialForRendering { get; } // 0x007BBFB8-0x007BD1D4 
		public virtual Texture mainTexture { get; } // 0x007BD1D4-0x007BD23C 
		protected static Mesh workerMesh { get; } // 0x007BE174-0x007BE2CC 
		Transform ICanvasElement.transform { get; } // 0x007BF5F4-0x007BF5FC 
	
		// Constructors
		protected Graphic(); // 0x007BB118-0x007BB1DC
		static Graphic(); // 0x007BF570-0x007BF5F4
	
		// Methods
		public virtual void SetAllDirty(); // 0x007BB350-0x007BB3A0
		public virtual void SetLayoutDirty(); // 0x007BB3A0-0x007BB448
		public virtual void SetVerticesDirty(); // 0x007BB4A8-0x007BB548
		public virtual void SetMaterialDirty(); // 0x007BB548-0x007BB5E8
		protected override void OnRectTransformDimensionsChange(); // 0x007BB5E8-0x007BB6B0
		protected override void OnBeforeTransformParentChanged(); // 0x007BB6B0-0x007BB764
		protected override void OnTransformParentChanged(); // 0x007BB974-0x007BBA38
		private void CacheCanvas(); // 0x007BBA38-0x007BBBE0
		protected override void OnEnable(); // 0x007BD23C-0x007BD37C
		protected override void OnDisable(); // 0x007BD37C-0x007BD4CC
		protected override void OnCanvasHierarchyChanged(); // 0x007BD4CC-0x007BD5F0
		public virtual void OnCullingChanged(); // 0x007BD5F0-0x007BD698
		public virtual void Rebuild(CanvasUpdate update); // 0x007BD698-0x007BD728
		public virtual void LayoutComplete(); // 0x007BD728-0x007BD72C
		public virtual void GraphicUpdateComplete(); // 0x007BD72C-0x007BD730
		protected virtual void UpdateMaterial(); // 0x007BD730-0x007BD818
		protected virtual void UpdateGeometry(); // 0x007BD818-0x007BD828
		private void DoMeshGeneration(); // 0x007BDCAC-0x007BE174
		private void DoLegacyMeshGeneration(); // 0x007BD828-0x007BDCAC
		[EditorBrowsable] // 0x003D78A4-0x003D78F8
		[Obsolete] // 0x003D78A4-0x003D78F8
		protected virtual void OnFillVBO(List<UIVertex> vbo); // 0x007BE2CC-0x007BE2D0
		[Obsolete] // 0x003D78F8-0x003D7934
		protected virtual void OnPopulateMesh(Mesh m); // 0x007BE2D0-0x007BE380
		protected virtual void OnPopulateMesh(VertexHelper vh); // 0x007BE380-0x007BE648
		protected override void OnDidApplyAnimationProperties(); // 0x007BE7AC-0x007BE7BC
		public virtual void SetNativeSize(); // 0x007BE7BC-0x007BE7C0
		public virtual bool Raycast(Vector2 sp, Camera eventCamera); // 0x007BE7C0-0x007BEBA4
		public Vector2 PixelAdjustPoint(Vector2 point); // 0x007BEBA4-0x007BED10
		public Rect GetPixelAdjustedRect(); // 0x007BE648-0x007BE7AC
		public virtual void CrossFadeColor(Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha); // 0x007BED10-0x007BED2C
		public virtual void CrossFadeColor(Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha, bool useRGB); // 0x007BED2C-0x007BF008
		private static Color CreateColorFromAlpha(float alpha); // 0x007BF008-0x007BF030
		public virtual void CrossFadeAlpha(float alpha, float duration, bool ignoreTimeScale); // 0x007BF030-0x007BF0D8
		public void RegisterDirtyLayoutCallback(UnityAction action); // 0x007BF0D8-0x007BF19C
		public void UnregisterDirtyLayoutCallback(UnityAction action); // 0x007BF19C-0x007BF260
		public void RegisterDirtyVerticesCallback(UnityAction action); // 0x007BF260-0x007BF324
		public void UnregisterDirtyVerticesCallback(UnityAction action); // 0x007BF324-0x007BF3E8
		public void RegisterDirtyMaterialCallback(UnityAction action); // 0x007BF3E8-0x007BF4AC
		public void UnregisterDirtyMaterialCallback(UnityAction action); // 0x007BF4AC-0x007BF570
	}

	[AddComponentMenu] // 0x003D43F4-0x003D447C
	[RequireComponent] // 0x003D43F4-0x003D447C
	public class GraphicRaycaster : BaseRaycaster // TypeDefIndex: 2639
	{
		// Fields
		protected const int kNoEventMaskSet = -1; // Metadata: 0x0021B1D0
		[FormerlySerializedAs] // 0x003D6068-0x003D60B4
		[SerializeField] // 0x003D6068-0x003D60B4
		private bool m_IgnoreReversedGraphics; // 0x18
		[FormerlySerializedAs] // 0x003D60B4-0x003D6100
		[SerializeField] // 0x003D60B4-0x003D6100
		private BlockingObjects m_BlockingObjects; // 0x1C
		[SerializeField] // 0x003D6100-0x003D6110
		protected LayerMask m_BlockingMask; // 0x20
		private Canvas m_Canvas; // 0x28
		[NonSerialized]
		private List<Graphic> m_RaycastResults; // 0x30
		[NonSerialized]
		private static readonly List<Graphic> s_SortedGraphics; // 0x00
		[CompilerGenerated] // 0x003D6110-0x003D6120
		private static Comparison<Graphic> <>f__am$cache0; // 0x08
	
		// Properties
		public override int sortOrderPriority { get; } // 0x007BF688-0x007BF6F4 
		public override int renderOrderPriority { get; } // 0x007BF78C-0x007BF810 
		public bool ignoreReversedGraphics { get; set; } // 0x007BF810-0x007BF818 0x007BF818-0x007BF824
		public BlockingObjects blockingObjects { get; set; } // 0x007BF824-0x007BF82C 0x007BF82C-0x007BF834
		private Canvas canvas { get; } // 0x007BF6F4-0x007BF78C 
		public override Camera eventCamera { get; } // 0x007C0DD4-0x007C0F54 
	
		// Nested types
		public enum BlockingObjects // TypeDefIndex: 2640
		{
			None = 0,
			TwoD = 1,
			ThreeD = 2,
			All = 3
		}
	
		// Constructors
		protected GraphicRaycaster(); // 0x007BF5FC-0x007BF688
		static GraphicRaycaster(); // 0x007C0F54-0x007C0FC8
	
		// Methods
		public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList); // 0x007BF834-0x007C07C4
		private static void Raycast(Canvas canvas, Camera eventCamera, Vector2 pointerPosition, IList<Graphic> foundGraphics, List<Graphic> results); // 0x007C089C-0x007C0DD4
		[CompilerGenerated] // 0x003D7934-0x003D7944
		private static int <Raycast>m__0(Graphic g1, Graphic g2); // 0x007C0FC8-0x007C1030
	}

	public class GraphicRegistry // TypeDefIndex: 2641
	{
		// Fields
		private static GraphicRegistry s_Instance; // 0x00
		private readonly Dictionary<Canvas, IndexedSet<Graphic>> m_Graphics; // 0x10
		private static readonly List<Graphic> s_EmptyList; // 0x08
	
		// Properties
		public static GraphicRegistry instance { get; } // 0x007C1150-0x007C1210 
	
		// Constructors
		protected GraphicRegistry(); // 0x007C1030-0x007C1150
		static GraphicRegistry(); // 0x007C1210-0x007C1284
	
		// Methods
		public static void RegisterGraphicForCanvas(Canvas c, Graphic graphic); // 0x007BBBE0-0x007BBD8C
		public static void UnregisterGraphicForCanvas(Canvas c, Graphic graphic); // 0x007BB7E8-0x007BB974
		public static IList<Graphic> GetGraphicsForCanvas(Canvas canvas); // 0x007C07C4-0x007C089C
	}

	[Obsolete] // 0x003D447C-0x003D44B4
	internal interface IGraphicEnabledDisabled // TypeDefIndex: 2642
	{
		// Methods
		void OnSiblingGraphicEnabledDisabled();
	}

	[AddComponentMenu] // 0x003D44B4-0x003D44F0
	public class Image : MaskableGraphic, ISerializationCallbackReceiver, ILayoutElement, ICanvasRaycastFilter // TypeDefIndex: 2643
	{
		// Fields
		protected static Material s_ETC1DefaultUI; // 0x00
		[FormerlySerializedAs] // 0x003D6120-0x003D616C
		[SerializeField] // 0x003D6120-0x003D616C
		private Sprite m_Sprite; // 0xB0
		[NonSerialized]
		private Sprite m_OverrideSprite; // 0xB8
		[SerializeField] // 0x003D616C-0x003D617C
		private Type m_Type; // 0xC0
		[SerializeField] // 0x003D617C-0x003D618C
		private bool m_PreserveAspect; // 0xC4
		[SerializeField] // 0x003D618C-0x003D619C
		private bool m_FillCenter; // 0xC5
		[SerializeField] // 0x003D619C-0x003D61AC
		private FillMethod m_FillMethod; // 0xC8
		[Range] // 0x003D61AC-0x003D61EC
		[SerializeField] // 0x003D61AC-0x003D61EC
		private float m_FillAmount; // 0xCC
		[SerializeField] // 0x003D61EC-0x003D61FC
		private bool m_FillClockwise; // 0xD0
		[SerializeField] // 0x003D61FC-0x003D620C
		private int m_FillOrigin; // 0xD4
		private float m_AlphaHitTestMinimumThreshold; // 0xD8
		private bool m_Tracked; // 0xDC
		[SerializeField] // 0x003D620C-0x003D621C
		private bool m_UseSpriteMesh; // 0xDD
		private static readonly Vector2[] s_VertScratch; // 0x08
		private static readonly Vector2[] s_UVScratch; // 0x10
		private static readonly Vector3[] s_Xy; // 0x18
		private static readonly Vector3[] s_Uv; // 0x20
		private static List<Image> m_TrackedTexturelessImages; // 0x28
		private static bool s_Initialized; // 0x30
		[CompilerGenerated] // 0x003D621C-0x003D622C
		private static Action<SpriteAtlas> <>f__mg$cache0; // 0x38
	
		// Properties
		public Sprite sprite { get; set; } // 0x007C3890-0x007C3898 0x007C3898-0x007C3928
		public Sprite overrideSprite { get; set; } // 0x007C3A38-0x007C3A3C 0x007C3ACC-0x007C3B5C
		private Sprite activeSprite { get; } // 0x007C3A3C-0x007C3ACC 
		public Type type { get; set; } // 0x007C3B5C-0x007C3B64 0x007C3B64-0x007C3BEC
		public bool preserveAspect { get; set; } // 0x007C3BEC-0x007C3BF4 0x007C3BF4-0x007C3C7C
		public bool fillCenter { get; set; } // 0x007C3C7C-0x007C3C84 0x007C3C84-0x007C3D0C
		public FillMethod fillMethod { get; set; } // 0x007C3D0C-0x007C3D14 0x007C3D14-0x007C3D94
		public float fillAmount { get; set; } // 0x007C3D94-0x007C3D9C 0x007C3D9C-0x007C3E50
		public bool fillClockwise { get; set; } // 0x007C3E50-0x007C3E58 0x007C3E58-0x007C3EE0
		public int fillOrigin { get; set; } // 0x007C3EE0-0x007C3EE8 0x007C3EE8-0x007C3F70
		[Obsolete] // 0x003D810C-0x003D8144
		public float eventAlphaThreshold { get; set; } // 0x007C3F70-0x007C3F80 0x007C3F88-0x007C3F98
		public float alphaHitTestMinimumThreshold { get; set; } // 0x007C3F80-0x007C3F88 0x007C3F98-0x007C3FA0
		public bool useSpriteMesh { get; set; } // 0x007C3FA0-0x007C3FA8 0x007C3FA8-0x007C4030
		public static Material defaultETC1GraphicMaterial { get; } // 0x007C4030-0x007C4128 
		public override Texture mainTexture { get; } // 0x007C4128-0x007C42E4 
		public bool hasBorder { get; } // 0x007C42E4-0x007C43B8 
		public float pixelsPerUnit { get; } // 0x007C43B8-0x007C44DC 
		public override Material material { get; set; } // 0x007C44DC-0x007C463C 0x007C463C-0x007C4640
		public virtual float minWidth { get; } // 0x007CAFD4-0x007CAFDC 
		public virtual float preferredWidth { get; } // 0x007CAFDC-0x007CB0F8 
		public virtual float flexibleWidth { get; } // 0x007CB0F8-0x007CB100 
		public virtual float minHeight { get; } // 0x007CB100-0x007CB108 
		public virtual float preferredHeight { get; } // 0x007CB108-0x007CB224 
		public virtual float flexibleHeight { get; } // 0x007CB224-0x007CB22C 
		public virtual int layoutPriority { get; } // 0x007CB22C-0x007CB234 
	
		// Nested types
		public enum Type // TypeDefIndex: 2644
		{
			Simple = 0,
			Sliced = 1,
			Tiled = 2,
			Filled = 3
		}
	
		public enum FillMethod // TypeDefIndex: 2645
		{
			Horizontal = 0,
			Vertical = 1,
			Radial90 = 2,
			Radial180 = 3,
			Radial360 = 4
		}
	
		public enum OriginHorizontal // TypeDefIndex: 2646
		{
			Left = 0,
			Right = 1
		}
	
		public enum OriginVertical // TypeDefIndex: 2647
		{
			Bottom = 0,
			Top = 1
		}
	
		public enum Origin90 // TypeDefIndex: 2648
		{
			BottomLeft = 0,
			TopLeft = 1,
			TopRight = 2,
			BottomRight = 3
		}
	
		public enum Origin180 // TypeDefIndex: 2649
		{
			Bottom = 0,
			Left = 1,
			Top = 2,
			Right = 3
		}
	
		public enum Origin360 // TypeDefIndex: 2650
		{
			Bottom = 0,
			Right = 1,
			Top = 2,
			Left = 3
		}
	
		// Constructors
		protected Image(); // 0x007C3840-0x007C3890
		static Image(); // 0x007CBD78-0x007CBE68
	
		// Methods
		public virtual void OnBeforeSerialize(); // 0x007C4640-0x007C4644
		public virtual void OnAfterDeserialize(); // 0x007C4644-0x007C4700
		private void PreserveSpriteAspectRatio(ref Rect rect, Vector2 spriteSize); // 0x007C4700-0x007C4870
		private Vector4 GetDrawingDimensions(bool shouldPreserveAspect); // 0x007C4870-0x007C4BF8
		public override void SetNativeSize(); // 0x007C4BF8-0x007C4DDC
		protected override void OnPopulateMesh(VertexHelper toFill); // 0x007C4DDC-0x007C4F2C
		private void TrackSprite(); // 0x007C3928-0x007C3A38
		protected override void OnEnable(); // 0x007C9D34-0x007C9D5C
		protected override void OnDisable(); // 0x007C9D5C-0x007C9DE0
		protected override void UpdateMaterial(); // 0x007C9E6C-0x007C9FA4
		private void GenerateSimpleSprite(VertexHelper vh, bool lPreserveAspect); // 0x007C4F2C-0x007C62D8
		private void GenerateSprite(VertexHelper vh, bool lPreserveAspect); // 0x007C62D8-0x007C683C
		private void GenerateSlicedSprite(VertexHelper toFill); // 0x007C683C-0x007C71BC
		private void GenerateTiledSprite(VertexHelper toFill); // 0x007C71BC-0x007C8630
		private static void AddQuad(VertexHelper vertexHelper, Vector3[] quadPositions, Color32 color, Vector3[] quadUVs); // 0x007CA424-0x007CA5F8
		private static void AddQuad(VertexHelper vertexHelper, Vector2 posMin, Vector2 posMax, Color32 color, Vector2 uvMin, Vector2 uvMax); // 0x007CA1B0-0x007CA424
		private Vector4 GetAdjustedBorders(Vector4 border, Rect adjustedRect); // 0x007C9FA4-0x007CA1B0
		private void GenerateFilledSprite(VertexHelper toFill, bool preserveAspect); // 0x007C8630-0x007C9BA0
		private static bool RadialCut(Vector3[] xy, Vector3[] uv, float fill, bool invert, int corner); // 0x007CA5F8-0x007CA764
		private static void RadialCut(Vector3[] xy, float cos, float sin, bool invert, int corner); // 0x007CA764-0x007CAFCC
		public virtual void CalculateLayoutInputHorizontal(); // 0x007CAFCC-0x007CAFD0
		public virtual void CalculateLayoutInputVertical(); // 0x007CAFD0-0x007CAFD4
		public virtual bool IsRaycastLocationValid(Vector2 screenPoint, Camera eventCamera); // 0x007CB234-0x007CB6D8
		private Vector2 MapCoordinate(Vector2 local, Rect rect); // 0x007CB6D8-0x007CBBDC
		private static void RebuildImage(SpriteAtlas spriteAtlas); // 0x007CBBDC-0x007CBD78
		private static void TrackImage(Image g); // 0x007C9BA0-0x007C9D34
		private static void UnTrackImage(Image g); // 0x007C9DE0-0x007C9E6C
	}

	[EditorBrowsable] // 0x003D44F0-0x003D4544
	[Obsolete] // 0x003D44F0-0x003D4544
	public interface IMask // TypeDefIndex: 2651
	{
		// Properties
		RectTransform rectTransform { get; }
	
		// Methods
		bool Enabled();
	}

	public interface IMaskable // TypeDefIndex: 2652
	{
		// Methods
		void RecalculateMasking();
	}

	[AddComponentMenu] // 0x003D4544-0x003D4580
	public class InputField : Selectable, IUpdateSelectedHandler, IBeginDragHandler, IDragHandler, IEndDragHandler, IPointerClickHandler, ISubmitHandler, ICanvasElement, ILayoutElement // TypeDefIndex: 2653
	{
		// Fields
		protected TouchScreenKeyboard m_Keyboard; // 0xD8
		private static readonly char[] kSeparators; // 0x00
		[FormerlySerializedAs] // 0x003D622C-0x003D6278
		[SerializeField] // 0x003D622C-0x003D6278
		protected Text m_TextComponent; // 0xE0
		[SerializeField] // 0x003D6278-0x003D6288
		protected Graphic m_Placeholder; // 0xE8
		[SerializeField] // 0x003D6288-0x003D6298
		private ContentType m_ContentType; // 0xF0
		[FormerlySerializedAs] // 0x003D6298-0x003D62E4
		[SerializeField] // 0x003D6298-0x003D62E4
		private InputType m_InputType; // 0xF4
		[FormerlySerializedAs] // 0x003D62E4-0x003D6330
		[SerializeField] // 0x003D62E4-0x003D6330
		private char m_AsteriskChar; // 0xF8
		[FormerlySerializedAs] // 0x003D6330-0x003D637C
		[SerializeField] // 0x003D6330-0x003D637C
		private TouchScreenKeyboardType m_KeyboardType; // 0xFC
		[SerializeField] // 0x003D637C-0x003D638C
		private LineType m_LineType; // 0x100
		[FormerlySerializedAs] // 0x003D638C-0x003D63D8
		[SerializeField] // 0x003D638C-0x003D63D8
		private bool m_HideMobileInput; // 0x104
		[FormerlySerializedAs] // 0x003D63D8-0x003D6424
		[SerializeField] // 0x003D63D8-0x003D6424
		private CharacterValidation m_CharacterValidation; // 0x108
		[FormerlySerializedAs] // 0x003D6424-0x003D6470
		[SerializeField] // 0x003D6424-0x003D6470
		private int m_CharacterLimit; // 0x10C
		[FormerlySerializedAs] // 0x003D6470-0x003D6504
		[FormerlySerializedAs] // 0x003D6470-0x003D6504
		[FormerlySerializedAs] // 0x003D6470-0x003D6504
		[SerializeField] // 0x003D6470-0x003D6504
		private SubmitEvent m_OnEndEdit; // 0x110
		[FormerlySerializedAs] // 0x003D6504-0x003D6574
		[FormerlySerializedAs] // 0x003D6504-0x003D6574
		[SerializeField] // 0x003D6504-0x003D6574
		private OnChangeEvent m_OnValueChanged; // 0x118
		[FormerlySerializedAs] // 0x003D6574-0x003D65C0
		[SerializeField] // 0x003D6574-0x003D65C0
		private OnValidateInput m_OnValidateInput; // 0x120
		[FormerlySerializedAs] // 0x003D65C0-0x003D660C
		[SerializeField] // 0x003D65C0-0x003D660C
		private Color m_CaretColor; // 0x128
		[SerializeField] // 0x003D660C-0x003D661C
		private bool m_CustomCaretColor; // 0x138
		[SerializeField] // 0x003D661C-0x003D662C
		private Color m_SelectionColor; // 0x13C
		[FormerlySerializedAs] // 0x003D662C-0x003D6678
		[SerializeField] // 0x003D662C-0x003D6678
		protected string m_Text; // 0x150
		[Range] // 0x003D6678-0x003D66B8
		[SerializeField] // 0x003D6678-0x003D66B8
		private float m_CaretBlinkRate; // 0x158
		[Range] // 0x003D66B8-0x003D66F8
		[SerializeField] // 0x003D66B8-0x003D66F8
		private int m_CaretWidth; // 0x15C
		[SerializeField] // 0x003D66F8-0x003D6708
		private bool m_ReadOnly; // 0x160
		protected int m_CaretPosition; // 0x164
		protected int m_CaretSelectPosition; // 0x168
		private RectTransform caretRectTrans; // 0x170
		protected UIVertex[] m_CursorVerts; // 0x178
		private TextGenerator m_InputTextCache; // 0x180
		private CanvasRenderer m_CachedInputRenderer; // 0x188
		private bool m_PreventFontCallback; // 0x190
		[NonSerialized]
		protected Mesh m_Mesh; // 0x198
		private bool m_AllowInput; // 0x1A0
		private bool m_ShouldActivateNextUpdate; // 0x1A1
		private bool m_UpdateDrag; // 0x1A2
		private bool m_DragPositionOutOfBounds; // 0x1A3
		private const float kHScrollSpeed = 0.05f; // Metadata: 0x0021B248
		private const float kVScrollSpeed = 0.1f; // Metadata: 0x0021B24C
		protected bool m_CaretVisible; // 0x1A4
		private Coroutine m_BlinkCoroutine; // 0x1A8
		private float m_BlinkStartTime; // 0x1B0
		protected int m_DrawStart; // 0x1B4
		protected int m_DrawEnd; // 0x1B8
		private Coroutine m_DragCoroutine; // 0x1C0
		private string m_OriginalText; // 0x1C8
		private bool m_WasCanceled; // 0x1D0
		private bool m_HasDoneFocusTransition; // 0x1D1
		private WaitForSecondsRealtime m_WaitForSecondsRealtime; // 0x1D8
		private const string kEmailSpecialCharacters = "!#$%&\'*+-/=?^_`{|}~"; // Metadata: 0x0021B250
		private Event m_ProcessingEvent; // 0x1E0
		private const int k_MaxTextLength = 16382; // Metadata: 0x0021B267
	
		// Properties
		private BaseInput input { get; } // 0x007CD19C-0x007CD308 
		private string compositionString { get; } // 0x007CD308-0x007CD3B4 
		protected Mesh mesh { get; } // 0x007CD3B4-0x007CD458 
		protected TextGenerator cachedInputTextGenerator { get; } // 0x007CD458-0x007CD4C4 
		public bool shouldHideMobileInput { get; set; } // 0x007CD524-0x007CD578 0x007CD4C4-0x007CD524
		private bool shouldActivateOnSelect { get; } // 0x007CD578-0x007CD598 
		public string text { get; set; } // 0x007CD598-0x007CD5A0 0x007CD5A0-0x007CD984
		public bool isFocused { get; } // 0x007CE1A8-0x007CE1B0 
		public float caretBlinkRate { get; set; } // 0x007CE1B0-0x007CE1B8 0x007CE1B8-0x007CE23C
		public int caretWidth { get; set; } // 0x007CE29C-0x007CE2A4 0x007CE2A4-0x007CE320
		public Text textComponent { get; set; } // 0x007CE388-0x007CE390 0x007CE390-0x007CE620
		public Graphic placeholder { get; set; } // 0x007CE620-0x007CE628 0x007CE628-0x007CE688
		public Color caretColor { get; set; } // 0x007CE688-0x007CE6DC 0x007CE6E4-0x007CE720
		public bool customCaretColor { get; set; } // 0x007CE6DC-0x007CE6E4 0x007CE720-0x007CE744
		public Color selectionColor { get; set; } // 0x007CE744-0x007CE758 0x007CE758-0x007CE794
		public SubmitEvent onEndEdit { get; set; } // 0x007CE794-0x007CE79C 0x007CE79C-0x007CE7FC
		[Obsolete] // 0x003D8144-0x003D817C
		public OnChangeEvent onValueChange { get; set; } // 0x007CE7FC-0x007CE804 0x007CE80C-0x007CE810
		public OnChangeEvent onValueChanged { get; set; } // 0x007CE804-0x007CE80C 0x007CE810-0x007CE870
		public OnValidateInput onValidateInput { get; set; } // 0x007CD984-0x007CD98C 0x007CE870-0x007CE8D0
		public int characterLimit { get; set; } // 0x007CD9A4-0x007CD9AC 0x007CE8D0-0x007CE994
		public ContentType contentType { get; set; } // 0x007CEE2C-0x007CEE34 0x007CEE34-0x007CEEB0
		public LineType lineType { get; set; } // 0x007CEF7C-0x007CEF84 0x007CEF84-0x007CF050
		public InputType inputType { get; set; } // 0x007CF0F8-0x007CF100 0x007CF100-0x007CF18C
		public TouchScreenKeyboard touchScreenKeyboard { get; } // 0x007CF1A4-0x007CF1AC 
		public TouchScreenKeyboardType keyboardType { get; set; } // 0x007CF1AC-0x007CF1B4 0x007CF1B4-0x007CF240
		public CharacterValidation characterValidation { get; set; } // 0x007CD98C-0x007CD994 0x007CF240-0x007CF2CC
		public bool readOnly { get; set; } // 0x007CF2CC-0x007CF2D4 0x007CF2D4-0x007CF2E0
		public bool multiLine { get; } // 0x007CF2E0-0x007CF2F4 
		public char asteriskChar { get; set; } // 0x007CF2F4-0x007CF2FC 0x007CF2FC-0x007CF378
		public bool wasCanceled { get; } // 0x007CF378-0x007CF380 
		protected int caretPositionInternal { get; set; } // 0x007CF3FC-0x007CF438 0x007CF438-0x007CF448
		protected int caretSelectPositionInternal { get; set; } // 0x007CF448-0x007CF484 0x007CF484-0x007CF494
		private new bool hasSelection { get; } // 0x007CF494-0x007CF4C8 
		public int caretPosition { get; set; } // 0x007CF4C8-0x007CF504 0x007CF504-0x007CF530
		public int selectionAnchorPosition { get; set; } // 0x007CF5F8-0x007CF634 0x007CF530-0x007CF594
		public int selectionFocusPosition { get; set; } // 0x007CF634-0x007CF670 0x007CF594-0x007CF5F8
		private static string clipboard { get; set; } // 0x007CFFC4-0x007CFFCC 0x007CFFCC-0x007CFFD4
		public virtual float minWidth { get; } // 0x007D76E8-0x007D76F0 
		public virtual float preferredWidth { get; } // 0x007D76F0-0x007D7884 
		public virtual float flexibleWidth { get; } // 0x007D7884-0x007D788C 
		public virtual float minHeight { get; } // 0x007D788C-0x007D7894 
		public virtual float preferredHeight { get; } // 0x007D7894-0x007D7A4C 
		public virtual float flexibleHeight { get; } // 0x007D7A4C-0x007D7A54 
		public virtual int layoutPriority { get; } // 0x007D7A54-0x007D7A5C 
		Transform ICanvasElement.transform { get; } // 0x007D7AD8-0x007D7AE0 
	
		// Nested types
		public enum ContentType // TypeDefIndex: 2654
		{
			Standard = 0,
			Autocorrected = 1,
			IntegerNumber = 2,
			DecimalNumber = 3,
			Alphanumeric = 4,
			Name = 5,
			EmailAddress = 6,
			Password = 7,
			Pin = 8,
			Custom = 9
		}
	
		public enum InputType // TypeDefIndex: 2655
		{
			Standard = 0,
			AutoCorrect = 1,
			Password = 2
		}
	
		public enum CharacterValidation // TypeDefIndex: 2656
		{
			None = 0,
			Integer = 1,
			Decimal = 2,
			Alphanumeric = 3,
			Name = 4,
			EmailAddress = 5
		}
	
		public enum LineType // TypeDefIndex: 2657
		{
			SingleLine = 0,
			MultiLineSubmit = 1,
			MultiLineNewline = 2
		}
	
		public delegate char OnValidateInput(string text, int charIndex, char addedChar); // TypeDefIndex: 2658; 0x007CD9AC-0x007CE184
	
		[Serializable]
		public class SubmitEvent : UnityEvent<string> // TypeDefIndex: 2659
		{
			// Constructors
			public SubmitEvent(); // 0x007CD040-0x007CD090
		}
	
		[Serializable]
		public class OnChangeEvent : UnityEvent<string> // TypeDefIndex: 2660
		{
			// Constructors
			public OnChangeEvent(); // 0x007CD090-0x007CD0E0
		}
	
		protected enum EditState // TypeDefIndex: 2661
		{
			Continue = 0,
			Finish = 1
		}
	
		[CompilerGenerated] // 0x003D5004-0x003D5014
		private sealed class <CaretBlink>c__Iterator0 : IEnumerator<object> // TypeDefIndex: 2662
		{
			// Fields
			internal float <blinkPeriod>__1; // 0x10
			internal bool <blinkState>__1; // 0x14
			internal InputField $this; // 0x18
			internal object $current; // 0x20
			internal bool $disposing; // 0x28
			internal int $PC; // 0x2C
	
			// Properties
			object IEnumerator<object>.Current { [DebuggerHidden] /* 0x003D7E3C-0x003D7E4C */ get; } // 0x007D7CB8-0x007D7CC0 
			object IEnumerator.Current { [DebuggerHidden] /* 0x003D7E4C-0x003D7E5C */ get; } // 0x007D7CC0-0x007D7CC8 
	
			// Constructors
			[DebuggerHidden] // 0x003D7E2C-0x003D7E3C
			public <CaretBlink>c__Iterator0(); // 0x007CFD10-0x007CFD18
	
			// Methods
			public bool MoveNext(); // 0x007D7AE0-0x007D7CB8
			[DebuggerHidden] // 0x003D7E5C-0x003D7E6C
			public void Dispose(); // 0x007D7CC8-0x007D7CDC
			[DebuggerHidden] // 0x003D7E6C-0x003D7E7C
			public void Reset(); // 0x007D7CDC-0x007D7D44
		}
	
		[CompilerGenerated] // 0x003D5014-0x003D5024
		private sealed class <MouseDragOutsideRect>c__Iterator1 : IEnumerator<object> // TypeDefIndex: 2663
		{
			// Fields
			internal PointerEventData eventData; // 0x10
			internal Vector2 <localMousePos>__1; // 0x18
			internal Rect <rect>__1; // 0x20
			internal float <delay>__1; // 0x30
			internal InputField $this; // 0x38
			internal object $current; // 0x40
			internal bool $disposing; // 0x48
			internal int $PC; // 0x4C
	
			// Properties
			object IEnumerator<object>.Current { [DebuggerHidden] /* 0x003D7E8C-0x003D7E9C */ get; } // 0x007D8108-0x007D8110 
			object IEnumerator.Current { [DebuggerHidden] /* 0x003D7E9C-0x003D7EAC */ get; } // 0x007D8110-0x007D8118 
	
			// Constructors
			[DebuggerHidden] // 0x003D7E7C-0x003D7E8C
			public <MouseDragOutsideRect>c__Iterator1(); // 0x007D2828-0x007D2830
	
			// Methods
			public bool MoveNext(); // 0x007D7D44-0x007D8108
			[DebuggerHidden] // 0x003D7EAC-0x003D7EBC
			public void Dispose(); // 0x007D8118-0x007D812C
			[DebuggerHidden] // 0x003D7EBC-0x003D7ECC
			public void Reset(); // 0x007D812C-0x007D81EC
		}
	
		// Constructors
		protected InputField(); // 0x007CBE68-0x007CD040
		static InputField(); // 0x007D7A5C-0x007D7AD8
	
		// Methods
		protected void ClampPos(ref int pos); // 0x007CF380-0x007CF3FC
		protected override void OnEnable(); // 0x007CF670-0x007CF8E8
		protected override void OnDisable(); // 0x007CF8E8-0x007CFB20
		[DebuggerHidden] // 0x003D7944-0x003D7954
		private IEnumerator CaretBlink(); // 0x007CFCA0-0x007CFD10
		private void SetCaretVisible(); // 0x007CFD18-0x007CFD60
		private void SetCaretActive(); // 0x007CE23C-0x007CE29C
		private void UpdateCaretMaterial(); // 0x007CFD60-0x007CFEA0
		protected void OnFocus(); // 0x007CFEA0-0x007CFEA4
		protected void SelectAll(); // 0x007CFEA4-0x007CFEF8
		public void MoveTextEnd(bool shift); // 0x007CFEF8-0x007CFF6C
		public void MoveTextStart(bool shift); // 0x007CFF6C-0x007CFFC4
		private bool InPlaceEditing(); // 0x007CFFD4-0x007CFFF4
		private void UpdateCaretFromKeyboard(); // 0x007CFFF4-0x007D00B8
		protected virtual void LateUpdate(); // 0x007D00B8-0x007D05E0
		[Obsolete] // 0x003D7954-0x003D798C
		public Vector2 ScreenToLocal(Vector2 screen); // 0x007D192C-0x007D1CC4
		private int GetUnclampedCharacterLineFromPosition(Vector2 pos, TextGenerator generator); // 0x007D1CC4-0x007D1F2C
		protected int GetCharacterIndexFromPosition(Vector2 pos); // 0x007D1F2C-0x007D2290
		private bool MayDrag(PointerEventData eventData); // 0x007D2454-0x007D2544
		public virtual void OnBeginDrag(PointerEventData eventData); // 0x007D2544-0x007D2570
		public virtual void OnDrag(PointerEventData eventData); // 0x007D2570-0x007D2794
		[DebuggerHidden] // 0x003D798C-0x003D799C
		private IEnumerator MouseDragOutsideRect(PointerEventData eventData); // 0x007D2794-0x007D2828
		public virtual void OnEndDrag(PointerEventData eventData); // 0x007D2830-0x007D2858
		public override void OnPointerDown(PointerEventData eventData); // 0x007D2858-0x007D2A7C
		protected EditState KeyPressed(Event evt); // 0x007D2A7C-0x007D2E8C
		private bool IsValidChar(char c); // 0x007D353C-0x007D35C0
		public void ProcessEvent(Event e); // 0x007D35C0-0x007D35C4
		public virtual void OnUpdateSelected(BaseEventData eventData); // 0x007D35C4-0x007D3730
		private string GetSelectedString(); // 0x007D3040-0x007D3100
		private int FindtNextWordBegin(); // 0x007D3730-0x007D3850
		private void MoveRight(bool shift, bool ctrl); // 0x007D3408-0x007D3524
		private int FindtPrevWordBegin(); // 0x007D3850-0x007D3910
		private void MoveLeft(bool shift, bool ctrl); // 0x007D32EC-0x007D3408
		private int DetermineCharacterLine(int charPos, TextGenerator generator); // 0x007D3910-0x007D3A5C
		private int LineUpCharacterPosition(int originalPos, bool goToFirstChar); // 0x007D3A5C-0x007D3E18
		private int LineDownCharacterPosition(int originalPos, bool goToLastChar); // 0x007D3E18-0x007D4148
		private void MoveDown(bool shift); // 0x007D3530-0x007D353C
		private void MoveDown(bool shift, bool goToLastChar); // 0x007D4148-0x007D42B0
		private void MoveUp(bool shift); // 0x007D3524-0x007D3530
		private void MoveUp(bool shift, bool goToFirstChar); // 0x007D42B0-0x007D43F0
		private void Delete(); // 0x007D3100-0x007D32EC
		private void ForwardSpace(); // 0x007D2F6C-0x007D3040
		private void Backspace(); // 0x007D2E8C-0x007D2F6C
		private void Insert(char c); // 0x007D43F0-0x007D44F4
		private void SendOnValueChangedAndUpdateLabel(); // 0x007CE184-0x007CE1A8
		private void SendOnValueChanged(); // 0x007D44F4-0x007D4570
		protected void SendOnSubmit(); // 0x007D4570-0x007D45EC
		protected virtual void Append(string input); // 0x007D45EC-0x007D46C4
		protected virtual void Append(char input); // 0x007D46C4-0x007D4824
		protected void UpdateLabel(); // 0x007CE994-0x007CEE2C
		private bool IsSelectionVisible(); // 0x007D552C-0x007D559C
		private static int GetLineStartPosition(TextGenerator gen, int line); // 0x007D559C-0x007D5744
		private static int GetLineEndPosition(TextGenerator gen, int line); // 0x007D2290-0x007D2454
		private void SetDrawRangeToContainCaretPosition(int caretPos); // 0x007D4824-0x007D552C
		public void ForceLabelUpdate(); // 0x007D5744-0x007D5748
		private void MarkGeometryAsDirty(); // 0x007CE320-0x007CE388
		public virtual void Rebuild(CanvasUpdate update); // 0x007D5748-0x007D5758
		public virtual void LayoutComplete(); // 0x007D5C64-0x007D5C68
		public virtual void GraphicUpdateComplete(); // 0x007D5C68-0x007D5C6C
		private void UpdateGeometry(); // 0x007D5758-0x007D5C64
		private void AssignPositioningIfNeeded(); // 0x007D08B0-0x007D1174
		private void OnFillVBO(Mesh vbo); // 0x007D5C6C-0x007D5E9C
		private void GenerateCaret(VertexHelper vbo, Vector2 roundingOffset); // 0x007D5E9C-0x007D670C
		private void CreateCursorVerts(); // 0x007D72AC-0x007D743C
		private void GenerateHightlight(VertexHelper vbo, Vector2 roundingOffset); // 0x007D670C-0x007D72AC
		protected char Validate(string text, int pos, char ch); // 0x007D1174-0x007D192C
		public void ActivateInputField(); // 0x007D743C-0x007D75A0
		private void ActivateInputFieldInternal(); // 0x007D05E0-0x007D08B0
		public override void OnSelect(BaseEventData eventData); // 0x007D75A0-0x007D75E4
		public virtual void OnPointerClick(PointerEventData eventData); // 0x007D75E4-0x007D7630
		public void DeactivateInputField(); // 0x007CFB20-0x007CFCA0
		public override void OnDeselect(BaseEventData eventData); // 0x007D7630-0x007D7660
		public virtual void OnSubmit(BaseEventData eventData); // 0x007D7660-0x007D76B4
		private void EnforceContentType(); // 0x007CEEB0-0x007CEF7C
		private void EnforceTextHOverflow(); // 0x007CD0E0-0x007CD19C
		private void SetToCustomIfContentTypeIsNot(params /* 0x003D7F6C-0x003D7F7C */ ContentType[] allowedContentTypes); // 0x007CF050-0x007CF0F8
		private void SetToCustom(); // 0x007CF18C-0x007CF1A4
		protected override void DoStateTransition(SelectionState state, bool instant); // 0x007D76B4-0x007D76E0
		public virtual void CalculateLayoutInputHorizontal(); // 0x007D76E0-0x007D76E4
		public virtual void CalculateLayoutInputVertical(); // 0x007D76E4-0x007D76E8
	}

	[AddComponentMenu] // 0x003D4580-0x003D462C
	[DisallowMultipleComponent] // 0x003D4580-0x003D462C
	[ExecuteAlways] // 0x003D4580-0x003D462C
	[RequireComponent] // 0x003D4580-0x003D462C
	public class Mask : UIBehaviour, ICanvasRaycastFilter, IMaterialModifier // TypeDefIndex: 2664
	{
		// Fields
		[NonSerialized]
		private RectTransform m_RectTransform; // 0x18
		[SerializeField] // 0x003D6708-0x003D6718
		private bool m_ShowMaskGraphic; // 0x20
		[NonSerialized]
		private Graphic m_Graphic; // 0x28
		[NonSerialized]
		private Material m_MaskMaterial; // 0x30
		[NonSerialized]
		private Material m_UnmaskMaterial; // 0x38
	
		// Properties
		public RectTransform rectTransform { get; } // 0x0079FA64-0x0079FAC4 
		public bool showMaskGraphic { get; set; } // 0x0079FAC4-0x0079FACC 0x0079FACC-0x0079FBAC
		public Graphic graphic { get; } // 0x0079FBAC-0x0079FC0C 
	
		// Constructors
		protected Mask(); // 0x0079FA54-0x0079FA64
	
		// Methods
		public virtual bool MaskEnabled(); // 0x0079FC0C-0x0079FCAC
		[Obsolete] // 0x003D799C-0x003D79D4
		public virtual void OnSiblingGraphicEnabledDisabled(); // 0x0079FCAC-0x0079FCB0
		protected override void OnEnable(); // 0x0079FCB0-0x0079FDA8
		protected override void OnDisable(); // 0x007A0034-0x007A01A4
		public virtual bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera); // 0x007A0390-0x007A0458
		public virtual Material GetModifiedMaterial(Material baseMaterial); // 0x007A0458-0x007A072C
	}

	public abstract class MaskableGraphic : Graphic, IClippable, IMaskable, IMaterialModifier // TypeDefIndex: 2665
	{
		// Fields
		[NonSerialized]
		protected bool m_ShouldRecalculateStencil; // 0x79
		[NonSerialized]
		protected Material m_MaskMaterial; // 0x80
		[NonSerialized]
		private RectMask2D m_ParentMask; // 0x88
		[NonSerialized]
		private bool m_Maskable; // 0x90
		[NonSerialized]
		[EditorBrowsable] // 0x003D6718-0x003D676C
		[Obsolete] // 0x003D6718-0x003D676C
		protected bool m_IncludeForMasking; // 0x91
		[SerializeField] // 0x003D676C-0x003D677C
		private CullStateChangedEvent m_OnCullStateChanged; // 0x98
		[NonSerialized]
		[EditorBrowsable] // 0x003D677C-0x003D67D0
		[Obsolete] // 0x003D677C-0x003D67D0
		protected bool m_ShouldRecalculate; // 0xA0
		[NonSerialized]
		protected int m_StencilValue; // 0xA4
		private readonly Vector3[] m_Corners; // 0xA8
	
		// Properties
		public CullStateChangedEvent onCullStateChanged { get; set; } // 0x007A25A8-0x007A25B0 0x007A25B0-0x007A25B8
		public bool maskable { get; set; } // 0x007A25B8-0x007A25C0 0x007A25C0-0x007A25F8
		private Rect rootCanvasRect { get; } // 0x007A27D8-0x007A2B08 
		GameObject IClippable.gameObject { get; } // 0x007A32F8-0x007A3300 
	
		// Nested types
		[Serializable]
		public class CullStateChangedEvent : UnityEvent<bool> // TypeDefIndex: 2666
		{
			// Constructors
			public CullStateChangedEvent(); // 0x007A2558-0x007A25A8
		}
	
		// Constructors
		protected MaskableGraphic(); // 0x007A24A0-0x007A2558
	
		// Methods
		public virtual Material GetModifiedMaterial(Material baseMaterial); // 0x007A25F8-0x007A2778
		public virtual void Cull(Rect clipRect, bool validRect); // 0x007A2778-0x007A27D8
		private void UpdateCull(bool cull); // 0x007A2B08-0x007A2C0C
		public virtual void SetClipRect(Rect clipRect, bool validRect); // 0x007A2C0C-0x007A2C98
		protected override void OnEnable(); // 0x007A2C98-0x007A2D68
		protected override void OnDisable(); // 0x007A2EEC-0x007A2FEC
		protected override void OnTransformParentChanged(); // 0x007A2FEC-0x007A304C
		[EditorBrowsable] // 0x003D79D4-0x003D7A28
		[Obsolete] // 0x003D79D4-0x003D7A28
		public virtual void ParentMaskStateChanged(); // 0x007A304C-0x007A3050
		protected override void OnCanvasHierarchyChanged(); // 0x007A3050-0x007A30B0
		private void UpdateClipParent(); // 0x007A2D68-0x007A2EEC
		public virtual void RecalculateClipping(); // 0x007A326C-0x007A3270
		public virtual void RecalculateMasking(); // 0x007A3270-0x007A32F8
	}

	public class MaskUtilities // TypeDefIndex: 2667
	{
		// Constructors
		public MaskUtilities(); // 0x007A17FC-0x007A1804
	
		// Methods
		public static void Notify2DMaskStateChanged(Component mask); // 0x007A1804-0x007A1A94
		public static void NotifyStencilStateChanged(Component mask); // 0x0079FDA8-0x007A0034
		public static Transform FindRootSortOverrideCanvas(Transform start); // 0x007A072C-0x007A08D8
		public static int GetStencilDepth(Transform transform, Transform stopAfter); // 0x007A08D8-0x007A0BC4
		public static bool IsDescendantOrSelf(Transform father, Transform child); // 0x007A1A94-0x007A1C34
		public static RectMask2D GetRectMaskForClippable(IClippable clippable); // 0x007A1C34-0x007A2108
		public static void GetRectMasksForClip(RectMask2D clipper, List<RectMask2D> masks); // 0x007A2108-0x007A24A0
	}

	internal static class Misc // TypeDefIndex: 2668
	{
		// Methods
		public static void Destroy(UnityEngine.Object obj); // 0x007A3300-0x007A342C
		public static void DestroyImmediate(UnityEngine.Object obj); // 0x007A342C-0x007A3554
	}

	[Serializable]
	public struct Navigation : IEquatable<Navigation> // TypeDefIndex: 2669
	{
		// Fields
		[SerializeField] // 0x003D67D0-0x003D67E0
		private Mode m_Mode; // 0x00
		[SerializeField] // 0x003D67E0-0x003D67F0
		private Selectable m_SelectOnUp; // 0x08
		[SerializeField] // 0x003D67F0-0x003D6800
		private Selectable m_SelectOnDown; // 0x10
		[SerializeField] // 0x003D6800-0x003D6810
		private Selectable m_SelectOnLeft; // 0x18
		[SerializeField] // 0x003D6810-0x003D6820
		private Selectable m_SelectOnRight; // 0x20
	
		// Properties
		public Mode mode { get; set; } // 0x007A3554-0x007A3564 0x007A3564-0x007A356C
		public Selectable selectOnUp { get; set; } // 0x007A356C-0x007A357C 0x007A357C-0x007A3584
		public Selectable selectOnDown { get; set; } // 0x007A3584-0x007A3594 0x007A3594-0x007A359C
		public Selectable selectOnLeft { get; set; } // 0x007A359C-0x007A35AC 0x007A35AC-0x007A35B4
		public Selectable selectOnRight { get; set; } // 0x007A35B4-0x007A35C4 0x007A35C4-0x007A35CC
		public static Navigation defaultNavigation { get; } // 0x007A35CC-0x007A3734 
	
		// Nested types
		[Flags] // 0x003D462C-0x003D463C
		public enum Mode // TypeDefIndex: 2670
		{
			None = 0,
			Horizontal = 1,
			Vertical = 2,
			Automatic = 3,
			Explicit = 4
		}
	
		// Methods
		public bool Equals(Navigation other); // 0x007A3734-0x007A3774
	}

	[AddComponentMenu] // 0x003D463C-0x003D4678
	public class RawImage : MaskableGraphic // TypeDefIndex: 2671
	{
		// Fields
		[FormerlySerializedAs] // 0x003D6820-0x003D686C
		[SerializeField] // 0x003D6820-0x003D686C
		private Texture m_Texture; // 0xB0
		[SerializeField] // 0x003D686C-0x003D687C
		private Rect m_UVRect; // 0xB8
	
		// Properties
		public override Texture mainTexture { get; } // 0x007A4638-0x007A47CC 
		public Texture texture { get; set; } // 0x007A47CC-0x007A47D4 0x007A47D4-0x007A4890
		public Rect uvRect { get; set; } // 0x007A4890-0x007A489C 0x007A489C-0x007A492C
	
		// Constructors
		protected RawImage(); // 0x007A45C4-0x007A4638
	
		// Methods
		public override void SetNativeSize(); // 0x007A492C-0x007A4B2C
		protected override void OnPopulateMesh(VertexHelper vh); // 0x007A4B2C-0x007A4FD8
	}

	[AddComponentMenu] // 0x003D4678-0x003D4724
	[DisallowMultipleComponent] // 0x003D4678-0x003D4724
	[ExecuteAlways] // 0x003D4678-0x003D4724
	[RequireComponent] // 0x003D4678-0x003D4724
	public class RectMask2D : UIBehaviour, IClipper, ICanvasRaycastFilter // TypeDefIndex: 2672
	{
		// Fields
		[NonSerialized]
		private readonly RectangularVertexClipper m_VertexClipper; // 0x18
		[NonSerialized]
		private RectTransform m_RectTransform; // 0x20
		[NonSerialized]
		private HashSet<IClippable> m_ClipTargets; // 0x28
		[NonSerialized]
		private bool m_ShouldRecalculateClipRects; // 0x30
		[NonSerialized]
		private List<RectMask2D> m_Clippers; // 0x38
		[NonSerialized]
		private Rect m_LastClipRectCanvasSpace; // 0x40
		[NonSerialized]
		private bool m_ForceClip; // 0x50
		[NonSerialized]
		private Canvas m_Canvas; // 0x58
		private Vector3[] m_Corners; // 0x60
	
		// Properties
		private Canvas Canvas { get; } // 0x007A530C-0x007A54A8 
		public Rect canvasRect { get; } // 0x007A54A8-0x007A54FC 
		public RectTransform rectTransform { get; } // 0x007A54FC-0x007A555C 
		private Rect rootCanvasRect { get; } // 0x007A59F0-0x007A5CAC 
	
		// Constructors
		protected RectMask2D(); // 0x007A51D0-0x007A529C
	
		// Methods
		protected override void OnEnable(); // 0x007A5848-0x007A5884
		protected override void OnDisable(); // 0x007A5884-0x007A5928
		public virtual bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera); // 0x007A5928-0x007A59F0
		public virtual void PerformClipping(); // 0x007A5CAC-0x007A6100
		public void AddClippable(IClippable clippable); // 0x007A31B8-0x007A326C
		public void RemoveClippable(IClippable clippable); // 0x007A30B0-0x007A31B8
		protected override void OnTransformParentChanged(); // 0x007A6100-0x007A612C
		protected override void OnCanvasHierarchyChanged(); // 0x007A612C-0x007A615C
	}

	[AddComponentMenu] // 0x003D4724-0x003D47B0
	[RequireComponent] // 0x003D4724-0x003D47B0
	public class Scrollbar : Selectable, IBeginDragHandler, IDragHandler, IInitializePotentialDragHandler, ICanvasElement // TypeDefIndex: 2673
	{
		// Fields
		[SerializeField] // 0x003D687C-0x003D688C
		private RectTransform m_HandleRect; // 0xD8
		[SerializeField] // 0x003D688C-0x003D689C
		private Direction m_Direction; // 0xE0
		[Range] // 0x003D689C-0x003D68DC
		[SerializeField] // 0x003D689C-0x003D68DC
		private float m_Value; // 0xE4
		[Range] // 0x003D68DC-0x003D691C
		[SerializeField] // 0x003D68DC-0x003D691C
		private float m_Size; // 0xE8
		[Range] // 0x003D691C-0x003D695C
		[SerializeField] // 0x003D691C-0x003D695C
		private int m_NumberOfSteps; // 0xEC
		[SerializeField] // 0x003D695C-0x003D6998
		[Space] // 0x003D695C-0x003D6998
		private ScrollEvent m_OnValueChanged; // 0xF0
		private RectTransform m_ContainerRect; // 0xF8
		private Vector2 m_Offset; // 0x100
		private DrivenRectTransformTracker m_Tracker; // 0x108
		private Coroutine m_PointerDownRepeat; // 0x110
		private bool isPointerDownAndNotDragging; // 0x118
	
		// Properties
		public RectTransform handleRect { get; set; } // 0x007AE95C-0x007AE964 0x007AE964-0x007AE9E8
		public Direction direction { get; set; } // 0x007AECD8-0x007AECE0 0x007AECE0-0x007AED5C
		public float value { get; set; } // 0x007AED5C-0x007AEE68 0x007ACEE8-0x007ACEF0
		public float size { get; set; } // 0x007AEE70-0x007AEE78 0x007ACD84-0x007ACE2C
		public int numberOfSteps { get; set; } // 0x007AEE78-0x007AEE80 0x007AEE80-0x007AEF0C
		public ScrollEvent onValueChanged { get; set; } // 0x007AA498-0x007AA4A0 0x007AEF0C-0x007AEF14
		private float stepSize { get; } // 0x007AEF14-0x007AEF40 
		private Axis axis { get; } // 0x007AF258-0x007AF274 
		private bool reverseValue { get; } // 0x007AF274-0x007AF288 
		Transform ICanvasElement.transform { get; } // 0x007B06F4-0x007B06FC 
	
		// Nested types
		public enum Direction // TypeDefIndex: 2674
		{
			LeftToRight = 0,
			RightToLeft = 1,
			BottomToTop = 2,
			TopToBottom = 3
		}
	
		[Serializable]
		public class ScrollEvent : UnityEvent<float> // TypeDefIndex: 2675
		{
			// Constructors
			public ScrollEvent(); // 0x007AE828-0x007AE878
		}
	
		private enum Axis // TypeDefIndex: 2676
		{
			Horizontal = 0,
			Vertical = 1
		}
	
		[CompilerGenerated] // 0x003D5034-0x003D5044
		private sealed class <ClickRepeat>c__Iterator0 : IEnumerator<object> // TypeDefIndex: 2677
		{
			// Fields
			internal PointerEventData eventData; // 0x10
			internal Scrollbar $this; // 0x18
			internal object $current; // 0x20
			internal bool $disposing; // 0x28
			internal int $PC; // 0x2C
	
			// Properties
			object IEnumerator<object>.Current { [DebuggerHidden] /* 0x003D7EDC-0x003D7EEC */ get; } // 0x007B09B8-0x007B09C0 
			object IEnumerator.Current { [DebuggerHidden] /* 0x003D7EEC-0x003D7EFC */ get; } // 0x007B09C0-0x007B09C8 
	
			// Constructors
			[DebuggerHidden] // 0x003D7ECC-0x003D7EDC
			public <ClickRepeat>c__Iterator0(); // 0x007AFBD0-0x007AFBD8
	
			// Methods
			public bool MoveNext(); // 0x007B06FC-0x007B09B8
			[DebuggerHidden] // 0x003D7EFC-0x003D7F0C
			public void Dispose(); // 0x007B09C8-0x007B09DC
			[DebuggerHidden] // 0x003D7F0C-0x003D7F1C
			public void Reset(); // 0x007B09DC-0x007B0A44
		}
	
		// Constructors
		protected Scrollbar(); // 0x007AE764-0x007AE828
	
		// Methods
		public virtual void Rebuild(CanvasUpdate executing); // 0x007AEF40-0x007AEF44
		public virtual void LayoutComplete(); // 0x007AEF44-0x007AEF48
		public virtual void GraphicUpdateComplete(); // 0x007AEF48-0x007AEF4C
		protected override void OnEnable(); // 0x007AEF4C-0x007AEF88
		protected override void OnDisable(); // 0x007AF138-0x007AF164
		private void UpdateCachedReferences(); // 0x007AE9E8-0x007AEB04
		private void Set(float input); // 0x007AEE68-0x007AEE70
		private void Set(float input, bool sendCallback); // 0x007AF034-0x007AF138
		protected override void OnRectTransformDimensionsChange(); // 0x007AF210-0x007AF258
		private void UpdateVisuals(); // 0x007AEB04-0x007AECD8
		private void UpdateDrag(PointerEventData eventData); // 0x007AF288-0x007AF5D8
		private bool MayDrag(PointerEventData eventData); // 0x007AF5D8-0x007AF64C
		public virtual void OnBeginDrag(PointerEventData eventData); // 0x007AF64C-0x007AF8D4
		public virtual void OnDrag(PointerEventData eventData); // 0x007AF8D4-0x007AF980
		public override void OnPointerDown(PointerEventData eventData); // 0x007AF980-0x007AF9DC
		[DebuggerHidden] // 0x003D7A28-0x003D7A38
		protected IEnumerator ClickRepeat(PointerEventData eventData); // 0x007AFB3C-0x007AFBD0
		public override void OnPointerUp(PointerEventData eventData); // 0x007AFBD8-0x007AFBFC
		public override void OnMove(AxisEventData eventData); // 0x007AFC50-0x007AFEB0
		public override Selectable FindSelectableOnLeft(); // 0x007AFF60-0x007AFF84
		public override Selectable FindSelectableOnRight(); // 0x007B00E8-0x007B010C
		public override Selectable FindSelectableOnUp(); // 0x007B0254-0x007B0278
		public override Selectable FindSelectableOnDown(); // 0x007B03C0-0x007B03E4
		public virtual void OnInitializePotentialDrag(PointerEventData eventData); // 0x007B052C-0x007B0560
		public void SetDirection(Direction direction, bool includeRectLayouts); // 0x007B0560-0x007B06F4
	}

	[AddComponentMenu] // 0x003D47B0-0x003D486C
	[DisallowMultipleComponent] // 0x003D47B0-0x003D486C
	[ExecuteAlways] // 0x003D47B0-0x003D486C
	[RequireComponent] // 0x003D47B0-0x003D486C
	[SelectionBase] // 0x003D47B0-0x003D486C
	public class ScrollRect : UIBehaviour, IInitializePotentialDragHandler, IBeginDragHandler, IEndDragHandler, IDragHandler, IScrollHandler, ICanvasElement, ILayoutElement, ILayoutGroup // TypeDefIndex: 2678
	{
		// Fields
		[SerializeField] // 0x003D6998-0x003D69A8
		private RectTransform m_Content; // 0x18
		[SerializeField] // 0x003D69A8-0x003D69B8
		private bool m_Horizontal; // 0x20
		[SerializeField] // 0x003D69B8-0x003D69C8
		private bool m_Vertical; // 0x21
		[SerializeField] // 0x003D69C8-0x003D69D8
		private MovementType m_MovementType; // 0x24
		[SerializeField] // 0x003D69D8-0x003D69E8
		private float m_Elasticity; // 0x28
		[SerializeField] // 0x003D69E8-0x003D69F8
		private bool m_Inertia; // 0x2C
		[SerializeField] // 0x003D69F8-0x003D6A08
		private float m_DecelerationRate; // 0x30
		[SerializeField] // 0x003D6A08-0x003D6A18
		private float m_ScrollSensitivity; // 0x34
		[SerializeField] // 0x003D6A18-0x003D6A28
		private RectTransform m_Viewport; // 0x38
		[SerializeField] // 0x003D6A28-0x003D6A38
		private Scrollbar m_HorizontalScrollbar; // 0x40
		[SerializeField] // 0x003D6A38-0x003D6A48
		private Scrollbar m_VerticalScrollbar; // 0x48
		[SerializeField] // 0x003D6A48-0x003D6A58
		private ScrollbarVisibility m_HorizontalScrollbarVisibility; // 0x50
		[SerializeField] // 0x003D6A58-0x003D6A68
		private ScrollbarVisibility m_VerticalScrollbarVisibility; // 0x54
		[SerializeField] // 0x003D6A68-0x003D6A78
		private float m_HorizontalScrollbarSpacing; // 0x58
		[SerializeField] // 0x003D6A78-0x003D6A88
		private float m_VerticalScrollbarSpacing; // 0x5C
		[SerializeField] // 0x003D6A88-0x003D6A98
		private ScrollRectEvent m_OnValueChanged; // 0x60
		private Vector2 m_PointerStartLocalCursor; // 0x68
		protected Vector2 m_ContentStartPosition; // 0x70
		private RectTransform m_ViewRect; // 0x78
		protected Bounds m_ContentBounds; // 0x80
		private Bounds m_ViewBounds; // 0x98
		private Vector2 m_Velocity; // 0xB0
		private bool m_Dragging; // 0xB8
		private Vector2 m_PrevPosition; // 0xBC
		private Bounds m_PrevContentBounds; // 0xC4
		private Bounds m_PrevViewBounds; // 0xDC
		[NonSerialized]
		private bool m_HasRebuiltLayout; // 0xF4
		private bool m_HSliderExpand; // 0xF5
		private bool m_VSliderExpand; // 0xF6
		private float m_HSliderHeight; // 0xF8
		private float m_VSliderWidth; // 0xFC
		[NonSerialized]
		private RectTransform m_Rect; // 0x100
		private RectTransform m_HorizontalScrollbarRect; // 0x108
		private RectTransform m_VerticalScrollbarRect; // 0x110
		private DrivenRectTransformTracker m_Tracker; // 0x118
		private readonly Vector3[] m_Corners; // 0x120
	
		// Properties
		public RectTransform content { get; set; } // 0x007AA1A4-0x007AA1AC 0x007AA1AC-0x007AA1B4
		public bool horizontal { get; set; } // 0x007AA1B4-0x007AA1BC 0x007AA1BC-0x007AA1C8
		public bool vertical { get; set; } // 0x007AA1C8-0x007AA1D0 0x007AA1D0-0x007AA1DC
		public MovementType movementType { get; set; } // 0x007AA1DC-0x007AA1E4 0x007AA1E4-0x007AA1EC
		public float elasticity { get; set; } // 0x007AA1EC-0x007AA1F4 0x007AA1F4-0x007AA1FC
		public bool inertia { get; set; } // 0x007AA1FC-0x007AA204 0x007AA204-0x007AA210
		public float decelerationRate { get; set; } // 0x007AA210-0x007AA218 0x007AA218-0x007AA220
		public float scrollSensitivity { get; set; } // 0x007AA220-0x007AA228 0x007AA228-0x007AA230
		public RectTransform viewport { get; set; } // 0x007AA230-0x007AA238 0x007AA238-0x007AA240
		public Scrollbar horizontalScrollbar { get; set; } // 0x007AA300-0x007AA308 0x007AA308-0x007AA498
		public Scrollbar verticalScrollbar { get; set; } // 0x007AA4A0-0x007AA4A8 0x007AA4A8-0x007AA638
		public ScrollbarVisibility horizontalScrollbarVisibility { get; set; } // 0x007AA638-0x007AA640 0x007AA640-0x007AA648
		public ScrollbarVisibility verticalScrollbarVisibility { get; set; } // 0x007AA648-0x007AA650 0x007AA650-0x007AA658
		public float horizontalScrollbarSpacing { get; set; } // 0x007AA658-0x007AA660 0x007AA660-0x007AA668
		public float verticalScrollbarSpacing { get; set; } // 0x007AA6FC-0x007AA704 0x007AA704-0x007AA70C
		public ScrollRectEvent onValueChanged { get; set; } // 0x007AA70C-0x007AA714 0x007AA714-0x007AA71C
		protected RectTransform viewRect { get; } // 0x007AA71C-0x007AA854 
		public Vector2 velocity { get; set; } // 0x007AA854-0x007AA85C 0x007AA85C-0x007AA864
		private RectTransform rectTransform { get; } // 0x007AA864-0x007AA8FC 
		public Vector2 normalizedPosition { get; set; } // 0x007ACCE0-0x007ACD38 0x007ACFAC-0x007AD000
		public float horizontalNormalizedPosition { get; set; } // 0x007ACE2C-0x007ACEE8 0x007AD000-0x007AD014
		public float verticalNormalizedPosition { get; set; } // 0x007ACEF0-0x007ACFAC 0x007AD014-0x007AD028
		private bool hScrollingNeeded { get; } // 0x007AD2A0-0x007AD308 
		private bool vScrollingNeeded { get; } // 0x007AD308-0x007AD370 
		public virtual float minWidth { get; } // 0x007AD378-0x007AD380 
		public virtual float preferredWidth { get; } // 0x007AD380-0x007AD388 
		public virtual float flexibleWidth { get; } // 0x007AD388-0x007AD390 
		public virtual float minHeight { get; } // 0x007AD390-0x007AD398 
		public virtual float preferredHeight { get; } // 0x007AD398-0x007AD3A0 
		public virtual float flexibleHeight { get; } // 0x007AD3A0-0x007AD3A8 
		public virtual int layoutPriority { get; } // 0x007AD3A8-0x007AD3B0 
		Transform ICanvasElement.transform { get; } // 0x007AE75C-0x007AE764 
	
		// Nested types
		public enum MovementType // TypeDefIndex: 2679
		{
			Unrestricted = 0,
			Elastic = 1,
			Clamped = 2
		}
	
		public enum ScrollbarVisibility // TypeDefIndex: 2680
		{
			Permanent = 0,
			AutoHide = 1,
			AutoHideAndExpandViewport = 2
		}
	
		[Serializable]
		public class ScrollRectEvent : UnityEvent<Vector2> // TypeDefIndex: 2681
		{
			// Constructors
			public ScrollRectEvent(); // 0x007AA154-0x007AA1A4
		}
	
		// Constructors
		protected ScrollRect(); // 0x007AA060-0x007AA154
	
		// Methods
		public virtual void Rebuild(CanvasUpdate executing); // 0x007AA8FC-0x007AA9B0
		public virtual void LayoutComplete(); // 0x007AB6D4-0x007AB6D8
		public virtual void GraphicUpdateComplete(); // 0x007AB6D8-0x007AB6DC
		private void UpdateCachedData(); // 0x007AA9B0-0x007AADD8
		protected override void OnEnable(); // 0x007AB6DC-0x007AB898
		protected override void OnDisable(); // 0x007AB898-0x007ABAC0
		public override bool IsActive(); // 0x007ABAC0-0x007ABB50
		private void EnsureLayoutHasRebuilt(); // 0x007ABB50-0x007ABBD4
		public virtual void StopMovement(); // 0x007ABBD4-0x007ABC40
		public virtual void OnScroll(PointerEventData data); // 0x007ABC40-0x007ABEF4
		public virtual void OnInitializePotentialDrag(PointerEventData eventData); // 0x007ABF30-0x007ABFC4
		public virtual void OnBeginDrag(PointerEventData eventData); // 0x007ABFC4-0x007AC140
		public virtual void OnEndDrag(PointerEventData eventData); // 0x007AC140-0x007AC180
		public virtual void OnDrag(PointerEventData eventData); // 0x007AC180-0x007AC410
		protected virtual void SetContentAnchoredPosition(Vector2 position); // 0x007AC4BC-0x007AC600
		protected virtual void LateUpdate(); // 0x007AC600-0x007ACCE0
		protected void UpdatePrevData(); // 0x007AB5F0-0x007AB6D4
		private void UpdateScrollbars(Vector2 offset); // 0x007AB384-0x007AB5F0
		private void SetHorizontalNormalizedPosition(float value); // 0x007AD028-0x007AD03C
		private void SetVerticalNormalizedPosition(float value); // 0x007AD03C-0x007AD050
		protected virtual void SetNormalizedPosition(float value, int axis); // 0x007AD050-0x007AD29C
		private static float RubberDelta(float overStretching, float viewSize); // 0x007AC410-0x007AC4BC
		protected override void OnRectTransformDimensionsChange(); // 0x007AD29C-0x007AD2A0
		public virtual void CalculateLayoutInputHorizontal(); // 0x007AD370-0x007AD374
		public virtual void CalculateLayoutInputVertical(); // 0x007AD374-0x007AD378
		public virtual void SetLayoutHorizontal(); // 0x007AD3B0-0x007ADA94
		public virtual void SetLayoutVertical(); // 0x007ADBC4-0x007ADD38
		private void UpdateScrollbarVisibility(); // 0x007ACD38-0x007ACD84
		private static void UpdateOneScrollbarVisibility(bool xScrollingNeeded, bool xAxisEnabled, ScrollbarVisibility scrollbarVisibility, Scrollbar scrollbar); // 0x007AE104-0x007AE244
		private void UpdateScrollbarLayout(); // 0x007ADD38-0x007AE104
		protected void UpdateBounds(); // 0x007AADD8-0x007AB384
		internal static void AdjustBounds(ref Bounds viewBounds, ref Vector2 contentPivot, ref Vector3 contentSize, ref Vector3 contentPos); // 0x007AE244-0x007AE370
		private Bounds GetBounds(); // 0x007ADA94-0x007ADBC4
		internal static Bounds InternalGetBounds(Vector3[] corners, ref Matrix4x4 viewWorldToLocalMatrix); // 0x007AE370-0x007AE578
		private Vector2 CalculateOffset(Vector2 delta); // 0x007ABEF4-0x007ABF30
		internal static Vector2 InternalCalculateOffset(ref Bounds viewBounds, ref Bounds contentBounds, bool horizontal, bool vertical, MovementType movementType, ref Vector2 delta); // 0x007AE578-0x007AE75C
		protected void SetDirty(); // 0x007AA668-0x007AA6FC
		protected void SetDirtyCaching(); // 0x007AA240-0x007AA300
	}

	[AddComponentMenu] // 0x003D486C-0x003D48DC
	[DisallowMultipleComponent] // 0x003D486C-0x003D48DC
	[ExecuteAlways] // 0x003D486C-0x003D48DC
	[SelectionBase] // 0x003D486C-0x003D48DC
	public class Selectable : UIBehaviour, IMoveHandler, IPointerDownHandler, IPointerUpHandler, IPointerEnterHandler, IPointerExitHandler, ISelectHandler, IDeselectHandler // TypeDefIndex: 2682
	{
		// Fields
		private static List<Selectable> s_List; // 0x00
		[FormerlySerializedAs] // 0x003D6A98-0x003D6AE4
		[SerializeField] // 0x003D6A98-0x003D6AE4
		private Navigation m_Navigation; // 0x18
		[FormerlySerializedAs] // 0x003D6AE4-0x003D6B30
		[SerializeField] // 0x003D6AE4-0x003D6B30
		private Transition m_Transition; // 0x40
		[FormerlySerializedAs] // 0x003D6B30-0x003D6B7C
		[SerializeField] // 0x003D6B30-0x003D6B7C
		private ColorBlock m_Colors; // 0x44
		[FormerlySerializedAs] // 0x003D6B7C-0x003D6BC8
		[SerializeField] // 0x003D6B7C-0x003D6BC8
		private SpriteState m_SpriteState; // 0x90
		[FormerlySerializedAs] // 0x003D6BC8-0x003D6C14
		[SerializeField] // 0x003D6BC8-0x003D6C14
		private AnimationTriggers m_AnimationTriggers; // 0xA8
		[SerializeField] // 0x003D6C14-0x003D6C60
		[Tooltip] // 0x003D6C14-0x003D6C60
		private bool m_Interactable; // 0xB0
		[FormerlySerializedAs] // 0x003D6C60-0x003D6CD0
		[FormerlySerializedAs] // 0x003D6C60-0x003D6CD0
		[SerializeField] // 0x003D6C60-0x003D6CD0
		private Graphic m_TargetGraphic; // 0xB8
		private bool m_GroupsAllowInteraction; // 0xC0
		private SelectionState m_CurrentSelectionState; // 0xC4
		[CompilerGenerated] // 0x003D6CD0-0x003D6D0C
		[DebuggerBrowsable] // 0x003D6CD0-0x003D6D0C
		private bool <isPointerInside>k__BackingField; // 0xC8
		[CompilerGenerated] // 0x003D6D0C-0x003D6D48
		[DebuggerBrowsable] // 0x003D6D0C-0x003D6D48
		private bool <isPointerDown>k__BackingField; // 0xC9
		[CompilerGenerated] // 0x003D6D48-0x003D6D84
		[DebuggerBrowsable] // 0x003D6D48-0x003D6D84
		private bool <hasSelection>k__BackingField; // 0xCA
		private readonly List<CanvasGroup> m_CanvasGroupCache; // 0xD0
	
		// Properties
		public static List<Selectable> allSelectables { get; } // 0x007B0A44-0x007B0AAC 
		public Navigation navigation { get; set; } // 0x007AFF84-0x007AFFA0 0x007B0AAC-0x007B0B50
		public Transition transition { get; set; } // 0x007B0B58-0x007B0B60 0x007B0B60-0x007B0BE0
		public ColorBlock colors { get; set; } // 0x007B0BE0-0x007B0C00 0x007B0C00-0x007B0CA4
		public SpriteState spriteState { get; set; } // 0x007B0CA4-0x007B0CB8 0x007B0CB8-0x007B0D54
		public AnimationTriggers animationTriggers { get; set; } // 0x007B0D54-0x007B0D5C 0x007B0D5C-0x007B0DDC
		public Graphic targetGraphic { get; set; } // 0x007B0DDC-0x007B0DE4 0x007B0DE4-0x007B0E64
		public bool interactable { get; set; } // 0x007B0E64-0x007B0E6C 0x007B0E6C-0x007B1034
		private bool isPointerInside { [CompilerGenerated] /* 0x003D7A38-0x003D7A48 */ get; [CompilerGenerated] /* 0x003D7A48-0x003D7A58 */ set; } // 0x007B1094-0x007B109C 0x007B109C-0x007B10A8
		private bool isPointerDown { [CompilerGenerated] /* 0x003D7A58-0x003D7A68 */ get; [CompilerGenerated] /* 0x003D7A68-0x003D7A78 */ set; } // 0x007B10A8-0x007B10B0 0x007B10B0-0x007B10BC
		private bool hasSelection { [CompilerGenerated] /* 0x003D7A78-0x003D7A88 */ get; [CompilerGenerated] /* 0x003D7A88-0x003D7A98 */ set; } // 0x007B10BC-0x007B10C4 0x007B10C4-0x007B10D0
		public UnityEngine.UI.Image image { get; set; } // 0x007B10D0-0x007B1154 0x007B1154-0x007B115C
		public Animator animator { get; } // 0x007B115C-0x007B11AC 
		protected SelectionState currentSelectionState { get; } // 0x007B14D8-0x007B14E0 
	
		// Nested types
		public enum Transition // TypeDefIndex: 2683
		{
			None = 0,
			ColorTint = 1,
			SpriteSwap = 2,
			Animation = 3
		}
	
		protected enum SelectionState // TypeDefIndex: 2684
		{
			Normal = 0,
			Highlighted = 1,
			Pressed = 2,
			Disabled = 3
		}
	
		// Constructors
		protected Selectable(); // 0x007AE878-0x007AE95C
		static Selectable(); // 0x007B2918-0x007B298C
	
		// Methods
		protected override void Awake(); // 0x007B11AC-0x007B123C
		protected override void OnCanvasGroupChanged(); // 0x007B123C-0x007B1438
		public virtual bool IsInteractable(); // 0x007B1438-0x007B1458
		protected override void OnDidApplyAnimationProperties(); // 0x007B1458-0x007B1460
		protected override void OnEnable(); // 0x007AEF88-0x007AF034
		private void OnSetProperty(); // 0x007B0B50-0x007B0B58
		protected override void OnDisable(); // 0x007AF164-0x007AF210
		protected virtual void InstantClearState(); // 0x007B14E0-0x007B1580
		protected virtual void DoStateTransition(SelectionState state, bool instant); // 0x007B19A0-0x007B1C30
		public Selectable FindSelectable(Vector3 dir); // 0x007B1C30-0x007B2158
		private static Vector3 GetPointOnRectEdge(RectTransform rect, Vector2 dir); // 0x007B2158-0x007B23A4
		private void Navigate(AxisEventData eventData, Selectable sel); // 0x007B23A4-0x007B247C
		public virtual Selectable FindSelectableOnLeft(); // 0x007AFFA0-0x007B00E8
		public virtual Selectable FindSelectableOnRight(); // 0x007B010C-0x007B0254
		public virtual Selectable FindSelectableOnUp(); // 0x007B0278-0x007B03C0
		public virtual Selectable FindSelectableOnDown(); // 0x007B03E4-0x007B052C
		public virtual void OnMove(AxisEventData eventData); // 0x007AFEB0-0x007AFF60
		private void StartColorTween(Color targetColor, bool instant); // 0x007B1580-0x007B169C
		private void DoSpriteSwap(Sprite newSprite); // 0x007B169C-0x007B175C
		private void TriggerAnimation(string triggername); // 0x007B175C-0x007B19A0
		protected bool IsHighlighted(BaseEventData eventData); // 0x007B247C-0x007B26B0
		[Obsolete] // 0x003D7A98-0x003D7AD4
		protected bool IsPressed(BaseEventData eventData); // 0x007B26F8-0x007B2740
		protected bool IsPressed(); // 0x007B26B0-0x007B26F8
		protected void UpdateSelectionState(BaseEventData eventData); // 0x007B1034-0x007B1094
		private void EvaluateAndTransitionToSelectionState(BaseEventData eventData); // 0x007B2740-0x007B27AC
		private void InternalEvaluateAndTransitionToSelectionState(bool instant); // 0x007B1460-0x007B14D8
		public virtual void OnPointerDown(PointerEventData eventData); // 0x007AF9DC-0x007AFB3C
		public virtual void OnPointerUp(PointerEventData eventData); // 0x007AFBFC-0x007AFC50
		public virtual void OnPointerEnter(PointerEventData eventData); // 0x007B27AC-0x007B27B8
		public virtual void OnPointerExit(PointerEventData eventData); // 0x007B27B8-0x007B27C0
		public virtual void OnSelect(BaseEventData eventData); // 0x007B27C0-0x007B27CC
		public virtual void OnDeselect(BaseEventData eventData); // 0x007B27CC-0x007B27D4
		public virtual void Select(); // 0x007B27D4-0x007B2918
	}

	internal static class SetPropertyUtility // TypeDefIndex: 2685
	{
		// Methods
		public static bool SetColor(ref Color currentValue, Color newValue); // 0x007B298C-0x007B29D4
		public static bool SetStruct<T>(ref T currentValue, T newValue)
			where T : struct;
		public static bool SetClass<T>(ref T currentValue, T newValue)
			where T : class;
	}

	[AddComponentMenu] // 0x003D48DC-0x003D4968
	[RequireComponent] // 0x003D48DC-0x003D4968
	public class Slider : Selectable, IDragHandler, IInitializePotentialDragHandler, ICanvasElement // TypeDefIndex: 2686
	{
		// Fields
		[SerializeField] // 0x003D6D84-0x003D6D94
		private RectTransform m_FillRect; // 0xD8
		[SerializeField] // 0x003D6D94-0x003D6DA4
		private RectTransform m_HandleRect; // 0xE0
		[SerializeField] // 0x003D6DA4-0x003D6DDC
		[Space] // 0x003D6DA4-0x003D6DDC
		private Direction m_Direction; // 0xE8
		[SerializeField] // 0x003D6DDC-0x003D6DEC
		private float m_MinValue; // 0xEC
		[SerializeField] // 0x003D6DEC-0x003D6DFC
		private float m_MaxValue; // 0xF0
		[SerializeField] // 0x003D6DFC-0x003D6E0C
		private bool m_WholeNumbers; // 0xF4
		[SerializeField] // 0x003D6E0C-0x003D6E1C
		protected float m_Value; // 0xF8
		[SerializeField] // 0x003D6E1C-0x003D6E54
		[Space] // 0x003D6E1C-0x003D6E54
		private SliderEvent m_OnValueChanged; // 0x100
		private UnityEngine.UI.Image m_FillImage; // 0x108
		private Transform m_FillTransform; // 0x110
		private RectTransform m_FillContainerRect; // 0x118
		private Transform m_HandleTransform; // 0x120
		private RectTransform m_HandleContainerRect; // 0x128
		private Vector2 m_Offset; // 0x130
		private DrivenRectTransformTracker m_Tracker; // 0x138
	
		// Properties
		public RectTransform fillRect { get; set; } // 0x007B2F4C-0x007B2F54 0x007B2F54-0x007B2FD8
		public RectTransform handleRect { get; set; } // 0x007B46C4-0x007B46CC 0x007B46CC-0x007B4750
		public Direction direction { get; set; } // 0x007B4750-0x007B4758 0x007B4758-0x007B47D4
		public float minValue { get; set; } // 0x007B47D4-0x007B47DC 0x007B47DC-0x007B4874
		public float maxValue { get; set; } // 0x007B4888-0x007B4890 0x007B4890-0x007B4928
		public bool wholeNumbers { get; set; } // 0x007B4928-0x007B4930 0x007B4930-0x007B49C8
		public virtual float value { get; set; } // 0x007B49C8-0x007B4AB4 0x007B4AB4-0x007B4AC8
		public float normalizedValue { get; set; } // 0x007B4AC8-0x007B4BAC 0x007B4BAC-0x007B4C48
		public SliderEvent onValueChanged { get; set; } // 0x007B4C48-0x007B4C50 0x007B4C50-0x007B4C58
		private float stepSize { get; } // 0x007B4C58-0x007B4C80 
		private Axis axis { get; } // 0x007B50B8-0x007B50D4 
		private bool reverseValue { get; } // 0x007B50A4-0x007B50B8 
		Transform ICanvasElement.transform { get; } // 0x007B5C7C-0x007B5CD0 
	
		// Nested types
		public enum Direction // TypeDefIndex: 2687
		{
			LeftToRight = 0,
			RightToLeft = 1,
			BottomToTop = 2,
			TopToBottom = 3
		}
	
		[Serializable]
		public class SliderEvent : UnityEvent<float> // TypeDefIndex: 2688
		{
			// Constructors
			public SliderEvent(); // 0x007B2EFC-0x007B2F4C
		}
	
		private enum Axis // TypeDefIndex: 2689
		{
			Horizontal = 0,
			Vertical = 1
		}
	
		// Constructors
		protected Slider(); // 0x007B2E3C-0x007B2EFC
	
		// Methods
		public virtual void Rebuild(CanvasUpdate executing); // 0x007B4C80-0x007B4C84
		public virtual void LayoutComplete(); // 0x007B4C84-0x007B4C88
		public virtual void GraphicUpdateComplete(); // 0x007B4C88-0x007B4C8C
		protected override void OnEnable(); // 0x007B4C8C-0x007B4CD4
		protected override void OnDisable(); // 0x007B4CD4-0x007B4D00
		protected override void OnDidApplyAnimationProperties(); // 0x007B4D00-0x007B4F7C
		private void UpdateCachedReferences(); // 0x007B2FD8-0x007B4384
		private float ClampValue(float input); // 0x007B4F7C-0x007B50A4
		private void Set(float input); // 0x007B4874-0x007B4888
		protected virtual void Set(float input, bool sendCallback); // 0x007B50D4-0x007B51A8
		protected override void OnRectTransformDimensionsChange(); // 0x007B51A8-0x007B51F0
		private void UpdateVisuals(); // 0x007B4384-0x007B46C4
		private void UpdateDrag(PointerEventData eventData, Camera cam); // 0x007B51F0-0x007B5498
		private bool MayDrag(PointerEventData eventData); // 0x007B5498-0x007B550C
		public override void OnPointerDown(PointerEventData eventData); // 0x007B550C-0x007B574C
		public virtual void OnDrag(PointerEventData eventData); // 0x007B574C-0x007B57A4
		public override void OnMove(AxisEventData eventData); // 0x007B57A4-0x007B5A24
		public override Selectable FindSelectableOnLeft(); // 0x007B5A24-0x007B5A48
		public override Selectable FindSelectableOnRight(); // 0x007B5A48-0x007B5A6C
		public override Selectable FindSelectableOnUp(); // 0x007B5A6C-0x007B5A90
		public override Selectable FindSelectableOnDown(); // 0x007B5A90-0x007B5AB4
		public virtual void OnInitializePotentialDrag(PointerEventData eventData); // 0x007B5AB4-0x007B5AE8
		public void SetDirection(Direction direction, bool includeRectLayouts); // 0x007B5AE8-0x007B5C7C
	}

	[Serializable]
	public struct SpriteState : IEquatable<SpriteState> // TypeDefIndex: 2690
	{
		// Fields
		[SerializeField] // 0x003D6E54-0x003D6E64
		private Sprite m_HighlightedSprite; // 0x00
		[SerializeField] // 0x003D6E64-0x003D6E74
		private Sprite m_PressedSprite; // 0x08
		[SerializeField] // 0x003D6E74-0x003D6E84
		private Sprite m_DisabledSprite; // 0x10
	
		// Properties
		public Sprite highlightedSprite { get; set; } // 0x007B5CD0-0x007B5CD8 0x007B5CD8-0x007B5CE0
		public Sprite pressedSprite { get; set; } // 0x007B5CE0-0x007B5CE8 0x007B5CE8-0x007B5CF0
		public Sprite disabledSprite { get; set; } // 0x007B5CF0-0x007B5CF8 0x007B5CF8-0x007B5E08
	
		// Methods
		public bool Equals(SpriteState other); // 0x007B5E08-0x007B5E40
	}

	public static class StencilMaterial // TypeDefIndex: 2691
	{
		// Fields
		private static List<MatEntry> m_List; // 0x00
	
		// Nested types
		private class MatEntry // TypeDefIndex: 2692
		{
			// Fields
			public Material baseMat; // 0x10
			public Material customMat; // 0x18
			public int count; // 0x20
			public int stencilId; // 0x24
			public StencilOp operation; // 0x28
			public CompareFunction compareFunction; // 0x2C
			public int readMask; // 0x30
			public int writeMask; // 0x34
			public bool useAlphaClip; // 0x38
			public ColorWriteMask colorMask; // 0x3C
	
			// Constructors
			public MatEntry(); // 0x007B5E48-0x007B5E58
		}
	
		// Constructors
		static StencilMaterial(); // 0x007B5FC0-0x007B6034
	
		// Methods
		[EditorBrowsable] // 0x003D7AD4-0x003D7B28
		[Obsolete] // 0x003D7AD4-0x003D7B28
		public static Material Add(Material baseMat, int stencilID); // 0x007B5E40-0x007B5E48
		public static Material Add(Material baseMat, int stencilID, StencilOp operation, CompareFunction compareFunction, ColorWriteMask colorWriteMask); // 0x007A0BC4-0x007A0C60
		public static Material Add(Material baseMat, int stencilID, StencilOp operation, CompareFunction compareFunction, ColorWriteMask colorWriteMask, int readMask, int writeMask); // 0x007A0C60-0x007A17FC
		public static void Remove(Material customMat); // 0x007A01A4-0x007A0390
		public static void ClearAll(); // 0x007B5E58-0x007B5FC0
	}

	[AddComponentMenu] // 0x003D4968-0x003D49A4
	public class Text : MaskableGraphic, ILayoutElement // TypeDefIndex: 2693
	{
		// Fields
		[SerializeField] // 0x003D6E84-0x003D6E94
		private FontData m_FontData; // 0xB0
		[SerializeField] // 0x003D6E94-0x003D6ED4
		[TextArea] // 0x003D6E94-0x003D6ED4
		protected string m_Text; // 0xB8
		private TextGenerator m_TextCache; // 0xC0
		private TextGenerator m_TextCacheForLayout; // 0xC8
		protected static Material s_DefaultText; // 0x00
		[NonSerialized]
		protected bool m_DisableFontTextureRebuiltCallback; // 0xD0
		private readonly UIVertex[] m_TempVerts; // 0xD8
	
		// Properties
		public TextGenerator cachedTextGenerator { get; } // 0x007B60C8-0x007B61A4 
		public TextGenerator cachedTextGeneratorForLayout { get; } // 0x007B61A4-0x007B6210 
		public override Texture mainTexture { get; } // 0x007B6210-0x007B63E8 
		public Font font { get; set; } // 0x007B63E8-0x007B6418 0x007B6540-0x007B665C
		public virtual string text { get; set; } // 0x007B665C-0x007B6664 0x007B6664-0x007B6740
		public bool supportRichText { get; set; } // 0x007B6740-0x007B6770 0x007B6770-0x007B6810
		public bool resizeTextForBestFit { get; set; } // 0x007B6810-0x007B6840 0x007B6840-0x007B68E0
		public int resizeTextMinSize { get; set; } // 0x007B68E0-0x007B6910 0x007B6910-0x007B69B0
		public int resizeTextMaxSize { get; set; } // 0x007B69B0-0x007B69E0 0x007B69E0-0x007B6A80
		public TextAnchor alignment { get; set; } // 0x007B6A80-0x007B6AB0 0x007B6AB0-0x007B6B50
		public bool alignByGeometry { get; set; } // 0x007B6B50-0x007B6B80 0x007B6B80-0x007B6C0C
		public int fontSize { get; set; } // 0x007B6C0C-0x007B6C3C 0x007B6C3C-0x007B6CDC
		public HorizontalWrapMode horizontalOverflow { get; set; } // 0x007B6CDC-0x007B6D0C 0x007B6D0C-0x007B6DAC
		public VerticalWrapMode verticalOverflow { get; set; } // 0x007B6DAC-0x007B6DDC 0x007B6DDC-0x007B6E7C
		public float lineSpacing { get; set; } // 0x007B6E7C-0x007B6EAC 0x007B6EAC-0x007B6F4C
		public FontStyle fontStyle { get; set; } // 0x007B6F4C-0x007B6F7C 0x007B6F7C-0x007B701C
		public float pixelsPerUnit { get; } // 0x007B701C-0x007B71D4 
		public virtual float minWidth { get; } // 0x007B81C0-0x007B81C8 
		public virtual float preferredWidth { get; } // 0x007B81C8-0x007B82C4 
		public virtual float flexibleWidth { get; } // 0x007B82C4-0x007B82CC 
		public virtual float minHeight { get; } // 0x007B82CC-0x007B82D4 
		public virtual float preferredHeight { get; } // 0x007B82D4-0x007B83BC 
		public virtual float flexibleHeight { get; } // 0x007B83BC-0x007B83C4 
		public virtual int layoutPriority { get; } // 0x007B83C4-0x007B83CC 
	
		// Constructors
		protected Text(); // 0x007B6034-0x007B60C8
		static Text(); // 0x007B83CC-0x007B841C
	
		// Methods
		public void FontTextureChanged(); // 0x007B6418-0x007B6540
		protected override void OnEnable(); // 0x007B71D4-0x007B7264
		protected override void OnDisable(); // 0x007B7264-0x007B72D4
		protected override void UpdateGeometry(); // 0x007B72D4-0x007B736C
		internal void AssignDefaultFont(); // 0x007B736C-0x007B73D0
		public TextGenerationSettings GetGenerationSettings(Vector2 extents); // 0x007B73D0-0x007B7730
		public static Vector2 GetTextAnchorPivot(TextAnchor anchor); // 0x007B7730-0x007B7868
		protected override void OnPopulateMesh(VertexHelper toFill); // 0x007B7868-0x007B7FF8
		public virtual void CalculateLayoutInputHorizontal(); // 0x007B81B8-0x007B81BC
		public virtual void CalculateLayoutInputVertical(); // 0x007B81BC-0x007B81C0
	}

	[AddComponentMenu] // 0x003D49A4-0x003D4A30
	[RequireComponent] // 0x003D49A4-0x003D4A30
	public class Toggle : Selectable, IPointerClickHandler, ISubmitHandler, ICanvasElement // TypeDefIndex: 2694
	{
		// Fields
		public ToggleTransition toggleTransition; // 0xD8
		public Graphic graphic; // 0xE0
		[SerializeField] // 0x003D6ED4-0x003D6EE4
		private ToggleGroup m_Group; // 0xE8
		public ToggleEvent onValueChanged; // 0xF0
		[SerializeField] // 0x003D6EE4-0x003D6F30
		[Tooltip] // 0x003D6EE4-0x003D6F30
		private bool m_IsOn; // 0xF8
	
		// Properties
		public ToggleGroup group { get; set; } // 0x007B84F4-0x007B84FC 0x007B84FC-0x007B852C
		public bool isOn { get; set; } // 0x007B8AB8-0x007B8AC0 0x007B8C00-0x007B8C0C
		Transform ICanvasElement.transform { get; } // 0x007B8F60-0x007B8F68 
	
		// Nested types
		public enum ToggleTransition // TypeDefIndex: 2695
		{
			None = 0,
			Fade = 1
		}
	
		[Serializable]
		public class ToggleEvent : UnityEvent<bool> // TypeDefIndex: 2696
		{
			// Constructors
			public ToggleEvent(); // 0x007B84A4-0x007B84F4
		}
	
		// Constructors
		protected Toggle(); // 0x007B841C-0x007B84A4
	
		// Methods
		public virtual void Rebuild(CanvasUpdate executing); // 0x007B87C4-0x007B87C8
		public virtual void LayoutComplete(); // 0x007B87C8-0x007B87CC
		public virtual void GraphicUpdateComplete(); // 0x007B87CC-0x007B87D0
		protected override void OnEnable(); // 0x007B87D0-0x007B8808
		protected override void OnDisable(); // 0x007B8808-0x007B8834
		protected override void OnDidApplyAnimationProperties(); // 0x007B8834-0x007B8954
		private void SetToggleGroup(ToggleGroup newGroup, bool setMemberValue); // 0x007B852C-0x007B86D4
		private void Set(bool value); // 0x007B8954-0x007B8960
		private void Set(bool value, bool sendCallback); // 0x007B8C0C-0x007B8D94
		private void PlayEffect(bool instant); // 0x007B86D4-0x007B87C4
		protected override void Start(); // 0x007B8EA4-0x007B8EAC
		private void InternalToggle(); // 0x007B8EAC-0x007B8F10
		public virtual void OnPointerClick(PointerEventData eventData); // 0x007B8F10-0x007B8F5C
		public virtual void OnSubmit(BaseEventData eventData); // 0x007B8F5C-0x007B8F60
	}

	[AddComponentMenu] // 0x003D4A30-0x003D4A80
	[DisallowMultipleComponent] // 0x003D4A30-0x003D4A80
	public class ToggleGroup : UIBehaviour // TypeDefIndex: 2697
	{
		// Fields
		[SerializeField] // 0x003D6F30-0x003D6F40
		private bool m_AllowSwitchOff; // 0x18
		private List<Toggle> m_Toggles; // 0x20
		[CompilerGenerated] // 0x003D6F40-0x003D6F50
		private static Predicate<Toggle> <>f__am$cache0; // 0x00
		[CompilerGenerated] // 0x003D6F50-0x003D6F60
		private static Func<Toggle, bool> <>f__am$cache1; // 0x08
	
		// Properties
		public bool allowSwitchOff { get; set; } // 0x007B8E9C-0x007B8EA4 0x007B8FDC-0x007B8FE8
	
		// Constructors
		protected ToggleGroup(); // 0x007B8F68-0x007B8FDC
	
		// Methods
		private void ValidateToggleIsInGroup(Toggle toggle); // 0x007B8FE8-0x007B9154
		public void NotifyToggleOn(Toggle toggle); // 0x007B8AC0-0x007B8C00
		public void UnregisterToggle(Toggle toggle); // 0x007B8960-0x007B8A0C
		public void RegisterToggle(Toggle toggle); // 0x007B8A0C-0x007B8AB8
		public bool AnyTogglesOn(); // 0x007B8D94-0x007B8E9C
		public IEnumerable<Toggle> ActiveToggles(); // 0x007B9154-0x007B9210
		public void SetAllTogglesOff(); // 0x007B9210-0x007B92EC
		[CompilerGenerated] // 0x003D7B28-0x003D7B38
		private static bool <AnyTogglesOn>m__0(Toggle x); // 0x007B92EC-0x007B9314
		[CompilerGenerated] // 0x003D7B38-0x003D7B48
		private static bool <ActiveToggles>m__1(Toggle x); // 0x007B9314-0x007B933C
	}

	public class ClipperRegistry // TypeDefIndex: 2698
	{
		// Fields
		private static ClipperRegistry s_Instance; // 0x00
		private readonly IndexedSet<IClipper> m_Clippers; // 0x10
	
		// Properties
		public static ClipperRegistry instance { get; } // 0x0069C904-0x0069C980 
	
		// Constructors
		protected ClipperRegistry(); // 0x0069D574-0x0069D5E4
	
		// Methods
		public void Cull(); // 0x0069C980-0x0069CAA4
		public static void Register(IClipper c); // 0x0069D5E4-0x0069D668
		public static void Unregister(IClipper c); // 0x0069D668-0x0069D6DC
	}

	public static class Clipping // TypeDefIndex: 2699
	{
		// Methods
		public static Rect FindCullAndClipWorldRect(List<RectMask2D> rectMaskParents, out bool validRect); // 0x0069D6DC-0x0069D96C
		private static Rect RectIntersect(Rect a, Rect b); // 0x0069D96C-0x0069DB60
	}

	public interface IClipper // TypeDefIndex: 2700
	{
		// Methods
		void PerformClipping();
	}

	public interface IClippable // TypeDefIndex: 2701
	{
		// Properties
		GameObject gameObject { get; }
		RectTransform rectTransform { get; }
	
		// Methods
		void RecalculateClipping();
		void Cull(Rect clipRect, bool validRect);
		void SetClipRect(Rect value, bool validRect);
	}

	internal class RectangularVertexClipper // TypeDefIndex: 2702
	{
		// Fields
		private readonly Vector3[] m_WorldCorners; // 0x10
		private readonly Vector3[] m_CanvasCorners; // 0x18
	
		// Constructors
		public RectangularVertexClipper(); // 0x007A529C-0x007A530C
	
		// Methods
		public Rect GetCanvasRect(RectTransform t, Canvas c); // 0x007A555C-0x007A5848
	}

	[AddComponentMenu] // 0x003D4A80-0x003D4B2C
	[DisallowMultipleComponent] // 0x003D4A80-0x003D4B2C
	[ExecuteAlways] // 0x003D4A80-0x003D4B2C
	[RequireComponent] // 0x003D4A80-0x003D4B2C
	public class AspectRatioFitter : UIBehaviour, ILayoutSelfController // TypeDefIndex: 2703
	{
		// Fields
		[SerializeField] // 0x003D6F60-0x003D6F70
		private AspectMode m_AspectMode; // 0x18
		[SerializeField] // 0x003D6F70-0x003D6F80
		private float m_AspectRatio; // 0x1C
		[NonSerialized]
		private RectTransform m_Rect; // 0x20
		private bool m_DelayedSetDirty; // 0x28
		private DrivenRectTransformTracker m_Tracker; // 0x29
	
		// Properties
		public AspectMode aspectMode { get; set; } // 0x0069A248-0x0069A250 0x0069A250-0x0069A2CC
		public float aspectRatio { get; set; } // 0x0069A2D0-0x0069A2D8 0x0069A2D8-0x0069A354
		private RectTransform rectTransform { get; } // 0x0069A354-0x0069A3EC 
	
		// Nested types
		public enum AspectMode // TypeDefIndex: 2704
		{
			None = 0,
			WidthControlsHeight = 1,
			HeightControlsWidth = 2,
			FitInParent = 3,
			EnvelopeParent = 4
		}
	
		// Constructors
		protected AspectRatioFitter(); // 0x0069A234-0x0069A248
	
		// Methods
		protected override void OnEnable(); // 0x0069A3EC-0x0069A3F0
		protected override void OnDisable(); // 0x0069A3F0-0x0069A474
		protected virtual void Update(); // 0x0069A474-0x0069A488
		protected override void OnRectTransformDimensionsChange(); // 0x0069A488-0x0069A48C
		private void UpdateRect(); // 0x0069A48C-0x0069A7C8
		private float GetSizeDeltaToProduceSize(float size, int axis); // 0x0069A8E0-0x0069A9BC
		private Vector2 GetParentSize(); // 0x0069A7C8-0x0069A8E0
		public virtual void SetLayoutHorizontal(); // 0x0069A9BC-0x0069A9C0
		public virtual void SetLayoutVertical(); // 0x0069A9C0-0x0069A9C4
		protected void SetDirty(); // 0x0069A2CC-0x0069A2D0
	}

	[AddComponentMenu] // 0x003D4B2C-0x003D4BC8
	[ExecuteAlways] // 0x003D4B2C-0x003D4BC8
	[RequireComponent] // 0x003D4B2C-0x003D4BC8
	public class CanvasScaler : UIBehaviour // TypeDefIndex: 2705
	{
		// Fields
		[SerializeField] // 0x003D6F80-0x003D6FCC
		[Tooltip] // 0x003D6F80-0x003D6FCC
		private ScaleMode m_UiScaleMode; // 0x18
		[SerializeField] // 0x003D6FCC-0x003D7018
		[Tooltip] // 0x003D6FCC-0x003D7018
		protected float m_ReferencePixelsPerUnit; // 0x1C
		[SerializeField] // 0x003D7018-0x003D7064
		[Tooltip] // 0x003D7018-0x003D7064
		protected float m_ScaleFactor; // 0x20
		[SerializeField] // 0x003D7064-0x003D70B0
		[Tooltip] // 0x003D7064-0x003D70B0
		protected Vector2 m_ReferenceResolution; // 0x24
		[SerializeField] // 0x003D70B0-0x003D70FC
		[Tooltip] // 0x003D70B0-0x003D70FC
		protected ScreenMatchMode m_ScreenMatchMode; // 0x2C
		[Range] // 0x003D70FC-0x003D7160
		[SerializeField] // 0x003D70FC-0x003D7160
		[Tooltip] // 0x003D70FC-0x003D7160
		protected float m_MatchWidthOrHeight; // 0x30
		private const float kLogBase = 2f; // Metadata: 0x0021B363
		[SerializeField] // 0x003D7160-0x003D71AC
		[Tooltip] // 0x003D7160-0x003D71AC
		protected Unit m_PhysicalUnit; // 0x34
		[SerializeField] // 0x003D71AC-0x003D71F8
		[Tooltip] // 0x003D71AC-0x003D71F8
		protected float m_FallbackScreenDPI; // 0x38
		[SerializeField] // 0x003D71F8-0x003D7244
		[Tooltip] // 0x003D71F8-0x003D7244
		protected float m_DefaultSpriteDPI; // 0x3C
		[SerializeField] // 0x003D7244-0x003D7290
		[Tooltip] // 0x003D7244-0x003D7290
		protected float m_DynamicPixelsPerUnit; // 0x40
		private Canvas m_Canvas; // 0x48
		[NonSerialized]
		private float m_PrevReferencePixelsPerUnit; // 0x50
	
		// Properties
		public ScaleMode uiScaleMode { get; set; } // 0x0069B2CC-0x0069B2D4 0x0069B2D4-0x0069B2DC
		public float referencePixelsPerUnit { get; set; } // 0x0069B2DC-0x0069B2E4 0x0069B2E4-0x0069B2EC
		public float scaleFactor { get; set; } // 0x0069B2EC-0x0069B2F4 0x0069B2F4-0x0069B378
		public Vector2 referenceResolution { get; set; } // 0x0069B378-0x0069B380 0x0069B380-0x0069B480
		public ScreenMatchMode screenMatchMode { get; set; } // 0x0069B480-0x0069B488 0x0069B488-0x0069B490
		public float matchWidthOrHeight { get; set; } // 0x0069B490-0x0069B498 0x0069B498-0x0069B4A0
		public Unit physicalUnit { get; set; } // 0x0069B4A0-0x0069B4A8 0x0069B4A8-0x0069B4B0
		public float fallbackScreenDPI { get; set; } // 0x0069B4B0-0x0069B4B8 0x0069B4B8-0x0069B4C0
		public float defaultSpriteDPI { get; set; } // 0x0069B4C0-0x0069B4C8 0x0069B4C8-0x0069B548
		public float dynamicPixelsPerUnit { get; set; } // 0x0069B548-0x0069B550 0x0069B550-0x0069B558
	
		// Nested types
		public enum ScaleMode // TypeDefIndex: 2706
		{
			ConstantPixelSize = 0,
			ScaleWithScreenSize = 1,
			ConstantPhysicalSize = 2
		}
	
		public enum ScreenMatchMode // TypeDefIndex: 2707
		{
			MatchWidthOrHeight = 0,
			Expand = 1,
			Shrink = 2
		}
	
		public enum Unit // TypeDefIndex: 2708
		{
			Centimeters = 0,
			Millimeters = 1,
			Inches = 2,
			Points = 3,
			Picas = 4
		}
	
		// Constructors
		protected CanvasScaler(); // 0x0069B248-0x0069B2CC
	
		// Methods
		protected override void OnEnable(); // 0x0069B558-0x0069B5C0
		protected override void OnDisable(); // 0x0069B5C0-0x0069B5F0
		protected virtual void Update(); // 0x0069B688-0x0069B698
		protected virtual void Handle(); // 0x0069B698-0x0069B7B8
		protected virtual void HandleWorldCanvas(); // 0x0069B7B8-0x0069B7E4
		protected virtual void HandleConstantPixelSize(); // 0x0069B7E4-0x0069B810
		protected virtual void HandleScaleWithScreenSize(); // 0x0069B810-0x0069BAD0
		protected virtual void HandleConstantPhysicalSize(); // 0x0069BAD0-0x0069BB48
		protected void SetScaleFactor(float scaleFactor); // 0x0069B5F0-0x0069B630
		protected void SetReferencePixelsPerUnit(float referencePixelsPerUnit); // 0x0069B630-0x0069B688
	}

	[AddComponentMenu] // 0x003D4BC8-0x003D4C64
	[ExecuteAlways] // 0x003D4BC8-0x003D4C64
	[RequireComponent] // 0x003D4BC8-0x003D4C64
	public class ContentSizeFitter : UIBehaviour, ILayoutSelfController // TypeDefIndex: 2709
	{
		// Fields
		[SerializeField] // 0x003D7290-0x003D72A0
		protected FitMode m_HorizontalFit; // 0x18
		[SerializeField] // 0x003D72A0-0x003D72B0
		protected FitMode m_VerticalFit; // 0x1C
		[NonSerialized]
		private RectTransform m_Rect; // 0x20
		private DrivenRectTransformTracker m_Tracker; // 0x28
	
		// Properties
		public FitMode horizontalFit { get; set; } // 0x0069E030-0x0069E038 0x0069E038-0x0069E0B4
		public FitMode verticalFit { get; set; } // 0x0069E14C-0x0069E154 0x0069E154-0x0069E1D0
		private RectTransform rectTransform { get; } // 0x0069E1D0-0x0069E268 
	
		// Nested types
		public enum FitMode // TypeDefIndex: 2710
		{
			Unconstrained = 0,
			MinSize = 1,
			PreferredSize = 2
		}
	
		// Constructors
		protected ContentSizeFitter(); // 0x0069E024-0x0069E030
	
		// Methods
		protected override void OnEnable(); // 0x0069E268-0x0069E26C
		protected override void OnDisable(); // 0x0069E26C-0x0069E2F0
		protected override void OnRectTransformDimensionsChange(); // 0x0069E2F0-0x0069E2F4
		private void HandleSelfFittingAlongAxis(int axis); // 0x0069E2F4-0x0069E3DC
		public virtual void SetLayoutHorizontal(); // 0x0069E3DC-0x0069E40C
		public virtual void SetLayoutVertical(); // 0x0069E40C-0x0069E460
		protected void SetDirty(); // 0x0069E0B4-0x0069E14C
	}

	[AddComponentMenu] // 0x003D4C64-0x003D4CA0
	public class GridLayoutGroup : LayoutGroup // TypeDefIndex: 2711
	{
		// Fields
		[SerializeField] // 0x003D72B0-0x003D72C0
		protected Corner m_StartCorner; // 0x58
		[SerializeField] // 0x003D72C0-0x003D72D0
		protected Axis m_StartAxis; // 0x5C
		[SerializeField] // 0x003D72D0-0x003D72E0
		protected Vector2 m_CellSize; // 0x60
		[SerializeField] // 0x003D72E0-0x003D72F0
		protected Vector2 m_Spacing; // 0x68
		[SerializeField] // 0x003D72F0-0x003D7300
		protected Constraint m_Constraint; // 0x70
		[SerializeField] // 0x003D7300-0x003D7310
		protected int m_ConstraintCount; // 0x74
	
		// Properties
		public Corner startCorner { get; set; } // 0x007C1434-0x007C143C 0x007C143C-0x007C14A0
		public Axis startAxis { get; set; } // 0x007C14A0-0x007C14A8 0x007C14A8-0x007C150C
		public Vector2 cellSize { get; set; } // 0x007C150C-0x007C1514 0x007C1514-0x007C1580
		public Vector2 spacing { get; set; } // 0x007C1580-0x007C1588 0x007C1588-0x007C15F4
		public Constraint constraint { get; set; } // 0x007C15F4-0x007C15FC 0x007C15FC-0x007C1660
		public int constraintCount { get; set; } // 0x007C1660-0x007C1668 0x007C1668-0x007C1700
	
		// Nested types
		public enum Corner // TypeDefIndex: 2712
		{
			UpperLeft = 0,
			UpperRight = 1,
			LowerLeft = 2,
			LowerRight = 3
		}
	
		public enum Axis // TypeDefIndex: 2713
		{
			Horizontal = 0,
			Vertical = 1
		}
	
		public enum Constraint // TypeDefIndex: 2714
		{
			Flexible = 0,
			FixedColumnCount = 1,
			FixedRowCount = 2
		}
	
		// Constructors
		protected GridLayoutGroup(); // 0x007C1284-0x007C1330
	
		// Methods
		public override void CalculateLayoutInputHorizontal(); // 0x007C1700-0x007C18C0
		public override void CalculateLayoutInputVertical(); // 0x007C1CF4-0x007C1F2C
		public override void SetLayoutHorizontal(); // 0x007C1FC4-0x007C1FCC
		public override void SetLayoutVertical(); // 0x007C27D0-0x007C27D8
		private void SetCellsAlongAxis(int axis); // 0x007C1FCC-0x007C27D0
	}

	[AddComponentMenu] // 0x003D4CA0-0x003D4CDC
	public class HorizontalLayoutGroup : HorizontalOrVerticalLayoutGroup // TypeDefIndex: 2715
	{
		// Constructors
		protected HorizontalLayoutGroup(); // 0x007C2A24-0x007C2A38
	
		// Methods
		public override void CalculateLayoutInputHorizontal(); // 0x007C2A4C-0x007C2A78
		public override void CalculateLayoutInputVertical(); // 0x007C2D14-0x007C2D20
		public override void SetLayoutHorizontal(); // 0x007C2D20-0x007C2D2C
		public override void SetLayoutVertical(); // 0x007C3358-0x007C3364
	}

	public abstract class HorizontalOrVerticalLayoutGroup : LayoutGroup // TypeDefIndex: 2716
	{
		// Fields
		[SerializeField] // 0x003D7310-0x003D7320
		protected float m_Spacing; // 0x58
		[SerializeField] // 0x003D7320-0x003D7330
		protected bool m_ChildForceExpandWidth; // 0x5C
		[SerializeField] // 0x003D7330-0x003D7340
		protected bool m_ChildForceExpandHeight; // 0x5D
		[SerializeField] // 0x003D7340-0x003D7350
		protected bool m_ChildControlWidth; // 0x5E
		[SerializeField] // 0x003D7350-0x003D7360
		protected bool m_ChildControlHeight; // 0x5F
	
		// Properties
		public float spacing { get; set; } // 0x007C3364-0x007C336C 0x007C336C-0x007C33D0
		public bool childForceExpandWidth { get; set; } // 0x007C33D0-0x007C33D8 0x007C33D8-0x007C343C
		public bool childForceExpandHeight { get; set; } // 0x007C343C-0x007C3444 0x007C3444-0x007C34A8
		public bool childControlWidth { get; set; } // 0x007C34A8-0x007C34B0 0x007C34B0-0x007C3514
		public bool childControlHeight { get; set; } // 0x007C3514-0x007C351C 0x007C351C-0x007C3580
	
		// Constructors
		protected HorizontalOrVerticalLayoutGroup(); // 0x007C2A38-0x007C2A4C
	
		// Methods
		protected void CalcAlongAxis(int axis, bool isVertical); // 0x007C2A78-0x007C2D14
		protected void SetChildrenAlongAxis(int axis, bool isVertical); // 0x007C2D2C-0x007C3358
		private void GetChildSizes(RectTransform child, int axis, bool controlSize, bool childForceExpand, out float min, out float preferred, out float flexible); // 0x007C3580-0x007C36B4
	}

	public interface ILayoutElement // TypeDefIndex: 2717
	{
		// Properties
		float minWidth { get; }
		float preferredWidth { get; }
		float flexibleWidth { get; }
		float minHeight { get; }
		float preferredHeight { get; }
		float flexibleHeight { get; }
		int layoutPriority { get; }
	
		// Methods
		void CalculateLayoutInputHorizontal();
		void CalculateLayoutInputVertical();
	}

	public interface ILayoutController // TypeDefIndex: 2718
	{
		// Methods
		void SetLayoutHorizontal();
		void SetLayoutVertical();
	}

	public interface ILayoutGroup : ILayoutController // TypeDefIndex: 2719
	{
	}

	public interface ILayoutSelfController : ILayoutController // TypeDefIndex: 2720
	{
	}

	public interface ILayoutIgnorer // TypeDefIndex: 2721
	{
		// Properties
		bool ignoreLayout { get; }
	}

	[AddComponentMenu] // 0x003D4CDC-0x003D4D78
	[ExecuteAlways] // 0x003D4CDC-0x003D4D78
	[RequireComponent] // 0x003D4CDC-0x003D4D78
	public class LayoutElement : UIBehaviour, ILayoutElement, ILayoutIgnorer // TypeDefIndex: 2722
	{
		// Fields
		[SerializeField] // 0x003D7360-0x003D7370
		private bool m_IgnoreLayout; // 0x18
		[SerializeField] // 0x003D7370-0x003D7380
		private float m_MinWidth; // 0x1C
		[SerializeField] // 0x003D7380-0x003D7390
		private float m_MinHeight; // 0x20
		[SerializeField] // 0x003D7390-0x003D73A0
		private float m_PreferredWidth; // 0x24
		[SerializeField] // 0x003D73A0-0x003D73B0
		private float m_PreferredHeight; // 0x28
		[SerializeField] // 0x003D73B0-0x003D73C0
		private float m_FlexibleWidth; // 0x2C
		[SerializeField] // 0x003D73C0-0x003D73D0
		private float m_FlexibleHeight; // 0x30
		[SerializeField] // 0x003D73D0-0x003D73E0
		private int m_LayoutPriority; // 0x34
	
		// Properties
		public virtual bool ignoreLayout { get; set; } // 0x007D830C-0x007D8314 0x007D8314-0x007D8390
		public virtual float minWidth { get; set; } // 0x007D8458-0x007D8460 0x007D8460-0x007D84DC
		public virtual float minHeight { get; set; } // 0x007D84DC-0x007D84E4 0x007D84E4-0x007D8560
		public virtual float preferredWidth { get; set; } // 0x007D8560-0x007D8568 0x007D8568-0x007D85E4
		public virtual float preferredHeight { get; set; } // 0x007D85E4-0x007D85EC 0x007D85EC-0x007D8668
		public virtual float flexibleWidth { get; set; } // 0x007D8668-0x007D8670 0x007D8670-0x007D86EC
		public virtual float flexibleHeight { get; set; } // 0x007D86EC-0x007D86F4 0x007D86F4-0x007D8770
		public virtual int layoutPriority { get; set; } // 0x007D8770-0x007D8778 0x007D8778-0x007D87F4
	
		// Constructors
		protected LayoutElement(); // 0x007D82E4-0x007D830C
	
		// Methods
		public virtual void CalculateLayoutInputHorizontal(); // 0x007D8450-0x007D8454
		public virtual void CalculateLayoutInputVertical(); // 0x007D8454-0x007D8458
		protected override void OnEnable(); // 0x007D87F4-0x007D881C
		protected override void OnTransformParentChanged(); // 0x007D881C-0x007D8820
		protected override void OnDisable(); // 0x007D8820-0x007D8848
		protected override void OnDidApplyAnimationProperties(); // 0x007D8848-0x007D884C
		protected override void OnBeforeTransformParentChanged(); // 0x007D884C-0x007D8850
		protected void SetDirty(); // 0x007D8390-0x007D8450
	}

	[DisallowMultipleComponent] // 0x003D4D78-0x003D4DFC
	[ExecuteAlways] // 0x003D4D78-0x003D4DFC
	[RequireComponent] // 0x003D4D78-0x003D4DFC
	public abstract class LayoutGroup : UIBehaviour, ILayoutElement, ILayoutGroup // TypeDefIndex: 2723
	{
		// Fields
		[SerializeField] // 0x003D73E0-0x003D73F0
		protected RectOffset m_Padding; // 0x18
		[SerializeField] // 0x003D73F0-0x003D7400
		protected TextAnchor m_ChildAlignment; // 0x20
		[NonSerialized]
		private RectTransform m_Rect; // 0x28
		protected DrivenRectTransformTracker m_Tracker; // 0x30
		private Vector2 m_TotalMinSize; // 0x34
		private Vector2 m_TotalPreferredSize; // 0x3C
		private Vector2 m_TotalFlexibleSize; // 0x44
		[NonSerialized]
		private List<RectTransform> m_RectChildren; // 0x50
	
		// Properties
		public RectOffset padding { get; set; } // 0x007C1C8C-0x007C1C94 0x007D8850-0x007D88B4
		public TextAnchor childAlignment { get; set; } // 0x007D88B4-0x007D88BC 0x007D88BC-0x007D8920
		protected RectTransform rectTransform { get; } // 0x007C1F2C-0x007C1FC4 
		protected List<RectTransform> rectChildren { get; } // 0x007C1C84-0x007C1C8C 
		public virtual float minWidth { get; } // 0x007D8920-0x007D8930 
		public virtual float preferredWidth { get; } // 0x007D8930-0x007D8940 
		public virtual float flexibleWidth { get; } // 0x007D8940-0x007D8950 
		public virtual float minHeight { get; } // 0x007D8950-0x007D8960 
		public virtual float preferredHeight { get; } // 0x007D8960-0x007D8970 
		public virtual float flexibleHeight { get; } // 0x007D8970-0x007D8980 
		public virtual int layoutPriority { get; } // 0x007D8980-0x007D8988 
		private bool isRootLayoutGroup { get; } // 0x007D8B38-0x007D8CA4 
	
		// Nested types
		[CompilerGenerated] // 0x003D5044-0x003D5054
		private sealed class <DelayedSetDirty>c__Iterator0 : IEnumerator<object> // TypeDefIndex: 2724
		{
			// Fields
			internal RectTransform rectTransform; // 0x10
			internal object $current; // 0x18
			internal bool $disposing; // 0x20
			internal int $PC; // 0x24
	
			// Properties
			object IEnumerator<object>.Current { [DebuggerHidden] /* 0x003D7F2C-0x003D7F3C */ get; } // 0x0079D458-0x0079D460 
			object IEnumerator.Current { [DebuggerHidden] /* 0x003D7F3C-0x003D7F4C */ get; } // 0x0079D460-0x0079D468 
	
			// Constructors
			[DebuggerHidden] // 0x003D7F1C-0x003D7F2C
			public <DelayedSetDirty>c__Iterator0(); // 0x0079CF90-0x0079CF98
	
			// Methods
			public bool MoveNext(); // 0x0079CF98-0x0079D064
			[DebuggerHidden] // 0x003D7F4C-0x003D7F5C
			public void Dispose(); // 0x0079D468-0x0079D47C
			[DebuggerHidden] // 0x003D7F5C-0x003D7F6C
			public void Reset(); // 0x0079D47C-0x0079D4E4
		}
	
		// Constructors
		protected LayoutGroup(); // 0x007C1330-0x007C1434
	
		// Methods
		public virtual void CalculateLayoutInputHorizontal(); // 0x007C18C0-0x007C1C84
		public abstract void CalculateLayoutInputVertical();
		public abstract void SetLayoutHorizontal();
		public abstract void SetLayoutVertical();
		protected override void OnEnable(); // 0x007D8988-0x007D89B0
		protected override void OnDisable(); // 0x007D8AA4-0x007D8B34
		protected override void OnDidApplyAnimationProperties(); // 0x007D8B34-0x007D8B38
		protected float GetTotalMinSize(int axis); // 0x007C3834-0x007C3840
		protected float GetTotalPreferredSize(int axis); // 0x007C3828-0x007C3834
		protected float GetTotalFlexibleSize(int axis); // 0x007C381C-0x007C3828
		protected float GetStartOffset(int axis, float requiredSpaceWithoutPadding); // 0x007C27D8-0x007C2930
		protected float GetAlignmentOnAxis(int axis); // 0x007C36B4-0x007C3700
		protected void SetLayoutInputForAxis(float totalMin, float totalPreferred, float totalFlexible, int axis); // 0x007C1C94-0x007C1CF4
		protected void SetChildAlongAxis(RectTransform rect, int axis, float pos); // 0x007C3700-0x007C381C
		protected void SetChildAlongAxis(RectTransform rect, int axis, float pos, float size); // 0x007C2930-0x007C2A24
		protected override void OnRectTransformDimensionsChange(); // 0x007D8CA4-0x007D8CE4
		protected virtual void OnTransformChildrenChanged(); // 0x007D8CE4-0x007D8CE8
		protected void SetProperty<T>(ref T currentValue, T newValue);
		protected void SetDirty(); // 0x007D89B0-0x007D8AA4
		[DebuggerHidden] // 0x003D7B48-0x003D7B58
		private IEnumerator DelayedSetDirty(RectTransform rectTransform); // 0x007D8CE8-0x007D8D58
	}

	public class LayoutRebuilder : ICanvasElement // TypeDefIndex: 2725
	{
		// Fields
		private RectTransform m_ToRebuild; // 0x10
		private int m_CachedHashFromTransform; // 0x18
		private static ObjectPool<LayoutRebuilder> s_Rebuilders; // 0x00
		[CompilerGenerated] // 0x003D7400-0x003D7410
		private static RectTransform.ReapplyDrivenProperties <>f__mg$cache0; // 0x08
		[CompilerGenerated] // 0x003D7410-0x003D7420
		private static Predicate<Component> <>f__am$cache0; // 0x10
		[CompilerGenerated] // 0x003D7420-0x003D7430
		private static UnityAction<Component> <>f__am$cache1; // 0x18
		[CompilerGenerated] // 0x003D7430-0x003D7440
		private static UnityAction<Component> <>f__am$cache2; // 0x20
		[CompilerGenerated] // 0x003D7440-0x003D7450
		private static UnityAction<Component> <>f__am$cache3; // 0x28
		[CompilerGenerated] // 0x003D7450-0x003D7460
		private static UnityAction<Component> <>f__am$cache4; // 0x30
	
		// Properties
		public Transform transform { get; } // 0x0079D6AC-0x0079D6B4 
	
		// Constructors
		static LayoutRebuilder(); // 0x0079D4E4-0x0079D5F0
		public LayoutRebuilder(); // 0x0079D5F0-0x0079D5F8
	
		// Methods
		private void Initialize(RectTransform controller); // 0x0079D5F8-0x0079D63C
		private void Clear(); // 0x0079D63C-0x0079D648
		private static void ReapplyDrivenProperties(RectTransform driven); // 0x0079D648-0x0079D6AC
		public bool IsDestroyed(); // 0x0079D6B4-0x0079D724
		private static void StripDisabledBehavioursFromList(List<Component> components); // 0x0079D724-0x0079D834
		public static void ForceRebuildLayoutImmediate(RectTransform layoutRoot); // 0x0079D834-0x0079D930
		public void Rebuild(CanvasUpdate executing); // 0x0079D930-0x0079DC10
		private void PerformLayoutControl(RectTransform rect, UnityAction<Component> action); // 0x0079DF44-0x0079E2C0
		private void PerformLayoutCalculation(RectTransform rect, UnityAction<Component> action); // 0x0079DC10-0x0079DF44
		public static void MarkLayoutForRebuild(RectTransform rect); // 0x0079D064-0x0079D458
		private static bool ValidController(RectTransform layoutRoot, List<Component> comps); // 0x0079E2C0-0x0079E4D8
		private static void MarkLayoutRootForRebuild(RectTransform controller); // 0x0079E4D8-0x0079E654
		public void LayoutComplete(); // 0x0079E654-0x0079E6E0
		public void GraphicUpdateComplete(); // 0x0079E6E0-0x0079E6E4
		public override int GetHashCode(); // 0x0079E6E4-0x0079E6EC
		public override bool Equals(object obj); // 0x0079E6EC-0x0079E744
		public override string ToString(); // 0x0079E744-0x0079E798
		[CompilerGenerated] // 0x003D7B58-0x003D7B68
		private static void <s_Rebuilders>m__0(LayoutRebuilder x); // 0x0079E798-0x0079E7C4
		[CompilerGenerated] // 0x003D7B68-0x003D7B78
		private static bool <StripDisabledBehavioursFromList>m__1(Component e); // 0x0079E7C4-0x0079E858
		[CompilerGenerated] // 0x003D7B78-0x003D7B88
		private static void <Rebuild>m__2(Component e); // 0x0079E858-0x0079E924
		[CompilerGenerated] // 0x003D7B88-0x003D7B98
		private static void <Rebuild>m__3(Component e); // 0x0079E924-0x0079E9F0
		[CompilerGenerated] // 0x003D7B98-0x003D7BA8
		private static void <Rebuild>m__4(Component e); // 0x0079E9F0-0x0079EAC0
		[CompilerGenerated] // 0x003D7BA8-0x003D7BB8
		private static void <Rebuild>m__5(Component e); // 0x0079EAC0-0x0079EB90
	}

	public static class LayoutUtility // TypeDefIndex: 2726
	{
		// Fields
		[CompilerGenerated] // 0x003D7460-0x003D7470
		private static Func<ILayoutElement, float> <>f__am$cache0; // 0x00
		[CompilerGenerated] // 0x003D7470-0x003D7480
		private static Func<ILayoutElement, float> <>f__am$cache1; // 0x08
		[CompilerGenerated] // 0x003D7480-0x003D7490
		private static Func<ILayoutElement, float> <>f__am$cache2; // 0x10
		[CompilerGenerated] // 0x003D7490-0x003D74A0
		private static Func<ILayoutElement, float> <>f__am$cache3; // 0x18
		[CompilerGenerated] // 0x003D74A0-0x003D74B0
		private static Func<ILayoutElement, float> <>f__am$cache4; // 0x20
		[CompilerGenerated] // 0x003D74B0-0x003D74C0
		private static Func<ILayoutElement, float> <>f__am$cache5; // 0x28
		[CompilerGenerated] // 0x003D74C0-0x003D74D0
		private static Func<ILayoutElement, float> <>f__am$cache6; // 0x30
		[CompilerGenerated] // 0x003D74D0-0x003D74E0
		private static Func<ILayoutElement, float> <>f__am$cache7; // 0x38
	
		// Methods
		public static float GetMinSize(RectTransform rect, int axis); // 0x0079EB90-0x0079EB9C
		public static float GetPreferredSize(RectTransform rect, int axis); // 0x0079ED18-0x0079ED24
		public static float GetFlexibleSize(RectTransform rect, int axis); // 0x0079EFEC-0x0079EFF8
		public static float GetMinWidth(RectTransform rect); // 0x0079EB9C-0x0079EC5C
		public static float GetPreferredWidth(RectTransform rect); // 0x0079ED24-0x0079EE88
		public static float GetFlexibleWidth(RectTransform rect); // 0x0079EFF8-0x0079F0B4
		public static float GetMinHeight(RectTransform rect); // 0x0079EC5C-0x0079ED18
		public static float GetPreferredHeight(RectTransform rect); // 0x0079EE88-0x0079EFEC
		public static float GetFlexibleHeight(RectTransform rect); // 0x0079F0B4-0x0079F170
		public static float GetLayoutProperty(RectTransform rect, Func<ILayoutElement, float> property, float defaultValue); // 0x0079F170-0x0079F194
		public static float GetLayoutProperty(RectTransform rect, Func<ILayoutElement, float> property, float defaultValue, out ILayoutElement source); // 0x0079F194-0x0079F4B4
		[CompilerGenerated] // 0x003D7BB8-0x003D7BC8
		private static float <GetMinWidth>m__0(ILayoutElement e); // 0x0079F4B4-0x0079F568
		[CompilerGenerated] // 0x003D7BC8-0x003D7BD8
		private static float <GetPreferredWidth>m__1(ILayoutElement e); // 0x0079F568-0x0079F61C
		[CompilerGenerated] // 0x003D7BD8-0x003D7BE8
		private static float <GetPreferredWidth>m__2(ILayoutElement e); // 0x0079F61C-0x0079F6D0
		[CompilerGenerated] // 0x003D7BE8-0x003D7BF8
		private static float <GetFlexibleWidth>m__3(ILayoutElement e); // 0x0079F6D0-0x0079F784
		[CompilerGenerated] // 0x003D7BF8-0x003D7C08
		private static float <GetMinHeight>m__4(ILayoutElement e); // 0x0079F784-0x0079F838
		[CompilerGenerated] // 0x003D7C08-0x003D7C18
		private static float <GetPreferredHeight>m__5(ILayoutElement e); // 0x0079F838-0x0079F8EC
		[CompilerGenerated] // 0x003D7C18-0x003D7C28
		private static float <GetPreferredHeight>m__6(ILayoutElement e); // 0x0079F8EC-0x0079F9A0
		[CompilerGenerated] // 0x003D7C28-0x003D7C38
		private static float <GetFlexibleHeight>m__7(ILayoutElement e); // 0x0079F9A0-0x0079FA54
	}

	[AddComponentMenu] // 0x003D4DFC-0x003D4E38
	public class VerticalLayoutGroup : HorizontalOrVerticalLayoutGroup // TypeDefIndex: 2727
	{
		// Constructors
		protected VerticalLayoutGroup(); // 0x00CB6734-0x00CB673C
	
		// Methods
		public override void CalculateLayoutInputHorizontal(); // 0x00CB673C-0x00CB6770
		public override void CalculateLayoutInputVertical(); // 0x00CB6770-0x00CB6780
		public override void SetLayoutHorizontal(); // 0x00CB6780-0x00CB6790
		public override void SetLayoutVertical(); // 0x00CB6790-0x00CB7D90
	}

	public interface IMaterialModifier // TypeDefIndex: 2728
	{
		// Methods
		Material GetModifiedMaterial(Material baseMaterial);
	}
}

namespace UnityEngine.UI.Collections
{
	internal class IndexedSet<T> : IList<T> // TypeDefIndex: 2729
	{
		// Fields
		private readonly List<T> m_List;
		private Dictionary<T, int> m_Dictionary;
	
		// Properties
		public int Count { get; }
		public bool IsReadOnly { get; }
		public T this[int index] { get => default; set {} }
	
		// Constructors
		public IndexedSet();
	
		// Methods
		public void Add(T item);
		public bool AddUnique(T item);
		public bool Remove(T item);
		public IEnumerator<T> GetEnumerator();
		IEnumerator IEnumerable.GetEnumerator();
		public void Clear();
		public bool Contains(T item);
		public void CopyTo(T[] array, int arrayIndex);
		public int IndexOf(T item);
		public void Insert(int index, T item);
		public void RemoveAt(int index);
		public void RemoveAll(Predicate<T> match);
		public void Sort(Comparison<T> sortLayoutFunction);
	}
}

namespace UnityEngine.UI
{
	internal static class ListPool<T> // TypeDefIndex: 2730
	{
		// Fields
		private static readonly ObjectPool<List<T>> s_ListPool;
		[CompilerGenerated] // 0x003D74E0-0x003D74F0
		private static UnityAction<List<T>> <>f__mg$cache0;
	
		// Constructors
		static ListPool();
	
		// Methods
		private static void Clear(List<T> l);
		public static List<T> Get();
		public static void Release(List<T> toRelease);
	}

	internal class ObjectPool<T> // TypeDefIndex: 2731
		where T : new()
	{
		// Fields
		private readonly Stack<T> m_Stack;
		private readonly UnityAction<T> m_ActionOnGet;
		private readonly UnityAction<T> m_ActionOnRelease;
		[CompilerGenerated] // 0x003D74F0-0x003D752C
		[DebuggerBrowsable] // 0x003D74F0-0x003D752C
		private int <countAll>k__BackingField;
	
		// Properties
		public int countAll { [CompilerGenerated] /* 0x003D7C38-0x003D7C48 */ get; [CompilerGenerated] /* 0x003D7C48-0x003D7C58 */ private set; }
		public int countActive { get; }
		public int countInactive { get; }
	
		// Constructors
		public ObjectPool(UnityAction<T> actionOnGet, UnityAction<T> actionOnRelease);
	
		// Methods
		public T Get();
		public void Release(T element);
	}

	internal class ReflectionMethodsCache // TypeDefIndex: 2732
	{
		// Fields
		public Raycast3DCallback raycast3D; // 0x10
		public RaycastAllCallback raycast3DAll; // 0x18
		public Raycast2DCallback raycast2D; // 0x20
		public GetRayIntersectionAllCallback getRayIntersectionAll; // 0x28
		public GetRayIntersectionAllNonAllocCallback getRayIntersectionAllNonAlloc; // 0x30
		public GetRaycastNonAllocCallback getRaycastNonAlloc; // 0x38
		private static ReflectionMethodsCache s_ReflectionMethodsCache; // 0x00
	
		// Properties
		public static ReflectionMethodsCache Singleton { get; } // 0x007A70C0-0x007A7180 
	
		// Nested types
		public delegate bool Raycast3DCallback(Ray r, out RaycastHit hit, float f, int i); // TypeDefIndex: 2733; 0x007A9094-0x007A971C
	
		public delegate RaycastHit2D Raycast2DCallback(Vector2 p1, Vector2 p2, float f, int i); // TypeDefIndex: 2734; 0x007A89C8-0x007A8F04
	
		public delegate RaycastHit[] RaycastAllCallback(Ray r, float f, int i); // TypeDefIndex: 2735; 0x007A9938-0x007A9F80
	
		public delegate RaycastHit2D[] GetRayIntersectionAllCallback(Ray r, float f, int i); // TypeDefIndex: 2736; 0x007A72B0-0x007A78F8
	
		public delegate int GetRayIntersectionAllNonAllocCallback(Ray r, RaycastHit2D[] results, float f, int i); // TypeDefIndex: 2737; 0x007A7A30-0x007A80AC
	
		public delegate int GetRaycastNonAllocCallback(Ray r, RaycastHit[] results, float f, int i); // TypeDefIndex: 2738; 0x007A8218-0x007A8894
	
		// Constructors
		public ReflectionMethodsCache(); // 0x007A615C-0x007A70C0
		static ReflectionMethodsCache(); // 0x007A7180-0x007A72A0
	}

	public class VertexHelper : IDisposable // TypeDefIndex: 2739
	{
		// Fields
		private List<Vector3> m_Positions; // 0x10
		private List<Color32> m_Colors; // 0x18
		private List<Vector2> m_Uv0S; // 0x20
		private List<Vector2> m_Uv1S; // 0x28
		private List<Vector2> m_Uv2S; // 0x30
		private List<Vector2> m_Uv3S; // 0x38
		private List<Vector3> m_Normals; // 0x40
		private List<Vector4> m_Tangents; // 0x48
		private List<int> m_Indices; // 0x50
		private static readonly Vector4 s_DefaultTangent; // 0x00
		private static readonly Vector3 s_DefaultNormal; // 0x10
		private bool m_ListsInitalized; // 0x58
	
		// Properties
		public int currentVertCount { get; } // 0x007A4564-0x007A45C4 
		public int currentIndexCount { get; } // 0x007B9938-0x007B9998 
	
		// Constructors
		public VertexHelper(); // 0x007B933C-0x007B9348
		public VertexHelper(Mesh m); // 0x007B9348-0x007B95F8
		static VertexHelper(); // 0x007B9FA0-0x007BA054
	
		// Methods
		private void InitializeListIfRequired(); // 0x007B95F8-0x007B9784
		public void Dispose(); // 0x007B9784-0x007B9938
		public void Clear(); // 0x007A3EFC-0x007A407C
		public void PopulateUIVertex(ref UIVertex vertex, int i); // 0x007A41B4-0x007A4360
		public void SetUIVertex(UIVertex vertex, int i); // 0x007A4360-0x007A4564
		public void FillMesh(Mesh mesh); // 0x007B9998-0x007B9C44
		public void AddVert(Vector3 position, Color32 color, Vector2 uv0, Vector2 uv1, Vector3 normal, Vector4 tangent); // 0x007B9C44-0x007B9E8C
		public void AddVert(Vector3 position, Color32 color, Vector2 uv0); // 0x007A4FD8-0x007A5108
		public void AddVert(UIVertex v); // 0x007B9E8C-0x007B9EE4
		public void AddTriangle(int idx0, int idx1, int idx2); // 0x007A5108-0x007A51D0
		public void AddUIVertexQuad(UIVertex[] verts); // 0x007B7FF8-0x007B81B8
		public void AddUIVertexStream(List<UIVertex> verts, List<int> indices); // 0x007B9EE4-0x007B9FA0
		public void AddUIVertexTriangleStream(List<UIVertex> verts); // 0x007A407C-0x007A40D4
		public void GetUIVertexStream(List<UIVertex> stream); // 0x007A3BC0-0x007A3C18
	}

	[Obsolete] // 0x003D4E70-0x003D4EAC
	public abstract class BaseVertexEffect // TypeDefIndex: 2740
	{
		// Constructors
		protected BaseVertexEffect(); // 0x0069ADE4-0x0069ADEC
	
		// Methods
		[EditorBrowsable] // 0x003D7C58-0x003D7CAC
		[Obsolete] // 0x003D7C58-0x003D7CAC
		public abstract void ModifyVertices(List<UIVertex> vertices);
	}

	[ExecuteAlways] // 0x003D4EAC-0x003D4EBC
	public abstract class BaseMeshEffect : UIBehaviour, IMeshModifier // TypeDefIndex: 2741
	{
		// Fields
		[NonSerialized]
		private Graphic m_Graphic; // 0x18
	
		// Properties
		protected Graphic graphic { get; } // 0x0069A9CC-0x0069AA64 
	
		// Constructors
		protected BaseMeshEffect(); // 0x0069A9C4-0x0069A9CC
	
		// Methods
		protected override void OnEnable(); // 0x0069AA64-0x0069AB18
		protected override void OnDisable(); // 0x0069AB18-0x0069ABCC
		protected override void OnDidApplyAnimationProperties(); // 0x0069ABCC-0x0069AC80
		public virtual void ModifyMesh(Mesh mesh); // 0x0069AC80-0x0069ADE4
		public abstract void ModifyMesh(VertexHelper vh);
	}

	[EditorBrowsable] // 0x003D4EBC-0x003D4F10
	[Obsolete] // 0x003D4EBC-0x003D4F10
	public interface IVertexModifier // TypeDefIndex: 2742
	{
		// Methods
		[EditorBrowsable] // 0x003D7CAC-0x003D7D00
		[Obsolete] // 0x003D7CAC-0x003D7D00
		void ModifyVertices(List<UIVertex> verts);
	}

	public interface IMeshModifier // TypeDefIndex: 2743
	{
		// Methods
		[Obsolete] // 0x003D7D00-0x003D7D3C
		void ModifyMesh(Mesh mesh);
		void ModifyMesh(VertexHelper verts);
	}

	[AddComponentMenu] // 0x003D4F10-0x003D4F4C
	public class Outline : Shadow // TypeDefIndex: 2744
	{
		// Constructors
		protected Outline(); // 0x007A3774-0x007A3778
	
		// Methods
		public override void ModifyMesh(VertexHelper vh); // 0x007A3808-0x007A3BC0
	}

	[AddComponentMenu] // 0x003D4F4C-0x003D4F88
	public class PositionAsUV1 : BaseMeshEffect // TypeDefIndex: 2745
	{
		// Constructors
		protected PositionAsUV1(); // 0x007A40D4-0x007A40DC
	
		// Methods
		public override void ModifyMesh(VertexHelper vh); // 0x007A40DC-0x007A41B4
	}

	[AddComponentMenu] // 0x003D4F88-0x003D4FC4
	public class Shadow : BaseMeshEffect // TypeDefIndex: 2746
	{
		// Fields
		[SerializeField] // 0x003D752C-0x003D753C
		private Color m_EffectColor; // 0x20
		[SerializeField] // 0x003D753C-0x003D754C
		private Vector2 m_EffectDistance; // 0x30
		[SerializeField] // 0x003D754C-0x003D755C
		private bool m_UseGraphicAlpha; // 0x38
		private const float kMaxEffectDistance = 600f; // Metadata: 0x0021B3C3
	
		// Properties
		public Color effectColor { get; set; } // 0x007A3C18-0x007A3C24 0x007B29D4-0x007B2AC0
		public Vector2 effectDistance { get; set; } // 0x007A3C24-0x007A3C2C 0x007B2AC0-0x007B2C08
		public bool useGraphicAlpha { get; set; } // 0x007B2C08-0x007B2C10 0x007B2C10-0x007B2CE4
	
		// Constructors
		protected Shadow(); // 0x007A3778-0x007A3808
	
		// Methods
		protected void ApplyShadowZeroAlloc(List<UIVertex> verts, Color32 color, int start, int end, float x, float y); // 0x007A3C2C-0x007A3EFC
		protected void ApplyShadow(List<UIVertex> verts, Color32 color, int start, int end, float x, float y); // 0x007B2CE4-0x007B2CEC
		public override void ModifyMesh(VertexHelper vh); // 0x007B2CEC-0x007B2E3C
	}
}

[CompilerGenerated] // 0x003D5024-0x003D5034
internal static class <PrivateImplementationDetails> // TypeDefIndex: 2747
{
	// Fields
	internal static readonly $ArrayType=12 $field-7BBE37982E6C057ED87163CAFC7FD6E5E42EEA46; // 0x00 // Starts with: 20 00 2e 00 2c 00 09 00 - Metadata: 0x0021B3C7

	// Nested types
	private struct $ArrayType=12 // TypeDefIndex: 2748
	{
	}
}

namespace DG.Tweening
{
	public enum AutoPlay // TypeDefIndex: 2751
	{
		None = 0,
		AutoPlaySequences = 1,
		AutoPlayTweeners = 2,
		All = 3
	}

	[Flags] // 0x003D84F8-0x003D8508
	public enum AxisConstraint // TypeDefIndex: 2752
	{
		None = 0,
		X = 2,
		Y = 4,
		Z = 8,
		W = 16
	}

	public struct Color2 // TypeDefIndex: 2753
	{
		// Fields
		public Color ca; // 0x00
		public Color cb; // 0x10
	
		// Constructors
		public Color2(Color ca, Color cb); // 0x0097D834-0x0097D848
	
		// Methods
		public static Color2 operator +(Color2 c1, Color2 c2); // 0x0097D848-0x0097D8D8
		public static Color2 operator -(Color2 c1, Color2 c2); // 0x0097D8D8-0x0097D968
		public static Color2 operator *(Color2 c1, float f); // 0x0097D968-0x0097D9F0
	}

	public delegate void TweenCallback(); // TypeDefIndex: 2754; 0x008B1440-0x008B184C

	public delegate void TweenCallback<in T>(T value); // TypeDefIndex: 2755; 0x00000000-0x00000000

	public delegate float EaseFunction(float time, float duration, float overshootOrAmplitude, float period); // TypeDefIndex: 2756; 0x00980B6C-0x00981068

	public class DOTween // TypeDefIndex: 2757
	{
		// Fields
		public static readonly string Version; // 0x00
		public static bool useSafeMode; // 0x08
		public static bool showUnityEditorReport; // 0x09
		public static float timeScale; // 0x0C
		public static bool useSmoothDeltaTime; // 0x10
		public static float maxSmoothUnscaledTime; // 0x14
		private static LogBehaviour _logBehaviour; // 0x18
		public static bool drawGizmos; // 0x1C
		public static UpdateType defaultUpdateType; // 0x20
		public static bool defaultTimeScaleIndependent; // 0x24
		public static AutoPlay defaultAutoPlay; // 0x28
		public static bool defaultAutoKill; // 0x2C
		public static LoopType defaultLoopType; // 0x30
		public static bool defaultRecyclable; // 0x34
		public static Ease defaultEaseType; // 0x38
		public static float defaultEaseOvershootOrAmplitude; // 0x3C
		public static float defaultEasePeriod; // 0x40
		internal static DOTweenComponent instance; // 0x48
		internal static bool isUnityEditor; // 0x50
		internal static bool isDebugBuild; // 0x51
		internal static int maxActiveTweenersReached; // 0x54
		internal static int maxActiveSequencesReached; // 0x58
		internal static readonly List<TweenCallback> GizmosDelegates; // 0x60
		internal static bool initialized; // 0x68
		internal static bool isQuitting; // 0x69
	
		// Properties
		public static LogBehaviour logBehaviour { get; set; } // 0x00987E60-0x00987EC8 0x00987EC8-0x00987F3C
	
		// Nested types
		[CompilerGenerated] // 0x003D85A0-0x003D85B0
		private sealed class <>c__DisplayClass54_0 // TypeDefIndex: 2758
		{
			// Fields
			public float v; // 0x10
			public DOSetter<float> setter; // 0x18
	
			// Constructors
			public <>c__DisplayClass54_0(); // 0x00989A90-0x00989A98
	
			// Methods
			internal float <To>b__0(); // 0x0098BF50-0x0098BF58
			internal void <To>b__1(float x); // 0x0098BF58-0x0098BFCC
		}
	
		// Constructors
		static DOTween(); // 0x00987F3C-0x00988078
		public DOTween(); // 0x0098BF48-0x0098BF50
	
		// Methods
		public static IDOTweenInit Init(bool? recycleAllByDefault = default, bool? useSafeMode = default, LogBehaviour? logBehaviour = default); // 0x00988078-0x009881EC
		private static void AutoInit(); // 0x009888D0-0x00988998
		private static IDOTweenInit Init(DOTweenSettings settings, bool? recycleAllByDefault, bool? useSafeMode, LogBehaviour? logBehaviour); // 0x009881EC-0x009888D0
		public static void SetTweensCapacity(int tweenersCapacity, int sequencesCapacity); // 0x00988998-0x00988A0C
		public static void Clear(bool destroy = false /* Metadata: 0x0021B3F7 */); // 0x00988A0C-0x00988B54
		public static void ClearCachedTweens(); // 0x00988C3C-0x00988C98
		public static int Validate(); // 0x00988C98-0x00988CF4
		public static void ManualUpdate(float deltaTime, float unscaledDeltaTime); // 0x00988CF4-0x00988D84
		public static TweenerCore<float, float, FloatOptions> To(DOGetter<float> getter, DOSetter<float> setter, float endValue, float duration); // 0x00988E44-0x00988EE0
		public static TweenerCore<double, double, NoOptions> To(DOGetter<double> getter, DOSetter<double> setter, double endValue, float duration); // 0x00988EE0-0x00988F7C
		public static Tweener To(DOGetter<int> getter, DOSetter<int> setter, int endValue, float duration); // 0x00988F7C-0x00989018
		public static Tweener To(DOGetter<uint> getter, DOSetter<uint> setter, uint endValue, float duration); // 0x00989018-0x009890B4
		public static Tweener To(DOGetter<long> getter, DOSetter<long> setter, long endValue, float duration); // 0x009890B4-0x00989150
		public static Tweener To(DOGetter<ulong> getter, DOSetter<ulong> setter, ulong endValue, float duration); // 0x00989150-0x009891EC
		public static TweenerCore<string, string, StringOptions> To(DOGetter<string> getter, DOSetter<string> setter, string endValue, float duration); // 0x009891EC-0x00989288
		public static TweenerCore<Vector2, Vector2, VectorOptions> To(DOGetter<Vector2> getter, DOSetter<Vector2> setter, Vector2 endValue, float duration); // 0x00989288-0x00989334
		public static TweenerCore<Vector3, Vector3, VectorOptions> To(DOGetter<Vector3> getter, DOSetter<Vector3> setter, Vector3 endValue, float duration); // 0x00989334-0x009893E8
		public static TweenerCore<Vector4, Vector4, VectorOptions> To(DOGetter<Vector4> getter, DOSetter<Vector4> setter, Vector4 endValue, float duration); // 0x009893E8-0x009894AC
		public static TweenerCore<Quaternion, Vector3, QuaternionOptions> To(DOGetter<Quaternion> getter, DOSetter<Quaternion> setter, Vector3 endValue, float duration); // 0x009894AC-0x00989560
		public static TweenerCore<Color, Color, ColorOptions> To(DOGetter<Color> getter, DOSetter<Color> setter, Color endValue, float duration); // 0x00989560-0x00989624
		public static TweenerCore<Rect, Rect, RectOptions> To(DOGetter<Rect> getter, DOSetter<Rect> setter, Rect endValue, float duration); // 0x00989624-0x009896E8
		public static Tweener To(DOGetter<RectOffset> getter, DOSetter<RectOffset> setter, RectOffset endValue, float duration); // 0x009896E8-0x00989784
		public static TweenerCore<T1, T2, TPlugOptions> To<T1, T2, TPlugOptions>(ABSTweenPlugin<T1, T2, TPlugOptions> plugin, DOGetter<T1> getter, DOSetter<T1> setter, T2 endValue, float duration)
			where TPlugOptions : struct, IPlugOptions;
		public static TweenerCore<Vector3, Vector3, VectorOptions> ToAxis(DOGetter<Vector3> getter, DOSetter<Vector3> setter, float endValue, float duration, AxisConstraint axisConstraint = AxisConstraint.None | AxisConstraint.X /* Metadata: 0x0021B3F8 */); // 0x00989784-0x00989868
		public static Tweener ToAlpha(DOGetter<Color> getter, DOSetter<Color> setter, float endValue, float duration); // 0x00989868-0x00989940
		public static Tweener To(DOSetter<float> setter, float startValue, float endValue, float duration); // 0x00989940-0x00989A90
		public static TweenerCore<Vector3, Vector3[], Vector3ArrayOptions> Punch(DOGetter<Vector3> getter, DOSetter<Vector3> setter, Vector3 direction, float duration, int vibrato = 10 /* Metadata: 0x0021B3FC */, float elasticity = 1f /* Metadata: 0x0021B400 */); // 0x00989A98-0x00989E5C
		public static TweenerCore<Vector3, Vector3[], Vector3ArrayOptions> Shake(DOGetter<Vector3> getter, DOSetter<Vector3> setter, float duration, float strength = 3f /* Metadata: 0x0021B404 */, int vibrato = 10 /* Metadata: 0x0021B408 */, float randomness = 90f /* Metadata: 0x0021B40C */, bool ignoreZAxis = true /* Metadata: 0x0021B410 */, bool fadeOut = true /* Metadata: 0x0021B411 */); // 0x0098A0F4-0x0098A1E4
		public static TweenerCore<Vector3, Vector3[], Vector3ArrayOptions> Shake(DOGetter<Vector3> getter, DOSetter<Vector3> setter, float duration, Vector3 strength, int vibrato = 10 /* Metadata: 0x0021B412 */, float randomness = 90f /* Metadata: 0x0021B416 */, bool fadeOut = true /* Metadata: 0x0021B41A */); // 0x0098A7A4-0x0098A878
		private static TweenerCore<Vector3, Vector3[], Vector3ArrayOptions> Shake(DOGetter<Vector3> getter, DOSetter<Vector3> setter, float duration, Vector3 strength, int vibrato, float randomness, bool ignoreZAxis, bool vectorBased, bool fadeOut); // 0x0098A1E4-0x0098A7A4
		public static TweenerCore<Vector3, Vector3[], Vector3ArrayOptions> ToArray(DOGetter<Vector3> getter, DOSetter<Vector3> setter, Vector3[] endValues, float[] durations); // 0x00989E5C-0x0098A0F4
		internal static TweenerCore<Color2, Color2, ColorOptions> To(DOGetter<Color2> getter, DOSetter<Color2> setter, Color2 endValue, float duration); // 0x0098A878-0x0098A938
		public static Sequence Sequence(); // 0x0098A938-0x0098A9CC
		public static int CompleteAll(bool withCallbacks = false /* Metadata: 0x0021B41B */); // 0x0098A9CC-0x0098AA60
		public static int Complete(object targetOrId, bool withCallbacks = false /* Metadata: 0x0021B41C */); // 0x0098AA60-0x0098AB1C
		internal static int CompleteAndReturnKilledTot(); // 0x0098AB1C-0x0098AB94
		internal static int CompleteAndReturnKilledTot(object targetOrId); // 0x0098AB94-0x0098AC24
		internal static int CompleteAndReturnKilledTotExceptFor(params /* 0x003D9B00-0x003D9B10 */ object[] excludeTargetsOrIds); // 0x0098AC24-0x0098ACA0
		public static int FlipAll(); // 0x0098ACA0-0x0098AD18
		public static int Flip(object targetOrId); // 0x0098AD18-0x0098ADA8
		public static int GotoAll(float to, bool andPlay = false /* Metadata: 0x0021B41D */); // 0x0098ADA8-0x0098AE30
		public static int Goto(object targetOrId, float to, bool andPlay = false /* Metadata: 0x0021B41E */); // 0x0098AE30-0x0098AEE0
		public static int KillAll(bool complete = false /* Metadata: 0x0021B41F */); // 0x0098AEE0-0x0098AF7C
		public static int KillAll(bool complete, params /* 0x003D9B10-0x003D9B20 */ object[] idsOrTargetsToExclude); // 0x0098AF7C-0x0098B0A8
		public static int Kill(object targetOrId, bool complete = false /* Metadata: 0x0021B420 */); // 0x0098B0A8-0x0098B17C
		public static int PauseAll(); // 0x0098B17C-0x0098B1F4
		public static int Pause(object targetOrId); // 0x0098B1F4-0x0098B284
		public static int PlayAll(); // 0x0098B284-0x0098B2FC
		public static int Play(object targetOrId); // 0x0098B2FC-0x0098B38C
		public static int Play(object target, object id); // 0x0098B38C-0x0098B430
		public static int PlayBackwardsAll(); // 0x0098B430-0x0098B4A8
		public static int PlayBackwards(object targetOrId); // 0x0098B4A8-0x0098B538
		public static int PlayBackwards(object target, object id); // 0x0098B538-0x0098B5DC
		public static int PlayForwardAll(); // 0x0098B5DC-0x0098B654
		public static int PlayForward(object targetOrId); // 0x0098B654-0x0098B6E4
		public static int PlayForward(object target, object id); // 0x0098B6E4-0x0098B788
		public static int RestartAll(bool includeDelay = true /* Metadata: 0x0021B421 */); // 0x0098B788-0x0098B804
		public static int Restart(object targetOrId, bool includeDelay = true /* Metadata: 0x0021B422 */, float changeDelayTo = -1f /* Metadata: 0x0021B423 */); // 0x0098B804-0x0098B8B4
		public static int Restart(object target, object id, bool includeDelay = true /* Metadata: 0x0021B427 */, float changeDelayTo = -1f /* Metadata: 0x0021B428 */); // 0x0098B8B4-0x0098B96C
		public static int RewindAll(bool includeDelay = true /* Metadata: 0x0021B42C */); // 0x0098B96C-0x0098B9E8
		public static int Rewind(object targetOrId, bool includeDelay = true /* Metadata: 0x0021B42D */); // 0x0098B9E8-0x0098BA88
		public static int SmoothRewindAll(); // 0x0098BA88-0x0098BB00
		public static int SmoothRewind(object targetOrId); // 0x0098BB00-0x0098BB90
		public static int TogglePauseAll(); // 0x0098BB90-0x0098BC08
		public static int TogglePause(object targetOrId); // 0x0098BC08-0x0098BC98
		public static bool IsTweening(object targetOrId, bool alsoCheckIfIsPlaying = false /* Metadata: 0x0021B42E */); // 0x0098BC98-0x0098BD2C
		public static int TotalPlayingTweens(); // 0x0098BD2C-0x0098BD88
		public static List<Tween> PlayingTweens(); // 0x0098BD88-0x0098BDE8
		public static List<Tween> PausedTweens(); // 0x0098BDE8-0x0098BE48
		public static List<Tween> TweensById(object id, bool playingOnly = false /* Metadata: 0x0021B42F */); // 0x0098BE48-0x0098BED4
		public static List<Tween> TweensByTarget(object target, bool playingOnly = false /* Metadata: 0x0021B430 */); // 0x0098BED4-0x0098BF48
		private static void InitCheck(); // 0x00988D84-0x00988E44
		private static TweenerCore<T1, T2, TPlugOptions> ApplyTo<T1, T2, TPlugOptions>(DOGetter<T1> getter, DOSetter<T1> setter, T2 endValue, float duration, ABSTweenPlugin<T1, T2, TPlugOptions> plugin = null)
			where TPlugOptions : struct, IPlugOptions;
	}

	public static class DOVirtual // TypeDefIndex: 2759
	{
		// Nested types
		[CompilerGenerated] // 0x003D85B0-0x003D85C0
		private sealed class <>c__DisplayClass0_0 // TypeDefIndex: 2760
		{
			// Fields
			public float val; // 0x10
			public TweenCallback<float> onVirtualUpdate; // 0x18
	
			// Constructors
			public <>c__DisplayClass0_0(); // 0x0098C158-0x0098C160
	
			// Methods
			internal float <Float>b__0(); // 0x0098C4B4-0x0098C4BC
			internal void <Float>b__1(float x); // 0x0098C4BC-0x0098C4C4
			internal void <Float>b__2(); // 0x0098C4C4-0x0098C534
		}
	
		// Methods
		public static Tweener Float(float from, float to, float duration, TweenCallback<float> onVirtualUpdate); // 0x0098BFCC-0x0098C158
		public static float EasedValue(float from, float to, float lifetimePercentage, Ease easeType); // 0x0098C160-0x0098C208
		public static float EasedValue(float from, float to, float lifetimePercentage, Ease easeType, float overshoot); // 0x0098C208-0x0098C2B8
		public static float EasedValue(float from, float to, float lifetimePercentage, Ease easeType, float amplitude, float period); // 0x0098C2B8-0x0098C2FC
		public static float EasedValue(float from, float to, float lifetimePercentage, AnimationCurve easeCurve); // 0x0098C2FC-0x0098C3F0
		public static Tween DelayedCall(float delay, TweenCallback callback, bool ignoreTimeScale = true /* Metadata: 0x0021B431 */); // 0x0098C3F0-0x0098C4B4
	}

	public enum Ease // TypeDefIndex: 2761
	{
		Unset = 0,
		Linear = 1,
		InSine = 2,
		OutSine = 3,
		InOutSine = 4,
		InQuad = 5,
		OutQuad = 6,
		InOutQuad = 7,
		InCubic = 8,
		OutCubic = 9,
		InOutCubic = 10,
		InQuart = 11,
		OutQuart = 12,
		InOutQuart = 13,
		InQuint = 14,
		OutQuint = 15,
		InOutQuint = 16,
		InExpo = 17,
		OutExpo = 18,
		InOutExpo = 19,
		InCirc = 20,
		OutCirc = 21,
		InOutCirc = 22,
		InElastic = 23,
		OutElastic = 24,
		InOutElastic = 25,
		InBack = 26,
		OutBack = 27,
		InOutBack = 28,
		InBounce = 29,
		OutBounce = 30,
		InOutBounce = 31,
		Flash = 32,
		InFlash = 33,
		OutFlash = 34,
		InOutFlash = 35,
		INTERNAL_Zero = 36,
		INTERNAL_Custom = 37
	}

	public class EaseFactory // TypeDefIndex: 2762
	{
		// Nested types
		[CompilerGenerated] // 0x003D85C0-0x003D85D0
		private sealed class <>c__DisplayClass2_0 // TypeDefIndex: 2763
		{
			// Fields
			public float motionDelay; // 0x10
			public EaseFunction customEase; // 0x18
	
			// Constructors
			public <>c__DisplayClass2_0(); // 0x0098C750-0x0098C758
	
			// Methods
			internal float <StopMotion>b__0(float time, float duration, float overshootOrAmplitude, float period); // 0x0098C760-0x0098C7E4
		}
	
		// Constructors
		public EaseFactory(); // 0x0098C758-0x0098C760
	
		// Methods
		public static EaseFunction StopMotion(int motionFps, Ease? ease = default); // 0x0098C534-0x0098C5EC
		public static EaseFunction StopMotion(int motionFps, AnimationCurve animCurve); // 0x0098C6B0-0x0098C750
		public static EaseFunction StopMotion(int motionFps, EaseFunction customEase); // 0x0098C5EC-0x0098C6B0
	}

	public interface IDOTweenInit // TypeDefIndex: 2764
	{
		// Methods
		IDOTweenInit SetCapacity(int tweenersCapacity, int sequencesCapacity);
	}

	public enum PathMode // TypeDefIndex: 2765
	{
		Ignore = 0,
		Full3D = 1,
		TopDown2D = 2,
		Sidescroller2D = 3
	}

	public enum PathType // TypeDefIndex: 2766
	{
		Linear = 0,
		CatmullRom = 1
	}

	public enum RotateMode // TypeDefIndex: 2767
	{
		Fast = 0,
		FastBeyond360 = 1,
		WorldAxisAdd = 2,
		LocalAxisAdd = 3
	}

	public enum ScrambleMode // TypeDefIndex: 2768
	{
		None = 0,
		All = 1,
		Uppercase = 2,
		Lowercase = 3,
		Numerals = 4,
		Custom = 5
	}

	public static class TweenExtensions // TypeDefIndex: 2769
	{
		// Extension methods
		public static void Complete(this Tween t); // 0x008B188C-0x008B1894
		public static void Complete(this Tween t, bool withCallbacks); // 0x008B1894-0x008B19D8
		public static void Flip(this Tween t); // 0x008B19D8-0x008B1AF0
		public static void ForceInit(this Tween t); // 0x008B1AF0-0x008B1C0C
		public static void Goto(this Tween t, float to, bool andPlay = false /* Metadata: 0x0021B50A */); // 0x008B0F9C-0x008B1100
		public static void Kill(this Tween t, bool complete = false /* Metadata: 0x0021B50B */); // 0x008B1C0C-0x008B1DB4
		public static T Pause<T>(this T t)
			where T : Tween;
		public static T Play<T>(this T t)
			where T : Tween;
		public static void PlayBackwards(this Tween t); // 0x008B1DB4-0x008B1ECC
		public static void PlayForward(this Tween t); // 0x008B1ECC-0x008B1FE4
		public static void Restart(this Tween t, bool includeDelay = true /* Metadata: 0x0021B50C */, float changeDelayTo = -1f /* Metadata: 0x0021B50D */); // 0x008B1FE4-0x008B213C
		public static void Rewind(this Tween t, bool includeDelay = true /* Metadata: 0x0021B511 */); // 0x008B213C-0x008B2274
		public static void SmoothRewind(this Tween t); // 0x008B2274-0x008B238C
		public static void TogglePause(this Tween t); // 0x008B238C-0x008B24A4
		public static void GotoWaypoint(this Tween t, int waypointIndex, bool andPlay = false /* Metadata: 0x0021B512 */); // 0x008B24A4-0x008B27F4
		public static YieldInstruction WaitForCompletion(this Tween t); // 0x008B27F4-0x008B28F4
		public static YieldInstruction WaitForRewind(this Tween t); // 0x008B28F4-0x008B29F4
		public static YieldInstruction WaitForKill(this Tween t); // 0x008B29F4-0x008B2AF4
		public static YieldInstruction WaitForElapsedLoops(this Tween t, int elapsedLoops); // 0x008B2AF4-0x008B2C08
		public static YieldInstruction WaitForPosition(this Tween t, float position); // 0x008B2C08-0x008B2D1C
		public static Coroutine WaitForStart(this Tween t); // 0x008B2D1C-0x008B2E20
		public static int CompletedLoops(this Tween t); // 0x008B2E20-0x008B2EA8
		public static float Delay(this Tween t); // 0x008B2EA8-0x008B2F3C
		public static float Duration(this Tween t, bool includeLoops = true /* Metadata: 0x0021B513 */); // 0x008B2F3C-0x008B3008
		public static float Elapsed(this Tween t, bool includeLoops = true /* Metadata: 0x0021B514 */); // 0x008B0ED0-0x008B0F94
		public static float ElapsedPercentage(this Tween t, bool includeLoops = true /* Metadata: 0x0021B515 */); // 0x008B3008-0x008B30DC
		public static float ElapsedDirectionalPercentage(this Tween t); // 0x008AE41C-0x008AE4EC
		public static bool IsActive(this Tween t); // 0x008B30DC-0x008B3104
		public static bool IsBackwards(this Tween t); // 0x008B3104-0x008B3194
		public static bool IsComplete(this Tween t); // 0x008B3194-0x008B3224
		public static bool IsInitialized(this Tween t); // 0x008B3224-0x008B32B4
		public static bool IsPlaying(this Tween t); // 0x008B32B4-0x008B3344
		public static int Loops(this Tween t); // 0x008B3344-0x008B33CC
		public static Vector3 PathGetPoint(this Tween t, float pathPercentage); // 0x008B33CC-0x008B35C8
		public static Vector3[] PathGetDrawPoints(this Tween t, int subdivisionsXSegment = 10 /* Metadata: 0x0021B516 */); // 0x008B35C8-0x008B3774
		public static float PathLength(this Tween t); // 0x008B3774-0x008B392C
	}

	public enum LoopType // TypeDefIndex: 2770
	{
		Restart = 0,
		Yoyo = 1,
		Incremental = 2
	}

	public sealed class Sequence : Tween // TypeDefIndex: 2771
	{
		// Fields
		internal readonly List<Tween> sequencedTweens; // 0x108
		private readonly List<ABSSequentiable> _sequencedObjs; // 0x110
		internal float lastTweenInsertTime; // 0x118
	
		// Constructors
		internal Sequence(); // 0x008A0E50-0x008A0F10
	
		// Methods
		internal static Sequence DoPrepend(Sequence inSequence, Tween t); // 0x008A0F2C-0x008A10CC
		internal static Sequence DoInsert(Sequence inSequence, Tween t, float atPosition); // 0x008A10CC-0x008A1220
		internal static Sequence DoAppendInterval(Sequence inSequence, float interval); // 0x008A1220-0x008A12A4
		internal static Sequence DoPrependInterval(Sequence inSequence, float interval); // 0x008A12A4-0x008A1414
		internal static Sequence DoInsertCallback(Sequence inSequence, TweenCallback callback, float atPosition); // 0x008A1414-0x008A1504
		internal override void Reset(); // 0x008A1504-0x008A1604
		internal override bool Validate(); // 0x008A167C-0x008A1760
		internal override bool Startup(); // 0x008A1760-0x008A1764
		internal override bool ApplyTween(float prevPosition, int prevCompletedLoops, int newCompletedSteps, bool useInversePosition, UpdateMode updateMode, UpdateNotice updateNotice); // 0x008A198C-0x008A1994
		internal static void Setup(Sequence s); // 0x008A1CBC-0x008A1DF4
		internal static bool DoStartup(Sequence s); // 0x008A1764-0x008A198C
		internal static bool DoApplyTween(Sequence s, float prevPosition, int prevCompletedLoops, int newCompletedSteps, bool useInversePosition, UpdateMode updateMode); // 0x008A1994-0x008A1CBC
		private static bool ApplyInternalCycle(Sequence s, float fromPos, float toPos, UpdateMode updateMode, bool useInverse, bool prevPosIsInverse, bool multiCycleStep = false /* Metadata: 0x0021B526 */); // 0x008A1DF4-0x008A23D8
		private static int SortSequencedObjs(ABSSequentiable a, ABSSequentiable b); // 0x008A26DC-0x008A273C
	}

	public static class ShortcutExtensions // TypeDefIndex: 2772
	{
		// Nested types
		[CompilerGenerated] // 0x003D85D0-0x003D85E0
		private sealed class <>c__DisplayClass0_0 // TypeDefIndex: 2773
		{
			// Fields
			public AudioSource target; // 0x10
	
			// Constructors
			public <>c__DisplayClass0_0(); // 0x008A2898-0x008A28A0
	
			// Methods
			internal float <DOFade>b__0(); // 0x008AD580-0x008AD5B0
			internal void <DOFade>b__1(float x); // 0x008AD5B0-0x008AD5F0
		}
	
		[CompilerGenerated] // 0x003D85E0-0x003D85F0
		private sealed class <>c__DisplayClass1_0 // TypeDefIndex: 2774
		{
			// Fields
			public AudioSource target; // 0x10
	
			// Constructors
			public <>c__DisplayClass1_0(); // 0x008A29D4-0x008A29DC
	
			// Methods
			internal float <DOPitch>b__0(); // 0x008ADCEC-0x008ADD1C
			internal void <DOPitch>b__1(float x); // 0x008ADD1C-0x008ADD5C
		}
	
		[CompilerGenerated] // 0x003D85F0-0x003D8600
		private sealed class <>c__DisplayClass2_0 // TypeDefIndex: 2775
		{
			// Fields
			public Camera target; // 0x10
	
			// Constructors
			public <>c__DisplayClass2_0(); // 0x008A2B10-0x008A2B18
	
			// Methods
			internal float <DOAspect>b__0(); // 0x008AE1E4-0x008AE214
			internal void <DOAspect>b__1(float x); // 0x008AE214-0x008AE254
		}
	
		[CompilerGenerated] // 0x003D8600-0x003D8610
		private sealed class <>c__DisplayClass3_0 // TypeDefIndex: 2776
		{
			// Fields
			public Camera target; // 0x10
	
			// Constructors
			public <>c__DisplayClass3_0(); // 0x008A2C74-0x008A2C7C
	
			// Methods
			internal Color <DOColor>b__0(); // 0x008AE940-0x008AE970
			internal void <DOColor>b__1(Color x); // 0x008AE970-0x008AE9D0
		}
	
		[CompilerGenerated] // 0x003D8610-0x003D8620
		private sealed class <>c__DisplayClass4_0 // TypeDefIndex: 2777
		{
			// Fields
			public Camera target; // 0x10
	
			// Constructors
			public <>c__DisplayClass4_0(); // 0x008A2DB0-0x008A2DB8
	
			// Methods
			internal float <DOFarClipPlane>b__0(); // 0x008AEF10-0x008AEF40
			internal void <DOFarClipPlane>b__1(float x); // 0x008AEF40-0x008AEF80
		}
	
		[CompilerGenerated] // 0x003D8620-0x003D8630
		private sealed class <>c__DisplayClass5_0 // TypeDefIndex: 2778
		{
			// Fields
			public Camera target; // 0x10
	
			// Constructors
			public <>c__DisplayClass5_0(); // 0x008A2EEC-0x008A2EF4
	
			// Methods
			internal float <DOFieldOfView>b__0(); // 0x008AF4F0-0x008AF520
			internal void <DOFieldOfView>b__1(float x); // 0x008AF520-0x008AF560
		}
	
		[CompilerGenerated] // 0x003D8630-0x003D8640
		private sealed class <>c__DisplayClass6_0 // TypeDefIndex: 2779
		{
			// Fields
			public Camera target; // 0x10
	
			// Constructors
			public <>c__DisplayClass6_0(); // 0x008A3028-0x008A3030
	
			// Methods
			internal float <DONearClipPlane>b__0(); // 0x008AFFCC-0x008AFFFC
			internal void <DONearClipPlane>b__1(float x); // 0x008AFFFC-0x008B003C
		}
	
		[CompilerGenerated] // 0x003D8640-0x003D8650
		private sealed class <>c__DisplayClass7_0 // TypeDefIndex: 2780
		{
			// Fields
			public Camera target; // 0x10
	
			// Constructors
			public <>c__DisplayClass7_0(); // 0x008A3164-0x008A316C
	
			// Methods
			internal float <DOOrthoSize>b__0(); // 0x008B07D8-0x008B0808
			internal void <DOOrthoSize>b__1(float x); // 0x008B0808-0x008B0848
		}
	
		[CompilerGenerated] // 0x003D8650-0x003D8660
		private sealed class <>c__DisplayClass8_0 // TypeDefIndex: 2781
		{
			// Fields
			public Camera target; // 0x10
	
			// Constructors
			public <>c__DisplayClass8_0(); // 0x008A32C8-0x008A32D0
	
			// Methods
			internal Rect <DOPixelRect>b__0(); // 0x008B0DA8-0x008B0DD8
			internal void <DOPixelRect>b__1(Rect x); // 0x008B0DD8-0x008B0E38
		}
	
		[CompilerGenerated] // 0x003D8660-0x003D8670
		private sealed class <>c__DisplayClass9_0 // TypeDefIndex: 2782
		{
			// Fields
			public Camera target; // 0x10
	
			// Constructors
			public <>c__DisplayClass9_0(); // 0x008A342C-0x008A3434
	
			// Methods
			internal Rect <DORect>b__0(); // 0x008B0E38-0x008B0E68
			internal void <DORect>b__1(Rect x); // 0x008B0E68-0x008B0EC8
		}
	
		[CompilerGenerated] // 0x003D8670-0x003D8680
		private sealed class <>c__DisplayClass10_0 // TypeDefIndex: 2783
		{
			// Fields
			public Camera target; // 0x10
	
			// Constructors
			public <>c__DisplayClass10_0(); // 0x008A360C-0x008A3614
	
			// Methods
			internal Vector3 <DOShakePosition>b__0(); // 0x008AD5F0-0x008AD638
			internal void <DOShakePosition>b__1(Vector3 x); // 0x008AD638-0x008AD6A8
		}
	
		[CompilerGenerated] // 0x003D8680-0x003D8690
		private sealed class <>c__DisplayClass11_0 // TypeDefIndex: 2784
		{
			// Fields
			public Camera target; // 0x10
	
			// Constructors
			public <>c__DisplayClass11_0(); // 0x008A3800-0x008A3808
	
			// Methods
			internal Vector3 <DOShakePosition>b__0(); // 0x008AD6A8-0x008AD6F0
			internal void <DOShakePosition>b__1(Vector3 x); // 0x008AD6F0-0x008AD760
		}
	
		[CompilerGenerated] // 0x003D8690-0x003D86A0
		private sealed class <>c__DisplayClass12_0 // TypeDefIndex: 2785
		{
			// Fields
			public Camera target; // 0x10
	
			// Constructors
			public <>c__DisplayClass12_0(); // 0x008A39E0-0x008A39E8
	
			// Methods
			internal Vector3 <DOShakeRotation>b__0(); // 0x008AD760-0x008AD7A8
			internal void <DOShakeRotation>b__1(Vector3 x); // 0x008AD7A8-0x008AD890
		}
	
		[CompilerGenerated] // 0x003D86A0-0x003D86B0
		private sealed class <>c__DisplayClass13_0 // TypeDefIndex: 2786
		{
			// Fields
			public Camera target; // 0x10
	
			// Constructors
			public <>c__DisplayClass13_0(); // 0x008A3BD4-0x008A3BDC
	
			// Methods
			internal Vector3 <DOShakeRotation>b__0(); // 0x008AD890-0x008AD8D8
			internal void <DOShakeRotation>b__1(Vector3 x); // 0x008AD8D8-0x008AD9C0
		}
	
		[CompilerGenerated] // 0x003D86B0-0x003D86C0
		private sealed class <>c__DisplayClass14_0 // TypeDefIndex: 2787
		{
			// Fields
			public Light target; // 0x10
	
			// Constructors
			public <>c__DisplayClass14_0(); // 0x008A3D38-0x008A3D40
	
			// Methods
			internal Color <DOColor>b__0(); // 0x008AD9C0-0x008AD9F0
			internal void <DOColor>b__1(Color x); // 0x008AD9F0-0x008ADA50
		}
	
		[CompilerGenerated] // 0x003D86C0-0x003D86D0
		private sealed class <>c__DisplayClass15_0 // TypeDefIndex: 2788
		{
			// Fields
			public Light target; // 0x10
	
			// Constructors
			public <>c__DisplayClass15_0(); // 0x008A3E74-0x008A3E7C
	
			// Methods
			internal float <DOIntensity>b__0(); // 0x008ADA50-0x008ADA80
			internal void <DOIntensity>b__1(float x); // 0x008ADA80-0x008ADAC0
		}
	
		[CompilerGenerated] // 0x003D86D0-0x003D86E0
		private sealed class <>c__DisplayClass16_0 // TypeDefIndex: 2789
		{
			// Fields
			public Light target; // 0x10
	
			// Constructors
			public <>c__DisplayClass16_0(); // 0x008A3FB0-0x008A3FB8
	
			// Methods
			internal float <DOShadowStrength>b__0(); // 0x008ADAC0-0x008ADAF0
			internal void <DOShadowStrength>b__1(float x); // 0x008ADAF0-0x008ADB30
		}
	
		[CompilerGenerated] // 0x003D86E0-0x003D86F0
		private sealed class <>c__DisplayClass17_0 // TypeDefIndex: 2790
		{
			// Fields
			public Color2 startValue; // 0x10
			public LineRenderer target; // 0x30
	
			// Constructors
			public <>c__DisplayClass17_0(); // 0x008A4158-0x008A4160
	
			// Methods
			internal Color2 <DOColor>b__0(); // 0x008ADB30-0x008ADB44
			internal void <DOColor>b__1(Color2 x); // 0x008ADB44-0x008ADBC4
		}
	
		[CompilerGenerated] // 0x003D86F0-0x003D8700
		private sealed class <>c__DisplayClass18_0 // TypeDefIndex: 2791
		{
			// Fields
			public Material target; // 0x10
	
			// Constructors
			public <>c__DisplayClass18_0(); // 0x008A42BC-0x008A42C4
	
			// Methods
			internal Color <DOColor>b__0(); // 0x008ADBC4-0x008ADBF4
			internal void <DOColor>b__1(Color x); // 0x008ADBF4-0x008ADC54
		}
	
		[CompilerGenerated] // 0x003D8700-0x003D8710
		private sealed class <>c__DisplayClass19_0 // TypeDefIndex: 2792
		{
			// Fields
			public Material target; // 0x10
			public string property; // 0x18
	
			// Constructors
			public <>c__DisplayClass19_0(); // 0x008A44E4-0x008A44EC
	
			// Methods
			internal Color <DOColor>b__0(); // 0x008ADC54-0x008ADC88
			internal void <DOColor>b__1(Color x); // 0x008ADC88-0x008ADCEC
		}
	
		[CompilerGenerated] // 0x003D8710-0x003D8720
		private sealed class <>c__DisplayClass20_0 // TypeDefIndex: 2793
		{
			// Fields
			public Material target; // 0x10
	
			// Constructors
			public <>c__DisplayClass20_0(); // 0x008A4620-0x008A4628
	
			// Methods
			internal Color <DOFade>b__0(); // 0x008ADD5C-0x008ADD8C
			internal void <DOFade>b__1(Color x); // 0x008ADD8C-0x008ADDEC
		}
	
		[CompilerGenerated] // 0x003D8720-0x003D8730
		private sealed class <>c__DisplayClass21_0 // TypeDefIndex: 2794
		{
			// Fields
			public Material target; // 0x10
			public string property; // 0x18
	
			// Constructors
			public <>c__DisplayClass21_0(); // 0x008A4820-0x008A4828
	
			// Methods
			internal Color <DOFade>b__0(); // 0x008ADDEC-0x008ADE20
			internal void <DOFade>b__1(Color x); // 0x008ADE20-0x008ADE84
		}
	
		[CompilerGenerated] // 0x003D8730-0x003D8740
		private sealed class <>c__DisplayClass22_0 // TypeDefIndex: 2795
		{
			// Fields
			public Material target; // 0x10
			public string property; // 0x18
	
			// Constructors
			public <>c__DisplayClass22_0(); // 0x008A4A20-0x008A4A28
	
			// Methods
			internal float <DOFloat>b__0(); // 0x008ADE84-0x008ADEB8
			internal void <DOFloat>b__1(float x); // 0x008ADEB8-0x008ADEFC
		}
	
		[CompilerGenerated] // 0x003D8740-0x003D8750
		private sealed class <>c__DisplayClass23_0 // TypeDefIndex: 2796
		{
			// Fields
			public Material target; // 0x10
	
			// Constructors
			public <>c__DisplayClass23_0(); // 0x008A4B6C-0x008A4B74
	
			// Methods
			internal Vector2 <DOOffset>b__0(); // 0x008ADEFC-0x008ADF2C
			internal void <DOOffset>b__1(Vector2 x); // 0x008ADF2C-0x008ADF74
		}
	
		[CompilerGenerated] // 0x003D8750-0x003D8760
		private sealed class <>c__DisplayClass24_0 // TypeDefIndex: 2797
		{
			// Fields
			public Material target; // 0x10
			public string property; // 0x18
	
			// Constructors
			public <>c__DisplayClass24_0(); // 0x008A4D7C-0x008A4D84
	
			// Methods
			internal Vector2 <DOOffset>b__0(); // 0x008ADF74-0x008ADFA8
			internal void <DOOffset>b__1(Vector2 x); // 0x008ADFA8-0x008ADFF4
		}
	
		[CompilerGenerated] // 0x003D8760-0x003D8770
		private sealed class <>c__DisplayClass25_0 // TypeDefIndex: 2798
		{
			// Fields
			public Material target; // 0x10
	
			// Constructors
			public <>c__DisplayClass25_0(); // 0x008A4EC8-0x008A4ED0
	
			// Methods
			internal Vector2 <DOTiling>b__0(); // 0x008ADFF4-0x008AE024
			internal void <DOTiling>b__1(Vector2 x); // 0x008AE024-0x008AE06C
		}
	
		[CompilerGenerated] // 0x003D8770-0x003D8780
		private sealed class <>c__DisplayClass26_0 // TypeDefIndex: 2799
		{
			// Fields
			public Material target; // 0x10
			public string property; // 0x18
	
			// Constructors
			public <>c__DisplayClass26_0(); // 0x008A50D8-0x008A50E0
	
			// Methods
			internal Vector2 <DOTiling>b__0(); // 0x008AE06C-0x008AE0A0
			internal void <DOTiling>b__1(Vector2 x); // 0x008AE0A0-0x008AE0EC
		}
	
		[CompilerGenerated] // 0x003D8780-0x003D8790
		private sealed class <>c__DisplayClass27_0 // TypeDefIndex: 2800
		{
			// Fields
			public Material target; // 0x10
			public string property; // 0x18
	
			// Constructors
			public <>c__DisplayClass27_0(); // 0x008A5300-0x008A5308
	
			// Methods
			internal Vector4 <DOVector>b__0(); // 0x008AE0EC-0x008AE120
			internal void <DOVector>b__1(Vector4 x); // 0x008AE120-0x008AE184
		}
	
		[CompilerGenerated] // 0x003D8790-0x003D87A0
		private sealed class <>c__DisplayClass28_0 // TypeDefIndex: 2801
		{
			// Fields
			public Rigidbody target; // 0x10
	
			// Constructors
			public <>c__DisplayClass28_0(); // 0x008A547C-0x008A5484
	
			// Methods
			internal Vector3 <DOMove>b__0(); // 0x008AE184-0x008AE1B4
		}
	
		[CompilerGenerated] // 0x003D87A0-0x003D87B0
		private sealed class <>c__DisplayClass29_0 // TypeDefIndex: 2802
		{
			// Fields
			public Rigidbody target; // 0x10
	
			// Constructors
			public <>c__DisplayClass29_0(); // 0x008A5614-0x008A561C
	
			// Methods
			internal Vector3 <DOMoveX>b__0(); // 0x008AE1B4-0x008AE1E4
		}
	
		[CompilerGenerated] // 0x003D87B0-0x003D87C0
		private sealed class <>c__DisplayClass30_0 // TypeDefIndex: 2803
		{
			// Fields
			public Rigidbody target; // 0x10
	
			// Constructors
			public <>c__DisplayClass30_0(); // 0x008A57AC-0x008A57B4
	
			// Methods
			internal Vector3 <DOMoveY>b__0(); // 0x008AE254-0x008AE284
		}
	
		[CompilerGenerated] // 0x003D87C0-0x003D87D0
		private sealed class <>c__DisplayClass31_0 // TypeDefIndex: 2804
		{
			// Fields
			public Rigidbody target; // 0x10
	
			// Constructors
			public <>c__DisplayClass31_0(); // 0x008A5944-0x008A594C
	
			// Methods
			internal Vector3 <DOMoveZ>b__0(); // 0x008AE284-0x008AE2B4
		}
	
		[CompilerGenerated] // 0x003D87D0-0x003D87E0
		private sealed class <>c__DisplayClass32_0 // TypeDefIndex: 2805
		{
			// Fields
			public Rigidbody target; // 0x10
	
			// Constructors
			public <>c__DisplayClass32_0(); // 0x008A5AD0-0x008A5AD8
	
			// Methods
			internal Quaternion <DORotate>b__0(); // 0x008AE2B4-0x008AE2E4
		}
	
		[CompilerGenerated] // 0x003D87E0-0x003D87F0
		private sealed class <>c__DisplayClass33_0 // TypeDefIndex: 2806
		{
			// Fields
			public Rigidbody target; // 0x10
	
			// Constructors
			public <>c__DisplayClass33_0(); // 0x008A5CF4-0x008A5CFC
	
			// Methods
			internal Quaternion <DOLookAt>b__0(); // 0x008AE2E4-0x008AE314
		}
	
		[CompilerGenerated] // 0x003D87F0-0x003D8800
		private sealed class <>c__DisplayClass34_0 // TypeDefIndex: 2807
		{
			// Fields
			public Rigidbody target; // 0x10
			public bool offsetYSet; // 0x18
			public float offsetY; // 0x1C
			public Sequence s; // 0x20
			public Vector3 endValue; // 0x28
			public float startPosY; // 0x34
	
			// Constructors
			public <>c__DisplayClass34_0(); // 0x008A61BC-0x008A61C4
	
			// Methods
			internal Vector3 <DOJump>b__0(); // 0x008AE314-0x008AE344
			internal void <DOJump>b__1(); // 0x008AE344-0x008AE41C
			internal Vector3 <DOJump>b__2(); // 0x008AE4EC-0x008AE51C
			internal Vector3 <DOJump>b__3(); // 0x008AE51C-0x008AE54C
		}
	
		[CompilerGenerated] // 0x003D8800-0x003D8810
		private sealed class <>c__DisplayClass35_0 // TypeDefIndex: 2808
		{
			// Fields
			public Rigidbody target; // 0x10
	
			// Constructors
			public <>c__DisplayClass35_0(); // 0x008A63FC-0x008A6404
	
			// Methods
			internal Vector3 <DOPath>b__0(); // 0x008AE54C-0x008AE57C
		}
	
		[CompilerGenerated] // 0x003D8810-0x003D8820
		private sealed class <>c__DisplayClass36_0 // TypeDefIndex: 2809
		{
			// Fields
			public Transform trans; // 0x10
			public Rigidbody target; // 0x18
	
			// Constructors
			public <>c__DisplayClass36_0(); // 0x008A6684-0x008A668C
	
			// Methods
			internal Vector3 <DOLocalPath>b__0(); // 0x008AE57C-0x008AE5AC
			internal void <DOLocalPath>b__1(Vector3 x); // 0x008AE5AC-0x008AE6D4
		}
	
		[CompilerGenerated] // 0x003D8820-0x003D8830
		private sealed class <>c__DisplayClass37_0 // TypeDefIndex: 2810
		{
			// Fields
			public Rigidbody target; // 0x10
	
			// Constructors
			public <>c__DisplayClass37_0(); // 0x008A6840-0x008A6848
	
			// Methods
			internal Vector3 <DOPath>b__0(); // 0x008AE6D4-0x008AE704
		}
	
		[CompilerGenerated] // 0x003D8830-0x003D8840
		private sealed class <>c__DisplayClass38_0 // TypeDefIndex: 2811
		{
			// Fields
			public Transform trans; // 0x10
			public Rigidbody target; // 0x18
	
			// Constructors
			public <>c__DisplayClass38_0(); // 0x008A6A4C-0x008A6A54
	
			// Methods
			internal Vector3 <DOLocalPath>b__0(); // 0x008AE704-0x008AE734
			internal void <DOLocalPath>b__1(Vector3 x); // 0x008AE734-0x008AE85C
		}
	
		[CompilerGenerated] // 0x003D8840-0x003D8850
		private sealed class <>c__DisplayClass39_0 // TypeDefIndex: 2812
		{
			// Fields
			public TrailRenderer target; // 0x10
	
			// Constructors
			public <>c__DisplayClass39_0(); // 0x008A6BB8-0x008A6BC0
	
			// Methods
			internal Vector2 <DOResize>b__0(); // 0x008AE85C-0x008AE8D8
			internal void <DOResize>b__1(Vector2 x); // 0x008AE8D8-0x008AE940
		}
	
		[CompilerGenerated] // 0x003D8850-0x003D8860
		private sealed class <>c__DisplayClass40_0 // TypeDefIndex: 2813
		{
			// Fields
			public TrailRenderer target; // 0x10
	
			// Constructors
			public <>c__DisplayClass40_0(); // 0x008A6CF4-0x008A6CFC
	
			// Methods
			internal float <DOTime>b__0(); // 0x008AE9D0-0x008AEA00
			internal void <DOTime>b__1(float x); // 0x008AEA00-0x008AEA40
		}
	
		[CompilerGenerated] // 0x003D8860-0x003D8870
		private sealed class <>c__DisplayClass41_0 // TypeDefIndex: 2814
		{
			// Fields
			public Transform target; // 0x10
	
			// Constructors
			public <>c__DisplayClass41_0(); // 0x008A6E58-0x008A6E60
	
			// Methods
			internal Vector3 <DOMove>b__0(); // 0x008AEA40-0x008AEA70
			internal void <DOMove>b__1(Vector3 x); // 0x008AEA70-0x008AEAC8
		}
	
		[CompilerGenerated] // 0x003D8870-0x003D8880
		private sealed class <>c__DisplayClass42_0 // TypeDefIndex: 2815
		{
			// Fields
			public Transform target; // 0x10
	
			// Constructors
			public <>c__DisplayClass42_0(); // 0x008A6FD8-0x008A6FE0
	
			// Methods
			internal Vector3 <DOMoveX>b__0(); // 0x008AEAC8-0x008AEAF8
			internal void <DOMoveX>b__1(Vector3 x); // 0x008AEAF8-0x008AEB50
		}
	
		[CompilerGenerated] // 0x003D8880-0x003D8890
		private sealed class <>c__DisplayClass43_0 // TypeDefIndex: 2816
		{
			// Fields
			public Transform target; // 0x10
	
			// Constructors
			public <>c__DisplayClass43_0(); // 0x008A7158-0x008A7160
	
			// Methods
			internal Vector3 <DOMoveY>b__0(); // 0x008AEB50-0x008AEB80
			internal void <DOMoveY>b__1(Vector3 x); // 0x008AEB80-0x008AEBD8
		}
	
		[CompilerGenerated] // 0x003D8890-0x003D88A0
		private sealed class <>c__DisplayClass44_0 // TypeDefIndex: 2817
		{
			// Fields
			public Transform target; // 0x10
	
			// Constructors
			public <>c__DisplayClass44_0(); // 0x008A72D8-0x008A72E0
	
			// Methods
			internal Vector3 <DOMoveZ>b__0(); // 0x008AEBD8-0x008AEC08
			internal void <DOMoveZ>b__1(Vector3 x); // 0x008AEC08-0x008AEC60
		}
	
		[CompilerGenerated] // 0x003D88A0-0x003D88B0
		private sealed class <>c__DisplayClass45_0 // TypeDefIndex: 2818
		{
			// Fields
			public Transform target; // 0x10
	
			// Constructors
			public <>c__DisplayClass45_0(); // 0x008A743C-0x008A7444
	
			// Methods
			internal Vector3 <DOLocalMove>b__0(); // 0x008AEC60-0x008AEC90
			internal void <DOLocalMove>b__1(Vector3 x); // 0x008AEC90-0x008AECE8
		}
	
		[CompilerGenerated] // 0x003D88B0-0x003D88C0
		private sealed class <>c__DisplayClass46_0 // TypeDefIndex: 2819
		{
			// Fields
			public Transform target; // 0x10
	
			// Constructors
			public <>c__DisplayClass46_0(); // 0x008A75BC-0x008A75C4
	
			// Methods
			internal Vector3 <DOLocalMoveX>b__0(); // 0x008AECE8-0x008AED18
			internal void <DOLocalMoveX>b__1(Vector3 x); // 0x008AED18-0x008AED70
		}
	
		[CompilerGenerated] // 0x003D88C0-0x003D88D0
		private sealed class <>c__DisplayClass47_0 // TypeDefIndex: 2820
		{
			// Fields
			public Transform target; // 0x10
	
			// Constructors
			public <>c__DisplayClass47_0(); // 0x008A773C-0x008A7744
	
			// Methods
			internal Vector3 <DOLocalMoveY>b__0(); // 0x008AED70-0x008AEDA0
			internal void <DOLocalMoveY>b__1(Vector3 x); // 0x008AEDA0-0x008AEDF8
		}
	
		[CompilerGenerated] // 0x003D88D0-0x003D88E0
		private sealed class <>c__DisplayClass48_0 // TypeDefIndex: 2821
		{
			// Fields
			public Transform target; // 0x10
	
			// Constructors
			public <>c__DisplayClass48_0(); // 0x008A78BC-0x008A78C4
	
			// Methods
			internal Vector3 <DOLocalMoveZ>b__0(); // 0x008AEDF8-0x008AEE28
			internal void <DOLocalMoveZ>b__1(Vector3 x); // 0x008AEE28-0x008AEE80
		}
	
		[CompilerGenerated] // 0x003D88E0-0x003D88F0
		private sealed class <>c__DisplayClass49_0 // TypeDefIndex: 2822
		{
			// Fields
			public Transform target; // 0x10
	
			// Constructors
			public <>c__DisplayClass49_0(); // 0x008A7A30-0x008A7A38
	
			// Methods
			internal Quaternion <DORotate>b__0(); // 0x008AEE80-0x008AEEB0
			internal void <DORotate>b__1(Quaternion x); // 0x008AEEB0-0x008AEF10
		}
	
		[CompilerGenerated] // 0x003D88F0-0x003D8900
		private sealed class <>c__DisplayClass50_0 // TypeDefIndex: 2823
		{
			// Fields
			public Transform target; // 0x10
	
			// Constructors
			public <>c__DisplayClass50_0(); // 0x008A7BBC-0x008A7BC4
	
			// Methods
			internal Quaternion <DORotateQuaternion>b__0(); // 0x008AEF80-0x008AEFB0
			internal void <DORotateQuaternion>b__1(Quaternion x); // 0x008AEFB0-0x008AF010
		}
	
		[CompilerGenerated] // 0x003D8900-0x003D8910
		private sealed class <>c__DisplayClass51_0 // TypeDefIndex: 2824
		{
			// Fields
			public Transform target; // 0x10
	
			// Constructors
			public <>c__DisplayClass51_0(); // 0x008A7D30-0x008A7D38
	
			// Methods
			internal Quaternion <DOLocalRotate>b__0(); // 0x008AF010-0x008AF040
			internal void <DOLocalRotate>b__1(Quaternion x); // 0x008AF040-0x008AF0A0
		}
	
		[CompilerGenerated] // 0x003D8910-0x003D8920
		private sealed class <>c__DisplayClass52_0 // TypeDefIndex: 2825
		{
			// Fields
			public Transform target; // 0x10
	
			// Constructors
			public <>c__DisplayClass52_0(); // 0x008A7EBC-0x008A7EC4
	
			// Methods
			internal Quaternion <DOLocalRotateQuaternion>b__0(); // 0x008AF0A0-0x008AF0D0
			internal void <DOLocalRotateQuaternion>b__1(Quaternion x); // 0x008AF0D0-0x008AF130
		}
	
		[CompilerGenerated] // 0x003D8920-0x003D8930
		private sealed class <>c__DisplayClass53_0 // TypeDefIndex: 2826
		{
			// Fields
			public Transform target; // 0x10
	
			// Constructors
			public <>c__DisplayClass53_0(); // 0x008A8010-0x008A8018
	
			// Methods
			internal Vector3 <DOScale>b__0(); // 0x008AF130-0x008AF160
			internal void <DOScale>b__1(Vector3 x); // 0x008AF160-0x008AF1B8
		}
	
		[CompilerGenerated] // 0x003D8930-0x003D8940
		private sealed class <>c__DisplayClass54_0 // TypeDefIndex: 2827
		{
			// Fields
			public Transform target; // 0x10
	
			// Constructors
			public <>c__DisplayClass54_0(); // 0x008A8190-0x008A8198
	
			// Methods
			internal Vector3 <DOScale>b__0(); // 0x008AF1B8-0x008AF1E8
			internal void <DOScale>b__1(Vector3 x); // 0x008AF1E8-0x008AF240
		}
	
		[CompilerGenerated] // 0x003D8940-0x003D8950
		private sealed class <>c__DisplayClass55_0 // TypeDefIndex: 2828
		{
			// Fields
			public Transform target; // 0x10
	
			// Constructors
			public <>c__DisplayClass55_0(); // 0x008A830C-0x008A8314
	
			// Methods
			internal Vector3 <DOScaleX>b__0(); // 0x008AF240-0x008AF270
			internal void <DOScaleX>b__1(Vector3 x); // 0x008AF270-0x008AF2C8
		}
	
		[CompilerGenerated] // 0x003D8950-0x003D8960
		private sealed class <>c__DisplayClass56_0 // TypeDefIndex: 2829
		{
			// Fields
			public Transform target; // 0x10
	
			// Constructors
			public <>c__DisplayClass56_0(); // 0x008A8488-0x008A8490
	
			// Methods
			internal Vector3 <DOScaleY>b__0(); // 0x008AF2C8-0x008AF2F8
			internal void <DOScaleY>b__1(Vector3 x); // 0x008AF2F8-0x008AF350
		}
	
		[CompilerGenerated] // 0x003D8960-0x003D8970
		private sealed class <>c__DisplayClass57_0 // TypeDefIndex: 2830
		{
			// Fields
			public Transform target; // 0x10
	
			// Constructors
			public <>c__DisplayClass57_0(); // 0x008A8604-0x008A860C
	
			// Methods
			internal Vector3 <DOScaleZ>b__0(); // 0x008AF350-0x008AF380
			internal void <DOScaleZ>b__1(Vector3 x); // 0x008AF380-0x008AF3D8
		}
	
		[CompilerGenerated] // 0x003D8970-0x003D8980
		private sealed class <>c__DisplayClass58_0 // TypeDefIndex: 2831
		{
			// Fields
			public Transform target; // 0x10
	
			// Constructors
			public <>c__DisplayClass58_0(); // 0x008A8810-0x008A8818
	
			// Methods
			internal Quaternion <DOLookAt>b__0(); // 0x008AF3D8-0x008AF408
			internal void <DOLookAt>b__1(Quaternion x); // 0x008AF408-0x008AF468
		}
	
		[CompilerGenerated] // 0x003D8980-0x003D8990
		private sealed class <>c__DisplayClass59_0 // TypeDefIndex: 2832
		{
			// Fields
			public Transform target; // 0x10
	
			// Constructors
			public <>c__DisplayClass59_0(); // 0x008A8A10-0x008A8A18
	
			// Methods
			internal Vector3 <DOPunchPosition>b__0(); // 0x008AF468-0x008AF498
			internal void <DOPunchPosition>b__1(Vector3 x); // 0x008AF498-0x008AF4F0
		}
	
		[CompilerGenerated] // 0x003D8990-0x003D89A0
		private sealed class <>c__DisplayClass60_0 // TypeDefIndex: 2833
		{
			// Fields
			public Transform target; // 0x10
	
			// Constructors
			public <>c__DisplayClass60_0(); // 0x008A8BE0-0x008A8BE8
	
			// Methods
			internal Vector3 <DOPunchScale>b__0(); // 0x008AF560-0x008AF590
			internal void <DOPunchScale>b__1(Vector3 x); // 0x008AF590-0x008AF5E8
		}
	
		[CompilerGenerated] // 0x003D89A0-0x003D89B0
		private sealed class <>c__DisplayClass61_0 // TypeDefIndex: 2834
		{
			// Fields
			public Transform target; // 0x10
	
			// Constructors
			public <>c__DisplayClass61_0(); // 0x008A8DB0-0x008A8DB8
	
			// Methods
			internal Vector3 <DOPunchRotation>b__0(); // 0x008AF5E8-0x008AF618
			internal void <DOPunchRotation>b__1(Vector3 x); // 0x008AF618-0x008AF6E0
		}
	
		[CompilerGenerated] // 0x003D89B0-0x003D89C0
		private sealed class <>c__DisplayClass62_0 // TypeDefIndex: 2835
		{
			// Fields
			public Transform target; // 0x10
	
			// Constructors
			public <>c__DisplayClass62_0(); // 0x008A8FB4-0x008A8FBC
	
			// Methods
			internal Vector3 <DOShakePosition>b__0(); // 0x008AF6E0-0x008AF710
			internal void <DOShakePosition>b__1(Vector3 x); // 0x008AF710-0x008AF768
		}
	
		[CompilerGenerated] // 0x003D89C0-0x003D89D0
		private sealed class <>c__DisplayClass63_0 // TypeDefIndex: 2836
		{
			// Fields
			public Transform target; // 0x10
	
			// Constructors
			public <>c__DisplayClass63_0(); // 0x008A91D0-0x008A91D8
	
			// Methods
			internal Vector3 <DOShakePosition>b__0(); // 0x008AF768-0x008AF798
			internal void <DOShakePosition>b__1(Vector3 x); // 0x008AF798-0x008AF7F0
		}
	
		[CompilerGenerated] // 0x003D89D0-0x003D89E0
		private sealed class <>c__DisplayClass64_0 // TypeDefIndex: 2837
		{
			// Fields
			public Transform target; // 0x10
	
			// Constructors
			public <>c__DisplayClass64_0(); // 0x008A93B0-0x008A93B8
	
			// Methods
			internal Vector3 <DOShakeRotation>b__0(); // 0x008AF7F0-0x008AF820
			internal void <DOShakeRotation>b__1(Vector3 x); // 0x008AF820-0x008AF8E8
		}
	
		[CompilerGenerated] // 0x003D89E0-0x003D89F0
		private sealed class <>c__DisplayClass65_0 // TypeDefIndex: 2838
		{
			// Fields
			public Transform target; // 0x10
	
			// Constructors
			public <>c__DisplayClass65_0(); // 0x008A95A4-0x008A95AC
	
			// Methods
			internal Vector3 <DOShakeRotation>b__0(); // 0x008AF8E8-0x008AF918
			internal void <DOShakeRotation>b__1(Vector3 x); // 0x008AF918-0x008AF9E0
		}
	
		[CompilerGenerated] // 0x003D89F0-0x003D8A00
		private sealed class <>c__DisplayClass66_0 // TypeDefIndex: 2839
		{
			// Fields
			public Transform target; // 0x10
	
			// Constructors
			public <>c__DisplayClass66_0(); // 0x008A97DC-0x008A97E4
	
			// Methods
			internal Vector3 <DOShakeScale>b__0(); // 0x008AF9E0-0x008AFA10
			internal void <DOShakeScale>b__1(Vector3 x); // 0x008AFA10-0x008AFA68
		}
	
		[CompilerGenerated] // 0x003D8A00-0x003D8A10
		private sealed class <>c__DisplayClass67_0 // TypeDefIndex: 2840
		{
			// Fields
			public Transform target; // 0x10
	
			// Constructors
			public <>c__DisplayClass67_0(); // 0x008A99D0-0x008A99D8
	
			// Methods
			internal Vector3 <DOShakeScale>b__0(); // 0x008AFA68-0x008AFA98
			internal void <DOShakeScale>b__1(Vector3 x); // 0x008AFA98-0x008AFAF0
		}
	
		[CompilerGenerated] // 0x003D8A10-0x003D8A20
		private sealed class <>c__DisplayClass68_0 // TypeDefIndex: 2841
		{
			// Fields
			public Transform target; // 0x10
			public bool offsetYSet; // 0x18
			public float offsetY; // 0x1C
			public Sequence s; // 0x20
			public Vector3 endValue; // 0x28
			public float startPosY; // 0x34
	
			// Constructors
			public <>c__DisplayClass68_0(); // 0x008A9E7C-0x008A9E84
	
			// Methods
			internal Vector3 <DOJump>b__0(); // 0x008AFAF0-0x008AFB20
			internal void <DOJump>b__1(Vector3 x); // 0x008AFB20-0x008AFB78
			internal void <DOJump>b__2(); // 0x008AFB78-0x008AFC50
			internal Vector3 <DOJump>b__3(); // 0x008AFC50-0x008AFC80
			internal void <DOJump>b__4(Vector3 x); // 0x008AFC80-0x008AFCD8
			internal Vector3 <DOJump>b__5(); // 0x008AFCD8-0x008AFD08
			internal void <DOJump>b__6(Vector3 x); // 0x008AFD08-0x008AFD60
		}
	
		[CompilerGenerated] // 0x003D8A20-0x003D8A30
		private sealed class <>c__DisplayClass69_0 // TypeDefIndex: 2842
		{
			// Fields
			public Transform target; // 0x10
			public bool offsetYSet; // 0x18
			public float offsetY; // 0x1C
			public Sequence s; // 0x20
			public Vector3 endValue; // 0x28
			public float startPosY; // 0x34
	
			// Constructors
			public <>c__DisplayClass69_0(); // 0x008AB328-0x008AB330
	
			// Methods
			internal Vector3 <DOLocalJump>b__0(); // 0x008AFD60-0x008AFD90
			internal void <DOLocalJump>b__1(Vector3 x); // 0x008AFD90-0x008AFDE8
			internal void <DOLocalJump>b__2(); // 0x008AFDE8-0x008AFEBC
			internal Vector3 <DOLocalJump>b__3(); // 0x008AFEBC-0x008AFEEC
			internal void <DOLocalJump>b__4(Vector3 x); // 0x008AFEEC-0x008AFF44
			internal Vector3 <DOLocalJump>b__5(); // 0x008AFF44-0x008AFF74
			internal void <DOLocalJump>b__6(Vector3 x); // 0x008AFF74-0x008AFFCC
		}
	
		[CompilerGenerated] // 0x003D8A30-0x003D8A40
		private sealed class <>c__DisplayClass70_0 // TypeDefIndex: 2843
		{
			// Fields
			public Transform target; // 0x10
	
			// Constructors
			public <>c__DisplayClass70_0(); // 0x008AB50C-0x008AB514
	
			// Methods
			internal Vector3 <DOPath>b__0(); // 0x008B003C-0x008B006C
			internal void <DOPath>b__1(Vector3 x); // 0x008B006C-0x008B00C4
		}
	
		[CompilerGenerated] // 0x003D8A40-0x003D8A50
		private sealed class <>c__DisplayClass71_0 // TypeDefIndex: 2844
		{
			// Fields
			public Transform target; // 0x10
	
			// Constructors
			public <>c__DisplayClass71_0(); // 0x008AB710-0x008AB718
	
			// Methods
			internal Vector3 <DOLocalPath>b__0(); // 0x008B00C4-0x008B00F4
			internal void <DOLocalPath>b__1(Vector3 x); // 0x008B00F4-0x008B014C
		}
	
		[CompilerGenerated] // 0x003D8A50-0x003D8A60
		private sealed class <>c__DisplayClass72_0 // TypeDefIndex: 2845
		{
			// Fields
			public Transform target; // 0x10
	
			// Constructors
			public <>c__DisplayClass72_0(); // 0x008AB88C-0x008AB894
	
			// Methods
			internal Vector3 <DOPath>b__0(); // 0x008B014C-0x008B017C
			internal void <DOPath>b__1(Vector3 x); // 0x008B017C-0x008B01D4
		}
	
		[CompilerGenerated] // 0x003D8A60-0x003D8A70
		private sealed class <>c__DisplayClass73_0 // TypeDefIndex: 2846
		{
			// Fields
			public Transform target; // 0x10
	
			// Constructors
			public <>c__DisplayClass73_0(); // 0x008ABA28-0x008ABA30
	
			// Methods
			internal Vector3 <DOLocalPath>b__0(); // 0x008B01D4-0x008B0204
			internal void <DOLocalPath>b__1(Vector3 x); // 0x008B0204-0x008B025C
		}
	
		[CompilerGenerated] // 0x003D8A70-0x003D8A80
		private sealed class <>c__DisplayClass74_0 // TypeDefIndex: 2847
		{
			// Fields
			public Tween target; // 0x10
	
			// Constructors
			public <>c__DisplayClass74_0(); // 0x008ABB64-0x008ABB6C
	
			// Methods
			internal float <DOTimeScale>b__0(); // 0x008B025C-0x008B0288
			internal void <DOTimeScale>b__1(float x); // 0x008B0288-0x008B02C0
		}
	
		[CompilerGenerated] // 0x003D8A80-0x003D8A90
		private sealed class <>c__DisplayClass75_0 // TypeDefIndex: 2848
		{
			// Fields
			public Color to; // 0x10
			public Light target; // 0x20
	
			// Constructors
			public <>c__DisplayClass75_0(); // 0x008ABD98-0x008ABDA0
	
			// Methods
			internal Color <DOBlendableColor>b__0(); // 0x008B02C0-0x008B02CC
			internal void <DOBlendableColor>b__1(Color x); // 0x008B02CC-0x008B03A8
		}
	
		[CompilerGenerated] // 0x003D8A90-0x003D8AA0
		private sealed class <>c__DisplayClass76_0 // TypeDefIndex: 2849
		{
			// Fields
			public Color to; // 0x10
			public Material target; // 0x20
	
			// Constructors
			public <>c__DisplayClass76_0(); // 0x008ABFCC-0x008ABFD4
	
			// Methods
			internal Color <DOBlendableColor>b__0(); // 0x008B03A8-0x008B03B4
			internal void <DOBlendableColor>b__1(Color x); // 0x008B03B4-0x008B0490
		}
	
		[CompilerGenerated] // 0x003D8AA0-0x003D8AB0
		private sealed class <>c__DisplayClass77_0 // TypeDefIndex: 2850
		{
			// Fields
			public Color to; // 0x10
			public Material target; // 0x20
			public string property; // 0x28
	
			// Constructors
			public <>c__DisplayClass77_0(); // 0x008AC2B4-0x008AC2BC
	
			// Methods
			internal Color <DOBlendableColor>b__0(); // 0x008B0490-0x008B049C
			internal void <DOBlendableColor>b__1(Color x); // 0x008B049C-0x008B0588
		}
	
		[CompilerGenerated] // 0x003D8AB0-0x003D8AC0
		private sealed class <>c__DisplayClass78_0 // TypeDefIndex: 2851
		{
			// Fields
			public Vector3 to; // 0x10
			public Transform target; // 0x20
	
			// Constructors
			public <>c__DisplayClass78_0(); // 0x008AC458-0x008AC460
	
			// Methods
			internal Vector3 <DOBlendableMoveBy>b__0(); // 0x008B0588-0x008B0594
			internal void <DOBlendableMoveBy>b__1(Vector3 x); // 0x008B0594-0x008B06B0
		}
	
		[CompilerGenerated] // 0x003D8AC0-0x003D8AD0
		private sealed class <>c__DisplayClass79_0 // TypeDefIndex: 2852
		{
			// Fields
			public Vector3 to; // 0x10
			public Transform target; // 0x20
	
			// Constructors
			public <>c__DisplayClass79_0(); // 0x008AC5FC-0x008AC604
	
			// Methods
			internal Vector3 <DOBlendableLocalMoveBy>b__0(); // 0x008B06B0-0x008B06BC
			internal void <DOBlendableLocalMoveBy>b__1(Vector3 x); // 0x008B06BC-0x008B07D8
		}
	
		[CompilerGenerated] // 0x003D8AD0-0x003D8AE0
		private sealed class <>c__DisplayClass80_0 // TypeDefIndex: 2853
		{
			// Fields
			public Quaternion to; // 0x10
			public Transform target; // 0x20
	
			// Constructors
			public <>c__DisplayClass80_0(); // 0x008AC7AC-0x008AC7B4
	
			// Methods
			internal Quaternion <DOBlendableRotateBy>b__0(); // 0x008B0848-0x008B0854
			internal void <DOBlendableRotateBy>b__1(Quaternion x); // 0x008B0854-0x008B0A64
		}
	
		[CompilerGenerated] // 0x003D8AE0-0x003D8AF0
		private sealed class <>c__DisplayClass81_0 // TypeDefIndex: 2854
		{
			// Fields
			public Quaternion to; // 0x10
			public Transform target; // 0x20
	
			// Constructors
			public <>c__DisplayClass81_0(); // 0x008AC95C-0x008AC964
	
			// Methods
			internal Quaternion <DOBlendableLocalRotateBy>b__0(); // 0x008B0A64-0x008B0A70
			internal void <DOBlendableLocalRotateBy>b__1(Quaternion x); // 0x008B0A70-0x008B0C80
		}
	
		[CompilerGenerated] // 0x003D8AF0-0x003D8B00
		private sealed class <>c__DisplayClass82_0 // TypeDefIndex: 2855
		{
			// Fields
			public Vector3 to; // 0x10
			public Transform target; // 0x20
	
			// Constructors
			public <>c__DisplayClass82_0(); // 0x008ACAF0-0x008ACAF8
	
			// Methods
			internal Vector3 <DOBlendableScaleBy>b__0(); // 0x008B0C80-0x008B0C8C
			internal void <DOBlendableScaleBy>b__1(Vector3 x); // 0x008B0C8C-0x008B0DA8
		}
	
		// Extension methods
		public static Tweener DOFade(this AudioSource target, float endValue, float duration); // 0x008A273C-0x008A2898
		public static Tweener DOPitch(this AudioSource target, float endValue, float duration); // 0x008A28A0-0x008A29D4
		public static Tweener DOAspect(this Camera target, float endValue, float duration); // 0x008A29DC-0x008A2B10
		public static Tweener DOColor(this Camera target, Color endValue, float duration); // 0x008A2B18-0x008A2C74
		public static Tweener DOFarClipPlane(this Camera target, float endValue, float duration); // 0x008A2C7C-0x008A2DB0
		public static Tweener DOFieldOfView(this Camera target, float endValue, float duration); // 0x008A2DB8-0x008A2EEC
		public static Tweener DONearClipPlane(this Camera target, float endValue, float duration); // 0x008A2EF4-0x008A3028
		public static Tweener DOOrthoSize(this Camera target, float endValue, float duration); // 0x008A3030-0x008A3164
		public static Tweener DOPixelRect(this Camera target, Rect endValue, float duration); // 0x008A316C-0x008A32C8
		public static Tweener DORect(this Camera target, Rect endValue, float duration); // 0x008A32D0-0x008A342C
		public static Tweener DOShakePosition(this Camera target, float duration, float strength = 3f /* Metadata: 0x0021B527 */, int vibrato = 10 /* Metadata: 0x0021B52B */, float randomness = 90f /* Metadata: 0x0021B52F */, bool fadeOut = true /* Metadata: 0x0021B533 */); // 0x008A3434-0x008A360C
		public static Tweener DOShakePosition(this Camera target, float duration, Vector3 strength, int vibrato = 10 /* Metadata: 0x0021B534 */, float randomness = 90f /* Metadata: 0x0021B538 */, bool fadeOut = true /* Metadata: 0x0021B53C */); // 0x008A3614-0x008A3800
		public static Tweener DOShakeRotation(this Camera target, float duration, float strength = 90f /* Metadata: 0x0021B53D */, int vibrato = 10 /* Metadata: 0x0021B541 */, float randomness = 90f /* Metadata: 0x0021B545 */, bool fadeOut = true /* Metadata: 0x0021B549 */); // 0x008A3808-0x008A39E0
		public static Tweener DOShakeRotation(this Camera target, float duration, Vector3 strength, int vibrato = 10 /* Metadata: 0x0021B54A */, float randomness = 90f /* Metadata: 0x0021B54E */, bool fadeOut = true /* Metadata: 0x0021B552 */); // 0x008A39E8-0x008A3BD4
		public static Tweener DOColor(this Light target, Color endValue, float duration); // 0x008A3BDC-0x008A3D38
		public static Tweener DOIntensity(this Light target, float endValue, float duration); // 0x008A3D40-0x008A3E74
		public static Tweener DOShadowStrength(this Light target, float endValue, float duration); // 0x008A3E7C-0x008A3FB0
		public static Tweener DOColor(this LineRenderer target, Color2 startValue, Color2 endValue, float duration); // 0x008A3FB8-0x008A4158
		public static Tweener DOColor(this Material target, Color endValue, float duration); // 0x008A4160-0x008A42BC
		public static Tweener DOColor(this Material target, Color endValue, string property, float duration); // 0x008A42C4-0x008A44E4
		public static Tweener DOFade(this Material target, float endValue, float duration); // 0x008A44EC-0x008A4620
		public static Tweener DOFade(this Material target, float endValue, string property, float duration); // 0x008A4628-0x008A4820
		public static Tweener DOFloat(this Material target, float endValue, string property, float duration); // 0x008A4828-0x008A4A20
		public static Tweener DOOffset(this Material target, Vector2 endValue, float duration); // 0x008A4A28-0x008A4B6C
		public static Tweener DOOffset(this Material target, Vector2 endValue, string property, float duration); // 0x008A4B74-0x008A4D7C
		public static Tweener DOTiling(this Material target, Vector2 endValue, float duration); // 0x008A4D84-0x008A4EC8
		public static Tweener DOTiling(this Material target, Vector2 endValue, string property, float duration); // 0x008A4ED0-0x008A50D8
		public static Tweener DOVector(this Material target, Vector4 endValue, string property, float duration); // 0x008A50E0-0x008A5300
		public static Tweener DOMove(this Rigidbody target, Vector3 endValue, float duration, bool snapping = false /* Metadata: 0x0021B553 */); // 0x008A5308-0x008A547C
		public static Tweener DOMoveX(this Rigidbody target, float endValue, float duration, bool snapping = false /* Metadata: 0x0021B554 */); // 0x008A5484-0x008A5614
		public static Tweener DOMoveY(this Rigidbody target, float endValue, float duration, bool snapping = false /* Metadata: 0x0021B555 */); // 0x008A561C-0x008A57AC
		public static Tweener DOMoveZ(this Rigidbody target, float endValue, float duration, bool snapping = false /* Metadata: 0x0021B556 */); // 0x008A57B4-0x008A5944
		public static Tweener DORotate(this Rigidbody target, Vector3 endValue, float duration, RotateMode mode = RotateMode.Fast /* Metadata: 0x0021B557 */); // 0x008A594C-0x008A5AD0
		public static Tweener DOLookAt(this Rigidbody target, Vector3 towards, float duration, AxisConstraint axisConstraint = AxisConstraint.None /* Metadata: 0x0021B55B */, Vector3? up = default); // 0x008A5AD8-0x008A5CF4
		public static Sequence DOJump(this Rigidbody target, Vector3 endValue, float jumpPower, int numJumps, float duration, bool snapping = false /* Metadata: 0x0021B55F */); // 0x008A5CFC-0x008A61BC
		public static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOPath(this Rigidbody target, Vector3[] path, float duration, PathType pathType = PathType.Linear /* Metadata: 0x0021B560 */, PathMode pathMode = PathMode.Full3D /* Metadata: 0x0021B564 */, int resolution = 10 /* Metadata: 0x0021B568 */, Color? gizmoColor = default); // 0x008A61D4-0x008A63FC
		public static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOLocalPath(this Rigidbody target, Vector3[] path, float duration, PathType pathType = PathType.Linear /* Metadata: 0x0021B56C */, PathMode pathMode = PathMode.Full3D /* Metadata: 0x0021B570 */, int resolution = 10 /* Metadata: 0x0021B574 */, Color? gizmoColor = default); // 0x008A6404-0x008A6684
		internal static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOPath(this Rigidbody target, DG.Tweening.Plugins.Core.PathCore.Path path, float duration, PathMode pathMode = PathMode.Full3D /* Metadata: 0x0021B578 */); // 0x008A668C-0x008A6840
		internal static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOLocalPath(this Rigidbody target, DG.Tweening.Plugins.Core.PathCore.Path path, float duration, PathMode pathMode = PathMode.Full3D /* Metadata: 0x0021B57C */); // 0x008A6848-0x008A6A4C
		public static Tweener DOResize(this TrailRenderer target, float toStartWidth, float toEndWidth, float duration); // 0x008A6A54-0x008A6BB8
		public static Tweener DOTime(this TrailRenderer target, float endValue, float duration); // 0x008A6BC0-0x008A6CF4
		public static Tweener DOMove(this Transform target, Vector3 endValue, float duration, bool snapping = false /* Metadata: 0x0021B580 */); // 0x008A6CFC-0x008A6E58
		public static Tweener DOMoveX(this Transform target, float endValue, float duration, bool snapping = false /* Metadata: 0x0021B581 */); // 0x008A6E60-0x008A6FD8
		public static Tweener DOMoveY(this Transform target, float endValue, float duration, bool snapping = false /* Metadata: 0x0021B582 */); // 0x008A6FE0-0x008A7158
		public static Tweener DOMoveZ(this Transform target, float endValue, float duration, bool snapping = false /* Metadata: 0x0021B583 */); // 0x008A7160-0x008A72D8
		public static Tweener DOLocalMove(this Transform target, Vector3 endValue, float duration, bool snapping = false /* Metadata: 0x0021B584 */); // 0x008A72E0-0x008A743C
		public static Tweener DOLocalMoveX(this Transform target, float endValue, float duration, bool snapping = false /* Metadata: 0x0021B585 */); // 0x008A7444-0x008A75BC
		public static Tweener DOLocalMoveY(this Transform target, float endValue, float duration, bool snapping = false /* Metadata: 0x0021B586 */); // 0x008A75C4-0x008A773C
		public static Tweener DOLocalMoveZ(this Transform target, float endValue, float duration, bool snapping = false /* Metadata: 0x0021B587 */); // 0x008A7744-0x008A78BC
		public static Tweener DORotate(this Transform target, Vector3 endValue, float duration, RotateMode mode = RotateMode.Fast /* Metadata: 0x0021B588 */); // 0x008A78C4-0x008A7A30
		public static Tweener DORotateQuaternion(this Transform target, Quaternion endValue, float duration); // 0x008A7A38-0x008A7BBC
		public static Tweener DOLocalRotate(this Transform target, Vector3 endValue, float duration, RotateMode mode = RotateMode.Fast /* Metadata: 0x0021B58C */); // 0x008A7BC4-0x008A7D30
		public static Tweener DOLocalRotateQuaternion(this Transform target, Quaternion endValue, float duration); // 0x008A7D38-0x008A7EBC
		public static Tweener DOScale(this Transform target, Vector3 endValue, float duration); // 0x008A7EC4-0x008A8010
		public static Tweener DOScale(this Transform target, float endValue, float duration); // 0x008A8018-0x008A8190
		public static Tweener DOScaleX(this Transform target, float endValue, float duration); // 0x008A8198-0x008A830C
		public static Tweener DOScaleY(this Transform target, float endValue, float duration); // 0x008A8314-0x008A8488
		public static Tweener DOScaleZ(this Transform target, float endValue, float duration); // 0x008A8490-0x008A8604
		public static Tweener DOLookAt(this Transform target, Vector3 towards, float duration, AxisConstraint axisConstraint = AxisConstraint.None /* Metadata: 0x0021B590 */, Vector3? up = default); // 0x008A860C-0x008A8810
		public static Tweener DOPunchPosition(this Transform target, Vector3 punch, float duration, int vibrato = 10 /* Metadata: 0x0021B594 */, float elasticity = 1f /* Metadata: 0x0021B598 */, bool snapping = false /* Metadata: 0x0021B59C */); // 0x008A8818-0x008A8A10
		public static Tweener DOPunchScale(this Transform target, Vector3 punch, float duration, int vibrato = 10 /* Metadata: 0x0021B59D */, float elasticity = 1f /* Metadata: 0x0021B5A1 */); // 0x008A8A18-0x008A8BE0
		public static Tweener DOPunchRotation(this Transform target, Vector3 punch, float duration, int vibrato = 10 /* Metadata: 0x0021B5A5 */, float elasticity = 1f /* Metadata: 0x0021B5A9 */); // 0x008A8BE8-0x008A8DB0
		public static Tweener DOShakePosition(this Transform target, float duration, float strength = 1f /* Metadata: 0x0021B5AD */, int vibrato = 10 /* Metadata: 0x0021B5B1 */, float randomness = 90f /* Metadata: 0x0021B5B5 */, bool snapping = false /* Metadata: 0x0021B5B9 */, bool fadeOut = true /* Metadata: 0x0021B5BA */); // 0x008A8DB8-0x008A8FB4
		public static Tweener DOShakePosition(this Transform target, float duration, Vector3 strength, int vibrato = 10 /* Metadata: 0x0021B5BB */, float randomness = 90f /* Metadata: 0x0021B5BF */, bool snapping = false /* Metadata: 0x0021B5C3 */, bool fadeOut = true /* Metadata: 0x0021B5C4 */); // 0x008A8FBC-0x008A91D0
		public static Tweener DOShakeRotation(this Transform target, float duration, float strength = 90f /* Metadata: 0x0021B5C5 */, int vibrato = 10 /* Metadata: 0x0021B5C9 */, float randomness = 90f /* Metadata: 0x0021B5CD */, bool fadeOut = true /* Metadata: 0x0021B5D1 */); // 0x008A91D8-0x008A93B0
		public static Tweener DOShakeRotation(this Transform target, float duration, Vector3 strength, int vibrato = 10 /* Metadata: 0x0021B5D2 */, float randomness = 90f /* Metadata: 0x0021B5D6 */, bool fadeOut = true /* Metadata: 0x0021B5DA */); // 0x008A93B8-0x008A95A4
		public static Tweener DOShakeScale(this Transform target, float duration, float strength = 1f /* Metadata: 0x0021B5DB */, int vibrato = 10 /* Metadata: 0x0021B5DF */, float randomness = 90f /* Metadata: 0x0021B5E3 */, bool fadeOut = true /* Metadata: 0x0021B5E7 */); // 0x008A95AC-0x008A97DC
		public static Tweener DOShakeScale(this Transform target, float duration, Vector3 strength, int vibrato = 10 /* Metadata: 0x0021B5E8 */, float randomness = 90f /* Metadata: 0x0021B5EC */, bool fadeOut = true /* Metadata: 0x0021B5F0 */); // 0x008A97E4-0x008A99D0
		public static Sequence DOJump(this Transform target, Vector3 endValue, float jumpPower, int numJumps, float duration, bool snapping = false /* Metadata: 0x0021B5F1 */); // 0x008A99D8-0x008A9E7C
		public static Sequence DOLocalJump(this Transform target, Vector3 endValue, float jumpPower, int numJumps, float duration, bool snapping = false /* Metadata: 0x0021B5F2 */); // 0x008A9E84-0x008AB328
		public static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOPath(this Transform target, Vector3[] path, float duration, PathType pathType = PathType.Linear /* Metadata: 0x0021B5F3 */, PathMode pathMode = PathMode.Full3D /* Metadata: 0x0021B5F7 */, int resolution = 10 /* Metadata: 0x0021B5FB */, Color? gizmoColor = default); // 0x008AB330-0x008AB50C
		public static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOLocalPath(this Transform target, Vector3[] path, float duration, PathType pathType = PathType.Linear /* Metadata: 0x0021B5FF */, PathMode pathMode = PathMode.Full3D /* Metadata: 0x0021B603 */, int resolution = 10 /* Metadata: 0x0021B607 */, Color? gizmoColor = default); // 0x008AB514-0x008AB710
		internal static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOPath(this Transform target, DG.Tweening.Plugins.Core.PathCore.Path path, float duration, PathMode pathMode = PathMode.Full3D /* Metadata: 0x0021B60B */); // 0x008AB718-0x008AB88C
		internal static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOLocalPath(this Transform target, DG.Tweening.Plugins.Core.PathCore.Path path, float duration, PathMode pathMode = PathMode.Full3D /* Metadata: 0x0021B60F */); // 0x008AB894-0x008ABA28
		public static Tweener DOTimeScale(this Tween target, float endValue, float duration); // 0x008ABA30-0x008ABB64
		public static Tweener DOBlendableColor(this Light target, Color endValue, float duration); // 0x008ABB6C-0x008ABD98
		public static Tweener DOBlendableColor(this Material target, Color endValue, float duration); // 0x008ABDA0-0x008ABFCC
		public static Tweener DOBlendableColor(this Material target, Color endValue, string property, float duration); // 0x008ABFD4-0x008AC2B4
		public static Tweener DOBlendableMoveBy(this Transform target, Vector3 byValue, float duration, bool snapping = false /* Metadata: 0x0021B613 */); // 0x008AC2BC-0x008AC458
		public static Tweener DOBlendableLocalMoveBy(this Transform target, Vector3 byValue, float duration, bool snapping = false /* Metadata: 0x0021B614 */); // 0x008AC460-0x008AC5FC
		public static Tweener DOBlendableRotateBy(this Transform target, Vector3 byValue, float duration, RotateMode mode = RotateMode.Fast /* Metadata: 0x0021B615 */); // 0x008AC604-0x008AC7AC
		public static Tweener DOBlendableLocalRotateBy(this Transform target, Vector3 byValue, float duration, RotateMode mode = RotateMode.Fast /* Metadata: 0x0021B619 */); // 0x008AC7B4-0x008AC95C
		public static Tweener DOBlendableScaleBy(this Transform target, Vector3 byValue, float duration); // 0x008AC964-0x008ACAF0
		public static int DOComplete(this Component target, bool withCallbacks = false /* Metadata: 0x0021B61D */); // 0x008ACAF8-0x008ACB70
		public static int DOComplete(this Material target, bool withCallbacks = false /* Metadata: 0x0021B61E */); // 0x008ACB70-0x008ACBE8
		public static int DOKill(this Component target, bool complete = false /* Metadata: 0x0021B61F */); // 0x008ACBE8-0x008ACC60
		public static int DOKill(this Material target, bool complete = false /* Metadata: 0x0021B620 */); // 0x008ACC60-0x008ACCD8
		public static int DOFlip(this Component target); // 0x008ACCD8-0x008ACD40
		public static int DOFlip(this Material target); // 0x008ACD40-0x008ACDA8
		public static int DOGoto(this Component target, float to, bool andPlay = false /* Metadata: 0x0021B621 */); // 0x008ACDA8-0x008ACE30
		public static int DOGoto(this Material target, float to, bool andPlay = false /* Metadata: 0x0021B622 */); // 0x008ACE30-0x008ACEB8
		public static int DOPause(this Component target); // 0x008ACEB8-0x008ACF20
		public static int DOPause(this Material target); // 0x008ACF20-0x008ACF88
		public static int DOPlay(this Component target); // 0x008ACF88-0x008ACFF0
		public static int DOPlay(this Material target); // 0x008ACFF0-0x008AD058
		public static int DOPlayBackwards(this Component target); // 0x008AD058-0x008AD0C0
		public static int DOPlayBackwards(this Material target); // 0x008AD0C0-0x008AD128
		public static int DOPlayForward(this Component target); // 0x008AD128-0x008AD190
		public static int DOPlayForward(this Material target); // 0x008AD190-0x008AD1F8
		public static int DORestart(this Component target, bool includeDelay = true /* Metadata: 0x0021B623 */); // 0x008AD1F8-0x008AD274
		public static int DORestart(this Material target, bool includeDelay = true /* Metadata: 0x0021B624 */); // 0x008AD274-0x008AD2F0
		public static int DORewind(this Component target, bool includeDelay = true /* Metadata: 0x0021B625 */); // 0x008AD2F0-0x008AD368
		public static int DORewind(this Material target, bool includeDelay = true /* Metadata: 0x0021B626 */); // 0x008AD368-0x008AD3E0
		public static int DOSmoothRewind(this Component target); // 0x008AD3E0-0x008AD448
		public static int DOSmoothRewind(this Material target); // 0x008AD448-0x008AD4B0
		public static int DOTogglePause(this Component target); // 0x008AD4B0-0x008AD518
		public static int DOTogglePause(this Material target); // 0x008AD518-0x008AD580
	}

	public class TweenParams // TypeDefIndex: 2856
	{
		// Fields
		public static readonly TweenParams Params; // 0x00
		internal object id; // 0x10
		internal object target; // 0x18
		internal UpdateType updateType; // 0x20
		internal bool isIndependentUpdate; // 0x24
		internal TweenCallback onStart; // 0x28
		internal TweenCallback onPlay; // 0x30
		internal TweenCallback onRewind; // 0x38
		internal TweenCallback onUpdate; // 0x40
		internal TweenCallback onStepComplete; // 0x48
		internal TweenCallback onComplete; // 0x50
		internal TweenCallback onKill; // 0x58
		internal TweenCallback<int> onWaypointChange; // 0x60
		internal bool isRecyclable; // 0x68
		internal bool isSpeedBased; // 0x69
		internal bool autoKill; // 0x6A
		internal int loops; // 0x6C
		internal LoopType loopType; // 0x70
		internal float delay; // 0x74
		internal bool isRelative; // 0x78
		internal Ease easeType; // 0x7C
		internal EaseFunction customEase; // 0x80
		internal float easeOvershootOrAmplitude; // 0x88
		internal float easePeriod; // 0x8C
	
		// Constructors
		public TweenParams(); // 0x00C7F604-0x00C7F62C
		static TweenParams(); // 0x00C7FAA4-0x00C7FB10
	
		// Methods
		public TweenParams Clear(); // 0x00C7F62C-0x00C7F718
		public TweenParams SetAutoKill(bool autoKillOnCompletion = true /* Metadata: 0x0021B627 */); // 0x00C7F718-0x00C7F724
		public TweenParams SetId(object id); // 0x00C7F724-0x00C7F72C
		public TweenParams SetTarget(object target); // 0x00C7F72C-0x00C7F734
		public TweenParams SetLoops(int loops, LoopType? loopType = default); // 0x00C7F734-0x00C7F7CC
		public TweenParams SetEase(Ease ease, float? overshootOrAmplitude = default, float? period = default); // 0x00C7F7CC-0x00C7F8E8
		public TweenParams SetEase(AnimationCurve animCurve); // 0x00C7F8E8-0x00C7F990
		public TweenParams SetEase(EaseFunction customEase); // 0x00C7F990-0x00C7F9A0
		public TweenParams SetRecyclable(bool recyclable = true /* Metadata: 0x0021B628 */); // 0x00C7F9A0-0x00C7F9AC
		public TweenParams SetUpdate(bool isIndependentUpdate); // 0x00C7F9AC-0x00C7FA34
		public TweenParams SetUpdate(UpdateType updateType, bool isIndependentUpdate = false /* Metadata: 0x0021B629 */); // 0x00C7FA34-0x00C7FA44
		public TweenParams OnStart(TweenCallback action); // 0x00C7FA44-0x00C7FA4C
		public TweenParams OnPlay(TweenCallback action); // 0x00C7FA4C-0x00C7FA54
		public TweenParams OnRewind(TweenCallback action); // 0x00C7FA54-0x00C7FA5C
		public TweenParams OnUpdate(TweenCallback action); // 0x00C7FA5C-0x00C7FA64
		public TweenParams OnStepComplete(TweenCallback action); // 0x00C7FA64-0x00C7FA6C
		public TweenParams OnComplete(TweenCallback action); // 0x00C7FA6C-0x00C7FA74
		public TweenParams OnKill(TweenCallback action); // 0x00C7FA74-0x00C7FA7C
		public TweenParams OnWaypointChange(TweenCallback<int> action); // 0x00C7FA7C-0x00C7FA84
		public TweenParams SetDelay(float delay); // 0x00C7FA84-0x00C7FA8C
		public TweenParams SetRelative(bool isRelative = true /* Metadata: 0x0021B62A */); // 0x00C7FA8C-0x00C7FA98
		public TweenParams SetSpeedBased(bool isSpeedBased = true /* Metadata: 0x0021B62B */); // 0x00C7FA98-0x00C7FAA4
	}

	public static class TweenSettingsExtensions // TypeDefIndex: 2857
	{
		// Extension methods
		public static T SetAutoKill<T>(this T t)
			where T : Tween;
		public static T SetAutoKill<T>(this T t, bool autoKillOnCompletion)
			where T : Tween;
		public static T SetId<T>(this T t, object id)
			where T : Tween;
		public static T SetTarget<T>(this T t, object target)
			where T : Tween;
		public static T SetLoops<T>(this T t, int loops)
			where T : Tween;
		public static T SetLoops<T>(this T t, int loops, LoopType loopType)
			where T : Tween;
		public static T SetEase<T>(this T t, Ease ease)
			where T : Tween;
		public static T SetEase<T>(this T t, Ease ease, float overshoot)
			where T : Tween;
		public static T SetEase<T>(this T t, Ease ease, float amplitude, float period)
			where T : Tween;
		public static T SetEase<T>(this T t, AnimationCurve animCurve)
			where T : Tween;
		public static T SetEase<T>(this T t, EaseFunction customEase)
			where T : Tween;
		public static T SetRecyclable<T>(this T t)
			where T : Tween;
		public static T SetRecyclable<T>(this T t, bool recyclable)
			where T : Tween;
		public static T SetUpdate<T>(this T t, bool isIndependentUpdate)
			where T : Tween;
		public static T SetUpdate<T>(this T t, UpdateType updateType)
			where T : Tween;
		public static T SetUpdate<T>(this T t, UpdateType updateType, bool isIndependentUpdate)
			where T : Tween;
		public static T OnStart<T>(this T t, TweenCallback action)
			where T : Tween;
		public static T OnPlay<T>(this T t, TweenCallback action)
			where T : Tween;
		public static T OnPause<T>(this T t, TweenCallback action)
			where T : Tween;
		public static T OnRewind<T>(this T t, TweenCallback action)
			where T : Tween;
		public static T OnUpdate<T>(this T t, TweenCallback action)
			where T : Tween;
		public static T OnStepComplete<T>(this T t, TweenCallback action)
			where T : Tween;
		public static T OnComplete<T>(this T t, TweenCallback action)
			where T : Tween;
		public static T OnKill<T>(this T t, TweenCallback action)
			where T : Tween;
		public static T OnWaypointChange<T>(this T t, TweenCallback<int> action)
			where T : Tween;
		public static T SetAs<T>(this T t, Tween asTween)
			where T : Tween;
		public static T SetAs<T>(this T t, TweenParams tweenParams)
			where T : Tween;
		public static Sequence Append(this Sequence s, Tween t); // 0x00C7FB10-0x00C7FB68
		public static Sequence Prepend(this Sequence s, Tween t); // 0x00C7FB68-0x00C7FBBC
		public static Sequence Join(this Sequence s, Tween t); // 0x00C7FBBC-0x00C7FC14
		public static Sequence Insert(this Sequence s, float atPosition, Tween t); // 0x00C7FC14-0x00C7FC68
		public static Sequence AppendInterval(this Sequence s, float interval); // 0x00C7FC68-0x00C7FCA8
		public static Sequence PrependInterval(this Sequence s, float interval); // 0x00C7FCA8-0x00C7FCE8
		public static Sequence AppendCallback(this Sequence s, TweenCallback callback); // 0x00C7FCE8-0x00C7FD30
		public static Sequence PrependCallback(this Sequence s, TweenCallback callback); // 0x00C7FD30-0x00C7FD78
		public static Sequence InsertCallback(this Sequence s, float atPosition, TweenCallback callback); // 0x00C7FD78-0x00C7FDBC
		public static T From<T>(this T t)
			where T : Tweener;
		public static T From<T>(this T t, bool isRelative)
			where T : Tweener;
		public static T SetDelay<T>(this T t, float delay)
			where T : Tween;
		public static T SetRelative<T>(this T t)
			where T : Tween;
		public static T SetRelative<T>(this T t, bool isRelative)
			where T : Tween;
		public static T SetSpeedBased<T>(this T t)
			where T : Tween;
		public static T SetSpeedBased<T>(this T t, bool isSpeedBased)
			where T : Tween;
		public static Tweener SetOptions(this TweenerCore<float, float, FloatOptions> t, bool snapping); // 0x00C7FDBC-0x00C7FDD4
		public static Tweener SetOptions(this TweenerCore<Vector2, Vector2, VectorOptions> t, bool snapping); // 0x00C7FDD4-0x00C7FDEC
		public static Tweener SetOptions(this TweenerCore<Vector2, Vector2, VectorOptions> t, AxisConstraint axisConstraint, bool snapping = false /* Metadata: 0x0021B62C */); // 0x00C7FDEC-0x00C7FE08
		public static Tweener SetOptions(this TweenerCore<Vector3, Vector3, VectorOptions> t, bool snapping); // 0x00C7FE08-0x00C7FE20
		public static Tweener SetOptions(this TweenerCore<Vector3, Vector3, VectorOptions> t, AxisConstraint axisConstraint, bool snapping = false /* Metadata: 0x0021B62D */); // 0x00C7FE20-0x00C7FE3C
		public static Tweener SetOptions(this TweenerCore<Vector4, Vector4, VectorOptions> t, bool snapping); // 0x00C7FE3C-0x00C7FE54
		public static Tweener SetOptions(this TweenerCore<Vector4, Vector4, VectorOptions> t, AxisConstraint axisConstraint, bool snapping = false /* Metadata: 0x0021B62E */); // 0x00C7FE54-0x00C7FE70
		public static Tweener SetOptions(this TweenerCore<Quaternion, Vector3, QuaternionOptions> t, bool useShortest360Route = true /* Metadata: 0x0021B62F */); // 0x00C7FE70-0x00C7FE8C
		public static Tweener SetOptions(this TweenerCore<Color, Color, ColorOptions> t, bool alphaOnly); // 0x00C7FE8C-0x00C7FEA4
		public static Tweener SetOptions(this TweenerCore<Rect, Rect, RectOptions> t, bool snapping); // 0x00C7FEA4-0x00C7FEBC
		public static Tweener SetOptions(this TweenerCore<string, string, StringOptions> t, bool richTextEnabled, ScrambleMode scrambleMode = ScrambleMode.None /* Metadata: 0x0021B630 */, string scrambleChars = null); // 0x00C7FEBC-0x00C7FFC4
		public static Tweener SetOptions(this TweenerCore<Vector3, Vector3[], Vector3ArrayOptions> t, bool snapping); // 0x00C7FFC4-0x00C7FFDC
		public static Tweener SetOptions(this TweenerCore<Vector3, Vector3[], Vector3ArrayOptions> t, AxisConstraint axisConstraint, bool snapping = false /* Metadata: 0x0021B634 */); // 0x00C7FFDC-0x00C7FFF8
		public static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> SetOptions(this TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> t, AxisConstraint lockPosition, AxisConstraint lockRotation = AxisConstraint.None /* Metadata: 0x0021B635 */); // 0x00C7FFF8-0x00C80014
		public static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> SetOptions(this TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> t, bool closePath, AxisConstraint lockPosition = AxisConstraint.None /* Metadata: 0x0021B639 */, AxisConstraint lockRotation = AxisConstraint.None /* Metadata: 0x0021B63D */); // 0x00C80014-0x00C80034
		public static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> SetLookAt(this TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> t, Vector3 lookAtPosition, Vector3? forwardDirection = default, Vector3? up = default); // 0x00C80034-0x00C8007C
		public static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> SetLookAt(this TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> t, Transform lookAtTransform, Vector3? forwardDirection = default, Vector3? up = default); // 0x00C80490-0x00C804E0
		public static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> SetLookAt(this TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> t, float lookAhead, Vector3? forwardDirection = default, Vector3? up = default); // 0x00C804E0-0x00C8052C
		private static void SetPathForwardDirection(this TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> t, Vector3? forwardDirection = default, Vector3? up = default); // 0x00C8007C-0x00C80490
	}

	public enum LogBehaviour // TypeDefIndex: 2858
	{
		Default = 0,
		Verbose = 1,
		ErrorsOnly = 2
	}

	public abstract class Tween : ABSSequentiable // TypeDefIndex: 2859
	{
		// Fields
		public float timeScale; // 0x28
		public bool isBackwards; // 0x2C
		public object id; // 0x30
		public object target; // 0x38
		internal UpdateType updateType; // 0x40
		internal bool isIndependentUpdate; // 0x44
		public TweenCallback onPlay; // 0x48
		public TweenCallback onPause; // 0x50
		public TweenCallback onRewind; // 0x58
		public TweenCallback onUpdate; // 0x60
		public TweenCallback onStepComplete; // 0x68
		public TweenCallback onComplete; // 0x70
		public TweenCallback onKill; // 0x78
		public TweenCallback<int> onWaypointChange; // 0x80
		internal bool isFrom; // 0x88
		internal bool isBlendable; // 0x89
		internal bool isRecyclable; // 0x8A
		internal bool isSpeedBased; // 0x8B
		internal bool autoKill; // 0x8C
		internal float duration; // 0x90
		internal int loops; // 0x94
		internal LoopType loopType; // 0x98
		internal float delay; // 0x9C
		internal bool isRelative; // 0xA0
		internal Ease easeType; // 0xA4
		internal EaseFunction customEase; // 0xA8
		public float easeOvershootOrAmplitude; // 0xB0
		public float easePeriod; // 0xB4
		internal Type typeofT1; // 0xB8
		internal Type typeofT2; // 0xC0
		internal Type typeofTPlugOptions; // 0xC8
		internal bool active; // 0xD0
		internal bool isSequenced; // 0xD1
		internal Sequence sequenceParent; // 0xD8
		internal int activeId; // 0xE0
		internal SpecialStartupMode specialStartupMode; // 0xE4
		internal bool creationLocked; // 0xE8
		internal bool startupDone; // 0xE9
		internal bool playedOnce; // 0xEA
		internal float position; // 0xEC
		internal float fullDuration; // 0xF0
		internal int completedLoops; // 0xF4
		internal bool isPlaying; // 0xF8
		internal bool isComplete; // 0xF9
		internal float elapsedDelay; // 0xFC
		internal bool delayComplete; // 0x100
		internal int miscInt; // 0x104
	
		// Properties
		public float fullPosition { get; set; } // 0x008B0EC8-0x008B0ED0 0x008B0F94-0x008B0F9C
	
		// Constructors
		protected Tween(); // 0x008A0F10-0x008A0F2C
	
		// Methods
		internal virtual void Reset(); // 0x008A1604-0x008A167C
		internal abstract bool Validate();
		internal virtual float UpdateDelay(float elapsed); // 0x008B1100-0x008B1108
		internal abstract bool Startup();
		internal abstract bool ApplyTween(float prevPosition, int prevCompletedLoops, int newCompletedSteps, bool useInversePosition, UpdateMode updateMode, UpdateNotice updateNotice);
		internal static bool DoGoto(Tween t, float toPosition, int toCompletedLoops, UpdateMode updateMode); // 0x008B1108-0x008B1440
		internal static bool OnTweenCallback(TweenCallback callback); // 0x008A23D8-0x008A26DC
		internal static bool OnTweenCallback<T>(TweenCallback<T> callback, T param);
	}

	public abstract class Tweener : Tween // TypeDefIndex: 2860
	{
		// Fields
		internal bool hasManuallySetStartValue; // 0x108
		internal bool isFromAllowed; // 0x109
	
		// Constructors
		internal Tweener(); // 0x00C8052C-0x00C80588
	
		// Methods
		public abstract Tweener ChangeStartValue(object newStartValue, float newDuration = -1f /* Metadata: 0x0021B64D */);
		public abstract Tweener ChangeEndValue(object newEndValue, float newDuration = -1f /* Metadata: 0x0021B651 */, bool snapStartValue = false /* Metadata: 0x0021B655 */);
		public abstract Tweener ChangeEndValue(object newEndValue, bool snapStartValue);
		public abstract Tweener ChangeValues(object newStartValue, object newEndValue, float newDuration = -1f /* Metadata: 0x0021B656 */);
		internal abstract Tweener SetFrom(bool relative);
		internal static bool Setup<T1, T2, TPlugOptions>(TweenerCore<T1, T2, TPlugOptions> t, DOGetter<T1> getter, DOSetter<T1> setter, T2 endValue, float duration, ABSTweenPlugin<T1, T2, TPlugOptions> plugin = null)
			where TPlugOptions : struct, IPlugOptions;
		internal static float DoUpdateDelay<T1, T2, TPlugOptions>(TweenerCore<T1, T2, TPlugOptions> t, float elapsed)
			where TPlugOptions : struct, IPlugOptions;
		internal static bool DoStartup<T1, T2, TPlugOptions>(TweenerCore<T1, T2, TPlugOptions> t)
			where TPlugOptions : struct, IPlugOptions;
		internal static Tweener DoChangeStartValue<T1, T2, TPlugOptions>(TweenerCore<T1, T2, TPlugOptions> t, T2 newStartValue, float newDuration)
			where TPlugOptions : struct, IPlugOptions;
		internal static Tweener DoChangeEndValue<T1, T2, TPlugOptions>(TweenerCore<T1, T2, TPlugOptions> t, T2 newEndValue, float newDuration, bool snapStartValue)
			where TPlugOptions : struct, IPlugOptions;
		internal static Tweener DoChangeValues<T1, T2, TPlugOptions>(TweenerCore<T1, T2, TPlugOptions> t, T2 newStartValue, T2 newEndValue, float newDuration)
			where TPlugOptions : struct, IPlugOptions;
		private static bool DOStartupSpecials<T1, T2, TPlugOptions>(TweenerCore<T1, T2, TPlugOptions> t)
			where TPlugOptions : struct, IPlugOptions;
		private static void DOStartupDurationBased<T1, T2, TPlugOptions>(TweenerCore<T1, T2, TPlugOptions> t)
			where TPlugOptions : struct, IPlugOptions;
	}

	public enum TweenType // TypeDefIndex: 2861
	{
		Tweener = 0,
		Sequence = 1,
		Callback = 2
	}

	public enum UpdateType // TypeDefIndex: 2862
	{
		Normal = 0,
		Late = 1,
		Fixed = 2,
		Manual = 3
	}
}

namespace DG.Tweening.Plugins
{
	internal class Color2Plugin : ABSTweenPlugin<Color2, Color2, ColorOptions> // TypeDefIndex: 2863
	{
		// Constructors
		public Color2Plugin(); // 0x0098D198-0x0098D1E8
	
		// Methods
		public override void Reset(TweenerCore<Color2, Color2, ColorOptions> t); // 0x0098C8F0-0x0098C8F4
		public override void SetFrom(TweenerCore<Color2, Color2, ColorOptions> t, bool isRelative); // 0x0098C8F4-0x0098CB48
		public override Color2 ConvertToStartValue(TweenerCore<Color2, Color2, ColorOptions> t, Color2 value); // 0x0098CB48-0x0098CB5C
		public override void SetRelativeEndValue(TweenerCore<Color2, Color2, ColorOptions> t); // 0x0098CB5C-0x0098CC24
		public override void SetChangeValue(TweenerCore<Color2, Color2, ColorOptions> t); // 0x0098CC24-0x0098CCEC
		public override float GetSpeedBasedDuration(ColorOptions options, float unitsXSecond, Color2 changeValue); // 0x0098CCEC-0x0098CCF8
		public override void EvaluateAndApply(ColorOptions options, Tween t, bool isRelative, DOGetter<Color2> getter, DOSetter<Color2> setter, float elapsed, Color2 startValue, Color2 changeValue, float duration, bool usingInversePosition, UpdateNotice updateNotice); // 0x0098CCF8-0x0098D198
	}

	public class DoublePlugin : ABSTweenPlugin<double, double, NoOptions> // TypeDefIndex: 2864
	{
		// Constructors
		public DoublePlugin(); // 0x00990F80-0x00990FD0
	
		// Methods
		public override void Reset(TweenerCore<double, double, NoOptions> t); // 0x00990C58-0x00990C5C
		public override void SetFrom(TweenerCore<double, double, NoOptions> t, bool isRelative); // 0x00990C5C-0x00990D34
		public override double ConvertToStartValue(TweenerCore<double, double, NoOptions> t, double value); // 0x00990D34-0x00990D38
		public override void SetRelativeEndValue(TweenerCore<double, double, NoOptions> t); // 0x00990D38-0x00990D98
		public override void SetChangeValue(TweenerCore<double, double, NoOptions> t); // 0x00990D98-0x00990DF8
		public override float GetSpeedBasedDuration(NoOptions options, float unitsXSecond, double changeValue); // 0x00990DF8-0x00990E10
		public override void EvaluateAndApply(NoOptions options, Tween t, bool isRelative, DOGetter<double> getter, DOSetter<double> setter, float elapsed, double startValue, double changeValue, float duration, bool usingInversePosition, UpdateNotice updateNotice); // 0x00990E10-0x00990F80
	}

	public class LongPlugin : ABSTweenPlugin<long, long, NoOptions> // TypeDefIndex: 2865
	{
		// Constructors
		public LongPlugin(); // 0x00991C60-0x00991CDC
	
		// Methods
		public override void Reset(TweenerCore<long, long, NoOptions> t); // 0x009918A4-0x009918A8
		public override void SetFrom(TweenerCore<long, long, NoOptions> t, bool isRelative); // 0x009918A8-0x00991980
		public override long ConvertToStartValue(TweenerCore<long, long, NoOptions> t, long value); // 0x00991980-0x00991988
		public override void SetRelativeEndValue(TweenerCore<long, long, NoOptions> t); // 0x00991988-0x009919E8
		public override void SetChangeValue(TweenerCore<long, long, NoOptions> t); // 0x009919E8-0x00991A48
		public override float GetSpeedBasedDuration(NoOptions options, float unitsXSecond, long changeValue); // 0x00991A48-0x00991A60
		public override void EvaluateAndApply(NoOptions options, Tween t, bool isRelative, DOGetter<long> getter, DOSetter<long> setter, float elapsed, long startValue, long changeValue, float duration, bool usingInversePosition, UpdateNotice updateNotice); // 0x00991A60-0x00991C60
	}

	public class UlongPlugin : ABSTweenPlugin<ulong, ulong, NoOptions> // TypeDefIndex: 2866
	{
		// Constructors
		public UlongPlugin(); // 0x0089B378-0x0089B3C8
	
		// Methods
		public override void Reset(TweenerCore<ulong, ulong, NoOptions> t); // 0x0089AFDC-0x0089AFE0
		public override void SetFrom(TweenerCore<ulong, ulong, NoOptions> t, bool isRelative); // 0x0089AFE0-0x0089B0B8
		public override ulong ConvertToStartValue(TweenerCore<ulong, ulong, NoOptions> t, ulong value); // 0x0089B0B8-0x0089B0C0
		public override void SetRelativeEndValue(TweenerCore<ulong, ulong, NoOptions> t); // 0x0089B0C0-0x0089B120
		public override void SetChangeValue(TweenerCore<ulong, ulong, NoOptions> t); // 0x0089B120-0x0089B180
		public override float GetSpeedBasedDuration(NoOptions options, float unitsXSecond, ulong changeValue); // 0x0089B180-0x0089B19C
		public override void EvaluateAndApply(NoOptions options, Tween t, bool isRelative, DOGetter<ulong> getter, DOSetter<ulong> setter, float elapsed, ulong startValue, ulong changeValue, float duration, bool usingInversePosition, UpdateNotice updateNotice); // 0x0089B19C-0x0089B378
	}

	public class Vector3ArrayPlugin : ABSTweenPlugin<Vector3, Vector3[], Vector3ArrayOptions> // TypeDefIndex: 2867
	{
		// Constructors
		public Vector3ArrayPlugin(); // 0x0089E0E0-0x0089E130
	
		// Methods
		public override void Reset(TweenerCore<Vector3, Vector3[], Vector3ArrayOptions> t); // 0x0089BDCC-0x0089BE20
		public override void SetFrom(TweenerCore<Vector3, Vector3[], Vector3ArrayOptions> t, bool isRelative); // 0x0089BE20-0x0089BE24
		public override Vector3[] ConvertToStartValue(TweenerCore<Vector3, Vector3[], Vector3ArrayOptions> t, Vector3 value); // 0x0089BE24-0x0089BFC4
		public override void SetRelativeEndValue(TweenerCore<Vector3, Vector3[], Vector3ArrayOptions> t); // 0x0089BFC4-0x0089D1E8
		public override void SetChangeValue(TweenerCore<Vector3, Vector3[], Vector3ArrayOptions> t); // 0x0089D1E8-0x0089D3B4
		public override float GetSpeedBasedDuration(Vector3ArrayOptions options, float unitsXSecond, Vector3[] changeValue); // 0x0089D3B4-0x0089D4BC
		public override void EvaluateAndApply(Vector3ArrayOptions options, Tween t, bool isRelative, DOGetter<Vector3> getter, DOSetter<Vector3> setter, float elapsed, Vector3[] startValue, Vector3[] changeValue, float duration, bool usingInversePosition, UpdateNotice updateNotice); // 0x0089D4BC-0x0089E0E0
	}

	public class PathPlugin : ABSTweenPlugin<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> // TypeDefIndex: 2868
	{
		// Fields
		public const float MinLookAhead = 0.0001f; // Metadata: 0x0021B676
	
		// Constructors
		public PathPlugin(); // 0x00993BA0-0x00993BF0
	
		// Methods
		public override void Reset(TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> t); // 0x00992324-0x0099236C
		public override void SetFrom(TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> t, bool isRelative); // 0x0099236C-0x00992370
		public static ABSTweenPlugin<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> Get(); // 0x00992370-0x009923B8
		public override DG.Tweening.Plugins.Core.PathCore.Path ConvertToStartValue(TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> t, Vector3 value); // 0x009923B8-0x009923E4
		public override void SetRelativeEndValue(TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> t); // 0x009923E4-0x00992564
		public override void SetChangeValue(TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> t); // 0x00992564-0x00992AE4
		public override float GetSpeedBasedDuration(PathOptions options, float unitsXSecond, DG.Tweening.Plugins.Core.PathCore.Path changeValue); // 0x00992AE4-0x00992B20
		public override void EvaluateAndApply(PathOptions options, Tween t, bool isRelative, DOGetter<Vector3> getter, DOSetter<Vector3> setter, float elapsed, DG.Tweening.Plugins.Core.PathCore.Path startValue, DG.Tweening.Plugins.Core.PathCore.Path changeValue, float duration, bool usingInversePosition, UpdateNotice updateNotice); // 0x00992B20-0x00992DCC
		public void SetOrientation(PathOptions options, Tween t, DG.Tweening.Plugins.Core.PathCore.Path path, float pathPerc, Vector3 tPos, UpdateNotice updateNotice); // 0x00992DCC-0x00993BA0
	}

	public class ColorPlugin : ABSTweenPlugin<Color, Color, ColorOptions> // TypeDefIndex: 2869
	{
		// Constructors
		public ColorPlugin(); // 0x0098D7AC-0x0098D7FC
	
		// Methods
		public override void Reset(TweenerCore<Color, Color, ColorOptions> t); // 0x0098D1E8-0x0098D1EC
		public override void SetFrom(TweenerCore<Color, Color, ColorOptions> t, bool isRelative); // 0x0098D1EC-0x0098D350
		public override Color ConvertToStartValue(TweenerCore<Color, Color, ColorOptions> t, Color value); // 0x0098D350-0x0098D354
		public override void SetRelativeEndValue(TweenerCore<Color, Color, ColorOptions> t); // 0x0098D354-0x0098D3FC
		public override void SetChangeValue(TweenerCore<Color, Color, ColorOptions> t); // 0x0098D3FC-0x0098D4A4
		public override float GetSpeedBasedDuration(ColorOptions options, float unitsXSecond, Color changeValue); // 0x0098D4A4-0x0098D4B0
		public override void EvaluateAndApply(ColorOptions options, Tween t, bool isRelative, DOGetter<Color> getter, DOSetter<Color> setter, float elapsed, Color startValue, Color changeValue, float duration, bool usingInversePosition, UpdateNotice updateNotice); // 0x0098D4B0-0x0098D7AC
	}

	public class IntPlugin : ABSTweenPlugin<int, int, NoOptions> // TypeDefIndex: 2870
	{
		// Constructors
		public IntPlugin(); // 0x00991854-0x009918A4
	
		// Methods
		public override void Reset(TweenerCore<int, int, NoOptions> t); // 0x00991498-0x0099149C
		public override void SetFrom(TweenerCore<int, int, NoOptions> t, bool isRelative); // 0x0099149C-0x00991574
		public override int ConvertToStartValue(TweenerCore<int, int, NoOptions> t, int value); // 0x00991574-0x0099157C
		public override void SetRelativeEndValue(TweenerCore<int, int, NoOptions> t); // 0x0099157C-0x009915E0
		public override void SetChangeValue(TweenerCore<int, int, NoOptions> t); // 0x009915E0-0x00991644
		public override float GetSpeedBasedDuration(NoOptions options, float unitsXSecond, int changeValue); // 0x00991644-0x0099165C
		public override void EvaluateAndApply(NoOptions options, Tween t, bool isRelative, DOGetter<int> getter, DOSetter<int> setter, float elapsed, int startValue, int changeValue, float duration, bool usingInversePosition, UpdateNotice updateNotice); // 0x0099165C-0x00991854
	}

	public class QuaternionPlugin : ABSTweenPlugin<Quaternion, Vector3, QuaternionOptions> // TypeDefIndex: 2871
	{
		// Constructors
		public QuaternionPlugin(); // 0x009947C0-0x00994810
	
		// Methods
		public override void Reset(TweenerCore<Quaternion, Vector3, QuaternionOptions> t); // 0x00993BF0-0x00993BF4
		public override void SetFrom(TweenerCore<Quaternion, Vector3, QuaternionOptions> t, bool isRelative); // 0x00993BF4-0x00993FC4
		public override Vector3 ConvertToStartValue(TweenerCore<Quaternion, Vector3, QuaternionOptions> t, Quaternion value); // 0x00993FC4-0x00993FF0
		public override void SetRelativeEndValue(TweenerCore<Quaternion, Vector3, QuaternionOptions> t); // 0x00993FF0-0x009940F0
		public override void SetChangeValue(TweenerCore<Quaternion, Vector3, QuaternionOptions> t); // 0x009940F0-0x00994310
		public override float GetSpeedBasedDuration(QuaternionOptions options, float unitsXSecond, Vector3 changeValue); // 0x00994310-0x0099434C
		public override void EvaluateAndApply(QuaternionOptions options, Tween t, bool isRelative, DOGetter<Quaternion> getter, DOSetter<Quaternion> setter, float elapsed, Vector3 startValue, Vector3 changeValue, float duration, bool usingInversePosition, UpdateNotice updateNotice); // 0x0099434C-0x009947C0
	}

	public class RectOffsetPlugin : ABSTweenPlugin<RectOffset, RectOffset, NoOptions> // TypeDefIndex: 2872
	{
		// Fields
		private static RectOffset _r; // 0x00
	
		// Constructors
		public RectOffsetPlugin(); // 0x00995900-0x00995950
		static RectOffsetPlugin(); // 0x00995950-0x009959BC
	
		// Methods
		public override void Reset(TweenerCore<RectOffset, RectOffset, NoOptions> t); // 0x00994810-0x00994864
		public override void SetFrom(TweenerCore<RectOffset, RectOffset, NoOptions> t, bool isRelative); // 0x00994864-0x00994AA4
		public override RectOffset ConvertToStartValue(TweenerCore<RectOffset, RectOffset, NoOptions> t, RectOffset value); // 0x00994AA4-0x00994BC0
		public override void SetRelativeEndValue(TweenerCore<RectOffset, RectOffset, NoOptions> t); // 0x00994BC0-0x00994D5C
		public override void SetChangeValue(TweenerCore<RectOffset, RectOffset, NoOptions> t); // 0x00994D5C-0x00994EFC
		public override float GetSpeedBasedDuration(NoOptions options, float unitsXSecond, RectOffset changeValue); // 0x00994EFC-0x00994FE8
		public override void EvaluateAndApply(NoOptions options, Tween t, bool isRelative, DOGetter<RectOffset> getter, DOSetter<RectOffset> setter, float elapsed, RectOffset startValue, RectOffset changeValue, float duration, bool usingInversePosition, UpdateNotice updateNotice); // 0x00994FE8-0x00995900
	}

	public class RectPlugin : ABSTweenPlugin<Rect, Rect, RectOptions> // TypeDefIndex: 2873
	{
		// Constructors
		public RectPlugin(); // 0x00899248-0x00899298
	
		// Methods
		public override void Reset(TweenerCore<Rect, Rect, RectOptions> t); // 0x008983A4-0x008983A8
		public override void SetFrom(TweenerCore<Rect, Rect, RectOptions> t, bool isRelative); // 0x008983A8-0x00898808
		public override Rect ConvertToStartValue(TweenerCore<Rect, Rect, RectOptions> t, Rect value); // 0x00898808-0x0089880C
		public override void SetRelativeEndValue(TweenerCore<Rect, Rect, RectOptions> t); // 0x0089880C-0x00898990
		public override void SetChangeValue(TweenerCore<Rect, Rect, RectOptions> t); // 0x00898990-0x00898B64
		public override float GetSpeedBasedDuration(RectOptions options, float unitsXSecond, Rect changeValue); // 0x00898B64-0x00898C28
		public override void EvaluateAndApply(RectOptions options, Tween t, bool isRelative, DOGetter<Rect> getter, DOSetter<Rect> setter, float elapsed, Rect startValue, Rect changeValue, float duration, bool usingInversePosition, UpdateNotice updateNotice); // 0x00898C28-0x00899248
	}

	public class UintPlugin : ABSTweenPlugin<uint, uint, UintOptions> // TypeDefIndex: 2874
	{
		// Constructors
		public UintPlugin(); // 0x0089AF8C-0x0089AFDC
	
		// Methods
		public override void Reset(TweenerCore<uint, uint, UintOptions> t); // 0x0089AAE8-0x0089AAEC
		public override void SetFrom(TweenerCore<uint, uint, UintOptions> t, bool isRelative); // 0x0089AAEC-0x0089ABC4
		public override uint ConvertToStartValue(TweenerCore<uint, uint, UintOptions> t, uint value); // 0x0089ABC4-0x0089ABCC
		public override void SetRelativeEndValue(TweenerCore<uint, uint, UintOptions> t); // 0x0089ABCC-0x0089AC30
		public override void SetChangeValue(TweenerCore<uint, uint, UintOptions> t); // 0x0089AC30-0x0089AD14
		public override float GetSpeedBasedDuration(UintOptions options, float unitsXSecond, uint changeValue); // 0x0089AD14-0x0089AD30
		public override void EvaluateAndApply(UintOptions options, Tween t, bool isRelative, DOGetter<uint> getter, DOSetter<uint> setter, float elapsed, uint startValue, uint changeValue, float duration, bool usingInversePosition, UpdateNotice updateNotice); // 0x0089AD30-0x0089AF8C
	}

	public class Vector2Plugin : ABSTweenPlugin<Vector2, Vector2, VectorOptions> // TypeDefIndex: 2875
	{
		// Constructors
		public Vector2Plugin(); // 0x0089BD7C-0x0089BDCC
	
		// Methods
		public override void Reset(TweenerCore<Vector2, Vector2, VectorOptions> t); // 0x0089B3C8-0x0089B3CC
		public override void SetFrom(TweenerCore<Vector2, Vector2, VectorOptions> t, bool isRelative); // 0x0089B3CC-0x0089B650
		public override Vector2 ConvertToStartValue(TweenerCore<Vector2, Vector2, VectorOptions> t, Vector2 value); // 0x0089B650-0x0089B654
		public override void SetRelativeEndValue(TweenerCore<Vector2, Vector2, VectorOptions> t); // 0x0089B654-0x0089B72C
		public override void SetChangeValue(TweenerCore<Vector2, Vector2, VectorOptions> t); // 0x0089B72C-0x0089B840
		public override float GetSpeedBasedDuration(VectorOptions options, float unitsXSecond, Vector2 changeValue); // 0x0089B840-0x0089B870
		public override void EvaluateAndApply(VectorOptions options, Tween t, bool isRelative, DOGetter<Vector2> getter, DOSetter<Vector2> setter, float elapsed, Vector2 startValue, Vector2 changeValue, float duration, bool usingInversePosition, UpdateNotice updateNotice); // 0x0089B870-0x0089BD7C
	}

	public class Vector4Plugin : ABSTweenPlugin<Vector4, Vector4, VectorOptions> // TypeDefIndex: 2876
	{
		// Constructors
		public Vector4Plugin(); // 0x008A0E00-0x008A0E50
	
		// Methods
		public override void Reset(TweenerCore<Vector4, Vector4, VectorOptions> t); // 0x0089EE60-0x0089EE64
		public override void SetFrom(TweenerCore<Vector4, Vector4, VectorOptions> t, bool isRelative); // 0x0089EE64-0x008A022C
		public override Vector4 ConvertToStartValue(TweenerCore<Vector4, Vector4, VectorOptions> t, Vector4 value); // 0x008A022C-0x008A0230
		public override void SetRelativeEndValue(TweenerCore<Vector4, Vector4, VectorOptions> t); // 0x008A0230-0x008A0320
		public override void SetChangeValue(TweenerCore<Vector4, Vector4, VectorOptions> t); // 0x008A0320-0x008A04DC
		public override float GetSpeedBasedDuration(VectorOptions options, float unitsXSecond, Vector4 changeValue); // 0x008A04DC-0x008A0518
		public override void EvaluateAndApply(VectorOptions options, Tween t, bool isRelative, DOGetter<Vector4> getter, DOSetter<Vector4> setter, float elapsed, Vector4 startValue, Vector4 changeValue, float duration, bool usingInversePosition, UpdateNotice updateNotice); // 0x008A0518-0x008A0E00
	}

	public class StringPlugin : ABSTweenPlugin<string, string, StringOptions> // TypeDefIndex: 2877
	{
		// Fields
		private static readonly StringBuilder _Buffer; // 0x00
		private static readonly List<char> _OpenedTags; // 0x08
	
		// Constructors
		public StringPlugin(); // 0x0089A7A0-0x0089A7F0
		static StringPlugin(); // 0x0089A7F0-0x0089A88C
	
		// Methods
		public override void SetFrom(TweenerCore<string, string, StringOptions> t, bool isRelative); // 0x00899298-0x00899358
		public override void Reset(TweenerCore<string, string, StringOptions> t); // 0x00899358-0x008993AC
		public override string ConvertToStartValue(TweenerCore<string, string, StringOptions> t, string value); // 0x008993AC-0x008993B4
		public override void SetRelativeEndValue(TweenerCore<string, string, StringOptions> t); // 0x008993B4-0x008993B8
		public override void SetChangeValue(TweenerCore<string, string, StringOptions> t); // 0x008993B8-0x008994E0
		public override float GetSpeedBasedDuration(StringOptions options, float unitsXSecond, string changeValue); // 0x008994E0-0x00899544
		public override void EvaluateAndApply(StringOptions options, Tween t, bool isRelative, DOGetter<string> getter, DOSetter<string> setter, float elapsed, string startValue, string changeValue, float duration, bool usingInversePosition, UpdateNotice updateNotice); // 0x00899544-0x00899BBC
		private StringBuilder Append(string value, int startIndex, int length, bool richTextEnabled); // 0x00899BBC-0x0089A504
		private char[] ScrambledCharsToUse(StringOptions options); // 0x0089A504-0x0089A62C
	}

	internal static class StringPluginExtensions // TypeDefIndex: 2878
	{
		// Fields
		public static readonly char[] ScrambledCharsAll; // 0x00
		public static readonly char[] ScrambledCharsUppercase; // 0x08
		public static readonly char[] ScrambledCharsLowercase; // 0x10
		public static readonly char[] ScrambledCharsNumerals; // 0x18
		private static int _lastRndSeed; // 0x20
	
		// Constructors
		static StringPluginExtensions(); // 0x0089A88C-0x0089A9D8
	
		// Extension methods
		internal static void ScrambleChars(this char[] chars); // 0x0089A9D8-0x0089AAE8
		internal static StringBuilder AppendScrambledChars(this StringBuilder buffer, int length, char[] chars); // 0x0089A62C-0x0089A7A0
	}

	public class FloatPlugin : ABSTweenPlugin<float, float, FloatOptions> // TypeDefIndex: 2879
	{
		// Constructors
		public FloatPlugin(); // 0x00991448-0x00991498
	
		// Methods
		public override void Reset(TweenerCore<float, float, FloatOptions> t); // 0x00990FD0-0x00990FD4
		public override void SetFrom(TweenerCore<float, float, FloatOptions> t, bool isRelative); // 0x00990FD4-0x0099114C
		public override float ConvertToStartValue(TweenerCore<float, float, FloatOptions> t, float value); // 0x0099114C-0x00991150
		public override void SetRelativeEndValue(TweenerCore<float, float, FloatOptions> t); // 0x00991150-0x009911B4
		public override void SetChangeValue(TweenerCore<float, float, FloatOptions> t); // 0x009911B4-0x00991218
		public override float GetSpeedBasedDuration(FloatOptions options, float unitsXSecond, float changeValue); // 0x00991218-0x0099122C
		public override void EvaluateAndApply(FloatOptions options, Tween t, bool isRelative, DOGetter<float> getter, DOSetter<float> setter, float elapsed, float startValue, float changeValue, float duration, bool usingInversePosition, UpdateNotice updateNotice); // 0x0099122C-0x00991448
	}

	public class Vector3Plugin : ABSTweenPlugin<Vector3, Vector3, VectorOptions> // TypeDefIndex: 2880
	{
		// Constructors
		public Vector3Plugin(); // 0x0089EE10-0x0089EE60
	
		// Methods
		public override void Reset(TweenerCore<Vector3, Vector3, VectorOptions> t); // 0x0089E130-0x0089E134
		public override void SetFrom(TweenerCore<Vector3, Vector3, VectorOptions> t, bool isRelative); // 0x0089E134-0x0089E470
		public override Vector3 ConvertToStartValue(TweenerCore<Vector3, Vector3, VectorOptions> t, Vector3 value); // 0x0089E470-0x0089E474
		public override void SetRelativeEndValue(TweenerCore<Vector3, Vector3, VectorOptions> t); // 0x0089E474-0x0089E574
		public override void SetChangeValue(TweenerCore<Vector3, Vector3, VectorOptions> t); // 0x0089E574-0x0089E6E4
		public override float GetSpeedBasedDuration(VectorOptions options, float unitsXSecond, Vector3 changeValue); // 0x0089E6E4-0x0089E720
		public override void EvaluateAndApply(VectorOptions options, Tween t, bool isRelative, DOGetter<Vector3> getter, DOSetter<Vector3> setter, float elapsed, Vector3 startValue, Vector3 changeValue, float duration, bool usingInversePosition, UpdateNotice updateNotice); // 0x0089E720-0x0089EE10
	}
}

namespace DG.Tweening.Plugins.Options
{
	public interface IPlugOptions // TypeDefIndex: 2881
	{
		// Methods
		void Reset();
	}

	public enum OrientType // TypeDefIndex: 2882
	{
		None = 0,
		ToPath = 1,
		LookAtTransform = 2,
		LookAtPosition = 3
	}

	public struct PathOptions : IPlugOptions // TypeDefIndex: 2883
	{
		// Fields
		public PathMode mode; // 0x00
		public OrientType orientType; // 0x04
		public AxisConstraint lockPositionAxis; // 0x08
		public AxisConstraint lockRotationAxis; // 0x0C
		public bool isClosedPath; // 0x10
		public Vector3 lookAtPosition; // 0x14
		public Transform lookAtTransform; // 0x20
		public float lookAhead; // 0x28
		public bool hasCustomForwardDirection; // 0x2C
		public Quaternion forward; // 0x30
		public bool useLocalPosition; // 0x40
		public Transform parent; // 0x48
		public bool isRigidbody; // 0x50
		internal Quaternion startupRot; // 0x54
		internal float startupZRot; // 0x64
	
		// Methods
		public void Reset(); // 0x00991E3C-0x00991EB8
	}

	public struct QuaternionOptions : IPlugOptions // TypeDefIndex: 2884
	{
		// Fields
		internal RotateMode rotateMode; // 0x00
		internal AxisConstraint axisConstraint; // 0x04
		internal Vector3 up; // 0x08
	
		// Methods
		public void Reset(); // 0x00991EB8-0x00991EEC
	}

	public struct UintOptions : IPlugOptions // TypeDefIndex: 2885
	{
		// Fields
		public bool isNegativeChangeValue; // 0x00
	
		// Methods
		public void Reset(); // 0x0099210C-0x009922C8
	}

	public struct Vector3ArrayOptions : IPlugOptions // TypeDefIndex: 2886
	{
		// Fields
		public AxisConstraint axisConstraint; // 0x00
		public bool snapping; // 0x04
		internal float[] durations; // 0x08
	
		// Methods
		public void Reset(); // 0x009922C8-0x00992318
	}

	public struct NoOptions : IPlugOptions // TypeDefIndex: 2887
	{
		// Methods
		public void Reset(); // 0x00991D1C-0x00991E3C
	}

	public struct ColorOptions : IPlugOptions // TypeDefIndex: 2888
	{
		// Fields
		public bool alphaOnly; // 0x00
	
		// Methods
		public void Reset(); // 0x00991CDC-0x00991D10
	}

	public struct FloatOptions : IPlugOptions // TypeDefIndex: 2889
	{
		// Fields
		public bool snapping; // 0x00
	
		// Methods
		public void Reset(); // 0x00991D10-0x00991D1C
	}

	public struct RectOptions : IPlugOptions // TypeDefIndex: 2890
	{
		// Fields
		public bool snapping; // 0x00
	
		// Methods
		public void Reset(); // 0x00991EEC-0x009920CC
	}

	public struct StringOptions : IPlugOptions // TypeDefIndex: 2891
	{
		// Fields
		public bool richTextEnabled; // 0x00
		public ScrambleMode scrambleMode; // 0x04
		public char[] scrambledChars; // 0x08
		internal int startValueStrippedLength; // 0x10
		internal int changeValueStrippedLength; // 0x14
	
		// Methods
		public void Reset(); // 0x009920CC-0x0099210C
	}

	public struct VectorOptions : IPlugOptions // TypeDefIndex: 2892
	{
		// Fields
		public AxisConstraint axisConstraint; // 0x00
		public bool snapping; // 0x04
	
		// Methods
		public void Reset(); // 0x00992318-0x00992324
	}
}

namespace DG.Tweening.Plugins.Core
{
	public interface ITPlugin<T1, out T2, out TPlugOptions, TPlugin> // TypeDefIndex: 2893
	{
	}

	internal static class SpecialPluginsUtils // TypeDefIndex: 2894
	{
		// Methods
		internal static bool SetLookAt(TweenerCore<Quaternion, Vector3, QuaternionOptions> t); // 0x0099056C-0x0099073C
		internal static bool SetPunch(TweenerCore<Vector3, Vector3[], Vector3ArrayOptions> t); // 0x0099073C-0x00990958
		internal static bool SetShake(TweenerCore<Vector3, Vector3[], Vector3ArrayOptions> t); // 0x00990958-0x00990998
		internal static bool SetCameraShakePosition(TweenerCore<Vector3, Vector3[], Vector3ArrayOptions> t); // 0x00990998-0x00990C58
	}

	public interface IPlugSetter<T1, out T2, TPlugin, out TPlugOptions> // TypeDefIndex: 2895
	{
		// Methods
		DOGetter<T1> Getter();
		DOSetter<T1> Setter();
		T2 EndValue();
		TPlugOptions GetOptions();
	}

	public interface ITweenPlugin // TypeDefIndex: 2896
	{
	}

	public abstract class ABSTweenPlugin<T1, T2, TPlugOptions> : ITweenPlugin // TypeDefIndex: 2897
		where TPlugOptions : struct, IPlugOptions
	{
		// Constructors
		protected ABSTweenPlugin();
	
		// Methods
		public abstract void Reset(TweenerCore<T1, T2, TPlugOptions> t);
		public abstract void SetFrom(TweenerCore<T1, T2, TPlugOptions> t, bool isRelative);
		public abstract T2 ConvertToStartValue(TweenerCore<T1, T2, TPlugOptions> t, T1 value);
		public abstract void SetRelativeEndValue(TweenerCore<T1, T2, TPlugOptions> t);
		public abstract void SetChangeValue(TweenerCore<T1, T2, TPlugOptions> t);
		public abstract float GetSpeedBasedDuration(TPlugOptions options, float unitsXSecond, T2 changeValue);
		public abstract void EvaluateAndApply(TPlugOptions options, Tween t, bool isRelative, DOGetter<T1> getter, DOSetter<T1> setter, float elapsed, T2 startValue, T2 changeValue, float duration, bool usingInversePosition, UpdateNotice updateNotice);
	}

	internal static class PluginsManager // TypeDefIndex: 2898
	{
		// Fields
		private static ITweenPlugin _floatPlugin; // 0x00
		private static ITweenPlugin _doublePlugin; // 0x08
		private static ITweenPlugin _intPlugin; // 0x10
		private static ITweenPlugin _uintPlugin; // 0x18
		private static ITweenPlugin _longPlugin; // 0x20
		private static ITweenPlugin _ulongPlugin; // 0x28
		private static ITweenPlugin _vector2Plugin; // 0x30
		private static ITweenPlugin _vector3Plugin; // 0x38
		private static ITweenPlugin _vector4Plugin; // 0x40
		private static ITweenPlugin _quaternionPlugin; // 0x48
		private static ITweenPlugin _colorPlugin; // 0x50
		private static ITweenPlugin _rectPlugin; // 0x58
		private static ITweenPlugin _rectOffsetPlugin; // 0x60
		private static ITweenPlugin _stringPlugin; // 0x68
		private static ITweenPlugin _vector3ArrayPlugin; // 0x70
		private static ITweenPlugin _color2Plugin; // 0x78
		private const int _MaxCustomPlugins = 20; // Metadata: 0x0021B68A
		private static Dictionary<Type, ITweenPlugin> _customPlugins; // 0x80
	
		// Methods
		internal static ABSTweenPlugin<T1, T2, TPlugOptions> GetDefaultPlugin<T1, T2, TPlugOptions>()
			where TPlugOptions : struct, IPlugOptions;
		public static ABSTweenPlugin<T1, T2, TPlugOptions> GetCustomPlugin<TPlugin, T1, T2, TPlugOptions>()
			where TPlugin : ITweenPlugin, new()
			where TPlugOptions : struct, IPlugOptions;
		internal static void PurgeAll(); // 0x00988B54-0x00988C3C
	}
}

namespace DG.Tweening.Plugins.Core.PathCore
{
	[Serializable]
	public struct ControlPoint // TypeDefIndex: 2899
	{
		// Fields
		public Vector3 a; // 0x00
		public Vector3 b; // 0x0C
	
		// Constructors
		public ControlPoint(Vector3 a, Vector3 b); // 0x0098E7B8-0x0098E7C8
	
		// Methods
		public static ControlPoint operator +(ControlPoint cp, Vector3 v); // 0x0098E7C8-0x0098E8B8
	}

	internal abstract class ABSPathDecoder // TypeDefIndex: 2900
	{
		// Constructors
		protected ABSPathDecoder(); // 0x0098D7FC-0x0098D804
	
		// Methods
		internal abstract void FinalizePath(DG.Tweening.Plugins.Core.PathCore.Path p, Vector3[] wps, bool isClosedPath);
		internal abstract Vector3 GetPoint(float perc, Vector3[] wps, DG.Tweening.Plugins.Core.PathCore.Path p, ControlPoint[] controlPoints);
	}

	internal class CatmullRomDecoder : ABSPathDecoder // TypeDefIndex: 2901
	{
		// Constructors
		public CatmullRomDecoder(); // 0x0098E7B0-0x0098E7B8
	
		// Methods
		internal override void FinalizePath(DG.Tweening.Plugins.Core.PathCore.Path p, Vector3[] wps, bool isClosedPath); // 0x0098D804-0x0098DB3C
		internal override Vector3 GetPoint(float perc, Vector3[] wps, DG.Tweening.Plugins.Core.PathCore.Path p, ControlPoint[] controlPoints); // 0x0098E2A4-0x0098E7B0
		internal void SetTimeToLengthTables(DG.Tweening.Plugins.Core.PathCore.Path p, int subdivisions); // 0x0098DB3C-0x0098DD78
		internal void SetWaypointsLengths(DG.Tweening.Plugins.Core.PathCore.Path p, int subdivisions); // 0x0098DD78-0x0098E2A4
	}

	internal class LinearDecoder : ABSPathDecoder // TypeDefIndex: 2902
	{
		// Constructors
		public LinearDecoder(); // 0x0098EE3C-0x0098EE44
	
		// Methods
		internal override void FinalizePath(DG.Tweening.Plugins.Core.PathCore.Path p, Vector3[] wps, bool isClosedPath); // 0x0098E8B8-0x0098E908
		internal override Vector3 GetPoint(float perc, Vector3[] wps, DG.Tweening.Plugins.Core.PathCore.Path p, ControlPoint[] controlPoints); // 0x0098EBB8-0x0098EE38
		internal void SetTimeToLengthTables(DG.Tweening.Plugins.Core.PathCore.Path p, int subdivisions); // 0x0098E908-0x0098EBB8
		internal void SetWaypointsLengths(DG.Tweening.Plugins.Core.PathCore.Path p, int subdivisions); // 0x0098EE38-0x0098EE3C
	}

	[Serializable]
	public class Path // TypeDefIndex: 2903
	{
		// Fields
		private static CatmullRomDecoder _catmullRomDecoder; // 0x00
		private static LinearDecoder _linearDecoder; // 0x08
		public float[] wpLengths; // 0x10
		[SerializeField] // 0x003D8B70-0x003D8B80
		internal PathType type; // 0x18
		[SerializeField] // 0x003D8B80-0x003D8B90
		internal int subdivisionsXSegment; // 0x1C
		[SerializeField] // 0x003D8B90-0x003D8BA0
		internal int subdivisions; // 0x20
		[SerializeField] // 0x003D8BA0-0x003D8BB0
		internal Vector3[] wps; // 0x28
		[SerializeField] // 0x003D8BB0-0x003D8BC0
		internal ControlPoint[] controlPoints; // 0x30
		[SerializeField] // 0x003D8BC0-0x003D8BD0
		internal float length; // 0x38
		[SerializeField] // 0x003D8BD0-0x003D8BE0
		internal bool isFinalized; // 0x3C
		[SerializeField] // 0x003D8BE0-0x003D8BF0
		internal float[] timesTable; // 0x40
		[SerializeField] // 0x003D8BF0-0x003D8C00
		internal float[] lengthsTable; // 0x48
		internal int linearWPIndex; // 0x50
		private Path _incrementalClone; // 0x58
		private int _incrementalIndex; // 0x60
		private ABSPathDecoder _decoder; // 0x68
		private bool _changed; // 0x70
		internal Vector3[] nonLinearDrawWps; // 0x78
		internal Vector3 targetPosition; // 0x80
		internal Vector3? lookAtPosition; // 0x8C
		internal Color gizmoColor; // 0x9C
	
		// Constructors
		public Path(PathType type, Vector3[] waypoints, int subdivisionsXSegment, Color? gizmoColor = default); // 0x0098EE44-0x0098EFF0
		internal Path(); // 0x0098F200-0x0098F274
	
		// Methods
		internal void FinalizePath(bool isClosedPath, AxisConstraint lockPositionAxes, Vector3 currTargetVal); // 0x0098F274-0x0098F3EC
		internal Vector3 GetPoint(float perc, bool convertToConstantPerc = false /* Metadata: 0x0021B68E */); // 0x0098F3EC-0x0098F460
		internal float ConvertToConstantPathPerc(float perc); // 0x0098F460-0x0098F62C
		internal int GetWaypointIndexFromPerc(float perc, bool isMovingForward); // 0x0098F62C-0x0098F73C
		internal static Vector3[] GetDrawPoints(Path p, int drawSubdivisionsXSegment); // 0x0098F73C-0x0098F874
		internal static void RefreshNonLinearDrawWps(Path p); // 0x0098F874-0x0098F9B4
		internal void Destroy(); // 0x0098F9B4-0x0098FAB0
		internal Path CloneIncremental(int loopIncrement); // 0x0098FAB0-0x0099019C
		internal void AssignWaypoints(Vector3[] newWps, bool cloneWps = false /* Metadata: 0x0021B68F */); // 0x0098EFF0-0x0098F120
		internal void AssignDecoder(PathType pathType); // 0x0098F120-0x0098F200
		internal void Draw(); // 0x0099019C-0x009901A0
		private static void Draw(Path p); // 0x009901A0-0x0099056C
	}
}

namespace DG.Tweening.CustomPlugins
{
	public class PureQuaternionPlugin : ABSTweenPlugin<Quaternion, Quaternion, NoOptions> // TypeDefIndex: 2904
	{
		// Fields
		private static PureQuaternionPlugin _plug; // 0x00
	
		// Constructors
		public PureQuaternionPlugin(); // 0x009878DC-0x0098792C
	
		// Methods
		public static PureQuaternionPlugin Plug(); // 0x00987860-0x009878DC
		public override void Reset(TweenerCore<Quaternion, Quaternion, NoOptions> t); // 0x0098792C-0x00987930
		public override void SetFrom(TweenerCore<Quaternion, Quaternion, NoOptions> t, bool isRelative); // 0x00987930-0x00987AA4
		public override Quaternion ConvertToStartValue(TweenerCore<Quaternion, Quaternion, NoOptions> t, Quaternion value); // 0x00987AA4-0x00987AA8
		public override void SetRelativeEndValue(TweenerCore<Quaternion, Quaternion, NoOptions> t); // 0x00987AA8-0x00987B98
		public override void SetChangeValue(TweenerCore<Quaternion, Quaternion, NoOptions> t); // 0x00987B98-0x00987CC0
		public override float GetSpeedBasedDuration(NoOptions options, float unitsXSecond, Quaternion changeValue); // 0x00987CC0-0x00987D10
		public override void EvaluateAndApply(NoOptions options, Tween t, bool isRelative, DOGetter<Quaternion> getter, DOSetter<Quaternion> setter, float elapsed, Quaternion startValue, Quaternion changeValue, float duration, bool usingInversePosition, UpdateNotice updateNotice); // 0x00987D10-0x00987E60
	}
}

namespace DG.Tweening.Core
{
	public abstract class ABSSequentiable // TypeDefIndex: 2905
	{
		// Fields
		internal TweenType tweenType; // 0x10
		internal float sequencedPosition; // 0x14
		internal float sequencedEndPosition; // 0x18
		internal TweenCallback onStart; // 0x20
	
		// Constructors
		protected ABSSequentiable(); // 0x0097D9F0-0x0097D9F8
	}

	public delegate T DOGetter<out T>(); // TypeDefIndex: 2906; 0x00000000-0x00000000

	public delegate void DOSetter<in T>(T pNewValue); // TypeDefIndex: 2907; 0x00000000-0x00000000

	public static class Debugger // TypeDefIndex: 2908
	{
		// Fields
		public static int logPriority; // 0x00
	
		// Methods
		public static void Log(object message); // 0x0097F9AC-0x0097FA34
		public static void LogWarning(object message); // 0x0097FA34-0x0097FABC
		public static void LogError(object message); // 0x0097FABC-0x0097FB44
		public static void LogReport(object message); // 0x0097EA64-0x0097EAF8
		public static void LogInvalidTween(Tween t); // 0x0097FB44-0x0097FB8C
		public static void LogNestedTween(Tween t); // 0x0097FB8C-0x0097FBD4
		public static void LogNullTween(Tween t); // 0x0097FBD4-0x0097FC1C
		public static void LogNonPathTween(Tween t); // 0x0097FC1C-0x0097FC64
		public static void LogMissingMaterialProperty(string propertyName); // 0x0097FC64-0x0097FCBC
		public static void LogRemoveActiveTweenError(string propertyName); // 0x0097FCBC-0x0097FD14
		public static void SetLogPriority(LogBehaviour logBehaviour); // 0x0097FD14-0x0097FD9C
	}

	[AddComponentMenu] // 0x003D8548-0x003D8580
	public class DOTweenComponent : MonoBehaviour, IDOTweenInit // TypeDefIndex: 2909
	{
		// Fields
		public int inspectorUpdater; // 0x18
		private float _unscaledTime; // 0x1C
		private float _unscaledDeltaTime; // 0x20
		private bool _duplicateToDestroy; // 0x24
	
		// Nested types
		[CompilerGenerated] // 0x003D8B00-0x003D8B10
		private sealed class <WaitForCompletion>d__14 : IEnumerator<object> // TypeDefIndex: 2910
		{
			// Fields
			private int <>1__state; // 0x10
			private object <>2__current; // 0x18
			public Tween t; // 0x20
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003D9940-0x003D9950 */ get; } // 0x0097F3DC-0x0097F3E4 
			object IEnumerator.Current { [DebuggerHidden] /* 0x003D9960-0x003D9970 */ get; } // 0x0097F44C-0x0097F454 
	
			// Constructors
			[DebuggerHidden] // 0x003D9920-0x003D9930
			public <WaitForCompletion>d__14(int <>1__state); // 0x0097ED54-0x0097ED80
	
			// Methods
			[DebuggerHidden] // 0x003D9930-0x003D9940
			void IDisposable.Dispose(); // 0x0097F364-0x0097F368
			private bool MoveNext(); // 0x0097F368-0x0097F3DC
			[DebuggerHidden] // 0x003D9950-0x003D9960
			void IEnumerator.Reset(); // 0x0097F3E4-0x0097F44C
		}
	
		[CompilerGenerated] // 0x003D8B10-0x003D8B20
		private sealed class <WaitForRewind>d__15 : IEnumerator<object> // TypeDefIndex: 2911
		{
			// Fields
			private int <>1__state; // 0x10
			private object <>2__current; // 0x18
			public Tween t; // 0x20
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003D9990-0x003D99A0 */ get; } // 0x0097F7F8-0x0097F800 
			object IEnumerator.Current { [DebuggerHidden] /* 0x003D99B0-0x003D99C0 */ get; } // 0x0097F868-0x0097F870 
	
			// Constructors
			[DebuggerHidden] // 0x003D9970-0x003D9980
			public <WaitForRewind>d__15(int <>1__state); // 0x0097EDF4-0x0097EE20
	
			// Methods
			[DebuggerHidden] // 0x003D9980-0x003D9990
			void IDisposable.Dispose(); // 0x0097F740-0x0097F744
			private bool MoveNext(); // 0x0097F744-0x0097F7F8
			[DebuggerHidden] // 0x003D99A0-0x003D99B0
			void IEnumerator.Reset(); // 0x0097F800-0x0097F868
		}
	
		[CompilerGenerated] // 0x003D8B20-0x003D8B30
		private sealed class <WaitForKill>d__16 : IEnumerator<object> // TypeDefIndex: 2912
		{
			// Fields
			private int <>1__state; // 0x10
			private object <>2__current; // 0x18
			public Tween t; // 0x20
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003D99E0-0x003D99F0 */ get; } // 0x0097F5AC-0x0097F5B4 
			object IEnumerator.Current { [DebuggerHidden] /* 0x003D9A00-0x003D9A10 */ get; } // 0x0097F61C-0x0097F624 
	
			// Constructors
			[DebuggerHidden] // 0x003D99C0-0x003D99D0
			public <WaitForKill>d__16(int <>1__state); // 0x0097EE94-0x0097EEC0
	
			// Methods
			[DebuggerHidden] // 0x003D99D0-0x003D99E0
			void IDisposable.Dispose(); // 0x0097F54C-0x0097F550
			private bool MoveNext(); // 0x0097F550-0x0097F5AC
			[DebuggerHidden] // 0x003D99F0-0x003D9A00
			void IEnumerator.Reset(); // 0x0097F5B4-0x0097F61C
		}
	
		[CompilerGenerated] // 0x003D8B30-0x003D8B40
		private sealed class <WaitForElapsedLoops>d__17 : IEnumerator<object> // TypeDefIndex: 2913
		{
			// Fields
			private int <>1__state; // 0x10
			private object <>2__current; // 0x18
			public Tween t; // 0x20
			public int elapsedLoops; // 0x28
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003D9A30-0x003D9A40 */ get; } // 0x0097F4D4-0x0097F4DC 
			object IEnumerator.Current { [DebuggerHidden] /* 0x003D9A50-0x003D9A60 */ get; } // 0x0097F544-0x0097F54C 
	
			// Constructors
			[DebuggerHidden] // 0x003D9A10-0x003D9A20
			public <WaitForElapsedLoops>d__17(int <>1__state); // 0x0097EF58-0x0097EF84
	
			// Methods
			[DebuggerHidden] // 0x003D9A20-0x003D9A30
			void IDisposable.Dispose(); // 0x0097F454-0x0097F458
			private bool MoveNext(); // 0x0097F458-0x0097F4D4
			[DebuggerHidden] // 0x003D9A40-0x003D9A50
			void IEnumerator.Reset(); // 0x0097F4DC-0x0097F544
		}
	
		[CompilerGenerated] // 0x003D8B40-0x003D8B50
		private sealed class <WaitForPosition>d__18 : IEnumerator<object> // TypeDefIndex: 2914
		{
			// Fields
			private int <>1__state; // 0x10
			private object <>2__current; // 0x18
			public Tween t; // 0x20
			public float position; // 0x28
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003D9A80-0x003D9A90 */ get; } // 0x0097F6C8-0x0097F6D0 
			object IEnumerator.Current { [DebuggerHidden] /* 0x003D9AA0-0x003D9AB0 */ get; } // 0x0097F738-0x0097F740 
	
			// Constructors
			[DebuggerHidden] // 0x003D9A60-0x003D9A70
			public <WaitForPosition>d__18(int <>1__state); // 0x0097F01C-0x0097F048
	
			// Methods
			[DebuggerHidden] // 0x003D9A70-0x003D9A80
			void IDisposable.Dispose(); // 0x0097F624-0x0097F628
			private bool MoveNext(); // 0x0097F628-0x0097F6C8
			[DebuggerHidden] // 0x003D9A90-0x003D9AA0
			void IEnumerator.Reset(); // 0x0097F6D0-0x0097F738
		}
	
		[CompilerGenerated] // 0x003D8B50-0x003D8B60
		private sealed class <WaitForStart>d__19 : IEnumerator<object> // TypeDefIndex: 2915
		{
			// Fields
			private int <>1__state; // 0x10
			private object <>2__current; // 0x18
			public Tween t; // 0x20
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003D9AD0-0x003D9AE0 */ get; } // 0x0097F8E8-0x0097F8F0 
			object IEnumerator.Current { [DebuggerHidden] /* 0x003D9AF0-0x003D9B00 */ get; } // 0x0097F958-0x0097F960 
	
			// Constructors
			[DebuggerHidden] // 0x003D9AB0-0x003D9AC0
			public <WaitForStart>d__19(int <>1__state); // 0x0097F0BC-0x0097F0E8
	
			// Methods
			[DebuggerHidden] // 0x003D9AC0-0x003D9AD0
			void IDisposable.Dispose(); // 0x0097F870-0x0097F874
			private bool MoveNext(); // 0x0097F874-0x0097F8E8
			[DebuggerHidden] // 0x003D9AE0-0x003D9AF0
			void IEnumerator.Reset(); // 0x0097F8F0-0x0097F958
		}
	
		// Constructors
		public DOTweenComponent(); // 0x0097F35C-0x0097F364
	
		// Methods
		private void Awake(); // 0x0097D9F8-0x0097DA24
		private void Start(); // 0x0097DA24-0x0097DB1C
		private void Update(); // 0x0097DB1C-0x0097DE8C
		private void LateUpdate(); // 0x0097E288-0x0097E3BC
		private void FixedUpdate(); // 0x0097E3BC-0x0097E550
		internal void ManualUpdate(float deltaTime, float unscaledDeltaTime); // 0x0097E550-0x0097E63C
		private void OnDrawGizmos(); // 0x0097E63C-0x0097E798
		private void OnDestroy(); // 0x0097E798-0x0097EA64
		private void OnApplicationQuit(); // 0x0097EAF8-0x0097EB64
		public IDOTweenInit SetCapacity(int tweenersCapacity, int sequencesCapacity); // 0x0097EB64-0x0097EBE4
		internal IEnumerator WaitForCompletion(Tween t); // 0x0097ECE0-0x0097ED54
		internal IEnumerator WaitForRewind(Tween t); // 0x0097ED80-0x0097EDF4
		internal IEnumerator WaitForKill(Tween t); // 0x0097EE20-0x0097EE94
		internal IEnumerator WaitForElapsedLoops(Tween t, int elapsedLoops); // 0x0097EEC0-0x0097EF58
		internal IEnumerator WaitForPosition(Tween t, float position); // 0x0097EF84-0x0097F01C
		internal IEnumerator WaitForStart(Tween t); // 0x0097F048-0x0097F0BC
		internal static void Create(); // 0x0097F0E8-0x0097F228
		internal static void DestroyInstance(); // 0x0097F228-0x0097F35C
	}

	public class DOTweenSettings : ScriptableObject // TypeDefIndex: 2916
	{
		// Fields
		public const string AssetName = "DOTweenSettings"; // Metadata: 0x0021B690
		public bool useSafeMode; // 0x18
		public float timeScale; // 0x1C
		public bool useSmoothDeltaTime; // 0x20
		public float maxSmoothUnscaledTime; // 0x24
		public bool showUnityEditorReport; // 0x28
		public LogBehaviour logBehaviour; // 0x2C
		public bool drawGizmos; // 0x30
		public bool defaultRecyclable; // 0x31
		public AutoPlay defaultAutoPlay; // 0x34
		public UpdateType defaultUpdateType; // 0x38
		public bool defaultTimeScaleIndependent; // 0x3C
		public Ease defaultEaseType; // 0x40
		public float defaultEaseOvershootOrAmplitude; // 0x44
		public float defaultEasePeriod; // 0x48
		public bool defaultAutoKill; // 0x4C
		public LoopType defaultLoopType; // 0x50
		public SettingsLocation storeSettingsLocation; // 0x54
	
		// Nested types
		public enum SettingsLocation // TypeDefIndex: 2917
		{
			AssetsDirectory = 0,
			DOTweenDirectory = 1,
			DemigiantDirectory = 2
		}
	
		// Constructors
		public DOTweenSettings(); // 0x0097F960-0x0097F9AC
	}

	public static class Extensions // TypeDefIndex: 2918
	{
		// Extension methods
		internal static T SetSpecialStartupMode<T>(this T t, SpecialStartupMode mode)
			where T : Tween;
		internal static TweenerCore<T1, T2, TPlugOptions> NoFrom<T1, T2, TPlugOptions>(this TweenerCore<T1, T2, TPlugOptions> t)
			where TPlugOptions : struct, IPlugOptions;
		internal static TweenerCore<T1, T2, TPlugOptions> Blendable<T1, T2, TPlugOptions>(this TweenerCore<T1, T2, TPlugOptions> t)
			where TPlugOptions : struct, IPlugOptions;
	}

	internal class SequenceCallback : ABSSequentiable // TypeDefIndex: 2919
	{
		// Constructors
		public SequenceCallback(float sequencedPosition, TweenCallback callback); // 0x009837F8-0x0098383C
	}

	internal static class TweenManager // TypeDefIndex: 2920
	{
		// Fields
		private const int _DefaultMaxTweeners = 200; // Metadata: 0x0021B6C1
		private const int _DefaultMaxSequences = 50; // Metadata: 0x0021B6C5
		private const string _MaxTweensReached = "Max Tweens reached: capacity has automatically been increased from #0 to #1. Use DOTween.SetTweensCapacity to set it manually at startup"; // Metadata: 0x0021B6C9
		internal static int maxActive; // 0x00
		internal static int maxTweeners; // 0x04
		internal static int maxSequences; // 0x08
		internal static bool hasActiveTweens; // 0x0C
		internal static bool hasActiveDefaultTweens; // 0x0D
		internal static bool hasActiveLateTweens; // 0x0E
		internal static bool hasActiveFixedTweens; // 0x0F
		internal static bool hasActiveManualTweens; // 0x10
		internal static int totActiveTweens; // 0x14
		internal static int totActiveDefaultTweens; // 0x18
		internal static int totActiveLateTweens; // 0x1C
		internal static int totActiveFixedTweens; // 0x20
		internal static int totActiveManualTweens; // 0x24
		internal static int totActiveTweeners; // 0x28
		internal static int totActiveSequences; // 0x2C
		internal static int totPooledTweeners; // 0x30
		internal static int totPooledSequences; // 0x34
		internal static int totTweeners; // 0x38
		internal static int totSequences; // 0x3C
		internal static bool isUpdateLoop; // 0x40
		internal static Tween[] _activeTweens; // 0x48
		private static Tween[] _pooledTweeners; // 0x50
		private static readonly Stack<Tween> _PooledSequences; // 0x58
		private static readonly List<Tween> _KillList; // 0x60
		private static int _maxActiveLookupId; // 0x68
		private static bool _requiresActiveReorganization; // 0x6C
		private static int _reorganizeFromId; // 0x70
		private static int _minPooledTweenerId; // 0x74
		private static int _maxPooledTweenerId; // 0x78
		private static bool _despawnAllCalledFromUpdateLoopCallback; // 0x7C
	
		// Nested types
		internal enum CapacityIncreaseMode // TypeDefIndex: 2921
		{
			TweenersAndSequences = 0,
			TweenersOnly = 1,
			SequencesOnly = 2
		}
	
		// Constructors
		static TweenManager(); // 0x00987408-0x0098753C
	
		// Methods
		internal static TweenerCore<T1, T2, TPlugOptions> GetTweener<T1, T2, TPlugOptions>()
			where TPlugOptions : struct, IPlugOptions;
		internal static Sequence GetSequence(); // 0x0098383C-0x00983B80
		internal static void SetUpdateType(Tween t, UpdateType updateType, bool isIndependentUpdate); // 0x00984138-0x00984414
		internal static void AddActiveTweenToSequence(Tween t); // 0x00984414-0x00984478
		internal static int DespawnAll(); // 0x00984980-0x00984B8C
		internal static void Despawn(Tween t, bool modifyActiveLists = true /* Metadata: 0x0021B6AF */); // 0x00984B8C-0x00985274
		internal static void PurgeAll(); // 0x009852EC-0x009854A0
		internal static void PurgePools(); // 0x009854A0-0x00985588
		internal static void ResetCapacities(); // 0x00985588-0x009855EC
		internal static void SetCapacities(int tweenersCapacity, int sequencesCapacity); // 0x0097EBE4-0x0097ECE0
		internal static int Validate(); // 0x009855EC-0x009857B4
		internal static void Update(UpdateType updateType, float deltaTime, float independentTime); // 0x0097DE8C-0x0097E288
		internal static int FilteredOperation(OperationType operationType, FilterType filterType, object id, bool optionalBool, float optionalFloat, object optionalObj = null, object[] optionalArray = null); // 0x00985C00-0x00986314
		internal static bool Complete(Tween t, bool modifyActiveLists = true /* Metadata: 0x0021B6B0 */, UpdateMode updateMode = UpdateMode.Goto /* Metadata: 0x0021B6B1 */); // 0x00986314-0x00986408
		internal static bool Flip(Tween t); // 0x00986408-0x00986450
		internal static void ForceInit(Tween t, bool isSequenced = false /* Metadata: 0x0021B6B5 */); // 0x00986B68-0x00986C40
		internal static bool Goto(Tween t, float to, bool andPlay = false /* Metadata: 0x0021B6B6 */, UpdateMode updateMode = UpdateMode.Goto /* Metadata: 0x0021B6B7 */); // 0x00986450-0x009865E4
		internal static bool Pause(Tween t); // 0x009865E4-0x00986630
		internal static bool Play(Tween t); // 0x00986630-0x009866BC
		internal static bool PlayBackwards(Tween t); // 0x009866BC-0x00986774
		internal static bool PlayForward(Tween t); // 0x00986774-0x00986828
		internal static bool Restart(Tween t, bool includeDelay = true /* Metadata: 0x0021B6BB */, float changeDelayTo = -1f /* Metadata: 0x0021B6BC */); // 0x00986828-0x00986918
		internal static bool Rewind(Tween t, bool includeDelay = true /* Metadata: 0x0021B6C0 */); // 0x00986918-0x00986A14
		internal static bool SmoothRewind(Tween t); // 0x00986A14-0x00986ACC
		internal static bool TogglePause(Tween t); // 0x00986ACC-0x00986B68
		internal static int TotalPooledTweens(); // 0x00986C40-0x00986CAC
		internal static int TotalPlayingTweens(); // 0x00986CAC-0x00986E10
		internal static List<Tween> GetActiveTweens(bool playing); // 0x00986E10-0x00987008
		internal static List<Tween> GetTweensById(object id, bool playingOnly); // 0x00987008-0x00987208
		internal static List<Tween> GetTweensByTarget(object target, bool playingOnly); // 0x00987208-0x00987408
		private static void MarkForKilling(Tween t); // 0x00985A8C-0x00985B28
		private static void AddActiveTween(Tween t); // 0x00983B80-0x00983E98
		private static void ReorganizeActiveTweens(); // 0x009857B4-0x00985A8C
		private static void DespawnActiveTweens(List<Tween> tweens); // 0x00985B28-0x00985C00
		private static void RemoveActiveTween(Tween t); // 0x00984478-0x00984980
		private static void ClearTweenArray(Tween[] tweens); // 0x00985274-0x009852EC
		private static void IncreaseCapacities(CapacityIncreaseMode increaseMode); // 0x00983E98-0x00984138
	}

	internal static class Utils // TypeDefIndex: 2922
	{
		// Methods
		internal static Vector3 Vector3FromAngle(float degrees, float magnitude); // 0x0098753C-0x00987604
		internal static float Angle2D(Vector3 from, Vector3 to); // 0x00987604-0x00987754
		internal static bool Vector3AreApproximatelyEqual(Vector3 a, Vector3 b); // 0x00987754-0x00987860
	}

	public class TweenerCore<T1, T2, TPlugOptions> : Tweener // TypeDefIndex: 2923
		where TPlugOptions : struct, IPlugOptions
	{
		// Fields
		public T2 startValue;
		public T2 endValue;
		public T2 changeValue;
		public TPlugOptions plugOptions;
		public DOGetter<T1> getter;
		public DOSetter<T1> setter;
		internal ABSTweenPlugin<T1, T2, TPlugOptions> tweenPlugin;
		private const string _TxtCantChangeSequencedValues = "You cannot change the values of a tween contained inside a Sequence"; // Metadata: 0x0021B76E
	
		// Constructors
		internal TweenerCore();
	
		// Methods
		public override Tweener ChangeStartValue(object newStartValue, float newDuration = -1f /* Metadata: 0x0021B761 */);
		public override Tweener ChangeEndValue(object newEndValue, bool snapStartValue);
		public override Tweener ChangeEndValue(object newEndValue, float newDuration = -1f /* Metadata: 0x0021B765 */, bool snapStartValue = false /* Metadata: 0x0021B769 */);
		public override Tweener ChangeValues(object newStartValue, object newEndValue, float newDuration = -1f /* Metadata: 0x0021B76A */);
		internal override Tweener SetFrom(bool relative);
		internal sealed override void Reset();
		internal override bool Validate();
		internal override float UpdateDelay(float elapsed);
		internal override bool Startup();
		internal override bool ApplyTween(float prevPosition, int prevCompletedLoops, int newCompletedSteps, bool useInversePosition, UpdateMode updateMode, UpdateNotice updateNotice);
	}
}

namespace DG.Tweening.Core.Enums
{
	internal enum FilterType // TypeDefIndex: 2924
	{
		All = 0,
		TargetOrId = 1,
		TargetAndId = 2,
		AllExceptTargetsOrIds = 3,
		DOGetter = 4
	}

	internal enum OperationType // TypeDefIndex: 2925
	{
		Complete = 0,
		Despawn = 1,
		Flip = 2,
		Goto = 3,
		Pause = 4,
		Play = 5,
		PlayForward = 6,
		PlayBackwards = 7,
		Rewind = 8,
		SmoothRewind = 9,
		Restart = 10,
		TogglePause = 11,
		IsTweening = 12
	}

	internal enum SpecialStartupMode // TypeDefIndex: 2926
	{
		None = 0,
		SetLookAt = 1,
		SetShake = 2,
		SetPunch = 3,
		SetCameraShakePosition = 4
	}

	public enum UpdateNotice // TypeDefIndex: 2927
	{
		None = 0,
		RewindStep = 1
	}

	internal enum UpdateMode // TypeDefIndex: 2928
	{
		Update = 0,
		Goto = 1,
		IgnoreOnUpdate = 2
	}
}

namespace DG.Tweening.Core.Easing
{
	public static class Bounce // TypeDefIndex: 2929
	{
		// Methods
		public static float EaseIn(float time, float duration, float unusedOvershootOrAmplitude, float unusedPeriod); // 0x0097FD9C-0x0097FDBC
		public static float EaseOut(float time, float duration, float unusedOvershootOrAmplitude, float unusedPeriod); // 0x0097FDBC-0x0097FE80
		public static float EaseInOut(float time, float duration, float unusedOvershootOrAmplitude, float unusedPeriod); // 0x0097FE80-0x0097FED4
	}

	public static class EaseManager // TypeDefIndex: 2930
	{
		// Fields
		private const float _PiOver2 = 1.5707964f; // Metadata: 0x0021B825
		private const float _TwoPi = 6.2831855f; // Metadata: 0x0021B829
	
		// Nested types
		[Serializable]
		[CompilerGenerated] // 0x003D8B60-0x003D8B70
		private sealed class <>c // TypeDefIndex: 2931
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static EaseFunction <>9__4_0; // 0x08
			public static EaseFunction <>9__4_1; // 0x10
			public static EaseFunction <>9__4_2; // 0x18
			public static EaseFunction <>9__4_3; // 0x20
			public static EaseFunction <>9__4_4; // 0x28
			public static EaseFunction <>9__4_5; // 0x30
			public static EaseFunction <>9__4_6; // 0x38
			public static EaseFunction <>9__4_7; // 0x40
			public static EaseFunction <>9__4_8; // 0x48
			public static EaseFunction <>9__4_9; // 0x50
			public static EaseFunction <>9__4_10; // 0x58
			public static EaseFunction <>9__4_11; // 0x60
			public static EaseFunction <>9__4_12; // 0x68
			public static EaseFunction <>9__4_13; // 0x70
			public static EaseFunction <>9__4_14; // 0x78
			public static EaseFunction <>9__4_15; // 0x80
			public static EaseFunction <>9__4_16; // 0x88
			public static EaseFunction <>9__4_17; // 0x90
			public static EaseFunction <>9__4_18; // 0x98
			public static EaseFunction <>9__4_19; // 0xA0
			public static EaseFunction <>9__4_20; // 0xA8
			public static EaseFunction <>9__4_21; // 0xB0
			public static EaseFunction <>9__4_22; // 0xB8
			public static EaseFunction <>9__4_23; // 0xC0
			public static EaseFunction <>9__4_24; // 0xC8
			public static EaseFunction <>9__4_25; // 0xD0
			public static EaseFunction <>9__4_26; // 0xD8
			public static EaseFunction <>9__4_27; // 0xE0
			public static EaseFunction <>9__4_28; // 0xE8
			public static EaseFunction <>9__4_29; // 0xF0
			public static EaseFunction <>9__4_30; // 0xF8
			public static EaseFunction <>9__4_31; // 0x100
			public static EaseFunction <>9__4_32; // 0x108
			public static EaseFunction <>9__4_33; // 0x110
			public static EaseFunction <>9__4_34; // 0x118
			public static EaseFunction <>9__4_35; // 0x120
	
			// Constructors
			static <>c(); // 0x0098288C-0x009828F0
			public <>c(); // 0x009828F0-0x009828F8
	
			// Methods
			internal float <ToEaseFunction>b__4_0(float time, float duration, float overshootOrAmplitude, float period); // 0x009828F8-0x00982900
			internal float <ToEaseFunction>b__4_1(float time, float duration, float overshootOrAmplitude, float period); // 0x00982900-0x00982990
			internal float <ToEaseFunction>b__4_2(float time, float duration, float overshootOrAmplitude, float period); // 0x00982990-0x00982A18
			internal float <ToEaseFunction>b__4_3(float time, float duration, float overshootOrAmplitude, float period); // 0x00982A18-0x00982AB0
			internal float <ToEaseFunction>b__4_4(float time, float duration, float overshootOrAmplitude, float period); // 0x00982AB0-0x00982ABC
			internal float <ToEaseFunction>b__4_5(float time, float duration, float overshootOrAmplitude, float period); // 0x00982ABC-0x00982AD0
			internal float <ToEaseFunction>b__4_6(float time, float duration, float overshootOrAmplitude, float period); // 0x00982AD0-0x00982B14
			internal float <ToEaseFunction>b__4_7(float time, float duration, float overshootOrAmplitude, float period); // 0x00982B14-0x00982B24
			internal float <ToEaseFunction>b__4_8(float time, float duration, float overshootOrAmplitude, float period); // 0x00982B24-0x00982B44
			internal float <ToEaseFunction>b__4_9(float time, float duration, float overshootOrAmplitude, float period); // 0x00982B44-0x00982B8C
			internal float <ToEaseFunction>b__4_10(float time, float duration, float overshootOrAmplitude, float period); // 0x00982B8C-0x00982BA0
			internal float <ToEaseFunction>b__4_11(float time, float duration, float overshootOrAmplitude, float period); // 0x00982BA0-0x00982BC4
			internal float <ToEaseFunction>b__4_12(float time, float duration, float overshootOrAmplitude, float period); // 0x00982BC4-0x00982C10
			internal float <ToEaseFunction>b__4_13(float time, float duration, float overshootOrAmplitude, float period); // 0x00982C10-0x00982C28
			internal float <ToEaseFunction>b__4_14(float time, float duration, float overshootOrAmplitude, float period); // 0x00982C28-0x00982C50
			internal float <ToEaseFunction>b__4_15(float time, float duration, float overshootOrAmplitude, float period); // 0x00982C50-0x00982CA8
			internal float <ToEaseFunction>b__4_16(float time, float duration, float overshootOrAmplitude, float period); // 0x00982CA8-0x00982D44
			internal float <ToEaseFunction>b__4_17(float time, float duration, float overshootOrAmplitude, float period); // 0x00982D44-0x00982DE0
			internal float <ToEaseFunction>b__4_18(float time, float duration, float overshootOrAmplitude, float period); // 0x00982DE0-0x00982EE8
			internal float <ToEaseFunction>b__4_19(float time, float duration, float overshootOrAmplitude, float period); // 0x00982EE8-0x00982F84
			internal float <ToEaseFunction>b__4_20(float time, float duration, float overshootOrAmplitude, float period); // 0x00982F84-0x00983028
			internal float <ToEaseFunction>b__4_21(float time, float duration, float overshootOrAmplitude, float period); // 0x00983028-0x0098310C
			internal float <ToEaseFunction>b__4_22(float time, float duration, float overshootOrAmplitude, float period); // 0x0098310C-0x00983274
			internal float <ToEaseFunction>b__4_23(float time, float duration, float overshootOrAmplitude, float period); // 0x00983274-0x009833D8
			internal float <ToEaseFunction>b__4_24(float time, float duration, float overshootOrAmplitude, float period); // 0x009833D8-0x009835C4
			internal float <ToEaseFunction>b__4_25(float time, float duration, float overshootOrAmplitude, float period); // 0x009835C4-0x009835E4
			internal float <ToEaseFunction>b__4_26(float time, float duration, float overshootOrAmplitude, float period); // 0x009835E4-0x00983610
			internal float <ToEaseFunction>b__4_27(float time, float duration, float overshootOrAmplitude, float period); // 0x00983610-0x0098367C
			internal float <ToEaseFunction>b__4_28(float time, float duration, float overshootOrAmplitude, float period); // 0x0098367C-0x0098369C
			internal float <ToEaseFunction>b__4_29(float time, float duration, float overshootOrAmplitude, float period); // 0x0098369C-0x009836A0
			internal float <ToEaseFunction>b__4_30(float time, float duration, float overshootOrAmplitude, float period); // 0x009836A0-0x009836A4
			internal float <ToEaseFunction>b__4_31(float time, float duration, float overshootOrAmplitude, float period); // 0x009836A4-0x009836A8
			internal float <ToEaseFunction>b__4_32(float time, float duration, float overshootOrAmplitude, float period); // 0x009836A8-0x009836AC
			internal float <ToEaseFunction>b__4_33(float time, float duration, float overshootOrAmplitude, float period); // 0x009836AC-0x009836B0
			internal float <ToEaseFunction>b__4_34(float time, float duration, float overshootOrAmplitude, float period); // 0x009836B0-0x009836B4
			internal float <ToEaseFunction>b__4_35(float time, float duration, float overshootOrAmplitude, float period); // 0x009836B4-0x009836C8
		}
	
		// Methods
		public static float Evaluate(Tween t, float time, float duration, float overshootOrAmplitude, float period); // 0x0097FFE4-0x00980058
		public static float Evaluate(Ease easeType, EaseFunction customEase, float time, float duration, float overshootOrAmplitude, float period); // 0x00980058-0x00980B6C
		public static EaseFunction ToEaseFunction(Ease ease); // 0x009813D0-0x0098286C
		internal static bool IsFlashEase(Ease ease); // 0x0098287C-0x0098288C
	}

	public class EaseCurve // TypeDefIndex: 2932
	{
		// Fields
		private readonly AnimationCurve _animCurve; // 0x10
	
		// Constructors
		public EaseCurve(AnimationCurve animCurve); // 0x0097FED4-0x0097FF00
	
		// Methods
		public float Evaluate(float time, float duration, float unusedOvershoot, float unusedPeriod); // 0x0097FF00-0x0097FFE4
	}

	public static class Flash // TypeDefIndex: 2933
	{
		// Methods
		public static float Ease(float time, float duration, float overshootOrAmplitude, float period); // 0x00981068-0x00981130
		public static float EaseIn(float time, float duration, float overshootOrAmplitude, float period); // 0x00981130-0x009811FC
		public static float EaseOut(float time, float duration, float overshootOrAmplitude, float period); // 0x009811FC-0x009812D0
		public static float EaseInOut(float time, float duration, float overshootOrAmplitude, float period); // 0x009812D0-0x009813D0
		private static float WeightedEase(float overshootOrAmplitude, float period, int stepIndex, float stepDuration, float dir, float res); // 0x009836C8-0x009837F8
	}
}

[CompilerGenerated] // 0x003D8590-0x003D85A0
internal sealed class <PrivateImplementationDetails> // TypeDefIndex: 2934
{
	// Fields
	internal static readonly __StaticArrayInitTypeSize=50 6F98278EFCD257898AD01BE39D1D0AEFB78FC551; // 0x00 // Starts with: 41 00 42 00 43 00 44 00 - Metadata: 0x0021B82D
	internal static readonly __StaticArrayInitTypeSize=20 8C4C6C4E493EC2BEEF5F6F6A9C4472C13BED42E8; // 0x32 // Starts with: 31 00 32 00 33 00 34 00 - Metadata: 0x0021B85F
	internal static readonly __StaticArrayInitTypeSize=120 9DC5F4D0A1418B4EC71B22D21E93D134922FA735; // 0x46 // Starts with: 41 00 42 00 43 00 44 00 - Metadata: 0x0021B873
	internal static readonly __StaticArrayInitTypeSize=50 FD0BD55CDDDFD0B323012A45F83437763AF58952; // 0xBE // Starts with: 61 00 62 00 63 00 64 00 - Metadata: 0x0021B8EB

	// Nested types
	private struct __StaticArrayInitTypeSize=20 // TypeDefIndex: 2935
	{
	}

	private struct __StaticArrayInitTypeSize=50 // TypeDefIndex: 2936
	{
	}

	private struct __StaticArrayInitTypeSize=120 // TypeDefIndex: 2937
	{
	}
}

namespace Facebook.MiniJSON
{
	public static class Json // TypeDefIndex: 2939
	{
		// Fields
		private static NumberFormatInfo numberFormat; // 0x00
	
		// Nested types
		private sealed class Parser : IDisposable // TypeDefIndex: 2940
		{
			// Fields
			private StringReader json; // 0x10
	
			// Properties
			private char PeekChar { get; } // 0x006A70B8-0x006A7148 
			private char NextChar { get; } // 0x006A7148-0x006A71D8 
			private string NextWord { get; } // 0x006A71D8-0x006A72E4 
			private TOKEN NextToken { get; } // 0x006A72E4-0x006A74C0 
	
			// Nested types
			private enum TOKEN // TypeDefIndex: 2941
			{
				NONE = 0,
				CURLY_OPEN = 1,
				CURLY_CLOSE = 2,
				SQUARED_OPEN = 3,
				SQUARED_CLOSE = 4,
				COLON = 5,
				COMMA = 6,
				STRING = 7,
				NUMBER = 8,
				TRUE = 9,
				FALSE = 10,
				NULL = 11
			}
	
			// Constructors
			private Parser(string jsonString); // 0x006A703C-0x006A70B8
	
			// Methods
			public static object Parse(string jsonString); // 0x006A6DB8-0x006A6EFC
			public void Dispose(); // 0x006A75B8-0x006A75F4
			private Dictionary<string, object> ParseObject(); // 0x006A75F4-0x006A7730
			private List<object> ParseArray(); // 0x006A7A08-0x006A7AF4
			private object ParseValue(); // 0x006A7590-0x006A75B8
			private object ParseByToken(TOKEN token); // 0x006A7AF4-0x006A7BD0
			private string ParseString(); // 0x006A7730-0x006A7A08
			private object ParseNumber(); // 0x006A7BD0-0x006A7D00
			private void EatWhitespace(); // 0x006A74C0-0x006A7590
		}
	
		private sealed class Serializer // TypeDefIndex: 2942
		{
			// Fields
			private StringBuilder builder; // 0x10
	
			// Constructors
			private Serializer(); // 0x006A7D00-0x006A7D6C
	
			// Methods
			public static string Serialize(object obj); // 0x006A6F00-0x006A6FA4
			private void SerializeValue(object value); // 0x006A7D6C-0x006A7F18
			private void SerializeObject(IDictionary obj); // 0x006A8504-0x006A8948
			private void SerializeArray(IList array); // 0x006A8208-0x006A8504
			private void SerializeString(string str); // 0x006A7F18-0x006A8208
			private void SerializeOther(object value); // 0x006A8948-0x006A8AD4
		}
	
		// Constructors
		static Json(); // 0x006A6FA4-0x006A703C
	
		// Methods
		public static object Deserialize(string json); // 0x006A6DAC-0x006A6DB8
		public static string Serialize(object obj); // 0x006A6EFC-0x006A6F00
	}
}

namespace Facebook.Unity
{
	public class AccessToken // TypeDefIndex: 2943
	{
		// Fields
		[CompilerGenerated] // 0x003D9E54-0x003D9E64
		private static AccessToken <CurrentAccessToken>k__BackingField; // 0x00
		[CompilerGenerated] // 0x003D9E64-0x003D9E74
		private string <TokenString>k__BackingField; // 0x10
		[CompilerGenerated] // 0x003D9E74-0x003D9E84
		private DateTime <ExpirationTime>k__BackingField; // 0x18
		[CompilerGenerated] // 0x003D9E84-0x003D9E94
		private IEnumerable<string> <Permissions>k__BackingField; // 0x20
		[CompilerGenerated] // 0x003D9E94-0x003D9EA4
		private string <UserId>k__BackingField; // 0x28
		[CompilerGenerated] // 0x003D9EA4-0x003D9EB4
		private DateTime? <LastRefresh>k__BackingField; // 0x30
	
		// Properties
		public static AccessToken CurrentAccessToken { [CompilerGenerated] /* 0x003DA244-0x003DA254 */ get; [CompilerGenerated] /* 0x003DA254-0x003DA264 */ internal set; } // 0x006A8C8C-0x006A8CDC 0x006A8CDC-0x006A8D30
		public string TokenString { [CompilerGenerated] /* 0x003DA264-0x003DA274 */ get; [CompilerGenerated] /* 0x003DA274-0x003DA284 */ private set; } // 0x006A8D30-0x006A8D38 0x006A8C64-0x006A8C6C
		public DateTime ExpirationTime { [CompilerGenerated] /* 0x003DA284-0x003DA294 */ get; [CompilerGenerated] /* 0x003DA294-0x003DA2A4 */ private set; } // 0x006A8D38-0x006A8D40 0x006A8C6C-0x006A8C74
		public IEnumerable<string> Permissions { [CompilerGenerated] /* 0x003DA2A4-0x003DA2B4 */ get; [CompilerGenerated] /* 0x003DA2B4-0x003DA2C4 */ private set; } // 0x006A8D40-0x006A8D48 0x006A8C74-0x006A8C7C
		public string UserId { [CompilerGenerated] /* 0x003DA2C4-0x003DA2D4 */ get; [CompilerGenerated] /* 0x003DA2D4-0x003DA2E4 */ private set; } // 0x006A8D48-0x006A8D50 0x006A8C7C-0x006A8C84
		public DateTime? LastRefresh { [CompilerGenerated] /* 0x003DA2E4-0x003DA2F4 */ get; [CompilerGenerated] /* 0x003DA2F4-0x003DA304 */ private set; } // 0x006A8D50-0x006A8D5C 0x006A8C84-0x006A8C8C
	
		// Constructors
		internal AccessToken(string tokenString, string userId, DateTime expirationTime, IEnumerable<string> permissions, DateTime? lastRefresh); // 0x006A8AD4-0x006A8C64
	
		// Methods
		public override string ToString(); // 0x006A8D5C-0x006A8F1C
		internal string ToJson(); // 0x006A9474-0x006A96CC
	}

	internal class CallbackManager // TypeDefIndex: 2944
	{
		// Fields
		private IDictionary<string, object> facebookDelegates; // 0x10
		private int nextAsyncId; // 0x18
	
		// Constructors
		public CallbackManager(); // 0x006ABA20-0x006ABA90
	
		// Methods
		public string AddFacebookDelegate<T>(FacebookDelegate<T> callback)
			where T : IResult;
		public void OnFacebookResponse(IInternalResult result); // 0x006AB594-0x006AB838
		private static void CallCallback(object callback, IResult result); // 0x006AB838-0x006ABA20
		private static bool TryCallCallback<T>(object callback, IResult result)
			where T : IResult;
	}

	internal class ComponentFactory // TypeDefIndex: 2945
	{
		// Fields
		private static GameObject facebookGameObject; // 0x00
	
		// Properties
		private static GameObject FacebookGameObject { get; } // 0x006B5408-0x006B54CC 
	
		// Nested types
		internal enum IfNotExist // TypeDefIndex: 2946
		{
			AddNew = 0,
			ReturnNull = 1
		}
	
		// Methods
		public static T GetComponent<T>(IfNotExist ifNotExist = IfNotExist.AddNew /* Metadata: 0x0021B94D */)
			where T : MonoBehaviour;
		public static T AddComponent<T>()
			where T : MonoBehaviour;
	}

	internal static class Constants // TypeDefIndex: 2947
	{
		// Fields
		private static FacebookUnityPlatform? currentPlatform; // 0x00
	
		// Properties
		public static Uri GraphUrl { get; } // 0x006B54CC-0x006B5674 
		public static string GraphApiUserAgent { get; } // 0x006AB1E0-0x006AB3D0 
		public static bool IsMobile { get; } // 0x006B5828-0x006B5850 
		public static bool IsEditor { get; } // 0x006B5850-0x006B5858 
		public static bool IsWeb { get; } // 0x006B5858-0x006B5874 
		public static bool IsGameroom { get; } // 0x006B5874-0x006B5890 
		public static string UnitySDKUserAgentSuffixLegacy { get; } // 0x006B5890-0x006B59BC 
		public static string UnitySDKUserAgent { get; } // 0x006B57B0-0x006B5828 
		public static bool DebugMode { get; } // 0x006B59BC-0x006B5A1C 
		public static FacebookUnityPlatform CurrentPlatform { get; } // 0x006AB100-0x006AB1E0 
	
		// Methods
		private static FacebookUnityPlatform GetCurrentPlatform(); // 0x006B5A1C-0x006B5A6C
	}

	public sealed class FB : ScriptableObject // TypeDefIndex: 2948
	{
		// Fields
		private const string DefaultJSSDKLocale = "en_US"; // Metadata: 0x0021B99B
		private static IFacebook facebook; // 0x00
		private static bool isInitCalled; // 0x08
		private static string facebookDomain; // 0x10
		private static string graphApiVersion; // 0x18
		[CompilerGenerated] // 0x003D9EB4-0x003D9EC4
		private static string <AppId>k__BackingField; // 0x20
		[CompilerGenerated] // 0x003D9EC4-0x003D9ED4
		private static string <ClientToken>k__BackingField; // 0x28
		[CompilerGenerated] // 0x003D9ED4-0x003D9EE4
		private static OnDLLLoaded <OnDLLLoadedDelegate>k__BackingField; // 0x30
	
		// Properties
		public static string AppId { [CompilerGenerated] /* 0x003DA304-0x003DA314 */ get; [CompilerGenerated] /* 0x003DA314-0x003DA324 */ private set; } // 0x006B5E30-0x006B5E98 0x006B95A0-0x006B960C
		public static string ClientToken { [CompilerGenerated] /* 0x003DA324-0x003DA334 */ get; [CompilerGenerated] /* 0x003DA334-0x003DA344 */ private set; } // 0x006B960C-0x006B9674 0x006B9674-0x006B96E0
		public static string GraphApiVersion { get; set; } // 0x006AC90C-0x006AC974 0x006B96E0-0x006B974C
		public static bool IsLoggedIn { get; } // 0x006B6EF0-0x006B6FF4 
		public static bool IsInitialized { get; } // 0x006B974C-0x006B9864 
		public static bool LimitAppEventUsage { get; set; } // 0x006B9864-0x006B997C 0x006B997C-0x006B9AA4
		internal static IFacebook FacebookImpl { get; set; } // 0x006B56DC-0x006B57B0 0x006B9AA4-0x006B9B10
		internal static string FacebookDomain { get; set; } // 0x006B5674-0x006B56DC 0x006B9B10-0x006B9B7C
		private static OnDLLLoaded OnDLLLoadedDelegate { [CompilerGenerated] /* 0x003DA344-0x003DA354 */ get; [CompilerGenerated] /* 0x003DA354-0x003DA364 */ set; } // 0x006B9B7C-0x006B9BE4 0x006B9BE4-0x006B9C50
	
		// Nested types
		private delegate void OnDLLLoaded(); // TypeDefIndex: 2949; 0x006BC1B0-0x006BC5B0
	
		public sealed class Canvas // TypeDefIndex: 2950
		{
			// Properties
			private static IPayFacebook FacebookPayImpl { get; } // 0x006BBEFC-0x006BBFB4 
	
			// Methods
			public static void Pay(string product, string action = "purchaseitem" /* Metadata: 0x0021B9A4 */, int quantity = 1 /* Metadata: 0x0021B9B4 */, int? quantityMin = default, int? quantityMax = default, string requestId = null, string pricepointId = null, string testCurrency = null, FacebookDelegate<IPayResult> callback = null); // 0x006BBFB4-0x006BC0D8
		}
	
		public sealed class Mobile // TypeDefIndex: 2951
		{
			// Properties
			public static ShareDialogMode ShareDialogMode { set; } // 0x006BC5B0-0x006BC668
			private static IMobileFacebook MobileFacebookImpl { get; } // 0x006BC668-0x006BC720 
	
			// Methods
			public static void FetchDeferredAppLinkData(FacebookDelegate<IAppLinkResult> callback = null); // 0x006BC720-0x006BC7EC
			public static void RefreshCurrentAccessToken(FacebookDelegate<IAccessTokenRefreshResult> callback = null); // 0x006BC7EC-0x006BC8B4
			public static bool IsImplicitPurchaseLoggingEnabled(); // 0x006B2EA0-0x006B2F54
		}
	
		internal abstract class CompiledFacebookLoader : MonoBehaviour // TypeDefIndex: 2952
		{
			// Properties
			protected abstract FacebookGameObject FBGameObject { get; }
	
			// Constructors
			protected CompiledFacebookLoader(); // 0x006B0830-0x006B0838
	
			// Methods
			public void Start(); // 0x006BC0D8-0x006BC1B0
		}
	
		[CompilerGenerated] // 0x003D9DA4-0x003D9DB4
		private sealed class <>c__DisplayClass35_0 // TypeDefIndex: 2953
		{
			// Fields
			public InitDelegate onInitComplete; // 0x10
			public string appId; // 0x18
			public bool cookie; // 0x20
			public bool logging; // 0x21
			public bool status; // 0x22
			public bool xfbml; // 0x23
			public string authResponse; // 0x28
			public bool frictionlessRequests; // 0x30
			public string javascriptSDKLocale; // 0x38
			public HideUnityDelegate onHideUnity; // 0x40
	
			// Constructors
			public <>c__DisplayClass35_0(); // 0x006BA2A0-0x006BA2A8
	
			// Methods
			internal void <Init>b__0(); // 0x006BB3B8-0x006BB534
			internal void <Init>b__1(); // 0x006BB534-0x006BB754
			internal void <Init>b__2(); // 0x006BB754-0x006BB92C
			internal void <Init>b__3(); // 0x006BBA1C-0x006BBB74
			internal void <Init>b__4(); // 0x006BBC9C-0x006BBDF4
		}
	
		// Constructors
		public FB(); // 0x006BB338-0x006BB340
		static FB(); // 0x006BB340-0x006BB3B8
	
		// Methods
		public static void Init(InitDelegate onInitComplete = null, HideUnityDelegate onHideUnity = null, string authResponse = null); // 0x006B9C50-0x006B9D90
		public static void Init(string appId, string clientToken = null, bool cookie = true /* Metadata: 0x0021B959 */, bool logging = true /* Metadata: 0x0021B95A */, bool status = true /* Metadata: 0x0021B95B */, bool xfbml = false /* Metadata: 0x0021B95C */, bool frictionlessRequests = true /* Metadata: 0x0021B95D */, string authResponse = null, string javascriptSDKLocale = "en_US" /* Metadata: 0x0021B95E */, HideUnityDelegate onHideUnity = null, InitDelegate onInitComplete = null); // 0x006B9D90-0x006BA2A0
		public static void LogInWithPublishPermissions(IEnumerable<string> permissions = null, FacebookDelegate<ILoginResult> callback = null); // 0x006BA2B8-0x006BA3A4
		public static void LogInWithReadPermissions(IEnumerable<string> permissions = null, FacebookDelegate<ILoginResult> callback = null); // 0x006BA3A4-0x006BA490
		public static void LogOut(); // 0x006BA490-0x006BA564
		public static void AppRequest(string message, OGActionType actionType, string objectId, IEnumerable<string> to, string data = "" /* Metadata: 0x0021B967 */, string title = "" /* Metadata: 0x0021B96B */, FacebookDelegate<IAppRequestResult> callback = null); // 0x006BA564-0x006BA6C0
		public static void AppRequest(string message, OGActionType actionType, string objectId, IEnumerable<object> filters = null, IEnumerable<string> excludeIds = null, int? maxRecipients = default, string data = "" /* Metadata: 0x0021B96F */, string title = "" /* Metadata: 0x0021B973 */, FacebookDelegate<IAppRequestResult> callback = null); // 0x006BA6C0-0x006BA82C
		public static void AppRequest(string message, IEnumerable<string> to = null, IEnumerable<object> filters = null, IEnumerable<string> excludeIds = null, int? maxRecipients = default, string data = "" /* Metadata: 0x0021B977 */, string title = "" /* Metadata: 0x0021B97B */, FacebookDelegate<IAppRequestResult> callback = null); // 0x006BA82C-0x006BA970
		public static void ShareLink(Uri contentURL = null, string contentTitle = "" /* Metadata: 0x0021B97F */, string contentDescription = "" /* Metadata: 0x0021B983 */, Uri photoURL = null, FacebookDelegate<IShareResult> callback = null); // 0x006BA970-0x006BAA7C
		public static void FeedShare(string toId = "" /* Metadata: 0x0021B987 */, Uri link = null, string linkName = "" /* Metadata: 0x0021B98B */, string linkCaption = "" /* Metadata: 0x0021B98F */, string linkDescription = "" /* Metadata: 0x0021B993 */, Uri picture = null, string mediaSource = "" /* Metadata: 0x0021B997 */, FacebookDelegate<IShareResult> callback = null); // 0x006BAA7C-0x006BABBC
		public static void API(string query, HttpMethod method, FacebookDelegate<IGraphResult> callback = null, IDictionary<string, string> formData = null); // 0x006AF5A4-0x006AF708
		public static void API(string query, HttpMethod method, FacebookDelegate<IGraphResult> callback, WWWForm formData); // 0x006BABBC-0x006BAD20
		public static void ActivateApp(); // 0x006BAD20-0x006BAE04
		public static void GetAppLink(FacebookDelegate<IAppLinkResult> callback); // 0x006BAE04-0x006BAEF0
		public static void ClearAppLink(); // 0x006BAEF0-0x006BAEF4
		public static void LogAppEvent(string logEvent, float? valueToSum = default, Dictionary<string, object> parameters = null); // 0x006B2FD4-0x006B40C8
		public static void LogPurchase(decimal logPurchase, string currency = null, Dictionary<string, object> parameters = null); // 0x006BAEF4-0x006BAF9C
		public static void LogPurchase(float logPurchase, string currency = null, Dictionary<string, object> parameters = null); // 0x006BAF9C-0x006BB0BC
		private static void LogVersion(); // 0x006BB0BC-0x006BB25C
	}

	internal abstract class FacebookBase : IFacebookImplementation // TypeDefIndex: 2954
	{
		// Fields
		private InitDelegate onInitCompleteDelegate; // 0x10
		[CompilerGenerated] // 0x003D9EE4-0x003D9EF4
		private bool <Initialized>k__BackingField; // 0x18
		[CompilerGenerated] // 0x003D9EF4-0x003D9F04
		private CallbackManager <CallbackManager>k__BackingField; // 0x20
	
		// Properties
		public abstract bool LimitEventUsage { get; set; }
		public abstract string SDKName { get; }
		public abstract string SDKVersion { get; }
		public virtual string SDKUserAgent { get; } // 0x006AC194-0x006AC1E0 
		public bool LoggedIn { get; } // 0x006BDAD4-0x006BDB94 
		public bool Initialized { [CompilerGenerated] /* 0x003DA364-0x003DA374 */ get; [CompilerGenerated] /* 0x003DA374-0x003DA384 */ private set; } // 0x006BDB94-0x006BDB9C 0x006BDB9C-0x006BDBA8
		protected CallbackManager CallbackManager { [CompilerGenerated] /* 0x003DA384-0x003DA394 */ get; [CompilerGenerated] /* 0x003DA394-0x003DA3A4 */ private set; } // 0x006ACB54-0x006ACB5C 0x006BDACC-0x006BDAD4
	
		// Nested types
		[Serializable]
		[CompilerGenerated] // 0x003D9DB4-0x003D9DC4
		private sealed class <>c // TypeDefIndex: 2955
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static Func<string, bool> <>9__41_0; // 0x08
	
			// Constructors
			static <>c(); // 0x006BEB44-0x006BEBA8
			public <>c(); // 0x006BEBA8-0x006BEBB0
	
			// Methods
			internal bool <ValidateAppRequestArgs>b__41_0(string toWhom); // 0x006BEBB0-0x006BEBBC
		}
	
		// Constructors
		protected FacebookBase(CallbackManager callbackManager); // 0x006ABC4C-0x006ABC78
	
		// Methods
		public virtual void Init(InitDelegate onInitComplete); // 0x006AC7A8-0x006AC7B0
		public abstract void LogInWithPublishPermissions(IEnumerable<string> scope, FacebookDelegate<ILoginResult> callback);
		public abstract void LogInWithReadPermissions(IEnumerable<string> scope, FacebookDelegate<ILoginResult> callback);
		public virtual void LogOut(); // 0x006ACDC4-0x006ACE14
		public abstract void AppRequest(string message, OGActionType? actionType, string objectId, IEnumerable<string> to, IEnumerable<object> filters, IEnumerable<string> excludeIds, int? maxRecipients, string data, string title, FacebookDelegate<IAppRequestResult> callback);
		public abstract void ShareLink(Uri contentURL, string contentTitle, string contentDescription, Uri photoURL, FacebookDelegate<IShareResult> callback);
		public abstract void FeedShare(string toId, Uri link, string linkName, string linkCaption, string linkDescription, Uri picture, string mediaSource, FacebookDelegate<IShareResult> callback);
		public void API(string query, HttpMethod method, IDictionary<string, string> formData, FacebookDelegate<IGraphResult> callback); // 0x006BDBA8-0x006BDE98
		public void API(string query, HttpMethod method, WWWForm formData, FacebookDelegate<IGraphResult> callback); // 0x006BE35C-0x006BE4EC
		public abstract void ActivateApp(string appId = null);
		public abstract void GetAppLink(FacebookDelegate<IAppLinkResult> callback);
		public abstract void AppEventsLogEvent(string logEvent, float? valueToSum, Dictionary<string, object> parameters);
		public abstract void AppEventsLogPurchase(float logPurchase, string currency, Dictionary<string, object> parameters);
		public virtual void OnInitComplete(ResultContainer resultContainer); // 0x006BE4EC-0x006BE658
		public abstract void OnLoginComplete(ResultContainer resultContainer);
		public void OnLogoutComplete(ResultContainer resultContainer); // 0x006BE658-0x006BE6A8
		public abstract void OnGetAppLinkComplete(ResultContainer resultContainer);
		public abstract void OnAppRequestsComplete(ResultContainer resultContainer);
		public abstract void OnShareLinkComplete(ResultContainer resultContainer);
		protected void ValidateAppRequestArgs(string message, OGActionType? actionType, string objectId, IEnumerable<string> to = null, IEnumerable<object> filters = null, IEnumerable<string> excludeIds = null, int? maxRecipients = default, string data = "" /* Metadata: 0x0021B9B8 */, string title = "" /* Metadata: 0x0021B9BC */, FacebookDelegate<IAppRequestResult> callback = null); // 0x006AD1BC-0x006AD444
		protected virtual void OnAuthResponse(LoginResult result); // 0x006BE6A8-0x006BE734
		private IDictionary<string, string> CopyByValue(IDictionary<string, string> data); // 0x006BDE98-0x006BE288
		private Uri GetGraphUrl(string query); // 0x006BE288-0x006BE35C
		[CompilerGenerated] // 0x003DA3A4-0x003DA3B4
		private void <OnInitComplete>b__35_0(ILoginResult result); // 0x006BE734-0x006BE744
	}

	public delegate void InitDelegate(); // TypeDefIndex: 2956; 0x006BE744-0x006BEB44

	public delegate void FacebookDelegate<T>(T result); // TypeDefIndex: 2957; 0x00000000-0x00000000

	public delegate void HideUnityDelegate(bool isUnityShown); // TypeDefIndex: 2958; 0x006AF154-0x006AF594

	internal abstract class FacebookGameObject : MonoBehaviour, IFacebookCallbackHandler // TypeDefIndex: 2959
	{
		// Fields
		[CompilerGenerated] // 0x003D9F04-0x003D9F14
		private IFacebookImplementation <Facebook>k__BackingField; // 0x18
	
		// Properties
		public IFacebookImplementation Facebook { [CompilerGenerated] /* 0x003DA3B4-0x003DA3C4 */ get; [CompilerGenerated] /* 0x003DA3C4-0x003DA3D4 */ set; } // 0x006B01F0-0x006B01F8 0x006B0820-0x006B0828
	
		// Constructors
		protected FacebookGameObject(); // 0x006B0794-0x006B079C
	
		// Methods
		public void Awake(); // 0x006BEBBC-0x006BEC6C
		public void OnInitComplete(string message); // 0x006BEC6C-0x006BED4C
		public void OnLoginComplete(string message); // 0x006BED4C-0x006BEE30
		public void OnLogoutComplete(string message); // 0x006BEE30-0x006BEF14
		public void OnGetAppLinkComplete(string message); // 0x006BEF14-0x006BEFF8
		public void OnAppRequestsComplete(string message); // 0x006BEFF8-0x006BF0DC
		public void OnShareLinkComplete(string message); // 0x006BF0DC-0x006BF1C0
		protected virtual void OnAwake(); // 0x006BF1C0-0x006BF1C4
	}

	public class FacebookSdkVersion // TypeDefIndex: 2960
	{
		// Properties
		public static string Build { get; } // 0x006AC1E0-0x006AC228 
	}

	internal enum FacebookUnityPlatform // TypeDefIndex: 2961
	{
		Unknown = 0,
		Android = 1,
		IOS = 2,
		WebGL = 3,
		Gameroom = 4
	}

	internal interface IFacebook // TypeDefIndex: 2962
	{
		// Properties
		bool LoggedIn { get; }
		bool LimitEventUsage { get; set; }
		string SDKUserAgent { get; }
		bool Initialized { get; }
	
		// Methods
		void LogInWithPublishPermissions(IEnumerable<string> permissions, FacebookDelegate<ILoginResult> callback);
		void LogInWithReadPermissions(IEnumerable<string> permissions, FacebookDelegate<ILoginResult> callback);
		void LogOut();
		void AppRequest(string message, OGActionType? actionType, string objectId, IEnumerable<string> to, IEnumerable<object> filters, IEnumerable<string> excludeIds, int? maxRecipients, string data, string title, FacebookDelegate<IAppRequestResult> callback);
		void ShareLink(Uri contentURL, string contentTitle, string contentDescription, Uri photoURL, FacebookDelegate<IShareResult> callback);
		void FeedShare(string toId, Uri link, string linkName, string linkCaption, string linkDescription, Uri picture, string mediaSource, FacebookDelegate<IShareResult> callback);
		void API(string query, HttpMethod method, IDictionary<string, string> formData, FacebookDelegate<IGraphResult> callback);
		void API(string query, HttpMethod method, WWWForm formData, FacebookDelegate<IGraphResult> callback);
		void ActivateApp(string appId = null);
		void GetAppLink(FacebookDelegate<IAppLinkResult> callback);
		void AppEventsLogEvent(string logEvent, float? valueToSum, Dictionary<string, object> parameters);
		void AppEventsLogPurchase(float logPurchase, string currency, Dictionary<string, object> parameters);
	}

	internal interface IFacebookCallbackHandler // TypeDefIndex: 2963
	{
		// Methods
		void OnInitComplete(string message);
		void OnLoginComplete(string message);
		void OnAppRequestsComplete(string message);
		void OnShareLinkComplete(string message);
	}

	internal interface IFacebookImplementation : IFacebook, IFacebookResultHandler // TypeDefIndex: 2964
	{
	}

	internal interface IFacebookResultHandler // TypeDefIndex: 2965
	{
		// Methods
		void OnInitComplete(ResultContainer resultContainer);
		void OnLoginComplete(ResultContainer resultContainer);
		void OnLogoutComplete(ResultContainer resultContainer);
		void OnGetAppLinkComplete(ResultContainer resultContainer);
		void OnAppRequestsComplete(ResultContainer resultContainer);
		void OnShareLinkComplete(ResultContainer resultContainer);
	}

	internal interface IPayFacebook // TypeDefIndex: 2966
	{
		// Methods
		void Pay(string product, string action, int quantity, int? quantityMin, int? quantityMax, string requestId, string pricepointId, string testCurrency, FacebookDelegate<IPayResult> callback);
	}

	internal class MethodArguments // TypeDefIndex: 2967
	{
		// Fields
		private IDictionary<string, object> arguments; // 0x10
	
		// Constructors
		public MethodArguments(); // 0x006AC7B0-0x006AC81C
		public MethodArguments(MethodArguments methodArgs); // 0x006C1F00-0x006C1F34
		private MethodArguments(IDictionary<string, object> arguments); // 0x006C1E7C-0x006C1F00
	
		// Methods
		public void AddPrimative<T>(string argumentName, T value)
			where T : struct;
		public void AddNullablePrimitive<T>(string argumentName, T? nullable)
			where T : struct;
		public void AddString(string argumentName, string value); // 0x006AC81C-0x006AC90C
		public void AddCommaSeparatedList(string argumentName, IEnumerable<string> value); // 0x006AD444-0x006AD534
		public void AddDictionary(string argumentName, IDictionary<string, object> dict); // 0x006C1F34-0x006C2024
		public void AddList<T>(string argumentName, IEnumerable<T> list);
		public void AddUri(string argumentName, Uri uri); // 0x006AD7D8-0x006AD930
		public string ToJsonString(); // 0x006AC974-0x006AC9DC
		private static Dictionary<string, string> ToStringDict(IDictionary<string, object> dict); // 0x006C2024-0x006C2368
	}

	internal abstract class MethodCall<T> // TypeDefIndex: 2968
		where T : IResult
	{
		// Fields
		[CompilerGenerated] // 0x003D9F14-0x003D9F24
		private string <MethodName>k__BackingField;
		[CompilerGenerated] // 0x003D9F24-0x003D9F34
		private FacebookDelegate<T> <Callback>k__BackingField;
		[CompilerGenerated] // 0x003D9F34-0x003D9F44
		private FacebookBase <FacebookImpl>k__BackingField;
		[CompilerGenerated] // 0x003D9F44-0x003D9F54
		private MethodArguments <Parameters>k__BackingField;
	
		// Properties
		public string MethodName { [CompilerGenerated] /* 0x003DA3D4-0x003DA3E4 */ get; [CompilerGenerated] /* 0x003DA3E4-0x003DA3F4 */ private set; }
		public FacebookDelegate<T> Callback { [CompilerGenerated] /* 0x003DA3F4-0x003DA404 */ protected get; [CompilerGenerated] /* 0x003DA404-0x003DA414 */ set; }
		protected FacebookBase FacebookImpl { [CompilerGenerated] /* 0x003DA414-0x003DA424 */ set; }
		protected MethodArguments Parameters { [CompilerGenerated] /* 0x003DA424-0x003DA434 */ set; }
	
		// Constructors
		public MethodCall(FacebookBase facebookImpl, string methodName);
	
		// Methods
		public abstract void Call(MethodArguments args = null);
	}

	public enum ShareDialogMode // TypeDefIndex: 2969
	{
		AUTOMATIC = 0,
		NATIVE = 1,
		WEB = 2,
		FEED = 3
	}

	public enum OGActionType // TypeDefIndex: 2970
	{
		SEND = 0,
		ASKFOR = 1,
		TURN = 2
	}

	internal class AccessTokenRefreshResult : ResultBase, IAccessTokenRefreshResult // TypeDefIndex: 2971
	{
		// Fields
		[CompilerGenerated] // 0x003D9F54-0x003D9F64
		private AccessToken <AccessToken>k__BackingField; // 0x48
	
		// Properties
		public AccessToken AccessToken { [CompilerGenerated] /* 0x003DA434-0x003DA444 */ get; [CompilerGenerated] /* 0x003DA444-0x003DA454 */ private set; } // 0x006A99E8-0x006A99F0 0x006A99E0-0x006A99E8
	
		// Constructors
		public AccessTokenRefreshResult(ResultContainer resultContainer); // 0x006A96CC-0x006A9814
	
		// Methods
		public override string ToString(); // 0x006A99F0-0x006A9AE0
	}

	internal class AppLinkResult : ResultBase, IAppLinkResult // TypeDefIndex: 2972
	{
		// Fields
		[CompilerGenerated] // 0x003D9F64-0x003D9F74
		private string <Url>k__BackingField; // 0x48
		[CompilerGenerated] // 0x003D9F74-0x003D9F84
		private string <TargetUrl>k__BackingField; // 0x50
		[CompilerGenerated] // 0x003D9F84-0x003D9F94
		private string <Ref>k__BackingField; // 0x58
		[CompilerGenerated] // 0x003D9F94-0x003D9FA4
		private IDictionary<string, object> <Extras>k__BackingField; // 0x60
	
		// Properties
		public string Url { [CompilerGenerated] /* 0x003DA454-0x003DA464 */ get; [CompilerGenerated] /* 0x003DA464-0x003DA474 */ private set; } // 0x006A9E04-0x006A9E0C 0x006A9DE4-0x006A9DEC
		public string TargetUrl { [CompilerGenerated] /* 0x003DA474-0x003DA484 */ get; [CompilerGenerated] /* 0x003DA484-0x003DA494 */ private set; } // 0x006A9E0C-0x006A9E14 0x006A9DEC-0x006A9DF4
		public string Ref { [CompilerGenerated] /* 0x003DA494-0x003DA4A4 */ get; [CompilerGenerated] /* 0x003DA4A4-0x003DA4B4 */ private set; } // 0x006A9E14-0x006A9E1C 0x006A9DF4-0x006A9DFC
		public IDictionary<string, object> Extras { [CompilerGenerated] /* 0x003DA4B4-0x003DA4C4 */ get; [CompilerGenerated] /* 0x003DA4C4-0x003DA4D4 */ private set; } // 0x006A9E1C-0x006A9E24 0x006A9DFC-0x006A9E04
	
		// Constructors
		public AppLinkResult(ResultContainer resultContainer); // 0x006A9C84-0x006A9DE4
	
		// Methods
		public override string ToString(); // 0x006A9E24-0x006A9FA0
	}

	internal class AppRequestResult : ResultBase, IAppRequestResult // TypeDefIndex: 2973
	{
		// Fields
		[CompilerGenerated] // 0x003D9FA4-0x003D9FB4
		private string <RequestID>k__BackingField; // 0x48
		[CompilerGenerated] // 0x003D9FB4-0x003D9FC4
		private IEnumerable<string> <To>k__BackingField; // 0x50
	
		// Properties
		public string RequestID { [CompilerGenerated] /* 0x003DA4D4-0x003DA4E4 */ get; [CompilerGenerated] /* 0x003DA4E4-0x003DA4F4 */ private set; } // 0x006AA430-0x006AA438 0x006AA420-0x006AA428
		public IEnumerable<string> To { [CompilerGenerated] /* 0x003DA4F4-0x003DA504 */ get; [CompilerGenerated] /* 0x003DA504-0x003DA514 */ private set; } // 0x006AA438-0x006AA440 0x006AA428-0x006AA430
	
		// Constructors
		public AppRequestResult(ResultContainer resultContainer); // 0x006AA004-0x006AA420
	
		// Methods
		public override string ToString(); // 0x006AA440-0x006AA578
	}

	internal class GraphResult : ResultBase, IGraphResult // TypeDefIndex: 2974
	{
		// Fields
		[CompilerGenerated] // 0x003D9FC4-0x003D9FD4
		private IList<object> <ResultList>k__BackingField; // 0x48
		[CompilerGenerated] // 0x003D9FD4-0x003D9FE4
		private Texture2D <Texture>k__BackingField; // 0x50
	
		// Properties
		private IList<object> ResultList { [CompilerGenerated] /* 0x003DA514-0x003DA524 */ set; } // 0x006C1B68-0x006C1B70
		public Texture2D Texture { [CompilerGenerated] /* 0x003DA524-0x003DA534 */ get; [CompilerGenerated] /* 0x003DA534-0x003DA544 */ private set; } // 0x006C1B70-0x006C1B88 0x006C1B60-0x006C1B68
	
		// Constructors
		internal GraphResult(WWW result); // 0x006AB3D0-0x006AB4EC
	
		// Methods
		private void Init(string rawResult); // 0x006C1A60-0x006C1B60
	}

	public interface IAccessTokenRefreshResult : IResult // TypeDefIndex: 2975
	{
	}

	public interface IAppLinkResult : IResult // TypeDefIndex: 2976
	{
	}

	public interface IAppRequestResult : IResult // TypeDefIndex: 2977
	{
	}

	public interface IGraphResult : IResult // TypeDefIndex: 2978
	{
		// Properties
		Texture2D Texture { get; }
	}

	public interface IGroupCreateResult : IResult // TypeDefIndex: 2979
	{
	}

	public interface IGroupJoinResult : IResult // TypeDefIndex: 2980
	{
	}

	internal interface IInternalResult : IResult // TypeDefIndex: 2981
	{
		// Properties
		string CallbackId { get; }
	}

	public interface ILoginResult : IResult // TypeDefIndex: 2982
	{
	}

	public interface IPayResult : IResult // TypeDefIndex: 2983
	{
	}

	public interface IResult // TypeDefIndex: 2984
	{
		// Properties
		string Error { get; }
		IDictionary<string, object> ResultDictionary { get; }
		string RawResult { get; }
		bool Cancelled { get; }
	}

	public interface IShareResult : IResult // TypeDefIndex: 2985
	{
	}

	internal class LoginResult : ResultBase, ILoginResult // TypeDefIndex: 2986
	{
		// Fields
		public static readonly string UserIdKey; // 0x00
		public static readonly string ExpirationTimestampKey; // 0x08
		public static readonly string PermissionsKey; // 0x10
		public static readonly string AccessTokenKey; // 0x18
		[CompilerGenerated] // 0x003D9FE4-0x003D9FF4
		private AccessToken <AccessToken>k__BackingField; // 0x48
	
		// Properties
		public AccessToken AccessToken { [CompilerGenerated] /* 0x003DA544-0x003DA554 */ get; [CompilerGenerated] /* 0x003DA554-0x003DA564 */ private set; } // 0x006AF9E4-0x006AF9EC 0x006C1C90-0x006C1C98
	
		// Constructors
		internal LoginResult(ResultContainer resultContainer); // 0x006AF784-0x006AF8CC
		static LoginResult(); // 0x006C1D88-0x006C1E7C
	
		// Methods
		public override string ToString(); // 0x006C1C98-0x006C1D88
	}

	internal class PayResult : ResultBase, IPayResult // TypeDefIndex: 2987
	{
		// Properties
		public long ErrorCode { get; } // 0x006C5DC0-0x006C5E24 
	
		// Constructors
		internal PayResult(ResultContainer resultContainer); // 0x006AEE98-0x006AEF5C
	
		// Methods
		public override string ToString(); // 0x006C5E24-0x006C5F34
	}

	internal abstract class ResultBase : IInternalResult // TypeDefIndex: 2988
	{
		// Fields
		[CompilerGenerated] // 0x003D9FF4-0x003DA004
		private string <Error>k__BackingField; // 0x10
		[CompilerGenerated] // 0x003DA004-0x003DA014
		private IDictionary<string, object> <ResultDictionary>k__BackingField; // 0x18
		[CompilerGenerated] // 0x003DA014-0x003DA024
		private string <RawResult>k__BackingField; // 0x20
		[CompilerGenerated] // 0x003DA024-0x003DA034
		private bool <Cancelled>k__BackingField; // 0x28
		[CompilerGenerated] // 0x003DA034-0x003DA044
		private string <CallbackId>k__BackingField; // 0x30
		[CompilerGenerated] // 0x003DA044-0x003DA054
		private long? <CanvasErrorCode>k__BackingField; // 0x38
	
		// Properties
		public virtual string Error { [CompilerGenerated] /* 0x003DA564-0x003DA574 */ get; [CompilerGenerated] /* 0x003DA574-0x003DA584 */ protected set; } // 0x006C64EC-0x006C64F4 0x006C64F4-0x006C64FC
		public virtual IDictionary<string, object> ResultDictionary { [CompilerGenerated] /* 0x003DA584-0x003DA594 */ get; [CompilerGenerated] /* 0x003DA594-0x003DA5A4 */ protected set; } // 0x006C64FC-0x006C6504 0x006C6504-0x006C650C
		public virtual string RawResult { [CompilerGenerated] /* 0x003DA5A4-0x003DA5B4 */ get; [CompilerGenerated] /* 0x003DA5B4-0x003DA5C4 */ protected set; } // 0x006C650C-0x006C6514 0x006C6514-0x006C651C
		public virtual bool Cancelled { [CompilerGenerated] /* 0x003DA5C4-0x003DA5D4 */ get; [CompilerGenerated] /* 0x003DA5D4-0x003DA5E4 */ protected set; } // 0x006C651C-0x006C6524 0x006C6524-0x006C6530
		public virtual string CallbackId { [CompilerGenerated] /* 0x003DA5E4-0x003DA5F4 */ get; [CompilerGenerated] /* 0x003DA5F4-0x003DA604 */ protected set; } // 0x006C6530-0x006C6538 0x006C6538-0x006C6540
		protected long? CanvasErrorCode { [CompilerGenerated] /* 0x003DA604-0x003DA614 */ get; [CompilerGenerated] /* 0x003DA614-0x003DA624 */ private set; } // 0x006C5DB4-0x006C5DC0 0x006C6540-0x006C6548
	
		// Constructors
		internal ResultBase(ResultContainer result); // 0x006A9814-0x006A98C4
		internal ResultBase(ResultContainer result, string error, bool cancelled); // 0x006C1A14-0x006C1A60
	
		// Methods
		public override string ToString(); // 0x006A9AE0-0x006A9C84
		protected void Init(ResultContainer result, string error, bool cancelled, string callbackId); // 0x006C631C-0x006C64EC
		private static string GetErrorValue(IDictionary<string, object> result); // 0x006C5F34-0x006C5FBC
		private static bool GetCancelledValue(IDictionary<string, object> result); // 0x006C5FBC-0x006C6294
		private static string GetCallbackId(IDictionary<string, object> result); // 0x006C6294-0x006C631C
	}

	internal class ResultContainer // TypeDefIndex: 2989
	{
		// Fields
		private const string CanvasResponseKey = "response"; // Metadata: 0x0021B9F0
		[CompilerGenerated] // 0x003DA054-0x003DA064
		private string <RawResult>k__BackingField; // 0x10
		[CompilerGenerated] // 0x003DA064-0x003DA074
		private IDictionary<string, object> <ResultDictionary>k__BackingField; // 0x18
	
		// Properties
		public string RawResult { [CompilerGenerated] /* 0x003DA624-0x003DA634 */ get; [CompilerGenerated] /* 0x003DA634-0x003DA644 */ private set; } // 0x006C6548-0x006C6550 0x006C6550-0x006C6558
		public IDictionary<string, object> ResultDictionary { [CompilerGenerated] /* 0x003DA644-0x003DA654 */ get; [CompilerGenerated] /* 0x003DA654-0x003DA664 */ set; } // 0x006AF59C-0x006AF5A4 0x006C6558-0x006C6560
	
		// Constructors
		public ResultContainer(IDictionary<string, object> dictionary); // 0x006AE0E4-0x006AE130
		public ResultContainer(string result); // 0x006B02E4-0x006B040C
	
		// Methods
		private IDictionary<string, object> GetWebFormattedResponseDictionary(IDictionary<string, object> resultDictionary); // 0x006C6560-0x006C66F4
	}

	internal class ShareResult : ResultBase, IShareResult // TypeDefIndex: 2990
	{
		// Fields
		[CompilerGenerated] // 0x003DA074-0x003DA084
		private string <PostId>k__BackingField; // 0x48
	
		// Properties
		public string PostId { [CompilerGenerated] /* 0x003DA664-0x003DA674 */ get; [CompilerGenerated] /* 0x003DA674-0x003DA684 */ private set; } // 0x006C6758-0x006C6760 0x006C6750-0x006C6758
		internal static string PostIDKey { get; } // 0x006C66F4-0x006C6750 
	
		// Constructors
		internal ShareResult(ResultContainer resultContainer); // 0x006AF05C-0x006AF138
	
		// Methods
		public override string ToString(); // 0x006C6760-0x006C6848
	}

	internal class AsyncRequestString : MonoBehaviour // TypeDefIndex: 2991
	{
		// Fields
		private Uri url; // 0x18
		private HttpMethod method; // 0x20
		private IDictionary<string, string> formData; // 0x28
		private WWWForm query; // 0x30
		private FacebookDelegate<IGraphResult> callback; // 0x38
	
		// Nested types
		[CompilerGenerated] // 0x003D9DC4-0x003D9DD4
		private sealed class <Start>d__9 : IEnumerator<object> // TypeDefIndex: 2992
		{
			// Fields
			private int <>1__state; // 0x10
			private object <>2__current; // 0x18
			public AsyncRequestString <>4__this; // 0x20
			private WWW <www>5__2; // 0x28
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003DA6A4-0x003DA6B4 */ get; } // 0x006AB4EC-0x006AB4F4 
			object IEnumerator.Current { [DebuggerHidden] /* 0x003DA6C4-0x003DA6D4 */ get; } // 0x006AB55C-0x006AB564 
	
			// Constructors
			[DebuggerHidden] // 0x003DA684-0x003DA694
			public <Start>d__9(int <>1__state); // 0x006AA7BC-0x006AA7E8
	
			// Methods
			[DebuggerHidden] // 0x003DA694-0x003DA6A4
			void IDisposable.Dispose(); // 0x006AA7F0-0x006AA7F4
			private bool MoveNext(); // 0x006AA7F4-0x006AB100
			[DebuggerHidden] // 0x003DA6B4-0x003DA6C4
			void IEnumerator.Reset(); // 0x006AB4F4-0x006AB55C
		}
	
		// Constructors
		public AsyncRequestString(); // 0x006AA7E8-0x006AA7F0
	
		// Methods
		internal static void Post(Uri url, Dictionary<string, string> formData = null, FacebookDelegate<IGraphResult> callback = null); // 0x006AA578-0x006AA590
		internal static void Get(Uri url, Dictionary<string, string> formData = null, FacebookDelegate<IGraphResult> callback = null); // 0x006AA64C-0x006AA664
		internal static void Request(Uri url, HttpMethod method, WWWForm query = null, FacebookDelegate<IGraphResult> callback = null); // 0x006AA664-0x006AA720
		internal static void Request(Uri url, HttpMethod method, IDictionary<string, string> formData = null, FacebookDelegate<IGraphResult> callback = null); // 0x006AA590-0x006AA64C
		internal IEnumerator Start(); // 0x006AA748-0x006AA7BC
		internal AsyncRequestString SetUrl(Uri url); // 0x006AA720-0x006AA728
		internal AsyncRequestString SetMethod(HttpMethod method); // 0x006AA728-0x006AA730
		internal AsyncRequestString SetFormData(IDictionary<string, string> formData); // 0x006AA740-0x006AA748
		internal AsyncRequestString SetQuery(WWWForm query); // 0x006AA730-0x006AA738
		internal AsyncRequestString SetCallback(FacebookDelegate<IGraphResult> callback); // 0x006AA738-0x006AA740
	}

	internal static class FacebookLogger // TypeDefIndex: 2993
	{
		// Fields
		[CompilerGenerated] // 0x003DA084-0x003DA094
		private static IFacebookLogger <Instance>k__BackingField; // 0x00
	
		// Properties
		internal static IFacebookLogger Instance { [CompilerGenerated] /* 0x003DA6D4-0x003DA6E4 */ private get; [CompilerGenerated] /* 0x003DA6E4-0x003DA6F4 */ set; } // 0x006BF294-0x006BF2FC 0x006BF228-0x006BF294
	
		// Nested types
		private class DebugLogger : IFacebookLogger // TypeDefIndex: 2994
		{
			// Constructors
			public DebugLogger(); // 0x006BF220-0x006BF228
	
			// Methods
			public void Log(string msg); // 0x006BF384-0x006BF41C
			public void Info(string msg); // 0x006BF41C-0x006BF484
			public void Warn(string msg); // 0x006BF484-0x006BF4EC
		}
	
		// Constructors
		static FacebookLogger(); // 0x006BF1C4-0x006BF220
	
		// Methods
		public static void Log(string msg); // 0x006B40C8-0x006B41A0
		public static void Info(string msg); // 0x006BB25C-0x006BB338
		public static void Warn(string msg); // 0x006AC0B8-0x006AC194
		public static void Warn(string format, params /* 0x003DAB44-0x003DAB54 */ string[] args); // 0x006BF2FC-0x006BF384
	}

	public enum HttpMethod // TypeDefIndex: 2995
	{
		GET = 0,
		POST = 1,
		DELETE = 2
	}

	internal interface IFacebookLogger // TypeDefIndex: 2996
	{
		// Methods
		void Log(string msg);
		void Info(string msg);
		void Warn(string msg);
	}

	internal static class Utilities // TypeDefIndex: 2997
	{
		// Nested types
		public delegate void Callback<T>(T obj); // TypeDefIndex: 2998; 0x00000000-0x00000000
	
		[Serializable]
		[CompilerGenerated] // 0x003D9DE4-0x003D9DF4
		private sealed class <>c // TypeDefIndex: 2999
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static Func<object, string> <>9__18_0; // 0x08
	
			// Constructors
			static <>c(); // 0x006C6E00-0x006C6E64
			public <>c(); // 0x006C6E64-0x006C6E6C
	
			// Methods
			internal string <ParsePermissionFromResult>b__18_0(object permission); // 0x006C6E6C-0x006C6EA0
		}
	
		// Methods
		public static string GetUserAgent(string productName, string productVersion); // 0x006AC228-0x006AC370
		public static AccessToken ParseAccessTokenFromResult(IDictionary<string, object> resultDictionary); // 0x006A98C4-0x006A99E0
		public static string FormatToString(string baseString, string className, IDictionary<string, string> propertiesAndValues); // 0x006A90CC-0x006A9474
		private static DateTime ParseExpirationDateFromResult(IDictionary<string, object> resultDictionary); // 0x006C6848-0x006C6A08
		private static DateTime? ParseLastRefreshFromResult(IDictionary<string, object> resultDictionary); // 0x006C6CE0-0x006C6D9C
		private static ICollection<string> ParsePermissionFromResult(IDictionary<string, object> resultDictionary); // 0x006C6A08-0x006C6CE0
		private static DateTime FromTimestamp(int timestamp); // 0x006C6D9C-0x006C6E00
	
		// Extension methods
		public static bool TryGetValue<T>(this IDictionary<string, object> dictionary, string key, out T value);
		public static long TotalSeconds(this DateTime dateTime); // 0x006A8F1C-0x006A8FD4
		public static T GetValueOrDefault<T>(this IDictionary<string, object> dictionary, string key, bool logWarning = true /* Metadata: 0x0021BA08 */);
		public static string ToCommaSeparateList(this IEnumerable<string> list); // 0x006A8FD4-0x006A9064
		public static string AbsoluteUrlOrEmptyString(this Uri uri); // 0x006C4900-0x006C49A8
		public static string ToJson(this IDictionary<string, object> dictionary); // 0x006A9FA0-0x006AA004
		public static void AddAllKVPFrom<T1, T2>(this IDictionary<T1, T2> dest, IDictionary<T1, T2> source);
		public static string ToStringNullOk(this object obj); // 0x006A9064-0x006A90CC
	}

	internal static class FBUnityUtility // TypeDefIndex: 3000
	{
		// Fields
		private static IAsyncRequestStringWrapper asyncRequestStringWrapper; // 0x00
	
		// Properties
		public static IAsyncRequestStringWrapper AsyncRequestStringWrapper { get; } // 0x006BDA44-0x006BDACC 
	}

	internal class AsyncRequestStringWrapper : IAsyncRequestStringWrapper // TypeDefIndex: 3001
	{
		// Constructors
		public AsyncRequestStringWrapper(); // 0x006AB58C-0x006AB594
	
		// Methods
		public void Request(Uri url, HttpMethod method, WWWForm query = null, FacebookDelegate<IGraphResult> callback = null); // 0x006AB564-0x006AB578
		public void Request(Uri url, HttpMethod method, IDictionary<string, string> formData = null, FacebookDelegate<IGraphResult> callback = null); // 0x006AB578-0x006AB58C
	}

	internal interface IAsyncRequestStringWrapper // TypeDefIndex: 3002
	{
		// Methods
		void Request(Uri url, HttpMethod method, WWWForm query = null, FacebookDelegate<IGraphResult> callback = null);
		void Request(Uri url, HttpMethod method, IDictionary<string, string> formData = null, FacebookDelegate<IGraphResult> callback = null);
	}

	internal class FacebookScheduler : MonoBehaviour, IFacebookScheduler // TypeDefIndex: 3003
	{
		// Nested types
		[CompilerGenerated] // 0x003D9DF4-0x003D9E04
		private sealed class <DelayEvent>d__1 : IEnumerator<object> // TypeDefIndex: 3004
		{
			// Fields
			private int <>1__state; // 0x10
			private object <>2__current; // 0x18
			public long delay; // 0x20
			public Action action; // 0x28
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003DA794-0x003DA7A4 */ get; } // 0x006BF6A4-0x006BF6AC 
			object IEnumerator.Current { [DebuggerHidden] /* 0x003DA7B4-0x003DA7C4 */ get; } // 0x006BF714-0x006BF71C 
	
			// Constructors
			[DebuggerHidden] // 0x003DA774-0x003DA784
			public <DelayEvent>d__1(int <>1__state); // 0x006BF5B0-0x006BF5DC
	
			// Methods
			[DebuggerHidden] // 0x003DA784-0x003DA794
			void IDisposable.Dispose(); // 0x006BF5E4-0x006BF5E8
			private bool MoveNext(); // 0x006BF5E8-0x006BF6A4
			[DebuggerHidden] // 0x003DA7A4-0x003DA7B4
			void IEnumerator.Reset(); // 0x006BF6AC-0x006BF714
		}
	
		// Constructors
		public FacebookScheduler(); // 0x006BF5DC-0x006BF5E4
	
		// Methods
		public void Schedule(Action action, long delay); // 0x006BF4EC-0x006BF518
		public IEnumerator DelayEvent(Action action, long delay); // 0x006BF518-0x006BF5B0
	}

	internal interface IFacebookScheduler // TypeDefIndex: 3005
	{
	}

	public interface IHasLicenseResult : IResult // TypeDefIndex: 3006
	{
	}

	internal class CodelessIAPAutoLog // TypeDefIndex: 3007
	{
		// Methods
		internal static void handlePurchaseCompleted(object data); // 0x006B2AB4-0x006B2EA0
		internal static void addListenerToIAPButtons(object listenerObject); // 0x006B41A0-0x006B4258
		internal static void addListenerToGameObject(UnityEngine.Object gameObject, object listenerObject); // 0x006B42F0-0x006B4708
		private static Type FindTypeInAssemblies(string typeName, string nameSpace); // 0x006B4708-0x006B48C0
		private static UnityEngine.Object[] FindObjectsOfTypeByName(string typeName, string nameSpace); // 0x006B4258-0x006B42F0
		private static object GetField(object inObj, string fieldName); // 0x006B48C0-0x006B493C
		private static object GetProperty(object inObj, string propertyName); // 0x006B2F54-0x006B2FD4
	}

	public class CodelessCrawler : MonoBehaviour // TypeDefIndex: 3008
	{
		// Fields
		private static bool isGeneratingSnapshot; // 0x00
		private static Camera mainCamera; // 0x08
	
		// Nested types
		[CompilerGenerated] // 0x003D9E04-0x003D9E14
		private sealed class <GenSnapshot>d__4 : IEnumerator<object> // TypeDefIndex: 3009
		{
			// Fields
			private int <>1__state; // 0x10
			private object <>2__current; // 0x18
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003DA7E4-0x003DA7F4 */ get; } // 0x006B2A3C-0x006B2A44 
			object IEnumerator.Current { [DebuggerHidden] /* 0x003DA804-0x003DA814 */ get; } // 0x006B2AAC-0x006B2AB4 
	
			// Constructors
			[DebuggerHidden] // 0x003DA7C4-0x003DA7D4
			public <GenSnapshot>d__4(int <>1__state); // 0x006B1158-0x006B1184
	
			// Methods
			[DebuggerHidden] // 0x003DA7D4-0x003DA7E4
			void IDisposable.Dispose(); // 0x006B27C8-0x006B27CC
			private bool MoveNext(); // 0x006B27CC-0x006B2A3C
			[DebuggerHidden] // 0x003DA7F4-0x003DA804
			void IEnumerator.Reset(); // 0x006B2A44-0x006B2AAC
		}
	
		// Constructors
		public CodelessCrawler(); // 0x006B27BC-0x006B27C4
		static CodelessCrawler(); // 0x006B27C4-0x006B27C8
	
		// Methods
		public void Awake(); // 0x006B0EEC-0x006B0F68
		public void CaptureViewHierarchy(string message); // 0x006B0F68-0x006B1080
		private IEnumerator GenSnapshot(); // 0x006B10F8-0x006B1158
		private static void SendAndroid(string json); // 0x006B1184-0x006B1348
		private static void SendIos(string json); // 0x006B1348-0x006B134C
		private static string GenBase64Screenshot(); // 0x006B134C-0x006B14C4
		private static string GenViewJson(); // 0x006B14C4-0x006B19F0
		private static void GenChild(GameObject curObj, StringBuilder builder); // 0x006B19F0-0x006B252C
		private void onActiveSceneChanged(Scene arg0, Scene arg1); // 0x006B2760-0x006B27BC
		private static void updateMainCamera(); // 0x006B1080-0x006B10F8
		private static Vector2 getScreenCoordinate(Vector3 position, RenderMode renderMode); // 0x006B252C-0x006B2680
		private static string getClasstypeBitmaskButton(); // 0x006B2680-0x006B26EC
		private static string getVisibility(GameObject gameObj); // 0x006B26EC-0x006B2760
	}

	public class CodelessUIInteractEvent : MonoBehaviour // TypeDefIndex: 3010
	{
		// Fields
		[CompilerGenerated] // 0x003DA094-0x003DA0A4
		private FBSDKEventBindingManager <eventBindingManager>k__BackingField; // 0x18
	
		// Properties
		private FBSDKEventBindingManager eventBindingManager { [CompilerGenerated] /* 0x003DA814-0x003DA824 */ get; [CompilerGenerated] /* 0x003DA824-0x003DA834 */ set; } // 0x006B493C-0x006B4944 0x006B4944-0x006B494C
	
		// Constructors
		public CodelessUIInteractEvent(); // 0x006B5400-0x006B5408
	
		// Methods
		private void Awake(); // 0x006B494C-0x006B4A80
		private static void SetLoggerInitAndroid(); // 0x006B4A80-0x006B4BA4
		private static void SetLoggerInitIos(); // 0x006B4BA4-0x006B4BA8
		private void Update(); // 0x006B4BA8-0x006B5098
		public void OnReceiveMapping(string message); // 0x006B50D8-0x006B51B8
	}

	public class FBSDKViewHiearchy // TypeDefIndex: 3011
	{
		// Methods
		public static bool CheckGameObjectMatchPath(GameObject go, List<FBSDKCodelessPathComponent> path); // 0x006B50A8-0x006B50D0
		public static bool CheckPathMatchPath(List<FBSDKCodelessPathComponent> goPath, List<FBSDKCodelessPathComponent> path); // 0x006BD3E4-0x006BD590
		public static List<FBSDKCodelessPathComponent> GetPath(GameObject go); // 0x006BD3DC-0x006BD3E4
		public static List<FBSDKCodelessPathComponent> GetPath(GameObject go, int limit); // 0x006BD590-0x006BD7A4
		public static GameObject GetParent(GameObject go); // 0x006BD7A4-0x006BD874
		public static Dictionary<string, object> GetAttribute(GameObject obj, GameObject parent); // 0x006BD874-0x006BDA44
	}

	public class FBSDKCodelessPathComponent // TypeDefIndex: 3012
	{
		// Fields
		[CompilerGenerated] // 0x003DA0A4-0x003DA0B4
		private string <className>k__BackingField; // 0x10
		[CompilerGenerated] // 0x003DA0B4-0x003DA0C4
		private string <text>k__BackingField; // 0x18
		[CompilerGenerated] // 0x003DA0C4-0x003DA0D4
		private string <hint>k__BackingField; // 0x20
		[CompilerGenerated] // 0x003DA0D4-0x003DA0E4
		private string <desc>k__BackingField; // 0x28
		[CompilerGenerated] // 0x003DA0E4-0x003DA0F4
		private string <tag>k__BackingField; // 0x30
		[CompilerGenerated] // 0x003DA0F4-0x003DA104
		private long <index>k__BackingField; // 0x38
		[CompilerGenerated] // 0x003DA104-0x003DA114
		private long <section>k__BackingField; // 0x40
		[CompilerGenerated] // 0x003DA114-0x003DA124
		private long <row>k__BackingField; // 0x48
		[CompilerGenerated] // 0x003DA124-0x003DA134
		private long <matchBitmask>k__BackingField; // 0x50
	
		// Properties
		public string className { [CompilerGenerated] /* 0x003DA834-0x003DA844 */ get; [CompilerGenerated] /* 0x003DA844-0x003DA854 */ set; } // 0x006BCDF0-0x006BCDF8 0x006BCDE8-0x006BCDF0
		public string text { [CompilerGenerated] /* 0x003DA854-0x003DA864 */ set; } // 0x006BCDF8-0x006BCE00
		public string hint { [CompilerGenerated] /* 0x003DA864-0x003DA874 */ set; } // 0x006BCE00-0x006BCE08
		public string desc { [CompilerGenerated] /* 0x003DA874-0x003DA884 */ set; } // 0x006BCE08-0x006BCE10
		public string tag { [CompilerGenerated] /* 0x003DA884-0x003DA894 */ set; } // 0x006BCE18-0x006BCE20
		public long index { [CompilerGenerated] /* 0x003DA894-0x003DA8A4 */ set; } // 0x006BCE10-0x006BCE18
		public long section { [CompilerGenerated] /* 0x003DA8A4-0x003DA8B4 */ set; } // 0x006BCE20-0x006BCE28
		public long row { [CompilerGenerated] /* 0x003DA8B4-0x003DA8C4 */ set; } // 0x006BCE28-0x006BCE30
		public long matchBitmask { [CompilerGenerated] /* 0x003DA8C4-0x003DA8D4 */ set; } // 0x006BCE30-0x006BCE38
	
		// Constructors
		public FBSDKCodelessPathComponent(Dictionary<string, object> dict); // 0x006BC8F4-0x006BCDE8
	}

	public class FBSDKEventBinding // TypeDefIndex: 3013
	{
		// Fields
		[CompilerGenerated] // 0x003DA134-0x003DA144
		private string <eventName>k__BackingField; // 0x10
		[CompilerGenerated] // 0x003DA144-0x003DA154
		private string <eventType>k__BackingField; // 0x18
		[CompilerGenerated] // 0x003DA154-0x003DA164
		private string <appVersion>k__BackingField; // 0x20
		[CompilerGenerated] // 0x003DA164-0x003DA174
		private List<FBSDKCodelessPathComponent> <path>k__BackingField; // 0x28
	
		// Properties
		public string eventName { [CompilerGenerated] /* 0x003DA8D4-0x003DA8E4 */ get; [CompilerGenerated] /* 0x003DA8E4-0x003DA8F4 */ set; } // 0x006B50D0-0x006B50D8 0x006BD3A4-0x006BD3AC
		public string eventType { [CompilerGenerated] /* 0x003DA8F4-0x003DA904 */ get; [CompilerGenerated] /* 0x003DA904-0x003DA914 */ set; } // 0x006BD3B4-0x006BD3BC 0x006BD3AC-0x006BD3B4
		public string appVersion { [CompilerGenerated] /* 0x003DA914-0x003DA924 */ get; [CompilerGenerated] /* 0x003DA924-0x003DA934 */ set; } // 0x006BD3C4-0x006BD3CC 0x006BD3BC-0x006BD3C4
		public List<FBSDKCodelessPathComponent> path { [CompilerGenerated] /* 0x003DA934-0x003DA944 */ get; [CompilerGenerated] /* 0x003DA944-0x003DA954 */ set; } // 0x006B50A0-0x006B50A8 0x006BD3CC-0x006BD3D4
	
		// Constructors
		public FBSDKEventBinding(Dictionary<string, object> dict); // 0x006BCE38-0x006BD3A4
	}

	public class FBSDKEventBindingManager // TypeDefIndex: 3014
	{
		// Fields
		[CompilerGenerated] // 0x003DA174-0x003DA184
		private List<FBSDKEventBinding> <eventBindings>k__BackingField; // 0x10
	
		// Properties
		public List<FBSDKEventBinding> eventBindings { [CompilerGenerated] /* 0x003DA954-0x003DA964 */ get; [CompilerGenerated] /* 0x003DA964-0x003DA974 */ set; } // 0x006B5098-0x006B50A0 0x006BD3D4-0x006BD3DC
	
		// Constructors
		public FBSDKEventBindingManager(List<object> listDict); // 0x006B51B8-0x006B5400
	}
}

namespace Facebook.Unity.Gameroom
{
	internal sealed class GameroomFacebook : FacebookBase, IGameroomFacebookImplementation // TypeDefIndex: 3015
	{
		// Fields
		private string appId; // 0x28
		private IGameroomWrapper gameroomWrapper; // 0x30
		[CompilerGenerated] // 0x003DA184-0x003DA194
		private bool <LimitEventUsage>k__BackingField; // 0x38
	
		// Properties
		public override bool LimitEventUsage { [CompilerGenerated] /* 0x003DA974-0x003DA984 */ get; [CompilerGenerated] /* 0x003DA984-0x003DA994 */ set; } // 0x006BF8D8-0x006BF8E0 0x006BF8E0-0x006BF8EC
		public override string SDKName { get; } // 0x006BF8EC-0x006BF934 
		public override string SDKVersion { get; } // 0x006BF934-0x006BF97C 
	
		// Nested types
		public delegate void OnComplete(ResultContainer resultContainer); // TypeDefIndex: 3016; 0x006C0E10-0x006C1544
	
		// Constructors
		public GameroomFacebook(); // 0x006BF71C-0x006BF79C
		public GameroomFacebook(IGameroomWrapper gameroomWrapper, CallbackManager callbackManager); // 0x006BF89C-0x006BF8D8
	
		// Methods
		public void Init(string appId, HideUnityDelegate hideUnityDelegate, InitDelegate onInitComplete); // 0x006BBDF4-0x006BBEFC
		public override void ActivateApp(string appId = null); // 0x006BF98C-0x006BFA14
		public override void AppEventsLogEvent(string logEvent, float? valueToSum, Dictionary<string, object> parameters); // 0x006BFA14-0x006BFCF4
		public override void AppEventsLogPurchase(float logPurchase, string currency, Dictionary<string, object> parameters); // 0x006BFCF4-0x006BFDEC
		public override void AppRequest(string message, OGActionType? actionType, string objectId, IEnumerable<string> to, IEnumerable<object> filters, IEnumerable<string> excludeIds, int? maxRecipients, string data, string title, FacebookDelegate<IAppRequestResult> callback); // 0x006BFDEC-0x006C025C
		public override void FeedShare(string toId, Uri link, string linkName, string linkCaption, string linkDescription, Uri picture, string mediaSource, FacebookDelegate<IShareResult> callback); // 0x006C025C-0x006C047C
		public override void ShareLink(Uri contentURL, string contentTitle, string contentDescription, Uri photoURL, FacebookDelegate<IShareResult> callback); // 0x006C047C-0x006C04D4
		public void Pay(string product, string action, int quantity, int? quantityMin, int? quantityMax, string requestId, string pricepointId, string testCurrency, FacebookDelegate<IPayResult> callback); // 0x006C04D4-0x006C0528
		public override void GetAppLink(FacebookDelegate<IAppLinkResult> callback); // 0x006C0768-0x006C07D0
		public override void LogInWithPublishPermissions(IEnumerable<string> scope, FacebookDelegate<ILoginResult> callback); // 0x006C07D0-0x006C07D4
		public override void LogInWithReadPermissions(IEnumerable<string> scope, FacebookDelegate<ILoginResult> callback); // 0x006C0918-0x006C091C
		public override void OnAppRequestsComplete(ResultContainer resultContainer); // 0x006C091C-0x006C099C
		public override void OnGetAppLinkComplete(ResultContainer resultContainer); // 0x006C099C-0x006C0A04
		public override void OnLoginComplete(ResultContainer resultContainer); // 0x006C0A04-0x006C0A80
		public override void OnShareLinkComplete(ResultContainer resultContainer); // 0x006C0A80-0x006C0B00
		public void OnPayComplete(ResultContainer resultContainer); // 0x006C0B00-0x006C0B80
		public bool HaveReceivedPipeResponse(); // 0x006C0B80-0x006C0C40
		public string GetPipeResponse(string callbackId); // 0x006C0C40-0x006C0E10
		private static IGameroomWrapper GetGameroomWrapper(); // 0x006BF79C-0x006BF89C
		private void PayImpl(string product, string productId, string action, int quantity, int? quantityMin, int? quantityMax, string requestId, string pricepointId, string testCurrency, string developerPayload, FacebookDelegate<IPayResult> callback); // 0x006C0528-0x006C0768
		private void LoginWithPermissions(IEnumerable<string> scope, FacebookDelegate<ILoginResult> callback); // 0x006C07D4-0x006C0918
	}

	internal class GameroomFacebookGameObject : FacebookGameObject, IFacebookCallbackHandler // TypeDefIndex: 3017
	{
		// Properties
		protected IGameroomFacebookImplementation GameroomFacebookImpl { get; } // 0x006C1574-0x006C1630 
	
		// Nested types
		[CompilerGenerated] // 0x003D9E14-0x003D9E24
		private sealed class <WaitForPipeResponse>d__4 : IEnumerator<object> // TypeDefIndex: 3018
		{
			// Fields
			private int <>1__state; // 0x10
			private object <>2__current; // 0x18
			public GameroomFacebookGameObject <>4__this; // 0x20
			public GameroomFacebook.OnComplete onCompleteDelegate; // 0x28
			public string callbackId; // 0x30
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003DA9B4-0x003DA9C4 */ get; } // 0x006C1910-0x006C1918 
			object IEnumerator.Current { [DebuggerHidden] /* 0x003DA9D4-0x003DA9E4 */ get; } // 0x006C1980-0x006C1988 
	
			// Constructors
			[DebuggerHidden] // 0x003DA994-0x003DA9A4
			public <WaitForPipeResponse>d__4(int <>1__state); // 0x006C170C-0x006C1738
	
			// Methods
			[DebuggerHidden] // 0x003DA9A4-0x003DA9B4
			void IDisposable.Dispose(); // 0x006C1740-0x006C1744
			private bool MoveNext(); // 0x006C1744-0x006C1910
			[DebuggerHidden] // 0x003DA9C4-0x003DA9D4
			void IEnumerator.Reset(); // 0x006C1918-0x006C1980
		}
	
		// Constructors
		public GameroomFacebookGameObject(); // 0x006C1738-0x006C1740
	
		// Methods
		public void WaitForResponse(GameroomFacebook.OnComplete onCompleteDelegate, string callbackId); // 0x006C1630-0x006C165C
		protected override void OnAwake(); // 0x006C1708-0x006C170C
		private IEnumerator WaitForPipeResponse(GameroomFacebook.OnComplete onCompleteDelegate, string callbackId); // 0x006C165C-0x006C1708
	}

	internal class GameroomFacebookLoader : FB.CompiledFacebookLoader // TypeDefIndex: 3019
	{
		// Properties
		protected override FacebookGameObject FBGameObject { get; } // 0x006C1988-0x006C1A0C 
	
		// Constructors
		public GameroomFacebookLoader(); // 0x006C1A0C-0x006C1A14
	}

	internal interface IGameroomFacebook : IPayFacebook, IFacebook // TypeDefIndex: 3020
	{
	}

	internal interface IGameroomFacebookImplementation : IGameroomFacebook, IGameroomFacebookResultHandler // TypeDefIndex: 3021
	{
		// Methods
		bool HaveReceivedPipeResponse();
		string GetPipeResponse(string callbackId);
	}

	internal interface IGameroomFacebookResultHandler : IFacebookResultHandler // TypeDefIndex: 3022
	{
	}

	internal interface IGameroomWrapper // TypeDefIndex: 3023
	{
		// Properties
		IDictionary<string, object> PipeResponse { get; set; }
	
		// Methods
		void Init(GameroomFacebook.OnComplete completeDelegate);
		void DoLoginRequest(string appID, string permissions, string callbackID, GameroomFacebook.OnComplete completeDelegate);
		void DoPayRequest(string appId, string method, string action, string product, string productId, string quantity, string quantityMin, string quantityMax, string requestId, string pricepointId, string testCurrency, string developerPayload, string callbackID, GameroomFacebook.OnComplete completeDelegate);
		void DoFeedShareRequest(string appId, string toId, string link, string linkName, string linkCaption, string linkDescription, string pictureLink, string mediaSource, string callbackID, GameroomFacebook.OnComplete completeDelegate);
		void DoAppRequestRequest(string appId, string message, string actionType, string objectId, string to, string filters, string excludeIDs, string maxRecipients, string data, string title, string callbackID, GameroomFacebook.OnComplete completeDelegate);
	}
}

namespace Facebook.Unity.Editor
{
	internal class EditorFacebook : FacebookBase, IMobileFacebookImplementation, ICanvasFacebookImplementation // TypeDefIndex: 3024
	{
		// Fields
		private IEditorWrapper editorWrapper; // 0x28
		[CompilerGenerated] // 0x003DA194-0x003DA1A4
		private bool <LimitEventUsage>k__BackingField; // 0x30
		[CompilerGenerated] // 0x003DA1A4-0x003DA1B4
		private ShareDialogMode <ShareDialogMode>k__BackingField; // 0x34
	
		// Properties
		public override bool LimitEventUsage { [CompilerGenerated] /* 0x003DA9E4-0x003DA9F4 */ get; [CompilerGenerated] /* 0x003DA9F4-0x003DAA04 */ set; } // 0x006B73AC-0x006B73B4 0x006B73B4-0x006B73C0
		public ShareDialogMode ShareDialogMode { [CompilerGenerated] /* 0x003DAA04-0x003DAA14 */ set; } // 0x006B73C0-0x006B73C8
		public override string SDKName { get; } // 0x006B73C8-0x006B7410 
		public override string SDKVersion { get; } // 0x006B7410-0x006B7458 
		private static IFacebookCallbackHandler EditorGameObject { get; } // 0x006B7334-0x006B7380 
	
		// Constructors
		public EditorFacebook(IEditorWrapper wrapper, CallbackManager callbackManager); // 0x006B7260-0x006B7298
		public EditorFacebook(); // 0x006B7298-0x006B7334
	
		// Methods
		public override void Init(InitDelegate onInitComplete); // 0x006B7458-0x006B754C
		public override void LogInWithReadPermissions(IEnumerable<string> permissions, FacebookDelegate<ILoginResult> callback); // 0x006B754C-0x006B755C
		public override void LogInWithPublishPermissions(IEnumerable<string> permissions, FacebookDelegate<ILoginResult> callback); // 0x006B755C-0x006B76B0
		public override void AppRequest(string message, OGActionType? actionType, string objectId, IEnumerable<string> to, IEnumerable<object> filters, IEnumerable<string> excludeIds, int? maxRecipients, string data, string title, FacebookDelegate<IAppRequestResult> callback); // 0x006B76B0-0x006B77E8
		public override void ShareLink(Uri contentURL, string contentTitle, string contentDescription, Uri photoURL, FacebookDelegate<IShareResult> callback); // 0x006B77E8-0x006B7930
		public override void FeedShare(string toId, Uri link, string linkName, string linkCaption, string linkDescription, Uri picture, string mediaSource, FacebookDelegate<IShareResult> callback); // 0x006B7930-0x006B7A78
		public override void ActivateApp(string appId); // 0x006B7A78-0x006B7AE0
		public override void GetAppLink(FacebookDelegate<IAppLinkResult> callback); // 0x006B7AE0-0x006B7C14
		public override void AppEventsLogEvent(string logEvent, float? valueToSum, Dictionary<string, object> parameters); // 0x006B7C14-0x006B7C7C
		public override void AppEventsLogPurchase(float logPurchase, string currency, Dictionary<string, object> parameters); // 0x006B7C7C-0x006B7CE4
		public bool IsImplicitPurchaseLoggingEnabled(); // 0x006B7CE4-0x006B7CEC
		public void FetchDeferredAppLink(FacebookDelegate<IAppLinkResult> callback); // 0x006B7CEC-0x006B7F38
		public void Pay(string product, string action, int quantity, int? quantityMin, int? quantityMax, string requestId, string pricepointId, string testCurrency, FacebookDelegate<IPayResult> callback); // 0x006B7FB8-0x006B80F0
		public void RefreshCurrentAccessToken(FacebookDelegate<IAccessTokenRefreshResult> callback); // 0x006B80F0-0x006B8334
		public override void OnAppRequestsComplete(ResultContainer resultContainer); // 0x006B83B4-0x006B8434
		public override void OnGetAppLinkComplete(ResultContainer resultContainer); // 0x006B8434-0x006B84B4
		public override void OnLoginComplete(ResultContainer resultContainer); // 0x006B84B4-0x006B8530
		public override void OnShareLinkComplete(ResultContainer resultContainer); // 0x006B8530-0x006B85B0
		public void OnFetchDeferredAppLinkComplete(ResultContainer resultContainer); // 0x006B7F38-0x006B7FB8
		public void OnPayComplete(ResultContainer resultContainer); // 0x006B85B0-0x006B8630
		public void OnRefreshCurrentAccessTokenComplete(ResultContainer resultContainer); // 0x006B8334-0x006B83B4
		public void OnFacebookAuthResponseChange(ResultContainer resultContainer); // 0x006B8630-0x006B8698
		public void OnUrlResponse(string message); // 0x006B8698-0x006B8700
		public void OnHideUnity(bool hidden); // 0x006B8700-0x006B8768
	}

	internal class EditorFacebookGameObject : FacebookGameObject // TypeDefIndex: 3025
	{
		// Constructors
		public EditorFacebookGameObject(); // 0x006B8870-0x006B8878
	
		// Methods
		protected override void OnAwake(); // 0x006B8768-0x006B876C
		private void OnEnable(); // 0x006B876C-0x006B87E8
		private void OnSceneLoaded(Scene scene, LoadSceneMode mode); // 0x006B87E8-0x006B87EC
		private void OnDisable(); // 0x006B87EC-0x006B8868
		public void onPurchaseCompleteHandler(object data); // 0x006B8868-0x006B8870
	}

	internal class EditorFacebookLoader : FB.CompiledFacebookLoader // TypeDefIndex: 3026
	{
		// Properties
		protected override FacebookGameObject FBGameObject { get; } // 0x006B8878-0x006B88FC 
	
		// Constructors
		public EditorFacebookLoader(); // 0x006B88FC-0x006B8904
	}

	internal abstract class EditorFacebookMockDialog : MonoBehaviour // TypeDefIndex: 3027
	{
		// Fields
		private Rect modalRect; // 0x18
		private GUIStyle modalStyle; // 0x28
		[CompilerGenerated] // 0x003DA1B4-0x003DA1C4
		private Utilities.Callback<ResultContainer> <Callback>k__BackingField; // 0x30
		[CompilerGenerated] // 0x003DA1C4-0x003DA1D4
		private string <CallbackID>k__BackingField; // 0x38
	
		// Properties
		public Utilities.Callback<ResultContainer> Callback { [CompilerGenerated] /* 0x003DAA14-0x003DAA24 */ protected get; [CompilerGenerated] /* 0x003DAA24-0x003DAA34 */ set; } // 0x006B5BCC-0x006B5BD4 0x006B8904-0x006B890C
		public string CallbackID { [CompilerGenerated] /* 0x003DAA34-0x003DAA44 */ protected get; [CompilerGenerated] /* 0x003DAA44-0x003DAA54 */ set; } // 0x006B5BC4-0x006B5BCC 0x006B890C-0x006B8914
		protected abstract string DialogTitle { get; }
	
		// Constructors
		protected EditorFacebookMockDialog(); // 0x006B5BDC-0x006B5BE4
	
		// Methods
		public void Start(); // 0x006B8914-0x006B8A94
		public void OnGUI(); // 0x006B8A94-0x006B8B98
		protected abstract void DoGui();
		protected abstract void SendSuccessResult();
		protected virtual void SendCancelResult(); // 0x006B8B98-0x006B8CEC
		protected virtual void SendErrorResult(string errorMessage); // 0x006B8CEC-0x006B8E18
		private void OnGUIDialog(int windowId); // 0x006B8E18-0x006B9250
	}

	internal class EditorWrapper : IEditorWrapper // TypeDefIndex: 3028
	{
		// Fields
		private IFacebookCallbackHandler callbackHandler; // 0x10
	
		// Constructors
		public EditorWrapper(IFacebookCallbackHandler callbackHandler); // 0x006B7380-0x006B73AC
	
		// Methods
		public void Init(); // 0x006B9250-0x006B931C
		public void ShowLoginMockDialog(Utilities.Callback<ResultContainer> callback, string callbackId, string permsisions); // 0x006B931C-0x006B93A4
		public void ShowAppRequestMockDialog(Utilities.Callback<ResultContainer> callback, string callbackId); // 0x006B93A4-0x006B9404
		public void ShowPayMockDialog(Utilities.Callback<ResultContainer> callback, string callbackId); // 0x006B94A0-0x006B9500
		public void ShowMockShareDialog(Utilities.Callback<ResultContainer> callback, string subTitle, string callbackId); // 0x006B9500-0x006B95A0
		private void ShowEmptyMockDialog(Utilities.Callback<ResultContainer> callback, string callbackId, string title); // 0x006B9404-0x006B94A0
	}

	internal interface IEditorWrapper // TypeDefIndex: 3029
	{
		// Methods
		void Init();
		void ShowLoginMockDialog(Utilities.Callback<ResultContainer> callback, string callbackId, string permissions);
		void ShowAppRequestMockDialog(Utilities.Callback<ResultContainer> callback, string callbackId);
		void ShowPayMockDialog(Utilities.Callback<ResultContainer> callback, string callbackId);
		void ShowMockShareDialog(Utilities.Callback<ResultContainer> callback, string subTitle, string callbackId);
	}
}

namespace Facebook.Unity.Editor.Dialogs
{
	internal class EmptyMockDialog : EditorFacebookMockDialog // TypeDefIndex: 3030
	{
		// Fields
		[CompilerGenerated] // 0x003DA1D4-0x003DA1E4
		private string <EmptyDialogTitle>k__BackingField; // 0x40
	
		// Properties
		public string EmptyDialogTitle { [CompilerGenerated] /* 0x003DAA54-0x003DAA64 */ get; [CompilerGenerated] /* 0x003DAA64-0x003DAA74 */ set; } // 0x006B5A6C-0x006B5A74 0x006B5A74-0x006B5A7C
		protected override string DialogTitle { get; } // 0x006B5A7C-0x006B5A84 
	
		// Constructors
		public EmptyMockDialog(); // 0x006B5BD4-0x006B5BDC
	
		// Methods
		protected override void DoGui(); // 0x006B5A84-0x006B5A88
		protected override void SendSuccessResult(); // 0x006B5A88-0x006B5BC4
	}

	internal class MockLoginDialog : EditorFacebookMockDialog // TypeDefIndex: 3031
	{
		// Fields
		private string accessToken; // 0x40
	
		// Properties
		protected override string DialogTitle { get; } // 0x006B5BE4-0x006B5C2C 
	
		// Nested types
		[CompilerGenerated] // 0x003D9E24-0x003D9E34
		private sealed class <>c__DisplayClass4_0 // TypeDefIndex: 3032
		{
			// Fields
			public string facebookID; // 0x10
			public MockLoginDialog <>4__this; // 0x18
	
			// Constructors
			public <>c__DisplayClass4_0(); // 0x006B6348-0x006B6350
	
			// Methods
			internal void <SendSuccessResult>b__1(IGraphResult permResult); // 0x006B6350-0x006B6CF8
		}
	
		// Constructors
		public MockLoginDialog(); // 0x006B5F9C-0x006B5FFC
	
		// Methods
		protected override void DoGui(); // 0x006B5C2C-0x006B5E30
		protected override void SendSuccessResult(); // 0x006B5E98-0x006B5F9C
		[CompilerGenerated] // 0x003DAA74-0x003DAA84
		private void <SendSuccessResult>b__4_0(IGraphResult graphResult); // 0x006B5FFC-0x006B6348
	}

	internal class MockShareDialog : EditorFacebookMockDialog // TypeDefIndex: 3033
	{
		// Fields
		[CompilerGenerated] // 0x003DA1E4-0x003DA1F4
		private string <SubTitle>k__BackingField; // 0x40
	
		// Properties
		public string SubTitle { [CompilerGenerated] /* 0x003DAA84-0x003DAA94 */ private get; [CompilerGenerated] /* 0x003DAA94-0x003DAAA4 */ set; } // 0x006B6CF8-0x006B6D00 0x006B6D00-0x006B6D08
		protected override string DialogTitle { get; } // 0x006B6D08-0x006B6D68 
	
		// Constructors
		public MockShareDialog(); // 0x006B7258-0x006B7260
	
		// Methods
		protected override void DoGui(); // 0x006B6D68-0x006B6D6C
		protected override void SendSuccessResult(); // 0x006B6D6C-0x006B6EF0
		protected override void SendCancelResult(); // 0x006B7138-0x006B7258
		private string GenerateFakePostID(); // 0x006B6FF4-0x006B7138
	}
}

namespace Facebook.Unity.Mobile
{
	internal interface IMobileFacebook : IFacebook // TypeDefIndex: 3034
	{
		// Properties
		ShareDialogMode ShareDialogMode { set; }
	
		// Methods
		void FetchDeferredAppLink(FacebookDelegate<IAppLinkResult> callback);
		void RefreshCurrentAccessToken(FacebookDelegate<IAccessTokenRefreshResult> callback);
		bool IsImplicitPurchaseLoggingEnabled();
	}

	internal interface IMobileFacebookCallbackHandler : IFacebookCallbackHandler // TypeDefIndex: 3035
	{
	}

	internal interface IMobileFacebookImplementation : IMobileFacebook, IMobileFacebookResultHandler // TypeDefIndex: 3036
	{
	}

	internal interface IMobileFacebookResultHandler : IFacebookResultHandler // TypeDefIndex: 3037
	{
		// Methods
		void OnFetchDeferredAppLinkComplete(ResultContainer resultContainer);
		void OnRefreshCurrentAccessTokenComplete(ResultContainer resultContainer);
	}

	internal abstract class MobileFacebook : FacebookBase, IMobileFacebookImplementation // TypeDefIndex: 3038
	{
		// Fields
		private ShareDialogMode shareDialogMode; // 0x28
	
		// Properties
		public ShareDialogMode ShareDialogMode { set; } // 0x006C57C0-0x006C57D4
	
		// Constructors
		protected MobileFacebook(CallbackManager callbackManager); // 0x006C2600-0x006C262C
	
		// Methods
		public abstract void FetchDeferredAppLink(FacebookDelegate<IAppLinkResult> callback);
		public abstract void RefreshCurrentAccessToken(FacebookDelegate<IAccessTokenRefreshResult> callback);
		public abstract bool IsImplicitPurchaseLoggingEnabled();
		public override void OnLoginComplete(ResultContainer resultContainer); // 0x006C57D4-0x006C5850
		public override void OnGetAppLinkComplete(ResultContainer resultContainer); // 0x006C5850-0x006C58D0
		public override void OnAppRequestsComplete(ResultContainer resultContainer); // 0x006C58D0-0x006C5950
		public void OnFetchDeferredAppLinkComplete(ResultContainer resultContainer); // 0x006C5950-0x006C59D0
		public override void OnShareLinkComplete(ResultContainer resultContainer); // 0x006C59D0-0x006C5A50
		public void OnRefreshCurrentAccessTokenComplete(ResultContainer resultContainer); // 0x006C5A50-0x006C5B1C
		protected abstract void SetShareDialogMode(ShareDialogMode mode);
	}

	internal abstract class MobileFacebookGameObject : FacebookGameObject, IMobileFacebookCallbackHandler // TypeDefIndex: 3039
	{
		// Properties
		private IMobileFacebookImplementation MobileFacebook { get; } // 0x006C5B1C-0x006C5BD8 
	
		// Constructors
		protected MobileFacebookGameObject(); // 0x006C3D24-0x006C3D2C
	
		// Methods
		public void OnFetchDeferredAppLinkComplete(string message); // 0x006C5BD8-0x006C5CC4
		public void OnRefreshCurrentAccessTokenComplete(string message); // 0x006C5CC4-0x006C5DB4
	}
}

namespace Facebook.Unity.Mobile.IOS
{
	internal interface IIOSWrapper // TypeDefIndex: 3040
	{
		// Methods
		void Init(string appId, bool frictionlessRequests, string urlSuffix, string unityUserAgentSuffix);
		void LogInWithReadPermissions(int requestId, string scope);
		void LogInWithPublishPermissions(int requestId, string scope);
		void LogOut();
		void SetShareDialogMode(int mode);
		void ShareLink(int requestId, string contentURL, string contentTitle, string contentDescription, string photoURL);
		void FeedShare(int requestId, string toId, string link, string linkName, string linkCaption, string linkDescription, string picture, string mediaSource);
		void AppRequest(int requestId, string message, string actionType, string objectId, string[] to = null, int toLength = 0 /* Metadata: 0x0021BA09 */, string filters = "" /* Metadata: 0x0021BA0D */, string[] excludeIds = null, int excludeIdsLength = 0 /* Metadata: 0x0021BA11 */, bool hasMaxRecipients = false /* Metadata: 0x0021BA15 */, int maxRecipients = 0 /* Metadata: 0x0021BA16 */, string data = "" /* Metadata: 0x0021BA1A */, string title = "" /* Metadata: 0x0021BA1E */);
		void FBAppEventsActivateApp();
		void LogAppEvent(string logEvent, double valueToSum, int numParams, string[] paramKeys, string[] paramVals);
		void LogPurchaseAppEvent(double logPurchase, string currency, int numParams, string[] paramKeys, string[] paramVals);
		void FBAppEventsSetLimitEventUsage(bool limitEventUsage);
		void GetAppLink(int requestId);
		void RefreshCurrentAccessToken(int requestId);
		string FBSdkVersion();
		string FBGetUserID();
		void FetchDeferredAppLink(int requestId);
	}

	internal class IOSFacebook : MobileFacebook // TypeDefIndex: 3041
	{
		// Fields
		private bool limitEventUsage; // 0x2C
		private IIOSWrapper iosWrapper; // 0x30
		private string userID; // 0x38
	
		// Properties
		public override bool LimitEventUsage { get; set; } // 0x006C4010-0x006C4018 0x006C4018-0x006C40E8
		public override string SDKName { get; } // 0x006C40E8-0x006C4130 
		public override string SDKVersion { get; } // 0x006C4130-0x006C41E8 
	
		// Nested types
		private class NativeDict // TypeDefIndex: 3042
		{
			// Fields
			[CompilerGenerated] // 0x003DA1F4-0x003DA204
			private int <NumEntries>k__BackingField; // 0x10
			[CompilerGenerated] // 0x003DA204-0x003DA214
			private string[] <Keys>k__BackingField; // 0x18
			[CompilerGenerated] // 0x003DA214-0x003DA224
			private string[] <Values>k__BackingField; // 0x20
	
			// Properties
			public int NumEntries { [CompilerGenerated] /* 0x003DAAA4-0x003DAAB4 */ get; [CompilerGenerated] /* 0x003DAAB4-0x003DAAC4 */ set; } // 0x006C50DC-0x006C50E4 0x006C5724-0x006C572C
			public string[] Keys { [CompilerGenerated] /* 0x003DAAC4-0x003DAAD4 */ get; [CompilerGenerated] /* 0x003DAAD4-0x003DAAE4 */ set; } // 0x006C50E4-0x006C50EC 0x006C5714-0x006C571C
			public string[] Values { [CompilerGenerated] /* 0x003DAAE4-0x003DAAF4 */ get; [CompilerGenerated] /* 0x003DAAF4-0x003DAB04 */ set; } // 0x006C50EC-0x006C50F4 0x006C571C-0x006C5724
	
			// Constructors
			public NativeDict(); // 0x006C56E8-0x006C5714
		}
	
		// Constructors
		public IOSFacebook(); // 0x006C3DB8-0x006C3E30
		public IOSFacebook(IIOSWrapper iosWrapper, CallbackManager callbackManager); // 0x006C3F30-0x006C4010
	
		// Methods
		public void Init(string appId, bool frictionlessRequests, string iosURLSuffix, HideUnityDelegate hideUnityDelegate, InitDelegate onInitComplete); // 0x006BB92C-0x006BBA1C
		public override void LogInWithReadPermissions(IEnumerable<string> permissions, FacebookDelegate<ILoginResult> callback); // 0x006C41E8-0x006C42E0
		public override void LogInWithPublishPermissions(IEnumerable<string> permissions, FacebookDelegate<ILoginResult> callback); // 0x006C42E0-0x006C43D8
		public override void LogOut(); // 0x006C43D8-0x006C44C8
		public override void AppRequest(string message, OGActionType? actionType, string objectId, IEnumerable<string> to, IEnumerable<object> filters, IEnumerable<string> excludeIds, int? maxRecipients, string data, string title, FacebookDelegate<IAppRequestResult> callback); // 0x006C44C8-0x006C47D4
		public override void ShareLink(Uri contentURL, string contentTitle, string contentDescription, Uri photoURL, FacebookDelegate<IShareResult> callback); // 0x006C47D4-0x006C4900
		public override void FeedShare(string toId, Uri link, string linkName, string linkCaption, string linkDescription, Uri picture, string mediaSource, FacebookDelegate<IShareResult> callback); // 0x006C49A8-0x006C4BAC
		public override void AppEventsLogEvent(string logEvent, float? valueToSum, Dictionary<string, object> parameters); // 0x006C4BAC-0x006C4DE0
		public override void AppEventsLogPurchase(float logPurchase, string currency, Dictionary<string, object> parameters); // 0x006C50F4-0x006C522C
		public override bool IsImplicitPurchaseLoggingEnabled(); // 0x006C522C-0x006C5234
		public override void ActivateApp(string appId); // 0x006C5234-0x006C52EC
		public override void FetchDeferredAppLink(FacebookDelegate<IAppLinkResult> callback); // 0x006C52EC-0x006C53D0
		public override void GetAppLink(FacebookDelegate<IAppLinkResult> callback); // 0x006C53D0-0x006C54F8
		public override void RefreshCurrentAccessToken(FacebookDelegate<IAccessTokenRefreshResult> callback); // 0x006C54F8-0x006C5620
		protected override void SetShareDialogMode(ShareDialogMode mode); // 0x006C5620-0x006C56E8
		private static IIOSWrapper GetIOSWrapper(); // 0x006C3E30-0x006C3F30
		private static NativeDict MarshallDict(Dictionary<string, object> dict); // 0x006C4DE0-0x006C50DC
		private int AddCallback<T>(FacebookDelegate<T> callback)
			where T : IResult;
	}

	internal class IOSFacebookGameObject : MobileFacebookGameObject // TypeDefIndex: 3043
	{
		// Constructors
		public IOSFacebookGameObject(); // 0x006C572C-0x006C5734
	}

	internal class IOSFacebookLoader : FB.CompiledFacebookLoader // TypeDefIndex: 3044
	{
		// Properties
		protected override FacebookGameObject FBGameObject { get; } // 0x006C5734-0x006C57B8 
	
		// Constructors
		public IOSFacebookLoader(); // 0x006C57B8-0x006C57C0
	}
}

namespace Facebook.Unity.Mobile.Android
{
	internal sealed class AndroidFacebook : MobileFacebook // TypeDefIndex: 3045
	{
		// Fields
		private bool limitEventUsage; // 0x2C
		private IAndroidWrapper androidWrapper; // 0x30
		private string userID; // 0x38
		[CompilerGenerated] // 0x003DA224-0x003DA234
		private string <KeyHash>k__BackingField; // 0x40
	
		// Properties
		private string KeyHash { [CompilerGenerated] /* 0x003DAB04-0x003DAB14 */ set; } // 0x006C262C-0x006C2634
		public override bool LimitEventUsage { get; set; } // 0x006C2634-0x006C263C 0x006C263C-0x006C26B4
		public override string SDKName { get; } // 0x006C27F0-0x006C2838 
		public override string SDKVersion { get; } // 0x006C2838-0x006C2920 
	
		// Nested types
		private class JavaMethodCall<T> : MethodCall<T> // TypeDefIndex: 3046
			where T : IResult
		{
			// Fields
			private AndroidFacebook androidImpl;
	
			// Constructors
			public JavaMethodCall(AndroidFacebook androidImpl, string methodName);
	
			// Methods
			public override void Call(MethodArguments args = null);
		}
	
		// Constructors
		public AndroidFacebook(); // 0x006C2368-0x006C23E0
		public AndroidFacebook(IAndroidWrapper androidWrapper, CallbackManager callbackManager); // 0x006C24E0-0x006C2600
	
		// Methods
		public void Init(string appId, HideUnityDelegate hideUnityDelegate, InitDelegate onInitComplete); // 0x006BBB74-0x006BBC9C
		public override void LogInWithReadPermissions(IEnumerable<string> permissions, FacebookDelegate<ILoginResult> callback); // 0x006C2920-0x006C2A38
		public override void LogInWithPublishPermissions(IEnumerable<string> permissions, FacebookDelegate<ILoginResult> callback); // 0x006C2A38-0x006C2B50
		public override void LogOut(); // 0x006C2B50-0x006C2BE0
		public override void AppRequest(string message, OGActionType? actionType, string objectId, IEnumerable<string> to, IEnumerable<object> filters, IEnumerable<string> excludeIds, int? maxRecipients, string data, string title, FacebookDelegate<IAppRequestResult> callback); // 0x006C2BE0-0x006C2F34
		public override void ShareLink(Uri contentURL, string contentTitle, string contentDescription, Uri photoURL, FacebookDelegate<IShareResult> callback); // 0x006C2F34-0x006C3114
		public override void FeedShare(string toId, Uri link, string linkName, string linkCaption, string linkDescription, Uri picture, string mediaSource, FacebookDelegate<IShareResult> callback); // 0x006C3114-0x006C33B0
		public override void GetAppLink(FacebookDelegate<IAppLinkResult> callback); // 0x006C33B0-0x006C3488
		public override void AppEventsLogEvent(string logEvent, float? valueToSum, Dictionary<string, object> parameters); // 0x006C3488-0x006C364C
		public override void AppEventsLogPurchase(float logPurchase, string currency, Dictionary<string, object> parameters); // 0x006C364C-0x006C37E8
		public override bool IsImplicitPurchaseLoggingEnabled(); // 0x006C37E8-0x006C38D0
		public override void ActivateApp(string appId); // 0x006C38D0-0x006C3924
		public override void FetchDeferredAppLink(FacebookDelegate<IAppLinkResult> callback); // 0x006C3924-0x006C3A14
		public override void RefreshCurrentAccessToken(FacebookDelegate<IAccessTokenRefreshResult> callback); // 0x006C3A14-0x006C3AEC
		protected override void SetShareDialogMode(ShareDialogMode mode); // 0x006C3AEC-0x006C3BA0
		private static IAndroidWrapper GetAndroidWrapper(); // 0x006C23E0-0x006C24E0
		private void CallFB(string method, string args); // 0x006C26B4-0x006C27F0
	}

	internal class AndroidFacebookGameObject : MobileFacebookGameObject // TypeDefIndex: 3047
	{
		// Constructors
		public AndroidFacebookGameObject(); // 0x006C3D1C-0x006C3D24
	
		// Methods
		protected override void OnAwake(); // 0x006C3BA0-0x006C3C18
		private void OnEnable(); // 0x006C3C18-0x006C3C94
		private void OnSceneLoaded(Scene scene, LoadSceneMode mode); // 0x006C3C94-0x006C3C98
		private void OnDisable(); // 0x006C3C98-0x006C3D14
		public void onPurchaseCompleteHandler(object data); // 0x006C3D14-0x006C3D1C
	}

	internal class AndroidFacebookLoader : FB.CompiledFacebookLoader // TypeDefIndex: 3048
	{
		// Properties
		protected override FacebookGameObject FBGameObject { get; } // 0x006C3D2C-0x006C3DB0 
	
		// Constructors
		public AndroidFacebookLoader(); // 0x006C3DB0-0x006C3DB8
	}

	internal interface IAndroidWrapper // TypeDefIndex: 3049
	{
		// Methods
		T CallStatic<T>(string methodName);
		void CallStatic(string methodName, params /* 0x003DAB54-0x003DAB64 */ object[] args);
	}
}

namespace Facebook.Unity.Canvas
{
	internal sealed class CanvasFacebook : FacebookBase, ICanvasFacebookImplementation // TypeDefIndex: 3050
	{
		// Fields
		private string appId; // 0x28
		private string appLinkUrl; // 0x30
		private ICanvasJSWrapper canvasJSWrapper; // 0x38
		private HideUnityDelegate onHideUnityDelegate; // 0x40
		[CompilerGenerated] // 0x003DA234-0x003DA244
		private bool <LimitEventUsage>k__BackingField; // 0x48
	
		// Properties
		public override bool LimitEventUsage { [CompilerGenerated] /* 0x003DAB14-0x003DAB24 */ get; [CompilerGenerated] /* 0x003DAB24-0x003DAB34 */ set; } // 0x006ABC78-0x006ABC80 0x006ABC80-0x006ABC8C
		public override string SDKName { get; } // 0x006ABC8C-0x006ABCD4 
		public override string SDKVersion { get; } // 0x006ABCD4-0x006ABD88 
		public override string SDKUserAgent { get; } // 0x006ABD88-0x006AC0B8 
	
		// Nested types
		private class CanvasUIMethodCall<T> : MethodCall<T> // TypeDefIndex: 3051
			where T : IResult
		{
			// Fields
			private CanvasFacebook canvasImpl;
			private string callbackMethod;
	
			// Constructors
			public CanvasUIMethodCall(CanvasFacebook canvasImpl, string methodName, string callbackMethod);
	
			// Methods
			public override void Call(MethodArguments args);
			private void UI(string method, MethodArguments args, FacebookDelegate<T> callback = null);
		}
	
		[Serializable]
		[CompilerGenerated] // 0x003D9E34-0x003D9E44
		private sealed class <>c // TypeDefIndex: 3052
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static Utilities.Callback<ResultContainer> <>9__40_0; // 0x08
	
			// Constructors
			static <>c(); // 0x006AF8CC-0x006AF930
			public <>c(); // 0x006AF930-0x006AF938
	
			// Methods
			internal void <OnFacebookAuthResponseChange>b__40_0(ResultContainer formattedResponse); // 0x006AF938-0x006AF9E4
		}
	
		[CompilerGenerated] // 0x003D9E44-0x003D9E54
		private sealed class <>c__DisplayClass47_0 // TypeDefIndex: 3053
		{
			// Fields
			public ResultContainer result; // 0x10
			public Utilities.Callback<ResultContainer> callback; // 0x18
	
			// Constructors
			public <>c__DisplayClass47_0(); // 0x006AF594-0x006AF59C
	
			// Methods
			internal void <FormatAuthResponse>b__0(IGraphResult r); // 0x006AF9EC-0x006B0134
		}
	
		// Constructors
		public CanvasFacebook(); // 0x006ABA90-0x006ABB10
		public CanvasFacebook(ICanvasJSWrapper canvasJSWrapper, CallbackManager callbackManager); // 0x006ABC10-0x006ABC4C
	
		// Methods
		private static ICanvasJSWrapper GetCanvasJSWrapper(); // 0x006ABB10-0x006ABC10
		public void Init(string appId, bool cookie, bool logging, bool status, bool xfbml, string channelUrl, string authResponse, bool frictionlessRequests, string javascriptSDKLocale, bool loadDebugJSSDK, HideUnityDelegate hideUnityDelegate, InitDelegate onInitComplete); // 0x006AC370-0x006AC7A8
		public override void LogInWithPublishPermissions(IEnumerable<string> permissions, FacebookDelegate<ILoginResult> callback); // 0x006AC9DC-0x006ACB54
		public override void LogInWithReadPermissions(IEnumerable<string> permissions, FacebookDelegate<ILoginResult> callback); // 0x006ACB5C-0x006ACCD4
		public override void LogOut(); // 0x006ACCD4-0x006ACDC4
		public override void AppRequest(string message, OGActionType? actionType, string objectId, IEnumerable<string> to, IEnumerable<object> filters, IEnumerable<string> excludeIds, int? maxRecipients, string data, string title, FacebookDelegate<IAppRequestResult> callback); // 0x006ACE14-0x006AD1BC
		public override void ActivateApp(string appId); // 0x006AD534-0x006AD5EC
		public override void ShareLink(Uri contentURL, string contentTitle, string contentDescription, Uri photoURL, FacebookDelegate<IShareResult> callback); // 0x006AD5EC-0x006AD7D8
		public override void FeedShare(string toId, Uri link, string linkName, string linkCaption, string linkDescription, Uri picture, string mediaSource, FacebookDelegate<IShareResult> callback); // 0x006AD930-0x006ADBD8
		public void Pay(string product, string action, int quantity, int? quantityMin, int? quantityMax, string requestId, string pricepointId, string testCurrency, FacebookDelegate<IPayResult> callback); // 0x006ADBD8-0x006ADC2C
		public override void GetAppLink(FacebookDelegate<IAppLinkResult> callback); // 0x006ADFCC-0x006AE0E4
		public override void AppEventsLogEvent(string logEvent, float? valueToSum, Dictionary<string, object> parameters); // 0x006AE130-0x006AE23C
		public override void AppEventsLogPurchase(float purchaseAmount, string currency, Dictionary<string, object> parameters); // 0x006AE23C-0x006AE348
		public override void OnLoginComplete(ResultContainer result); // 0x006AE348-0x006AE3D0
		public override void OnGetAppLinkComplete(ResultContainer message); // 0x006AECD0-0x006AED38
		public void OnFacebookAuthResponseChange(ResultContainer resultContainer); // 0x006AED38-0x006AEE18
		public void OnPayComplete(ResultContainer resultContainer); // 0x006AEE18-0x006AEE98
		public override void OnAppRequestsComplete(ResultContainer resultContainer); // 0x006AEF5C-0x006AEFDC
		public override void OnShareLinkComplete(ResultContainer resultContainer); // 0x006AEFDC-0x006AF05C
		public void OnUrlResponse(string url); // 0x006AF138-0x006AF140
		public void OnHideUnity(bool isGameShown); // 0x006AF140-0x006AF154
		private static void FormatAuthResponse(ResultContainer result, Utilities.Callback<ResultContainer> callback); // 0x006AE3D0-0x006AECD0
		private void PayImpl(string product, string productId, string action, int quantity, int? quantityMin, int? quantityMax, string requestId, string pricepointId, string testCurrency, string developerPayload, FacebookDelegate<IPayResult> callback); // 0x006ADC2C-0x006ADFCC
		[CompilerGenerated] // 0x003DAB34-0x003DAB44
		private void <OnLoginComplete>b__37_0(ResultContainer formattedResponse); // 0x006AF708-0x006AF784
	}

	internal class CanvasFacebookGameObject : FacebookGameObject, ICanvasFacebookCallbackHandler // TypeDefIndex: 3054
	{
		// Properties
		protected ICanvasFacebookImplementation CanvasFacebookImpl { get; } // 0x006B0134-0x006B01F0 
	
		// Constructors
		public CanvasFacebookGameObject(); // 0x006B078C-0x006B0794
	
		// Methods
		public void OnPayComplete(string result); // 0x006B01F8-0x006B02E4
		public void OnFacebookAuthResponseChange(string message); // 0x006B040C-0x006B04FC
		public void OnUrlResponse(string message); // 0x006B04FC-0x006B05C8
		public void OnHideUnity(bool hide); // 0x006B05C8-0x006B0694
		protected override void OnAwake(); // 0x006B0694-0x006B078C
	}

	internal class CanvasFacebookLoader : FB.CompiledFacebookLoader // TypeDefIndex: 3055
	{
		// Properties
		protected override FacebookGameObject FBGameObject { get; } // 0x006B079C-0x006B0820 
	
		// Constructors
		public CanvasFacebookLoader(); // 0x006B0828-0x006B0830
	}

	internal interface ICanvasFacebook : IPayFacebook, IFacebook // TypeDefIndex: 3056
	{
	}

	internal interface ICanvasFacebookCallbackHandler : IFacebookCallbackHandler // TypeDefIndex: 3057
	{
		// Methods
		void OnPayComplete(string message);
		void OnFacebookAuthResponseChange(string message);
		void OnUrlResponse(string message);
		void OnHideUnity(bool hide);
	}

	internal interface ICanvasFacebookImplementation : ICanvasFacebook, ICanvasFacebookResultHandler // TypeDefIndex: 3058
	{
	}

	internal interface ICanvasFacebookResultHandler : IFacebookResultHandler // TypeDefIndex: 3059
	{
		// Methods
		void OnPayComplete(ResultContainer resultContainer);
		void OnFacebookAuthResponseChange(ResultContainer resultContainer);
		void OnUrlResponse(string message);
		void OnHideUnity(bool hide);
	}

	internal interface ICanvasJSWrapper // TypeDefIndex: 3060
	{
		// Methods
		string GetSDKVersion();
		void DisableFullScreen();
		void Init(string connectFacebookUrl, string locale, int debug, string initParams, int status);
		void Login(IEnumerable<string> scope, string callback_id);
		void Logout();
		void ActivateApp();
		void LogAppEvent(string eventName, float? valueToSum, string parameters);
		void LogPurchase(float purchaseAmount, string currency, string parameters);
		void Ui(string x, string uid, string callbackMethodName);
		void InitScreenPosition();
	}

	internal class JsBridge : MonoBehaviour // TypeDefIndex: 3061
	{
		// Fields
		private ICanvasFacebookCallbackHandler facebook; // 0x18
	
		// Constructors
		public JsBridge(); // 0x006B0EE4-0x006B0EEC
	
		// Methods
		public void Start(); // 0x006B0838-0x006B0890
		public void OnLoginComplete(string responseJsonData = "" /* Metadata: 0x0021BA22 */); // 0x006B0890-0x006B0958
		public void OnFacebookAuthResponseChange(string responseJsonData = "" /* Metadata: 0x0021BA26 */); // 0x006B0958-0x006B0A20
		public void OnPayComplete(string responseJsonData = "" /* Metadata: 0x0021BA2A */); // 0x006B0A20-0x006B0AE4
		public void OnAppRequestsComplete(string responseJsonData = "" /* Metadata: 0x0021BA2E */); // 0x006B0AE4-0x006B0BAC
		public void OnShareLinkComplete(string responseJsonData = "" /* Metadata: 0x0021BA32 */); // 0x006B0BAC-0x006B0C74
		public void OnFacebookFocus(string state); // 0x006B0C74-0x006B0D58
		public void OnInitComplete(string responseJsonData = "" /* Metadata: 0x0021BA36 */); // 0x006B0D58-0x006B0E1C
		public void OnUrlResponse(string url = "" /* Metadata: 0x0021BA3A */); // 0x006B0E1C-0x006B0EE4
	}
}

namespace UnityEngine.Networking
{
	internal class ChannelBuffer : IDisposable // TypeDefIndex: 3063
	{
		// Fields
		private NetworkConnection m_Connection; // 0x10
		private ChannelPacket m_CurrentPacket; // 0x18
		private float m_LastFlushTime; // 0x30
		private byte m_ChannelId; // 0x34
		private int m_MaxPacketSize; // 0x38
		private bool m_IsReliable; // 0x3C
		private bool m_AllowFragmentation; // 0x3D
		private bool m_IsBroken; // 0x3E
		private int m_MaxPendingPacketCount; // 0x40
		private Queue<ChannelPacket> m_PendingPackets; // 0x48
		private static List<ChannelPacket> s_FreePackets; // 0x00
		internal static int pendingPacketCount; // 0x08
		public float maxDelay; // 0x50
		private float m_LastBufferedMessageCountTimer; // 0x54
		[CompilerGenerated] // 0x003DBC60-0x003DBC9C
		[DebuggerBrowsable] // 0x003DBC60-0x003DBC9C
		private int <numBufferedPerSecond>k__BackingField; // 0x58
		[CompilerGenerated] // 0x003DBC9C-0x003DBCD8
		[DebuggerBrowsable] // 0x003DBC9C-0x003DBCD8
		private int <lastBufferedPerSecond>k__BackingField; // 0x5C
		private static NetworkWriter s_SendWriter; // 0x10
		private static NetworkWriter s_FragmentWriter; // 0x18
		private bool m_Disposed; // 0x60
		internal NetBuffer fragmentBuffer; // 0x68
		private bool readingFragment; // 0x70
	
		// Properties
		public int numBufferedPerSecond { [CompilerGenerated] /* 0x003DC5A8-0x003DC5B8 */ get; [CompilerGenerated] /* 0x003DC5B8-0x003DC5C8 */ private set; } // 0x005BF50C-0x005BF514 0x005BF514-0x005BF51C
		private int lastBufferedPerSecond { [CompilerGenerated] /* 0x003DC5C8-0x003DC5D8 */ set; } // 0x005BF51C-0x005BF524
	
		// Constructors
		public ChannelBuffer(NetworkConnection conn, int bufferSize, byte cid, bool isReliable, bool isSequenced); // 0x005BF27C-0x005BF434
		static ChannelBuffer(); // 0x005C1508-0x005C1740
	
		// Methods
		public void Dispose(); // 0x005BF524-0x005BF5A0
		protected virtual void Dispose(bool disposing); // 0x005BF5A0-0x005BF784
		public bool SetOption(ChannelOption option, int value); // 0x005BF784-0x005BFBB8
		public void CheckInternalBuffer(); // 0x005BFC28-0x005BFCAC
		public bool SendWriter(NetworkWriter writer); // 0x005BFF08-0x005BFFE4
		internal bool HandleFragment(NetworkReader reader); // 0x005C0694-0x005C0764
		internal bool SendFragmentBytes(byte[] bytes, int bytesToSend); // 0x005C08B8-0x005C10B0
		internal bool SendBytes(byte[] bytes, int bytesToSend); // 0x005BFFE4-0x005C0694
		private void QueuePacket(); // 0x005C10B0-0x005C119C
		private ChannelPacket AllocPacket(); // 0x005C119C-0x005C138C
		private static void FreePacket(ChannelPacket packet); // 0x005C138C-0x005C1498
		public bool SendInternalBuffer(); // 0x005BFCAC-0x005BFF08
	}

	internal struct ChannelPacket // TypeDefIndex: 3064
	{
		// Fields
		private int m_Position; // 0x00
		private byte[] m_Buffer; // 0x08
		private bool m_IsReliable; // 0x10
	
		// Constructors
		public ChannelPacket(int packetSize, bool isReliable); // 0x005C1740-0x005C174C
	
		// Methods
		public void Reset(); // 0x005C174C-0x005C1754
		public bool IsEmpty(); // 0x005C1754-0x005C1764
		public void Write(byte[] bytes, int numBytes); // 0x005C1764-0x005C17AC
		public bool HasSpace(int numBytes); // 0x005C17AC-0x005C17F4
		public bool SendToTransport(NetworkConnection conn, int channelId); // 0x005C17F4-0x005C17FC
	}

	[Obsolete] // 0x003DACD4-0x003DAD0C
	public class ClientScene // TypeDefIndex: 3065
	{
		// Fields
		private static List<UnityEngine.Networking.PlayerController> s_LocalPlayers; // 0x00
		private static NetworkConnection s_ReadyConnection; // 0x08
		private static Dictionary<NetworkSceneId, NetworkIdentity> s_SpawnableObjects; // 0x10
		private static bool s_IsReady; // 0x18
		private static bool s_IsSpawnFinished; // 0x19
		private static NetworkScene s_NetworkScene; // 0x20
		private static ObjectSpawnSceneMessage s_ObjectSpawnSceneMessage; // 0x28
		private static ObjectSpawnFinishedMessage s_ObjectSpawnFinishedMessage; // 0x30
		private static ObjectDestroyMessage s_ObjectDestroyMessage; // 0x38
		private static ObjectSpawnMessage s_ObjectSpawnMessage; // 0x40
		private static OwnerMessage s_OwnerMessage; // 0x48
		private static ClientAuthorityMessage s_ClientAuthorityMessage; // 0x50
		private static int s_ReconnectId; // 0x58
		private static PeerInfoMessage[] s_Peers; // 0x60
		private static List<PendingOwner> s_PendingOwnerIds; // 0x68
		[CompilerGenerated] // 0x003DBCD8-0x003DBCE8
		private static NetworkMessageDelegate <>f__mg$cache0; // 0x70
		[CompilerGenerated] // 0x003DBCE8-0x003DBCF8
		private static NetworkMessageDelegate <>f__mg$cache1; // 0x78
		[CompilerGenerated] // 0x003DBCF8-0x003DBD08
		private static NetworkMessageDelegate <>f__mg$cache2; // 0x80
		[CompilerGenerated] // 0x003DBD08-0x003DBD18
		private static NetworkMessageDelegate <>f__mg$cache3; // 0x88
		[CompilerGenerated] // 0x003DBD18-0x003DBD28
		private static NetworkMessageDelegate <>f__mg$cache4; // 0x90
		[CompilerGenerated] // 0x003DBD28-0x003DBD38
		private static NetworkMessageDelegate <>f__mg$cache5; // 0x98
		[CompilerGenerated] // 0x003DBD38-0x003DBD48
		private static NetworkMessageDelegate <>f__mg$cache6; // 0xA0
		[CompilerGenerated] // 0x003DBD48-0x003DBD58
		private static NetworkMessageDelegate <>f__mg$cache7; // 0xA8
		[CompilerGenerated] // 0x003DBD58-0x003DBD68
		private static NetworkMessageDelegate <>f__mg$cache8; // 0xB0
		[CompilerGenerated] // 0x003DBD68-0x003DBD78
		private static NetworkMessageDelegate <>f__mg$cache9; // 0xB8
		[CompilerGenerated] // 0x003DBD78-0x003DBD88
		private static NetworkMessageDelegate <>f__mg$cacheA; // 0xC0
		[CompilerGenerated] // 0x003DBD88-0x003DBD98
		private static NetworkMessageDelegate <>f__mg$cacheB; // 0xC8
		[CompilerGenerated] // 0x003DBD98-0x003DBDA8
		private static NetworkMessageDelegate <>f__mg$cacheC; // 0xD0
		[CompilerGenerated] // 0x003DBDA8-0x003DBDB8
		private static NetworkMessageDelegate <>f__mg$cacheD; // 0xD8
		[CompilerGenerated] // 0x003DBDB8-0x003DBDC8
		private static NetworkMessageDelegate <>f__mg$cacheE; // 0xE0
		[CompilerGenerated] // 0x003DBDC8-0x003DBDD8
		private static NetworkMessageDelegate <>f__mg$cacheF; // 0xE8
		[CompilerGenerated] // 0x003DBDD8-0x003DBDE8
		private static NetworkMessageDelegate <>f__mg$cache10; // 0xF0
		[CompilerGenerated] // 0x003DBDE8-0x003DBDF8
		private static NetworkMessageDelegate <>f__mg$cache11; // 0xF8
		[CompilerGenerated] // 0x003DBDF8-0x003DBE08
		private static NetworkMessageDelegate <>f__mg$cache12; // 0x100
	
		// Properties
		public static List<UnityEngine.Networking.PlayerController> localPlayers { get; } // 0x005C1A64-0x005C1ACC 
		public static bool ready { get; } // 0x005C1ACC-0x005C1B34 
		public static NetworkConnection readyConnection { get; } // 0x005C1B34-0x005C1B9C 
		public static Dictionary<NetworkInstanceId, NetworkIdentity> objects { get; } // 0x005C1B9C-0x005C1C18 
	
		// Nested types
		private struct PendingOwner // TypeDefIndex: 3066
		{
			// Fields
			public NetworkInstanceId netId; // 0x00
			public short playerControllerId; // 0x04
		}
	
		// Constructors
		static ClientScene(); // 0x005CCC20-0x005CCDE8
	
		// Methods
		private static bool hasMigrationPending(); // 0x005C180C-0x005C187C
		public static void SetReconnectId(int newReconnectId, PeerInfoMessage[] peers); // 0x005C187C-0x005C198C
		internal static void SetNotReady(); // 0x005C19FC-0x005C1A64
		internal static void InternalAddPlayer(NetworkIdentity view, short playerControllerId); // 0x005C1C18-0x005C1FF8
		public static bool AddPlayer(short playerControllerId); // 0x005C20F0-0x005C2158
		public static bool AddPlayer(NetworkConnection readyConn, short playerControllerId); // 0x005C2158-0x005C21D0
		public static bool AddPlayer(NetworkConnection readyConn, short playerControllerId, MessageBase extraMessage); // 0x005C21D0-0x005C2B4C
		public static bool SendReconnectMessage(MessageBase extraMessage); // 0x005C2CB8-0x005C315C
		public static bool RemovePlayer(short playerControllerId); // 0x005C315C-0x005C3618
		public static bool Ready(NetworkConnection conn); // 0x005C37F0-0x005C3A10
		public static NetworkClient ConnectLocalServer(); // 0x005C3A10-0x005C3AC0
		internal static NetworkClient ReconnectLocalServer(); // 0x005C3D38-0x005C3DE8
		internal static void ClearLocalPlayers(); // 0x005C3DE8-0x005C3E6C
		internal static void HandleClientDisconnect(NetworkConnection conn); // 0x005C3E6C-0x005C3F2C
		internal static void PrepareToSpawnSceneObjects(); // 0x005C3F2C-0x005C41EC
		internal static NetworkIdentity SpawnSceneObject(NetworkSceneId sceneId); // 0x005C41F4-0x005C431C
		internal static void RegisterSystemHandlers(NetworkClient client, bool localClient); // 0x005C431C-0x005C4F34
		public static void RegisterPrefab(GameObject prefab); // 0x005C4F7C-0x005C4FE4
		public static void DestroyAllClientObjects(); // 0x005C4FE4-0x005C6060
		public static void SetLocalObject(NetworkInstanceId netId, GameObject obj); // 0x005C6060-0x005C6104
		public static GameObject FindLocalObject(NetworkInstanceId netId); // 0x005C6104-0x005C6188
		private static void ApplySpawnPayload(NetworkIdentity uv, Vector3 position, byte[] payload, NetworkInstanceId netId, GameObject newGameObject, NetworkMessage netMsg); // 0x005C6188-0x005C63D8
		private static void OnObjectSpawn(NetworkMessage netMsg); // 0x005C6D40-0x005C8058
		private static void OnObjectSpawnScene(NetworkMessage netMsg); // 0x005C828C-0x005C8C44
		private static void OnObjectSpawnFinished(NetworkMessage netMsg); // 0x005C8C44-0x005C8F64
		private static void OnObjectDestroy(NetworkMessage netMsg); // 0x005C8F6C-0x005C93F0
		private static void OnLocalClientObjectDestroy(NetworkMessage netMsg); // 0x005C9498-0x005C9648
		private static void OnLocalClientObjectHide(NetworkMessage netMsg); // 0x005C9648-0x005C9828
		private static void OnLocalClientObjectSpawn(NetworkMessage netMsg); // 0x005C9A20-0x005C9B1C
		private static void OnLocalClientObjectSpawnScene(NetworkMessage netMsg); // 0x005C9B1C-0x005C9C14
		private static void OnUpdateVarsMessage(NetworkMessage netMsg); // 0x005C9C14-0x005C9F9C
		private static void OnRPCMessage(NetworkMessage netMsg); // 0x005CA00C-0x005CA478
		private static void OnSyncEventMessage(NetworkMessage netMsg); // 0x005CAD60-0x005CAF9C
		private static void OnSyncListMessage(NetworkMessage netMsg); // 0x005CB730-0x005CB96C
		private static void OnClientAuthority(NetworkMessage netMsg); // 0x005CC100-0x005CC49C
		private static void OnOwnerMessage(NetworkMessage netMsg); // 0x005CC5A4-0x005CCA90
		private static void CheckForOwner(NetworkIdentity uv); // 0x005C6A1C-0x005C6D40
	}

	[AttributeUsage] // 0x003DAD0C-0x003DAD5C
	[Obsolete] // 0x003DAD0C-0x003DAD5C
	public class CommandAttribute : Attribute // TypeDefIndex: 3067
	{
		// Fields
		public int channel; // 0x10
	
		// Constructors
		public CommandAttribute(); // 0x005CCDE8-0x005CCDF4
	}

	[AttributeUsage] // 0x003DAD5C-0x003DADAC
	[Obsolete] // 0x003DAD5C-0x003DADAC
	public class ClientAttribute : Attribute // TypeDefIndex: 3068
	{
		// Constructors
		public ClientAttribute(); // 0x005C17FC-0x005C1804
	}

	[AttributeUsage] // 0x003DADAC-0x003DADFC
	[Obsolete] // 0x003DADAC-0x003DADFC
	public class ClientCallbackAttribute : Attribute // TypeDefIndex: 3069
	{
		// Constructors
		public ClientCallbackAttribute(); // 0x005C1804-0x005C180C
	}

	[Obsolete] // 0x003DADFC-0x003DAE34
	internal class DefaultNetworkTransport : INetworkTransport // TypeDefIndex: 3070
	{
		// Properties
		public bool IsStarted { get; } // 0x005CCDFC-0x005CCE5C 
	
		// Constructors
		public DefaultNetworkTransport(); // 0x005CCDF4-0x005CCDFC
	
		// Methods
		public int AddHost(HostTopology topology, int port, string ip); // 0x005CCE5C-0x005CCEDC
		public int AddHostWithSimulator(HostTopology topology, int minTimeout, int maxTimeout, int port); // 0x005CCEDC-0x005CCF6C
		public int AddWebsocketHost(HostTopology topology, int port, string ip); // 0x005CCF6C-0x005CCFEC
		public int Connect(int hostId, string address, int port, int specialConnectionId, out byte error); // 0x005CCFEC-0x005CD084
		public void ConnectAsNetworkHost(int hostId, string address, int port, NetworkID network, SourceID source, NodeID node, out byte error); // 0x005CD084-0x005CD134
		public int ConnectEndPoint(int hostId, EndPoint endPoint, int specialConnectionId, out byte error); // 0x005CD134-0x005CD1C4
		public int ConnectToNetworkPeer(int hostId, string address, int port, int specialConnectionId, int relaySlotId, NetworkID network, SourceID source, NodeID node, out byte error); // 0x005CD1C4-0x005CD288
		public int ConnectWithSimulator(int hostId, string address, int port, int specialConnectionId, out byte error, ConnectionSimulatorConfig conf); // 0x005CD288-0x005CD330
		public bool Disconnect(int hostId, int connectionId, out byte error); // 0x005CD330-0x005CD3B0
		public bool DoesEndPointUsePlatformProtocols(EndPoint endPoint); // 0x005CD3B0-0x005CD418
		public void GetBroadcastConnectionInfo(int hostId, out string address, out int port, out byte error); // 0x005CD418-0x005CD4A8
		public void GetBroadcastConnectionMessage(int hostId, byte[] buffer, int bufferSize, out int receivedSize, out byte error); // 0x005CD4A8-0x005CD540
		public void GetConnectionInfo(int hostId, int connectionId, out string address, out int port, out NetworkID network, out NodeID dstNode, out byte error); // 0x005CD540-0x005CD5F0
		public void Init(); // 0x005CD5F0-0x005CD650
		public void Init(GlobalConfig config); // 0x005CD650-0x005CD6B8
		public NetworkEventType ReceiveFromHost(int hostId, out int connectionId, out int channelId, byte[] buffer, int bufferSize, out int receivedSize, out byte error); // 0x005CD6B8-0x005CD768
		public NetworkEventType ReceiveRelayEventFromHost(int hostId, out byte error); // 0x005CD768-0x005CD7E0
		public bool RemoveHost(int hostId); // 0x005CD7E0-0x005CD848
		public bool Send(int hostId, int connectionId, int channelId, byte[] buffer, int size, out byte error); // 0x005CD848-0x005CD8F0
		public void SetBroadcastCredentials(int hostId, int key, int version, int subversion, out byte error); // 0x005CD8F0-0x005CD988
		public bool StartBroadcastDiscovery(int hostId, int broadcastPort, int key, int version, int subversion, byte[] buffer, int size, int timeout, out byte error); // 0x005CD988-0x005CDA4C
		public void StopBroadcastDiscovery(); // 0x005CDA4C-0x005CDAAC
	}

	internal static class DotNetCompatibility // TypeDefIndex: 3071
	{
		// Extension methods
		internal static string GetMethodName(this Delegate func); // 0x005CDAAC-0x005CDAF4
		internal static string GetErrorCode(this SocketException e); // 0x005CDAF4-0x005CDB3C
	}

	[Obsolete] // 0x003DAE44-0x003DAE7C
	public interface INetworkTransport // TypeDefIndex: 3072
	{
		// Properties
		bool IsStarted { get; }
	
		// Methods
		void Init();
		void Init(GlobalConfig config);
		int AddHost(HostTopology topology, int port, string ip);
		int AddWebsocketHost(HostTopology topology, int port, string ip);
		int ConnectWithSimulator(int hostId, string address, int port, int specialConnectionId, out byte error, ConnectionSimulatorConfig conf);
		int Connect(int hostId, string address, int port, int specialConnectionId, out byte error);
		void ConnectAsNetworkHost(int hostId, string address, int port, NetworkID network, SourceID source, NodeID node, out byte error);
		int ConnectToNetworkPeer(int hostId, string address, int port, int specialConnectionId, int relaySlotId, NetworkID network, SourceID source, NodeID node, out byte error);
		int ConnectEndPoint(int hostId, EndPoint endPoint, int specialConnectionId, out byte error);
		bool DoesEndPointUsePlatformProtocols(EndPoint endPoint);
		int AddHostWithSimulator(HostTopology topology, int minTimeout, int maxTimeout, int port);
		bool RemoveHost(int hostId);
		bool Send(int hostId, int connectionId, int channelId, byte[] buffer, int size, out byte error);
		NetworkEventType ReceiveFromHost(int hostId, out int connectionId, out int channelId, byte[] buffer, int bufferSize, out int receivedSize, out byte error);
		NetworkEventType ReceiveRelayEventFromHost(int hostId, out byte error);
		void GetConnectionInfo(int hostId, int connectionId, out string address, out int port, out NetworkID network, out NodeID dstNode, out byte error);
		bool Disconnect(int hostId, int connectionId, out byte error);
		void SetBroadcastCredentials(int hostId, int key, int version, int subversion, out byte error);
		bool StartBroadcastDiscovery(int hostId, int broadcastPort, int key, int version, int subversion, byte[] buffer, int size, int timeout, out byte error);
		void GetBroadcastConnectionInfo(int hostId, out string address, out int port, out byte error);
		void GetBroadcastConnectionMessage(int hostId, byte[] buffer, int bufferSize, out int receivedSize, out byte error);
		void StopBroadcastDiscovery();
	}

	internal sealed class LocalClient : NetworkClient // TypeDefIndex: 3073
	{
		// Fields
		private List<InternalMsg> m_InternalMsgs; // 0x80
		private List<InternalMsg> m_InternalMsgs2; // 0x88
		private Stack<InternalMsg> m_FreeMessages; // 0x90
		private NetworkServer m_LocalServer; // 0x98
		private bool m_Connected; // 0xA0
		private NetworkMessage s_InternalMessage; // 0xA8
	
		// Nested types
		private struct InternalMsg // TypeDefIndex: 3074
		{
			// Fields
			internal byte[] buffer; // 0x00
			internal int channelId; // 0x08
		}
	
		// Constructors
		public LocalClient(); // 0x005C3AC0-0x005C3B8C
	
		// Methods
		public override void Disconnect(); // 0x005CDD14-0x005CDDC8
		internal void InternalConnectLocalServer(bool generateConnectMsg); // 0x005C3B8C-0x005C3D38
		internal override void Update(); // 0x005CE178-0x005CE17C
		internal void AddLocalPlayer(UnityEngine.Networking.PlayerController localPlayer); // 0x005CE4BC-0x005CE820
		private void PostInternalMessage(byte[] buffer, int channelId); // 0x005CE820-0x005CE8F8
		private void PostInternalMessage(short msgType); // 0x005CDDC8-0x005CDEA0
		private void ProcessInternalMessages(); // 0x005CE17C-0x005CE4BC
		internal void InvokeHandlerOnClient(short msgType, MessageBase msg, int channelId); // 0x005CE9DC-0x005CEAD8
		internal void InvokeBytesOnClient(byte[] buffer, int channelId); // 0x005CEAD8-0x005CEC68
	}

	internal class ULocalConnectionToClient : NetworkConnection // TypeDefIndex: 3075
	{
		// Fields
		private LocalClient m_LocalClient; // 0x88
	
		// Properties
		public LocalClient localClient { get; } // 0x00C3A5A8-0x00C3A5B0 
	
		// Constructors
		public ULocalConnectionToClient(LocalClient localClient); // 0x00C3A53C-0x00C3A5A8
	
		// Methods
		public override bool Send(short msgType, MessageBase msg); // 0x00C3A5B0-0x00C3A604
		public override bool SendByChannel(short msgType, MessageBase msg, int channelId); // 0x00C3A604-0x00C3A65C
		public override bool SendBytes(byte[] bytes, int numBytes, int channelId); // 0x00C3A65C-0x00C3A6AC
		public override bool SendWriter(NetworkWriter writer, int channelId); // 0x00C3A6AC-0x00C3A714
	}

	internal class ULocalConnectionToServer : NetworkConnection // TypeDefIndex: 3076
	{
		// Fields
		private NetworkServer m_LocalServer; // 0x88
	
		// Constructors
		public ULocalConnectionToServer(NetworkServer localServer); // 0x00C3A714-0x00C3A780
	
		// Methods
		public override bool Send(short msgType, MessageBase msg); // 0x00C3A780-0x00C3A7D4
		public override bool SendByChannel(short msgType, MessageBase msg, int channelId); // 0x00C3A7D4-0x00C3A834
		public override bool SendBytes(byte[] bytes, int numBytes, int channelId); // 0x00C3A834-0x00C3A938
		public override bool SendWriter(NetworkWriter writer, int channelId); // 0x00C3A938-0x00C3A9E0
	}

	[Obsolete] // 0x003DAE7C-0x003DAEB4
	public class LogFilter // TypeDefIndex: 3077
	{
		// Fields
		[Obsolete] // 0x003DBE08-0x003DBE40
		public static FilterLevel current; // 0x00
		private static int s_CurrentLogLevel; // 0x04
	
		// Properties
		public static int currentLogLevel { set; } // 0x005CEC68-0x005CECD4
		internal static bool logDev { get; } // 0x005C9F9C-0x005CA00C 
		public static bool logDebug { get; } // 0x005C198C-0x005C19FC 
		public static bool logInfo { get; } // 0x005CECD4-0x005CED44 
		public static bool logWarn { get; } // 0x005C1498-0x005C1508 
		public static bool logError { get; } // 0x005BFBB8-0x005BFC28 
	
		// Nested types
		public enum FilterLevel // TypeDefIndex: 3078
		{
			SetInScripting = -1,
			Developer = 0,
			Debug = 1,
			Info = 2,
			Warn = 3,
			Error = 4,
			Fatal = 5
		}
	
		// Constructors
		static LogFilter(); // 0x005CED44-0x005CEDA4
	}

	[Obsolete] // 0x003DAEB4-0x003DAEEC
	public abstract class MessageBase // TypeDefIndex: 3079
	{
		// Constructors
		protected MessageBase(); // 0x005CEDA4-0x005CEDAC
	
		// Methods
		public virtual void Deserialize(NetworkReader reader); // 0x005CEDAC-0x005CEDB0
		public virtual void Serialize(NetworkWriter writer); // 0x005CEDB0-0x005CEDB4
	}
}

namespace UnityEngine.Networking.NetworkSystem
{
	[Obsolete] // 0x003DAEEC-0x003DAF24
	public class StringMessage : MessageBase // TypeDefIndex: 3080
	{
		// Fields
		public string value; // 0x10
	
		// Constructors
		public StringMessage(string v); // 0x00C314B0-0x00C314DC
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00C314DC-0x00C31518
		public override void Serialize(NetworkWriter writer); // 0x00C31518-0x00C3154C
	}

	[Obsolete] // 0x003DAF24-0x003DAF5C
	public class IntegerMessage : MessageBase // TypeDefIndex: 3081
	{
		// Fields
		public int value; // 0x10
	
		// Constructors
		public IntegerMessage(); // 0x00C2FC98-0x00C2FCA0
		public IntegerMessage(int v); // 0x00C2FCA0-0x00C2FCCC
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00C2FCCC-0x00C2FD08
		public override void Serialize(NetworkWriter writer); // 0x00C2FD08-0x00C2FD3C
	}

	[Obsolete] // 0x003DAF5C-0x003DAF94
	public class EmptyMessage : MessageBase // TypeDefIndex: 3082
	{
		// Constructors
		public EmptyMessage(); // 0x00C2FC0C-0x00C2FC14
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00C2FC14-0x00C2FC18
		public override void Serialize(NetworkWriter writer); // 0x00C2FC18-0x00C2FC1C
	}

	[Obsolete] // 0x003DAF94-0x003DAFCC
	public class ErrorMessage : MessageBase // TypeDefIndex: 3083
	{
		// Fields
		public int errorCode; // 0x10
	
		// Constructors
		public ErrorMessage(); // 0x00C2FC1C-0x00C2FC24
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00C2FC24-0x00C2FC64
		public override void Serialize(NetworkWriter writer); // 0x00C2FC64-0x00C2FC98
	}

	[Obsolete] // 0x003DAFCC-0x003DB004
	public class ReadyMessage : EmptyMessage // TypeDefIndex: 3084
	{
		// Constructors
		public ReadyMessage(); // 0x00C312A4-0x00C312AC
	}

	[Obsolete] // 0x003DB004-0x003DB03C
	public class NotReadyMessage : EmptyMessage // TypeDefIndex: 3085
	{
		// Constructors
		public NotReadyMessage(); // 0x00C2FE10-0x00C2FE18
	}

	[Obsolete] // 0x003DB03C-0x003DB074
	public class AddPlayerMessage : MessageBase // TypeDefIndex: 3086
	{
		// Fields
		public short playerControllerId; // 0x10
		public int msgSize; // 0x14
		public byte[] msgData; // 0x18
	
		// Constructors
		public AddPlayerMessage(); // 0x00C2EDA8-0x00C2EDB0
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00C2EDB0-0x00C2EE2C
		public override void Serialize(NetworkWriter writer); // 0x00C2EE2C-0x00C2EE90
	}

	[Obsolete] // 0x003DB074-0x003DB0AC
	public class RemovePlayerMessage : MessageBase // TypeDefIndex: 3087
	{
		// Fields
		public short playerControllerId; // 0x10
	
		// Constructors
		public RemovePlayerMessage(); // 0x00C31438-0x00C31440
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00C31440-0x00C3147C
		public override void Serialize(NetworkWriter writer); // 0x00C3147C-0x00C314B0
	}

	[Obsolete] // 0x003DB0AC-0x003DB0E4
	public class PeerAuthorityMessage : MessageBase // TypeDefIndex: 3088
	{
		// Fields
		public int connectionId; // 0x10
		public NetworkInstanceId netId; // 0x14
		public bool authorityState; // 0x18
	
		// Constructors
		public PeerAuthorityMessage(); // 0x00C306F0-0x00C306F8
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00C306F8-0x00C30780
		public override void Serialize(NetworkWriter writer); // 0x00C30780-0x00C30820
	}

	[Obsolete] // 0x003DB0E4-0x003DB11C
	public struct PeerInfoPlayer // TypeDefIndex: 3089
	{
		// Fields
		public NetworkInstanceId netId; // 0x00
		public short playerControllerId; // 0x04
	}

	[Obsolete] // 0x003DB11C-0x003DB154
	public class PeerInfoMessage : MessageBase // TypeDefIndex: 3090
	{
		// Fields
		public int connectionId; // 0x10
		public string address; // 0x18
		public int port; // 0x20
		public bool isHost; // 0x24
		public bool isYou; // 0x25
		public PeerInfoPlayer[] playerIds; // 0x28
	
		// Constructors
		public PeerInfoMessage(); // 0x00C30820-0x00C30828
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00C30828-0x00C30A30
		public override void Serialize(NetworkWriter writer); // 0x00C30A30-0x00C30C28
		public override string ToString(); // 0x00C30C28-0x00C31020
	}

	[Obsolete] // 0x003DB154-0x003DB18C
	public class PeerListMessage : MessageBase // TypeDefIndex: 3091
	{
		// Fields
		public PeerInfoMessage[] peers; // 0x10
		public int oldServerConnectionId; // 0x18
	
		// Constructors
		public PeerListMessage(); // 0x00C31020-0x00C31028
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00C31028-0x00C311A8
		public override void Serialize(NetworkWriter writer); // 0x00C311A8-0x00C312A4
	}

	[Obsolete] // 0x003DB18C-0x003DB1C4
	public class ReconnectMessage : MessageBase // TypeDefIndex: 3092
	{
		// Fields
		public int oldConnectionId; // 0x10
		public short playerControllerId; // 0x14
		public NetworkInstanceId netId; // 0x18
		public int msgSize; // 0x1C
		public byte[] msgData; // 0x20
	
		// Constructors
		public ReconnectMessage(); // 0x00C312AC-0x00C312B4
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00C312B4-0x00C31378
		public override void Serialize(NetworkWriter writer); // 0x00C31378-0x00C31438
	}

	internal class ObjectSpawnMessage : MessageBase // TypeDefIndex: 3093
	{
		// Fields
		public NetworkInstanceId netId; // 0x10
		public NetworkHash128 assetId; // 0x14
		public Vector3 position; // 0x24
		public byte[] payload; // 0x30
		public Quaternion rotation; // 0x38
	
		// Constructors
		public ObjectSpawnMessage(); // 0x00C2FF24-0x00C2FF2C
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00C2FF2C-0x00C3006C
		public override void Serialize(NetworkWriter writer); // 0x00C3006C-0x00C3016C
	}

	internal class ObjectSpawnSceneMessage : MessageBase // TypeDefIndex: 3094
	{
		// Fields
		public NetworkInstanceId netId; // 0x10
		public NetworkSceneId sceneId; // 0x14
		public Vector3 position; // 0x18
		public byte[] payload; // 0x28
	
		// Constructors
		public ObjectSpawnSceneMessage(); // 0x00C3043C-0x00C30444
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00C30444-0x00C304FC
		public override void Serialize(NetworkWriter writer); // 0x00C304FC-0x00C305D8
	}

	internal class ObjectSpawnFinishedMessage : MessageBase // TypeDefIndex: 3095
	{
		// Fields
		public uint state; // 0x10
	
		// Constructors
		public ObjectSpawnFinishedMessage(); // 0x00C2FEAC-0x00C2FEB4
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00C2FEB4-0x00C2FEF0
		public override void Serialize(NetworkWriter writer); // 0x00C2FEF0-0x00C2FF24
	}

	internal class ObjectDestroyMessage : MessageBase // TypeDefIndex: 3096
	{
		// Fields
		public NetworkInstanceId netId; // 0x10
	
		// Constructors
		public ObjectDestroyMessage(); // 0x00C2FE18-0x00C2FE20
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00C2FE20-0x00C2FE5C
		public override void Serialize(NetworkWriter writer); // 0x00C2FE5C-0x00C2FEAC
	}

	internal class OwnerMessage : MessageBase // TypeDefIndex: 3097
	{
		// Fields
		public NetworkInstanceId netId; // 0x10
		public short playerControllerId; // 0x14
	
		// Constructors
		public OwnerMessage(); // 0x00C30610-0x00C30618
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00C30618-0x00C30680
		public override void Serialize(NetworkWriter writer); // 0x00C30680-0x00C306F0
	}

	internal class ClientAuthorityMessage : MessageBase // TypeDefIndex: 3098
	{
		// Fields
		public NetworkInstanceId netId; // 0x10
		public bool authority; // 0x14
	
		// Constructors
		public ClientAuthorityMessage(); // 0x00C2FAD8-0x00C2FAE0
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00C2FAE0-0x00C2FB4C
		public override void Serialize(NetworkWriter writer); // 0x00C2FB4C-0x00C2FBC0
	}

	internal class AnimationMessage : MessageBase // TypeDefIndex: 3099
	{
		// Fields
		public NetworkInstanceId netId; // 0x10
		public int stateHash; // 0x14
		public float normalizedTime; // 0x18
		public byte[] parameters; // 0x20
	
		// Constructors
		public AnimationMessage(); // 0x00C2F030-0x00C2F038
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00C2F038-0x00C2F0F0
		public override void Serialize(NetworkWriter writer); // 0x00C2F0F0-0x00C2F1DC
	}

	internal class AnimationParametersMessage : MessageBase // TypeDefIndex: 3100
	{
		// Fields
		public NetworkInstanceId netId; // 0x10
		public byte[] parameters; // 0x18
	
		// Constructors
		public AnimationParametersMessage(); // 0x00C2F36C-0x00C2F374
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00C2F374-0x00C2F3DC
		public override void Serialize(NetworkWriter writer); // 0x00C2F3DC-0x00C2F470
	}

	internal class AnimationTriggerMessage : MessageBase // TypeDefIndex: 3101
	{
		// Fields
		public NetworkInstanceId netId; // 0x10
		public int hash; // 0x14
	
		// Constructors
		public AnimationTriggerMessage(); // 0x00C2F470-0x00C2F478
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00C2F478-0x00C2F4E0
		public override void Serialize(NetworkWriter writer); // 0x00C2F4E0-0x00C2F550
	}

	internal class LobbyReadyToBeginMessage : MessageBase // TypeDefIndex: 3102
	{
		// Fields
		public byte slotId; // 0x10
		public bool readyState; // 0x11
	
		// Constructors
		public LobbyReadyToBeginMessage(); // 0x00C2FD3C-0x00C2FD44
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00C2FD44-0x00C2FDB0
		public override void Serialize(NetworkWriter writer); // 0x00C2FDB0-0x00C2FE10
	}

	internal struct CRCMessageEntry // TypeDefIndex: 3103
	{
		// Fields
		public string name; // 0x00
		public byte channel; // 0x08
	}

	internal class CRCMessage : MessageBase // TypeDefIndex: 3104
	{
		// Fields
		public CRCMessageEntry[] scripts; // 0x10
	
		// Constructors
		public CRCMessage(); // 0x00C2F550-0x00C2F558
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00C2F558-0x00C2F6E8
		public override void Serialize(NetworkWriter writer); // 0x00C2F6E8-0x00C2F80C
	}
}

namespace UnityEngine.Networking
{
	[AddComponentMenu] // 0x003DB1C4-0x003DB2A8
	[DisallowMultipleComponent] // 0x003DB1C4-0x003DB2A8
	[Obsolete] // 0x003DB1C4-0x003DB2A8
	[RequireComponent] // 0x003DB1C4-0x003DB2A8
	[RequireComponent] // 0x003DB1C4-0x003DB2A8
	public class NetworkAnimator : NetworkBehaviour // TypeDefIndex: 3105
	{
		// Fields
		[SerializeField] // 0x003DBE40-0x003DBE50
		private Animator m_Animator; // 0x30
		[SerializeField] // 0x003DBE50-0x003DBE60
		private uint m_ParameterSendBits; // 0x38
		private static AnimationMessage s_AnimationMessage; // 0x00
		private static AnimationParametersMessage s_AnimationParametersMessage; // 0x08
		private static AnimationTriggerMessage s_AnimationTriggerMessage; // 0x10
		private int m_AnimationHash; // 0x3C
		private int m_TransitionHash; // 0x40
		private NetworkWriter m_ParameterWriter; // 0x48
		private float m_SendTimer; // 0x50
		public string param0; // 0x58
		public string param1; // 0x60
		public string param2; // 0x68
		public string param3; // 0x70
		public string param4; // 0x78
		public string param5; // 0x80
	
		// Properties
		public Animator animator { get; set; } // 0x005D091C-0x005D0924 0x005D0924-0x005D092C
		private bool sendMessagesAllowed { get; } // 0x005D09E8-0x005D0AB4 
	
		// Constructors
		public NetworkAnimator(); // 0x005D08AC-0x005D0914
		static NetworkAnimator(); // 0x005D32D8-0x005D3394
	
		// Methods
		public void SetParameterAutoSend(int index, bool value); // 0x005D09A4-0x005D09CC
		public bool GetParameterAutoSend(int index); // 0x005D09CC-0x005D09E8
		internal void ResetParameterOptions(); // 0x005D092C-0x005D09A4
		private void FixedUpdate(); // 0x005D0B44-0x005D0CB8
		private bool CheckAnimStateChanged(out int stateHash, out float normalizedTime); // 0x005D0E10-0x005D0F70
		private void CheckSendRate(); // 0x005D0CB8-0x005D0E10
		private void SendMessage(short type, MessageBase msg); // 0x005D1440-0x005D1564
		private void SetSendTrackingParam(string p, int i); // 0x005D1564-0x005D161C
		private void SetRecvTrackingParam(string p, int i); // 0x005D161C-0x005D16D4
		internal void HandleAnimMsg(AnimationMessage msg, NetworkReader reader); // 0x005D16D4-0x005D177C
		internal void HandleAnimParamsMsg(AnimationParametersMessage msg, NetworkReader reader); // 0x005D1B24-0x005D1B64
		internal void HandleAnimTriggerMsg(int hash); // 0x005D1B64-0x005D1B9C
		private void WriteParameters(NetworkWriter writer, bool autoSend); // 0x005D0F9C-0x005D1440
		private void ReadParameters(NetworkReader reader, bool autoSend); // 0x005D177C-0x005D1B24
		public override bool OnSerialize(NetworkWriter writer, bool forceAll); // 0x005D1B9C-0x005D1D1C
		public override void OnDeserialize(NetworkReader reader, bool initialState); // 0x005D1D1C-0x005D1DE0
		public void SetTrigger(string triggerName); // 0x005D1DE0-0x005D1E10
		public void SetTrigger(int hash); // 0x005D1E10-0x005D1FC4
		internal static void OnAnimationServerMessage(NetworkMessage netMsg); // 0x005D202C-0x005D2494
		internal static void OnAnimationParametersServerMessage(NetworkMessage netMsg); // 0x005D2494-0x005D28FC
		internal static void OnAnimationTriggerServerMessage(NetworkMessage netMsg); // 0x005D28FC-0x005D2D2C
		internal static void OnAnimationClientMessage(NetworkMessage netMsg); // 0x005D2D2C-0x005D2F20
		internal static void OnAnimationParametersClientMessage(NetworkMessage netMsg); // 0x005D2F20-0x005D3114
		internal static void OnAnimationTriggerClientMessage(NetworkMessage netMsg); // 0x005D3114-0x005D32D8
	}

	[AddComponentMenu] // 0x003DB2A8-0x003DB354
	[Obsolete] // 0x003DB2A8-0x003DB354
	[RequireComponent] // 0x003DB2A8-0x003DB354
	public class NetworkBehaviour : MonoBehaviour // TypeDefIndex: 3106
	{
		// Fields
		private uint m_SyncVarDirtyBits; // 0x18
		private float m_LastSendTime; // 0x1C
		private bool m_SyncVarGuard; // 0x20
		private const float k_DefaultSendInterval = 0.1f; // Metadata: 0x0021BA5A
		private NetworkIdentity m_MyView; // 0x28
		private static Dictionary<int, Invoker> s_CmdHandlerDelegates; // 0x00
	
		// Properties
		public bool localPlayerAuthority { get; } // 0x005D0AE0-0x005D0B0C 
		public bool isServer { get; } // 0x005D0AB4-0x005D0AE0 
		public bool isClient { get; } // 0x005D3540-0x005D356C 
		public bool isLocalPlayer { get; } // 0x005D356C-0x005D3598 
		public bool hasAuthority { get; } // 0x005D0B18-0x005D0B44 
		public NetworkInstanceId netId { get; } // 0x005D0F70-0x005D0F9C 
		public NetworkConnection connectionToServer { get; } // 0x005D35A8-0x005D35D4 
		public NetworkConnection connectionToClient { get; } // 0x005D35DC-0x005D3608 
		public short playerControllerId { get; } // 0x005D3610-0x005D363C 
		protected uint syncVarDirtyBits { get; } // 0x005D3644-0x005D364C 
		protected bool syncVarHookGuard { get; set; } // 0x005D364C-0x005D3654 0x005D3654-0x005D3660
		internal NetworkIdentity netIdentity { get; } // 0x005D0B0C-0x005D0B10 
		private NetworkIdentity myView { get; } // 0x005D3394-0x005D34BC 
	
		// Nested types
		public delegate void CmdDelegate(NetworkBehaviour obj, NetworkReader reader); // TypeDefIndex: 3107; 0x005D5C90-0x005D6410
	
		protected enum UNetInvokeType // TypeDefIndex: 3108
		{
			Command = 0,
			ClientRpc = 1,
			SyncEvent = 2,
			SyncList = 3
		}
	
		protected class Invoker // TypeDefIndex: 3109
		{
			// Fields
			public UNetInvokeType invokeType; // 0x10
			public Type invokeClass; // 0x18
			public CmdDelegate invokeFunction; // 0x20
	
			// Constructors
			public Invoker(); // 0x005D44C4-0x005D44CC
	
			// Methods
			public string DebugString(); // 0x005D4F88-0x005D51B4
		}
	
		// Constructors
		public NetworkBehaviour(); // 0x005D0914-0x005D091C
		static NetworkBehaviour(); // 0x005D6EAC-0x005D6F20
	
		// Methods
		[EditorBrowsable] // 0x003DC5F8-0x003DC60C
		protected void SendCommandInternal(NetworkWriter writer, int channelId, string cmdName); // 0x005D3660-0x005D3854
		[EditorBrowsable] // 0x003DC60C-0x003DC620
		public virtual bool InvokeCommand(int cmdHash, NetworkReader reader); // 0x005D3854-0x005D3858
		[EditorBrowsable] // 0x003DC620-0x003DC634
		protected void SendRPCInternal(NetworkWriter writer, int channelId, string rpcName); // 0x005D39DC-0x005D3B0C
		[EditorBrowsable] // 0x003DC634-0x003DC648
		protected void SendTargetRPCInternal(NetworkConnection conn, NetworkWriter writer, int channelId, string rpcName); // 0x005D3B0C-0x005D3C2C
		[EditorBrowsable] // 0x003DC648-0x003DC65C
		public virtual bool InvokeRPC(int cmdHash, NetworkReader reader); // 0x005D3C2C-0x005D3C30
		[EditorBrowsable] // 0x003DC65C-0x003DC670
		protected void SendEventInternal(NetworkWriter writer, int channelId, string eventName); // 0x005D3DB8-0x005D3F00
		[EditorBrowsable] // 0x003DC670-0x003DC684
		public virtual bool InvokeSyncEvent(int cmdHash, NetworkReader reader); // 0x005D3F00-0x005D3F04
		[EditorBrowsable] // 0x003DC684-0x003DC698
		public virtual bool InvokeSyncList(int cmdHash, NetworkReader reader); // 0x005D403C-0x005D4040
		[EditorBrowsable] // 0x003DC698-0x003DC6AC
		protected static void RegisterCommandDelegate(Type invokeClass, int cmdHash, CmdDelegate func); // 0x005D4190-0x005D44C4
		[EditorBrowsable] // 0x003DC6AC-0x003DC6C0
		protected static void RegisterRpcDelegate(Type invokeClass, int cmdHash, CmdDelegate func); // 0x005D44CC-0x005D4808
		[EditorBrowsable] // 0x003DC6C0-0x003DC6D4
		protected static void RegisterEventDelegate(Type invokeClass, int cmdHash, CmdDelegate func); // 0x005D4808-0x005D4B44
		[EditorBrowsable] // 0x003DC6D4-0x003DC6E8
		protected static void RegisterSyncListDelegate(Type invokeClass, int cmdHash, CmdDelegate func); // 0x005D4B44-0x005D4E80
		internal static string GetInvoker(int cmdHash); // 0x005D4E80-0x005D4F88
		internal static bool GetInvokerForHashCommand(int cmdHash, out Type invokeClass, out CmdDelegate invokeFunction); // 0x005D51B4-0x005D5234
		internal static bool GetInvokerForHashClientRpc(int cmdHash, out Type invokeClass, out CmdDelegate invokeFunction); // 0x005D54BC-0x005D553C
		internal static bool GetInvokerForHashSyncList(int cmdHash, out Type invokeClass, out CmdDelegate invokeFunction); // 0x005D553C-0x005D55BC
		internal static bool GetInvokerForHashSyncEvent(int cmdHash, out Type invokeClass, out CmdDelegate invokeFunction); // 0x005D55BC-0x005D563C
		private static bool GetInvokerForHash(int cmdHash, UNetInvokeType invokeType, out Type invokeClass, out CmdDelegate invokeFunction); // 0x005D5234-0x005D54BC
		internal static void DumpInvokers(); // 0x005D563C-0x005D5C04
		internal bool ContainsCommandDelegate(int cmdHash); // 0x005D5C04-0x005D5C90
		internal bool InvokeCommandDelegate(int cmdHash, NetworkReader reader); // 0x005D3858-0x005D39DC
		internal bool InvokeRpcDelegate(int cmdHash, NetworkReader reader); // 0x005D3C30-0x005D3DB8
		internal bool InvokeSyncEventDelegate(int cmdHash, NetworkReader reader); // 0x005D3F04-0x005D403C
		internal bool InvokeSyncListDelegate(int cmdHash, NetworkReader reader); // 0x005D4040-0x005D4190
		internal static string GetCmdHashHandlerName(int cmdHash); // 0x005CAC0C-0x005CAD60
		private static string GetCmdHashPrefixName(int cmdHash, string prefix); // 0x005D6410-0x005D6594
		internal static string GetCmdHashCmdName(int cmdHash); // 0x005D6594-0x005D6604
		internal static string GetCmdHashRpcName(int cmdHash); // 0x005D6604-0x005D6674
		internal static string GetCmdHashEventName(int cmdHash); // 0x005D6674-0x005D66E4
		internal static string GetCmdHashListName(int cmdHash); // 0x005D66E4-0x005D6754
		[EditorBrowsable] // 0x003DC6E8-0x003DC6FC
		protected void SetSyncVarGameObject(GameObject newGameObject, ref GameObject gameObjectField, uint dirtyBit, ref NetworkInstanceId netIdField); // 0x005D6754-0x005D6D2C
		[EditorBrowsable] // 0x003DC6FC-0x003DC710
		protected void SetSyncVar<T>(T value, ref T fieldValue, uint dirtyBit);
		public void SetDirtyBit(uint dirtyBit); // 0x005D6D2C-0x005D6D3C
		public void ClearAllDirtyBits(); // 0x005D6D3C-0x005D6D68
		internal int GetDirtyChannel(); // 0x005D6D68-0x005D6DE8
		public virtual bool OnSerialize(NetworkWriter writer, bool initialState); // 0x005D6DE8-0x005D6E28
		public virtual void OnDeserialize(NetworkReader reader, bool initialState); // 0x005D6E28-0x005D6E68
		[EditorBrowsable] // 0x003DC710-0x003DC724
		public virtual void PreStartClient(); // 0x005D6E68-0x005D6E6C
		public virtual void OnNetworkDestroy(); // 0x005D6E6C-0x005D6E70
		public virtual void OnStartServer(); // 0x005D6E70-0x005D6E74
		public virtual void OnStartClient(); // 0x005D6E74-0x005D6E78
		public virtual void OnStartLocalPlayer(); // 0x005D6E78-0x005D6E7C
		public virtual void OnStartAuthority(); // 0x005D6E7C-0x005D6E80
		public virtual void OnStopAuthority(); // 0x005D6E80-0x005D6E84
		public virtual bool OnRebuildObservers(HashSet<NetworkConnection> observers, bool initialize); // 0x005D6E84-0x005D6E8C
		public virtual void OnSetLocalVisibility(bool vis); // 0x005D6E8C-0x005D6E90
		public virtual bool OnCheckObserver(NetworkConnection conn); // 0x005D6E90-0x005D6E98
		public virtual int GetNetworkChannel(); // 0x005D6E98-0x005D6EA0
		public virtual float GetNetworkSendInterval(); // 0x005D6EA0-0x005D6EAC
	}

	internal class NetBuffer // TypeDefIndex: 3110
	{
		// Fields
		private byte[] m_Buffer; // 0x10
		private uint m_Pos; // 0x18
	
		// Properties
		public uint Position { get; } // 0x005CFEDC-0x005CFEE4 
		public int Length { get; } // 0x005CFEE4-0x005CFF10 
	
		// Constructors
		public NetBuffer(); // 0x005BF434-0x005BF50C
		public NetBuffer(byte[] buffer); // 0x005CFEB0-0x005CFEDC
	
		// Methods
		public byte ReadByte(); // 0x005CFF10-0x005D0028
		public void ReadBytes(byte[] buffer, uint count); // 0x005D0028-0x005D028C
		internal ArraySegment<byte> AsArraySegment(); // 0x005D028C-0x005D02FC
		public void WriteByte(byte value); // 0x005D02FC-0x005D0370
		public void WriteByte2(byte value0, byte value1); // 0x005D0550-0x005D0610
		public void WriteByte4(byte value0, byte value1, byte value2, byte value3); // 0x005D0610-0x005D0760
		public void WriteBytes(byte[] buffer, ushort count); // 0x005C076C-0x005C08B8
		private void WriteCheckForSpace(ushort count); // 0x005D0370-0x005D0550
		public void FinishMessage(); // 0x005D0760-0x005D07EC
		public void SeekZero(); // 0x005C0764-0x005C076C
		public void Replace(byte[] buffer); // 0x005D07EC-0x005D07F8
		public override string ToString(); // 0x005D07F8-0x005D08AC
	}

	internal struct UIntFloat // TypeDefIndex: 3111
	{
		// Fields
		public float floatValue; // 0x00
		public uint intValue; // 0x00
		public double doubleValue; // 0x00
		public ulong longValue; // 0x00
	}

	internal class FloatConversion // TypeDefIndex: 3112
	{
		// Methods
		public static float ToSingle(uint value); // 0x005CDB3C-0x005CDB44
	}

	[Obsolete] // 0x003DB354-0x003DB38C
	public class NetworkClient // TypeDefIndex: 3113
	{
		// Fields
		private Type m_NetworkConnectionClass; // 0x10
		private const int k_MaxEventsPerFrame = 500; // Metadata: 0x0021BA6E
		private static List<NetworkClient> s_Clients; // 0x00
		private static bool s_IsActive; // 0x08
		private HostTopology m_HostTopology; // 0x18
		private int m_HostPort; // 0x20
		private bool m_UseSimulator; // 0x24
		private int m_SimulatedLatency; // 0x28
		private float m_PacketLoss; // 0x2C
		private string m_ServerIp; // 0x30
		private int m_ServerPort; // 0x38
		private int m_ClientId; // 0x3C
		private int m_ClientConnectionId; // 0x40
		private int m_StatResetTime; // 0x44
		private EndPoint m_RemoteEndPoint; // 0x48
		private static CRCMessage s_CRCMessage; // 0x10
		private NetworkMessageHandlers m_MessageHandlers; // 0x50
		protected NetworkConnection m_Connection; // 0x58
		private byte[] m_MsgBuffer; // 0x60
		private NetworkReader m_MsgReader; // 0x68
		protected ConnectState m_AsyncConnect; // 0x70
		private string m_RequestedServerHost; // 0x78
		[CompilerGenerated] // 0x003DBE60-0x003DBE70
		private static AsyncCallback <>f__mg$cache0; // 0x18
		[CompilerGenerated] // 0x003DBE70-0x003DBE80
		private static NetworkMessageDelegate <>f__mg$cache1; // 0x20
	
		// Properties
		public static List<NetworkClient> allClients { get; } // 0x005D1FC4-0x005D202C 
		public static bool active { get; } // 0x005D80F4-0x005D815C 
		public NetworkConnection connection { get; } // 0x005CE8F8-0x005CE900 
		internal int hostId { get; } // 0x005D819C-0x005D81A4 
		public int numChannels { get; } // 0x005D81A4-0x005D81EC 
		public int hostPort { set; } // 0x005D81EC-0x005D82A8
		public bool isConnected { get; } // 0x005D82A8-0x005D82B8 
	
		// Nested types
		protected enum ConnectState // TypeDefIndex: 3114
		{
			None = 0,
			Resolving = 1,
			Resolved = 2,
			Connecting = 3,
			Connected = 4,
			Disconnected = 5,
			Failed = 6
		}
	
		// Constructors
		public NetworkClient(); // 0x005CDB44-0x005CDD14
		static NetworkClient(); // 0x005DD190-0x005DD22C
	
		// Methods
		internal void SetHandlers(NetworkConnection conn); // 0x005CDEA0-0x005CDED4
		public bool Configure(ConnectionConfig config, int maxConnections); // 0x005D82B8-0x005D8334
		public bool Configure(HostTopology topology); // 0x005D8334-0x005D8344
		public void Connect(MatchInfo matchInfo); // 0x005D8344-0x005D8374
		public bool ReconnectToNewHost(string serverIp, int serverPort); // 0x005D8714-0x005D8C88
		public void ConnectWithSimulator(string serverIp, int serverPort, int latency, float packetLoss); // 0x005D8DDC-0x005D8DF0
		private static bool IsValidIpV6(string address); // 0x005D9264-0x005D9328
		public void Connect(string serverIp, int serverPort); // 0x005D8DF0-0x005D9264
		public void Connect(EndPoint secureTunnelEndPoint); // 0x005D9328-0x005D9A10
		private void PrepareForConnect(); // 0x005D8374-0x005D837C
		private void PrepareForConnect(bool usePlatformSpecificProtocols); // 0x005D9A10-0x005D9EF0
		internal static void GetHostAddressesCallback(IAsyncResult ar); // 0x005D9EF0-0x005DA68C
		internal void ContinueConnect(); // 0x005DA68C-0x005DABD4
		private void ConnectWithRelay(MatchInfo info); // 0x005D837C-0x005D8714
		public virtual void Disconnect(); // 0x005DABD4-0x005DAD34
		public bool Send(short msgType, MessageBase msg); // 0x005DADB0-0x005DAEE8
		public void Shutdown(); // 0x005DAEE8-0x005DC0F8
		internal virtual void Update(); // 0x005DC184-0x005DC984
		private void GenerateConnectError(int error); // 0x005DC984-0x005DCA6C
		private void GenerateDataError(int error); // 0x005DCA84-0x005DCB6C
		private void GenerateDisconnectError(int error); // 0x005DCB6C-0x005DCC54
		private void GenerateError(int error); // 0x005DCCF4-0x005DCEDC
		internal void RegisterSystemHandlers(bool localClient); // 0x005CE014-0x005CE178
		private void OnCRC(NetworkMessage netMsg); // 0x005DCEDC-0x005DCFA4
		public void RegisterHandler(short msgType, NetworkMessageDelegate handler); // 0x005DCFA4-0x005DCFEC
		public void RegisterHandlerSafe(short msgType, NetworkMessageDelegate handler); // 0x005C4F34-0x005C4F7C
		internal static void AddClient(NetworkClient client); // 0x005D8068-0x005D80F4
		internal static bool RemoveClient(NetworkClient client); // 0x005DC0F8-0x005DC184
		internal static void UpdateClients(); // 0x005DCFEC-0x005DD190
		internal static void SetActive(bool state); // 0x005CDED4-0x005CE014
	}

	[Obsolete] // 0x003DB38C-0x003DB3C4
	public class NetworkConnection : IDisposable // TypeDefIndex: 3115
	{
		// Fields
		private ChannelBuffer[] m_Channels; // 0x10
		private List<UnityEngine.Networking.PlayerController> m_PlayerControllers; // 0x18
		private NetworkMessage m_NetMsg; // 0x20
		private HashSet<NetworkIdentity> m_VisList; // 0x28
		private NetworkWriter m_Writer; // 0x30
		private Dictionary<short, NetworkMessageDelegate> m_MessageHandlersDict; // 0x38
		private NetworkMessageHandlers m_MessageHandlers; // 0x40
		private HashSet<NetworkInstanceId> m_ClientOwnedObjects; // 0x48
		private NetworkMessage m_MessageInfo; // 0x50
		private const int k_MaxMessageLogSize = 150; // Metadata: 0x0021BA8E
		private NetworkError error; // 0x58
		public int hostId; // 0x5C
		public int connectionId; // 0x60
		public bool isReady; // 0x64
		public string address; // 0x68
		public float lastMessageTime; // 0x70
		public bool logNetworkMessages; // 0x74
		private Dictionary<short, PacketStat> m_PacketStats; // 0x78
		private bool m_Disposed; // 0x80
	
		// Properties
		public List<UnityEngine.Networking.PlayerController> playerControllers { get; } // 0x005DD35C-0x005DD364 
		public HashSet<NetworkInstanceId> clientOwnedObjects { get; } // 0x005DD364-0x005DD36C 
		public NetworkError lastError { get; internal set; } // 0x005DD36C-0x005DD374 0x005DCA70-0x005DCA78
	
		// Nested types
		public class PacketStat // TypeDefIndex: 3116
		{
			// Fields
			public short msgType; // 0x10
			public int count; // 0x14
			public int bytes; // 0x18
	
			// Methods
			public override string ToString(); // 0x005DF958-0x005DFBC8
		}
	
		// Constructors
		public NetworkConnection(); // 0x005DD22C-0x005DD35C
	
		// Methods
		public virtual void Initialize(string networkAddress, int networkHostId, int networkConnectionId, HostTopology hostTopology); // 0x005DD374-0x005DD6F4
		~NetworkConnection(); // 0x005DD728-0x005DD7A8
		public void Dispose(); // 0x005DAD34-0x005DADB0
		protected virtual void Dispose(bool disposing); // 0x005DD7A8-0x005DDA04
		private static bool IsSequencedQoS(QosType qos); // 0x005DD710-0x005DD728
		private static bool IsReliableQoS(QosType qos); // 0x005DD6F4-0x005DD710
		public bool SetChannelOption(int channelId, ChannelOption option, int value); // 0x005DDA0C-0x005DDA9C
		public void Disconnect(); // 0x005D8C88-0x005D8DDC
		internal void SetHandlers(NetworkMessageHandlers handlers); // 0x005D815C-0x005D819C
		public bool InvokeHandlerNoData(short msgType); // 0x005DCA78-0x005DCA84
		public bool InvokeHandler(short msgType, NetworkReader reader, int channelId); // 0x005DDBE8-0x005DDD94
		public bool InvokeHandler(NetworkMessage netMsg); // 0x005CE900-0x005CE9DC
		internal void HandleFragment(NetworkReader reader, int channelId); // 0x005DDD94-0x005DDF24
		internal void SetPlayerController(UnityEngine.Networking.PlayerController player); // 0x005C1FF8-0x005C20F0
		internal void RemovePlayerController(short playerControllerId); // 0x005C3618-0x005C37F0
		internal bool GetPlayerController(short playerControllerId, out UnityEngine.Networking.PlayerController playerController); // 0x005C2B4C-0x005C2CB8
		public void FlushChannels(); // 0x005DCC54-0x005DCCF4
		public void SetMaxDelay(float seconds); // 0x005DDF24-0x005DDFCC
		public virtual bool Send(short msgType, MessageBase msg); // 0x005DDFCC-0x005DDFDC
		public virtual bool SendByChannel(short msgType, MessageBase msg, int channelId); // 0x005DDFDC-0x005DE088
		public virtual bool SendBytes(byte[] bytes, int numBytes, int channelId); // 0x005DE088-0x005DE140
		public virtual bool SendWriter(NetworkWriter writer, int channelId); // 0x005DE8F8-0x005DE9C0
		private void LogSend(byte[] bytes); // 0x005DE140-0x005DE5EC
		private bool CheckChannel(int channelId); // 0x005DE5EC-0x005DE8F8
		public void ResetStats(); // 0x005DCA6C-0x005DCA70
		protected void HandleBytes(byte[] buffer, int receivedSize, int channelId); // 0x005DE9C0-0x005DEA4C
		protected void HandleReader(NetworkReader reader, int receivedSize, int channelId); // 0x005DEA4C-0x005DF258
		public override string ToString(); // 0x005DF258-0x005DF484
		internal void AddToVisList(NetworkIdentity uv); // 0x005DF484-0x005DF524
		internal void RemoveFromVisList(NetworkIdentity uv, bool isDestroyed); // 0x005DF524-0x005DF5DC
		internal void RemoveObservers(); // 0x005DDA9C-0x005DDBE8
		public virtual void TransportReceive(byte[] bytes, int numBytes, int channelId); // 0x005DF688-0x005DF68C
		public virtual bool TransportSend(byte[] bytes, int numBytes, int channelId, out byte error); // 0x005DF68C-0x005DF7B0
		internal void AddOwnedObject(NetworkIdentity obj); // 0x005DF7B0-0x005DF864
		internal void RemoveOwnedObject(NetworkIdentity obj); // 0x005DF864-0x005DF8E8
		internal static void OnFragment(NetworkMessage netMsg); // 0x005DF8E8-0x005DF958
	}

	[Obsolete] // 0x003DB3C4-0x003DB3FC
	public class NetworkCRC // TypeDefIndex: 3117
	{
		// Fields
		internal static NetworkCRC s_Singleton; // 0x00
		private Dictionary<string, int> m_Scripts; // 0x10
		private bool m_ScriptCRCCheck; // 0x18
	
		// Properties
		internal static NetworkCRC singleton { get; } // 0x005D717C-0x005D71F8 
		public Dictionary<string, int> scripts { get; } // 0x005D71F8-0x005D7200 
		public static bool scriptCRCCheck { get; set; } // 0x005D7200-0x005D722C 0x005D722C-0x005D7260
	
		// Constructors
		public NetworkCRC(); // 0x005D710C-0x005D717C
	
		// Methods
		public static void RegisterBehaviour(string name, int channel); // 0x005D7260-0x005D72E4
		internal static bool Validate(CRCMessageEntry[] scripts, int numChannels); // 0x005D72E4-0x005D7328
		private bool ValidateInternal(CRCMessageEntry[] remoteScripts, int numChannels); // 0x005D7328-0x005D7B20
		private void Dump(CRCMessageEntry[] remoteScripts); // 0x005D7B20-0x005D8068
	}

	[Obsolete] // 0x003DB3FC-0x003DB434
	public struct NetworkBroadcastResult // TypeDefIndex: 3118
	{
		// Fields
		public string serverAddress; // 0x00
		public byte[] broadcastData; // 0x08
	}

	[AddComponentMenu] // 0x003DB434-0x003DB4A4
	[DisallowMultipleComponent] // 0x003DB434-0x003DB4A4
	[Obsolete] // 0x003DB434-0x003DB4A4
	public class NetworkDiscovery : MonoBehaviour // TypeDefIndex: 3119
	{
		// Fields
		private const int k_MaxBroadcastMsgSize = 1024; // Metadata: 0x0021BA92
		[SerializeField] // 0x003DBE80-0x003DBE90
		private int m_BroadcastPort; // 0x18
		[SerializeField] // 0x003DBE90-0x003DBEA0
		private int m_BroadcastKey; // 0x1C
		[SerializeField] // 0x003DBEA0-0x003DBEB0
		private int m_BroadcastVersion; // 0x20
		[SerializeField] // 0x003DBEB0-0x003DBEC0
		private int m_BroadcastSubVersion; // 0x24
		[SerializeField] // 0x003DBEC0-0x003DBED0
		private int m_BroadcastInterval; // 0x28
		[SerializeField] // 0x003DBED0-0x003DBEE0
		private bool m_UseNetworkManager; // 0x2C
		[SerializeField] // 0x003DBEE0-0x003DBEF0
		private string m_BroadcastData; // 0x30
		[SerializeField] // 0x003DBEF0-0x003DBF00
		private bool m_ShowGUI; // 0x38
		[SerializeField] // 0x003DBF00-0x003DBF10
		private int m_OffsetX; // 0x3C
		[SerializeField] // 0x003DBF10-0x003DBF20
		private int m_OffsetY; // 0x40
		private int m_HostId; // 0x44
		private bool m_Running; // 0x48
		private bool m_IsServer; // 0x49
		private bool m_IsClient; // 0x4A
		private byte[] m_MsgOutBuffer; // 0x50
		private byte[] m_MsgInBuffer; // 0x58
		private HostTopology m_DefaultTopology; // 0x60
		private Dictionary<string, NetworkBroadcastResult> m_BroadcastsReceived; // 0x68
	
		// Properties
		public int broadcastPort { get; set; } // 0x005DFC48-0x005DFC50 0x005DFC50-0x005DFC58
		public int broadcastKey { get; set; } // 0x005DFC58-0x005DFC60 0x005DFC60-0x005DFC68
		public int broadcastVersion { get; set; } // 0x005DFC68-0x005DFC70 0x005DFC70-0x005DFC78
		public int broadcastSubVersion { get; set; } // 0x005DFC78-0x005DFC80 0x005DFC80-0x005DFC88
		public int broadcastInterval { get; set; } // 0x005DFC88-0x005DFC90 0x005DFC90-0x005DFC98
		public bool useNetworkManager { get; set; } // 0x005DFC98-0x005DFCA0 0x005DFCA0-0x005DFCAC
		public string broadcastData { get; set; } // 0x005DFCAC-0x005DFCB4 0x005DFCB4-0x005DFD80
		public bool showGUI { get; set; } // 0x005DFE3C-0x005DFE44 0x005DFE44-0x005DFE50
		public int offsetX { get; set; } // 0x005DFE50-0x005DFE58 0x005DFE58-0x005DFE60
		public int offsetY { get; set; } // 0x005DFE60-0x005DFE68 0x005DFE68-0x005DFE70
		public int hostId { get; set; } // 0x005DFE70-0x005DFE78 0x005DFE78-0x005DFE80
		public bool running { get; set; } // 0x005DFE80-0x005DFE88 0x005DFE88-0x005DFE94
		public bool isServer { get; set; } // 0x005DFE94-0x005DFE9C 0x005DFE9C-0x005DFEA8
		public bool isClient { get; set; } // 0x005DFEA8-0x005DFEB0 0x005DFEB0-0x005DFEBC
		public Dictionary<string, NetworkBroadcastResult> broadcastsReceived { get; } // 0x005DFEBC-0x005DFEC4 
	
		// Constructors
		public NetworkDiscovery(); // 0x005DFBC8-0x005DFC48
	
		// Methods
		private static byte[] StringToBytes(string str); // 0x005DFD80-0x005DFE3C
		private static string BytesToString(byte[] bytes); // 0x005DFEC4-0x005DFF68
		public bool Initialize(); // 0x005DFF68-0x005E1538
		public bool StartAsClient(); // 0x005E198C-0x005E1CF8
		public bool StartAsServer(); // 0x005E1538-0x005E198C
		public void StopBroadcast(); // 0x005E1CF8-0x005E1FCC
		private void Update(); // 0x005E1FCC-0x005E3304
		private void OnDestroy(); // 0x005E3304-0x005E3558
		public virtual void OnReceivedBroadcast(string fromAddress, string data); // 0x005E3558-0x005E355C
		private void OnGUI(); // 0x005E355C-0x005E3D04
	}

	[Serializable]
	[Obsolete] // 0x003DB4A4-0x003DB4DC
	public struct NetworkHash128 // TypeDefIndex: 3120
	{
		// Fields
		public byte i0; // 0x00
		public byte i1; // 0x01
		public byte i2; // 0x02
		public byte i3; // 0x03
		public byte i4; // 0x04
		public byte i5; // 0x05
		public byte i6; // 0x06
		public byte i7; // 0x07
		public byte i8; // 0x08
		public byte i9; // 0x09
		public byte i10; // 0x0A
		public byte i11; // 0x0B
		public byte i12; // 0x0C
		public byte i13; // 0x0D
		public byte i14; // 0x0E
		public byte i15; // 0x0F
	
		// Methods
		public bool IsValid(); // 0x005E3D04-0x005E43A4
		public override string ToString(); // 0x005E43A4-0x005E43AC
	}

	[AddComponentMenu] // 0x003DB4DC-0x003DB55C
	[DisallowMultipleComponent] // 0x003DB4DC-0x003DB55C
	[ExecuteInEditMode] // 0x003DB4DC-0x003DB55C
	[Obsolete] // 0x003DB4DC-0x003DB55C
	public sealed class NetworkIdentity : MonoBehaviour // TypeDefIndex: 3121
	{
		// Fields
		[SerializeField] // 0x003DBF20-0x003DBF30
		private NetworkSceneId m_SceneId; // 0x18
		[SerializeField] // 0x003DBF30-0x003DBF40
		private NetworkHash128 m_AssetId; // 0x1C
		[SerializeField] // 0x003DBF40-0x003DBF50
		private bool m_ServerOnly; // 0x2C
		[SerializeField] // 0x003DBF50-0x003DBF60
		private bool m_LocalPlayerAuthority; // 0x2D
		private bool m_IsClient; // 0x2E
		private bool m_IsServer; // 0x2F
		private bool m_HasAuthority; // 0x30
		private NetworkInstanceId m_NetId; // 0x34
		private bool m_IsLocalPlayer; // 0x38
		private NetworkConnection m_ConnectionToServer; // 0x40
		private NetworkConnection m_ConnectionToClient; // 0x48
		private short m_PlayerId; // 0x50
		private NetworkBehaviour[] m_NetworkBehaviours; // 0x58
		private HashSet<int> m_ObserverConnections; // 0x60
		private List<NetworkConnection> m_Observers; // 0x68
		private NetworkConnection m_ClientAuthorityOwner; // 0x70
		private bool m_Reset; // 0x78
		private static uint s_NextNetworkId; // 0x00
		private static NetworkWriter s_UpdateWriter; // 0x08
		public static ClientAuthorityCallback clientAuthorityCallback; // 0x10
	
		// Properties
		public bool isClient { get; } // 0x005C8F64-0x005C8F6C 
		public bool isServer { get; } // 0x005D34C4-0x005D3540 
		public bool hasAuthority { get; } // 0x005D35A0-0x005D35A8 
		public NetworkInstanceId netId { get; } // 0x005CCC18-0x005CCC20 
		public NetworkSceneId sceneId { get; } // 0x005C41EC-0x005C41F4 
		public bool serverOnly { get; set; } // 0x005E43C0-0x005E43C8 0x005E43C8-0x005E43D4
		public bool localPlayerAuthority { get; set; } // 0x005D34BC-0x005D34C4 0x005E43D4-0x005E43E0
		public NetworkConnection clientAuthorityOwner { get; } // 0x005D0B10-0x005D0B18 
		public NetworkHash128 assetId { get; } // 0x005C947C-0x005C948C 
		public bool isLocalPlayer { get; } // 0x005D3598-0x005D35A0 
		public short playerControllerId { get; } // 0x005D363C-0x005D3644 
		public NetworkConnection connectionToServer { get; } // 0x005D35D4-0x005D35DC 
		public NetworkConnection connectionToClient { get; } // 0x005D3608-0x005D3610 
		public ReadOnlyCollection<NetworkConnection> observers { get; } // 0x005E48AC-0x005E4928 
	
		// Nested types
		public delegate void ClientAuthorityCallback(NetworkConnection conn, NetworkIdentity uv, bool authorityState); // TypeDefIndex: 3122; 0x00648190-0x00648950
	
		// Constructors
		public NetworkIdentity(); // 0x005E43AC-0x005E43C0
		static NetworkIdentity(); // 0x005E93CC-0x005E9448
	
		// Methods
		internal void SetDynamicAssetId(NetworkHash128 newAssetId); // 0x005C80FC-0x005C828C
		internal void SetClientOwner(NetworkConnection conn); // 0x005E43E0-0x005E44A8
		internal void ClearClientOwner(); // 0x005DDA04-0x005DDA0C
		internal void ForceAuthority(bool authority); // 0x005E44A8-0x005E44D4
		internal static NetworkInstanceId GetNextNetworkId(); // 0x005E4928-0x005E49AC
		private void CacheBehaviours(); // 0x005E49AC-0x005E4A0C
		internal static void AddNetworkId(uint id); // 0x005E4A0C-0x005E4AA4
		internal void SetNetworkInstanceId(NetworkInstanceId newNetId); // 0x005C6528-0x005C6560
		public void ForceSceneId(int newSceneId); // 0x005E4AA4-0x005E4AD8
		internal void UpdateClientServer(bool isClientFlag, bool isServerFlag); // 0x005E4AD8-0x005E4B0C
		internal void SetNotLocalPlayer(); // 0x005CCA90-0x005CCB28
		internal void RemoveObserverInternal(NetworkConnection conn); // 0x005DF5DC-0x005DF688
		private void OnDestroy(); // 0x005E4B0C-0x005E4BC0
		internal void OnStartServer(bool allowNonZeroNetId); // 0x005E4BC0-0x005E5350
		internal void OnStartClient(); // 0x005C6560-0x005C6A1C
		internal void OnStartAuthority(); // 0x005E44D4-0x005E46C0
		internal void OnStopAuthority(); // 0x005E46C0-0x005E48AC
		internal void OnSetLocalVisibility(bool vis); // 0x005C9828-0x005C9A20
		internal bool OnCheckObserver(NetworkConnection conn); // 0x005E5350-0x005E5554
		internal void UNetSerializeAllVars(NetworkWriter writer); // 0x005E5554-0x005E5608
		internal void HandleClientAuthority(bool authority); // 0x005CC49C-0x005CC5A4
		private bool GetInvokeComponent(int cmdHash, Type invokeClass, out NetworkBehaviour invokeComponent); // 0x005E5608-0x005E5A84
		internal void HandleSyncEvent(int cmdHash, NetworkReader reader); // 0x005CAF9C-0x005CB730
		internal void HandleSyncList(int cmdHash, NetworkReader reader); // 0x005CB96C-0x005CC100
		internal void HandleCommand(int cmdHash, NetworkReader reader); // 0x005E5A84-0x005E7218
		internal void HandleRPC(int cmdHash, NetworkReader reader); // 0x005CA478-0x005CAC0C
		internal void UNetUpdate(); // 0x005E7218-0x005E7948
		internal void OnUpdateVars(NetworkReader reader, bool initialState, NetworkMessage netMsg); // 0x005C63D8-0x005C6528
		internal void SetLocalPlayer(short localPlayerControllerId); // 0x005CCB30-0x005CCC18
		internal void SetConnectionToServer(NetworkConnection conn); // 0x005CCB28-0x005CCB30
		internal void SetConnectionToClient(NetworkConnection conn, short newPlayerControllerId); // 0x005E7948-0x005E7954
		internal void OnNetworkDestroy(); // 0x005C93F0-0x005C947C
		internal void ClearObservers(); // 0x005E7954-0x005E7A60
		internal void AddObserver(NetworkConnection conn); // 0x005E7A60-0x005E7FA0
		internal void RemoveObserver(NetworkConnection conn); // 0x005E7FA0-0x005E805C
		public void RebuildObservers(bool initialize); // 0x005E805C-0x005E8D04
		public bool RemoveClientAuthority(NetworkConnection conn); // 0x005E8D04-0x005E9010
		public bool AssignClientAuthority(NetworkConnection conn); // 0x005E9010-0x005E9320
		internal void MarkForReset(); // 0x005C948C-0x005C9498
		internal void Reset(); // 0x005C8058-0x005C80FC
		internal static void UNetStaticUpdate(); // 0x005E9320-0x005E93CC
	}

	[Serializable]
	[Obsolete] // 0x003DB55C-0x003DB594
	public struct NetworkInstanceId : IEquatable<NetworkInstanceId> // TypeDefIndex: 3123
	{
		// Fields
		[SerializeField] // 0x003DBF60-0x003DBF70
		private readonly uint m_Value; // 0x00
		public static NetworkInstanceId Invalid; // 0x00
		internal static NetworkInstanceId Zero; // 0x04
	
		// Properties
		public uint Value { get; } // 0x00648BD0-0x00648BD8 
	
		// Constructors
		public NetworkInstanceId(uint value); // 0x00648A08-0x00648A20
		static NetworkInstanceId(); // 0x00648BD8-0x00648C38
	
		// Methods
		public bool IsEmpty(); // 0x00648A20-0x00648A38
		public override int GetHashCode(); // 0x00648A38-0x00648B44
		public override bool Equals(object obj); // 0x00648B44-0x00648B4C
		public bool Equals(NetworkInstanceId other); // 0x00648B58-0x00648B64
		public static bool operator ==(NetworkInstanceId c1, NetworkInstanceId c2); // 0x00648B4C-0x00648B58
		public static bool operator !=(NetworkInstanceId c1, NetworkInstanceId c2); // 0x00648B64-0x00648B9C
		public override string ToString(); // 0x00648B9C-0x00648BD0
	}

	[AddComponentMenu] // 0x003DB594-0x003DB5F4
	[Obsolete] // 0x003DB594-0x003DB5F4
	public class NetworkLobbyManager : NetworkManager // TypeDefIndex: 3124
	{
		// Fields
		[SerializeField] // 0x003DBF70-0x003DBF80
		private bool m_ShowLobbyGUI; // 0xF8
		[SerializeField] // 0x003DBF80-0x003DBF90
		private int m_MaxPlayers; // 0xFC
		[SerializeField] // 0x003DBF90-0x003DBFA0
		private int m_MaxPlayersPerConnection; // 0x100
		[SerializeField] // 0x003DBFA0-0x003DBFB0
		private int m_MinPlayers; // 0x104
		[SerializeField] // 0x003DBFB0-0x003DBFC0
		private NetworkLobbyPlayer m_LobbyPlayerPrefab; // 0x108
		[SerializeField] // 0x003DBFC0-0x003DBFD0
		private GameObject m_GamePlayerPrefab; // 0x110
		[SerializeField] // 0x003DBFD0-0x003DBFE0
		private string m_LobbyScene; // 0x118
		[SerializeField] // 0x003DBFE0-0x003DBFF0
		private string m_PlayScene; // 0x120
		private List<PendingPlayer> m_PendingPlayers; // 0x128
		public NetworkLobbyPlayer[] lobbySlots; // 0x130
		private static LobbyReadyToBeginMessage s_ReadyToBeginMessage; // 0x00
		private static IntegerMessage s_SceneLoadedMessage; // 0x08
		private static LobbyReadyToBeginMessage s_LobbyReadyToBeginMessage; // 0x10
	
		// Properties
		public bool showLobbyGUI { get; set; } // 0x00648E18-0x00648E20 0x00648E20-0x00648E2C
		public int maxPlayers { get; set; } // 0x00648E2C-0x00648E34 0x00648E34-0x00648E3C
		public int maxPlayersPerConnection { get; set; } // 0x00648E3C-0x00648E44 0x00648E44-0x00648E4C
		public int minPlayers { get; set; } // 0x00648E4C-0x00648E54 0x00648E54-0x00648E5C
		public NetworkLobbyPlayer lobbyPlayerPrefab { get; set; } // 0x00648E5C-0x00648E64 0x00648E64-0x00648E6C
		public GameObject gamePlayerPrefab { get; set; } // 0x00648E6C-0x00648E74 0x00648E74-0x00648E7C
		public string lobbyScene { get; set; } // 0x00648E7C-0x00648E84 0x00648E84-0x00648E90
		public string playScene { get; set; } // 0x00648E98-0x00648EA0 0x00648EA0-0x00648EA8
	
		// Nested types
		private struct PendingPlayer // TypeDefIndex: 3125
		{
			// Fields
			public NetworkConnection conn; // 0x00
			public GameObject lobbyPlayer; // 0x08
		}
	
		// Constructors
		public NetworkLobbyManager(); // 0x00648C38-0x00648CE8
		static NetworkLobbyManager(); // 0x0064D8E8-0x0064D9F0
	
		// Methods
		private new void OnValidate(); // 0x00648EA8-0x006490D4
		private byte FindSlot(); // 0x006490D4-0x006491C0
		private void SceneLoadedForPlayer(NetworkConnection conn, GameObject lobbyPlayerGameObject); // 0x006491C0-0x006496E4
		private static int CheckConnectionIsReadyToBegin(NetworkConnection conn); // 0x00649B34-0x00649C7C
		public void CheckReadyToBegin(); // 0x00649C84-0x00649E44
		public void ServerReturnToLobby(); // 0x00649EC8-0x00649F7C
		private void CallOnClientEnterLobby(); // 0x00649FE4-0x0064A114
		private void CallOnClientExitLobby(); // 0x0064A120-0x0064A238
		public bool SendReturnToLobby(); // 0x0064A238-0x0064A2D8
		public override void OnServerConnect(NetworkConnection conn); // 0x0064A2D8-0x0064A54C
		public override void OnServerDisconnect(NetworkConnection conn); // 0x0064A6E4-0x0064A88C
		public override void OnServerAddPlayer(NetworkConnection conn, short playerControllerId); // 0x0064AA2C-0x0064AE94
		public override void OnServerRemovePlayer(NetworkConnection conn, UnityEngine.Networking.PlayerController player); // 0x0064AF2C-0x0064B1A8
		public override void ServerChangeScene(string sceneName); // 0x0064B598-0x0064B850
		public override void OnServerSceneChanged(string sceneName); // 0x0064BA64-0x0064BB78
		private void OnServerReadyToBeginMessage(NetworkMessage netMsg); // 0x0064BB78-0x0064BEC8
		private void OnServerSceneLoadedMessage(NetworkMessage netMsg); // 0x0064BEC8-0x0064C128
		private void OnServerReturnToLobbyMessage(NetworkMessage netMsg); // 0x0064C128-0x0064C1CC
		public override void OnStartServer(); // 0x0064C1CC-0x0064C400
		public override void OnStartHost(); // 0x0064C4AC-0x0064C4BC
		public override void OnStopHost(); // 0x0064C4BC-0x0064C4CC
		public override void OnStartClient(NetworkClient lobbyClient); // 0x0064C4CC-0x0064C7EC
		public override void OnClientConnect(NetworkConnection conn); // 0x0064C7EC-0x0064C82C
		public override void OnClientDisconnect(NetworkConnection conn); // 0x0064C8E4-0x0064C91C
		public override void OnStopClient(); // 0x0064CA3C-0x0064CA6C
		public override void OnClientSceneChanged(NetworkConnection conn); // 0x0064CA6C-0x0064CB18
		private void OnClientReadyToBegin(NetworkMessage netMsg); // 0x0064CCF8-0x0064D08C
		private void OnClientAddPlayerFailedMessage(NetworkMessage netMsg); // 0x0064D08C-0x0064D13C
		public virtual void OnLobbyStartHost(); // 0x0064D13C-0x0064D140
		public virtual void OnLobbyStopHost(); // 0x0064D140-0x0064D144
		public virtual void OnLobbyStartServer(); // 0x0064D144-0x0064D148
		public virtual void OnLobbyServerConnect(NetworkConnection conn); // 0x0064D148-0x0064D14C
		public virtual void OnLobbyServerDisconnect(NetworkConnection conn); // 0x0064D14C-0x0064D150
		public virtual void OnLobbyServerSceneChanged(string sceneName); // 0x0064D150-0x0064D154
		public virtual GameObject OnLobbyServerCreateLobbyPlayer(NetworkConnection conn, short playerControllerId); // 0x0064D154-0x0064D15C
		public virtual GameObject OnLobbyServerCreateGamePlayer(NetworkConnection conn, short playerControllerId); // 0x0064D15C-0x0064D164
		public virtual void OnLobbyServerPlayerRemoved(NetworkConnection conn, short playerControllerId); // 0x0064D164-0x0064D168
		public virtual bool OnLobbyServerSceneLoadedForPlayer(GameObject lobbyPlayer, GameObject gamePlayer); // 0x0064D168-0x0064D170
		public virtual void OnLobbyServerPlayersReady(); // 0x0064D170-0x0064D180
		public virtual void OnLobbyClientEnter(); // 0x0064D180-0x0064D184
		public virtual void OnLobbyClientExit(); // 0x0064D184-0x0064D188
		public virtual void OnLobbyClientConnect(NetworkConnection conn); // 0x0064D188-0x0064D18C
		public virtual void OnLobbyClientDisconnect(NetworkConnection conn); // 0x0064D18C-0x0064D190
		public virtual void OnLobbyStartClient(NetworkClient lobbyClient); // 0x0064D190-0x0064D194
		public virtual void OnLobbyStopClient(); // 0x0064D194-0x0064D198
		public virtual void OnLobbyClientSceneChanged(NetworkConnection conn); // 0x0064D198-0x0064D19C
		public virtual void OnLobbyClientAddPlayerFailed(); // 0x0064D19C-0x0064D1A0
		private void OnGUI(); // 0x0064D1A0-0x0064D354
		public void TryToAddPlayer(); // 0x0064D354-0x0064D8E8
	}

	[AddComponentMenu] // 0x003DB5F4-0x003DB664
	[DisallowMultipleComponent] // 0x003DB5F4-0x003DB664
	[Obsolete] // 0x003DB5F4-0x003DB664
	public class NetworkLobbyPlayer : NetworkBehaviour // TypeDefIndex: 3126
	{
		// Fields
		[SerializeField] // 0x003DBFF0-0x003DC03C
		[Tooltip] // 0x003DBFF0-0x003DC03C
		public bool ShowLobbyGUI; // 0x30
		private byte m_Slot; // 0x31
		private bool m_ReadyToBegin; // 0x32
	
		// Properties
		public byte slot { get; set; } // 0x0064B1A8-0x0064B1B0 0x0064AE94-0x0064AE9C
		public bool readyToBegin { get; set; } // 0x00649C7C-0x00649C84 0x0064A114-0x0064A120
	
		// Constructors
		public NetworkLobbyPlayer(); // 0x0064D9F0-0x0064DA60
	
		// Methods
		private void Start(); // 0x0064DA60-0x0064DADC
		private void OnEnable(); // 0x0064DADC-0x0064DB58
		private void OnDisable(); // 0x0064DB58-0x0064DBD4
		public override void OnStartClient(); // 0x0064DBD4-0x0064DD14
		public void SendReadyToBeginMessage(); // 0x0064DDBC-0x0064DF34
		public void SendNotReadyToBeginMessage(); // 0x0064DF34-0x0064E0A8
		public void SendSceneLoadedMessage(); // 0x0064E0A8-0x0064E1FC
		private void OnSceneLoaded(Scene scene, LoadSceneMode mode); // 0x0064E1FC-0x0064E2CC
		private NetworkLobbyManager GetLobbyManager(); // 0x0064DD14-0x0064DDBC
		public void RemovePlayer(); // 0x0064E2CC-0x0064E3EC
		public virtual void OnClientEnterLobby(); // 0x0064E3EC-0x0064E3F0
		public virtual void OnClientExitLobby(); // 0x0064E3F0-0x0064E3F4
		public virtual void OnClientReady(bool readyState); // 0x0064E3F4-0x0064E3F8
		public override bool OnSerialize(NetworkWriter writer, bool initialState); // 0x0064E3F8-0x0064E498
		public override void OnDeserialize(NetworkReader reader, bool initialState); // 0x0064E498-0x0064E510
		private void OnGUI(); // 0x0064E684-0x0064EAC0
	}

	public enum PlayerSpawnMethod // TypeDefIndex: 3127
	{
		Random = 0,
		RoundRobin = 1
	}

	[AddComponentMenu] // 0x003DB664-0x003DB6C4
	[Obsolete] // 0x003DB664-0x003DB6C4
	public class NetworkManager : MonoBehaviour // TypeDefIndex: 3128
	{
		// Fields
		[SerializeField] // 0x003DC03C-0x003DC04C
		private int m_NetworkPort; // 0x18
		[SerializeField] // 0x003DC04C-0x003DC05C
		private bool m_ServerBindToIP; // 0x1C
		[SerializeField] // 0x003DC05C-0x003DC06C
		private string m_ServerBindAddress; // 0x20
		[SerializeField] // 0x003DC06C-0x003DC07C
		private string m_NetworkAddress; // 0x28
		[SerializeField] // 0x003DC07C-0x003DC08C
		private bool m_DontDestroyOnLoad; // 0x30
		[SerializeField] // 0x003DC08C-0x003DC09C
		private bool m_RunInBackground; // 0x31
		[SerializeField] // 0x003DC09C-0x003DC0AC
		private bool m_ScriptCRCCheck; // 0x32
		[SerializeField] // 0x003DC0AC-0x003DC0BC
		private float m_MaxDelay; // 0x34
		[SerializeField] // 0x003DC0BC-0x003DC0CC
		private LogFilter.FilterLevel m_LogLevel; // 0x38
		[SerializeField] // 0x003DC0CC-0x003DC0DC
		private GameObject m_PlayerPrefab; // 0x40
		[SerializeField] // 0x003DC0DC-0x003DC0EC
		private bool m_AutoCreatePlayer; // 0x48
		[SerializeField] // 0x003DC0EC-0x003DC0FC
		private PlayerSpawnMethod m_PlayerSpawnMethod; // 0x4C
		[SerializeField] // 0x003DC0FC-0x003DC10C
		private string m_OfflineScene; // 0x50
		[SerializeField] // 0x003DC10C-0x003DC11C
		private string m_OnlineScene; // 0x58
		[SerializeField] // 0x003DC11C-0x003DC12C
		private List<GameObject> m_SpawnPrefabs; // 0x60
		[SerializeField] // 0x003DC12C-0x003DC13C
		private bool m_CustomConfig; // 0x68
		[SerializeField] // 0x003DC13C-0x003DC14C
		private int m_MaxConnections; // 0x6C
		[SerializeField] // 0x003DC14C-0x003DC15C
		private ConnectionConfig m_ConnectionConfig; // 0x70
		[SerializeField] // 0x003DC15C-0x003DC16C
		private GlobalConfig m_GlobalConfig; // 0x78
		[SerializeField] // 0x003DC16C-0x003DC17C
		private List<QosType> m_Channels; // 0x80
		[SerializeField] // 0x003DC17C-0x003DC18C
		private bool m_UseWebSockets; // 0x88
		[SerializeField] // 0x003DC18C-0x003DC19C
		private bool m_UseSimulator; // 0x89
		[SerializeField] // 0x003DC19C-0x003DC1AC
		private int m_SimulatedLatency; // 0x8C
		[SerializeField] // 0x003DC1AC-0x003DC1BC
		private float m_PacketLossPercentage; // 0x90
		[SerializeField] // 0x003DC1BC-0x003DC1CC
		private int m_MaxBufferedPackets; // 0x94
		[SerializeField] // 0x003DC1CC-0x003DC1DC
		private bool m_AllowFragmentation; // 0x98
		[SerializeField] // 0x003DC1DC-0x003DC1EC
		private string m_MatchHost; // 0xA0
		[SerializeField] // 0x003DC1EC-0x003DC1FC
		private int m_MatchPort; // 0xA8
		[SerializeField] // 0x003DC1FC-0x003DC20C
		public string matchName; // 0xB0
		[SerializeField] // 0x003DC20C-0x003DC21C
		public uint matchSize; // 0xB8
		private NetworkMigrationManager m_MigrationManager; // 0xC0
		private EndPoint m_EndPoint; // 0xC8
		private bool m_ClientLoadedScene; // 0xD0
		private static INetworkTransport s_ActiveTransport; // 0x00
		public static string networkSceneName; // 0x08
		public bool isNetworkActive; // 0xD1
		public NetworkClient client; // 0xD8
		private static List<Transform> s_StartPositions; // 0x10
		private static int s_StartPositionIndex; // 0x18
		public MatchInfo matchInfo; // 0xE0
		public NetworkMatch matchMaker; // 0xE8
		public List<MatchInfoSnapshot> matches; // 0xF0
		public static NetworkManager singleton; // 0x20
		private static AddPlayerMessage s_AddPlayerMessage; // 0x28
		private static RemovePlayerMessage s_RemovePlayerMessage; // 0x30
		private static UnityEngine.Networking.NetworkSystem.ErrorMessage s_ErrorMessage; // 0x38
		private static AsyncOperation s_LoadingSceneAsync; // 0x40
		private static NetworkConnection s_ClientReadyConnection; // 0x48
		private static string s_Address; // 0x50
	
		// Properties
		public int networkPort { get; set; } // 0x0064EAC0-0x0064EAC8 0x0064EAC8-0x0064EAD0
		public bool serverBindToIP { get; set; } // 0x0064EAD0-0x0064EAD8 0x0064EAD8-0x0064EAE4
		public string serverBindAddress { get; set; } // 0x0064EAE4-0x0064EAEC 0x0064EAEC-0x0064EAF4
		public string networkAddress { get; set; } // 0x0064EAF4-0x0064EAFC 0x0064EAFC-0x0064EB04
		public bool dontDestroyOnLoad { get; set; } // 0x0064EB04-0x0064EB0C 0x0064EB0C-0x0064EB18
		public bool runInBackground { get; set; } // 0x0064EB18-0x0064EB20 0x0064EB20-0x0064EB2C
		public bool scriptCRCCheck { get; set; } // 0x0064EB2C-0x0064EB34 0x0064EB34-0x0064EB40
		[Obsolete] // 0x003DC754-0x003DC78C
		public bool sendPeerInfo { get; set; } // 0x0064EB40-0x0064EB48 0x0064EB48-0x0064EB4C
		public float maxDelay { get; set; } // 0x0064EB4C-0x0064EB54 0x0064EB54-0x0064EB5C
		public LogFilter.FilterLevel logLevel { get; set; } // 0x0064EB5C-0x0064EB64 0x0064EB64-0x0064EBDC
		public GameObject playerPrefab { get; set; } // 0x0064EBDC-0x0064EBE4 0x0064EBE4-0x0064EBEC
		public bool autoCreatePlayer { get; set; } // 0x0064EBEC-0x0064EBF4 0x0064EBF4-0x0064EC00
		public PlayerSpawnMethod playerSpawnMethod { get; set; } // 0x0064EC00-0x0064EC08 0x0064EC08-0x0064EC10
		public string offlineScene { get; set; } // 0x0064EC10-0x0064EC18 0x00648E90-0x00648E98
		public string onlineScene { get; set; } // 0x0064EC18-0x0064EC20 0x0064EC20-0x0064EC28
		public List<GameObject> spawnPrefabs { get; } // 0x0064EC28-0x0064EC30 
		public List<Transform> startPositions { get; } // 0x0064EC30-0x0064EC98 
		public bool customConfig { get; set; } // 0x0064EC98-0x0064ECA0 0x0064ECA0-0x0064ECAC
		public ConnectionConfig connectionConfig { get; } // 0x0064ECAC-0x0064ED18 
		public GlobalConfig globalConfig { get; } // 0x0064ED18-0x0064ED84 
		public int maxConnections { get; set; } // 0x0064ED84-0x0064ED8C 0x0064ED8C-0x0064ED94
		public List<QosType> channels { get; } // 0x0064ED94-0x0064ED9C 
		public EndPoint secureTunnelEndpoint { get; set; } // 0x0064ED9C-0x0064EDA4 0x0064EDA4-0x0064EDAC
		public bool useWebSockets { get; set; } // 0x0064EDAC-0x0064EDB4 0x0064EDB4-0x0064EDC0
		public bool useSimulator { get; set; } // 0x0064EDC0-0x0064EDC8 0x0064EDC8-0x0064EDD4
		public int simulatedLatency { get; set; } // 0x0064EDD4-0x0064EDDC 0x0064EDDC-0x0064EDE4
		public float packetLossPercentage { get; set; } // 0x0064EDE4-0x0064EDEC 0x0064EDEC-0x0064EDF4
		public string matchHost { get; set; } // 0x0064EDF4-0x0064EDFC 0x0064EDFC-0x0064EE04
		public int matchPort { get; set; } // 0x0064EE04-0x0064EE0C 0x0064EE0C-0x0064EE14
		public bool clientLoadedScene { get; set; } // 0x0064EE14-0x0064EE1C 0x0064EE1C-0x0064EE28
		public NetworkMigrationManager migrationManager { get; } // 0x0064EE28-0x0064EE30 
		public int numPlayers { get; } // 0x0064A54C-0x0064A6E0 
		public static INetworkTransport defaultTransport { get; } // 0x0064EE30-0x0064EE8C 
		public static INetworkTransport activeTransport { get; set; } // 0x0064EE8C-0x0064EEF4 0x0064EEF4-0x0064F0A0
	
		// Constructors
		public NetworkManager(); // 0x00648CE8-0x00648E18
		static NetworkManager(); // 0x00657C04-0x00657D30
	
		// Methods
		private void Awake(); // 0x0064F0A0-0x0064F0A4
		private void InitializeSingleton(); // 0x0064F0A4-0x0064F4CC
		private void OnValidate(); // 0x0064F4CC-0x0064F85C
		internal void RegisterServerMessages(); // 0x0064F85C-0x0064F9E8
		public void SetupMigrationManager(NetworkMigrationManager man); // 0x0064F9E8-0x0064F9F0
		public bool StartServer(ConnectionConfig config, int maxConnections); // 0x0064F9F0-0x0064FA08
		public bool StartServer(); // 0x0064FF6C-0x0064FF7C
		public bool StartServer(MatchInfo info); // 0x0064FF7C-0x0064FF88
		private bool StartServer(MatchInfo info, ConnectionConfig config, int maxConnections); // 0x0064FA08-0x0064FF6C
		internal void RegisterClientMessages(NetworkClient client); // 0x006507D4-0x00650AB4
		public void UseExternalClient(NetworkClient externalClient); // 0x00650AB4-0x00650C00
		public NetworkClient StartClient(MatchInfo info, ConnectionConfig config, int hostPort); // 0x00650E54-0x00651614
		public NetworkClient StartClient(MatchInfo matchInfo); // 0x006517B4-0x006517C0
		public NetworkClient StartClient(); // 0x006517C8-0x006517D8
		public NetworkClient StartClient(MatchInfo info, ConnectionConfig config); // 0x006517C0-0x006517C8
		public virtual NetworkClient StartHost(ConnectionConfig config, int maxConnections); // 0x006517D8-0x00651884
		public virtual NetworkClient StartHost(MatchInfo info); // 0x00651A18-0x00651A94
		public virtual NetworkClient StartHost(); // 0x00651A94-0x00651B04
		private NetworkClient ConnectLocalClient(); // 0x00651884-0x00651A18
		public void StopHost(); // 0x00651B04-0x00651BF8
		public void StopServer(); // 0x00651BF8-0x00651D2C
		public void StopClient(); // 0x00651D2C-0x00651E68
		public virtual void ServerChangeScene(string newSceneName); // 0x0064B850-0x0064BA64
		private void CleanupNetworkIdentities(); // 0x00652334-0x006523EC
		internal void ClientChangeScene(string newSceneName, bool forceReload); // 0x00650C00-0x00650E54
		private void FinishLoadScene(); // 0x006526AC-0x006528B4
		internal static void UpdateScene(); // 0x006528C8-0x00652AD4
		private void OnDestroy(); // 0x00652AD4-0x00652B78
		public static void RegisterStartPosition(Transform start); // 0x00652B78-0x00652E44
		public static void UnRegisterStartPosition(Transform start); // 0x00652E44-0x00653110
		public bool IsClientConnected(); // 0x006528B4-0x006528C8
		public static void Shutdown(); // 0x00653110-0x00653230
		internal void OnServerConnectInternal(NetworkMessage netMsg); // 0x00653230-0x00653538
		internal void OnServerDisconnectInternal(NetworkMessage netMsg); // 0x00653D90-0x00653EA8
		internal void OnServerReadyMessageInternal(NetworkMessage netMsg); // 0x00653EA8-0x00653F70
		internal void OnServerAddPlayerMessageInternal(NetworkMessage netMsg); // 0x00653F70-0x006551E4
		internal void OnServerRemovePlayerMessageInternal(NetworkMessage netMsg); // 0x00655260-0x00655470
		internal void OnServerErrorInternal(NetworkMessage netMsg); // 0x00655470-0x006555C4
		internal void OnClientConnectInternal(NetworkMessage netMsg); // 0x006555C4-0x0065575C
		internal void OnClientDisconnectInternal(NetworkMessage netMsg); // 0x0065575C-0x006559F8
		internal void OnClientNotReadyMessageInternal(NetworkMessage netMsg); // 0x00655D0C-0x00655E00
		internal void OnClientErrorInternal(NetworkMessage netMsg); // 0x00655E00-0x00655F54
		internal void OnClientSceneInternal(NetworkMessage netMsg); // 0x00655F54-0x00656084
		public virtual void OnServerConnect(NetworkConnection conn); // 0x0064A6E0-0x0064A6E4
		public virtual void OnServerDisconnect(NetworkConnection conn); // 0x0064A88C-0x0064A9C8
		public virtual void OnServerReady(NetworkConnection conn); // 0x0065664C-0x0065674C
		public virtual void OnServerAddPlayer(NetworkConnection conn, short playerControllerId, NetworkReader extraMessageReader); // 0x006567BC-0x006567C0
		public virtual void OnServerAddPlayer(NetworkConnection conn, short playerControllerId); // 0x00656CA0-0x00656CA4
		private void OnServerAddPlayerInternal(NetworkConnection conn, short playerControllerId); // 0x006567C0-0x00656CA0
		public Transform GetStartPosition(); // 0x006496E4-0x00649AA4
		public virtual void OnServerRemovePlayer(NetworkConnection conn, UnityEngine.Networking.PlayerController player); // 0x0064B1B0-0x0064B268
		public virtual void OnServerError(NetworkConnection conn, int errorCode); // 0x00656CA4-0x00656CA8
		public virtual void OnServerSceneChanged(string sceneName); // 0x00656CA8-0x00656CAC
		public virtual void OnClientConnect(NetworkConnection conn); // 0x0064C82C-0x0064C8E4
		public virtual void OnClientDisconnect(NetworkConnection conn); // 0x0064C91C-0x0064CA3C
		public virtual void OnClientError(NetworkConnection conn, int errorCode); // 0x00656CAC-0x00656CB0
		public virtual void OnClientNotReady(NetworkConnection conn); // 0x00656CB0-0x00656CB4
		public virtual void OnClientSceneChanged(NetworkConnection conn); // 0x0064CB18-0x0064CCF8
		public void StartMatchMaker(); // 0x00656CB4-0x00656D68
		public void StopMatchMaker(); // 0x00652150-0x00652334
		public void SetMatchHost(string newHost, int port, bool https); // 0x00656D68-0x00657160
		public virtual void OnStartHost(); // 0x00657160-0x00657164
		public virtual void OnStartServer(); // 0x00657164-0x00657168
		public virtual void OnStartClient(NetworkClient client); // 0x00657168-0x0065716C
		public virtual void OnStopServer(); // 0x0065716C-0x00657170
		public virtual void OnStopClient(); // 0x00657170-0x00657174
		public virtual void OnStopHost(); // 0x00657174-0x00657178
		public virtual void OnMatchCreate(bool success, string extendedInfo, MatchInfo matchInfo); // 0x00657178-0x00657370
		public virtual void OnMatchList(bool success, string extendedInfo, List<MatchInfoSnapshot> matchList); // 0x00657370-0x0065758C
		public virtual void OnMatchJoined(bool success, string extendedInfo, MatchInfo matchInfo); // 0x0065758C-0x00657784
		public virtual void OnDestroyMatch(bool success, string extendedInfo); // 0x00657784-0x00657904
		public virtual void OnDropConnection(bool success, string extendedInfo); // 0x00657904-0x00657A84
		public virtual void OnSetMatchAttributes(bool success, string extendedInfo); // 0x00657A84-0x00657C04
	}

	[AddComponentMenu] // 0x003DB6C4-0x003DB784
	[EditorBrowsable] // 0x003DB6C4-0x003DB784
	[Obsolete] // 0x003DB6C4-0x003DB784
	[RequireComponent] // 0x003DB6C4-0x003DB784
	public class NetworkManagerHUD : MonoBehaviour // TypeDefIndex: 3129
	{
		// Fields
		public NetworkManager manager; // 0x18
		[SerializeField] // 0x003DC21C-0x003DC22C
		public bool showGUI; // 0x20
		[SerializeField] // 0x003DC22C-0x003DC23C
		public int offsetX; // 0x24
		[SerializeField] // 0x003DC23C-0x003DC24C
		public int offsetY; // 0x28
		private bool m_ShowServer; // 0x2C
	
		// Constructors
		public NetworkManagerHUD(); // 0x00657D30-0x00657D40
	
		// Methods
		private void Awake(); // 0x00657D40-0x00657D98
		private void Update(); // 0x00657D98-0x00657FC8
		private void OnGUI(); // 0x00657FC8-0x006596BC
	}

	internal class NetworkMessageHandlers // TypeDefIndex: 3130
	{
		// Fields
		private Dictionary<short, NetworkMessageDelegate> m_MsgHandlers; // 0x10
	
		// Constructors
		public NetworkMessageHandlers(); // 0x00659E28-0x00659E98
	
		// Methods
		internal void RegisterHandlerSafe(short msgType, NetworkMessageDelegate handler); // 0x00659E98-0x0065A1D0
		public void RegisterHandler(short msgType, NetworkMessageDelegate handler); // 0x0065A1D0-0x0065A648
		internal NetworkMessageDelegate GetHandler(short msgType); // 0x0065A648-0x0065A6F0
		internal Dictionary<short, NetworkMessageDelegate> GetHandlers(); // 0x0065A6F0-0x0065A6F8
	}

	[AddComponentMenu] // 0x003DB784-0x003DB7E4
	[Obsolete] // 0x003DB784-0x003DB7E4
	public class NetworkMigrationManager : MonoBehaviour // TypeDefIndex: 3131
	{
		// Fields
		[SerializeField] // 0x003DC24C-0x003DC25C
		private bool m_HostMigration; // 0x18
		[SerializeField] // 0x003DC25C-0x003DC26C
		private bool m_ShowGUI; // 0x19
		[SerializeField] // 0x003DC26C-0x003DC27C
		private int m_OffsetX; // 0x1C
		[SerializeField] // 0x003DC27C-0x003DC28C
		private int m_OffsetY; // 0x20
		private NetworkClient m_Client; // 0x28
		private bool m_WaitingToBecomeNewHost; // 0x30
		private bool m_WaitingReconnectToNewHost; // 0x31
		private bool m_DisconnectedFromHost; // 0x32
		private bool m_HostWasShutdown; // 0x33
		private MatchInfo m_MatchInfo; // 0x38
		private int m_OldServerConnectionId; // 0x40
		private string m_NewHostAddress; // 0x48
		private PeerInfoMessage m_NewHostInfo; // 0x50
		private PeerListMessage m_PeerListMessage; // 0x58
		private PeerInfoMessage[] m_Peers; // 0x60
		private Dictionary<int, ConnectionPendingPlayers> m_PendingPlayers; // 0x68
	
		// Properties
		public bool hostMigration { get; set; } // 0x0065AAFC-0x0065AB04 0x0065AB04-0x0065AB10
		public bool showGUI { get; set; } // 0x0065AB10-0x0065AB18 0x0065AB18-0x0065AB24
		public int offsetX { get; set; } // 0x0065AB24-0x0065AB2C 0x0065AB2C-0x0065AB34
		public int offsetY { get; set; } // 0x0065AB34-0x0065AB3C 0x0065AB3C-0x0065AB44
		public NetworkClient client { get; } // 0x0065AB44-0x0065AB4C 
		public bool waitingToBecomeNewHost { get; set; } // 0x0065AB4C-0x0065AB54 0x0065AB54-0x0065AB60
		public bool waitingReconnectToNewHost { get; set; } // 0x0065AB60-0x0065AB68 0x0065AB68-0x0065AB74
		public bool disconnectedFromHost { get; } // 0x0065AB74-0x0065AB7C 
		public bool hostWasShutdown { get; } // 0x0065AB7C-0x0065AB84 
		public MatchInfo matchInfo { get; } // 0x0065AB84-0x0065AB8C 
		public int oldServerConnectionId { get; } // 0x0065AB8C-0x0065AB94 
		public string newHostAddress { get; set; } // 0x0065AB94-0x0065AB9C 0x0065AB9C-0x0065ABA4
		public PeerInfoMessage[] peers { get; } // 0x0065ABA4-0x0065ABAC 
		public Dictionary<int, ConnectionPendingPlayers> pendingPlayers { get; } // 0x0065ABAC-0x0065ABB4 
	
		// Nested types
		public enum SceneChangeOption // TypeDefIndex: 3132
		{
			StayInOnlineScene = 0,
			SwitchToOfflineScene = 1
		}
	
		public struct PendingPlayerInfo // TypeDefIndex: 3133
		{
			// Fields
			public NetworkInstanceId netId; // 0x00
			public short playerControllerId; // 0x04
			public GameObject obj; // 0x08
		}
	
		public struct ConnectionPendingPlayers // TypeDefIndex: 3134
		{
			// Fields
			public List<PendingPlayerInfo> players; // 0x00
		}
	
		// Constructors
		public NetworkMigrationManager(); // 0x0065A6F8-0x0065A7C4
	
		// Methods
		private void AddPendingPlayer(GameObject obj, int connectionId, NetworkInstanceId netId, short playerControllerId); // 0x0065A7C4-0x0065A900
		private GameObject FindPendingPlayer(int connectionId, NetworkInstanceId netId, short playerControllerId); // 0x0065A900-0x0065AA8C
		private void RemovePendingPlayer(int connectionId); // 0x0065AA8C-0x0065AAFC
		private void Start(); // 0x0065ABB4-0x0065ABBC
		public void Reset(int reconnectId); // 0x0065ABBC-0x0065ACE0
		internal void AssignAuthorityCallback(NetworkConnection conn, NetworkIdentity uv, bool authorityState); // 0x0065ACE0-0x0065AF00
		public void Initialize(NetworkClient newClient, MatchInfo newMatchInfo); // 0x00651614-0x006517B4
		public void DisablePlayerObjects(); // 0x0065AF00-0x0065B600
		public void SendPeerInfo(); // 0x006535EC-0x00653D90
		private void OnPeerClientAuthority(NetworkMessage netMsg); // 0x0065B790-0x0065BBF8
		private void OnPeerInfo(NetworkMessage netMsg); // 0x0065BBF8-0x0065C060
		private void OnServerReconnectPlayerMessage(NetworkMessage netMsg); // 0x0065C060-0x0065C8B0
		public bool ReconnectObjectForConnection(NetworkConnection newConnection, GameObject oldObject, int oldConnectionId); // 0x0065C8B0-0x0065CDC4
		public bool ReconnectPlayerForConnection(NetworkConnection newConnection, GameObject oldPlayer, int oldConnectionId, short playerControllerId); // 0x0065CF24-0x0065E42C
		public bool LostHostOnClient(NetworkConnection conn); // 0x006559F8-0x00655D0C
		public void LostHostOnHost(); // 0x00651E68-0x00651FF8
		public bool BecomeNewHost(int port); // 0x0065E52C-0x0065E824
		protected virtual void OnClientDisconnectedFromHost(NetworkConnection conn, out SceneChangeOption sceneChange); // 0x0065E8CC-0x0065E8D4
		protected virtual void OnServerHostShutdown(); // 0x0065E8D4-0x0065E8D8
		protected virtual void OnServerReconnectPlayer(NetworkConnection newConnection, GameObject oldPlayer, int oldConnectionId, short playerControllerId); // 0x0065E8D8-0x0065E8DC
		protected virtual void OnServerReconnectPlayer(NetworkConnection newConnection, GameObject oldPlayer, int oldConnectionId, short playerControllerId, NetworkReader extraMessageReader); // 0x0065E8DC-0x0065E8E0
		protected virtual void OnServerReconnectObject(NetworkConnection newConnection, GameObject oldObject, int oldConnectionId); // 0x0065E8E0-0x0065E8E4
		protected virtual void OnPeersUpdated(PeerListMessage peers); // 0x0065E8E4-0x0065E9E0
		protected virtual void OnAuthorityUpdated(GameObject go, int connectionId, bool authorityState); // 0x0065E9E0-0x0065ECD0
		public virtual bool FindNewHost(out PeerInfoMessage newHostInfo, out bool youAreNewHost); // 0x0065ECD0-0x0065EFEC
		private void OnGUIHost(); // 0x0065EFEC-0x0065F58C
		private void OnGUIClient(); // 0x0065F58C-0x0065FC9C
		private void OnGUI(); // 0x0065FC9C-0x0065FD64
	}

	[AddComponentMenu] // 0x003DB7E4-0x003DB890
	[Obsolete] // 0x003DB7E4-0x003DB890
	[RequireComponent] // 0x003DB7E4-0x003DB890
	public class NetworkProximityChecker : NetworkBehaviour // TypeDefIndex: 3135
	{
		// Fields
		[Tooltip] // 0x003DC28C-0x003DC2C4
		public int visRange; // 0x30
		[Tooltip] // 0x003DC2C4-0x003DC2FC
		public float visUpdateInterval; // 0x34
		[Tooltip] // 0x003DC2FC-0x003DC334
		public CheckMethod checkMethod; // 0x38
		[Tooltip] // 0x003DC334-0x003DC36C
		public bool forceHidden; // 0x3C
		private float m_VisUpdateTime; // 0x40
	
		// Nested types
		public enum CheckMethod // TypeDefIndex: 3136
		{
			Physics3D = 0,
			Physics2D = 1
		}
	
		// Constructors
		public NetworkProximityChecker(); // 0x0065FD64-0x0065FDE0
	
		// Methods
		private void Update(); // 0x0065FDE0-0x0065FEA0
		public override bool OnCheckObserver(NetworkConnection newObserver); // 0x0065FEA0-0x00660108
		public override bool OnRebuildObservers(HashSet<NetworkConnection> observers, bool initial); // 0x00660108-0x006604F0
		public override void OnSetLocalVisibility(bool vis); // 0x006604F0-0x00660518
		private static void SetVis(GameObject go, bool vis); // 0x00660518-0x0066068C
	}

	[Obsolete] // 0x003DB890-0x003DB8C8
	public class NetworkReader // TypeDefIndex: 3137
	{
		// Fields
		private NetBuffer m_buf; // 0x10
		private static byte[] s_StringReaderBuffer; // 0x00
		private static Encoding s_Encoding; // 0x08
	
		// Properties
		public uint Position { get; } // 0x006607C4-0x006607F4 
		public int Length { get; } // 0x006607F4-0x00660824 
	
		// Constructors
		public NetworkReader(NetworkWriter writer); // 0x0066068C-0x00660728
		public NetworkReader(byte[] buffer); // 0x006551E4-0x00655260
	
		// Methods
		private static void Initialize(); // 0x00660728-0x006607C4
		public void SeekZero(); // 0x00660824-0x00660854
		internal void Replace(byte[] buffer); // 0x00660854-0x0066088C
		public uint ReadPackedUInt32(); // 0x0064E510-0x0064E614
		public NetworkInstanceId ReadNetworkId(); // 0x0066088C-0x006608A4
		public NetworkSceneId ReadSceneId(); // 0x006608A4-0x006608C4
		public byte ReadByte(); // 0x0064E614-0x0064E644
		public short ReadInt16(); // 0x006608C4-0x00660928
		public ushort ReadUInt16(); // 0x00660928-0x0066098C
		public int ReadInt32(); // 0x0066098C-0x00660A38
		public uint ReadUInt32(); // 0x00660A38-0x00660AE4
		public float ReadSingle(); // 0x00660AE4-0x00660AFC
		public string ReadString(); // 0x00656084-0x00656268
		public bool ReadBoolean(); // 0x0064E644-0x0064E684
		public byte[] ReadBytes(int count); // 0x00660AFC-0x00660C04
		public byte[] ReadBytesAndSize(); // 0x00660C04-0x00660C74
		public Vector2 ReadVector2(); // 0x00660C74-0x00660CDC
		public Vector3 ReadVector3(); // 0x00660CDC-0x00660D64
		public Quaternion ReadQuaternion(); // 0x00660D64-0x00660E08
		public NetworkHash128 ReadNetworkHash128(); // 0x00660E08-0x00660F5C
		public override string ToString(); // 0x00660F5C-0x00660F90
	}

	internal class NetworkScene // TypeDefIndex: 3138
	{
		// Fields
		private Dictionary<NetworkInstanceId, NetworkIdentity> m_LocalObjects; // 0x10
		private static Dictionary<NetworkHash128, GameObject> s_GuidToPrefab; // 0x00
		private static Dictionary<NetworkHash128, SpawnDelegate> s_SpawnHandlers; // 0x08
		private static Dictionary<NetworkHash128, UnSpawnDelegate> s_UnspawnHandlers; // 0x10
	
		// Properties
		internal Dictionary<NetworkInstanceId, NetworkIdentity> localObjects { get; } // 0x00661000-0x00661008 
	
		// Constructors
		public NetworkScene(); // 0x00660F90-0x00661000
		static NetworkScene(); // 0x00662308-0x006623DC
	
		// Methods
		internal void SetLocalObject(NetworkInstanceId netId, GameObject obj, bool isClient, bool isServer); // 0x00661008-0x006613B0
		internal GameObject FindLocalObject(NetworkInstanceId netId); // 0x006613B0-0x006614B8
		internal bool GetNetworkIdentity(NetworkInstanceId netId, out NetworkIdentity uv); // 0x006614B8-0x006615DC
		internal bool RemoveLocalObject(NetworkInstanceId netId); // 0x006615DC-0x0066164C
		internal void ClearLocalObjects(); // 0x0066164C-0x006616AC
		internal static void RegisterPrefab(GameObject prefab); // 0x006616AC-0x00661B6C
		internal static bool GetPrefab(NetworkHash128 assetId, out GameObject prefab); // 0x00661B6C-0x00661D20
		internal static bool GetSpawnHandler(NetworkHash128 assetId, out SpawnDelegate handler); // 0x00661D20-0x00661E34
		internal static bool InvokeUnSpawnHandler(NetworkHash128 assetId, GameObject obj); // 0x00661E34-0x00661FA0
		internal void DestroyAllClientObjects(); // 0x00661FA0-0x00662308
	}

	[Serializable]
	[Obsolete] // 0x003DB8C8-0x003DB900
	public struct NetworkSceneId : IEquatable<NetworkSceneId> // TypeDefIndex: 3139
	{
		// Fields
		[SerializeField] // 0x003DC36C-0x003DC37C
		private uint m_Value; // 0x00
	
		// Properties
		public uint Value { get; } // 0x006624D4-0x006624DC 
	
		// Constructors
		public NetworkSceneId(uint value); // 0x006623DC-0x006623E4
	
		// Methods
		public bool IsEmpty(); // 0x006623E4-0x006623FC
		public override int GetHashCode(); // 0x006623FC-0x0066249C
		public override bool Equals(object obj); // 0x0066249C-0x006624A4
		public bool Equals(NetworkSceneId other); // 0x006624B0-0x006624C0
		public static bool operator ==(NetworkSceneId c1, NetworkSceneId c2); // 0x006624A4-0x006624B0
		public override string ToString(); // 0x006624C0-0x006624D4
	}

	[Obsolete] // 0x003DB900-0x003DB938
	public sealed class NetworkServer // TypeDefIndex: 3140
	{
		// Fields
		private static bool s_Active; // 0x00
		private static NetworkServer s_Instance; // 0x08
		private static object s_Sync; // 0x10
		private static bool m_DontListen; // 0x18
		private bool m_LocalClientActive; // 0x10
		private List<NetworkConnection> m_LocalConnectionsFakeList; // 0x18
		private ULocalConnectionToClient m_LocalConnection; // 0x20
		private NetworkScene m_NetworkScene; // 0x28
		private HashSet<int> m_ExternalConnections; // 0x30
		private ServerSimpleWrapper m_SimpleServerSimple; // 0x38
		private float m_MaxDelay; // 0x40
		private HashSet<NetworkInstanceId> m_RemoveList; // 0x48
		private int m_RemoveListCount; // 0x50
		internal static ushort maxPacketSize; // 0x1A
		private static RemovePlayerMessage s_RemovePlayerMessage; // 0x20
		[CompilerGenerated] // 0x003DC37C-0x003DC38C
		private static NetworkMessageDelegate <>f__mg$cache0; // 0x28
		[CompilerGenerated] // 0x003DC38C-0x003DC39C
		private static NetworkMessageDelegate <>f__mg$cache1; // 0x30
		[CompilerGenerated] // 0x003DC39C-0x003DC3AC
		private static NetworkMessageDelegate <>f__mg$cache2; // 0x38
		[CompilerGenerated] // 0x003DC3AC-0x003DC3BC
		private static NetworkMessageDelegate <>f__mg$cache3; // 0x40
		[CompilerGenerated] // 0x003DC3BC-0x003DC3CC
		private static NetworkMessageDelegate <>f__mg$cache4; // 0x48
		[CompilerGenerated] // 0x003DC3CC-0x003DC3DC
		private static NetworkMessageDelegate <>f__mg$cache5; // 0x50
		[CompilerGenerated] // 0x003DC3DC-0x003DC3EC
		private static NetworkMessageDelegate <>f__mg$cache6; // 0x58
		[CompilerGenerated] // 0x003DC3EC-0x003DC3FC
		private static NetworkMessageDelegate <>f__mg$cache7; // 0x60
		[CompilerGenerated] // 0x003DC3FC-0x003DC40C
		private static NetworkMessageDelegate <>f__mg$cache8; // 0x68
	
		// Properties
		public static List<NetworkConnection> localConnections { get; } // 0x00662724-0x00662794 
		public static int listenPort { get; } // 0x0065B684-0x0065B708 
		public static int serverHostId { get; } // 0x0065B600-0x0065B684 
		public static ReadOnlyCollection<NetworkConnection> connections { get; } // 0x00649E44-0x00649EC8 
		public static Dictionary<short, NetworkMessageDelegate> handlers { get; } // 0x00662920-0x006629A4 
		public static HostTopology hostTopology { get; } // 0x006629A4-0x00662A28 
		public static Dictionary<NetworkInstanceId, NetworkIdentity> objects { get; } // 0x00662A28-0x00662AA8 
		public static bool useWebSockets { set; } // 0x0064FF88-0x00650014
		internal static NetworkServer instance { get; } // 0x00662794-0x00662920 
		public static bool active { get; } // 0x00649F7C-0x00649FE4 
		public static bool localClientActive { get; } // 0x0065E4BC-0x0065E52C 
		public static int numChannels { get; } // 0x00653538-0x006535EC 
	
		// Nested types
		private class ServerSimpleWrapper : NetworkServerSimple // TypeDefIndex: 3141
		{
			// Fields
			private NetworkServer m_Server; // 0x60
	
			// Constructors
			public ServerSimpleWrapper(NetworkServer server); // 0x00C2C678-0x00C2C6A0
	
			// Methods
			public override void OnConnectError(int connectionId, byte error); // 0x00C2C7B8-0x00C2C7F0
			public override void OnDataError(NetworkConnection conn, byte error); // 0x00C2C7F0-0x00C2C838
			public override void OnDisconnectError(NetworkConnection conn, byte error); // 0x00C2C838-0x00C2C880
			public override void OnConnected(NetworkConnection conn); // 0x00C2C880-0x00C2C8B8
			public override void OnDisconnected(NetworkConnection conn); // 0x00C2C8B8-0x00C2C8F0
			public override void OnData(NetworkConnection conn, int receivedSize, int channelId); // 0x00C2C8F0-0x00C2C940
		}
	
		// Constructors
		private NetworkServer(); // 0x006624DC-0x00662724
		static NetworkServer(); // 0x0066B474-0x0066B508
	
		// Methods
		public static bool Configure(ConnectionConfig config, int maxConnections); // 0x00650014-0x006500B0
		public static bool Configure(HostTopology topology); // 0x00662AA8-0x00662B34
		public static void Shutdown(); // 0x00651FF8-0x00652150
		public static bool Listen(MatchInfo matchInfo, int listenPort); // 0x006500B0-0x0065027C
		internal void RegisterMessageHandlers(); // 0x00662DB0-0x0066341C
		public static void ListenRelay(string relayIp, int relayPort, NetworkID netGuid, SourceID sourceId, NodeID nodeId); // 0x0066341C-0x006634C4
		private void InternalListenRelay(string relayIp, int relayPort, NetworkID netGuid, SourceID sourceId, NodeID nodeId); // 0x00662CE0-0x00662DB0
		public static bool Listen(int serverPort); // 0x00650304-0x00650380
		public static bool Listen(string ipAddress, int serverPort); // 0x0065027C-0x00650304
		internal bool InternalListen(string ipAddress, int serverPort); // 0x00662BA0-0x00662CE0
		public static NetworkClient BecomeHost(NetworkClient oldClient, int port, MatchInfo matchInfo, int oldConnectionId, PeerInfoMessage[] peers); // 0x0065E824-0x0065E8CC
		internal NetworkClient BecomeHostInternal(NetworkClient oldClient, int port, MatchInfo matchInfo, int oldConnectionId, PeerInfoMessage[] peers); // 0x006634C4-0x00663D94
		internal int AddLocalClient(LocalClient localClient); // 0x00663D94-0x00663EE8
		internal void RemoveLocalClient(NetworkConnection localClientConnection); // 0x00663EE8-0x00664040
		internal void SetLocalObjectOnServer(NetworkInstanceId netId, GameObject obj); // 0x00664040-0x0066429C
		internal void ActivateLocalClientScene(); // 0x0066429C-0x00664704
		public static bool SendToAll(short msgType, MessageBase msg); // 0x006524F8-0x006526AC
		private static bool SendToObservers(GameObject contextObj, short msgType, MessageBase msg); // 0x00664704-0x00664948
		public static bool SendToReady(GameObject contextObj, short msgType, MessageBase msg); // 0x0064B268-0x0064B598
		public static void SendWriterToReady(GameObject contextObj, NetworkWriter writer, int channelId); // 0x00664948-0x00664AD4
		public static void SendBytesToReady(GameObject contextObj, byte[] buffer, int numBytes, int channelId); // 0x00664AD4-0x00664F30
		internal void InternalDisconnectAll(); // 0x00662B34-0x00662BA0
		internal static void Update(); // 0x00664F30-0x00664FE4
		private void UpdateServerObjects(); // 0x00665090-0x006652E4
		private void CheckForNullObjects(); // 0x006652E4-0x006656D4
		internal void InternalUpdate(); // 0x00664FE4-0x00665090
		private void OnConnected(NetworkConnection conn); // 0x006656D4-0x00665850
		private void OnDisconnected(NetworkConnection conn); // 0x00665AFC-0x00665D74
		private void OnData(NetworkConnection conn, int receivedSize, int channelId); // 0x00665D74-0x00665DE4
		private void GenerateConnectError(int error); // 0x00665DE4-0x00665ECC
		private void GenerateDataError(NetworkConnection conn, int error); // 0x00666018-0x00666104
		private void GenerateDisconnectError(NetworkConnection conn, int error); // 0x00666104-0x00666408
		private void GenerateError(NetworkConnection conn, int error); // 0x00665ECC-0x00666018
		public static void RegisterHandler(short msgType, NetworkMessageDelegate handler); // 0x0064C410-0x0064C4AC
		public static bool ReplacePlayerForConnection(NetworkConnection conn, GameObject player, short playerControllerId); // 0x00649AA4-0x00649B34
		public static bool AddPlayerForConnection(NetworkConnection conn, GameObject player, short playerControllerId); // 0x0064AE9C-0x0064AF2C
		internal bool InternalAddPlayerForConnection(NetworkConnection conn, GameObject playerGameObject, short playerControllerId); // 0x006669D0-0x00666F78
		private static bool CheckPlayerControllerIdForConnection(NetworkConnection conn, short playerControllerId); // 0x0066708C-0x00667440
		private bool SetupLocalPlayerForConnection(NetworkConnection conn, NetworkIdentity uv, UnityEngine.Networking.PlayerController newPlayerController); // 0x00667440-0x006676EC
		private static void FinishPlayerForConnection(NetworkConnection conn, NetworkIdentity uv, GameObject playerGameObject); // 0x006676EC-0x00667804
		internal bool InternalReplacePlayerForConnection(NetworkConnection conn, GameObject playerGameObject, short playerControllerId); // 0x00666408-0x006669D0
		private static bool GetNetworkIdentity(GameObject go, out NetworkIdentity view); // 0x00666F78-0x0066708C
		public static void SetClientReady(NetworkConnection conn); // 0x0065674C-0x006567BC
		internal void SetClientReadyInternal(NetworkConnection conn); // 0x00667BA4-0x00668834
		internal static void ShowForConnection(NetworkIdentity uv, NetworkConnection conn); // 0x00668834-0x006688D8
		internal static void HideForConnection(NetworkIdentity uv, NetworkConnection conn); // 0x006688D8-0x0066898C
		public static void SetAllClientsNotReady(); // 0x006523EC-0x006524F8
		public static void SetClientNotReady(NetworkConnection conn); // 0x0066898C-0x006689FC
		internal void InternalSetClientNotReady(NetworkConnection conn); // 0x006689FC-0x00668B14
		private static void OnClientReadyMessage(NetworkMessage netMsg); // 0x00668B14-0x00668C10
		private static void OnRemovePlayerMessage(NetworkMessage netMsg); // 0x00668C10-0x00668E60
		private static void OnCommandMessage(NetworkMessage netMsg); // 0x00668E60-0x0066A48C
		internal void SpawnObject(GameObject obj); // 0x0066A48C-0x0066A9D8
		internal void SendSpawnMessage(NetworkIdentity uv, NetworkConnection conn); // 0x00667804-0x00667BA4
		public static void DestroyPlayersForConnection(NetworkConnection conn); // 0x00656268-0x0065664C
		private static void DestroyObject(GameObject obj); // 0x0066A9D8-0x0066AB14
		private static void DestroyObject(NetworkIdentity uv, bool destroyServerObject); // 0x0066AB14-0x0066AEEC
		public static void Spawn(GameObject obj); // 0x0065E42C-0x0065E4BC
		private static bool CheckForPrefab(GameObject obj); // 0x0066AF4C-0x0066AF54
		private static bool VerifyCanSpawn(GameObject obj); // 0x0066AEEC-0x0066AF4C
		public static bool SpawnWithClientAuthority(GameObject obj, NetworkConnection conn); // 0x0065CDC4-0x0065CF24
		public static void Destroy(GameObject obj); // 0x0064A9C8-0x0064AA2C
		internal bool InvokeBytes(ULocalConnectionToServer conn, byte[] buffer, int numBytes, int channelId); // 0x0066AF54-0x0066B074
		internal bool InvokeHandlerOnServer(ULocalConnectionToServer conn, short msgType, MessageBase msg, int channelId); // 0x0066B074-0x0066B3C4
		public static GameObject FindLocalObject(NetworkInstanceId netId); // 0x0065B708-0x0065B790
		private static bool ValidateSceneObject(NetworkIdentity netId); // 0x0066B3C4-0x0066B474
		public static bool SpawnObjects(); // 0x00650380-0x006507D4
		private static void SendCrc(NetworkConnection targetConnection); // 0x00665850-0x00665AFC
	}

	[Obsolete] // 0x003DB938-0x003DB970
	public class NetworkServerSimple // TypeDefIndex: 3142
	{
		// Fields
		private bool m_Initialized; // 0x10
		private int m_ListenPort; // 0x14
		private int m_ServerHostId; // 0x18
		private int m_RelaySlotId; // 0x1C
		private bool m_UseWebSockets; // 0x20
		private byte[] m_MsgBuffer; // 0x28
		private NetworkReader m_MsgReader; // 0x30
		private Type m_NetworkConnectionClass; // 0x38
		private HostTopology m_HostTopology; // 0x40
		private List<NetworkConnection> m_Connections; // 0x48
		private ReadOnlyCollection<NetworkConnection> m_ConnectionsReadOnly; // 0x50
		private NetworkMessageHandlers m_MessageHandlers; // 0x58
	
		// Properties
		public int listenPort { get; } // 0x00C2C940-0x00C2C948 
		public int serverHostId { get; } // 0x00C2C948-0x00C2C950 
		public HostTopology hostTopology { get; } // 0x00C2C950-0x00C2C958 
		public bool useWebSockets { set; } // 0x00C2C958-0x00C2C964
		public ReadOnlyCollection<NetworkConnection> connections { get; } // 0x00C2C964-0x00C2C96C 
		public Dictionary<short, NetworkMessageDelegate> handlers { get; } // 0x00C2C96C-0x00C2C99C 
		public byte[] messageBuffer { get; } // 0x00C2C99C-0x00C2C9A4 
	
		// Constructors
		public NetworkServerSimple(); // 0x00C2C6A0-0x00C2C7B8
	
		// Methods
		public virtual void Initialize(); // 0x00C2C9A4-0x00C2CBD8
		public bool Configure(ConnectionConfig config, int maxConnections); // 0x00C2CBD8-0x00C2CC54
		public bool Configure(HostTopology topology); // 0x00C2CC54-0x00C2CC64
		public bool Listen(string ipAddress, int serverListenPort); // 0x00C2CC64-0x00C2D000
		public void ListenRelay(string relayIp, int relayPort, NetworkID netGuid, SourceID sourceId, NodeID nodeId); // 0x00C2D000-0x00C2D330
		public void Stop(); // 0x00C2DA5C-0x00C2DBB4
		internal void RegisterHandlerSafe(short msgType, NetworkMessageDelegate handler); // 0x00C2DBB4-0x00C2DBFC
		public void RegisterHandler(short msgType, NetworkMessageDelegate handler); // 0x00C2DBFC-0x00C2DC44
		public void UpdateConnections(); // 0x00C2DC44-0x00C2DD00
		public void Update(); // 0x00C2D330-0x00C2DA5C
		public NetworkConnection FindConnection(int connectionId); // 0x00C2E678-0x00C2E724
		public bool SetConnectionAtIndex(NetworkConnection conn); // 0x00C2E724-0x00C2E858
		public bool RemoveConnectionAtIndex(int connectionId); // 0x00C2E858-0x00C2E90C
		private void HandleConnect(int connectionId, byte error); // 0x00C2DD00-0x00C2E0A0
		private void HandleDisconnect(int connectionId, byte error); // 0x00C2E240-0x00C2E678
		private void HandleData(int connectionId, int channelId, int receivedSize, byte error); // 0x00C2E0A0-0x00C2E240
		public void DisconnectAllConnections(); // 0x00C2E90C-0x00C2E9DC
		public virtual void OnConnectError(int connectionId, byte error); // 0x00C2E9DC-0x00C2EA8C
		public virtual void OnDataError(NetworkConnection conn, byte error); // 0x00C2EA8C-0x00C2EB3C
		public virtual void OnDisconnectError(NetworkConnection conn, byte error); // 0x00C2EB3C-0x00C2EBEC
		public virtual void OnConnected(NetworkConnection conn); // 0x00C2EBEC-0x00C2EC20
		public virtual void OnDisconnected(NetworkConnection conn); // 0x00C2EC20-0x00C2EC54
		public virtual void OnData(NetworkConnection conn, int receivedSize, int channelId); // 0x00C2EC54-0x00C2ECA8
	}

	[AddComponentMenu] // 0x003DB970-0x003DB9E0
	[DisallowMultipleComponent] // 0x003DB970-0x003DB9E0
	[Obsolete] // 0x003DB970-0x003DB9E0
	public class NetworkStartPosition : MonoBehaviour // TypeDefIndex: 3143
	{
		// Constructors
		public NetworkStartPosition(); // 0x00C2ECA8-0x00C2ECB0
	
		// Methods
		public void Awake(); // 0x00C2ECB0-0x00C2ED2C
		public void OnDestroy(); // 0x00C2ED2C-0x00C2EDA8
	}

	[AddComponentMenu] // 0x003DB9E0-0x003DBA40
	[Obsolete] // 0x003DB9E0-0x003DBA40
	public class NetworkTransformChild : NetworkBehaviour // TypeDefIndex: 3144
	{
		// Fields
		[SerializeField] // 0x003DC40C-0x003DC41C
		private Transform m_Target; // 0x30
		[SerializeField] // 0x003DC41C-0x003DC42C
		private uint m_ChildIndex; // 0x38
		private NetworkTransform m_Root; // 0x40
		[SerializeField] // 0x003DC42C-0x003DC43C
		private float m_SendInterval; // 0x48
		[SerializeField] // 0x003DC43C-0x003DC44C
		private NetworkTransform.AxisSyncMode m_SyncRotationAxis; // 0x4C
		[SerializeField] // 0x003DC44C-0x003DC45C
		private NetworkTransform.CompressionSyncMode m_RotationSyncCompression; // 0x50
		[SerializeField] // 0x003DC45C-0x003DC46C
		private float m_MovementThreshold; // 0x54
		[SerializeField] // 0x003DC46C-0x003DC47C
		private float m_InterpolateRotation; // 0x58
		[SerializeField] // 0x003DC47C-0x003DC48C
		private float m_InterpolateMovement; // 0x5C
		[SerializeField] // 0x003DC48C-0x003DC49C
		private NetworkTransform.ClientMoveCallback3D m_ClientMoveCallback3D; // 0x60
		private Vector3 m_TargetSyncPosition; // 0x68
		private Quaternion m_TargetSyncRotation3D; // 0x74
		private float m_LastClientSyncTime; // 0x84
		private float m_LastClientSendTime; // 0x88
		private Vector3 m_PrevPosition; // 0x8C
		private Quaternion m_PrevRotation; // 0x98
		private const float k_LocalMovementThreshold = 1E-05f; // Metadata: 0x0021BAAE
		private const float k_LocalRotationThreshold = 1E-05f; // Metadata: 0x0021BAB2
		private NetworkWriter m_LocalTransformWriter; // 0xA8
	
		// Properties
		public Transform target { get; set; } // 0x00C36EC0-0x00C36EC8 0x00C36EC8-0x00C36ED0
		public uint childIndex { get; } // 0x00C37310-0x00C37318 
		public float sendInterval { get; set; } // 0x00C37318-0x00C37320 0x00C37320-0x00C37328
		public NetworkTransform.AxisSyncMode syncRotationAxis { get; set; } // 0x00C37328-0x00C37330 0x00C37330-0x00C37338
		public NetworkTransform.CompressionSyncMode rotationSyncCompression { get; set; } // 0x00C37338-0x00C37340 0x00C37340-0x00C37348
		public float movementThreshold { get; set; } // 0x00C37348-0x00C37350 0x00C37350-0x00C37358
		public float interpolateRotation { get; set; } // 0x00C37358-0x00C37360 0x00C37360-0x00C37368
		public float interpolateMovement { get; set; } // 0x00C37368-0x00C37370 0x00C37370-0x00C37378
		public NetworkTransform.ClientMoveCallback3D clientMoveCallback3D { get; set; } // 0x00C37378-0x00C37380 0x00C37380-0x00C37388
		public float lastSyncTime { get; } // 0x00C37388-0x00C37390 
		public Vector3 targetSyncPosition { get; } // 0x00C37390-0x00C3739C 
		public Quaternion targetSyncRotation3D { get; } // 0x00C3739C-0x00C373A8 
	
		// Constructors
		public NetworkTransformChild(); // 0x00C36E38-0x00C36EC0
	
		// Methods
		private void OnValidate(); // 0x00C36ED0-0x00C37310
		private void Awake(); // 0x00C373A8-0x00C3745C
		public override bool OnSerialize(NetworkWriter writer, bool initialState); // 0x00C3745C-0x00C374DC
		private void SerializeModeTransform(NetworkWriter writer); // 0x00C374DC-0x00C375D4
		public override void OnDeserialize(NetworkReader reader, bool initialState); // 0x00C375D4-0x00C3769C
		private void UnserializeModeTransform(NetworkReader reader, bool initialState); // 0x00C3769C-0x00C37890
		private void FixedUpdate(); // 0x00C37890-0x00C378E0
		private void FixedUpdateServer(); // 0x00C378E0-0x00C37AE0
		private void FixedUpdateClient(); // 0x00C37AE0-0x00C37DBC
		private void Update(); // 0x00C37DBC-0x00C37E94
		private bool HasMoved(); // 0x00C38064-0x00C381F4
		[Client] // 0x003DC724-0x003DC734
		private void SendTransform(); // 0x00C37E94-0x00C38064
		internal static void HandleChildTransform(NetworkMessage netMsg); // 0x00C381F4-0x00C38788
		public override int GetNetworkChannel(); // 0x00C38788-0x00C38790
		public override float GetNetworkSendInterval(); // 0x00C38790-0x00C38798
	}

	[AddComponentMenu] // 0x003DBA40-0x003DBAB0
	[DisallowMultipleComponent] // 0x003DBA40-0x003DBAB0
	[Obsolete] // 0x003DBA40-0x003DBAB0
	public class NetworkTransform : NetworkBehaviour // TypeDefIndex: 3145
	{
		// Fields
		[SerializeField] // 0x003DC49C-0x003DC4AC
		private TransformSyncMode m_TransformSyncMode; // 0x30
		[SerializeField] // 0x003DC4AC-0x003DC4BC
		private float m_SendInterval; // 0x34
		[SerializeField] // 0x003DC4BC-0x003DC4CC
		private AxisSyncMode m_SyncRotationAxis; // 0x38
		[SerializeField] // 0x003DC4CC-0x003DC4DC
		private CompressionSyncMode m_RotationSyncCompression; // 0x3C
		[SerializeField] // 0x003DC4DC-0x003DC4EC
		private bool m_SyncSpin; // 0x40
		[SerializeField] // 0x003DC4EC-0x003DC4FC
		private float m_MovementTheshold; // 0x44
		[SerializeField] // 0x003DC4FC-0x003DC50C
		private float m_VelocityThreshold; // 0x48
		[SerializeField] // 0x003DC50C-0x003DC51C
		private float m_SnapThreshold; // 0x4C
		[SerializeField] // 0x003DC51C-0x003DC52C
		private float m_InterpolateRotation; // 0x50
		[SerializeField] // 0x003DC52C-0x003DC53C
		private float m_InterpolateMovement; // 0x54
		[SerializeField] // 0x003DC53C-0x003DC54C
		private ClientMoveCallback3D m_ClientMoveCallback3D; // 0x58
		[SerializeField] // 0x003DC54C-0x003DC55C
		private ClientMoveCallback2D m_ClientMoveCallback2D; // 0x60
		private Rigidbody m_RigidBody3D; // 0x68
		private Rigidbody2D m_RigidBody2D; // 0x70
		private CharacterController m_CharacterController; // 0x78
		private bool m_Grounded; // 0x80
		private Vector3 m_TargetSyncPosition; // 0x84
		private Vector3 m_TargetSyncVelocity; // 0x90
		private Vector3 m_FixedPosDiff; // 0x9C
		private Quaternion m_TargetSyncRotation3D; // 0xA8
		private Vector3 m_TargetSyncAngularVelocity3D; // 0xB8
		private float m_TargetSyncRotation2D; // 0xC4
		private float m_TargetSyncAngularVelocity2D; // 0xC8
		private float m_LastClientSyncTime; // 0xCC
		private float m_LastClientSendTime; // 0xD0
		private Vector3 m_PrevPosition; // 0xD4
		private Quaternion m_PrevRotation; // 0xE0
		private float m_PrevRotation2D; // 0xF0
		private float m_PrevVelocity; // 0xF4
		private const float k_LocalMovementThreshold = 1E-05f; // Metadata: 0x0021BAB6
		private const float k_LocalRotationThreshold = 1E-05f; // Metadata: 0x0021BABA
		private const float k_LocalVelocityThreshold = 1E-05f; // Metadata: 0x0021BABE
		private const float k_MoveAheadRatio = 0.1f; // Metadata: 0x0021BAC2
		private NetworkWriter m_LocalTransformWriter; // 0xF8
	
		// Properties
		public TransformSyncMode transformSyncMode { get; set; } // 0x00C315E0-0x00C315E8 0x00C315E8-0x00C315F0
		public float sendInterval { get; set; } // 0x00C315F0-0x00C315F8 0x00C315F8-0x00C31600
		public AxisSyncMode syncRotationAxis { get; set; } // 0x00C31600-0x00C31608 0x00C31608-0x00C31610
		public CompressionSyncMode rotationSyncCompression { get; set; } // 0x00C31610-0x00C31618 0x00C31618-0x00C31620
		public bool syncSpin { get; set; } // 0x00C31620-0x00C31628 0x00C31628-0x00C31634
		public float movementTheshold { get; set; } // 0x00C31634-0x00C3163C 0x00C3163C-0x00C31644
		public float velocityThreshold { get; set; } // 0x00C31644-0x00C3164C 0x00C3164C-0x00C31654
		public float snapThreshold { get; set; } // 0x00C31654-0x00C3165C 0x00C3165C-0x00C31664
		public float interpolateRotation { get; set; } // 0x00C31664-0x00C3166C 0x00C3166C-0x00C31674
		public float interpolateMovement { get; set; } // 0x00C31674-0x00C3167C 0x00C3167C-0x00C31684
		public ClientMoveCallback3D clientMoveCallback3D { get; set; } // 0x00C31684-0x00C3168C 0x00C3168C-0x00C31694
		public ClientMoveCallback2D clientMoveCallback2D { get; set; } // 0x00C31694-0x00C3169C 0x00C3169C-0x00C316A4
		public CharacterController characterContoller { get; } // 0x00C316A4-0x00C316AC 
		public Rigidbody rigidbody3D { get; } // 0x00C316AC-0x00C316B4 
		public Rigidbody2D rigidbody2D { get; } // 0x00C316B4-0x00C316BC 
		public float lastSyncTime { get; } // 0x00C316BC-0x00C316C4 
		public Vector3 targetSyncPosition { get; } // 0x00C316C4-0x00C316D0 
		public Vector3 targetSyncVelocity { get; } // 0x00C316D0-0x00C316DC 
		public Quaternion targetSyncRotation3D { get; } // 0x00C316DC-0x00C316E8 
		public float targetSyncRotation2D { get; } // 0x00C316E8-0x00C316F0 
		public bool grounded { get; set; } // 0x00C316F0-0x00C316F8 0x00C316F8-0x00C31704
	
		// Nested types
		public enum TransformSyncMode // TypeDefIndex: 3146
		{
			SyncNone = 0,
			SyncTransform = 1,
			SyncRigidbody2D = 2,
			SyncRigidbody3D = 3,
			SyncCharacterController = 4
		}
	
		public enum AxisSyncMode // TypeDefIndex: 3147
		{
			None = 0,
			AxisX = 1,
			AxisY = 2,
			AxisZ = 3,
			AxisXY = 4,
			AxisXZ = 5,
			AxisYZ = 6,
			AxisXYZ = 7
		}
	
		public enum CompressionSyncMode // TypeDefIndex: 3148
		{
			None = 0,
			Low = 1,
			High = 2
		}
	
		public delegate bool ClientMoveCallback3D(ref Vector3 position, ref Vector3 velocity, ref Quaternion rotation); // TypeDefIndex: 3149; 0x00C3407C-0x00C3453C
	
		public delegate bool ClientMoveCallback2D(ref Vector2 position, ref Vector2 velocity, ref float rotation); // TypeDefIndex: 3150; 0x00C3472C-0x00C34BEC
	
		// Constructors
		public NetworkTransform(); // 0x00C3154C-0x00C315E0
	
		// Methods
		private void OnValidate(); // 0x00C31704-0x00C317A4
		private void Awake(); // 0x00C317A4-0x00C318B4
		public override void OnStartServer(); // 0x00C31980-0x00C31988
		public override bool OnSerialize(NetworkWriter writer, bool initialState); // 0x00C31988-0x00C31A5C
		private void SerializeModeTransform(NetworkWriter writer); // 0x00C31A5C-0x00C31B74
		private void VerifySerializeComponentExists(); // 0x00C322E8-0x00C325C4
		private void SerializeMode3D(NetworkWriter writer); // 0x00C31B74-0x00C31DB8
		private void SerializeModeCharacterController(NetworkWriter writer); // 0x00C32074-0x00C321F0
		private void SerializeMode2D(NetworkWriter writer); // 0x00C31DB8-0x00C32074
		public override void OnDeserialize(NetworkReader reader, bool initialState); // 0x00C32748-0x00C3286C
		private void UnserializeModeTransform(NetworkReader reader, bool initialState); // 0x00C3286C-0x00C32B14
		private void UnserializeMode3D(NetworkReader reader, bool initialState); // 0x00C32B14-0x00C33180
		private void UnserializeMode2D(NetworkReader reader, bool initialState); // 0x00C33180-0x00C33880
		private void UnserializeModeCharacterController(NetworkReader reader, bool initialState); // 0x00C33880-0x00C33E44
		private void FixedUpdate(); // 0x00C34BEC-0x00C34C3C
		private void FixedUpdateServer(); // 0x00C34C3C-0x00C34E58
		private bool CheckVelocityChanged(); // 0x00C34F94-0x00C3512C
		private void FixedUpdateClient(); // 0x00C34E58-0x00C34F94
		private void InterpolateTransformMode3D(); // 0x00C3512C-0x00C353E0
		private void InterpolateTransformModeCharacterController(); // 0x00C35748-0x00C35AF4
		private void InterpolateTransformMode2D(); // 0x00C353E0-0x00C35748
		private void Update(); // 0x00C35AF4-0x00C35BCC
		private bool HasMoved(); // 0x00C35F84-0x00C3648C
		[Client] // 0x003DC734-0x003DC744
		private void SendTransform(); // 0x00C35BCC-0x00C35F84
		public static void HandleTransform(NetworkMessage netMsg); // 0x00C36514-0x00C36974
		private static void WriteAngle(NetworkWriter writer, float angle, CompressionSyncMode compression); // 0x00C36974-0x00C369F8
		private static float ReadAngle(NetworkReader reader, CompressionSyncMode compression); // 0x00C36A34-0x00C36AA8
		public static void SerializeVelocity3D(NetworkWriter writer, Vector3 velocity, CompressionSyncMode compression); // 0x00C325C4-0x00C32614
		public static void SerializeVelocity2D(NetworkWriter writer, Vector2 velocity, CompressionSyncMode compression); // 0x00C326F8-0x00C32740
		public static void SerializeRotation3D(NetworkWriter writer, Quaternion rot, AxisSyncMode mode, CompressionSyncMode compression); // 0x00C321F0-0x00C322E8
		public static void SerializeRotation2D(NetworkWriter writer, float rot, CompressionSyncMode compression); // 0x00C32740-0x00C32744
		public static void SerializeSpin3D(NetworkWriter writer, Vector3 angularVelocity, AxisSyncMode mode, CompressionSyncMode compression); // 0x00C32614-0x00C326C4
		public static void SerializeSpin2D(NetworkWriter writer, float angularVelocity, CompressionSyncMode compression); // 0x00C32744-0x00C32748
		public static Vector3 UnserializeVelocity3D(NetworkReader reader, CompressionSyncMode compression); // 0x00C36AA8-0x00C36AD4
		public static Vector3 UnserializeVelocity2D(NetworkReader reader, CompressionSyncMode compression); // 0x00C36AD4-0x00C36B68
		public static Quaternion UnserializeRotation3D(NetworkReader reader, AxisSyncMode mode, CompressionSyncMode compression); // 0x00C33E44-0x00C3407C
		public static float UnserializeRotation2D(NetworkReader reader, CompressionSyncMode compression); // 0x00C34724-0x00C34728
		public static Vector3 UnserializeSpin3D(NetworkReader reader, AxisSyncMode mode, CompressionSyncMode compression); // 0x00C3453C-0x00C34724
		public static float UnserializeSpin2D(NetworkReader reader, CompressionSyncMode compression); // 0x00C34728-0x00C3472C
		public override int GetNetworkChannel(); // 0x00C36B68-0x00C36B70
		public override float GetNetworkSendInterval(); // 0x00C36B70-0x00C36B78
		public override void OnStartAuthority(); // 0x00C36B78-0x00C36BB0
	}

	[AddComponentMenu] // 0x003DBAB0-0x003DBB80
	[DisallowMultipleComponent] // 0x003DBAB0-0x003DBB80
	[EditorBrowsable] // 0x003DBAB0-0x003DBB80
	[Obsolete] // 0x003DBAB0-0x003DBB80
	[RequireComponent] // 0x003DBAB0-0x003DBB80
	public class NetworkTransformVisualizer : NetworkBehaviour // TypeDefIndex: 3151
	{
		// Fields
		[SerializeField] // 0x003DC55C-0x003DC5A8
		[Tooltip] // 0x003DC55C-0x003DC5A8
		private GameObject m_VisualizerPrefab; // 0x30
		private NetworkTransform m_NetworkTransform; // 0x38
		private GameObject m_Visualizer; // 0x40
		private static Material s_LineMaterial; // 0x00
	
		// Properties
		public GameObject visualizerPrefab { get; set; } // 0x00C38800-0x00C38808 0x00C38808-0x00C38810
	
		// Constructors
		public NetworkTransformVisualizer(); // 0x00C38798-0x00C38800
	
		// Methods
		public override void OnStartClient(); // 0x00C38810-0x00C38984
		public override void OnStartLocalPlayer(); // 0x00C38B24-0x00C38C08
		private void OnDestroy(); // 0x00C38C08-0x00C38CBC
		[ClientCallback] // 0x003DC744-0x003DC754
		private void FixedUpdate(); // 0x00C38CBC-0x00C391E8
		private void OnRenderObject(); // 0x00C391E8-0x00C39408
		private void DrawRotationInterpolation(); // 0x00C39408-0x00C398A8
		private static void CreateLineMaterial(); // 0x00C38984-0x00C38B24
	}

	[Obsolete] // 0x003DBB80-0x003DBBB8
	public class NetworkWriter // TypeDefIndex: 3152
	{
		// Fields
		private const int k_MaxStringLength = 32768; // Metadata: 0x0021BB06
		private NetBuffer m_Buffer; // 0x10
		private static Encoding s_Encoding; // 0x00
		private static byte[] s_StringWriteBuffer; // 0x08
		private static UIntFloat s_FloatConverter; // 0x10
	
		// Properties
		public short Position { get; } // 0x00C39984-0x00C399B8 
	
		// Constructors
		public NetworkWriter(); // 0x00C318B4-0x00C31980
		public NetworkWriter(byte[] buffer); // 0x00C398A8-0x00C39984
	
		// Methods
		public byte[] ToArray(); // 0x00C399B8-0x00C39AEC
		public byte[] AsArray(); // 0x00C39AEC-0x00C39B58
		internal ArraySegment<byte> AsArraySegment(); // 0x00C39B58-0x00C39B88
		public void WritePackedUInt32(uint value); // 0x00C2F214-0x00C2F300
		public void Write(NetworkInstanceId value); // 0x00C2F1DC-0x00C2F214
		public void Write(NetworkSceneId value); // 0x00C305D8-0x00C30610
		public void Write(byte value); // 0x00C2FA10-0x00C2FAD8
		public void Write(short value); // 0x00C369F8-0x00C36A34
		public void Write(ushort value); // 0x00C2EE90-0x00C2EECC
		public void Write(int value); // 0x00C39B88-0x00C39BCC
		public void Write(uint value); // 0x00C39BCC-0x00C39C10
		public void Write(float value); // 0x00C2F300-0x00C2F36C
		public void Write(string value); // 0x00C2F80C-0x00C2FA10
		public void Write(bool value); // 0x00C2FBC0-0x00C2FC0C
		public void WriteBytesAndSize(byte[] buffer, int count); // 0x00C2EECC-0x00C2F030
		public void WriteBytesFull(byte[] buffer); // 0x00C30290-0x00C303E0
		public void Write(Vector2 value); // 0x00C326C4-0x00C326F8
		public void Write(Vector3 value); // 0x00C3024C-0x00C30290
		public void Write(Quaternion value); // 0x00C303E0-0x00C3043C
		public void Write(NetworkHash128 value); // 0x00C3016C-0x00C3024C
		public void SeekZero(); // 0x00C39C10-0x00C39C40
		public void StartMessage(short msgType); // 0x00C3648C-0x00C364E4
		public void FinishMessage(); // 0x00C364E4-0x00C36514
	}

	[Obsolete] // 0x003DBBB8-0x003DBBF0
	public class PlayerController // TypeDefIndex: 3153
	{
		// Fields
		public short playerControllerId; // 0x10
		public NetworkIdentity unetView; // 0x18
		public GameObject gameObject; // 0x20
	
		// Properties
		public bool IsValid { get; } // 0x00C39CE0-0x00C39CF0 
	
		// Constructors
		public PlayerController(); // 0x00C39C40-0x00C39C50
		internal PlayerController(GameObject go, short playerControllerId); // 0x00C39C50-0x00C39CE0
	
		// Methods
		public override string ToString(); // 0x00C39CF0-0x00C39F60
	}

	public delegate void NetworkMessageDelegate(NetworkMessage netMsg); // TypeDefIndex: 3154; 0x006596C4-0x00659DF8

	public delegate GameObject SpawnDelegate(Vector3 position, NetworkHash128 assetId); // TypeDefIndex: 3155; 0x00C39F70-0x00C3A480

	public delegate void UnSpawnDelegate(GameObject spawned); // TypeDefIndex: 3156; 0x00C3A9F0-0x00C3B124

	[Obsolete] // 0x003DBBF0-0x003DBC28
	public class MsgType // TypeDefIndex: 3157
	{
		// Fields
		internal static string[] msgLabels; // 0x00
	
		// Constructors
		static MsgType(); // 0x005CEEDC-0x005CFEB0
	
		// Methods
		public static string MsgTypeToString(short value); // 0x005CEDB4-0x005CEEDC
	}

	[Obsolete] // 0x003DBC28-0x003DBC60
	public class NetworkMessage // TypeDefIndex: 3158
	{
		// Fields
		public short msgType; // 0x10
		public NetworkConnection conn; // 0x18
		public NetworkReader reader; // 0x20
		public int channelId; // 0x28
	
		// Constructors
		public NetworkMessage(); // 0x006596BC-0x006596C4
	
		// Methods
		public TMsg ReadMessage<TMsg>()
			where TMsg : MessageBase, new();
		public void ReadMessage<TMsg>(TMsg msg)
			where TMsg : MessageBase;
	}

	public enum Version // TypeDefIndex: 3159
	{
		Current = 1
	}

	public enum ChannelOption // TypeDefIndex: 3160
	{
		MaxPendingBuffers = 1,
		AllowFragmentation = 2,
		MaxPacketSize = 3
	}
}

public class DefaultModelRecoEventHandlerPlaceHolder : MonoBehaviour // TypeDefIndex: 3162
{
	// Constructors
	public DefaultModelRecoEventHandlerPlaceHolder(); // 0x005EA92C-0x005EA934
}

internal class DefaultInitializationErrorHandlerInternal : VuforiaMonoBehaviour // TypeDefIndex: 3163
{
	// Fields
	private string mErrorText; // 0x18
	private bool mErrorOccurred; // 0x20
	private const string headerLabel = "Vuforia Engine Initialization Error"; // Metadata: 0x0021BB1A
	private GUIStyle bodyStyle; // 0x28
	private GUIStyle headerStyle; // 0x30
	private GUIStyle footerStyle; // 0x38
	private Texture2D bodyTexture; // 0x40
	private Texture2D headerTexture; // 0x48
	private Texture2D footerTexture; // 0x50

	// Constructors
	public DefaultInitializationErrorHandlerInternal(); // 0x005EA8CC-0x005EA924

	// Methods
	public void OnVuforiaInitializationError(VuforiaUnity.InitError initError); // 0x005E9448-0x005E9478
	private void Awake(); // 0x005E9860-0x005E9924
	private void Start(); // 0x005E9924-0x005E9928
	private void OnGUI(); // 0x005E9E70-0x005E9F64
	private void OnDestroy(); // 0x005E9F64-0x005EA028
	private void DrawWindowContent(int id); // 0x005EA028-0x005EA23C
	private void SetErrorCode(VuforiaUnity.InitError errorCode); // 0x005E9478-0x005E9854
	private void SetErrorOccurred(bool errorOccurred); // 0x005E9854-0x005E9860
	private string getKeyInfo(); // 0x005EA23C-0x005EA7D4
	private void SetupGUIStyles(); // 0x005E9928-0x005E9E70
	private Texture2D CreateSinglePixelTexture(Color color); // 0x005EA7D4-0x005EA8CC
}

public class DefaultInitializationErrorHandlerPlaceHolder : VuforiaMonoBehaviour // TypeDefIndex: 3164
{
	// Constructors
	public DefaultInitializationErrorHandlerPlaceHolder(); // 0x005EA924-0x005EA92C
}

public class DefaultTrackableBehaviourPlaceholder : VuforiaMonoBehaviour // TypeDefIndex: 3165
{
	// Constructors
	public DefaultTrackableBehaviourPlaceholder(); // 0x005EA934-0x005EA93C
}

public class VuforiaMonoBehaviour : MonoBehaviour // TypeDefIndex: 3166
{
	// Constructors
	public VuforiaMonoBehaviour(); // 0x00C640FC-0x00C64104
}

namespace Vuforia
{
	public abstract class ARController // TypeDefIndex: 3167
	{
		// Fields
		private VuforiaBehaviour mVuforiaBehaviour; // 0x10
	
		// Properties
		protected VuforiaBehaviour VuforiaBehaviour { get; } // 0x005EA988-0x005EA990 
	
		// Nested types
		[CompilerGenerated] // 0x003DCB74-0x003DCB84
		private sealed class <>c__DisplayClass11_0 // TypeDefIndex: 3168
		{
			// Fields
			public ARController controller; // 0x10
	
			// Constructors
			public <>c__DisplayClass11_0(); // 0x005EAA90-0x005EAA98
	
			// Methods
			internal void <Register>b__0(VuforiaBehaviour bhvr); // 0x005EAE68-0x005EAE9C
			internal void <Register>b__1(VuforiaBehaviour bhvr); // 0x005EAE9C-0x005EAED0
		}
	
		// Constructors
		protected ARController(); // 0x005EAE60-0x005EAE68
	
		// Methods
		protected virtual void Awake(); // 0x005EA968-0x005EA96C
		protected virtual void OnEnable(); // 0x005EA96C-0x005EA970
		protected virtual void Start(); // 0x005EA970-0x005EA974
		protected virtual void Update(); // 0x005EA974-0x005EA978
		protected virtual void OnLevelWasLoaded(); // 0x005EA978-0x005EA97C
		protected virtual void OnApplicationPause(bool pause); // 0x005EA97C-0x005EA980
		protected virtual void OnDisable(); // 0x005EA980-0x005EA984
		protected virtual void OnDestroy(); // 0x005EA984-0x005EA988
		protected static void Register(ARController controller); // 0x005EA990-0x005EAA90
		private void RegisterCamera(VuforiaBehaviour bhvr); // 0x005EAA98-0x005EAD54
		private void UnregisterCamera(VuforiaBehaviour bhvr); // 0x005EAD54-0x005EAE60
	}

	internal static class EulaRuntimeUtility // TypeDefIndex: 3169
	{
		// Fields
		private const string VERSIONS_KEY = "Values"; // Metadata: 0x0021BB41
	
		// Methods
		public static IEnumerable<string> JsonToVersionStrings(string json); // 0x00527F70-0x0052822C
		public static System.Version ConvertToMajorMinorVersion(string versionString); // 0x0052822C-0x00528398
	}

	internal abstract class AMigratableVideoBackgroundConfigProperty // TypeDefIndex: 3170
	{
		// Fields
		protected readonly VuforiaConfiguration.VideoBackgroundConfiguration Config; // 0x10
	
		// Constructors
		protected AMigratableVideoBackgroundConfigProperty(VuforiaConfiguration.VideoBackgroundConfiguration config); // 0x005EA93C-0x005EA968
	
		// Methods
		public abstract bool Migrate();
	}

	internal class MatteShaderPropertyMigration : AMigratableVideoBackgroundConfigProperty // TypeDefIndex: 3171
	{
		// Fields
		private readonly string mOldShaderName; // 0x18
		private readonly string mNewShaderName; // 0x20
	
		// Constructors
		public MatteShaderPropertyMigration(VuforiaConfiguration.VideoBackgroundConfiguration config, string oldShaderName, string newShaderName); // 0x00539194-0x005391CC
	
		// Methods
		public override bool Migrate(); // 0x005391CC-0x005393BC
	}

	internal class VideoBackgroundConfigMigrator // TypeDefIndex: 3172
	{
		// Fields
		private readonly List<AMigratableVideoBackgroundConfigProperty> mMigratableProperties; // 0x10
	
		// Nested types
		[Serializable]
		[CompilerGenerated] // 0x003DCB84-0x003DCB94
		private sealed class <>c // TypeDefIndex: 3173
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static Func<AMigratableVideoBackgroundConfigProperty, bool> <>9__2_0; // 0x08
			public static Func<bool, bool> <>9__2_1; // 0x10
	
			// Constructors
			static <>c(); // 0x0046BA8C-0x0046BAF0
			public <>c(); // 0x0046BAF0-0x0046BAF8
	
			// Methods
			internal bool <MigrateAll>b__2_0(AMigratableVideoBackgroundConfigProperty p); // 0x0046BAF8-0x0046BB2C
			internal bool <MigrateAll>b__2_1(bool migrationPerformed); // 0x0046BB2C-0x0046BB34
		}
	
		// Constructors
		public VideoBackgroundConfigMigrator(VuforiaConfiguration.VideoBackgroundConfiguration config); // 0x0046B77C-0x0046B8B8
	
		// Methods
		public bool MigrateAll(); // 0x0046B8F0-0x0046BA8C
	}

	internal class VideoBackgroundShaderPropertyMigration : AMigratableVideoBackgroundConfigProperty // TypeDefIndex: 3174
	{
		// Fields
		private readonly string mOldShaderName; // 0x18
		private readonly string mNewShaderName; // 0x20
	
		// Constructors
		public VideoBackgroundShaderPropertyMigration(VuforiaConfiguration.VideoBackgroundConfiguration config, string oldShaderName, string newShaderName); // 0x0046B8B8-0x0046B8F0
	
		// Methods
		public override bool Migrate(); // 0x0046CE40-0x0046D030
	}

	public class ImageTargetFinder : TargetFinder // TypeDefIndex: 3175
	{
		// Nested types
		private struct CloudRecoSearchResultData // TypeDefIndex: 3176
		{
			// Fields
			public IntPtr TargetNamePtr; // 0x00
			public IntPtr UniqueTargetIdPtr; // 0x08
			public IntPtr MetaDataPtr; // 0x10
			public IntPtr TargetSearchResultPtr; // 0x18
			public float TargetSize; // 0x20
			public int TrackingRating; // 0x24
		}
	
		// Constructors
		public ImageTargetFinder(IntPtr targetFinderPtr); // 0x00535AE8-0x00535AF0
	
		// Methods
		public bool StartInit(string userAuth, string secretAuth); // 0x00535AF0-0x00535C08
		protected override TrackableBehaviour CreateObjectTarget(string targetName, TargetFinderObjectTargetData objTargetData, GameObject gameObj); // 0x00535C08-0x00535D50
		protected override void DeleteObsoleteTargets(List<int> newTargetIds); // 0x00535D50-0x00536030
		internal override List<TargetSearchResult> ParseSearchResults(TrackerData.StructList resultList); // 0x00536030-0x005362B0
		internal override void FreeResultList(IntPtr listPtr); // 0x005362B0-0x00536390
	}

	internal class GuideViewContainer // TypeDefIndex: 3177
	{
		// Fields
		private readonly IntPtr mTrackablePtr; // 0x10
		private readonly Dictionary<int, GuideView> mLoadedGuideViews; // 0x18
	
		// Constructors
		internal GuideViewContainer(IntPtr trackablePtr); // 0x0052E434-0x0052E4B8
	
		// Methods
		internal void Clear(); // 0x0052E4B8-0x0052E620
		internal int GetNumGuideViews(); // 0x0052E620-0x0052E704
		internal GuideView GetGuideView(int index); // 0x0052E704-0x0052E8D8
		internal bool SetActiveGuideViewIndex(int index); // 0x0052E8D8-0x0052E9D8
		internal int GetActiveGuideViewIndex(); // 0x0052E9D8-0x0052EABC
	}

	internal class ModelRecoModelTargetImpl : ObjectTargetImpl, InternalModelTarget // TypeDefIndex: 3178
	{
		// Fields
		private readonly Vector3 mCenter; // 0x28
		private readonly Vector3 mSize; // 0x34
		private readonly IntPtr mTrackablePtr; // 0x40
		private readonly GuideViewContainer mGuideViewContainer; // 0x48
	
		// Constructors
		internal ModelRecoModelTargetImpl(string name, int id, Vector3 center, Vector3 size, IntPtr trackablePtr); // 0x0053BFD8-0x0053C0D0
	
		// Methods
		public OrientedBoundingBox3D GetBoundingBox(); // 0x0053C0FC-0x0053C1BC
		public int GetNumGuideViews(); // 0x0053C1BC-0x0053C1E8
		public GuideView GetGuideView(int index); // 0x0053C1E8-0x0053C21C
		public bool SetActiveGuideViewIndex(int index); // 0x0053C21C-0x0053C250
		public int GetActiveGuideViewIndex(); // 0x0053C250-0x0053C27C
		public void ClearGuideViews(); // 0x0053C27C-0x0053C2A8
	}

	public class ModelRecoBehaviour : ObjectRecoBehaviour // TypeDefIndex: 3179
	{
		// Fields
		[Tooltip] // 0x003DCD28-0x003DCD60
		public string Database; // 0x40
	
		// Properties
		public bool ModelRecoEnabled { get; set; } // 0x0053B688-0x0053B690 0x0053B698-0x0053B6A4
		public bool ModelRecoInitialized { get; } // 0x0053B6B0-0x0053B6B8 
	
		// Constructors
		public ModelRecoBehaviour(); // 0x0053BF0C-0x0053BF60
	
		// Methods
		protected override void Initialize(); // 0x0053B6C0-0x0053BAE4
		protected override void Deinitialize(); // 0x0053BBFC-0x0053BC9C
		protected override bool IsRecoAvailable(); // 0x0053BC9C-0x0053BCA4
		protected void Awake(); // 0x0053BCA4-0x0053BDA8
		private void OnValidate(); // 0x0053BDA8-0x0053BDF4
		private void OnVuforiaInitialized(); // 0x0053BDF4-0x0053BDF8
		private static void InitPositionalDeviceTracker(); // 0x0053BDF8-0x0053BE74
		private static bool ShouldDeviceTrackerStartAutomatically(); // 0x0053BE74-0x0053BF0C
	}

	public class ModelTargetFinder : TargetFinder // TypeDefIndex: 3180
	{
		// Fields
		private ModelTargetBehaviour mLastEnabledMTBehaviour; // 0x38
	
		// Nested types
		private struct ModelTargetRecoSearchResultData // TypeDefIndex: 3181
		{
			// Fields
			public IntPtr TargetNamePtr; // 0x00
			public IntPtr UniqueTargetIdPtr; // 0x08
			public IntPtr GuideViewNamePtr; // 0x10
			public IntPtr TargetSearchResultPtr; // 0x18
			public float Confidence; // 0x20
			public int unused; // 0x24
		}
	
		// Constructors
		public ModelTargetFinder(IntPtr targetFinderPtr); // 0x0053E304-0x0053E32C
	
		// Methods
		public bool StartInit(string deviceDatabasePath, VuforiaUnity.StorageType storageType); // 0x0053BAE4-0x0053BBFC
		protected override TrackableBehaviour CreateObjectTarget(string targetName, TargetFinderObjectTargetData objTargetData, GameObject gameObj); // 0x0053E32C-0x0053E608
		protected override void DeleteObsoleteTargets(List<int> newTargetIds); // 0x0053E608-0x0053E8C4
		protected override void ClearAdditionalGameObjects(); // 0x0053E8C4-0x0053EA50
		internal override List<TargetSearchResult> ParseSearchResults(TrackerData.StructList resultList); // 0x0053EA50-0x0053ECC0
		internal override void FreeResultList(IntPtr listPtr); // 0x0053ECC0-0x0053EDA0
	}

	public abstract class ObjectRecoBehaviour : VuforiaMonoBehaviour // TypeDefIndex: 3182
	{
		// Fields
		protected ObjectTracker mObjectTracker; // 0x18
		protected TargetFinder mTargetFinder; // 0x20
		protected bool mCurrentlyInitializing; // 0x28
		protected bool mInitSuccess; // 0x29
		private bool mRecoStarted; // 0x2A
		private bool mOnInitializedCalled; // 0x2B
		private readonly List<IObjectRecoEventHandler> mHandlers; // 0x30
		private bool mTargetFinderStartedBeforeDisable; // 0x38
	
		// Properties
		public bool RecoEnabled { get; set; } // 0x0053B690-0x0053B698 0x0053B6A4-0x0053B6B0
		public bool RecoInitialized { get; } // 0x0053B6B8-0x0053B6C0 
	
		// Constructors
		protected ObjectRecoBehaviour(); // 0x0053BF60-0x0053BFD8
	
		// Methods
		protected abstract void Initialize();
		protected abstract void Deinitialize();
		protected abstract bool IsRecoAvailable();
		private void CheckInitialization(); // 0x005420E0-0x00542408
		private void StartReco(); // 0x00541D34-0x00541EE8
		private void StopReco(); // 0x00541EE8-0x005420E0
		public void RegisterEventHandler(IObjectRecoEventHandler eventHandler); // 0x00542408-0x0054250C
		public bool UnregisterEventHandler(IObjectRecoEventHandler eventHandler); // 0x0054250C-0x0054257C
		private void OnEnable(); // 0x0054257C-0x00542594
		private void OnDisable(); // 0x00542594-0x00542638
		private void Start(); // 0x00542638-0x005426F4
		private void Update(); // 0x005426F4-0x00542CDC
		private void OnDestroy(); // 0x00542CDC-0x00542EF0
		internal void OnVuforiaStarted(); // 0x00542EF0-0x00543008
	}

	internal class CameraCalibrationComparer // TypeDefIndex: 3183
	{
		// Fields
		private const float TOLERANCE = 0.0001f; // Metadata: 0x0021BB4B
		private Vector4 mLastCameraCalibrationValues; // 0x10
	
		// Constructors
		public CameraCalibrationComparer(); // 0x005EFB6C-0x005EFBE4
	
		// Methods
		public bool HasCameraCalibrationChanged(Vector4 currentCameraCalib); // 0x005EFA64-0x005EFB6C
	}

	public class IlluminationManager // TypeDefIndex: 3184
	{
		// Fields
		private const float UNAVAILABLE = -1f; // Metadata: 0x0021BB4F
		private TrackerData.IlluminationData mIlluminationData; // 0x10
	
		// Properties
		public float? AmbientIntensity { get; } // 0x00531EAC-0x00531F18 
		public float? AmbientColorTemperature { get; } // 0x00531FAC-0x00532018 
	
		// Constructors
		internal IlluminationManager(); // 0x00531E98-0x00531EAC
	
		// Methods
		internal void UpdateIlluminationData(TrackerData.IlluminationData illuminationData); // 0x00532018-0x00532020
		private static float? GetValueOrDefault(float? value); // 0x00531F18-0x00531FAC
	}

	internal interface IUnityRenderEventBroadcaster // TypeDefIndex: 3185
	{
		// Events
		event Action PreRenderEvent {
			add; // 0x00000000-0x00000000
			remove; // 0x00000000-0x00000000
		}
		event Action PostRenderEvent {
			add; // 0x00000000-0x00000000
			remove; // 0x00000000-0x00000000
		}
	}

	internal class UnityRenderEventBroadcaster : IUnityRenderEventBroadcaster, IDisposable // TypeDefIndex: 3186
	{
		// Fields
		private readonly IUnityRenderPipeline mRenderPipeline; // 0x10
		private RenderEventBehaviour mRenderEventBehaviour; // 0x18
		[CompilerGenerated] // 0x003DCD60-0x003DCD70
		private Action PreRenderEvent; // 0x20
		[CompilerGenerated] // 0x003DCD70-0x003DCD80
		private Action PostRenderEvent; // 0x28
	
		// Events
		public event Action PreRenderEvent {
			add; // 0x0046591C-0x00465A08
			remove; // 0x00465A08-0x00465AF4
		}
		public event Action PostRenderEvent {
			add; // 0x00465AF4-0x00465BE0
			remove; // 0x00465BE0-0x00465CCC
		}
	
		// Nested types
		[RequireComponent] // 0x003DCB94-0x003DCBF8
		private class RenderEventBehaviour : VuforiaMonoBehaviour, IUnityRenderEventBroadcaster // TypeDefIndex: 3187
		{
			// Fields
			[CompilerGenerated] // 0x003DE008-0x003DE018
			private Action PreRenderEvent; // 0x18
			[CompilerGenerated] // 0x003DE018-0x003DE028
			private Action PostRenderEvent; // 0x20
	
			// Events
			public event Action PreRenderEvent {
				add; // 0x00465FA8-0x00466094
				remove; // 0x0046630C-0x004663F8
			}
			public event Action PostRenderEvent {
				add; // 0x004663F8-0x004664E4
				remove; // 0x004664E4-0x004665D0
			}
	
			// Constructors
			public RenderEventBehaviour(); // 0x004665F8-0x00466600
	
			// Methods
			private void OnPreRender(); // 0x004665D0-0x004665E4
			private void OnPostRender(); // 0x004665E4-0x004665F8
		}
	
		// Constructors
		public UnityRenderEventBroadcaster(IUnityRenderPipeline renderPipeline); // 0x00465CCC-0x00465CFC
	
		// Methods
		public void RegisterCameraGameObject(GameObject gameObject); // 0x00465E9C-0x00465FA8
		private void RegisterScriptableRenderPipeline(); // 0x00465CFC-0x00465E9C
		private void BeginFrameRendering(Camera[] obj); // 0x00466094-0x004660A8
		private void BeginCameraRendering(Camera obj); // 0x004660BC-0x004660D0
		private void OnPostRender(); // 0x004660D0-0x004660E4
		private void OnPreRender(); // 0x004660A8-0x004660BC
		public void Dispose(); // 0x004660E4-0x00466108
		private void UnregisterScriptableRenderPipeline(); // 0x00466250-0x0046630C
		private void UnregisterCameraGameObject(); // 0x00466108-0x00466250
	}

	internal class VideoTextureUpdaterFactory // TypeDefIndex: 3188
	{
		// Fields
		private readonly VuforiaRenderer mRenderer; // 0x10
		private readonly IUnityRenderEventBroadcaster mRenderEventBroadcaster; // 0x18
	
		// Constructors
		public VideoTextureUpdaterFactory(VuforiaRenderer renderer, IUnityRenderEventBroadcaster renderEventBroadcaster); // 0x0046B4DC-0x0046B514
	
		// Methods
		public IVideoTextureUpdater CreateTextureUpdater(Camera camera, BackgroundPlaneBehaviour bgPlaneBehaviour); // 0x0046B514-0x0046B634
	}

	internal static class LegacyRenderingConfiguration // TypeDefIndex: 3189
	{
		// Fields
		private static readonly Dictionary<GraphicsDeviceType, bool> sUseLegacyRendering; // 0x00
		private static readonly HashSet<PIXEL_FORMAT> sCommandBufferSupportedPixelFormats; // 0x08
	
		// Nested types
		internal class RendererApiNotSupportedException : Exception // TypeDefIndex: 3190
		{
			// Constructors
			public RendererApiNotSupportedException(string message); // 0x005389FC-0x00538A74
		}
	
		// Constructors
		static LegacyRenderingConfiguration(); // 0x00538A74-0x00538D4C
	
		// Methods
		public static bool IsLegacyRenderingEnabled(GraphicsDeviceType rendererApi, PIXEL_FORMAT format); // 0x005387EC-0x005388EC
		private static void Guard(GraphicsDeviceType rendererApi); // 0x005388EC-0x005389FC
	}

	public class PreviewModelTurnOffBehaviour : VuforiaMonoBehaviour // TypeDefIndex: 3191
	{
		// Fields
		internal const string GameObjectPrefix = "EditorPreview"; // Metadata: 0x0021BB53
	
		// Constructors
		public PreviewModelTurnOffBehaviour(); // 0x00452234-0x0045223C
	
		// Methods
		private void Awake(); // 0x00451E20-0x00452230
		private void Start(); // 0x00452230-0x00452234
	}

	public interface Anchor : Trackable // TypeDefIndex: 3192
	{
	}

	internal interface IPlayModeDeviceTracker // TypeDefIndex: 3193
	{
		// Properties
		Vector3 Rotation { get; set; }
		Vector3 Position { get; set; }
	
		// Methods
		TrackerData.TrackableResultData GetTrackable();
		TrackableBehaviour.StatusInfo GetStatusInfo();
	}

	internal class PositionalDeviceTrackerImpl : PositionalDeviceTracker // TypeDefIndex: 3194
	{
		// Fields
		[CompilerGenerated] // 0x003DCD80-0x003DCD90
		private Action<Anchor> mAnchorRemovedEvent; // 0x18
	
		// Events
		private event Action<Anchor> mAnchorRemovedEvent {
			add; // 0x0044FB70-0x0044FC5C
			remove; // 0x0044FC5C-0x0044FD48
		}
	
		// Nested types
		[Serializable]
		[CompilerGenerated] // 0x003DCBF8-0x003DCC08
		private sealed class <>c // TypeDefIndex: 3195
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static Func<TrackableBehaviour, bool> <>9__12_0; // 0x08
	
			// Constructors
			static <>c(); // 0x004510F4-0x00451158
			public <>c(); // 0x00451158-0x00451160
	
			// Methods
			internal bool <ResetAnchors>b__12_0(TrackableBehaviour t); // 0x00451160-0x004511E0
		}
	
		// Constructors
		public PositionalDeviceTrackerImpl(); // 0x0045106C-0x00451074
	
		// Methods
		public override bool Start(); // 0x0044FD48-0x00450100
		public override void Stop(); // 0x00450194-0x004503E0
		public override bool Reset(); // 0x004503E0-0x004504F8
		private Anchor CreateMidAirAnchorInternal(string name, Vector3 position, Quaternion rotation); // 0x004504F8-0x00450A2C
		private Anchor CreatePlaneAnchorInternal(string name, HitTestResult hitTestResult); // 0x00450A2C-0x00450C98
		public override Anchor CreateMidAirAnchor(string name, Vector3 position, Quaternion rotation); // 0x00450C98-0x00450C9C
		public override Anchor CreatePlaneAnchor(string name, HitTestResult hitTestResult); // 0x00450C9C-0x00450CA0
		public override void RegisterAnchorRemovedCallback(Action<Anchor> onAnchorRemovedAction); // 0x00450CA0-0x00450CA4
		public override void UnregisterAnchorRemovedCallback(Action<Anchor> onAnchorRemovedAction); // 0x00450CA4-0x00450CA8
		public override void ResetAnchors(); // 0x00450CA8-0x00450E8C
		protected void RemoveAnchor(Anchor anchor); // 0x00450E8C-0x00450F00
		internal override bool DestroyAnchor(Anchor anchor); // 0x00450F00-0x0045106C
		[CompilerGenerated] // 0x003DE370-0x003DE380
		private void <ResetAnchors>b__12_1(TrackableBehaviour a); // 0x00451074-0x004510F4
	}

	internal class PositionalPlayModeDeviceTrackerImpl : PositionalDeviceTrackerImpl // TypeDefIndex: 3196
	{
		// Fields
		private DataSet mEmulatorDataset; // 0x20
	
		// Constructors
		public PositionalPlayModeDeviceTrackerImpl(); // 0x00451770-0x00451778
	
		// Methods
		public override bool Start(); // 0x004511E0-0x00451228
		private bool StartDeviceTracker(); // 0x00451228-0x0045124C
		private void SetupDebugTrackable(); // 0x0045124C-0x0045149C
		private void CleanUpDebugTrackable(); // 0x0045149C-0x00451594
		public override void Stop(); // 0x00451594-0x004515D8
		public override Anchor CreateMidAirAnchor(string name, Vector3 position, Quaternion rotation); // 0x004515D8-0x00451640
		public override Anchor CreatePlaneAnchor(string name, HitTestResult hitTestResult); // 0x00451640-0x004516A8
		public override void ResetAnchors(); // 0x004516A8-0x00451770
		[CompilerGenerated] // 0x003DE380-0x003DE390
		private void <ResetAnchors>b__8_0(AnchorBehaviour a); // 0x00451778-0x004517F8
	}

	public abstract class PositionalDeviceTracker : DeviceTracker // TypeDefIndex: 3197
	{
		// Constructors
		protected PositionalDeviceTracker(); // 0x0044FB68-0x0044FB70
	
		// Methods
		public abstract bool Reset();
		public abstract Anchor CreateMidAirAnchor(string name, Vector3 position, Quaternion rotation);
		public abstract Anchor CreatePlaneAnchor(string name, HitTestResult hitTestResult);
		public abstract void RegisterAnchorRemovedCallback(Action<Anchor> onAnchorRemovedAction);
		public abstract void UnregisterAnchorRemovedCallback(Action<Anchor> onAnchorRemovedAction);
		public abstract void ResetAnchors();
		internal abstract bool DestroyAnchor(Anchor anchor);
	}

	internal class StaticWebCamTexAdaptor : IWebCamTexAdaptor // TypeDefIndex: 3198
	{
		// Fields
		[CompilerGenerated] // 0x003DCD90-0x003DCDA0
		private Texture <Texture>k__BackingField; // 0x10
	
		// Properties
		public bool DidUpdateThisFrame { get; } // 0x0045FA78-0x0045FA80 
		public bool IsPlaying { get; } // 0x0045FA80-0x0045FA88 
		public Texture Texture { [CompilerGenerated] /* 0x003DE390-0x003DE3A0 */ get; [CompilerGenerated] /* 0x003DE3A0-0x003DE3B0 */ private set; } // 0x0045FA88-0x0045FA90 0x0045FA90-0x0045FA98
	
		// Constructors
		public StaticWebCamTexAdaptor(Texture texture); // 0x0045FA98-0x0045FAC4
	
		// Methods
		public void Play(); // 0x0045FAC4-0x0045FAC8
		public void Stop(); // 0x0045FAC8-0x0045FACC
		public void CheckPermissions(); // 0x0045FACC-0x0045FAD0
	}

	public class AnchorBehaviour : TrackableBehaviour // TypeDefIndex: 3199
	{
		// Fields
		[HideInInspector] // 0x003DCDA0-0x003DCDD8
		[SerializeField] // 0x003DCDA0-0x003DCDD8
		private StageType mSelectedStageType; // 0x50
		[HideInInspector] // 0x003DCDD8-0x003DCE10
		[SerializeField] // 0x003DCDD8-0x003DCE10
		private GameObject mPlaneReference; // 0x58
		[HideInInspector] // 0x003DCE10-0x003DCE48
		[SerializeField] // 0x003DCE10-0x003DCE48
		private GameObject mMidAirReference; // 0x60
		private Anchor mAnchor; // 0x68
	
		// Constructors
		public AnchorBehaviour(); // 0x005EB2E8-0x005EB2F0
	
		// Methods
		public void ConfigureAnchor(Anchor anchor); // 0x005EAF08-0x005EB040
		public void UnConfigureAnchor(); // 0x005EB040-0x005EB070
		private void OnDestroy(); // 0x005EB2D8-0x005EB2DC
		private void DestroyAnchor(); // 0x005EB070-0x005EB2D8
		protected override void InternalUnregisterTrackable(); // 0x005EB2DC-0x005EB2E8
	}

	[RequireComponent] // 0x003DC9B8-0x003DCA1C
	public class GuideViewCameraBehaviour : VuforiaMonoBehaviour // TypeDefIndex: 3200
	{
		// Constructors
		public GuideViewCameraBehaviour(); // 0x0052E42C-0x0052E434
	
		// Methods
		private void Update(); // 0x0052E398-0x0052E42C
	}

	internal class ModelTargetBoundingBoxImpl : IBoundingBox // TypeDefIndex: 3201
	{
		// Fields
		private readonly DataSet mDataSet; // 0x10
		private readonly string mName; // 0x18
	
		// Constructors
		public ModelTargetBoundingBoxImpl(DataSet dataset, string name); // 0x0053E074-0x0053E0AC
	
		// Methods
		public OrientedBoundingBox3D GetBoundingBox(); // 0x0053E0AC-0x0053E304
	}

	public static class AndroidDatasets // TypeDefIndex: 3202
	{
		// Methods
		public static void AddExternalDatasetSearchDirs(); // 0x005EB7B8-0x005EBA38
	}

	internal class AndroidUnityPlayer : IUnityPlayer // TypeDefIndex: 3203
	{
		// Fields
		private const int NUM_FRAMES_TO_QUERY_ORIENTATION = 25; // Metadata: 0x0021BB64
		private const int JAVA_ORIENTATION_CHECK_FRM_INTERVAL = 60; // Metadata: 0x0021BB68
		private ScreenOrientation mScreenOrientation; // 0x10
		private ScreenOrientation mJavaScreenOrientation; // 0x14
		private int mFramesSinceLastOrientationReset; // 0x18
		private int mFramesSinceLastJavaOrientationCheck; // 0x1C
		private AndroidJavaObject mCurrentActivity; // 0x20
		private AndroidJavaClass mJavaOrientationUtility; // 0x28
		private AndroidJavaClass mVuforiaInitializer; // 0x30
	
		// Constructors
		public AndroidUnityPlayer(); // 0x005EC544-0x005EC54C
	
		// Methods
		public void LoadNativeLibraries(); // 0x005EBC74-0x005EBC78
		public void InitializePlatform(); // 0x005EBD9C-0x005EBDA0
		public VuforiaUnity.InitError InitializeVuforia(string licenseKey); // 0x005EBE28-0x005EBED8
		public void ResetPlatformCoordinateSystem(); // 0x005EC184-0x005EC188
		public void Update(); // 0x005EC188-0x005EC238
		public void OnPause(); // 0x005EC3C8-0x005EC428
		public void OnResume(); // 0x005EC428-0x005EC488
		public void OnDestroy(); // 0x005EC488-0x005EC4E8
		public void Dispose(); // 0x005EC4E8-0x005EC544
		private void LoadNativeLibrariesFromJava(); // 0x005EBC78-0x005EBD9C
		private void InitAndroidPlatform(); // 0x005EBDA0-0x005EBE28
		private int InitVuforia(int rendererAPI, string licenseKey); // 0x005EBED8-0x005EC080
		private void InitializeSurface(); // 0x005EC080-0x005EC184
		private void ResetUnityScreenOrientation(); // 0x005EC238-0x005EC264
		private void CheckOrientation(); // 0x005EC264-0x005EC3C8
	}

	internal class IOSUnityPlayer : IUnityPlayer // TypeDefIndex: 3204
	{
		// Fields
		private ScreenOrientation mScreenOrientation; // 0x10
	
		// Constructors
		public IOSUnityPlayer(); // 0x00531E90-0x00531E98
	
		// Methods
		public void LoadNativeLibraries(); // 0x00531E68-0x00531E6C
		public void InitializePlatform(); // 0x00531E6C-0x00531E70
		public VuforiaUnity.InitError InitializeVuforia(string licenseKey); // 0x00531E70-0x00531E78
		public void ResetPlatformCoordinateSystem(); // 0x00531E78-0x00531E7C
		public void Update(); // 0x00531E7C-0x00531E80
		public void Dispose(); // 0x00531E80-0x00531E84
		public void OnPause(); // 0x00531E84-0x00531E88
		public void OnResume(); // 0x00531E88-0x00531E8C
		public void OnDestroy(); // 0x00531E8C-0x00531E90
	}

	public static class PlatformRuntimeInitialization // TypeDefIndex: 3205
	{
		// Methods
		[RuntimeInitializeOnLoadMethod] // 0x003DE3B0-0x003DE3C4
		public static void InitPlatform(); // 0x0044D988-0x0044DCB8
	}

	public class PlayModeUnityPlayer : IUnityPlayer // TypeDefIndex: 3206
	{
		// Constructors
		public PlayModeUnityPlayer(); // 0x0044DCB8-0x0044DCC0
	
		// Methods
		public void LoadNativeLibraries(); // 0x0044E46C-0x0044E470
		public void InitializePlatform(); // 0x0044E470-0x0044E570
		private void InitializeSurface(); // 0x0044E5DC-0x0044E638
		public VuforiaUnity.InitError InitializeVuforia(string licenseKey); // 0x0044E6B4-0x0044E794
		public void ResetPlatformCoordinateSystem(); // 0x0044E794-0x0044E798
		public void Update(); // 0x0044E798-0x0044E808
		public void Dispose(); // 0x0044E8EC-0x0044E8F0
		public void OnPause(); // 0x0044E8F0-0x0044E8F4
		public void OnResume(); // 0x0044E8F4-0x0044E8F8
		public void OnDestroy(); // 0x0044E8F8-0x0044E958
	}

	internal class WSAUnityPlayer : IUnityPlayer // TypeDefIndex: 3207
	{
		// Constructors
		public WSAUnityPlayer(); // 0x00C614D0-0x00C614D8
	
		// Methods
		public void LoadNativeLibraries(); // 0x00C614A8-0x00C614AC
		public void InitializePlatform(); // 0x00C614AC-0x00C614B0
		public VuforiaUnity.InitError InitializeVuforia(string licenseKey); // 0x00C614B0-0x00C614B8
		public void ResetPlatformCoordinateSystem(); // 0x00C614B8-0x00C614BC
		public void Update(); // 0x00C614BC-0x00C614C0
		public void Dispose(); // 0x00C614C0-0x00C614C4
		public void OnPause(); // 0x00C614C4-0x00C614C8
		public void OnResume(); // 0x00C614C8-0x00C614CC
		public void OnDestroy(); // 0x00C614CC-0x00C614D0
	}

	internal class VideoBackgroundDefaultProvider // TypeDefIndex: 3208
	{
		// Fields
		private const string VIDEO_BACKGROUND_SHADER = "Custom/VideoBackground"; // Metadata: 0x0021BB6C
		private const string CLIPPING_MASK_SHADER = "Custom/ClippingMask"; // Metadata: 0x0021BB86
		private const int DEFAULT_NUM_DIVISIONS = 2; // Metadata: 0x0021BB9D
	
		// Properties
		public int DefaultNumDivisions { get; } // 0x0046BDC8-0x0046BDD0 
	
		// Constructors
		public VideoBackgroundDefaultProvider(); // 0x0046BF64-0x0046BF6C
	
		// Methods
		public Shader GetDefaultMatteShader(HideExcessAreaUtility.CLIPPING_MODE mode); // 0x0046BDD0-0x0046BF18
		public Shader GetDefaultVideoBackgroundShader(); // 0x0046BF18-0x0046BF64
	}

	internal class PlanesHideExcessAreaClipping : IExcessAreaClipping // TypeDefIndex: 3209
	{
		// Fields
		private const float TOLERANCE = 0.02f; // Metadata: 0x0021BBA1
		private Shader mMatteShader; // 0x10
		private GameObject[] mClippingPlanes; // 0x18
		private bool mPlanesActivated; // 0x20
		private Vector2 mClippingScale; // 0x24
	
		// Nested types
		private enum PlanePos // TypeDefIndex: 3210
		{
			TOP = 0,
			BOTTOM = 1,
			LEFT = 2,
			RIGHT = 3
		}
	
		// Constructors
		public PlanesHideExcessAreaClipping(Shader matteShader); // 0x00530A48-0x00530AD0
	
		// Methods
		private GameObject CreateQuad(GameObject parent, string name, Vector3 position, Quaternion rotation, Vector3 scale, int layer); // 0x005460C4-0x005463A4
		public void SetPlanesRenderingActive(bool activeflag); // 0x005463A4-0x00546444
		public bool IsPlanesRenderingActive(); // 0x00546444-0x0054644C
		public void Start(GameObject gameObject); // 0x0054644C-0x00546740
		public void OnDestroy(); // 0x00546740-0x00546800
		public void Update(Vector2 halfScale); // 0x00546800-0x00546D78
	}

	internal class VuforiaVRDeviceCameraConfiguration : VRDeviceCameraConfiguration, ICameraConfiguration // TypeDefIndex: 3211
	{
		// Fields
		private const string CLASS_NAME = "VUFORIA_VRDEVICE_CAMERA_CONFIGURAION"; // Metadata: 0x0021BBB5
		private float mStereoOffset; // 0xD8
		private bool mDelayedVideoBackgroundEnabledChanged; // 0xDC
	
		// Constructors
		public VuforiaVRDeviceCameraConfiguration(Camera cam, VRDeviceController vrDeviceController, float stereoOffset); // 0x00C601C0-0x00C60260
	
		// Methods
		public override void Init(); // 0x00C60260-0x00C60654
		public override void CheckForSurfaceChanges(); // 0x00C60654-0x00C606AC
		public override void OnAfterUpdateState(Transform trackingReference); // 0x00C6078C-0x00C607E8
		public override void OnVideoBackGroundEnabledChanged(); // 0x00C607E8-0x00C60844
		public override void Destroy(); // 0x00C60844-0x00C608B4
		protected override void UpdateProjection(); // 0x00C608B4-0x00C60EA8
		protected override bool ProjectionParamsChanged(); // 0x00C60EA8-0x00C610B0
		protected override float GetStereoEyeDistance(); // 0x00C610B0-0x00C610B8
		private static bool IsVuforiaVRDeviceReady(); // 0x00C606AC-0x00C6078C
	}

	internal class CommandBufferVideoTextureUpdater : IVideoTextureUpdater // TypeDefIndex: 3212
	{
		// Fields
		private const string RGB_KEYWORD = "VUFORIA_RGB"; // Metadata: 0x0021BBDD
		private const string YUVN21_KEYWORD = "VUFORIA_YUVNV21"; // Metadata: 0x0021BBEC
		private const string YUVN12_KEYWORD = "VUFORIA_YUVNV12"; // Metadata: 0x0021BBFF
		private const PIXEL_FORMAT DEFAULT_NATIVE_PIXEL_FORMAT = PIXEL_FORMAT.RGB565; // Metadata: 0x0021BC12
		private readonly CommandBuffer mCommandBuffer; // 0x10
		private readonly Material mVideoBackgroundMaterial; // 0x18
		private readonly BackgroundPlaneBehaviour mBgPlaneBehaviour; // 0x20
		private readonly IUnityRenderEventBroadcaster mRenderEventBroadcaster; // 0x28
		private bool mCommandBufferInitialized; // 0x30
		private static readonly Dictionary<PIXEL_FORMAT, TextureFormat> mTextureFormatLookup; // 0x00
		private static readonly Dictionary<PIXEL_FORMAT, string> mShaderWordLookup; // 0x08
	
		// Nested types
		[CompilerGenerated] // 0x003DCC08-0x003DCC18
		private sealed class <>c__DisplayClass22_0 // TypeDefIndex: 3213
		{
			// Fields
			public string keyword; // 0x10
	
			// Constructors
			public <>c__DisplayClass22_0(); // 0x005FA0EC-0x005FA0F4
	
			// Methods
			internal bool <EnableShaderKeyword>b__0(string k); // 0x005FA348-0x005FA35C
			internal bool <EnableShaderKeyword>b__1(string k); // 0x005FA35C-0x005FA370
		}
	
		// Constructors
		public CommandBufferVideoTextureUpdater(BackgroundPlaneBehaviour bgPlaneBehaviour, IUnityRenderEventBroadcaster renderEventBroadcaster); // 0x005F8E3C-0x005F8F64
		static CommandBufferVideoTextureUpdater(); // 0x005FA0F8-0x005FA348
	
		// Methods
		public void OnPreRender(); // 0x005F9094-0x005F9100
		public void OnPostRender(); // 0x005F9100-0x005F9104
		public void Dispose(); // 0x005F9104-0x005F91A8
		private void InitializeCommandBuffer(); // 0x005F92B4-0x005F9740
		private void DeInitializeCommandBuffer(); // 0x005F91A8-0x005F92B4
		private static void SetupRGBTextureUpdating(int imageWidth, int imageHeight, PIXEL_FORMAT nativePixelFormat, Material backgroundMaterial, CommandBuffer commandBuffer); // 0x005F9740-0x005F98D4
		private static void SetupYUVTextureUpdating(int imageWidth, int imageHeight, PIXEL_FORMAT nativePixelFormat, Material backgroundMaterial, CommandBuffer commandBuffer); // 0x005F98D4-0x005F9AA4
		private static void SetDefaultTextureUpdating(int imageWidth, int imageHeight, Material videoBackgroundMaterial, CommandBuffer commandBuffer); // 0x005FA05C-0x005FA0EC
		private static void SetVideoBackgroundRenderingData(PIXEL_FORMAT format, int width, int height); // 0x005F9FC4-0x005FA05C
		private static void IssueCustomTextureUpdate(CommandBuffer cb, Texture texture, uint textureId); // 0x005F9EB0-0x005F9FC4
		private static void EnableShaderKeyword(Material mat, string keyword); // 0x005F9BB8-0x005F9EB0
		private static Texture2D CreateTexture(int width, int height, TextureFormat textureFormat); // 0x005F9AA4-0x005F9BB8
		private static Material CreateMaterial(); // 0x005F8F64-0x005F9094
		public void OnVideoBackgroundConfigChanged(); // 0x005FA0F4-0x005FA0F8
	}

	internal interface IVideoTextureUpdater : IVideoBackgroundEventHandler, IDisposable // TypeDefIndex: 3214
	{
		// Methods
		void OnPreRender();
		void OnPostRender();
	}

	internal class NativeVideoTextureUpdater : IVideoTextureUpdater // TypeDefIndex: 3215
	{
		// Fields
		private readonly Camera mCamera; // 0x10
		private readonly BackgroundPlaneBehaviour mBgPlaneBehaviour; // 0x18
		private readonly Material mVideoBackgroundMaterial; // 0x20
		private readonly IUnityRenderEventBroadcaster mRenderEventBroadcaster; // 0x28
		private static int sFrameCounter; // 0x00
		private static int sRenderCounter; // 0x04
		private Action<IntPtr> mNativeTextureCreationCallback; // 0x30
		private int mScheduledBgPlaneUpdates; // 0x38
	
		// Nested types
		[CompilerGenerated] // 0x003DCC18-0x003DCC28
		private sealed class <>c__DisplayClass23_0 // TypeDefIndex: 3216
		{
			// Fields
			public NativeVideoTextureUpdater <>4__this; // 0x10
			public int width; // 0x18
			public int height; // 0x1C
	
			// Constructors
			public <>c__DisplayClass23_0(); // 0x005418EC-0x005418F4
	
			// Methods
			internal void <CreateTextureNative>b__0(IntPtr ptr); // 0x00541AB8-0x00541B00
		}
	
		// Constructors
		public NativeVideoTextureUpdater(Camera camera, BackgroundPlaneBehaviour bgPlaneBehaviour, IUnityRenderEventBroadcaster renderEventBroadcaster); // 0x0053FF8C-0x00540210
		static NativeVideoTextureUpdater(); // 0x00541A64-0x00541AB8
	
		// Methods
		public Material GetVideoMaterial(); // 0x00540210-0x00540218
		public void OnPreRender(); // 0x00540218-0x005402FC
		public void OnPostRender(); // 0x005408B0-0x00540984
		public void OnVideoBackgroundConfigChanged(); // 0x00540CD4-0x00540E00
		public void Dispose(); // 0x00541198-0x005413B4
		private void TextureCreationUpdate(); // 0x005404B4-0x005405E0
		private bool IsNewVideoTextureRequired(); // 0x00540E00-0x00540F94
		private static void StartNativeVideoUpdate(); // 0x005405E0-0x00540708
		private static void FinishNativeVideoUpdate(); // 0x00540C0C-0x00540CD4
		private static void OnPreRenderSetupMetal(Camera camera); // 0x005402FC-0x005404B4
		private static void OnPostRenderSetupMetal(Camera camera); // 0x00540984-0x00540C0C
		private void RequestNativeTextureCreation(int width, int height, Action<IntPtr> onTextureCreated); // 0x00541510-0x00541660
		private void OnNativeTextureCreated(int textureWidth, int imageHeight, IntPtr nativeTexturePtr); // 0x00541660-0x00541710
		private void ScheduleBgPlaneUpdates(); // 0x00540F94-0x00540FA0
		private void CreateTextureNative(int width, int height); // 0x00541080-0x00541198
		private void CreateTexturePlaymode(int width, int height); // 0x00540FA0-0x00541080
		private static Texture2D CreateUnityTexture(int width, int height, IntPtr nativeTexturePtr); // 0x00541710-0x005417C0
		private static void ConfigureUnityTexture(Texture texture); // 0x005418F4-0x00541978
		private void SetUnityTextureForMaterial(Texture texture); // 0x005417C0-0x005417F8
		private static void SetNativeExternalTexture(Texture texture); // 0x005417F8-0x005418EC
		private static bool SetNativeExternalTextureInWrapper(VuforiaRenderer.RendererAPI api, Texture texture); // 0x00541978-0x00541A64
		private void ResetNativeExternalTexture(); // 0x005413B4-0x00541510
		private void UpdateBackgroundPlaneBehaviour(); // 0x00540708-0x005408B0
	}

	internal class NullVideoTextureUpdater : IVideoTextureUpdater // TypeDefIndex: 3217
	{
		// Constructors
		public NullVideoTextureUpdater(); // 0x00541C9C-0x00541CA4
	
		// Methods
		public void OnPreRender(); // 0x00541C8C-0x00541C90
		public void OnPostRender(); // 0x00541C90-0x00541C94
		public void OnVideoBackgroundConfigChanged(); // 0x00541C94-0x00541C98
		public void Dispose(); // 0x00541C98-0x00541C9C
	}

	public interface IProjectMatrixProvider // TypeDefIndex: 3218
	{
		// Properties
		Matrix4x4 MainProjectionMatrix { get; }
	}

	internal class StereoProjMatrixStore // TypeDefIndex: 3219
	{
		// Fields
		private readonly Camera mCamera; // 0x10
		private readonly Dictionary<Camera.StereoscopicEye, Matrix4x4> mProjectionMatrices; // 0x18
		private readonly Dictionary<Camera.StereoscopicEye, float> mAppliedVerticalFoVs; // 0x20
		private readonly Dictionary<Camera.StereoscopicEye, float> mCurrentVerticalFoVs; // 0x28
		private readonly Dictionary<Camera.StereoscopicEye, float> mAppliedHorizontalFoVs; // 0x30
		private readonly Dictionary<Camera.StereoscopicEye, float> mCurrentHorizontalFoVs; // 0x38
		private Matrix4x4 mSharedCullingProjectionMatrix; // 0x40
		private Matrix4x4 mSharedCullingViewMatrix; // 0x80
		private Matrix4x4 mLeftEyeOffsetMatrix; // 0xC0
		private Matrix4x4 mRightEyeOffsetMatrix; // 0x100
		private Mode mMode; // 0x140
	
		// Nested types
		internal enum Mode // TypeDefIndex: 3220
		{
			VUFORIA_VRDEVICE = 0,
			EXTERNAL_VRDEVICE = 1
		}
	
		// Constructors
		public StereoProjMatrixStore(Camera cam, Mode mode); // 0x0045FAD0-0x0045FDC4
	
		// Methods
		public bool UpdateMatrices(); // 0x0045FDC4-0x00460198
		public Matrix4x4 GetMatrix(Camera.StereoscopicEye eye); // 0x004602AC-0x00460324
		public void SetMatrix(Camera.StereoscopicEye eye, Matrix4x4 matrix); // 0x00460324-0x004603D8
		public void SetMatrix(Camera.StereoscopicEye eye, Matrix4x4 matrix, float verticalFoV, float horizontalFoV); // 0x00460198-0x004602AC
		public float GetCurrentVerticalFov(Camera.StereoscopicEye eye); // 0x004603D8-0x00460448
		public float GetCurrentHorizontalFov(Camera.StereoscopicEye eye); // 0x00460448-0x004604B8
		public float GetLastAppliedVerticalFov(Camera.StereoscopicEye eye); // 0x004604B8-0x00460528
		public float GetLastAppliedHorizontalFov(Camera.StereoscopicEye eye); // 0x00460528-0x00460598
		public Matrix4x4 GetLastAppliedSharedCullingMatrix(); // 0x00460598-0x004605BC
		public void ApplyMatrices(); // 0x004605BC-0x004608B8
		public void SetDeviceOffset(Vector3 leftEyeOffsetPos, Quaternion leftEyeOffsetRot, Vector3 rightEyeOffsetPos, Quaternion rightEyeOffsetRot); // 0x00460E70-0x00460FB0
		private void computeSharedCullingMatrix(); // 0x004608B8-0x00460E70
	}

	internal class ExternalVRDeviceCameraConfiguration : VRDeviceCameraConfiguration, ICameraConfiguration // TypeDefIndex: 3221
	{
		// Fields
		private const string CLASS_NAME = "EXTERNAL_VRDEVICE_CAMERA_CONFIGURAION"; // Metadata: 0x0021BC1E
		private VuforiaARController.WorldCenterMode mLastWorldCenterMode; // 0xD8
	
		// Constructors
		public ExternalVRDeviceCameraConfiguration(Camera cam, VRDeviceController vrDeviceController); // 0x00528398-0x00528428
	
		// Methods
		public override void Init(); // 0x00528428-0x00528450
		public override void OnVideoBackGroundEnabledChanged(); // 0x005285C4-0x00528660
		public override void Destroy(); // 0x00528660-0x00528724
		public override void OnAfterUpdateState(Transform trackingReference); // 0x00528734-0x005287F0
		protected override void UpdateProjection(); // 0x005287F0-0x00528D60
		protected override bool ProjectionParamsChanged(); // 0x00528D60-0x00528F68
		protected override float GetStereoEyeDistance(); // 0x00528F68-0x005290B4
		private void ToggleHeadTrackingFromWCM(); // 0x00528450-0x005285C4
	}

	internal abstract class VRDeviceCameraConfiguration : BaseCameraConfiguration // TypeDefIndex: 3222
	{
		// Fields
		protected const float TOLERANCE = 0.01f; // Metadata: 0x0021BC47
		protected readonly Camera mCamera; // 0x50
		protected StereoProjMatrixStore mMatrixStore; // 0x58
		protected Matrix4x4 mLeftMatrixUsedForVBPlacement; // 0x60
		protected float mLastAppliedNearClipPlane; // 0xA0
		protected float mLastAppliedFarClipPlane; // 0xA4
		protected float mMaxDepthForVideoBackground; // 0xA8
		protected float mMinDepthForVideoBackground; // 0xAC
		private int mScreenWidth; // 0xB0
		private int mScreenHeight; // 0xB4
		protected float mStereoDepth; // 0xB8
		protected bool mResetMatrix; // 0xBC
		protected Dictionary<Camera.StereoscopicEye, Vector2> mVuforiaFrustumSkew; // 0xC0
		protected Dictionary<Camera.StereoscopicEye, Vector2> mCenterToEyeAxis; // 0xC8
		protected readonly VRDeviceController mVrDeviceController; // 0xD0
	
		// Properties
		public override Matrix4x4 MainProjectionMatrix { get; } // 0x0046A6F0-0x0046A714 
	
		// Constructors
		public VRDeviceCameraConfiguration(Camera cam, VRDeviceController vrDeviceController); // 0x004699C4-0x00469B38
	
		// Methods
		public override void Init(); // 0x00469B38-0x00469B88
		protected override void ConfigureVideoBackground(); // 0x00469CEC-0x0046A000
		public virtual void CheckForSurfaceChanges(); // 0x0046A000-0x0046A174
		public virtual void OnAfterUpdateState(Transform trackingReference); // 0x0046A174-0x0046A564
		public bool IsStereo(); // 0x0046A6A8-0x0046A6B0
		public virtual void OnVideoBackGroundEnabledChanged(); // 0x0046A6B0-0x0046A6F0
		public Matrix4x4 GetVideoBackgroundProjectionMatrix(float near, float far, ScreenOrientation screenOrientation); // 0x0046A714-0x0046A7C0
		public override void FinalizeRenderingSettings(); // 0x0046A7C0-0x0046A7C4
		public override void Destroy(); // 0x0046A81C-0x0046A8F4
		protected void ResetStereoProjectionMatrices(); // 0x00469B88-0x00469CC0
		private void SetStereoDepth(float depth); // 0x0046A564-0x0046A6A8
		protected void ApplyStereoDepthToMatrices(); // 0x0046A938-0x0046AA08
		protected abstract float GetStereoEyeDistance();
		private void ApplyStereoDepthToMatrix(Camera.StereoscopicEye eye, float offset); // 0x0046AA08-0x0046ABB0
		protected void RestoreVuforiaFrustumSkewInMatrices(); // 0x0046A7C4-0x0046A81C
		private void RestoreVuforiaFrustumSkewInMatrix(Camera.StereoscopicEye eye); // 0x0046ABB0-0x0046AD38
		private static bool IsValidDepth(float depth); // 0x0046A8F4-0x0046A938
	}

	public class DigitalEyewearARController : ARController, IVideoBackgroundEventHandler // TypeDefIndex: 3223
	{
		// Fields
		internal const string LEFT_CAMERA_NAME = "StereoCameraLeft"; // Metadata: 0x0021BC4B
		internal const string RIGHT_CAMERA_NAME = "StereoCameraRight"; // Metadata: 0x0021BC5F
		public const float DEFAULT_CAMERA_OFFSET = 0.06f; // Metadata: 0x0021BC74
		public const float DEFAULT_VR_FOV = 60f; // Metadata: 0x0021BC78
		private float mCameraOffset; // 0x18
		private int mDistortionRenderingLayer; // 0x1C
		private EyewearType mEyewearType; // 0x20
		private StereoFramework mStereoFramework; // 0x24
		private SeeThroughConfiguration mSeeThroughConfiguration; // 0x28
		private string mViewerName; // 0x30
		private string mViewerManufacturer; // 0x38
		private bool mUseCustomViewer; // 0x40
		private SerializableViewerParameters mCustomViewer; // 0x48
		private Transform mCentralAnchorPoint; // 0x50
		private Camera mPrimaryCamera; // 0x58
		private VuforiaARController mVuforiaBehaviour; // 0x60
		private bool mSetFocusPlaneAutomatically; // 0x68
		private VRDeviceController mVRDeviceController; // 0x70
		private static DigitalEyewearARController mInstance; // 0x00
		private static object mPadlock; // 0x08
	
		// Properties
		public float CameraOffset { get; private set; } // 0x0060AB14-0x0060AB1C 0x0060AB1C-0x0060AB24
		public Transform CentralAnchorPoint { get; } // 0x0060AB24-0x0060ABBC 
		public bool IsStereoRendering { get; } // 0x0060ABBC-0x0060AC8C 
		public Camera PrimaryCamera { get; } // 0x0060ACA0-0x0060ACA8 
		public int DistortionRenderingLayer { get; set; } // 0x0060ACA8-0x0060ACB0 0x0060ACB0-0x0060ACB8
		public static DigitalEyewearARController Instance { get; } // 0x0060AD30-0x0060AE9C 
		internal VRDeviceController VRDeviceController { get; } // 0x0060BE2C-0x0060BE34 
		private ICameraConfiguration CameraConfiguration { get; set; } // 0x0060AC8C-0x0060ACA0 0x0060CB40-0x0060CC5C
	
		// Nested types
		public enum EyewearType // TypeDefIndex: 3224
		{
			None = 0,
			OpticalSeeThrough = 1,
			VideoSeeThrough = 2
		}
	
		public enum StereoFramework // TypeDefIndex: 3225
		{
			Vuforia = 0
		}
	
		public enum SeeThroughConfiguration // TypeDefIndex: 3226
		{
			Vuforia = 0,
			HoloLens = 1
		}
	
		[Serializable]
		public class SerializableViewerParameters // TypeDefIndex: 3227
		{
			// Fields
			public float Version; // 0x10
			public string Name; // 0x18
			public string Manufacturer; // 0x20
			public ViewerButtonType ButtonType; // 0x28
			public float ScreenToLensDistance; // 0x2C
			public float InterLensDistance; // 0x30
			public ViewerTrayAlignment TrayAlignment; // 0x34
			public float LensCenterToTrayDistance; // 0x38
			public Vector2 DistortionCoefficients; // 0x3C
			public Vector4 FieldOfView; // 0x44
			public bool ContainsMagnet; // 0x54
	
			// Constructors
			public SerializableViewerParameters(); // 0x00527E1C-0x00527E24
		}
	
		// Constructors
		private DigitalEyewearARController(); // 0x0060ACB8-0x0060AD30
		static DigitalEyewearARController(); // 0x0060CC5C-0x0060CCC8
	
		// Methods
		[RuntimeInitializeOnLoadMethod] // 0x003DE3C4-0x003DE3D8
		public static void RegisterARController(); // 0x0060AE9C-0x0060AEFC
		protected override void Awake(); // 0x0060AEFC-0x0060B1F0
		protected override void Start(); // 0x0060B1F0-0x0060B228
		protected override void Update(); // 0x0060B228-0x0060B260
		protected override void OnDestroy(); // 0x0060B260-0x0060B354
		public void OnVideoBackgroundConfigChanged(); // 0x0060B354-0x0060B358
		public void SetCameraOffset(float Offset); // 0x0060B358-0x0060B360
		public void SetViewerActive(bool isActive, bool reinitializeCamera); // 0x0060B360-0x0060B3F4
		public void SetViewerActive(bool isActive); // 0x0060B554-0x0060B5FC
		public void SetMode(Device.Mode mode); // 0x0060B5FC-0x0060B7B0
		public EyewearType GetEyewearType(); // 0x0060B7B0-0x0060B7B8
		public void SetEyewearType(EyewearType type); // 0x0060B7B8-0x0060B7C0
		public StereoFramework GetStereoCameraConfig(); // 0x0060B7C0-0x0060B7C8
		public void SetStereoCameraConfiguration(StereoFramework config); // 0x0060B7C8-0x0060B7D0
		public SeeThroughConfiguration GetSeeThroughConfiguration(); // 0x0060B7D0-0x0060B7D8
		public void SetSeeThroughConfiguration(SeeThroughConfiguration config); // 0x0060B7D8-0x0060B7E0
		public void EnableAutomaticFocusPointSelection(bool enable); // 0x0060B7E0-0x0060B7EC
		internal void SetFocusPoint(); // 0x0060B7EC-0x0060BDF4
		internal void UpdateVRDeviceController(); // 0x0060BDF4-0x0060BE2C
		internal bool NoVuforiaCameraControl(); // 0x0060BE34-0x0060BE58
		private void OnVuforiaInitialized(); // 0x0060BE58-0x0060C6A4
		private void OnVuforiaStarted(); // 0x0060C7D4-0x0060C7D8
		private void SetViewerActive(bool isActive, bool deinitCam, bool initCam, CameraDevice.CameraDeviceMode mode); // 0x0060B3F4-0x0060B554
		private void CorrectCameraConfiguration(); // 0x0060C6A4-0x0060C7D4
		private void ConfigureView(); // 0x0060C7D8-0x0060CB40
	}

	public static class UnityComponentExtensions // TypeDefIndex: 3228
	{
		// Extension methods
		public static T[] GetComponentsOnlyInChildren<T>(this Component obj)
			where T : Component;
		public static T[] GetComponentsOnlyInChildren<T>(this Component obj, bool includeInactive)
			where T : Component;
	}

	internal abstract class AValidatableVideoBackgroundConfigProperty // TypeDefIndex: 3229
	{
		// Fields
		protected readonly VuforiaConfiguration.VideoBackgroundConfiguration Config; // 0x10
		protected readonly VideoBackgroundDefaultProvider DefaultProvider; // 0x18
	
		// Constructors
		protected AValidatableVideoBackgroundConfigProperty(VuforiaConfiguration.VideoBackgroundConfiguration config, VideoBackgroundDefaultProvider defaultProvider); // 0x005EAED0-0x005EAF08
	
		// Methods
		public abstract bool Validate();
	}

	internal class MatteShaderProperty : AValidatableVideoBackgroundConfigProperty // TypeDefIndex: 3230
	{
		// Constructors
		public MatteShaderProperty(VuforiaConfiguration.VideoBackgroundConfiguration config, VideoBackgroundDefaultProvider defaultProvider); // 0x0053905C-0x00539064
	
		// Methods
		public override bool Validate(); // 0x00539064-0x00539194
	}

	internal class NumDivisionsProperty : AValidatableVideoBackgroundConfigProperty // TypeDefIndex: 3231
	{
		// Fields
		private const int MinNumDivisions = 2; // Metadata: 0x0021BC94
	
		// Constructors
		public NumDivisionsProperty(VuforiaConfiguration.VideoBackgroundConfiguration config, VideoBackgroundDefaultProvider defaultProvider); // 0x00541CA4-0x00541CAC
	
		// Methods
		public override bool Validate(); // 0x00541CAC-0x00541D34
	}

	internal class VideoBackgroundConfigValidator // TypeDefIndex: 3232
	{
		// Fields
		private readonly List<AValidatableVideoBackgroundConfigProperty> mValidatableProperties; // 0x10
	
		// Nested types
		[CompilerGenerated] // 0x003DCC28-0x003DCC38
		private sealed class <>c__DisplayClass2_0 // TypeDefIndex: 3233
		{
			// Fields
			public bool res; // 0x10
	
			// Constructors
			public <>c__DisplayClass2_0(); // 0x0046BD68-0x0046BD70
	
			// Methods
			internal void <ValidateAll>b__0(AValidatableVideoBackgroundConfigProperty p); // 0x0046BD70-0x0046BDC8
		}
	
		// Constructors
		public VideoBackgroundConfigValidator(VuforiaConfiguration.VideoBackgroundConfiguration config, VideoBackgroundDefaultProvider defaultProvider); // 0x0046BB34-0x0046BC88
	
		// Methods
		public bool ValidateAll(); // 0x0046BC90-0x0046BD68
	}

	internal class VideoBackgroundShaderProperty : AValidatableVideoBackgroundConfigProperty // TypeDefIndex: 3234
	{
		// Constructors
		public VideoBackgroundShaderProperty(VuforiaConfiguration.VideoBackgroundConfiguration config, VideoBackgroundDefaultProvider defaultProvider); // 0x0046BC88-0x0046BC90
	
		// Methods
		public override bool Validate(); // 0x0046CD64-0x0046CE40
	}

	public abstract class EyewearDevice : Device // TypeDefIndex: 3235
	{
		// Nested types
		public enum EyeID // TypeDefIndex: 3236
		{
			EYEID_MONOCULAR = 0,
			EYEID_LEFT = 1,
			EYEID_RIGHT = 2
		}
	
		public struct EyewearCalibrationReading // TypeDefIndex: 3237
		{
			// Fields
			public float[] pose; // 0x00
			public float scale; // 0x08
			public float centerX; // 0x0C
			public float centerY; // 0x10
			public AlignmentType type; // 0x14
	
			// Nested types
			public enum AlignmentType // TypeDefIndex: 3238
			{
				RECTANGLE = 0,
				HORIZONTAL_LINE = 1,
				VERTICAL_LINE = 2
			}
		}
	
		// Constructors
		protected EyewearDevice(); // 0x0052A1CC-0x0052A3F0
	
		// Methods
		public abstract bool IsSeeThru();
		public abstract bool IsDualDisplay();
		public abstract bool SetDisplayExtended(bool enable);
		public abstract bool IsDisplayExtended();
		public abstract bool IsDisplayExtendedGLOnly();
		public abstract ScreenOrientation GetScreenOrientation();
		public abstract bool SetPredictiveTracking(bool enable);
		public abstract bool IsPredictiveTrackingEnabled();
		public abstract EyewearCalibrationProfileManager GetCalibrationProfileManager();
		public abstract EyewearUserCalibrator GetUserCalibrator();
	}

	public class GuideView : INotifyPropertyChanged // TypeDefIndex: 3239
	{
		// Fields
		private readonly IntPtr mInstancePtr; // 0x10
		private Matrix4x4 mPose; // 0x18
		private string mName; // 0x58
		private bool mCustomPose; // 0x60
		private Texture2D mImage; // 0x68
		[CompilerGenerated] // 0x003DCE48-0x003DCE58
		private PropertyChangedEventHandler PropertyChanged; // 0x70
	
		// Properties
		public string Name { get; } // 0x0052BC44-0x0052BC4C 
		public Matrix4x4 Pose { get; set; } // 0x0052BC4C-0x0052BC70 0x0052BC70-0x0052BD0C
		public Texture2D Image { get; } // 0x0052C1DC-0x0052C380 
	
		// Events
		public event PropertyChangedEventHandler PropertyChanged {
			add; // 0x0052B4C4-0x0052B5B0
			remove; // 0x0052B5B0-0x0052B69C
		}
	
		// Constructors
		public GuideView(IntPtr nativeGuideView); // 0x0052B69C-0x0052B6D4
	
		// Methods
		internal void DestroyTexture(); // 0x0052C130-0x0052C1DC
		private void LoadName(); // 0x0052B6D4-0x0052B7FC
		private void LoadPose(); // 0x0052B7FC-0x0052BC44
		private void SavePose(); // 0x0052BD0C-0x0052C130
		private bool CallNativeGetInstanceImage(ref TrackerData.ImageHeaderData imageHeader); // 0x0052C648-0x0052C8C0
		protected virtual void RaisePropertyChanged(string propertyName); // 0x0052C8C0-0x0052C954
	}

	[RequireComponent] // 0x003DCA2C-0x003DCA90
	public class GuideView2DBehaviour : VuforiaMonoBehaviour // TypeDefIndex: 3240
	{
		// Fields
		private float mCameraAspect; // 0x18
		private float mCameraFOV; // 0x1C
		private float mCameraNearPlane; // 0x20
		private Texture2D mGuideViewTexture; // 0x28
		private bool mFlipImageVertically; // 0x30
	
		// Constructors
		public GuideView2DBehaviour(); // 0x0052D418-0x0052D420
	
		// Methods
		private void Update(); // 0x0052C954-0x0052CA28
		public void UpdateView(ModelTargetBehaviour modelTarget, GuideView guideView); // 0x0052CFE8-0x0052D240
		private void UpdateTransform(Material material, Texture2D guideViewTexture); // 0x0052CB74-0x0052CFE8
		private static void ApplyTexture(MeshRenderer meshRenderer, Texture2D guideViewTexture); // 0x0052D240-0x0052D344
		private static float GetTextureAspect(Texture2D texture); // 0x0052D344-0x0052D418
		private bool HasCameraChanged(Camera camera); // 0x0052CA28-0x0052CB74
	}

	public class GuideView3DBehaviour : VuforiaMonoBehaviour // TypeDefIndex: 3241
	{
		// Fields
		private GuideView mCurrentGuideView; // 0x18
		private GameObject m3DModel; // 0x20
	
		// Constructors
		public GuideView3DBehaviour(); // 0x0052E390-0x0052E398
	
		// Methods
		public void UpdateGuideViewPose(Matrix4x4 newPose); // 0x0052D420-0x0052D608
		public void UpdateFromGuideViewPose(); // 0x0052D8B4-0x0052D9F4
		public void UpdateView(ModelTargetBehaviour modelTarget, GuideView guideView); // 0x0052D9F4-0x0052DF74
		private void UpdateDetectionPoseFromMatrix(Matrix4x4 matrix); // 0x0052D6E0-0x0052D75C
		private static Quaternion GetRotation(Matrix4x4 matrix); // 0x0052D798-0x0052D8B4
		private static Vector3 GetPosition(Matrix4x4 matrix); // 0x0052D75C-0x0052D798
		private static bool MatricesAreEqual(Matrix4x4 ma, Matrix4x4 mb); // 0x0052D608-0x0052D6E0
		private void LoadGuideViewModel(ModelTargetBehaviour modelTarget); // 0x0052DF74-0x0052E388
	}

	public class GuideViewRenderingBehaviour : VuforiaMonoBehaviour // TypeDefIndex: 3242
	{
		// Fields
		[Tooltip] // 0x003DCE58-0x003DCE90
		public float guideReappearanceDelay; // 0x18
		private const float INITIAL_GUIDEVIEW_2D_SCALE = 0.1f; // Metadata: 0x0021BCB0
		private ModelTargetBehaviour mTrackedTarget; // 0x20
		private ModelTargetBehaviour.GuideViewDisplayMode mGuideViewDisplayMode; // 0x28
		private GuideView mGuideView; // 0x30
		private int mLastActiveGuideViewIndex; // 0x38
		private bool mGuideViewInitialized; // 0x3C
		private IEnumerator mShowGuideViewCoroutine; // 0x40
		private GameObject mGuideViewGameObject; // 0x48
		private bool mGuideViewShown; // 0x50
		private DepthTextureMode mPrevDepthTextureMode; // 0x54
	
		// Nested types
		[CompilerGenerated] // 0x003DCC38-0x003DCC48
		private sealed class <ShowGuideViewAfter>d__23 : IEnumerator<object> // TypeDefIndex: 3243
		{
			// Fields
			private int <>1__state; // 0x10
			private object <>2__current; // 0x18
			public float seconds; // 0x20
			public GuideViewRenderingBehaviour <>4__this; // 0x28
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003DEB7C-0x003DEB8C */ get; } // 0x00530880-0x00530888 
			object IEnumerator.Current { [DebuggerHidden] /* 0x003DEB9C-0x003DEBAC */ get; } // 0x005308F0-0x005308F8 
	
			// Constructors
			[DebuggerHidden] // 0x003DEB5C-0x003DEB6C
			public <ShowGuideViewAfter>d__23(int <>1__state); // 0x00530150-0x0053017C
	
			// Methods
			[DebuggerHidden] // 0x003DEB6C-0x003DEB7C
			void IDisposable.Dispose(); // 0x005307C0-0x005307C4
			private bool MoveNext(); // 0x005307C4-0x00530880
			[DebuggerHidden] // 0x003DEB8C-0x003DEB9C
			void IEnumerator.Reset(); // 0x00530888-0x005308F0
		}
	
		[CompilerGenerated] // 0x003DCC48-0x003DCC58
		private sealed class <SetChildOfVuforiaAnchor>d__24 : IEnumerator<object> // TypeDefIndex: 3244
		{
			// Fields
			private int <>1__state; // 0x10
			private object <>2__current; // 0x18
			public GuideViewRenderingBehaviour <>4__this; // 0x20
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003DEBCC-0x003DEBDC */ get; } // 0x00530748-0x00530750 
			object IEnumerator.Current { [DebuggerHidden] /* 0x003DEBEC-0x003DEBFC */ get; } // 0x005307B8-0x005307C0 
	
			// Constructors
			[DebuggerHidden] // 0x003DEBAC-0x003DEBBC
			public <SetChildOfVuforiaAnchor>d__24(int <>1__state); // 0x005301F0-0x0053021C
	
			// Methods
			[DebuggerHidden] // 0x003DEBBC-0x003DEBCC
			void IDisposable.Dispose(); // 0x0053040C-0x00530410
			private bool MoveNext(); // 0x00530410-0x00530748
			[DebuggerHidden] // 0x003DEBDC-0x003DEBEC
			void IEnumerator.Reset(); // 0x00530750-0x005307B8
		}
	
		// Constructors
		public GuideViewRenderingBehaviour(); // 0x005303F4-0x0053040C
	
		// Methods
		private void Update(); // 0x0052EABC-0x0052EACC
		private void CreateTargetGuideView(string guideViewName, bool use3DGuideView, Material guideView2DMaterial); // 0x0052EDB8-0x0052EE34
		public void DeleteTargetGuideView(); // 0x0052F3A8-0x0052F8D0
		public void DetachEvents(); // 0x0052F8D0-0x0052F964
		private GameObject CreateGuideView2D(string name, Material guideViewMaterial, Transform parent); // 0x0052EE34-0x0052F158
		private GameObject CreateGuideView3D(string name, Transform parent); // 0x0052F158-0x0052F3A8
		private string GetGuideViewName(string TrackableName, int GuideViewIndex); // 0x0052F964-0x0052F9E8
		private void UpdateTrackedTarget(); // 0x0052EACC-0x0052EDB8
		private void StartGuideViewCoroutine(); // 0x0052FCA4-0x0052FCDC
		private void StopGuideViewCoroutine(); // 0x0052FC70-0x0052FCA4
		private void GuideViewPropertyChanged(object sender, PropertyChangedEventArgs e); // 0x0052FFA8-0x00530150
		private void ShowGuideView(bool show); // 0x0052F9E8-0x0052FB6C
		private IEnumerator ShowGuideViewAfter(float seconds); // 0x0052FF10-0x0052FFA8
		private IEnumerator SetChildOfVuforiaAnchor(); // 0x0053017C-0x005301F0
		private void SetChildOfModelTarget(); // 0x0052FB6C-0x0052FC70
		public void Initialize(ModelTargetBehaviour modelTarget); // 0x0053021C-0x005303EC
		private void PrepareAndCreateGuideView(int guideViewIndex); // 0x0052FCDC-0x0052FF10
	}

	internal interface IBoundingBox // TypeDefIndex: 3245
	{
		// Methods
		OrientedBoundingBox3D GetBoundingBox();
	}

	internal class ModelTargetImpl : DataSetObjectTargetImpl, InternalModelTarget // TypeDefIndex: 3246
	{
		// Fields
		private readonly IBoundingBox mBoundingBoxImpl; // 0x30
		private readonly GuideViewContainer mGuideViewContainer; // 0x38
	
		// Constructors
		internal ModelTargetImpl(string name, int id, DataSet dataSet); // 0x0053EDA0-0x0053EF50
	
		// Methods
		public OrientedBoundingBox3D GetBoundingBox(); // 0x0053EF50-0x0053F014
		public int GetNumGuideViews(); // 0x0053F014-0x0053F040
		public GuideView GetGuideView(int index); // 0x0053F040-0x0053F074
		public bool SetActiveGuideViewIndex(int index); // 0x0053F074-0x0053F0A8
		public int GetActiveGuideViewIndex(); // 0x0053F0A8-0x0053F0D4
		public void ClearGuideViews(); // 0x0053F0D4-0x0053F100
	}

	public interface ModelTarget : ObjectTarget // TypeDefIndex: 3247
	{
		// Methods
		OrientedBoundingBox3D GetBoundingBox();
		int GetNumGuideViews();
		GuideView GetGuideView(int index);
		bool SetActiveGuideViewIndex(int index);
		int GetActiveGuideViewIndex();
	}

	internal interface InternalModelTarget : ModelTarget // TypeDefIndex: 3248
	{
		// Methods
		void ClearGuideViews();
	}

	public class ModelTargetBehaviour : DataSetTrackableBehaviour // TypeDefIndex: 3249
	{
		// Fields
		internal static readonly string GUIDE_VIEW_RENDERER_NAME; // 0x00
		private InternalModelTarget mModelTarget; // 0x58
		private GameObject mGuideViewRenderer; // 0x60
		private PositionalDeviceTracker mDeviceTracker; // 0x68
		[HideInInspector] // 0x003DCE90-0x003DCEC8
		[SerializeField] // 0x003DCE90-0x003DCEC8
		private float mBaseSize; // 0x70
		[HideInInspector] // 0x003DCEC8-0x003DCF00
		[SerializeField] // 0x003DCEC8-0x003DCF00
		private float mAspectRatioXY; // 0x74
		[HideInInspector] // 0x003DCF00-0x003DCF38
		[SerializeField] // 0x003DCF00-0x003DCF38
		private float mAspectRatioXZ; // 0x78
		[HideInInspector] // 0x003DCF38-0x003DCF70
		[SerializeField] // 0x003DCF38-0x003DCF70
		private bool mShowBoundingBox; // 0x7C
		[HideInInspector] // 0x003DCF70-0x003DCFA8
		[SerializeField] // 0x003DCF70-0x003DCFA8
		private bool mOverrideSnappingPose; // 0x7D
		[HideInInspector] // 0x003DCFA8-0x003DCFE0
		[SerializeField] // 0x003DCFA8-0x003DCFE0
		private Vector3 mBBoxMin; // 0x80
		[HideInInspector] // 0x003DCFE0-0x003DD018
		[SerializeField] // 0x003DCFE0-0x003DD018
		private Vector3 mBBoxMax; // 0x8C
		[HideInInspector] // 0x003DD018-0x003DD050
		[SerializeField] // 0x003DD018-0x003DD050
		private Texture2D mPreviewImage; // 0x98
		[HideInInspector] // 0x003DD050-0x003DD088
		[SerializeField] // 0x003DD050-0x003DD088
		private float mLength; // 0xA0
		[HideInInspector] // 0x003DD088-0x003DD0C0
		[SerializeField] // 0x003DD088-0x003DD0C0
		private float mWidth; // 0xA4
		[HideInInspector] // 0x003DD0C0-0x003DD0F8
		[SerializeField] // 0x003DD0C0-0x003DD0F8
		private float mHeight; // 0xA8
		[HideInInspector] // 0x003DD0F8-0x003DD130
		[SerializeField] // 0x003DD0F8-0x003DD130
		public GameObject m3DGuideViewModel; // 0xB0
		[HideInInspector] // 0x003DD130-0x003DD168
		[SerializeField] // 0x003DD130-0x003DD168
		public Texture2D m2DGuideViewImage; // 0xB8
		[HideInInspector] // 0x003DD168-0x003DD1A0
		[SerializeField] // 0x003DD168-0x003DD1A0
		private GuideViewDisplayMode mGuideViewDisplayMode; // 0xC0
		[HideInInspector] // 0x003DD1A0-0x003DD1D8
		[SerializeField] // 0x003DD1A0-0x003DD1D8
		public Material m2DGuideViewMaterial; // 0xC8
		[HideInInspector] // 0x003DD1D8-0x003DD210
		[SerializeField] // 0x003DD1D8-0x003DD210
		public Material m3DGuideViewMaterial; // 0xD0
		[HideInInspector] // 0x003DD210-0x003DD248
		[SerializeField] // 0x003DD210-0x003DD248
		private string mSelectedGuideView; // 0xD8
		private Vector3 mLastTransformScale; // 0xE0
		private Vector3 mLastSize; // 0xEC
		private bool mDataSetIsActive; // 0xF8
		private ModelRecoBehaviour mModelRecoBehaviour; // 0x100
	
		// Properties
		public ModelTarget ModelTarget { get; } // 0x0052E388-0x0052E390 
		public GuideViewDisplayMode GuideViewMode { get; set; } // 0x005303EC-0x005303F4 0x0053C388-0x0053C3D0
	
		// Nested types
		public enum GuideViewDisplayMode // TypeDefIndex: 3250
		{
			NoGuideView = 0,
			GuideView2D = 1,
			GuideView3D = 2
		}
	
		// Constructors
		public ModelTargetBehaviour(); // 0x0053C2A8-0x0053C388
		static ModelTargetBehaviour(); // 0x0053E018-0x0053E074
	
		// Methods
		protected override void Awake(); // 0x0053C590-0x0053C870
		private void OnDestroy(); // 0x0053C870-0x0053C9FC
		private void OnDrawGizmos(); // 0x0053C9FC-0x0053CE0C
		private void OnValidate(); // 0x0053CE0C-0x0053D270
		protected override bool CorrectScaleImpl(); // 0x0053D4CC-0x0053D4E4
		protected override bool SetScale(Vector3 scale); // 0x0053D4E4-0x0053D548
		protected override void InternalUnregisterTrackable(); // 0x0053D548-0x0053D554
		public void SetBoundingBox(Vector3 minBBox, Vector3 maxBBox); // 0x0053D554-0x0053D564
		public Vector3 GetSize(); // 0x0053D3D4-0x0053D4CC
		public void SetLength(float length); // 0x0053D270-0x0053D2E4
		public void SetWidth(float width); // 0x0053D2E4-0x0053D35C
		public void SetHeight(float height); // 0x0053D35C-0x0053D3D4
		internal override bool InitializeTarget(Trackable trackable, bool applyTargetScaleToBehaviour); // 0x0053D564-0x0053DBA4
		internal override void OnTrackableEnabledChanged(bool trackableEnabled); // 0x0053DBA4-0x0053DCFC
		private void OnVuforiaInitialized(); // 0x0053DCFC-0x0053DD58
		private void OnVuforiaStarted(); // 0x0053DDF4-0x0053DF80
		private void UpdateGuideViews(); // 0x0053C3D0-0x0053C590
		private static void InitPositionalDeviceTracker(); // 0x0053DD58-0x0053DDF4
		private static bool ShouldDeviceTrackerStartAutomatically(); // 0x0053DF80-0x0053E018
	}

	public class GLErrorHandler : VuforiaMonoBehaviour // TypeDefIndex: 3251
	{
		// Fields
		private static string mErrorText; // 0x00
		private static bool mErrorOccurred; // 0x08
		private const string WINDOW_TITLE = "Sample Error"; // Metadata: 0x0021BCC0
	
		// Constructors
		public GLErrorHandler(); // 0x0052B3D8-0x0052B3E0
		static GLErrorHandler(); // 0x0052B3E0-0x0052B448
	
		// Methods
		public static void SetError(string errorText); // 0x0052B0E4-0x0052B160
		private void OnGUI(); // 0x0052B160-0x0052B27C
		private void DrawWindowContent(int id); // 0x0052B27C-0x0052B3D8
	}

	public class MaskOutBehaviour : VuforiaMonoBehaviour // TypeDefIndex: 3252
	{
		// Fields
		public Material maskMaterial; // 0x18
	
		// Constructors
		public MaskOutBehaviour(); // 0x00539054-0x0053905C
	
		// Methods
		private void Start(); // 0x00538E90-0x00539054
	}

	internal struct AnchorData // TypeDefIndex: 3253
	{
		// Fields
		public int id; // 0x00
		internal int unused; // 0x04
	}

	public class SmartTerrainARController : ARController // TypeDefIndex: 3254
	{
		// Fields
		private static SmartTerrainARController mInstance; // 0x00
		private bool mAutoInitAndStartTracker; // 0x18
		private State mState; // 0x1C
	
		// Properties
		public static SmartTerrainARController Instance { get; } // 0x004546BC-0x00454730 
		public bool AutoInitAndStartTracker { set; } // 0x00454738-0x00454744
	
		// Nested types
		private enum State // TypeDefIndex: 3255
		{
			STOPPED = 0,
			PAUSED = 1,
			RUNNING = 2
		}
	
		// Constructors
		public SmartTerrainARController(); // 0x00454730-0x00454738
	
		// Methods
		[RuntimeInitializeOnLoadMethod] // 0x003DE418-0x003DE42C
		public static void RegisterARController(); // 0x00454744-0x0045475C
		protected override void Awake(); // 0x0045475C-0x00454918
		protected override void OnEnable(); // 0x00454918-0x0045492C
		protected override void OnApplicationPause(bool pause); // 0x00454A40-0x00454A8C
		private void OnResume(); // 0x00454AB4-0x00454AC8
		private void OnPause(); // 0x00454A8C-0x00454AB4
		protected override void OnDisable(); // 0x00454BCC-0x00454BF0
		protected override void OnDestroy(); // 0x00454BF0-0x00454CFC
		private void OnVuforiaStarted(); // 0x00454CFC-0x00454D0C
		private void OnVuforiaInitialized(); // 0x00454D0C-0x00454D1C
		private void StartTracker(); // 0x0045492C-0x00454A40
		private void StopTracker(); // 0x00454AC8-0x00454BCC
		private void InitTracker(); // 0x00454D1C-0x00454E8C
	}

	internal enum StageType // TypeDefIndex: 3256
	{
		Plane = 0,
		MidAir = 1
	}

	[Serializable]
	public class ContentPlacedEvent : UnityEvent<GameObject> // TypeDefIndex: 3257
	{
		// Constructors
		public ContentPlacedEvent(); // 0x005FA370-0x005FA3C0
	}

	public class ContentPositioningBehaviour : VuforiaMonoBehaviour // TypeDefIndex: 3258
	{
		// Fields
		[Tooltip] // 0x003DD248-0x003DD280
		public AnchorBehaviour AnchorStage; // 0x18
		[Tooltip] // 0x003DD280-0x003DD2B8
		public bool DuplicateStage; // 0x20
		[Tooltip] // 0x003DD2B8-0x003DD2F0
		public ContentPlacedEvent OnContentPlaced; // 0x28
		[HideInInspector] // 0x003DD2F0-0x003DD328
		[SerializeField] // 0x003DD2F0-0x003DD328
		private bool mDisplayAdvanced; // 0x30
		private const string ERROR_NO_STAGE = "There is no content to place at the anchor. Set the \"Anchor Stage\" field to the content you wish to place."; // Metadata: 0x0021BCE4
		private const string ERROR_TRACKER_NOT_INITIALIZED = "PositionalDeviceTracker has not been Initialized correctly, unable to create anchors"; // Metadata: 0x0021BD52
		private PositionalDeviceTracker mDeviceTracker; // 0x38
		private ICollection<AnchorBehaviour> mInstantiatedAnchors; // 0x40
	
		// Nested types
		[CompilerGenerated] // 0x003DCC58-0x003DCC68
		private sealed class <>c__DisplayClass9_0 // TypeDefIndex: 3259
		{
			// Fields
			public ContentPositioningBehaviour <>4__this; // 0x10
			public Transform pose; // 0x18
	
			// Constructors
			public <>c__DisplayClass9_0(); // 0x005FA624-0x005FA62C
	
			// Methods
			internal Anchor <PositionContentAtMidAirAnchor>b__0(string anchor); // 0x005FB494-0x005FB57C
		}
	
		[CompilerGenerated] // 0x003DCC68-0x003DCC78
		private sealed class <>c__DisplayClass10_0 // TypeDefIndex: 3260
		{
			// Fields
			public ContentPositioningBehaviour <>4__this; // 0x10
			public HitTestResult hitTestResult; // 0x18
	
			// Constructors
			public <>c__DisplayClass10_0(); // 0x005FACC4-0x005FACCC
	
			// Methods
			internal Anchor <PositionContentAtPlaneAnchor>b__0(string anchor); // 0x005FB3D8-0x005FB438
		}
	
		[CompilerGenerated] // 0x003DCC78-0x003DCC88
		private sealed class <>c__DisplayClass14_0 // TypeDefIndex: 3261
		{
			// Fields
			public Anchor anchor; // 0x10
	
			// Constructors
			public <>c__DisplayClass14_0(); // 0x005FB0C0-0x005FB0C8
	
			// Methods
			internal bool <OnAnchorRemoved>b__0(AnchorBehaviour a); // 0x005FB438-0x005FB494
		}
	
		// Constructors
		public ContentPositioningBehaviour(); // 0x005FB360-0x005FB3D8
	
		// Methods
		private void Awake(); // 0x005FA3C0-0x005FA4CC
		public void PositionContentAtMidAirAnchor(Transform pose); // 0x005FA4CC-0x005FA624
		public void PositionContentAtPlaneAnchor(HitTestResult hitTestResult); // 0x005FAB20-0x005FACC4
		private void CreateAnchorAndPlaceContent(Func<string, Anchor> anchorCreator, Vector3 position, Quaternion rotation); // 0x005FA62C-0x005FAB20
		private void OnVuforiaInitialized(); // 0x005FACCC-0x005FACD0
		private void OnVuforiaStarted(); // 0x005FAD38-0x005FAEE4
		private void OnAnchorRemoved(Anchor anchor); // 0x005FAEE4-0x005FB0C0
		private void OnDestroy(); // 0x005FB0C8-0x005FB228
		private static void InitPositionalDeviceTracker(); // 0x005FACD0-0x005FAD38
		private static void StopAndDeinitPositionalDeviceTracker(); // 0x005FB228-0x005FB360
	}

	internal class AnchorImpl : Anchor // TypeDefIndex: 3262
	{
		// Fields
		private readonly string mName; // 0x10
		private readonly int mId; // 0x18
	
		// Properties
		public string Name { get; } // 0x005EB2F0-0x005EB2F8 
		public int ID { get; } // 0x005EB2F8-0x005EB300 
	
		// Constructors
		public AnchorImpl(int id, string name); // 0x005EB300-0x005EB33C
	}

	public class MidAirPositionerBehaviour : VuforiaMonoBehaviour // TypeDefIndex: 3263
	{
		// Fields
		[Tooltip] // 0x003DD328-0x003DD360
		public float DistanceToCamera; // 0x18
		[Tooltip] // 0x003DD360-0x003DD398
		public GameObject MidAirIndicator; // 0x20
		[Tooltip] // 0x003DD398-0x003DD3D0
		public AnchorPositionConfirmedEvent OnAnchorPositionConfirmed; // 0x28
		private Camera mCamera; // 0x30
		[HideInInspector] // 0x003DD3D0-0x003DD408
		[SerializeField] // 0x003DD3D0-0x003DD408
		private bool mDisplayAdvanced; // 0x38
	
		// Nested types
		[Serializable]
		public class AnchorPositionConfirmedEvent : UnityEvent<Transform> // TypeDefIndex: 3264
		{
			// Constructors
			public AnchorPositionConfirmedEvent(); // 0x0053A3C0-0x0053A410
		}
	
		// Constructors
		public MidAirPositionerBehaviour(); // 0x0053A3B0-0x0053A3C0
	
		// Methods
		public void ConfirmAnchorPosition(Vector2 screenPosition); // 0x00539F90-0x0053A014
		private bool IsPrefab(GameObject go); // 0x0053A014-0x0053A068
		private void SetupIndicator(); // 0x0053A068-0x0053A30C
		private void OnDisable(); // 0x0053A30C-0x0053A3AC
		private void OnEnable(); // 0x0053A3AC-0x0053A3B0
	}

	public class AnchorInputListenerBehaviour : VuforiaMonoBehaviour // TypeDefIndex: 3265
	{
		// Fields
		public InputReceivedEvent OnInputReceivedEvent; // 0x18
		[HideInInspector] // 0x003DD408-0x003DD440
		[SerializeField] // 0x003DD408-0x003DD440
		private bool mDisplayAdvanced; // 0x20
	
		// Nested types
		[Serializable]
		public class InputReceivedEvent : UnityEvent<Vector2> // TypeDefIndex: 3266
		{
			// Constructors
			public InputReceivedEvent(); // 0x005EB768-0x005EB7B8
		}
	
		// Constructors
		public AnchorInputListenerBehaviour(); // 0x005EB760-0x005EB768
	
		// Methods
		private void Update(); // 0x005EB33C-0x005EB3BC
		private static bool TryGetMouseDownPosition(out Vector2 screenPosition); // 0x005EB590-0x005EB760
		private static bool TryGetScreenTappedPosition(out Vector2 screenPosition); // 0x005EB3BC-0x005EB590
	}

	[Serializable]
	public class HitTestEvent : UnityEvent<HitTestResult> // TypeDefIndex: 3267
	{
		// Constructors
		public HitTestEvent(); // 0x00531378-0x005313C8
	}

	public enum HitTestMode // TypeDefIndex: 3268
	{
		AUTOMATIC = 0,
		INTERACTIVE = 1
	}

	internal struct HitTestResultData // TypeDefIndex: 3269
	{
		// Fields
		public IntPtr HitTestResultPtr; // 0x00
		public float[] Orientation; // 0x08
		public float[] Position; // 0x10
		internal float Unused; // 0x18
	}

	internal class PlaymodeSmartTerrainImpl : SmartTerrain // TypeDefIndex: 3270
	{
		// Fields
		private const int HIT_TEST_LAYER = 31; // Metadata: 0x0021BDB2
		private const string EMULATOR_PLANE_NAME = "Emulator Ground Plane"; // Metadata: 0x0021BDB6
		private readonly Vector3 mEmulatorPlaneSize; // 0x14
		private GameObject mEmulatorGroundPlane; // 0x20
		private GameObject mGroundPlaneImageTarget; // 0x28
	
		// Properties
		private GameObject GroundPlaneImageTarget { get; } // 0x0044E958-0x0044E984 
	
		// Nested types
		[Serializable]
		[CompilerGenerated] // 0x003DCC88-0x003DCC98
		private sealed class <>c // TypeDefIndex: 3271
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static Func<TrackableBehaviour, bool> <>9__7_0; // 0x08
			public static Func<ImageTargetBehaviour, bool> <>9__7_1; // 0x10
	
			// Constructors
			static <>c(); // 0x0044F8D8-0x0044F93C
			public <>c(); // 0x0044F93C-0x0044F944
	
			// Methods
			internal bool <FindGroundPlaneImageTarget>b__7_0(TrackableBehaviour b); // 0x0044F944-0x0044F9C4
			internal bool <FindGroundPlaneImageTarget>b__7_1(ImageTargetBehaviour b); // 0x0044F9C4-0x0044FB68
		}
	
		// Constructors
		public PlaymodeSmartTerrainImpl(); // 0x0044F86C-0x0044F8D0
	
		// Methods
		private GameObject FindGroundPlaneImageTarget(); // 0x0044E984-0x0044EBDC
		public override bool Start(); // 0x0044F028-0x0044F060
		private bool StartSmartTerrain(); // 0x0044F060-0x0044F0F4
		private void CreateEmulatorGroundPlane(); // 0x0044F0F4-0x0044F3AC
		public override void Stop(); // 0x0044F3AC-0x0044F498
		public override bool HitTest(Vector2 imageSpacePos, float defaultHeight, out HitTestResult hitTestResult); // 0x0044F498-0x0044F760
		public override bool HitTest(Vector2 imageSpacePos, float defaultHeight, out HitTestResult[] hitTestResults); // 0x0044F760-0x0044F86C
	}

	public abstract class SmartTerrain : Tracker // TypeDefIndex: 3272
	{
		// Constructors
		protected SmartTerrain(); // 0x0044F8D0-0x0044F8D8
	
		// Methods
		public abstract bool HitTest(Vector2 imageSpacePos, float defaultHeight, out HitTestResult hitTestResult);
		public abstract bool HitTest(Vector2 imageSpacePos, float defaultHeight, out HitTestResult[] hitTestResults);
	}

	public class HitTestResult // TypeDefIndex: 3273
	{
		// Fields
		private readonly IntPtr mPtr; // 0x10
		private readonly Vector3 mPosition; // 0x18
		private readonly Quaternion mOrientation; // 0x24
	
		// Properties
		public IntPtr HitTestPtr { get; } // 0x005313C8-0x005313D0 
		public Vector3 Position { get; } // 0x005313D0-0x005313DC 
		public Quaternion Rotation { get; } // 0x005313DC-0x005313E8 
	
		// Constructors
		internal HitTestResult(Vector3 position, Quaternion orientation, IntPtr ptr); // 0x005313E8-0x00531460
	
		// Methods
		public override string ToString(); // 0x00531460-0x0053150C
		public override bool Equals(object obj); // 0x0053150C-0x00531624
		private bool Equals(HitTestResult other); // 0x00531624-0x00531718
		public override int GetHashCode(); // 0x00531718-0x00531948
	}

	public class PlaneFinderBehaviour : VuforiaMonoBehaviour // TypeDefIndex: 3274
	{
		// Fields
		[Tooltip] // 0x003DD440-0x003DD478
		public GameObject PlaneIndicator; // 0x18
		[Tooltip] // 0x003DD478-0x003DD4B0
		public float Height; // 0x20
		[Tooltip] // 0x003DD4B0-0x003DD4E8
		public HitTestEvent OnInteractiveHitTest; // 0x28
		[Tooltip] // 0x003DD4E8-0x003DD520
		public HitTestEvent OnAutomaticHitTest; // 0x30
		private SmartTerrain mSmartTerrain; // 0x38
		private readonly Vector2 mViewportCenter; // 0x40
		private float mLastUpdate; // 0x48
		private bool mPreviouslyVisible; // 0x4C
		private const float MARKER_UPDATE_DELTA = 0f; // Metadata: 0x0021BDCF
		[HideInInspector] // 0x003DD520-0x003DD558
		[SerializeField] // 0x003DD520-0x003DD558
		private bool mDisplayAdvanced; // 0x4D
		[SerializeField] // 0x003DD558-0x003DD568
		private HitTestMode mHitTestMode; // 0x50
	
		// Properties
		public HitTestMode HitTestMode { get; set; } // 0x00544E24-0x00544E2C 0x00544E2C-0x00544E38
	
		// Nested types
		[CompilerGenerated] // 0x003DCC98-0x003DCCA8
		private sealed class <>c__DisplayClass29_0 // TypeDefIndex: 3275
		{
			// Fields
			public bool isVisible; // 0x10
	
			// Constructors
			public <>c__DisplayClass29_0(); // 0x00545FB4-0x00545FBC
	
			// Methods
			internal void <SetIndicatorVisible>b__0(Renderer c); // 0x00546010-0x0054604C
			internal void <SetIndicatorVisible>b__1(Collider c); // 0x0054604C-0x00546088
			internal void <SetIndicatorVisible>b__2(UnityEngine.Canvas c); // 0x00546088-0x005460C4
		}
	
		// Constructors
		public PlaneFinderBehaviour(); // 0x00545FBC-0x00546010
	
		// Methods
		public void PerformHitTest(Vector2 screenPosition); // 0x00544E40-0x00544EFC
		private static Vector2 ConvertScreenToImageSpace(Vector2 screenPosition); // 0x00544EFC-0x00545198
		private void Awake(); // 0x00545198-0x00545374
		private static void OnVuforiaInitialized(); // 0x00545374-0x00545378
		private void OnVuforiaStarted(); // 0x005453E0-0x005453E4
		private void Update(); // 0x00545508-0x0054550C
		private void OnDisable(); // 0x0054550C-0x005455AC
		private void OnEnable(); // 0x005455AC-0x00545634
		private void SetupPreviewObject(); // 0x00545634-0x00545778
		private void OnStatusChanged(TrackableBehaviour.Status status); // 0x00545884-0x0054588C
		private void UpdatePreview(); // 0x0054588C-0x00545AA4
		private void OnHitTestModeChanged(); // 0x00544E38-0x00544E40
		private void UpdateSurfaceIndicatorVisibility(bool visible); // 0x005457CC-0x00545884
		private bool IsSurfaceIndicatorPrefab(); // 0x00545778-0x005457CC
		private void OnDestroy(); // 0x00545C9C-0x00545E7C
		private void SetIndicatorVisible(bool isVisible); // 0x00545AA4-0x00545C9C
		private static void InitializeSmartTerrain(); // 0x00545378-0x005453E0
		private static void StopAndDeinitializeSmartTerrain(); // 0x00545E7C-0x00545FB4
		private void StartSmartTerrain(); // 0x005453E4-0x00545508
	}

	internal class SmartTerrainImpl : SmartTerrain // TypeDefIndex: 3276
	{
		// Constructors
		public SmartTerrainImpl(); // 0x00455AF0-0x00455AF8
	
		// Methods
		public override bool Start(); // 0x00454E8C-0x00454ECC
		private bool StartSmartTerrain(); // 0x00454ECC-0x00455088
		public override void Stop(); // 0x00455088-0x00455254
		public override bool HitTest(Vector2 imageSpacePos, float defaultHeight, out HitTestResult hitTestResult); // 0x00455254-0x00455318
		public override bool HitTest(Vector2 imageSpacePos, float defaultHeight, out HitTestResult[] hitTestResults); // 0x00455318-0x00455770
		private static HitTestResult ConvertToHitTestResult(HitTestResultData resultData); // 0x00455770-0x00455AF0
	}

	public interface IHoloLensApiAbstraction // TypeDefIndex: 3277
	{
		// Methods
		void SetFocusPoint(Vector3 point, Vector3 normal);
	}

	internal class NullHoloLensApiAbstraction : IHoloLensApiAbstraction // TypeDefIndex: 3278
	{
		// Constructors
		public NullHoloLensApiAbstraction(); // 0x00541C54-0x00541C5C
	
		// Methods
		public void SetFocusPoint(Vector3 point, Vector3 normal); // 0x00541C50-0x00541C54
	}

	public interface ICustomViewerParameters : IViewerParameters // TypeDefIndex: 3279
	{
		// Methods
		void SetButtonType(ViewerButtonType val);
		void SetScreenToLensDistance(float val);
		void SetInterLensDistance(float val);
		void SetTrayAlignment(ViewerTrayAlignment val);
		void SetLensCentreToTrayDistance(float val);
		void ClearDistortionCoefficients();
		void AddDistortionCoefficient(float val);
		void SetFieldOfView(Vector4 val);
		void SetContainsMagnet(bool val);
	}

	public abstract class DeviceTracker : Tracker // TypeDefIndex: 3280
	{
		// Nested types
		public enum TRACKING_MODE // TypeDefIndex: 3281
		{
			ROTATIONAL = 0,
			POSITIONAL = 1
		}
	
		// Constructors
		protected DeviceTracker(); // 0x00607B5C-0x00607B64
	
		// Methods
		internal virtual bool GetGlobalPoseOffset(out Vector3 positionalOffset, out Quaternion rotationalOffset); // 0x00607AAC-0x00607B5C
	}

	public class DeviceTrackerARController : ARController // TypeDefIndex: 3282
	{
		// Fields
		public static readonly Vector3 DEFAULT_HEAD_PIVOT; // 0x00
		public static readonly Vector3 DEFAULT_HANDHELD_PIVOT; // 0x0C
		private DeviceTracker.TRACKING_MODE mTrackingMode; // 0x18
		private bool mAutoInitTracker; // 0x1C
		private bool mAutoStartTracker; // 0x1D
		private bool mPosePrediction; // 0x1E
		private RotationalDeviceTracker.MODEL_CORRECTION_MODE mModelCorrectionMode; // 0x20
		private bool mModelTransformEnabled; // 0x24
		private Vector3 mModelTransform; // 0x28
		private Action mTrackerStarted; // 0x38
		private bool mTrackerWasActiveBeforePause; // 0x40
		private bool mTrackerWasActiveBeforeDisabling; // 0x41
		private float mEmulatorPositionVelocity; // 0x44
		private VuforiaConfiguration.DeviceTrackerConfiguration mDeviceTrackerConfiguration; // 0x48
		private static DeviceTrackerARController mInstance; // 0x18
		private static object mPadlock; // 0x20
	
		// Properties
		public static DeviceTrackerARController Instance { get; } // 0x00607BD4-0x00607D40 
		internal DeviceTracker.TRACKING_MODE TrackingMode { get; } // 0x00607DA0-0x00607DA8 
		internal bool AutoInitTracker { get; } // 0x00607DA8-0x00607DB0 
		internal bool AutoStartTracker { get; } // 0x00607DB0-0x00607DB8 
		internal RotationalDeviceTracker.MODEL_CORRECTION_MODE ModelCorrectionMode { get; } // 0x00607DB8-0x00607DC0 
		internal bool ModelTransformEnabled { get; } // 0x00607DC0-0x00607DC8 
		internal Vector3 ModelTransform { get; } // 0x00607DC8-0x00607DD4 
	
		// Constructors
		private DeviceTrackerARController(); // 0x00607B64-0x00607BD4
		static DeviceTrackerARController(); // 0x0060A0B8-0x0060A1A8
	
		// Methods
		[RuntimeInitializeOnLoadMethod] // 0x003DE42C-0x003DE440
		public static void RegisterARController(); // 0x00607D40-0x00607DA0
		internal void SetDeviceTrackerConfiguration(VuforiaConfiguration.DeviceTrackerConfiguration config); // 0x00607DD4-0x00607DDC
		protected override void Awake(); // 0x00607F08-0x006080EC
		private void ConfigureDeviceTracker(VuforiaConfiguration.DeviceTrackerConfiguration config); // 0x00607DDC-0x00607F08
		protected override void OnEnable(); // 0x006080EC-0x006080FC
		protected override void OnDisable(); // 0x00608284-0x006083A8
		protected override void OnDestroy(); // 0x006084C8-0x00608614
		protected override void Update(); // 0x00608614-0x00608858
		public void RegisterTrackerStartedCallback(Action callback); // 0x00608A64-0x00608BEC
		public void UnregisterTrackerStartedCallback(Action callback); // 0x00608BEC-0x00608CB0
		public void RegisterBeforeDevicePoseUpdateCallback(Action callback); // 0x00608CB0-0x00608D9C
		public void UnregisterBeforeDevicePoseUpdateCallback(Action callback); // 0x00608E60-0x00608F4C
		public void RegisterDevicePoseUpdatedCallback(Action callback); // 0x00609010-0x006090FC
		public void UnregisterDevicePoseUpdatedCallback(Action callback); // 0x006091C0-0x006092AC
		public void RegisterDevicePoseStatusChangedCallback(Action<TrackableBehaviour.Status> callback); // 0x00609370-0x0060945C
		public void UnregisterDevicePoseStatusChangedCallback(Action<TrackableBehaviour.Status> callback); // 0x00609520-0x0060960C
		public void RegisterDevicePoseStatusChangedCallback(Action<TrackableBehaviour.Status, TrackableBehaviour.StatusInfo> callback); // 0x006096D0-0x006097BC
		public void UnregisterDevicePoseStatusChangedCallback(Action<TrackableBehaviour.Status, TrackableBehaviour.StatusInfo> callback); // 0x00609880-0x0060996C
		private void StartDeviceTracker(); // 0x006080FC-0x00608284
		private void StopDeviceTracker(); // 0x006083A8-0x006084C8
		private void InitDeviceTracker(); // 0x00609A30-0x00609CAC
		private void ApplySettings(); // 0x00609CAC-0x00609DF8
		private void GetEmulatorRotation(ref Vector3 rotation); // 0x00608858-0x00608A64
		internal void OnVuforiaInitialized(); // 0x00609DF8-0x00609F60
		internal void OnVuforiaStarted(); // 0x00609F60-0x00609F70
		internal void OnPause(bool pause); // 0x00609F70-0x0060A0B8
	}

	internal abstract class ObjectTargetImpl : TrackableImpl, ObjectTarget // TypeDefIndex: 3283
	{
		// Fields
		private ITargetSize mTargetSizeImpl; // 0x20
	
		// Properties
		internal ITargetSize TargetSize { get; set; } // 0x00543FA4-0x00543FAC 0x00543FAC-0x00543FB4
	
		// Constructors
		internal ObjectTargetImpl(string name, int id, ITargetSize sizeImpl); // 0x0053C0D0-0x0053C0FC
	
		// Methods
		public Vector3 GetSize(); // 0x00543D58-0x00543E0C
		public float GetLargestSizeComponent(); // 0x00543EEC-0x00543FA4
		public bool SetSize(Vector3 size); // 0x00543E0C-0x00543EEC
	}

	internal interface ITargetSize // TypeDefIndex: 3284
	{
		// Methods
		Vector3 GetSize();
		float GetLargestSizeComponent();
		bool SetSize(Vector3 size);
	}

	internal class DataSetTargetSize : ITargetSize // TypeDefIndex: 3285
	{
		// Fields
		protected Vector3 mSize; // 0x10
		private string mName; // 0x20
		private readonly DataSet mDataSet; // 0x28
	
		// Constructors
		public DataSetTargetSize(string name, DataSet dataSet); // 0x005FB5B8-0x005FB7A4
	
		// Methods
		public virtual Vector3 GetSize(); // 0x00601D3C-0x00601D48
		public virtual float GetLargestSizeComponent(); // 0x00601D48-0x00601DCC
		public virtual bool SetSize(Vector3 size); // 0x005FB89C-0x005FBA9C
	}

	internal class CustomDataSetTargetSize : DataSetTargetSize // TypeDefIndex: 3286
	{
		// Fields
		private bool mInvokeBeforeNativeCall; // 0x30
		private Action<Vector3> mSetSizeAction; // 0x38
	
		// Constructors
		public CustomDataSetTargetSize(string name, DataSet dataSet, Action<Vector3> setSizeAction, bool invokeBeforeNativeCall); // 0x005FB57C-0x005FB5B8
	
		// Methods
		public override bool SetSize(Vector3 size); // 0x005FB7A4-0x005FB89C
		internal void SetCachedSize(Vector3 size); // 0x005FBA9C-0x005FBAA8
	}

	internal class DisabledSetTargetSize : ITargetSize // TypeDefIndex: 3287
	{
		// Fields
		private Vector3 mSize; // 0x10
	
		// Constructors
		public DisabledSetTargetSize(Vector3 size); // 0x00527E24-0x00527E6C
	
		// Methods
		public virtual Vector3 GetSize(); // 0x00527E6C-0x00527E78
		public virtual float GetLargestSizeComponent(); // 0x00527E78-0x00527EFC
		public bool SetSize(Vector3 size); // 0x00527EFC-0x00527F70
	}

	public class TurnOffBehaviour : VuforiaMonoBehaviour // TypeDefIndex: 3288
	{
		// Constructors
		public TurnOffBehaviour(); // 0x00464D6C-0x00464D74
	
		// Methods
		private void Awake(); // 0x00464C80-0x00464D68
		private void Start(); // 0x00464D68-0x00464D6C
	}

	[Flags] // 0x003DCA90-0x003DCAA0
	public enum FusionProviderType // TypeDefIndex: 3289
	{
		INVALID_OPERATION = -1,
		VUFORIA_VISION_ONLY = 1,
		VUFORIA_SENSOR_FUSION = 2,
		PLATFORM_SENSOR_FUSION = 4,
		ALL = 7
	}

	public static class GameObjectExtensionMethods // TypeDefIndex: 3290
	{
		// Extension methods
		public static GameObject PositionAt(this GameObject go, Vector3 position); // 0x0052B448-0x0052B4BC
	}

	public enum PIXEL_FORMAT // TypeDefIndex: 3291
	{
		UNKNOWN_FORMAT = 0,
		RGB565 = 1,
		RGB888 = 2,
		GRAYSCALE = 4,
		RGBA8888 = 16,
		NV21 = 64,
		NV12 = 128,
		YV12 = 256,
		YUV420P = 512,
		YUYV = 1024
	}

	public class ImageDescription // TypeDefIndex: 3292
	{
		// Fields
		[CompilerGenerated] // 0x003DD568-0x003DD578
		private int <Width>k__BackingField; // 0x10
		[CompilerGenerated] // 0x003DD578-0x003DD588
		private int <Height>k__BackingField; // 0x14
		[CompilerGenerated] // 0x003DD588-0x003DD598
		private int <Stride>k__BackingField; // 0x18
		[CompilerGenerated] // 0x003DD598-0x003DD5A8
		private int <BufferWidth>k__BackingField; // 0x1C
		[CompilerGenerated] // 0x003DD5A8-0x003DD5B8
		private int <BufferHeight>k__BackingField; // 0x20
		[CompilerGenerated] // 0x003DD5B8-0x003DD5C8
		private PIXEL_FORMAT <PixelFormat>k__BackingField; // 0x24
	
		// Properties
		public int Width { [CompilerGenerated] /* 0x003DE450-0x003DE460 */ get; [CompilerGenerated] /* 0x003DE460-0x003DE470 */ private set; } // 0x00532424-0x0053242C 0x00532E40-0x00532E48
		public int Height { [CompilerGenerated] /* 0x003DE470-0x003DE480 */ get; [CompilerGenerated] /* 0x003DE480-0x003DE490 */ private set; } // 0x0053242C-0x00532434 0x00532E48-0x00532E50
		public int Stride { [CompilerGenerated] /* 0x003DE490-0x003DE4A0 */ get; [CompilerGenerated] /* 0x003DE4A0-0x003DE4B0 */ private set; } // 0x00532460-0x00532468 0x00532E50-0x00532E58
		public int BufferWidth { [CompilerGenerated] /* 0x003DE4B0-0x003DE4C0 */ get; [CompilerGenerated] /* 0x003DE4C0-0x003DE4D0 */ private set; } // 0x00532494-0x0053249C 0x00532E58-0x00532E60
		public int BufferHeight { [CompilerGenerated] /* 0x003DE4D0-0x003DE4E0 */ get; [CompilerGenerated] /* 0x003DE4E0-0x003DE4F0 */ private set; } // 0x005324C8-0x005324D0 0x00532E60-0x00532E68
		public PIXEL_FORMAT PixelFormat { [CompilerGenerated] /* 0x003DE4F0-0x003DE500 */ get; [CompilerGenerated] /* 0x003DE500-0x003DE510 */ private set; } // 0x005324D0-0x005324D8 0x00532E68-0x00532E70
		public static ImageDescription Zero { get; } // 0x00532344-0x005323A8 
	
		// Constructors
		public ImageDescription(int width, int height, int stride, int bufferWidth, int bufferHeight, PIXEL_FORMAT format); // 0x00532268-0x005322C8
		internal ImageDescription(TrackerData.ImageHeaderData src); // 0x00532E70-0x00532EBC
	
		// Methods
		public override bool Equals(object obj); // 0x00532EBC-0x00532FD4
		protected bool Equals(ImageDescription other); // 0x00532FD4-0x00533070
		public override int GetHashCode(); // 0x00533070-0x005330AC
	}

	internal static class PixelFormatExtensions // TypeDefIndex: 3293
	{
		// Extension methods
		public static TextureFormat ToTextureFormat(this PIXEL_FORMAT input); // 0x0052C4B8-0x0052C508
		public static int GetChannelCount(this PIXEL_FORMAT input); // 0x00532D7C-0x00532DCC
		public static int GetBitsPerPixel(this PIXEL_FORMAT input); // 0x00532DCC-0x00532E40
	}

	internal static class IEnumerableExtensionMethods // TypeDefIndex: 3294
	{
		// Extension methods
		public static void ForEach<T>(this IEnumerable<T> enumerable, Action<T> action);
		public static bool ContainsAll<T>(this IEnumerable<T> enumerable, IEnumerable<T> subset);
	}

	internal static class DelegateHelper // TypeDefIndex: 3295
	{
		// Methods
		private static void InvokeDelegate(Delegate action, params /* 0x003DEC6C-0x003DEC7C */ object[] args); // 0x00605B44-0x00605D08
	
		// Extension methods
		public static void InvokeWithExceptionHandling(this Action action); // 0x00605AE8-0x00605B44
		public static void InvokeWithExceptionHandling<T>(this Action<T> action, T arg);
		public static void InvokeWithExceptionHandling<T1, T2>(this Action<T1, T2> action, T1 arg1, T2 arg2);
	}

	internal class PlayModeEyewearUserCalibratorImpl : EyewearUserCalibrator // TypeDefIndex: 3296
	{
		// Constructors
		public PlayModeEyewearUserCalibratorImpl(); // 0x0044E36C-0x0044E374
	
		// Methods
		public override bool init(int surfaceWidth, int surfaceHeight, int targetWidth, int targetHeight); // 0x0044E37C-0x0044E384
		public override float getMinScaleHint(); // 0x0044E384-0x0044E38C
		public override float getMaxScaleHint(); // 0x0044E38C-0x0044E394
		public override bool isStereoStretched(); // 0x0044E394-0x0044E39C
		public override bool getProjectionMatrix(EyewearDevice.EyewearCalibrationReading[] readings, out Matrix4x4 cameraToEyeMatrix, out Matrix4x4 projectionMatrix); // 0x0044E39C-0x0044E46C
	}

	internal class PlayModeEyewearCalibrationProfileManagerImpl : EyewearCalibrationProfileManager // TypeDefIndex: 3297
	{
		// Constructors
		public PlayModeEyewearCalibrationProfileManagerImpl(); // 0x0044E110-0x0044E118
	
		// Methods
		public override int getMaxCount(); // 0x0044DFA8-0x0044DFB0
		public override int getUsedCount(); // 0x0044DFB0-0x0044DFB8
		public override bool isProfileUsed(int profileID); // 0x0044DFB8-0x0044DFC0
		public override int getActiveProfile(); // 0x0044DFC0-0x0044DFC8
		public override bool setActiveProfile(int profileID); // 0x0044DFC8-0x0044DFD0
		public override Matrix4x4 getCameraToEyePose(int profileID, EyewearDevice.EyeID eyeID); // 0x0044DFD0-0x0044E038
		public override Matrix4x4 getEyeProjection(int profileID, EyewearDevice.EyeID eyeID); // 0x0044E038-0x0044E0A0
		public override bool setCameraToEyePose(int profileID, EyewearDevice.EyeID eyeID, Matrix4x4 projectionMatrix); // 0x0044E0A0-0x0044E0A8
		public override bool setEyeProjection(int profileID, EyewearDevice.EyeID eyeID, Matrix4x4 projectionMatrix); // 0x0044E0A8-0x0044E0B0
		public override string getProfileName(int profileID); // 0x0044E0B0-0x0044E100
		public override bool setProfileName(int profileID, string name); // 0x0044E100-0x0044E108
		public override bool clearProfile(int profileID); // 0x0044E108-0x0044E110
	}

	internal class PlayModeEyewearDevice : EyewearDevice // TypeDefIndex: 3298
	{
		// Fields
		private EyewearCalibrationProfileManager mProfileManager; // 0x10
		private EyewearUserCalibrator mCalibrator; // 0x18
		private bool mDummyPredictiveTracking; // 0x20
	
		// Constructors
		public PlayModeEyewearDevice(); // 0x0044E374-0x0044E37C
	
		// Methods
		public override bool IsSeeThru(); // 0x0044E118-0x0044E120
		public override bool IsDualDisplay(); // 0x0044E120-0x0044E128
		public override bool SetDisplayExtended(bool enable); // 0x0044E128-0x0044E130
		public override bool IsDisplayExtended(); // 0x0044E130-0x0044E138
		public override bool IsDisplayExtendedGLOnly(); // 0x0044E138-0x0044E140
		public override ScreenOrientation GetScreenOrientation(); // 0x0044E140-0x0044E148
		public override bool SetPredictiveTracking(bool enable); // 0x0044E148-0x0044E15C
		public override bool IsPredictiveTrackingEnabled(); // 0x0044E15C-0x0044E164
		public override EyewearCalibrationProfileManager GetCalibrationProfileManager(); // 0x0044E164-0x0044E268
		public override EyewearUserCalibrator GetUserCalibrator(); // 0x0044E268-0x0044E36C
	}

	internal class DedicatedEyewearDevice : EyewearDevice // TypeDefIndex: 3299
	{
		// Fields
		private EyewearCalibrationProfileManager mProfileManager; // 0x10
		private EyewearUserCalibrator mCalibrator; // 0x18
	
		// Constructors
		public DedicatedEyewearDevice(); // 0x006057BC-0x006057C4
	
		// Methods
		public override bool IsSeeThru(); // 0x00604ED4-0x00604FB8
		public override bool IsDualDisplay(); // 0x00604FB8-0x0060509C
		public override bool SetDisplayExtended(bool enable); // 0x0060509C-0x00605188
		public override bool IsDisplayExtended(); // 0x00605188-0x0060526C
		public override bool IsDisplayExtendedGLOnly(); // 0x0060526C-0x00605350
		public override ScreenOrientation GetScreenOrientation(); // 0x00605350-0x0060544C
		public override bool SetPredictiveTracking(bool enable); // 0x0060544C-0x00605538
		public override bool IsPredictiveTrackingEnabled(); // 0x00605538-0x0060561C
		public override EyewearCalibrationProfileManager GetCalibrationProfileManager(); // 0x0060561C-0x006056EC
		public override EyewearUserCalibrator GetUserCalibrator(); // 0x006056EC-0x006057BC
	}

	internal static class CameraConfigurationUtility // TypeDefIndex: 3300
	{
		// Fields
		private static readonly Vector4 MIN_CENTER; // 0x00
		private static readonly Vector4 MAX_CENTER; // 0x10
		private static readonly Vector4 MIN_BOTTOM; // 0x20
		private static readonly Vector4 MIN_TOP; // 0x30
		private static readonly Vector4 MIN_LEFT; // 0x40
		private static readonly Vector4 MIN_RIGHT; // 0x50
		private static readonly Vector4 MAX_BOTTOM; // 0x60
		private static readonly Vector4 MAX_TOP; // 0x70
		private static readonly Vector4 MAX_LEFT; // 0x80
		private static readonly Vector4 MAX_RIGHT; // 0x90
		private const float MAX_FAR_PLANE_FACTOR = 0.99f; // Metadata: 0x0021BE19
		private const float MIN_NEAR_PLANE_FACTOR = 1.01f; // Metadata: 0x0021BE1D
	
		// Constructors
		static CameraConfigurationUtility(); // 0x005F52E8-0x005F55B4
	
		// Methods
		public static void ExtractCameraClippingPlanes(Matrix4x4 inverseProjMatrix, out float near, out float far); // 0x005EFBE4-0x005EFD40
		public static void ExtractCenterEyeRay(Matrix4x4 inverseProjMatrix, out Vector3 from, out Vector3 to); // 0x005EEF2C-0x005EF0F4
		public static float ExtractVerticalCameraFoV(Matrix4x4 inverseProjMatrix); // 0x005EEBE4-0x005EED88
		public static float ExtractHorizontalCameraFoV(Matrix4x4 inverseProjMatrix); // 0x005EED88-0x005EEF2C
		public static Matrix4x4 ScalePerspectiveProjectionMatrix(Matrix4x4 inputMatrix, float targetVerticalFoVDeg, float targetHorizontalFoVDeg); // 0x005EFD80-0x005EFFAC
		public static float CalculateHorizontalFoVFromViewPortAspect(float verticalFoVDeg, float viewportAspect); // 0x005EFFAC-0x005F0048
		public static float CalculateVerticalFoVFromViewPortAspect(float horizontalFoVDeg, float viewportAspect); // 0x005F0048-0x005F00E4
		public static void SetFovForCustomProjection(Camera camera); // 0x005F00E4-0x005F01D8
		public static float GetMaxDepthForVideoBackground(Matrix4x4 inverseProjMatrix); // 0x005EF0F4-0x005EF1F8
		public static float GetMinDepthForVideoBackground(Matrix4x4 inverseProjMatrix); // 0x005F01D8-0x005F02DC
		public static void SetVRDeviceStereoOffset(Vector3 leftCameraPosition, Quaternion leftCameraRotation, Vector3 rightCameraPosition, Quaternion rightCameraRotation); // 0x005F02DC-0x005F0614
		public static void SetVRDeviceStereoProjectionMatrix(int eyeId, Matrix4x4 projectionMatrix); // 0x005F0614-0x005F07D8
		public static void SetVRDeviceSingleCullingMatrix(Matrix4x4 projectionMatrix, Matrix4x4 viewMatrix); // 0x005F07D8-0x005F0A0C
		public static void ExtractViewFrustumCorners(Matrix4x4 inverseProjMatrix, out Vector3[] nearCorners, out Vector3[] farCorners); // 0x005F0A0C-0x005F103C
		public static void ExtractFittingTwoViewFrustumCorners(Vector3[] firstNearCorners, Vector3[] firstFarCorners, Vector3[] secondNearCorners, Vector3[] secondFarCorners, out Vector3[] nearResultCorners, out Vector3[] farResultCorners); // 0x005F103C-0x005F22C4
		public static void ExtractCameraInfoFromViewFrustumCorners(Vector3[] nearCorners, Vector3[] farCorners, out Vector3 cameraPos, out Matrix4x4 projectionMatrix, out float nearPlane, out float farPlane); // 0x005F25E0-0x005F3008
		public static void ExtractViewFrustumPlanesFromCamera(Camera camera, out Plane[] planes); // 0x005F3A70-0x005F3B74
		public static void ExtractViewFrustumCornersFromViewFustumPlanes(Plane[] planes, out Vector3[] nearCorners, out Vector3[] farCorners); // 0x005F22C4-0x005F25E0
		public static Vector3 Plane3Intersect(Plane p1, Plane p2, Plane p3); // 0x005F354C-0x005F385C
		public static void ExtractViewFrustumPlanesFromViewFustumCorners(Vector3[] nearCorners, Vector3[] farCorners, out Plane[] planes); // 0x005F3008-0x005F354C
		public static Matrix4x4 CreateSymmetricProjectionMatrix(float right, float top, float near, float far); // 0x005F3B74-0x005F3D68
		public static Matrix4x4 CreateAsymmetricProjectionMatrixWithSkew(float right, float top, float skewX, float skewY, float near, float far); // 0x005F3D68-0x005F3F6C
		public static Matrix4x4 CreateAsymmetricProjectionMatrix(float left, float right, float bottom, float top, float near, float far); // 0x005F385C-0x005F3A70
		public static string GetMatrixString(Matrix4x4 m); // 0x005F3F6C-0x005F4704
		private static Vector3 HomogenizedVec3(Vector4 vec4); // 0x005EFD40-0x005EFD80
		internal static void DrawViewFrustum(Vector3[] nearCorners, Vector3[] farCorners, bool overrideColor = false /* Metadata: 0x0021BE17 */, Color colorIn = default); // 0x005F4704-0x005F4E74
		internal static void DrawCross(Vector3 point, bool overrideColor = false /* Metadata: 0x0021BE18 */, Color colorIn = default); // 0x005F4E74-0x005F51C0
		internal static string MatrixToString(Matrix4x4 mat); // 0x005F51C0-0x005F52E8
	}

	internal abstract class BaseCameraConfiguration : IProjectMatrixProvider // TypeDefIndex: 3301
	{
		// Fields
		protected CameraDevice.CameraDeviceMode mCameraDeviceMode; // 0x10
		protected Action mOnVideoBackgroundConfigChanged; // 0x18
		private VideoBackgroundBehaviour mVideoBackgroundBehaviour; // 0x20
		protected Rect mVideoBackgroundViewportRect; // 0x28
		protected bool mRenderVideoBackground; // 0x38
		protected ScreenOrientation mProjectionOrientation; // 0x3C
		protected BackgroundPlaneBehaviour mBackgroundPlaneBehaviour; // 0x40
		private bool mDeviceModeChanged; // 0x48
		private bool mProjectionParamsChanged; // 0x49
	
		// Properties
		public virtual Rect VideoBackgroundViewportRect { get; } // 0x005EF77C-0x005EF788 
		public virtual Matrix4x4 MainProjectionMatrix { get; } // 0x005EF9F4-0x005EFA5C 
	
		// Constructors
		protected BaseCameraConfiguration(BackgroundPlaneBehaviour bgpBehaviour, VideoBackgroundBehaviour vbBehaviour); // 0x005EF3DC-0x005EF420
	
		// Methods
		public void InitCameraDevice(CameraDevice.CameraDeviceMode cameraDeviceMode, Action onVideoBackgroundConfigChanged); // 0x005EF420-0x005EF42C
		public virtual void Init(); // 0x005EF42C-0x005EF560
		public virtual void ResetBackgroundPlane(bool disable); // 0x005EF6CC-0x005EF77C
		public void SetDeviceModeChanged(); // 0x005EF788-0x005EF794
		public void SetProjectionParamsChanged(); // 0x005EF794-0x005EF7A0
		protected abstract void ConfigureVideoBackground();
		protected abstract void UpdateProjection();
		protected void CheckUpdateRendering(bool rendererDirty); // 0x005EF7A0-0x005EF884
		private void EnableObjectRenderer(GameObject go, bool enabled); // 0x005EF5F4-0x005EF6CC
		protected bool DeviceModeChanged(); // 0x005EF9DC-0x005EF9E4
		protected virtual bool ProjectionParamsChanged(); // 0x005EF9EC-0x005EF9F4
		protected bool IsVideoBackgroundEnabled(); // 0x005EF560-0x005EF5F4
		public virtual void FinalizeRenderingSettings(); // 0x005EFA5C-0x005EFA60
		public virtual void Destroy(); // 0x005EFA60-0x005EFA64
	}

	public interface IWebCam // TypeDefIndex: 3302
	{
		// Properties
		bool DidUpdateThisFrame { get; }
		bool IsPlaying { get; }
		int ActualWidth { get; }
		int ActualHeight { get; }
		bool IsTextureSizeAvailable { get; }
		VuforiaRenderer.Vec2I ResampledTextureSize { get; }
	
		// Methods
		void StartCamera();
		void StopCamera();
		void ResetPlaying();
		Color32[] GetPixels32AndBufferFrame();
		void RenderFrame(int frameIndex);
		CameraDevice.VideoModeData GetVideoMode();
		bool IsRendererDirty();
		void Update();
	}

	internal interface IExtendedTrackingManager // TypeDefIndex: 3303
	{
		// Methods
		void ApplyTrackingState(TrackableBehaviour trackableBehaviour, TrackableBehaviour.Status vuforiaStatus);
		IEnumerable<VuforiaManager.TrackableIdPair> GetExtendedTrackedBehaviours();
	}

	internal class VuforiaExtendedTrackingManager : IExtendedTrackingManager // TypeDefIndex: 3304
	{
		// Constructors
		public VuforiaExtendedTrackingManager(); // 0x0070BA88-0x0070BA90
	
		// Methods
		public void ApplyTrackingState(TrackableBehaviour trackableBehaviour, TrackableBehaviour.Status vuforiaStatus); // 0x0070BA04-0x0070BA40
		public IEnumerable<VuforiaManager.TrackableIdPair> GetExtendedTrackedBehaviours(); // 0x0070BA40-0x0070BA88
	}

	internal static class Log // TypeDefIndex: 3305
	{
		// Methods
		[Conditional] // 0x003DE590-0x003DE5C8
		public static void Debug(string message); // 0x00538D4C-0x00538DB4
		[Conditional] // 0x003DE5C8-0x003DE600
		public static void Debug(string message, params /* 0x003DEC7C-0x003DEC8C */ object[] parameters); // 0x00538DB4-0x00538DB8
		[Conditional] // 0x003DE600-0x003DE638
		public static void Warn(string message); // 0x00538DB8-0x00538E20
		[Conditional] // 0x003DE638-0x003DE670
		public static void Warn(string message, params /* 0x003DEC8C-0x003DEC9C */ object[] parameters); // 0x00538E20-0x00538E24
		[Conditional] // 0x003DE670-0x003DE6A8
		public static void Error(string message); // 0x00538E24-0x00538E8C
		[Conditional] // 0x003DE6A8-0x003DE6E0
		public static void Error(string message, params /* 0x003DEC9C-0x003DECAC */ object[] parameters); // 0x00538E8C-0x00538E90
	}

	internal class GlobalStrings // TypeDefIndex: 3306
	{
		// Fields
		internal const string DIGITAL_EYEWEAR_MT_WARNING_MESSAGE = "Model Targets are not supported by Digital Eyewear."; // Metadata: 0x0021BE21
	
		// Constructors
		public GlobalStrings(); // 0x0052B4BC-0x0052B4C4
	}

	internal static class TrackerData // TypeDefIndex: 3307
	{
		// Nested types
		internal struct PoseData // TypeDefIndex: 3308
		{
			// Fields
			internal Vector3 position; // 0x00
			internal Quaternion orientation; // 0x0C
			internal int unused; // 0x1C
		}
	
		internal struct TrackableResultData // TypeDefIndex: 3309
		{
			// Fields
			internal PoseData pose; // 0x00
			internal double timeStamp; // 0x20
			internal int statusInteger; // 0x28
			internal int id; // 0x2C
	
			// Properties
			internal TrackableBehaviour.Status status { get; set; } // 0x00463D80-0x00463D88 0x00463D88-0x00463D90
		}
	
		internal struct VirtualButtonData // TypeDefIndex: 3310
		{
			// Fields
			internal int id; // 0x00
			internal int isPressed; // 0x04
		}
	
		internal struct Obb2D // TypeDefIndex: 3311
		{
			// Fields
			internal Vector2 center; // 0x00
			internal Vector2 halfExtents; // 0x08
			internal float rotation; // 0x10
			internal int unused; // 0x14
		}
	
		internal struct Obb3D // TypeDefIndex: 3312
		{
			// Fields
			internal Vector3 center; // 0x00
			internal Vector3 halfExtents; // 0x0C
			internal float rotationZ; // 0x18
			internal int unused; // 0x1C
		}
	
		internal struct ImageHeaderData // TypeDefIndex: 3313
		{
			// Fields
			internal IntPtr data; // 0x00
			internal int width; // 0x08
			internal int height; // 0x0C
			internal int stride; // 0x10
			internal int bufferWidth; // 0x14
			internal int bufferHeight; // 0x18
			internal int format; // 0x1C
			internal int reallocate; // 0x20
			internal int updated; // 0x24
		}
	
		internal struct MeshData // TypeDefIndex: 3314
		{
			// Fields
			internal IntPtr positionsArray; // 0x00
			internal IntPtr normalsArray; // 0x08
			internal IntPtr texCoordsArray; // 0x10
			internal IntPtr triangleIdxArray; // 0x18
			internal int numVertexValues; // 0x20
			internal int hasNormals; // 0x24
			internal int hasTexCoords; // 0x28
			internal int numTriangleIndices; // 0x2C
		}
	
		internal struct InstanceIdData // TypeDefIndex: 3315
		{
			// Fields
			public ulong numericValue; // 0x00
			public IntPtr buffer; // 0x08
			internal IntPtr reserved; // 0x10
			public uint dataLength; // 0x18
			public int dataType; // 0x1C
		}
	
		internal struct VuMarkTargetData // TypeDefIndex: 3316
		{
			// Fields
			public InstanceIdData instanceId; // 0x00
			public int id; // 0x20
			public int templateId; // 0x24
			public Vector3 size; // 0x28
			public int unused; // 0x34
		}
	
		internal struct VuMarkTargetResultData // TypeDefIndex: 3317
		{
			// Fields
			internal PoseData pose; // 0x00
			internal double timeStamp; // 0x20
			internal int statusInteger; // 0x28
			internal int targetID; // 0x2C
			internal int resultID; // 0x30
			internal int unused; // 0x34
	
			// Properties
			internal TrackableBehaviour.Status status { get; set; } // 0x00463D90-0x00463DA0 0x00463DA0-0x00463DA8
		}
	
		internal struct IlluminationData // TypeDefIndex: 3318
		{
			// Fields
			internal float ambientIntensity; // 0x00
			internal float ambientColorTemperature; // 0x04
		}
	
		internal struct FrameState // TypeDefIndex: 3319
		{
			// Fields
			internal IntPtr trackableDataArray; // 0x00
			internal IntPtr vbDataArray; // 0x08
			internal IntPtr vuMarkResultArray; // 0x10
			internal IntPtr newVuMarkDataArray; // 0x18
			internal IntPtr illuminationData; // 0x20
			internal int numTrackableResults; // 0x28
			internal int numVirtualButtonResults; // 0x2C
			internal int frameIndex; // 0x30
			internal int numVuMarkResults; // 0x34
			internal int numNewVuMarks; // 0x38
			internal int deviceTrackableId; // 0x3C
			internal int deviceTrackableStatusInfo; // 0x40
			internal Vector4 minCameraCalibration; // 0x44
		}
	
		internal struct StructList // TypeDefIndex: 3320
		{
			// Fields
			internal IntPtr arrayPtr; // 0x00
			internal int numResults; // 0x08
			internal int unused; // 0x0C
		}
	}

	internal class InstanceIdImpl : InstanceId // TypeDefIndex: 3321
	{
		// Fields
		private InstanceIdType mDataType; // 0x10
		private byte[] mBuffer; // 0x18
		private ulong mNumericValue; // 0x20
		private uint mDataLength; // 0x28
		private string mCachedStringValue; // 0x30
	
		// Properties
		public InstanceIdType DataType { get; } // 0x0053836C-0x00538374 
		public byte[] Buffer { get; } // 0x00538374-0x0053837C 
		public string HexStringValue { get; } // 0x0053837C-0x00538494 
		public string StringValue { get; } // 0x00538494-0x0053849C 
		public ulong NumericValue { get; } // 0x0053849C-0x005384A4 
	
		// Constructors
		public InstanceIdImpl(byte[] buffer, ulong numericValue, InstanceIdType dataType, uint dataLength); // 0x00538258-0x0053836C
	
		// Methods
		public override string ToString(); // 0x005384A4-0x00538540
	}

	internal class VuMarkTargetImpl : ObjectTargetImpl, VuMarkTarget // TypeDefIndex: 3322
	{
		// Fields
		private readonly VuMarkTemplateImpl mVuMarkTemplate; // 0x28
		private readonly InstanceIdImpl mInstanceId; // 0x30
		private Vuforia.Image mInstanceImage; // 0x38
	
		// Properties
		public InstanceId InstanceId { get; } // 0x0070223C-0x00702244 
		public VuMarkTemplate Template { get; } // 0x00702244-0x0070224C 
		public Vuforia.Image InstanceImage { get; } // 0x0070224C-0x007022D0 
	
		// Nested types
		internal class VuMarkSetTargetSize : DisabledSetTargetSize // TypeDefIndex: 3323
		{
			// Fields
			private VuMarkTemplate mTemplate; // 0x20
	
			// Constructors
			public VuMarkSetTargetSize(VuMarkTemplate template); // 0x007021B8-0x0070223C
	
			// Methods
			public override Vector3 GetSize(); // 0x0070269C-0x00702750
			public override float GetLargestSizeComponent(); // 0x00702750-0x00702808
		}
	
		// Constructors
		public VuMarkTargetImpl(int id, byte[] buffer, ulong numericValue, InstanceIdType dataType, uint dataLength, VuMarkTemplateImpl template); // 0x007020B8-0x007021B8
	
		// Methods
		private bool CallNativeGetInstanceImage(ref TrackerData.ImageHeaderData imageHeaderData); // 0x00702478-0x0070269C
		private void CreateInstanceImage(); // 0x007023FC-0x00702478
	}

	internal class VuMarkTemplateImpl : DataSetObjectTargetImpl, VuMarkTemplate // TypeDefIndex: 3324
	{
		// Fields
		private string mUserData; // 0x30
		private Vector2 mOrigin; // 0x38
		private bool mTrackingFromRuntimeAppearance; // 0x40
	
		// Properties
		public string VuMarkUserData { get; } // 0x007028EC-0x00702B78 
		public bool TrackingFromRuntimeAppearance { get; set; } // 0x00702B78-0x00702B80 0x00702B80-0x00702CC4
		public virtual Vector2 Origin { get; } // 0x00702CC4-0x00702CCC 
	
		// Constructors
		public VuMarkTemplateImpl(string name, int id, DataSet dataSet); // 0x00702808-0x007028EC
	
		// Methods
		private void UpdateOrigin(Vector3 newSize); // 0x00702CCC-0x00702F6C
	}

	public class MixedRealityController // TypeDefIndex: 3325
	{
		// Fields
		private const string CLASS_NAME = "MIXED_REALITY_CONTROLLER"; // Metadata: 0x0021BE58
		private static MixedRealityController mInstance; // 0x00
		private VuforiaARController mVuforiaBehaviour; // 0x10
		private DigitalEyewearARController mDigitalEyewearBehaviour; // 0x18
		private VideoBackgroundManager mVideoBackgroundManager; // 0x20
		private bool mViewerHasBeenSetExternally; // 0x28
		private IViewerParameters mViewerParameters; // 0x30
		private bool mFrameWorkHasBeenSetExternally; // 0x38
		private DigitalEyewearARController.StereoFramework mStereoFramework; // 0x3C
		private bool mObjectTrackerStopped; // 0x40
		private bool mAutoStopCameraIfNotRequired; // 0x41
	
		// Properties
		public static MixedRealityController Instance { get; } // 0x0053A410-0x0053A504 
		public bool AutoStopCameraIfNotRequired { get; set; } // 0x0053AB14-0x0053AB1C 0x0053AB1C-0x0053AB28
	
		// Nested types
		public enum Mode // TypeDefIndex: 3326
		{
			HANDHELD_AR = 0,
			ROTATIONAL_HANDHELD_AR = 1,
			HANDHELD_AR_DEVICETRACKER = 2,
			HANDHELD_VR = 3,
			VIEWER_AR = 4,
			ROTATIONAL_VIEWER_AR = 5,
			VIEWER_AR_DEVICETRACKER = 6,
			VIEWER_VR = 7
		}
	
		// Constructors
		public MixedRealityController(); // 0x0053A504-0x0053A514
		static MixedRealityController(); // 0x0053B684-0x0053B688
	
		// Methods
		public bool SetMode(Mode mode); // 0x0053A514-0x0053A6D0
		public void SetViewerParameters(IViewerParameters viewerParameters); // 0x0053AAF4-0x0053AB04
		public void ConfigureForDifferentStereoFramework(DigitalEyewearARController.StereoFramework stereoFramework); // 0x0053AB04-0x0053AB14
		private void ResolveMembers(); // 0x0053A6D0-0x0053A93C
		private void SetVideoBackgroundEnabled(bool enabled); // 0x0053AB28-0x0053AB60
		private void SetViewer(bool viewerPresent); // 0x0053AB60-0x0053AD64
		private void SetTargetFPS(bool isVR); // 0x0053AD64-0x0053AE24
		private void StopDeviceTracker(); // 0x0053AE24-0x0053AFA8
		private void StartDeviceTracker(bool enablePosePrediction, RotationalDeviceTracker.MODEL_CORRECTION_MODE modelCorrectionMode); // 0x0053AFA8-0x0053B370
		private static void StartDeviceTracker(Tracker deviceTracker); // 0x0053B370-0x0053B41C
		private static void ConfigureRotationalDeviceTracker(RotationalDeviceTracker deviceTracker, bool enablePosePrediction, RotationalDeviceTracker.MODEL_CORRECTION_MODE mode); // 0x0053B41C-0x0053B480
		private static T InitializeDeviceTracker<T>()
			where T : DeviceTracker;
		private void StopCameraAndTrackersIfNotRequired(); // 0x0053B480-0x0053B500
		private void StartCameraAndTrackersIfStopped(); // 0x0053B500-0x0053B684
		private void SetHandheldAR(); // 0x0053A93C-0x0053A980
		private void SetHandheldARDeviceTracker(); // 0x0053A980-0x0053A9CC
		private void SetHandheldVR(); // 0x0053A9CC-0x0053AA18
		private void SetViewerAR(); // 0x0053AA18-0x0053AA5C
		private void SetViewerARDeviceTracker(); // 0x0053AA5C-0x0053AAA8
		private void SetViewerVR(); // 0x0053AAA8-0x0053AAF4
	}

	public abstract class RotationalDeviceTracker : DeviceTracker // TypeDefIndex: 3327
	{
		// Nested types
		public enum MODEL_CORRECTION_MODE // TypeDefIndex: 3328
		{
			NONE = 0,
			HEAD = 1,
			HANDHELD = 2
		}
	
		// Constructors
		protected RotationalDeviceTracker(); // 0x0045223C-0x00452244
	
		// Methods
		public abstract void RecenterPose();
		public abstract void RecenterPose(bool resetToCurrentPose);
		public abstract void SetPosePrediction(bool mode);
		public abstract bool GetPosePrediction();
		public abstract void SetModelCorrectionMode(MODEL_CORRECTION_MODE mode);
		public abstract MODEL_CORRECTION_MODE GetModelCorrectionMode();
		public abstract void SetModelCorrectionModeWithTransform(MODEL_CORRECTION_MODE mode, Vector3 transform);
		public abstract Vector3 GetModelCorrectionTransform();
	}

	internal class CustomViewerParameters : ViewerParameters, ICustomViewerParameters // TypeDefIndex: 3329
	{
		// Fields
		private float mVersion; // 0x18
		private string mName; // 0x20
		private string mManufacturer; // 0x28
		private ViewerButtonType mButtonType; // 0x30
		private float mScreenToLensDistance; // 0x34
		private ViewerTrayAlignment mTrayAlignment; // 0x38
		private bool mMagnet; // 0x3C
	
		// Constructors
		public CustomViewerParameters(float version, string viewerName, string manufacturer); // 0x005FBAA8-0x005FBBBC
	
		// Methods
		~CustomViewerParameters(); // 0x005FBBBC-0x005FBD14
		public void SetButtonType(ViewerButtonType val); // 0x005FBD14-0x005FBE14
		public void SetScreenToLensDistance(float val); // 0x005FBE14-0x005FBF08
		public void SetInterLensDistance(float val); // 0x005FBF08-0x005FBFFC
		public void SetTrayAlignment(ViewerTrayAlignment val); // 0x005FBFFC-0x005FC100
		public void SetLensCentreToTrayDistance(float val); // 0x005FC100-0x005FC1F4
		public void ClearDistortionCoefficients(); // 0x005FC1F4-0x005FC2D8
		public void AddDistortionCoefficient(float val); // 0x005FC2D8-0x005FC3CC
		public void SetFieldOfView(Vector4 val); // 0x005FC3CC-0x005FC59C
		public void SetContainsMagnet(bool val); // 0x005FC59C-0x005FC690
	}

	internal class DeviceTrackingManager // TypeDefIndex: 3330
	{
		// Fields
		private Vector3 mDeviceTrackerPositonOffset; // 0x10
		private Quaternion mDeviceTrackerRotationOffset; // 0x1C
		private Action mBeforeDevicePoseUpdated; // 0x30
		private Action mAfterDevicePoseUpdated; // 0x38
		private Action<TrackableBehaviour.Status> mStatusChanged; // 0x40
		private Action<TrackableBehaviour.Status, TrackableBehaviour.StatusInfo> mStatusOrInfoChanged; // 0x48
		private TrackableBehaviour.Status mCurrentTrackableStatus; // 0x50
		private TrackableBehaviour.StatusInfo mCurrentTrackableStatusInfo; // 0x54
	
		// Constructors
		public DeviceTrackingManager(); // 0x0060AA64-0x0060AB14
	
		// Methods
		public void OnDeviceTrackerStopped(); // 0x0060A1A8-0x0060A1B4
		public void RecenterPose(Transform cameraTransform, Vector3 modelCorrectionTransform); // 0x0060A1B4-0x0060A468
		public void SetReferenceOffset(Vector3 positionalOffset, Quaternion rotationalOffset); // 0x0060A468-0x0060A47C
		public void GetReferenceOffset(out Vector3 positionalOffset, out Quaternion rotationalOffset); // 0x0060A47C-0x0060A658
		public void UpdateStatus(TrackerData.TrackableResultData trackableData, TrackableBehaviour.StatusInfo deviceTrackableStatusInfo); // 0x0060A658-0x0060A740
		public void UpdateCamera(Transform cameraTransform, Vector3 positionalOffset, Quaternion rotationalOffset, TrackerData.TrackableResultData trackableData); // 0x0060A740-0x0060A854
		public void RegisterTrackerStatusChangeCallback(Action<TrackableBehaviour.Status> callback); // 0x0060945C-0x00609520
		public void UnRegisterTrackerStatusChangeCallback(Action<TrackableBehaviour.Status> callback); // 0x0060960C-0x006096D0
		public void RegisterTrackerStatusChangeCallback(Action<TrackableBehaviour.Status, TrackableBehaviour.StatusInfo> callback); // 0x006097BC-0x00609880
		public void UnRegisterTrackerStatusChangeCallback(Action<TrackableBehaviour.Status, TrackableBehaviour.StatusInfo> callback); // 0x0060996C-0x00609A30
		public void RegisterBeforeDevicePoseUpdateCallback(Action callback); // 0x00608D9C-0x00608E60
		public void UnregisterBeforeDevicePoseUpdateCallback(Action callback); // 0x00608F4C-0x00609010
		public void RegisterDevicePoseUpdatedCallback(Action callback); // 0x006090FC-0x006091C0
		public void UnregisterDevicePoseUpdatedCallback(Action callback); // 0x006092AC-0x00609370
		public static TrackerData.PoseData GetIdentityDevicePoseForScreenOrientation(ScreenOrientation screenOrientation); // 0x0060A854-0x0060AA64
	}

	public class FactorySetter : Attribute // TypeDefIndex: 3331
	{
		// Constructors
		public FactorySetter(); // 0x0052B0DC-0x0052B0E4
	}

	internal class EyewearCalibrationProfileManagerImpl : EyewearCalibrationProfileManager // TypeDefIndex: 3332
	{
		// Constructors
		public EyewearCalibrationProfileManagerImpl(); // 0x0052A1C4-0x0052A1CC
	
		// Methods
		public override int getMaxCount(); // 0x005290BC-0x00529194
		public override int getUsedCount(); // 0x00529194-0x0052926C
		public override bool isProfileUsed(int profileID); // 0x0052926C-0x00529358
		public override int getActiveProfile(); // 0x00529358-0x00529430
		public override bool setActiveProfile(int profileID); // 0x00529430-0x0052951C
		public override Matrix4x4 getCameraToEyePose(int profileID, EyewearDevice.EyeID eyeID); // 0x0052951C-0x005297C4
		public override Matrix4x4 getEyeProjection(int profileID, EyewearDevice.EyeID eyeID); // 0x005297C4-0x00529A6C
		public override bool setCameraToEyePose(int profileID, EyewearDevice.EyeID eyeID, Matrix4x4 projectionMatrix); // 0x00529A6C-0x00529C80
		public override bool setEyeProjection(int profileID, EyewearDevice.EyeID eyeID, Matrix4x4 projectionMatrix); // 0x00529C80-0x00529E94
		public override string getProfileName(int profileID); // 0x00529E94-0x00529FA8
		public override bool setProfileName(int profileID, string name); // 0x00529FA8-0x0052A0D8
		public override bool clearProfile(int profileID); // 0x0052A0D8-0x0052A1C4
	}

	public class BackgroundPlaneBehaviour : VuforiaMonoBehaviour // TypeDefIndex: 3333
	{
		// Fields
		private Vector2 mTextureSize; // 0x18
		private Vector2 mImageSize; // 0x20
		private Transform mCameraTransform; // 0x28
		private static float maxDisplacement; // 0x00
		private Mesh mMesh; // 0x30
		private float mStereoDepth; // 0x38
		private bool mProjectionMatrixSetExternally; // 0x3C
		private Vector3 mBackgroundOffset; // 0x40
		private VuforiaARController mVuforiaBehaviour; // 0x50
		private Action mBackgroundPlacedCallback; // 0x58
		private VideoBackgroundConfigValidator mValidator; // 0x60
		private IProjectMatrixProvider mProjectMatrixProvider; // 0x68
		private int mNumFramesToUpdateVideoBg; // 0x70
		private ProjectionMatrixData mLastUsedProjectioMatrix; // 0x74
		private int mNumDivisions; // 0x118
		private HideExcessAreaUtility mHideExcessAreaUtility; // 0x120
	
		// Properties
		public Material Material { get; set; } // 0x005EC54C-0x005EC5B4 0x005EC5B4-0x005EC62C
		public int NumDivisions { get; } // 0x005EC62C-0x005EC634 
		internal HideExcessAreaUtility HideExcessUtility { get; } // 0x005EE104-0x005EE10C 
		internal static Quaternion DefaultRotationTowardsCamera { get; } // 0x005EE10C-0x005EE1C4 
		internal Vector3 LocalBackgroundOffset { get; set; } // 0x005EE1D4-0x005EE1E0 0x005EE1E0-0x005EE1EC
	
		// Nested types
		private struct ProjectionMatrixData // TypeDefIndex: 3334
		{
			// Fields
			public Matrix4x4 ProjectionMatrix; // 0x00
			public Matrix4x4 InverseMatrix; // 0x40
			public float HorizontalFoV; // 0x80
			public float VerticalFoV; // 0x84
			public Vector3 CenterEyeRayFrom; // 0x88
			public Vector3 CenterEyeRayTo; // 0x94
			public float MaxDepth; // 0xA0
		}
	
		// Constructors
		public BackgroundPlaneBehaviour(); // 0x005EF20C-0x005EF384
		static BackgroundPlaneBehaviour(); // 0x005EF384-0x005EF3DC
	
		// Methods
		public void SetStereoDepth(float depth); // 0x005EC634-0x005EC738
		private void Awake(); // 0x005ED434-0x005ED4D0
		internal void InitializeFromConfig(VuforiaConfiguration.VideoBackgroundConfiguration videoBackgroundConfiguration); // 0x005ED4D0-0x005ED50C
		private void Start(); // 0x005ED50C-0x005ED654
		private void OnDestroy(); // 0x005ED654-0x005ED74C
		private void OnVuforiaStarted(); // 0x005ED74C-0x005ED78C
		private void OnTrackablesUpdated(); // 0x005ED78C-0x005ED820
		private void UpdateVideoBackground(); // 0x005ED820-0x005ED984
		internal void SetBackgroundPlacedCallback(Action backgroundPlacedCallback); // 0x005EE1C4-0x005EE1CC
		internal void SetProjectionMatrixProvider(IProjectMatrixProvider provider); // 0x005EE1CC-0x005EE1D4
		private void CreateAndSetVideoMesh(); // 0x005ED984-0x005EE104
		private Quaternion CalculateAdjustmentTransformation(ScreenOrientation screenOrientation); // 0x005EE1EC-0x005EE4A0
		private void PositionVideoMesh(); // 0x005EC978-0x005ED434
		private Vector2 ScaleFromFoVRad(float horizFoV, float vertFoV); // 0x005EEB34-0x005EEBE4
		private bool UpdateChangedProjectionMatrix(Matrix4x4 newMatrix); // 0x005EC738-0x005EC978
		public void OnVideoBackgroundConfigChanged(Vector2 imageSize, Vector2 textureSize); // 0x005EF1F8-0x005EF20C
	}

	internal class EyewearUserCalibratorImpl : EyewearUserCalibrator // TypeDefIndex: 3335
	{
		// Nested types
		private struct EyewearCalibrationReadingData // TypeDefIndex: 3336
		{
			// Fields
			public float[] pose; // 0x00
			public float scale; // 0x08
			public float centerX; // 0x0C
			public float centerY; // 0x10
			public int type; // 0x14
		}
	
		// Constructors
		public EyewearUserCalibratorImpl(); // 0x0052AF18-0x0052B0DC
	
		// Methods
		public override bool init(int surfaceWidth, int surfaceHeight, int targetWidth, int targetHeight); // 0x0052A3F8-0x0052A50C
		public override float getMinScaleHint(); // 0x0052A50C-0x0052A5E4
		public override float getMaxScaleHint(); // 0x0052A5E4-0x0052A6BC
		public override bool isStereoStretched(); // 0x0052A6BC-0x0052A7A0
		public override bool getProjectionMatrix(EyewearDevice.EyewearCalibrationReading[] readings, out Matrix4x4 cameraToEyeMatrix, out Matrix4x4 projectionMatrix); // 0x0052A7A0-0x0052AF18
	}

	internal class RotationalPlayModeDeviceTrackerImpl : RotationalDeviceTracker, IPlayModeDeviceTracker // TypeDefIndex: 3337
	{
		// Fields
		private readonly Vector3 mVectorZero; // 0x14
		private Vector3 mModelCorrectionTransform; // 0x20
		private MODEL_CORRECTION_MODE mModelCorrection; // 0x2C
		[CompilerGenerated] // 0x003DD5C8-0x003DD5D8
		private Vector3 <Rotation>k__BackingField; // 0x30
	
		// Properties
		public Vector3 Position { get; set; } // 0x00454544-0x00454550 0x00454550-0x00454554
		public Vector3 Rotation { [CompilerGenerated] /* 0x003DE6E0-0x003DE6F0 */ get; [CompilerGenerated] /* 0x003DE6F0-0x003DE700 */ set; } // 0x0045427C-0x00454288 0x00454288-0x00454294
	
		// Constructors
		public RotationalPlayModeDeviceTrackerImpl(); // 0x0045463C-0x004546B4
	
		// Methods
		public override bool Start(); // 0x00452F70-0x00452FA8
		public override void Stop(); // 0x00454114-0x00454208
		public override void RecenterPose(); // 0x00454208-0x00454218
		public override void RecenterPose(bool resetToCurrentPose); // 0x00454218-0x0045427C
		public override void SetPosePrediction(bool mode); // 0x00454294-0x00454298
		public override bool GetPosePrediction(); // 0x00454298-0x004542A0
		public override void SetModelCorrectionMode(MODEL_CORRECTION_MODE mode); // 0x004542A0-0x0045437C
		public override MODEL_CORRECTION_MODE GetModelCorrectionMode(); // 0x0045437C-0x00454384
		public override void SetModelCorrectionModeWithTransform(MODEL_CORRECTION_MODE mode, Vector3 transform); // 0x00454384-0x00454394
		public override Vector3 GetModelCorrectionTransform(); // 0x00454394-0x004543D0
		public TrackerData.TrackableResultData GetTrackable(); // 0x004543D0-0x0045453C
		public TrackableBehaviour.StatusInfo GetStatusInfo(); // 0x0045453C-0x00454544
		internal override bool GetGlobalPoseOffset(out Vector3 positionalOffset, out Quaternion rotationalOffset); // 0x00454554-0x0045463C
		private void RecenterPoseToCurrentAnchorPointPosition(); // 0x00452FA8-0x00454114
	}

	internal class RotationalDeviceTrackerImpl : RotationalDeviceTracker // TypeDefIndex: 3338
	{
		// Constructors
		public RotationalDeviceTrackerImpl(); // 0x00452F68-0x00452F70
	
		// Methods
		public override bool Start(); // 0x00452244-0x00452428
		public override void Stop(); // 0x0045263C-0x00452854
		public override void RecenterPose(); // 0x00452854-0x0045285C
		public override void RecenterPose(bool resetToCurrentPose); // 0x0045285C-0x00452864
		public override void SetPosePrediction(bool mode); // 0x00452864-0x00452944
		public override bool GetPosePrediction(); // 0x00452944-0x00452A28
		public override void SetModelCorrectionMode(MODEL_CORRECTION_MODE mode); // 0x00452A28-0x00452B08
		public override MODEL_CORRECTION_MODE GetModelCorrectionMode(); // 0x00452B08-0x00452BE0
		public override void SetModelCorrectionModeWithTransform(MODEL_CORRECTION_MODE mode, Vector3 transform); // 0x00452BE0-0x00452DA8
		public override Vector3 GetModelCorrectionTransform(); // 0x00452DA8-0x00452F68
		private void RecenterPoseToCurrentAnchorPointPosition(bool resetToCurrentPose); // 0x00452428-0x0045263C
	}

	internal interface IExcessAreaClipping // TypeDefIndex: 3339
	{
		// Methods
		void SetPlanesRenderingActive(bool activeflag);
		bool IsPlanesRenderingActive();
		void Start(GameObject gameObject);
		void OnDestroy();
		void Update(Vector2 halfScale);
	}

	internal static class IOSCamRecoveringHelper // TypeDefIndex: 3340
	{
		// Fields
		private const int CHECKED_FAILED_FRAME_MAX = 15; // Metadata: 0x0021BEA0
		private const int WAITED_FRAME_RECOVER_MAX = 20; // Metadata: 0x0021BEA4
		private const int RECOVER_ATTEMPT_MAX = 10; // Metadata: 0x0021BEA8
		private static bool sHasJustResumed; // 0x00
		private static bool sCheckFailedFrameAfterResume; // 0x01
		private static int sCheckedFailedFrameCounter; // 0x04
		private static bool sWaitToRecoverCameraRestart; // 0x08
		private static int sWaitedFrameRecoverCounter; // 0x0C
		private static int sRecoveryAttemptCounter; // 0x10
	
		// Constructors
		static IOSCamRecoveringHelper(); // 0x00531DE0-0x00531E68
	
		// Methods
		public static void SetHasJustResumed(); // 0x00531948-0x005319C4
		public static bool TryToRecover(); // 0x005319C4-0x00531CC8
		public static void SetSuccessfullyRecovered(); // 0x00531CC8-0x00531DE0
	}

	internal class MeshUtils // TypeDefIndex: 3341
	{
		// Constructors
		public MeshUtils(); // 0x00539F88-0x00539F90
	
		// Methods
		public static Mesh UpdateMesh(TrackerData.MeshData meshData, Mesh oldMesh, bool setNormalsUpwards, bool swapYZ); // 0x005393BC-0x0053970C
		private static void CopyPositions(IntPtr positionsArray, int numVertexValues, Mesh mesh, bool swapYZ); // 0x0053970C-0x00539944
		private static void CopyNormals(IntPtr normalsArray, int numVertexValues, Mesh mesh, bool swapYZ); // 0x00539B48-0x00539D80
		private static void CopyTexCoords(IntPtr texCoordsArray, int numTexCoordValues, Mesh mesh); // 0x00539D80-0x00539F88
		private static void CopyTriangles(IntPtr triangleIdxArray, int numTriangleIndices, Mesh mesh); // 0x00539944-0x00539B48
	}

	internal class NullHideExcessAreaClipping : IExcessAreaClipping // TypeDefIndex: 3342
	{
		// Constructors
		public NullHideExcessAreaClipping(); // 0x00530AD0-0x00530AD8
	
		// Methods
		public void SetPlanesRenderingActive(bool activeflag); // 0x00541C38-0x00541C3C
		public bool IsPlanesRenderingActive(); // 0x00541C3C-0x00541C44
		public void Start(GameObject gameObject); // 0x00541C44-0x00541C48
		public void OnDestroy(); // 0x00541C48-0x00541C4C
		public void Update(Vector2 halfScale); // 0x00541C4C-0x00541C50
	}

	internal interface ICameraConfiguration // TypeDefIndex: 3343
	{
		// Properties
		Rect VideoBackgroundViewportRect { get; }
	
		// Methods
		void Init();
		void InitCameraDevice(CameraDevice.CameraDeviceMode cameraDeviceMode, Action onVideoBackgroundConfigChanged);
		void CheckForSurfaceChanges();
		void OnAfterUpdateState(Transform trackingReference);
		bool IsStereo();
		void ResetBackgroundPlane(bool disable);
		void OnVideoBackGroundEnabledChanged();
		void SetDeviceModeChanged();
		void SetProjectionParamsChanged();
		Matrix4x4 GetVideoBackgroundProjectionMatrix(float near, float far, ScreenOrientation screenOrientation);
		void FinalizeRenderingSettings();
		void Destroy();
	}

	internal class DedicatedEyewearCameraConfiguration : BaseCameraConfiguration, ICameraConfiguration // TypeDefIndex: 3344
	{
		// Fields
		private const string CLASS_NAME = "EYEWEAR_CAMERA_CONFIGURAION"; // Metadata: 0x0021BEAC
		private const float TOLERANCE = 0.01f; // Metadata: 0x0021BECB
		private const float PLAY_MODE_DUMMY_FOV = 50f; // Metadata: 0x0021BECF
		private readonly Camera mCamera; // 0x50
		private int mScreenWidth; // 0x58
		private int mScreenHeight; // 0x5C
		private bool mNeedToCheckStereo; // 0x60
		private float mLastAppliedNearClipPlane; // 0x64
		private float mLastAppliedFarClipPlane; // 0x68
		private Matrix4x4 mLeftProjectionMatrix; // 0x6C
		private int mPlayModeEyeTextureWidth; // 0xAC
		private int mPlayModeEyeTextureHeight; // 0xB0
		private EyewearDevice mEyewearDevice; // 0xB8
		private readonly StereoProjMatrixStore mMatrixStore; // 0xC0
		private readonly VRDeviceController mVrDeviceController; // 0xC8
	
		// Properties
		public override Matrix4x4 MainProjectionMatrix { get; } // 0x00604944-0x00604968 
	
		// Nested types
		private struct EyeData // TypeDefIndex: 3345
		{
			// Fields
			public Vector3 OffsetPosition; // 0x00
			public Quaternion OffsetRotation; // 0x0C
			public Matrix4x4 ProjectionMatrix; // 0x1C
		}
	
		// Constructors
		public DedicatedEyewearCameraConfiguration(Camera camera, VRDeviceController vrDeviceController); // 0x00602AEC-0x00602CB0
	
		// Methods
		public override void Init(); // 0x00602CB0-0x00603218
		protected override void ConfigureVideoBackground(); // 0x00603318-0x006035B8
		public void CheckForSurfaceChanges(); // 0x00603690-0x00603844
		public void OnAfterUpdateState(Transform trackingReference); // 0x00603844-0x00603848
		public bool IsStereo(); // 0x00603848-0x00603850
		protected override bool ProjectionParamsChanged(); // 0x00603850-0x00603960
		protected override void UpdateProjection(); // 0x00603960-0x0060421C
		private static EyeData GetProjectionAndOffset(Matrix4x4 projMatrixGL, Matrix4x4 eyeAdjustmentMatrixGL); // 0x00604774-0x00604940
		public void OnVideoBackGroundEnabledChanged(); // 0x00604940-0x00604944
		public Matrix4x4 GetVideoBackgroundProjectionMatrix(float near, float far, ScreenOrientation screenOrientation); // 0x00604968-0x00604A8C
		public override void Destroy(); // 0x00604D4C-0x00604ED4
		private void ResetStereoProjectionMatrices(); // 0x00603218-0x00603318
	}

	internal class NullCameraConfiguration : ICameraConfiguration // TypeDefIndex: 3346
	{
		// Fields
		private ScreenOrientation mProjectionOrientation; // 0x10
	
		// Properties
		public Rect VideoBackgroundViewportRect { get; } // 0x00541B98-0x00541BAC 
		public int EyewearUserCalibrationProfileId { get; set; } // 0x00541BAC-0x00541BB4 0x00541BB4-0x00541BB8
	
		// Constructors
		public NullCameraConfiguration(); // 0x00541C30-0x00541C38
	
		// Methods
		public void Init(); // 0x00541B00-0x00541B04
		public void InitCameraDevice(CameraDevice.CameraDeviceMode cameraDeviceMode, Action onVideoBackgroundConfigChanged); // 0x00541B04-0x00541B08
		public void UpdatePlayModeParameters(WebCamARController webCamBehaviour, float cameraOffset); // 0x00541B08-0x00541B0C
		public void CheckForSurfaceChanges(); // 0x00541B0C-0x00541B84
		public void OnAfterUpdateState(Transform trackingReference); // 0x00541B84-0x00541B88
		public bool IsStereo(); // 0x00541B88-0x00541B90
		public void ResetBackgroundPlane(bool disable); // 0x00541B90-0x00541B94
		public void OnVideoBackGroundEnabledChanged(); // 0x00541B94-0x00541B98
		public void SetDeviceModeChanged(); // 0x00541BB8-0x00541BBC
		public void SetProjectionParamsChanged(); // 0x00541BBC-0x00541BC0
		public Matrix4x4 GetVideoBackgroundProjectionMatrix(float near, float far, ScreenOrientation screenOrientation); // 0x00541BC0-0x00541C28
		public void FinalizeRenderingSettings(); // 0x00541C28-0x00541C2C
		public void Destroy(); // 0x00541C2C-0x00541C30
	}

	internal class MonoCameraConfiguration : BaseCameraConfiguration, ICameraConfiguration // TypeDefIndex: 3347
	{
		// Fields
		private const float TOLERANCE = 0.01f; // Metadata: 0x0021BED3
		private readonly Camera mPrimaryCamera; // 0x50
		private int mCameraViewPortWidth; // 0x58
		private int mCameraViewPortHeight; // 0x5C
		private float mLastAppliedNearClipPlane; // 0x60
		private float mLastAppliedFarClipPlane; // 0x64
		private float mLastAppliedFoV; // 0x68
		private readonly VRDeviceController mVrDeviceController; // 0x70
	
		// Properties
		public override Matrix4x4 MainProjectionMatrix { get; } // 0x0053F7C8-0x0053F800 
	
		// Constructors
		public MonoCameraConfiguration(Camera leftCamera, VRDeviceController vrDeviceController); // 0x0053F100-0x0053F1CC
	
		// Methods
		public override void Init(); // 0x0053F1CC-0x0053F2D4
		protected override void ConfigureVideoBackground(); // 0x0053F2D4-0x0053F5EC
		public void CheckForSurfaceChanges(); // 0x0053F5EC-0x0053F70C
		public void OnAfterUpdateState(Transform trackingReference); // 0x0053F70C-0x0053F710
		public bool IsStereo(); // 0x0053F710-0x0053F718
		public void OnVideoBackGroundEnabledChanged(); // 0x0053F718-0x0053F71C
		public Matrix4x4 GetVideoBackgroundProjectionMatrix(float near, float far, ScreenOrientation screenOrientation); // 0x0053F71C-0x0053F7C8
		protected override void UpdateProjection(); // 0x0053F800-0x0053FAA4
		protected override bool ProjectionParamsChanged(); // 0x0053FAA4-0x0053FC08
	}

	internal static class UnityCameraExtensions // TypeDefIndex: 3348
	{
		// Extension methods
		internal static int GetPixelHeightInt(this Camera camera); // 0x004650F4-0x00465148
		internal static int GetPixelWidthInt(this Camera camera); // 0x00465148-0x0046519C
	}

	internal enum View // TypeDefIndex: 3349
	{
		VIEW_SINGULAR = 0,
		VIEW_LEFTEYE = 1,
		VIEW_RIGHTEYE = 2,
		VIEW_POSTPROCESS = 3,
		VIEW_COUNT = 4
	}

	internal class ViewerParameters : IViewerParameters // TypeDefIndex: 3350
	{
		// Fields
		protected IntPtr mNativeVP; // 0x10
	
		// Properties
		internal IntPtr NativePtr { get; } // 0x0046D328-0x0046D330 
	
		// Constructors
		internal ViewerParameters(IntPtr nativePtr); // 0x0046D030-0x0046D0D8
	
		// Methods
		~ViewerParameters(); // 0x0046D0D8-0x0046D244
		public float GetVersion(); // 0x0046D244-0x0046D328
		public string GetName(); // 0x0046D330-0x0046D448
		public string GetManufacturer(); // 0x0046D448-0x0046D560
		public ViewerButtonType GetButtonType(); // 0x0046D560-0x0046D688
		public ViewerTrayAlignment GetTrayAlignment(); // 0x0046D688-0x0046D7B0
		public float GetScreenToLensDistance(); // 0x0046D7B0-0x0046D894
		public float GetInterLensDistance(); // 0x0046D894-0x0046D978
		public float GetLensCentreToTrayDistance(); // 0x0046D978-0x0046DA5C
		public int GetNumDistortionCoefficients(); // 0x0046DA5C-0x0046DB40
		public float GetDistortionCoefficient(int idx); // 0x0046DB40-0x0046DC34
		public Vector4 GetFieldOfView(); // 0x0046DC34-0x0046DEE4
		public bool ContainsMagnet(); // 0x0046DEE4-0x0046DFD4
	}

	internal class ViewerParametersList : IViewerParametersList // TypeDefIndex: 3351
	{
		// Fields
		private IntPtr mNativeVPL; // 0x10
		private static ViewerParametersList mListForAuthoringTools; // 0x00
	
		// Properties
		internal static ViewerParametersList ListForAuthoringTools { get; } // 0x0046DFD4-0x0046E1B4 
	
		// Constructors
		internal ViewerParametersList(IntPtr intPtr); // 0x0046E1B4-0x0046E1E0
	
		// Methods
		public void SetSDKFilter(string filter); // 0x0046E1E0-0x0046E2D4
		public int Size(); // 0x0046E2D4-0x0046E3B8
		public IViewerParameters Get(int idx); // 0x0046E3B8-0x0046E4E8
		public IViewerParameters Get(string name, string manufacturer); // 0x0046E4E8-0x0046E620
		public IEnumerable<IViewerParameters> GetAllViewers(); // 0x0046E620-0x0046E8EC
	}

	public interface IViewerParametersList // TypeDefIndex: 3352
	{
		// Methods
		int Size();
		IViewerParameters Get(int idx);
		IViewerParameters Get(string name, string manufacturer);
		void SetSDKFilter(string filter);
		IEnumerable<IViewerParameters> GetAllViewers();
	}

	public class ObjectTargetBehaviour : DataSetTrackableBehaviour // TypeDefIndex: 3353
	{
		// Fields
		private ObjectTarget mObjectTarget; // 0x58
		[HideInInspector] // 0x003DD5D8-0x003DD610
		[SerializeField] // 0x003DD5D8-0x003DD610
		private float mAspectRatioXY; // 0x60
		[HideInInspector] // 0x003DD610-0x003DD648
		[SerializeField] // 0x003DD610-0x003DD648
		private float mAspectRatioXZ; // 0x64
		[HideInInspector] // 0x003DD648-0x003DD680
		[SerializeField] // 0x003DD648-0x003DD680
		private bool mShowBoundingBox; // 0x68
		[HideInInspector] // 0x003DD680-0x003DD6B8
		[SerializeField] // 0x003DD680-0x003DD6B8
		private Vector3 mBBoxMin; // 0x6C
		[HideInInspector] // 0x003DD6B8-0x003DD6F0
		[SerializeField] // 0x003DD6B8-0x003DD6F0
		private Vector3 mBBoxMax; // 0x78
		[HideInInspector] // 0x003DD6F0-0x003DD728
		[SerializeField] // 0x003DD6F0-0x003DD728
		private Texture2D mPreviewImage; // 0x88
		[HideInInspector] // 0x003DD728-0x003DD760
		[SerializeField] // 0x003DD728-0x003DD760
		private float mLength; // 0x90
		[HideInInspector] // 0x003DD760-0x003DD798
		[SerializeField] // 0x003DD760-0x003DD798
		private float mWidth; // 0x94
		[HideInInspector] // 0x003DD798-0x003DD7D0
		[SerializeField] // 0x003DD798-0x003DD7D0
		private float mHeight; // 0x98
		private float mLastTransformScale; // 0x9C
		private Vector3 mLastSize; // 0xA0
	
		// Properties
		public ObjectTarget ObjectTarget { get; } // 0x00543080-0x00543088 
	
		// Constructors
		public ObjectTargetBehaviour(); // 0x00543008-0x00543080
	
		// Methods
		private void OnDrawGizmos(); // 0x00543088-0x0054359C
		protected override bool CorrectScaleImpl(); // 0x0054359C-0x005435D8
		protected override void InternalUnregisterTrackable(); // 0x005437F0-0x005437FC
		public void SetBoundingBox(Vector3 minBBox, Vector3 maxBBox); // 0x005437FC-0x0054380C
		public Vector3 GetSize(); // 0x0054380C-0x0054395C
		public void SetLength(float length); // 0x0054395C-0x005439D0
		public void SetWidth(float width); // 0x005439D0-0x00543A48
		public void SetHeight(float height); // 0x00543A48-0x00543AC0
		internal override bool InitializeTarget(Trackable trackable, bool applyTargetScaleToBehaviour); // 0x00543AC0-0x00543D58
		private void OnValidate(); // 0x005435D8-0x005437F0
	}

	public class CameraDevice // TypeDefIndex: 3354
	{
		// Fields
		private static CameraDevice mInstance; // 0x00
		private Dictionary<PIXEL_FORMAT, Vuforia.Image> mCameraImages; // 0x10
		private List<PIXEL_FORMAT> mForcedCameraFormats; // 0x18
		private static IWebCam mWebCam; // 0x08
		private bool mCameraReady; // 0x20
		private bool mIsDirty; // 0x21
		private CameraDeviceMode mCameraDeviceMode; // 0x24
		private VideoModeData mVideoModeData; // 0x28
		private bool mVideoModeDataNeedsUpdate; // 0x38
		private bool mHasCameraDeviceModeBeenSet; // 0x39
		private bool mCameraActive; // 0x3A
		private bool mIsCameraMocked; // 0x3B
	
		// Properties
		public static CameraDevice Instance { get; } // 0x005EE71C-0x005EE8A0 
		internal IWebCam WebCam { get; } // 0x005F691C-0x005F6984 
		internal bool CameraReady { get; } // 0x005EF884-0x005EF9DC 
	
		// Nested types
		public enum CameraDeviceMode // TypeDefIndex: 3355
		{
			MODE_OPTIMIZE_QUALITY = -3,
			MODE_OPTIMIZE_SPEED = -2,
			MODE_DEFAULT = -1
		}
	
		public enum FocusMode // TypeDefIndex: 3356
		{
			FOCUS_MODE_NORMAL = 0,
			FOCUS_MODE_TRIGGERAUTO = 1,
			FOCUS_MODE_CONTINUOUSAUTO = 2,
			FOCUS_MODE_INFINITY = 3,
			FOCUS_MODE_MACRO = 4
		}
	
		public struct VideoModeData // TypeDefIndex: 3357
		{
			// Fields
			public int width; // 0x00
			public int height; // 0x04
			public float frameRate; // 0x08
			public int format; // 0x0C
		}
	
		public struct CameraField // TypeDefIndex: 3358
		{
			// Fields
			public DataType Type; // 0x00
			public string Key; // 0x08
	
			// Nested types
			public enum DataType // TypeDefIndex: 3359
			{
				TypeString = 0,
				TypeInt64 = 1,
				TypeFloat = 2,
				TypeBool = 3,
				TypeInt64Range = 4,
				TypeUnknown = 5
			}
		}
	
		public struct Int64Range // TypeDefIndex: 3360
		{
			// Fields
			public long fromInt; // 0x00
			public long toInt; // 0x08
		}
	
		private struct CameraFieldData // TypeDefIndex: 3361
		{
			// Fields
			public string KeyValue; // 0x00
			public int DataType; // 0x08
			public int Unused; // 0x0C
		}
	
		// Constructors
		private CameraDevice(); // 0x005F55B4-0x005F5660
		static CameraDevice(); // 0x005F85D8-0x005F8704
	
		// Methods
		public bool Init(); // 0x005F5660-0x005F5714
		public bool Deinit(); // 0x005F5BD0-0x005F5BFC
		public bool Start(); // 0x005F5EB4-0x005F5FB0
		public bool Stop(); // 0x005F6368-0x005F63F4
		public bool IsActive(); // 0x005F6674-0x005F667C
		public VideoModeData GetVideoMode(); // 0x005F667C-0x005F66BC
		public VideoModeData GetVideoMode(CameraDeviceMode mode); // 0x005F66BC-0x005F691C
		public bool SelectVideoMode(CameraDeviceMode mode); // 0x005F6984-0x005F6A88
		public bool GetSelectedVideoMode(out CameraDeviceMode mode); // 0x005F6A88-0x005F6A98
		public bool SetFlashTorchMode(bool on); // 0x005F6A98-0x005F6C24
		public bool SetFocusMode(FocusMode mode); // 0x005F6C24-0x005F6DA4
		public bool SetFrameFormat(PIXEL_FORMAT format, bool enabled); // 0x005F6DA4-0x005F706C
		internal bool EnableNativeFrameFormat(PIXEL_FORMAT format, bool enabled); // 0x005F706C-0x005F71A8
		public Vuforia.Image GetCameraImage(PIXEL_FORMAT format); // 0x005F71A8-0x005F72B0
		public Vector2 GetCameraFieldOfViewRads(); // 0x005EE8A0-0x005EEB34
		public IEnumerable<CameraField> GetCameraFields(); // 0x005F72B0-0x005F75D8
		public bool SetField(string key, string value); // 0x005F75D8-0x005F76D4
		public bool SetField(string key, long value); // 0x005F76D4-0x005F77D0
		public bool SetField(string key, float value); // 0x005F77D0-0x005F78CC
		public bool SetField(string key, bool value); // 0x005F78CC-0x005F79C8
		public bool SetField(string key, Int64Range value); // 0x005F79C8-0x005F7ACC
		public bool GetField(string key, out string value); // 0x005F7ACC-0x005F7C14
		public bool GetField(string key, out long value); // 0x005F7C14-0x005F7DFC
		public bool GetField(string key, out float value); // 0x005F7DFC-0x005F8030
		public bool GetField(string key, out bool value); // 0x005F8030-0x005F821C
		public bool GetField(string key, out Int64Range value); // 0x005F821C-0x005F8450
		internal void SetMockedWebcam(IWebCam webCam); // 0x005F8450-0x005F84D0
		internal Dictionary<PIXEL_FORMAT, Vuforia.Image> GetAllImages(); // 0x005F84D0-0x005F84D8
		internal bool IsDirty(); // 0x005F84D8-0x005F85D8
		internal void ResetDirtyFlag(); // 0x005EF9E4-0x005EF9EC
		private void ForceFrameFormat(PIXEL_FORMAT format, bool enabled); // 0x005F6230-0x005F6368
		private int InitCameraDevice(); // 0x005F5714-0x005F5BD0
		private int DeinitCameraDevice(); // 0x005F5BFC-0x005F5EB4
		private int StartCameraDevice(); // 0x005F5FB0-0x005F6230
		private int StopCameraDevice(); // 0x005F63F4-0x005F6674
	}

	public class CloudRecoBehaviour : ObjectRecoBehaviour // TypeDefIndex: 3362
	{
		// Fields
		public string AccessKey; // 0x40
		public string SecretKey; // 0x48
	
		// Properties
		public bool CloudRecoEnabled { get; set; } // 0x005F8704-0x005F870C 0x005F870C-0x005F8718
		public bool CloudRecoInitialized { get; } // 0x005F8718-0x005F8720 
	
		// Constructors
		public CloudRecoBehaviour(); // 0x005F8AC0-0x005F8B18
	
		// Methods
		protected override void Initialize(); // 0x005F8720-0x005F88EC
		protected override void Deinitialize(); // 0x005F88EC-0x005F898C
		protected override bool IsRecoAvailable(); // 0x005F898C-0x005F8A64
		private void OnValidate(); // 0x005F8A64-0x005F8AC0
	}

	public class HideExcessAreaUtility // TypeDefIndex: 3363
	{
		// Fields
		private IExcessAreaClipping mClippingImpl; // 0x10
		private CLIPPING_MODE mClippingMode; // 0x18
		private VideoBackgroundManager mVideoBgMgr; // 0x20
		private bool mSceneScaledDown; // 0x28
		private bool mStarted; // 0x29
		private bool mEnabled; // 0x2A
		private GameObject mParentGameObject; // 0x30
	
		// Nested types
		public enum CLIPPING_MODE // TypeDefIndex: 3364
		{
			CLIP = 0,
			NONE = 1
		}
	
		// Constructors
		public HideExcessAreaUtility(); // 0x00531304-0x00531378
	
		// Methods
		private void CheckForChangedClippingMode(); // 0x005308F8-0x00530A48
		public void SetEnabled(bool enabled); // 0x00530AD8-0x00530C44
		internal void Start(); // 0x00530C44-0x00530CB4
		internal void OnDestroy(); // 0x00530CB4-0x00530D6C
		internal void UpdateClipping(Vector2 halfScale); // 0x00530D6C-0x00530F04
		internal void OnVuforiaStarted(GameObject parent); // 0x00530F04-0x00531068
		internal void SetPlanesRenderingActive(bool activeflag); // 0x00531188-0x0053124C
		internal bool IsPlanesRenderingActive(); // 0x0053124C-0x00531304
		internal void OnConfigurationChanged(); // 0x00531068-0x00531188
	}

	internal class DataSetObjectTargetImpl : ObjectTargetImpl // TypeDefIndex: 3365
	{
		// Fields
		protected readonly DataSet mDataSet; // 0x28
	
		// Properties
		internal DataSet DataSet { get; } // 0x005FCEA4-0x005FCEAC 
	
		// Constructors
		public DataSetObjectTargetImpl(string name, int id, DataSet dataSet); // 0x00601CA4-0x00601D3C
		public DataSetObjectTargetImpl(string name, int id, DataSet dataSet, ITargetSize targetSize); // 0x005FD36C-0x005FD39C
	}

	internal static class UnityPlayer // TypeDefIndex: 3366
	{
		// Fields
		private static IUnityPlayer sPlayer; // 0x00
	
		// Properties
		public static IUnityPlayer Instance { get; } // 0x004657DC-0x004658AC 
	
		// Constructors
		static UnityPlayer(); // 0x00465918-0x0046591C
	
		// Methods
		public static void SetImplementation(IUnityPlayer implementation); // 0x004658AC-0x00465918
	}

	public class NullUnityPlayer : IUnityPlayer // TypeDefIndex: 3367
	{
		// Constructors
		public NullUnityPlayer(); // 0x00541C84-0x00541C8C
	
		// Methods
		public void LoadNativeLibraries(); // 0x00541C5C-0x00541C60
		public void InitializePlatform(); // 0x00541C60-0x00541C64
		public VuforiaUnity.InitError InitializeVuforia(string licenseKey); // 0x00541C64-0x00541C6C
		public void ResetPlatformCoordinateSystem(); // 0x00541C6C-0x00541C70
		public void Update(); // 0x00541C70-0x00541C74
		public void Dispose(); // 0x00541C74-0x00541C78
		public void OnPause(); // 0x00541C78-0x00541C7C
		public void OnResume(); // 0x00541C7C-0x00541C80
		public void OnDestroy(); // 0x00541C80-0x00541C84
	}

	public class Device // TypeDefIndex: 3368
	{
		// Fields
		private static Device mInstance; // 0x00
	
		// Properties
		public static Device Instance { get; } // 0x005EE4A0-0x005EE71C 
	
		// Nested types
		public enum Mode // TypeDefIndex: 3369
		{
			MODE_AR = 0,
			MODE_VR = 1
		}
	
		// Constructors
		public Device(); // 0x00605D08-0x00605D10
		static Device(); // 0x00607AA8-0x00607AAC
	
		// Methods
		public Mode GetMode(); // 0x00605D10-0x00605DE8
		public bool IsViewerActive(); // 0x00605DE8-0x00605ECC
		public IViewerParametersList GetViewerList(); // 0x00605ECC-0x00605FE4
		public bool SelectViewer(IViewerParameters vp); // 0x00605FE4-0x006063E4
		public IViewerParameters GetSelectedViewer(); // 0x006063E4-0x006064FC
		public ICustomViewerParameters CreateCustomViewerParameters(float version, string name, string manufacturer); // 0x006064FC-0x0060657C
		internal static void SetPlayModeEyewearDevice(); // 0x0060657C-0x006066B0
		internal static void UnsetDevice(); // 0x006066B0-0x006067B0
		internal void DeleteRenderingPrimitives(); // 0x006035B8-0x00603690
		internal void SetViewerActive(bool isActive); // 0x006067B0-0x00606890
		internal bool SetMode(Mode m); // 0x00606890-0x0060697C
		internal Mesh GetDistortionMesh(View viewId, Mesh oldMesh); // 0x0060697C-0x00606B6C
		internal void GetTextureSize(View viewId, out int textureWidth, out int textureHeight); // 0x00606B6C-0x00606DB0
		internal Matrix4x4 GetProjectionMatrix(View viewId, float near, float far, ScreenOrientation screenOrientation); // 0x0060421C-0x006044DC
		internal Matrix4x4 GetVideoBackgroundProjectionMatrix(View viewId, float near, float far, ScreenOrientation screenOrientation); // 0x00604A8C-0x00604D4C
		internal Rect GetDistortionTextureViewport(View viewId); // 0x00606DB0-0x00607058
		internal Rect GetViewport(View viewId); // 0x00607058-0x00607300
		internal Rect GetNormalizedViewport(View viewId); // 0x00607300-0x006075AC
		internal Matrix4x4 GetEyeDisplayAdjustmentMatrix(View viewId); // 0x006044DC-0x00604774
		internal Vector4 GetEffectiveFovRads(View viewId); // 0x006075AC-0x00607858
		internal Vector2 GetViewportCentreToEyeAxis(View viewId); // 0x00607858-0x00607AA8
	}

	public enum ViewerButtonType // TypeDefIndex: 3370
	{
		BUTTON_TYPE_NONE = 0,
		BUTTON_TYPE_MAGNET = 1,
		BUTTON_TYPE_FINGER_TOUCH = 2,
		BUTTON_TYPE_BUTTON_TOUCH = 3
	}

	public enum ViewerTrayAlignment // TypeDefIndex: 3371
	{
		TRAY_ALIGN_BOTTOM = 0,
		TRAY_ALIGN_CENTRE = 1,
		TRAY_ALIGN_TOP = 2
	}

	public interface IViewerParameters // TypeDefIndex: 3372
	{
		// Methods
		float GetVersion();
		string GetName();
		string GetManufacturer();
		ViewerButtonType GetButtonType();
		float GetScreenToLensDistance();
		float GetInterLensDistance();
		ViewerTrayAlignment GetTrayAlignment();
		float GetLensCentreToTrayDistance();
		int GetNumDistortionCoefficients();
		float GetDistortionCoefficient(int idx);
		Vector4 GetFieldOfView();
		bool ContainsMagnet();
	}

	public class Image // TypeDefIndex: 3373
	{
		// Fields
		private byte[] mData; // 0x10
		private ImageDescription mDescription; // 0x18
	
		// Properties
		public ImageDescription Description { get; } // 0x0053241C-0x00532424 
		public int Width { get; } // 0x0052C434-0x0052C460 
		public int Height { get; } // 0x0052C460-0x0052C48C 
		public int Stride { get; } // 0x00532434-0x00532460 
		public int BufferWidth { get; } // 0x00532468-0x00532494 
		public int BufferHeight { get; } // 0x0053249C-0x005324C8 
		public PIXEL_FORMAT PixelFormat { get; } // 0x0052C48C-0x0052C4B8 
		public byte[] Pixels { get; } // 0x005324D8-0x005324E0 
	
		// Constructors
		public Image(ImageDescription description); // 0x00532020-0x005320A0
		public Image(ImageDescription description, byte[] data); // 0x00532198-0x005321D0
		public Image(PIXEL_FORMAT format); // 0x005321D0-0x00532268
		public Image(); // 0x005322C8-0x00532344
	
		// Methods
		public void Resize(ImageDescription description); // 0x005323A8-0x0053241C
		[Obsolete] // 0x003DE720-0x003DE758
		public bool IsValid(); // 0x005324E0-0x00532580
		public static bool IsNullOrEmpty(Image image); // 0x00532580-0x00532620
		public void CopyBufferToTexture(Texture2D texture); // 0x0052C508-0x0052C648
		public void CopyToTexture(Texture2D texture2D); // 0x005326C4-0x005326CC
		public void CopyToTexture(Texture2D texture2D, bool flipY); // 0x005326CC-0x00532D7C
		internal static Image CopyNativeImage(UnmanagedImageExtensions.GetImageSizeAndDataDelegate getImageSizeAndDataFunc); // 0x0052C380-0x0052C434
		private static void ResizeTexture(Texture2D texture, int width, int height, TextureFormat format); // 0x00532620-0x005326C4
		private int GetBufferSize(); // 0x005320A0-0x00532198
	}

	internal class UnmanagedImage : IDisposable // TypeDefIndex: 3374
	{
		// Fields
		private IntPtr mUnmanagedData; // 0x10
		private ImageDescription mDescription; // 0x18
	
		// Properties
		public ImageDescription Description { get; } // 0x00466948-0x00466950 
	
		// Constructors
		public UnmanagedImage(); // 0x00466600-0x0046663C
		public UnmanagedImage(int width, int height, int stride, int bufferWidth, int bufferHeight, PIXEL_FORMAT format); // 0x0046666C-0x00466724
		public UnmanagedImage(PIXEL_FORMAT format); // 0x00466724-0x004667B8
		public UnmanagedImage(ImageDescription description); // 0x0046663C-0x0046666C
	
		// Methods
		~UnmanagedImage(); // 0x00466838-0x004668AC
		public void Dispose(); // 0x00466944-0x00466948
		public void Resize(ImageDescription description); // 0x00466950-0x0046697C
		public TrackerData.ImageHeaderData CreateImageHeaderData(); // 0x0046697C-0x00466A88
		public Vuforia.Image CreateManagedImage(); // 0x00466A88-0x00466B64
		public void UpdateImageDataHeader(ref TrackerData.ImageHeaderData imageDataHeader); // 0x00466CB8-0x00466DAC
		public void UpdateManagedImage(Vuforia.Image image); // 0x00466DAC-0x00466EC0
		private void AllocateUnmanagedData(); // 0x004667B8-0x00466838
		private int GetBufferSize(); // 0x00466B64-0x00466CB8
		private void Clear(); // 0x004668AC-0x00466944
	}

	internal static class UnmanagedImageExtensions // TypeDefIndex: 3375
	{
		// Nested types
		internal delegate bool GetImageSizeAndDataDelegate(ref TrackerData.ImageHeaderData imageHeader); // TypeDefIndex: 3376; 0x00468050-0x004684A8
	
		// Extension methods
		internal static void ReallocateAndCopyData(this UnmanagedImage image, GetImageSizeAndDataDelegate getImageSizeAndDataFunc); // 0x00466EC0-0x00466EFC
		internal static bool ReallocateOrCopyData(this UnmanagedImage image, GetImageSizeAndDataDelegate getImageSizeAndDataFunc); // 0x00466EFC-0x00468050
		internal static void MarshalImageListToPtr(this ICollection<UnmanagedImage> images, IntPtr imageHeaderDataPtr); // 0x004684A8-0x00468834
		internal static void MarshalPtrToImageList(this ICollection<UnmanagedImage> images, IntPtr imageHeaderDataPtr); // 0x00468834-0x00468CD4
	}

	internal static class PosixPath // TypeDefIndex: 3377
	{
		// Nested types
		public class InvalidPathException : Exception // TypeDefIndex: 3378
		{
			// Constructors
			public InvalidPathException(string message); // 0x00451A50-0x00451AC8
		}
	
		[Serializable]
		[CompilerGenerated] // 0x003DCCA8-0x003DCCB8
		private sealed class <>c // TypeDefIndex: 3379
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static Func<string, bool> <>9__1_0; // 0x08
			public static Func<string, int, string> <>9__1_1; // 0x10
	
			// Constructors
			static <>c(); // 0x00451CA8-0x00451D0C
			public <>c(); // 0x00451D0C-0x00451D14
	
			// Methods
			internal bool <Join>b__1_0(string p); // 0x00451D14-0x00451D20
			internal string <Join>b__1_1(string s, int index); // 0x00451D20-0x00451D34
		}
	
		// Methods
		public static string Join(params /* 0x003DECAC-0x003DECBC */ string[] subPaths); // 0x004517F8-0x00451A50
		private static string TrimLeadingSlashes(string subPath); // 0x00451AC8-0x00451BD0
		private static string TrimTrailingSlashes(string subPath); // 0x00451BD0-0x00451CA8
	}

	internal class LateLatchingManager // TypeDefIndex: 3380
	{
		// Fields
		private bool mInitialized; // 0x10
		private bool mEnabled; // 0x11
		private bool mUpdated; // 0x12
		private Vector3 mCachedPositionalOffset; // 0x14
		private Quaternion mCachedRotationalOffset; // 0x20
		private TrackerData.TrackableResultData[] mCachedTrackableResultDataArray; // 0x30
		private TrackerData.VuMarkTargetResultData[] mCachedVuMarkResultDataArray; // 0x38
		private VuforiaManager.TrackableIdPair mCachedOriginTrackableID; // 0x40
		private int mCachedFrameIndex; // 0x48
	
		// Constructors
		public LateLatchingManager(); // 0x005387E4-0x005387EC
	
		// Methods
		public void Init(); // 0x00538540-0x005385C4
		public void Deinit(); // 0x005385C4-0x0053864C
		public void SetEnableLateLatching(bool enable); // 0x00528724-0x00528734
		public void UpdateLateLatchingInformation(Vector3 positionalOffset, Quaternion rotationalOffset, TrackerData.TrackableResultData[] trackableResultDataArray, TrackerData.VuMarkTargetResultData[] vuMarkResultDataArray, VuforiaManager.TrackableIdPair originTrackableID, int frameIndex); // 0x0053864C-0x0053867C
		private void OnBeforeRender(); // 0x0053867C-0x005387E4
	}

	internal class VRDeviceController // TypeDefIndex: 3381
	{
		// Fields
		private HashSet<string> mHeadPoseDisablingClasses; // 0x10
		private bool mHeadPosesEnabledOnce; // 0x18
	
		// Constructors
		public VRDeviceController(); // 0x0046AF74-0x0046AFEC
	
		// Methods
		public void EnableVRDevice(); // 0x00469CC0-0x00469CEC
		public void DisableVRDevice(); // 0x0046AD38-0x0046AD64
		public void EnableHeadPoseUpdates(string requestingClass); // 0x0046AD64-0x0046ADD4
		public void DisableHeadPoseUpdates(string requestingClass); // 0x0046ADD4-0x0046AE44
		public void UpdateState(Camera camera); // 0x0046AE44-0x0046AF74
	}

	public class VuforiaBehaviour : VuforiaMonoBehaviour // TypeDefIndex: 3382
	{
		// Fields
		private static VuforiaBehaviour mVuforiaBehaviour; // 0x00
		[HideInInspector] // 0x003DD7D0-0x003DD808
		[SerializeField] // 0x003DD7D0-0x003DD808
		private VuforiaARController.WorldCenterMode mWorldCenterMode; // 0x18
		[HideInInspector] // 0x003DD808-0x003DD840
		[SerializeField] // 0x003DD808-0x003DD840
		private TrackableBehaviour mWorldCenter; // 0x20
		private bool mAppIsQuitting; // 0x28
		[CompilerGenerated] // 0x003DD840-0x003DD850
		private static Action<VuforiaBehaviour> BehaviourCreated; // 0x08
		[CompilerGenerated] // 0x003DD850-0x003DD860
		private static Action<VuforiaBehaviour> BehaviourDestroyed; // 0x10
		[CompilerGenerated] // 0x003DD860-0x003DD870
		private Action AwakeEvent; // 0x30
		[CompilerGenerated] // 0x003DD870-0x003DD880
		private Action OnEnableEvent; // 0x38
		[CompilerGenerated] // 0x003DD880-0x003DD890
		private Action StartEvent; // 0x40
		[CompilerGenerated] // 0x003DD890-0x003DD8A0
		private Action UpdateEvent; // 0x48
		[CompilerGenerated] // 0x003DD8A0-0x003DD8B0
		private Action OnLevelWasLoadedEvent; // 0x50
		[CompilerGenerated] // 0x003DD8B0-0x003DD8C0
		private Action<bool> OnApplicationPauseEvent; // 0x58
		[CompilerGenerated] // 0x003DD8C0-0x003DD8D0
		private Action OnDisableEvent; // 0x60
		[CompilerGenerated] // 0x003DD8D0-0x003DD8E0
		private Action OnDestroyEvent; // 0x68
	
		// Properties
		public static VuforiaBehaviour Instance { get; } // 0x00708534-0x00708654 
		internal VuforiaARController.WorldCenterMode WorldCenterMode { get; } // 0x00705A3C-0x00705A44 
		internal TrackableBehaviour WorldCenter { get; } // 0x00705A44-0x00705A4C 
	
		// Events
		public static event Action<VuforiaBehaviour> BehaviourCreated {
			add; // 0x00709E48-0x00709F78
			remove; // 0x00709F78-0x0070A0A8
		}
		public static event Action<VuforiaBehaviour> BehaviourDestroyed {
			add; // 0x0070A0A8-0x0070A1D8
			remove; // 0x0070A1D8-0x0070A308
		}
		public event Action AwakeEvent {
			add; // 0x0070A308-0x0070A3F4
			remove; // 0x0070A3F4-0x0070A4E0
		}
		public event Action OnEnableEvent {
			add; // 0x0070A4E0-0x0070A5CC
			remove; // 0x0070A5CC-0x0070A6B8
		}
		public event Action StartEvent {
			add; // 0x0070A6B8-0x0070A7A4
			remove; // 0x0070A7A4-0x0070A890
		}
		public event Action UpdateEvent {
			add; // 0x0070A890-0x0070A97C
			remove; // 0x0070A97C-0x0070AA68
		}
		public event Action OnLevelWasLoadedEvent {
			add; // 0x0070AA68-0x0070AB54
			remove; // 0x0070AB54-0x0070AC40
		}
		public event Action<bool> OnApplicationPauseEvent {
			add; // 0x0070AC40-0x0070AD2C
			remove; // 0x0070AD2C-0x0070AE18
		}
		public event Action OnDisableEvent {
			add; // 0x0070AE18-0x0070AF04
			remove; // 0x0070AF04-0x0070AFF0
		}
		public event Action OnDestroyEvent {
			add; // 0x0070AFF0-0x0070B0DC
			remove; // 0x0070B0DC-0x0070B1C8
		}
	
		// Constructors
		public VuforiaBehaviour(); // 0x0070B1C8-0x0070B1D8
		static VuforiaBehaviour(); // 0x0070B1D8-0x0070B1DC
	
		// Methods
		protected virtual void Awake(); // 0x00709AE4-0x00709BE8
		private void AdaptCameraObject(); // 0x00709BE8-0x00709C74
		private void OnEnable(); // 0x00709C74-0x00709C88
		private void Start(); // 0x00709C88-0x00709C9C
		private void Update(); // 0x00709C9C-0x00709CB0
		private void OnSceneLoaded(Scene scene, LoadSceneMode mode); // 0x00709CB0-0x00709CC4
		private void OnApplicationPause(bool pause); // 0x00709CC4-0x00709D38
		private void OnDisable(); // 0x00709D38-0x00709D4C
		private void OnDestroy(); // 0x00709D4C-0x00709E48
	}

	public class VuforiaConfiguration : ScriptableObject // TypeDefIndex: 3383
	{
		// Fields
		private static VuforiaConfiguration mInstance; // 0x00
		private static object mPadlock; // 0x08
		[SerializeField] // 0x003DD8E0-0x003DD8F0
		private GenericVuforiaConfiguration vuforia; // 0x18
		[SerializeField] // 0x003DD8F0-0x003DD900
		private DigitalEyewearConfiguration digitalEyewear; // 0x20
		[SerializeField] // 0x003DD900-0x003DD910
		private DatabaseConfiguration database; // 0x28
		[SerializeField] // 0x003DD910-0x003DD920
		private VideoBackgroundConfiguration videoBackground; // 0x30
		[SerializeField] // 0x003DD920-0x003DD930
		private DeviceTrackerConfiguration deviceTracker; // 0x38
		[SerializeField] // 0x003DD930-0x003DD940
		private SmartTerrainConfiguration smartTerrain; // 0x40
		[SerializeField] // 0x003DD940-0x003DD950
		private WebCamConfiguration webcam; // 0x48
	
		// Properties
		public static VuforiaConfiguration Instance { get; } // 0x007058A4-0x00705A14 
		public GenericVuforiaConfiguration Vuforia { get; } // 0x00705A14-0x00705A1C 
		public DigitalEyewearConfiguration DigitalEyewear { get; } // 0x0070B410-0x0070B418 
		public DatabaseConfiguration Database { get; } // 0x0070B418-0x0070B420 
		public VideoBackgroundConfiguration VideoBackground { get; } // 0x0070B260-0x0070B268 
		public DeviceTrackerConfiguration DeviceTracker { get; } // 0x0070B420-0x0070B428 
		public SmartTerrainConfiguration SmartTerrain { get; } // 0x0070B428-0x0070B430 
		public WebCamConfiguration WebCam { get; } // 0x0070B430-0x0070B438 
	
		// Nested types
		[Serializable]
		public class GenericVuforiaConfiguration // TypeDefIndex: 3384
		{
			// Fields
			internal const string DEFAULT_UFO_LICENSE_KEY = "QVhiM0Y1Ly8vLy8vQUFBQUtPbnFIeHJFSGs1N3VrMlg4U050eVBzK2pkOFZxMDhrazlwYjBsYS9aZUIxQlV1ckZWcWt0ZllSQWpnT2tIRlY2VzdOMDRTRjNYRUhmbTF5L1BnYlB4eWdHWEF6RUNheXowc3dyNVNYa2ozdERuRjhka1FpOHRscHdkMDcrcEJEY1FjTjNJcUM1bEgwOTYzQkdZdjRsQStRb0hSQU9nRGthelp5TlY0WHVwWU9EaE05NWw5bXAzbnBDMjM5MWZBWXBFdEdiL2loTDNab3N4b25ZblhjK1JtSS9wLzRoTDIwVGhmTXR6WFJNYkpUTXZLZzJoQ0N0TEJXNEptZ0pSOUtSdStzQWM3QjVNOWFFMGVHQ1dUT1VRSUUweEpiZC9ZL2cvS29iNDhBRXdQOGFwbWR5NmRWU0FHU2psVzRZY2FEU2Zud3J1ZHhucVNmSUZiajNTUnIzM0lKVlFIaW1rL0oyOGNFeDdyekcySXg="; // Metadata: 0x0021BF4F
			[SerializeField] // 0x003DE028-0x003DE038
			private string vuforiaLicenseKey; // 0x10
			[SerializeField] // 0x003DE038-0x003DE048
			private string ufoLicenseKey; // 0x18
			[SerializeField] // 0x003DE048-0x003DE058
			private bool delayedInitialization; // 0x20
			[SerializeField] // 0x003DE058-0x003DE068
			private CameraDevice.CameraDeviceMode cameraDeviceModeSetting; // 0x24
			[SerializeField] // 0x003DE068-0x003DE078
			private int maxSimultaneousImageTargets; // 0x28
			[SerializeField] // 0x003DE078-0x003DE088
			private int maxSimultaneousObjectTargets; // 0x2C
			[SerializeField] // 0x003DE088-0x003DE098
			private bool useDelayedLoadingObjectTargets; // 0x30
			[SerializeField] // 0x003DE098-0x003DE0A8
			private string version; // 0x38
			[SerializeField] // 0x003DE0A8-0x003DE0B8
			private string eulaAcceptedVersions; // 0x40
	
			// Properties
			public string LicenseKey { get; set; } // 0x0070B834-0x0070B83C 0x0070B83C-0x0070B844
			internal string UfoLicenseKey { get; set; } // 0x0070B844-0x0070B84C 0x0070B84C-0x0070B854
			public bool DelayedInitialization { get; set; } // 0x0070B854-0x0070B85C 0x0070B85C-0x0070B868
			public CameraDevice.CameraDeviceMode CameraDeviceMode { get; set; } // 0x00705A1C-0x00705A24 0x0070B868-0x0070B870
			public int MaxSimultaneousImageTargets { get; set; } // 0x00705A24-0x00705A2C 0x0070B870-0x0070B878
			public int MaxSimultaneousObjectTargets { get; set; } // 0x00705A2C-0x00705A34 0x0070B878-0x0070B880
			public bool UseDelayedLoadingObjectTargets { get; set; } // 0x00705A34-0x00705A3C 0x0070B880-0x0070B88C
			public string Version { get; set; } // 0x0070B88C-0x0070B894 0x0070B894-0x0070B89C
			internal string EULAAcceptedVersions { get; set; } // 0x0070B89C-0x0070B8A4 0x0070B8A4-0x0070B8AC
	
			// Constructors
			public GenericVuforiaConfiguration(); // 0x0070B580-0x0070B604
	
			// Methods
			internal bool IsUFOEnabled(); // 0x0070B8AC-0x0070B93C
		}
	
		[Serializable]
		public class DigitalEyewearConfiguration // TypeDefIndex: 3385
		{
			// Fields
			[SerializeField] // 0x003DE0B8-0x003DE0C8
			private float cameraOffset; // 0x10
			[SerializeField] // 0x003DE0C8-0x003DE0D8
			private int distortionRenderingLayer; // 0x14
			[SerializeField] // 0x003DE0D8-0x003DE0E8
			private DigitalEyewearARController.EyewearType eyewearType; // 0x18
			[SerializeField] // 0x003DE0E8-0x003DE0F8
			private DigitalEyewearARController.StereoFramework stereoFramework; // 0x1C
			[SerializeField] // 0x003DE0F8-0x003DE108
			private DigitalEyewearARController.SeeThroughConfiguration seeThroughConfiguration; // 0x20
			[SerializeField] // 0x003DE108-0x003DE118
			private string viewerName; // 0x28
			[SerializeField] // 0x003DE118-0x003DE128
			private string viewerManufacturer; // 0x30
			[SerializeField] // 0x003DE128-0x003DE138
			private bool useCustomViewer; // 0x38
			[SerializeField] // 0x003DE138-0x003DE148
			private DigitalEyewearARController.SerializableViewerParameters customViewer; // 0x40
	
			// Properties
			public float CameraOffset { get; set; } // 0x0070B7A0-0x0070B7A8 0x0070B7A8-0x0070B7B0
			public int DistortionRenderingLayer { get; set; } // 0x0070B7B0-0x0070B7B8 0x0070B7B8-0x0070B7C0
			public DigitalEyewearARController.EyewearType EyewearType { get; set; } // 0x0070B7C0-0x0070B7C8 0x0070B7C8-0x0070B7D0
			public DigitalEyewearARController.StereoFramework StereoFramework { get; set; } // 0x0070B7D0-0x0070B7D8 0x0070B7D8-0x0070B7E0
			public DigitalEyewearARController.SeeThroughConfiguration SeeThroughConfiguration { get; set; } // 0x0070B7E0-0x0070B7E8 0x0070B7E8-0x0070B7F0
			public string ViewerName { get; set; } // 0x0070B7F0-0x0070B7F8 0x0070B7F8-0x0070B800
			public string ViewerManufacturer { get; set; } // 0x0070B800-0x0070B808 0x0070B808-0x0070B810
			public bool UseCustomViewer { get; set; } // 0x0070B810-0x0070B818 0x0070B818-0x0070B824
			public DigitalEyewearARController.SerializableViewerParameters CustomViewer { get; set; } // 0x0070B824-0x0070B82C 0x0070B82C-0x0070B834
	
			// Constructors
			public DigitalEyewearConfiguration(); // 0x0070B604-0x0070B61C
		}
	
		[Serializable]
		public class DatabaseConfiguration // TypeDefIndex: 3386
		{
			// Fields
			[SerializeField] // 0x003DE148-0x003DE158
			private bool disableModelExtraction; // 0x10
	
			// Properties
			public bool DisableModelExtraction { get; } // 0x0070B730-0x0070B738 
	
			// Constructors
			public DatabaseConfiguration(); // 0x0070B61C-0x0070B624
		}
	
		[Serializable]
		public class VideoBackgroundConfiguration // TypeDefIndex: 3387
		{
			// Fields
			[SerializeField] // 0x003DE158-0x003DE168
			private HideExcessAreaUtility.CLIPPING_MODE clippingMode; // 0x10
			[SerializeField] // 0x003DE168-0x003DE178
			private int numDivisions; // 0x14
			[SerializeField] // 0x003DE178-0x003DE188
			private Shader videoBackgroundShader; // 0x18
			[SerializeField] // 0x003DE188-0x003DE198
			private Shader matteShader; // 0x20
			[SerializeField] // 0x003DE198-0x003DE1A8
			private bool videoBackgroundEnabled; // 0x28
	
			// Properties
			public HideExcessAreaUtility.CLIPPING_MODE ClippingMode { get; set; } // 0x0070B998-0x0070B9A0 0x0070B9A0-0x0070B9A8
			public int NumDivisions { get; set; } // 0x0070B9A8-0x0070B9B0 0x0070B9B0-0x0070B9B8
			public Shader VideoBackgroundShader { get; set; } // 0x0070B9B8-0x0070B9C0 0x0070B9C0-0x0070B9C8
			public Shader MatteShader { get; set; } // 0x0070B9C8-0x0070B9D0 0x0070B9D0-0x0070B9D8
			public bool VideoBackgroundEnabled { get; set; } // 0x0070B9D8-0x0070B9E0 0x0070B9E0-0x0070B9EC
	
			// Constructors
			public VideoBackgroundConfiguration(); // 0x0070B624-0x0070B63C
		}
	
		public abstract class TrackerConfiguration // TypeDefIndex: 3388
		{
			// Fields
			[SerializeField] // 0x003DE1A8-0x003DE1B8
			private bool autoInitTracker; // 0x10
			[SerializeField] // 0x003DE1B8-0x003DE1C8
			private bool autoStartTracker; // 0x11
	
			// Properties
			public bool AutoInitAndStartTracker { get; set; } // 0x0070B980-0x0070B988 0x0070B988-0x0070B998
	
			// Constructors
			protected TrackerConfiguration(); // 0x0070B798-0x0070B7A0
		}
	
		[Serializable]
		public class DeviceTrackerConfiguration : TrackerConfiguration // TypeDefIndex: 3389
		{
			// Fields
			[SerializeField] // 0x003DE1C8-0x003DE1D8
			private DeviceTracker.TRACKING_MODE trackingMode; // 0x14
			[SerializeField] // 0x003DE1D8-0x003DE1E8
			private bool posePrediction; // 0x18
			[SerializeField] // 0x003DE1E8-0x003DE1F8
			private RotationalDeviceTracker.MODEL_CORRECTION_MODE modelCorrectionMode; // 0x1C
			[SerializeField] // 0x003DE1F8-0x003DE208
			private bool modelTransformEnabled; // 0x20
			[SerializeField] // 0x003DE208-0x003DE218
			private Vector3 modelTransform; // 0x24
	
			// Properties
			public DeviceTracker.TRACKING_MODE TrackingMode { get; set; } // 0x0070B738-0x0070B740 0x0070B740-0x0070B748
			public bool PosePrediction { get; set; } // 0x0070B748-0x0070B750 0x0070B750-0x0070B75C
			public RotationalDeviceTracker.MODEL_CORRECTION_MODE ModelCorrectionMode { get; set; } // 0x0070B75C-0x0070B764 0x0070B764-0x0070B76C
			public bool ModelTransformEnabled { get; set; } // 0x0070B76C-0x0070B774 0x0070B774-0x0070B780
			public Vector3 ModelTransform { get; set; } // 0x0070B780-0x0070B78C 0x0070B78C-0x0070B798
	
			// Constructors
			public DeviceTrackerConfiguration(); // 0x0070B63C-0x0070B6AC
		}
	
		[Serializable]
		public class SmartTerrainConfiguration : TrackerConfiguration // TypeDefIndex: 3390
		{
			// Constructors
			public SmartTerrainConfiguration(); // 0x0070B6AC-0x0070B6B4
		}
	
		[Serializable]
		public class WebCamConfiguration // TypeDefIndex: 3391
		{
			// Fields
			[SerializeField] // 0x003DE218-0x003DE228
			private string deviceNameSetInEditor; // 0x10
			[SerializeField] // 0x003DE228-0x003DE238
			private bool turnOffWebCam; // 0x18
			[SerializeField] // 0x003DE238-0x003DE248
			private int renderTextureLayer; // 0x1C
	
			// Properties
			public string DeviceNameSetInEditor { get; } // 0x0070B9EC-0x0070B9F4 
			public bool TurnOffWebCam { get; } // 0x0070B9F4-0x0070B9FC 
			public int RenderTextureLayer { get; } // 0x0070B9FC-0x0070BA04 
	
			// Constructors
			public WebCamConfiguration(); // 0x0070B6B4-0x0070B6C4
		}
	
		// Constructors
		public VuforiaConfiguration(); // 0x0070B438-0x0070B580
		static VuforiaConfiguration(); // 0x0070B6C4-0x0070B730
	
		// Methods
		private static void MigrateConfiguration(VuforiaConfiguration configuration); // 0x0070B1DC-0x0070B260
		private static void ValidateConfiguration(VuforiaConfiguration configuration); // 0x0070B268-0x0070B314
		internal static VuforiaConfiguration Create(); // 0x0070B314-0x0070B410
	}

	public class VuforiaRuntime // TypeDefIndex: 3392
	{
		// Fields
		internal const string VUFORIA_XR_NAME = "Vuforia"; // Metadata: 0x0021C14F
		private Action<VuforiaUnity.InitError> mOnVuforiaInitError; // 0x10
		private bool mFailedToInitialize; // 0x18
		private VuforiaUnity.InitError mInitError; // 0x1C
		private InitState mInitState; // 0x20
		private bool mInitThreadReturned; // 0x24
		private VuforiaUnity.InitError mReturnedError; // 0x28
		private static VuforiaRuntime mInstance; // 0x00
		private static object mPadlock; // 0x08
		private bool mAppIsQuitting; // 0x2C
	
		// Properties
		public static VuforiaRuntime Instance { get; internal set; } // 0x00704984-0x00704AF4 0x0071C738-0x0071C7A4
		public InitState InitializationState { get; } // 0x00705D48-0x00705D50 
	
		// Nested types
		public enum InitState // TypeDefIndex: 3393
		{
			NOT_INITIALIZED = 0,
			INITIALIZING = 1,
			INITIALIZED = 2
		}
	
		// Constructors
		private VuforiaRuntime(); // 0x0071C730-0x0071C738
		static VuforiaRuntime(); // 0x0071D7A0-0x0071D80C
	
		// Methods
		public void InitPlatform(IUnityPlayer player); // 0x0071C7A4-0x0071C88C
		public void InitVuforia(); // 0x0071C88C-0x0071C9A4
		private static void LogVersions(); // 0x0071C9A4-0x0071CAF4
		private void InitInternal(); // 0x0071CAF4-0x0071CCE8
		public void Deinit(); // 0x0071CD88-0x0071CF20
		public void RegisterVuforiaInitErrorCallback(Action<VuforiaUnity.InitError> callback); // 0x0071CF20-0x0071D014
		public void UnregisterVuforiaInitErrorCallback(Action<VuforiaUnity.InitError> callback); // 0x0071D014-0x0071D0D8
		internal bool HasInitializationCompleted(); // 0x00704AF4-0x00704C6C
		internal void AttachVuforiaToMainCamera(Scene scene, LoadSceneMode loadSceneMode); // 0x0071D0D8-0x0071D4A8
		internal static bool IsVuforiaEnabledInPlayerSettings(); // 0x00705C90-0x00705D48
		internal static bool IsVuforiaActiveAndEULAAccepted(); // 0x00705BD8-0x00705C90
		[RuntimeInitializeOnLoadMethod] // 0x003DE8D8-0x003DE8EC
		private static void VuforiaInitialization(); // 0x0071D520-0x0071D604
		private static bool AreVuforiaMonoBehavioursInScene(); // 0x0071D4A8-0x0071D520
		private void OnApplicationQuit(); // 0x0071D604-0x0071D694
		private void DeinitVuforia(); // 0x0071D694-0x0071D7A0
	}

	public class VuMarkBehaviour : DataSetTrackableBehaviour // TypeDefIndex: 3394
	{
		// Fields
		[HideInInspector] // 0x003DD950-0x003DD988
		[SerializeField] // 0x003DD950-0x003DD988
		private float mAspectRatio; // 0x58
		[HideInInspector] // 0x003DD988-0x003DD9C0
		[SerializeField] // 0x003DD988-0x003DD9C0
		private float mWidth; // 0x5C
		[HideInInspector] // 0x003DD9C0-0x003DD9F8
		[SerializeField] // 0x003DD9C0-0x003DD9F8
		private float mHeight; // 0x60
		[HideInInspector] // 0x003DD9F8-0x003DDA30
		[SerializeField] // 0x003DD9F8-0x003DDA30
		private string mPreviewImage; // 0x68
		[HideInInspector] // 0x003DDA30-0x003DDA68
		[SerializeField] // 0x003DDA30-0x003DDA68
		private InstanceIdType mIdType; // 0x70
		[HideInInspector] // 0x003DDA68-0x003DDAA0
		[SerializeField] // 0x003DDA68-0x003DDAA0
		private int mIdLength; // 0x74
		[HideInInspector] // 0x003DDAA0-0x003DDAD8
		[SerializeField] // 0x003DDAA0-0x003DDAD8
		private Rect mBoundingBox; // 0x78
		[HideInInspector] // 0x003DDAD8-0x003DDB10
		[SerializeField] // 0x003DDAD8-0x003DDB10
		private Vector2 mOrigin; // 0x88
		[HideInInspector] // 0x003DDB10-0x003DDB48
		[SerializeField] // 0x003DDB10-0x003DDB48
		private bool mTrackingFromRuntimeAppearance; // 0x90
		private VuMarkTemplate mVuMarkTemplate; // 0x98
		private VuMarkTarget mVuMarkTarget; // 0xA0
		private int mVuMarkResultId; // 0xA8
		private Action mOnTargetAssigned; // 0xB0
		private Action mOnTargetLost; // 0xB8
		private float mLastTransformScale; // 0xC0
		private Vector2 mLastSize; // 0xC4
	
		// Properties
		public VuMarkTemplate VuMarkTemplate { get; } // 0x004705C8-0x004705D0 
		public VuMarkTarget VuMarkTarget { get; } // 0x004705D0-0x004705D8 
		public Vector2 Origin { get; } // 0x004705D8-0x004707C4 
		internal int VuMarkResultId { get; set; } // 0x0045B2E8-0x0045B2F0 0x00470F08-0x00470F10
	
		// Constructors
		public VuMarkBehaviour(); // 0x004708A4-0x00470904
	
		// Methods
		protected override bool CorrectScaleImpl(); // 0x00470904-0x0047093C
		protected override void InternalUnregisterTrackable(); // 0x00470B24-0x00470B30
		public Vector2 GetSize(); // 0x004707C4-0x004708A4
		public void SetWidth(float width); // 0x00470B30-0x00470B68
		public void SetHeight(float height); // 0x00470B68-0x00470BA0
		public void RegisterVuMarkTargetAssignedCallback(Action callback); // 0x00470BA0-0x00470C84
		public void UnregisterVuMarkTargetAssignedCallback(Action callback); // 0x00470C84-0x00470D48
		public void RegisterVuMarkTargetLostCallback(Action callback); // 0x00470D48-0x00470E0C
		public void UnregisterVuMarkTargetLostCallback(Action callback); // 0x00470E0C-0x00470ED0
		internal void UnregisterVuMarkTarget(); // 0x00470ED0-0x00470EEC
		internal void RegisterVuMarkTarget(VuMarkTarget target); // 0x00470EEC-0x00470F08
		internal override bool InitializeTarget(Trackable trackable, bool applyTargetScaleToBehaviour); // 0x00470F10-0x004712C8
		private void OnValidate(); // 0x0047093C-0x00470B24
	}

	public class VuMarkManager // TypeDefIndex: 3395
	{
		// Fields
		private Dictionary<int, List<VuMarkBehaviour>> mBehaviours; // 0x10
		private List<VuMarkTarget> mActiveVuMarkTargets; // 0x18
		private List<VuMarkBehaviour> mDestroyedBehaviours; // 0x20
		private Action<VuMarkTarget> mOnVuMarkDetected; // 0x28
		private Action<VuMarkTarget> mOnVuMarkLost; // 0x30
		private Action<VuMarkBehaviour> mOnVuMarkBehaviourDetected; // 0x38
	
		// Constructors
		internal VuMarkManager(); // 0x00455C54-0x00455D14
	
		// Methods
		public IEnumerable<VuMarkTarget> GetActiveVuMarks(); // 0x004712C8-0x004712D0
		public IEnumerable<VuMarkBehaviour> GetActiveBehaviours(VuMarkTarget vuMark); // 0x004712D0-0x004715B8
		public IEnumerable<VuMarkBehaviour> GetActiveBehaviours(); // 0x0045C764-0x0045CA20
		public IEnumerable<VuMarkBehaviour> GetAllBehaviours(); // 0x00455DA4-0x00456048
		public void RegisterVuMarkDetectedCallback(Action<VuMarkTarget> callback); // 0x004715B8-0x0047167C
		public void UnregisterVuMarkDetectedCallback(Action<VuMarkTarget> callback); // 0x0047167C-0x00471740
		public void RegisterVuMarkLostCallback(Action<VuMarkTarget> callback); // 0x00471740-0x00471804
		public void UnregisterVuMarkLostCallback(Action<VuMarkTarget> callback); // 0x00471804-0x004718C8
		public void RegisterVuMarkBehaviourDetectedCallback(Action<VuMarkBehaviour> callback); // 0x004718C8-0x0047198C
		public void UnregisterVuMarkBehaviourDetectedCallback(Action<VuMarkBehaviour> callback); // 0x0047198C-0x00471A50
		internal void UpdateVuMarks(TrackerData.VuMarkTargetData[] newVuMarks, TrackerData.VuMarkTargetResultData[] vuMarkResults); // 0x0045BDE4-0x0045BEF8
		internal void UpdateVuMarkPoses(Vector3 positionalOffset, Quaternion rotationalOffset, TrackerData.VuMarkTargetResultData[] vuMarkResults, int originTrackableResultId); // 0x0045B0C8-0x0045B2E8
		internal bool AddTemplateBehaviour(VuMarkBehaviour behaviour); // 0x00458928-0x00458AB0
		internal bool ContainsVuMarkTemplate(int templateId); // 0x0045E1E4-0x0045E334
		internal void ClearBehaviours(); // 0x00459D00-0x00459D8C
		internal void DestroyBehaviourCopies(); // 0x00456C98-0x00457058
		internal void RemoveDestroyedTrackables(); // 0x00456998-0x00456C98
		internal bool IsBehaviourMarkedForDeletion(TrackableBehaviour behaviour); // 0x00458828-0x00458920
		internal VuMarkBehaviour GetBehaviourWithResultID(int resultId); // 0x00472534-0x004727F4
		private void UpdateNewVuMarks(TrackerData.VuMarkTargetData[] newVuMarks); // 0x00471A50-0x00471B70
		private void UpdateLostVuMarks(HashSet<int> trackedIndices); // 0x00471B70-0x00471EA4
		private VuMarkTarget CreateVuMarkTarget(TrackerData.VuMarkTargetData newVuMark); // 0x004727F4-0x00472988
		private VuMarkBehaviour CreateOrGetUnusedBehaviour(int templateId); // 0x00472AD8-0x00472DC4
		private VuMarkTemplate GetVuMarkTemplate(int templateId); // 0x00472988-0x00472AD8
		private VuMarkBehaviour CopyGameObject(VuMarkBehaviour bhvr); // 0x00472DC4-0x00472EB4
		private void MarkBehaviourUntracked(VuMarkBehaviour behaviour); // 0x00472EB4-0x00472F50
		private void AssociateTargetWithBehaviour(VuMarkTarget vuMark, VuMarkBehaviour bhvr); // 0x00472F50-0x00472FD8
		private void UpdateVuMarkResults(TrackerData.VuMarkTargetResultData[] vuMarkResults); // 0x00471EA4-0x004723BC
		private VuMarkBehaviour GetActiveBehaviour(int targetId, int resultId); // 0x004723BC-0x00472534
		private VuMarkTarget GetVuMarkTarget(int targetId); // 0x00472FD8-0x004732FC
		private Dictionary<int, List<int>> GroupResultsByTargetId(TrackerData.VuMarkTargetResultData[] vuMarkResults); // 0x004732FC-0x0047348C
	}

	public enum InstanceIdType // TypeDefIndex: 3396
	{
		BYTES = 0,
		STRING = 1,
		NUMERIC = 2
	}

	public interface InstanceId // TypeDefIndex: 3397
	{
		// Properties
		InstanceIdType DataType { get; }
		byte[] Buffer { get; }
		string HexStringValue { get; }
		string StringValue { get; }
		ulong NumericValue { get; }
	}

	public interface VuMarkTarget : ObjectTarget // TypeDefIndex: 3398
	{
		// Properties
		InstanceId InstanceId { get; }
		VuMarkTemplate Template { get; }
		Vuforia.Image InstanceImage { get; }
	}

	public interface VuMarkTemplate : ObjectTarget // TypeDefIndex: 3399
	{
		// Properties
		string VuMarkUserData { get; }
		Vector2 Origin { get; }
		bool TrackingFromRuntimeAppearance { get; set; }
	}

	public interface WorldCenterTrackableBehaviour // TypeDefIndex: 3400
	{
		// Properties
		Trackable Trackable { get; }
	}

	public interface CylinderTarget : ObjectTarget // TypeDefIndex: 3401
	{
		// Methods
		float GetSideLength();
		float GetTopDiameter();
		float GetBottomDiameter();
		bool SetSideLength(float sideLength);
		bool SetTopDiameter(float topDiameter);
		bool SetBottomDiameter(float bottomDiameter);
	}

	public class CylinderTargetBehaviour : DataSetTrackableBehaviour // TypeDefIndex: 3402
	{
		// Fields
		private CylinderTarget mCylinderTarget; // 0x58
		[HideInInspector] // 0x003DDB48-0x003DDB80
		[SerializeField] // 0x003DDB48-0x003DDB80
		private float mTopDiameterRatio; // 0x60
		[HideInInspector] // 0x003DDB80-0x003DDBB8
		[SerializeField] // 0x003DDB80-0x003DDBB8
		private float mBottomDiameterRatio; // 0x64
		[HideInInspector] // 0x003DDBB8-0x003DDBF0
		[SerializeField] // 0x003DDBB8-0x003DDBF0
		private float mSideLength; // 0x68
		[HideInInspector] // 0x003DDBF0-0x003DDC28
		[SerializeField] // 0x003DDBF0-0x003DDC28
		private float mTopDiameter; // 0x6C
		[HideInInspector] // 0x003DDC28-0x003DDC60
		[SerializeField] // 0x003DDC28-0x003DDC60
		private float mBottomDiameter; // 0x70
		private int mFrameIndex; // 0x74
		private int mUpdateFrameIndex; // 0x78
		private float mFutureScale; // 0x7C
		private float mLastTransformScale; // 0x80
	
		// Properties
		public CylinderTarget CylinderTarget { get; } // 0x005FC690-0x005FC698 
		public float SideLength { get; } // 0x005FC698-0x005FC69C 
		public float TopDiameter { get; } // 0x005FC6D0-0x005FC6F4 
		public float BottomDiameter { get; } // 0x005FC6F4-0x005FC718 
	
		// Constructors
		public CylinderTargetBehaviour(); // 0x005FD00C-0x005FD020
	
		// Methods
		public bool SetSideLength(float value); // 0x005FC718-0x005FC71C
		public bool SetTopDiameter(float value); // 0x005FC83C-0x005FC8E0
		public bool SetBottomDiameter(float value); // 0x005FC8E0-0x005FC984
		public override void OnFrameIndexUpdate(int newFrameIndex); // 0x005FC984-0x005FC9CC
		protected override bool CorrectScaleImpl(); // 0x005FCA44-0x005FCA80
		protected override void InternalUnregisterTrackable(); // 0x005FCC8C-0x005FCC98
		internal override bool InitializeTarget(Trackable trackable, bool applyTargetScaleToBehaviour); // 0x005FCC98-0x005FCE9C
		private float GetScale(); // 0x005FC69C-0x005FC6D0
		private bool SetScale(float value); // 0x005FC71C-0x005FC83C
		private void ApplyScale(float value); // 0x005FC9CC-0x005FCA44
		private void OnValidate(); // 0x005FCA80-0x005FCC8C
	}

	public class DataSet // TypeDefIndex: 3403
	{
		// Fields
		private IntPtr mDataSetPtr; // 0x10
		private string mPath; // 0x18
		private VuforiaUnity.StorageType mStorageType; // 0x20
		private readonly Dictionary<int, Trackable> mTrackablesDict; // 0x28
		private const int mMaxTrackableNameLength = 128; // Metadata: 0x0021C172
	
		// Properties
		public string Path { get; } // 0x005FCEAC-0x005FCEB4 
		public VuforiaUnity.StorageType FileStorageType { get; } // 0x005FD820-0x005FD828 
		internal IntPtr DataSetPtr { get; } // 0x005FD39C-0x005FD3A4 
	
		// Nested types
		public enum StorageType // TypeDefIndex: 3404
		{
			STORAGE_APP = 0,
			STORAGE_APPRESOURCE = 1,
			STORAGE_ABSOLUTE = 2
		}
	
		// Constructors
		internal DataSet(IntPtr dataSetPtr); // 0x005FD780-0x005FD820
	
		// Methods
		public static bool Exists(string name); // 0x005FD828-0x005FD8C8
		public static bool Exists(string path, VuforiaUnity.StorageType storageType); // 0x005FD8C8-0x005FD9FC
		public bool Load(string name); // 0x005FD9FC-0x005FDA78
		public bool Load(string path, VuforiaUnity.StorageType storageType); // 0x005FDA78-0x005FDDAC
		public IEnumerable<Trackable> GetTrackables(); // 0x006010EC-0x0060114C
		public DataSetTrackableBehaviour CreateTrackable(TrackableSource trackableSource, string gameObjectName); // 0x0060114C-0x006011C8
		public DataSetTrackableBehaviour CreateTrackable(TrackableSource trackableSource, GameObject gameObject); // 0x006011C8-0x00601600
		public bool Destroy(Trackable trackable, bool destroyGameObject); // 0x00601600-0x006019D0
		public bool HasReachedTrackableLimit(); // 0x006019D0-0x00601AC0
		public bool Contains(Trackable trackable); // 0x00601AC0-0x00601B30
		public void DestroyAllTrackables(bool destroyGameObject); // 0x00601B30-0x00601CA4
		private bool CreateImageTargets(); // 0x005FDDAC-0x005FE390
		private bool CreateMultiTargets(); // 0x005FE390-0x005FE970
		private bool CreateCylinderTargets(); // 0x005FE970-0x005FEF4C
		private bool CreateVuMarkTemplates(); // 0x005FEF4C-0x005FF52C
		private bool CreateModelTargets(); // 0x005FF52C-0x005FFB10
		private bool CreateObjectTargets(); // 0x005FFB10-0x006010EC
	}

	public class DatabaseLoadARController : ARController // TypeDefIndex: 3405
	{
		// Fields
		private bool mDatasetsLoaded; // 0x18
		private List<string> mExternalDatasetRoots; // 0x20
		private readonly HashSet<string> mDataSetsToLoad; // 0x28
		private readonly HashSet<string> mDataSetsToNOTLoad; // 0x30
		private readonly HashSet<string> mDataSetsToActivate; // 0x38
		private static DatabaseLoadARController mInstance; // 0x00
		private static object mPadlock; // 0x08
	
		// Properties
		public static DatabaseLoadARController Instance { get; } // 0x005EBA38-0x005EBBA4 
	
		// Constructors
		private DatabaseLoadARController(); // 0x0060208C-0x0060215C
		static DatabaseLoadARController(); // 0x00602A80-0x00602AEC
	
		// Methods
		[RuntimeInitializeOnLoadMethod] // 0x003DE8EC-0x003DE900
		public static void RegisterARController(); // 0x0060215C-0x006021BC
		public void LoadDatasets(); // 0x006021BC-0x006028C4
		public void AddExternalDatasetSearchDir(string searchDir); // 0x005EBBA4-0x005EBC74
		internal void RegisterDataSetToLoad(string datasetToLoad); // 0x00601F00-0x00601FAC
		internal void DoNotLoadDataset(string datasetToLoad); // 0x006028C4-0x0060295C
		internal void RegisterDataSetToActivate(string datasetToActivate); // 0x00601FAC-0x0060201C
		protected override void Start(); // 0x0060295C-0x006029F8
		protected override void OnDestroy(); // 0x006029F8-0x00602A80
	}

	public abstract class DataSetTrackableBehaviour : TrackableBehaviour, WorldCenterTrackableBehaviour // TypeDefIndex: 3406
	{
		// Fields
		[HideInInspector] // 0x003DDC60-0x003DDC98
		[SerializeField] // 0x003DDC60-0x003DDC98
		protected string mDataSetPath; // 0x50
	
		// Properties
		internal string DataSetPath { get; } // 0x0060201C-0x00602024 
		internal string DataSetName { get; } // 0x00601EF8-0x00601F00 
	
		// Constructors
		protected DataSetTrackableBehaviour(); // 0x005FD020-0x005FD078
	
		// Methods
		protected virtual void Awake(); // 0x00601DCC-0x00601EF8
		internal virtual bool InitializeTarget(Trackable trackable, bool applyTargetScaleToBehaviour); // 0x005FCE9C-0x005FCEA4
		internal static string GetDataSetName(string datasetPath); // 0x00602024-0x0060208C
	}

	public struct ObjectTargetData // TypeDefIndex: 3407
	{
		// Fields
		public int id; // 0x00
		public Vector3 size; // 0x04
	}

	public interface ObjectTarget : Trackable // TypeDefIndex: 3408
	{
		// Methods
		Vector3 GetSize();
		float GetLargestSizeComponent();
		bool SetSize(Vector3 size);
	}

	public struct RectangleData // TypeDefIndex: 3409
	{
		// Fields
		public float leftTopX; // 0x00
		public float leftTopY; // 0x04
		public float rightBottomX; // 0x08
		public float rightBottomY; // 0x0C
	}

	public struct RectangleIntData // TypeDefIndex: 3410
	{
		// Fields
		public int leftTopX; // 0x00
		public int leftTopY; // 0x04
		public int rightBottomX; // 0x08
		public int rightBottomY; // 0x0C
	}

	public struct OrientedBoundingBox // TypeDefIndex: 3411
	{
		// Fields
		[CompilerGenerated] // 0x003DDC98-0x003DDCA8
		private Vector2 <Center>k__BackingField; // 0x00
		[CompilerGenerated] // 0x003DDCA8-0x003DDCB8
		private Vector2 <HalfExtents>k__BackingField; // 0x08
		[CompilerGenerated] // 0x003DDCB8-0x003DDCC8
		private float <Rotation>k__BackingField; // 0x10
	
		// Properties
		public Vector2 Center { [CompilerGenerated] /* 0x003DE900-0x003DE910 */ get; [CompilerGenerated] /* 0x003DE910-0x003DE920 */ private set; } // 0x00544D90-0x00544D98 0x00544D98-0x00544DA8
		public Vector2 HalfExtents { [CompilerGenerated] /* 0x003DE920-0x003DE930 */ get; [CompilerGenerated] /* 0x003DE930-0x003DE940 */ private set; } // 0x00544DA8-0x00544DB0 0x00544DB0-0x00544DC0
		public float Rotation { [CompilerGenerated] /* 0x003DE940-0x003DE950 */ get; [CompilerGenerated] /* 0x003DE950-0x003DE960 */ private set; } // 0x00544DC0-0x00544DC8 0x00544DC8-0x00544DD0
	
		// Constructors
		public OrientedBoundingBox(Vector2 center, Vector2 halfExtents, float rotation); // 0x00544D78-0x00544D90
	}

	public struct OrientedBoundingBox3D // TypeDefIndex: 3412
	{
		// Fields
		[CompilerGenerated] // 0x003DDCC8-0x003DDCD8
		private Vector3 <Center>k__BackingField; // 0x00
		[CompilerGenerated] // 0x003DDCD8-0x003DDCE8
		private Vector3 <HalfExtents>k__BackingField; // 0x0C
		[CompilerGenerated] // 0x003DDCE8-0x003DDCF8
		private float <RotationY>k__BackingField; // 0x18
	
		// Properties
		public Vector3 Center { [CompilerGenerated] /* 0x003DE960-0x003DE970 */ get; [CompilerGenerated] /* 0x003DE970-0x003DE980 */ private set; } // 0x00544DE4-0x00544DF0 0x00544DF0-0x00544DFC
		public Vector3 HalfExtents { [CompilerGenerated] /* 0x003DE980-0x003DE990 */ get; [CompilerGenerated] /* 0x003DE990-0x003DE9A0 */ private set; } // 0x00544DFC-0x00544E08 0x00544E08-0x00544E14
		public float RotationY { [CompilerGenerated] /* 0x003DE9A0-0x003DE9B0 */ get; [CompilerGenerated] /* 0x003DE9B0-0x003DE9C0 */ private set; } // 0x00544E14-0x00544E1C 0x00544E1C-0x00544E24
	
		// Constructors
		public OrientedBoundingBox3D(Vector3 center, Vector3 halfExtents, float rotationY); // 0x00544DD0-0x00544DE4
	}

	public interface IObjectRecoEventHandler // TypeDefIndex: 3413
	{
		// Methods
		void OnInitialized(TargetFinder targetFinder);
		void OnInitError(TargetFinder.InitState initError);
		void OnUpdateError(TargetFinder.UpdateState updateError);
		void OnStateChanged(bool scanning);
		void OnNewSearchResult(TargetFinder.TargetSearchResult targetSearchResult);
	}

	public interface IUnityPlayer : IDisposable // TypeDefIndex: 3414
	{
		// Methods
		void LoadNativeLibraries();
		void InitializePlatform();
		VuforiaUnity.InitError InitializeVuforia(string licenseKey);
		void ResetPlatformCoordinateSystem();
		void Update();
		void OnPause();
		void OnResume();
		void OnDestroy();
	}

	internal class CloudRecoImageTargetImpl : ObjectTargetImpl, ImageTarget // TypeDefIndex: 3415
	{
		// Fields
		private readonly Vector3 mSize; // 0x28
	
		// Properties
		public ImageTargetType ImageTargetType { get; } // 0x005F8BCC-0x005F8BD4 
	
		// Constructors
		public CloudRecoImageTargetImpl(string name, int id, Vector3 size); // 0x005F8B18-0x005F8BCC
	
		// Methods
		public new bool SetSize(Vector3 size); // 0x005F8BD4-0x005F8C48
		public VirtualButton CreateVirtualButton(string name, RectangleData area); // 0x005F8C48-0x005F8CBC
		public VirtualButton GetVirtualButtonByName(string name); // 0x005F8CBC-0x005F8D30
		public IEnumerable<VirtualButton> GetVirtualButtons(); // 0x005F8D30-0x005F8DC8
		public bool DestroyVirtualButton(VirtualButton vb); // 0x005F8DC8-0x005F8E3C
	}

	internal class CylinderTargetImpl : DataSetObjectTargetImpl, CylinderTarget // TypeDefIndex: 3416
	{
		// Fields
		private float mSideLength; // 0x30
		private float mTopDiameter; // 0x34
		private float mBottomDiameter; // 0x38
		private readonly CustomDataSetTargetSize mCustomTargetSize; // 0x40
	
		// Constructors
		public CylinderTargetImpl(string name, int id, DataSet dataSet); // 0x005FD078-0x005FD36C
	
		// Methods
		public float GetSideLength(); // 0x005FCEBC-0x005FCEC4
		public float GetTopDiameter(); // 0x005FCEB4-0x005FCEBC
		public float GetBottomDiameter(); // 0x005FCEC4-0x005FCECC
		public bool SetSideLength(float sideLength); // 0x005FCECC-0x005FD00C
		public bool SetTopDiameter(float topDiameter); // 0x005FD488-0x005FD5C8
		public bool SetBottomDiameter(float bottomDiameter); // 0x005FD5C8-0x005FD708
		private void SetNewSize(Vector3 newSize); // 0x005FD708-0x005FD780
		private void ScaleCylinder(float scale); // 0x005FD3A4-0x005FD488
	}

	public enum ImageTargetType // TypeDefIndex: 3417
	{
		PREDEFINED = 0,
		USER_DEFINED = 1,
		CLOUD_RECO = 2
	}

	public struct ImageTargetData // TypeDefIndex: 3418
	{
		// Fields
		public int id; // 0x00
		public Vector3 size; // 0x04
	}

	public interface ImageTarget : ObjectTarget // TypeDefIndex: 3419
	{
		// Properties
		ImageTargetType ImageTargetType { get; }
	
		// Methods
		VirtualButton CreateVirtualButton(string name, RectangleData area);
		VirtualButton GetVirtualButtonByName(string name);
		IEnumerable<VirtualButton> GetVirtualButtons();
		bool DestroyVirtualButton(VirtualButton vb);
	}

	public class ImageTargetBuilder // TypeDefIndex: 3420
	{
		// Fields
		private TrackableSource mTrackableSource; // 0x10
		private bool mIsScanning; // 0x18
	
		// Nested types
		public enum FrameQuality // TypeDefIndex: 3421
		{
			FRAME_QUALITY_NONE = -1,
			FRAME_QUALITY_LOW = 0,
			FRAME_QUALITY_MEDIUM = 1,
			FRAME_QUALITY_HIGH = 2
		}
	
		// Constructors
		internal ImageTargetBuilder(); // 0x0053559C-0x005355A4
	
		// Methods
		public bool Build(string targetName, float screenSizeWidth); // 0x005355A4-0x0053570C
		public void StartScan(); // 0x0053570C-0x005357F0
		public void StopScan(); // 0x005357F0-0x005358D0
		public FrameQuality GetFrameQuality(); // 0x005358D0-0x005359A8
		public TrackableSource GetTrackableSource(); // 0x005359A8-0x00535AE0
		internal bool IsScanning(); // 0x00535AE0-0x00535AE8
	}

	internal class ImageTargetImpl : DataSetObjectTargetImpl, ImageTarget // TypeDefIndex: 3422
	{
		// Fields
		private readonly ImageTargetType mImageTargetType; // 0x30
		private readonly Dictionary<int, VirtualButton> mVirtualButtons; // 0x38
	
		// Properties
		public ImageTargetType ImageTargetType { get; } // 0x00536B30-0x00536B38 
	
		// Constructors
		public ImageTargetImpl(string name, int id, ImageTargetType imageTargetType, DataSet dataSet); // 0x00536390-0x00536438
	
		// Methods
		public VirtualButton CreateVirtualButton(string name, RectangleData area); // 0x00536B38-0x00536C34
		public VirtualButton GetVirtualButtonByName(string name); // 0x00537050-0x005371CC
		public IEnumerable<VirtualButton> GetVirtualButtons(); // 0x005371CC-0x0053722C
		public bool DestroyVirtualButton(VirtualButton vb); // 0x0053722C-0x00537658
		private VirtualButton CreateNewVirtualButtonInNative(string name, RectangleData rectangleData); // 0x00536C34-0x00537050
		private bool UnregisterVirtualButtonInNative(VirtualButton vb); // 0x00537B30-0x00537DD0
		private void CreateVirtualButtonsFromNative(); // 0x00536438-0x00536B30
	}

	internal interface IPremiumObjectFactory // TypeDefIndex: 3423
	{
	}

	internal class MultiTargetImpl : DataSetObjectTargetImpl, MultiTarget // TypeDefIndex: 3424
	{
		// Nested types
		internal class MultiSetTargetSize : DisabledSetTargetSize // TypeDefIndex: 3425
		{
			// Fields
			private IntPtr mDataSetPtr; // 0x20
			private string mName; // 0x28
	
			// Constructors
			public MultiSetTargetSize(IntPtr dataSetPtr, string name); // 0x0053FDEC-0x0053FE98
	
			// Methods
			public override float GetLargestSizeComponent(); // 0x0053FE98-0x0053FF8C
		}
	
		// Constructors
		public MultiTargetImpl(string name, int id, DataSet dataSet); // 0x0053FD38-0x0053FDEC
	}

	internal class DefaultWebCamTexAdaptor : IWebCamTexAdaptor // TypeDefIndex: 3426
	{
		// Fields
		private readonly Texture2D mTexture; // 0x10
		private bool mPseudoPlaying; // 0x18
		private readonly double mMsBetweenFrames; // 0x20
		private DateTime mLastFrame; // 0x28
		private const string ERROR_MSG = "No camera connected!\nTo run your application using Play Mode, please connect a webcam to your computer."; // Metadata: 0x0021C19E
	
		// Properties
		public bool DidUpdateThisFrame { get; } // 0x006057C4-0x00605890 
		public bool IsPlaying { get; } // 0x00605890-0x00605898 
		public Texture Texture { get; } // 0x00605898-0x006058A0 
	
		// Constructors
		public DefaultWebCamTexAdaptor(int requestedFPS, VuforiaRenderer.Vec2I requestedTextureSize); // 0x006058A0-0x00605AD0
	
		// Methods
		public void Play(); // 0x00605AD0-0x00605ADC
		public void Stop(); // 0x00605ADC-0x00605AE4
		public void CheckPermissions(); // 0x00605AE4-0x00605AE8
	}

	internal class PlayModeEditorUtility // TypeDefIndex: 3427
	{
		// Fields
		private static IPlayModeEditorUtility sInstance; // 0x00
	
		// Properties
		public static IPlayModeEditorUtility Instance { get; set; } // 0x0044DCC0-0x0044DD48 0x0044DD50-0x0044DDA4
	
		// Nested types
		private class NullPlayModeEditorUtility : IPlayModeEditorUtility // TypeDefIndex: 3428
		{
			// Constructors
			public NullPlayModeEditorUtility(); // 0x0044DD48-0x0044DD50
	
			// Methods
			public void DisplayDialog(string title, string message, string ok); // 0x0044DDAC-0x0044DDB0
			public WebCamProfile.ProfileCollection LoadAndParseWebcamProfiles(); // 0x0044DDB0-0x0044DDBC
			public void RestartPlayMode(); // 0x0044DDBC-0x0044DDC0
			public void ShowErrorInMouseOverWindow(string error); // 0x0044DDC0-0x0044DDC4
			public bool IsVuforiaEnabledInPlayerSettings(); // 0x0044DDC4-0x0044DDCC
			public bool IsVuforiaActiveAndEULAAccepted(); // 0x0044DDCC-0x0044DF58
			public string GetEmulatorDatabasePath(); // 0x0044DF58-0x0044DFA8
		}
	
		// Constructors
		public PlayModeEditorUtility(); // 0x0044DDA4-0x0044DDAC
	}

	internal class PremiumObjectFactory // TypeDefIndex: 3429
	{
		// Fields
		private static IPremiumObjectFactory sInstance; // 0x00
	
		// Properties
		internal static IPremiumObjectFactory Instance { get; set; } // 0x00451D34-0x00451DBC 0x00451DC4-0x00451E18
	
		// Nested types
		private class NullPremiumObjectFactory : IPremiumObjectFactory // TypeDefIndex: 3430
		{
			// Constructors
			public NullPremiumObjectFactory(); // 0x00451DBC-0x00451DC4
		}
	
		// Constructors
		public PremiumObjectFactory(); // 0x00451E18-0x00451E20
	}

	internal static class TypeMapping // TypeDefIndex: 3431
	{
		// Fields
		private static Dictionary<Type, ushort> sTypes; // 0x00
	
		// Constructors
		static TypeMapping(); // 0x00464D74-0x004650F4
	
		// Methods
		internal static ushort GetTypeID(Type type); // 0x00450100-0x0045018C
	}

	internal interface IWebCamTexAdaptor // TypeDefIndex: 3432
	{
		// Properties
		bool DidUpdateThisFrame { get; }
		bool IsPlaying { get; }
		Texture Texture { get; }
	
		// Methods
		void Play();
		void Stop();
		void CheckPermissions();
	}

	internal class WebCamTexAdaptor : IWebCamTexAdaptor // TypeDefIndex: 3433
	{
		// Fields
		private WebCamTexture mWebCamTexture; // 0x10
		private AsyncOperation mCheckCameraPermissions; // 0x18
	
		// Properties
		public bool DidUpdateThisFrame { get; } // 0x00C63424-0x00C63454 
		public bool IsPlaying { get; } // 0x00C63454-0x00C63484 
		public Texture Texture { get; } // 0x00C63484-0x00C6348C 
	
		// Constructors
		public WebCamTexAdaptor(string deviceName, WebCamProfile.ProfileData profile); // 0x00C63234-0x00C63334
	
		// Methods
		public void Play(); // 0x00C6348C-0x00C634EC
		public void Stop(); // 0x00C634EC-0x00C6351C
		public void CheckPermissions(); // 0x00C6351C-0x00C6363C
	}

	internal class VuforiaNullWrapper : IVuforiaWrapper // TypeDefIndex: 3434
	{
		// Constructors
		public VuforiaNullWrapper(); // 0x0071B38C-0x0071B394
	
		// Methods
		public int CameraDeviceDeinitCamera(); // 0x0071A75C-0x0071A764
		public void CameraDeviceGetCameraField(IntPtr cameraField, int idx); // 0x0071A764-0x0071A768
		public int CameraDeviceGetCameraFieldOfViewRads(IntPtr fovVectorContainer); // 0x0071A768-0x0071A770
		public int CameraDeviceGetFieldBool(string key, IntPtr value); // 0x0071A770-0x0071A778
		public int CameraDeviceGetFieldFloat(string key, IntPtr value); // 0x0071A778-0x0071A780
		public int CameraDeviceGetFieldInt64(string key, IntPtr value); // 0x0071A780-0x0071A788
		public int CameraDeviceGetFieldInt64Range(string key, IntPtr intRange); // 0x0071A788-0x0071A790
		public int CameraDeviceGetFieldString(string key, StringBuilder value, int maxLength); // 0x0071A790-0x0071A798
		public int CameraDeviceGetNumCameraFields(); // 0x0071A798-0x0071A7A0
		public int CameraDeviceGetNumVideoModes(); // 0x0071A7A0-0x0071A7A8
		public void CameraDeviceGetVideoMode(int idx, IntPtr videoMode); // 0x0071A7A8-0x0071A7AC
		public int CameraDeviceInitCamera(); // 0x0071A7AC-0x0071A7B4
		public int CameraDeviceSelectVideoMode(int idx); // 0x0071A7B4-0x0071A7BC
		public void CameraDeviceSetCameraConfiguration(int width, int height); // 0x0071A7BC-0x0071A7C0
		public int CameraDeviceSetFieldBool(string key, bool value); // 0x0071A7C0-0x0071A7C8
		public int CameraDeviceSetFieldFloat(string key, float value); // 0x0071A7C8-0x0071A7D0
		public int CameraDeviceSetFieldInt64(string key, long value); // 0x0071A7D0-0x0071A7D8
		public int CameraDeviceSetFieldInt64Range(string key, long intRangeFrom, long intRangeTo); // 0x0071A7D8-0x0071A7E0
		public int CameraDeviceSetFieldString(string key, string value); // 0x0071A7E0-0x0071A7E8
		public int CameraDeviceSetFlashTorchMode(int on); // 0x0071A7E8-0x0071A7F0
		public int CameraDeviceSetFocusMode(int focusMode); // 0x0071A7F0-0x0071A7F8
		public int CameraDeviceStartCamera(); // 0x0071A7F8-0x0071A800
		public int CameraDeviceStopCamera(); // 0x0071A800-0x0071A808
		public void CustomViewerParameters_AddDistortionCoefficient(IntPtr obj, float val); // 0x0071A808-0x0071A80C
		public void CustomViewerParameters_ClearDistortionCoefficients(IntPtr obj); // 0x0071A80C-0x0071A810
		public void CustomViewerParameters_delete(IntPtr obj); // 0x0071A810-0x0071A814
		public IntPtr CustomViewerParameters_new(float version, string name, string manufacturer); // 0x0071A814-0x0071A854
		public void CustomViewerParameters_SetButtonType(IntPtr obj, int val); // 0x0071A854-0x0071A858
		public void CustomViewerParameters_SetContainsMagnet(IntPtr obj, bool val); // 0x0071A858-0x0071A85C
		public void CustomViewerParameters_SetFieldOfView(IntPtr obj, IntPtr val); // 0x0071A85C-0x0071A860
		public void CustomViewerParameters_SetInterLensDistance(IntPtr obj, float val); // 0x0071A860-0x0071A864
		public void CustomViewerParameters_SetLensCentreToTrayDistance(IntPtr obj, float val); // 0x0071A864-0x0071A868
		public void CustomViewerParameters_SetScreenToLensDistance(IntPtr obj, float val); // 0x0071A868-0x0071A86C
		public void CustomViewerParameters_SetTrayAlignment(IntPtr obj, int val); // 0x0071A86C-0x0071A870
		public int CylinderTargetGetDimensions(IntPtr dataSetPtr, string trackableName, IntPtr dimensionPtr); // 0x0071A870-0x0071A878
		public int CylinderTargetSetBottomDiameter(IntPtr dataSetPtr, string trackableName, float bottomDiameter); // 0x0071A878-0x0071A880
		public int CylinderTargetSetSideLength(IntPtr dataSetPtr, string trackableName, float sideLength); // 0x0071A880-0x0071A888
		public int CylinderTargetSetTopDiameter(IntPtr dataSetPtr, string trackableName, float topDiameter); // 0x0071A888-0x0071A890
		public int DataSetCreateTrackable(IntPtr dataSetPtr, IntPtr trackableSourcePtr, StringBuilder trackableName, int nameMaxLength, IntPtr trackableData); // 0x0071A890-0x0071A898
		public int DataSetDestroyTrackable(IntPtr dataSetPtr, int trackableId); // 0x0071A898-0x0071A8A0
		public int DataSetExists(string relativePath, int storageType); // 0x0071A8A0-0x0071A8A8
		public int DataSetGetNumTrackableType(int trackableType, IntPtr dataSetPtr); // 0x0071A8A8-0x0071A8B0
		public int DataSetGetTrackableName(IntPtr dataSetPtr, int trackableId, StringBuilder trackableName, int nameMaxLength); // 0x0071A8B0-0x0071A8B8
		public IntPtr DataSetGetTrackablePtr(IntPtr dataSetPtr, int trackableId); // 0x0071A8B8-0x0071A8F8
		public int DataSetGetTrackablesOfType(int trackableType, IntPtr trackableDataArray, int trackableDataArrayLength, IntPtr dataSetPtr); // 0x0071A8F8-0x0071A900
		public int DataSetHasReachedTrackableLimit(IntPtr dataSetPtr); // 0x0071A900-0x0071A908
		public int DataSetLoad(string relativePath, int storageType, IntPtr dataSetPtr); // 0x0071A908-0x0071A910
		public void DeinitFrameState(IntPtr frameState); // 0x0071A910-0x0071A914
		public int Device_GetMode(); // 0x0071A914-0x0071A91C
		public IntPtr Device_GetSelectedViewer(); // 0x0071A91C-0x0071A95C
		public IntPtr Device_GetViewerList(); // 0x0071A95C-0x0071A99C
		public int Device_IsViewerPresent(); // 0x0071A99C-0x0071A9A4
		public int Device_SelectViewer(IntPtr vp); // 0x0071A9A4-0x0071A9AC
		public int Device_SetMode(int mode); // 0x0071A9AC-0x0071A9B4
		public void Device_SetViewerPresent(bool present); // 0x0071A9B4-0x0071A9B8
		public int DeviceIsEyewearDevice(); // 0x0071A9B8-0x0071A9C0
		public int DiagnosticsRecorderAddScreenshot(string imageFilePath, int storageType); // 0x0071A9C0-0x0071A9C8
		public int DiagnosticsRecorderAddUserComment(string comment); // 0x0071A9C8-0x0071A9D0
		public int DiagnosticsRecorderClearAll(); // 0x0071A9D0-0x0071A9D8
		public int DiagnosticsRecorderClearUnpinned(); // 0x0071A9D8-0x0071A9E0
		public int DiagnosticsRecorderDeinit(); // 0x0071A9E0-0x0071A9E8
		public IntPtr DiagnosticsRecorderGenerateDiagnostics(string fileNamePrefix); // 0x0071A9E8-0x0071AA28
		public int DiagnosticsRecorderInit(string diagnosticsDirectory, int storageType); // 0x0071AA28-0x0071AA30
		public int DiagnosticsRecorderStart(); // 0x0071AA30-0x0071AA38
		public int DiagnosticsRecorderStop(); // 0x0071AA38-0x0071AA40
		public int EyewearCPMClearProfile(int profileID); // 0x0071AA40-0x0071AA48
		public int EyewearCPMGetActiveProfile(); // 0x0071AA48-0x0071AA50
		public int EyewearCPMGetCameraToEyePose(int profileID, int eyeID, IntPtr matrix); // 0x0071AA50-0x0071AA58
		public int EyewearCPMGetEyeProjection(int profileID, int eyeID, IntPtr matrix); // 0x0071AA58-0x0071AA60
		public int EyewearCPMGetMaxCount(); // 0x0071AA60-0x0071AA68
		public IntPtr EyewearCPMGetProfileName(int profileID); // 0x0071AA68-0x0071AAA8
		public int EyewearCPMGetUsedCount(); // 0x0071AAA8-0x0071AAB0
		public int EyewearCPMIsProfileUsed(int profileID); // 0x0071AAB0-0x0071AAB8
		public int EyewearCPMSetActiveProfile(int profileID); // 0x0071AAB8-0x0071AAC0
		public int EyewearCPMSetCameraToEyePose(int profileID, int eyeID, IntPtr matrix); // 0x0071AAC0-0x0071AAC8
		public int EyewearCPMSetEyeProjection(int profileID, int eyeID, IntPtr matrix); // 0x0071AAC8-0x0071AAD0
		public int EyewearCPMSetProfileName(int profileID, IntPtr name); // 0x0071AAD0-0x0071AAD8
		public int EyewearDeviceGetScreenOrientation(); // 0x0071AAD8-0x0071AAE0
		public int EyewearDeviceIsDisplayExtended(); // 0x0071AAE0-0x0071AAE8
		public int EyewearDeviceIsDisplayExtendedGLOnly(); // 0x0071AAE8-0x0071AAF0
		public int EyewearDeviceIsDualDisplay(); // 0x0071AAF0-0x0071AAF8
		public int EyewearDeviceIsPredictiveTrackingEnabled(); // 0x0071AAF8-0x0071AB00
		public int EyewearDeviceIsSeeThru(); // 0x0071AB00-0x0071AB08
		public int EyewearDeviceSetDisplayExtended(bool enable); // 0x0071AB08-0x0071AB10
		public int EyewearDeviceSetPredictiveTracking(bool enable); // 0x0071AB10-0x0071AB18
		public float EyewearUserCalibratorGetMaxScaleHint(); // 0x0071AB18-0x0071AB20
		public float EyewearUserCalibratorGetMinScaleHint(); // 0x0071AB20-0x0071AB28
		public int EyewearUserCalibratorGetProjectionMatrix(IntPtr readingsDataArray, int numReadings, IntPtr cameraToEyeContainer, IntPtr projectionContainer); // 0x0071AB28-0x0071AB30
		public int EyewearUserCalibratorInit(int surfaceWidth, int surfaceHeight, int targetWidth, int targetHeight); // 0x0071AB30-0x0071AB38
		public int EyewearUserCalibratorIsStereoStretched(); // 0x0071AB38-0x0071AB40
		public void FrameCounterGetBenchmarkingData(IntPtr benchmarkingData); // 0x0071AB40-0x0071AB44
		public int GetCameraThreadID(); // 0x0071AB44-0x0071AB4C
		public void GetVuforiaLibraryVersion(StringBuilder value, int maxLength); // 0x0071AB4C-0x0071AB50
		public int GuideViewGetImage(IntPtr guideViewPtr, IntPtr imageDataPtr); // 0x0071AB50-0x0071AB58
		public IntPtr GuideViewGetName(IntPtr guideViewPtr); // 0x0071AB58-0x0071AB98
		public int GuideViewGetPose(IntPtr guideViewPtr, IntPtr position, IntPtr quaternion); // 0x0071AB98-0x0071ABA0
		public void GuideViewSetPose(IntPtr guideViewPtr, IntPtr position, IntPtr quaternion); // 0x0071ABA0-0x0071ABA4
		public int HasSurfaceBeenRecreated(); // 0x0071ABA4-0x0071ABAC
		public int ImageTargetBuilderBuild(string name, float screenSizeWidth); // 0x0071ABAC-0x0071ABB4
		public int ImageTargetBuilderGetFrameQuality(); // 0x0071ABB4-0x0071ABBC
		public IntPtr ImageTargetBuilderGetTrackableSource(); // 0x0071ABBC-0x0071ABFC
		public void ImageTargetBuilderStartScan(); // 0x0071ABFC-0x0071AC00
		public void ImageTargetBuilderStopScan(); // 0x0071AC00-0x0071AC04
		public int ImageTargetCreateVirtualButton(IntPtr dataSetPtr, string trackableName, string virtualButtonName, IntPtr rectData); // 0x0071AC04-0x0071AC0C
		public int ImageTargetDestroyVirtualButton(IntPtr dataSetPtr, string trackableName, string virtualButtonName); // 0x0071AC0C-0x0071AC14
		public int ImageTargetGetNumVirtualButtons(IntPtr dataSetPtr, string trackableName); // 0x0071AC14-0x0071AC1C
		public int ImageTargetGetVirtualButtonName(IntPtr dataSetPtr, string trackableName, int idx, StringBuilder vbName, int nameMaxLength); // 0x0071AC1C-0x0071AC24
		public int ImageTargetGetVirtualButtons(IntPtr virtualButtonDataArray, IntPtr rectangleDataArray, int virtualButtonDataArrayLength, IntPtr dataSetPtr, string trackableName); // 0x0071AC24-0x0071AC2C
		public void InitFrameState(IntPtr frameState); // 0x0071AC2C-0x0071AC30
		public void InitPlatformNative(); // 0x0071AC30-0x0071AC34
		public int ModelTargetGetActiveGuideViewIndexFromTrackable(IntPtr trackablePtr); // 0x0071AC34-0x0071AC3C
		public int ModelTargetGetBoundingBox(IntPtr dataSetPtr, string trackableName, IntPtr centerPtr, IntPtr halfExtents); // 0x0071AC3C-0x0071AC44
		public IntPtr ModelTargetGetGuideViewFromTrackable(IntPtr trackablePtr, int index); // 0x0071AC44-0x0071AC84
		public int ModelTargetGetNumGuideViewsFromTrackable(IntPtr trackablePtr); // 0x0071AC84-0x0071AC8C
		public int ModelTargetGetSize(IntPtr dataSetPtr, string trackableName, IntPtr sizePtr); // 0x0071AC8C-0x0071AC94
		public int ModelTargetSetActiveGuideViewIndexFromTrackable(IntPtr trackablePtr, int idx); // 0x0071AC94-0x0071AC9C
		public int ModelTargetSetSize(IntPtr dataSetPtr, string trackableName, IntPtr sizePtr); // 0x0071AC9C-0x0071ACA4
		public float MultiTargetGetLargestSizeComponent(IntPtr dataSetPtr, string trackableName); // 0x0071ACA4-0x0071ACAC
		public void NativeUnity_disableDistortion(bool disable); // 0x0071ACAC-0x0071ACB0
		public void NativeUnity_DisableEyeTextureOverride(); // 0x0071ACB0-0x0071ACB4
		public void NativeUnity_EnableEyeTextureOverride(int eyeTextureWidth, int eyeTextureHeight, float vertFoVRad); // 0x0071ACB4-0x0071ACB8
		public int NativeUnity_IsVuforiaVRDeviceReady(); // 0x0071ACB8-0x0071ACC0
		public void NativeUnity_ResetStereoProjectionMatrices(); // 0x0071ACC0-0x0071ACC4
		public void NativeUnity_SetDeviceConnected(bool connected); // 0x0071ACC4-0x0071ACC8
		public void NativeUnity_SetDistortionMeshNeedsRefresh(bool enabled); // 0x0071ACC8-0x0071ACCC
		public void NativeUnity_SetEyeOffsets(IntPtr leftEyePosition, IntPtr leftEyeRotation, IntPtr rightEyePosition, IntPtr rightEyeRotation); // 0x0071ACCC-0x0071ACD0
		public void NativeUnity_SetSingleCullingMatrix(IntPtr projectionMatrix, IntPtr viewMatrix); // 0x0071ACD0-0x0071ACD4
		public void NativeUnity_SetStereoProjectionMatrix(int eyeId, IntPtr projectionMatrix); // 0x0071ACD4-0x0071ACD8
		public void NativeUnity_SetVuforiaVRDeviceReady(bool isReady); // 0x0071ACD8-0x0071ACDC
		public int ObjectTargetGetSize(IntPtr dataSetPtr, string trackableName, IntPtr sizePtr); // 0x0071ACDC-0x0071ACE4
		public int ObjectTargetSetSize(IntPtr dataSetPtr, string trackableName, IntPtr sizePtr); // 0x0071ACE4-0x0071ACEC
		public int ObjectTrackerActivateDataSet(IntPtr dataSetPtr); // 0x0071ACEC-0x0071ACF4
		public IntPtr ObjectTrackerCreateDataSet(); // 0x0071ACF4-0x0071AD34
		public int ObjectTrackerDeactivateDataSet(IntPtr dataSetPtr); // 0x0071AD34-0x0071AD3C
		public int ObjectTrackerDestroyDataSet(IntPtr dataSetPtr); // 0x0071AD3C-0x0071AD44
		public IntPtr ObjectTrackerGetTargetFinder(int targetFinderType); // 0x0071AD44-0x0071AD84
		public void OnPause(); // 0x0071AD84-0x0071AD88
		public void OnResume(); // 0x0071AD88-0x0071AD8C
		public void OnSurfaceChanged(int width, int height); // 0x0071AD8C-0x0071AD90
		public int PositionalDeviceTracker_CreateAnchorFromHitTestResult(string name, IntPtr hitTestResult, IntPtr anchorData); // 0x0071AD90-0x0071AD98
		public int PositionalDeviceTracker_CreateAnchorFromPose(string name, IntPtr unityPosition, IntPtr unityOrientation, IntPtr anchorData); // 0x0071AD98-0x0071ADA0
		public int PositionalDeviceTracker_DestroyAnchor(int anchor); // 0x0071ADA0-0x0071ADA8
		public int PositionalDeviceTracker_Reset(); // 0x0071ADA8-0x0071ADB0
		public void QcarAddCameraFrame(IntPtr pixels, int width, int height, int format, int stride, int frameIdx, int flipHorizontally); // 0x0071ADB0-0x0071ADB4
		public void QcarDeinit(); // 0x0071ADB4-0x0071ADB8
		public int QcarGetActiveFusionProvider(); // 0x0071ADB8-0x0071ADC0
		public int QcarGetBufferSize(int width, int height, int format); // 0x0071ADC0-0x0071ADC8
		public int QcarInit(string licenseKey); // 0x0071ADC8-0x0071ADD0
		public int QcarSetAllowedFusionProviders(int providerTypes); // 0x0071ADD0-0x0071ADD8
		public int QcarSetDriverLibrary(string libraryName, IntPtr userData); // 0x0071ADD8-0x0071ADE0
		public int QcarSetFrameFormat(int format, int enabled); // 0x0071ADE0-0x0071ADE8
		public int QcarSetHint(uint hint, int value); // 0x0071ADE8-0x0071ADF0
		public int RecorderInit(string filePath); // 0x0071ADF0-0x0071ADF8
		public int RecorderStart(); // 0x0071ADF8-0x0071AE00
		public int RecorderStop(); // 0x0071AE00-0x0071AE08
		public IntPtr RendererCreateNativeTexture(uint width, uint height, int format); // 0x0071AE08-0x0071AE48
		public int RendererGetGraphicsAPI(); // 0x0071AE48-0x0071AE50
		public int RendererGetRecommendedFps(int flags); // 0x0071AE50-0x0071AE58
		public IntPtr RendererGetRenderEventCallback(); // 0x0071AE58-0x0071AE98
		public void RendererGetVideoBackgroundCfg(IntPtr bgCfg); // 0x0071AE98-0x0071AE9C
		public int RendererGetVideoBackgroundTextureInfo(IntPtr texInfo); // 0x0071AE9C-0x0071AEA4
		public IntPtr RendererGetVideoTextureUpdateCallback(); // 0x0071AEA4-0x0071AEE4
		public int RendererIsVideoBackgroundTextureInfoAvailable(); // 0x0071AEE4-0x0071AEEC
		public void RendererRequestNativeTextureCreation(uint width, uint height, int format); // 0x0071AEEC-0x0071AEF0
		public void RendererSetVideoBackgroundCfg(IntPtr bgCfg); // 0x0071AEF0-0x0071AEF4
		public void RendererSetVideoBackgroundRenderingInfo(int format, int width, int height); // 0x0071AEF4-0x0071AEF8
		public int RendererSetVideoBackgroundTextureID(int textureID); // 0x0071AEF8-0x0071AF00
		public int RendererSetVideoBackgroundTexturePtr(IntPtr texturePtr); // 0x0071AF00-0x0071AF08
		public IntPtr RendererTryGetVideoBackgroundTexturePtr(); // 0x0071AF08-0x0071AF48
		public void RenderingPrimitives_DeleteCopy(); // 0x0071AF48-0x0071AF4C
		public void RenderingPrimitives_GetDistortionMesh(int viewId, IntPtr meshData); // 0x0071AF4C-0x0071AF50
		public void RenderingPrimitives_GetDistortionMeshSize(int viewId, IntPtr size); // 0x0071AF50-0x0071AF54
		public void RenderingPrimitives_GetDistortionTextureViewport(int viewID, IntPtr viewportContainer); // 0x0071AF54-0x0071AF58
		public void RenderingPrimitives_GetEffectiveFov(int viewID, IntPtr fovContainer); // 0x0071AF58-0x0071AF5C
		public void RenderingPrimitives_GetEyeDisplayAdjustmentMatrix(int viewID, IntPtr matrixContainer); // 0x0071AF5C-0x0071AF60
		public void RenderingPrimitives_GetNormalizedViewport(int viewID, IntPtr viewportContainer); // 0x0071AF60-0x0071AF64
		public void RenderingPrimitives_GetProjectionMatrix(int viewID, float near, float far, IntPtr projectionContainer, int screenOrientation); // 0x0071AF64-0x0071AF68
		public void RenderingPrimitives_GetVideoBackgroundProjectionMatrix(int viewID, float near, float far, IntPtr projectionContainer, int screenOrientation); // 0x0071AF68-0x0071AF6C
		public void RenderingPrimitives_GetViewport(int viewID, IntPtr viewportContainer); // 0x0071AF6C-0x0071AF70
		public void RenderingPrimitives_GetViewportCentreToEyeAxis(int viewID, IntPtr vectorContainer); // 0x0071AF70-0x0071AF74
		public void RenderingPrimitives_UpdateCopy(); // 0x0071AF74-0x0071AF78
		public int RotationalDeviceTracker_GetModelCorrectionMode(); // 0x0071AF78-0x0071AF80
		public void RotationalDeviceTracker_GetModelCorrectionTransform(IntPtr pivot); // 0x0071AF80-0x0071AF84
		public int RotationalDeviceTracker_GetPosePrediction(); // 0x0071AF84-0x0071AF8C
		public int RotationalDeviceTracker_Recenter(); // 0x0071AF8C-0x0071AF94
		public int RotationalDeviceTracker_SetModelCorrectionMode(int mode); // 0x0071AF94-0x0071AF9C
		public int RotationalDeviceTracker_SetModelCorrectionModeWithTransform(int mode, IntPtr pivot); // 0x0071AF9C-0x0071AFA4
		public int RotationalDeviceTracker_SetPosePrediction(bool mode); // 0x0071AFA4-0x0071AFAC
		public void SetApplicationEnvironment(string unityVersionString, int sdkWrapperType); // 0x0071AFAC-0x0071AFB0
		public int SetHolographicAppCS(IntPtr appSpecifiedCS); // 0x0071AFB0-0x0071AFB8
		public void SetRenderBuffers(IntPtr colorBuffer); // 0x0071AFB8-0x0071AFBC
		public void SetStateBufferSize(int size); // 0x0071AFBC-0x0071AFC0
		public void SmartTerrain_free_hitTest_list(IntPtr listPtr); // 0x0071AFC0-0x0071AFC4
		public IntPtr SmartTerrain_hitTest(IntPtr unityViewPortPosition, float deviceHeight, int orientation); // 0x0071AFC4-0x0071B004
		public void TargetFinderClearTrackables(IntPtr targetFinderPtr); // 0x0071B004-0x0071B008
		public int TargetFinderDeinit(IntPtr targetFinderPtr); // 0x0071B008-0x0071B010
		public int TargetFinderEnableTracking(IntPtr searchResult, IntPtr trackableData, IntPtr targetFinderPtr); // 0x0071B010-0x0071B018
		public void TargetFinderFreeCloudRecoResultList(IntPtr listPtr); // 0x0071B018-0x0071B01C
		public void TargetFinderFreeModelRecoResultList(IntPtr listPtr); // 0x0071B01C-0x0071B020
		public int TargetFinderGetInitState(IntPtr targetFinderPtr); // 0x0071B020-0x0071B028
		public IntPtr TargetFinderGetObjectTarget(IntPtr targetFinderPtr, int index); // 0x0071B028-0x0071B068
		public void TargetFinderGetObjectTargets(IntPtr trackableIdArray, int trackableIdArrayLength, IntPtr targetFinderPtr); // 0x0071B068-0x0071B06C
		public int TargetFinderStartInitCloudReco(IntPtr targetFinderPtr, string userAuth, string secretAuth); // 0x0071B06C-0x0071B074
		public int TargetFinderStartInitModelReco(IntPtr targetFinderPtr, string localDatabasePath, int storageType); // 0x0071B074-0x0071B07C
		public int TargetFinderStartRecognition(IntPtr targetFinderPtr); // 0x0071B07C-0x0071B084
		public int TargetFinderStop(IntPtr targetFinderPtr); // 0x0071B084-0x0071B08C
		public IntPtr TargetFinderUpdate(IntPtr targetFinderState, int filterMode, IntPtr targetFinderPtr); // 0x0071B08C-0x0071B0CC
		public int TrackerManagerDeinitTracker(int trackerTypeID); // 0x0071B0CC-0x0071B0D4
		public int TrackerManagerInitTracker(int trackerTypeID); // 0x0071B0D4-0x0071B0DC
		public int TrackerStart(int trackerTypeID); // 0x0071B0DC-0x0071B0E4
		public void TrackerStop(int trackerTypeID); // 0x0071B0E4-0x0071B0E8
		public int UpdateQCAR(IntPtr imageHeaderDataArray, int imageHeaderArrayLength, IntPtr frameState, int screenOrientation); // 0x0071B0E8-0x0071B0F0
		public int ViewerParameters_ContainsMagnet(IntPtr obj); // 0x0071B0F0-0x0071B0F8
		public IntPtr ViewerParameters_copy(IntPtr obj); // 0x0071B0F8-0x0071B138
		public void ViewerParameters_delete(IntPtr obj); // 0x0071B138-0x0071B13C
		public int ViewerParameters_GetButtonType(IntPtr obj); // 0x0071B13C-0x0071B144
		public float ViewerParameters_GetDistortionCoefficient(IntPtr obj, int idx); // 0x0071B144-0x0071B14C
		public void ViewerParameters_GetFieldOfView(IntPtr obj, IntPtr result); // 0x0071B14C-0x0071B150
		public float ViewerParameters_GetInterLensDistance(IntPtr obj); // 0x0071B150-0x0071B158
		public float ViewerParameters_GetLensCentreToTrayDistance(IntPtr obj); // 0x0071B158-0x0071B160
		public IntPtr ViewerParameters_GetManufacturer(IntPtr obj); // 0x0071B160-0x0071B1A0
		public IntPtr ViewerParameters_GetName(IntPtr obj); // 0x0071B1A0-0x0071B1E0
		public int ViewerParameters_GetNumDistortionCoefficients(IntPtr obj); // 0x0071B1E0-0x0071B1E8
		public float ViewerParameters_GetScreenToLensDistance(IntPtr obj); // 0x0071B1E8-0x0071B1F0
		public int ViewerParameters_GetTrayAlignment(IntPtr obj); // 0x0071B1F0-0x0071B1F8
		public float ViewerParameters_GetVersion(IntPtr obj); // 0x0071B1F8-0x0071B200
		public IntPtr ViewerParametersList_Begin(IntPtr vpList); // 0x0071B200-0x0071B240
		public IntPtr ViewerParametersList_GetByIndex(IntPtr vpList, int idx); // 0x0071B240-0x0071B280
		public IntPtr ViewerParametersList_GetByNameManufacturer(IntPtr vpList, string name, string manufacturer); // 0x0071B280-0x0071B2C0
		public IntPtr ViewerParametersList_GetListForAuthoringTools(); // 0x0071B2C0-0x0071B300
		public IntPtr ViewerParametersList_Next(IntPtr vpList, IntPtr vpLast); // 0x0071B300-0x0071B340
		public void ViewerParametersList_SetSDKFilter(IntPtr vpList, string filter); // 0x0071B340-0x0071B344
		public int ViewerParametersList_Size(IntPtr vpList); // 0x0071B344-0x0071B34C
		public int VirtualButtonGetId(IntPtr dataSetPtr, string trackableName, string virtualButtonName); // 0x0071B34C-0x0071B354
		public int VirtualButtonSetAreaRectangle(IntPtr dataSetPtr, string trackableName, string virtualButtonName, IntPtr rectData); // 0x0071B354-0x0071B35C
		public int VirtualButtonSetEnabled(IntPtr dataSetPtr, string trackableName, string virtualButtonName, int enabled); // 0x0071B35C-0x0071B364
		public int VirtualButtonSetSensitivity(IntPtr dataSetPtr, string trackableName, string virtualButtonName, int sensitivity); // 0x0071B364-0x0071B36C
		public int VuMarkTargetGetInstanceImage(int vuMarkTargetID, IntPtr instanceImage); // 0x0071B36C-0x0071B374
		public int VuMarkTemplateGetOrigin(IntPtr dataSetPtr, string trackableName, IntPtr originPtr); // 0x0071B374-0x0071B37C
		public int VuMarkTemplateGetVuMarkUserData(IntPtr dataSetPtr, string trackableName, StringBuilder data, uint dataLength); // 0x0071B37C-0x0071B384
		public int VuMarkTemplateSetTrackingFromRuntimeAppearance(IntPtr dataSetPtr, string trackableName, bool enable); // 0x0071B384-0x0071B38C
	}

	public interface IVuforiaWrapper // TypeDefIndex: 3435
	{
		// Methods
		int CameraDeviceDeinitCamera();
		void CameraDeviceGetCameraField(IntPtr cameraField, int idx);
		int CameraDeviceGetCameraFieldOfViewRads(IntPtr fovVectorContainer);
		int CameraDeviceGetFieldBool(string key, IntPtr value);
		int CameraDeviceGetFieldFloat(string key, IntPtr value);
		int CameraDeviceGetFieldInt64(string key, IntPtr value);
		int CameraDeviceGetFieldInt64Range(string key, IntPtr intRange);
		int CameraDeviceGetFieldString(string key, StringBuilder value, int maxLength);
		int CameraDeviceGetNumCameraFields();
		int CameraDeviceGetNumVideoModes();
		void CameraDeviceGetVideoMode(int idx, IntPtr videoMode);
		int CameraDeviceInitCamera();
		int CameraDeviceSelectVideoMode(int idx);
		void CameraDeviceSetCameraConfiguration(int width, int height);
		int CameraDeviceSetFieldBool(string key, bool value);
		int CameraDeviceSetFieldFloat(string key, float value);
		int CameraDeviceSetFieldInt64(string key, long value);
		int CameraDeviceSetFieldInt64Range(string key, long intRangeFrom, long intRangeTo);
		int CameraDeviceSetFieldString(string key, string value);
		int CameraDeviceSetFlashTorchMode(int on);
		int CameraDeviceSetFocusMode(int focusMode);
		int CameraDeviceStartCamera();
		int CameraDeviceStopCamera();
		void CustomViewerParameters_AddDistortionCoefficient(IntPtr obj, float val);
		void CustomViewerParameters_ClearDistortionCoefficients(IntPtr obj);
		void CustomViewerParameters_delete(IntPtr obj);
		IntPtr CustomViewerParameters_new(float version, string name, string manufacturer);
		void CustomViewerParameters_SetButtonType(IntPtr obj, int val);
		void CustomViewerParameters_SetContainsMagnet(IntPtr obj, bool val);
		void CustomViewerParameters_SetFieldOfView(IntPtr obj, IntPtr val);
		void CustomViewerParameters_SetInterLensDistance(IntPtr obj, float val);
		void CustomViewerParameters_SetLensCentreToTrayDistance(IntPtr obj, float val);
		void CustomViewerParameters_SetScreenToLensDistance(IntPtr obj, float val);
		void CustomViewerParameters_SetTrayAlignment(IntPtr obj, int val);
		int CylinderTargetGetDimensions(IntPtr dataSetPtr, string trackableName, IntPtr dimensionPtr);
		int CylinderTargetSetBottomDiameter(IntPtr dataSetPtr, string trackableName, float bottomDiameter);
		int CylinderTargetSetSideLength(IntPtr dataSetPtr, string trackableName, float sideLength);
		int CylinderTargetSetTopDiameter(IntPtr dataSetPtr, string trackableName, float topDiameter);
		int DataSetCreateTrackable(IntPtr dataSetPtr, IntPtr trackableSourcePtr, StringBuilder trackableName, int nameMaxLength, IntPtr trackableData);
		int DataSetDestroyTrackable(IntPtr dataSetPtr, int trackableId);
		int DataSetExists(string relativePath, int storageType);
		int DataSetGetNumTrackableType(int trackableType, IntPtr dataSetPtr);
		int DataSetGetTrackableName(IntPtr dataSetPtr, int trackableId, StringBuilder trackableName, int nameMaxLength);
		IntPtr DataSetGetTrackablePtr(IntPtr dataSetPtr, int trackableId);
		int DataSetGetTrackablesOfType(int trackableType, IntPtr trackableDataArray, int trackableDataArrayLength, IntPtr dataSetPtr);
		int DataSetHasReachedTrackableLimit(IntPtr dataSetPtr);
		int DataSetLoad(string relativePath, int storageType, IntPtr dataSetPtr);
		void DeinitFrameState(IntPtr frameState);
		int Device_GetMode();
		IntPtr Device_GetSelectedViewer();
		IntPtr Device_GetViewerList();
		int Device_IsViewerPresent();
		int Device_SelectViewer(IntPtr vp);
		int Device_SetMode(int mode);
		void Device_SetViewerPresent(bool present);
		int DeviceIsEyewearDevice();
		int DiagnosticsRecorderAddScreenshot(string imageFilePath, int storageType);
		int DiagnosticsRecorderAddUserComment(string comment);
		int DiagnosticsRecorderClearAll();
		int DiagnosticsRecorderClearUnpinned();
		int DiagnosticsRecorderDeinit();
		IntPtr DiagnosticsRecorderGenerateDiagnostics(string fileNamePrefix);
		int DiagnosticsRecorderInit(string diagnosticsDirectory, int storageType);
		int DiagnosticsRecorderStart();
		int DiagnosticsRecorderStop();
		int EyewearCPMClearProfile(int profileID);
		int EyewearCPMGetActiveProfile();
		int EyewearCPMGetCameraToEyePose(int profileID, int eyeID, IntPtr matrix);
		int EyewearCPMGetEyeProjection(int profileID, int eyeID, IntPtr matrix);
		int EyewearCPMGetMaxCount();
		IntPtr EyewearCPMGetProfileName(int profileID);
		int EyewearCPMGetUsedCount();
		int EyewearCPMIsProfileUsed(int profileID);
		int EyewearCPMSetActiveProfile(int profileID);
		int EyewearCPMSetCameraToEyePose(int profileID, int eyeID, IntPtr matrix);
		int EyewearCPMSetEyeProjection(int profileID, int eyeID, IntPtr matrix);
		int EyewearCPMSetProfileName(int profileID, IntPtr name);
		int EyewearDeviceGetScreenOrientation();
		int EyewearDeviceIsDisplayExtended();
		int EyewearDeviceIsDisplayExtendedGLOnly();
		int EyewearDeviceIsDualDisplay();
		int EyewearDeviceIsPredictiveTrackingEnabled();
		int EyewearDeviceIsSeeThru();
		int EyewearDeviceSetDisplayExtended(bool enable);
		int EyewearDeviceSetPredictiveTracking(bool enable);
		float EyewearUserCalibratorGetMaxScaleHint();
		float EyewearUserCalibratorGetMinScaleHint();
		int EyewearUserCalibratorGetProjectionMatrix(IntPtr readingsDataArray, int numReadings, IntPtr cameraToEyeContainer, IntPtr projectionContainer);
		int EyewearUserCalibratorInit(int surfaceWidth, int surfaceHeight, int targetWidth, int targetHeight);
		int EyewearUserCalibratorIsStereoStretched();
		void FrameCounterGetBenchmarkingData(IntPtr benchmarkingData);
		int GetCameraThreadID();
		void GetVuforiaLibraryVersion(StringBuilder value, int maxLength);
		int GuideViewGetImage(IntPtr guideViewPtr, IntPtr imageDataPtr);
		IntPtr GuideViewGetName(IntPtr guideViewPtr);
		int GuideViewGetPose(IntPtr guideViewPtr, IntPtr position, IntPtr quaternion);
		void GuideViewSetPose(IntPtr guideViewPtr, IntPtr position, IntPtr quaternion);
		int HasSurfaceBeenRecreated();
		int ImageTargetBuilderBuild(string name, float screenSizeWidth);
		int ImageTargetBuilderGetFrameQuality();
		IntPtr ImageTargetBuilderGetTrackableSource();
		void ImageTargetBuilderStartScan();
		void ImageTargetBuilderStopScan();
		int ImageTargetCreateVirtualButton(IntPtr dataSetPtr, string trackableName, string virtualButtonName, IntPtr rectData);
		int ImageTargetDestroyVirtualButton(IntPtr dataSetPtr, string trackableName, string virtualButtonName);
		int ImageTargetGetNumVirtualButtons(IntPtr dataSetPtr, string trackableName);
		int ImageTargetGetVirtualButtonName(IntPtr dataSetPtr, string trackableName, int idx, StringBuilder vbName, int nameMaxLength);
		int ImageTargetGetVirtualButtons(IntPtr virtualButtonDataArray, IntPtr rectangleDataArray, int virtualButtonDataArrayLength, IntPtr dataSetPtr, string trackableName);
		void InitFrameState(IntPtr frameState);
		void InitPlatformNative();
		int ModelTargetGetActiveGuideViewIndexFromTrackable(IntPtr trackablePtr);
		int ModelTargetGetBoundingBox(IntPtr dataSetPtr, string trackableName, IntPtr centerPtr, IntPtr halfExtents);
		IntPtr ModelTargetGetGuideViewFromTrackable(IntPtr trackablePtr, int index);
		int ModelTargetGetNumGuideViewsFromTrackable(IntPtr trackablePtr);
		int ModelTargetGetSize(IntPtr dataSetPtr, string trackableName, IntPtr sizePtr);
		int ModelTargetSetActiveGuideViewIndexFromTrackable(IntPtr trackablePtr, int idx);
		int ModelTargetSetSize(IntPtr dataSetPtr, string trackableName, IntPtr sizePtr);
		float MultiTargetGetLargestSizeComponent(IntPtr dataSetPtr, string trackableName);
		void NativeUnity_disableDistortion(bool disable);
		void NativeUnity_DisableEyeTextureOverride();
		void NativeUnity_EnableEyeTextureOverride(int eyeTextureWidth, int eyeTextureHeight, float vertFoVRad);
		int NativeUnity_IsVuforiaVRDeviceReady();
		void NativeUnity_ResetStereoProjectionMatrices();
		void NativeUnity_SetDeviceConnected(bool connected);
		void NativeUnity_SetDistortionMeshNeedsRefresh(bool enabled);
		void NativeUnity_SetEyeOffsets(IntPtr leftEyePosition, IntPtr leftEyeRotation, IntPtr rightEyePosition, IntPtr rightEyeRotation);
		void NativeUnity_SetSingleCullingMatrix(IntPtr projectionMatrix, IntPtr viewMatrix);
		void NativeUnity_SetStereoProjectionMatrix(int eyeId, IntPtr projectionMatrix);
		void NativeUnity_SetVuforiaVRDeviceReady(bool isReady);
		int ObjectTargetGetSize(IntPtr dataSetPtr, string trackableName, IntPtr sizePtr);
		int ObjectTargetSetSize(IntPtr dataSetPtr, string trackableName, IntPtr sizePtr);
		int ObjectTrackerActivateDataSet(IntPtr dataSetPtr);
		IntPtr ObjectTrackerCreateDataSet();
		int ObjectTrackerDeactivateDataSet(IntPtr dataSetPtr);
		int ObjectTrackerDestroyDataSet(IntPtr dataSetPtr);
		IntPtr ObjectTrackerGetTargetFinder(int targetFinderType);
		void OnPause();
		void OnResume();
		void OnSurfaceChanged(int width, int height);
		int PositionalDeviceTracker_CreateAnchorFromHitTestResult(string name, IntPtr hitTestResult, IntPtr anchorData);
		int PositionalDeviceTracker_CreateAnchorFromPose(string name, IntPtr unityPosition, IntPtr unityOrientation, IntPtr anchorData);
		int PositionalDeviceTracker_DestroyAnchor(int anchor);
		int PositionalDeviceTracker_Reset();
		void QcarAddCameraFrame(IntPtr pixels, int width, int height, int format, int stride, int frameIdx, int flipHorizontally);
		void QcarDeinit();
		int QcarGetActiveFusionProvider();
		int QcarGetBufferSize(int width, int height, int format);
		int QcarInit(string licenseKey);
		int QcarSetAllowedFusionProviders(int providerTypes);
		int QcarSetDriverLibrary(string libraryName, IntPtr userData);
		int QcarSetFrameFormat(int format, int enabled);
		int QcarSetHint(uint hint, int value);
		int RecorderInit(string filePath);
		int RecorderStart();
		int RecorderStop();
		IntPtr RendererCreateNativeTexture(uint width, uint height, int format);
		int RendererGetGraphicsAPI();
		int RendererGetRecommendedFps(int flags);
		IntPtr RendererGetRenderEventCallback();
		void RendererGetVideoBackgroundCfg(IntPtr bgCfg);
		int RendererGetVideoBackgroundTextureInfo(IntPtr texInfo);
		IntPtr RendererGetVideoTextureUpdateCallback();
		int RendererIsVideoBackgroundTextureInfoAvailable();
		void RendererRequestNativeTextureCreation(uint width, uint height, int format);
		void RendererSetVideoBackgroundCfg(IntPtr bgCfg);
		void RendererSetVideoBackgroundRenderingInfo(int format, int width, int height);
		int RendererSetVideoBackgroundTextureID(int textureID);
		int RendererSetVideoBackgroundTexturePtr(IntPtr texturePtr);
		IntPtr RendererTryGetVideoBackgroundTexturePtr();
		void RenderingPrimitives_DeleteCopy();
		void RenderingPrimitives_GetDistortionMesh(int viewId, IntPtr meshData);
		void RenderingPrimitives_GetDistortionMeshSize(int viewId, IntPtr size);
		void RenderingPrimitives_GetDistortionTextureViewport(int viewID, IntPtr viewportContainer);
		void RenderingPrimitives_GetEffectiveFov(int viewID, IntPtr fovContainer);
		void RenderingPrimitives_GetEyeDisplayAdjustmentMatrix(int viewID, IntPtr matrixContainer);
		void RenderingPrimitives_GetNormalizedViewport(int viewID, IntPtr viewportContainer);
		void RenderingPrimitives_GetProjectionMatrix(int viewID, float near, float far, IntPtr projectionContainer, int screenOrientation);
		void RenderingPrimitives_GetVideoBackgroundProjectionMatrix(int viewID, float near, float far, IntPtr projectionContainer, int screenOrientation);
		void RenderingPrimitives_GetViewport(int viewID, IntPtr viewportContainer);
		void RenderingPrimitives_GetViewportCentreToEyeAxis(int viewID, IntPtr vectorContainer);
		void RenderingPrimitives_UpdateCopy();
		int RotationalDeviceTracker_GetModelCorrectionMode();
		void RotationalDeviceTracker_GetModelCorrectionTransform(IntPtr pivot);
		int RotationalDeviceTracker_GetPosePrediction();
		int RotationalDeviceTracker_Recenter();
		int RotationalDeviceTracker_SetModelCorrectionMode(int mode);
		int RotationalDeviceTracker_SetModelCorrectionModeWithTransform(int mode, IntPtr pivot);
		int RotationalDeviceTracker_SetPosePrediction(bool mode);
		void SetApplicationEnvironment(string unityVersionString, int sdkWrapperType);
		int SetHolographicAppCS(IntPtr appSpecifiedCS);
		void SetRenderBuffers(IntPtr colorBuffer);
		void SetStateBufferSize(int size);
		void SmartTerrain_free_hitTest_list(IntPtr listPtr);
		IntPtr SmartTerrain_hitTest(IntPtr unityViewPortPosition, float deviceHeight, int orientation);
		void TargetFinderClearTrackables(IntPtr targetFinderPtr);
		int TargetFinderDeinit(IntPtr targetFinderPtr);
		int TargetFinderEnableTracking(IntPtr searchResult, IntPtr trackableData, IntPtr targetFinderPtr);
		void TargetFinderFreeCloudRecoResultList(IntPtr listPtr);
		void TargetFinderFreeModelRecoResultList(IntPtr listPtr);
		int TargetFinderGetInitState(IntPtr targetFinderPtr);
		IntPtr TargetFinderGetObjectTarget(IntPtr targetFinderPtr, int index);
		void TargetFinderGetObjectTargets(IntPtr trackableIdArray, int trackableIdArrayLength, IntPtr targetFinderPtr);
		int TargetFinderStartInitCloudReco(IntPtr targetFinderPtr, string userAuth, string secretAuth);
		int TargetFinderStartInitModelReco(IntPtr targetFinderPtr, string localDatabasePath, int storageType);
		int TargetFinderStartRecognition(IntPtr targetFinderPtr);
		int TargetFinderStop(IntPtr targetFinderPtr);
		IntPtr TargetFinderUpdate(IntPtr targetFinderState, int filterMode, IntPtr targetFinderPtr);
		int TrackerManagerDeinitTracker(int trackerTypeID);
		int TrackerManagerInitTracker(int trackerTypeID);
		int TrackerStart(int trackerTypeID);
		void TrackerStop(int trackerTypeID);
		int UpdateQCAR(IntPtr imageHeaderDataArray, int imageHeaderArrayLength, IntPtr frameState, int screenOrientation);
		int ViewerParameters_ContainsMagnet(IntPtr obj);
		IntPtr ViewerParameters_copy(IntPtr obj);
		void ViewerParameters_delete(IntPtr obj);
		int ViewerParameters_GetButtonType(IntPtr obj);
		float ViewerParameters_GetDistortionCoefficient(IntPtr obj, int idx);
		void ViewerParameters_GetFieldOfView(IntPtr obj, IntPtr result);
		float ViewerParameters_GetInterLensDistance(IntPtr obj);
		float ViewerParameters_GetLensCentreToTrayDistance(IntPtr obj);
		IntPtr ViewerParameters_GetManufacturer(IntPtr obj);
		IntPtr ViewerParameters_GetName(IntPtr obj);
		int ViewerParameters_GetNumDistortionCoefficients(IntPtr obj);
		float ViewerParameters_GetScreenToLensDistance(IntPtr obj);
		int ViewerParameters_GetTrayAlignment(IntPtr obj);
		float ViewerParameters_GetVersion(IntPtr obj);
		IntPtr ViewerParametersList_Begin(IntPtr vpList);
		IntPtr ViewerParametersList_GetByIndex(IntPtr vpList, int idx);
		IntPtr ViewerParametersList_GetByNameManufacturer(IntPtr vpList, string name, string manufacturer);
		IntPtr ViewerParametersList_GetListForAuthoringTools();
		IntPtr ViewerParametersList_Next(IntPtr vpList, IntPtr vpLast);
		void ViewerParametersList_SetSDKFilter(IntPtr vpList, string filter);
		int ViewerParametersList_Size(IntPtr vpList);
		int VirtualButtonGetId(IntPtr dataSetPtr, string trackableName, string virtualButtonName);
		int VirtualButtonSetAreaRectangle(IntPtr dataSetPtr, string trackableName, string virtualButtonName, IntPtr rectData);
		int VirtualButtonSetEnabled(IntPtr dataSetPtr, string trackableName, string virtualButtonName, int enabled);
		int VirtualButtonSetSensitivity(IntPtr dataSetPtr, string trackableName, string virtualButtonName, int sensitivity);
		int VuMarkTargetGetInstanceImage(int vuMarkTargetID, IntPtr instanceImage);
		int VuMarkTemplateGetOrigin(IntPtr dataSetPtr, string trackableName, IntPtr originPtr);
		int VuMarkTemplateGetVuMarkUserData(IntPtr dataSetPtr, string trackableName, StringBuilder data, uint dataLength);
		int VuMarkTemplateSetTrackingFromRuntimeAppearance(IntPtr dataSetPtr, string trackableName, bool enable);
	}

	internal class VuforiaNativeWrapper : IVuforiaWrapper // TypeDefIndex: 3436
	{
		// Constructors
		public VuforiaNativeWrapper(); // 0x0071A754-0x0071A75C
	
		// Methods
		public int CameraDeviceDeinitCamera(); // 0x0070FDC4-0x0070FDC8
		public void CameraDeviceGetCameraField(IntPtr cameraField, int idx); // 0x0070FE54-0x0070FE60
		public int CameraDeviceGetCameraFieldOfViewRads(IntPtr fovVectorContainer); // 0x0070FF0C-0x0070FF14
		public int CameraDeviceGetFieldBool(string key, IntPtr value); // 0x0070FFB0-0x0070FFBC
		public int CameraDeviceGetFieldFloat(string key, IntPtr value); // 0x00710080-0x0071008C
		public int CameraDeviceGetFieldInt64(string key, IntPtr value); // 0x00710150-0x0071015C
		public int CameraDeviceGetFieldInt64Range(string key, IntPtr intRange); // 0x00710220-0x0071022C
		public int CameraDeviceGetFieldString(string key, StringBuilder value, int maxLength); // 0x007102F0-0x00710300
		public int CameraDeviceGetNumCameraFields(); // 0x007103F0-0x007103F4
		public int CameraDeviceGetNumVideoModes(); // 0x00710480-0x00710484
		public void CameraDeviceGetVideoMode(int idx, IntPtr videoMode); // 0x00710510-0x0071051C
		public int CameraDeviceInitCamera(); // 0x007105C8-0x007105CC
		public int CameraDeviceSelectVideoMode(int idx); // 0x00710658-0x00710660
		public void CameraDeviceSetCameraConfiguration(int width, int height); // 0x007106FC-0x00710708
		public int CameraDeviceSetFieldBool(string key, bool value); // 0x007107B4-0x007107C4
		public int CameraDeviceSetFieldFloat(string key, float value); // 0x00710888-0x00710890
		public int CameraDeviceSetFieldInt64(string key, long value); // 0x00710954-0x00710960
		public int CameraDeviceSetFieldInt64Range(string key, long intRangeFrom, long intRangeTo); // 0x00710A24-0x00710A34
		public int CameraDeviceSetFieldString(string key, string value); // 0x00710B00-0x00710B0C
		public int CameraDeviceSetFlashTorchMode(int on); // 0x00710BE8-0x00710BF0
		public int CameraDeviceSetFocusMode(int focusMode); // 0x00710C8C-0x00710C94
		public int CameraDeviceStartCamera(); // 0x00710D30-0x00710D34
		public int CameraDeviceStopCamera(); // 0x00710DC0-0x00710DC4
		public void CustomViewerParameters_AddDistortionCoefficient(IntPtr obj, float val); // 0x00710E50-0x00710E58
		public void CustomViewerParameters_ClearDistortionCoefficients(IntPtr obj); // 0x00710F04-0x00710F0C
		public void CustomViewerParameters_delete(IntPtr obj); // 0x00710FA8-0x00710FB0
		public IntPtr CustomViewerParameters_new(float version, string name, string manufacturer); // 0x0071104C-0x00711058
		public void CustomViewerParameters_SetButtonType(IntPtr obj, int val); // 0x00711144-0x00711150
		public void CustomViewerParameters_SetContainsMagnet(IntPtr obj, bool val); // 0x007111FC-0x0071120C
		public void CustomViewerParameters_SetFieldOfView(IntPtr obj, IntPtr val); // 0x007112B8-0x007112C4
		public void CustomViewerParameters_SetInterLensDistance(IntPtr obj, float val); // 0x00711370-0x00711378
		public void CustomViewerParameters_SetLensCentreToTrayDistance(IntPtr obj, float val); // 0x00711424-0x0071142C
		public void CustomViewerParameters_SetScreenToLensDistance(IntPtr obj, float val); // 0x007114D8-0x007114E0
		public void CustomViewerParameters_SetTrayAlignment(IntPtr obj, int val); // 0x0071158C-0x00711598
		public int CylinderTargetGetDimensions(IntPtr dataSetPtr, string trackableName, IntPtr dimensionPtr); // 0x00711644-0x00711654
		public int CylinderTargetSetBottomDiameter(IntPtr dataSetPtr, string trackableName, float bottomDiameter); // 0x00711724-0x00711730
		public int CylinderTargetSetSideLength(IntPtr dataSetPtr, string trackableName, float sideLength); // 0x00711808-0x00711814
		public int CylinderTargetSetTopDiameter(IntPtr dataSetPtr, string trackableName, float topDiameter); // 0x007118EC-0x007118F8
		public int DataSetCreateTrackable(IntPtr dataSetPtr, IntPtr trackableSourcePtr, StringBuilder trackableName, int nameMaxLength, IntPtr trackableData); // 0x007119D0-0x007119E8
		public int DataSetDestroyTrackable(IntPtr dataSetPtr, int trackableId); // 0x00711ADC-0x00711AE8
		public int DataSetExists(string relativePath, int storageType); // 0x00711B94-0x00711BA0
		public int DataSetGetNumTrackableType(int trackableType, IntPtr dataSetPtr); // 0x00711C64-0x00711C70
		public int DataSetGetTrackableName(IntPtr dataSetPtr, int trackableId, StringBuilder trackableName, int nameMaxLength); // 0x00711D1C-0x00711D30
		public IntPtr DataSetGetTrackablePtr(IntPtr dataSetPtr, int trackableId); // 0x00711E1C-0x00711E28
		public int DataSetGetTrackablesOfType(int trackableType, IntPtr trackableDataArray, int trackableDataArrayLength, IntPtr dataSetPtr); // 0x00711ED4-0x00711EE8
		public int DataSetHasReachedTrackableLimit(IntPtr dataSetPtr); // 0x00711FAC-0x00711FB4
		public int DataSetLoad(string relativePath, int storageType, IntPtr dataSetPtr); // 0x00712050-0x00712060
		public void DeinitFrameState(IntPtr frameState); // 0x0071212C-0x00712134
		public int Device_GetMode(); // 0x007121D0-0x007121D4
		public IntPtr Device_GetSelectedViewer(); // 0x0071225C-0x00712260
		public IntPtr Device_GetViewerList(); // 0x007122EC-0x007122F0
		public int Device_IsViewerPresent(); // 0x0071237C-0x00712380
		public int Device_SelectViewer(IntPtr vp); // 0x0071240C-0x00712414
		public int Device_SetMode(int mode); // 0x007124B0-0x007124B8
		public void Device_SetViewerPresent(bool present); // 0x00712550-0x00712558
		public int DeviceIsEyewearDevice(); // 0x007125F4-0x007125F8
		public int DiagnosticsRecorderAddScreenshot(string imageFilePath, int storageType); // 0x00712684-0x00712690
		public int DiagnosticsRecorderAddUserComment(string comment); // 0x00712754-0x0071275C
		public int DiagnosticsRecorderClearAll(); // 0x00712810-0x00712814
		public int DiagnosticsRecorderClearUnpinned(); // 0x007128A0-0x007128A4
		public int DiagnosticsRecorderDeinit(); // 0x00712930-0x00712934
		public IntPtr DiagnosticsRecorderGenerateDiagnostics(string fileNamePrefix); // 0x007129C0-0x007129C8
		public int DiagnosticsRecorderInit(string diagnosticsDirectory, int storageType); // 0x00712A7C-0x00712A88
		public int DiagnosticsRecorderStart(); // 0x00712B4C-0x00712B50
		public int DiagnosticsRecorderStop(); // 0x00712BDC-0x00712BE0
		public int EyewearCPMClearProfile(int profileID); // 0x00712C6C-0x00712C74
		public int EyewearCPMGetActiveProfile(); // 0x00712D10-0x00712D14
		public int EyewearCPMGetCameraToEyePose(int profileID, int eyeID, IntPtr matrix); // 0x00712DA0-0x00712DB0
		public int EyewearCPMGetEyeProjection(int profileID, int eyeID, IntPtr matrix); // 0x00712E64-0x00712E74
		public int EyewearCPMGetMaxCount(); // 0x00712F28-0x00712F2C
		public IntPtr EyewearCPMGetProfileName(int profileID); // 0x00712FB8-0x00712FC0
		public int EyewearCPMGetUsedCount(); // 0x0071305C-0x00713060
		public int EyewearCPMIsProfileUsed(int profileID); // 0x007130EC-0x007130F4
		public int EyewearCPMSetActiveProfile(int profileID); // 0x00713190-0x00713198
		public int EyewearCPMSetCameraToEyePose(int profileID, int eyeID, IntPtr matrix); // 0x00713234-0x00713244
		public int EyewearCPMSetEyeProjection(int profileID, int eyeID, IntPtr matrix); // 0x007132F8-0x00713308
		public int EyewearCPMSetProfileName(int profileID, IntPtr name); // 0x007133BC-0x007133C8
		public int EyewearDeviceGetScreenOrientation(); // 0x00713474-0x00713478
		public int EyewearDeviceIsDisplayExtended(); // 0x00713504-0x00713508
		public int EyewearDeviceIsDisplayExtendedGLOnly(); // 0x00713594-0x00713598
		public int EyewearDeviceIsDualDisplay(); // 0x00713624-0x00713628
		public int EyewearDeviceIsPredictiveTrackingEnabled(); // 0x007136B4-0x007136B8
		public int EyewearDeviceIsSeeThru(); // 0x00713744-0x00713748
		public int EyewearDeviceSetDisplayExtended(bool enable); // 0x007137D4-0x007137DC
		public int EyewearDeviceSetPredictiveTracking(bool enable); // 0x00713878-0x00713880
		public float EyewearUserCalibratorGetMaxScaleHint(); // 0x0071391C-0x00713920
		public float EyewearUserCalibratorGetMinScaleHint(); // 0x007139AC-0x007139B0
		public int EyewearUserCalibratorGetProjectionMatrix(IntPtr readingsDataArray, int numReadings, IntPtr cameraToEyeContainer, IntPtr projectionContainer); // 0x00713A3C-0x00713A50
		public int EyewearUserCalibratorInit(int surfaceWidth, int surfaceHeight, int targetWidth, int targetHeight); // 0x00713B14-0x00713B28
		public int EyewearUserCalibratorIsStereoStretched(); // 0x00713BEC-0x00713BF0
		public void FrameCounterGetBenchmarkingData(IntPtr benchmarkingData); // 0x00713C7C-0x00713C84
		public int GetCameraThreadID(); // 0x00713D20-0x00713D24
		public void GetVuforiaLibraryVersion(StringBuilder value, int maxLength); // 0x00713DB0-0x00713DBC
		public int GuideViewGetImage(IntPtr guideViewPtr, IntPtr imageDataPtr); // 0x00713E84-0x00713E90
		public IntPtr GuideViewGetName(IntPtr guideViewPtr); // 0x00713F3C-0x00713F44
		public int GuideViewGetPose(IntPtr guideViewPtr, IntPtr position, IntPtr quaternion); // 0x00713FE0-0x00713FF0
		public void GuideViewSetPose(IntPtr guideViewPtr, IntPtr position, IntPtr quaternion); // 0x007140A4-0x007140B4
		public int HasSurfaceBeenRecreated(); // 0x00714168-0x0071416C
		public int ImageTargetBuilderBuild(string name, float screenSizeWidth); // 0x007141F8-0x00714200
		public int ImageTargetBuilderGetFrameQuality(); // 0x007142C4-0x007142C8
		public IntPtr ImageTargetBuilderGetTrackableSource(); // 0x00714354-0x00714358
		public void ImageTargetBuilderStartScan(); // 0x007143E4-0x007143E8
		public void ImageTargetBuilderStopScan(); // 0x00714474-0x00714478
		public int ImageTargetCreateVirtualButton(IntPtr dataSetPtr, string trackableName, string virtualButtonName, IntPtr rectData); // 0x00714504-0x00714518
		public int ImageTargetDestroyVirtualButton(IntPtr dataSetPtr, string trackableName, string virtualButtonName); // 0x0071460C-0x0071461C
		public int ImageTargetGetNumVirtualButtons(IntPtr dataSetPtr, string trackableName); // 0x00714700-0x0071470C
		public int ImageTargetGetVirtualButtonName(IntPtr dataSetPtr, string trackableName, int idx, StringBuilder vbName, int nameMaxLength); // 0x007147D4-0x007147EC
		public int ImageTargetGetVirtualButtons(IntPtr virtualButtonDataArray, IntPtr rectangleDataArray, int virtualButtonDataArrayLength, IntPtr dataSetPtr, string trackableName); // 0x007148F4-0x0071490C
		public void InitFrameState(IntPtr frameState); // 0x007149F4-0x007149FC
		public void InitPlatformNative(); // 0x00714A94-0x00714A98
		public int ModelTargetGetActiveGuideViewIndexFromTrackable(IntPtr trackablePtr); // 0x00714B24-0x00714B2C
		public int ModelTargetGetBoundingBox(IntPtr dataSetPtr, string trackableName, IntPtr centerPtr, IntPtr halfExtents); // 0x00714BC8-0x00714BDC
		public IntPtr ModelTargetGetGuideViewFromTrackable(IntPtr trackablePtr, int index); // 0x00714CBC-0x00714CC8
		public int ModelTargetGetNumGuideViewsFromTrackable(IntPtr trackablePtr); // 0x00714D74-0x00714D7C
		public int ModelTargetGetSize(IntPtr dataSetPtr, string trackableName, IntPtr sizePtr); // 0x00714E18-0x00714E28
		public int ModelTargetSetActiveGuideViewIndexFromTrackable(IntPtr trackablePtr, int idx); // 0x00714EF8-0x00714F04
		public int ModelTargetSetSize(IntPtr dataSetPtr, string trackableName, IntPtr sizePtr); // 0x00714FB0-0x00714FC0
		public float MultiTargetGetLargestSizeComponent(IntPtr dataSetPtr, string trackableName); // 0x00715090-0x0071509C
		public void NativeUnity_disableDistortion(bool disable); // 0x0071516C-0x00715174
		public void NativeUnity_DisableEyeTextureOverride(); // 0x00715210-0x00715214
		public void NativeUnity_EnableEyeTextureOverride(int eyeTextureWidth, int eyeTextureHeight, float vertFoVRad); // 0x007152A0-0x007152AC
		public int NativeUnity_IsVuforiaVRDeviceReady(); // 0x00715368-0x0071536C
		public void NativeUnity_ResetStereoProjectionMatrices(); // 0x007153F8-0x007153FC
		public void NativeUnity_SetDeviceConnected(bool connected); // 0x00715488-0x00715490
		public void NativeUnity_SetDistortionMeshNeedsRefresh(bool enabled); // 0x0071552C-0x00715534
		public void NativeUnity_SetEyeOffsets(IntPtr leftEyePosition, IntPtr leftEyeRotation, IntPtr rightEyePosition, IntPtr rightEyeRotation); // 0x007155D0-0x007155E4
		public void NativeUnity_SetSingleCullingMatrix(IntPtr projectionMatrix, IntPtr viewMatrix); // 0x007156A8-0x007156B4
		public void NativeUnity_SetStereoProjectionMatrix(int eyeId, IntPtr projectionMatrix); // 0x00715760-0x0071576C
		public void NativeUnity_SetVuforiaVRDeviceReady(bool isReady); // 0x00715818-0x00715820
		public int ObjectTargetGetSize(IntPtr dataSetPtr, string trackableName, IntPtr sizePtr); // 0x007158BC-0x007158CC
		public int ObjectTargetSetSize(IntPtr dataSetPtr, string trackableName, IntPtr sizePtr); // 0x0071599C-0x007159AC
		public int ObjectTrackerActivateDataSet(IntPtr dataSetPtr); // 0x00715A7C-0x00715A84
		public IntPtr ObjectTrackerCreateDataSet(); // 0x00715B20-0x00715B24
		public int ObjectTrackerDeactivateDataSet(IntPtr dataSetPtr); // 0x00715BB0-0x00715BB8
		public int ObjectTrackerDestroyDataSet(IntPtr dataSetPtr); // 0x00715C54-0x00715C5C
		public IntPtr ObjectTrackerGetTargetFinder(int targetFinderType); // 0x00715CF8-0x00715D00
		public void OnPause(); // 0x00715D9C-0x00715DA0
		public void OnResume(); // 0x00715E2C-0x00715E30
		public void OnSurfaceChanged(int width, int height); // 0x00715EBC-0x00715EC8
		public int PositionalDeviceTracker_CreateAnchorFromHitTestResult(string name, IntPtr hitTestResult, IntPtr anchorData); // 0x00715F74-0x00715F84
		public int PositionalDeviceTracker_CreateAnchorFromPose(string name, IntPtr unityPosition, IntPtr unityOrientation, IntPtr anchorData); // 0x00716050-0x00716064
		public int PositionalDeviceTracker_DestroyAnchor(int anchor); // 0x00716140-0x00716148
		public int PositionalDeviceTracker_Reset(); // 0x007161E4-0x007161E8
		public void QcarAddCameraFrame(IntPtr pixels, int width, int height, int format, int stride, int frameIdx, int flipHorizontally); // 0x00716274-0x00716294
		public void QcarDeinit(); // 0x00716378-0x0071637C
		public int QcarGetActiveFusionProvider(); // 0x00716408-0x0071640C
		public int QcarGetBufferSize(int width, int height, int format); // 0x00716498-0x007164A8
		public int QcarInit(string licenseKey); // 0x0071655C-0x00716564
		public int QcarSetAllowedFusionProviders(int providerTypes); // 0x00716614-0x0071661C
		public int QcarSetDriverLibrary(string libraryName, IntPtr userData); // 0x007166B8-0x007166C4
		public int QcarSetFrameFormat(int format, int enabled); // 0x00716788-0x00716794
		public int QcarSetHint(uint hint, int value); // 0x00716840-0x0071684C
		public int RecorderInit(string filePath); // 0x007168F8-0x00716900
		public int RecorderStart(); // 0x007169B4-0x007169B8
		public int RecorderStop(); // 0x00716A44-0x00716A48
		public IntPtr RendererCreateNativeTexture(uint width, uint height, int format); // 0x00716AD4-0x00716AE4
		public int RendererGetGraphicsAPI(); // 0x00716B98-0x00716B9C
		public int RendererGetRecommendedFps(int flags); // 0x00716C28-0x00716C30
		public IntPtr RendererGetRenderEventCallback(); // 0x00716CCC-0x00716CD0
		public void RendererGetVideoBackgroundCfg(IntPtr bgCfg); // 0x00716D5C-0x00716D64
		public int RendererGetVideoBackgroundTextureInfo(IntPtr texInfo); // 0x00716E00-0x00716E08
		public IntPtr RendererGetVideoTextureUpdateCallback(); // 0x00716EA4-0x00716EA8
		public int RendererIsVideoBackgroundTextureInfoAvailable(); // 0x00716F34-0x00716F38
		public void RendererRequestNativeTextureCreation(uint width, uint height, int format); // 0x00716FC4-0x00716FD4
		public void RendererSetVideoBackgroundCfg(IntPtr bgCfg); // 0x00717088-0x00717090
		public void RendererSetVideoBackgroundRenderingInfo(int format, int width, int height); // 0x0071712C-0x0071713C
		public int RendererSetVideoBackgroundTextureID(int textureID); // 0x007171F0-0x007171F8
		public int RendererSetVideoBackgroundTexturePtr(IntPtr texturePtr); // 0x00717294-0x0071729C
		public IntPtr RendererTryGetVideoBackgroundTexturePtr(); // 0x00717338-0x0071733C
		public void RenderingPrimitives_DeleteCopy(); // 0x007173C8-0x007173CC
		public void RenderingPrimitives_GetDistortionMesh(int viewId, IntPtr meshData); // 0x00717458-0x00717464
		public void RenderingPrimitives_GetDistortionMeshSize(int viewId, IntPtr size); // 0x00717510-0x0071751C
		public void RenderingPrimitives_GetDistortionTextureViewport(int viewID, IntPtr viewportContainer); // 0x007175C8-0x007175D4
		public void RenderingPrimitives_GetEffectiveFov(int viewID, IntPtr fovContainer); // 0x00717680-0x0071768C
		public void RenderingPrimitives_GetEyeDisplayAdjustmentMatrix(int viewID, IntPtr matrixContainer); // 0x00717738-0x00717744
		public void RenderingPrimitives_GetNormalizedViewport(int viewID, IntPtr viewportContainer); // 0x007177F0-0x007177FC
		public void RenderingPrimitives_GetProjectionMatrix(int viewID, float near, float far, IntPtr projectionContainer, int screenOrientation); // 0x007178A8-0x007178B8
		public void RenderingPrimitives_GetVideoBackgroundProjectionMatrix(int viewID, float near, float far, IntPtr projectionContainer, int screenOrientation); // 0x00717984-0x00717994
		public void RenderingPrimitives_GetViewport(int viewID, IntPtr viewportContainer); // 0x00717A60-0x00717A6C
		public void RenderingPrimitives_GetViewportCentreToEyeAxis(int viewID, IntPtr vectorContainer); // 0x00717B18-0x00717B24
		public void RenderingPrimitives_UpdateCopy(); // 0x00717BD0-0x00717BD4
		public int RotationalDeviceTracker_GetModelCorrectionMode(); // 0x00717C60-0x00717C64
		public void RotationalDeviceTracker_GetModelCorrectionTransform(IntPtr pivot); // 0x00717CF0-0x00717CF8
		public int RotationalDeviceTracker_GetPosePrediction(); // 0x00717D94-0x00717D98
		public int RotationalDeviceTracker_Recenter(); // 0x00717E24-0x00717E28
		public int RotationalDeviceTracker_SetModelCorrectionMode(int mode); // 0x00717EB4-0x00717EBC
		public int RotationalDeviceTracker_SetModelCorrectionModeWithTransform(int mode, IntPtr pivot); // 0x00717F58-0x00717F64
		public int RotationalDeviceTracker_SetPosePrediction(bool mode); // 0x00718010-0x00718018
		public void SetApplicationEnvironment(string unityVersionString, int sdkWrapperType); // 0x007180B4-0x007180C0
		public int SetHolographicAppCS(IntPtr appSpecifiedCS); // 0x0071817C-0x00718184
		public void SetRenderBuffers(IntPtr colorBuffer); // 0x00718220-0x00718228
		public void SetStateBufferSize(int size); // 0x007182C4-0x007182CC
		public void SmartTerrain_free_hitTest_list(IntPtr listPtr); // 0x00718368-0x00718370
		public IntPtr SmartTerrain_hitTest(IntPtr unityViewPortPosition, float deviceHeight, int orientation); // 0x0071840C-0x00718418
		public void TargetFinderClearTrackables(IntPtr targetFinderPtr); // 0x007184D4-0x007184DC
		public int TargetFinderDeinit(IntPtr targetFinderPtr); // 0x00718578-0x00718580
		public int TargetFinderEnableTracking(IntPtr searchResult, IntPtr trackableData, IntPtr targetFinderPtr); // 0x0071861C-0x0071862C
		public void TargetFinderFreeCloudRecoResultList(IntPtr listPtr); // 0x007186E0-0x007186E8
		public void TargetFinderFreeModelRecoResultList(IntPtr listPtr); // 0x00718784-0x0071878C
		public int TargetFinderGetInitState(IntPtr targetFinderPtr); // 0x00718828-0x00718830
		public IntPtr TargetFinderGetObjectTarget(IntPtr targetFinderPtr, int index); // 0x007188CC-0x007188D8
		public void TargetFinderGetObjectTargets(IntPtr trackableIdArray, int trackableIdArrayLength, IntPtr targetFinderPtr); // 0x00718984-0x00718994
		public int TargetFinderStartInitCloudReco(IntPtr targetFinderPtr, string userAuth, string secretAuth); // 0x00718A48-0x00718A58
		public int TargetFinderStartInitModelReco(IntPtr targetFinderPtr, string localDatabasePath, int storageType); // 0x00718B3C-0x00718B4C
		public int TargetFinderStartRecognition(IntPtr targetFinderPtr); // 0x00718C1C-0x00718C24
		public int TargetFinderStop(IntPtr targetFinderPtr); // 0x00718CC0-0x00718CC8
		public IntPtr TargetFinderUpdate(IntPtr targetFinderState, int filterMode, IntPtr targetFinderPtr); // 0x00718D64-0x00718D74
		public int TrackerManagerDeinitTracker(int trackerTypeID); // 0x00718E28-0x00718E30
		public int TrackerManagerInitTracker(int trackerTypeID); // 0x00718ECC-0x00718ED4
		public int TrackerStart(int trackerTypeID); // 0x00718F70-0x00718F78
		public void TrackerStop(int trackerTypeID); // 0x00719014-0x0071901C
		public int UpdateQCAR(IntPtr imageHeaderDataArray, int imageHeaderArrayLength, IntPtr frameState, int screenOrientation); // 0x007190B8-0x007190CC
		public int ViewerParameters_ContainsMagnet(IntPtr obj); // 0x00719190-0x00719198
		public IntPtr ViewerParameters_copy(IntPtr obj); // 0x00719234-0x0071923C
		public void ViewerParameters_delete(IntPtr obj); // 0x007192D8-0x007192E0
		public int ViewerParameters_GetButtonType(IntPtr obj); // 0x0071937C-0x00719384
		public float ViewerParameters_GetDistortionCoefficient(IntPtr obj, int idx); // 0x00719420-0x0071942C
		public void ViewerParameters_GetFieldOfView(IntPtr obj, IntPtr result); // 0x007194D8-0x007194E4
		public float ViewerParameters_GetInterLensDistance(IntPtr obj); // 0x00719590-0x00719598
		public float ViewerParameters_GetLensCentreToTrayDistance(IntPtr obj); // 0x00719634-0x0071963C
		public IntPtr ViewerParameters_GetManufacturer(IntPtr obj); // 0x007196D8-0x007196E0
		public IntPtr ViewerParameters_GetName(IntPtr obj); // 0x0071977C-0x00719784
		public int ViewerParameters_GetNumDistortionCoefficients(IntPtr obj); // 0x00719820-0x00719828
		public float ViewerParameters_GetScreenToLensDistance(IntPtr obj); // 0x007198C4-0x007198CC
		public int ViewerParameters_GetTrayAlignment(IntPtr obj); // 0x00719968-0x00719970
		public float ViewerParameters_GetVersion(IntPtr obj); // 0x00719A0C-0x00719A14
		public IntPtr ViewerParametersList_Begin(IntPtr vpList); // 0x00719AB0-0x00719AB8
		public IntPtr ViewerParametersList_GetByIndex(IntPtr vpList, int idx); // 0x00719B54-0x00719B60
		public IntPtr ViewerParametersList_GetByNameManufacturer(IntPtr vpList, string name, string manufacturer); // 0x00719C0C-0x00719C1C
		public IntPtr ViewerParametersList_GetListForAuthoringTools(); // 0x00719D00-0x00719D04
		public IntPtr ViewerParametersList_Next(IntPtr vpList, IntPtr vpLast); // 0x00719D90-0x00719D9C
		public void ViewerParametersList_SetSDKFilter(IntPtr vpList, string filter); // 0x00719E48-0x00719E54
		public int ViewerParametersList_Size(IntPtr vpList); // 0x00719F14-0x00719F1C
		public int VirtualButtonGetId(IntPtr dataSetPtr, string trackableName, string virtualButtonName); // 0x00719FB8-0x00719FC8
		public int VirtualButtonSetAreaRectangle(IntPtr dataSetPtr, string trackableName, string virtualButtonName, IntPtr rectData); // 0x0071A0AC-0x0071A0C0
		public int VirtualButtonSetEnabled(IntPtr dataSetPtr, string trackableName, string virtualButtonName, int enabled); // 0x0071A1B4-0x0071A1C8
		public int VirtualButtonSetSensitivity(IntPtr dataSetPtr, string trackableName, string virtualButtonName, int sensitivity); // 0x0071A2BC-0x0071A2D0
		public int VuMarkTargetGetInstanceImage(int vuMarkTargetID, IntPtr instanceImage); // 0x0071A3C4-0x0071A3D0
		public int VuMarkTemplateGetOrigin(IntPtr dataSetPtr, string trackableName, IntPtr originPtr); // 0x0071A47C-0x0071A48C
		public int VuMarkTemplateGetVuMarkUserData(IntPtr dataSetPtr, string trackableName, StringBuilder data, uint dataLength); // 0x0071A55C-0x0071A570
		public int VuMarkTemplateSetTrackingFromRuntimeAppearance(IntPtr dataSetPtr, string trackableName, bool enable); // 0x0071A670-0x0071A684
		private static extern int cameraDeviceDeinitCamera(); // 0x0070FDC8-0x0070FE54
		private static extern void cameraDeviceGetCameraField(IntPtr cameraField, int idx); // 0x0070FE60-0x0070FF0C
		private static extern int cameraDeviceGetCameraFieldOfViewRads(IntPtr fovVectorContainer); // 0x0070FF14-0x0070FFB0
		private static extern int cameraDeviceGetFieldBool(string key, IntPtr value); // 0x0070FFBC-0x00710080
		private static extern int cameraDeviceGetFieldFloat(string key, IntPtr value); // 0x0071008C-0x00710150
		private static extern int cameraDeviceGetFieldInt64(string key, IntPtr value); // 0x0071015C-0x00710220
		private static extern int cameraDeviceGetFieldInt64Range(string key, IntPtr intRange); // 0x0071022C-0x007102F0
		private static extern int cameraDeviceGetFieldString(string key, StringBuilder value, int maxLength); // 0x00710300-0x007103F0
		private static extern int cameraDeviceGetNumCameraFields(); // 0x007103F4-0x00710480
		private static extern int cameraDeviceGetNumVideoModes(); // 0x00710484-0x00710510
		private static extern void cameraDeviceGetVideoMode(int idx, IntPtr videoMode); // 0x0071051C-0x007105C8
		private static extern int cameraDeviceInitCamera(); // 0x007105CC-0x00710658
		private static extern int cameraDeviceSelectVideoMode(int idx); // 0x00710660-0x007106FC
		private static extern void cameraDeviceSetCameraConfiguration(int width, int height); // 0x00710708-0x007107B4
		private static extern int cameraDeviceSetFieldBool(string key, bool value); // 0x007107C4-0x00710888
		private static extern int cameraDeviceSetFieldFloat(string key, float value); // 0x00710890-0x00710954
		private static extern int cameraDeviceSetFieldInt64(string key, long value); // 0x00710960-0x00710A24
		private static extern int cameraDeviceSetFieldInt64Range(string key, long intRangeFrom, long intRangeTo); // 0x00710A34-0x00710B00
		private static extern int cameraDeviceSetFieldString(string key, string value); // 0x00710B0C-0x00710BE8
		private static extern int cameraDeviceSetFlashTorchMode(int on); // 0x00710BF0-0x00710C8C
		private static extern int cameraDeviceSetFocusMode(int focusMode); // 0x00710C94-0x00710D30
		private static extern int cameraDeviceStartCamera(); // 0x00710D34-0x00710DC0
		private static extern int cameraDeviceStopCamera(); // 0x00710DC4-0x00710E50
		private static extern void customViewerParameters_AddDistortionCoefficient(IntPtr obj, float val); // 0x00710E58-0x00710F04
		private static extern void customViewerParameters_ClearDistortionCoefficients(IntPtr obj); // 0x00710F0C-0x00710FA8
		private static extern void customViewerParameters_delete(IntPtr obj); // 0x00710FB0-0x0071104C
		private static extern IntPtr customViewerParameters_new(float version, string name, string manufacturer); // 0x00711058-0x00711144
		private static extern void customViewerParameters_SetButtonType(IntPtr obj, int val); // 0x00711150-0x007111FC
		private static extern void customViewerParameters_SetContainsMagnet(IntPtr obj, bool val); // 0x0071120C-0x007112B8
		private static extern void customViewerParameters_SetFieldOfView(IntPtr obj, IntPtr val); // 0x007112C4-0x00711370
		private static extern void customViewerParameters_SetInterLensDistance(IntPtr obj, float val); // 0x00711378-0x00711424
		private static extern void customViewerParameters_SetLensCentreToTrayDistance(IntPtr obj, float val); // 0x0071142C-0x007114D8
		private static extern void customViewerParameters_SetScreenToLensDistance(IntPtr obj, float val); // 0x007114E0-0x0071158C
		private static extern void customViewerParameters_SetTrayAlignment(IntPtr obj, int val); // 0x00711598-0x00711644
		private static extern int cylinderTargetGetDimensions(IntPtr dataSetPtr, string trackableName, IntPtr dimensionPtr); // 0x00711654-0x00711724
		private static extern int cylinderTargetSetBottomDiameter(IntPtr dataSetPtr, string trackableName, float bottomDiameter); // 0x00711730-0x00711808
		private static extern int cylinderTargetSetSideLength(IntPtr dataSetPtr, string trackableName, float sideLength); // 0x00711814-0x007118EC
		private static extern int cylinderTargetSetTopDiameter(IntPtr dataSetPtr, string trackableName, float topDiameter); // 0x007118F8-0x007119D0
		private static extern int dataSetCreateTrackable(IntPtr dataSetPtr, IntPtr trackableSourcePtr, StringBuilder trackableName, int nameMaxLength, IntPtr trackableData); // 0x007119E8-0x00711ADC
		private static extern int dataSetDestroyTrackable(IntPtr dataSetPtr, int trackableId); // 0x00711AE8-0x00711B94
		private static extern int dataSetExists(string relativePath, int storageType); // 0x00711BA0-0x00711C64
		private static extern int dataSetGetNumTrackableType(int trackableType, IntPtr dataSetPtr); // 0x00711C70-0x00711D1C
		private static extern int dataSetGetTrackableName(IntPtr dataSetPtr, int trackableId, StringBuilder trackableName, int nameMaxLength); // 0x00711D30-0x00711E1C
		private static extern IntPtr dataSetGetTrackablePtr(IntPtr dataSetPtr, int trackableId); // 0x00711E28-0x00711ED4
		private static extern int dataSetGetTrackablesOfType(int trackableType, IntPtr trackableDataArray, int trackableDataArrayLength, IntPtr dataSetPtr); // 0x00711EE8-0x00711FAC
		private static extern int dataSetHasReachedTrackableLimit(IntPtr dataSetPtr); // 0x00711FB4-0x00712050
		private static extern int dataSetLoad(string relativePath, int storageType, IntPtr dataSetPtr); // 0x00712060-0x0071212C
		private static extern void deinitFrameState(IntPtr frameState); // 0x00712134-0x007121D0
		private static extern int device_GetMode(); // 0x007121D4-0x0071225C
		private static extern IntPtr device_GetSelectedViewer(); // 0x00712260-0x007122EC
		private static extern IntPtr device_GetViewerList(); // 0x007122F0-0x0071237C
		private static extern int device_IsViewerPresent(); // 0x00712380-0x0071240C
		private static extern int device_SelectViewer(IntPtr vp); // 0x00712414-0x007124B0
		private static extern int device_SetMode(int mode); // 0x007124B8-0x00712550
		private static extern void device_SetViewerPresent(bool present); // 0x00712558-0x007125F4
		private static extern int deviceIsEyewearDevice(); // 0x007125F8-0x00712684
		private static extern int diagnosticsRecorderAddScreenshot(string imageFilePath, int storageType); // 0x00712690-0x00712754
		private static extern int diagnosticsRecorderAddUserComment(string comment); // 0x0071275C-0x00712810
		private static extern int diagnosticsRecorderClearAll(); // 0x00712814-0x007128A0
		private static extern int diagnosticsRecorderClearUnpinned(); // 0x007128A4-0x00712930
		private static extern int diagnosticsRecorderDeinit(); // 0x00712934-0x007129C0
		private static extern IntPtr diagnosticsRecorderGenerateDiagnostics(string fileNamePrefix); // 0x007129C8-0x00712A7C
		private static extern int diagnosticsRecorderInit(string diagnosticsDirectory, int storageType); // 0x00712A88-0x00712B4C
		private static extern int diagnosticsRecorderStart(); // 0x00712B50-0x00712BDC
		private static extern int diagnosticsRecorderStop(); // 0x00712BE0-0x00712C6C
		private static extern int eyewearCPMClearProfile(int profileID); // 0x00712C74-0x00712D10
		private static extern int eyewearCPMGetActiveProfile(); // 0x00712D14-0x00712DA0
		private static extern int eyewearCPMGetCameraToEyePose(int profileID, int eyeID, IntPtr matrix); // 0x00712DB0-0x00712E64
		private static extern int eyewearCPMGetEyeProjection(int profileID, int eyeID, IntPtr matrix); // 0x00712E74-0x00712F28
		private static extern int eyewearCPMGetMaxCount(); // 0x00712F2C-0x00712FB8
		private static extern IntPtr eyewearCPMGetProfileName(int profileID); // 0x00712FC0-0x0071305C
		private static extern int eyewearCPMGetUsedCount(); // 0x00713060-0x007130EC
		private static extern int eyewearCPMIsProfileUsed(int profileID); // 0x007130F4-0x00713190
		private static extern int eyewearCPMSetActiveProfile(int profileID); // 0x00713198-0x00713234
		private static extern int eyewearCPMSetCameraToEyePose(int profileID, int eyeID, IntPtr matrix); // 0x00713244-0x007132F8
		private static extern int eyewearCPMSetEyeProjection(int profileID, int eyeID, IntPtr matrix); // 0x00713308-0x007133BC
		private static extern int eyewearCPMSetProfileName(int profileID, IntPtr name); // 0x007133C8-0x00713474
		private static extern int eyewearDeviceGetScreenOrientation(); // 0x00713478-0x00713504
		private static extern int eyewearDeviceIsDisplayExtended(); // 0x00713508-0x00713594
		private static extern int eyewearDeviceIsDisplayExtendedGLOnly(); // 0x00713598-0x00713624
		private static extern int eyewearDeviceIsDualDisplay(); // 0x00713628-0x007136B4
		private static extern int eyewearDeviceIsPredictiveTrackingEnabled(); // 0x007136B8-0x00713744
		private static extern int eyewearDeviceIsSeeThru(); // 0x00713748-0x007137D4
		private static extern int eyewearDeviceSetDisplayExtended(bool enable); // 0x007137DC-0x00713878
		private static extern int eyewearDeviceSetPredictiveTracking(bool enable); // 0x00713880-0x0071391C
		private static extern float eyewearUserCalibratorGetMaxScaleHint(); // 0x00713920-0x007139AC
		private static extern float eyewearUserCalibratorGetMinScaleHint(); // 0x007139B0-0x00713A3C
		private static extern int eyewearUserCalibratorGetProjectionMatrix(IntPtr readingsDataArray, int numReadings, IntPtr cameraToEyeContainer, IntPtr projectionContainer); // 0x00713A50-0x00713B14
		private static extern int eyewearUserCalibratorInit(int surfaceWidth, int surfaceHeight, int targetWidth, int targetHeight); // 0x00713B28-0x00713BEC
		private static extern int eyewearUserCalibratorIsStereoStretched(); // 0x00713BF0-0x00713C7C
		private static extern void frameCounterGetBenchmarkingData(IntPtr benchmarkingData); // 0x00713C84-0x00713D20
		private static extern int getCameraThreadID(); // 0x00713D24-0x00713DB0
		private static extern void getVuforiaLibraryVersion(StringBuilder value, int maxLength); // 0x00713DBC-0x00713E84
		private static extern int guideViewGetImage(IntPtr guideViewPtr, IntPtr imageDataPtr); // 0x00713E90-0x00713F3C
		private static extern IntPtr guideViewGetName(IntPtr guideViewPtr); // 0x00713F44-0x00713FE0
		private static extern int guideViewGetPose(IntPtr guideViewPtr, IntPtr position, IntPtr quaternion); // 0x00713FF0-0x007140A4
		private static extern void guideViewSetPose(IntPtr guideViewPtr, IntPtr position, IntPtr quaternion); // 0x007140B4-0x00714168
		private static extern int hasSurfaceBeenRecreated(); // 0x0071416C-0x007141F8
		private static extern int imageTargetBuilderBuild(string name, float screenSizeWidth); // 0x00714200-0x007142C4
		private static extern int imageTargetBuilderGetFrameQuality(); // 0x007142C8-0x00714354
		private static extern IntPtr imageTargetBuilderGetTrackableSource(); // 0x00714358-0x007143E4
		private static extern void imageTargetBuilderStartScan(); // 0x007143E8-0x00714474
		private static extern void imageTargetBuilderStopScan(); // 0x00714478-0x00714504
		private static extern int imageTargetCreateVirtualButton(IntPtr dataSetPtr, string trackableName, string virtualButtonName, IntPtr rectData); // 0x00714518-0x0071460C
		private static extern int imageTargetDestroyVirtualButton(IntPtr dataSetPtr, string trackableName, string virtualButtonName); // 0x0071461C-0x00714700
		private static extern int imageTargetGetNumVirtualButtons(IntPtr dataSetPtr, string trackableName); // 0x0071470C-0x007147D4
		private static extern int imageTargetGetVirtualButtonName(IntPtr dataSetPtr, string trackableName, int idx, StringBuilder vbName, int nameMaxLength); // 0x007147EC-0x007148F4
		private static extern int imageTargetGetVirtualButtons(IntPtr virtualButtonDataArray, IntPtr rectangleDataArray, int virtualButtonDataArrayLength, IntPtr dataSetPtr, string trackableName); // 0x0071490C-0x007149F4
		private static extern void initFrameState(IntPtr frameState); // 0x007149FC-0x00714A94
		private static extern void initPlatformNative(); // 0x00714A98-0x00714B24
		private static extern int modelTargetGetActiveGuideViewIndexFromTrackable(IntPtr trackablePtr); // 0x00714B2C-0x00714BC8
		private static extern int modelTargetGetBoundingBox(IntPtr dataSetPtr, string trackableName, IntPtr centerPtr, IntPtr halfExtents); // 0x00714BDC-0x00714CBC
		private static extern IntPtr modelTargetGetGuideViewFromTrackable(IntPtr trackablePtr, int index); // 0x00714CC8-0x00714D74
		private static extern int modelTargetGetNumGuideViewsFromTrackable(IntPtr trackablePtr); // 0x00714D7C-0x00714E18
		private static extern int modelTargetGetSize(IntPtr dataSetPtr, string trackableName, IntPtr sizePtr); // 0x00714E28-0x00714EF8
		private static extern int modelTargetSetActiveGuideViewIndexFromTrackable(IntPtr trackablePtr, int idx); // 0x00714F04-0x00714FB0
		private static extern int modelTargetSetSize(IntPtr dataSetPtr, string trackableName, IntPtr sizePtr); // 0x00714FC0-0x00715090
		private static extern float multiTargetGetLargestSizeComponent(IntPtr dataSetPtr, string trackableName); // 0x0071509C-0x0071516C
		private static extern void nativeUnity_disableDistortion(bool disable); // 0x00715174-0x00715210
		private static extern void nativeUnity_DisableEyeTextureOverride(); // 0x00715214-0x007152A0
		private static extern void nativeUnity_EnableEyeTextureOverride(int eyeTextureWidth, int eyeTextureHeight, float vertFoVRad); // 0x007152AC-0x00715368
		private static extern int nativeUnity_IsVuforiaVRDeviceReady(); // 0x0071536C-0x007153F8
		private static extern void nativeUnity_ResetStereoProjectionMatrices(); // 0x007153FC-0x00715488
		private static extern void nativeUnity_SetDeviceConnected(bool connected); // 0x00715490-0x0071552C
		private static extern void nativeUnity_SetDistortionMeshNeedsRefresh(bool enabled); // 0x00715534-0x007155D0
		private static extern void nativeUnity_SetEyeOffsets(IntPtr leftEyePosition, IntPtr leftEyeRotation, IntPtr rightEyePosition, IntPtr rightEyeRotation); // 0x007155E4-0x007156A8
		private static extern void nativeUnity_SetSingleCullingMatrix(IntPtr projectionMatrix, IntPtr viewMatrix); // 0x007156B4-0x00715760
		private static extern void nativeUnity_SetStereoProjectionMatrix(int eyeId, IntPtr projectionMatrix); // 0x0071576C-0x00715818
		private static extern void nativeUnity_SetVuforiaVRDeviceReady(bool isReady); // 0x00715820-0x007158BC
		private static extern int objectTargetGetSize(IntPtr dataSetPtr, string trackableName, IntPtr sizePtr); // 0x007158CC-0x0071599C
		private static extern int objectTargetSetSize(IntPtr dataSetPtr, string trackableName, IntPtr sizePtr); // 0x007159AC-0x00715A7C
		private static extern int objectTrackerActivateDataSet(IntPtr dataSetPtr); // 0x00715A84-0x00715B20
		private static extern IntPtr objectTrackerCreateDataSet(); // 0x00715B24-0x00715BB0
		private static extern int objectTrackerDeactivateDataSet(IntPtr dataSetPtr); // 0x00715BB8-0x00715C54
		private static extern int objectTrackerDestroyDataSet(IntPtr dataSetPtr); // 0x00715C5C-0x00715CF8
		private static extern IntPtr objectTrackerGetTargetFinder(int targetFinderType); // 0x00715D00-0x00715D9C
		private static extern void onPause(); // 0x00715DA0-0x00715E2C
		private static extern void onResume(); // 0x00715E30-0x00715EBC
		private static extern void onSurfaceChanged(int width, int height); // 0x00715EC8-0x00715F74
		private static extern int positionalDeviceTracker_CreateAnchorFromHitTestResult(string name, IntPtr hitTestResult, IntPtr anchorData); // 0x00715F84-0x00716050
		private static extern int positionalDeviceTracker_CreateAnchorFromPose(string name, IntPtr unityPosition, IntPtr unityOrientation, IntPtr anchorData); // 0x00716064-0x00716140
		private static extern int positionalDeviceTracker_DestroyAnchor(int anchor); // 0x00716148-0x007161E4
		private static extern int positionalDeviceTracker_Reset(); // 0x007161E8-0x00716274
		private static extern void qcarAddCameraFrame(IntPtr pixels, int width, int height, int format, int stride, int frameIdx, int flipHorizontally); // 0x00716294-0x00716378
		private static extern void qcarDeinit(); // 0x0071637C-0x00716408
		private static extern int qcarGetActiveFusionProvider(); // 0x0071640C-0x00716498
		private static extern int qcarGetBufferSize(int width, int height, int format); // 0x007164A8-0x0071655C
		private static extern int qcarInit(string licenseKey); // 0x00716564-0x00716614
		private static extern int qcarSetAllowedFusionProviders(int providerTypes); // 0x0071661C-0x007166B8
		private static extern int qcarSetDriverLibrary(string libraryName, IntPtr userData); // 0x007166C4-0x00716788
		private static extern int qcarSetFrameFormat(int format, int enabled); // 0x00716794-0x00716840
		private static extern int qcarSetHint(uint hint, int value); // 0x0071684C-0x007168F8
		private static extern int recorderInit(string filePath); // 0x00716900-0x007169B4
		private static extern int recorderStart(); // 0x007169B8-0x00716A44
		private static extern int recorderStop(); // 0x00716A48-0x00716AD4
		private static extern IntPtr rendererCreateNativeTexture(uint width, uint height, int format); // 0x00716AE4-0x00716B98
		private static extern int rendererGetGraphicsAPI(); // 0x00716B9C-0x00716C28
		private static extern int rendererGetRecommendedFps(int flags); // 0x00716C30-0x00716CCC
		private static extern IntPtr rendererGetRenderEventCallback(); // 0x00716CD0-0x00716D5C
		private static extern void rendererGetVideoBackgroundCfg(IntPtr bgCfg); // 0x00716D64-0x00716E00
		private static extern int rendererGetVideoBackgroundTextureInfo(IntPtr texInfo); // 0x00716E08-0x00716EA4
		private static extern IntPtr rendererGetVideoTextureUpdateCallback(); // 0x00716EA8-0x00716F34
		private static extern int rendererIsVideoBackgroundTextureInfoAvailable(); // 0x00716F38-0x00716FC4
		private static extern void rendererRequestNativeTextureCreation(uint width, uint height, int format); // 0x00716FD4-0x00717088
		private static extern void rendererSetVideoBackgroundCfg(IntPtr bgCfg); // 0x00717090-0x0071712C
		private static extern void rendererSetVideoBackgroundRenderingInfo(int format, int width, int height); // 0x0071713C-0x007171F0
		private static extern int rendererSetVideoBackgroundTextureID(int textureID); // 0x007171F8-0x00717294
		private static extern int rendererSetVideoBackgroundTexturePtr(IntPtr texturePtr); // 0x0071729C-0x00717338
		private static extern IntPtr rendererTryGetVideoBackgroundTexturePtr(); // 0x0071733C-0x007173C8
		private static extern void renderingPrimitives_DeleteCopy(); // 0x007173CC-0x00717458
		private static extern void renderingPrimitives_GetDistortionMesh(int viewId, IntPtr meshData); // 0x00717464-0x00717510
		private static extern void renderingPrimitives_GetDistortionMeshSize(int viewId, IntPtr size); // 0x0071751C-0x007175C8
		private static extern void renderingPrimitives_GetDistortionTextureViewport(int viewID, IntPtr viewportContainer); // 0x007175D4-0x00717680
		private static extern void renderingPrimitives_GetEffectiveFov(int viewID, IntPtr fovContainer); // 0x0071768C-0x00717738
		private static extern void renderingPrimitives_GetEyeDisplayAdjustmentMatrix(int viewID, IntPtr matrixContainer); // 0x00717744-0x007177F0
		private static extern void renderingPrimitives_GetNormalizedViewport(int viewID, IntPtr viewportContainer); // 0x007177FC-0x007178A8
		private static extern void renderingPrimitives_GetProjectionMatrix(int viewID, float near, float far, IntPtr projectionContainer, int screenOrientation); // 0x007178B8-0x00717984
		private static extern void renderingPrimitives_GetVideoBackgroundProjectionMatrix(int viewID, float near, float far, IntPtr projectionContainer, int screenOrientation); // 0x00717994-0x00717A60
		private static extern void renderingPrimitives_GetViewport(int viewID, IntPtr viewportContainer); // 0x00717A6C-0x00717B18
		private static extern void renderingPrimitives_GetViewportCentreToEyeAxis(int viewID, IntPtr vectorContainer); // 0x00717B24-0x00717BD0
		private static extern void renderingPrimitives_UpdateCopy(); // 0x00717BD4-0x00717C60
		private static extern int rotationalDeviceTracker_GetModelCorrectionMode(); // 0x00717C64-0x00717CF0
		private static extern void rotationalDeviceTracker_GetModelCorrectionTransform(IntPtr pivot); // 0x00717CF8-0x00717D94
		private static extern int rotationalDeviceTracker_GetPosePrediction(); // 0x00717D98-0x00717E24
		private static extern int rotationalDeviceTracker_Recenter(); // 0x00717E28-0x00717EB4
		private static extern int rotationalDeviceTracker_SetModelCorrectionMode(int mode); // 0x00717EBC-0x00717F58
		private static extern int rotationalDeviceTracker_SetModelCorrectionModeWithTransform(int mode, IntPtr pivot); // 0x00717F64-0x00718010
		private static extern int rotationalDeviceTracker_SetPosePrediction(bool mode); // 0x00718018-0x007180B4
		private static extern void setApplicationEnvironment(string unityVersionString, int sdkWrapperType); // 0x007180C0-0x0071817C
		private static extern int setHolographicAppCS(IntPtr appSpecifiedCS); // 0x00718184-0x00718220
		private static extern void setRenderBuffers(IntPtr colorBuffer); // 0x00718228-0x007182C4
		private static extern void setStateBufferSize(int size); // 0x007182CC-0x00718368
		private static extern void smartTerrain_free_hitTest_list(IntPtr listPtr); // 0x00718370-0x0071840C
		private static extern IntPtr smartTerrain_hitTest(IntPtr unityViewPortPosition, float deviceHeight, int orientation); // 0x00718418-0x007184D4
		private static extern void targetFinderClearTrackables(IntPtr targetFinderPtr); // 0x007184DC-0x00718578
		private static extern int targetFinderDeinit(IntPtr targetFinderPtr); // 0x00718580-0x0071861C
		private static extern int targetFinderEnableTracking(IntPtr searchResult, IntPtr trackableData, IntPtr targetFinderPtr); // 0x0071862C-0x007186E0
		private static extern void targetFinderFreeCloudRecoResultList(IntPtr listPtr); // 0x007186E8-0x00718784
		private static extern void targetFinderFreeModelRecoResultList(IntPtr listPtr); // 0x0071878C-0x00718828
		private static extern int targetFinderGetInitState(IntPtr targetFinderPtr); // 0x00718830-0x007188CC
		private static extern IntPtr targetFinderGetObjectTarget(IntPtr targetFinderPtr, int index); // 0x007188D8-0x00718984
		private static extern void targetFinderGetObjectTargets(IntPtr trackableIdArray, int trackableIdArrayLength, IntPtr targetFinderPtr); // 0x00718994-0x00718A48
		private static extern int targetFinderStartInitCloudReco(IntPtr targetFinderPtr, string userAuth, string secretAuth); // 0x00718A58-0x00718B3C
		private static extern int targetFinderStartInitModelReco(IntPtr targetFinderPtr, string localDatabasePath, int storageType); // 0x00718B4C-0x00718C1C
		private static extern int targetFinderStartRecognition(IntPtr targetFinderPtr); // 0x00718C24-0x00718CC0
		private static extern int targetFinderStop(IntPtr targetFinderPtr); // 0x00718CC8-0x00718D64
		private static extern IntPtr targetFinderUpdate(IntPtr targetFinderState, int filterMode, IntPtr targetFinderPtr); // 0x00718D74-0x00718E28
		private static extern int trackerManagerDeinitTracker(int trackerTypeID); // 0x00718E30-0x00718ECC
		private static extern int trackerManagerInitTracker(int trackerTypeID); // 0x00718ED4-0x00718F70
		private static extern int trackerStart(int trackerTypeID); // 0x00718F78-0x00719014
		private static extern void trackerStop(int trackerTypeID); // 0x0071901C-0x007190B8
		private static extern int updateQCAR(IntPtr imageHeaderDataArray, int imageHeaderArrayLength, IntPtr frameState, int screenOrientation); // 0x007190CC-0x00719190
		private static extern int viewerParameters_ContainsMagnet(IntPtr obj); // 0x00719198-0x00719234
		private static extern IntPtr viewerParameters_copy(IntPtr obj); // 0x0071923C-0x007192D8
		private static extern void viewerParameters_delete(IntPtr obj); // 0x007192E0-0x0071937C
		private static extern int viewerParameters_GetButtonType(IntPtr obj); // 0x00719384-0x00719420
		private static extern float viewerParameters_GetDistortionCoefficient(IntPtr obj, int idx); // 0x0071942C-0x007194D8
		private static extern void viewerParameters_GetFieldOfView(IntPtr obj, IntPtr result); // 0x007194E4-0x00719590
		private static extern float viewerParameters_GetInterLensDistance(IntPtr obj); // 0x00719598-0x00719634
		private static extern float viewerParameters_GetLensCentreToTrayDistance(IntPtr obj); // 0x0071963C-0x007196D8
		private static extern IntPtr viewerParameters_GetManufacturer(IntPtr obj); // 0x007196E0-0x0071977C
		private static extern IntPtr viewerParameters_GetName(IntPtr obj); // 0x00719784-0x00719820
		private static extern int viewerParameters_GetNumDistortionCoefficients(IntPtr obj); // 0x00719828-0x007198C4
		private static extern float viewerParameters_GetScreenToLensDistance(IntPtr obj); // 0x007198CC-0x00719968
		private static extern int viewerParameters_GetTrayAlignment(IntPtr obj); // 0x00719970-0x00719A0C
		private static extern float viewerParameters_GetVersion(IntPtr obj); // 0x00719A14-0x00719AB0
		private static extern IntPtr viewerParametersList_Begin(IntPtr vpList); // 0x00719AB8-0x00719B54
		private static extern IntPtr viewerParametersList_GetByIndex(IntPtr vpList, int idx); // 0x00719B60-0x00719C0C
		private static extern IntPtr viewerParametersList_GetByNameManufacturer(IntPtr vpList, string name, string manufacturer); // 0x00719C1C-0x00719D00
		private static extern IntPtr viewerParametersList_GetListForAuthoringTools(); // 0x00719D04-0x00719D90
		private static extern IntPtr viewerParametersList_Next(IntPtr vpList, IntPtr vpLast); // 0x00719D9C-0x00719E48
		private static extern void viewerParametersList_SetSDKFilter(IntPtr vpList, string filter); // 0x00719E54-0x00719F14
		private static extern int viewerParametersList_Size(IntPtr vpList); // 0x00719F1C-0x00719FB8
		private static extern int virtualButtonGetId(IntPtr dataSetPtr, string trackableName, string virtualButtonName); // 0x00719FC8-0x0071A0AC
		private static extern int virtualButtonSetAreaRectangle(IntPtr dataSetPtr, string trackableName, string virtualButtonName, IntPtr rectData); // 0x0071A0C0-0x0071A1B4
		private static extern int virtualButtonSetEnabled(IntPtr dataSetPtr, string trackableName, string virtualButtonName, int enabled); // 0x0071A1C8-0x0071A2BC
		private static extern int virtualButtonSetSensitivity(IntPtr dataSetPtr, string trackableName, string virtualButtonName, int sensitivity); // 0x0071A2D0-0x0071A3C4
		private static extern int vuMarkTargetGetInstanceImage(int vuMarkTargetID, IntPtr instanceImage); // 0x0071A3D0-0x0071A47C
		private static extern int vuMarkTemplateGetOrigin(IntPtr dataSetPtr, string trackableName, IntPtr originPtr); // 0x0071A48C-0x0071A55C
		private static extern int vuMarkTemplateGetVuMarkUserData(IntPtr dataSetPtr, string trackableName, StringBuilder data, uint dataLength); // 0x0071A570-0x0071A670
		private static extern int vuMarkTemplateSetTrackingFromRuntimeAppearance(IntPtr dataSetPtr, string trackableName, bool enable); // 0x0071A684-0x0071A754
	}

	internal static class VuforiaWrapper // TypeDefIndex: 3437
	{
		// Fields
		private static IVuforiaWrapper sWrapper; // 0x00
		private static IVuforiaWrapper sCamIndependentWrapper; // 0x08
	
		// Properties
		public static IVuforiaWrapper Instance { get; } // 0x00C5F5D0-0x00C5F718 
		public static IVuforiaWrapper CamIndependentInstance { get; } // 0x00C61190-0x00C61360 
	
		// Constructors
		static VuforiaWrapper(); // 0x00C614A4-0x00C614A8
	
		// Methods
		public static void CreateRuntimeInstance(); // 0x00C610B8-0x00C61190
		private static void CreateCamIndependentInstance(); // 0x00C61360-0x00C61438
		public static void SetImplementation(IVuforiaWrapper implementation); // 0x00C61438-0x00C614A4
	}

	internal interface IPlayModeEditorUtility // TypeDefIndex: 3438
	{
		// Methods
		void DisplayDialog(string title, string message, string ok);
		WebCamProfile.ProfileCollection LoadAndParseWebcamProfiles();
		void RestartPlayMode();
		void ShowErrorInMouseOverWindow(string error);
		bool IsVuforiaEnabledInPlayerSettings();
		bool IsVuforiaActiveAndEULAAccepted();
		string GetEmulatorDatabasePath();
	}

	public interface IUserDefinedTargetEventHandler // TypeDefIndex: 3439
	{
		// Methods
		void OnInitialized();
		void OnFrameQualityChanged(ImageTargetBuilder.FrameQuality frameQuality);
		void OnNewTrackableSource(TrackableSource trackableSource);
	}

	public interface IVideoBackgroundEventHandler // TypeDefIndex: 3440
	{
		// Methods
		void OnVideoBackgroundConfigChanged();
	}

	public class StateManager // TypeDefIndex: 3441
	{
		// Fields
		private readonly Dictionary<int, TrackableBehaviour> mTrackableBehaviours; // 0x10
		private readonly List<int> mAutomaticallyCreatedBehaviours; // 0x18
		private readonly List<TrackableBehaviour> mBehavioursMarkedForDeletion; // 0x20
		private readonly List<TrackableBehaviour> mActiveTrackableBehaviours; // 0x28
		private readonly VuMarkManager mVuMarkManager; // 0x30
		private readonly DeviceTrackingManager mDeviceTrackingManager; // 0x38
		private GameObject mCameraPositioningHelper; // 0x40
		private IExtendedTrackingManager mExtendedTrackingManager; // 0x48
		private readonly IlluminationManager mIlluminationManager; // 0x50
	
		// Constructors
		internal StateManager(); // 0x00455AF8-0x00455C54
	
		// Methods
		public IEnumerable<TrackableBehaviour> GetActiveTrackableBehaviours(); // 0x00455D14-0x00455DA4
		public IEnumerable<TrackableBehaviour> GetTrackableBehaviours(); // 0x0044ED00-0x0044F028
		public void DestroyTrackableBehavioursForTrackable(Trackable trackable, bool destroyGameObjects = true /* Metadata: 0x0021C209 */); // 0x00456048-0x004563D0
		public void ReassociateTrackables(); // 0x004563DC-0x004567FC
		public VuMarkManager GetVuMarkManager(); // 0x00456990-0x00456998
		public IlluminationManager GetIlluminationManager(); // 0x00458580-0x00458588
		internal void SetExtendedTrackingManager(IExtendedTrackingManager extendedTrackingManager); // 0x00458588-0x00458590
		internal IExtendedTrackingManager GetExtendedTrackingManager(); // 0x00458590-0x00458598
		internal void AddTrackableBehaviour(TrackableBehaviour trackableBehaviour); // 0x00458598-0x0045877C
		internal void RemoveTrackableBehaviour(int id); // 0x0045877C-0x00458828
		internal void AssociateTrackableBehavioursForDataSet(DataSet dataSet); // 0x00457058-0x00458580
		internal void RemoveDestroyedTrackables(); // 0x004567FC-0x00456990
		internal void ClearTrackableBehaviours(); // 0x00459C1C-0x00459D00
		internal ImageTargetBehaviour FindOrCreateImageTargetBehaviourForTrackable(ImageTarget trackable, GameObject gameObject); // 0x00459D8C-0x00459D90
		internal ImageTargetBehaviour FindOrCreateImageTargetBehaviourForTrackable(ImageTarget trackable, GameObject gameObject, DataSet dataSet); // 0x00459D90-0x00459FF4
		internal ModelTargetBehaviour FindOrCreateModelTargetBehaviourForTrackable(ModelTarget trackable, GameObject gameObject); // 0x00459FF4-0x0045A258
		internal void SetTrackableBehavioursForTrackableToNotFound(Trackable trackable); // 0x0045A258-0x0045A378
		internal void EnableTrackableBehavioursForTrackable(Trackable trackable, bool enabled); // 0x0045A378-0x0045A500
		internal void RemoveDisabledTrackablesFromQueue(ref LinkedList<VuforiaManager.TrackableIdPair> trackableIDs); // 0x0045A500-0x0045A624
		internal void UpdateTrackablePoses(Vector3 positionalOffset, Quaternion rotationalOffset, TrackerData.TrackableResultData[] trackableResultDataArray, TrackerData.VuMarkTargetResultData[] vuMarkResultDataArray, VuforiaManager.TrackableIdPair originTrackableID, int frameIndex); // 0x0045A7E4-0x0045A7EC
		internal void UpdateTrackablePoses(Vector3 positionalOffset, Quaternion rotationalOffset, TrackerData.TrackableResultData[] trackableResultDataArray, TrackerData.VuMarkTargetResultData[] vuMarkResultDataArray, VuforiaManager.TrackableIdPair originTrackableID, int frameIndex, bool updateTrackableStates); // 0x0045A7EC-0x0045AE7C
		internal void UpdateVirtualButtons(int numVirtualButtons, IntPtr virtualButtonPtr); // 0x0045B2F8-0x0045BA68
		internal void UpdateVuMarks(TrackerData.VuMarkTargetData[] vuMarkData, TrackerData.VuMarkTargetResultData[] vuMarkResultData); // 0x0045BDA0-0x0045BDE4
		internal void UpdateIlluminationManager(TrackerData.IlluminationData illuminationData); // 0x0045BEF8-0x0045BF40
		internal DeviceTrackingManager GetDeviceTrackingManager(); // 0x0045018C-0x00450194
		internal static void PositionTrackable(TrackableBehaviour trackableBehaviour, Vector3 positionalOffset, Quaternion rotationalOffset, TrackerData.PoseData targetPose, double timeStamp); // 0x0045AE7C-0x0045B0C8
		internal static void PositionCamera(Vector3 localRefPosition, Quaternion localRefRotation, Transform cameraTransform, TrackerData.PoseData camToTargetPose); // 0x0045C100-0x0045C2C0
		internal bool CalculateTransformOffset(VuforiaManager.TrackableIdPair trackableID, TrackerData.PoseData vuforiaPose, out Vector3 positionalOffset, out Quaternion rotationalOffset); // 0x0045C2C0-0x0045C6B4
		private static Quaternion RotationAdjustForTrackableCSVuforiaToUnity(TrackableBehaviour trackableBehaviour); // 0x0045BF40-0x0045C0F8
		internal static Vector3 ExtractTranslationFromMatrix(Matrix4x4 matrix); // 0x0045C6B4-0x0045C6C0
		internal static Quaternion ExtractRotationFromMatrix(Matrix4x4 matrix); // 0x0045C6C0-0x0045C764
		private bool TryGetBehaviour(VuforiaManager.TrackableIdPair trackableId, out TrackableBehaviour trackableBehaviour); // 0x0045A624-0x0045A7E4
		private void AssociateVirtualButtonBehaviours(VirtualButtonBehaviour[] vbBehaviours, DataSet dataSet); // 0x00458AB0-0x00458CB0
		private void CreateMissingDataSetTrackableBehaviours(DataSet dataSet); // 0x00458CB0-0x00459C1C
		private ImageTargetBehaviour CreateImageTargetBehaviour(ImageTarget imageTarget); // 0x0045CC40-0x0045D3DC
		private MultiTargetBehaviour CreateMultiTargetBehaviour(MultiTarget multiTarget); // 0x0045D3DC-0x0045D918
		private CylinderTargetBehaviour CreateCylinderTargetBehaviour(CylinderTarget cylinderTarget); // 0x0045D918-0x0045E1E4
		private VuMarkBehaviour CreateVuMarkBehaviour(VuMarkTemplate target); // 0x0045E334-0x0045E870
		private ObjectTargetBehaviour CreateObjectTargetBehaviour(ObjectTarget objectTarget); // 0x0045F1B4-0x0045FA78
		private ModelTargetBehaviour CreateModelTargetBehaviour(ModelTarget modelTarget); // 0x0045E870-0x0045F1B4
	}

	internal class TextureRenderer // TypeDefIndex: 3442
	{
		// Fields
		private Camera mTextureBufferCamera; // 0x10
		private int mTextureWidth; // 0x18
		private int mTextureHeight; // 0x1C
	
		// Properties
		public int Width { get; } // 0x0046236C-0x00462374 
		public int Height { get; } // 0x00462374-0x0046237C 
	
		// Constructors
		public TextureRenderer(Texture textureToRender, int renderTextureLayer, VuforiaRenderer.Vec2I requestedTextureSize); // 0x0046237C-0x00462C7C
	
		// Methods
		public RenderTexture Render(); // 0x00462C7C-0x00462CF4
		public void Destroy(); // 0x00462CF4-0x00462DC8
	}

	internal abstract class TrackableImpl : Trackable // TypeDefIndex: 3443
	{
		// Fields
		[CompilerGenerated] // 0x003DDCF8-0x003DDD08
		private string <Name>k__BackingField; // 0x10
		[CompilerGenerated] // 0x003DDD08-0x003DDD18
		private int <ID>k__BackingField; // 0x18
	
		// Properties
		public string Name { [CompilerGenerated] /* 0x003DE9C0-0x003DE9D0 */ get; [CompilerGenerated] /* 0x003DE9D0-0x003DE9E0 */ protected set; } // 0x00463D20-0x00463D28 0x00463D10-0x00463D18
		public int ID { [CompilerGenerated] /* 0x003DE9E0-0x003DE9F0 */ get; [CompilerGenerated] /* 0x003DE9F0-0x003DEA00 */ protected set; } // 0x00463D28-0x00463D30 0x00463D18-0x00463D20
	
		// Constructors
		protected TrackableImpl(string name, int id); // 0x00463CD4-0x00463D10
	}

	internal class WebCam : IWebCam // TypeDefIndex: 3444
	{
		// Fields
		private readonly Camera[] mARCameras; // 0x10
		private readonly int[] mOriginalCameraCullMask; // 0x18
		private readonly IWebCamTexAdaptor mWebCamTexture; // 0x20
		private CameraDevice.VideoModeData mVideoModeData; // 0x28
		private TextureRenderer mTextureRenderer; // 0x38
		private Texture2D mBufferReadTexture; // 0x40
		private Rect mReadPixelsRect; // 0x48
		private WebCamProfile.ProfileData mWebCamProfile; // 0x58
		private bool mIsDirty; // 0x6C
		private int mLastFrameIdx; // 0x70
		private readonly int mRenderTextureLayer; // 0x74
		private bool mWebcamPlaying; // 0x78
		[CompilerGenerated] // 0x003DDD18-0x003DDD28
		private bool <IsTextureSizeAvailable>k__BackingField; // 0x79
	
		// Properties
		public bool DidUpdateThisFrame { get; } // 0x00C614D8-0x00C615A4 
		public bool IsPlaying { get; } // 0x00C615AC-0x00C61664 
		public int ActualWidth { get; } // 0x00C61664-0x00C61694 
		public int ActualHeight { get; } // 0x00C61694-0x00C616C4 
		public bool IsTextureSizeAvailable { [CompilerGenerated] /* 0x003DEA00-0x003DEA10 */ get; [CompilerGenerated] /* 0x003DEA10-0x003DEA20 */ private set; } // 0x00C615A4-0x00C615AC 0x00C616C4-0x00C616D0
		public VuforiaRenderer.Vec2I ResampledTextureSize { get; } // 0x00C616D0-0x00C616D8 
	
		// Constructors
		public WebCam(Camera[] arCameras, int renderTextureLayer, string webcamDeviceName, Func<string, WebCamProfile.ProfileData, IWebCamTexAdaptor> webCamTexProvider); // 0x00C61918-0x00C61D2C
	
		// Methods
		private void ComputeResampledTextureSize(); // 0x00C616D8-0x00C61918
		public void StartCamera(); // 0x00C61EF8-0x00C62048
		public void StopCamera(); // 0x00C62048-0x00C62104
		public void ResetPlaying(); // 0x00C62104-0x00C62114
		public Color32[] GetPixels32AndBufferFrame(); // 0x00C62114-0x00C621E0
		public void RenderFrame(int frameIndex); // 0x00C621E0-0x00C62328
		public CameraDevice.VideoModeData GetVideoMode(); // 0x00C62328-0x00C62334
		public bool IsRendererDirty(); // 0x00C62334-0x00C62358
		public void OnDestroy(); // 0x00C62358-0x00C62510
		public void Update(); // 0x00C62510-0x00C62AB8
	}

	public class WebCamProfile // TypeDefIndex: 3445
	{
		// Fields
		private readonly ProfileCollection mProfileCollection; // 0x10
	
		// Properties
		public ProfileData Default { get; } // 0x00C61EE4-0x00C61EF8 
	
		// Nested types
		public struct ProfileData // TypeDefIndex: 3446
		{
			// Fields
			public VuforiaRenderer.Vec2I RequestedTextureSize; // 0x00
			public VuforiaRenderer.Vec2I ResampledTextureSize; // 0x08
			public int RequestedFPS; // 0x10
		}
	
		public struct ProfileCollection // TypeDefIndex: 3447
		{
			// Fields
			public readonly ProfileData DefaultProfile; // 0x00
			public readonly Dictionary<string, ProfileData> Profiles; // 0x18
	
			// Constructors
			public ProfileCollection(ProfileData defaultProfile, Dictionary<string, ProfileData> profiles); // 0x00C6340C-0x00C63424
		}
	
		// Constructors
		public WebCamProfile(); // 0x00C61D2C-0x00C61E14
	
		// Methods
		internal ProfileData GetProfile(string webcamName); // 0x00C61E14-0x00C61EE4
		internal bool ProfileAvailable(string webcamName); // 0x00C63334-0x00C6340C
	}

	public interface ITrackableEventHandler // TypeDefIndex: 3448
	{
		// Methods
		void OnTrackableStateChanged(TrackableBehaviour.Status previousStatus, TrackableBehaviour.Status newStatus);
	}

	public interface IVirtualButtonEventHandler // TypeDefIndex: 3449
	{
		// Methods
		void OnButtonPressed(VirtualButtonBehaviour vb);
		void OnButtonReleased(VirtualButtonBehaviour vb);
	}

	public class ImageTargetBehaviour : DataSetTrackableBehaviour // TypeDefIndex: 3450
	{
		// Fields
		[HideInInspector] // 0x003DDD28-0x003DDD60
		[SerializeField] // 0x003DDD28-0x003DDD60
		private float mAspectRatio; // 0x58
		[HideInInspector] // 0x003DDD60-0x003DDD98
		[SerializeField] // 0x003DDD60-0x003DDD98
		private ImageTargetType mImageTargetType; // 0x5C
		[HideInInspector] // 0x003DDD98-0x003DDDD0
		[SerializeField] // 0x003DDD98-0x003DDDD0
		private float mWidth; // 0x60
		[HideInInspector] // 0x003DDDD0-0x003DDE08
		[SerializeField] // 0x003DDDD0-0x003DDE08
		private float mHeight; // 0x64
		private ImageTarget mImageTarget; // 0x68
		private Dictionary<int, VirtualButtonBehaviour> mVirtualButtonBehaviours; // 0x70
		private float mLastTransformScale; // 0x78
		private Vector2 mLastSize; // 0x7C
	
		// Properties
		public ImageTarget ImageTarget { get; } // 0x005330AC-0x005330B4 
		internal ImageTargetType ImageTargetType { get; } // 0x00533EB4-0x00533EBC 
	
		// Constructors
		public ImageTargetBehaviour(); // 0x005330B4-0x0053310C
	
		// Methods
		protected override bool CorrectScaleImpl(); // 0x0053310C-0x00533148
		protected override void InternalUnregisterTrackable(); // 0x0053333C-0x00533348
		public VirtualButtonBehaviour CreateVirtualButton(string vbName, Vector2 position, Vector2 size); // 0x00533348-0x00533590
		public static VirtualButtonBehaviour CreateVirtualButton(string vbName, Vector2 localScale, GameObject immediateParent); // 0x0053377C-0x00533A7C
		public IEnumerable<VirtualButtonBehaviour> GetVirtualButtonBehaviours(); // 0x00533A7C-0x00533ADC
		public void DestroyVirtualButton(string vbName); // 0x00533ADC-0x00533D5C
		public Vector2 GetSize(); // 0x00533D5C-0x00533E3C
		public void SetWidth(float width); // 0x00533E3C-0x00533E78
		public void SetHeight(float height); // 0x00533E78-0x00533EB4
		internal override bool InitializeTarget(Trackable trackable, bool applyTargetScaleToBehaviour); // 0x00533EBC-0x005343B8
		internal void AssociateExistingVirtualButtonBehaviour(VirtualButtonBehaviour virtualButtonBehaviour); // 0x005343B8-0x00534A74
		internal void CreateMissingVirtualButtonBehaviours(); // 0x00534A74-0x00534D74
		internal bool TryGetVirtualButtonBehaviourByID(int id, out VirtualButtonBehaviour virtualButtonBehaviour); // 0x00535524-0x0053559C
		private void CreateVirtualButtonFromNative(VirtualButton virtualButton); // 0x00534D74-0x00535524
		private bool CreateNewVirtualButtonFromBehaviour(VirtualButtonBehaviour newVBB); // 0x00533590-0x0053377C
		private void OnValidate(); // 0x00533148-0x0053333C
	}

	public class ObjectTracker : Tracker // TypeDefIndex: 3451
	{
		// Fields
		private List<DataSet> mActiveDataSets; // 0x18
		private List<DataSet> mDataSets; // 0x20
		private Dictionary<Type, TargetFinder> mTargetFinders; // 0x28
		private ImageTargetBuilder mImageTargetBuilder; // 0x30
	
		// Properties
		public ImageTargetBuilder ImageTargetBuilder { get; } // 0x00543FB4-0x00543FBC 
	
		// Constructors
		internal ObjectTracker(); // 0x00543FBC-0x00544098
	
		// Methods
		public override bool Start(); // 0x00544098-0x0054426C
		public override void Stop(); // 0x0054426C-0x005447F4
		public DataSet CreateDataSet(); // 0x005447F4-0x00544978
		public bool DestroyDataSet(DataSet dataSet, bool destroyTrackables); // 0x00544978-0x00544B30
		public bool ActivateDataSet(DataSet dataSet); // 0x00537DD0-0x00538258
		public bool DeactivateDataSet(DataSet dataSet); // 0x005376A8-0x00537B30
		public IEnumerable<DataSet> GetActiveDataSets(); // 0x00537658-0x005376A8
		public IEnumerable<DataSet> GetDataSets(); // 0x00544B30-0x00544B38
		public void DestroyAllDataSets(bool destroyTrackables); // 0x00544B38-0x00544D08
		public TargetFinder GetTargetFinder<T>()
			where T : TargetFinder;
		public IEnumerable<TargetFinder> GetTargetFinders(); // 0x00544D08-0x00544D78
	}

	public interface MultiTarget : ObjectTarget // TypeDefIndex: 3452
	{
	}

	public class MultiTargetBehaviour : DataSetTrackableBehaviour // TypeDefIndex: 3453
	{
		// Fields
		private MultiTarget mMultiTarget; // 0x58
	
		// Properties
		public MultiTarget MultiTarget { get; } // 0x0053FC08-0x0053FC10 
	
		// Constructors
		public MultiTargetBehaviour(); // 0x0053FD30-0x0053FD38
	
		// Methods
		protected override void InternalUnregisterTrackable(); // 0x0053FC10-0x0053FC1C
		internal override bool InitializeTarget(Trackable trackable, bool applyTargetScaleToBehaviour); // 0x0053FC1C-0x0053FD30
	}

	public static class VuforiaUnity // TypeDefIndex: 3454
	{
		// Fields
		private static IHoloLensApiAbstraction mHoloLensApiAbstraction; // 0x00
		private const int UNITY_SDK_WRAPPER_UFO = 3914683; // Metadata: 0x0021C20A
		private static bool mRendererDirty; // 0x08
		private static int mWrapperType; // 0x0C
	
		// Nested types
		public enum InitError // TypeDefIndex: 3455
		{
			INIT_VUFORIA_DRIVER_FAILED = -11,
			INIT_EXTERNAL_DEVICE_NOT_DETECTED = -10,
			INIT_LICENSE_ERROR_PRODUCT_TYPE_MISMATCH = -9,
			INIT_LICENSE_ERROR_CANCELED_KEY = -8,
			INIT_LICENSE_ERROR_NO_NETWORK_TRANSIENT = -7,
			INIT_LICENSE_ERROR_NO_NETWORK_PERMANENT = -6,
			INIT_LICENSE_ERROR_INVALID_KEY = -5,
			INIT_LICENSE_ERROR_MISSING_KEY = -4,
			INIT_NO_CAMERA_ACCESS = -3,
			INIT_DEVICE_NOT_SUPPORTED = -2,
			INIT_ERROR = -1,
			INIT_SUCCESS = 0
		}
	
		public enum VuforiaHint // TypeDefIndex: 3456
		{
			HINT_MAX_SIMULTANEOUS_IMAGE_TARGETS = 0,
			HINT_MAX_SIMULTANEOUS_OBJECT_TARGETS = 1,
			HINT_DELAYED_LOADING_OBJECT_DATASETS = 2,
			HINT_ASYNC_FETCH_OF_LATEST_CALIBRATION = 3
		}
	
		public enum StorageType // TypeDefIndex: 3457
		{
			STORAGE_APP = 0,
			STORAGE_APPRESOURCE = 1,
			STORAGE_ABSOLUTE = 2
		}
	
		// Constructors
		static VuforiaUnity(); // 0x00C60138-0x00C601C0
	
		// Methods
		public static void Deinit(); // 0x00C5F4FC-0x00C5F5D0
		public static bool IsRendererDirty(); // 0x00C5F718-0x00C5F7DC
		public static bool SetHint(VuforiaHint hint, int value); // 0x00C5F7DC-0x00C5F8D4
		public static bool SetHint(uint hint, int value); // 0x00C5F8D4-0x00C5F9CC
		public static void OnPause(); // 0x00C5F9CC-0x00C5FAA0
		public static void OnResume(); // 0x00C5FAA0-0x00C5FB74
		public static void SetRendererDirty(); // 0x00C5FB74-0x00C5FBE0
		public static string GetVuforiaLibraryVersion(); // 0x00C5FBE0-0x00C5FCF8
		public static bool SetDriverLibrary(string libraryName, IntPtr userData); // 0x00C5FCF8-0x00C5FDF0
		public static bool SetDriverLibrary(string libraryName); // 0x00C5FDF0-0x00C5FE58
		public static bool SetHolographicAppCoordinateSystem(IntPtr appSpecifiedCS); // 0x00C5FE58-0x00C5FF40
		public static void SetHoloLensApiAbstraction(IHoloLensApiAbstraction holoLensApiAbstraction); // 0x00C5FF40-0x00C5FFAC
		internal static IHoloLensApiAbstraction GetHoloLensApiAbstraction(); // 0x00C5FFAC-0x00C60014
		internal static void SetApplicationEnvironment(); // 0x00C60014-0x00C60138
	}

	public class VuforiaARController : ARController // TypeDefIndex: 3458
	{
		// Fields
		private CameraDevice.CameraDeviceMode CameraDeviceModeSetting; // 0x18
		private int MaxSimultaneousImageTargets; // 0x1C
		private int MaxSimultaneousObjectTargets; // 0x20
		private bool UseDelayedLoadingObjectTargets; // 0x24
		private WorldCenterMode mWorldCenterMode; // 0x28
		private TrackableBehaviour mWorldCenter; // 0x30
		private List<IVideoBackgroundEventHandler> mVideoBgEventHandlers; // 0x38
		private Action mOnBeforeVuforiaTrackersInitialized; // 0x40
		private Action mOnVuforiaInitialized; // 0x48
		private Action mOnVuforiaStarted; // 0x50
		private Action mOnVuforiaDeinitialized; // 0x58
		private Action mOnTrackablesUpdated; // 0x60
		private Action mRenderOnUpdate; // 0x68
		private Action<bool> mOnPause; // 0x70
		private bool mPaused; // 0x78
		private Action mOnBackgroundTextureChanged; // 0x80
		private bool mStartHasBeenInvoked; // 0x88
		private bool mHasStarted; // 0x89
		private ICameraConfiguration mCameraConfiguration; // 0x90
		private DigitalEyewearARController mEyewearBehaviour; // 0x98
		private bool mCheckStopCamera; // 0xA0
		private Material mClearMaterial; // 0xA8
		private bool mMetalRendering; // 0xB0
		private bool mHasStartedOnce; // 0xB1
		private bool mWasEnabledBeforePause; // 0xB2
		private bool mObjectTrackerWasActiveBeforePause; // 0xB3
		private bool mObjectTrackerWasActiveBeforeDisabling; // 0xB4
		private int mLastUpdatedFrame; // 0xB8
		private static VuforiaARController mInstance; // 0x00
		private static object mPadlock; // 0x08
	
		// Properties
		public WorldCenterMode WorldCenterModeSetting { get; } // 0x00702F6C-0x00702FF8 
		public TrackableBehaviour WorldCenter { get; } // 0x00703184-0x0070324C 
		public CameraDevice.CameraDeviceMode CameraDeviceMode { get; } // 0x00703254-0x00703300 
		public bool HasStarted { get; } // 0x00703300-0x00703308 
		public static VuforiaARController Instance { get; } // 0x007033AC-0x00703518 
		internal ICameraConfiguration CameraConfiguration { get; set; } // 0x00705380-0x00705388 0x00705388-0x00705390
	
		// Nested types
		public enum WorldCenterMode // TypeDefIndex: 3459
		{
			SPECIFIC_TARGET = 0,
			FIRST_TARGET = 1,
			DEVICE = 2
		}
	
		// Constructors
		private VuforiaARController(); // 0x00703308-0x007033AC
		static VuforiaARController(); // 0x00709A78-0x00709AE4
	
		// Methods
		[RuntimeInitializeOnLoadMethod] // 0x003DEA20-0x003DEA34
		public static void RegisterARController(); // 0x00703518-0x0070357C
		public void RegisterBeforeVuforiaTrackersInitializedCallback(Action callback); // 0x0070357C-0x00703660
		public void RegisterVuforiaInitializedCallback(Action callback); // 0x00703660-0x00703744
		public void UnregisterBeforeVuforiaTrackersInitializedCallback(Action callback); // 0x00703744-0x00703808
		public void UnregisterVuforiaInitializedCallback(Action callback); // 0x00703808-0x007038CC
		public void RegisterVuforiaStartedCallback(Action callback); // 0x007038CC-0x007039B0
		public void UnregisterVuforiaStartedCallback(Action callback); // 0x007039B0-0x00703A74
		public void RegisterTrackablesUpdatedCallback(Action callback); // 0x00703A74-0x00703B38
		public void UnregisterTrackablesUpdatedCallback(Action callback); // 0x00703B38-0x00703BFC
		public void RegisterOnPauseCallback(Action<bool> callback); // 0x00703BFC-0x00703CC0
		public void UnregisterOnPauseCallback(Action<bool> callback); // 0x00703CC0-0x00703D84
		public void RegisterBackgroundTextureChangedCallback(Action callback); // 0x00703D84-0x00703E48
		public void UnregisterBackgroundTextureChangedCallback(Action callback); // 0x00703E48-0x00703F0C
		public void RegisterVideoBgEventHandler(IVideoBackgroundEventHandler videoBgEventHandler); // 0x00703F0C-0x00703F7C
		public bool UnregisterVideoBgEventHandler(IVideoBackgroundEventHandler videoBgEventHandler); // 0x00703F7C-0x00703FEC
		public void SetWorldCenterMode(WorldCenterMode value); // 0x00703FEC-0x00704084
		public void SetWorldCenter(TrackableBehaviour trackable); // 0x0070408C-0x007041C0
		public Rect GetVideoBackgroundRectInViewPort(); // 0x007041C8-0x00704280
		public ScreenOrientation GetSurfaceOrientation(); // 0x00704280-0x007042DC
		public void UpdateState(bool forceUpdate, bool reapplyOldState); // 0x0070433C-0x00704430
		internal void RegisterVuforiaDeinitializedCallback(Action callback); // 0x007051F8-0x007052BC
		internal void UnregisterVuforiaDeinitializedCallback(Action callback); // 0x007052BC-0x00705380
		internal void InitCameraConfiguration(); // 0x00705390-0x00705494
		internal void ResetBackgroundPlane(bool disable); // 0x00705494-0x0070555C
		internal void RegisterRenderOnUpdateCallback(Action callback); // 0x0070555C-0x00705620
		internal void UnregisterRenderOnUpdateCallback(Action callback); // 0x00705620-0x007056E4
		protected override void Awake(); // 0x007056E4-0x007058A4
		protected override void Start(); // 0x00705A4C-0x00705BD8
		protected override void OnEnable(); // 0x00705D50-0x00705DE4
		protected override void OnApplicationPause(bool pause); // 0x00706090-0x00706430
		protected override void OnDisable(); // 0x00706698-0x007067B8
		protected override void OnDestroy(); // 0x007067B8-0x00706CF4
		private void StartAfterInitializationCompleted(); // 0x00704C6C-0x007051F8
		private static void CreateVideoBackground(); // 0x007081BC-0x007082D8
		private void UpdateStatePrivate(bool forceUpdate, bool reapplyOldState); // 0x00704438-0x00704984
		private bool StartVuforia(bool startObjectTracker); // 0x00705DE4-0x00706090
		private bool StopVuforia(); // 0x00706438-0x00706698
		private void DisableCameraIfNotNeeded(); // 0x00708654-0x007088D8
		private void OnVideoBackgroundConfigChanged(); // 0x007096F4-0x007099A0
		private void EnableObjectRenderer(GameObject go, bool enabled); // 0x007099A0-0x00709A78
	}

	internal struct VuforiaMacros // TypeDefIndex: 3460
	{
		// Fields
		public const string PLATFORM_DLL = "VuforiaWrapper"; // Metadata: 0x0021C266
	}

	public class VuforiaManager // TypeDefIndex: 3461
	{
		// Fields
		private static VuforiaManager sInstance; // 0x00
		private VuforiaARController.WorldCenterMode mWorldCenterMode; // 0x10
		private WorldCenterTrackableBehaviour mWorldCenter; // 0x18
		private VuMarkBehaviour mVuMarkWorldCenter; // 0x20
		private Transform mARCameraTransform; // 0x28
		private Transform mCentralAnchorPoint; // 0x30
		private TrackerData.TrackableResultData[] mTrackableResultDataArray; // 0x38
		private TrackerData.VuMarkTargetData[] mVuMarkDataArray; // 0x40
		private TrackerData.VuMarkTargetResultData[] mVuMarkResultDataArray; // 0x48
		private LinkedList<TrackableIdPair> mWCTrackableFoundQueue; // 0x50
		private Dictionary<PIXEL_FORMAT, UnmanagedImage> mCameraImages; // 0x58
		private IntPtr mImageData; // 0x60
		private int mInjectedFrameIdx; // 0x68
		private IntPtr mLastProcessedFrameStatePtr; // 0x70
		private bool mInitialized; // 0x78
		private bool mPaused; // 0x79
		private TrackerData.FrameState mFrameState; // 0x7A
		private AutoRotationState mAutoRotationState; // 0xCE
		private int mLastFrameIdx; // 0xD4
		private bool mIsSeeThroughDevice; // 0xD8
		private LateLatchingManager mLateLatchingManager; // 0xE0
		private CameraCalibrationComparer mCameraCalibrationComparer; // 0xE8
		private Vector3 mPosePositionalOffset; // 0xF0
		private Quaternion mPoseRotationalOffset; // 0xFC
	
		// Properties
		public static VuforiaManager Instance { get; } // 0x00702FF8-0x0070317C 
		public VuforiaARController.WorldCenterMode WorldCenterMode { get; set; } // 0x0070317C-0x00703184 0x00704084-0x0070408C
		public WorldCenterTrackableBehaviour WorldCenter { get; set; } // 0x0070324C-0x00703254 0x007041C0-0x007041C8
		public VuMarkBehaviour VuMarkWorldCenter { get; set; } // 0x0070BBD8-0x0070BBE0 0x00706F94-0x00706F9C
		public Transform ARCameraTransform { get; internal set; } // 0x0070BBE0-0x0070BBE8 0x00706F9C-0x00706FA4
		public Transform CentralAnchorPoint { get; internal set; } // 0x007091F0-0x007091F8 0x00706FA4-0x00706FAC
		public bool Initialized { get; } // 0x00704430-0x00704438 
		public int CurrentFrameIndex { get; } // 0x0070BBE8-0x0070BBF0 
		internal LateLatchingManager LateLatchingManager { get; } // 0x0070BBF0-0x0070BBF8 
		internal Vector3 PosePositionalOffset { get; } // 0x0070BBF8-0x0070BC04 
		internal Quaternion PoseRotationalOffset { get; } // 0x0070BC04-0x0070BC14 
	
		// Nested types
		public struct TrackableIdPair // TypeDefIndex: 3462
		{
			// Fields
			public int TrackableId; // 0x00
			public int ResultId; // 0x04
	
			// Methods
			internal static TrackableIdPair FromTrackableId(int trackableId); // 0x0070FBC0-0x0070FBC8
			internal static TrackableIdPair FromResultId(int resultId); // 0x0070FCDC-0x0070FCEC
			internal static TrackableIdPair FromTrackableAndResultId(int trackableId, int resultId); // 0x0070FDB8-0x0070FDC4
		}
	
		private struct AutoRotationState // TypeDefIndex: 3463
		{
			// Fields
			internal bool setOnPause; // 0x00
			internal bool autorotateToPortrait; // 0x01
			internal bool autorotateToPortraitUpsideDown; // 0x02
			internal bool autorotateToLandscapeLeft; // 0x03
			internal bool autorotateToLandscapeRight; // 0x04
		}
	
		[CompilerGenerated] // 0x003DCCB8-0x003DCCC8
		private sealed class <>c__DisplayClass60_0 // TypeDefIndex: 3464
		{
			// Fields
			public TrackerData.FrameState frameState; // 0x10
	
			// Constructors
			public <>c__DisplayClass60_0(); // 0x0070D414-0x0070D41C
	
			// Methods
			internal bool <UpdateTrackers>b__0(TrackerData.TrackableResultData trd); // 0x0070FCF8-0x0070FD0C
		}
	
		[CompilerGenerated] // 0x003DCCC8-0x003DCCD8
		private sealed class <>c__DisplayClass71_0 // TypeDefIndex: 3465
		{
			// Fields
			public TrackableIdPair id; // 0x10
	
			// Constructors
			public <>c__DisplayClass71_0(); // 0x0070FCEC-0x0070FCF4
	
			// Methods
			internal bool <UpdateWCTrackableFoundQueue>b__0(TrackerData.TrackableResultData tr); // 0x0070FD0C-0x0070FD20
			internal bool <UpdateWCTrackableFoundQueue>b__1(TrackerData.VuMarkTargetResultData tr); // 0x0070FD20-0x0070FDB8
		}
	
		// Constructors
		internal VuforiaManager(); // 0x0070BA90-0x0070BBD8
		static VuforiaManager(); // 0x0070FCF4-0x0070FCF8
	
		// Methods
		public bool Init(); // 0x00706FAC-0x007081BC
		public void Deinit(); // 0x00706CF4-0x00706F94
		internal bool Update(ScreenOrientation counterRotation, ref bool reapplyOldState); // 0x007088D8-0x007091F0
		internal void Pause(bool pause); // 0x0070D300-0x0070D3F4
		internal static bool IsDetectedOrTrackedorExtendedTracked(TrackableBehaviour.Status status); // 0x0070D3F4-0x0070D414
		private void InitializeTrackableContainer(int numTrackableResults); // 0x0070BC14-0x0070BC94
		private void UpdateTrackers(TrackerData.FrameState frameState); // 0x0070C734-0x0070D300
		private void UpdateCameraPose(bool dtPoseAvailable, TrackerData.TrackableResultData deviceTrackableResult, TrackerData.PoseData cameraPose); // 0x0070F4C4-0x0070F898
		private void GetPoseOffsets(TrackableIdPair originTrackableID, bool dtPoseAvailable, TrackerData.PoseData cameraPose, out Vector3 posePositionalOffset, out Quaternion poseRotationalOffset); // 0x0070F0F8-0x0070F4C4
		private void UpdateIlluminationData(StateManager stateManager, IntPtr frameStatePtr); // 0x0070F898-0x0070F960
		private void UpdateTrackablesEditor(); // 0x0070BC94-0x0070BE40
		private void UnmarshalTrackables(TrackerData.FrameState frameState); // 0x0070D41C-0x0070D608
		private void UnmarshalVuMarkTrackables(TrackerData.FrameState frameState); // 0x0070D608-0x0070D980
		private static TrackerData.IlluminationData UnmarshalIlluminationData(IntPtr frameStatePtr); // 0x0070FAFC-0x0070FBC0
		private void UpdateImageContainer(); // 0x0070BE40-0x0070C210
		private void UpdateCameraFrame(); // 0x0070C548-0x0070C734
		private void InjectCameraFrame(); // 0x0070C210-0x0070C548
		private void UpdateWCTrackableFoundQueue(); // 0x0070D980-0x0070DD38
		private void UpdateWCTrackableFoundQueue(TrackableBehaviour.Status status, TrackableIdPair trackableId); // 0x0070FBC8-0x0070FCDC
		private TrackerData.TrackableResultData GetTrackableResultData(TrackableIdPair trackableId, bool includeVuMarks); // 0x0070F960-0x0070FAFC
		private VuMarkBehaviour GetVuMarkWorldCenter(int vuMarkTemplateId); // 0x0070ECC0-0x0070F0F8
		private void UpdateExtendedTrackedVuMarks(); // 0x0070DD38-0x0070ECC0
	}

	public class VuforiaRenderer // TypeDefIndex: 3466
	{
		// Fields
		private static VuforiaRenderer sInstance; // 0x00
		private VideoBGCfgData mVideoBGConfig; // 0x10
		private bool mVideoBGConfigSet; // 0x20
		private Texture mVideoBackgroundTexture; // 0x28
		private IntPtr mNativeRenderingCallback; // 0x30
		private bool mBackgroundTextureHasChanged; // 0x38
		private Func<bool> mLegacyRenderingCondition; // 0x40
	
		// Properties
		public static VuforiaRenderer Instance { get; } // 0x007082D8-0x0070845C 
		public Texture VideoBackgroundTexture { get; } // 0x0071B480-0x0071B488 
	
		// Nested types
		[Flags] // 0x003DCCD8-0x003DCCE8
		public enum FpsHint // TypeDefIndex: 3467
		{
			NONE = 0,
			NO_VIDEOBACKGROUND = 1,
			POWEREFFICIENCY = 2,
			FAST = 4
		}
	
		public struct VideoBGCfgData // TypeDefIndex: 3468
		{
			// Fields
			public Vec2I position; // 0x00
			public Vec2I size; // 0x08
		}
	
		public struct Vec2I // TypeDefIndex: 3469
		{
			// Fields
			public int x; // 0x00
			public int y; // 0x04
	
			// Constructors
			public Vec2I(int v1, int v2); // 0x0071C728-0x0071C730
		}
	
		public struct VideoTextureInfo // TypeDefIndex: 3470
		{
			// Fields
			public Vec2I textureSize; // 0x00
			public Vec2I imageSize; // 0x08
		}
	
		public enum RendererAPI // TypeDefIndex: 3471
		{
			GL_20 = 1,
			METAL = 2,
			DIRECTX3D11 = 4,
			GL_30 = 8
		}
	
		internal enum RenderEvent // TypeDefIndex: 3472
		{
			NO_OP = 100,
			SURFACE_CREATED = 101,
			RENDERER_BEGIN = 102,
			RENDERER_BEGIN_AND_BIND = 103,
			RENDERER_END = 104,
			RENDERER_DEINIT = 105,
			RENDERER_CREATE_TEXTURE = 106
		}
	
		[Serializable]
		[CompilerGenerated] // 0x003DCCE8-0x003DCCF8
		private sealed class <>c // TypeDefIndex: 3473
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static Func<bool> <>9__18_0; // 0x08
	
			// Constructors
			static <>c(); // 0x0071C5CC-0x0071C630
			public <>c(); // 0x0071C630-0x0071C638
	
			// Methods
			internal bool <.ctor>b__18_0(); // 0x0071C638-0x0071C728
		}
	
		// Constructors
		internal VuforiaRenderer(); // 0x0071B394-0x0071B480
		static VuforiaRenderer(); // 0x0071C5C8-0x0071C5CC
	
		// Methods
		public void SetLegacyRenderingEnabledCondition(Func<bool> condition); // 0x0071B488-0x0071B490
		public VideoBGCfgData GetVideoBackgroundConfig(); // 0x0071B490-0x0071B67C
		public void ClearVideoBackgroundConfig(); // 0x00709208-0x00709278
		public void SetVideoBackgroundConfig(VideoBGCfgData config); // 0x0071B67C-0x0071B700
		public IntPtr createNativeTexture(int width, int height, int format); // 0x0071B8E0-0x0071B9D8
		public bool SetVideoBackgroundTexture(Texture texture); // 0x0071B9D8-0x0071BBFC
		public bool SetVideoBackgroundTexturePtr(Texture texture); // 0x0071BBFC-0x0071BE0C
		public bool IsVideoBackgroundInfoAvailable(); // 0x0071BE0C-0x0071BF40
		public VideoTextureInfo GetVideoTextureInfo(); // 0x0071BFA0-0x0071C1C8
		public void Pause(bool pause); // 0x0071C1C8-0x0071C240
		public int GetRecommendedFps(FpsHint flags); // 0x0071C240-0x0071C320
		public RendererAPI GetRendererAPI(); // 0x0070845C-0x00708534
		internal void UnityRenderEvent(RenderEvent renderEvent); // 0x0071C320-0x0071C4D0
		internal bool HasBackgroundTextureChanged(); // 0x007091F8-0x00709208
		internal void SetVideoBackgroundConfigInternal(VideoBGCfgData config); // 0x0071B700-0x0071B8E0
		internal bool IsLegacyRenderingEnabled(); // 0x0071BF40-0x0071BFA0
		internal void SetNativeTextureData(PIXEL_FORMAT format, int width, int height); // 0x0071C4D0-0x0071C5C8
	}

	public class VuforiaRuntimeUtilities // TypeDefIndex: 3474
	{
		// Fields
		private static InitializableBool sWebCamUsed; // 0x00
		private static InitializableBool sNativePluginSupport; // 0x04
	
		// Properties
		public static ScreenOrientation ScreenOrientation { get; } // 0x007042DC-0x0070433C 
		public static bool IsLandscapeOrientation { get; } // 0x0071DA8C-0x0071DAF8 
		public static bool IsPortraitOrientation { get; } // 0x0071DAF8-0x0071DB60 
	
		// Nested types
		private enum InitializableBool // TypeDefIndex: 3475
		{
			UNKNOWN = 0,
			TRUE = 1,
			FALSE = 2
		}
	
		internal static class GlobalVars // TypeDefIndex: 3476
		{
			// Fields
			public const string DEFAULT_TRACKABLE_NAME = "--- EMPTY ---"; // Metadata: 0x0021C2C1
			public const string DEFAULT_DATA_SET_NAME = "--- EMPTY ---"; // Metadata: 0x0021C2D2
			public const string EMULATOR_IMAGE_TARGET = "emulator_ground_plane"; // Metadata: 0x0021C2E3
			internal const string UNITY_RESOURCES_LOCATION = "Resources"; // Metadata: 0x0021C2FC
			internal const string UNITY_MATERIALS_FOLDER_NAME = "Materials"; // Metadata: 0x0021C309
			internal const string UNITY_MESHES_FOLDER_NAME = "Meshes"; // Metadata: 0x0021C316
			internal static readonly string GLTF_ASSET_LOCATION; // 0x00
			internal const string PREFAB_EXT = ".prefab"; // Metadata: 0x0021C320
			internal const PIXEL_FORMAT DEFAULT_WEBCAM_PIXEL_FORMAT = PIXEL_FORMAT.RGBA8888; // Metadata: 0x0021C32B
	
			// Constructors
			static GlobalVars(); // 0x00C5F3DC-0x00C5F4FC
		}
	
		private struct CameraState // TypeDefIndex: 3477
		{
			// Fields
			[CompilerGenerated] // 0x003DE248-0x003DE258
			private readonly bool <Initialized>k__BackingField; // 0x00
			[CompilerGenerated] // 0x003DE258-0x003DE268
			private readonly bool <Active>k__BackingField; // 0x01
			[CompilerGenerated] // 0x003DE268-0x003DE278
			private readonly CameraDevice.CameraDeviceMode <DeviceMode>k__BackingField; // 0x04
	
			// Properties
			public bool Initialized { [CompilerGenerated] /* 0x003DEBFC-0x003DEC0C */ get; } // 0x00C5F37C-0x00C5F38C 
			public bool Active { [CompilerGenerated] /* 0x003DEC0C-0x003DEC1C */ get; } // 0x00C5F38C-0x00C5F39C 
			public CameraDevice.CameraDeviceMode DeviceMode { [CompilerGenerated] /* 0x003DEC1C-0x003DEC2C */ get; } // 0x00C5F39C-0x00C5F3BC 
			public static CameraState UnInitialized { get; } // 0x00C5F3D4-0x00C5F3DC 
	
			// Constructors
			public CameraState(bool initialized, bool active, CameraDevice.CameraDeviceMode deviceMode); // 0x00C5F3BC-0x00C5F3D4
		}
	
		[Serializable]
		[CompilerGenerated] // 0x003DCCF8-0x003DCD08
		private sealed class <>c // TypeDefIndex: 3478
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static Func<TargetFinder, bool> <>9__31_0; // 0x08
			public static Func<TargetFinder, bool> <>9__31_1; // 0x10
	
			// Constructors
			static <>c(); // 0x00C5F20C-0x00C5F270
			public <>c(); // 0x00C5F270-0x00C5F278
	
			// Methods
			internal bool <StopCameraIfPossible>b__31_0(TargetFinder tf); // 0x00C5F278-0x00C5F2B8
			internal bool <StopCameraIfPossible>b__31_1(TargetFinder tf); // 0x00C5F2B8-0x00C5F37C
		}
	
		// Constructors
		public VuforiaRuntimeUtilities(); // 0x0071F6C8-0x0071F6D0
		static VuforiaRuntimeUtilities(); // 0x0071F6D0-0x0071F6D4
	
		// Methods
		public static string GetStoragePath(string path, VuforiaUnity.StorageType storageType); // 0x0071D80C-0x0071D8F8
		public static string StripStreamingAssetsFromPath(string fullPath); // 0x0071D940-0x0071DA8C
		public static void ForceDisableTrackables(); // 0x0071DB60-0x0071DCE8
		public static bool IsPlayMode(); // 0x00706430-0x00706438
		public static bool IsWSARuntime(); // 0x0071D8F8-0x0071D940
		public static bool IsVuforiaEnabled(); // 0x007022D0-0x007023FC
		public static bool IsWebCamUsed(); // 0x0071DCE8-0x0071DDBC
		public static Vector2 ScreenSpaceToCameraFrameCoordinatesNormalized(Vector2 screenSpaceCoordinate, Rect bgTextureViewPortRect); // 0x0071DEC4-0x0071DF64
		public static Vector2 ViewPortToCameraFrameCoordinatesNormalized(Vector2 unityViewPortCoordinates, Rect bgTextureViewPortRect); // 0x0071DF64-0x0071E17C
		public static VuforiaRenderer.Vec2I ScreenSpaceToCameraFrameCoordinates(Vector2 screenSpaceCoordinate, Rect bgTextureViewPortRect, bool isTextureMirrored, CameraDevice.VideoModeData videoModeData); // 0x0071E17C-0x0071E328
		public static Vector2 CameraFrameToScreenSpaceCoordinates(Vector2 cameraFrameCoordinate, Rect bgTextureViewPortRect, bool isTextureMirrored, CameraDevice.VideoModeData videoModeData); // 0x0071E464-0x0071E5E4
		public static OrientedBoundingBox CameraFrameToScreenSpaceCoordinates(OrientedBoundingBox cameraFrameObb, Rect bgTextureViewPortRect, bool isTextureMirrored, CameraDevice.VideoModeData videoModeData); // 0x0071E5E4-0x0071E818
		public static void SelectRectTopLeftAndBottomRightForLandscapeLeft(Rect screenSpaceRect, bool isMirrored, out Vector2 topLeft, out Vector2 bottomRight); // 0x0071E818-0x0071EA60
		public static void DisableSleepMode(); // 0x0071EA60-0x0071EA6C
		public static void ResetSleepMode(); // 0x0071EA6C-0x0071EA78
		public static bool MatrixIsNaN(Matrix4x4 matrix); // 0x0071EA78-0x0071EC98
		public static bool IsUfoEnabled(string licenseKey, string ufoKey); // 0x0070B93C-0x0070B980
		public static FusionProviderType SetAllowedFusionProviders(FusionProviderType providerTypes); // 0x0071EC98-0x0071ED78
		public static FusionProviderType GetActiveFusionProvider(); // 0x0071ED78-0x0071EE50
		internal static bool CheckNativePluginSupport(); // 0x0071DDBC-0x0071DEC4
		internal static bool IsNativePluginSupportAvailable(); // 0x0071EEDC-0x0071EFEC
		internal static bool StopCameraIfPossible(out bool objectTrackerWasStopped); // 0x00709278-0x007096F4
		internal static string DecodeUfoLicenseKey(string ufoKey); // 0x0071CCE8-0x0071CD88
		internal static string EncodeUfoLicenseKey(string ufoKey); // 0x0071F0D8-0x0071F174
		internal static string GetModelPath(string dataSetName, string targetName, bool isResource = false /* Metadata: 0x0021C2B4 */); // 0x0071F174-0x0071F3B0
		private static CameraState GetCameraState(); // 0x0071F3B0-0x0071F4A8
		private static void StopAndDeinitCamera(); // 0x0071F4A8-0x0071F5B0
		private static void ReInitAndStartCamera(CameraState stateToRestore); // 0x0071F5B0-0x0071F6C8
		internal static T SafeInitTracker<T>()
			where T : Tracker;
		internal static bool SafeDeinitTracker<T>()
			where T : Tracker;
		private static void PrepareCoordinateConversion(bool isTextureMirrored, ref float prefixX, ref float prefixY, ref float inversionMultiplierX, ref float inversionMultiplierY, ref bool isPortrait); // 0x0071E328-0x0071E464
		private static bool IsPositionalDeviceTrackerActive(); // 0x0071EFEC-0x0071F0D8
		private static extern int qcarCheckNativePluginSupport(); // 0x0071EE50-0x0071EEDC
	}

	public static class SurfaceUtilities // TypeDefIndex: 3479
	{
		// Fields
		private static ScreenOrientation mScreenOrientation; // 0x00
	
		// Constructors
		static SurfaceUtilities(); // 0x004611AC-0x004611B0
	
		// Methods
		public static void OnSurfaceCreated(); // 0x0044E638-0x0044E6B4
		public static void OnSurfaceDeinit(); // 0x00460FB0-0x0046102C
		public static bool HasSurfaceBeenRecreated(); // 0x0044E808-0x0044E8EC
		public static void OnSurfaceChanged(int screenWidth, int screenHeight); // 0x0046102C-0x00461144
		public static void SetSurfaceOrientation(ScreenOrientation screenOrientation); // 0x0044E570-0x0044E5DC
		public static ScreenOrientation GetSurfaceOrientation(); // 0x00461144-0x004611AC
	}

	public abstract class TargetFinder // TypeDefIndex: 3480
	{
		// Fields
		protected IntPtr mTargetFinderPtr; // 0x10
		protected Dictionary<int, ObjectTarget> mTargets; // 0x18
		private IntPtr mTargetFinderStatePtr; // 0x20
		private TargetFinderState mTargetFinderState; // 0x28
		private List<TargetSearchResult> mNewResults; // 0x30
	
		// Properties
		internal IntPtr TargetFinderPtr { get; } // 0x004613A8-0x004613B0 
	
		// Nested types
		protected struct TargetFinderObjectTargetData // TypeDefIndex: 3481
		{
			// Fields
			public int id; // 0x00
			public int type; // 0x04
			public Vector3 center; // 0x08
			public Vector3 size; // 0x14
		}
	
		public enum InitState // TypeDefIndex: 3482
		{
			INIT_ERROR_DEVICE_DATABASE_ERROR = -3,
			INIT_ERROR_SERVICE_NOT_AVAILABLE = -2,
			INIT_ERROR_NO_NETWORK_CONNECTION = -1,
			INIT_DEFAULT = 0,
			INIT_RUNNING = 1,
			INIT_SUCCESS = 2
		}
	
		public enum UpdateState // TypeDefIndex: 3483
		{
			UPDATE_ERROR_REQUEST_TIMEOUT = -8,
			UPDATE_ERROR_TIMESTAMP_OUT_OF_RANGE = -7,
			UPDATE_ERROR_UPDATE_SDK = -6,
			UPDATE_ERROR_BAD_FRAME_QUALITY = -5,
			UPDATE_ERROR_SERVICE_NOT_AVAILABLE = -4,
			UPDATE_ERROR_NO_NETWORK_CONNECTION = -3,
			UPDATE_ERROR_PROJECT_SUSPENDED = -2,
			UPDATE_ERROR_AUTHORIZATION_FAILED = -1,
			UPDATE_NO_MATCH = 0,
			UPDATE_NO_REQUEST = 1,
			UPDATE_RESULTS_AVAILABLE = 2
		}
	
		public enum FilterMode // TypeDefIndex: 3484
		{
			FILTER_NONE = 0,
			FILTER_CURRENTLY_TRACKED = 1
		}
	
		public abstract class TargetSearchResult // TypeDefIndex: 3485
		{
			// Fields
			public string TargetName; // 0x10
			public string UniqueTargetId; // 0x18
			public IntPtr TargetSearchResultPtr; // 0x20
	
			// Constructors
			protected TargetSearchResult(); // 0x0046235C-0x00462364
		}
	
		public class CloudRecoSearchResult : TargetSearchResult // TypeDefIndex: 3486
		{
			// Fields
			public string MetaData; // 0x28
			[Obsolete] // 0x003DE278-0x003DE2B0
			public float TargetSize; // 0x30
			public byte TrackingRating; // 0x34
	
			// Constructors
			public CloudRecoSearchResult(); // 0x00462354-0x0046235C
		}
	
		public class ModelRecoSearchResult : TargetSearchResult // TypeDefIndex: 3487
		{
			// Fields
			public string GuideViewName; // 0x28
			public float Confidence; // 0x30
	
			// Constructors
			public ModelRecoSearchResult(); // 0x00462364-0x0046236C
		}
	
		private struct TargetFinderState // TypeDefIndex: 3488
		{
			// Fields
			public int IsRequesting; // 0x00
			public int UpdateState; // 0x04
		}
	
		// Constructors
		internal TargetFinder(IntPtr targetFinderPtr); // 0x004611B0-0x004612DC
	
		// Methods
		~TargetFinder(); // 0x004612DC-0x004613A8
		public InitState GetInitState(); // 0x004613B0-0x00461494
		public bool Deinit(); // 0x00461494-0x00461584
		public bool StartRecognition(); // 0x00461584-0x00461674
		public bool Stop(); // 0x00461674-0x00461764
		public bool IsRequesting(); // 0x00461764-0x00461774
		public UpdateState Update(); // 0x00461774-0x0046177C
		public UpdateState Update(FilterMode filterMode); // 0x0046177C-0x00461988
		public IEnumerable<TargetSearchResult> GetResults(); // 0x00461988-0x00461990
		public TrackableBehaviour EnableTracking(TargetSearchResult result, string gameObjectName); // 0x00461990-0x00461A0C
		public TrackableBehaviour EnableTracking(TargetSearchResult result, GameObject gameObject); // 0x00461A0C-0x00462038
		public void ClearTrackables(bool destroyGameObjects = true /* Metadata: 0x0021C32F */); // 0x00462038-0x004622F0
		public IEnumerable<ObjectTarget> GetObjectTargets(); // 0x004622F0-0x00462350
		internal abstract List<TargetSearchResult> ParseSearchResults(TrackerData.StructList resultList);
		internal abstract void FreeResultList(IntPtr listPtr);
		protected abstract TrackableBehaviour CreateObjectTarget(string targetName, TargetFinderObjectTargetData objTargetData, GameObject gameObj);
		protected abstract void DeleteObsoleteTargets(List<int> newTargetIds);
		protected virtual void ClearAdditionalGameObjects(); // 0x00462350-0x00462354
	}

	internal struct SimpleTargetData // TypeDefIndex: 3489
	{
		// Fields
		public int id; // 0x00
		internal int unused; // 0x04
	}

	public interface Trackable // TypeDefIndex: 3490
	{
		// Properties
		string Name { get; }
		int ID { get; }
	}

	public abstract class TrackableBehaviour : VuforiaMonoBehaviour // TypeDefIndex: 3491
	{
		// Fields
		[CompilerGenerated] // 0x003DDE08-0x003DDE18
		private double <TimeStamp>k__BackingField; // 0x18
		[HideInInspector] // 0x003DDE18-0x003DDE50
		[SerializeField] // 0x003DDE18-0x003DDE50
		protected string mTrackableName; // 0x20
		[HideInInspector] // 0x003DDE50-0x003DDE88
		[SerializeField] // 0x003DDE50-0x003DDE88
		protected bool mPreserveChildSize; // 0x28
		[HideInInspector] // 0x003DDE88-0x003DDEC0
		[SerializeField] // 0x003DDE88-0x003DDEC0
		protected bool mInitializedInEditor; // 0x29
		protected Vector3 mPreviousScale; // 0x2C
		protected Status mStatus; // 0x38
		protected Trackable mTrackable; // 0x40
		private List<ITrackableEventHandler> mTrackableEventHandlers; // 0x48
	
		// Properties
		public Status CurrentStatus { get; } // 0x0045B2F0-0x0045B2F8 
		public virtual Trackable Trackable { get; } // 0x00462DC8-0x00462DD0 
		public string TrackableName { get; } // 0x00458920-0x00458928 
		internal double TimeStamp { [CompilerGenerated] /* 0x003DEA34-0x003DEA44 */ get; [CompilerGenerated] /* 0x003DEA44-0x003DEA54 */ set; } // 0x00462DD0-0x00462DD8 0x0045C0F8-0x0045C100
	
		// Nested types
		public enum Status // TypeDefIndex: 3492
		{
			NO_POSE = 0,
			LIMITED = 1,
			DETECTED = 2,
			TRACKED = 3,
			EXTENDED_TRACKED = 4
		}
	
		public enum StatusInfo // TypeDefIndex: 3493
		{
			NORMAL = 0,
			UNKNOWN = 1,
			INITIALIZING = 2,
			RELOCALIZING = 3,
			EXCESSIVE_MOTION = 4,
			INSUFFICIENT_FEATURES = 5
		}
	
		// Constructors
		protected TrackableBehaviour(); // 0x00463C24-0x00463CD4
	
		// Methods
		public void RegisterTrackableEventHandler(ITrackableEventHandler trackableEventHandler); // 0x00462DD8-0x00462EC8
		public bool UnregisterTrackableEventHandler(ITrackableEventHandler trackableEventHandler); // 0x00462EC8-0x00462F38
		public virtual void OnTrackerUpdate(Status newStatus); // 0x00462F38-0x004630E0
		public virtual void OnFrameIndexUpdate(int newFrameIndex); // 0x004630E0-0x004630E4
		private void OnDisable(); // 0x004630E4-0x00463284
		internal bool CorrectScale(); // 0x00463284-0x00463290
		internal void UnregisterTrackable(); // 0x004563D0-0x004563DC
		internal virtual void OnTrackableEnabledChanged(bool trackableEnabled); // 0x00463290-0x00463294
		protected abstract void InternalUnregisterTrackable();
		protected virtual bool CorrectScaleImpl(); // 0x00463294-0x0046329C
		protected bool EnforceUniformScaling(); // 0x0046329C-0x00463488
		protected bool SetScaleFromWidth(float width, float aspectRatio); // 0x00463488-0x004636EC
		protected bool SetScaleFromHeight(float height, float aspectRatio); // 0x004636EC-0x00463950
		protected virtual bool SetScale(Vector3 size); // 0x00463950-0x00463C24
	}

	public class TrackableSource // TypeDefIndex: 3494
	{
		// Fields
		[CompilerGenerated] // 0x003DDEC0-0x003DDED0
		private IntPtr <TrackableSourcePtr>k__BackingField; // 0x10
	
		// Properties
		internal IntPtr TrackableSourcePtr { [CompilerGenerated] /* 0x003DEA54-0x003DEA64 */ get; [CompilerGenerated] /* 0x003DEA64-0x003DEA74 */ private set; } // 0x00463D30-0x00463D38 0x00463D38-0x00463D40
	
		// Constructors
		internal TrackableSource(IntPtr trackableSourcePtr); // 0x00463D40-0x00463D6C
	}

	public abstract class Tracker // TypeDefIndex: 3495
	{
		// Fields
		[CompilerGenerated] // 0x003DDED0-0x003DDEE0
		private bool <IsActive>k__BackingField; // 0x10
	
		// Properties
		public virtual bool IsActive { [CompilerGenerated] /* 0x003DEA74-0x003DEA84 */ get; [CompilerGenerated] /* 0x003DEA84-0x003DEA94 */ protected set; } // 0x00463D6C-0x00463D74 0x00463D74-0x00463D80
	
		// Constructors
		protected Tracker(); // 0x004546B4-0x004546BC
	
		// Methods
		public abstract bool Start();
		public abstract void Stop();
	}

	public class TrackerManager : ITrackerManager // TypeDefIndex: 3496
	{
		// Fields
		private static ITrackerManager mInstance; // 0x00
		private readonly StateManager mStateManager; // 0x10
		private readonly Dictionary<Type, Tracker> mTrackers; // 0x18
		private readonly Dictionary<Type, Func<Type, Tracker>> mTrackerCreators; // 0x20
		private readonly Dictionary<Type, Func<Tracker, bool>> mTrackerNativeDeinitializers; // 0x28
	
		// Properties
		public static ITrackerManager Instance { get; } // 0x0044EBDC-0x0044ED00 
	
		// Nested types
		[Serializable]
		[CompilerGenerated] // 0x003DCD08-0x003DCD18
		private sealed class <>c // TypeDefIndex: 3497
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static Func<Type, Tracker> <>9__8_0; // 0x08
			public static Func<Type, Tracker> <>9__8_1; // 0x10
			public static Func<Tracker, bool> <>9__8_2; // 0x18
			public static Func<Tracker, bool> <>9__8_3; // 0x20
	
			// Constructors
			static <>c(); // 0x00464ACC-0x00464B30
			public <>c(); // 0x00464B30-0x00464B38
	
			// Methods
			internal Tracker <.ctor>b__8_0(Type t); // 0x00464B38-0x00464B94
			internal Tracker <.ctor>b__8_1(Type t); // 0x00464B94-0x00464B98
			internal bool <.ctor>b__8_2(Tracker t); // 0x00464B98-0x00464C0C
			internal bool <.ctor>b__8_3(Tracker t); // 0x00464C0C-0x00464C80
		}
	
		// Constructors
		internal TrackerManager(); // 0x00463DA8-0x004643FC
	
		// Methods
		internal static void SetInstance(ITrackerManager trackerManager); // 0x004643FC-0x00464450
		public T GetTracker<T>()
			where T : Tracker;
		public T InitTracker<T>()
			where T : Tracker;
		public bool DeinitTracker<T>()
			where T : Tracker;
		public StateManager GetStateManager(); // 0x00464450-0x00464458
		private static Type GetMappableType<T>()
			where T : Tracker;
		private static bool DeInitializeDeviceTrackerNative(object deviceTracker); // 0x00464458-0x00464590
		private static bool IsTrackerSupportedNatively<T>()
			where T : Tracker;
		private static bool DeinitializeTrackerNative(Type type); // 0x00464590-0x004646B4
		private static bool InitializeTrackerNative(Type type); // 0x004646B4-0x004647D8
		private static SmartTerrain CreateSmartTerrain(); // 0x004647D8-0x0046487C
		private static DeviceTracker CreateDeviceTracker(Type type); // 0x0046487C-0x00464994
		private static DeviceTracker CreatePositionalDeviceTracker(); // 0x00464A38-0x00464ACC
		private static DeviceTracker CreateRotationalDeviceTracker(); // 0x00464994-0x00464A38
	}

	public interface ITrackerManager // TypeDefIndex: 3498
	{
		// Methods
		T GetTracker<T>()
			where T : Tracker;
		T InitTracker<T>()
			where T : Tracker;
		bool DeinitTracker<T>()
			where T : Tracker;
		StateManager GetStateManager();
	}

	public class UserDefinedTargetBuildingBehaviour : VuforiaMonoBehaviour // TypeDefIndex: 3499
	{
		// Fields
		private ObjectTracker mObjectTracker; // 0x18
		private ImageTargetBuilder.FrameQuality mLastFrameQuality; // 0x20
		private bool mCurrentlyScanning; // 0x24
		private bool mWasScanningBeforeDisable; // 0x25
		private bool mCurrentlyBuilding; // 0x26
		private bool mWasBuildingBeforeDisable; // 0x27
		private bool mOnInitializedCalled; // 0x28
		private readonly List<IUserDefinedTargetEventHandler> mHandlers; // 0x30
		public bool StopTrackerWhileScanning; // 0x38
		public bool StartScanningAutomatically; // 0x39
		public bool StopScanningWhenFinshedBuilding; // 0x3A
	
		// Constructors
		public UserDefinedTargetBuildingBehaviour(); // 0x0046994C-0x004699C4
	
		// Methods
		public void RegisterEventHandler(IUserDefinedTargetEventHandler eventHandler); // 0x00468DB8-0x00468EB4
		public bool UnregisterEventHandler(IUserDefinedTargetEventHandler eventHandler); // 0x00468EB4-0x00468F24
		public void StartScanning(); // 0x00468F24-0x00468F9C
		public void BuildNewTarget(string targetName, float screenSizeWidth); // 0x00469144-0x004691AC
		public void StopScanning(); // 0x004691AC-0x00469230
		private void SetFrameQuality(ImageTargetBuilder.FrameQuality frameQuality); // 0x00468F9C-0x00469144
		private void Start(); // 0x00469230-0x0046933C
		private void Update(); // 0x0046933C-0x00469578
		private void OnEnable(); // 0x00469578-0x0046959C
		private void OnDisable(); // 0x0046959C-0x004695C0
		private void OnDestroy(); // 0x004695C0-0x004696CC
		internal void OnVuforiaStarted(); // 0x004696CC-0x00469908
		internal void OnPause(bool pause); // 0x00469908-0x0046994C
	}

	[RequireComponent] // 0x003DCB00-0x003DCB64
	public class VideoBackgroundBehaviour : VuforiaMonoBehaviour // TypeDefIndex: 3500
	{
		// Fields
		private int mClearBuffers; // 0x18
		private int mSkipStateUpdates; // 0x1C
		private Camera mCamera; // 0x20
		private BackgroundPlaneBehaviour mBackgroundPlaneBehaviour; // 0x28
		private IVideoTextureUpdater mVideoTextureUpdater; // 0x30
	
		// Constructors
		public VideoBackgroundBehaviour(); // 0x0046B774-0x0046B77C
	
		// Methods
		public void ResetBackgroundPlane(bool disable); // 0x0046AFEC-0x0046B184
		public void SetVideoBackgroundMaterial(Material videoBackgroundMaterial); // 0x0046B184-0x0046B20C
		private void Awake(); // 0x0046B20C-0x0046B3D4
		private void Start(); // 0x0046B634-0x0046B63C
		private void OnPostRender(); // 0x0046B63C-0x0046B6C0
		private void OnDestroy(); // 0x0046B6C0-0x0046B774
		private BackgroundPlaneBehaviour CreateBackgroundPlane(); // 0x0046B3D4-0x0046B4DC
	}

	public class VideoBackgroundManager : ARController // TypeDefIndex: 3501
	{
		// Fields
		private HideExcessAreaUtility.CLIPPING_MODE mClippingMode; // 0x18
		private Shader mMatteShader; // 0x20
		private bool mVideoBackgroundEnabled; // 0x28
		private bool mVideoBackgroundNeedsRedrawing; // 0x29
		private int mDiscardStatesForRendering; // 0x2C
		private bool mIsSeeThroughDevice; // 0x30
		private static VideoBackgroundManager mInstance; // 0x00
		private static object mPadlock; // 0x08
		[CompilerGenerated] // 0x003DDEE0-0x003DDEF0
		private bool <VideoBackgroundTextureSet>k__BackingField; // 0x31
	
		// Properties
		public static VideoBackgroundManager Instance { get; } // 0x0046BF7C-0x0046C0F4 
		public bool VideoBackgroundEnabled { get; } // 0x0046C158-0x0046C160 
		public HideExcessAreaUtility.CLIPPING_MODE ClippingMode { get; } // 0x0046C160-0x0046C168 
		public Shader MatteShader { get; } // 0x0046C168-0x0046C170 
		internal bool VideoBackgroundTextureSet { [CompilerGenerated] /* 0x003DEAB8-0x003DEAC8 */ private get; [CompilerGenerated] /* 0x003DEAA8-0x003DEAB8 */ set; } // 0x0046C17C-0x0046C184 0x0046C170-0x0046C17C
	
		// Constructors
		private VideoBackgroundManager(); // 0x0046BF6C-0x0046BF7C
		static VideoBackgroundManager(); // 0x0046CCF8-0x0046CD64
	
		// Methods
		[RuntimeInitializeOnLoadMethod] // 0x003DEA94-0x003DEAA8
		public static void RegisterARController(); // 0x0046C0F4-0x0046C158
		public void SetVideoBackgroundEnabled(bool value); // 0x0046C184-0x0046C1C4
		public void SetClippingMode(HideExcessAreaUtility.CLIPPING_MODE value); // 0x0046C7B0-0x0046C7B8
		public void SetMatteShader(Shader value); // 0x0046C7B8-0x0046C7C0
		internal void Initialize(); // 0x0046C7C0-0x0046C888
		internal void StartNativeVideoUpdate(); // 0x0046C888-0x0046C980
		internal void FinishNativeVideoUpdate(); // 0x0046C980-0x0046CA40
		internal void NeedsRedrawing(); // 0x0046CA40-0x0046CA4C
		internal void SetRenderingStatesToDiscard(); // 0x0046CA4C-0x0046CA58
		internal int GetRenderingStatesToDiscard(); // 0x0046CA58-0x0046CA60
		internal bool IsDiscardingRenderingStates(); // 0x0046CA60-0x0046CA70
		internal void DiscardRenderingState(); // 0x0046CA70-0x0046CA84
		protected override void Awake(); // 0x0046CA84-0x0046CB78
		protected override void Start(); // 0x0046CB78-0x0046CC34
		protected override void Update(); // 0x0046CC34-0x0046CC38
		protected override void OnDestroy(); // 0x0046CC38-0x0046CCF4
		private void OnVuforiaInitialized(); // 0x0046CCF4-0x0046CCF8
		private void UpdateVideoBackgroundEnabled(); // 0x0046C1C4-0x0046C7B0
	}

	public class VirtualButton // TypeDefIndex: 3502
	{
		// Fields
		private string mName; // 0x10
		private int mID; // 0x18
		private RectangleData mArea; // 0x1C
		private bool mIsEnabled; // 0x2C
		private ImageTarget mParentImageTarget; // 0x30
		private DataSet mParentDataSet; // 0x38
		public const Sensitivity DEFAULT_SENSITIVITY = Sensitivity.LOW; // Metadata: 0x0021C3A8
	
		// Properties
		public string Name { get; } // 0x0046E8EC-0x0046E8F4 
		public int ID { get; } // 0x0045BA70-0x0045BA78 
		public bool Enabled { get; } // 0x0046E8F4-0x0046E8FC 
		public RectangleData Area { get; } // 0x0046E8FC-0x0046E908 
	
		// Nested types
		public enum Sensitivity // TypeDefIndex: 3503
		{
			HIGH = 0,
			MEDIUM = 1,
			LOW = 2
		}
	
		// Constructors
		internal VirtualButton(string name, int id, RectangleData area, ImageTarget imageTarget, DataSet dataSet); // 0x0046E908-0x0046E988
	
		// Methods
		public bool SetArea(RectangleData area); // 0x0046E988-0x0046EC50
		public bool SetSensitivity(Sensitivity sensitivity); // 0x0046EC50-0x0046EE3C
		public bool SetEnabled(bool enabled); // 0x0046EE3C-0x0046F03C
	}

	public class VirtualButtonBehaviour : VuforiaMonoBehaviour // TypeDefIndex: 3504
	{
		// Fields
		public const float TARGET_OFFSET = 0.001f; // Metadata: 0x0021C3B8
		[HideInInspector] // 0x003DDEF0-0x003DDF28
		[SerializeField] // 0x003DDEF0-0x003DDF28
		private string mName; // 0x18
		[HideInInspector] // 0x003DDF28-0x003DDF60
		[SerializeField] // 0x003DDF28-0x003DDF60
		private VirtualButton.Sensitivity mSensitivity; // 0x20
		[HideInInspector] // 0x003DDF60-0x003DDF98
		[SerializeField] // 0x003DDF60-0x003DDF98
		private bool mHasUpdatedPose; // 0x24
		[HideInInspector] // 0x003DDF98-0x003DDFD0
		[SerializeField] // 0x003DDF98-0x003DDFD0
		private Matrix4x4 mPrevTransform; // 0x28
		[HideInInspector] // 0x003DDFD0-0x003DE008
		[SerializeField] // 0x003DDFD0-0x003DE008
		private GameObject mPrevParent; // 0x68
		private bool mSensitivityDirty; // 0x70
		private VirtualButton.Sensitivity mPreviousSensitivity; // 0x74
		private bool mPreviouslyEnabled; // 0x78
		private bool mPressed; // 0x79
		private List<IVirtualButtonEventHandler> mHandlers; // 0x80
		private Vector2 mLeftTop; // 0x88
		private Vector2 mRightBottom; // 0x90
		private bool mUnregisterOnDestroy; // 0x98
		private VirtualButton mVirtualButton; // 0xA0
	
		// Properties
		public string VirtualButtonName { get; } // 0x0045CA20-0x0045CA28 
		public bool Pressed { get; } // 0x0046F03C-0x0046F044 
		public bool HasUpdatedPose { get; } // 0x0046F044-0x0046F04C 
		public bool UnregisterOnDestroy { get; set; } // 0x0046F04C-0x0046F054 0x0046F054-0x0046F060
		public VirtualButton VirtualButton { get; } // 0x0045BA68-0x0045BA70 
		internal VirtualButton.Sensitivity Sensitivity { get; set; } // 0x0046FCE8-0x0046FCF0 0x0046FCF0-0x0046FCF8
		internal Matrix4x4 PreviousTransform { get; set; } // 0x0046FCF8-0x0046FD1C 0x0046FD1C-0x0046FD38
		internal GameObject PreviousParent { get; set; } // 0x0046FD38-0x0046FD40 0x0046FD40-0x0046FD48
	
		// Constructors
		public VirtualButtonBehaviour(); // 0x004704E0-0x004705C8
	
		// Methods
		public void RegisterEventHandler(IVirtualButtonEventHandler eventHandler); // 0x0046F060-0x0046F0D0
		public bool UnregisterEventHandler(IVirtualButtonEventHandler eventHandler); // 0x0046F0D0-0x0046F140
		public bool CalculateButtonArea(out Vector2 topLeft, out Vector2 bottomRight); // 0x0046F140-0x0046F478
		public bool UpdateAreaRectangle(); // 0x0046F478-0x0046F498
		public bool UpdateSensitivity(); // 0x0046F498-0x0046F4B0
		private bool UpdateEnabled(); // 0x0046F4B0-0x0046F4F0
		public bool UpdatePose(); // 0x0046F4F0-0x0046FBE0
		public void OnTrackerUpdated(bool pressed); // 0x0045BA78-0x0045BDA0
		public ImageTargetBehaviour GetImageTargetBehaviour(); // 0x0045CA28-0x0045CC40
		internal void SetVirtualButtonName(string name); // 0x0046FCE0-0x0046FCE8
		internal void InitializeVirtualButton(VirtualButton virtualButton); // 0x0046FD48-0x0046FD50
		internal bool SetPosAndScaleFromButtonArea(Vector2 topLeft, Vector2 bottomRight); // 0x0046FD50-0x00470140
		private void LateUpdate(); // 0x00470140-0x0047018C
		private void OnDisable(); // 0x0047018C-0x00470388
		private void OnDestroy(); // 0x00470388-0x004704C0
		private void OnValidate(); // 0x004704C0-0x004704E0
		private static bool Equals(Vector2 vec1, Vector2 vec2, float threshold); // 0x0046FBE0-0x0046FCE0
	}

	public class WebCamARController : ARController // TypeDefIndex: 3505
	{
		// Fields
		public int RenderTextureLayer; // 0x18
		private string mDeviceNameSetInEditor; // 0x20
		private WebCam mWebCamImpl; // 0x28
		private Func<string, WebCamProfile.ProfileData, IWebCamTexAdaptor> mWebCamTexAdaptorProvider; // 0x30
		private static WebCamARController mInstance; // 0x00
		private static object mPadlock; // 0x08
	
		// Properties
		public static WebCamARController Instance { get; } // 0x00C62BB0-0x00C62D1C 
		public string DeviceName { get; set; } // 0x00C62D80-0x00C62D88 0x00C62D88-0x00C62D90
		public bool IsPlaying { get; } // 0x00C62D90-0x00C62DBC 
		internal WebCam ImplementationClass { get; } // 0x00C62DBC-0x00C62DC4 
	
		// Nested types
		[Serializable]
		[CompilerGenerated] // 0x003DCD18-0x003DCD28
		private sealed class <>c // TypeDefIndex: 3506
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static Func<string, WebCamProfile.ProfileData, IWebCamTexAdaptor> <>9__6_0; // 0x08
	
			// Constructors
			static <>c(); // 0x00C63140-0x00C631A4
			public <>c(); // 0x00C631A4-0x00C631AC
	
			// Methods
			internal IWebCamTexAdaptor <.ctor>b__6_0(string name, WebCamProfile.ProfileData profileData); // 0x00C631AC-0x00C63234
		}
	
		// Constructors
		private WebCamARController(); // 0x00C62AB8-0x00C62BB0
		static WebCamARController(); // 0x00C630D4-0x00C63140
	
		// Methods
		[RuntimeInitializeOnLoadMethod] // 0x003DEAC8-0x003DEADC
		public static void RegisterARController(); // 0x00C62D1C-0x00C62D80
		internal void InitCamera(); // 0x00C62DC4-0x00C62E84
		internal void SetWebCamTexAdaptorProvider(Func<string, WebCamProfile.ProfileData, IWebCamTexAdaptor> provider); // 0x00C62E84-0x00C62E8C
		protected override void Awake(); // 0x00C62E8C-0x00C62F54
		protected override void OnLevelWasLoaded(); // 0x00C62F54-0x00C62FD4
		protected override void OnDestroy(); // 0x00C62FD4-0x00C63054
		protected override void Update(); // 0x00C63054-0x00C630D4
	}

	public abstract class EyewearCalibrationProfileManager // TypeDefIndex: 3507
	{
		// Constructors
		protected EyewearCalibrationProfileManager(); // 0x005290B4-0x005290BC
	
		// Methods
		public abstract int getMaxCount();
		public abstract int getUsedCount();
		public abstract bool isProfileUsed(int profileID);
		public abstract int getActiveProfile();
		public abstract bool setActiveProfile(int profileID);
		public abstract Matrix4x4 getCameraToEyePose(int profileID, EyewearDevice.EyeID eyeID);
		public abstract Matrix4x4 getEyeProjection(int profileID, EyewearDevice.EyeID eyeID);
		public abstract bool setCameraToEyePose(int profileID, EyewearDevice.EyeID eyeID, Matrix4x4 projectionMatrix);
		public abstract bool setEyeProjection(int profileID, EyewearDevice.EyeID eyeID, Matrix4x4 projectionMatrix);
		public abstract string getProfileName(int profileID);
		public abstract bool setProfileName(int profileID, string name);
		public abstract bool clearProfile(int profileID);
	}

	public abstract class EyewearUserCalibrator // TypeDefIndex: 3508
	{
		// Constructors
		protected EyewearUserCalibrator(); // 0x0052A3F0-0x0052A3F8
	
		// Methods
		public abstract bool init(int surfaceWidth, int surfaceHeight, int targetWidth, int targetHeight);
		public abstract float getMinScaleHint();
		public abstract float getMaxScaleHint();
		public abstract bool isStereoStretched();
		public abstract bool getProjectionMatrix(EyewearDevice.EyewearCalibrationReading[] readings, out Matrix4x4 cameraToEyeMatrix, out Matrix4x4 projectionMatrix);
	}

	public class WireframeBehaviour : VuforiaMonoBehaviour // TypeDefIndex: 3509
	{
		// Fields
		public Material lineMaterial; // 0x18
		public bool ShowLines; // 0x20
		public Color LineColor; // 0x24
		private Material mLineMaterial; // 0x38
	
		// Constructors
		public WireframeBehaviour(); // 0x00C640C0-0x00C640FC
	
		// Methods
		private void Start(); // 0x00C6363C-0x00C63724
		private void OnRenderObject(); // 0x00C63724-0x00C63C60
		private void OnDrawGizmos(); // 0x00C63C60-0x00C640C0
	}

	public class WireframeTrackableEventHandler : VuforiaMonoBehaviour, ITrackableEventHandler // TypeDefIndex: 3510
	{
		// Fields
		private TrackableBehaviour mTrackableBehaviour; // 0x18
	
		// Constructors
		public WireframeTrackableEventHandler(); // 0x00C64654-0x00C64678
	
		// Methods
		private void Start(); // 0x00C64104-0x00C641B8
		public void OnTrackableStateChanged(TrackableBehaviour.Status previousStatus, TrackableBehaviour.Status newStatus); // 0x00C641B8-0x00C641CC
		private void OnTrackingFound(); // 0x00C641CC-0x00C64410
		private void OnTrackingLost(); // 0x00C64410-0x00C64654
	}
}

namespace Vuforia.UnityCompiled
{
	public interface IUnityRenderPipeline // TypeDefIndex: 3511
	{
		// Events
		event Action<Camera[]> BeginFrameRendering {
			add; // 0x00000000-0x00000000
			remove; // 0x00000000-0x00000000
		}
		event Action<Camera> BeginCameraRendering {
			add; // 0x00000000-0x00000000
			remove; // 0x00000000-0x00000000
		}
	}

	public class UnityCompiledFacade : IUnityCompiledFacade // TypeDefIndex: 3512
	{
		// Fields
		private static IUnityCompiledFacade sInstance; // 0x00
	
		// Properties
		public IUnityRenderPipeline UnityRenderPipeline { get; } // 0x00465654-0x00465704 
		public static IUnityCompiledFacade Instance { get; set; } // 0x00465704-0x00465780 0x00465780-0x004657D4
	
		// Constructors
		public UnityCompiledFacade(); // 0x004657D4-0x004657DC
	}

	public interface IUnityCompiledFacade // TypeDefIndex: 3513
	{
		// Properties
		IUnityRenderPipeline UnityRenderPipeline { get; }
	}

	internal class NullUnityCompiledFacade : IUnityCompiledFacade // TypeDefIndex: 3514
	{
		// Fields
		private readonly IUnityRenderPipeline mUnityRenderPipeline; // 0x10
	
		// Properties
		public IUnityRenderPipeline UnityRenderPipeline { get; } // 0x0046519C-0x00465234 
	
		// Nested types
		private class NullUnityRenderPipeline : IUnityRenderPipeline // TypeDefIndex: 3515
		{
			// Fields
			[CompilerGenerated] // 0x003DE2B0-0x003DE2C0
			private Action<Camera[]> BeginFrameRendering; // 0x10
			[CompilerGenerated] // 0x003DE2C0-0x003DE2D0
			private Action<Camera> BeginCameraRendering; // 0x18
	
			// Events
			public event Action<Camera[]> BeginFrameRendering {
				add; // 0x004652A4-0x00465390
				remove; // 0x00465390-0x0046547C
			}
			public event Action<Camera> BeginCameraRendering {
				add; // 0x0046547C-0x00465568
				remove; // 0x00465568-0x00465654
			}
	
			// Constructors
			public NullUnityRenderPipeline(); // 0x0046529C-0x004652A4
		}
	
		// Constructors
		public NullUnityCompiledFacade(); // 0x00465234-0x0046529C
	}
}

[CompilerGenerated] // 0x003DCB64-0x003DCB74
internal sealed class <PrivateImplementationDetails> // TypeDefIndex: 3516
{
	// Fields
	internal static readonly __StaticArrayInitTypeSize=24 898C2022A0C02FCE602BF05E1C09BD48301606E5; // 0x00 // Starts with: 00 00 00 00 01 00 00 00 - Metadata: 0x0021C3BC

	// Nested types
	private struct __StaticArrayInitTypeSize=24 // TypeDefIndex: 3517
	{
	}
}

namespace Facebook.Unity.Android
{
	internal class AndroidWrapper : IAndroidWrapper // TypeDefIndex: 3519
	{
		// Fields
		private const string FacebookJavaClassName = "com.facebook.unity.FB"; // Metadata: 0x0021C3D4
		private AndroidJavaClass facebookJavaClass; // 0x10
	
		// Constructors
		public AndroidWrapper(); // 0x00CD8340-0x00CE0B88
	
		// Methods
		public T CallStatic<T>(string methodName);
		public void CallStatic(string methodName, params /* 0x003DEE50-0x003DEE60 */ object[] args); // 0x00CD82F8-0x00CD8340
	}
}

namespace Facebook.Unity.IOS
{
	public class IOSWrapper // TypeDefIndex: 3521
	{
		// Constructors
		public IOSWrapper(); // 0x00CEF548-0x00D060C0
	}
}

public class PlayerPrefsController : MonoBehaviour // TypeDefIndex: 3523
{
	// Constructors
	public PlayerPrefsController(); // 0x00CD13B4-0x00CD53B4

	// Methods
	public void AddTestStrings(); // 0x00CD1154-0x00CD11D4
	public void AddTestInt(); // 0x00CD11D4-0x00CD122C
	public void AddTestFloat(); // 0x00CD122C-0x00CD1288
	public void RemoveTestStrings(); // 0x00CD1288-0x00CD12F0
	public void RemoveTestInt(); // 0x00CD12F0-0x00CD1344
	public void RemoveTestFloat(); // 0x00CD1344-0x00CD1398
	public void DeleteAll(); // 0x00CD1398-0x00CD13B4
}

public class BoundingBoxRenderer : MonoBehaviour // TypeDefIndex: 3525
{
	// Fields
	private Material mLineMaterial; // 0x18

	// Constructors
	public BoundingBoxRenderer(); // 0x00C6A5A0-0x00C6A5A8

	// Methods
	private void OnRenderObject(); // 0x00C6A178-0x00C6A5A0
}

public class DefaultInitializationErrorHandler : VuforiaMonoBehaviour // TypeDefIndex: 3526
{
	// Fields
	private string mErrorText; // 0x18
	private bool mErrorOccurred; // 0x20
	private const string headerLabel = "Vuforia Engine Initialization Error"; // Metadata: 0x0021C3ED
	private GUIStyle bodyStyle; // 0x28
	private GUIStyle headerStyle; // 0x30
	private GUIStyle footerStyle; // 0x38
	private Texture2D bodyTexture; // 0x40
	private Texture2D headerTexture; // 0x48
	private Texture2D footerTexture; // 0x50

	// Constructors
	public DefaultInitializationErrorHandler(); // 0x00C6BA48-0x00C6BAA0

	// Methods
	public void OnVuforiaInitializationError(VuforiaUnity.InitError initError); // 0x00C6A5A8-0x00C6A5D8
	private void Awake(); // 0x00C6A9DC-0x00C6AAA0
	private void Start(); // 0x00C6AAA0-0x00C6AAA4
	private void OnGUI(); // 0x00C6AFEC-0x00C6B0E0
	private void OnDestroy(); // 0x00C6B0E0-0x00C6B1A4
	private void DrawWindowContent(int id); // 0x00C6B1A4-0x00C6B3B8
	private void SetErrorCode(VuforiaUnity.InitError errorCode); // 0x00C6A5D8-0x00C6A9D0
	private void SetErrorOccurred(bool errorOccurred); // 0x00C6A9D0-0x00C6A9DC
	private string getKeyInfo(); // 0x00C6B3B8-0x00C6B950
	private void SetupGUIStyles(); // 0x00C6AAA4-0x00C6AFEC
	private Texture2D CreateSinglePixelTexture(Color color); // 0x00C6B950-0x00C6BA48
}

public class DefaultModelRecoEventHandler : MonoBehaviour, IObjectRecoEventHandler // TypeDefIndex: 3527
{
	// Fields
	private ModelTargetBehaviour mLastRecoModelTarget; // 0x18
	private bool mSearching; // 0x20
	private float mLastStatusCheckTime; // 0x24
	protected ModelRecoBehaviour mModelRecoBehaviour; // 0x28
	protected TargetFinder mTargetFinder; // 0x30
	[Tooltip] // 0x003DEF8C-0x003DEFC4
	public UnityEngine.UI.Text ModelRecoErrorText; // 0x38
	[Tooltip] // 0x003DEFC4-0x003DEFFC
	public bool StopSearchWhenModelFound; // 0x40
	[Tooltip] // 0x003DEFFC-0x003DF034
	public bool StopSearchWhileTracking; // 0x41

	// Constructors
	public DefaultModelRecoEventHandler(); // 0x00C6CC30-0x00C6CC40

	// Methods
	private void Start(); // 0x00C6BAA0-0x00C6BB4C
	private void Update(); // 0x00C6BB4C-0x00C6BCBC
	private void OnDestroy(); // 0x00C6BE10-0x00C6BEAC
	public void OnInitialized(TargetFinder targetFinder); // 0x00C6BEAC-0x00C6BF30
	public void OnInitError(TargetFinder.InitState initError); // 0x00C6BF30-0x00C6C078
	public void OnUpdateError(TargetFinder.UpdateState updateError); // 0x00C6C12C-0x00C6C270
	public void OnStateChanged(bool searching); // 0x00C6C270-0x00C6C34C
	public virtual void OnNewSearchResult(TargetFinder.TargetSearchResult searchResult); // 0x00C6C34C-0x00C6C5F8
	private ModelTargetBehaviour FindExistingModelTarget(TargetFinder.ModelRecoSearchResult searchResult); // 0x00C6C5F8-0x00C6C720
	private void ShowErrorMessageInUI(string text); // 0x00C6C078-0x00C6C12C
	public static Bounds GetModelTargetWorldBounds(ModelTargetBehaviour mtb); // 0x00C6C720-0x00C6CA5C
	private bool IsModelTrackedInView(ModelTargetBehaviour modelTarget); // 0x00C6BCBC-0x00C6BE10
	public TargetFinder GetTargetFinder(); // 0x00C6CA5C-0x00C6CA64
	public void ResetModelReco(bool destroyGameObjects); // 0x00C6CA64-0x00C6CC30
}

public class DefaultTrackableEventHandler : MonoBehaviour, ITrackableEventHandler // TypeDefIndex: 3528
{
	// Fields
	protected TrackableBehaviour mTrackableBehaviour; // 0x18
	protected TrackableBehaviour.Status m_PreviousStatus; // 0x20
	protected TrackableBehaviour.Status m_NewStatus; // 0x24

	// Constructors
	public DefaultTrackableEventHandler(); // 0x00C6D2A4-0x00C6D2AC

	// Methods
	protected virtual void Start(); // 0x00C6CC40-0x00C6CCF4
	protected virtual void OnDestroy(); // 0x00C6CCF4-0x00C6CD90
	public void OnTrackableStateChanged(TrackableBehaviour.Status previousStatus, TrackableBehaviour.Status newStatus); // 0x00C6CD90-0x00C6CF04
	protected virtual void OnTrackingFound(); // 0x00C6CF04-0x00C6D0D4
	protected virtual void OnTrackingLost(); // 0x00C6D0D4-0x00C6D2A4
}

namespace Vuforia.UnityCompiled
{
	public class RuntimeOpenSourceInitializer // TypeDefIndex: 3529
	{
		// Fields
		private static IUnityCompiledFacade sFacade; // 0x00
	
		// Nested types
		private class OpenSourceUnityCompiledFacade : IUnityCompiledFacade // TypeDefIndex: 3530
		{
			// Fields
			private readonly IUnityRenderPipeline mUnityRenderPipeline; // 0x10
	
			// Properties
			public IUnityRenderPipeline UnityRenderPipeline { get; } // 0x00C6D3B0-0x00C6D3B8 
	
			// Constructors
			public OpenSourceUnityCompiledFacade(); // 0x00C6D344-0x00C6D3A8
		}
	
		private class UnityRenderPipeline : IUnityRenderPipeline // TypeDefIndex: 3531
		{
			// Fields
			[CompilerGenerated] // 0x003DF034-0x003DF044
			private Action<Camera[]> BeginFrameRendering; // 0x10
			[CompilerGenerated] // 0x003DF044-0x003DF054
			private Action<Camera> BeginCameraRendering; // 0x18
	
			// Events
			public event Action<Camera[]> BeginFrameRendering {
				add; // 0x00C6D480-0x00C6D56C
				remove; // 0x00C6D56C-0x00C6D658
			}
			public event Action<Camera> BeginCameraRendering {
				add; // 0x00C6D658-0x00C6D744
				remove; // 0x00C6D744-0x00C6D830
			}
	
			// Constructors
			public UnityRenderPipeline(); // 0x00C6D3B8-0x00C6D480
	
			// Methods
			private void OnBeginCameraRendering(Camera camera); // 0x00C6D830-0x00C6D8A4
			private void OnBeginFrameRendering(Camera[] cameras); // 0x00C6D8A4-0x00C6D918
		}
	
		// Constructors
		public RuntimeOpenSourceInitializer(); // 0x00C6D3A8-0x00C6D3B0
	
		// Methods
		[RuntimeInitializeOnLoadMethod] // 0x003DF054-0x003DF068
		private static void OnRuntimeMethodLoad(); // 0x00C6D2AC-0x00C6D2B0
		private static void InitializeFacade(); // 0x00C6D2B0-0x00C6D344
	}
}

public class AFInAppEvents // TypeDefIndex: 3533
{
	// Fields
	public const string LEVEL_ACHIEVED = "af_level_achieved"; // Metadata: 0x0021C414
	public const string ADD_PAYMENT_INFO = "af_add_payment_info"; // Metadata: 0x0021C429
	public const string ADD_TO_CART = "af_add_to_cart"; // Metadata: 0x0021C440
	public const string ADD_TO_WISH_LIST = "af_add_to_wishlist"; // Metadata: 0x0021C452
	public const string COMPLETE_REGISTRATION = "af_complete_registration"; // Metadata: 0x0021C468
	public const string TUTORIAL_COMPLETION = "af_tutorial_completion"; // Metadata: 0x0021C484
	public const string INITIATED_CHECKOUT = "af_initiated_checkout"; // Metadata: 0x0021C49E
	public const string PURCHASE = "af_purchase"; // Metadata: 0x0021C4B7
	public const string RATE = "af_rate"; // Metadata: 0x0021C4C6
	public const string SEARCH = "af_search"; // Metadata: 0x0021C4D1
	public const string SPENT_CREDIT = "af_spent_credits"; // Metadata: 0x0021C4DE
	public const string ACHIEVEMENT_UNLOCKED = "af_achievement_unlocked"; // Metadata: 0x0021C4F2
	public const string CONTENT_VIEW = "af_content_view"; // Metadata: 0x0021C50D
	public const string TRAVEL_BOOKING = "af_travel_booking"; // Metadata: 0x0021C520
	public const string SHARE = "af_share"; // Metadata: 0x0021C535
	public const string INVITE = "af_invite"; // Metadata: 0x0021C541
	public const string LOGIN = "af_login"; // Metadata: 0x0021C54E
	public const string RE_ENGAGE = "af_re_engage"; // Metadata: 0x0021C55A
	public const string UPDATE = "af_update"; // Metadata: 0x0021C56A
	public const string OPENED_FROM_PUSH_NOTIFICATION = "af_opened_from_push_notification"; // Metadata: 0x0021C577
	public const string LOCATION_CHANGED = "af_location_changed"; // Metadata: 0x0021C59B
	public const string LOCATION_COORDINATES = "af_location_coordinates"; // Metadata: 0x0021C5B2
	public const string ORDER_ID = "af_order_id"; // Metadata: 0x0021C5CD
	public const string LEVEL = "af_level"; // Metadata: 0x0021C5DC
	public const string SCORE = "af_score"; // Metadata: 0x0021C5E8
	public const string SUCCESS = "af_success"; // Metadata: 0x0021C5F4
	public const string PRICE = "af_price"; // Metadata: 0x0021C602
	public const string CONTENT_TYPE = "af_content_type"; // Metadata: 0x0021C60E
	public const string CONTENT_ID = "af_content_id"; // Metadata: 0x0021C621
	public const string CONTENT_LIST = "af_content_list"; // Metadata: 0x0021C632
	public const string CURRENCY = "af_currency"; // Metadata: 0x0021C645
	public const string QUANTITY = "af_quantity"; // Metadata: 0x0021C654
	public const string REGSITRATION_METHOD = "af_registration_method"; // Metadata: 0x0021C663
	public const string PAYMENT_INFO_AVAILIBLE = "af_payment_info_available"; // Metadata: 0x0021C67D
	public const string MAX_RATING_VALUE = "af_max_rating_value"; // Metadata: 0x0021C69A
	public const string RATING_VALUE = "af_rating_value"; // Metadata: 0x0021C6B1
	public const string SEARCH_STRING = "af_search_string"; // Metadata: 0x0021C6C4
	public const string DATE_A = "af_date_a"; // Metadata: 0x0021C6D8
	public const string DATE_B = "af_date_b"; // Metadata: 0x0021C6E5
	public const string DESTINATION_A = "af_destination_a"; // Metadata: 0x0021C6F2
	public const string DESTINATION_B = "af_destination_b"; // Metadata: 0x0021C706
	public const string DESCRIPTION = "af_description"; // Metadata: 0x0021C71A
	public const string CLASS = "af_class"; // Metadata: 0x0021C72C
	public const string EVENT_START = "af_event_start"; // Metadata: 0x0021C738
	public const string EVENT_END = "af_event_end"; // Metadata: 0x0021C74A
	public const string LATITUDE = "af_lat"; // Metadata: 0x0021C75A
	public const string LONGTITUDE = "af_long"; // Metadata: 0x0021C764
	public const string CUSTOMER_USER_ID = "af_customer_user_id"; // Metadata: 0x0021C76F
	public const string VALIDATED = "af_validated"; // Metadata: 0x0021C786
	public const string REVENUE = "af_revenue"; // Metadata: 0x0021C796
	public const string RECEIPT_ID = "af_receipt_id"; // Metadata: 0x0021C7A4
	public const string PARAM_1 = "af_param_1"; // Metadata: 0x0021C7B5
	public const string PARAM_2 = "af_param_2"; // Metadata: 0x0021C7C3
	public const string PARAM_3 = "af_param_3"; // Metadata: 0x0021C7D1
	public const string PARAM_4 = "af_param_4"; // Metadata: 0x0021C7DF
	public const string PARAM_5 = "af_param_5"; // Metadata: 0x0021C7ED
	public const string PARAM_6 = "af_param_6"; // Metadata: 0x0021C7FB
	public const string PARAM_7 = "af_param_7"; // Metadata: 0x0021C809
	public const string PARAM_8 = "af_param_8"; // Metadata: 0x0021C817
	public const string PARAM_9 = "af_param_9"; // Metadata: 0x0021C825
	public const string PARAM_10 = "af_param_10"; // Metadata: 0x0021C833

	// Constructors
	public AFInAppEvents(); // 0x00C6D918-0x00C6D920
}

public class AppsFlyer : MonoBehaviour // TypeDefIndex: 3534
{
	// Fields
	private static AndroidJavaClass obj; // 0x00
	private static AndroidJavaObject cls_AppsFlyer; // 0x08
	private static AndroidJavaClass propertiesClass; // 0x10
	private static AndroidJavaClass cls_AppsFlyerHelper; // 0x18
	private static string devKey; // 0x20
	private static AndroidJavaClass cls_UnityShareHelper; // 0x28
	private static AndroidJavaObject ShareHelperInstance; // 0x30
	private static AndroidJavaClass cls_AndroidShare; // 0x38

	// Constructors
	public AppsFlyer(); // 0x00C724A0-0x00C724A8
	static AppsFlyer(); // 0x00C724A8-0x00C72684

	// Methods
	public static void trackEvent(string eventName, string eventValue); // 0x00C6D920-0x00C6D96C
	public static void setCurrencyCode(string currencyCode); // 0x00C6D96C-0x00C6DA70
	public static void setCustomerUserID(string customerUserID); // 0x00C6DA70-0x00C6DB74
	public static void loadConversionData(string callbackObject); // 0x00C6DB74-0x00C6DEA8
	[Obsolete] // 0x003DF10C-0x003DF144
	public static void loadConversionData(string callbackObject, string callbackMethod, string callbackFailedMethod); // 0x00C6DEA8-0x00C6DF0C
	public static void setCollectIMEI(bool shouldCollect); // 0x00C6DF0C-0x00C6E034
	public static void setCollectAndroidID(bool shouldCollect); // 0x00C6E034-0x00C6E170
	public static void init(string key, string callbackObject); // 0x00C6E170-0x00C6E214
	public static void init(string key); // 0x00C6E214-0x00C6E534
	private static void init_cb(); // 0x00C6E534-0x00C6E5A4
	public static void setAppsFlyerKey(string key); // 0x00C6EA44-0x00C6EA90
	public static void trackAppLaunch(); // 0x00C6E5A4-0x00C6EA44
	public static void setAppID(string packageName); // 0x00C6EA90-0x00C6EB94
	public static void createValidateInAppListener(string aObject, string callbackMethod, string callbackFailedMethod); // 0x00C6EB94-0x00C6EF88
	public static void validateReceipt(string publicKey, string purchaseData, string signature, string price, string currency, Dictionary<string, string> extraParams); // 0x00C6EF88-0x00C6F6B0
	public static void trackRichEvent(string eventName, Dictionary<string, string> eventValues); // 0x00C6FC84-0x00C70014
	private static AndroidJavaObject ConvertHashMap(Dictionary<string, string> dict); // 0x00C6F6B0-0x00C6FC84
	public static void setImeiData(string imeiData); // 0x00C70014-0x00C7012C
	public static void setAndroidIdData(string androidIdData); // 0x00C7012C-0x00C70244
	public static void setIsDebug(bool isDebug); // 0x00C70244-0x00C70380
	public static void setIsSandbox(bool isSandbox); // 0x00C70380-0x00C70384
	public static void getConversionData(); // 0x00C70384-0x00C70388
	public static void handleOpenUrl(string url, string sourceApplication, string annotation); // 0x00C70388-0x00C7038C
	public static string getAppsFlyerId(); // 0x00C7038C-0x00C70678
	public static void setGCMProjectNumber(string googleGCMNumber); // 0x00C70678-0x00C7077C
	public static void updateServerUninstallToken(string token); // 0x00C7077C-0x00C70AEC
	public static void enableUninstallTracking(string senderId); // 0x00C70AEC-0x00C70C38
	public static void setDeviceTrackingDisabled(bool state); // 0x00C70C38-0x00C70D60
	public static void setAdditionalData(Dictionary<string, string> extraData); // 0x00C70D60-0x00C71054
	public static void stopTracking(bool isStopTracking); // 0x00C71054-0x00C713F4
	public static void setAppInviteOneLinkID(string oneLinkID); // 0x00C713F4-0x00C714F8
	public static void generateUserInviteLink(Dictionary<string, string> parameters, string callbackObject, string callbackMethod, string callbackFailedMethod); // 0x00C714F8-0x00C71990
	public static void trackCrossPromoteImpression(string appId, string campaign); // 0x00C71990-0x00C71D70
	public static void trackAndOpenStore(string promotedAppId, string campaign, Dictionary<string, string> customParams); // 0x00C71D70-0x00C721D4
	public static void setPreinstallAttribution(string mediaSource, string campaign, string siteId); // 0x00C721D4-0x00C72378
	public static void setMinTimeBetweenSessions(int seconds); // 0x00C72378-0x00C724A0
}

public class AppsFlyerTrackerCallbacks : MonoBehaviour // TypeDefIndex: 3535
{
	// Fields
	public UnityEngine.UI.Text callbacks; // 0x18

	// Constructors
	public AppsFlyerTrackerCallbacks(); // 0x00C72A70-0x00C72A78

	// Methods
	private void Start(); // 0x00C72684-0x00C726D0
	private void Update(); // 0x00C726D0-0x00C726D4
	public void didReceiveConversionData(string conversionData); // 0x00C726D4-0x00C72730
	public void didReceiveConversionDataWithError(string error); // 0x00C72798-0x00C727F4
	public void didFinishValidateReceipt(string validateResult); // 0x00C727F4-0x00C72850
	public void didFinishValidateReceiptWithError(string error); // 0x00C72850-0x00C728AC
	public void onAppOpenAttribution(string validateResult); // 0x00C728AC-0x00C72908
	public void onAppOpenAttributionFailure(string error); // 0x00C72908-0x00C72964
	public void onInAppBillingSuccess(); // 0x00C72964-0x00C729AC
	public void onInAppBillingFailure(string error); // 0x00C729AC-0x00C72A08
	public void onInviteLinkGenerated(string link); // 0x00C72A08-0x00C72A64
	public void onOpenStoreLinkGenerated(string link); // 0x00C72A64-0x00C72A70
	private void printCallback(string str); // 0x00C72730-0x00C72798
}

public class DeeplinkingExample : MonoBehaviour // TypeDefIndex: 3536
{
	// Fields
	public GameObject Panel; // 0x18
	public GameObject Reference; // 0x20
	public GameObject obj; // 0x28
	public GameObject InstructionText; // 0x30

	// Constructors
	public DeeplinkingExample(); // 0x00C72EB4-0x00C72EBC

	// Methods
	private void Start(); // 0x00C72A78-0x00C72B3C
	private void SetupUi(); // 0x00C72B3C-0x00C72B70
	private void Instance_LinkActivated(LinkActivation s); // 0x00C72B70-0x00C72DC8
	private void UpdateContentSize(); // 0x00C72DC8-0x00C72EB4
}

public class OpenLinkBehaviour : MonoBehaviour // TypeDefIndex: 3537
{
	// Fields
	public string Url; // 0x18

	// Constructors
	public OpenLinkBehaviour(); // 0x00C74D6C-0x00C74D74

	// Methods
	private void Start(); // 0x00C74CA0-0x00C74D60
	public void Open(); // 0x00C74D60-0x00C74D6C
}

public class NativeShare // TypeDefIndex: 3538
{
	// Fields
	private static AndroidJavaClass m_ajc; // 0x00
	private static AndroidJavaObject m_context; // 0x08
	private string subject; // 0x10
	private string text; // 0x18
	private string title; // 0x20
	private string targetPackage; // 0x28
	private string targetClass; // 0x30
	private List<string> files; // 0x38
	private List<string> mimes; // 0x40

	// Properties
	private static AndroidJavaClass AJC { get; } // 0x00C72EBC-0x00C72F98 
	private static AndroidJavaObject Context { get; } // 0x00C72F98-0x00C74164 

	// Constructors
	public NativeShare(); // 0x00C74164-0x00C74248
	static NativeShare(); // 0x00C74C9C-0x00C74CA0

	// Methods
	public NativeShare SetSubject(string subject); // 0x00C74248-0x00C74254
	public NativeShare SetText(string text); // 0x00C74254-0x00C74260
	public NativeShare SetTitle(string title); // 0x00C74260-0x00C7426C
	public NativeShare SetTarget(string androidPackageName, string androidClassName = null); // 0x00C7426C-0x00C742B8
	public NativeShare AddFile(string filePath, string mime = null); // 0x00C742B8-0x00C743EC
	public void Share(); // 0x00C743EC-0x00C747FC
	public static bool TargetExists(string androidPackageName, string androidClassName = null); // 0x00C747FC-0x00C749E8
	public static bool FindTarget(out string androidPackageName, out string androidClassName, string packageNameRegex, string classNameRegex = null); // 0x00C749E8-0x00C74C9C
}

public class CameraBehaviour : MonoBehaviour // TypeDefIndex: 3540
{
	// Fields
	public VuforiaBehaviour config; // 0x18
	private bool isRear; // 0x20

	// Constructors
	public CameraBehaviour(); // 0x0043BA9C-0x0043BAA4

	// Methods
	private void Start(); // 0x0043B87C-0x0043B988
	private void Update(); // 0x0043B988-0x0043B98C
	private void OnVuforiaStarted(); // 0x0043B98C-0x0043BA08
	private void OnPaused(bool paused); // 0x0043BA08-0x0043BA98
	public void SwapCamera(); // 0x0043BA98-0x0043BA9C
}

public class AR_Obstacle : MonoBehaviour // TypeDefIndex: 3541
{
	// Fields
	private Transform mTransform; // 0x18
	private int mSpawnTicks; // 0x20
	private int mRemoveTicks; // 0x24
	private float mSmoothStep; // 0x28
	private Vector3 mLocalScale; // 0x2C

	// Constructors
	public AR_Obstacle(); // 0x004331D0-0x004331D8

	// Methods
	private void Awake(); // 0x00432DB4-0x00432E08
	public void SpawnOB(); // 0x00432E08-0x00432EC4
	public void RemoveOB(); // 0x00432EC4-0x00432ED4
	private void FixedUpdate(); // 0x00432ED4-0x004331D0
}

public class ARFPSChecker : MonoBehaviour // TypeDefIndex: 3542
{
	// Fields
	public bool debug; // 0x18
	public float fpsthresh; // 0x1C
	private float deltaTime; // 0x20
	public CanvasGroup FPSNotification; // 0x28

	// Constructors
	public ARFPSChecker(); // 0x0042CCF4-0x0042CD04

	// Methods
	private void Update(); // 0x0042CA4C-0x0042CACC
	private void OnGUI(); // 0x0042CACC-0x0042CCF4
}

public class ARGameController : MonoBehaviour // TypeDefIndex: 3543
{
	// Fields
	[Header] // 0x003DF760-0x003DF798
	public GameObject environment1; // 0x18
	public GameObject environment2; // 0x20
	public float swtichPointFromX; // 0x28
	public float swtichPointToX; // 0x2C
	public GameObject CharacterRoot; // 0x30
	public Transform PositionLeft; // 0x38
	public Transform PositionRight; // 0x40
	public GameObject bomb; // 0x48
	public GameObject bombIcon; // 0x50
	public GameObject[] Obstacles; // 0x58
	public Transform ObstacleLeft; // 0x60
	public Transform ObstacleRight; // 0x68
	public Transform SpawnParent; // 0x70
	public Transform ATMSpawner; // 0x78
	public GameObject ATMPrefab; // 0x80
	public GameObject BombPrefab; // 0x88
	public GameObject DiamondPrefab; // 0x90
	public Transform[] CharacterAry; // 0x98
	public Animator RunAni; // 0xA0
	private int CharacterPosition; // 0xA8
	[Header] // 0x003DF798-0x003DF7D0
	public static float speed; // 0x00
	public static float spawnTime; // 0x04
	public static bool isPlaying; // 0x08
	[Header] // 0x003DF7D0-0x003DF808
	public AudioManager audiomanager; // 0xB0
	public GameController gameController; // 0xB8
	public UnityEngine.UI.Text counter; // 0xC0
	public UnityEngine.UI.Text scoreTxt; // 0xC8
	public UnityEngine.UI.Text BombText; // 0xD0
	public GameObject BtnGameSTart; // 0xD8
	public ARTracking ARHandler; // 0xE0
	[Header] // 0x003DF808-0x003DF840
	public Transform mainGame; // 0xE8
	private float boolRandom; // 0xF0
	private bool isWheel; // 0xF4
	[Header] // 0x003DF840-0x003DF878
	public int ATMRandom1; // 0xF8
	public int ATMRandom2; // 0xFC
	public int ATMRandom3; // 0x100
	public int ATMRandom4; // 0x104
	[Header] // 0x003DF878-0x003DF8B0
	public int scoreLimit; // 0x108
	public float minSpeed; // 0x10C
	public float maxSpeed; // 0x110
	public float minAnimSpeed; // 0x114
	public float maxAnimSpeed; // 0x118
	public float minSpawnTime; // 0x11C
	public float maxSpawnTime; // 0x120
	public float maxSpawnRandomness; // 0x124
	private IEnumerator GameCoroutine; // 0x128
	private IEnumerator GameStartRoutine; // 0x130
	private int score; // 0x138
	private float currentAnimationSpeed; // 0x13C
	private bool isDead; // 0x140
	private int firstATMTime; // 0x144
	private int bombs; // 0x148
	private int diamonds; // 0x14C
	private bool isCount; // 0x150
	private bool prevRandomBool; // 0x151
	private bool isFlat; // 0x152

	// Nested types
	[CompilerGenerated] // 0x003DF1A8-0x003DF1B8
	private sealed class <SpawnObjects>d__68 : IEnumerator<object> // TypeDefIndex: 3544
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public ARGameController <>4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003DFB08-0x003DFB18 */ get; } // 0x0042FEA4-0x0042FEAC 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003DFB28-0x003DFB38 */ get; } // 0x0042FF14-0x0042FF1C 

		// Constructors
		[DebuggerHidden] // 0x003DFAE8-0x003DFAF8
		public <SpawnObjects>d__68(int <>1__state); // 0x0042E6F8-0x0042E724

		// Methods
		[DebuggerHidden] // 0x003DFAF8-0x003DFB08
		void IDisposable.Dispose(); // 0x0042F430-0x0042F434
		private bool MoveNext(); // 0x0042F434-0x0042FEA4
		[DebuggerHidden] // 0x003DFB18-0x003DFB28
		void IEnumerator.Reset(); // 0x0042FEAC-0x0042FF14
	}

	[CompilerGenerated] // 0x003DF1B8-0x003DF1C8
	private sealed class <GameStarter>d__71 : IEnumerator<object> // TypeDefIndex: 3545
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public ARGameController <>4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003DFB58-0x003DFB68 */ get; } // 0x0042F3B8-0x0042F3C0 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003DFB78-0x003DFB88 */ get; } // 0x0042F428-0x0042F430 

		// Constructors
		[DebuggerHidden] // 0x003DFB38-0x003DFB48
		public <GameStarter>d__71(int <>1__state); // 0x0042E798-0x0042E7C4

		// Methods
		[DebuggerHidden] // 0x003DFB48-0x003DFB58
		void IDisposable.Dispose(); // 0x0042F020-0x0042F024
		private bool MoveNext(); // 0x0042F024-0x0042F3B8
		[DebuggerHidden] // 0x003DFB68-0x003DFB78
		void IEnumerator.Reset(); // 0x0042F3C0-0x0042F428
	}

	// Constructors
	public ARGameController(); // 0x0042EF54-0x0042EFB4
	static ARGameController(); // 0x0042EFB4-0x0042F020

	// Methods
	private void Start(); // 0x0042CD04-0x0042D020
	public void spawnBomb(); // 0x0042D2F8-0x0042D56C
	public void getBomb(); // 0x0042D56C-0x0042D624
	public void getBomb(int add); // 0x0042D6E0-0x0042D784
	public void getDiamond(); // 0x0042D784-0x0042D7BC
	public int getCollectedDiamonds(); // 0x0042D824-0x0042D82C
	private void Awake(); // 0x0042D82C-0x0042D850
	private void Update(); // 0x0042D850-0x0042DEDC
	public int getScore(); // 0x0042E010-0x0042E018
	public void CheckScore(); // 0x0042E018-0x0042E218
	public void SwitchCharacterPosition(); // 0x0042DEDC-0x0042E010
	public void MarkerFound(); // 0x0042E2D4-0x0042E3A0
	public void StartPlay(); // 0x0042E3A0-0x0042E448
	public void PlayWithMarker(); // 0x0042E494-0x0042E4F4
	public void MarkerLost(); // 0x0042E4F4-0x0042E684
	[IteratorStateMachine] // 0x003DFA20-0x003DFA84
	public IEnumerator SpawnObjects(); // 0x0042E684-0x0042E6F8
	public void StartGame(); // 0x0042E448-0x0042E494
	[IteratorStateMachine] // 0x003DFA84-0x003DFAE8
	public IEnumerator GameStarter(); // 0x0042E724-0x0042E798
	public void MidGame(); // 0x0042E7C4-0x0042E98C
	public void EndGame(); // 0x0042EB08-0x0042ECBC
	public bool RandomnBoolGenerator(float randomness); // 0x0042EDAC-0x0042EE24
	public void SwitchOrientation(); // 0x0042EE24-0x0042EF54
}

public class ARTracking : MonoBehaviour, ITrackableEventHandler // TypeDefIndex: 3546
{
	// Fields
	public ARGameController ARgameController; // 0x18
	public bool isMarkerFound; // 0x20
	protected TrackableBehaviour mTrackableBehaviour; // 0x28
	protected TrackableBehaviour.Status m_PreviousStatus; // 0x30
	protected TrackableBehaviour.Status m_NewStatus; // 0x34

	// Constructors
	public ARTracking(); // 0x00430CEC-0x00430CF4

	// Methods
	protected virtual void Start(); // 0x0043064C-0x00430700
	protected virtual void OnDestroy(); // 0x00430700-0x0043079C
	public void OnTrackableStateChanged(TrackableBehaviour.Status previousStatus, TrackableBehaviour.Status newStatus); // 0x0043079C-0x00430910
	protected virtual void OnTrackingFound(); // 0x00430910-0x00430B00
	protected virtual void OnTrackingLost(); // 0x00430B00-0x00430CEC
}

public class CountDownAR : MonoBehaviour // TypeDefIndex: 3547
{
	// Fields
	public UnityEngine.UI.Text CounterLBL; // 0x18
	public GameController inputManager; // 0x20
	private int mCount; // 0x28
	private int mTm; // 0x2C
	private float mSmoothStep; // 0x30
	private bool mPlay; // 0x34

	// Constructors
	public CountDownAR(); // 0x0043D6AC-0x0043D6B4

	// Methods
	private void Awake(); // 0x0043D244-0x0043D2F4
	[DoNotRename] // 0x003DFB88-0x003DFB98
	public void SetTimer(); // 0x0043D2F4-0x0043D3BC
	private void FixedUpdate(); // 0x0043D3BC-0x0043D55C
	private void LateUpdate(); // 0x0043D560-0x0043D574
	public void StartCount(); // 0x0043D574-0x0043D630
	public void StopCount(); // 0x0043D630-0x0043D6AC
}

public class DataFill : MonoBehaviour // TypeDefIndex: 3548
{
	// Fields
	private const string FILE_NAME = "MyFile.txt"; // Metadata: 0x0021C842
	private int mTicks; // 0x18
	private float mX; // 0x1C
	private float mY; // 0x20
	private float mAng; // 0x24
	private StreamWriter sr; // 0x28

	// Constructors
	public DataFill(); // 0x0043F6F8-0x0043F700

	// Methods
	private void Start(); // 0x0043F31C-0x0043F3A4
	private void FixedUpdate(); // 0x0043F3A4-0x0043F6F8
}

public class EnvManager : MonoBehaviour // TypeDefIndex: 3549
{
	// Fields
	public GameObject[] objsToHide; // 0x18
	public UnityEngine.UI.Text TimerLBL; // 0x20
	public Transform RootT; // 0x28
	public GameController gameController; // 0x30
	public Material RoadMat; // 0x38
	public bool Run; // 0x40
	public Transform Point_0; // 0x48
	public Transform Point_1; // 0x50
	public Transform Point_2; // 0x58
	public Transform Point_3; // 0x60
	public float Speed; // 0x68
	public int TickLimit; // 0x6C
	private int mTicks; // 0x70
	private int mOffset; // 0x74
	private float mOffSetVal; // 0x78
	public Transform Ob_1; // 0x80
	public Transform Ob_3; // 0x88
	public Transform Atm_T; // 0x90
	private int mSide_1; // 0x98
	private int mSide_3; // 0x9C
	private bool mIsSide_1_Atm; // 0xA0
	private bool mIsSide_3_Atm; // 0xA1
	public int HitLimitOffset; // 0xA4
	private int mSecondsTick; // 0xA8
	private int mRunTime; // 0xAC
	private int mAtmTicks; // 0xB0
	public int NewTickLimit; // 0xB4

	// Constructors
	public EnvManager(); // 0x00440B4C-0x00440B54

	// Methods
	private void Awake(); // 0x0043FC8C-0x0043FE3C
	private void Update(); // 0x0043FE3C-0x0043FE98
	private void FixedUpdate(); // 0x00440138-0x004409E4
	public void HideATMonHit(); // 0x00440A08-0x00440A6C
	private bool IsAtm(); // 0x004409E4-0x00440A04
	public void Init(int i); // 0x00440A6C-0x00440B4C
	public void SetOrientation(bool isFlat); // 0x0043FE98-0x00440138
}

public enum AR_GiftIDs // TypeDefIndex: 3550
{
	DATA = 0,
	MAGNET = 1,
	SHIELD = 2,
	COINS = 3,
	BOOST = 4
}

public enum AR_STATUS // TypeDefIndex: 3551
{
	MARKER_NOT_FOUND = 0
}

public class GameController : MonoBehaviour // TypeDefIndex: 3552
{
	// Fields
	public AudioManager audiomanager; // 0x18
	public ARGameController arController; // 0x20
	public GameObject InstructionsDialog; // 0x28
	public UnityEngine.UI.Text ArStatusText; // 0x30
	private static GameController mInstance; // 0x00
	public GameObject SpinButton; // 0x38
	public GameObject GameWheel; // 0x40
	public GameObject GameWheelPanel; // 0x48
	public VuforiaBehaviour vuforiaBehaviour; // 0x50
	public GameObject LoadingPanel; // 0x58
	public GameObject ServiceErrorDialog; // 0x60
	public Font SinhalaFont; // 0x68
	public Font EnglishFont; // 0x70
	public Font TamilFont; // 0x78
	public UnityEngine.UI.Text ServiceErrorMsgTXT; // 0x80
	public string URL_TXT; // 0x88
	public GameObject LoadingAnimation; // 0x90
	public UnityEngine.UI.Text text; // 0x98
	public EnvManager envManager; // 0xA0
	public GameObject GameOverPanel; // 0xA8
	private string mPlay_ID; // 0xB0
	private string mToken; // 0xB8
	private ServiceNames mSerNm; // 0xC0
	public AR_GiftIDs ID_Gift; // 0xC4
	public int HasAtmGift; // 0xC8
	public bool validationEnabled; // 0xCC
	private float mCharacterY; // 0xD0
	private float mCharacterZ; // 0xD4
	private int i; // 0xD8
	private bool mDied; // 0xDC
	private float mScreenX_half; // 0xE0

	// Properties
	public static GameController Instance { get; } // 0x00430184-0x004301D4 

	// Nested types
	private enum ErrorCodes // TypeDefIndex: 3553
	{
		Network = 0,
		Worng = 1,
		noCoins = 2,
		noDrawpoints = 3,
		noMoney = 4,
		badPin = 5
	}

	private enum ServiceNames // TypeDefIndex: 3554
	{
		undefined = 0,
		StartService = 1
	}

	[Serializable]
	private struct FromJsonOBStart // TypeDefIndex: 3555
	{
		// Fields
		public string play_session; // 0x00
	}

	[Serializable]
	private struct FromJsonOBRewardHit // TypeDefIndex: 3556
	{
		// Fields
		public string type; // 0x00
		public int size; // 0x08
	}

	[Serializable]
	private struct FromJsonOBEnd // TypeDefIndex: 3557
	{
		// Fields
		public int status; // 0x00
		public string error; // 0x08
		public ResS response; // 0x10

		// Nested types
		[Serializable]
		public struct ResS // TypeDefIndex: 3558
		{
			// Fields
			public string msg; // 0x00
		}
	}

	[CompilerGenerated] // 0x003DF1C8-0x003DF1D8
	private sealed class <StartServiceCall>d__47 : IEnumerator<object> // TypeDefIndex: 3559
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public GameController <>4__this; // 0x20
		private UnityWebRequest <w>5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003DFDDC-0x003DFDEC */ get; } // 0x0044B6E4-0x0044B6EC 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003DFDFC-0x003DFE0C */ get; } // 0x0044B754-0x0044B990 

		// Constructors
		[DebuggerHidden] // 0x003DFDBC-0x003DFDCC
		public <StartServiceCall>d__47(int <>1__state); // 0x0044873C-0x00448768

		// Methods
		[DebuggerHidden] // 0x003DFDCC-0x003DFDDC
		void IDisposable.Dispose(); // 0x0044B200-0x0044B204
		private bool MoveNext(); // 0x0044B204-0x0044B6E4
		[DebuggerHidden] // 0x003DFDEC-0x003DFDFC
		void IEnumerator.Reset(); // 0x0044B6EC-0x0044B754
	}

	[CompilerGenerated] // 0x003DF1D8-0x003DF1E8
	private sealed class <RewardHitServiceCall>d__51 : IEnumerator<object> // TypeDefIndex: 3560
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public GameController <>4__this; // 0x20
		private UnityWebRequest <w>5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003DFE2C-0x003DFE3C */ get; } // 0x0044A3B0-0x0044A3B8 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003DFE4C-0x003DFE5C */ get; } // 0x0044A420-0x0044A428 

		// Constructors
		[DebuggerHidden] // 0x003DFE0C-0x003DFE1C
		public <RewardHitServiceCall>d__51(int <>1__state); // 0x00448BCC-0x00448BF8

		// Methods
		[DebuggerHidden] // 0x003DFE1C-0x003DFE2C
		void IDisposable.Dispose(); // 0x00449A9C-0x00449AA0
		private bool MoveNext(); // 0x00449AA0-0x0044A3B0
		[DebuggerHidden] // 0x003DFE3C-0x003DFE4C
		void IEnumerator.Reset(); // 0x0044A3B8-0x0044A420
	}

	[CompilerGenerated] // 0x003DF1E8-0x003DF1F8
	private sealed class <RewardHitServiceCallNewKey>d__52 : IEnumerator<object> // TypeDefIndex: 3561
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public GameController <>4__this; // 0x20
		private UnityWebRequest <w>5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003DFE7C-0x003DFE8C */ get; } // 0x0044ACA0-0x0044ACA8 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003DFE9C-0x003DFEAC */ get; } // 0x0044AD10-0x0044AD18 

		// Constructors
		[DebuggerHidden] // 0x003DFE5C-0x003DFE6C
		public <RewardHitServiceCallNewKey>d__52(int <>1__state); // 0x00448C6C-0x00448C98

		// Methods
		[DebuggerHidden] // 0x003DFE6C-0x003DFE7C
		void IDisposable.Dispose(); // 0x0044A428-0x0044A42C
		private bool MoveNext(); // 0x0044A42C-0x0044ACA0
		[DebuggerHidden] // 0x003DFE8C-0x003DFE9C
		void IEnumerator.Reset(); // 0x0044ACA8-0x0044AD10
	}

	[CompilerGenerated] // 0x003DF1F8-0x003DF208
	private sealed class <RewardHitServiceCallWithoutValidation>d__53 : IEnumerator<object> // TypeDefIndex: 3562
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public GameController <>4__this; // 0x20
		private UnityWebRequest <w>5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003DFECC-0x003DFEDC */ get; } // 0x0044B188-0x0044B190 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003DFEEC-0x003DFEFC */ get; } // 0x0044B1F8-0x0044B200 

		// Constructors
		[DebuggerHidden] // 0x003DFEAC-0x003DFEBC
		public <RewardHitServiceCallWithoutValidation>d__53(int <>1__state); // 0x00448D0C-0x00448D38

		// Methods
		[DebuggerHidden] // 0x003DFEBC-0x003DFECC
		void IDisposable.Dispose(); // 0x0044AD18-0x0044AD1C
		private bool MoveNext(); // 0x0044AD1C-0x0044B188
		[DebuggerHidden] // 0x003DFEDC-0x003DFEEC
		void IEnumerator.Reset(); // 0x0044B190-0x0044B1F8
	}

	[CompilerGenerated] // 0x003DF208-0x003DF218
	private sealed class <EndServiceCall>d__56 : IEnumerator<object> // TypeDefIndex: 3563
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public GameController <>4__this; // 0x20
		public int level; // 0x28
		private int <score>5__2; // 0x2C
		private UnityWebRequest <w>5__3; // 0x30

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003DFF1C-0x003DFF2C */ get; } // 0x00449A24-0x00449A2C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003DFF3C-0x003DFF4C */ get; } // 0x00449A94-0x00449A9C 

		// Constructors
		[DebuggerHidden] // 0x003DFEFC-0x003DFF0C
		public <EndServiceCall>d__56(int <>1__state); // 0x00448ECC-0x00448EF8

		// Methods
		[DebuggerHidden] // 0x003DFF0C-0x003DFF1C
		void IDisposable.Dispose(); // 0x004495F8-0x004495FC
		private bool MoveNext(); // 0x004495FC-0x00449A24
		[DebuggerHidden] // 0x003DFF2C-0x003DFF3C
		void IEnumerator.Reset(); // 0x00449A2C-0x00449A94
	}

	// Constructors
	public GameController(); // 0x004495E8-0x004495F8

	// Methods
	private void Start(); // 0x0044852C-0x00448564
	public void StartGame(); // 0x0043D55C-0x0043D560
	public void StopGame(); // 0x004485D8-0x004485DC
	public void SetAR_statusText(bool show, AR_STATUS state = AR_STATUS.MARKER_NOT_FOUND /* Metadata: 0x0021C868 */); // 0x0042D0D0-0x0042D2F8
	public void ShowInstructions(); // 0x0042D020-0x0042D054
	public void HideInstructions(); // 0x0042D054-0x0042D0D0
	private bool HasAtmTest(); // 0x004485DC-0x004485E4
	public void CheckForHit(int obSide, bool isAtm); // 0x00440A04-0x00440A08
	public void GameOver(); // 0x0042ED78-0x0042EDAC
	public void Replay(); // 0x004485E4-0x004485F0
	public void MainMenu(); // 0x004485F0-0x004485FC
	[DoNotRename] // 0x003DFB98-0x003DFBA8
	public void Click_MainMenu(); // 0x004485FC-0x00448650
	[DoNotRename] // 0x003DFBA8-0x003DFBB8
	public void Click_Relpay(); // 0x004486E8-0x0044873C
	[IteratorStateMachine] // 0x003DFBB8-0x003DFC1C
	private IEnumerator StartServiceCall(); // 0x00448564-0x004485D8
	public string Md5SumString(string strToEncrypt); // 0x00448768-0x00448910
	private static string ComputeSha256Hash(string rawData); // 0x00448910-0x00448B58
	[IteratorStateMachine] // 0x003DFC1C-0x003DFC80
	private IEnumerator RewardHitServiceCall(); // 0x00448B58-0x00448BCC
	[IteratorStateMachine] // 0x003DFC80-0x003DFCE4
	private IEnumerator RewardHitServiceCallNewKey(); // 0x00448BF8-0x00448C6C
	[IteratorStateMachine] // 0x003DFCE4-0x003DFD48
	private IEnumerator RewardHitServiceCallWithoutValidation(); // 0x00448C98-0x00448D0C
	public void selectInAppGift(); // 0x00448D38-0x00448ECC
	[IteratorStateMachine] // 0x003DFD48-0x003DFDAC
	private IEnumerator EndServiceCall(int level); // 0x00448650-0x004486E8
	private void CallServiceErrorDialog(ErrorCodes er, ServiceNames sn = ServiceNames.undefined /* Metadata: 0x0021C86C */); // 0x00448EF8-0x00449538
	[DoNotRename] // 0x003DFDAC-0x003DFDBC
	public void RefreshService(); // 0x00449538-0x00449580
	public void HitATM(); // 0x0042E98C-0x0042EA74
	public void RewardHit(); // 0x004321E8-0x00432214
	private void HitObstacle(); // 0x00449580-0x00449584
	public void CloseInstructionsDialog(); // 0x00449584-0x00449590
	public void ClickBackButton(); // 0x00449590-0x0044959C
	public void OpenDialogLink(); // 0x0044959C-0x004495E8
}

public class ItemDestroyer : MonoBehaviour // TypeDefIndex: 3564
{
	// Constructors
	public ItemDestroyer(); // 0x008032EC-0x008032F4

	// Methods
	private void OnCollisionEnter(Collision collisionInfo); // 0x00802F84-0x00803138
	private void OnTriggerEnter(Collider other); // 0x00803138-0x008032EC
}

public class ObjectLoad : MonoBehaviour // TypeDefIndex: 3565
{
	// Fields
	private int mSpawnTicks; // 0x18
	private float mSmoothStep; // 0x1C
	private Transform mTransform; // 0x20
	private Vector3 mLocalScale; // 0x28

	// Constructors
	public ObjectLoad(); // 0x00D0711C-0x00D07124

	// Methods
	private void Awake(); // 0x00D06FB0-0x00D06FB4
	private void FixedUpdate(); // 0x00D06FB4-0x00D0711C
}

public class ObstacleMover : MonoBehaviour // TypeDefIndex: 3566
{
	// Fields
	public bool isCustom; // 0x18
	public Vector3 direction; // 0x1C

	// Constructors
	public ObstacleMover(); // 0x00D07380-0x00D073F8

	// Methods
	private void Update(); // 0x00D071BC-0x00D07380
}

public class PlayerController : MonoBehaviour // TypeDefIndex: 3567
{
	// Fields
	public ARGameController gameController; // 0x18

	// Constructors
	public PlayerController(); // 0x00D07A30-0x00D07A38

	// Methods
	private void OnTriggerEnter(Collider other); // 0x00D076A0-0x00D07A30
}

public class CFX_Demo : MonoBehaviour // TypeDefIndex: 3568
{
	// Fields
	public bool orderedSpawns; // 0x18
	public float step; // 0x1C
	public float range; // 0x20
	private float order; // 0x24
	public Material groundMat; // 0x28
	public Material waterMat; // 0x30
	public GameObject[] ParticleExamples; // 0x38
	private Dictionary<string, float> ParticlesYOffsetD; // 0x40
	private int exampleIndex; // 0x48
	private string randomSpawnsDelay; // 0x50
	private bool randomSpawns; // 0x58
	private bool slowMo; // 0x59

	// Nested types
	[CompilerGenerated] // 0x003DF218-0x003DF228
	private sealed class <RandomSpawnsCoroutine>d__15 : IEnumerator<object> // TypeDefIndex: 3569
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public CFX_Demo <>4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003DFFD0-0x003DFFE0 */ get; } // 0x00439B78-0x00439B80 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003DFFF0-0x003E0000 */ get; } // 0x00439BE8-0x00439BF0 

		// Constructors
		[DebuggerHidden] // 0x003DFFB0-0x003DFFC0
		public <RandomSpawnsCoroutine>d__15(int <>1__state); // 0x004391B4-0x004391E0

		// Methods
		[DebuggerHidden] // 0x003DFFC0-0x003DFFD0
		void IDisposable.Dispose(); // 0x00439828-0x0043982C
		private bool MoveNext(); // 0x0043982C-0x00439B78
		[DebuggerHidden] // 0x003DFFE0-0x003DFFF0
		void IEnumerator.Reset(); // 0x00439B80-0x00439BE8
	}

	// Constructors
	public CFX_Demo(); // 0x0043923C-0x00439828

	// Methods
	private void OnMouseDown(); // 0x00437F74-0x00438170
	private GameObject spawnParticle(); // 0x00438170-0x004384B4
	private void OnGUI(); // 0x004384B4-0x00438D24
	[IteratorStateMachine] // 0x003DFF4C-0x003DFFB0
	private IEnumerator RandomSpawnsCoroutine(); // 0x00439140-0x004391B4
	private void Update(); // 0x004391E0-0x0043923C
	private void prevParticle(); // 0x00438D24-0x00438F2C
	private void nextParticle(); // 0x00438F2C-0x00439140
}

public class CFX_Demo_RandomDir : MonoBehaviour // TypeDefIndex: 3570
{
	// Fields
	public Vector3 min; // 0x18
	public Vector3 max; // 0x24

	// Constructors
	public CFX_Demo_RandomDir(); // 0x00439CA8-0x00439D3C

	// Methods
	private void Start(); // 0x00439BF0-0x00439CA8
}

public class CFX_Demo_RandomDirectionTranslate : MonoBehaviour // TypeDefIndex: 3571
{
	// Fields
	public float speed; // 0x18
	public Vector3 baseDir; // 0x1C
	public Vector3 axis; // 0x28
	public bool gravity; // 0x34
	private Vector3 dir; // 0x38

	// Constructors
	public CFX_Demo_RandomDirectionTranslate(); // 0x0043A058-0x0043A0E8

	// Methods
	private void Start(); // 0x00439D3C-0x00439EA0
	private void Update(); // 0x00439EA0-0x0043A058
}

public class CFX_Demo_RotateCamera : MonoBehaviour // TypeDefIndex: 3572
{
	// Fields
	public static bool rotating; // 0x00
	public float speed; // 0x18
	public Transform rotationCenter; // 0x20

	// Constructors
	public CFX_Demo_RotateCamera(); // 0x0043A24C-0x0043A25C
	static CFX_Demo_RotateCamera(); // 0x0043A25C-0x0043A2B0

	// Methods
	private void Update(); // 0x0043A0E8-0x0043A24C
}

[RequireComponent] // 0x003DF228-0x003DF28C
public class CFX_AutoDestructShuriken : MonoBehaviour // TypeDefIndex: 3573
{
	// Fields
	public bool OnlyDeactivate; // 0x18

	// Nested types
	[CompilerGenerated] // 0x003DF28C-0x003DF29C
	private sealed class <CheckIfAlive>d__2 : IEnumerator<object> // TypeDefIndex: 3574
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public CFX_AutoDestructShuriken <>4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003E0084-0x003E0094 */ get; } // 0x00437D54-0x00437D5C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003E00A4-0x003E00B4 */ get; } // 0x00437DC4-0x00437DCC 

		// Constructors
		[DebuggerHidden] // 0x003E0064-0x003E0074
		public <CheckIfAlive>d__2(int <>1__state); // 0x00437BB4-0x00437BE0

		// Methods
		[DebuggerHidden] // 0x003E0074-0x003E0084
		void IDisposable.Dispose(); // 0x00437BE8-0x00437BEC
		private bool MoveNext(); // 0x00437BEC-0x00437D54
		[DebuggerHidden] // 0x003E0094-0x003E00A4
		void IEnumerator.Reset(); // 0x00437D5C-0x00437DC4
	}

	// Constructors
	public CFX_AutoDestructShuriken(); // 0x00437BE0-0x00437BE8

	// Methods
	private void OnEnable(); // 0x00437AEC-0x00437B40
	[IteratorStateMachine] // 0x003E0000-0x003E0064
	private IEnumerator CheckIfAlive(); // 0x00437B40-0x00437BB4
}

public class CFX_AutodestructWhenNoChildren : MonoBehaviour // TypeDefIndex: 3575
{
	// Constructors
	public CFX_AutodestructWhenNoChildren(); // 0x00437F6C-0x00437F74

	// Methods
	private void Update(); // 0x00437EBC-0x00437F6C
}

public class CFX_AutoRotate : MonoBehaviour // TypeDefIndex: 3576
{
	// Fields
	public Vector3 rotation; // 0x18
	public Space space; // 0x24

	// Constructors
	public CFX_AutoRotate(); // 0x00437EAC-0x00437EBC

	// Methods
	private void Update(); // 0x00437DCC-0x00437EAC
}

[RequireComponent] // 0x003DF29C-0x003DF300
public class CFX_LightIntensityFade : MonoBehaviour // TypeDefIndex: 3577
{
	// Fields
	public float duration; // 0x18
	public float delay; // 0x1C
	public float finalIntensity; // 0x20
	private float baseIntensity; // 0x24
	public bool autodestruct; // 0x28
	private float p_lifetime; // 0x2C
	private float p_delay; // 0x30

	// Constructors
	public CFX_LightIntensityFade(); // 0x0043A564-0x0043A574

	// Methods
	private void Start(); // 0x0043A2B0-0x0043A320
	private void OnEnable(); // 0x0043A320-0x0043A3AC
	private void Update(); // 0x0043A3AC-0x0043A564
}

public class CFX_ShurikenThreadFix : MonoBehaviour // TypeDefIndex: 3578
{
	// Fields
	private ParticleSystem[] systems; // 0x18

	// Nested types
	[CompilerGenerated] // 0x003DF300-0x003DF310
	private sealed class <WaitFrame>d__2 : IEnumerator<object> // TypeDefIndex: 3579
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public CFX_ShurikenThreadFix <>4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003E0138-0x003E0148 */ get; } // 0x0043A7F8-0x0043A800 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003E0158-0x003E0168 */ get; } // 0x0043A868-0x0043A870 

		// Constructors
		[DebuggerHidden] // 0x003E0118-0x003E0128
		public <WaitFrame>d__2(int <>1__state); // 0x0043A6C4-0x0043A6F0

		// Methods
		[DebuggerHidden] // 0x003E0128-0x003E0138
		void IDisposable.Dispose(); // 0x0043A6F8-0x0043A6FC
		private bool MoveNext(); // 0x0043A6FC-0x0043A7F8
		[DebuggerHidden] // 0x003E0148-0x003E0158
		void IEnumerator.Reset(); // 0x0043A800-0x0043A868
	}

	// Constructors
	public CFX_ShurikenThreadFix(); // 0x0043A6F0-0x0043A6F8

	// Methods
	private void OnEnable(); // 0x0043A574-0x0043A650
	[IteratorStateMachine] // 0x003E00B4-0x003E0118
	private IEnumerator WaitFrame(); // 0x0043A650-0x0043A6C4
}

public class CFX_SpawnSystem : MonoBehaviour // TypeDefIndex: 3580
{
	// Fields
	private static CFX_SpawnSystem instance; // 0x00
	public GameObject[] objectsToPreload; // 0x18
	public int[] objectsToPreloadTimes; // 0x20
	public bool hideObjectsInHierarchy; // 0x28
	private bool allObjectsLoaded; // 0x29
	private Dictionary<int, List<GameObject>> instantiatedObjects; // 0x30
	private Dictionary<int, int> poolCursors; // 0x38

	// Properties
	public static bool AllObjectsLoaded { get; } // 0x0043B5B0-0x0043B610 

	// Constructors
	public CFX_SpawnSystem(); // 0x0043B7B4-0x0043B87C

	// Methods
	public static GameObject GetNextObject(GameObject sourceObj, bool activateObject = true /* Metadata: 0x0021C890 */); // 0x0043A870-0x0043AD84
	public static void PreloadObject(GameObject sourceObj, int poolSize = 1 /* Metadata: 0x0021C891 */); // 0x0043AD84-0x0043ADFC
	public static void UnloadObjects(GameObject sourceObj); // 0x0043B114-0x0043B17C
	private void addObjectToPool(GameObject sourceObject, int number); // 0x0043ADFC-0x0043B114
	private void removeObjectsFromPool(GameObject sourceObject); // 0x0043B17C-0x0043B5B0
	private void Awake(); // 0x0043B610-0x0043B6E0
	private void Start(); // 0x0043B6E0-0x0043B7B4
}

[RequireComponent] // 0x003DF310-0x003DF374
public class CFX3_AutoStopLoopedEffect : MonoBehaviour // TypeDefIndex: 3581
{
	// Fields
	public float effectDuration; // 0x18
	private float d; // 0x1C

	// Constructors
	public CFX3_AutoStopLoopedEffect(); // 0x00435EFC-0x00435F0C

	// Methods
	private void OnEnable(); // 0x00435DC4-0x00435DD0
	private void Update(); // 0x00435DD0-0x00435EFC
}

public class CFX3_Demo : MonoBehaviour // TypeDefIndex: 3582
{
	// Fields
	public bool orderedSpawns; // 0x18
	public float step; // 0x1C
	public float range; // 0x20
	private float order; // 0x24
	public Renderer groundRenderer; // 0x28
	public Collider groundCollider; // 0x30
	private GameObject[] ParticleExamples; // 0x38
	private int exampleIndex; // 0x40
	private string randomSpawnsDelay; // 0x48
	private bool randomSpawns; // 0x50
	private bool slowMo; // 0x51
	private List<GameObject> onScreenParticles; // 0x58

	// Nested types
	[CompilerGenerated] // 0x003DF374-0x003DF384
	private sealed class <CheckForDeletedParticles>d__16 : IEnumerator<object> // TypeDefIndex: 3583
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public CFX3_Demo <>4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003E0250-0x003E0260 */ get; } // 0x00437424-0x0043742C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003E0270-0x003E0280 */ get; } // 0x00437494-0x0043749C 

		// Constructors
		[DebuggerHidden] // 0x003E0230-0x003E0240
		public <CheckForDeletedParticles>d__16(int <>1__state); // 0x00437138-0x00437164

		// Methods
		[DebuggerHidden] // 0x003E0240-0x003E0250
		void IDisposable.Dispose(); // 0x004372A0-0x004372A4
		private bool MoveNext(); // 0x004372A4-0x00437424
		[DebuggerHidden] // 0x003E0260-0x003E0270
		void IEnumerator.Reset(); // 0x0043742C-0x00437494
	}

	[CompilerGenerated] // 0x003DF384-0x003DF394
	private sealed class <RandomSpawnsCoroutine>d__17 : IEnumerator<object> // TypeDefIndex: 3584
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public CFX3_Demo <>4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003E02A0-0x003E02B0 */ get; } // 0x004377EC-0x004377F4 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003E02C0-0x003E02D0 */ get; } // 0x0043785C-0x00437864 

		// Constructors
		[DebuggerHidden] // 0x003E0280-0x003E0290
		public <RandomSpawnsCoroutine>d__17(int <>1__state); // 0x004371D8-0x00437204

		// Methods
		[DebuggerHidden] // 0x003E0290-0x003E02A0
		void IDisposable.Dispose(); // 0x0043749C-0x004374A0
		private bool MoveNext(); // 0x004374A0-0x004377EC
		[DebuggerHidden] // 0x003E02B0-0x003E02C0
		void IEnumerator.Reset(); // 0x004377F4-0x0043785C
	}

	// Constructors
	public CFX3_Demo(); // 0x00437204-0x004372A0

	// Methods
	private void Awake(); // 0x00435F0C-0x00436060
	private void Update(); // 0x00436060-0x004362FC
	private void OnGUI(); // 0x00436818-0x004370C4
	private GameObject spawnParticle(); // 0x004364F0-0x00436818
	[IteratorStateMachine] // 0x003E0168-0x003E01CC
	private IEnumerator CheckForDeletedParticles(); // 0x004370C4-0x00437138
	[IteratorStateMachine] // 0x003E01CC-0x003E0230
	private IEnumerator RandomSpawnsCoroutine(); // 0x00437164-0x004371D8
	private void prevParticle(); // 0x004362FC-0x00436344
	private void nextParticle(); // 0x00436344-0x00436394
	private void destroyParticles(); // 0x00436394-0x004364F0
}

public class CFX3_Demo_Translate : MonoBehaviour // TypeDefIndex: 3585
{
	// Fields
	public float speed; // 0x18
	public Vector3 rotation; // 0x1C
	public Vector3 axis; // 0x28
	public bool gravity; // 0x34
	private Vector3 dir; // 0x38

	// Constructors
	public CFX3_Demo_Translate(); // 0x00437A5C-0x00437AEC

	// Methods
	private void Start(); // 0x00437864-0x00437958
	private void Update(); // 0x00437958-0x00437A5C
}

[RequireComponent] // 0x003DF394-0x003DF3F8
public class FPSWalkerEnhanced : MonoBehaviour // TypeDefIndex: 3586
{
	// Fields
	public float walkSpeed; // 0x18
	public float runSpeed; // 0x1C
	public bool limitDiagonalSpeed; // 0x20
	public bool toggleRun; // 0x21
	public float jumpSpeed; // 0x24
	public float gravity; // 0x28
	public float fallingDamageThreshold; // 0x2C
	public bool slideWhenOverSlopeLimit; // 0x30
	public bool slideOnTaggedObjects; // 0x31
	public float slideSpeed; // 0x34
	public bool airControl; // 0x38
	public float antiBumpFactor; // 0x3C
	public int antiBunnyHopFactor; // 0x40
	private Vector3 moveDirection; // 0x44
	private bool grounded; // 0x50
	private CharacterController controller; // 0x58
	private Transform myTransform; // 0x60
	private float speed; // 0x68
	private RaycastHit hit; // 0x6C
	private float fallStartLevel; // 0x98
	private bool falling; // 0x9C
	private float slideLimit; // 0xA0
	private float rayDistance; // 0xA4
	private Vector3 contactPoint; // 0xA8
	private bool playerControl; // 0xB4
	private int jumpTimer; // 0xB8

	// Constructors
	public FPSWalkerEnhanced(); // 0x004414F0-0x004415A0

	// Methods
	private void Start(); // 0x00440C84-0x00440D7C
	private void FixedUpdate(); // 0x00440D7C-0x00441398
	private void Update(); // 0x00441430-0x004414B0
	private void OnControllerColliderHit(ControllerColliderHit hit); // 0x004414B0-0x004414F0
	private void FallingDamageAlert(float fallDistance); // 0x00441398-0x00441430
}

[AddComponentMenu] // 0x003DF3F8-0x003DF430
public class SmoothMouseLook : MonoBehaviour // TypeDefIndex: 3587
{
	// Fields
	public RotationAxes axes; // 0x18
	public float sensitivityX; // 0x1C
	public float sensitivityY; // 0x20
	public float minimumX; // 0x24
	public float maximumX; // 0x28
	public float minimumY; // 0x2C
	public float maximumY; // 0x30
	private float rotationX; // 0x34
	private float rotationY; // 0x38
	private List<float> rotArrayX; // 0x40
	private float rotAverageX; // 0x48
	private List<float> rotArrayY; // 0x50
	private float rotAverageY; // 0x58
	public float frameCounter; // 0x5C
	private Quaternion originalRotation; // 0x60
	private Quaternion parentOriginalRotation; // 0x70

	// Nested types
	public enum RotationAxes // TypeDefIndex: 3588
	{
		MouseXAndY = 0,
		MouseX = 1,
		MouseY = 2
	}

	// Constructors
	public SmoothMouseLook(); // 0x00D1B4DC-0x00D1B58C

	// Methods
	private void Update(); // 0x00D1AA6C-0x00D1B2F4
	private void Start(); // 0x00D1B3C4-0x00D1B4DC
	public static float ClampAngle(float angle, float min, float max); // 0x00D1B2F4-0x00D1B3C4
}

public class SkyboxChanger : MonoBehaviour // TypeDefIndex: 3589
{
	// Fields
	public Material[] Skyboxes; // 0x18
	private Dropdown _dropdown; // 0x20

	// Constructors
	public SkyboxChanger(); // 0x00D1A9A4-0x00D1A9AC

	// Methods
	public void Awake(); // 0x00D1A87C-0x00D1A8D4
	public void ChangeSkybox(); // 0x00D1A8D4-0x00D1A9A4
}

public class SkyboxRotator : MonoBehaviour // TypeDefIndex: 3590
{
	// Fields
	public float RotationPerSecond; // 0x18
	private bool _rotate; // 0x1C

	// Constructors
	public SkyboxRotator(); // 0x00D1AA5C-0x00D1AA6C

	// Methods
	protected void Update(); // 0x00D1A9AC-0x00D1AA4C
	public void ToggleSkyboxRotation(); // 0x00D1AA4C-0x00D1AA5C
}

[ExecuteInEditMode] // 0x003DF430-0x003DF440
public class Renamer : MonoBehaviour // TypeDefIndex: 3591
{
	// Constructors
	public Renamer(); // 0x00D082F0-0x00D082F8

	// Methods
	private void Start(); // 0x00D07F18-0x00D07F44
	private void Renamer_Rec(Transform t); // 0x00D07F44-0x00D082F0
}

public class Goal : MonoBehaviour // TypeDefIndex: 3592
{
	// Fields
	public AudioManager audioManager; // 0x18
	public UnityEngine.UI.Text text; // 0x20
	private float mTimeLimit; // 0x28
	private float mSmoothStep; // 0x2C

	// Constructors
	public Goal(); // 0x0044C09C-0x0044C0A4

	// Methods
	private void OnEnable(); // 0x0044BAD8-0x0044BB9C
	[DoNotRename] // 0x003E02D0-0x003E02E0
	public void SetMessgage(InGameNotification Msg); // 0x0044BB9C-0x0044BEA0
	private void Update(); // 0x0044BEA0-0x0044C09C
}

public enum InGameNotification // TypeDefIndex: 3593
{
	GoalCompleted = 0,
	NoGifts = 1
}

public class LoadingAnimation : MonoBehaviour // TypeDefIndex: 3594
{
	// Fields
	public GameObject EventSystem; // 0x18

	// Constructors
	public LoadingAnimation(); // 0x00813AC0-0x00813AC8

	// Methods
	private void OnEnable(); // 0x00813904-0x008139A4
	private void OnDisable(); // 0x008139A4-0x00813A44
	private void Update(); // 0x00813A44-0x00813AC0
}

public class PreferencesManager : MonoBehaviour // TypeDefIndex: 3595
{
	// Fields
	private string score; // 0x18
	private string coins; // 0x20

	// Constructors
	public PreferencesManager(); // 0x00D07A38-0x00D07A40
}

public class ReviveLBL : MonoBehaviour // TypeDefIndex: 3596
{
	// Fields
	public int RevVal; // 0x18
	public UnityEngine.UI.Text text; // 0x20
	private float mTimeLimit; // 0x28
	private float mSmoothStep; // 0x2C

	// Constructors
	public ReviveLBL(); // 0x00D08540-0x00D08548

	// Methods
	private void OnEnable(); // 0x00D082F8-0x00D083C8
	private void Update(); // 0x00D083C8-0x00D08540
}

public class ServicesManager : MonoBehaviour // TypeDefIndex: 3597
{
	// Fields
	public Button NxtDateBtn; // 0x18
	public Button PrevDateBtn; // 0x20
	public Button NxtDataBtn; // 0x28
	public Button PrevDataBtn; // 0x30
	private int mDailyLBDate; // 0x38
	private int mDailyLBPG; // 0x3C
	public GameObject ProfileBtn; // 0x40
	public GameObject SettingsBtn; // 0x48
	public GameObject LeaderBoardBtn; // 0x50
	public GameObject DailyLeaderBoardBtn; // 0x58
	public GameObject ProfilePanel; // 0x60
	public GameObject DailyChallengePanel; // 0x68
	public GameObject LoadingAnimation; // 0x70
	public UnityEngine.UI.Text DailyChallengeTXT; // 0x78
	public UnityEngine.UI.Text DailyChallengeLBDate; // 0x80
	public UnityEngine.UI.Text DailyChallengeLB_Reward; // 0x88
	public UnityEngine.UI.Text CurrentUserName; // 0x90
	public UnityEngine.UI.Text CurrentUserHighScore; // 0x98
	public Transform Panel; // 0xA0
	public ScrollRect scrollRect; // 0xA8
	public Transform DailyPanel; // 0xB0
	public ScrollRect DailyscrollRect; // 0xB8
	public UnityEngine.UI.Text MegaPointsTXT; // 0xC0
	public GameObject ServiceErrorDialog; // 0xC8
	public GameObject PanelEnterPin; // 0xD0
	public GameObject PanelEnterName; // 0xD8
	public GameObject PanelLanguage; // 0xE0
	public UnityEngine.UI.Text ServiceErrorMsgTXT; // 0xE8
	public string URL_TXT; // 0xF0
	public string URL_TXT_Debug; // 0xF8
	public OTPManager oTPManager; // 0x100
	private static ServicesManager mInstance; // 0x00
	private string mNickName; // 0x108
	private string mMobileNumber; // 0x110
	private string mToken; // 0x118
	private bool mTemBoolVal_0; // 0x120
	private ServiceNames mSerNm; // 0x124

	// Properties
	public static ServicesManager Instance { get; } // 0x00D0B748-0x00D0B798 

	// Nested types
	private enum ErrorCodes // TypeDefIndex: 3598
	{
		Network = 0,
		Worng = 1,
		WrongNumber = 2,
		UnacceptedName = 3,
		NameAlreadyTaken = 4,
		CopPack = 5,
		wrongCode = 6,
		UserBlocked = 7,
		RateLimit = 8,
		IncorrectPIN = 9,
		TEST = 10
	}

	private enum ServiceNames // TypeDefIndex: 3599
	{
		undefined = 0,
		versionChk = 1
	}

	[Serializable]
	private struct FromJsonOBLeaderBoard // TypeDefIndex: 3600
	{
		// Fields
		public LeaderBoardS[] leaderboard; // 0x00
		public int currentScore; // 0x08

		// Nested types
		[Serializable]
		public struct UserOB // TypeDefIndex: 3601
		{
			// Fields
			public string name; // 0x00
			public string location; // 0x08
		}

		[Serializable]
		public struct LeaderBoardS // TypeDefIndex: 3602
		{
			// Fields
			public UserOB user; // 0x00
			public int score; // 0x10
		}
	}

	[Serializable]
	private struct FromJsonOBHealth // TypeDefIndex: 3603
	{
		// Fields
		public string version; // 0x00
		public string newest_version; // 0x08
		public bool force_update; // 0x10
	}

	[Serializable]
	private struct FromJsonOBDaily // TypeDefIndex: 3604
	{
		// Fields
		public challengeS challenge; // 0x00
		public bool price; // 0x28

		// Nested types
		[Serializable]
		public struct challengeS // TypeDefIndex: 3605
		{
			// Fields
			public string _id; // 0x00
			public string type; // 0x08
			public int goal; // 0x10
			public int restrict; // 0x14
			public int amount; // 0x18
			public string rewardType; // 0x20
		}
	}

	[Serializable]
	private struct FromJsonOBMobile // TypeDefIndex: 3606
	{
		// Fields
		public string mobile; // 0x00
		public bool isPrepaid; // 0x08
		public bool isPostpaid; // 0x09
	}

	[Serializable]
	private struct RateLimitCheck // TypeDefIndex: 3607
	{
		// Fields
		public int status; // 0x00
		public string message; // 0x08
	}

	[Serializable]
	private struct FromJsonOBtoken // TypeDefIndex: 3608
	{
		// Fields
		public string _id; // 0x00
		public string mobile; // 0x08
		public string name; // 0x10
		public string token; // 0x18
	}

	[Serializable]
	private struct FromJsonOBMegaPoints // TypeDefIndex: 3609
	{
		// Fields
		public int drawpoints; // 0x00
	}

	[Serializable]
	private struct testJson // TypeDefIndex: 3610
	{
		// Fields
		public int userId; // 0x00
		public int id; // 0x04
		public string title; // 0x08
		public string body; // 0x10
	}

	[Serializable]
	private struct FromJsonOBDailyLeaderBoard // TypeDefIndex: 3611
	{
		// Fields
		public LeaderBoardS[] dailyLeaderBoard; // 0x00
		public ChallengeS challenge; // 0x08
		public int count; // 0x28

		// Nested types
		[Serializable]
		public struct UserOB // TypeDefIndex: 3612
		{
			// Fields
			public string name; // 0x00
			public string location; // 0x08
		}

		[Serializable]
		public struct LeaderBoardS // TypeDefIndex: 3613
		{
			// Fields
			public UserOB user; // 0x00
			public string time; // 0x10
		}

		[Serializable]
		public struct ChallengeS // TypeDefIndex: 3614
		{
			// Fields
			public string type; // 0x00
			public string rewardType; // 0x08
			public int amount; // 0x10
			public string date; // 0x18
		}
	}

	[CompilerGenerated] // 0x003DF440-0x003DF450
	private sealed class <LeaderBoardServiceCall>d__51 : IEnumerator<object> // TypeDefIndex: 3615
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public ServicesManager <>4__this; // 0x20
		private UnityWebRequest <w>5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003E0768-0x003E0778 */ get; } // 0x00D105A8-0x00D105B0 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003E0788-0x003E0798 */ get; } // 0x00D10618-0x00D10620 

		// Constructors
		[DebuggerHidden] // 0x003E0748-0x003E0758
		public <LeaderBoardServiceCall>d__51(int <>1__state); // 0x00D0BF2C-0x00D0BF58

		// Methods
		[DebuggerHidden] // 0x003E0758-0x003E0768
		void IDisposable.Dispose(); // 0x00D0FA14-0x00D0FA18
		private bool MoveNext(); // 0x00D0FA18-0x00D105A8
		[DebuggerHidden] // 0x003E0778-0x003E0788
		void IEnumerator.Reset(); // 0x00D105B0-0x00D10618
	}

	[CompilerGenerated] // 0x003DF450-0x003DF460
	private sealed class <UserHealthServiceCall>d__53 : IEnumerator<object> // TypeDefIndex: 3616
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public ServicesManager <>4__this; // 0x20
		public bool st; // 0x28
		private UnityWebRequest <w>5__2; // 0x30

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003E07B8-0x003E07C8 */ get; } // 0x00D10C84-0x00D10C8C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003E07D8-0x003E07E8 */ get; } // 0x00D10CF4-0x00D10CFC 

		// Constructors
		[DebuggerHidden] // 0x003E0798-0x003E07A8
		public <UserHealthServiceCall>d__53(int <>1__state); // 0x00D0BF58-0x00D0BF84

		// Methods
		[DebuggerHidden] // 0x003E07A8-0x003E07B8
		void IDisposable.Dispose(); // 0x00D108A0-0x00D108A4
		private bool MoveNext(); // 0x00D108A4-0x00D10C84
		[DebuggerHidden] // 0x003E07C8-0x003E07D8
		void IEnumerator.Reset(); // 0x00D10C8C-0x00D10CF4
	}

	[CompilerGenerated] // 0x003DF460-0x003DF470
	private sealed class <DailyChallengeServiceCall>d__55 : IEnumerator<object> // TypeDefIndex: 3617
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public ServicesManager <>4__this; // 0x20
		private UnityWebRequest <w>5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003E0808-0x003E0818 */ get; } // 0x00D0D2C8-0x00D0D2D0 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003E0828-0x003E0838 */ get; } // 0x00D0D338-0x00D0D340 

		// Constructors
		[DebuggerHidden] // 0x003E07E8-0x003E07F8
		public <DailyChallengeServiceCall>d__55(int <>1__state); // 0x00D0BFF8-0x00D0C024

		// Methods
		[DebuggerHidden] // 0x003E07F8-0x003E0808
		void IDisposable.Dispose(); // 0x00D0CBB4-0x00D0CBB8
		private bool MoveNext(); // 0x00D0CBB8-0x00D0D2C8
		[DebuggerHidden] // 0x003E0818-0x003E0828
		void IEnumerator.Reset(); // 0x00D0D2D0-0x00D0D338
	}

	[CompilerGenerated] // 0x003DF470-0x003DF480
	private sealed class <UserLoginServiceCall>d__58 : IEnumerator<object> // TypeDefIndex: 3618
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public ServicesManager <>4__this; // 0x20
		public string mobile; // 0x28
		private UnityWebRequest <w>5__2; // 0x30

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003E0858-0x003E0868 */ get; } // 0x00D11380-0x00D11388 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003E0878-0x003E0888 */ get; } // 0x00D113F0-0x00D113F8 

		// Constructors
		[DebuggerHidden] // 0x003E0838-0x003E0848
		public <UserLoginServiceCall>d__58(int <>1__state); // 0x00D0C024-0x00D0C050

		// Methods
		[DebuggerHidden] // 0x003E0848-0x003E0858
		void IDisposable.Dispose(); // 0x00D10CFC-0x00D10D00
		private bool MoveNext(); // 0x00D10D00-0x00D11380
		[DebuggerHidden] // 0x003E0868-0x003E0878
		void IEnumerator.Reset(); // 0x00D11388-0x00D113F0
	}

	[CompilerGenerated] // 0x003DF480-0x003DF490
	private sealed class <UserNameServiceCall>d__59 : IEnumerator<object> // TypeDefIndex: 3619
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public ServicesManager <>4__this; // 0x20
		public string name; // 0x28
		private UnityWebRequest <w>5__2; // 0x30

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003E08A8-0x003E08B8 */ get; } // 0x00D11964-0x00D1196C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003E08C8-0x003E08D8 */ get; } // 0x00D119D4-0x00D119DC 

		// Constructors
		[DebuggerHidden] // 0x003E0888-0x003E0898
		public <UserNameServiceCall>d__59(int <>1__state); // 0x00D0C050-0x00D0C07C

		// Methods
		[DebuggerHidden] // 0x003E0898-0x003E08A8
		void IDisposable.Dispose(); // 0x00D113F8-0x00D113FC
		private bool MoveNext(); // 0x00D113FC-0x00D11964
		[DebuggerHidden] // 0x003E08B8-0x003E08C8
		void IEnumerator.Reset(); // 0x00D1196C-0x00D119D4
	}

	[CompilerGenerated] // 0x003DF490-0x003DF4A0
	private sealed class <UserReNameServiceCall>d__60 : IEnumerator<object> // TypeDefIndex: 3620
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public ServicesManager <>4__this; // 0x20
		public string name; // 0x28
		private UnityWebRequest <w>5__2; // 0x30

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003E08F8-0x003E0908 */ get; } // 0x00D11DEC-0x00D11DF4 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003E0918-0x003E0928 */ get; } // 0x00D11E5C-0x00D12818 

		// Constructors
		[DebuggerHidden] // 0x003E08D8-0x003E08E8
		public <UserReNameServiceCall>d__60(int <>1__state); // 0x00D0C07C-0x00D0C0A8

		// Methods
		[DebuggerHidden] // 0x003E08E8-0x003E08F8
		void IDisposable.Dispose(); // 0x00D119DC-0x00D119E0
		private bool MoveNext(); // 0x00D119E0-0x00D11DEC
		[DebuggerHidden] // 0x003E0908-0x003E0918
		void IEnumerator.Reset(); // 0x00D11DF4-0x00D11E5C
	}

	[CompilerGenerated] // 0x003DF4A0-0x003DF4B0
	private sealed class <EnterPinServiceCall>d__62 : IEnumerator<object> // TypeDefIndex: 3621
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public ServicesManager <>4__this; // 0x20
		public string code; // 0x28
		private UnityWebRequest <w>5__2; // 0x30

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003E0948-0x003E0958 */ get; } // 0x00D0F450-0x00D0F458 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003E0968-0x003E0978 */ get; } // 0x00D0F4C0-0x00D0F4C8 

		// Constructors
		[DebuggerHidden] // 0x003E0928-0x003E0938
		public <EnterPinServiceCall>d__62(int <>1__state); // 0x00D0C0A8-0x00D0C0D4

		// Methods
		[DebuggerHidden] // 0x003E0938-0x003E0948
		void IDisposable.Dispose(); // 0x00D0EC04-0x00D0EC08
		private bool MoveNext(); // 0x00D0EC08-0x00D0F450
		[DebuggerHidden] // 0x003E0958-0x003E0968
		void IEnumerator.Reset(); // 0x00D0F458-0x00D0F4C0
	}

	[CompilerGenerated] // 0x003DF4B0-0x003DF4C0
	private sealed class <GetDrawMegaPointsServiceCall>d__64 : IEnumerator<object> // TypeDefIndex: 3622
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public ServicesManager <>4__this; // 0x20
		private UnityWebRequest <w>5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003E0998-0x003E09A8 */ get; } // 0x00D0F99C-0x00D0F9A4 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003E09B8-0x003E09C8 */ get; } // 0x00D0FA0C-0x00D0FA14 

		// Constructors
		[DebuggerHidden] // 0x003E0978-0x003E0988
		public <GetDrawMegaPointsServiceCall>d__64(int <>1__state); // 0x00D0C148-0x00D0C174

		// Methods
		[DebuggerHidden] // 0x003E0988-0x003E0998
		void IDisposable.Dispose(); // 0x00D0F4C8-0x00D0F4CC
		private bool MoveNext(); // 0x00D0F4CC-0x00D0F99C
		[DebuggerHidden] // 0x003E09A8-0x003E09B8
		void IEnumerator.Reset(); // 0x00D0F9A4-0x00D0FA0C
	}

	[CompilerGenerated] // 0x003DF4C0-0x003DF4D0
	private sealed class <TestJason>d__66 : IEnumerator<object> // TypeDefIndex: 3623
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public ServicesManager <>4__this; // 0x20
		private UnityWebRequest <w>5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003E09E8-0x003E09F8 */ get; } // 0x00D10828-0x00D10830 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003E0A08-0x003E0A18 */ get; } // 0x00D10898-0x00D108A0 

		// Constructors
		[DebuggerHidden] // 0x003E09C8-0x003E09D8
		public <TestJason>d__66(int <>1__state); // 0x00D0C1E8-0x00D0C214

		// Methods
		[DebuggerHidden] // 0x003E09D8-0x003E09E8
		void IDisposable.Dispose(); // 0x00D10620-0x00D10624
		private bool MoveNext(); // 0x00D10624-0x00D10828
		[DebuggerHidden] // 0x003E09F8-0x003E0A08
		void IEnumerator.Reset(); // 0x00D10830-0x00D10898
	}

	[CompilerGenerated] // 0x003DF4D0-0x003DF4E0
	private sealed class <DailyLeaderBoardServiceCall>d__69 : IEnumerator<object> // TypeDefIndex: 3624
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public int date; // 0x20
		public ServicesManager <>4__this; // 0x28
		public int pg; // 0x30
		private int <currentOffset>5__2; // 0x34
		private UnityWebRequest <w>5__3; // 0x38

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003E0A38-0x003E0A48 */ get; } // 0x00D0EB8C-0x00D0EB94 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003E0A58-0x003E0A68 */ get; } // 0x00D0EBFC-0x00D0EC04 

		// Constructors
		[DebuggerHidden] // 0x003E0A18-0x003E0A28
		public <DailyLeaderBoardServiceCall>d__69(int <>1__state); // 0x00D0CB80-0x00D0CBAC

		// Methods
		[DebuggerHidden] // 0x003E0A28-0x003E0A38
		void IDisposable.Dispose(); // 0x00D0D340-0x00D0D344
		private bool MoveNext(); // 0x00D0D344-0x00D0EB8C
		[DebuggerHidden] // 0x003E0A48-0x003E0A58
		void IEnumerator.Reset(); // 0x00D0EB94-0x00D0EBFC
	}

	// Constructors
	public ServicesManager(); // 0x00D0CBAC-0x00D0CBB4

	// Methods
	private void Awake(); // 0x00D0B798-0x00D0B8FC
	[DoNotRename] // 0x003E02E0-0x003E02F0
	public void UserLogin(string mobile); // 0x00D0B8FC-0x00D0B9B4
	[DoNotRename] // 0x003E02F0-0x003E0300
	public void UserName(string name); // 0x00D0BA4C-0x00D0BA78
	[DoNotRename] // 0x003E0300-0x003E0310
	public void UserReName(string name); // 0x00D0BB10-0x00D0BB3C
	[DoNotRename] // 0x003E0310-0x003E0320
	public void EnterPin(string pin); // 0x00D0BBD4-0x00D0BC00
	[DoNotRename] // 0x003E0320-0x003E0330
	public void CheckVersion(bool st); // 0x00D0BC98-0x00D0BCC8
	[DoNotRename] // 0x003E0330-0x003E0340
	public void GetLeaderBoard(); // 0x00D0BD64-0x00D0BD90
	[DoNotRename] // 0x003E0340-0x003E0350
	public void GetDailyLeaderBoard(int date = 0 /* Metadata: 0x0021C8A9 */, int pg = 0 /* Metadata: 0x0021C8AD */); // 0x00D0BE04-0x00D0BE30
	[DoNotRename] // 0x003E0350-0x003E0360
	public void RefreshService(); // 0x00D0BEE0-0x00D0BF2C
	[IteratorStateMachine] // 0x003E0360-0x003E03C4
	private IEnumerator LeaderBoardServiceCall(); // 0x00D0BD90-0x00D0BE04
	[IteratorStateMachine] // 0x003E03C4-0x003E0428
	private IEnumerator UserHealthServiceCall(bool st); // 0x00D0BCC8-0x00D0BD64
	[IteratorStateMachine] // 0x003E0428-0x003E048C
	private IEnumerator DailyChallengeServiceCall(); // 0x00D0BF84-0x00D0BFF8
	[IteratorStateMachine] // 0x003E048C-0x003E04F0
	private IEnumerator UserLoginServiceCall(string mobile); // 0x00D0B9B4-0x00D0BA4C
	[IteratorStateMachine] // 0x003E04F0-0x003E0554
	private IEnumerator UserNameServiceCall(string name); // 0x00D0BA78-0x00D0BB10
	[IteratorStateMachine] // 0x003E0554-0x003E05B8
	private IEnumerator UserReNameServiceCall(string name); // 0x00D0BB3C-0x00D0BBD4
	[IteratorStateMachine] // 0x003E05B8-0x003E061C
	private IEnumerator EnterPinServiceCall(string code); // 0x00D0BC00-0x00D0BC98
	[IteratorStateMachine] // 0x003E061C-0x003E0680
	private IEnumerator GetDrawMegaPointsServiceCall(); // 0x00D0C0D4-0x00D0C148
	[IteratorStateMachine] // 0x003E0680-0x003E06E4
	private IEnumerator TestJason(); // 0x00D0C174-0x00D0C1E8
	private void CallServiceErrorDialog(ErrorCodes er, ServiceNames sn = ServiceNames.undefined /* Metadata: 0x0021C8B1 */); // 0x00D0C214-0x00D0CB80
	[IteratorStateMachine] // 0x003E06E4-0x003E0748
	private IEnumerator DailyLeaderBoardServiceCall(int date, int pg); // 0x00D0BE30-0x00D0BEE0
}

public class TestVal : MonoBehaviour // TypeDefIndex: 3625
{
	// Fields
	public UnityEngine.UI.Text LBL_0; // 0x18
	public UnityEngine.UI.Text LBL_1; // 0x20
	private int mShiftVal; // 0x28
	private int mRealVal; // 0x2C

	// Properties
	public int ShiftVal { get; set; } // 0x00D1B638-0x00D1B640 0x00D1B690-0x00D1B6B4
	public int RealVal { get; set; } // 0x00D1B704-0x00D1B70C 0x00D1B70C-0x00D1B714

	// Constructors
	public TestVal(); // 0x00D1B90C-0x00D1B914

	// Methods
	private int Shuffle(int x); // 0x00D1B6B4-0x00D1B704
	private int Unshuffle(int x); // 0x00D1B640-0x00D1B690
	private void Start(); // 0x00D1B714-0x00D1B728
	private void Update(); // 0x00D1B728-0x00D1B800
	public void IncVal(); // 0x00D1B800-0x00D1B90C
}

public class TuteManager : MonoBehaviour // TypeDefIndex: 3626
{
	// Fields
	public LerpMover lerp; // 0x18
	public UnityEngine.UI.Text Tute_TXT; // 0x20
	private int InstructionState; // 0x28
	private int I; // 0x2C
	private int C_t; // 0x30
	private float mSmoothStep; // 0x34

	// Constructors
	public TuteManager(); // 0x00C00228-0x00C00238

	// Methods
	private void OnEnable(); // 0x00BFFF54-0x00BFFFA0
	private void FixedUpdate(); // 0x00BFFFA0-0x00C00228
}

public class UIManager : MonoBehaviour // TypeDefIndex: 3627
{
	// Fields
	public Toggle tuteAR; // 0x18
	public UnityEngine.UI.Text LivesTxt; // 0x20
	private string m_Pin; // 0x28
	public GameObject PanelFin; // 0x30
	public GameObject ShareCharacterDialog; // 0x38
	public GameObject PanelLoading; // 0x40
	public GameObject MsgChaDialog; // 0x48
	public UnityEngine.UI.Text MsgChaTXT; // 0x50
	public GameObject BlackPanel; // 0x58
	public BuyCharacterEnable BuyingDialog; // 0x60
	public GameObject CloseButton; // 0x68
	public GameObject SettingsBtn; // 0x70
	public GameObject LeaderboardBtn; // 0x78
	public GameObject DailyLeaderboardBtn; // 0x80
	public GameObject ARGameButton; // 0x88
	public GameObject MegawasanaButton; // 0x90
	public GameObject ProfileBtn; // 0x98
	public GameObject BlockkerDialog; // 0xA0
	public UnityEngine.UI.Text BlockkerTXT; // 0xA8
	public GameObject EventSystemOB; // 0xB0
	private GameObject mCurrentDialog; // 0xB8
	private GameObject mCurrentPanel; // 0xC0
	public GameObject Panelpaly; // 0xC8
	public UnityEngine.UI.Text CoinCountLBL; // 0xD0
	public UnityEngine.UI.Text DiamondCountLBL; // 0xD8
	public string[] MsgList; // 0xE0
	private static UIManager mInstance; // 0x00
	public Font SinhalaFont; // 0xE8
	public Font EnglishFont; // 0xF0
	public Font TamilFont; // 0xF8
	public UnityEngine.UI.Text invaliedMobile; // 0x100
	public UnityEngine.UI.Text enterNickName; // 0x108
	public UnityEngine.UI.Text enterReNickName; // 0x110
	public Transform ob; // 0x118
	public Transform[] obAry; // 0x120
	private bool mIsMobileValied; // 0x128
	private bool mIsNameFilled; // 0x129
	private bool mIsReNameFilled; // 0x12A
	private string mMobileNumber; // 0x130
	private string mNickName; // 0x138
	private string mPinNumber; // 0x140
	private string mTempNickName; // 0x148
	public GameObject PanelEnterPin; // 0x150
	public UnityEngine.UI.Text PinText; // 0x158
	public GameObject PanelInit; // 0x160
	public GameObject PanelLanguage; // 0x168
	public GameObject PanelCharacterSelect; // 0x170
	public GameObject MsgDialog; // 0x178
	public UnityEngine.UI.Text MsgTXT; // 0x180
	public UnityEngine.UI.Image MultiplyBar; // 0x188
	public UnityEngine.UI.Image ShieldBar; // 0x190
	public UnityEngine.UI.Image MagnetBar; // 0x198
	public UnityEngine.UI.Image BoostBar; // 0x1A0
	private int mPanel_ID; // 0x1A8
	private ServicesManager mServicesmanager; // 0x1B0
	public static string GameMode; // 0x08
	private bool AR_Selected; // 0x1B8
	public GameObject ImageScreen; // 0x1C0
	public UnityEngine.UI.Image ImageScreenIm; // 0x1C8
	public Sprite ChandiS; // 0x1D0
	public Sprite DinS; // 0x1D8
	private bool mCharacter; // 0x1E0
	public GameObject LBImageScreen; // 0x1E8
	public UnityEngine.UI.Image CloseBtnImg; // 0x1F0
	public GameObject LBShareBtn; // 0x1F8
	private NativeShare nativeshare; // 0x200

	// Properties
	public static UIManager Instance { get; } // 0x00C00238-0x00C002A0 

	// Nested types
	private enum Ch_ID // TypeDefIndex: 3628
	{
		CHA = 0,
		DIN = 1,
		ROB = 2,
		SWG = 3
	}

	[CompilerGenerated] // 0x003DF4E0-0x003DF4F0
	private sealed class <SaveAndShare>d__122 : IEnumerator<object> // TypeDefIndex: 3629
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public UIManager <>4__this; // 0x20
		private string <screenShotPath>5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003E0D8C-0x003E0D9C */ get; } // 0x00C05568-0x00C05570 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003E0DAC-0x003E0DBC */ get; } // 0x00C055D8-0x00C055E0 

		// Constructors
		[DebuggerHidden] // 0x003E0D6C-0x003E0D7C
		public <SaveAndShare>d__122(int <>1__state); // 0x00C04AF0-0x00C04B1C

		// Methods
		[DebuggerHidden] // 0x003E0D7C-0x003E0D8C
		void IDisposable.Dispose(); // 0x00C05348-0x00C0534C
		private bool MoveNext(); // 0x00C0534C-0x00C05568
		[DebuggerHidden] // 0x003E0D9C-0x003E0DAC
		void IEnumerator.Reset(); // 0x00C05570-0x00C055D8
	}

	// Constructors
	public UIManager(); // 0x00C05284-0x00C052EC
	static UIManager(); // 0x00C052EC-0x00C05348

	// Methods
	private void Awake(); // 0x00C002A0-0x00C0071C
	private void Start(); // 0x00C00D14-0x00C00E18
	private void FillScoreMangerData(); // 0x00C0071C-0x00C00D14
	public void switchARTute(); // 0x00C00E18-0x00C00EE4
	[DoNotRename] // 0x003E0A68-0x003E0A78
	public void SelectCharacter(int i); // 0x00C00EE4-0x00C01048
	[DoNotRename] // 0x003E0A78-0x003E0A88
	public void InitialOpenOK(); // 0x00C01048-0x00C012FC
	[DoNotRename] // 0x003E0A88-0x003E0A98
	public void EnterNameOK(); // 0x00C012FC-0x00C014E8
	[DoNotRename] // 0x003E0A98-0x003E0AA8
	public void ValidateMobileNumber(string input); // 0x00C014E8-0x00C015D0
	[DoNotRename] // 0x003E0AA8-0x003E0AB8
	public void ValidateNickName(string input); // 0x00C015D0-0x00C017C4
	[DoNotRename] // 0x003E0AB8-0x003E0AC8
	public void OkButtonPin(); // 0x00C017C4-0x00C01864
	[DoNotRename] // 0x003E0AC8-0x003E0AD8
	public void ValidatePin(string input); // 0x00C01864-0x00C018E8
	[DoNotRename] // 0x003E0AD8-0x003E0AE8
	public void SelectCharacterPanelButton(bool AR); // 0x00C018E8-0x00C01A88
	[DoNotRename] // 0x003E0AE8-0x003E0AF8
	public void SelectCharacterPanelButtonAR(); // 0x00C01A88-0x00C01BCC
	[DoNotRename] // 0x003E0AF8-0x003E0B08
	public void CharacterPanelBack(); // 0x00C01BCC-0x00C01C94
	[DoNotRename] // 0x003E0B08-0x003E0B18
	public void CharacterPanelRest(); // 0x00C01C94-0x00C01D60
	[DoNotRename] // 0x003E0B18-0x003E0B28
	public void MultiplyBtn(); // 0x00C01D60-0x00C020E0
	public void ConvertDiamonds(); // 0x00C020E0-0x00C02248
	[DoNotRename] // 0x003E0B28-0x003E0B38
	public void ShieldBtn(); // 0x00C02248-0x00C025C8
	[DoNotRename] // 0x003E0B38-0x003E0B48
	public void MagnetBtn(); // 0x00C025C8-0x00C02948
	[DoNotRename] // 0x003E0B48-0x003E0B58
	public void BoostBtn(); // 0x00C02948-0x00C02CC8
	[DoNotRename] // 0x003E0B58-0x003E0B68
	public void SelectSinhala(bool select); // 0x00C02CC8-0x00C02E20
	[DoNotRename] // 0x003E0B68-0x003E0B78
	public void SelectEnglish(bool select); // 0x00C02E20-0x00C02F7C
	[DoNotRename] // 0x003E0B78-0x003E0B88
	public void SelectTamil(bool select); // 0x00C02F7C-0x00C030D8
	[DoNotRename] // 0x003E0B88-0x003E0B98
	public void PlayGame(); // 0x00C030D8-0x00C032D8
	private void LastPanel(); // 0x00C032D8-0x00C033B8
	[DoNotRename] // 0x003E0B98-0x003E0BA8
	public void PlayMain(); // 0x00C033B8-0x00C033F8
	[DoNotRename] // 0x003E0BA8-0x003E0BB8
	public void PlayAR_0(); // 0x00C033F8-0x00C03438
	[DoNotRename] // 0x003E0BB8-0x003E0BC8
	public void PlayAR_1(); // 0x00C03438-0x00C03478
	[DoNotRename] // 0x003E0BC8-0x003E0BD8
	public void EnablePanel(int i); // 0x00C03478-0x00C03480
	public void SaveValuesSettings(); // 0x00C03480-0x00C036C0
	[DoNotRename] // 0x003E0BD8-0x003E0BE8
	public void CallDialog(GameObject ob); // 0x00C038B4-0x00C039AC
	[DoNotRename] // 0x003E0BE8-0x003E0BF8
	public void CallBlock(); // 0x00C039AC-0x00C039E0
	[DoNotRename] // 0x003E0BF8-0x003E0C08
	public void CallPanel(GameObject ob); // 0x00C039E0-0x00C039E8
	private string Md5Sum(int val); // 0x00C036C0-0x00C038B4
	[DoNotRename] // 0x003E0C08-0x003E0C18
	public void CallBlockker(string Msg); // 0x00C039E8-0x00C03A74
	[DoNotRename] // 0x003E0C18-0x003E0C28
	public void SpendCoinsForCharacters_Click(int id, int coinCount = 10000 /* Metadata: 0x0021C8E9 */); // 0x00C03A74-0x00C03E74
	[DoNotRename] // 0x003E0C28-0x003E0C38
	public void ShareAndPlay(); // 0x00C03E74-0x00C03F0C
	[DoNotRename] // 0x003E0C38-0x003E0C48
	public void BurnMegaPointsForCharacters_Click(int id); // 0x00C03F0C-0x00C03F10
	[DoNotRename] // 0x003E0C48-0x003E0C58
	public void SpendCoinsForAbilities_Click(int id); // 0x00C03F10-0x00C03F44
	[DoNotRename] // 0x003E0C58-0x003E0C68
	public void BurnMegaPointsForAbilities_Click(int id); // 0x00C03F44-0x00C03F48
	[DoNotRename] // 0x003E0C68-0x003E0C78
	public void GetScratchPin(string pin); // 0x00C03F48-0x00C03F50
	[DoNotRename] // 0x003E0C78-0x003E0C88
	public void PayCharacterFormScratchCard(); // 0x00C03F50-0x00C03FB4
	[DoNotRename] // 0x003E0C88-0x003E0C98
	public void PayAbilitiesFormScratchCard(); // 0x00C03FB4-0x00C04018
	private void OnApplicationPause(bool pauseStatus); // 0x00C04018-0x00C04084
	private void ScheduleNotification(); // 0x00C04474-0x00C044EC
	private void Update(); // 0x00C044EC-0x00C04518
	[DoNotRename] // 0x003E0C98-0x003E0CA8
	public void AppClose(); // 0x00C04518-0x00C04520
	[DoNotRename] // 0x003E0CA8-0x003E0CB8
	public void ClearData(); // 0x00C04520-0x00C04540
	[DoNotRename] // 0x003E0CB8-0x003E0CC8
	public void Rename_Click(); // 0x00C04540-0x00C04708
	[DoNotRename] // 0x003E0CC8-0x003E0CD8
	public void ValidateReNickName(string input); // 0x00C04708-0x00C048FC
	private string Md5Sum(); // 0x00C04084-0x00C04474
	[DoNotRename] // 0x003E0CD8-0x003E0CE8
	public void CallNativeShare(); // 0x00C048FC-0x00C049E8
	[DoNotRename] // 0x003E0CE8-0x003E0CF8
	public void CallLB_NativeShare(); // 0x00C04A5C-0x00C04AF0
	[IteratorStateMachine] // 0x003E0CF8-0x003E0D5C
	private IEnumerator SaveAndShare(); // 0x00C049E8-0x00C04A5C
	private void InitFB(); // 0x00C04B1C-0x00C04B20
	private void OnInitComplete(); // 0x00C04B20-0x00C04B24
	private void OnHideUnity(bool isGameShown); // 0x00C04B24-0x00C04B28
	[DoNotRename] // 0x003E0D5C-0x003E0D6C
	public void Share(int characterID, string url = "" /* Metadata: 0x0021C8ED */); // 0x00C04B28-0x00C05284
}

public class HiScore : MonoBehaviour // TypeDefIndex: 3630
{
	// Fields
	public GameObject PanelLoading; // 0x18
	private static HiScore mInstance; // 0x00
	public Button SkipRewardAnimation; // 0x20
	public Font SinhalaFont; // 0x28
	public Font EnglishFont; // 0x30
	public Font TamilFont; // 0x38
	public GameObject PanelReward; // 0x40
	public GameObject PanelScore; // 0x48
	public UnityEngine.UI.Text RewardTXT; // 0x50
	public GameObject ShareButtonOB; // 0x58
	public GameObject PlayButtonOB; // 0x60
	public GameObject MenuButtonOB; // 0x68
	private NativeShare nativeshare; // 0x70

	// Properties
	public static HiScore Instance { get; } // 0x0044C354-0x0044C3A4 

	// Nested types
	[CompilerGenerated] // 0x003DF4F0-0x003DF500
	private sealed class <SaveAndShare>d__23 : IEnumerator<object> // TypeDefIndex: 3631
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public HiScore <>4__this; // 0x20
		private string <screenShotPath>5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003E0EC0-0x003E0ED0 */ get; } // 0x007F5C4C-0x007F5C54 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003E0EE0-0x003E0EF0 */ get; } // 0x007F5CBC-0x007F5CC4 

		// Constructors
		[DebuggerHidden] // 0x003E0EA0-0x003E0EB0
		public <SaveAndShare>d__23(int <>1__state); // 0x007F59D0-0x007F59FC

		// Methods
		[DebuggerHidden] // 0x003E0EB0-0x003E0EC0
		void IDisposable.Dispose(); // 0x007F59FC-0x007F5A00
		private bool MoveNext(); // 0x007F5A00-0x007F5C4C
		[DebuggerHidden] // 0x003E0ED0-0x003E0EE0
		void IEnumerator.Reset(); // 0x007F5C54-0x007F5CBC
	}

	// Constructors
	public HiScore(); // 0x0044D920-0x0044D988

	// Methods
	private void Awake(); // 0x0044C3A4-0x0044C414
	[DoNotRename] // 0x003E0DBC-0x003E0DCC
	public void Click_ShowScore(); // 0x0044C414-0x0044C4C4
	[DoNotRename] // 0x003E0DCC-0x003E0DDC
	public void Click_Skip(); // 0x0044C4C4-0x0044C4D0
	[DoNotRename] // 0x003E0DDC-0x003E0DEC
	public void Click_MainMenu(); // 0x0044C4D0-0x0044C510
	[DoNotRename] // 0x003E0DEC-0x003E0DFC
	public void ReplayGame(); // 0x0044C510-0x0044C5BC
	private void OnApplicationPause(bool pauseStatus); // 0x0044C5BC-0x0044C5C0
	private void ScheduleNotification(); // 0x0044C5C0-0x0044C638
	[DoNotRename] // 0x003E0DFC-0x003E0E0C
	public void CallNativeShare(); // 0x0044C638-0x0044C664
	[IteratorStateMachine] // 0x003E0E0C-0x003E0E70
	private IEnumerator SaveAndShare(); // 0x0044C664-0x0044C6D8
	private void InitFB(); // 0x0044C6D8-0x0044C6DC
	private void OnInitComplete(); // 0x0044C6DC-0x0044C6E0
	private void OnHideUnity(bool isGameShown); // 0x0044C6E4-0x0044C6E8
	[DoNotRename] // 0x003E0E70-0x003E0E80
	public void ShareDialog(); // 0x0044C6E0-0x0044C6E4
	private string Md5Sum(); // 0x0044C6E8-0x0044CAD8
	[DoNotRename] // 0x003E0E80-0x003E0E90
	public void ShareTest(); // 0x0044CAD8-0x0044D1FC
	[DoNotRename] // 0x003E0E90-0x003E0EA0
	public void ShareNative(); // 0x0044D1FC-0x0044D920
}

public class ScoreAnimator : MonoBehaviour // TypeDefIndex: 3632
{
	// Fields
	public UnityEngine.UI.Text[] LblAry; // 0x18
	public Animator p; // 0x20
	public int m_i; // 0x28
	private int m_index; // 0x2C
	private int m_AddVAl; // 0x30
	private int m_TotalVAL; // 0x34
	private int m_CurrentVAl; // 0x38
	public int HighS; // 0x3C

	// Constructors
	public ScoreAnimator(); // 0x00D09B14-0x00D09B1C

	// Methods
	private void Awake(); // 0x00D0933C-0x00D09504
	private void Start(); // 0x00D09654-0x00D096EC
	private void FixedUpdate(); // 0x00D096EC-0x00D09884
	private void UpdateVals(); // 0x00D09884-0x00D09A8C
	[DoNotRename] // 0x003E0EF0-0x003E0F00
	public void StartAnimation(); // 0x00D09B0C-0x00D09B14
}

public class StartRot : MonoBehaviour // TypeDefIndex: 3633
{
	// Constructors
	public StartRot(); // 0x00D1B5FC-0x00D1B604

	// Methods
	private void FixedUpdate(); // 0x00D1B58C-0x00D1B5FC
}

public class AnalyticsTool : MonoBehaviour // TypeDefIndex: 3634
{
	// Nested types
	[Serializable]
	[CompilerGenerated] // 0x003DF500-0x003DF510
	private sealed class <>c // TypeDefIndex: 3635
	{
		// Fields
		public static readonly <>c <>9; // 0x00
		public static InitDelegate <>9__0_0; // 0x08

		// Constructors
		static <>c(); // 0x00433B14-0x00433B78
		public <>c(); // 0x00433B78-0x00433B80

		// Methods
		internal void <Start>b__0_0(); // 0x00433B80-0x00433BE0
	}

	// Constructors
	public AnalyticsTool(); // 0x00433B0C-0x00433B14

	// Methods
	private void Start(); // 0x004336CC-0x0043392C
	public static void CallAnalyticsEvent(string category, string eventname); // 0x0043392C-0x00433B0C
}

public class AnimAct : MonoBehaviour // TypeDefIndex: 3636
{
	// Fields
	public int Gap; // 0x18
	private int speed; // 0x1C

	// Constructors
	public AnimAct(); // 0x00433E94-0x00433E9C

	// Methods
	public int configureAni(int id); // 0x00433BE0-0x00433C98
	private void OnEnable(); // 0x00433C98-0x00433D9C
	private void OnDisable(); // 0x00433D9C-0x00433E94
}

public class AudioManager : MonoBehaviour // TypeDefIndex: 3637
{
	// Fields
	public VolumeController volumeCon; // 0x18
	public AudioClip[] BG_ClipAry; // 0x20
	public AudioSource[] audio_SourceAry; // 0x28
	private int mHitGoodSourceTop; // 0x30
	private int mHitBadSourceTop; // 0x34
	private int mInputSourceTop; // 0x38
	private int mHitCoinTop; // 0x3C
	private bool mSFX_off; // 0x40
	private bool mBG_off; // 0x41

	// Constructors
	public AudioManager(); // 0x00434864-0x0043486C

	// Methods
	private void Awake(); // 0x00433E9C-0x00433F50
	[DoNotRename] // 0x003E0F00-0x003E0F10
	public void ChangeBgClip(int level); // 0x00433F50-0x004340F0
	public void PlayHitObstacle(); // 0x004340F0-0x00434184
	public void PlayHitReward(); // 0x0042EA74-0x0042EB08
	public void PlayHitPositivePortal(); // 0x00434184-0x004341EC
	public void PlayHitNegativePortal(); // 0x004341EC-0x00434254
	[DoNotRename] // 0x003E0F10-0x003E0F20
	public void PlayInput(); // 0x00434254-0x004342E8
	[DoNotRename] // 0x003E0F20-0x003E0F30
	public void PlayButtonInput(); // 0x004342E8-0x004343A4
	[DoNotRename] // 0x003E0F30-0x003E0F40
	public void BG_turnOn(bool state); // 0x004343A4-0x0043444C
	[DoNotRename] // 0x003E0F40-0x003E0F50
	public void SFX_turnOn(bool state); // 0x0043444C-0x004344D0
	[DoNotRename] // 0x003E0F50-0x003E0F60
	public void Help_turnOn(bool state); // 0x004344D0-0x00434540
	[DoNotRename] // 0x003E0F60-0x003E0F70
	public void Help_turnOnAR(bool state); // 0x00434540-0x004345B0
	public void Play_Jump(); // 0x0042E218-0x0042E2D4
	public void Play_Bomb(); // 0x004345B0-0x0043466C
	public void Play_Thud(); // 0x0042ECBC-0x0042ED78
	public void Play_Slide(); // 0x0042D624-0x0042D6E0
	public void PowerUp_Hit(); // 0x0043466C-0x00434700
	public void Coin_Hit(); // 0x00434700-0x00434794
	public void Spin_Hit(); // 0x00434794-0x004347FC
	public void PlayDailyChallenge(); // 0x0042D7BC-0x0042D824
	public void PlayNogifts(); // 0x004347FC-0x00434864
}

public class AutoRotatePortal : MonoBehaviour // TypeDefIndex: 3638
{
	// Fields
	public LerpMover lerpMover; // 0x18

	// Constructors
	public AutoRotatePortal(); // 0x004348F0-0x004348F8

	// Methods
	private void OnTriggerEnter(Collider other); // 0x0043486C-0x004348F0
}

public class BlockCall : MonoBehaviour // TypeDefIndex: 3639
{
	// Constructors
	public BlockCall(); // 0x00434970-0x00434978

	// Methods
	private void OnEnable(); // 0x004348F8-0x00434970
}

public class Bomb : MonoBehaviour // TypeDefIndex: 3640
{
	// Fields
	public GameObject particle; // 0x18
	private int t; // 0x20
	private bool die; // 0x24
	private GameObject audioManager; // 0x28
	private AudioManager man; // 0x30

	// Nested types
	[CompilerGenerated] // 0x003DF510-0x003DF520
	private sealed class <bomb>d__6 : IEnumerator<object> // TypeDefIndex: 3641
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public Bomb <>4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003E0FF4-0x003E1004 */ get; } // 0x00434DA8-0x00434DB0 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003E1014-0x003E1024 */ get; } // 0x00434E18-0x00434E20 

		// Constructors
		[DebuggerHidden] // 0x003E0FD4-0x003E0FE4
		public <bomb>d__6(int <>1__state); // 0x00434BE0-0x00434C0C

		// Methods
		[DebuggerHidden] // 0x003E0FE4-0x003E0FF4
		void IDisposable.Dispose(); // 0x00434CA4-0x00434CA8
		private bool MoveNext(); // 0x00434CA8-0x00434DA8
		[DebuggerHidden] // 0x003E1004-0x003E1014
		void IEnumerator.Reset(); // 0x00434DB0-0x00434E18
	}

	// Constructors
	public Bomb(); // 0x00434C9C-0x00434CA4

	// Methods
	private void OnTriggerEnter(Collider collisionInfo); // 0x00434978-0x00434B6C
	[IteratorStateMachine] // 0x003E0F70-0x003E0FD4
	public IEnumerator bomb(); // 0x00434B6C-0x00434BE0
	private void Start(); // 0x00434C0C-0x00434C98
	private void FixedUpdate(); // 0x00434C98-0x00434C9C
}

public class ButtonEffect : MonoBehaviour // TypeDefIndex: 3642
{
	// Fields
	private float mSmoothStep; // 0x18
	private Color mBaseColor; // 0x1C
	public Button button; // 0x30
	public UnityEngine.UI.Image image; // 0x38
	private float mTimeLimit; // 0x40

	// Constructors
	public ButtonEffect(); // 0x004350DC-0x004350E4

	// Methods
	private void OnEnable(); // 0x00434E20-0x00434F08
	private void OnDisable(); // 0x00434F08-0x00434F88
	private void Update(); // 0x00434F88-0x004350DC
}

public class ButtonEffectUnScaled : MonoBehaviour // TypeDefIndex: 3643
{
	// Fields
	private float mSmoothStep; // 0x18
	private Color mBaseColor; // 0x1C
	public Button button; // 0x30
	public UnityEngine.UI.Image image; // 0x38
	private float mTimeLimit; // 0x40

	// Constructors
	public ButtonEffectUnScaled(); // 0x00435400-0x00435408

	// Methods
	private void OnEnable(); // 0x004350E4-0x004351A4
	private void OnDisable(); // 0x004351A4-0x004351FC
	private void Update(); // 0x004351FC-0x00435400
}

[ExecuteInEditMode] // 0x003DF520-0x003DF594
[RequireComponent] // 0x003DF520-0x003DF594
public class CameraFog : MonoBehaviour // TypeDefIndex: 3644
{
	// Fields
	public bool Enabled; // 0x18
	public float StartDistance; // 0x1C
	public float EndDistance; // 0x20
	public FogMode Mode; // 0x24
	public float Density; // 0x28
	public Color Color; // 0x2C
	private float _startDistance; // 0x3C
	private float _endDistance; // 0x40
	private FogMode _mode; // 0x44
	private float _density; // 0x48
	private Color _color; // 0x4C
	private bool _enabled; // 0x5C

	// Constructors
	public CameraFog(); // 0x0043BBC0-0x0043BBC8

	// Methods
	private void OnPreRender(); // 0x0043BAA4-0x0043BB5C
	private void OnPostRender(); // 0x0043BB5C-0x0043BBC0
}

public class Coins : MonoBehaviour // TypeDefIndex: 3645
{
	// Constructors
	public Coins(); // 0x0043CDA0-0x0043CDA8

	// Methods
	private void OnEnable(); // 0x0043CC10-0x0043CCE0
	private void FixedUpdate(); // 0x0043CD30-0x0043CDA0
}

public class CoinsRef : MonoBehaviour // TypeDefIndex: 3646
{
	// Fields
	private static CoinsRef mInstance; // 0x00

	// Properties
	public static CoinsRef Instance { get; } // 0x0043CCE0-0x0043CD30 

	// Constructors
	public CoinsRef(); // 0x0043CEE4-0x0043CEEC

	// Methods
	private void Awake(); // 0x0043CE20-0x0043CE74
	private void FixedUpdate(); // 0x0043CE74-0x0043CEE4
}

public class CurveDrawer : MonoBehaviour // TypeDefIndex: 3647
{
	// Fields
	public GameObject Tute; // 0x18
	public UnityEngine.UI.Text MUL_LBL; // 0x20
	public float Debug_Gap; // 0x28
	public Transform PointTree; // 0x30
	private List<Vector2> mP_V; // 0x38
	private Vector3 mPrevPo; // 0x40
	private Vector3 mNextPo; // 0x4C
	private List<Vector2> P_V; // 0x58
	public int StepLimit; // 0x60
	private int StepsCount; // 0x64
	private float H0; // 0x68
	private float H1; // 0x6C
	private float H2; // 0x70
	private float H3; // 0x74
	private float t1; // 0x78
	private float t2; // 0x7C
	private float t3; // 0x80
	private Vector2 mP0; // 0x84
	private Vector2 mP1; // 0x8C
	private Vector2 mV0; // 0x94
	private Vector2 mV1; // 0x9C
	private int CurveID; // 0xA4
	private bool Run; // 0xA8
	private Vector2 mTempPrevPoint; // 0xAC
	private int mPointCount; // 0xB4
	public LerpMover mLerpTest; // 0xB8
	public TextEffect textEffect; // 0xC0
	public StartScript startScript; // 0xC8
	public Transform[] CharacterAry; // 0xD0
	public SkinnedMeshRenderer[] CharacterRendererAry; // 0xD8

	// Constructors
	public CurveDrawer(); // 0x0043F250-0x0043F258

	// Methods
	private void Awake(); // 0x0043E344-0x0043E5A8
	private void Start(); // 0x0043E5A8-0x0043E6C4
	private void FillData(); // 0x0043E6C4-0x0043EEA4
	private void FillCurveData(); // 0x0043EEA4-0x0043F220
	[DoNotRename] // 0x003E1024-0x003E1034
	public void StartRuninButton(); // 0x0043F220-0x0043F250
}

public class DyanmicObs : MonoBehaviour // TypeDefIndex: 3648
{
	// Fields
	public Transform[] ob_Ary; // 0x18
	public TrackAssetManager trackAssetManager; // 0x20
	private int mOb_Timer; // 0x28
	private int i; // 0x2C
	private bool isStaticOB; // 0x30

	// Constructors
	public DyanmicObs(); // 0x0043FB88-0x0043FB90

	// Methods
	private void OnEnable(); // 0x0043F79C-0x0043F7D8
	private void FixedUpdate(); // 0x0043F7D8-0x0043FB88
}

public class DynamicPortal : MonoBehaviour // TypeDefIndex: 3649
{
	// Fields
	public int ID; // 0x18

	// Constructors
	public DynamicPortal(); // 0x0043FB90-0x0043FB98
}

public class Cipher // TypeDefIndex: 3650
{
	// Fields
	public static string DEFAULT_NETWORKHASH; // 0x00
	public static string DEFAULT_IV_128; // 0x08
	private const string KEY_FACTORY_ALGORITHM = "RSA"; // Metadata: 0x0021C901
	private const string SIGNATURE_ALGORITHM = "Sha256WithRSA"; // Metadata: 0x0021C908
	private const string PUBLIC_KEY_STRING = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAytwW/1jarl9pOzhWLYn4rLO5TQAY3FLj/smhQRqyQTU2Kn8+Xqg6d5+392dlFziZUFhBivmAJKuf+i5nyE3bxfsgXwN5auea1sanDO0AsKT62Cqb9aUzYObOhkcObK2QHsW2WP7e9pQvrg+J+DVvr+JXwH60xsjFSSte5gq+zCKtlhceSEZ6OTghufGgNGtASODKsVtiu/iFvCkH6bVJ3JYXsfSsy7Oj1/Ov7cbrCgUM49Qhv0r68DvpAiBSSr715gkWcZcWoJ54ZKWWsaBvrIA2Y+qHP8FwqPX8m5Uh0dbh8fznXprjdbtQUPPPR6z6TIc+ESI4K/D/AyJigtsuOwIDAQAB"; // Metadata: 0x0021C919

	// Constructors
	static Cipher(); // 0x0043BBC8-0x0043BC3C
	public Cipher(); // 0x0043CC08-0x0043CC10

	// Methods
	public static string EncryptRJ128(string prm_key, string prm_iv, string prm_text_to_encrypt); // 0x0043BC3C-0x0043BCEC
	public static string EncryptRJ128Byte(string prm_key, string prm_iv, byte[] toEncrypt); // 0x0043BCEC-0x0043BF78
	public static string DecryptRJ128(string prm_key, string prm_iv, string prm_text_to_decrypt); // 0x0043BF78-0x0043C038
	public static byte[] DecryptRJ128Byte(string prm_key, string prm_iv, string prm_text_to_decrypt); // 0x0043C038-0x0043C2D0
	public static bool verify(string signedData, string base64Signature); // 0x0043C2D0-0x0043C410
	public static byte[] SHA256Hash(string text); // 0x0043C9F8-0x0043CB3C
	private static RSACryptoServiceProvider DecodeX509PublicKey(byte[] x509key); // 0x0043C410-0x0043C9F8
	private static bool CompareBytearrays(byte[] a, byte[] b); // 0x0043CB3C-0x0043CC08
}

public class CryptoPrefs // TypeDefIndex: 3651
{
	// Fields
	private static string sKEY; // 0x00
	private static string sIV; // 0x08

	// Constructors
	public CryptoPrefs(); // 0x0043E2C8-0x0043E2D0
	static CryptoPrefs(); // 0x0043E2D0-0x0043E344

	// Methods
	public static void SetInt(string key, int val); // 0x0043D6B4-0x0043D74C
	public static int GetInt(string key, int defaultValue = 0 /* Metadata: 0x0021CAA5 */); // 0x0043DB84-0x0043DC2C
	public static void SetFloat(string key, float val); // 0x0043DD24-0x0043DDBC
	public static float GetFloat(string key, float defaultValue = 0f /* Metadata: 0x0021CAA9 */); // 0x0043DDBC-0x0043DE64
	public static void SetString(string key, string val); // 0x0043DE64-0x0043DEF0
	public static string GetString(string key, string defaultValue = "" /* Metadata: 0x0021CAAD */); // 0x0043DC2C-0x0043DD24
	public static bool HasKey(string key); // 0x0043E1E0-0x0043E24C
	public static void DeleteKey(string key); // 0x0043E24C-0x0043E2B8
	public static void DeleteAll(); // 0x0043E2B8-0x0043E2C0
	public static void Save(); // 0x0043E2C0-0x0043E2C8
	private static string Decrypt(string encString); // 0x0043DEF0-0x0043E1E0
	private static string Encrypt(string rawString); // 0x0043D8BC-0x0043DB84
	private static string GetHash(string key); // 0x0043D74C-0x0043D8BC
}

public class SampleSha256 : MonoBehaviour // TypeDefIndex: 3652
{
	// Constructors
	public SampleSha256(); // 0x00D09334-0x00D0933C

	// Methods
	private void Start(); // 0x00D09050-0x00D090E8
	private void Update(); // 0x00D09330-0x00D09334
	private static string ComputeSha256Hash(string rawData); // 0x00D090E8-0x00D09330
}

public class XorFloat // TypeDefIndex: 3653
{
	// Fields
	private byte[] key; // 0x10
	private byte[] bytes; // 0x18

	// Properties
	public float value { get; set; } // 0x00C07038-0x00C0703C 0x00C072D8-0x00C072DC

	// Constructors
	public XorFloat(); // 0x00C06D0C-0x00C06D14
	public XorFloat(float value); // 0x00C06D14-0x00C06DA4

	// Methods
	private void GenerateKey(); // 0x00C06DA4-0x00C06E20
	private void Xor(float x); // 0x00C06E20-0x00C07038
	private float Xor(); // 0x00C0703C-0x00C072D8
	public static implicit operator float(XorFloat xor); // 0x00C072DC-0x00C072EC
	public static implicit operator XorFloat(float val); // 0x00C072EC-0x00C07354
	public override string ToString(); // 0x00C07354-0x00C07380
	public string ToString(string format); // 0x00C07380-0x00C073B4
	public string ToString(IFormatProvider provider); // 0x00C073B4-0x00C073E8
	public string ToString(string format, IFormatProvider provider); // 0x00C073E8-0x00C0742C
}

public class XorInt // TypeDefIndex: 3654
{
	// Fields
	private int key; // 0x10
	[CompilerGenerated] // 0x003DF8B0-0x003DF8C0
	private int <rawValue>k__BackingField; // 0x14

	// Properties
	public int rawValue { [CompilerGenerated] /* 0x003E1034-0x003E1044 */ get; [CompilerGenerated] /* 0x003E1044-0x003E1054 */ private set; } // 0x00C07584-0x00C0758C 0x00C0757C-0x00C07584
	public int value { get; set; } // 0x00C0758C-0x00C07598 0x00C07598-0x00C075A8

	// Constructors
	public XorInt(); // 0x00C0742C-0x00C07460
	public XorInt(int value); // 0x00C07460-0x00C0749C

	// Methods
	private void GenerateKey(); // 0x00C0749C-0x00C07570
	private int Xor(int x); // 0x00C07570-0x00C0757C
	public static implicit operator int(XorInt xor); // 0x00C075A8-0x00C075B8
	public static implicit operator XorInt(int val); // 0x00C075B8-0x00C0762C
	public static XorInt operator ++(XorInt val); // 0x00C0762C-0x00C07648
	public static XorInt operator --(XorInt val); // 0x00C07648-0x00C07664
	public override string ToString(); // 0x00C07664-0x00C07694
	public string ToString(string format); // 0x00C07694-0x00C076C4
	public string ToString(IFormatProvider provider); // 0x00C076C4-0x00C076F4
	public string ToString(string format, IFormatProvider provider); // 0x00C076F4-0x00C07724
}

public class FacebookManager : MonoBehaviour // TypeDefIndex: 3655
{
	// Nested types
	[Serializable]
	[CompilerGenerated] // 0x003DF594-0x003DF5A4
	private sealed class <>c // TypeDefIndex: 3656
	{
		// Fields
		public static readonly <>c <>9; // 0x00
		public static InitDelegate <>9__0_0; // 0x08
		public static InitDelegate <>9__1_0; // 0x10

		// Constructors
		static <>c(); // 0x00447E98-0x00447EFC
		public <>c(); // 0x00447EFC-0x00447F04

		// Methods
		internal void <Awake>b__0_0(); // 0x00447F04-0x00447F80
		internal void <OnApplicationPause>b__1_0(); // 0x00447F80-0x00447FFC
	}

	// Constructors
	public FacebookManager(); // 0x00447E90-0x00447E98

	// Methods
	private void Awake(); // 0x00447BA8-0x00447D10
	private void OnApplicationPause(bool pauseStatus); // 0x00447D10-0x00447E90
}

public class FPSDisplay : MonoBehaviour // TypeDefIndex: 3657
{
	// Fields
	public UnityEngine.UI.Text FPS_LBL; // 0x18
	public float updateInterval; // 0x20
	private float accum; // 0x24
	private int frames; // 0x28
	private float timeleft; // 0x2C

	// Constructors
	public FPSDisplay(); // 0x00440C74-0x00440C84

	// Methods
	private void Start(); // 0x00440B54-0x00440B60
	private void Update(); // 0x00440B60-0x00440C74
}

public class Glow : MonoBehaviour // TypeDefIndex: 3658
{
	// Fields
	public Transform CamT; // 0x18

	// Constructors
	public Glow(); // 0x0044BAD0-0x0044BAD8

	// Methods
	private void Update(); // 0x0044B990-0x0044BAD0
}

public class GravityEffect : MonoBehaviour // TypeDefIndex: 3659
{
	// Fields
	private Vector2 mCenter; // 0x18
	private float mRadius; // 0x20
	public float K; // 0x24

	// Constructors
	public GravityEffect(); // 0x0044C2C4-0x0044C2CC

	// Methods
	private void Start(); // 0x0044C0A4-0x0044C160
	public Vector2 EffectPoints(Vector2 Po); // 0x0044C160-0x0044C2C4
}

public class IllusionObs : MonoBehaviour // TypeDefIndex: 3660
{
	// Fields
	public Transform[] ob_Ary; // 0x18
	public int Limit; // 0x20
	private int ind; // 0x24
	private int jth; // 0x28

	// Constructors
	public IllusionObs(); // 0x007F6124-0x007F612C

	// Methods
	private void OnEnable(); // 0x007F5CC4-0x007F5EAC
	private void OnDisable(); // 0x007F5EAC-0x007F6124
}

public enum GiftIDs // TypeDefIndex: 3661
{
	DATA = 0,
	MAGNET = 1,
	SHIELD = 2,
	COINS = 3,
	BOOST = 4
}

public class InputManager : MonoBehaviour // TypeDefIndex: 3662
{
	// Fields
	public Goal GoalTxt; // 0x18
	public GameObject reviveLBL; // 0x20
	public UnityEngine.UI.Text reviveCoutShowTxt; // 0x28
	public GameObject PanelDrawpointDialog; // 0x30
	public GameObject PanelEnterPinDialog; // 0x38
	public GameObject PanelEnterPackDialog; // 0x40
	public UnityEngine.UI.Text RevivePointsTxt; // 0x48
	public int Got_Reward_ID; // 0x50
	public GameObject RevivePanel; // 0x58
	public UnityEngine.UI.Text ReveivTxt; // 0x60
	public UnityEngine.UI.Text CoinLBL; // 0x68
	public Button PackageButton; // 0x70
	public Button ScratchCardButton; // 0x78
	private string m_PinNumber; // 0x80
	public GameObject LoadingAnimation; // 0x88
	public GameObject LoadingPanel; // 0x90
	public int HasAtmGift; // 0x98
	public GiftIDs ID_Gift; // 0x9C
	public CountDown countDown; // 0xA0
	private string mPlay_ID; // 0xA8
	private string mReward_Nonce; // 0xB0
	private string mToken; // 0xB8
	private string Revivals; // 0xC0
	private const int MaxRevivals = 2; // Metadata: 0x0021CAC9
	public string URL_TXT; // 0xC8
	public string Debug_URL_TXT; // 0xD0
	public GameObject ServiceErrorDialog; // 0xD8
	public UnityEngine.UI.Text ServiceErrorMsgTXT; // 0xE0
	public GameObject MsgDialog; // 0xE8
	public UnityEngine.UI.Text MsgTXT; // 0xF0
	public bool lockInput; // 0xF8
	public Toggle SFX_BT; // 0x100
	public Toggle MUSIC_BT; // 0x108
	public UnityEngine.UI.Text text; // 0x110
	public LerpMover Lerp; // 0x118
	public TextureAnimator textureAnimator; // 0x120
	public AudioManager audioManager; // 0x128
	public ButtonEffect AdPlayButton; // 0x130
	public ButtonEffect playButton; // 0x138
	public ButtonEffect pauseButton; // 0x140
	public ButtonEffect settingsButton; // 0x148
	public ButtonEffect shareButton; // 0x150
	private int mTick; // 0x158
	private Vector2 mScreenPo; // 0x15C
	private Vector2 mBeginScreenPo; // 0x164
	private int X_Mul; // 0x16C
	private int Y_Mul; // 0x170
	private bool mLeft; // 0x174
	private bool mRight; // 0x175
	private bool mUp; // 0x176
	private bool mPlay; // 0x177
	private float mNewAcc_X; // 0x178
	private bool mTouchSenses; // 0x17C
	private bool mJumpedlastTime; // 0x17D
	private int mMoveTicks; // 0x180
	private int mServiceID; // 0x184
	private ServiceNames mSerNm; // 0x188
	private int mPackageValue; // 0x18C
	private bool mHasLiftFinger; // 0x190
	public bool validationEnabled; // 0x191
	public GameObject ShareButtonOB; // 0x198
	public GameObject RunButtonOB; // 0x1A0
	private NativeShare nativeshare; // 0x1A8
	private RevType revType; // 0x1B0

	// Nested types
	private enum ErrorCodes // TypeDefIndex: 3663
	{
		Network = 0,
		Worng = 1,
		noCoins = 2,
		noDrawpoints = 3,
		noMoney = 4,
		badPin = 5,
		maxrevives = 6
	}

	private enum ServiceNames // TypeDefIndex: 3664
	{
		undefined = 0,
		StartService = 1
	}

	[Serializable]
	private struct FromJsonOBStart // TypeDefIndex: 3665
	{
		// Fields
		public string play_session; // 0x00
	}

	[Serializable]
	private struct FromJsonOBEnd // TypeDefIndex: 3666
	{
		// Fields
		public int status; // 0x00
		public string error; // 0x08
		public ResS response; // 0x10

		// Nested types
		[Serializable]
		public struct ResS // TypeDefIndex: 3667
		{
			// Fields
			public string msg; // 0x00
		}
	}

	[Serializable]
	private struct FromJsonOBDraw // TypeDefIndex: 3668
	{
		// Fields
		public int multiplier; // 0x00
	}

	[Serializable]
	private struct FromJsonOBAddPack // TypeDefIndex: 3669
	{
		// Fields
		public int multiplier; // 0x00
		public string signature; // 0x08
	}

	[Serializable]
	private struct FromJsonOBRewardHit // TypeDefIndex: 3670
	{
		// Fields
		public string type; // 0x00
		public int size; // 0x08
	}

	[Serializable]
	private struct FromJsonOBNonceRequest // TypeDefIndex: 3671
	{
		// Fields
		public string nonce; // 0x00
	}

	private enum RevType // TypeDefIndex: 3672
	{
		ScratchCard = 0,
		DataPack = 1,
		DrawPoints = 2
	}

	[CompilerGenerated] // 0x003DF5A4-0x003DF5B4
	private sealed class <StartServiceCall>d__99 : IEnumerator<object> // TypeDefIndex: 3673
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public InputManager <>4__this; // 0x20
		private UnityWebRequest <w>5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003E16AC-0x003E16BC */ get; } // 0x0080261C-0x00802624 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003E16CC-0x003E16DC */ get; } // 0x0080268C-0x008029C8 

		// Constructors
		[DebuggerHidden] // 0x003E168C-0x003E169C
		public <StartServiceCall>d__99(int <>1__state); // 0x007FB558-0x007FB584

		// Methods
		[DebuggerHidden] // 0x003E169C-0x003E16AC
		void IDisposable.Dispose(); // 0x00802124-0x00802128
		private bool MoveNext(); // 0x00802128-0x0080261C
		[DebuggerHidden] // 0x003E16BC-0x003E16CC
		void IEnumerator.Reset(); // 0x00802624-0x0080268C
	}

	[CompilerGenerated] // 0x003DF5B4-0x003DF5C4
	private sealed class <EndServiceCall>d__101 : IEnumerator<object> // TypeDefIndex: 3674
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public InputManager <>4__this; // 0x20
		public int level; // 0x28
		private UnityWebRequest <w>5__2; // 0x30

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003E16FC-0x003E170C */ get; } // 0x007FFC24-0x007FFC2C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003E171C-0x003E172C */ get; } // 0x007FFC94-0x007FFC9C 

		// Constructors
		[DebuggerHidden] // 0x003E16DC-0x003E16EC
		public <EndServiceCall>d__101(int <>1__state); // 0x007FB584-0x007FB5B0

		// Methods
		[DebuggerHidden] // 0x003E16EC-0x003E16FC
		void IDisposable.Dispose(); // 0x007FF714-0x007FF718
		private bool MoveNext(); // 0x007FF718-0x007FFC24
		[DebuggerHidden] // 0x003E170C-0x003E171C
		void IEnumerator.Reset(); // 0x007FFC2C-0x007FFC94
	}

	[CompilerGenerated] // 0x003DF5C4-0x003DF5D4
	private sealed class <BurnMegaDrawPointService>d__103 : IEnumerator<object> // TypeDefIndex: 3675
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public InputManager <>4__this; // 0x20
		private UnityWebRequest <w>5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003E174C-0x003E175C */ get; } // 0x007FF0D0-0x007FF0D8 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003E176C-0x003E177C */ get; } // 0x007FF140-0x007FF148 

		// Constructors
		[DebuggerHidden] // 0x003E172C-0x003E173C
		public <BurnMegaDrawPointService>d__103(int <>1__state); // 0x007FB5B0-0x007FB5DC

		// Methods
		[DebuggerHidden] // 0x003E173C-0x003E174C
		void IDisposable.Dispose(); // 0x007FEBA0-0x007FEBA4
		private bool MoveNext(); // 0x007FEBA4-0x007FF0D0
		[DebuggerHidden] // 0x003E175C-0x003E176C
		void IEnumerator.Reset(); // 0x007FF0D8-0x007FF140
	}

	[CompilerGenerated] // 0x003DF5D4-0x003DF5E4
	private sealed class <BurnCoinsService>d__104 : IEnumerator<object> // TypeDefIndex: 3676
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public InputManager <>4__this; // 0x20
		private UnityWebRequest <w>5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003E179C-0x003E17AC */ get; } // 0x007FEB28-0x007FEB30 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003E17BC-0x003E17CC */ get; } // 0x007FEB98-0x007FEBA0 

		// Constructors
		[DebuggerHidden] // 0x003E177C-0x003E178C
		public <BurnCoinsService>d__104(int <>1__state); // 0x007FB5DC-0x007FB608

		// Methods
		[DebuggerHidden] // 0x003E178C-0x003E179C
		void IDisposable.Dispose(); // 0x007FE7C4-0x007FE7C8
		private bool MoveNext(); // 0x007FE7C8-0x007FEB28
		[DebuggerHidden] // 0x003E17AC-0x003E17BC
		void IEnumerator.Reset(); // 0x007FEB30-0x007FEB98
	}

	[CompilerGenerated] // 0x003DF5E4-0x003DF5F4
	private sealed class <RechargeServiceCall>d__106 : IEnumerator<object> // TypeDefIndex: 3677
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public InputManager <>4__this; // 0x20
		public string pin; // 0x28
		private string <timestamp>5__2; // 0x30
		private UnityWebRequest <w>5__3; // 0x38

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003E17EC-0x003E17FC */ get; } // 0x008016B8-0x008016C0 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003E180C-0x003E181C */ get; } // 0x00801728-0x00801730 

		// Constructors
		[DebuggerHidden] // 0x003E17CC-0x003E17DC
		public <RechargeServiceCall>d__106(int <>1__state); // 0x007FB608-0x007FB634

		// Methods
		[DebuggerHidden] // 0x003E17DC-0x003E17EC
		void IDisposable.Dispose(); // 0x00801054-0x00801058
		private bool MoveNext(); // 0x00801058-0x008016B8
		[DebuggerHidden] // 0x003E17FC-0x003E180C
		void IEnumerator.Reset(); // 0x008016C0-0x00801728
	}

	[CompilerGenerated] // 0x003DF5F4-0x003DF604
	private sealed class <AddPackServiceCall>d__107 : IEnumerator<object> // TypeDefIndex: 3678
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public InputManager <>4__this; // 0x20
		public int package; // 0x28
		private string <timestamp>5__2; // 0x30
		private UnityWebRequest <w>5__3; // 0x38

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003E183C-0x003E184C */ get; } // 0x007FE74C-0x007FE754 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003E185C-0x003E186C */ get; } // 0x007FE7BC-0x007FE7C4 

		// Constructors
		[DebuggerHidden] // 0x003E181C-0x003E182C
		public <AddPackServiceCall>d__107(int <>1__state); // 0x007FB634-0x007FB660

		// Methods
		[DebuggerHidden] // 0x003E182C-0x003E183C
		void IDisposable.Dispose(); // 0x007FE0C4-0x007FE0C8
		private bool MoveNext(); // 0x007FE0C8-0x007FE74C
		[DebuggerHidden] // 0x003E184C-0x003E185C
		void IEnumerator.Reset(); // 0x007FE754-0x007FE7BC
	}

	[CompilerGenerated] // 0x003DF604-0x003DF614
	private sealed class <GetNonceforRedeem>d__112 : IEnumerator<object> // TypeDefIndex: 3679
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public InputManager <>4__this; // 0x20
		private UnityWebRequest <w>5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003E188C-0x003E189C */ get; } // 0x007FFFDC-0x007FFFE4 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003E18AC-0x003E18BC */ get; } // 0x0080104C-0x00801054 

		// Constructors
		[DebuggerHidden] // 0x003E186C-0x003E187C
		public <GetNonceforRedeem>d__112(int <>1__state); // 0x007FBA50-0x007FBA7C

		// Methods
		[DebuggerHidden] // 0x003E187C-0x003E188C
		void IDisposable.Dispose(); // 0x007FFC9C-0x007FFCA0
		private bool MoveNext(); // 0x007FFCA0-0x007FFFDC
		[DebuggerHidden] // 0x003E189C-0x003E18AC
		void IEnumerator.Reset(); // 0x007FFFE4-0x0080104C
	}

	[CompilerGenerated] // 0x003DF614-0x003DF624
	private sealed class <RewardHitServiceCall>d__113 : IEnumerator<object> // TypeDefIndex: 3680
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public InputManager <>4__this; // 0x20
		private UnityWebRequest <w>5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003E18DC-0x003E18EC */ get; } // 0x00801E24-0x00801E2C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003E18FC-0x003E190C */ get; } // 0x00801E94-0x00801E9C 

		// Constructors
		[DebuggerHidden] // 0x003E18BC-0x003E18CC
		public <RewardHitServiceCall>d__113(int <>1__state); // 0x007FBAF0-0x007FBB1C

		// Methods
		[DebuggerHidden] // 0x003E18CC-0x003E18DC
		void IDisposable.Dispose(); // 0x00801730-0x00801734
		private bool MoveNext(); // 0x00801734-0x00801E24
		[DebuggerHidden] // 0x003E18EC-0x003E18FC
		void IEnumerator.Reset(); // 0x00801E2C-0x00801E94
	}

	[CompilerGenerated] // 0x003DF624-0x003DF634
	private sealed class <DailyChallegeCompleteServiceCall>d__115 : IEnumerator<object> // TypeDefIndex: 3681
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public InputManager <>4__this; // 0x20
		private UnityWebRequest <w>5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003E192C-0x003E193C */ get; } // 0x007FF69C-0x007FF6A4 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003E194C-0x003E195C */ get; } // 0x007FF70C-0x007FF714 

		// Constructors
		[DebuggerHidden] // 0x003E190C-0x003E191C
		public <DailyChallegeCompleteServiceCall>d__115(int <>1__state); // 0x007FBFAC-0x007FBFD8

		// Methods
		[DebuggerHidden] // 0x003E191C-0x003E192C
		void IDisposable.Dispose(); // 0x007FF148-0x007FF14C
		private bool MoveNext(); // 0x007FF14C-0x007FF69C
		[DebuggerHidden] // 0x003E193C-0x003E194C
		void IEnumerator.Reset(); // 0x007FF6A4-0x007FF70C
	}

	[CompilerGenerated] // 0x003DF634-0x003DF644
	private sealed class <SaveAndShare>d__122 : IEnumerator<object> // TypeDefIndex: 3682
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public InputManager <>4__this; // 0x20
		private string <screenShotPath>5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003E197C-0x003E198C */ get; } // 0x008020AC-0x008020B4 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003E199C-0x003E19AC */ get; } // 0x0080211C-0x00802124 

		// Constructors
		[DebuggerHidden] // 0x003E195C-0x003E196C
		public <SaveAndShare>d__122(int <>1__state); // 0x007FC0C0-0x007FC0EC

		// Methods
		[DebuggerHidden] // 0x003E196C-0x003E197C
		void IDisposable.Dispose(); // 0x00801E9C-0x00801EA0
		private bool MoveNext(); // 0x00801EA0-0x008020AC
		[DebuggerHidden] // 0x003E198C-0x003E199C
		void IEnumerator.Reset(); // 0x008020B4-0x0080211C
	}

	// Constructors
	public InputManager(); // 0x007FE05C-0x007FE0C4

	// Methods
	private void Awake(); // 0x007F7AE0-0x007F7CC0
	private void Start(); // 0x007F7CC0-0x007F7DB4
	private void Update(); // 0x007F7E28-0x007F818C
	[DoNotRename] // 0x003E1054-0x003E1064
	public void PlayButton(); // 0x007F8580-0x007F866C
	[DoNotRename] // 0x003E1064-0x003E1074
	public void PauseButton(); // 0x007F8770-0x007F87B0
	[DoNotRename] // 0x003E1074-0x003E1084
	public void RepalyButton(); // 0x007F87B8-0x007F87EC
	[DoNotRename] // 0x003E1084-0x003E1094
	public void ExitGame(); // 0x007F87F4-0x007F87FC
	[DoNotRename] // 0x003E1094-0x003E10A4
	public void ResetGame(); // 0x007F87FC-0x007F8828
	[DoNotRename] // 0x003E10A4-0x003E10B4
	public void SFX_Button(bool st); // 0x007F8868-0x007F88FC
	[DoNotRename] // 0x003E10B4-0x003E10C4
	public void Music_Button(bool st); // 0x007F88FC-0x007F8990
	[DoNotRename] // 0x003E10C4-0x003E10D4
	public void Help_Button(bool st); // 0x007F8990-0x007F89C4
	[DoNotRename] // 0x003E10D4-0x003E10E4
	public void SettingsBack(); // 0x007F8B28-0x007F8B88
	[DoNotRename] // 0x003E10E4-0x003E10F4
	public void AdsPlayButton(); // 0x007F8B88-0x007F8B8C
	[DoNotRename] // 0x003E10F4-0x003E1104
	public void Share_Button(); // 0x007F8B90-0x007F8B94
	private void ShowRewardedAd(); // 0x007F8B8C-0x007F8B90
	private void HandleShowResult(); // 0x007F92B8-0x007F92BC
	private void ShareScreenshot(); // 0x007F8B94-0x007F92B8
	[DoNotRename] // 0x003E1104-0x003E1114
	public void Click_Replay(); // 0x007F92BC-0x007F92C8
	[DoNotRename] // 0x003E1114-0x003E1124
	public void Click_MainMenu(); // 0x007F92C8-0x007F930C
	[DoNotRename] // 0x003E1124-0x003E1134
	public void Click_SkipToScore(); // 0x007F93B8-0x007F93BC
	[DoNotRename] // 0x003E1134-0x003E1144
	public void Click_HOME(); // 0x007F93BC-0x007F93EC
	[DoNotRename] // 0x003E1144-0x003E1154
	public void Click_SpendAndReplay(); // 0x007F93EC-0x007F96C8
	[DoNotRename] // 0x003E1154-0x003E1164
	public void Click_MegapointsAndReplay(); // 0x007FB084-0x007FB0B0
	[DoNotRename] // 0x003E1164-0x003E1174
	public void Enter_PackageValue(); // 0x007FB124-0x007FB154
	[DoNotRename] // 0x003E1174-0x003E1184
	public void Get_PackageValue_29(bool st); // 0x007FB1EC-0x007FB1FC
	[DoNotRename] // 0x003E1184-0x003E1194
	public void Get_PackageValue_49(bool st); // 0x007FB1FC-0x007FB20C
	[DoNotRename] // 0x003E1194-0x003E11A4
	public void Get_PackageValue_99(bool st); // 0x007FB20C-0x007FB21C
	[DoNotRename] // 0x003E11A4-0x003E11B4
	public void Get_PackageValue_199(bool st); // 0x007FB21C-0x007FB22C
	[DoNotRename] // 0x003E11B4-0x003E11C4
	public void Get_PackageValue_449(bool st); // 0x007FB22C-0x007FB23C
	[DoNotRename] // 0x003E11C4-0x003E11D4
	public void Get_PackageValue_649(bool st); // 0x007FB23C-0x007FB24C
	[DoNotRename] // 0x003E11D4-0x003E11E4
	public void GetpinNumber(string pin); // 0x007FB24C-0x007FB254
	[DoNotRename] // 0x003E11E4-0x003E11F4
	public void Enter_RechargePin(); // 0x007FB254-0x007FB284
	public void RewardHit(); // 0x007FB31C-0x007FB348
	private string Md5Sum(int val); // 0x007F973C-0x007F9930
	public void EndgameService(int l); // 0x007F930C-0x007F93B8
	public void CompleteDailyChallenge(); // 0x007FB454-0x007FB4E4
	[IteratorStateMachine] // 0x003E11F4-0x003E1258
	private IEnumerator StartServiceCall(); // 0x007F7DB4-0x007F7E28
	[IteratorStateMachine] // 0x003E1258-0x003E12BC
	private IEnumerator EndServiceCall(int level); // 0x007FB3BC-0x007FB454
	[IteratorStateMachine] // 0x003E12BC-0x003E1320
	private IEnumerator BurnMegaDrawPointService(); // 0x007FB0B0-0x007FB124
	[IteratorStateMachine] // 0x003E1320-0x003E1384
	private IEnumerator BurnCoinsService(); // 0x007F96C8-0x007F973C
	[IteratorStateMachine] // 0x003E1384-0x003E13E8
	private IEnumerator RechargeServiceCall(string pin); // 0x007FB284-0x007FB31C
	[IteratorStateMachine] // 0x003E13E8-0x003E144C
	private IEnumerator AddPackServiceCall(int package); // 0x007FB154-0x007FB1EC
	public string Md5SumString(string strToEncrypt); // 0x007FB660-0x007FB808
	private static string ComputeSha256Hash(string rawData); // 0x007FB808-0x007FBA50
	[IteratorStateMachine] // 0x003E144C-0x003E14B0
	private IEnumerator GetNonceforRedeem(); // 0x007FB348-0x007FB3BC
	[IteratorStateMachine] // 0x003E14B0-0x003E1514
	private IEnumerator RewardHitServiceCall(); // 0x007FBA7C-0x007FBAF0
	private int SelectInAppGifts(); // 0x007FBB1C-0x007FBFAC
	[IteratorStateMachine] // 0x003E1514-0x003E1578
	private IEnumerator DailyChallegeCompleteServiceCall(); // 0x007FB4E4-0x007FB558
	private void CallServiceErrorDialog(ErrorCodes er, ServiceNames sn = ServiceNames.undefined /* Metadata: 0x0021CAC5 */); // 0x007F9930-0x007FB084
	[DoNotRename] // 0x003E1578-0x003E1588
	public void RefreshService(); // 0x007FBFD8-0x007FC020
	[DoNotRename] // 0x003E1588-0x003E1598
	public void CallNativeShare(); // 0x007FC020-0x007FC04C
	[IteratorStateMachine] // 0x003E1598-0x003E15FC
	private IEnumerator SaveAndShare(); // 0x007FC04C-0x007FC0C0
	[DoNotRename] // 0x003E15FC-0x003E160C
	public void CallReward(); // 0x007FC0EC-0x007FC178
	[DoNotRename] // 0x003E160C-0x003E161C
	public void FilterMegaWasana(); // 0x007FC414-0x007FC448
	[DoNotRename] // 0x003E161C-0x003E162C
	public void FilterCoins(); // 0x007FC448-0x007FC44C
	[DoNotRename] // 0x003E162C-0x003E163C
	public void FilterDataPackage(); // 0x007FC44C-0x007FC480
	[DoNotRename] // 0x003E163C-0x003E164C
	public void FilterRechargeCard(); // 0x007FC480-0x007FC4B4
	[DoNotRename] // 0x003E164C-0x003E165C
	public void ReviveWithPoints(); // 0x007FC4B4-0x007FC774
	[DoNotRename] // 0x003E165C-0x003E166C
	public void CallRevive(); // 0x007FC774-0x007FC7A0
	[DoNotRename] // 0x003E166C-0x003E167C
	public void ReviveText(RevieType t); // 0x007FC7A0-0x007FD78C
	[DoNotRename] // 0x003E167C-0x003E168C
	public void ReviveShowText(RevieType t); // 0x007FD78C-0x007FE05C
}

public enum RevieType // TypeDefIndex: 3683
{
	ScratchRevive = 0,
	DataCardRrevive = 1,
	MegaWasanaRevive = 2
}

public class InstructionText : MonoBehaviour // TypeDefIndex: 3684
{
	// Fields
	public InputManager inputManager; // 0x18
	public UnityEngine.UI.Text text; // 0x20
	private float mTimeLimit; // 0x28
	private float mSmoothStep; // 0x2C
	private Color mColor; // 0x30
	private int mI; // 0x40
	private bool mSkipIns; // 0x44
	private bool mDissapear; // 0x45

	// Constructors
	public InstructionText(); // 0x00802F7C-0x00802F84

	// Methods
	public void SetInstruction(int i); // 0x008029C8-0x00802B28
	private void OnEnable(); // 0x00802B28-0x00802B58
	private void Update(); // 0x00802B58-0x00802E74
}

public class int_ : MonoBehaviour // TypeDefIndex: 3685
{
	// Fields
	private static int_ mInstance; // 0x00
	public Collider other; // 0x18

	// Properties
	public static int_ Instance { get; } // 0x00C07724-0x00C07774 

	// Constructors
	public int_(); // 0x00C077C8-0x00C077D0

	// Methods
	private void Awake(); // 0x00C07774-0x00C077C8
}

public class LerpMover : MonoBehaviour // TypeDefIndex: 3686
{
	// Fields
	public Goal GoalTxt; // 0x18
	public GameObject SpinButton; // 0x20
	public int InstructionID; // 0x28
	private Collider tempOther; // 0x30
	public Material ShieldMaterial; // 0x38
	public SkinnedMeshRenderer CharacterRenderer; // 0x40
	private Material CharacterMaterial; // 0x48
	private string mToken; // 0x50
	public ButtonEffect PauseButtonEffect; // 0x58
	public GameObject GameWheel; // 0x60
	public GameObject GameWheelPanel; // 0x68
	public Font SinhalaFont; // 0x70
	public Font EnglishFont; // 0x78
	public Font TamilFont; // 0x80
	public GameObject CoinPrefab; // 0x88
	public UnityEngine.UI.Text SCoreLBL; // 0x90
	public UnityEngine.UI.Text CoinLBL; // 0x98
	public UnityEngine.UI.Image PowerBarMagnet; // 0xA0
	public UnityEngine.UI.Image PowerBarBoost; // 0xA8
	public UnityEngine.UI.Image PowerBarShield; // 0xB0
	public InputManager inputManager; // 0xB8
	public GameObject GameOverPanel; // 0xC0
	public GameObject GameOverPanelRevive; // 0xC8
	private GameObject GameOverPanelTemp; // 0xD0
	public GameObject MagnetRoot; // 0xD8
	public Transform MagnetT; // 0xE0
	public Transform ShieldT; // 0xE8
	public Transform BoostT; // 0xF0
	public Transform ATM_T; // 0xF8
	public Transform Gate; // 0x100
	public Transform[] TCoinSets; // 0x108
	public Transform RotHndleT; // 0x110
	public Transform[] ObsList; // 0x118
	public float mCamX; // 0x120
	public float mCamZ; // 0x124
	public Transform ShadowT; // 0x128
	public InstructionText instructionText; // 0x130
	public UnityEngine.UI.Image AdButtonImage; // 0x138
	public Material Bg_Mat; // 0x140
	public int RotID; // 0x148
	public int TrackID; // 0x14C
	public Renderer Portal_1; // 0x150
	public Material PositivePortalMat; // 0x158
	public Material NegetivePortalMat; // 0x160
	public UnityEngine.UI.Text DebugLBL; // 0x168
	public int UnitsToGOLIMIT; // 0x170
	public ParticleSystem Sfx; // 0x178
	public ParticleSystem Sfx_Ripple; // 0x180
	public SFX_C SfxCharacter; // 0x188
	public AudioManager mAudioManager; // 0x190
	public TextureAnimator mTextureAnimator; // 0x198
	private static LerpMover mInstance; // 0x00
	public Transform PortalTree; // 0x1A0
	public Transform AutoRotPrtal; // 0x1A8
	public Transform RunnerRoot; // 0x1B0
	public Material RunMat; // 0x1B8
	public CameraFog camFog; // 0x1C0
	public int PortalWaitCounterLIMIT; // 0x1C8
	public int PortalWaitCounter; // 0x1CC
	public PathPatch[] PathAryPaches; // 0x1D0
	public Transform[] EnvObs; // 0x1D8
	public Transform RunnerT; // 0x1E0
	public float MAX_VEL; // 0x1E8
	private float mMAX_VEL_Tick; // 0x1EC
	private float TempMAX_VEL; // 0x1F0
	public Animator RunAni; // 0x1F8
	public List<Vector2> PoAry_2; // 0x200
	public Transform V; // 0x208
	public float Vel; // 0x210
	private Vector2 St; // 0x214
	private Vector2 Ed; // 0x21C
	private float t; // 0x224
	private float minAngle; // 0x228
	private float maxAngle; // 0x22C
	private float angle; // 0x230
	private float mStepSiz; // 0x234
	private float mTStepSiz; // 0x238
	private int mLen; // 0x23C
	private int mIndex; // 0x240
	private Vector3 AngVec; // 0x244
	private float mSign; // 0x250
	private float mA; // 0x254
	private int mWalkToRunTicks; // 0x258
	private int mRunToJumpTicks; // 0x25C
	private int mRunToChangeLaneTicks; // 0x260
	private int mRunToRotTicks; // 0x264
	private int mRunToRotTicksLIMIT; // 0x268
	private int mSkyToGroundTicks; // 0x26C
	private int mSKY_GROUND_LIMIT; // 0x270
	private float mCurrentLane; // 0x274
	private float mLaneChangeSign; // 0x278
	private int mAnimationStateID; // 0x27C
	private int mRayFrontLayerMask; // 0x280
	private int mRayDownLayerMask; // 0x284
	private int mMiddleTurn; // 0x288
	private int mMiddleTurnLIMIT; // 0x28C
	private int mJumpDownTicks; // 0x290
	private int mJumpDownTicksLIMIT; // 0x294
	private int mRollForwardTicks; // 0x298
	private Vector3 mP_AngVec; // 0x29C
	private float mP_Sign; // 0x2A8
	private float mP_maxAngle; // 0x2AC
	private float mSmoothStep; // 0x2B0
	public PathPatch[] mRunningPatches; // 0x2B8
	public int CurPathId; // 0x2C0
	public int NxtPathID; // 0x2C4
	private int mCurrentRotationID; // 0x2C8
	private int mTempRotationID; // 0x2CC
	private int mfINTempRotationID; // 0x2D0
	private int mAutoRotInd; // 0x2D4
	private int mNextRot; // 0x2D8
	private float mAngleEffect; // 0x2DC
	private float mSpeedFactor; // 0x2E0
	private float mExternalSpeedFactor; // 0x2E4
	private float mExternalSpeedMagnatude; // 0x2E8
	private int mRangeStart; // 0x2EC
	private int mRangeEnd; // 0x2F0
	private bool mSpeedUp; // 0x2F4
	private bool mOnRide; // 0x2F5
	private bool mFlying; // 0x2F6
	private ObData mTempObData; // 0x2F8
	private int mLevelID; // 0x300
	public int mMaxLevelID; // 0x304
	private int mEnvPart_0_Top; // 0x308
	private int mEnvPart_1_Top; // 0x30C
	private int mEnvPart_2_Top; // 0x310
	private bool mCriticalStep; // 0x314
	private Transform mCamT; // 0x318
	private int mFilledUnits; // 0x320
	private int UnitsToGo; // 0x324
	private int[] mPeddleCounts; // 0x328
	private float mTurnVal; // 0x330
	private float mJumpVal; // 0x334
	private int mTurnMag; // 0x338
	private int mBufferTurn; // 0x33C
	private bool mIsTurning; // 0x340
	private bool mBufferJump; // 0x341
	private Transform mTempT; // 0x348
	private float mNewExternalSpeed; // 0x350
	private float mOldExternalSpeed; // 0x354
	private float mCamMoveVal; // 0x358
	private float mCamMoveValT; // 0x35C
	private bool mDoResetRotationAndPath; // 0x360
	private float mCamOffset; // 0x364
	private float mCamOffsetT; // 0x368
	private bool mOkToChange; // 0x36C
	private float mSlowDownValue; // 0x370
	private bool mCanSlow; // 0x374
	private int mStopTicks; // 0x378
	private int mRestartTicks; // 0x37C
	private bool mCanCaptureScreen; // 0x380
	private bool mInHelpAds; // 0x381
	private bool mInHelpNormal; // 0x382
	private bool mInHelpForward; // 0x383
	private bool mInHelpBack; // 0x384
	private Transform mObT; // 0x388
	private float mPar_0; // 0x390
	private int mPar_1; // 0x394
	private int mObsTopIndex; // 0x398
	private int mPrevObsIndex; // 0x39C
	public int mCurrObsIndex; // 0x3A0
	private bool mBufferSlide; // 0x3A4
	private int mStepCount; // 0x3A8
	private int mGateID; // 0x3AC
	private int mMagnetCount; // 0x3B0
	private int mMagnetCountLimit; // 0x3B4
	private int mShieldCount; // 0x3B8
	private int mShieldCountLimit; // 0x3BC
	private int mBoostCount; // 0x3C0
	private int mBoostCountLimit; // 0x3C4
	private int mATM_Count; // 0x3C8
	private int mATM_CountLimit; // 0x3CC
	private int mMagnetTicks; // 0x3D0
	private int mMagnetTicksLimit; // 0x3D4
	private int mBoostTicks; // 0x3D8
	private int mBoostTicksLimit; // 0x3DC
	private int mShieldTicks; // 0x3E0
	private int mShieldTicksLimit; // 0x3E4
	private int mDieBounce; // 0x3E8
	private int mRiseUp; // 0x3EC
	private int mEnvIndex; // 0x3F0
	public int mObsLock_0; // 0x3F4
	public int mObsLock_1; // 0x3F8
	private int mLap; // 0x3FC
	private bool mIsATM_Captured; // 0x400
	private int mTempStepper; // 0x404
	private int_ CollHandler; // 0x408
	public WheelKeyHandler keyhandler; // 0x410

	// Properties
	public static LerpMover Instance { get; } // 0x007F6340-0x007F6390 

	// Constructors
	public LerpMover(); // 0x008138FC-0x00813904

	// Methods
	private void Awake(); // 0x008033F0-0x008038F0
	private void Start(); // 0x00804D8C-0x008053B0
	private void SetEnv(); // 0x008038F0-0x00804D8C
	private void FixedUpdate(); // 0x008053B0-0x008070C8
	private void PositionForFuture(int index); // 0x008072B8-0x0080D4B8
	private int UpdateCurrentOb(); // 0x0080D734-0x0080D76C
	public float GetFacingAngle(int index); // 0x0080D76C-0x0080D98C
	public void TrackChangeL(); // 0x007F8274-0x007F8388
	public void TrackChangeR(); // 0x007F8388-0x007F84B0
	public void Jump(); // 0x007F84B0-0x007F856C
	public void JumpDown(); // 0x0080D98C-0x0080DA30
	public void RollDown(); // 0x008070C8-0x00807198
	public void MoveDown(); // 0x007F856C-0x007F8580
	public void RotateTrack(int i); // 0x00807198-0x008072B8
	public void AutoRotateTrack(); // 0x0080DA30-0x0080DA98
	public void SpeedUp(float SpeedMagnatude, int EffectiveTime); // 0x0080DA98-0x0080DB2C
	public void HitSheild(); // 0x007FC228-0x007FC318
	[DoNotRename] // 0x003E19AC-0x003E19BC
	public void ResetCurrentPath(); // 0x0080DB2C-0x0080E5C0
	public void FallBackCurrentPath(); // 0x0080E5C0-0x0080E738
	private void DynamicFallBackCurrentPath(int l); // 0x0080FC44-0x0080FD00
	private void ResetRotationAndPath(); // 0x0080FD00-0x00810704
	public void ResetToRotPaths(); // 0x00810704-0x00811078
	[DoNotRename] // 0x003E19BC-0x003E19CC
	public void ResetGame(); // 0x00811078-0x00812458
	[DoNotRename] // 0x003E19CC-0x003E19DC
	public void StratFromMax(); // 0x00812458-0x00812498
	private void ResetGame(int id, bool buttonReset = true /* Metadata: 0x0021CB09 */); // 0x0080E738-0x0080FC44
	[DoNotRename] // 0x003E19DC-0x003E19EC
	public void ReplayGame(); // 0x007F8738-0x007F8770
	[DoNotRename] // 0x003E19EC-0x003E19FC
	public void PlayFromBeginning(); // 0x007F8828-0x007F8868
	[DoNotRename] // 0x003E19FC-0x003E1A0C
	public void PlayGame(); // 0x007F866C-0x007F8738
	[DoNotRename] // 0x003E1A0C-0x003E1A1C
	public void ResetPlayerPosition(); // 0x00812498-0x00812700
	[DoNotRename] // 0x003E1A1C-0x003E1A2C
	public void UNpause(); // 0x007F87EC-0x007F87F4
	[DoNotRename] // 0x003E1A2C-0x003E1A3C
	public void PauseGame(); // 0x007F87B0-0x007F87B8
	public void ShowRewardedAd(); // 0x00802E74-0x00802E78
	[DoNotRename] // 0x003E1A3C-0x003E1A4C
	public void HelpActivate(bool st); // 0x007F89C4-0x007F8B28
	public void HitMagnet(); // 0x007FC178-0x007FC228
	public void TutePortalHit(); // 0x00802EF4-0x00802F7C
	public void TuteSpeedChange(); // 0x00802E78-0x00802EF4
	public void FillAllPoints(); // 0x00812700-0x00812B74
	public void HitCoin(); // 0x00812B74-0x00812D98
	public void HitObstacle(); // 0x00812D98-0x00812F0C
	public void HitObstacleUnder(); // 0x00812F0C-0x00813050
	public void HitObstacleOverOrUnder(); // 0x00813050-0x00813194
	public void HitBoost(); // 0x007FC318-0x007FC414
	public void SpeedUpNew(float SpeedMagnatude, int EffectiveTime); // 0x0080D730-0x0080D734
	public void UpdateScores(); // 0x0080D61C-0x0080D730
	public bool CallMegaWheel(); // 0x00813388-0x0081341C
	private string Md5Sum(int val); // 0x00813194-0x00813388
	public void LetThereBeLife(); // 0x007F818C-0x007F8274
	private void OnApplicationPause(bool pauseStatus); // 0x0081341C-0x00813488
	private void ScheduleNotification(); // 0x00813878-0x0081387C
	private string Md5Sum(); // 0x00813488-0x00813878
	private void GameOverUI(); // 0x0080D4B8-0x0080D61C
	public void HitATM(); // 0x0081387C-0x008138FC
}

public class Magnet : MonoBehaviour // TypeDefIndex: 3687
{
	// Fields
	public Transform T; // 0x18
	public int i; // 0x20
	public Vector3 S_po; // 0x24

	// Constructors
	public Magnet(); // 0x00813D90-0x00813D98

	// Methods
	private void FixedUpdate(); // 0x00813AC8-0x00813D90
}

public class MegaWasana : MonoBehaviour // TypeDefIndex: 3688
{
	// Fields
	[Header] // 0x003DF8C0-0x003DF8F8
	public Font SinhalaFont; // 0x18
	public Font EnglishFont; // 0x20
	public Font TamilFont; // 0x28
	[Header] // 0x003DF8F8-0x003DF930
	public string host; // 0x30
	public string getInfo; // 0x38
	public string getNumbers; // 0x40
	public string checkPrizes; // 0x48
	public string largePrizeRedeem; // 0x50
	public string smallPrizeReload; // 0x58
	public string smallPrizeCash; // 0x60
	[Header] // 0x003DF930-0x003DF968
	public UnityEngine.UI.Text[] currentNumbers; // 0x68
	public UnityEngine.UI.Text[] winningNumbers; // 0x70
	public UnityEngine.UI.Text[] lastWeekNumbers; // 0x78
	[Header] // 0x003DF968-0x003DF9A0
	public UnityEngine.UI.Text weeklabel; // 0x80
	public UnityEngine.UI.Text reloadBillButtonText; // 0x88
	public UnityEngine.UI.Text reloadBillText; // 0x90
	[Header] // 0x003DF9A0-0x003DF9D8
	public GameObject txt_Congratulations; // 0x98
	public GameObject txt_winning1; // 0xA0
	public GameObject txt_winning2; // 0xA8
	public GameObject panelEzCash; // 0xB0
	public GameObject panelNormal; // 0xB8
	public GameObject panelLarge; // 0xC0
	public GameObject panelNormalRedeemPINSuccess; // 0xC8
	public GameObject panelNormalRedeemBill; // 0xD0
	public GameObject redeemPrizesButton; // 0xD8
	public GameObject loadingPanel; // 0xE0
	public GameObject errorPanel; // 0xE8
	public GameObject ComingSoonPanel; // 0xF0
	public static string isPrepaid; // 0x00
	private static bool isEzCash; // 0x08
	private static bool isLargePrize; // 0x09
	private static bool isSmallPrize; // 0x0A
	private string mToken; // 0xF8
	[Header] // 0x003DF9D8-0x003DFA10
	public UnityEngine.UI.Image logo; // 0x100
	public Sprite sinhalalogo; // 0x108
	public Sprite tamillogo; // 0x110

	// Nested types
	[CompilerGenerated] // 0x003DF644-0x003DF654
	private sealed class <getUserDetails>d__39 : IEnumerator<object> // TypeDefIndex: 3689
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public MegaWasana <>4__this; // 0x20
		private UnityWebRequest <www>5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003E1CC4-0x003E1CD4 */ get; } // 0x008181F8-0x00818200 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003E1CE4-0x003E1CF4 */ get; } // 0x00818268-0x00818270 

		// Constructors
		[DebuggerHidden] // 0x003E1CA4-0x003E1CB4
		public <getUserDetails>d__39(int <>1__state); // 0x00815240-0x0081526C

		// Methods
		[DebuggerHidden] // 0x003E1CB4-0x003E1CC4
		void IDisposable.Dispose(); // 0x00816B70-0x00816B74
		private bool MoveNext(); // 0x00816B74-0x008181F8
		[DebuggerHidden] // 0x003E1CD4-0x003E1CE4
		void IEnumerator.Reset(); // 0x00818200-0x00818268
	}

	[CompilerGenerated] // 0x003DF654-0x003DF664
	private sealed class <getUserNumbers>d__40 : IEnumerator<object> // TypeDefIndex: 3690
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public MegaWasana <>4__this; // 0x20
		private UnityWebRequest <www>5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003E1D14-0x003E1D24 */ get; } // 0x00818A1C-0x00818A24 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003E1D34-0x003E1D44 */ get; } // 0x00818A8C-0x00818A94 

		// Constructors
		[DebuggerHidden] // 0x003E1CF4-0x003E1D04
		public <getUserNumbers>d__40(int <>1__state); // 0x008152E0-0x0081530C

		// Methods
		[DebuggerHidden] // 0x003E1D04-0x003E1D14
		void IDisposable.Dispose(); // 0x00818270-0x00818274
		private bool MoveNext(); // 0x00818274-0x00818A1C
		[DebuggerHidden] // 0x003E1D24-0x003E1D34
		void IEnumerator.Reset(); // 0x00818A24-0x00818A8C
	}

	[CompilerGenerated] // 0x003DF664-0x003DF674
	private sealed class <checkUserPrizes>d__41 : IEnumerator<object> // TypeDefIndex: 3691
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public MegaWasana <>4__this; // 0x20
		private UnityWebRequest <www>5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003E1D64-0x003E1D74 */ get; } // 0x00816AF8-0x00816B00 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003E1D84-0x003E1D94 */ get; } // 0x00816B68-0x00816B70 

		// Constructors
		[DebuggerHidden] // 0x003E1D44-0x003E1D54
		public <checkUserPrizes>d__41(int <>1__state); // 0x00815380-0x008153AC

		// Methods
		[DebuggerHidden] // 0x003E1D54-0x003E1D64
		void IDisposable.Dispose(); // 0x00815990-0x00815994
		private bool MoveNext(); // 0x00815994-0x00816AF8
		[DebuggerHidden] // 0x003E1D74-0x003E1D84
		void IEnumerator.Reset(); // 0x00816B00-0x00816B68
	}

	[CompilerGenerated] // 0x003DF674-0x003DF684
	private sealed class <sendLargePrizeRedeem>d__42 : IEnumerator<object> // TypeDefIndex: 3692
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public MegaWasana <>4__this; // 0x20
		private UnityWebRequest <www>5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003E1DB4-0x003E1DC4 */ get; } // 0x00818D38-0x00818D40 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003E1DD4-0x003E1DE4 */ get; } // 0x00818DA8-0x00818DB0 

		// Constructors
		[DebuggerHidden] // 0x003E1D94-0x003E1DA4
		public <sendLargePrizeRedeem>d__42(int <>1__state); // 0x00815420-0x0081544C

		// Methods
		[DebuggerHidden] // 0x003E1DA4-0x003E1DB4
		void IDisposable.Dispose(); // 0x00818A94-0x00818A98
		private bool MoveNext(); // 0x00818A98-0x00818D38
		[DebuggerHidden] // 0x003E1DC4-0x003E1DD4
		void IEnumerator.Reset(); // 0x00818D40-0x00818DA8
	}

	[CompilerGenerated] // 0x003DF684-0x003DF694
	private sealed class <sendNormalPrizeRedeem>d__43 : IEnumerator<object> // TypeDefIndex: 3693
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public MegaWasana <>4__this; // 0x20
		private UnityWebRequest <www>5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003E1E04-0x003E1E14 */ get; } // 0x00819364-0x0081936C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003E1E24-0x003E1E34 */ get; } // 0x008193D4-0x008193DC 

		// Constructors
		[DebuggerHidden] // 0x003E1DE4-0x003E1DF4
		public <sendNormalPrizeRedeem>d__43(int <>1__state); // 0x008154C0-0x008154EC

		// Methods
		[DebuggerHidden] // 0x003E1DF4-0x003E1E04
		void IDisposable.Dispose(); // 0x008190C0-0x008190C4
		private bool MoveNext(); // 0x008190C4-0x00819364
		[DebuggerHidden] // 0x003E1E14-0x003E1E24
		void IEnumerator.Reset(); // 0x0081936C-0x008193D4
	}

	[CompilerGenerated] // 0x003DF694-0x003DF6A4
	private sealed class <sendNormalPrizeCashPIN>d__44 : IEnumerator<object> // TypeDefIndex: 3694
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public MegaWasana <>4__this; // 0x20
		private UnityWebRequest <www>5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003E1E54-0x003E1E64 */ get; } // 0x00819048-0x00819050 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003E1E74-0x003E1E84 */ get; } // 0x008190B8-0x008190C0 

		// Constructors
		[DebuggerHidden] // 0x003E1E34-0x003E1E44
		public <sendNormalPrizeCashPIN>d__44(int <>1__state); // 0x00815560-0x0081558C

		// Methods
		[DebuggerHidden] // 0x003E1E44-0x003E1E54
		void IDisposable.Dispose(); // 0x00818DB0-0x00818DB4
		private bool MoveNext(); // 0x00818DB4-0x00819048
		[DebuggerHidden] // 0x003E1E64-0x003E1E74
		void IEnumerator.Reset(); // 0x00819050-0x008190B8
	}

	// Constructors
	public MegaWasana(); // 0x00815910-0x00815918
	static MegaWasana(); // 0x00815918-0x00815990

	// Methods
	private void Start(); // 0x00813D98-0x00813D9C
	private void Awake(); // 0x00813D9C-0x00813EB4
	public void populateContentStart(); // 0x00813EB4-0x00815024
	[IteratorStateMachine] // 0x003E1A4C-0x003E1AB0
	public IEnumerator getUserDetails(); // 0x008151CC-0x00815240
	[IteratorStateMachine] // 0x003E1AB0-0x003E1B14
	public IEnumerator getUserNumbers(); // 0x0081526C-0x008152E0
	[IteratorStateMachine] // 0x003E1B14-0x003E1B78
	public IEnumerator checkUserPrizes(); // 0x0081530C-0x00815380
	[IteratorStateMachine] // 0x003E1B78-0x003E1BDC
	public IEnumerator sendLargePrizeRedeem(); // 0x008153AC-0x00815420
	[IteratorStateMachine] // 0x003E1BDC-0x003E1C40
	public IEnumerator sendNormalPrizeRedeem(); // 0x0081544C-0x008154C0
	[IteratorStateMachine] // 0x003E1C40-0x003E1CA4
	public IEnumerator sendNormalPrizeCashPIN(); // 0x008154EC-0x00815560
	public void clearNumbers(); // 0x00815024-0x008151CC
	public void redeemPrizes(); // 0x0081558C-0x00815744
	public void largePrize(); // 0x00815744-0x00815770
	public void reloadBill(); // 0x00815770-0x0081579C
	public void sendPin(); // 0x0081579C-0x008157C8
	public void setText(UnityEngine.UI.Text label, string sin, string eng, string tam); // 0x008157C8-0x00815910
}

public class ObATM : MonoBehaviour // TypeDefIndex: 3695
{
	// Fields
	private bool mHit; // 0x18
	private LerpMover Lerp; // 0x20

	// Constructors
	public ObATM(); // 0x00D06178-0x00D06180

	// Methods
	private void Start(); // 0x00D060C0-0x00D060E8
	private void OnTriggerEnter(Collider other); // 0x00D060E8-0x00D06178
}

public class ObBoost : MonoBehaviour // TypeDefIndex: 3696
{
	// Fields
	private bool mHit; // 0x18
	private LerpMover Lerp; // 0x20

	// Constructors
	public ObBoost(); // 0x00D06294-0x00D0629C

	// Methods
	private void Start(); // 0x00D06180-0x00D061A8
	private void OnTriggerEnter(Collider other); // 0x00D061A8-0x00D06294
}

public class ObData : MonoBehaviour // TypeDefIndex: 3697
{
	// Fields
	public float SpeedMagnitude; // 0x18
	public int EffectiveTime; // 0x1C

	// Constructors
	public ObData(); // 0x00D0629C-0x00D062A4
}

public class ObMagnet : MonoBehaviour // TypeDefIndex: 3698
{
	// Fields
	private bool mHit; // 0x18
	private LerpMover Lerp; // 0x20

	// Constructors
	public ObMagnet(); // 0x00D0635C-0x00D06364

	// Methods
	private void Start(); // 0x00D062A4-0x00D062CC
	private void OnTriggerEnter(Collider other); // 0x00D062CC-0x00D0635C
}

public class ObShield : MonoBehaviour // TypeDefIndex: 3699
{
	// Fields
	private bool mHit; // 0x18
	private LerpMover Lerp; // 0x20

	// Constructors
	public ObShield(); // 0x00D06478-0x00D06480

	// Methods
	private void Start(); // 0x00D06364-0x00D0638C
	private void OnTriggerEnter(Collider other); // 0x00D0638C-0x00D06478
}

public class ObsManager : MonoBehaviour // TypeDefIndex: 3700
{
	// Fields
	public int Count; // 0x18

	// Constructors
	public ObsManager(); // 0x00D07124-0x00D0712C
}

public class Obstacle : MonoBehaviour // TypeDefIndex: 3701
{
	// Fields
	private bool mHit; // 0x18
	private LerpMover Lerp; // 0x20
	private int_ otherHandeler; // 0x28

	// Constructors
	public Obstacle(); // 0x00D071B4-0x00D071BC

	// Methods
	private void Start(); // 0x00D0712C-0x00D07160
	private void OnTriggerEnter(Collider other); // 0x00D07160-0x00D071B4
}

public class ObstacleOverOrUnder : MonoBehaviour // TypeDefIndex: 3702
{
	// Fields
	private bool mHit; // 0x18
	private LerpMover Lerp; // 0x20
	private int_ otherHandeler; // 0x28

	// Constructors
	public ObstacleOverOrUnder(); // 0x00D074B8-0x00D074C0

	// Methods
	private void Start(); // 0x00D073F8-0x00D0742C
	private void OnTriggerEnter(Collider other); // 0x00D0742C-0x00D074B8
}

public class ObstacleUnder : MonoBehaviour // TypeDefIndex: 3703
{
	// Fields
	private bool mHit; // 0x18
	private LerpMover Lerp; // 0x20
	private int_ otherHandeler; // 0x28

	// Constructors
	public ObstacleUnder(); // 0x00D07580-0x00D07588

	// Methods
	private void Start(); // 0x00D074C0-0x00D074F4
	private void OnTriggerEnter(Collider other); // 0x00D074F4-0x00D07580
}

public class PathPatch : MonoBehaviour // TypeDefIndex: 3704
{
	// Fields
	public int ID; // 0x18
	public int[] PathData; // 0x20

	// Constructors
	public PathPatch(); // 0x00D07698-0x00D076A0

	// Methods
	public void SetPatch(int StInd, int EdInt, bool StoE, int pathOri = 0 /* Metadata: 0x0021CB0A */); // 0x00D07624-0x00D07628
	public void ResetPatch(); // 0x00D07628-0x00D07698
}

public class RayHeadHit : MonoBehaviour // TypeDefIndex: 3705
{
	// Constructors
	public RayHeadHit(); // 0x00D07F10-0x00D07F18

	// Methods
	private void Start(); // 0x00D07F08-0x00D07F0C
	private void Update(); // 0x00D07F0C-0x00D07F10
}

public class Rewards : MonoBehaviour // TypeDefIndex: 3706
{
	// Fields
	public Magnet magnet; // 0x18
	private bool mHit; // 0x20
	private LerpMover Lerp; // 0x28

	// Constructors
	public Rewards(); // 0x00D086BC-0x00D086C4

	// Methods
	private void Start(); // 0x00D08548-0x00D085AC
	private void OnTriggerEnter(Collider other); // 0x00D085AC-0x00D086BC
}

public class RhythumObs : MonoBehaviour // TypeDefIndex: 3707
{
	// Fields
	public Transform[] ob_Ary; // 0x18
	private int mOb_Timer; // 0x20

	// Constructors
	public RhythumObs(); // 0x00D08870-0x00D08878

	// Methods
	private void OnEnable(); // 0x00D086C4-0x00D086CC
	private void FixedUpdate(); // 0x00D086CC-0x00D08870
}

public class RunEvents : MonoBehaviour // TypeDefIndex: 3708
{
	// Fields
	public Animator RunAni; // 0x18

	// Constructors
	public RunEvents(); // 0x00D08D84-0x00D08D8C

	// Methods
	public void EndTurn(); // 0x00D08D1C-0x00D08D84
}

public class SFX : MonoBehaviour // TypeDefIndex: 3709
{
	// Fields
	public Material RefMat; // 0x18
	public Material Mat; // 0x20
	public bool Positive; // 0x28
	private int mStartToFinishTicks; // 0x2C
	private float mSmoothStep; // 0x30

	// Constructors
	public SFX(); // 0x00D08D94-0x00D08D9C

	// Methods
	private void OnEnable(); // 0x00D08D8C-0x00D08D94
}

public class SFX_C : MonoBehaviour // TypeDefIndex: 3710
{
	// Fields
	public Material Mat; // 0x18
	private int mStartToFinishTicks; // 0x20
	private float mSmoothStep; // 0x24

	// Constructors
	public SFX_C(); // 0x00D09048-0x00D09050

	// Methods
	private void Start(); // 0x00D08D9C-0x00D08E14
	private void OnEnable(); // 0x00D08E14-0x00D08E88
	private void FixedUpdate(); // 0x00D08E88-0x00D09048
}

public class SkelitonData : MonoBehaviour // TypeDefIndex: 3711
{
	// Fields
	public Material BG_MAT; // 0x18
	private int mOb_Timer; // 0x20
	private Transform[] mTrackAssetAry; // 0x28
	private Transform[] mModifyAry; // 0x30
	private Transform mRootT; // 0x38
	private int i; // 0x40
	private int r_i; // 0x44
	private int mObTop; // 0x48
	private FixedUpdateDelegate fixedUpdateDelegate; // 0x50
	private OnDisableDelegate onDisableDelegate; // 0x58
	private TrackAssetManager mTrackAssetManager; // 0x60
	private LerpMover mLerpMover; // 0x68
	private int[] mObIDs; // 0x70
	private int mLastTrackID; // 0x78
	private int mLastRotID; // 0x7C
	private ParticleSystem mParticleEffect; // 0x80

	// Nested types
	private delegate void FixedUpdateDelegate(); // TypeDefIndex: 3712; 0x00D14F3C-0x00D1533C

	private delegate void OnDisableDelegate(); // TypeDefIndex: 3713; 0x00D14B10-0x00D14F10

	// Constructors
	public SkelitonData(); // 0x00D1A7DC-0x00D1A7F0

	// Methods
	private void Awake(); // 0x00D12A70-0x00D12B58
	private void Start(); // 0x00D12B58-0x00D12B68
	public void SetVal(int l, int m, int r, int id, int obTop); // 0x00D12B68-0x00D135C8
	public void SetCirculeVal(int[] ObIds, int id, int obTop); // 0x00D135E8-0x00D14AC4
	private void OnDisable(); // 0x00D14AC4-0x00D14B10
	private void FixedUpdate(); // 0x00D14F10-0x00D14F3C
	private void StaticObjectFixedUpdate(); // 0x00D1533C-0x00D15340
	private void RythumObjectFixedUpdate(); // 0x00D15340-0x00D15618
	private void DynamicObjectFixedUpdate(); // 0x00D15618-0x00D15A1C
	private void ReactObjectFixedUpdate(); // 0x00D15A1C-0x00D15FC8
	private void StaticObjectOnDisable(); // 0x00D15FC8-0x00D15FCC
	private void DynamicObjectOnDisable(); // 0x00D15FCC-0x00D17444
	private void DynamicCirculreObjectFixedUpdate(); // 0x00D17444-0x00D183EC
	private void DynamicCirculreObjectOnDisable(); // 0x00D183EC-0x00D18CE8
	private void RythumCirculreObjectFixedUpdate(); // 0x00D18CE8-0x00D19618
	private void ReactCirculreObjectFixedUpdate(); // 0x00D19618-0x00D1A7DC
}

public class StartScript : MonoBehaviour // TypeDefIndex: 3714
{
	// Fields
	public ButtonEffect PlayButton; // 0x18
	public ButtonEffect SettingsButton; // 0x20
	public UnityEngine.UI.Text Quote_Text; // 0x28
	public UnityEngine.UI.Text Instruction_Text; // 0x30
	private int mStopTicks; // 0x38
	private float mSmoothStep; // 0x3C

	// Constructors
	public StartScript(); // 0x00D1B630-0x00D1B638

	// Methods
	private void OnEnable(); // 0x00D1B604-0x00D1B60C
	private void FixedUpdate(); // 0x00D1B60C-0x00D1B630
}

public class TextEffect : MonoBehaviour // TypeDefIndex: 3715
{
	// Fields
	public UnityEngine.UI.Text text; // 0x18
	private float mSmoothStep; // 0x20
	private float mTimeLimit; // 0x24
	private bool mEnable; // 0x28
	private Color mColor; // 0x2C
	private bool mTurn; // 0x3C

	// Constructors
	public TextEffect(); // 0x00D1BAF8-0x00D1BB00

	// Methods
	private void OnEnable(); // 0x00D1B914-0x00D1B918
	public void Dissapear(); // 0x00D1B918-0x00D1B91C
	private void OnDisable(); // 0x00D1B91C-0x00D1B920
	private void Update(); // 0x00D1B920-0x00D1BAF8
}

public class TextureAnimator : MonoBehaviour // TypeDefIndex: 3716
{
	// Fields
	public Material SigiriyaMat; // 0x18
	public Material PolonnnaruwaMat; // 0x20
	public Material ColomboMat; // 0x28
	public Material KandyMat; // 0x30
	public Material YapahuwaMat; // 0x38
	public Material KurunagalaMat; // 0x40
	public Renderer CityBoardRenderer; // 0x48
	public Renderer VillageBoardRenderer; // 0x50
	public GameObject CityBoard; // 0x58
	public GameObject VillageBoard; // 0x60
	public Material[] SkyBox; // 0x68
	public Material HeadMat; // 0x70
	public Texture BlackTexture; // 0x78
	public Texture WhiteTexture; // 0x80
	public AudioManager audioManager; // 0x88
	public AudioSource BG_AudioSource; // 0x90
	public ParticleSystem EnvParticleSystem; // 0x98
	public ButtonEffect PlayButton; // 0xA0
	public ButtonEffect PauseButton; // 0xA8
	public ButtonEffect SettingsButton; // 0xB0
	public ButtonEffect AdPlayButton; // 0xB8
	public ButtonEffect shareButton; // 0xC0
	public Camera CamBG; // 0xC8
	public CameraFog CamFog; // 0xD0
	public SkinnedMeshRenderer[] WingRendererAry; // 0xD8
	public Transform[] WingAry; // 0xE0
	public Material CharacterMat; // 0xE8
	public Material noiseMat; // 0xF0
	public Renderer HeadGlow; // 0xF8
	public SkinnedMeshRenderer HeadRender; // 0x100
	public Material ObsMat; // 0x108
	public Material RewMat; // 0x110
	public Material PortalOutlineMat; // 0x118
	public Material BackGroundMat; // 0x120
	public Material BackGroundDecoMat_0; // 0x128
	public Material BackGroundDecoMat_1; // 0x130
	public Material BackGroundDecoMat_2; // 0x138
	public Material BackGroundDecoMat_3; // 0x140
	public Material BackGroundDecoMat_4; // 0x148
	public Material BackGroundDecoMat_5; // 0x150
	public Material NegetivePortal; // 0x158
	public Material PitMat; // 0x160
	public Material RotPitMat; // 0x168
	public Material SFX_Mat; // 0x170
	private int i; // 0x178
	private int mColorChangeTicks; // 0x17C
	private int mReverseColorChangeTicks; // 0x180
	private int mForwardColorChangeTicks; // 0x184
	private int mDeadColorChange; // 0x188
	private int mDissapearTicks; // 0x18C
	private int mLiveColorChange; // 0x190
	private int mAppearTicks; // 0x194
	private int mWingChangeTicks; // 0x198
	private int mReverseWingChangeTicks; // 0x19C
	private int mPauseTicks; // 0x1A0
	private int mReplayTicks; // 0x1A4
	private float mSmoothStep; // 0x1A8
	private float mCurveStep; // 0x1AC
	public Vector2[] colorHVals; // 0x1B0
	private int mChakra; // 0x1B8
	private int mEnvBeatTicks; // 0x1BC
	private bool mIndicateDeath; // 0x1C0
	private int mTempLevel; // 0x1C4
	private int mMistChangeTicks; // 0x1C8
	public Vector3[] mistColorValue; // 0x1D0
	private int mMistID; // 0x1D8
	private Vector3 mCurrentMistColor; // 0x1DC
	private Vector3 mTempMistColor; // 0x1E8
	private Color mBaseColor; // 0x1F4

	// Constructors
	public TextureAnimator(); // 0x00D2F37C-0x00D2F37C

	// Methods
	private void Awake(); // 0x00D1BB00-0x00D1C4B0
	private void FixedUpdate(); // 0x00D1C4B0-0x00D275FC
	public void ReverseChangeColor(); // 0x00D275FC-0x00D27638
	public void ForwardChangeColor(int l); // 0x00D27B54-0x00D27B68
	public void DeadColorChange(); // 0x00D27B68-0x00D27B78
	public void PlayColorChange(); // 0x00D27B78-0x00D27BA4
	public void ChangeColor(); // 0x00D27BA4-0x00D27BE4
	private void GrowWing(); // 0x00D27BE4-0x00D27C08
	public void ChangeMat(int i, int level); // 0x00D27C08-0x00D2CA4C
	private void ResetAllMats(); // 0x00D27638-0x00D27B54
	[DoNotRename] // 0x003E1E84-0x003E1E94
	public void IndicateDeath(bool Turn_on); // 0x00D2CA4C-0x00D2CA74
	[DoNotRename] // 0x003E1E94-0x003E1EA4
	public void CallPause(); // 0x00D2CA74-0x00D2CA7C
	[DoNotRename] // 0x003E1EA4-0x003E1EB4
	public void CallRepaly(); // 0x00D2CA7C-0x00D2CAA8
	public void Reset(); // 0x00D2CAA8-0x00D2D2D0
	public void Reset(int id); // 0x00D2D2D0-0x00D2ED94
	public Color GetLevelColor(int l); // 0x00D2ED94-0x00D2EDFC
	public void SetChangeMist(int mst); // 0x00D2EDFC-0x00D2EE08
	public void SetSkyBox(int i); // 0x00D2EE08-0x00D2F37C
}

public class ToggleButtonEffect : MonoBehaviour // TypeDefIndex: 3717
{
	// Fields
	private float mSmoothStep; // 0x18
	private Color mBgColor; // 0x1C
	private Color mFgColor; // 0x2C
	public Toggle button; // 0x40
	public UnityEngine.UI.Image Bgimage; // 0x48
	public UnityEngine.UI.Image Fgimage; // 0x50
	private float mTimeLimit; // 0x58

	// Constructors
	public ToggleButtonEffect(); // 0x00BF51BC-0x00BF51C4

	// Methods
	private void Awake(); // 0x00BF4DB8-0x00BF4DFC
	private void OnEnable(); // 0x00BF4DFC-0x00BF4F44
	private void OnDisable(); // 0x00BF4F44-0x00BF4FAC
	private void Update(); // 0x00BF4FAC-0x00BF51BC
}

public class TrackAssetManager : MonoBehaviour // TypeDefIndex: 3718
{
	// Fields
	public Color[] RainbowColor; // 0x18
	public Material BoundlessMat; // 0x20
	private int mBoundlessID; // 0x28
	public bool isStaticObs; // 0x2C
	public bool CanSetPortal; // 0x2D
	public Transform[] DyAssetAry; // 0x30
	public Transform[] RedBlockAry; // 0x38
	public SkelitonData[] SkelitonAry; // 0x40
	public LerpMover mLerpMover; // 0x48
	private static TrackAssetManager mInstance; // 0x00
	private Transform RotHndleT; // 0x50
	private int[] mAllIDs; // 0x58
	private int[] mAllPOs; // 0x60
	private int mUsingIdTop; // 0x68
	private int mUsingPo_IdTop; // 0x6C
	private int mLastFilledTop; // 0x70
	private int mDyAssetAryTop; // 0x74
	private bool mResetAssets; // 0x78
	private int mAssetAryStartI; // 0x7C
	private int mAssetAryTempI; // 0x80
	private bool mSetNextAssets; // 0x84
	private int[] mPathDataRef; // 0x88
	private int mPathPointIndex; // 0x90
	private int mPathPointIndexEnd; // 0x94
	private int mPathDataIndexIncVal; // 0x98
	private int mReturnIncVal; // 0x9C
	private int mPathCurrntOri; // 0xA0
	private int mPathDataIndex; // 0xA4
	private int mObSt; // 0xA8
	private int mObEd; // 0xAC
	private int[] mObsTops; // 0xB0
	private int mPathStartIndex; // 0xB8
	private int mLeftObID; // 0xBC
	private int mMiddleObID; // 0xC0
	private int mRightObID; // 0xC4
	private int mSkelitonTop; // 0xC8
	private int mRedBlockTop; // 0xCC
	private int mRedCirculerBlockTop; // 0xD0
	private int mObstacleType; // 0xD4
	private int mObstacaleCount; // 0xD8
	public int ObstacleLIMIT; // 0xDC
	private int mPatternTop; // 0xE0
	private int[,] mPatternDataAry; // 0xE8
	private int mLevel; // 0xF0
	private int mPortalID; // 0xF4
	private ObstacleLoadDelegate obstacleLoadDelegate; // 0xF8
	private int[] mObsIdCircule; // 0x100
	private bool mBoundlessMode; // 0x108

	// Properties
	public static TrackAssetManager Instance { get; } // 0x00BF51C4-0x00BF5214 
	public int PortalID { set; } // 0x00BF5214-0x00BF521C

	// Nested types
	private delegate void ObstacleLoadDelegate(); // TypeDefIndex: 3719; 0x00BF757C-0x00BF797C

	// Constructors
	public TrackAssetManager(); // 0x00BFF2B4-0x00BFF2C8

	// Methods
	private void Awake(); // 0x00BF521C-0x00BF53EC
	private int SetAsset(int po_ind, int ori, int pathState); // 0x00BF53FC-0x00BF757C
	private void LoadStaticPattern(); // 0x00BF797C-0x00BF87F0
	private void LoadDynamicPattern(); // 0x00BF87F0-0x00BF8D40
	private void LoadFocusPattern(); // 0x00BF8D40-0x00BF9B70
	private void LoadStaticCirculerPattern(); // 0x00BF9B70-0x00BFBE20
	private void LoadDynamicCirculerPattern(); // 0x00BFBE20-0x00BFC840
	private void LoadFocusCirculerPattern(); // 0x00BFC840-0x00BFEAA8
	public void ResetPrevAssets(); // 0x00BFEAA8-0x00BFEAF0
	public void ResetAllAssets(); // 0x00BFEAF0-0x00BFED44
	private void FixedUpdate(); // 0x00BFED44-0x00BFEF50
	public void SetAssetInit(int StInd, int EdInt, bool StoE, int PathOrientation, PathPatch patch); // 0x00BFEF50-0x00BFEFE0
	public void SetHardness(int i); // 0x00BFEFE0-0x00BFF0BC
	public void DeactivateNextAnimation(int Po_i); // 0x00BFF0BC-0x00BFF23C
	public void RestForFallBack(); // 0x00BFF23C-0x00BFF270
	public void ResetGame(int i = 0 /* Metadata: 0x0021CB0E */); // 0x00BFF270-0x00BFF2B4
}

public class AbilitiesEnable : MonoBehaviour // TypeDefIndex: 3720
{
	// Fields
	public UnityEngine.UI.Image[] ImageAry; // 0x18
	public UnityEngine.UI.Text[] TextAry; // 0x20
	public Button[] BtnAry; // 0x28

	// Constructors
	public AbilitiesEnable(); // 0x00433688-0x00433690

	// Methods
	private void OnEnable(); // 0x004331D8-0x00433688
}

public class AddBlockScreen : MonoBehaviour // TypeDefIndex: 3721
{
	// Fields
	public GameObject BlockPanel; // 0x18

	// Constructors
	public AddBlockScreen(); // 0x004336C4-0x004336CC

	// Methods
	private void OnEnable(); // 0x00433690-0x004336C4
}

public class ARGameUniCoder : MonoBehaviour // TypeDefIndex: 3722
{
	// Fields
	public string sinhalaTxt; // 0x18
	public string EnglishTxt; // 0x20
	public string TamilTxt; // 0x28

	// Constructors
	public ARGameUniCoder(); // 0x004301D4-0x004301DC

	// Methods
	private void OnEnable(); // 0x0042FF1C-0x00430184
}

public class ARInGameFontChanger : MonoBehaviour // TypeDefIndex: 3723
{
	// Fields
	public GameController gameController; // 0x18
	public bool isAward; // 0x20

	// Constructors
	public ARInGameFontChanger(); // 0x00430374-0x0043037C

	// Methods
	private void OnEnable(); // 0x004301DC-0x00430374
}

public class ARMegaWheelEnable : MonoBehaviour // TypeDefIndex: 3724
{
	// Fields
	public UnityEngine.UI.Text RewardTXT; // 0x18
	public UnityEngine.UI.Image Reward_Image; // 0x20
	public Sprite RewardSprite; // 0x28
	public Sprite BombSprite; // 0x30

	// Constructors
	public ARMegaWheelEnable(); // 0x00430644-0x0043064C

	// Methods
	private void OnEnable(); // 0x0043037C-0x004305E4
	public void setGift(int gift); // 0x004305E4-0x00430644
}

public class ARUniCoder : MonoBehaviour // TypeDefIndex: 3725
{
	// Fields
	public string sinhalaTxt; // 0x18
	public string EnglishTxt; // 0x20
	public string TamilTxt; // 0x28
	public GameController controller; // 0x30

	// Constructors
	public ARUniCoder(); // 0x00430ECC-0x00430ED4

	// Methods
	private void OnEnable(); // 0x00430CF4-0x00430ECC
}

public class BuyAbilitiesEnable : MonoBehaviour // TypeDefIndex: 3726
{
	// Fields
	public UnityEngine.UI.Text LBL; // 0x18
	public GameObject PinPanel; // 0x20
	public Button PinBtn; // 0x28
	private int m_id; // 0x30

	// Constructors
	public BuyAbilitiesEnable(); // 0x0043595C-0x00435964

	// Methods
	[DoNotRename] // 0x003E1EB4-0x003E1EC4
	public void OpenBuyDialog(int id); // 0x00435408-0x00435668
	[DoNotRename] // 0x003E1EC4-0x003E1ED4
	public void Click_BuyFormCoins(); // 0x00435668-0x0043571C
	[DoNotRename] // 0x003E1ED4-0x003E1EE4
	public void Click_BuyFormDrawPoints(); // 0x0043571C-0x004357D0
	[DoNotRename] // 0x003E1EE4-0x003E1EF4
	public void Click_BuyFormScratchCard(); // 0x004357D0-0x0043595C
}

public class BuyCharacterEnable : MonoBehaviour // TypeDefIndex: 3727
{
	// Fields
	public UnityEngine.UI.Text LBL; // 0x18
	public GameObject PinPanel; // 0x20
	public Button PinBtn; // 0x28
	private int m_id; // 0x30
	private int m_Coins; // 0x34

	// Constructors
	public BuyCharacterEnable(); // 0x00435DBC-0x00435DC4

	// Methods
	[DoNotRename] // 0x003E1EF4-0x003E1F04
	public void OpenBuyDialog(int id); // 0x00435964-0x00435AC4
	[DoNotRename] // 0x003E1F04-0x003E1F14
	public void Click_BuyFormCoins(); // 0x00435AC4-0x00435B7C
	[DoNotRename] // 0x003E1F14-0x003E1F24
	public void Click_BuyFormDrawPoints(); // 0x00435B7C-0x00435C30
	[DoNotRename] // 0x003E1F24-0x003E1F34
	public void Click_BuyFormScratchCard(); // 0x00435C30-0x00435DBC
}

public class CountDown : MonoBehaviour // TypeDefIndex: 3728
{
	// Fields
	public ButtonEffect PauseButton; // 0x18
	public UnityEngine.UI.Text CounterLBL; // 0x20
	public InputManager inputManager; // 0x28
	private int mCount; // 0x30
	private int mTm; // 0x34
	private float mSmoothStep; // 0x38
	private bool mPlay; // 0x3C

	// Constructors
	public CountDown(); // 0x0043D23C-0x0043D244

	// Methods
	private void Awake(); // 0x0043CEEC-0x0043CF9C
	[DoNotRename] // 0x003E1F34-0x003E1F44
	public void SetTimer(); // 0x0043CF9C-0x0043D064
	private void FixedUpdate(); // 0x0043D064-0x0043D228
	private void LateUpdate(); // 0x0043D228-0x0043D23C
}

public class DailyLeaderBoardEnable : MonoBehaviour // TypeDefIndex: 3729
{
	// Constructors
	public DailyLeaderBoardEnable(); // 0x0043F314-0x0043F31C

	// Methods
	private void OnEnable(); // 0x0043F258-0x0043F294
	[DoNotRename] // 0x003E1F44-0x003E1F54
	public void ChangeDay(int i); // 0x0043F294-0x0043F2D4
	[DoNotRename] // 0x003E1F54-0x003E1F64
	public void ChangeData(int i); // 0x0043F2D4-0x0043F314
}

public class DialogManager : MonoBehaviour // TypeDefIndex: 3730
{
	// Constructors
	public DialogManager(); // 0x0043F794-0x0043F79C

	// Methods
	private void OnEnable(); // 0x0043F700-0x0043F794
}

public class EnableCoinVal : MonoBehaviour // TypeDefIndex: 3731
{
	// Constructors
	public EnableCoinVal(); // 0x0043FC84-0x0043FC8C

	// Methods
	private void OnEnable(); // 0x0043FB98-0x0043FC84
}

public class InGameFontChanger : MonoBehaviour // TypeDefIndex: 3732
{
	// Constructors
	public InGameFontChanger(); // 0x007F6390-0x007F6398

	// Methods
	private void OnEnable(); // 0x007F612C-0x007F6340
}

public class InGameSettingsEnable : MonoBehaviour // TypeDefIndex: 3733
{
	// Fields
	public Toggle[] ToggleAry; // 0x18

	// Constructors
	public InGameSettingsEnable(); // 0x007F64B0-0x007F64B8

	// Methods
	private void OnEnable(); // 0x007F6398-0x007F64B0
}

public class InGameUniCoder : MonoBehaviour // TypeDefIndex: 3734
{
	// Fields
	public string sinhalaTxt; // 0x18
	public string EnglishTxt; // 0x20
	public string TamilTxt; // 0x28

	// Constructors
	public InGameUniCoder(); // 0x007F6720-0x007F6728

	// Methods
	private void OnEnable(); // 0x007F64B8-0x007F6720
}

public class InitLoader : MonoBehaviour // TypeDefIndex: 3735
{
	// Fields
	public string URL_TXT; // 0x18
	public string TestURL_TXT; // 0x20
	public GameObject ServicesPanel; // 0x28
	public GameObject rootPanel; // 0x30
	private int i; // 0x38

	// Nested types
	[Serializable]
	private struct FromJsonOBHealth // TypeDefIndex: 3736
	{
		// Fields
		public string version; // 0x00
		public string newest_version; // 0x08
		public bool force_update; // 0x10
	}

	[Serializable]
	private struct FromJsonOBTest // TypeDefIndex: 3737
	{
		// Fields
		public string version; // 0x00
		public string newest_version; // 0x08
		public bool force_update; // 0x10
	}

	[CompilerGenerated] // 0x003DF6A4-0x003DF6B4
	private sealed class <UserReveiwServiceCall>d__9 : IEnumerator<object> // TypeDefIndex: 3738
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public InitLoader <>4__this; // 0x20
		private UnityWebRequest <w>5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003E20C0-0x003E20D0 */ get; } // 0x007F78F0-0x007F78F8 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003E20E0-0x003E20F0 */ get; } // 0x007F7960-0x007F7AE0 

		// Constructors
		[DebuggerHidden] // 0x003E20A0-0x003E20B0
		public <UserReveiwServiceCall>d__9(int <>1__state); // 0x007F691C-0x007F6948

		// Methods
		[DebuggerHidden] // 0x003E20B0-0x003E20C0
		void IDisposable.Dispose(); // 0x007F7628-0x007F762C
		private bool MoveNext(); // 0x007F762C-0x007F78F0
		[DebuggerHidden] // 0x003E20D0-0x003E20E0
		void IEnumerator.Reset(); // 0x007F78F8-0x007F7960
	}

	[CompilerGenerated] // 0x003DF6B4-0x003DF6C4
	private sealed class <TestCall>d__14 : IEnumerator<object> // TypeDefIndex: 3739
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public InitLoader <>4__this; // 0x20
		private UnityWebRequest <w>5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003E2110-0x003E2120 */ get; } // 0x007F75B0-0x007F75B8 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003E2130-0x003E2140 */ get; } // 0x007F7620-0x007F7628 

		// Constructors
		[DebuggerHidden] // 0x003E20F0-0x003E2100
		public <TestCall>d__14(int <>1__state); // 0x007F6EF0-0x007F6F1C

		// Methods
		[DebuggerHidden] // 0x003E2100-0x003E2110
		void IDisposable.Dispose(); // 0x007F7284-0x007F7288
		private bool MoveNext(); // 0x007F7288-0x007F75B0
		[DebuggerHidden] // 0x003E2120-0x003E2130
		void IEnumerator.Reset(); // 0x007F75B8-0x007F7620
	}

	[CompilerGenerated] // 0x003DF6C4-0x003DF6D4
	private sealed class <OldTestCall>d__15 : IEnumerator<object> // TypeDefIndex: 3740
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public InitLoader <>4__this; // 0x20
		private UnityWebRequest <w>5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003E2160-0x003E2170 */ get; } // 0x007F720C-0x007F7214 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003E2180-0x003E2190 */ get; } // 0x007F727C-0x007F7284 

		// Constructors
		[DebuggerHidden] // 0x003E2140-0x003E2150
		public <OldTestCall>d__15(int <>1__state); // 0x007F6F90-0x007F6FBC

		// Methods
		[DebuggerHidden] // 0x003E2150-0x003E2160
		void IDisposable.Dispose(); // 0x007F6FC4-0x007F6FC8
		private bool MoveNext(); // 0x007F6FC8-0x007F720C
		[DebuggerHidden] // 0x003E2170-0x003E2180
		void IEnumerator.Reset(); // 0x007F7214-0x007F727C
	}

	// Constructors
	public InitLoader(); // 0x007F6FBC-0x007F6FC4

	// Methods
	private void Awake(); // 0x007F6728-0x007F672C
	private void Start(); // 0x007F672C-0x007F6804
	private void FixedUpdate(); // 0x007F6830-0x007F68A8
	[IteratorStateMachine] // 0x003E1F64-0x003E1FC8
	private IEnumerator UserReveiwServiceCall(); // 0x007F68A8-0x007F691C
	[DoNotRename] // 0x003E1FC8-0x003E1FD8
	public void CallService(); // 0x007F6804-0x007F6830
	private void Chk(); // 0x007F6948-0x007F6A8C
	private string Md5Sum(); // 0x007F6A8C-0x007F6E7C
	[IteratorStateMachine] // 0x003E1FD8-0x003E203C
	private IEnumerator TestCall(); // 0x007F6E7C-0x007F6EF0
	[IteratorStateMachine] // 0x003E203C-0x003E20A0
	private IEnumerator OldTestCall(); // 0x007F6F1C-0x007F6F90
}

public class LanEnable : MonoBehaviour // TypeDefIndex: 3741
{
	// Fields
	public Toggle[] ToggleAry; // 0x18

	// Constructors
	public LanEnable(); // 0x008033AC-0x008033B4

	// Methods
	private void OnEnable(); // 0x008032F4-0x008033AC
}

public class LeaderBoardEnable : MonoBehaviour // TypeDefIndex: 3742
{
	// Constructors
	public LeaderBoardEnable(); // 0x008033E8-0x008033F0

	// Methods
	private void OnEnable(); // 0x008033B4-0x008033E8
}

public class MegaWheelEnable : MonoBehaviour // TypeDefIndex: 3743
{
	// Fields
	public InputManager inputmanager; // 0x18
	public UnityEngine.UI.Text CoinLBL; // 0x20
	public UnityEngine.UI.Text RewardTXT; // 0x28
	public UnityEngine.UI.Image Reward_Image; // 0x30
	public Sprite[] RewardSprites; // 0x38

	// Constructors
	public MegaWheelEnable(); // 0x008196B8-0x008196C0

	// Methods
	private void OnEnable(); // 0x008193DC-0x008196B8
}

public class OTPManager : MonoBehaviour // TypeDefIndex: 3744
{
	// Fields
	private int timer; // 0x18
	private int attempts; // 0x1C
	private bool isTimer; // 0x20
	private WaitForSeconds secs; // 0x28
	public UnityEngine.UI.Text timerText; // 0x30
	public UnityEngine.UI.Text attemptsText; // 0x38
	public GameObject PINSubmitButton; // 0x40
	private Coroutine timerRoutine; // 0x48

	// Nested types
	[CompilerGenerated] // 0x003DF6D4-0x003DF6E4
	private sealed class <OTPTimer>d__10 : IEnumerator<object> // TypeDefIndex: 3745
	{
		// Fields
		private int <>1__state; // 0x10
		private object <>2__current; // 0x18
		public OTPManager <>4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003E2214-0x003E2224 */ get; } // 0x00819BE8-0x00819BF0 
		object IEnumerator.Current { [DebuggerHidden] /* 0x003E2234-0x003E2244 */ get; } // 0x00819C58-0x00819C60 

		// Constructors
		[DebuggerHidden] // 0x003E21F4-0x003E2204
		public <OTPTimer>d__10(int <>1__state); // 0x0081978C-0x008197B8

		// Methods
		[DebuggerHidden] // 0x003E2204-0x003E2214
		void IDisposable.Dispose(); // 0x00819A4C-0x00819A50
		private bool MoveNext(); // 0x00819A50-0x00819BE8
		[DebuggerHidden] // 0x003E2224-0x003E2234
		void IEnumerator.Reset(); // 0x00819BF0-0x00819C58
	}

	// Constructors
	public OTPManager(); // 0x008199E0-0x00819A4C

	// Methods
	private void Start(); // 0x008196C0-0x008196C4
	private void Update(); // 0x008196C4-0x008196E4
	[IteratorStateMachine] // 0x003E2190-0x003E21F4
	public IEnumerator OTPTimer(); // 0x00819718-0x0081978C
	public void startTimer(); // 0x008197B8-0x008198F8
	public void expireTimer(); // 0x008196E4-0x00819718
	public void reduceAttempt(); // 0x008198F8-0x008199E0
}

public class PanelLanguageManager : MonoBehaviour // TypeDefIndex: 3746
{
	// Constructors
	public PanelLanguageManager(); // 0x00D0761C-0x00D07624

	// Methods
	private void OnEnable(); // 0x00D07588-0x00D0761C
}

public class ProfileEnable : MonoBehaviour // TypeDefIndex: 3747
{
	// Fields
	public UnityEngine.UI.Text[] LblAry; // 0x18

	// Constructors
	public ProfileEnable(); // 0x00D07F00-0x00D07F08

	// Methods
	private void OnEnable(); // 0x00D07A40-0x00D07DC8
}

public class RootChecker : MonoBehaviour // TypeDefIndex: 3748
{
	// Constructors
	public RootChecker(); // 0x00D08D14-0x00D08D1C

	// Methods
	private void Start(); // 0x00D08878-0x00D0887C
	private void Update(); // 0x00D0887C-0x00D08880
	public static bool isRooted(); // 0x00D08880-0x00D08960
	public static bool IsEmulator(); // 0x00D08968-0x00D08D14
	public static bool isRootedPrivate(string path); // 0x00D08960-0x00D08968
}

public static class ScoreManager // TypeDefIndex: 3749
{
	// Fields
	private static int mCoinReviveCount; // 0x00
	private static int mDrawPointReviveCount; // 0x04
	private static int mDataPackReviveCount; // 0x08
	private static int mScractchCardReviveCount; // 0x0C
	private static int mRemainingCoinCount; // 0x10
	private static int mRemainingDiamonds; // 0x14
	private static int mCoinCount; // 0x18
	private static int mDistance; // 0x1C
	private static int mMultiplyVal; // 0x20
	private static int mShieldVal; // 0x24
	private static int mMagnetVal; // 0x28
	public static int mBoostVal; // 0x2C
	public static int LanID; // 0x30
	public static int CharacterID; // 0x34
	public static bool SFX_OFF; // 0x38
	public static bool MUSIC_OFF; // 0x39
	public static bool IsATM_available; // 0x3A
	private static int mHighScore; // 0x3C
	private static int mHighScoreAR; // 0x40
	public static int MegaDrawPoints; // 0x44
	public static string TempString; // 0x48
	public static bool Show_Reward; // 0x50
	public static bool Show_Wheel_Reward; // 0x51
	public static int DailyChallengeID; // 0x54
	public static int DailyChallengeAmount; // 0x58
	public static string DailyChallengeServiceID; // 0x60
	public static bool tuteOn; // 0x68
	public static bool tuteOnAR; // 0x69
	public static int TempInt; // 0x6C
	public static bool isPrepaid; // 0x70
	public static bool isPostpaid; // 0x71
	public static bool isReview; // 0x72

	// Properties
	public static int CoinReviveCount { get; set; } // 0x00D09B1C-0x00D09B84 0x00D09BD4-0x00D09C54
	public static int DrawPointReviveCount { get; set; } // 0x00D09CA4-0x00D09D0C 0x00D09D0C-0x00D09D8C
	public static int DataPackReviveCount { get; set; } // 0x00D09D8C-0x00D09DF4 0x00D09DF4-0x00D09E74
	public static int ScractchCardReviveCount { get; set; } // 0x00D09E74-0x00D09EDC 0x00D09EDC-0x00D09F5C
	public static int RemainingCoinCount { get; set; } // 0x00D07DC8-0x00D07E30 0x00D095D4-0x00D09654
	public static int RemainingDiamonds { get; set; } // 0x00D09F5C-0x00D09FC4 0x00D09FC4-0x00D0B044
	public static int CoinCount { get; set; } // 0x00D0956C-0x00D095D4 0x00D0B044-0x00D0B0C4
	public static int Distance { get; set; } // 0x00D09504-0x00D0956C 0x00D0B0C4-0x00D0B144
	public static int MultiplyVal { get; set; } // 0x00D0B144-0x00D0B1AC 0x00D0B1AC-0x00D0B22C
	public static int ShieldVal { get; set; } // 0x00D0B22C-0x00D0B294 0x00D0B294-0x00D0B314
	public static int MagnetVal { get; set; } // 0x00D0B314-0x00D0B37C 0x00D0B37C-0x00D0B3FC
	public static int BoostVal { get; set; } // 0x00D0B3FC-0x00D0B464 0x00D0B464-0x00D0B4E4
	public static int HighScore { get; set; } // 0x00D07E30-0x00D07E98 0x00D09A8C-0x00D09B0C
	public static int HighScoreAR { get; set; } // 0x00D07E98-0x00D07F00 0x00D0B4E4-0x00D0B564

	// Constructors
	static ScoreManager(); // 0x00D0B564-0x00D0B568

	// Methods
	private static int Shuffle(int x); // 0x00D09C54-0x00D09CA4
	private static int Unshuffle(int x); // 0x00D09B84-0x00D09BD4
}

public class ScoreUniCoder : MonoBehaviour // TypeDefIndex: 3750
{
	// Fields
	public string sinhalaTxt; // 0x18
	public string EnglishTxt; // 0x20
	public string TamilTxt; // 0x28

	// Constructors
	public ScoreUniCoder(); // 0x00D0B740-0x00D0B748

	// Methods
	private void OnEnable(); // 0x00D0B568-0x00D0B740
}

public class SettingsEnable : MonoBehaviour // TypeDefIndex: 3751
{
	// Fields
	public Toggle[] ToggleAry; // 0x18

	// Constructors
	public SettingsEnable(); // 0x00D12A68-0x00D12A70

	// Methods
	private void OnEnable(); // 0x00D12818-0x00D12A68
}

public class UniCoder : MonoBehaviour // TypeDefIndex: 3752
{
	// Fields
	public string sinhalaTxt; // 0x18
	public string EnglishTxt; // 0x20
	public string TamilTxt; // 0x28
	private int mLanID; // 0x30

	// Constructors
	public UniCoder(); // 0x00C05830-0x00C05838

	// Methods
	private void Awake(); // 0x00C055E0-0x00C055E4
	private void OnEnable(); // 0x00C055E4-0x00C05830
}

public class VolumeController : MonoBehaviour // TypeDefIndex: 3753
{
	// Fields
	public AudioSource audioSource; // 0x18
	private bool mVolUp; // 0x20
	private float mTimeLimit; // 0x24
	private float mSmoothStep; // 0x28

	// Constructors
	public VolumeController(); // 0x00C059F4-0x00C059FC

	// Methods
	public void VolumeUp(bool st); // 0x00C05838-0x00C058C0
	private void OnEnable(); // 0x00C058C0-0x00C058C8
	private void Update(); // 0x00C058C8-0x00C059F4
}

public class ARWheel : MonoBehaviour // TypeDefIndex: 3754
{
	// Fields
	public UnityEngine.UI.Text WheelTXT; // 0x18
	public Animator RewardAni; // 0x20
	public GameController gameController; // 0x28
	public GameObject SkipButton; // 0x30
	public GameObject SpinButton; // 0x38
	public GameObject RewardPanel; // 0x40
	private float mAngle; // 0x48
	private float mSmoothStep; // 0x4C
	private int mI; // 0x50
	private int mIlimit; // 0x54
	private int mS; // 0x58
	private bool mSpeedUp; // 0x5C
	private bool mSpeedDown; // 0x5D
	private bool mStop; // 0x5E
	private int gift; // 0x60

	// Constructors
	public ARWheel(); // 0x00432970-0x00432978

	// Methods
	[DoNotRename] // 0x003E2244-0x003E2254
	public void SetWheel(bool win); // 0x00430ED4-0x00430F58
	[DoNotRename] // 0x003E2254-0x003E2264
	public void SpinWheel(); // 0x00430F58-0x004321E8
	private void FixedUpdate(); // 0x00432214-0x00432970
}

public class Wheel : MonoBehaviour // TypeDefIndex: 3755
{
	// Fields
	public UnityEngine.UI.Text WheelTXT; // 0x18
	public Animator RewardAni; // 0x20
	public InputManager inputManager; // 0x28
	public GameObject SkipButton; // 0x30
	public GameObject SpinButton; // 0x38
	public GameObject RewardPanel; // 0x40
	private float mAngle; // 0x48
	private float mSmoothStep; // 0x4C
	private int mI; // 0x50
	private int mIlimit; // 0x54
	private int mS; // 0x58
	private bool mSpeedUp; // 0x5C
	private bool mSpeedDown; // 0x5D
	private bool mStop; // 0x5E

	// Constructors
	public Wheel(); // 0x00C063AC-0x00C063B4

	// Methods
	[DoNotRename] // 0x003E2264-0x003E2274
	public void SetWheel(bool win); // 0x00C059FC-0x00C05A80
	[DoNotRename] // 0x003E2274-0x003E2284
	public void SpinWheel(); // 0x00C05A80-0x00C05D0C
	private void FixedUpdate(); // 0x00C05D0C-0x00C063AC
}

public class WheelKeyHand : MonoBehaviour // TypeDefIndex: 3756
{
	// Fields
	public Transform startMarker; // 0x18
	public Transform endMarker; // 0x20
	public float speed; // 0x28
	private float startTime; // 0x2C
	private float journeyLength; // 0x30

	// Constructors
	public WheelKeyHand(); // 0x00C066EC-0x00C066FC

	// Methods
	private void Start(); // 0x00C063B4-0x00C064AC
	private void Update(); // 0x00C064AC-0x00C066EC
}

public class WheelKeyHandler : MonoBehaviour, IBeginDragHandler, IDragHandler, IEndDragHandler // TypeDefIndex: 3757
{
	// Fields
	public GameObject locker; // 0x18
	public Transform minY; // 0x20
	public Transform maxY; // 0x28
	private Vector3 startPos; // 0x30
	public UnityEvent successEvents; // 0x40
	public UnityEvent InitEvents; // 0x48
	public GameObject guideText; // 0x50

	// Constructors
	public WheelKeyHandler(); // 0x00C06D04-0x00C06D0C

	// Methods
	private void Start(); // 0x00C066FC-0x00C06700
	public void ResetPositions(); // 0x00C06700-0x00C06928
	private void Update(); // 0x00C06928-0x00C0692C
	public void OnDrag(PointerEventData eventData); // 0x00C0692C-0x00C06994
	public void OnEndDrag(PointerEventData eventData); // 0x00C06994-0x00C06B04
	public void OnBeginDrag(PointerEventData eventData); // 0x00C06BD0-0x00C06C14
	public void HideButtons(); // 0x00C06B04-0x00C06BD0
	public void ShowButtons(); // 0x00C06C14-0x00C06D04
}

public class HSV : MonoBehaviour // TypeDefIndex: 3758
{
	// Fields
	public float H; // 0x18
	public Material HSV_MAT; // 0x20
	private float mH; // 0x28
	private float mS; // 0x2C
	private float mV; // 0x30

	// Constructors
	public HSV(); // 0x0044C34C-0x0044C354

	// Methods
	private void Start(); // 0x0044C2CC-0x0044C2D0
	private void Update(); // 0x0044C2D0-0x0044C2D4
	public void ChangeColor(float i); // 0x0044C2D4-0x0044C34C
}

public class AR_Counter_2 : MonoBehaviour // TypeDefIndex: 3759
{
	// Fields
	public UnityEngine.UI.Text CounterLBL; // 0x18
	public TriGameController inputManager; // 0x20
	private int mCount; // 0x28
	private int mTm; // 0x2C
	private float mSmoothStep; // 0x30

	// Constructors
	public AR_Counter_2(); // 0x00432DAC-0x00432DB4

	// Methods
	private void Awake(); // 0x00432978-0x004329F4
	[DoNotRename] // 0x003E2284-0x003E2294
	public void SetTimer(); // 0x004329F4-0x00432AB8
	private void FixedUpdate(); // 0x00432AB8-0x00432C64
	private void LateUpdate(); // 0x00432C64-0x00432C78
	public void StartCount(); // 0x00432C78-0x00432D30
	public void StopCount(); // 0x00432D30-0x00432DAC
}

public class Coins1 : MonoBehaviour // TypeDefIndex: 3760
{
	// Constructors
	public Coins1(); // 0x0043CE18-0x0043CE20

	// Methods
	private void FixedUpdate(); // 0x0043CDA8-0x0043CE18
}

public class Faller : MonoBehaviour // TypeDefIndex: 3761
{
	// Fields
	public TriGameController triGameController; // 0x18
	public OB_T ob_T; // 0x20
	public Vector3[] SpawnPoints; // 0x28
	public int TickLimit; // 0x30
	private float mSmoothStep; // 0x34
	private int mTicks; // 0x38
	private float mStepFac; // 0x3C
	private Vector3 mStartPoint; // 0x40
	private Vector3 mEndOffsetV; // 0x4C
	private int DecVal; // 0x58

	// Nested types
	public enum OB_T // TypeDefIndex: 3762
	{
		type_1 = 0,
		type_2 = 1,
		type_3 = 2,
		bomb = 3
	}

	// Constructors
	public Faller(); // 0x00448524-0x0044852C

	// Methods
	private void Awake(); // 0x00447FFC-0x004480C4
	private void FixedUpdate(); // 0x004480C4-0x00448264
	public void Spawn(int poID); // 0x00448388-0x00448450
	public void End(); // 0x00448264-0x00448388
	public void ShootHit(); // 0x00448450-0x00448524
}

public class TriGameController : MonoBehaviour // TypeDefIndex: 3763
{
	// Fields
	public GameObject GameOverPanel; // 0x18
	public UnityEngine.UI.Image EnergyValImage; // 0x20
	public AudioManager audioManager; // 0x28
	public bool Playing; // 0x30
	public AR_Counter_2 Counter_2; // 0x38
	public ParticleSystem SpawnParticleSystem; // 0x40
	public ParticleSystem[] ParticleAry; // 0x48
	private int mSpawnParticleIndex; // 0x50
	private int mHitParticleIndex; // 0x54
	public int EnergyVAl; // 0x58
	public Faller[] mFallerAry; // 0x60
	private int[] mObsTypeIDAry; // 0x68
	public Camera Cam; // 0x70
	private int mMaxDistance; // 0x78
	private int mLayerMask; // 0x7C
	private int mTicks; // 0x80
	private int mLastTicks; // 0x84
	private int mFinishedOBs; // 0x88
	private bool mGameOver; // 0x8C

	// Constructors
	public TriGameController(); // 0x00BFFF4C-0x00BFFF54

	// Methods
	private void Start(); // 0x00BFF308-0x00BFF388
	private void Update(); // 0x00BFF388-0x00BFF404
	private void FixedUpdate(); // 0x00BFF6E8-0x00BFF804
	private void Shoot(Vector3 po); // 0x00BFF404-0x00BFF69C
	public void ShowFX(Vector3 po); // 0x00BFFD08-0x00BFFE38
	public void FinishedCount(); // 0x00BFFE38-0x00BFFE54
	private void SpawnObjects(); // 0x00BFF804-0x00BFFD08
	public void SetEnergyValue(int Val); // 0x00BFFE54-0x00BFFF14
	public void StartGame(); // 0x00BFFF14-0x00BFFF34
	public void StopGame(); // 0x00BFF6CC-0x00BFF6E8
	public void StartCounter(); // 0x00BFF69C-0x00BFF6CC
	public void Replay(); // 0x00BFFF34-0x00BFFF40
	public void MainMenu(); // 0x00BFFF40-0x00BFFF4C
}

namespace Obfuscator.Demo
{
	public class DemoGui : MonoBehaviour // TypeDefIndex: 3764
	{
		// Constructors
		public DemoGui(); // 0x00D06680-0x00D06688
	
		// Methods
		[DoNotRename] // 0x003E2294-0x003E22A4
		public void GameStart_OnClick(); // 0x00D06498-0x00D06518
		public void GameStart_WithoutAttribute_OnClick(); // 0x00D06518-0x00D06598
		[DoNotRename] // 0x003E22A4-0x003E22B4
		public void EndGame_OnClick(); // 0x00D06598-0x00D0660C
		public void EndGame_WithoutAttribute_OnClick(); // 0x00D0660C-0x00D06680
	}

	public class DemoMonoBehaviour : MonoBehaviour // TypeDefIndex: 3765
	{
		// Fields
		private string methodName; // 0x18
	
		// Nested types
		[CompilerGenerated] // 0x003DF6E4-0x003DF6F4
		private sealed class <MyCoroutine>d__2 : IEnumerator<object> // TypeDefIndex: 3766
		{
			// Fields
			private int <>1__state; // 0x10
			private object <>2__current; // 0x18
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003E239C-0x003E23AC */ get; } // 0x00D06918-0x00D06920 
			object IEnumerator.Current { [DebuggerHidden] /* 0x003E23BC-0x003E23CC */ get; } // 0x00D06988-0x00D06990 
	
			// Constructors
			[DebuggerHidden] // 0x003E237C-0x003E238C
			public <MyCoroutine>d__2(int <>1__state); // 0x00D06828-0x00D06854
	
			// Methods
			[DebuggerHidden] // 0x003E238C-0x003E239C
			void IDisposable.Dispose(); // 0x00D068D8-0x00D068DC
			private bool MoveNext(); // 0x00D068DC-0x00D06918
			[DebuggerHidden] // 0x003E23AC-0x003E23BC
			void IEnumerator.Reset(); // 0x00D06920-0x00D06988
		}
	
		[CompilerGenerated] // 0x003DF6F4-0x003DF704
		private sealed class <MyCoroutine>d__3 : IEnumerator<object> // TypeDefIndex: 3767
		{
			// Fields
			private int <>1__state; // 0x10
			private object <>2__current; // 0x18
			public float _Parameter; // 0x20
			private float <f>5__2; // 0x24
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003E23EC-0x003E23FC */ get; } // 0x00D069FC-0x00D06A04 
			object IEnumerator.Current { [DebuggerHidden] /* 0x003E240C-0x003E241C */ get; } // 0x00D06A6C-0x00D06A74 
	
			// Constructors
			[DebuggerHidden] // 0x003E23CC-0x003E23DC
			public <MyCoroutine>d__3(int <>1__state); // 0x00D06854-0x00D06880
	
			// Methods
			[DebuggerHidden] // 0x003E23DC-0x003E23EC
			void IDisposable.Dispose(); // 0x00D06990-0x00D06994
			private bool MoveNext(); // 0x00D06994-0x00D069FC
			[DebuggerHidden] // 0x003E23FC-0x003E240C
			void IEnumerator.Reset(); // 0x00D06A04-0x00D06A6C
		}
	
		// Constructors
		public DemoMonoBehaviour(); // 0x00D06880-0x00D068D8
	
		// Methods
		private void Awake(); // 0x00D06688-0x00D0674C
		[IteratorStateMachine] // 0x003E22B4-0x003E2318
		private IEnumerator MyCoroutine(); // 0x00D0674C-0x00D067AC
		[IteratorStateMachine] // 0x003E2318-0x003E237C
		private IEnumerator MyCoroutine(float _Parameter); // 0x00D067AC-0x00D06828
	}

	public class DemoNetworkBehaviour : NetworkBehaviour // TypeDefIndex: 3768
	{
		// Fields
		private static int kCmdCmd_NetworkMethod; // 0x00
	
		// Constructors
		public DemoNetworkBehaviour(); // 0x00D06C68-0x00D06CD0
		static DemoNetworkBehaviour(); // 0x00D06E84-0x00D06FA4
	
		// Methods
		private void Awake(); // 0x00D06A74-0x00D06A78
		[Command] // 0x003E241C-0x003E242C
		private void Cmd_NetworkMethod(); // 0x00D06C64-0x00D06C68
		private void CallCmd_MyMethod(); // 0x00D06C60-0x00D06C64
		private void UNetVersion(); // 0x00D06CD0-0x00D06CD4
		protected static void InvokeCmdCmd_NetworkMethod(NetworkBehaviour obj, NetworkReader reader); // 0x00D06CD4-0x00D06E84
		public void CallCmd_NetworkMethod(); // 0x00D06A78-0x00D06C60
		public override bool OnSerialize(NetworkWriter writer, bool forceAll); // 0x00D06FA4-0x00D06FAC
		public override void OnDeserialize(NetworkReader reader, bool initialState); // 0x00D06FAC-0x00D06FB0
	}
}

namespace Obfuscator.Attribute
{
	[AttributeUsage] // 0x003DF704-0x003DF718
	public class DoNotObfuscateClassAttribute : global::System.Attribute // TypeDefIndex: 3769
	{
		// Constructors
		public DoNotObfuscateClassAttribute(); // 0x00D06480-0x00D06488
	}

	[AttributeUsage] // 0x003DF718-0x003DF72C
	public class DoNotObfuscateMethodBodyAttribute : global::System.Attribute // TypeDefIndex: 3770
	{
		// Constructors
		public DoNotObfuscateMethodBodyAttribute(); // 0x00D06488-0x00D06490
	}

	[AttributeUsage] // 0x003DF72C-0x003DF740
	public class DoNotRenameAttribute : global::System.Attribute // TypeDefIndex: 3771
	{
		// Constructors
		public DoNotRenameAttribute(); // 0x00D06490-0x00D06498
	}
}

namespace Facebook.Unity.Example
{
	internal class ConsoleBase : MonoBehaviour // TypeDefIndex: 3772
	{
		// Fields
		private const int DpiScalingFactor = 160; // Metadata: 0x0021CB22
		private static Stack<string> menuStack; // 0x00
		private string status; // 0x18
		private string lastResponse; // 0x20
		private Vector2 scrollPosition; // 0x28
		private float? scaleFactor; // 0x30
		private GUIStyle textStyle; // 0x38
		private GUIStyle buttonStyle; // 0x40
		private GUIStyle textInputStyle; // 0x48
		private GUIStyle labelStyle; // 0x50
		[CompilerGenerated] // 0x003DFA10-0x003DFA20
		private Texture2D <LastResponseTexture>k__BackingField; // 0x58
	
		// Properties
		protected static int ButtonHeight { get; } // 0x00442B04-0x00442B2C 
		protected static int MainWindowWidth { get; } // 0x00442B2C-0x00442B5C 
		protected static int MainWindowFullWidth { get; } // 0x00443070-0x0044309C 
		protected static int MarginFix { get; } // 0x0044309C-0x004430C0 
		protected static Stack<string> MenuStack { get; set; } // 0x004430C0-0x00443128 0x00443128-0x00443194
		protected string Status { get; set; } // 0x00443194-0x0044319C 0x004419C0-0x004419C8
		protected Texture2D LastResponseTexture { [CompilerGenerated] /* 0x003E242C-0x003E243C */ get; [CompilerGenerated] /* 0x003E243C-0x003E244C */ set; } // 0x0044319C-0x004431A4 0x004431A4-0x004431AC
		protected string LastResponse { get; set; } // 0x004431AC-0x004431B4 0x004431B4-0x004431BC
		protected Vector2 ScrollPosition { get; set; } // 0x004431BC-0x004431C4 0x004431C4-0x004431CC
		protected float ScaleFactor { get; } // 0x00442970-0x00442A1C 
		protected int FontSize { get; } // 0x004431CC-0x004432C0 
		protected GUIStyle TextStyle { get; } // 0x004432C0-0x00443474 
		protected GUIStyle ButtonStyle { get; } // 0x00442A1C-0x00442B04 
		protected GUIStyle TextInputStyle { get; } // 0x00443474-0x0044355C 
		protected GUIStyle LabelStyle { get; } // 0x00442888-0x00442970 
	
		// Constructors
		public ConsoleBase(); // 0x00443740-0x004437DC
		static ConsoleBase(); // 0x004437DC-0x00443850
	
		// Methods
		protected virtual void Awake(); // 0x0044355C-0x00443568
		protected bool Button(string label); // 0x00441640-0x004417FC
		protected void LabelAndTextField(string label, ref string text); // 0x0044266C-0x00442888
		protected bool IsHorizontalLayout(); // 0x00443568-0x00443588
		protected void SwitchMenu(Type menuClass); // 0x00443588-0x00443670
		protected void GoBack(); // 0x00443670-0x00443740
	}

	internal class LogView : ConsoleBase // TypeDefIndex: 3773
	{
		// Fields
		private static string datePatt; // 0x00
		private static IList<string> events; // 0x08
	
		// Constructors
		public LogView(); // 0x004450A8-0x0044510C
		static LogView(); // 0x0044510C-0x00445198
	
		// Methods
		public static void AddLog(string log); // 0x004419C8-0x00441B2C
		protected void OnGUI(); // 0x00444D24-0x004450A8
	}

	internal abstract class MenuBase : ConsoleBase // TypeDefIndex: 3774
	{
		// Fields
		private static ShareDialogMode shareDialogMode; // 0x00
	
		// Constructors
		protected MenuBase(); // 0x00441800-0x00441864
	
		// Methods
		protected abstract void GetGui();
		protected virtual bool ShowDialogModeSelector(); // 0x00445E58-0x00445E60
		protected virtual bool ShowBackButton(); // 0x00445E60-0x00445E68
		protected void HandleResult(IResult result); // 0x004445F8-0x004449A4
		protected void OnGUI(); // 0x00445E68-0x00447264
		private void AddStatus(); // 0x00447264-0x004473BC
		private void AddBackButton(); // 0x004473BC-0x004474A8
		private void AddLogButton(); // 0x004474A8-0x0044754C
		private void AddDialogModeButtons(); // 0x0044754C-0x00447898
		private void AddDialogModeButton(ShareDialogMode mode); // 0x00447898-0x00447A14
	}

	internal class AccessTokenMenu : MenuBase // TypeDefIndex: 3775
	{
		// Constructors
		public AccessTokenMenu(); // 0x004417FC-0x00441800
	
		// Methods
		protected override void GetGui(); // 0x004415A0-0x00441640
	}

	internal class AppEvents : MenuBase // TypeDefIndex: 3776
	{
		// Constructors
		public AppEvents(); // 0x00441B2C-0x00441B30
	
		// Methods
		protected override void GetGui(); // 0x00441864-0x004419C0
	}

	internal class AppLinks : MenuBase // TypeDefIndex: 3777
	{
		// Constructors
		public AppLinks(); // 0x00441C54-0x00441C58
	
		// Methods
		protected override void GetGui(); // 0x00441B30-0x00441C54
	}

	internal class AppRequests : MenuBase // TypeDefIndex: 3778
	{
		// Fields
		private string requestMessage; // 0x60
		private string requestTo; // 0x68
		private string requestFilter; // 0x70
		private string requestExcludes; // 0x78
		private string requestMax; // 0x80
		private string requestData; // 0x88
		private string requestTitle; // 0x90
		private string requestObjectID; // 0x98
		private int selectedAction; // 0xA0
		private string[] actionTypeStrings; // 0xA8
	
		// Constructors
		public AppRequests(); // 0x00442D68-0x00443070
	
		// Methods
		protected override void GetGui(); // 0x00441C58-0x0044266C
		private OGActionType? GetSelectedOGActionType(); // 0x00442B5C-0x00442D68
	}

	internal class DialogShare : MenuBase // TypeDefIndex: 3779
	{
		// Fields
		private string shareLink; // 0x60
		private string shareTitle; // 0x68
		private string shareDescription; // 0x70
		private string shareImage; // 0x78
		private string feedTo; // 0x80
		private string feedLink; // 0x88
		private string feedTitle; // 0x90
		private string feedCaption; // 0x98
		private string feedDescription; // 0xA0
		private string feedImage; // 0xA8
		private string feedMediaSource; // 0xB0
	
		// Constructors
		public DialogShare(); // 0x00443F68-0x00444050
	
		// Methods
		protected override bool ShowDialogModeSelector(); // 0x00443850-0x00443858
		protected override void GetGui(); // 0x00443858-0x00443F68
	}

	internal class GraphRequest : MenuBase // TypeDefIndex: 3780
	{
		// Fields
		private string apiQuery; // 0x60
		private Texture2D profilePic; // 0x68
	
		// Nested types
		[CompilerGenerated] // 0x003DF740-0x003DF750
		private sealed class <TakeScreenshot>d__4 : IEnumerator<object> // TypeDefIndex: 3781
		{
			// Fields
			private int <>1__state; // 0x10
			private object <>2__current; // 0x18
			public GraphRequest <>4__this; // 0x20
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x003E24D0-0x003E24E0 */ get; } // 0x00444CAC-0x00444CB4 
			object IEnumerator.Current { [DebuggerHidden] /* 0x003E24F0-0x003E2500 */ get; } // 0x00444D1C-0x00444D24 
	
			// Constructors
			[DebuggerHidden] // 0x003E24B0-0x003E24C0
			public <TakeScreenshot>d__4(int <>1__state); // 0x004449A4-0x004449D0
	
			// Methods
			[DebuggerHidden] // 0x003E24C0-0x003E24D0
			void IDisposable.Dispose(); // 0x00444A2C-0x00444A30
			private bool MoveNext(); // 0x00444A30-0x00444CAC
			[DebuggerHidden] // 0x003E24E0-0x003E24F0
			void IEnumerator.Reset(); // 0x00444CB4-0x00444D1C
		}
	
		// Constructors
		public GraphRequest(); // 0x004449D0-0x00444A2C
	
		// Methods
		protected override void GetGui(); // 0x00444050-0x00444390
		private void ProfilePhotoCallback(IGraphResult result); // 0x00444404-0x004445F8
		[IteratorStateMachine] // 0x003E244C-0x003E24B0
		private IEnumerator TakeScreenshot(); // 0x00444390-0x00444404
	}

	internal sealed class MainMenu : MenuBase // TypeDefIndex: 3782
	{
		// Constructors
		public MainMenu(); // 0x00445E54-0x00445E58
	
		// Methods
		protected override bool ShowBackButton(); // 0x00445198-0x004451A0
		protected override void GetGui(); // 0x004451A0-0x00445928
		private void CallFBLogin(); // 0x00445928-0x00445A90
		private void CallFBLoginForPublish(); // 0x00445A90-0x00445B88
		private void CallFBLogout(); // 0x00445B88-0x00445BE8
		private void OnInitComplete(); // 0x00445BE8-0x00445D64
		private void OnHideUnity(bool isGameShown); // 0x00445D64-0x00445E54
	}

	internal class Pay : MenuBase // TypeDefIndex: 3783
	{
		// Fields
		private string payProduct; // 0x60
	
		// Constructors
		public Pay(); // 0x00447B4C-0x00447BA8
	
		// Methods
		protected override void GetGui(); // 0x00447A14-0x00447A94
		private void CallFBPay(); // 0x00447A94-0x00447B4C
	}
}

[CompilerGenerated] // 0x003DF750-0x003DF760
internal sealed class <PrivateImplementationDetails> // TypeDefIndex: 3784
{
	// Fields
	internal static readonly __StaticArrayInitTypeSize=15 B1128A96753C0B0A4F2FF1F2E92017EC4F6D9973; // 0x00 // Starts with: 30 0d 06 09 2a 86 48 86 - Metadata: 0x0021CB26

	// Nested types
	private struct __StaticArrayInitTypeSize=15 // TypeDefIndex: 3785
	{
	}
}

