/*
 * Generated code file by Il2CppInspector - http://www.djkaty.com - https://github.com/djkaty
 */

using System;
using System.Collections;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Configuration;
using System.Configuration.Assemblies;
using System.Diagnostics;
using System.Diagnostics.Tracing;
using System.Globalization;
using System.IO;
using System.Net;
using System.Net.NetworkInformation;
using System.Net.Security;
using System.Net.Sockets;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.ConstrainedExecution;
using System.Runtime.ExceptionServices;
using System.Runtime.InteropServices;
using System.Runtime.Remoting;
using System.Runtime.Remoting.Activation;
using System.Runtime.Remoting.Contexts;
using System.Runtime.Remoting.Lifetime;
using System.Runtime.Remoting.Messaging;
using System.Runtime.Remoting.Metadata;
using System.Runtime.Remoting.Proxies;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters;
using System.Runtime.Serialization.Formatters.Binary;
using System.Security;
using System.Security.Authentication;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using System.Security.Policy;
using System.Security.Principal;
using System.Security.Util;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Xml;
using System.Xml.XPath;
using DG.Tweening;
using DG.Tweening.Core;
using DG.Tweening.Core.Enums;
using DG.Tweening.Plugins.Core;
using DG.Tweening.Plugins.Core.PathCore;
using DG.Tweening.Plugins.Options;
using Facebook.Unity;
using Facebook.Unity.Canvas;
using Facebook.Unity.Editor;
using Facebook.Unity.Mobile;
using Facebook.Unity.Mobile.Android;
using ImaginationOverflow.UniversalDeepLinking;
using Microsoft.Win32;
using Microsoft.Win32.SafeHandles;
using Mono;
using Mono.Globalization.Unicode;
using Mono.Math;
using Mono.Math.Prime;
using Mono.Net.Security;
using Mono.Security;
using Mono.Security.Cryptography;
using Mono.Security.Interface;
using Mono.Security.X509;
using Mono.Xml;
using Obfuscator.Attribute;
using UnityEngine;
using UnityEngine.Animations;
using UnityEngine.Bindings;
using UnityEngine.Events;
using UnityEngine.EventSystems;
using UnityEngine.Experimental;
using UnityEngine.Experimental.Rendering;
using UnityEngine.Internal;
using UnityEngine.Networking;
using UnityEngine.Networking.Match;
using UnityEngine.Networking.NetworkSystem;
using UnityEngine.Networking.Types;
using UnityEngine.Playables;
using UnityEngine.Rendering;
using UnityEngine.SceneManagement;
using UnityEngine.Scripting;
using UnityEngine.Scripting.APIUpdating;
using UnityEngine.Serialization;
using UnityEngine.U2D;
using UnityEngine.UI;
using UnityEngine.UI.Collections;
using UnityEngine.UI.CoroutineTween;
using UnityEngineInternal;
using Vuforia;
using Vuforia.UnityCompiled;

// Image 0: mscorlib.dll - Assembly: mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089 - Types 0-1445
[assembly: AllowPartiallyTrustedCallers] // 0x001466F0-0x00146ABC
[assembly: AssemblyCompany] // 0x001466F0-0x00146ABC
[assembly: AssemblyCopyright] // 0x001466F0-0x00146ABC
[assembly: AssemblyDefaultAlias] // 0x001466F0-0x00146ABC
[assembly: AssemblyDelaySign] // 0x001466F0-0x00146ABC
[assembly: AssemblyDescription] // 0x001466F0-0x00146ABC
[assembly: AssemblyFileVersion] // 0x001466F0-0x00146ABC
[assembly: AssemblyInformationalVersion] // 0x001466F0-0x00146ABC
[assembly: AssemblyKeyFile] // 0x001466F0-0x00146ABC
[assembly: AssemblyProduct] // 0x001466F0-0x00146ABC
[assembly: AssemblyTitle] // 0x001466F0-0x00146ABC
[assembly: CLSCompliant] // 0x001466F0-0x00146ABC
[assembly: ComCompatibleVersion] // 0x001466F0-0x00146ABC
[assembly: CompilationRelaxations] // 0x001466F0-0x00146ABC
[assembly: ComVisible] // 0x001466F0-0x00146ABC
[assembly: Debuggable] // 0x001466F0-0x00146ABC
[assembly: DefaultDependency] // 0x001466F0-0x00146ABC
[assembly: Guid] // 0x001466F0-0x00146ABC
[assembly: InternalsVisibleTo] // 0x001466F0-0x00146ABC
[assembly: InternalsVisibleTo] // 0x001466F0-0x00146ABC
[assembly: InternalsVisibleTo] // 0x001466F0-0x00146ABC
[assembly: InternalsVisibleTo] // 0x001466F0-0x00146ABC
[assembly: InternalsVisibleTo] // 0x001466F0-0x00146ABC
[assembly: NeutralResourcesLanguage] // 0x001466F0-0x00146ABC
[assembly: RuntimeCompatibility] // 0x001466F0-0x00146ABC
[assembly: SatelliteContractVersion] // 0x001466F0-0x00146ABC
[assembly: StringFreezing] // 0x001466F0-0x00146ABC

// Image 1: Mono.Security.dll - Assembly: Mono.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756 - Types 1446-1456
[assembly: AssemblyCompany] // 0x00146B20-0x00146D04
[assembly: AssemblyCopyright] // 0x00146B20-0x00146D04
[assembly: AssemblyDelaySign] // 0x00146B20-0x00146D04
[assembly: AssemblyDescription] // 0x00146B20-0x00146D04
[assembly: AssemblyProduct] // 0x00146B20-0x00146D04
[assembly: AssemblyTitle] // 0x00146B20-0x00146D04
[assembly: CLSCompliant] // 0x00146B20-0x00146D04
[assembly: CompilationRelaxations] // 0x00146B20-0x00146D04
[assembly: ComVisible] // 0x00146B20-0x00146D04
[assembly: Debuggable] // 0x00146B20-0x00146D04
[assembly: InternalsVisibleTo] // 0x00146B20-0x00146D04
[assembly: NeutralResourcesLanguage] // 0x00146B20-0x00146D04
[assembly: RuntimeCompatibility] // 0x00146B20-0x00146D04

// Image 2: System.dll - Assembly: System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e - Types 1457-1728
[assembly: AssemblyCompany] // 0x00147E68-0x0014815C
[assembly: AssemblyCopyright] // 0x00147E68-0x0014815C
[assembly: AssemblyDefaultAlias] // 0x00147E68-0x0014815C
[assembly: AssemblyDelaySign] // 0x00147E68-0x0014815C
[assembly: AssemblyDescription] // 0x00147E68-0x0014815C
[assembly: AssemblyFileVersion] // 0x00147E68-0x0014815C
[assembly: AssemblyInformationalVersion] // 0x00147E68-0x0014815C
[assembly: AssemblyKeyFile] // 0x00147E68-0x0014815C
[assembly: AssemblyProduct] // 0x00147E68-0x0014815C
[assembly: AssemblyTitle] // 0x00147E68-0x0014815C
[assembly: CLSCompliant] // 0x00147E68-0x0014815C
[assembly: CompilationRelaxations] // 0x00147E68-0x0014815C
[assembly: ComVisible] // 0x00147E68-0x0014815C
[assembly: Debuggable] // 0x00147E68-0x0014815C
[assembly: InternalsVisibleTo] // 0x00147E68-0x0014815C
[assembly: InternalsVisibleTo] // 0x00147E68-0x0014815C
[assembly: InternalsVisibleTo] // 0x00147E68-0x0014815C
[assembly: InternalsVisibleTo] // 0x00147E68-0x0014815C
[assembly: NeutralResourcesLanguage] // 0x00147E68-0x0014815C
[assembly: RuntimeCompatibility] // 0x00147E68-0x0014815C
[assembly: SatelliteContractVersion] // 0x00147E68-0x0014815C

// Image 3: System.Configuration.dll - Assembly: System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a - Types 1729-1736
[assembly: AllowPartiallyTrustedCallers] // 0x001481D8-0x0014846C
[assembly: AssemblyCompany] // 0x001481D8-0x0014846C
[assembly: AssemblyCopyright] // 0x001481D8-0x0014846C
[assembly: AssemblyDefaultAlias] // 0x001481D8-0x0014846C
[assembly: AssemblyDescription] // 0x001481D8-0x0014846C
[assembly: AssemblyFileVersion] // 0x001481D8-0x0014846C
[assembly: AssemblyInformationalVersion] // 0x001481D8-0x0014846C
[assembly: AssemblyProduct] // 0x001481D8-0x0014846C
[assembly: AssemblyTitle] // 0x001481D8-0x0014846C
[assembly: CLSCompliant] // 0x001481D8-0x0014846C
[assembly: ComCompatibleVersion] // 0x001481D8-0x0014846C
[assembly: CompilationRelaxations] // 0x001481D8-0x0014846C
[assembly: ComVisible] // 0x001481D8-0x0014846C
[assembly: Debuggable] // 0x001481D8-0x0014846C
[assembly: DefaultDllImportSearchPaths] // 0x001481D8-0x0014846C
[assembly: NeutralResourcesLanguage] // 0x001481D8-0x0014846C
[assembly: RuntimeCompatibility] // 0x001481D8-0x0014846C
[assembly: SatelliteContractVersion] // 0x001481D8-0x0014846C
[assembly: SecurityRules] // 0x001481D8-0x0014846C

// Image 4: System.Xml.dll - Assembly: System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e - Types 1737-1743
[assembly: AssemblyCompany] // 0x001484DC-0x00148844
[assembly: AssemblyCopyright] // 0x001484DC-0x00148844
[assembly: AssemblyDefaultAlias] // 0x001484DC-0x00148844
[assembly: AssemblyDelaySign] // 0x001484DC-0x00148844
[assembly: AssemblyDescription] // 0x001484DC-0x00148844
[assembly: AssemblyFileVersion] // 0x001484DC-0x00148844
[assembly: AssemblyInformationalVersion] // 0x001484DC-0x00148844
[assembly: AssemblyKeyFile] // 0x001484DC-0x00148844
[assembly: AssemblyProduct] // 0x001484DC-0x00148844
[assembly: AssemblyTitle] // 0x001484DC-0x00148844
[assembly: CLSCompliant] // 0x001484DC-0x00148844
[assembly: CompilationRelaxations] // 0x001484DC-0x00148844
[assembly: ComVisible] // 0x001484DC-0x00148844
[assembly: Debuggable] // 0x001484DC-0x00148844
[assembly: InternalsVisibleTo] // 0x001484DC-0x00148844
[assembly: InternalsVisibleTo] // 0x001484DC-0x00148844
[assembly: InternalsVisibleTo] // 0x001484DC-0x00148844
[assembly: InternalsVisibleTo] // 0x001484DC-0x00148844
[assembly: InternalsVisibleTo] // 0x001484DC-0x00148844
[assembly: NeutralResourcesLanguage] // 0x001484DC-0x00148844
[assembly: RuntimeCompatibility] // 0x001484DC-0x00148844
[assembly: SatelliteContractVersion] // 0x001484DC-0x00148844

// Image 5: System.Core.dll - Assembly: System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e - Types 1744-1764
[assembly: AssemblyCompany] // 0x00148CEC-0x00148F44
[assembly: AssemblyCopyright] // 0x00148CEC-0x00148F44
[assembly: AssemblyDefaultAlias] // 0x00148CEC-0x00148F44
[assembly: AssemblyDelaySign] // 0x00148CEC-0x00148F44
[assembly: AssemblyDescription] // 0x00148CEC-0x00148F44
[assembly: AssemblyFileVersion] // 0x00148CEC-0x00148F44
[assembly: AssemblyInformationalVersion] // 0x00148CEC-0x00148F44
[assembly: AssemblyKeyFile] // 0x00148CEC-0x00148F44
[assembly: AssemblyProduct] // 0x00148CEC-0x00148F44
[assembly: AssemblyTitle] // 0x00148CEC-0x00148F44
[assembly: CLSCompliant] // 0x00148CEC-0x00148F44
[assembly: CompilationRelaxations] // 0x00148CEC-0x00148F44
[assembly: ComVisible] // 0x00148CEC-0x00148F44
[assembly: Debuggable] // 0x00148CEC-0x00148F44
[assembly: NeutralResourcesLanguage] // 0x00148CEC-0x00148F44
[assembly: RuntimeCompatibility] // 0x00148CEC-0x00148F44
[assembly: SatelliteContractVersion] // 0x00148CEC-0x00148F44

// Image 6: UnityEngine.SharedInternalsModule.dll - Assembly: UnityEngine.SharedInternalsModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 1765-1801
[assembly: Debuggable] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: InternalsVisibleTo] // 0x00149BB0-0x0014AE78
[assembly: RuntimeCompatibility] // 0x00149BB0-0x0014AE78
[assembly: UnityEngineModuleAssembly] // 0x00149BB0-0x0014AE78

// Image 7: UnityEngine.CoreModule.dll - Assembly: UnityEngine.CoreModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 1802-2259
[assembly: Debuggable] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: InternalsVisibleTo] // 0x00159D7C-0x0015B17C
[assembly: RuntimeCompatibility] // 0x00159D7C-0x0015B17C
[assembly: UnityEngineModuleAssembly] // 0x00159D7C-0x0015B17C

// Image 8: UnityEngine.PhysicsModule.dll - Assembly: UnityEngine.PhysicsModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2260-2275
[assembly: Debuggable] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: InternalsVisibleTo] // 0x0015C0D4-0x0015D3AC
[assembly: RuntimeCompatibility] // 0x0015C0D4-0x0015D3AC
[assembly: UnityEngineModuleAssembly] // 0x0015C0D4-0x0015D3AC

// Image 9: UnityEngine.UnityAnalyticsModule.dll - Assembly: UnityEngine.UnityAnalyticsModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2276-2285
[assembly: Debuggable] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: InternalsVisibleTo] // 0x0015D848-0x0015EB10
[assembly: RuntimeCompatibility] // 0x0015D848-0x0015EB10
[assembly: UnityEngineModuleAssembly] // 0x0015D848-0x0015EB10

// Image 10: UnityEngine.AudioModule.dll - Assembly: UnityEngine.AudioModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2286-2309
[assembly: Debuggable] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: InternalsVisibleTo] // 0x0015F5B8-0x001608A4
[assembly: RuntimeCompatibility] // 0x0015F5B8-0x001608A4
[assembly: UnityEngineModuleAssembly] // 0x0015F5B8-0x001608A4

// Image 11: UnityEngine.ImageConversionModule.dll - Assembly: UnityEngine.ImageConversionModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2310-2311
[assembly: Debuggable] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: InternalsVisibleTo] // 0x00160AB4-0x00161D8C
[assembly: RuntimeCompatibility] // 0x00160AB4-0x00161D8C
[assembly: UnityEngineModuleAssembly] // 0x00160AB4-0x00161D8C

// Image 12: UnityEngine.JSONSerializeModule.dll - Assembly: UnityEngine.JSONSerializeModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2312-2313
[assembly: Debuggable] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: InternalsVisibleTo] // 0x00161E54-0x0016311C
[assembly: RuntimeCompatibility] // 0x00161E54-0x0016311C
[assembly: UnityEngineModuleAssembly] // 0x00161E54-0x0016311C

// Image 13: UnityEngine.TextRenderingModule.dll - Assembly: UnityEngine.TextRenderingModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2314-2326
[assembly: Debuggable] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: InternalsVisibleTo] // 0x001633F8-0x001646C0
[assembly: RuntimeCompatibility] // 0x001633F8-0x001646C0
[assembly: UnityEngineModuleAssembly] // 0x001633F8-0x001646C0

// Image 14: UnityEngine.UnityWebRequestModule.dll - Assembly: UnityEngine.UnityWebRequestModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2327-2339
[assembly: Debuggable] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: InternalsVisibleTo] // 0x00164F24-0x0016627C
[assembly: RuntimeCompatibility] // 0x00164F24-0x0016627C
[assembly: UnityEngineModuleAssembly] // 0x00164F24-0x0016627C

// Image 15: UnityEngine.XRModule.dll - Assembly: UnityEngine.XRModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2340-2384
[assembly: Debuggable] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: InternalsVisibleTo] // 0x00167A38-0x00168D00
[assembly: RuntimeCompatibility] // 0x00167A38-0x00168D00
[assembly: UnityEngineModuleAssembly] // 0x00167A38-0x00168D00

// Image 16: UnityEngine.AnimationModule.dll - Assembly: UnityEngine.AnimationModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2385-2416
[assembly: Debuggable] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: InternalsVisibleTo] // 0x0016A920-0x0016BBF8
[assembly: RuntimeCompatibility] // 0x0016A920-0x0016BBF8
[assembly: UnityEngineModuleAssembly] // 0x0016A920-0x0016BBF8

// Image 17: UnityEngine.IMGUIModule.dll - Assembly: UnityEngine.IMGUIModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2417-2453
[assembly: Debuggable] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: InternalsVisibleTo] // 0x0016EFE8-0x001702D4
[assembly: RuntimeCompatibility] // 0x0016EFE8-0x001702D4
[assembly: UnityEngineModuleAssembly] // 0x0016EFE8-0x001702D4

// Image 18: UnityEngine.InputModule.dll - Assembly: UnityEngine.InputModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2454-2456
[assembly: Debuggable] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: InternalsVisibleTo] // 0x001703F0-0x001716B8
[assembly: RuntimeCompatibility] // 0x001703F0-0x001716B8
[assembly: UnityEngineModuleAssembly] // 0x001703F0-0x001716B8

// Image 19: UnityEngine.ParticleSystemModule.dll - Assembly: UnityEngine.ParticleSystemModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2457-2466
[assembly: Debuggable] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: InternalsVisibleTo] // 0x00172140-0x00173418
[assembly: RuntimeCompatibility] // 0x00172140-0x00173418
[assembly: UnityEngineModuleAssembly] // 0x00172140-0x00173418

// Image 20: UnityEngine.Physics2DModule.dll - Assembly: UnityEngine.Physics2DModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2467-2473
[assembly: Debuggable] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: InternalsVisibleTo] // 0x00174278-0x00175550
[assembly: RuntimeCompatibility] // 0x00174278-0x00175550
[assembly: UnityEngineModuleAssembly] // 0x00174278-0x00175550

// Image 21: UnityEngine.ScreenCaptureModule.dll - Assembly: UnityEngine.ScreenCaptureModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2474-2476
[assembly: Debuggable] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: InternalsVisibleTo] // 0x00175610-0x001768D8
[assembly: RuntimeCompatibility] // 0x00175610-0x001768D8
[assembly: UnityEngineModuleAssembly] // 0x00175610-0x001768D8

// Image 22: UnityEngine.UIModule.dll - Assembly: UnityEngine.UIModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2477-2486
[assembly: Debuggable] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: InternalsVisibleTo] // 0x00176FB8-0x00178280
[assembly: RuntimeCompatibility] // 0x00176FB8-0x00178280
[assembly: UnityEngineModuleAssembly] // 0x00176FB8-0x00178280

// Image 23: UnityEngine.UNETModule.dll - Assembly: UnityEngine.UNETModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2487-2535
[assembly: Debuggable] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: InternalsVisibleTo] // 0x0017B2B0-0x0017C578
[assembly: RuntimeCompatibility] // 0x0017B2B0-0x0017C578
[assembly: UnityEngineModuleAssembly] // 0x0017B2B0-0x0017C578

// Image 24: UnityEngine.UnityWebRequestWWWModule.dll - Assembly: UnityEngine.UnityWebRequestWWWModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2536-2537
[assembly: Debuggable] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: InternalsVisibleTo] // 0x0017C5AC-0x0017D884
[assembly: RuntimeCompatibility] // 0x0017C5AC-0x0017D884
[assembly: UnityEngineModuleAssembly] // 0x0017C5AC-0x0017D884

// Image 25: UnityEngine.VRModule.dll - Assembly: UnityEngine.VRModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2538-2540
[assembly: Debuggable] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: InternalsVisibleTo] // 0x0017DB30-0x0017EDF8
[assembly: RuntimeCompatibility] // 0x0017DB30-0x0017EDF8
[assembly: UnityEngineModuleAssembly] // 0x0017DB30-0x0017EDF8

// Image 27: ImaginationOverflow.UniversalDeepLinking.Core.dll - Assembly: ImaginationOverflow.UniversalDeepLinking.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2542-2545
[assembly: AssemblyCompany] // 0x0017EED0-0x0017F0C4
[assembly: AssemblyConfiguration] // 0x0017EED0-0x0017F0C4
[assembly: AssemblyCopyright] // 0x0017EED0-0x0017F0C4
[assembly: AssemblyDescription] // 0x0017EED0-0x0017F0C4
[assembly: AssemblyFileVersion] // 0x0017EED0-0x0017F0C4
[assembly: AssemblyProduct] // 0x0017EED0-0x0017F0C4
[assembly: AssemblyTitle] // 0x0017EED0-0x0017F0C4
[assembly: AssemblyTrademark] // 0x0017EED0-0x0017F0C4
[assembly: CompilationRelaxations] // 0x0017EED0-0x0017F0C4
[assembly: ComVisible] // 0x0017EED0-0x0017F0C4
[assembly: Debuggable] // 0x0017EED0-0x0017F0C4
[assembly: Guid] // 0x0017EED0-0x0017F0C4
[assembly: RuntimeCompatibility] // 0x0017EED0-0x0017F0C4

// Image 28: ImaginationOverflow.UniversalDeepLinking.Platform.dll - Assembly: ImaginationOverflow.UniversalDeepLinking.Platform, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2546-2548
[assembly: AssemblyCompany] // 0x0017F104-0x0017F2FC
[assembly: AssemblyConfiguration] // 0x0017F104-0x0017F2FC
[assembly: AssemblyCopyright] // 0x0017F104-0x0017F2FC
[assembly: AssemblyDescription] // 0x0017F104-0x0017F2FC
[assembly: AssemblyFileVersion] // 0x0017F104-0x0017F2FC
[assembly: AssemblyProduct] // 0x0017F104-0x0017F2FC
[assembly: AssemblyTitle] // 0x0017F104-0x0017F2FC
[assembly: AssemblyTrademark] // 0x0017F104-0x0017F2FC
[assembly: CompilationRelaxations] // 0x0017F104-0x0017F2FC
[assembly: ComVisible] // 0x0017F104-0x0017F2FC
[assembly: Debuggable] // 0x0017F104-0x0017F2FC
[assembly: Guid] // 0x0017F104-0x0017F2FC
[assembly: RuntimeCompatibility] // 0x0017F104-0x0017F2FC

// Image 31: Facebook.Unity.Settings.dll - Assembly: Facebook.Unity.Settings, Version=7.17.2.0, Culture=neutral, PublicKeyToken=null - Types 2551-2555
[assembly: CompilationRelaxations] // 0x0017F764-0x0017F7C0
[assembly: Debuggable] // 0x0017F764-0x0017F7C0
[assembly: RuntimeCompatibility] // 0x0017F764-0x0017F7C0

// Image 32: ImaginationOverflow.UniversalDeepLinking.dll - Assembly: ImaginationOverflow.UniversalDeepLinking, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2556-2561
[assembly: AssemblyCompany] // 0x0017F930-0x0017FB20
[assembly: AssemblyConfiguration] // 0x0017F930-0x0017FB20
[assembly: AssemblyCopyright] // 0x0017F930-0x0017FB20
[assembly: AssemblyDescription] // 0x0017F930-0x0017FB20
[assembly: AssemblyFileVersion] // 0x0017F930-0x0017FB20
[assembly: AssemblyProduct] // 0x0017F930-0x0017FB20
[assembly: AssemblyTitle] // 0x0017F930-0x0017FB20
[assembly: AssemblyTrademark] // 0x0017F930-0x0017FB20
[assembly: CompilationRelaxations] // 0x0017F930-0x0017FB20
[assembly: ComVisible] // 0x0017F930-0x0017FB20
[assembly: Debuggable] // 0x0017F930-0x0017FB20
[assembly: Guid] // 0x0017F930-0x0017FB20
[assembly: RuntimeCompatibility] // 0x0017F930-0x0017FB20

// Image 33: UnityEngine.UI.dll - Assembly: UnityEngine.UI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2562-2748
[assembly: AssemblyCompany] // 0x00184188-0x001843D8
[assembly: AssemblyConfiguration] // 0x00184188-0x001843D8
[assembly: AssemblyCopyright] // 0x00184188-0x001843D8
[assembly: AssemblyDescription] // 0x00184188-0x001843D8
[assembly: AssemblyFileVersion] // 0x00184188-0x001843D8
[assembly: AssemblyProduct] // 0x00184188-0x001843D8
[assembly: AssemblyTitle] // 0x00184188-0x001843D8
[assembly: AssemblyTrademark] // 0x00184188-0x001843D8
[assembly: ComVisible] // 0x00184188-0x001843D8
[assembly: Debuggable] // 0x00184188-0x001843D8
[assembly: Guid] // 0x00184188-0x001843D8
[assembly: InternalsVisibleTo] // 0x00184188-0x001843D8
[assembly: RuntimeCompatibility] // 0x00184188-0x001843D8
[assembly: UnityAPICompatibilityVersion] // 0x00184188-0x001843D8

// Image 35: DOTween.dll - Assembly: DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2750-2937
[assembly: AssemblyCompany] // 0x00185B8C-0x00185E84
[assembly: AssemblyConfiguration] // 0x00185B8C-0x00185E84
[assembly: AssemblyCopyright] // 0x00185B8C-0x00185E84
[assembly: AssemblyDescription] // 0x00185B8C-0x00185E84
[assembly: AssemblyFileVersion] // 0x00185B8C-0x00185E84
[assembly: AssemblyProduct] // 0x00185B8C-0x00185E84
[assembly: AssemblyTitle] // 0x00185B8C-0x00185E84
[assembly: AssemblyTrademark] // 0x00185B8C-0x00185E84
[assembly: CompilationRelaxations] // 0x00185B8C-0x00185E84
[assembly: ComVisible] // 0x00185B8C-0x00185E84
[assembly: Debuggable] // 0x00185B8C-0x00185E84
[assembly: Guid] // 0x00185B8C-0x00185E84
[assembly: InternalsVisibleTo] // 0x00185B8C-0x00185E84
[assembly: InternalsVisibleTo] // 0x00185B8C-0x00185E84
[assembly: InternalsVisibleTo] // 0x00185B8C-0x00185E84
[assembly: InternalsVisibleTo] // 0x00185B8C-0x00185E84
[assembly: InternalsVisibleTo] // 0x00185B8C-0x00185E84
[assembly: RuntimeCompatibility] // 0x00185B8C-0x00185E84

// Image 36: Facebook.Unity.dll - Assembly: Facebook.Unity, Version=7.17.2.0, Culture=neutral, PublicKeyToken=null - Types 2938-3061
[assembly: CompilationRelaxations] // 0x00186C44-0x00186E1C
[assembly: Debuggable] // 0x00186C44-0x00186E1C
[assembly: InternalsVisibleTo] // 0x00186C44-0x00186E1C
[assembly: InternalsVisibleTo] // 0x00186C44-0x00186E1C
[assembly: InternalsVisibleTo] // 0x00186C44-0x00186E1C
[assembly: InternalsVisibleTo] // 0x00186C44-0x00186E1C
[assembly: InternalsVisibleTo] // 0x00186C44-0x00186E1C
[assembly: InternalsVisibleTo] // 0x00186C44-0x00186E1C
[assembly: RuntimeCompatibility] // 0x00186C44-0x00186E1C
[assembly: UnityAPICompatibilityVersion] // 0x00186C44-0x00186E1C

// Image 37: UnityEngine.Networking.dll - Assembly: UnityEngine.Networking, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null - Types 3062-3160
[assembly: AssemblyCompany] // 0x00188AA8-0x00188D54
[assembly: AssemblyConfiguration] // 0x00188AA8-0x00188D54
[assembly: AssemblyCopyright] // 0x00188AA8-0x00188D54
[assembly: AssemblyDescription] // 0x00188AA8-0x00188D54
[assembly: AssemblyFileVersion] // 0x00188AA8-0x00188D54
[assembly: AssemblyProduct] // 0x00188AA8-0x00188D54
[assembly: AssemblyTitle] // 0x00188AA8-0x00188D54
[assembly: AssemblyTrademark] // 0x00188AA8-0x00188D54
[assembly: ComVisible] // 0x00188AA8-0x00188D54
[assembly: Debuggable] // 0x00188AA8-0x00188D54
[assembly: Guid] // 0x00188AA8-0x00188D54
[assembly: InternalsVisibleTo] // 0x00188AA8-0x00188D54
[assembly: InternalsVisibleTo] // 0x00188AA8-0x00188D54
[assembly: RuntimeCompatibility] // 0x00188AA8-0x00188D54
[assembly: UnityAPICompatibilityVersion] // 0x00188AA8-0x00188D54

// Image 38: Vuforia.UnityExtensions.dll - Assembly: Vuforia.UnityExtensions, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 3161-3517
[assembly: CompilationRelaxations] // 0x0018AFE8-0x0018B1EC
[assembly: Debuggable] // 0x0018AFE8-0x0018B1EC
[assembly: InternalsVisibleTo] // 0x0018AFE8-0x0018B1EC
[assembly: InternalsVisibleTo] // 0x0018AFE8-0x0018B1EC
[assembly: InternalsVisibleTo] // 0x0018AFE8-0x0018B1EC
[assembly: InternalsVisibleTo] // 0x0018AFE8-0x0018B1EC
[assembly: InternalsVisibleTo] // 0x0018AFE8-0x0018B1EC
[assembly: InternalsVisibleTo] // 0x0018AFE8-0x0018B1EC
[assembly: InternalsVisibleTo] // 0x0018AFE8-0x0018B1EC
[assembly: InternalsVisibleTo] // 0x0018AFE8-0x0018B1EC
[assembly: RuntimeCompatibility] // 0x0018AFE8-0x0018B1EC

// Image 39: Facebook.Unity.Android.dll - Assembly: Facebook.Unity.Android, Version=7.17.2.0, Culture=neutral, PublicKeyToken=null - Types 3518-3519
[assembly: CompilationRelaxations] // 0x0018B1FC-0x0018B258
[assembly: Debuggable] // 0x0018B1FC-0x0018B258
[assembly: RuntimeCompatibility] // 0x0018B1FC-0x0018B258

// Image 40: Facebook.Unity.IOS.dll - Assembly: Facebook.Unity.IOS, Version=7.17.2.0, Culture=neutral, PublicKeyToken=null - Types 3520-3521
[assembly: CompilationRelaxations] // 0x0018B258-0x0018B2B4
[assembly: Debuggable] // 0x0018B258-0x0018B2B4
[assembly: RuntimeCompatibility] // 0x0018B258-0x0018B2B4

// Image 41: Unity.PlayerPrefsEditor.Samples.SampleScene.dll - Assembly: Unity.PlayerPrefsEditor.Samples.SampleScene, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 3522-3523
[assembly: CompilationRelaxations] // 0x0018B2B4-0x0018B310
[assembly: Debuggable] // 0x0018B2B4-0x0018B310
[assembly: RuntimeCompatibility] // 0x0018B2B4-0x0018B310

// Image 42: VuforiaScripts.dll - Assembly: VuforiaScripts, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 3524-3531
[assembly: CompilationRelaxations] // 0x0018B444-0x0018B4A0
[assembly: Debuggable] // 0x0018B444-0x0018B4A0
[assembly: RuntimeCompatibility] // 0x0018B444-0x0018B4A0

// Image 43: Assembly-CSharp-firstpass.dll - Assembly: Assembly-CSharp-firstpass, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 3532-3538
[assembly: CompilationRelaxations] // 0x0018B4FC-0x0018B558
[assembly: Debuggable] // 0x0018B4FC-0x0018B558
[assembly: RuntimeCompatibility] // 0x0018B4FC-0x0018B558

// Image 44: Assembly-CSharp.dll - Assembly: Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 3539-3785
[assembly: CompilationRelaxations] // 0x0018ED00-0x0018ED5C
[assembly: Debuggable] // 0x0018ED00-0x0018ED5C
[assembly: RuntimeCompatibility] // 0x0018ED00-0x0018ED5C

internal sealed class Locale // TypeDefIndex: 1
{
	// Methods
	public static string GetText(string msg); // 0x005FEF54-0x005FEF58
	public static string GetText(string fmt, params /* 0x00146138-0x00146148 */ object[] args); // 0x005FEF58-0x005FEF60
}

internal static class SR // TypeDefIndex: 2
{
	// Methods
	internal static string Format(string resourceFormat, object p1); // 0x004E945C-0x004E94F0
	internal static string Format(string resourceFormat, object p1, object p2); // 0x004E94F0-0x004E95A4
}

namespace Microsoft.Win32
{
	internal interface IRegistryApi // TypeDefIndex: 3
	{
		// Methods
		RegistryKey OpenSubKey(RegistryKey rkey, string keyname, bool writtable);
		void Flush(RegistryKey rkey);
		void Close(RegistryKey rkey);
		object GetValue(RegistryKey rkey, string name, object default_value, RegistryValueOptions options);
		string[] GetSubKeyNames(RegistryKey rkey);
		string ToString(RegistryKey rkey);
		IntPtr GetHandle(RegistryKey key);
	}

	[ComVisible] // 0x00139D08-0x00139D1C
	public static class Registry // TypeDefIndex: 4
	{
		// Fields
		public static readonly RegistryKey ClassesRoot; // 0x00
		public static readonly RegistryKey CurrentConfig; // 0x04
		public static readonly RegistryKey CurrentUser; // 0x08
		[Obsolete] // 0x00142128-0x00142170
		public static readonly RegistryKey DynData; // 0x0C
		public static readonly RegistryKey LocalMachine; // 0x10
		public static readonly RegistryKey PerformanceData; // 0x14
		public static readonly RegistryKey Users; // 0x18
	
		// Constructors
		static Registry(); // 0x00604DF4-0x00605020
	}

	[Serializable]
	[ComVisible] // 0x00139D1C-0x00139D30
	public enum RegistryHive // TypeDefIndex: 5
	{
		ClassesRoot = -2147483648,
		CurrentUser = -2147483647,
		LocalMachine = -2147483646,
		Users = -2147483645,
		PerformanceData = -2147483644,
		CurrentConfig = -2147483643,
		DynData = -2147483642
	}

	[ComVisible] // 0x00139D30-0x00139D44
	public sealed class RegistryKey : MarshalByRefObject, IDisposable // TypeDefIndex: 6
	{
		// Fields
		private object handle; // 0x0C
		private SafeRegistryHandle safe_handle; // 0x10
		private object hive; // 0x14
		private readonly string qname; // 0x18
		private readonly bool isRemoteRoot; // 0x1C
		private readonly bool isWritable; // 0x1D
		private static readonly IRegistryApi RegistryApi; // 0x00
	
		// Properties
		public string Name { get; } // 0x006017B0-0x006017B8 
		[ComVisible] // 0x00146348-0x001463A4
		[MonoTODO] // 0x00146348-0x001463A4
		public SafeRegistryHandle Handle { get; } // 0x006057B8-0x00605924 
		internal bool IsRoot { get; } // 0x00602C30-0x00602C40 
		internal RegistryHive Hive { get; } // 0x00602C40-0x00602CF4 
		internal object InternalHandle { get; } // 0x00606008-0x00606010 
	
		// Constructors
		static RegistryKey(); // 0x00605064-0x00605150
		internal RegistryKey(RegistryHive hiveId); // 0x00605020-0x00605064
		internal RegistryKey(RegistryHive hiveId, IntPtr keyHandle, bool remoteRoot); // 0x006051F8-0x006052E8
		internal RegistryKey(object data, string keyName, bool writable); // 0x00600FF8-0x00601028
	
		// Methods
		internal static bool IsEquals(RegistryKey a, RegistryKey b); // 0x00605410-0x006054C8
		public void Dispose(); // 0x006054C8-0x00605554
		public void Flush(); // 0x0060569C-0x006057B8
		public void Close(); // 0x00605554-0x0060569C
		public RegistryKey OpenSubKey(string name); // 0x006059FC-0x00605A04
		public RegistryKey OpenSubKey(string name, bool writable); // 0x00605A04-0x00605BAC
		public object GetValue(string name); // 0x00605C70-0x00605C78
		public object GetValue(string name, object defaultValue); // 0x00605C78-0x00605DC0
		public string[] GetSubKeyNames(); // 0x00605DC0-0x00605EE4
		public override string ToString(); // 0x00605EE4-0x00606008
		private void AssertKeyStillValid(); // 0x00605924-0x006059D0
		private void AssertKeyNameLength(string name); // 0x00605BAC-0x00605C70
		internal static string DecodeString(byte[] data); // 0x00606010-0x00606100
		internal static IOException CreateMarkedForDeletionException(); // 0x00606100-0x0060619C
		private static string GetHiveName(RegistryHive hive); // 0x006052E8-0x00605410
	}

	[ComVisible] // 0x00139D44-0x00139D58
	public enum RegistryValueKind // TypeDefIndex: 7
	{
		None = -1,
		Unknown = 0,
		String = 1,
		ExpandString = 2,
		Binary = 3,
		DWord = 4,
		MultiString = 7,
		QWord = 11
	}

	[Flags] // 0x00139D58-0x00139D68
	public enum RegistryValueOptions // TypeDefIndex: 8
	{
		None = 0,
		DoNotExpandEnvironmentNames = 1
	}

	internal class ExpandString // TypeDefIndex: 9
	{
		// Fields
		private string value; // 0x08
	
		// Constructors
		public ExpandString(string s); // 0x005FEF60-0x005FEF80
	
		// Methods
		public override string ToString(); // 0x005FEF80-0x005FEF88
		public string Expand(); // 0x005FEF88-0x005FF1DC
	}

	internal class RegistryKeyComparer : IEqualityComparer // TypeDefIndex: 10
	{
		// Constructors
		public RegistryKeyComparer(); // 0x005FF2EC-0x005FF2F4
	
		// Methods
		public new bool Equals(object x, object y); // 0x0060619C-0x00606320
		public int GetHashCode(object obj); // 0x00606320-0x00606470
	}

	internal class KeyHandler // TypeDefIndex: 11
	{
		// Fields
		private static Hashtable key_to_handler; // 0x00
		private static Hashtable dir_to_handler; // 0x04
		public string Dir; // 0x08
		private string ActualDir; // 0x0C
		public bool IsVolatile; // 0x10
		private Hashtable values; // 0x14
		private string file; // 0x18
		private bool dirty; // 0x1C
		private static string user_store; // 0x08
		private static string machine_store; // 0x0C
	
		// Properties
		public bool IsMarkedForDeletion { get; } // 0x00603504-0x006035C4 
		private static string UserStore { get; } // 0x0060208C-0x006021F4 
		private static string MachineStore { get; } // 0x006021F4-0x00602454 
	
		// Constructors
		static KeyHandler(); // 0x005FF1DC-0x005FF2EC
		private KeyHandler(RegistryKey rkey, string basedir); // 0x005FF5E8-0x005FF604
		private KeyHandler(RegistryKey rkey, string basedir, bool is_volatile); // 0x005FF604-0x005FF830
	
		// Methods
		public void Load(); // 0x005FF924-0x00600130
		private void LoadKey(SecurityElement se); // 0x00600130-0x00600B64
		public RegistryKey Ensure(RegistryKey rkey, string extra, bool writable, bool is_volatile); // 0x00600B64-0x00600F28
		public RegistryKey Probe(RegistryKey rkey, string extra, bool writable); // 0x00601028-0x00601508
		private static string CombineName(RegistryKey rkey, string extra); // 0x00600F28-0x00600FF8
		private static long GetSystemBootTime(); // 0x006017B8-0x00601B30
		private static long GetRegisteredBootTime(string path); // 0x00601B30-0x00601E48
		private static void SaveRegisteredBootTime(string path, long btime); // 0x00601E48-0x0060208C
		private static void CleanVolatileKeys(); // 0x005FF2F4-0x005FF5E8
		public static bool VolatileKeyExists(string dir); // 0x00601508-0x006017B0
		public static string GetVolatileDir(string dir); // 0x005FF830-0x005FF924
		public static KeyHandler Lookup(RegistryKey rkey, bool createNonExisting); // 0x00602618-0x00602C30
		private static string GetRootFromDir(string dir); // 0x00602454-0x00602618
		public static void Drop(RegistryKey rkey); // 0x00602CF4-0x00603328
		public object GetValue(string name, RegistryValueOptions options); // 0x00603328-0x00603504
		public string[] GetSubKeyNames(); // 0x006035C4-0x00603BE4
		public void Flush(); // 0x00603BE4-0x00603D20
		public bool ValueExists(string name); // 0x00604C5C-0x00604D90
		~KeyHandler(); // 0x00604D90-0x00604DF4
		private void Save(); // 0x00603D20-0x00604C5C
	}

	internal class UnixRegistryApi : IRegistryApi // TypeDefIndex: 12
	{
		// Constructors
		public UnixRegistryApi(); // 0x006051F0-0x006051F8
	
		// Methods
		private static string ToUnix(string keyname); // 0x00606710-0x0060678C
		private static bool IsWellKnownKey(string parentKeyName, string keyname); // 0x0060678C-0x00606928
		public RegistryKey OpenSubKey(RegistryKey rkey, string keyname, bool writable); // 0x00606928-0x00606A30
		public void Flush(RegistryKey rkey); // 0x00606A50-0x00606AE0
		public void Close(RegistryKey rkey); // 0x00606AE0-0x00606B60
		public object GetValue(RegistryKey rkey, string name, object default_value, RegistryValueOptions options); // 0x00606B60-0x00606C28
		public string[] GetSubKeyNames(RegistryKey rkey); // 0x00606C28-0x00606CC8
		public string ToString(RegistryKey rkey); // 0x00606CC8-0x00606CEC
		private RegistryKey CreateSubKey(RegistryKey rkey, string keyname, bool writable); // 0x00606A30-0x00606A50
		private RegistryKey CreateSubKey(RegistryKey rkey, string keyname, bool writable, bool is_volatile); // 0x00606CEC-0x00606E84
		public IntPtr GetHandle(RegistryKey key); // 0x00606E84-0x00606F0C
	}

	internal class Win32RegistryApi : IRegistryApi // TypeDefIndex: 13
	{
		// Fields
		private readonly int NativeBytesPerCharacter; // 0x08
	
		// Constructors
		public Win32RegistryApi(); // 0x00605150-0x006051F0
	
		// Methods
		private static extern int RegCloseKey(IntPtr keyHandle); // 0x00606FB0-0x006070B0
		private static extern int RegFlushKey(IntPtr keyHandle); // 0x006070B0-0x006071B0
		private static extern int RegOpenKeyEx(IntPtr keyBase, string keyName, IntPtr reserved, int access, out IntPtr keyHandle); // 0x006071B0-0x006072D8
		internal static unsafe extern int RegEnumKeyEx(IntPtr keyHandle, int dwIndex, char* lpName, ref int lpcbName, int[] lpReserved, out StringBuilder lpClass, int[] lpcbClass, long[] lpftLastWriteTime); // 0x006072D8-0x00607440
		private static extern int RegQueryValueEx(IntPtr keyBase, string valueName, IntPtr reserved, ref RegistryValueKind type, IntPtr zero, ref int dataSize); // 0x00607440-0x00607540
		private static extern int RegQueryValueEx(IntPtr keyBase, string valueName, IntPtr reserved, ref RegistryValueKind type, out byte[] data, ref int dataSize); // 0x00607540-0x006076D8
		private static extern int RegQueryValueEx(IntPtr keyBase, string valueName, IntPtr reserved, ref RegistryValueKind type, ref int data, ref int dataSize); // 0x006076D8-0x006077D8
		private static extern int RegQueryValueEx(IntPtr keyBase, string valueName, IntPtr reserved, ref RegistryValueKind type, ref long data, ref int dataSize); // 0x006077D8-0x006078D8
		internal static extern int RegQueryInfoKey(IntPtr hKey, out StringBuilder lpClass, int[] lpcbClass, IntPtr lpReserved_MustBeZero, ref int lpcSubKeys, int[] lpcbMaxSubKeyLen, int[] lpcbMaxClassLen, ref int lpcValues, int[] lpcbMaxValueNameLen, int[] lpcbMaxValueLen, int[] lpcbSecurityDescriptor, int[] lpftLastWriteTime); // 0x006078D8-0x00607A88
		public IntPtr GetHandle(RegistryKey key); // 0x00607A88-0x00607B00
		private static bool IsHandleValid(RegistryKey key); // 0x00607B00-0x00607B2C
		public object GetValue(RegistryKey rkey, string name, object defaultValue, RegistryValueOptions options); // 0x00607B2C-0x00607F80
		private int GetBinaryValue(RegistryKey rkey, string name, RegistryValueKind type, out byte[] data, int size); // 0x006081BC-0x00608264
		public int SubKeyCount(RegistryKey rkey); // 0x00608264-0x00608314
		public RegistryKey OpenSubKey(RegistryKey rkey, string keyName, bool writable); // 0x00608314-0x0060842C
		public void Flush(RegistryKey rkey); // 0x006084AC-0x006084E4
		public void Close(RegistryKey rkey); // 0x006084E4-0x00608538
		public string[] GetSubKeyNames(RegistryKey rkey); // 0x00608538-0x006086F4
		private void GenerateException(int errorCode); // 0x00607F80-0x006081BC
		public string ToString(RegistryKey rkey); // 0x006086F4-0x00608718
		internal static string CombineName(RegistryKey rkey, string localName); // 0x0060842C-0x006084AC
	}

	internal static class Win32Native // TypeDefIndex: 14
	{
		// Nested types
		internal class WIN32_FIND_DATA // TypeDefIndex: 15
		{
			// Fields
			internal int dwFileAttributes; // 0x08
			internal string cFileName; // 0x0C
	
			// Constructors
			public WIN32_FIND_DATA(); // 0x00606FA4-0x00606FB0
		}
	
		// Methods
		public static string GetMessage(int hr); // 0x00606F0C-0x00606F98
		public static int MakeHRFromErrorCode(int errorCode); // 0x00606F98-0x00606FA4
	}
}

namespace Microsoft.Win32.SafeHandles
{
	public sealed class SafeFileHandle : SafeHandleZeroOrMinusOneIsInvalid // TypeDefIndex: 16
	{
		// Constructors
		public SafeFileHandle(IntPtr preexistingHandle, bool ownsHandle); // 0x00606470-0x0060649C
	
		// Methods
		protected override bool ReleaseHandle(); // 0x00606500-0x006065AC
	}

	internal sealed class SafeFindHandle : SafeHandleZeroOrMinusOneIsInvalid // TypeDefIndex: 17
	{
		// Constructors
		internal SafeFindHandle(IntPtr preexistingHandle); // 0x006065AC-0x006065D8
	
		// Methods
		protected override bool ReleaseHandle(); // 0x006065D8-0x00606660
	}

	public sealed class SafeRegistryHandle : SafeHandleZeroOrMinusOneIsInvalid // TypeDefIndex: 18
	{
		// Constructors
		public SafeRegistryHandle(IntPtr preexistingHandle, bool ownsHandle); // 0x006059D0-0x006059FC
	
		// Methods
		protected override bool ReleaseHandle(); // 0x006066C0-0x006066C8
	}

	public sealed class SafeWaitHandle : SafeHandleZeroOrMinusOneIsInvalid // TypeDefIndex: 19
	{
		// Constructors
		[ReliabilityContract] // 0x001431F0-0x00143208
		public SafeWaitHandle(IntPtr existingHandle, bool ownsHandle); // 0x006066C8-0x006066F4
	
		// Methods
		protected override bool ReleaseHandle(); // 0x006066F4-0x00606710
	}

	public abstract class SafeHandleZeroOrMinusOneIsInvalid : SafeHandle // TypeDefIndex: 20
	{
		// Properties
		public override bool IsInvalid { get; } // 0x00606660-0x006066C0 
	
		// Constructors
		[ReliabilityContract] // 0x00143208-0x00143220
		protected SafeHandleZeroOrMinusOneIsInvalid(bool ownsHandle); // 0x0060649C-0x00606500
	}
}

namespace Mono
{
	public static class Runtime // TypeDefIndex: 21
	{
		// Methods
		private static void mono_runtime_install_handlers(); // 0x0061B5E8-0x0061B5EC
		public static void InstallSignalHandlers(); // 0x0061B5EC-0x0061B5F0
		private static void mono_runtime_cleanup_handlers(); // 0x0061B5F0-0x0061B684
		public static void RemoveSignalHandlers(); // 0x0061B684-0x0061B688
		public static string GetDisplayName(); // 0x0061B688-0x0061B68C
		private static string GetNativeStackTrace(Exception exception); // 0x0061B68C-0x0061B690
		public static bool SetGCAllowSynchronousMajor(bool flag); // 0x0061B690-0x0061B698
	}

	internal struct RuntimeClassHandle // TypeDefIndex: 22
	{
		// Fields
		private unsafe RuntimeStructs.MonoClass* value; // 0x00
	
		// Properties
		internal unsafe RuntimeStructs.MonoClass* Value { get; } // 0x0061B6E0-0x0061B81C 
	
		// Constructors
		internal unsafe RuntimeClassHandle(RuntimeStructs.MonoClass* value); // 0x0061B698-0x0061B6C0
		internal unsafe RuntimeClassHandle(IntPtr ptr); // 0x0061B6C0-0x0061B6E0
	
		// Methods
		public override bool Equals(object obj); // 0x0061B81C-0x0061B824
		public override int GetHashCode(); // 0x0061B824-0x0061B854
		internal static unsafe IntPtr GetTypeFromClass(RuntimeStructs.MonoClass* klass); // 0x0061B854-0x0061B890
		internal RuntimeTypeHandle GetTypeHandle(); // 0x0061B890-0x0061B8D0
	}

	internal struct RuntimeRemoteClassHandle // TypeDefIndex: 23
	{
		// Fields
		private unsafe RuntimeStructs.RemoteClass* value; // 0x00
	
		// Properties
		internal RuntimeClassHandle ProxyClass { get; } // 0x0061C29C-0x0061C2E0 
	}

	internal struct RuntimeGenericParamInfoHandle // TypeDefIndex: 24
	{
		// Fields
		private unsafe RuntimeStructs.GenericParamInfo* value; // 0x00
	
		// Properties
		internal Type[] Constraints { get; } // 0x0061BD40-0x0061BD6C 
		internal GenericParameterAttributes Attributes { get; } // 0x0061BD6C-0x0061BDD4 
	
		// Constructors
		internal unsafe RuntimeGenericParamInfoHandle(IntPtr ptr); // 0x0061BBA4-0x0061BD40
	
		// Methods
		private Type[] GetConstraints(); // 0x0061BDD4-0x0061BDDC
		private int GetConstraintsCount(); // 0x0061BDDC-0x0061BDE4
	}

	internal struct RuntimeEventHandle // TypeDefIndex: 25
	{
		// Fields
		private IntPtr value; // 0x00
	
		// Properties
		public IntPtr Value { get; } // 0x0061B8E0-0x0061BA20 
	
		// Constructors
		internal RuntimeEventHandle(IntPtr v); // 0x0061B8D0-0x0061B8E0
	
		// Methods
		public override bool Equals(object obj); // 0x0061BA20-0x0061BA28
		public override int GetHashCode(); // 0x0061BA28-0x0061BA34
	}

	internal struct RuntimePropertyHandle // TypeDefIndex: 26
	{
		// Fields
		private IntPtr value; // 0x00
	
		// Properties
		public IntPtr Value { get; } // 0x0061C124-0x0061C264 
	
		// Constructors
		internal RuntimePropertyHandle(IntPtr v); // 0x0061C114-0x0061C124
	
		// Methods
		public override bool Equals(object obj); // 0x0061C264-0x0061C26C
		public override int GetHashCode(); // 0x0061C26C-0x0061C29C
	}

	internal struct RuntimeGPtrArrayHandle // TypeDefIndex: 27
	{
		// Fields
		private unsafe RuntimeStructs.GPtrArray* value; // 0x00
	
		// Properties
		internal int Length { get; } // 0x0061BA54-0x0061BB50 
		internal IntPtr this[int i] { get => default; } // 0x0061BB50-0x0061BB58 
	
		// Constructors
		internal unsafe RuntimeGPtrArrayHandle(IntPtr ptr); // 0x0061BA34-0x0061BA54
	
		// Methods
		internal IntPtr Lookup(int i); // 0x0061BB58-0x0061BB60
		private static unsafe void GPtrArrayFree(RuntimeStructs.GPtrArray* value); // 0x0061BB60-0x0061BB64
		internal static void DestroyAndFree(ref RuntimeGPtrArrayHandle h); // 0x0061BB64-0x0061BBA4
	}

	internal static class RuntimeMarshal // TypeDefIndex: 28
	{
		// Methods
		internal static string PtrToUtf8String(IntPtr ptr); // 0x0061BDE4-0x0061BED4
		internal static SafeStringMarshal MarshalString(string str); // 0x0061BED4-0x0061BF90
		private static int DecodeBlobSize(IntPtr in_ptr, out IntPtr out_ptr); // 0x0061BF90-0x0061C00C
		internal static byte[] DecodeBlobArray(IntPtr ptr); // 0x0061C00C-0x0061C0E0
		internal static int AsciHexDigitValue(int c); // 0x0061C0E0-0x0061C108
		internal static void FreeAssemblyName(ref MonoAssemblyName name, bool freeStruct); // 0x0061C108-0x0061C114
	}

	internal static class RuntimeStructs // TypeDefIndex: 29
	{
		// Nested types
		internal struct RemoteClass // TypeDefIndex: 30
		{
			// Fields
			internal IntPtr default_vtable; // 0x00
			internal IntPtr xdomain_vtable; // 0x04
			internal unsafe MonoClass* proxy_class; // 0x08
			internal IntPtr proxy_class_name; // 0x0C
			internal uint interface_count; // 0x10
		}
	
		internal struct MonoClass // TypeDefIndex: 31
		{
		}
	
		internal struct GenericParamInfo // TypeDefIndex: 32
		{
			// Fields
			internal unsafe MonoClass* pklass; // 0x00
			internal IntPtr name; // 0x04
			internal ushort flags; // 0x08
			internal uint token; // 0x0C
			internal unsafe MonoClass** constraints; // 0x10
		}
	
		internal struct GPtrArray // TypeDefIndex: 33
		{
			// Fields
			internal unsafe IntPtr* data; // 0x00
			internal int len; // 0x04
		}
	
		private struct HandleStackMark // TypeDefIndex: 34
		{
			// Fields
			private int size; // 0x00
			private int interior_size; // 0x04
			private IntPtr chunk; // 0x08
		}
	
		private struct MonoError // TypeDefIndex: 35
		{
			// Fields
			private ushort error_code; // 0x00
			private ushort hidden_0; // 0x02
			private IntPtr hidden_1; // 0x04
			private IntPtr hidden_2; // 0x08
			private IntPtr hidden_3; // 0x0C
			private IntPtr hidden_4; // 0x10
			private IntPtr hidden_5; // 0x14
			private IntPtr hidden_6; // 0x18
			private IntPtr hidden_7; // 0x1C
			private IntPtr hidden_8; // 0x20
			private IntPtr hidden_11; // 0x24
			private IntPtr hidden_12; // 0x28
			private IntPtr hidden_13; // 0x2C
			private IntPtr hidden_14; // 0x30
			private IntPtr hidden_15; // 0x34
			private IntPtr hidden_16; // 0x38
			private IntPtr hidden_17; // 0x3C
			private IntPtr hidden_18; // 0x40
		}
	}

	internal struct MonoAssemblyName // TypeDefIndex: 36
	{
		// Fields
		internal IntPtr name; // 0x00
		internal IntPtr culture; // 0x04
		internal IntPtr hash_value; // 0x08
		internal IntPtr public_key; // 0x0C
		internal unsafe fixed /* 0x00142170-0x001421EC */ byte public_key_token[0]; // 0x10
		internal uint hash_alg; // 0x24
		internal uint hash_len; // 0x28
		internal uint flags; // 0x2C
		internal ushort major; // 0x30
		internal ushort minor; // 0x32
		internal ushort build; // 0x34
		internal ushort revision; // 0x36
		internal ushort arch; // 0x38
	
		// Nested types
		[CompilerGenerated] // 0x00139D9C-0x00139DCC
		[UnsafeValueType] // 0x00139D9C-0x00139DCC
		public struct <public_key_token>e__FixedBuffer // TypeDefIndex: 37
		{
			// Fields
			public byte FixedElementField; // 0x00
		}
	}

	internal struct SafeGPtrArrayHandle : IDisposable // TypeDefIndex: 38
	{
		// Fields
		private RuntimeGPtrArrayHandle handle; // 0x00
	
		// Properties
		internal int Length { get; } // 0x0061C364-0x0061C38C 
		internal IntPtr this[int i] { get => default; } // 0x0061C38C-0x0061C404 
	
		// Constructors
		internal SafeGPtrArrayHandle(IntPtr ptr); // 0x0061C2E0-0x0061C320
	
		// Methods
		public void Dispose(); // 0x0061C320-0x0061C364
	}

	internal struct SafeStringMarshal : IDisposable // TypeDefIndex: 39
	{
		// Fields
		private readonly string str; // 0x00
		private IntPtr marshaled_string; // 0x04
	
		// Properties
		public IntPtr Value { get; } // 0x0061C4E4-0x0061C560 
	
		// Constructors
		public SafeStringMarshal(string str); // 0x0061C40C-0x0061C4E4
	
		// Methods
		public static IntPtr StringToUtf8(string str); // 0x0061C404-0x0061C408
		public static void GFree(IntPtr ptr); // 0x0061C408-0x0061C40C
		public void Dispose(); // 0x0061C560-0x0061C568
	}
}

namespace Mono.Xml
{
	internal class SecurityParser : SmallXmlParser, IContentHandler // TypeDefIndex: 40
	{
		// Fields
		private SecurityElement root; // 0x38
		private SecurityElement current; // 0x3C
		private Stack stack; // 0x40
	
		// Constructors
		public SecurityParser(); // 0x004CE9B4-0x004CEA2C
	
		// Methods
		public void LoadXml(string xml); // 0x004CEA2C-0x004CEAE0
		public SecurityElement ToXml(); // 0x004CEAE0-0x004CEAE8
		public void OnStartParsing(SmallXmlParser parser); // 0x004E6A20-0x004E6A24
		public void OnProcessingInstruction(string name, string text); // 0x004E6A24-0x004E6A28
		public void OnIgnorableWhitespace(string s); // 0x004E6A28-0x004E6A2C
		public void OnStartElement(string name, IAttrList attrs); // 0x004E6A2C-0x004E6E70
		public void OnEndElement(string name); // 0x004E6E70-0x004E6F70
		public void OnChars(string ch); // 0x004E6F70-0x004E7020
		public void OnEndParsing(SmallXmlParser parser); // 0x004E7020-0x004E7024
	}

	internal class SmallXmlParser // TypeDefIndex: 41
	{
		// Fields
		private IContentHandler handler; // 0x08
		private TextReader reader; // 0x0C
		private Stack elementNames; // 0x10
		private Stack xmlSpaces; // 0x14
		private string xmlSpace; // 0x18
		private StringBuilder buffer; // 0x1C
		private char[] nameBuffer; // 0x20
		private bool isWhitespace; // 0x24
		private AttrListImpl attributes; // 0x28
		private int line; // 0x2C
		private int column; // 0x30
		private bool resetColumn; // 0x34
	
		// Nested types
		public interface IContentHandler // TypeDefIndex: 42
		{
			// Methods
			void OnStartParsing(SmallXmlParser parser);
			void OnEndParsing(SmallXmlParser parser);
			void OnStartElement(string name, IAttrList attrs);
			void OnEndElement(string name);
			void OnProcessingInstruction(string name, string text);
			void OnChars(string text);
			void OnIgnorableWhitespace(string text);
		}
	
		public interface IAttrList // TypeDefIndex: 43
		{
			// Properties
			int Length { get; }
			string[] Names { get; }
			string[] Values { get; }
	
			// Methods
			string GetName(int i);
			string GetValue(int i);
			string GetValue(string name);
		}
	
		private class AttrListImpl : IAttrList // TypeDefIndex: 44
		{
			// Fields
			private List<string> attrNames; // 0x08
			private List<string> attrValues; // 0x0C
	
			// Properties
			public int Length { get; } // 0x004E90E8-0x004E9160 
			public string[] Names { get; } // 0x004E936C-0x004E93E4 
			public string[] Values { get; } // 0x004E93E4-0x004E945C 
	
			// Constructors
			public AttrListImpl(); // 0x004E7024-0x004E70C8
	
			// Methods
			public string GetName(int i); // 0x004E9160-0x004E91E0
			public string GetValue(int i); // 0x004E91E0-0x004E9260
			public string GetValue(string name); // 0x004E9260-0x004E936C
			internal void Clear(); // 0x004E8A0C-0x004E8AB0
			internal void Add(string name, string value); // 0x004E9034-0x004E90E8
		}
	
		// Constructors
		public SmallXmlParser(); // 0x004E66C4-0x004E67C4
	
		// Methods
		private Exception Error(string msg); // 0x004E70C8-0x004E7154
		private Exception UnexpectedEndError(); // 0x004E7224-0x004E7328
		private bool IsNameChar(char c, bool start); // 0x004E7328-0x004E743C
		private bool IsWhitespace(int c); // 0x004E743C-0x004E7468
		public void SkipWhitespaces(); // 0x004E7468-0x004E7470
		private void HandleWhitespaces(); // 0x004E7554-0x004E7644
		public void SkipWhitespaces(bool expected); // 0x004E7470-0x004E7554
		private int Peek(); // 0x004E76CC-0x004E7700
		private int Read(); // 0x004E7644-0x004E76CC
		public void Expect(int c); // 0x004E7700-0x004E7804
		private string ReadUntil(char until, bool handleReferences); // 0x004E7804-0x004E7958
		public string ReadName(); // 0x004E7B90-0x004E7DC8
		public void Parse(TextReader input, IContentHandler handler); // 0x004E67C4-0x004E6A20
		private void Cleanup(); // 0x004E8948-0x004E8A0C
		public void ReadContent(); // 0x004E7DC8-0x004E8790
		private void HandleBufferedContent(); // 0x004E8790-0x004E8948
		private void ReadCharacters(); // 0x004E8E74-0x004E8F10
		private void ReadReference(); // 0x004E7958-0x004E7B90
		private int ReadCharacterReference(); // 0x004E8F10-0x004E9034
		private void ReadAttribute(AttrListImpl a); // 0x004E8CD4-0x004E8E74
		private void ReadCDATASection(); // 0x004E8AB0-0x004E8C0C
		private void ReadComment(); // 0x004E8C0C-0x004E8CD4
	}

	internal class SmallXmlParserException : SystemException // TypeDefIndex: 45
	{
		// Fields
		private int line; // 0x44
		private int column; // 0x48
	
		// Constructors
		public SmallXmlParserException(string msg, int line, int column); // 0x004E7154-0x004E7224
	}
}

namespace Mono.Globalization.Unicode
{
	internal class CodePointIndexer // TypeDefIndex: 46
	{
		// Fields
		private readonly TableRange[] ranges; // 0x08
		public readonly int TotalCount; // 0x0C
		private int defaultIndex; // 0x10
		private int defaultCP; // 0x14
	
		// Nested types
		[Serializable]
		internal struct TableRange // TypeDefIndex: 47
		{
			// Fields
			public readonly int Start; // 0x00
			public readonly int End; // 0x04
			public readonly int Count; // 0x08
			public readonly int IndexStart; // 0x0C
			public readonly int IndexEnd; // 0x10
	
			// Constructors
			public TableRange(int start, int end, int indexStart); // 0x00608B38-0x00608B60
		}
	
		// Constructors
		public CodePointIndexer(int[] starts, int[] ends, int defaultIndex, int defaultCP); // 0x00608718-0x006089F0
	
		// Methods
		public int ToIndex(int cp); // 0x006089F0-0x00608B38
	}

	internal class TailoringInfo // TypeDefIndex: 48
	{
		// Fields
		public readonly int LCID; // 0x08
		public readonly int TailoringIndex; // 0x0C
		public readonly int TailoringCount; // 0x10
		public readonly bool FrenchSort; // 0x14
	
		// Constructors
		public TailoringInfo(int lcid, int tailoringIndex, int tailoringCount, bool frenchSort); // 0x0060AA88-0x0060AAC0
	}

	internal class Contraction // TypeDefIndex: 49
	{
		// Fields
		public int Index; // 0x08
		public readonly char[] Source; // 0x0C
		public readonly string Replacement; // 0x10
		public readonly byte[] SortKey; // 0x14
	
		// Constructors
		public Contraction(int index, char[] source, string replacement, byte[] sortkey); // 0x00608B60-0x00608B98
	}

	internal class ContractionComparer : IComparer<Contraction> // TypeDefIndex: 50
	{
		// Fields
		public static readonly ContractionComparer Instance; // 0x00
	
		// Constructors
		public ContractionComparer(); // 0x00608D14-0x00608D1C
		static ContractionComparer(); // 0x00608D1C-0x00608D90
	
		// Methods
		public int Compare(Contraction c1, Contraction c2); // 0x00608B98-0x00608D14
	}

	internal class Level2Map // TypeDefIndex: 51
	{
		// Fields
		public byte Source; // 0x08
		public byte Replace; // 0x09
	
		// Constructors
		public Level2Map(byte source, byte replace); // 0x00608D90-0x00608DB8
	}

	internal class MSCompatUnicodeTable // TypeDefIndex: 52
	{
		// Fields
		public static int MaxExpansionLength; // 0x00
		private static readonly unsafe byte* ignorableFlags; // 0x04
		private static readonly unsafe byte* categories; // 0x08
		private static readonly unsafe byte* level1; // 0x0C
		private static readonly unsafe byte* level2; // 0x10
		private static readonly unsafe byte* level3; // 0x14
		private static unsafe byte* cjkCHScategory; // 0x18
		private static unsafe byte* cjkCHTcategory; // 0x1C
		private static unsafe byte* cjkJAcategory; // 0x20
		private static unsafe byte* cjkKOcategory; // 0x24
		private static unsafe byte* cjkCHSlv1; // 0x28
		private static unsafe byte* cjkCHTlv1; // 0x2C
		private static unsafe byte* cjkJAlv1; // 0x30
		private static unsafe byte* cjkKOlv1; // 0x34
		private static unsafe byte* cjkKOlv2; // 0x38
		private static readonly char[] tailoringArr; // 0x3C
		private static readonly TailoringInfo[] tailoringInfos; // 0x40
		private static object forLock; // 0x44
		public static readonly bool isReady; // 0x48
	
		// Properties
		public static bool IsReady { get; } // 0x0060A504-0x0060A590 
	
		// Nested types
		[Serializable]
		[CompilerGenerated] // 0x00139E00-0x00139E10
		private sealed class <>c // TypeDefIndex: 53
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static Comparison<Level2Map> <>9__17_0; // 0x04
	
			// Constructors
			static <>c(); // 0x0060B2CC-0x0060B340
			public <>c(); // 0x0060B340-0x0060B348
	
			// Methods
			internal int <BuildTailoringTables>b__17_0(Level2Map a, Level2Map b); // 0x0060B348-0x0060B388
		}
	
		// Constructors
		static MSCompatUnicodeTable(); // 0x0060A644-0x0060AA88
	
		// Methods
		public static TailoringInfo GetTailoringInfo(int lcid); // 0x00608DB8-0x00608F98
		public static void BuildTailoringTables(CultureInfo culture, TailoringInfo t, ref Contraction[] contractions, ref Level2Map[] diacriticals); // 0x00608F98-0x006097C8
		private static unsafe void SetCJKReferences(string name, ref CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref CodePointIndexer lv2Indexer, ref byte* lv2Table); // 0x006097C8-0x00609B88
		public static byte Category(int cp); // 0x00609B88-0x00609C7C
		public static byte Level1(int cp); // 0x00609C7C-0x00609D70
		public static byte Level2(int cp); // 0x00609D70-0x00609E64
		public static byte Level3(int cp); // 0x00609E64-0x00609F58
		public static bool IsIgnorable(int cp, byte flag); // 0x00609F58-0x0060A0D4
		public static bool IsIgnorableNonSpacing(int cp); // 0x0060A0D4-0x0060A158
		public static int ToKanaTypeInsensitive(int i); // 0x0060A158-0x0060A170
		public static int ToWidthCompat(int i); // 0x0060A170-0x0060A320
		public static bool HasSpecialWeight(char c); // 0x0060A320-0x0060A3AC
		public static bool IsHalfWidthKana(char c); // 0x0060A3AC-0x0060A3C4
		public static bool IsHiragana(char c); // 0x0060A3C4-0x0060A3E0
		public static bool IsJapaneseSmallLetter(char c); // 0x0060A3E0-0x0060A504
		private static IntPtr GetResource(string name); // 0x0060A590-0x0060A63C
		private static unsafe uint UInt32FromBytePtr(byte* raw, uint idx); // 0x0060A63C-0x0060A644
		public static unsafe void FillCJK(string culture, ref CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref CodePointIndexer lv2Indexer, ref byte* lv2Table); // 0x0060AAC0-0x0060AC48
		private static unsafe void FillCJKCore(string culture, ref CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref CodePointIndexer cjkLv2Indexer, ref byte* lv2Table); // 0x0060AC48-0x0060B2CC
	}

	internal class MSCompatUnicodeTableUtil // TypeDefIndex: 54
	{
		// Fields
		public static readonly CodePointIndexer Ignorable; // 0x00
		public static readonly CodePointIndexer Category; // 0x04
		public static readonly CodePointIndexer Level1; // 0x08
		public static readonly CodePointIndexer Level2; // 0x0C
		public static readonly CodePointIndexer Level3; // 0x10
		public static readonly CodePointIndexer CjkCHS; // 0x14
		public static readonly CodePointIndexer Cjk; // 0x18
	
		// Constructors
		static MSCompatUnicodeTableUtil(); // 0x0060B388-0x0060B7A8
	}

	internal class NormalizationTableUtil // TypeDefIndex: 55
	{
		// Fields
		public static readonly CodePointIndexer Prop; // 0x00
		public static readonly CodePointIndexer Map; // 0x04
		public static readonly CodePointIndexer Combining; // 0x08
		public static readonly CodePointIndexer Composite; // 0x0C
		public static readonly CodePointIndexer Helper; // 0x10
	
		// Constructors
		static NormalizationTableUtil(); // 0x0060B7A8-0x0060BAA0
	
		// Methods
		public static int PropIdx(int cp); // 0x0060BAA0-0x0060BB4C
		public static int MapIdx(int cp); // 0x0060BB4C-0x0060BBF8
	}

	internal class SimpleCollator // TypeDefIndex: 56
	{
		// Fields
		private static bool QuickCheckDisabled; // 0x00
		private static SimpleCollator invariant; // 0x04
		private readonly TextInfo textInfo; // 0x08
		private readonly CodePointIndexer cjkIndexer; // 0x0C
		private readonly Contraction[] contractions; // 0x10
		private readonly Level2Map[] level2Maps; // 0x14
		private readonly byte[] unsafeFlags; // 0x18
		private readonly unsafe byte* cjkCatTable; // 0x1C
		private readonly unsafe byte* cjkLv1Table; // 0x20
		private readonly unsafe byte* cjkLv2Table; // 0x24
		private readonly CodePointIndexer cjkLv2Indexer; // 0x28
		private readonly int lcid; // 0x2C
		private readonly bool frenchSort; // 0x30
	
		// Nested types
		internal struct Context // TypeDefIndex: 57
		{
			// Fields
			public readonly CompareOptions Option; // 0x00
			public readonly unsafe byte* NeverMatchFlags; // 0x04
			public readonly unsafe byte* AlwaysMatchFlags; // 0x08
			public unsafe byte* Buffer1; // 0x0C
			public unsafe byte* Buffer2; // 0x10
			public int PrevCode; // 0x14
			public unsafe byte* PrevSortKey; // 0x18
	
			// Constructors
			public unsafe Context(CompareOptions opt, byte* alwaysMatchFlags, byte* neverMatchFlags, byte* buffer1, byte* buffer2, byte* prev1); // 0x0061306C-0x00613140
		}
	
		private struct PreviousInfo // TypeDefIndex: 58
		{
			// Fields
			public int Code; // 0x00
			public unsafe byte* SortKey; // 0x04
	
			// Constructors
			public unsafe PreviousInfo(bool dummy); // 0x00613140-0x00613154
		}
	
		private struct Escape // TypeDefIndex: 59
		{
			// Fields
			public string Source; // 0x00
			public int Index; // 0x04
			public int Start; // 0x08
			public int End; // 0x0C
			public int Optional; // 0x10
		}
	
		private enum ExtenderType // TypeDefIndex: 60
		{
			None = 0,
			Simple = 1,
			Voiced = 2,
			Conditional = 3,
			Buggy = 4
		}
	
		// Constructors
		public SimpleCollator(CultureInfo culture); // 0x0060BBF8-0x0060C0EC
		static SimpleCollator(); // 0x00612F78-0x0061306C
	
		// Methods
		private unsafe void SetCJKTable(CultureInfo culture, ref CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref CodePointIndexer lv2Indexer, ref byte* lv2Table); // 0x0060C0EC-0x0060C1F8
		private static CultureInfo GetNeutralCulture(CultureInfo info); // 0x0060C1F8-0x0060C294
		private byte Category(int cp); // 0x0060C294-0x0060C36C
		private byte Level1(int cp); // 0x0060C36C-0x0060C444
		private byte Level2(int cp, ExtenderType ext); // 0x0060C444-0x0060C674
		private static bool IsHalfKana(int cp, CompareOptions opt); // 0x0060C674-0x0060C710
		private Contraction GetContraction(string s, int start, int end); // 0x0060C710-0x0060C80C
		private Contraction GetContraction(string s, int start, int end, Contraction[] clist); // 0x0060C80C-0x0060C9B4
		private Contraction GetTailContraction(string s, int start, int end); // 0x0060C9B4-0x0060CAB0
		private Contraction GetTailContraction(string s, int start, int end, Contraction[] clist); // 0x0060CAB0-0x0060CD90
		private int FilterOptions(int i, CompareOptions opt); // 0x0060CD90-0x0060CEF8
		private ExtenderType GetExtenderType(int i); // 0x0060CEF8-0x0060D004
		private static byte ToDashTypeValue(ExtenderType ext, CompareOptions opt); // 0x0060D004-0x0060D030
		private int FilterExtender(int i, ExtenderType ext, CompareOptions opt); // 0x0060D030-0x0060D270
		private static bool IsIgnorable(int i, CompareOptions opt); // 0x0060D270-0x0060D31C
		private bool IsSafe(int i); // 0x0060D31C-0x0060D3B4
		public SortKey GetSortKey(string s, CompareOptions options); // 0x0060D3B4-0x0060D408
		public SortKey GetSortKey(string s, int start, int length, CompareOptions options); // 0x0060D408-0x0060D554
		private void GetSortKey(string s, int start, int end, SortKeyBuffer buf, CompareOptions opt); // 0x0060D768-0x0060DC3C
		private void FillSortKeyRaw(int i, ExtenderType ext, SortKeyBuffer buf, CompareOptions opt); // 0x0060DC88-0x0060E084
		private void FillSurrogateSortKeyRaw(int i, SortKeyBuffer buf); // 0x0060E28C-0x0060E358
		internal int Compare(string s1, int idx1, int len1, string s2, int idx2, int len2, CompareOptions options); // 0x0060E438-0x0060E510
		private unsafe void ClearBuffer(byte* buffer, int size); // 0x0060DC6C-0x0060DC88
		private int CompareInternal(string s1, int idx1, int len1, string s2, int idx2, int len2, out bool targetConsumed, out bool sourceConsumed, bool skipHeadingExtenders, bool immediateBreakup, ref Context ctx); // 0x0060E510-0x0061012C
		private int CompareFlagPair(bool b1, bool b2); // 0x0061012C-0x0061014C
		public bool IsPrefix(string src, string target, CompareOptions opt); // 0x0061014C-0x006101A4
		public bool IsPrefix(string s, string target, int start, int length, CompareOptions opt); // 0x006101A4-0x006102A8
		private bool IsPrefix(string s, string target, int start, int length, bool skipHeadingExtenders, ref Context ctx); // 0x006102A8-0x0061033C
		public bool IsSuffix(string src, string target, CompareOptions opt); // 0x0061033C-0x006103C0
		public bool IsSuffix(string s, string target, int start, int length, CompareOptions opt); // 0x006103C0-0x006104AC
		private int QuickIndexOf(string s, string target, int start, int length, out bool testWasUnable); // 0x006106C0-0x006108B0
		public int IndexOf(string s, string target, int start, int length, CompareOptions opt); // 0x006108B0-0x00610B38
		private int IndexOfOrdinal(string s, string target, int start, int length); // 0x006111BC-0x006112F0
		private int IndexOfOrdinal(string s, char target, int start, int length); // 0x006112F0-0x0061135C
		private unsafe int IndexOfSortKey(string s, int start, int length, byte* sortkey, char target, int ti, bool noLv4, ref Context ctx); // 0x0061135C-0x006113DC
		private unsafe int IndexOf(string s, string target, int start, int length, byte* targetSortKey, ref Context ctx); // 0x00610B38-0x006111BC
		public int LastIndexOf(string s, string target, int start, int length, CompareOptions opt); // 0x006104AC-0x006106C0
		private int LastIndexOfOrdinal(string s, string target, int start, int length); // 0x0061159C-0x0061180C
		private unsafe int LastIndexOfSortKey(string s, int start, int orgStart, int length, byte* sortkey, int ti, bool noLv4, ref Context ctx); // 0x00611F2C-0x00611FB8
		private unsafe int LastIndexOf(string s, string target, int start, int length, byte* targetSortKey, ref Context ctx); // 0x0061180C-0x00611F2C
		private unsafe bool MatchesForward(string s, ref int idx, int end, int ti, byte* sortkey, bool noLv4, ref Context ctx); // 0x006113DC-0x0061159C
		private unsafe bool MatchesForwardCore(string s, ref int idx, int end, int ti, byte* sortkey, bool noLv4, ExtenderType ext, ref Contraction ct, ref Context ctx); // 0x00612180-0x00612640
		private unsafe bool MatchesPrimitive(CompareOptions opt, byte* source, int si, ExtenderType ext, byte* target, int ti, bool noLv4); // 0x00612640-0x0061290C
		private unsafe bool MatchesBackward(string s, ref int idx, int end, int orgStart, int ti, byte* sortkey, bool noLv4, ref Context ctx); // 0x00611FB8-0x00612180
		private unsafe bool MatchesBackwardCore(string s, ref int idx, int end, int orgStart, int ti, byte* sortkey, bool noLv4, ExtenderType ext, ref Contraction ct, ref Context ctx); // 0x0061290C-0x00612F78
	}

	internal class SortKeyBuffer // TypeDefIndex: 61
	{
		// Fields
		private byte[] l1b; // 0x08
		private byte[] l2b; // 0x0C
		private byte[] l3b; // 0x10
		private byte[] l4sb; // 0x14
		private byte[] l4tb; // 0x18
		private byte[] l4kb; // 0x1C
		private byte[] l4wb; // 0x20
		private byte[] l5b; // 0x24
		private string source; // 0x28
		private int l1; // 0x2C
		private int l2; // 0x30
		private int l3; // 0x34
		private int l4s; // 0x38
		private int l4t; // 0x3C
		private int l4k; // 0x40
		private int l4w; // 0x44
		private int l5; // 0x48
		private int lcid; // 0x4C
		private CompareOptions options; // 0x50
		private bool processLevel2; // 0x54
		private bool frenchSort; // 0x55
		private bool frenchSorted; // 0x56
	
		// Constructors
		public SortKeyBuffer(int lcid); // 0x0060D554-0x0060D55C
	
		// Methods
		public void Reset(); // 0x00613154-0x00613174
		internal void Initialize(CompareOptions options, int lcid, string s, bool frenchSort); // 0x0060D55C-0x0060D768
		internal void AppendCJKExtension(byte lv1msb, byte lv1lsb); // 0x0060E1F8-0x0060E28C
		internal void AppendKana(byte category, byte lv1, byte lv2, byte lv3, bool isSmallKana, byte markType, bool isKatakana, bool isHalfWidth); // 0x0060E358-0x0060E438
		internal void AppendNormal(byte category, byte lv1, byte lv2, byte lv3); // 0x0060E084-0x0060E1F8
		private void AppendLevel5(byte category, byte lv1); // 0x0061327C-0x00613310
		private void AppendBufferPrimitive(byte value, ref byte[] buf, ref int bidx); // 0x00613174-0x0061327C
		public SortKey GetResultAndReset(); // 0x0060DC3C-0x0060DC6C
		private int GetOptimizedLength(byte[] data, int len, byte defaultValue); // 0x00613934-0x006139B0
		public SortKey GetResult(); // 0x00613310-0x00613934
	}
}

namespace Mono.Security
{
	internal class ASN1 // TypeDefIndex: 62
	{
		// Fields
		private byte m_nTag; // 0x08
		private byte[] m_aValue; // 0x0C
		private ArrayList elist; // 0x10
	
		// Properties
		public int Count { get; } // 0x0061C8E8-0x0061C908 
		public byte Tag { get; } // 0x0061C908-0x0061C910 
		public int Length { get; } // 0x0061C910-0x0061C924 
		public byte[] Value { get; set; } // 0x0061C924-0x0061CA4C 0x0061CA4C-0x0061CB4C
		public ASN1 this[int index] { get => default; } // 0x0061D7D4-0x0061D9A8 
	
		// Constructors
		public ASN1(byte tag); // 0x0061C568-0x0061C590
		public ASN1(byte tag, byte[] data); // 0x0061C590-0x0061C5B8
		public ASN1(byte[] data); // 0x0061C5B8-0x0061C798
	
		// Methods
		private bool CompareArray(byte[] array1, byte[] array2); // 0x0061CB4C-0x0061CC14
		public bool CompareValue(byte[] value); // 0x0061CC14-0x0061CC20
		public ASN1 Add(ASN1 asn1); // 0x0061CC20-0x0061CCD8
		public virtual byte[] GetBytes(); // 0x0061CCD8-0x0061D65C
		protected void Decode(byte[] asn1, ref int anPos, int anLength); // 0x0061C798-0x0061C8E8
		protected void DecodeTLV(byte[] asn1, ref int pos, out byte tag, out int length, out byte[] content); // 0x0061D65C-0x0061D7D4
		public ASN1 Element(int index, byte anTag); // 0x0061D9A8-0x0061DB9C
		public override string ToString(); // 0x0061DB9C-0x0061DEAC
	}

	internal static class ASN1Convert // TypeDefIndex: 63
	{
		// Methods
		public static ASN1 FromInt32(int value); // 0x0061DEAC-0x0061E05C
		public static ASN1 FromOid(string oid); // 0x0061E05C-0x0061E13C
		public static int ToInt32(ASN1 asn1); // 0x0061E13C-0x0061E2B8
		public static string ToOid(ASN1 asn1); // 0x0061E2B8-0x0061E6D0
		public static DateTime ToDateTime(ASN1 time); // 0x0061E6D0-0x0061EE74
	}

	internal sealed class BitConverterLE // TypeDefIndex: 64
	{
		// Methods
		private static unsafe byte[] GetUIntBytes(byte* bytes); // 0x004C896C-0x004C8B4C
		private static unsafe byte[] GetULongBytes(byte* bytes); // 0x004C8B4C-0x004C8E4C
		internal static byte[] GetBytes(int value); // 0x004C8E4C-0x004C8E6C
		internal static byte[] GetBytes(float value); // 0x004C8E6C-0x004C8E8C
		internal static byte[] GetBytes(double value); // 0x004C8E8C-0x004C8EA8
		private static unsafe void UIntFromBytes(byte* dst, byte[] src, int startIndex); // 0x004C8EA8-0x004C9088
		private static unsafe void ULongFromBytes(byte* dst, byte[] src, int startIndex); // 0x004C9088-0x004C91D0
		internal static float ToSingle(byte[] value, int startIndex); // 0x004C91D0-0x004C9200
		internal static double ToDouble(byte[] value, int startIndex); // 0x004C9200-0x004C9238
	}

	internal sealed class PKCS7 // TypeDefIndex: 65
	{
		// Nested types
		public class ContentInfo // TypeDefIndex: 66
		{
			// Fields
			private string contentType; // 0x08
			private ASN1 content; // 0x0C
	
			// Properties
			public ASN1 ASN1 { get; } // 0x004D8B40-0x004D8B44 
			public ASN1 Content { get; set; } // 0x004D8C28-0x004D8C30 0x004D8C30-0x004D8C38
			public string ContentType { get; set; } // 0x004D8C38-0x004D8C40 0x004D8C40-0x004D8C48
	
			// Constructors
			public ContentInfo(); // 0x004D8760-0x004D87E0
			public ContentInfo(string oid); // 0x004D87E0-0x004D87FC
			public ContentInfo(byte[] data); // 0x004D87FC-0x004D887C
			public ContentInfo(ASN1 asn1); // 0x004D887C-0x004D8B40
	
			// Methods
			internal ASN1 GetASN1(); // 0x004D8B44-0x004D8C28
		}
	
		public class EncryptedData // TypeDefIndex: 67
		{
			// Fields
			private byte _version; // 0x08
			private ContentInfo _content; // 0x0C
			private ContentInfo _encryptionAlgorithm; // 0x10
			private byte[] _encrypted; // 0x14
	
			// Properties
			public ContentInfo EncryptionAlgorithm { get; } // 0x004D9194-0x004D919C 
			public byte[] EncryptedContent { get; } // 0x004D919C-0x004D9298 
	
			// Constructors
			public EncryptedData(); // 0x004D8C48-0x004D8C68
			public EncryptedData(ASN1 asn1); // 0x004D8C68-0x004D9194
		}
	}
}

namespace Mono.Security.X509
{
	internal class SafeBag // TypeDefIndex: 68
	{
		// Fields
		private string _bagOID; // 0x08
		private ASN1 _asn1; // 0x0C
	
		// Properties
		public string BagOID { get; } // 0x004DB868-0x004DB870 
		public ASN1 ASN1 { get; } // 0x004DB870-0x004DB878 
	
		// Constructors
		public SafeBag(string bagOID, ASN1 asn1); // 0x004DDA1C-0x004DDA44
	}

	internal class PKCS12 : ICloneable // TypeDefIndex: 69
	{
		// Fields
		private byte[] _password; // 0x08
		private ArrayList _keyBags; // 0x0C
		private ArrayList _secretBags; // 0x10
		private Mono.Security.X509.X509CertificateCollection _certs; // 0x14
		private bool _keyBagsChanged; // 0x18
		private bool _secretBagsChanged; // 0x19
		private bool _certsChanged; // 0x1A
		private int _iterations; // 0x1C
		private ArrayList _safeBags; // 0x20
		private RandomNumberGenerator _rng; // 0x24
		private static int password_max_length; // 0x00
	
		// Properties
		public string Password { set; } // 0x004D93B4-0x004D9574
		public int IterationCount { get; set; } // 0x004DAFAC-0x004DAFB4 0x004DAFB4-0x004DAFBC
		public ArrayList Keys { get; } // 0x004DAFBC-0x004DB868 
		public Mono.Security.X509.X509CertificateCollection Certificates { get; } // 0x004DBA3C-0x004DBF30 
		internal RandomNumberGenerator RNG { get; } // 0x004DC1F8-0x004DC220 
		public static int MaximumPasswordLength { get; } // 0x004DAF20-0x004DAFAC 
	
		// Nested types
		public class DeriveBytes // TypeDefIndex: 70
		{
			// Fields
			private static byte[] keyDiversifier; // 0x00
			private static byte[] ivDiversifier; // 0x04
			private static byte[] macDiversifier; // 0x08
			private string _hashName; // 0x08
			private int _iterations; // 0x0C
			private byte[] _password; // 0x10
			private byte[] _salt; // 0x14
	
			// Properties
			public string HashName { set; } // 0x004DCBD4-0x004DCBDC
			public int IterationCount { set; } // 0x004DCBCC-0x004DCBD4
			public byte[] Password { set; } // 0x004DC9AC-0x004DCACC
			public byte[] Salt { set; } // 0x004DCACC-0x004DCBCC
	
			// Constructors
			public DeriveBytes(); // 0x004DC9A4-0x004DC9AC
			static DeriveBytes(); // 0x004E2D44-0x004E2E4C
	
			// Methods
			private void Adjust(byte[] a, int aOff, byte[] b); // 0x004E24D4-0x004E2668
			private byte[] Derive(byte[] diversifier, int n); // 0x004E2668-0x004E2D44
			public byte[] DeriveKey(int size); // 0x004DCBDC-0x004DCC7C
			public byte[] DeriveIV(int size); // 0x004DCC7C-0x004DCD1C
			public byte[] DeriveMAC(int size); // 0x004DEAB0-0x004DEB50
		}
	
		// Constructors
		public PKCS12(); // 0x004D9298-0x004D937C
		public PKCS12(byte[] data); // 0x004D9384-0x004D93B4
		public PKCS12(byte[] data, string password); // 0x004DA03C-0x004DA070
		static PKCS12(); // 0x004E246C-0x004E24D4
	
		// Methods
		private void Decode(byte[] data); // 0x004D9574-0x004DA03C
		~PKCS12(); // 0x004DAE9C-0x004DAF20
		private bool Compare(byte[] expected, byte[] actual); // 0x004DA27C-0x004DA344
		private SymmetricAlgorithm GetSymmetricAlgorithm(string algorithmOid, byte[] salt, int iterationCount); // 0x004DC220-0x004DC9A4
		public byte[] Decrypt(string algorithmOid, byte[] salt, int iterationCount, byte[] encryptedData); // 0x004DB878-0x004DBA3C
		public byte[] Decrypt(PKCS7.EncryptedData ed); // 0x004DAD90-0x004DAE9C
		public byte[] Encrypt(string algorithmOid, byte[] salt, int iterationCount, byte[] data); // 0x004DCD1C-0x004DCF4C
		private DSAParameters GetExistingParameters(out bool found); // 0x004DCF4C-0x004DD1D8
		private void AddPrivateKey(PKCS8.PrivateKeyInfo pki); // 0x004DD84C-0x004DDA1C
		private void ReadSafeBag(ASN1 safeBag); // 0x004DA344-0x004DAD90
		private ASN1 CertificateSafeBag(Mono.Security.X509.X509Certificate x509, IDictionary attributes); // 0x004DDA44-0x004DEAB0
		private byte[] MAC(byte[] password, byte[] salt, int iterations, byte[] data); // 0x004DA070-0x004DA27C
		public byte[] GetBytes(); // 0x004DEB50-0x004E1458
		private PKCS7.ContentInfo EncryptedContentInfo(ASN1 safeBags, string algorithmOid); // 0x004E1468-0x004E187C
		public void AddCertificate(Mono.Security.X509.X509Certificate cert); // 0x004E1460-0x004E1468
		public void AddCertificate(Mono.Security.X509.X509Certificate cert, IDictionary attributes); // 0x004E187C-0x004E1BE0
		public void RemoveCertificate(Mono.Security.X509.X509Certificate cert); // 0x004E1458-0x004E1460
		public void RemoveCertificate(Mono.Security.X509.X509Certificate cert, IDictionary attrs); // 0x004E1BE0-0x004E2368
		public object Clone(); // 0x004E2368-0x004E246C
	}

	internal sealed class X501 // TypeDefIndex: 71
	{
		// Fields
		private static byte[] countryName; // 0x00
		private static byte[] organizationName; // 0x04
		private static byte[] organizationalUnitName; // 0x08
		private static byte[] commonName; // 0x0C
		private static byte[] localityName; // 0x10
		private static byte[] stateOrProvinceName; // 0x14
		private static byte[] streetAddress; // 0x18
		private static byte[] domainComponent; // 0x1C
		private static byte[] userid; // 0x20
		private static byte[] email; // 0x24
		private static byte[] dnQualifier; // 0x28
		private static byte[] title; // 0x2C
		private static byte[] surname; // 0x30
		private static byte[] givenName; // 0x34
		private static byte[] initial; // 0x38
	
		// Constructors
		static X501(); // 0x004E3D1C-0x004E40C4
	
		// Methods
		public static string ToString(ASN1 seq); // 0x004E2E4C-0x004E2FC0
		private static void AppendEntry(StringBuilder sb, ASN1 entry, bool quotes); // 0x004E2FC0-0x004E3D1C
	}

	internal class X509Certificate : ISerializable // TypeDefIndex: 72
	{
		// Fields
		private ASN1 decoder; // 0x08
		private byte[] m_encodedcert; // 0x0C
		private DateTime m_from; // 0x10
		private DateTime m_until; // 0x18
		private ASN1 issuer; // 0x20
		private string m_issuername; // 0x24
		private string m_keyalgo; // 0x28
		private byte[] m_keyalgoparams; // 0x2C
		private ASN1 subject; // 0x30
		private string m_subject; // 0x34
		private byte[] m_publickey; // 0x38
		private byte[] signature; // 0x3C
		private string m_signaturealgo; // 0x40
		private byte[] m_signaturealgoparams; // 0x44
		private RSA _rsa; // 0x48
		private DSA _dsa; // 0x4C
		private int version; // 0x50
		private byte[] serialnumber; // 0x54
		private byte[] issuerUniqueID; // 0x58
		private byte[] subjectUniqueID; // 0x5C
		private X509ExtensionCollection extensions; // 0x60
		private static string encoding_error; // 0x00
	
		// Properties
		public DSA DSA { get; } // 0x004DD3C8-0x004DD774 
		public virtual byte[] KeyAlgorithmParameters { get; } // 0x004E518C-0x004E5288 
		public virtual RSA RSA { get; } // 0x004E5288-0x004E5490 
		public virtual byte[] RawData { get; } // 0x004E5490-0x004E558C 
	
		// Constructors
		public X509Certificate(byte[] data); // 0x004DBF30-0x004DC110
		static X509Certificate(); // 0x004E5610-0x004E5688
	
		// Methods
		private void Parse(byte[] data); // 0x004E40C4-0x004E4D94
		private byte[] GetUnsignedBigInteger(byte[] integer); // 0x004E50B0-0x004E518C
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x004E558C-0x004E5610
		private static byte[] PEM(string type, byte[] data); // 0x004E4F08-0x004E50B0
	}

	[Serializable]
	internal class X509CertificateCollection : CollectionBase, IEnumerable // TypeDefIndex: 73
	{
		// Properties
		public Mono.Security.X509.X509Certificate this[int index] { get => default; } // 0x004E5688-0x004E57B4 
	
		// Nested types
		public class X509CertificateEnumerator : IEnumerator // TypeDefIndex: 74
		{
			// Fields
			private IEnumerator enumerator; // 0x08
	
			// Properties
			public Mono.Security.X509.X509Certificate Current { get; } // 0x004DD248-0x004DD3C8 
			object IEnumerator.Current { get; } // 0x004E5914-0x004E59EC 
	
			// Constructors
			public X509CertificateEnumerator(X509CertificateCollection mappings); // 0x004E57B4-0x004E589C
	
			// Methods
			bool IEnumerator.MoveNext(); // 0x004E59EC-0x004E5AC4
			void IEnumerator.Reset(); // 0x004E5AC4-0x004E5B9C
			public bool MoveNext(); // 0x004DD774-0x004DD84C
		}
	
		// Constructors
		public X509CertificateCollection(); // 0x004D937C-0x004D9384
	
		// Methods
		public int Add(Mono.Security.X509.X509Certificate value); // 0x004DC110-0x004DC1F8
		public new X509CertificateEnumerator GetEnumerator(); // 0x004DD1D8-0x004DD248
		IEnumerator IEnumerable.GetEnumerator(); // 0x004E589C-0x004E58D8
		public override int GetHashCode(); // 0x004E58D8-0x004E5914
	}

	internal class X509Extension // TypeDefIndex: 75
	{
		// Fields
		protected string extnOid; // 0x08
		protected bool extnCritical; // 0x0C
		protected ASN1 extnValue; // 0x10
	
		// Constructors
		public X509Extension(ASN1 asn1); // 0x004E5B9C-0x004E6058
	
		// Methods
		protected virtual void Decode(); // 0x004E6058-0x004E605C
		public override bool Equals(object obj); // 0x004E605C-0x004E6228
		public override int GetHashCode(); // 0x004E6228-0x004E625C
		private void WriteLine(StringBuilder sb, int n, int pos); // 0x004E625C-0x004E6558
		public override string ToString(); // 0x004E6558-0x004E6680
	}

	[DefaultMember] // 0x00139E78-0x00139EAC
	internal sealed class X509ExtensionCollection : CollectionBase, IEnumerable // TypeDefIndex: 76
	{
		// Fields
		private bool readOnly; // 0x0C
	
		// Constructors
		public X509ExtensionCollection(); // 0x004E6680-0x004E6688
		public X509ExtensionCollection(ASN1 asn1); // 0x004E4D94-0x004E4F08
	
		// Methods
		IEnumerator IEnumerable.GetEnumerator(); // 0x004E6688-0x004E66C4
	}
}

namespace Mono.Security.Cryptography
{
	internal class ARC4Managed : RC4, ICryptoTransform // TypeDefIndex: 77
	{
		// Fields
		private byte[] key; // 0x2C
		private byte[] state; // 0x30
		private byte x; // 0x34
		private byte y; // 0x35
		private bool m_disposed; // 0x36
	
		// Properties
		public override byte[] Key { get; set; } // 0x004C9504-0x004C962C 0x004C962C-0x004C9794
		public bool CanTransformMultipleBlocks { get; } // 0x004C9B2C-0x004C9B34 
		public int InputBlockSize { get; } // 0x004C9B34-0x004C9B3C 
		public int OutputBlockSize { get; } // 0x004C9B3C-0x004C9B44 
	
		// Constructors
		public ARC4Managed(); // 0x004C9238-0x004C92DC
	
		// Methods
		~ARC4Managed(); // 0x004C939C-0x004C9414
		protected override void Dispose(bool disposing); // 0x004C9414-0x004C9504
		public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgvIV); // 0x004C9994-0x004C99BC
		public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgvIV); // 0x004C99BC-0x004C99F4
		public override void GenerateIV(); // 0x004C99F4-0x004C9A70
		public override void GenerateKey(); // 0x004C9A70-0x004C9A90
		private void KeySetup(byte[] key); // 0x004C9794-0x004C9994
		private void CheckInput(byte[] inputBuffer, int inputOffset, int inputCount); // 0x004C9B44-0x004C9D28
		public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset); // 0x004C9D28-0x004C9EF4
		private int InternalTransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset); // 0x004C9EF4-0x004CA1B4
		public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x004CA1B4-0x004CA264
	}

	internal sealed class KeyBuilder // TypeDefIndex: 78
	{
		// Fields
		private static RandomNumberGenerator rng; // 0x00
	
		// Properties
		private static RandomNumberGenerator Rng { get; } // 0x004CC654-0x004CC6E8 
	
		// Methods
		public static byte[] Key(int size); // 0x004C9A90-0x004C9B2C
		public static byte[] IV(int size); // 0x004CC6E8-0x004CC784
	}

	internal class KeyPairPersistence // TypeDefIndex: 79
	{
		// Fields
		private static bool _userPathExists; // 0x00
		private static string _userPath; // 0x04
		private static bool _machinePathExists; // 0x08
		private static string _machinePath; // 0x0C
		private CspParameters _params; // 0x08
		private string _keyvalue; // 0x0C
		private string _filename; // 0x10
		private string _container; // 0x14
		private static object lockobj; // 0x10
	
		// Properties
		public string Filename { get; } // 0x004CC994-0x004CCB90 
		public string KeyValue { get; set; } // 0x004CDC64-0x004CDC6C 0x004CDC6C-0x004CDC7C
		private static string UserPath { get; } // 0x004CD4F8-0x004CDC64 
		private static string MachinePath { get; } // 0x004CCD9C-0x004CD4F8 
		private bool CanChange { get; } // 0x004CDC7C-0x004CDC90 
		private bool UseDefaultKeyContainer { get; } // 0x004CE984-0x004CE9B4 
		private bool UseMachineKeyStore { get; } // 0x004CCD6C-0x004CCD9C 
		private string ContainerName { get; } // 0x004CCB90-0x004CCD6C 
	
		// Constructors
		public KeyPairPersistence(CspParameters parameters); // 0x004CC784-0x004CC78C
		public KeyPairPersistence(CspParameters parameters, string keyPair); // 0x004CC78C-0x004CC85C
		static KeyPairPersistence(); // 0x004CEAE8-0x004CEB68
	
		// Methods
		public bool Load(); // 0x004CDC90-0x004CDE14
		public void Save(); // 0x004CDFE4-0x004CE224
		public void Remove(); // 0x004CE6D8-0x004CE6F0
		internal static bool _CanSecure(string root); // 0x004CE870-0x004CE874
		internal static bool _ProtectUser(string path); // 0x004CE874-0x004CE878
		internal static bool _ProtectMachine(string path); // 0x004CE878-0x004CE87C
		internal static bool _IsUserProtected(string path); // 0x004CE87C-0x004CE880
		internal static bool _IsMachineProtected(string path); // 0x004CE880-0x004CE884
		private static bool CanSecure(string path); // 0x004CE884-0x004CE984
		private static bool ProtectUser(string path); // 0x004CE618-0x004CE6D8
		private static bool ProtectMachine(string path); // 0x004CE558-0x004CE618
		private static bool IsUserProtected(string path); // 0x004CE6F0-0x004CE7B0
		private static bool IsMachineProtected(string path); // 0x004CE7B0-0x004CE870
		private CspParameters Copy(CspParameters p); // 0x004CC85C-0x004CC994
		private void FromXml(string xml); // 0x004CDE14-0x004CDFE4
		private string ToXml(); // 0x004CE224-0x004CE558
	}

	internal abstract class MD2 : HashAlgorithm // TypeDefIndex: 80
	{
		// Constructors
		protected MD2(); // 0x004CEB68-0x004CEB88
	
		// Methods
		public static MD2 Create(); // 0x004CEB88-0x004CEBF0
	}

	internal class MD2Managed : MD2 // TypeDefIndex: 81
	{
		// Fields
		private byte[] state; // 0x18
		private byte[] checksum; // 0x1C
		private byte[] buffer; // 0x20
		private int count; // 0x24
		private byte[] x; // 0x28
		private static readonly byte[] PI_SUBST; // 0x00
	
		// Constructors
		public MD2Managed(); // 0x004CEBF0-0x004CECB0
		static MD2Managed(); // 0x004CF400-0x004CF498
	
		// Methods
		private byte[] Padding(int nLength); // 0x004CECB0-0x004CED74
		public override void Initialize(); // 0x004CED74-0x004CEDDC
		protected override void HashCore(byte[] array, int ibStart, int cbSize); // 0x004CEDDC-0x004CEEA8
		protected override byte[] HashFinal(); // 0x004CF284-0x004CF400
		private void MD2Transform(byte[] state, byte[] checksum, byte[] block, int index); // 0x004CEEA8-0x004CF284
	}

	internal abstract class MD4 : HashAlgorithm // TypeDefIndex: 82
	{
		// Constructors
		protected MD4(); // 0x004CF498-0x004CF4B8
	
		// Methods
		public static MD4 Create(); // 0x004CF4B8-0x004CF520
	}

	internal class MD4Managed : MD4 // TypeDefIndex: 83
	{
		// Fields
		private uint[] state; // 0x18
		private byte[] buffer; // 0x1C
		private uint[] count; // 0x20
		private uint[] x; // 0x24
		private byte[] digest; // 0x28
	
		// Constructors
		public MD4Managed(); // 0x004CF520-0x004CF5FC
	
		// Methods
		public override void Initialize(); // 0x004CF5FC-0x004CF794
		protected override void HashCore(byte[] array, int ibStart, int cbSize); // 0x004CF794-0x004CF988
		protected override byte[] HashFinal(); // 0x004D0B54-0x004D0C8C
		private byte[] Padding(int nLength); // 0x004D0E30-0x004D0EE0
		private uint F(uint x, uint y, uint z); // 0x004D0EE0-0x004D0EF0
		private uint G(uint x, uint y, uint z); // 0x004D0EF0-0x004D0F04
		private uint H(uint x, uint y, uint z); // 0x004D0F04-0x004D0F10
		private uint ROL(uint x, byte n); // 0x004D0F10-0x004D0F20
		private void FF(ref uint a, uint b, uint c, uint d, uint x, byte s); // 0x004D0F20-0x004D0F60
		private void GG(ref uint a, uint b, uint c, uint d, uint x, byte s); // 0x004D0F60-0x004D0FB0
		private void HH(ref uint a, uint b, uint c, uint d, uint x, byte s); // 0x004D0FB0-0x004D0FF8
		private void Encode(byte[] output, uint[] input); // 0x004D0C8C-0x004D0E30
		private void Decode(uint[] output, byte[] input, int index); // 0x004D0FF8-0x004D1138
		private void MD4Transform(uint[] state, byte[] block, int index); // 0x004CF988-0x004D0B54
	}

	internal sealed class PKCS1 // TypeDefIndex: 84
	{
		// Fields
		private static byte[] emptySHA1; // 0x00
		private static byte[] emptySHA256; // 0x04
		private static byte[] emptySHA384; // 0x08
		private static byte[] emptySHA512; // 0x0C
	
		// Constructors
		static PKCS1(); // 0x004D20B4-0x004D21F4
	
		// Methods
		private static bool Compare(byte[] array1, byte[] array2); // 0x004D1138-0x004D1200
		public static byte[] I2OSP(byte[] x, int size); // 0x004D1200-0x004D12C4
		public static byte[] OS2IP(byte[] x); // 0x004D12C4-0x004D13D0
		public static byte[] RSAVP1(RSA rsa, byte[] s); // 0x004D13D0-0x004D140C
		internal static bool Verify_v15(RSA rsa, string hashName, byte[] hashValue, byte[] signature); // 0x004D140C-0x004D15BC
		public static bool Verify_v15(RSA rsa, HashAlgorithm hash, byte[] hashValue, byte[] signature, bool tryNonStandardEncoding); // 0x004D1A20-0x004D1CB0
		public static byte[] Encode_v15(HashAlgorithm hash, byte[] hashValue, int emLength); // 0x004D1CB0-0x004D20AC
		internal static HashAlgorithm CreateFromName(string name); // 0x004D15BC-0x004D1A20
	}

	internal sealed class PKCS8 // TypeDefIndex: 85
	{
		// Nested types
		public class PrivateKeyInfo // TypeDefIndex: 86
		{
			// Fields
			private int _version; // 0x08
			private string _algorithm; // 0x0C
			private byte[] _key; // 0x10
			private ArrayList _list; // 0x14
	
			// Properties
			public byte[] PrivateKey { get; } // 0x004D2E2C-0x004D2F28 
	
			// Constructors
			public PrivateKeyInfo(); // 0x004D2978-0x004D29FC
			public PrivateKeyInfo(byte[] data); // 0x004D29FC-0x004D2A20
	
			// Methods
			private void Decode(byte[] data); // 0x004D2A20-0x004D2E2C
			private static byte[] RemoveLeadingZero(byte[] bigInt); // 0x004D2F28-0x004D3014
			private static byte[] Normalize(byte[] bigInt, int length); // 0x004D3014-0x004D30E4
			public static RSA DecodeRSA(byte[] keypair); // 0x004D30E4-0x004D36E4
			public static DSA DecodeDSA(byte[] privateKey, DSAParameters dsaParameters); // 0x004D36E4-0x004D3870
		}
	
		public class EncryptedPrivateKeyInfo // TypeDefIndex: 87
		{
			// Fields
			private string _algorithm; // 0x08
			private byte[] _salt; // 0x0C
			private int _iterations; // 0x10
			private byte[] _data; // 0x14
	
			// Properties
			public string Algorithm { get; } // 0x004D2704-0x004D270C 
			public byte[] EncryptedData { get; } // 0x004D270C-0x004D2808 
			public byte[] Salt { get; } // 0x004D2808-0x004D2970 
			public int IterationCount { get; } // 0x004D2970-0x004D2978 
	
			// Constructors
			public EncryptedPrivateKeyInfo(); // 0x004D21F4-0x004D21FC
			public EncryptedPrivateKeyInfo(byte[] data); // 0x004D21FC-0x004D2224
	
			// Methods
			private void Decode(byte[] data); // 0x004D2224-0x004D2704
		}
	}

	internal abstract class RC4 : SymmetricAlgorithm // TypeDefIndex: 88
	{
		// Fields
		private static KeySizes[] s_legalBlockSizes; // 0x00
		private static KeySizes[] s_legalKeySizes; // 0x04
	
		// Properties
		public override byte[] IV { get; set; } // 0x004D3870-0x004D38D0 0x004D38D0-0x004D38D4
	
		// Constructors
		public RC4(); // 0x004C92DC-0x004C939C
		static RC4(); // 0x004D393C-0x004D3B1C
	
		// Methods
		public static RC4 Create(); // 0x004D38D4-0x004D393C
	}

	internal class RSAManaged : RSA // TypeDefIndex: 89
	{
		// Fields
		private bool isCRTpossible; // 0x10
		private bool keyBlinding; // 0x11
		private bool keypairGenerated; // 0x12
		private bool m_disposed; // 0x13
		private BigInteger d; // 0x14
		private BigInteger p; // 0x18
		private BigInteger q; // 0x1C
		private BigInteger dp; // 0x20
		private BigInteger dq; // 0x24
		private BigInteger qInv; // 0x28
		private BigInteger n; // 0x2C
		private BigInteger e; // 0x30
		[CompilerGenerated] // 0x001421EC-0x001421FC
		private KeyGeneratedEventHandler KeyGenerated; // 0x34
	
		// Properties
		public override int KeySize { get; } // 0x004D4920-0x004D4A24 
		public bool PublicOnly { get; } // 0x004D4A24-0x004D4B14 
	
		// Events
		public event KeyGeneratedEventHandler KeyGenerated {
			add; // 0x004D5D48-0x004D5E54
			remove; // 0x004D5E54-0x004D5F60
		}
	
		// Nested types
		public delegate void KeyGeneratedEventHandler(object sender, EventArgs e); // TypeDefIndex: 90; 0x004D4098-0x004D4920
	
		// Constructors
		public RSAManaged(int keySize); // 0x004D3B1C-0x004D3C48
	
		// Methods
		~RSAManaged(); // 0x004D3C48-0x004D3CC0
		private void GenerateKeyPair(); // 0x004D3CC0-0x004D4098
		public override byte[] EncryptValue(byte[] rgb); // 0x004D4B14-0x004D4C8C
		public override RSAParameters ExportParameters(bool includePrivateParameters); // 0x004D4D7C-0x004D521C
		public override void ImportParameters(RSAParameters parameters); // 0x004D521C-0x004D595C
		protected override void Dispose(bool disposing); // 0x004D595C-0x004D5D48
		public override string ToXmlString(bool includePrivateParameters); // 0x004D5F60-0x004D6834
		private byte[] GetPaddedValue(BigInteger value, int length); // 0x004D4C8C-0x004D4D7C
	}

	internal abstract class SymmetricTransform : ICryptoTransform // TypeDefIndex: 91
	{
		// Fields
		protected SymmetricAlgorithm algo; // 0x08
		protected bool encrypt; // 0x0C
		protected int BlockSizeByte; // 0x10
		protected byte[] temp; // 0x14
		protected byte[] temp2; // 0x18
		private byte[] workBuff; // 0x1C
		private byte[] workout; // 0x20
		protected PaddingMode padmode; // 0x24
		protected int FeedBackByte; // 0x28
		private bool m_disposed; // 0x2C
		protected bool lastBlock; // 0x2D
		private RandomNumberGenerator _rng; // 0x30
	
		// Properties
		public virtual bool CanTransformMultipleBlocks { get; } // 0x004D6DAC-0x004D6DB4 
		public virtual int InputBlockSize { get; } // 0x004D6DB4-0x004D6DBC 
		public virtual int OutputBlockSize { get; } // 0x004D6DBC-0x004D6DC4 
		private bool KeepLastBlock { get; } // 0x004D7AE8-0x004D7B1C 
	
		// Constructors
		public SymmetricTransform(SymmetricAlgorithm symmAlgo, bool encryption, byte[] rgbIV); // 0x004D688C-0x004D6C38
	
		// Methods
		~SymmetricTransform(); // 0x004D6C38-0x004D6CB0
		void IDisposable.Dispose(); // 0x004D6CB0-0x004D6D4C
		protected virtual void Dispose(bool disposing); // 0x004D6D4C-0x004D6DAC
		protected virtual void Transform(byte[] input, byte[] output); // 0x004D6DC4-0x004D6FE8
		protected abstract void ECB(byte[] input, byte[] output);
		protected virtual void CBC(byte[] input, byte[] output); // 0x004D6FE8-0x004D71D8
		protected virtual void CFB(byte[] input, byte[] output); // 0x004D71D8-0x004D7468
		protected virtual void OFB(byte[] input, byte[] output); // 0x004D7468-0x004D7504
		protected virtual void CTS(byte[] input, byte[] output); // 0x004D7504-0x004D75A0
		private void CheckInput(byte[] inputBuffer, int inputOffset, int inputCount); // 0x004D75A0-0x004D7784
		public virtual int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset); // 0x004D7784-0x004D7AE8
		private int InternalTransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset); // 0x004D7B1C-0x004D7D4C
		private void Random(byte[] buffer, int start, int length); // 0x004D7D4C-0x004D7E2C
		private void ThrowBadPaddingException(PaddingMode padding, int length, int position); // 0x004D7E2C-0x004D7FDC
		protected virtual byte[] FinalEncrypt(byte[] inputBuffer, int inputOffset, int inputCount); // 0x004D7FDC-0x004D8320
		protected virtual byte[] FinalDecrypt(byte[] inputBuffer, int inputOffset, int inputCount); // 0x004D8320-0x004D8654
		public virtual byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x004D8654-0x004D8760
	}

	internal class DSAManaged : DSA // TypeDefIndex: 92
	{
		// Fields
		private bool keypairGenerated; // 0x10
		private bool m_disposed; // 0x11
		private BigInteger p; // 0x14
		private BigInteger q; // 0x18
		private BigInteger g; // 0x1C
		private BigInteger x; // 0x20
		private BigInteger y; // 0x24
		private BigInteger j; // 0x28
		private BigInteger seed; // 0x2C
		private int counter; // 0x30
		private bool j_missing; // 0x34
		private RandomNumberGenerator rng; // 0x38
		[CompilerGenerated] // 0x001421FC-0x0014220C
		private KeyGeneratedEventHandler KeyGenerated; // 0x3C
	
		// Properties
		private RandomNumberGenerator Random { get; } // 0x004CB780-0x004CB7A8 
		public override int KeySize { get; } // 0x004CB7A8-0x004CB7E8 
		public bool PublicOnly { get; } // 0x004CB7E8-0x004CB888 
	
		// Events
		public event KeyGeneratedEventHandler KeyGenerated {
			add; // 0x004CC3E4-0x004CC4F0
			remove; // 0x004CC4F0-0x004CC5FC
		}
	
		// Nested types
		public delegate void KeyGeneratedEventHandler(object sender, EventArgs e); // TypeDefIndex: 93; 0x004CADEC-0x004CB674
	
		// Constructors
		public DSAManaged(int dwKeySize); // 0x004CA264-0x004CA37C
	
		// Methods
		~DSAManaged(); // 0x004CA37C-0x004CA3F4
		private void Generate(); // 0x004CA3F4-0x004CA440
		private void GenerateKeyPair(); // 0x004CAC74-0x004CADEC
		private void add(byte[] a, byte[] b, int value); // 0x004CB674-0x004CB780
		private void GenerateParams(int keyLength); // 0x004CA440-0x004CAC74
		private byte[] NormalizeArray(byte[] array); // 0x004CB888-0x004CB954
		public override DSAParameters ExportParameters(bool includePrivateParameters); // 0x004CB954-0x004CBCC4
		public override void ImportParameters(DSAParameters parameters); // 0x004CBCC4-0x004CC068
		protected override void Dispose(bool disposing); // 0x004CC068-0x004CC3E4
	}
}

namespace Mono.Math
{
	internal class BigInteger // TypeDefIndex: 94
	{
		// Fields
		private uint length; // 0x08
		private uint[] data; // 0x0C
		internal static readonly uint[] smallPrimes; // 0x00
		private static RandomNumberGenerator rng; // 0x04
	
		// Properties
		private static RandomNumberGenerator Rng { get; } // 0x00616534-0x0061664C 
	
		// Nested types
		public enum Sign // TypeDefIndex: 95
		{
			Negative = -1,
			Zero = 0,
			Positive = 1
		}
	
		internal sealed class ModulusRing // TypeDefIndex: 96
		{
			// Fields
			private BigInteger mod; // 0x08
			private BigInteger constant; // 0x0C
	
			// Constructors
			public ModulusRing(BigInteger modulus); // 0x00618394-0x006184C8
	
			// Methods
			public void BarrettReduction(BigInteger x); // 0x00619844-0x00619C1C
			public BigInteger Multiply(BigInteger a, BigInteger b); // 0x00619C1C-0x00619E7C
			public BigInteger Difference(BigInteger a, BigInteger b); // 0x006195C8-0x00619844
			public BigInteger Pow(BigInteger a, BigInteger k); // 0x006184C8-0x00618610
			public BigInteger Pow(uint b, BigInteger exp); // 0x00619E7C-0x00619F00
		}
	
		private sealed class Kernel // TypeDefIndex: 97
		{
			// Methods
			public static BigInteger Subtract(BigInteger big, BigInteger small); // 0x006149D0-0x00614CE0
			public static void MinusEq(BigInteger big, BigInteger small); // 0x00618BF0-0x00618E00
			public static void PlusEq(BigInteger bi1, BigInteger bi2); // 0x00618E00-0x00619108
			public static Sign Compare(BigInteger bi1, BigInteger bi2); // 0x006146E8-0x006149D0
			public static uint SingleByteDivideInPlace(BigInteger n, uint d); // 0x006176C4-0x006177BC
			public static uint DwordMod(BigInteger n, uint d); // 0x00614CE4-0x00614D80
			public static BigInteger[] DwordDivMod(BigInteger n, uint d); // 0x00619108-0x006193B0
			public static BigInteger[] multiByteDivide(BigInteger bi1, BigInteger bi2); // 0x00614DC4-0x006157D4
			public static BigInteger LeftShift(BigInteger bi, int n); // 0x00615EEC-0x00616274
			public static BigInteger RightShift(BigInteger bi, int n); // 0x00616278-0x00616534
			public static BigInteger MultiplyByDword(BigInteger n, uint f); // 0x00615D54-0x00615EE8
			public static void Multiply(uint[] x, uint xOffset, uint xLen, uint[] y, uint yOffset, uint yLen, uint[] d, uint dOffset); // 0x00615AF4-0x00615C28
			public static void MultiplyMod2p32pmod(uint[] x, int xOffset, int xLen, uint[] y, int yOffest, int yLen, uint[] d, int dOffset, int mod); // 0x006193B0-0x006194D4
			public static uint modInverse(BigInteger bi, uint modulus); // 0x006194D4-0x006195C8
			public static BigInteger modInverse(BigInteger bi, BigInteger modulus); // 0x00617A1C-0x00618300
		}
	
		// Constructors
		public BigInteger(Sign sign, uint len); // 0x006139B0-0x00613A34
		public BigInteger(BigInteger bi); // 0x00613A34-0x00613B6C
		public BigInteger(BigInteger bi, uint len); // 0x00613B6C-0x00613C88
		public BigInteger(byte[] inData); // 0x00613C88-0x006141C8
		public BigInteger(uint ui); // 0x0061424C-0x00614300
		static BigInteger(); // 0x00618B58-0x00618BF0
	
		// Methods
		public static implicit operator BigInteger(uint value); // 0x00614300-0x00614370
		public static implicit operator BigInteger(int value); // 0x00614370-0x00614440
		public static BigInteger operator -(BigInteger bi1, BigInteger bi2); // 0x00614440-0x00614660
		public static uint operator %(BigInteger bi, uint ui); // 0x00614CE0-0x00614CE4
		public static BigInteger operator %(BigInteger bi1, BigInteger bi2); // 0x00614D80-0x00614DC4
		public static BigInteger operator /(BigInteger bi1, BigInteger bi2); // 0x006157D4-0x00615818
		public static BigInteger operator *(BigInteger bi1, BigInteger bi2); // 0x00615818-0x00615AF4
		public static BigInteger operator *(BigInteger bi, int i); // 0x00615C28-0x00615D54
		public static BigInteger operator <<(BigInteger bi1, int shiftVal); // 0x00615EE8-0x00615EEC
		public static BigInteger operator >>(BigInteger bi1, int shiftVal); // 0x00616274-0x00616278
		public static BigInteger GenerateRandom(int bits, RandomNumberGenerator rng); // 0x0061664C-0x00616848
		public static BigInteger GenerateRandom(int bits); // 0x00616848-0x006168D0
		public void Randomize(RandomNumberGenerator rng); // 0x006168D0-0x00616AEC
		public void Randomize(); // 0x00616B80-0x00616C08
		public int BitCount(); // 0x00616AEC-0x00616B80
		public bool TestBit(uint bitNum); // 0x00616C08-0x00616C64
		public bool TestBit(int bitNum); // 0x00616C64-0x00616DA4
		public void SetBit(uint bitNum); // 0x00616DA4-0x00616DAC
		public void SetBit(uint bitNum, bool value); // 0x00616DAC-0x00616E20
		public int LowestSetBit(); // 0x00616E20-0x00616ED0
		public byte[] GetBytes(); // 0x00616ED0-0x00617094
		public static bool operator ==(BigInteger bi1, uint ui); // 0x00614660-0x006146E8
		public static bool operator !=(BigInteger bi1, uint ui); // 0x00617094-0x0061711C
		public static bool operator ==(BigInteger bi1, BigInteger bi2); // 0x0061711C-0x00617220
		public static bool operator !=(BigInteger bi1, BigInteger bi2); // 0x00617220-0x00617320
		public static bool operator >(BigInteger bi1, BigInteger bi2); // 0x00617320-0x00617340
		public static bool operator <(BigInteger bi1, BigInteger bi2); // 0x00617340-0x00617354
		public static bool operator >=(BigInteger bi1, BigInteger bi2); // 0x00617354-0x00617374
		public static bool operator <=(BigInteger bi1, BigInteger bi2); // 0x00617374-0x00617394
		public string ToString(uint radix); // 0x00617394-0x00617400
		public string ToString(uint radix, string characterSet); // 0x00617400-0x006176C4
		private void Normalize(); // 0x006141C8-0x0061424C
		public void Clear(); // 0x006177BC-0x0061782C
		public override int GetHashCode(); // 0x0061782C-0x006178A0
		public override string ToString(); // 0x006178A0-0x006178A8
		public override bool Equals(object o); // 0x006178A8-0x00617A18
		public BigInteger ModInverse(BigInteger modulus); // 0x00617A18-0x00617A1C
		public BigInteger ModPow(BigInteger exp, BigInteger n); // 0x00618300-0x00618394
		public bool IsProbablePrime(); // 0x00618610-0x00618900
		public static BigInteger GeneratePseudoPrime(int bits); // 0x00618950-0x006189E4
		public void Incr2(); // 0x006189EC-0x00618B58
	}
}

namespace Mono.Math.Prime
{
	internal enum ConfidenceFactor // TypeDefIndex: 98
	{
		ExtraLow = 0,
		Low = 1,
		Medium = 2,
		High = 3,
		ExtraHigh = 4,
		Provable = 5
	}

	internal delegate bool PrimalityTest(BigInteger bi, ConfidenceFactor confidence); // TypeDefIndex: 99; 0x0061A42C-0x0061AC68

	internal sealed class PrimalityTests // TypeDefIndex: 100
	{
		// Methods
		private static int GetSPPRounds(BigInteger bi, ConfidenceFactor confidence); // 0x0061AD48-0x0061AF38
		public static bool Test(BigInteger n, ConfidenceFactor confidence); // 0x00618900-0x00618950
		public static bool RabinMillerTest(BigInteger n, ConfidenceFactor confidence); // 0x0061B1CC-0x0061B5E8
		public static bool SmallPrimeSppTest(BigInteger bi, ConfidenceFactor confidence); // 0x0061AF38-0x0061B1CC
	}
}

namespace Mono.Math.Prime.Generator
{
	internal abstract class PrimeGeneratorBase // TypeDefIndex: 101
	{
		// Properties
		public virtual ConfidenceFactor Confidence { get; } // 0x00619F00-0x00619F08 
		public virtual PrimalityTest PrimalityTest { get; } // 0x00619F08-0x00619F88 
		public virtual int TrialDivisionBounds { get; } // 0x00619F9C-0x00619FA4 
	
		// Constructors
		protected PrimeGeneratorBase(); // 0x00619FA4-0x00619FAC
	
		// Methods
		public abstract BigInteger GenerateNewPrime(int bits);
	}

	internal class SequentialSearchPrimeGeneratorBase : PrimeGeneratorBase // TypeDefIndex: 102
	{
		// Constructors
		public SequentialSearchPrimeGeneratorBase(); // 0x006189E4-0x006189EC
	
		// Methods
		protected virtual BigInteger GenerateSearchBase(int bits, object context); // 0x00619FAC-0x0061A054
		public override BigInteger GenerateNewPrime(int bits); // 0x0061A054-0x0061A068
		public virtual BigInteger GenerateNewPrime(int bits, object context); // 0x0061A068-0x0061A42C
		protected virtual bool IsPrimeAcceptable(BigInteger bi, object context); // 0x0061AC68-0x0061AC70
	}
}

namespace System
{
	internal static class ThrowHelper // TypeDefIndex: 103
	{
		// Methods
		internal static void ThrowArgumentNullException(ExceptionArgument argument); // 0x0026E4D0-0x0026E540
		private static Exception CreateArgumentNullException(ExceptionArgument argument); // 0x0026E540-0x0026E620
		internal static void ThrowArgumentOutOfRangeException(); // 0x0026E620-0x0026E638
		internal static void ThrowWrongValueTypeArgumentException(object value, Type targetType); // 0x0026E78C-0x0026E8F8
		internal static void ThrowArgumentException(ExceptionResource resource); // 0x0026E8F8-0x0026E99C
		internal static void ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource); // 0x0026E638-0x0026E78C
		internal static void ThrowInvalidOperationException(ExceptionResource resource); // 0x0026EA9C-0x0026EB40
		internal static void ThrowNotSupportedException(ExceptionResource resource); // 0x0026EB40-0x0026EBF4
		internal static void IfNullAndNullsAreIllegalThenThrow<T>(object value, ExceptionArgument argName);
		internal static string GetArgumentName(ExceptionArgument argument); // 0x0026EA1C-0x0026EA9C
		internal static string GetResourceName(ExceptionResource resource); // 0x0026E99C-0x0026EA1C
	}

	internal interface IValueTupleInternal : ITuple // TypeDefIndex: 104
	{
	}

	[Serializable]
	public struct ValueTuple : IEquatable<ValueTuple>, IStructuralEquatable, IStructuralComparable, IComparable, IComparable<ValueTuple>, IValueTupleInternal // TypeDefIndex: 105
	{
		// Methods
		public override bool Equals(object obj); // 0x00A6091C-0x00A60998
		public bool Equals(ValueTuple other); // 0x00A60998-0x00A609A0
		bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer); // 0x00A609A0-0x00A60B68
		int IComparable.CompareTo(object other); // 0x00A60B68-0x00A60B70
		public int CompareTo(ValueTuple other); // 0x00A60B70-0x00A60CC4
		int IStructuralComparable.CompareTo(object other, IComparer comparer); // 0x00A60CC4-0x00A60CCC
		public override int GetHashCode(); // 0x00A60CCC-0x00A60CD4
		int IStructuralEquatable.GetHashCode(IEqualityComparer comparer); // 0x00A60CD4-0x00A60CDC
		public override string ToString(); // 0x00A60CDC-0x00A60D38
		internal static int CombineHashCodes(int h1, int h2); // 0x00A60D38-0x00A60DF0
	}

	[Serializable]
	public struct ValueTuple<T1, T2> : IEquatable<ValueTuple<T1, T2>>, IStructuralEquatable, IStructuralComparable, IComparable, IComparable<ValueTuple<T1, T2>>, IValueTupleInternal // TypeDefIndex: 106
	{
		// Fields
		public T1 Item1;
		public T2 Item2;
	
		// Methods
		public override bool Equals(object obj);
		public bool Equals(ValueTuple<T1, T2> other);
		bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer);
		int IComparable.CompareTo(object other);
		public int CompareTo(ValueTuple<T1, T2> other);
		int IStructuralComparable.CompareTo(object other, IComparer comparer);
		public override int GetHashCode();
		int IStructuralEquatable.GetHashCode(IEqualityComparer comparer);
		private int GetHashCodeCore(IEqualityComparer comparer);
		public override string ToString();
	}

	public abstract class Array : IList, IStructuralComparable, IStructuralEquatable, ICloneable // TypeDefIndex: 107
	{
		// Properties
		int ICollection.Count { get; } // 0x00765360-0x00765364 
		bool IList.IsReadOnly { get; } // 0x007653BC-0x007653C4 
		object IList.this[int index] { get => default; set {} } // 0x007653C4-0x007653C8 0x007655C4-0x007655D4
		public long LongLength { get; } // 0x00767678-0x007676EC 
		public bool IsFixedSize { get; } // 0x00767E74-0x00767E7C 
		public bool IsReadOnly { get; } // 0x00767E7C-0x00767E84 
		public bool IsSynchronized { get; } // 0x00767E84-0x00767E8C 
		public object SyncRoot { get; } // 0x00767E8C-0x00767E90 
		public int Length { [ReliabilityContract] /* 0x00143260-0x00143278 */ get; } // 0x00765364-0x007653BC 
		public int Rank { [ReliabilityContract] /* 0x00143278-0x00143290 */ get; } // 0x00765E3C-0x00765E40 
	
		// Nested types
		private sealed class ArrayEnumerator : IEnumerator, ICloneable // TypeDefIndex: 108
		{
			// Fields
			private Array _array; // 0x08
			private int _index; // 0x0C
			private int _endIndex; // 0x10
	
			// Properties
			public object Current { get; } // 0x0076AB80-0x0076ADBC 
	
			// Constructors
			internal ArrayEnumerator(Array array); // 0x00769D54-0x00769D98
	
			// Methods
			public bool MoveNext(); // 0x0076AB3C-0x0076AB6C
			public void Reset(); // 0x0076AB6C-0x0076AB78
			public object Clone(); // 0x0076AB78-0x0076AB80
		}
	
		internal struct InternalEnumerator<T> : IEnumerator<T> // TypeDefIndex: 109
		{
			// Fields
			private readonly Array array;
			private int idx;
	
			// Properties
			public T Current { get; }
			object IEnumerator.Current { get; }
	
			// Constructors
			internal InternalEnumerator(Array array);
	
			// Methods
			public void Dispose();
			public bool MoveNext();
			void IEnumerator.Reset();
		}
	
		internal class EmptyInternalEnumerator<T> : IEnumerator<T> // TypeDefIndex: 110
		{
			// Fields
			public static readonly EmptyInternalEnumerator<T> Value;
	
			// Properties
			public T Current { get; }
			object IEnumerator.Current { get; }
	
			// Constructors
			public EmptyInternalEnumerator();
			static EmptyInternalEnumerator();
	
			// Methods
			public void Dispose();
			public bool MoveNext();
			void IEnumerator.Reset();
		}
	
		private struct SorterObjectArray // TypeDefIndex: 111
		{
			// Fields
			private object[] keys; // 0x00
			private object[] items; // 0x04
			private IComparer comparer; // 0x08
	
			// Constructors
			internal SorterObjectArray(object[] keys, object[] items, IComparer comparer); // 0x0076BF98-0x0076C394
	
			// Methods
			internal void SwapIfGreaterWithItems(int a, int b); // 0x0076C394-0x0076C61C
			private void Swap(int i, int j); // 0x0076C61C-0x0076C7F0
			internal void Sort(int left, int length); // 0x0076C7F0-0x0076C908
			private void IntrospectiveSort(int left, int length); // 0x0076C908-0x0076D0A4
			private void IntroSort(int lo, int hi, int depthLimit); // 0x0076D0A4-0x0076D0C0
			private int PickPivotAndPartition(int lo, int hi); // 0x0076D0C0-0x0076D614
			private void Heapsort(int lo, int hi); // 0x0076D614-0x0076D61C
			private void DownHeap(int i, int n, int lo); // 0x0076D61C-0x0076D638
			private void InsertionSort(int lo, int hi); // 0x0076D638-0x0076D640
		}
	
		private struct SorterGenericArray // TypeDefIndex: 112
		{
			// Fields
			private Array keys; // 0x00
			private Array items; // 0x04
			private IComparer comparer; // 0x08
	
			// Constructors
			internal SorterGenericArray(Array keys, Array items, IComparer comparer); // 0x0076ADBC-0x0076B04C
	
			// Methods
			internal void SwapIfGreaterWithItems(int a, int b); // 0x0076B04C-0x0076B194
			private void Swap(int i, int j); // 0x0076B194-0x0076B36C
			internal void Sort(int left, int length); // 0x0076B36C-0x0076B374
			private void IntrospectiveSort(int left, int length); // 0x0076B55C-0x0076BB40
			private void IntroSort(int lo, int hi, int depthLimit); // 0x0076BB40-0x0076BB5C
			private int PickPivotAndPartition(int lo, int hi); // 0x0076BB5C-0x0076BF10
			private void Heapsort(int lo, int hi); // 0x0076BF10-0x0076BF18
			private void DownHeap(int i, int n, int lo); // 0x0076BF18-0x0076BF34
			private void InsertionSort(int lo, int hi); // 0x0076BF34-0x0076BF98
		}
	
		// Constructors
		private Array(); // 0x00769D98-0x00769DA0
	
		// Methods
		public static Array CreateInstance(Type elementType, params /* 0x00146148-0x00146158 */ long[] lengths); // 0x00764DC8-0x00764FC4
		public static ReadOnlyCollection<T> AsReadOnly<T>(T[] array);
		public static void Resize<T>(ref T[] array, int newSize);
		int IList.Add(object value); // 0x007657D8-0x00765874
		bool IList.Contains(object value); // 0x00765874-0x00765894
		void IList.Clear(); // 0x00765974-0x007659A8
		int IList.IndexOf(object value); // 0x00765B6C-0x00765B70
		void IList.Insert(int index, object value); // 0x00765B70-0x00765C0C
		void IList.Remove(object value); // 0x00765C0C-0x00765CA8
		void IList.RemoveAt(int index); // 0x00765CA8-0x00765D44
		public void CopyTo(Array array, int index); // 0x00765D44-0x00765E3C
		public object Clone(); // 0x00766524-0x0076652C
		int IStructuralComparable.CompareTo(object other, IComparer comparer); // 0x0076652C-0x00766760
		bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer); // 0x00766760-0x0076694C
		internal static int CombineHashCodes(int h1, int h2); // 0x0076694C-0x00766958
		int IStructuralEquatable.GetHashCode(IEqualityComparer comparer); // 0x00766958-0x00766B0C
		public static int BinarySearch(Array array, object value); // 0x00766B0C-0x00766BF4
		public static TOutput[] ConvertAll<TInput, TOutput>(TInput[] array, Converter<TInput, TOutput> converter);
		public static void Copy(Array sourceArray, Array destinationArray, long length); // 0x007671EC-0x007672C4
		public static void Copy(Array sourceArray, long sourceIndex, Array destinationArray, long destinationIndex, long length); // 0x007673F8-0x007675A0
		public void CopyTo(Array array, long index); // 0x007675A0-0x00767678
		public static void ForEach<T>(T[] array, Action<T> action);
		public long GetLongLength(int dimension); // 0x007676F0-0x00767704
		public object GetValue(long index); // 0x00767704-0x007677D4
		public object GetValue(long index1, long index2); // 0x007677D4-0x0076790C
		public object GetValue(long index1, long index2, long index3); // 0x007679D8-0x00767B78
		public object GetValue(params /* 0x00146158-0x00146168 */ long[] indices); // 0x00767C68-0x00767E70
		public static int BinarySearch(Array array, int index, int length, object value); // 0x00767E90-0x00767EB0
		public static int BinarySearch(Array array, object value, IComparer comparer); // 0x00767EB0-0x00767F98
		public static int BinarySearch(Array array, int index, int length, object value, IComparer comparer); // 0x00766BF4-0x007671EC
		private static int GetMedian(int low, int hi); // 0x00767F98-0x00767FA4
		public static int BinarySearch<T>(T[] array, T value);
		public static int BinarySearch<T>(T[] array, T value, IComparer<T> comparer);
		public static int BinarySearch<T>(T[] array, int index, int length, T value);
		public static int BinarySearch<T>(T[] array, int index, int length, T value, IComparer<T> comparer);
		public static int IndexOf(Array array, object value); // 0x00765894-0x00765974
		public static int IndexOf(Array array, object value, int startIndex); // 0x007682C4-0x007683AC
		public static int IndexOf(Array array, object value, int startIndex, int count); // 0x00767FA4-0x007682C4
		public static int IndexOf<T>(T[] array, T value);
		public static int IndexOf<T>(T[] array, T value, int startIndex);
		public static int IndexOf<T>(T[] array, T value, int startIndex, int count);
		public static int LastIndexOf(Array array, object value); // 0x007683AC-0x00768488
		public static int LastIndexOf(Array array, object value, int startIndex); // 0x007687F4-0x007688C0
		public static int LastIndexOf(Array array, object value, int startIndex, int count); // 0x00768488-0x007687F4
		public static int LastIndexOf<T>(T[] array, T value);
		public static int LastIndexOf<T>(T[] array, T value, int startIndex);
		public static int LastIndexOf<T>(T[] array, T value, int startIndex, int count);
		public static void Reverse(Array array); // 0x007688C0-0x00768990
		public static void Reverse(Array array, int index, int length); // 0x00768990-0x00768D58
		public static void Reverse<T>(T[] array);
		public static void Reverse<T>(T[] array, int index, int length);
		public void SetValue(object value, long index); // 0x00768D58-0x00768E30
		public void SetValue(object value, long index1, long index2); // 0x00768E30-0x00768F74
		public void SetValue(object value, long index1, long index2, long index3); // 0x00769048-0x007691F4
		public void SetValue(object value, params /* 0x00146168-0x00146178 */ long[] indices); // 0x007692EC-0x00769500
		public static void Sort(Array array); // 0x00769504-0x007695E8
		public static void Sort(Array array, int index, int length); // 0x00769898-0x007698C4
		public static void Sort(Array array, IComparer comparer); // 0x007698C4-0x007699A8
		public static void Sort(Array array, int index, int length, IComparer comparer); // 0x007699A8-0x007699D4
		public static void Sort(Array keys, Array items); // 0x007699D4-0x00769ABC
		public static void Sort(Array keys, Array items, IComparer comparer); // 0x00769ABC-0x00769BA4
		public static void Sort(Array keys, Array items, int index, int length); // 0x00769BA4-0x00769BC4
		public static void Sort(Array keys, Array items, int index, int length, IComparer comparer); // 0x007695E8-0x00769898
		public static void Sort<T>(T[] array);
		public static void Sort<T>(T[] array, int index, int length);
		public static void Sort<T>(T[] array, IComparer<T> comparer);
		public static void Sort<T>(T[] array, int index, int length, IComparer<T> comparer);
		public static void Sort<T>(T[] array, Comparison<T> comparison);
		public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items);
		public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, int index, int length);
		public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, IComparer<TKey> comparer);
		public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, int index, int length, IComparer<TKey> comparer);
		public static bool Exists<T>(T[] array, Predicate<T> match);
		public static void Fill<T>(T[] array, T value);
		public static void Fill<T>(T[] array, T value, int startIndex, int count);
		public static T Find<T>(T[] array, Predicate<T> match);
		public static T[] FindAll<T>(T[] array, Predicate<T> match);
		public static int FindIndex<T>(T[] array, Predicate<T> match);
		public static int FindIndex<T>(T[] array, int startIndex, Predicate<T> match);
		public static int FindIndex<T>(T[] array, int startIndex, int count, Predicate<T> match);
		public static T FindLast<T>(T[] array, Predicate<T> match);
		public static int FindLastIndex<T>(T[] array, Predicate<T> match);
		public static int FindLastIndex<T>(T[] array, int startIndex, Predicate<T> match);
		public static int FindLastIndex<T>(T[] array, int startIndex, int count, Predicate<T> match);
		public static bool TrueForAll<T>(T[] array, Predicate<T> match);
		public IEnumerator GetEnumerator(); // 0x00769CE4-0x00769D54
		internal int InternalArray__ICollection_get_Count(); // 0x00769DA0-0x00769DA4
		internal bool InternalArray__ICollection_get_IsReadOnly(); // 0x00769DA4-0x00769DAC
		internal IEnumerator<T> InternalArray__IEnumerable_GetEnumerator<T>();
		internal void InternalArray__ICollection_Clear(); // 0x00769DAC-0x00769E48
		internal void InternalArray__ICollection_Add<T>(T item);
		internal bool InternalArray__ICollection_Remove<T>(T item);
		internal bool InternalArray__ICollection_Contains<T>(T item);
		internal void InternalArray__ICollection_CopyTo<T>(T[] array, int arrayIndex);
		internal T InternalArray__IReadOnlyList_get_Item<T>(int index);
		internal int InternalArray__IReadOnlyCollection_get_Count(); // 0x00769E48-0x00769E4C
		internal void InternalArray__Insert<T>(int index, T item);
		internal void InternalArray__RemoveAt(int index); // 0x00769E4C-0x00769EE8
		internal int InternalArray__IndexOf<T>(T item);
		internal T InternalArray__get_Item<T>(int index);
		internal void InternalArray__set_Item<T>(int index, T item);
		internal void GetGenericValueImpl<T>(int pos, out T value);
		internal void SetGenericValueImpl<T>(int pos, ref T value);
		private int GetRank(); // 0x00769EE8-0x00769EEC
		public int GetLength(int dimension); // 0x007676EC-0x007676F0
		[ReliabilityContract] // 0x00143290-0x001432A8
		public int GetLowerBound(int dimension); // 0x007659A8-0x007659AC
		public object GetValue(params /* 0x00146178-0x00146188 */ int[] indices); // 0x00767E70-0x00767E74
		public void SetValue(object value, params /* 0x00146188-0x00146198 */ int[] indices); // 0x00769500-0x00769504
		internal object GetValueImpl(int pos); // 0x00769EEC-0x00769EF0
		internal void SetValueImpl(object value, int pos); // 0x00769EF0-0x00769EF4
		internal static bool FastCopy(Array source, int source_idx, Array dest, int dest_idx, int length); // 0x00769EF4-0x00769EF8
		internal static Array CreateInstanceImpl(Type elementType, int[] lengths, int[] bounds); // 0x00769EF8-0x00769EFC
		[ReliabilityContract] // 0x001432A8-0x001432C0
		public int GetUpperBound(int dimension); // 0x00769EFC-0x00769F2C
		public object GetValue(int index); // 0x007653C8-0x007655C4
		public object GetValue(int index1, int index2); // 0x0076790C-0x007679D8
		public object GetValue(int index1, int index2, int index3); // 0x00767B78-0x00767C68
		public void SetValue(object value, int index); // 0x007655D4-0x007657D8
		public void SetValue(object value, int index1, int index2); // 0x00768F74-0x00769048
		public void SetValue(object value, int index1, int index2, int index3); // 0x007691F4-0x007692EC
		internal static Array UnsafeCreateInstance(Type elementType, int[] lengths, int[] lowerBounds); // 0x00769F2C-0x00769F30
		internal static Array UnsafeCreateInstance(Type elementType, int length1, int length2); // 0x0076A530-0x0076A534
		internal static Array UnsafeCreateInstance(Type elementType, params /* 0x00146198-0x001461A8 */ int[] lengths); // 0x0076A600-0x0076A604
		public static Array CreateInstance(Type elementType, int length); // 0x0076A604-0x0076A6AC
		public static Array CreateInstance(Type elementType, int length1, int length2); // 0x0076A534-0x0076A600
		public static Array CreateInstance(Type elementType, int length1, int length2, int length3); // 0x0076A6AC-0x0076A79C
		public static Array CreateInstance(Type elementType, params /* 0x001461A8-0x001461B8 */ int[] lengths); // 0x00764FC4-0x00765360
		public static Array CreateInstance(Type elementType, int[] lengths, int[] lowerBounds); // 0x00769F30-0x0076A530
		[ReliabilityContract] // 0x001432C0-0x001432D8
		public static void Clear(Array array, int index, int length); // 0x007659AC-0x00765B6C
		private static void ClearInternal(Array a, int index, int count); // 0x0076A79C-0x0076A7A0
		[ReliabilityContract] // 0x001432D8-0x001432F0
		public static void Copy(Array sourceArray, Array destinationArray, int length); // 0x007672C4-0x007673F8
		[ReliabilityContract] // 0x001432F0-0x00143308
		public static void Copy(Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length); // 0x00765E40-0x00766524
		private static Exception CreateArrayTypeMismatchException(); // 0x0076A7A0-0x0076A808
		private static bool CanAssignArrayElement(Type source, Type target); // 0x0076A808-0x0076A938
		[ReliabilityContract] // 0x00143308-0x00143320
		public static void ConstrainedCopy(Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length); // 0x0076A9C0-0x0076A9E0
		public static T[] Empty<T>();
		public void Initialize(); // 0x0076A9E0-0x0076AB3C
		private static int IndexOfImpl<T>(T[] array, T value, int startIndex, int count);
		private static int LastIndexOfImpl<T>(T[] array, T value, int startIndex, int count);
		private static void SortImpl(Array keys, Array items, int index, int length, IComparer comparer); // 0x00769BC4-0x00769CE4
		internal static T UnsafeLoad<T>(T[] array, int index);
		internal static void UnsafeStore<T>(T[] array, int index, T value);
		internal static R UnsafeMov<S, R>(S instance);
	}

	internal interface ITupleInternal : ITuple // TypeDefIndex: 113
	{
		// Methods
		string ToString(StringBuilder sb);
	}

	public static class Tuple // TypeDefIndex: 114
	{
		// Methods
		public static Tuple<T1, T2> Create<T1, T2>(T1 item1, T2 item2);
		internal static int CombineHashCodes(int h1, int h2); // 0x00A529DC-0x00A529E8
		internal static int CombineHashCodes(int h1, int h2, int h3); // 0x00A529E8-0x00A529FC
		internal static int CombineHashCodes(int h1, int h2, int h3, int h4); // 0x00A529FC-0x00A52A18
	}

	[Serializable]
	public class Tuple<T1, T2> : IStructuralEquatable, IStructuralComparable, IComparable, ITupleInternal // TypeDefIndex: 115
	{
		// Fields
		private readonly T1 m_Item1;
		private readonly T2 m_Item2;
	
		// Properties
		public T1 Item1 { get; }
		public T2 Item2 { get; }
	
		// Constructors
		public Tuple(T1 item1, T2 item2);
	
		// Methods
		public override bool Equals(object obj);
		bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer);
		int IComparable.CompareTo(object obj);
		int IStructuralComparable.CompareTo(object other, IComparer comparer);
		public override int GetHashCode();
		int IStructuralEquatable.GetHashCode(IEqualityComparer comparer);
		public override string ToString();
		string ITupleInternal.ToString(StringBuilder sb);
	}

	[Serializable]
	public class Tuple<T1, T2, T3> : IStructuralEquatable, IStructuralComparable, IComparable, ITupleInternal // TypeDefIndex: 116
	{
		// Fields
		private readonly T1 m_Item1;
		private readonly T2 m_Item2;
		private readonly T3 m_Item3;
	
		// Properties
		public T1 Item1 { get; }
		public T2 Item2 { get; }
		public T3 Item3 { get; }
	
		// Constructors
		public Tuple(T1 item1, T2 item2, T3 item3);
	
		// Methods
		public override bool Equals(object obj);
		bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer);
		int IComparable.CompareTo(object obj);
		int IStructuralComparable.CompareTo(object other, IComparer comparer);
		public override int GetHashCode();
		int IStructuralEquatable.GetHashCode(IEqualityComparer comparer);
		public override string ToString();
		string ITupleInternal.ToString(StringBuilder sb);
	}

	[Serializable]
	public class Tuple<T1, T2, T3, T4> : IStructuralEquatable, IStructuralComparable, IComparable, ITupleInternal // TypeDefIndex: 117
	{
		// Fields
		private readonly T1 m_Item1;
		private readonly T2 m_Item2;
		private readonly T3 m_Item3;
		private readonly T4 m_Item4;
	
		// Properties
		public T1 Item1 { get; }
		public T2 Item2 { get; }
		public T3 Item3 { get; }
		public T4 Item4 { get; }
	
		// Methods
		public override bool Equals(object obj);
		bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer);
		int IComparable.CompareTo(object obj);
		int IStructuralComparable.CompareTo(object other, IComparer comparer);
		public override int GetHashCode();
		int IStructuralEquatable.GetHashCode(IEqualityComparer comparer);
		public override string ToString();
		string ITupleInternal.ToString(StringBuilder sb);
	}

	[AttributeUsage] // 0x00139EAC-0x00139EE0
	internal class MonoTODOAttribute : Attribute // TypeDefIndex: 118
	{
		// Fields
		private string comment; // 0x08
	
		// Constructors
		public MonoTODOAttribute(); // 0x002B79B4-0x002B7A18
		public MonoTODOAttribute(string comment); // 0x002B7994-0x002B79B4
	}

	[AttributeUsage] // 0x00139EE0-0x00139F14
	internal class MonoLimitationAttribute : MonoTODOAttribute // TypeDefIndex: 119
	{
		// Constructors
		public MonoLimitationAttribute(string comment); // 0x002B7974-0x002B7994
	}

	[Serializable]
	[DebuggerDisplay] // 0x00139F14-0x00139F60
	public class AggregateException : Exception // TypeDefIndex: 120
	{
		// Fields
		private ReadOnlyCollection<Exception> m_innerExceptions; // 0x44
	
		// Properties
		public ReadOnlyCollection<Exception> InnerExceptions { get; } // 0x004EB138-0x004EB140 
	
		// Constructors
		public AggregateException(); // 0x004E9F30-0x004EA028
		public AggregateException(IEnumerable<Exception> innerExceptions); // 0x004EA028-0x004EA0A0
		public AggregateException(params /* 0x001461B8-0x001461C8 */ Exception[] innerExceptions); // 0x004EA17C-0x004EA1F4
		public AggregateException(string message, IEnumerable<Exception> innerExceptions); // 0x004EA0A0-0x004EA17C
		public AggregateException(string message, params /* 0x001461C8-0x001461D8 */ Exception[] innerExceptions); // 0x004EA1F4-0x004EA1F8
		private AggregateException(string message, IList<Exception> innerExceptions); // 0x004EA1F8-0x004EA694
		internal AggregateException(IEnumerable<ExceptionDispatchInfo> innerExceptionInfos); // 0x004EA694-0x004EA70C
		internal AggregateException(string message, IEnumerable<ExceptionDispatchInfo> innerExceptionInfos); // 0x004EA70C-0x004EA7E8
		private AggregateException(string message, IList<ExceptionDispatchInfo> innerExceptionInfos); // 0x004EA7E8-0x004EAD50
		protected AggregateException(SerializationInfo info, StreamingContext context); // 0x004EAD50-0x004EAF70
	
		// Methods
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x004EAF70-0x004EB138
		public AggregateException Flatten(); // 0x004EB140-0x004EB4F0
		public override string ToString(); // 0x004EB4F0-0x004EB8F8
	}

	internal static class AppContextSwitches // TypeDefIndex: 121
	{
		// Fields
		public static readonly bool ThrowExceptionIfDisposedCancellationTokenSource; // 0x00
	
		// Constructors
		static AppContextSwitches(); // 0x004EB8F8-0x004EB958
	}

	[Serializable]
	internal class __Filters // TypeDefIndex: 122
	{
		// Fields
		internal static readonly __Filters Instance; // 0x00
	
		// Constructors
		public __Filters(); // 0x00A66408-0x00A66410
		static __Filters(); // 0x00A66410-0x00A66484
	
		// Methods
		internal virtual bool FilterAttribute(MemberInfo m, object filterCriteria); // 0x00A657D4-0x00A65E94
		internal virtual bool FilterName(MemberInfo m, object filterCriteria); // 0x00A65E94-0x00A6613C
		internal virtual bool FilterIgnoreCase(MemberInfo m, object filterCriteria); // 0x00A6613C-0x00A66408
	}

	internal sealed class LocalDataStoreHolder // TypeDefIndex: 123
	{
		// Fields
		private LocalDataStore m_Store; // 0x08
	
		// Properties
		public LocalDataStore Store { get; } // 0x002B2224-0x002B222C 
	
		// Constructors
		public LocalDataStoreHolder(LocalDataStore store); // 0x002B2194-0x002B21B4
	
		// Methods
		~LocalDataStoreHolder(); // 0x002B21B4-0x002B2224
	}

	internal sealed class LocalDataStoreElement // TypeDefIndex: 124
	{
		// Fields
		private object m_value; // 0x08
		private long m_cookie; // 0x10
	
		// Properties
		public object Value { get; set; } // 0x002B1B94-0x002B1B9C 0x002B2074-0x002B207C
		public long Cookie { get; } // 0x002B1B84-0x002B1B8C 
	
		// Constructors
		public LocalDataStoreElement(long cookie); // 0x002B216C-0x002B2194
	}

	internal sealed class LocalDataStore // TypeDefIndex: 125
	{
		// Fields
		private LocalDataStoreElement[] m_DataTable; // 0x08
		private LocalDataStoreMgr m_Manager; // 0x0C
	
		// Constructors
		public LocalDataStore(LocalDataStoreMgr mgr, int InitialCapacity); // 0x002B178C-0x002B180C
	
		// Methods
		internal void Dispose(); // 0x002B180C-0x002B183C
		public object GetData(LocalDataStoreSlot slot); // 0x002B1948-0x002B1AB8
		public void SetData(LocalDataStoreSlot slot, object data); // 0x002B1B9C-0x002B1D24
		internal void FreeData(int slot, long cookie); // 0x002B207C-0x002B2148
		private LocalDataStoreElement PopulateElement(LocalDataStoreSlot slot); // 0x002B1D24-0x002B2074
	}

	[ComVisible] // 0x00139F60-0x00139F74
	public sealed class LocalDataStoreSlot // TypeDefIndex: 126
	{
		// Fields
		private LocalDataStoreMgr m_mgr; // 0x08
		private int m_slot; // 0x0C
		private long m_cookie; // 0x10
	
		// Properties
		internal LocalDataStoreMgr Manager { get; } // 0x002B2BB0-0x002B2BB8 
		internal int Slot { get; } // 0x002B1B7C-0x002B1B84 
		internal long Cookie { get; } // 0x002B1B8C-0x002B1B94 
	
		// Constructors
		internal LocalDataStoreSlot(LocalDataStoreMgr mgr, int slot, long cookie); // 0x002B265C-0x002B2694
	
		// Methods
		~LocalDataStoreSlot(); // 0x002B2C94-0x002B2E50
	}

	internal sealed class LocalDataStoreMgr // TypeDefIndex: 127
	{
		// Fields
		private bool[] m_SlotInfoTable; // 0x08
		private int m_FirstAvailableSlot; // 0x0C
		private List<LocalDataStore> m_ManagedLocalDataStores; // 0x10
		private Dictionary<string, LocalDataStoreSlot> m_KeyToSlotMap; // 0x14
		private long m_CookieGenerator; // 0x18
	
		// Constructors
		public LocalDataStoreMgr(); // 0x002B2BB8-0x002B2C94
	
		// Methods
		public LocalDataStoreHolder CreateLocalDataStore(); // 0x002B222C-0x002B2398
		public void DeleteLocalDataStore(LocalDataStore store); // 0x002B183C-0x002B1948
		public LocalDataStoreSlot AllocateDataSlot(); // 0x002B2398-0x002B265C
		public LocalDataStoreSlot AllocateNamedDataSlot(string name); // 0x002B2694-0x002B27B8
		public LocalDataStoreSlot GetNamedDataSlot(string name); // 0x002B27B8-0x002B28D8
		public void FreeNamedDataSlot(string name); // 0x002B28D8-0x002B29E4
		internal void FreeDataSlot(int slot, long cookie); // 0x002B29E4-0x002B2BB0
		public void ValidateSlot(LocalDataStoreSlot slot); // 0x002B1AB8-0x002B1B7C
		internal int GetSlotTableLength(); // 0x002B2148-0x002B216C
	}

	public delegate void Action<in T>(T obj); // TypeDefIndex: 128; 0x00000000-0x00000000

	[TypeForwardedFrom] // 0x00139F74-0x00139FA8
	public delegate void Action(); // TypeDefIndex: 129; 0x004E95B8-0x004E99F4

	[TypeForwardedFrom] // 0x00139FA8-0x00139FDC
	public delegate void Action<in T1, in T2>(T1 arg1, T2 arg2); // TypeDefIndex: 130; 0x00000000-0x00000000

	[TypeForwardedFrom] // 0x00139FDC-0x0013A010
	public delegate void Action<in T1, in T2, in T3>(T1 arg1, T2 arg2, T3 arg3); // TypeDefIndex: 131; 0x00000000-0x00000000

	[TypeForwardedFrom] // 0x0013A010-0x0013A044
	public delegate TResult Func<out TResult>(); // TypeDefIndex: 132; 0x00000000-0x00000000

	[TypeForwardedFrom] // 0x0013A044-0x0013A078
	public delegate TResult Func<in T, out TResult>(T arg); // TypeDefIndex: 133; 0x00000000-0x00000000

	[TypeForwardedFrom] // 0x0013A078-0x0013A0AC
	public delegate TResult Func<in T1, in T2, out TResult>(T1 arg1, T2 arg2); // TypeDefIndex: 134; 0x00000000-0x00000000

	[TypeForwardedFrom] // 0x0013A0AC-0x0013A0E0
	public delegate TResult Func<in T1, in T2, in T3, out TResult>(T1 arg1, T2 arg2, T3 arg3); // TypeDefIndex: 135; 0x00000000-0x00000000

	[TypeForwardedFrom] // 0x0013A0E0-0x0013A114
	public delegate TResult Func<in T1, in T2, in T3, in T4, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4); // TypeDefIndex: 136; 0x00000000-0x00000000

	public delegate int Comparison<in T>(T x, T y); // TypeDefIndex: 137; 0x00000000-0x00000000

	public delegate TOutput Converter<in TInput, out TOutput>(TInput input); // TypeDefIndex: 138; 0x00000000-0x00000000

	public delegate bool Predicate<in T>(T obj); // TypeDefIndex: 139; 0x00000000-0x00000000

	[ClassInterface] // 0x0013A114-0x0013A1B4
	[ComDefaultInterface] // 0x0013A114-0x0013A1B4
	[ComVisible] // 0x0013A114-0x0013A1B4
	public sealed class Activator : _Activator // TypeDefIndex: 140
	{
		// Methods
		public static object CreateInstance(Type type, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture); // 0x004E9A2C-0x004E9A50
		public static object CreateInstance(Type type, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes); // 0x004E9A50-0x004E9CD4
		public static object CreateInstance(Type type, params /* 0x001461D8-0x001461E8 */ object[] args); // 0x004E9CD4-0x004E9D04
		public static object CreateInstance(Type type, object[] args, object[] activationAttributes); // 0x004E9D04-0x004E9D30
		public static object CreateInstance(Type type); // 0x004D20AC-0x004D20B4
		public static object CreateInstance(Type type, bool nonPublic); // 0x004E9D30-0x004E9F30
		public static T CreateInstance<T>();
	}

	[Serializable]
	[ComVisible] // 0x0013A1B4-0x0013A1C8
	public class AppDomainUnloadedException : SystemException // TypeDefIndex: 141
	{
		// Constructors
		public AppDomainUnloadedException(); // 0x00763D3C-0x00763DC4
		protected AppDomainUnloadedException(SerializationInfo info, StreamingContext context); // 0x00763DC4-0x00763DE4
	}

	[Serializable]
	[ComVisible] // 0x0013A1C8-0x0013A1DC
	public class ApplicationException : Exception // TypeDefIndex: 142
	{
		// Constructors
		public ApplicationException(); // 0x00763DE4-0x00763E9C
		public ApplicationException(string message); // 0x00763E9C-0x00763F3C
		public ApplicationException(string message, Exception innerException); // 0x00763F3C-0x00763FE4
		protected ApplicationException(SerializationInfo info, StreamingContext context); // 0x00763FE4-0x00764134
	}

	[Serializable]
	[ComVisible] // 0x0013A1DC-0x0013A1F0
	public class ArgumentException : SystemException, ISerializable // TypeDefIndex: 143
	{
		// Fields
		private string m_paramName; // 0x44
	
		// Properties
		public override string Message { get; } // 0x00764310-0x00764444 
	
		// Constructors
		public ArgumentException(); // 0x00764150-0x007641D8
		public ArgumentException(string message); // 0x007641D8-0x00764204
		public ArgumentException(string message, Exception innerException); // 0x00764204-0x00764230
		public ArgumentException(string message, string paramName); // 0x00764230-0x00764264
		protected ArgumentException(SerializationInfo info, StreamingContext context); // 0x00764264-0x00764310
	
		// Methods
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00764444-0x0076458C
	}

	[Serializable]
	[ComVisible] // 0x0013A1F0-0x0013A204
	public class ArgumentNullException : ArgumentException // TypeDefIndex: 144
	{
		// Constructors
		public ArgumentNullException(); // 0x00764630-0x007646CC
		public ArgumentNullException(string paramName); // 0x0076458C-0x00764630
		public ArgumentNullException(string paramName, string message); // 0x007646CC-0x00764718
		protected ArgumentNullException(SerializationInfo info, StreamingContext context); // 0x00764718-0x00764730
	}

	[Serializable]
	[ComVisible] // 0x0013A204-0x0013A218
	public class ArgumentOutOfRangeException : ArgumentException, ISerializable // TypeDefIndex: 145
	{
		// Fields
		private static string _rangeMessage; // 0x00
		private object m_actualValue; // 0x48
	
		// Properties
		private static string RangeMessage { get; } // 0x00764730-0x007647F4 
		public override string Message { get; } // 0x00764934-0x00764A90 
	
		// Constructors
		public ArgumentOutOfRangeException(); // 0x007647F4-0x00764840
		public ArgumentOutOfRangeException(string paramName); // 0x00764840-0x00764894
		public ArgumentOutOfRangeException(string paramName, string message); // 0x00764894-0x007648E0
		public ArgumentOutOfRangeException(string paramName, object actualValue, string message); // 0x007648E0-0x00764934
		protected ArgumentOutOfRangeException(SerializationInfo info, StreamingContext context); // 0x00764BD4-0x00764CC8
	
		// Methods
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00764A90-0x00764BD4
	}

	[Serializable]
	[ComVisible] // 0x0013A218-0x0013A22C
	public class ArithmeticException : SystemException // TypeDefIndex: 146
	{
		// Constructors
		public ArithmeticException(); // 0x00764CC8-0x00764D50
		public ArithmeticException(string message); // 0x00764D50-0x00764D7C
		public ArithmeticException(string message, Exception innerException); // 0x00764D7C-0x00764DA8
		protected ArithmeticException(SerializationInfo info, StreamingContext context); // 0x00764DA8-0x00764DC8
	}

	[Serializable]
	public struct ArraySegment<T> : IList<T>, IReadOnlyList<T> // TypeDefIndex: 147
	{
		// Fields
		private T[] _array;
		private int _offset;
		private int _count;
	
		// Properties
		public T[] Array { get; }
		public int Offset { get; }
		public int Count { get; }
		T IList<T>.this[int index] { get => default; set {} }
		T IReadOnlyList<T>.this[int index] { get => default; }
		bool ICollection<T>.IsReadOnly { get; }
	
		// Nested types
		[Serializable]
		private sealed class ArraySegmentEnumerator : IEnumerator<T> // TypeDefIndex: 148
		{
			// Fields
			private T[] _array;
			private int _start;
			private int _end;
			private int _current;
	
			// Properties
			public T Current { get; }
			object IEnumerator.Current { get; }
	
			// Constructors
			internal ArraySegmentEnumerator(ArraySegment<T> arraySegment);
	
			// Methods
			public bool MoveNext();
			void IEnumerator.Reset();
			public void Dispose();
		}
	
		// Constructors
		public ArraySegment(T[] array, int offset, int count);
	
		// Methods
		public override int GetHashCode();
		public override bool Equals(object obj);
		public bool Equals(ArraySegment<T> obj);
		int IList<T>.IndexOf(T item);
		void IList<T>.Insert(int index, T item);
		void IList<T>.RemoveAt(int index);
		void ICollection<T>.Add(T item);
		void ICollection<T>.Clear();
		bool ICollection<T>.Contains(T item);
		void ICollection<T>.CopyTo(T[] array, int arrayIndex);
		bool ICollection<T>.Remove(T item);
		IEnumerator<T> IEnumerable<T>.GetEnumerator();
		IEnumerator IEnumerable.GetEnumerator();
	}

	[Serializable]
	[ComVisible] // 0x0013A22C-0x0013A240
	public class ArrayTypeMismatchException : SystemException // TypeDefIndex: 149
	{
		// Constructors
		public ArrayTypeMismatchException(); // 0x0076A938-0x0076A9C0
		protected ArrayTypeMismatchException(SerializationInfo info, StreamingContext context); // 0x0076D898-0x0076D8B8
	}

	[Serializable]
	[ComVisible] // 0x0013A240-0x0013A254
	public delegate void AsyncCallback(IAsyncResult ar); // TypeDefIndex: 150; 0x0076E238-0x0076EA60

	[Serializable]
	[AttributeUsage] // 0x0013A254-0x0013A298
	public abstract class Attribute : _Attribute // TypeDefIndex: 151
	{
		// Constructors
		protected Attribute(); // 0x0076FB60-0x0076FB68
	
		// Methods
		private static Attribute[] InternalGetCustomAttributes(PropertyInfo element, Type type, bool inherit); // 0x0076EA98-0x0076EBC8
		private static Attribute[] InternalGetCustomAttributes(EventInfo element, Type type, bool inherit); // 0x0076EBC8-0x0076ECF8
		private static bool InternalIsDefined(PropertyInfo element, Type attributeType, bool inherit); // 0x0076ECF8-0x0076ED8C
		private static bool InternalIsDefined(EventInfo element, Type attributeType, bool inherit); // 0x0076ED8C-0x0076EE20
		public static Attribute[] GetCustomAttributes(MemberInfo element, Type type, bool inherit); // 0x0076EE20-0x0076F230
		public static bool IsDefined(MemberInfo element, Type attributeType); // 0x0076F230-0x0076F238
		public static bool IsDefined(MemberInfo element, Type attributeType, bool inherit); // 0x0076F238-0x0076F638
		public static Attribute GetCustomAttribute(MemberInfo element, Type attributeType, bool inherit); // 0x0076F638-0x0076F728
		public static Attribute[] GetCustomAttributes(Assembly element, Type attributeType, bool inherit); // 0x0076F728-0x0076FA68
		public static Attribute GetCustomAttribute(Assembly element, Type attributeType); // 0x0076FA68-0x0076FA70
		public static Attribute GetCustomAttribute(Assembly element, Type attributeType, bool inherit); // 0x0076FA70-0x0076FB60
		public override bool Equals(object obj); // 0x0076FB68-0x007700A0
		private static bool AreFieldValuesEqual(object thisValue, object thatValue); // 0x007700A0-0x007702EC
		public override int GetHashCode(); // 0x007702EC-0x00770570
	}

	[Serializable]
	[ComVisible] // 0x0013A298-0x0013A2CC
	[Flags] // 0x0013A298-0x0013A2CC
	public enum AttributeTargets // TypeDefIndex: 152
	{
		Assembly = 1,
		Module = 2,
		Class = 4,
		Struct = 8,
		Enum = 16,
		Constructor = 32,
		Method = 64,
		Property = 128,
		Field = 256,
		Event = 512,
		Interface = 1024,
		Parameter = 2048,
		Delegate = 4096,
		ReturnValue = 8192,
		GenericParameter = 16384,
		All = 32767
	}

	[Serializable]
	[AttributeUsage] // 0x0013A2CC-0x0013A318
	[ComVisible] // 0x0013A2CC-0x0013A318
	public sealed class AttributeUsageAttribute : Attribute // TypeDefIndex: 153
	{
		// Fields
		internal AttributeTargets m_attributeTarget; // 0x08
		internal bool m_allowMultiple; // 0x0C
		internal bool m_inherited; // 0x0D
		internal static AttributeUsageAttribute Default; // 0x00
	
		// Properties
		public bool AllowMultiple { get; set; } // 0x007705A4-0x007705AC 0x007705AC-0x007705B4
		public bool Inherited { get; set; } // 0x007705B4-0x007705BC 0x007705BC-0x007705C4
	
		// Constructors
		public AttributeUsageAttribute(AttributeTargets validOn); // 0x00770570-0x007705A4
		static AttributeUsageAttribute(); // 0x007705C4-0x00770650
	}

	[Serializable]
	[ComVisible] // 0x0013A318-0x0013A32C
	public class BadImageFormatException : SystemException // TypeDefIndex: 154
	{
		// Fields
		private string _fileName; // 0x44
		private string _fusionLog; // 0x48
	
		// Properties
		public override string Message { get; } // 0x00770764-0x0077077C 
		public string FusionLog { get; } // 0x00770BAC-0x00770BB4 
	
		// Constructors
		public BadImageFormatException(); // 0x00770650-0x007706D8
		public BadImageFormatException(string message); // 0x007706D8-0x00770704
		public BadImageFormatException(string message, Exception inner); // 0x00770704-0x00770730
		public BadImageFormatException(string message, string fileName); // 0x00770730-0x00770764
		protected BadImageFormatException(SerializationInfo info, StreamingContext context); // 0x00770BB4-0x00770D38
	
		// Methods
		private void SetMessageField(); // 0x0077077C-0x0077083C
		public override string ToString(); // 0x0077083C-0x00770BAC
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00770D38-0x00770F54
	}

	public static class BitConverter // TypeDefIndex: 155
	{
		// Fields
		public static readonly bool IsLittleEndian; // 0x00
	
		// Constructors
		static BitConverter(); // 0x00771E80-0x00771EF8
	
		// Methods
		private static bool AmILittleEndian(); // 0x00770F54-0x00770F5C
		public static byte[] GetBytes(short value); // 0x00770F5C-0x00771028
		public static byte[] GetBytes(int value); // 0x00771028-0x007710F4
		public static byte[] GetBytes(float value); // 0x007710F4-0x00771174
		public static short ToInt16(byte[] value, int startIndex); // 0x00771174-0x007712B0
		public static int ToInt32(byte[] value, int startIndex); // 0x007712B0-0x00771408
		public static long ToInt64(byte[] value, int startIndex); // 0x00771408-0x00771570
		[CLSCompliant] // 0x00143320-0x00143334
		public static ushort ToUInt16(byte[] value, int startIndex); // 0x00771570-0x00771658
		[CLSCompliant] // 0x00143334-0x00143348
		public static uint ToUInt32(byte[] value, int startIndex); // 0x00771658-0x0077173C
		[CLSCompliant] // 0x00143348-0x0014335C
		public static ulong ToUInt64(byte[] value, int startIndex); // 0x0077173C-0x00771820
		public static float ToSingle(byte[] value, int startIndex); // 0x00771820-0x00771904
		private static char GetHexValue(int i); // 0x00771904-0x0077191C
		public static string ToString(byte[] value, int startIndex, int length); // 0x0077191C-0x00771D94
		public static string ToString(byte[] value); // 0x00771D94-0x00771E78
		public static long DoubleToInt64Bits(double value); // 0x00771E78-0x00771E7C
		public static double Int64BitsToDouble(long value); // 0x00771E7C-0x00771E80
	}

	[Serializable]
	[ComVisible] // 0x0013A32C-0x0013A340
	public struct Boolean : IComparable, IConvertible, IComparable<bool>, IEquatable<bool> // TypeDefIndex: 156
	{
		// Fields
		private bool m_value; // 0x00
		internal const int True = 1; // Metadata: 0x00203178
		internal const int False = 0; // Metadata: 0x0020317C
		internal const string TrueLiteral = "True"; // Metadata: 0x00203180
		internal const string FalseLiteral = "False"; // Metadata: 0x00203188
		public static readonly string TrueString; // 0x00
		public static readonly string FalseString; // 0x04
	
		// Constructors
		static Boolean(); // 0x007732A0-0x00773330
	
		// Methods
		public override int GetHashCode(); // 0x00771EF8-0x00771F78
		public override string ToString(); // 0x00771F78-0x00771FE8
		public string ToString(IFormatProvider provider); // 0x00771FE8-0x007720EC
		public override bool Equals(object obj); // 0x007720EC-0x00772108
		public bool Equals(bool obj); // 0x00772108-0x00772224
		public int CompareTo(object obj); // 0x00772224-0x0077224C
		public int CompareTo(bool value); // 0x0077224C-0x00772268
		public static bool Parse(string value); // 0x00772268-0x007723BC
		public static bool TryParse(string value, out bool result); // 0x007723BC-0x007725A0
		private static string TrimWhiteSpaceAndNull(string value); // 0x007725A0-0x00772788
		public TypeCode GetTypeCode(); // 0x007728A4-0x007728AC
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x007728AC-0x007729E8
		char IConvertible.ToChar(IFormatProvider provider); // 0x007729E8-0x00772A88
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x00772A88-0x00772B20
		byte IConvertible.ToByte(IFormatProvider provider); // 0x00772B20-0x00772BB8
		short IConvertible.ToInt16(IFormatProvider provider); // 0x00772BB8-0x00772C50
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x00772C50-0x00772CE8
		int IConvertible.ToInt32(IFormatProvider provider); // 0x00772CE8-0x00772D80
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x00772D80-0x00772E18
		long IConvertible.ToInt64(IFormatProvider provider); // 0x00772E18-0x00772EB0
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x00772EB0-0x00772F48
		float IConvertible.ToSingle(IFormatProvider provider); // 0x00772F48-0x00772FE0
		double IConvertible.ToDouble(IFormatProvider provider); // 0x00772FE0-0x00773080
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x00773080-0x007731C0
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x007731C0-0x00773298
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x00773298-0x007732A0
	}

	[ComVisible] // 0x0013A340-0x0013A354
	public static class Buffer // TypeDefIndex: 157
	{
		// Methods
		internal static bool InternalBlockCopy(Array src, int srcOffsetBytes, Array dst, int dstOffsetBytes, int byteCount); // 0x00773330-0x00773334
		internal static unsafe int IndexOfByte(byte* src, byte value, int index, int count); // 0x00773334-0x00773464
		private static int _ByteLength(Array array); // 0x00773464-0x00773468
		internal static unsafe void ZeroMemory(byte* src, long len); // 0x00773468-0x007734A4
		[ReliabilityContract] // 0x0014335C-0x00143374
		internal static unsafe void Memcpy(byte[] dest, int destIndex, byte* src, int srcIndex, int len); // 0x007734A4-0x007734E4
		[ReliabilityContract] // 0x00143374-0x0014338C
		internal static unsafe void Memcpy(byte* pDest, int destIndex, byte[] src, int srcIndex, int len); // 0x0077354C-0x0077358C
		public static int ByteLength(Array array); // 0x0077358C-0x00773694
		public static void BlockCopy(Array src, int srcOffset, Array dst, int dstOffset, int count); // 0x00773694-0x00773970
		internal static unsafe void memcpy4(byte* dest, byte* src, int size); // 0x00773970-0x007739FC
		internal static unsafe void memcpy2(byte* dest, byte* src, int size); // 0x007739FC-0x00773A74
		private static unsafe void memcpy1(byte* dest, byte* src, int size); // 0x00773A74-0x00773C0C
		internal static unsafe void Memcpy(byte* dest, byte* src, int size); // 0x007734E4-0x0077354C
	}

	[Serializable]
	[ComVisible] // 0x0013A354-0x0013A368
	public struct Byte : IComparable, IFormattable, IConvertible, IComparable<byte>, IEquatable<byte> // TypeDefIndex: 158
	{
		// Fields
		private byte m_value; // 0x00
		public const byte MaxValue = 255; // Metadata: 0x00203191
		public const byte MinValue = 0; // Metadata: 0x00203192
	
		// Methods
		public int CompareTo(object value); // 0x00773C0C-0x00773C20
		public int CompareTo(byte value); // 0x00773C20-0x00773CC0
		public override bool Equals(object obj); // 0x00773CC0-0x00773CDC
		public bool Equals(byte obj); // 0x00773CDC-0x00773CF8
		public override int GetHashCode(); // 0x00773CF8-0x00773D00
		public static byte Parse(string s, IFormatProvider provider); // 0x00773D00-0x00773D2C
		public static byte Parse(string s, NumberStyles style, IFormatProvider provider); // 0x00773EE0-0x00773F20
		private static byte Parse(string s, NumberStyles style, NumberFormatInfo info); // 0x00773D2C-0x00773EE0
		public override string ToString(); // 0x00773F20-0x00773F7C
		public string ToString(string format); // 0x00773F7C-0x00773FDC
		public string ToString(IFormatProvider provider); // 0x00773FDC-0x00774040
		public string ToString(string format, IFormatProvider provider); // 0x00774040-0x00774074
		public TypeCode GetTypeCode(); // 0x00774074-0x00774104
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x00774104-0x00774194
		char IConvertible.ToChar(IFormatProvider provider); // 0x00774194-0x00774224
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x00774224-0x0077422C
		byte IConvertible.ToByte(IFormatProvider provider); // 0x0077422C-0x007742BC
		short IConvertible.ToInt16(IFormatProvider provider); // 0x007742BC-0x0077434C
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x0077434C-0x007743DC
		int IConvertible.ToInt32(IFormatProvider provider); // 0x007743DC-0x0077446C
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x0077446C-0x007744FC
		long IConvertible.ToInt64(IFormatProvider provider); // 0x007744FC-0x0077458C
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x0077458C-0x0077461C
		float IConvertible.ToSingle(IFormatProvider provider); // 0x0077461C-0x007746AC
		double IConvertible.ToDouble(IFormatProvider provider); // 0x007746AC-0x00774744
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x00774744-0x00774884
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x00774884-0x00774954
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x00774954-0x0077495C
	}

	[Serializable]
	[ComVisible] // 0x0013A368-0x0013A37C
	public class CannotUnloadAppDomainException : SystemException // TypeDefIndex: 159
	{
		// Constructors
		public CannotUnloadAppDomainException(); // 0x0077517C-0x00775204
		public CannotUnloadAppDomainException(string message); // 0x00775204-0x00775230
		protected CannotUnloadAppDomainException(SerializationInfo info, StreamingContext context); // 0x00775230-0x00775250
	}

	[Serializable]
	[ComVisible] // 0x0013A37C-0x0013A390
	public struct Char : IComparable, IConvertible, IComparable<char>, IEquatable<char> // TypeDefIndex: 160
	{
		// Fields
		internal char m_value; // 0x00
		public const char MaxValue = '\xffff'; // Metadata: 0x00203193
		public const char MinValue = '\x0000'; // Metadata: 0x00203195
		private static readonly byte[] categoryForLatin1; // 0x00
		internal const int UNICODE_PLANE00_END = 65535; // Metadata: 0x00203197
		internal const int UNICODE_PLANE01_START = 65536; // Metadata: 0x0020319B
		internal const int UNICODE_PLANE16_END = 1114111; // Metadata: 0x0020319F
		internal const int HIGH_SURROGATE_START = 55296; // Metadata: 0x002031A3
		internal const int LOW_SURROGATE_END = 57343; // Metadata: 0x002031A7
	
		// Constructors
		static Char(); // 0x00777B8C-0x00777C24
	
		// Methods
		private static bool IsLatin1(char ch); // 0x00775250-0x00775264
		private static bool IsAscii(char ch); // 0x00775264-0x00775278
		private static UnicodeCategory GetLatin1UnicodeCategory(char ch); // 0x00775278-0x00775348
		public override int GetHashCode(); // 0x00775348-0x007753E8
		public override bool Equals(object obj); // 0x007753E8-0x00775404
		public bool Equals(char obj); // 0x00775404-0x00775508
		public int CompareTo(object value); // 0x00775508-0x0077551C
		public int CompareTo(char value); // 0x0077551C-0x007755B8
		public override string ToString(); // 0x007755CC-0x00775664
		public string ToString(IFormatProvider provider); // 0x00775664-0x0077566C
		public static string ToString(char c); // 0x007755B8-0x007755CC
		public static char Parse(string s); // 0x0077566C-0x00775790
		public static bool IsDigit(char c); // 0x00775790-0x00775870
		internal static bool CheckLetter(UnicodeCategory uc); // 0x00775870-0x00775884
		public static bool IsLetter(char c); // 0x00775884-0x00775A04
		private static bool IsWhiteSpaceLatin1(char c); // 0x00775A04-0x00775A48
		public static bool IsWhiteSpace(char c); // 0x00772788-0x007728A4
		public static bool IsUpper(char c); // 0x00775A48-0x00775B94
		public static bool IsLower(char c); // 0x00775B94-0x00775CD8
		internal static bool CheckLetterOrDigit(UnicodeCategory uc); // 0x00775CD8-0x00775CF8
		public static bool IsLetterOrDigit(char c); // 0x00775CF8-0x00775E38
		public static char ToUpper(char c, CultureInfo culture); // 0x00775E38-0x00775F24
		public static char ToUpper(char c); // 0x00775F24-0x00775FE0
		public static char ToUpperInvariant(char c); // 0x00775FE0-0x0077609C
		public static char ToLower(char c, CultureInfo culture); // 0x0077609C-0x00776188
		public static char ToLower(char c); // 0x00776188-0x00776244
		public static char ToLowerInvariant(char c); // 0x00776244-0x00776300
		public TypeCode GetTypeCode(); // 0x00776300-0x00776434
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x00776434-0x00776444
		char IConvertible.ToChar(IFormatProvider provider); // 0x00776444-0x007764D4
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x007764D4-0x00776564
		byte IConvertible.ToByte(IFormatProvider provider); // 0x00776564-0x007765F4
		short IConvertible.ToInt16(IFormatProvider provider); // 0x007765F4-0x00776684
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x00776684-0x00776714
		int IConvertible.ToInt32(IFormatProvider provider); // 0x00776714-0x007767A4
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x007767A4-0x00776834
		long IConvertible.ToInt64(IFormatProvider provider); // 0x00776834-0x007768C4
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x007768C4-0x007769F8
		float IConvertible.ToSingle(IFormatProvider provider); // 0x007769F8-0x00776B34
		double IConvertible.ToDouble(IFormatProvider provider); // 0x00776B34-0x00776C70
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x00776C70-0x00776DAC
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x00776DAC-0x00776E7C
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x00776E7C-0x00776E84
		public static bool IsLetterOrDigit(string s, int index); // 0x00776E84-0x00777090
		internal static bool CheckNumber(UnicodeCategory uc); // 0x00777090-0x007770A4
		public static bool IsNumber(char c); // 0x007770A4-0x00777224
		public static bool IsSurrogate(char c); // 0x00777224-0x00777238
		public static bool IsSurrogate(string s, int index); // 0x00777238-0x0077738C
		public static bool IsWhiteSpace(string s, int index); // 0x0077738C-0x00777588
		public static UnicodeCategory GetUnicodeCategory(char c); // 0x00777588-0x00777678
		public static UnicodeCategory GetUnicodeCategory(string s, int index); // 0x00777678-0x00777848
		public static bool IsHighSurrogate(char c); // 0x00777848-0x0077785C
		public static bool IsHighSurrogate(string s, int index); // 0x0077785C-0x007779B8
		public static bool IsLowSurrogate(char c); // 0x007779B8-0x007779CC
		public static bool IsSurrogatePair(char highSurrogate, char lowSurrogate); // 0x007779CC-0x007779F0
		public static int ConvertToUtf32(char highSurrogate, char lowSurrogate); // 0x007779F0-0x00777B8C
	}

	[Serializable]
	[ComVisible] // 0x0013A390-0x0013A3A4
	public sealed class CharEnumerator : ICloneable, IEnumerator<char> // TypeDefIndex: 161
	{
		// Fields
		private string str; // 0x08
		private int index; // 0x0C
		private char currentElement; // 0x10
	
		// Properties
		object IEnumerator.Current { get; } // 0x00777D2C-0x00777E88 
		public char Current { get; } // 0x00777E88-0x00777FBC 
	
		// Constructors
		internal CharEnumerator(string str); // 0x00777C24-0x00777C4C
	
		// Methods
		public object Clone(); // 0x00777C4C-0x00777C54
		public bool MoveNext(); // 0x00777C54-0x00777CFC
		public void Dispose(); // 0x00777CFC-0x00777D2C
		public void Reset(); // 0x00777FBC-0x00777FD0
	}

	[Serializable]
	[AttributeUsage] // 0x0013A3A4-0x0013A400
	[ComVisible] // 0x0013A3A4-0x0013A400
	public sealed class CLSCompliantAttribute : Attribute // TypeDefIndex: 162
	{
		// Fields
		private bool m_compliant; // 0x08
	
		// Constructors
		public CLSCompliantAttribute(bool isCompliant); // 0x0077515C-0x0077517C
	}

	public delegate void ConsoleCancelEventHandler(object sender, ConsoleCancelEventArgs e); // TypeDefIndex: 163; 0x003240B4-0x0032493C

	[Serializable]
	public sealed class ConsoleCancelEventArgs : EventArgs // TypeDefIndex: 164
	{
		// Fields
		private ConsoleSpecialKey _type; // 0x08
		private bool _cancel; // 0x0C
	
		// Properties
		public bool Cancel { get; } // 0x0032493C-0x00324950 
	
		// Constructors
		internal ConsoleCancelEventArgs(ConsoleSpecialKey type); // 0x00324020-0x003240B4
	}

	[Serializable]
	public enum ConsoleColor // TypeDefIndex: 165
	{
		Black = 0,
		DarkBlue = 1,
		DarkGreen = 2,
		DarkCyan = 3,
		DarkRed = 4,
		DarkMagenta = 5,
		DarkYellow = 6,
		Gray = 7,
		DarkGray = 8,
		Blue = 9,
		Green = 10,
		Cyan = 11,
		Red = 12,
		Magenta = 13,
		Yellow = 14,
		White = 15
	}

	[Serializable]
	public enum ConsoleKey // TypeDefIndex: 166
	{
		Backspace = 8,
		Tab = 9,
		Clear = 12,
		Enter = 13,
		Pause = 19,
		Escape = 27,
		Spacebar = 32,
		PageUp = 33,
		PageDown = 34,
		End = 35,
		Home = 36,
		LeftArrow = 37,
		UpArrow = 38,
		RightArrow = 39,
		DownArrow = 40,
		Select = 41,
		Print = 42,
		Execute = 43,
		PrintScreen = 44,
		Insert = 45,
		Delete = 46,
		Help = 47,
		D0 = 48,
		D1 = 49,
		D2 = 50,
		D3 = 51,
		D4 = 52,
		D5 = 53,
		D6 = 54,
		D7 = 55,
		D8 = 56,
		D9 = 57,
		A = 65,
		B = 66,
		C = 67,
		D = 68,
		E = 69,
		F = 70,
		G = 71,
		H = 72,
		I = 73,
		J = 74,
		K = 75,
		L = 76,
		M = 77,
		N = 78,
		O = 79,
		P = 80,
		Q = 81,
		R = 82,
		S = 83,
		T = 84,
		U = 85,
		V = 86,
		W = 87,
		X = 88,
		Y = 89,
		Z = 90,
		LeftWindows = 91,
		RightWindows = 92,
		Applications = 93,
		Sleep = 95,
		NumPad0 = 96,
		NumPad1 = 97,
		NumPad2 = 98,
		NumPad3 = 99,
		NumPad4 = 100,
		NumPad5 = 101,
		NumPad6 = 102,
		NumPad7 = 103,
		NumPad8 = 104,
		NumPad9 = 105,
		Multiply = 106,
		Add = 107,
		Separator = 108,
		Subtract = 109,
		Decimal = 110,
		Divide = 111,
		F1 = 112,
		F2 = 113,
		F3 = 114,
		F4 = 115,
		F5 = 116,
		F6 = 117,
		F7 = 118,
		F8 = 119,
		F9 = 120,
		F10 = 121,
		F11 = 122,
		F12 = 123,
		F13 = 124,
		F14 = 125,
		F15 = 126,
		F16 = 127,
		F17 = 128,
		F18 = 129,
		F19 = 130,
		F20 = 131,
		F21 = 132,
		F22 = 133,
		F23 = 134,
		F24 = 135,
		BrowserBack = 166,
		BrowserForward = 167,
		BrowserRefresh = 168,
		BrowserStop = 169,
		BrowserSearch = 170,
		BrowserFavorites = 171,
		BrowserHome = 172,
		VolumeMute = 173,
		VolumeDown = 174,
		VolumeUp = 175,
		MediaNext = 176,
		MediaPrevious = 177,
		MediaStop = 178,
		MediaPlay = 179,
		LaunchMail = 180,
		LaunchMediaSelect = 181,
		LaunchApp1 = 182,
		LaunchApp2 = 183,
		Oem1 = 186,
		OemPlus = 187,
		OemComma = 188,
		OemMinus = 189,
		OemPeriod = 190,
		Oem2 = 191,
		Oem3 = 192,
		Oem4 = 219,
		Oem5 = 220,
		Oem6 = 221,
		Oem7 = 222,
		Oem8 = 223,
		Oem102 = 226,
		Process = 229,
		Packet = 231,
		Attention = 246,
		CrSel = 247,
		ExSel = 248,
		EraseEndOfFile = 249,
		Play = 250,
		Zoom = 251,
		NoName = 252,
		Pa1 = 253,
		OemClear = 254
	}

	[Serializable]
	public struct ConsoleKeyInfo // TypeDefIndex: 167
	{
		// Fields
		private char _keyChar; // 0x00
		private ConsoleKey _key; // 0x04
		private ConsoleModifiers _mods; // 0x08
	
		// Properties
		public char KeyChar { get; } // 0x00325AA4-0x00325AB4 
		public ConsoleKey Key { get; } // 0x00325AB4-0x00325B74 
	
		// Constructors
		public ConsoleKeyInfo(char keyChar, ConsoleKey key, bool shift, bool alt, bool control); // 0x00325A74-0x00325AA4
	
		// Methods
		public override bool Equals(object value); // 0x00325B74-0x00325B7C
		public bool Equals(ConsoleKeyInfo obj); // 0x00325B7C-0x00325BBC
		public override int GetHashCode(); // 0x00325BBC-0x00325BCC
	}

	[Serializable]
	[Flags] // 0x0013A400-0x0013A410
	public enum ConsoleModifiers // TypeDefIndex: 168
	{
		Alt = 1,
		Shift = 2,
		Control = 4
	}

	[Serializable]
	public enum ConsoleSpecialKey // TypeDefIndex: 169
	{
		ControlC = 0,
		ControlBreak = 1
	}

	[Serializable]
	[ComVisible] // 0x0013A410-0x0013A424
	public abstract class ContextBoundObject : MarshalByRefObject // TypeDefIndex: 170
	{
		// Constructors
		protected ContextBoundObject(); // 0x00325BCC-0x00325BD4
	}

	[Serializable]
	[AttributeUsage] // 0x0013A424-0x0013A470
	[ComVisible] // 0x0013A424-0x0013A470
	public class ContextStaticAttribute : Attribute // TypeDefIndex: 171
	{
		// Constructors
		public ContextStaticAttribute(); // 0x00325BD4-0x00325BDC
	}

	[Flags] // 0x0013A470-0x0013A480
	public enum Base64FormattingOptions // TypeDefIndex: 172
	{
		None = 0,
		InsertLineBreaks = 1
	}

	public static class Convert // TypeDefIndex: 173
	{
		// Fields
		internal static readonly RuntimeType[] ConvertTypes; // 0x00
		private static readonly RuntimeType EnumType; // 0x04
		internal static readonly char[] base64Table; // 0x08
		public static readonly object DBNull; // 0x0C
	
		// Constructors
		static Convert(); // 0x00331380-0x0033319C
	
		// Methods
		public static TypeCode GetTypeCode(object value); // 0x00325BDC-0x00325CDC
		public static object ChangeType(object value, TypeCode typeCode, IFormatProvider provider); // 0x00325CDC-0x003267C4
		internal static object DefaultToType(IConvertible value, Type targetType, IFormatProvider provider); // 0x003267C4-0x003282F8
		public static object ChangeType(object value, Type conversionType, IFormatProvider provider); // 0x003282F8-0x00329A18
		public static bool ToBoolean(object value, IFormatProvider provider); // 0x00329A18-0x00329BE8
		[CLSCompliant] // 0x0014338C-0x001433A0
		public static bool ToBoolean(sbyte value); // 0x00329BE8-0x00329BF4
		public static bool ToBoolean(byte value); // 0x00329BF4-0x00329C00
		public static bool ToBoolean(short value); // 0x00329C00-0x00329C0C
		[CLSCompliant] // 0x001433A0-0x001433B4
		public static bool ToBoolean(ushort value); // 0x00329C0C-0x00329C18
		public static bool ToBoolean(int value); // 0x00329C18-0x00329C24
		[CLSCompliant] // 0x001433B4-0x001433C8
		public static bool ToBoolean(uint value); // 0x00329C24-0x00329C30
		public static bool ToBoolean(long value); // 0x00329C30-0x00329C3C
		[CLSCompliant] // 0x001433C8-0x001433DC
		public static bool ToBoolean(ulong value); // 0x00329C3C-0x00329C48
		public static bool ToBoolean(string value); // 0x00329C48-0x00329CDC
		public static bool ToBoolean(string value, IFormatProvider provider); // 0x00329CDC-0x00329D70
		public static bool ToBoolean(float value); // 0x00329D70-0x00329D88
		public static bool ToBoolean(double value); // 0x00329D88-0x00329DA0
		public static bool ToBoolean(decimal value); // 0x00329DA0-0x00329E6C
		public static char ToChar(object value, IFormatProvider provider); // 0x00329E6C-0x0032A03C
		[CLSCompliant] // 0x001433DC-0x001433F0
		public static char ToChar(sbyte value); // 0x0032A03C-0x0032A0F4
		public static char ToChar(byte value); // 0x0032A0F4-0x0032A0F8
		public static char ToChar(short value); // 0x0032A0F8-0x0032A1B0
		[CLSCompliant] // 0x001433F0-0x00143404
		public static char ToChar(ushort value); // 0x0032A1B0-0x0032A1B4
		public static char ToChar(int value); // 0x0032A1B4-0x0032A26C
		[CLSCompliant] // 0x00143404-0x00143418
		public static char ToChar(uint value); // 0x0032A26C-0x0032A324
		public static char ToChar(long value); // 0x0032A324-0x0032A3E4
		[CLSCompliant] // 0x00143418-0x0014342C
		public static char ToChar(ulong value); // 0x0032A3E4-0x0032A4A4
		public static char ToChar(string value, IFormatProvider provider); // 0x0032A4A4-0x0032A5CC
		[CLSCompliant] // 0x0014342C-0x00143440
		public static sbyte ToSByte(object value, IFormatProvider provider); // 0x0032A5CC-0x0032A79C
		[CLSCompliant] // 0x00143440-0x00143454
		public static sbyte ToSByte(bool value); // 0x0032A79C-0x0032A7A0
		[CLSCompliant] // 0x00143454-0x00143468
		public static sbyte ToSByte(char value); // 0x0032A7A0-0x0032A858
		[CLSCompliant] // 0x00143468-0x0014347C
		public static sbyte ToSByte(byte value); // 0x0032A858-0x0032A910
		[CLSCompliant] // 0x0014347C-0x00143490
		public static sbyte ToSByte(short value); // 0x0032A910-0x0032A9D0
		[CLSCompliant] // 0x00143490-0x001434A4
		public static sbyte ToSByte(ushort value); // 0x0032A9D0-0x0032AA88
		[CLSCompliant] // 0x001434A4-0x001434B8
		public static sbyte ToSByte(int value); // 0x0032AA88-0x0032AB44
		[CLSCompliant] // 0x001434B8-0x001434CC
		public static sbyte ToSByte(uint value); // 0x0032AB44-0x0032ABFC
		[CLSCompliant] // 0x001434CC-0x001434E0
		public static sbyte ToSByte(long value); // 0x0032ABFC-0x0032ACC4
		[CLSCompliant] // 0x001434E0-0x001434F4
		public static sbyte ToSByte(ulong value); // 0x0032ACC4-0x0032AD84
		[CLSCompliant] // 0x001434F4-0x00143508
		public static sbyte ToSByte(float value); // 0x0032AD84-0x0032AE14
		[CLSCompliant] // 0x00143508-0x0014351C
		public static sbyte ToSByte(double value); // 0x0032AE14-0x0032AEA0
		[CLSCompliant] // 0x0014351C-0x00143530
		public static sbyte ToSByte(decimal value); // 0x0032B010-0x0032B0D0
		[CLSCompliant] // 0x00143530-0x00143544
		public static sbyte ToSByte(string value, IFormatProvider provider); // 0x0032B0D0-0x0032B0E0
		public static byte ToByte(object value, IFormatProvider provider); // 0x0032B0E0-0x0032B2B0
		public static byte ToByte(bool value); // 0x0032B2B0-0x0032B2B4
		public static byte ToByte(char value); // 0x0032B2B4-0x0032B36C
		[CLSCompliant] // 0x00143544-0x00143558
		public static byte ToByte(sbyte value); // 0x0032B36C-0x0032B424
		public static byte ToByte(short value); // 0x0032B424-0x0032B4E0
		[CLSCompliant] // 0x00143558-0x0014356C
		public static byte ToByte(ushort value); // 0x0032B4E0-0x0032B598
		public static byte ToByte(int value); // 0x0032B598-0x0032B650
		[CLSCompliant] // 0x0014356C-0x00143580
		public static byte ToByte(uint value); // 0x0032B650-0x0032B708
		public static byte ToByte(long value); // 0x0032B708-0x0032B7C8
		[CLSCompliant] // 0x00143580-0x00143594
		public static byte ToByte(ulong value); // 0x0032B7C8-0x0032B888
		public static byte ToByte(float value); // 0x0032B888-0x0032B918
		public static byte ToByte(double value); // 0x0032B918-0x0032B9A4
		public static byte ToByte(decimal value); // 0x0032B9A4-0x0032BA64
		public static byte ToByte(string value); // 0x0032BA64-0x0032BB04
		public static byte ToByte(string value, IFormatProvider provider); // 0x0032BB04-0x0032BB20
		public static short ToInt16(object value, IFormatProvider provider); // 0x0032BB20-0x0032BCF0
		public static short ToInt16(bool value); // 0x0032BCF0-0x0032BCF4
		public static short ToInt16(char value); // 0x0032BCF4-0x0032BDAC
		[CLSCompliant] // 0x00143594-0x001435A8
		public static short ToInt16(sbyte value); // 0x0032BDAC-0x0032BDB0
		public static short ToInt16(byte value); // 0x0032BDB0-0x0032BDB4
		[CLSCompliant] // 0x001435A8-0x001435BC
		public static short ToInt16(ushort value); // 0x0032BDB4-0x0032BE6C
		public static short ToInt16(int value); // 0x0032BE6C-0x0032BF28
		[CLSCompliant] // 0x001435BC-0x001435D0
		public static short ToInt16(uint value); // 0x0032BF28-0x0032BFE0
		public static short ToInt16(long value); // 0x0032BFE0-0x0032C0A8
		[CLSCompliant] // 0x001435D0-0x001435E4
		public static short ToInt16(ulong value); // 0x0032C0A8-0x0032C168
		public static short ToInt16(float value); // 0x0032C168-0x0032C1F8
		public static short ToInt16(double value); // 0x0032C1F8-0x0032C284
		public static short ToInt16(decimal value); // 0x0032C284-0x0032C344
		public static short ToInt16(string value, IFormatProvider provider); // 0x0032C344-0x0032C360
		[CLSCompliant] // 0x001435E4-0x001435F8
		public static ushort ToUInt16(object value, IFormatProvider provider); // 0x0032C360-0x0032C530
		[CLSCompliant] // 0x001435F8-0x0014360C
		public static ushort ToUInt16(bool value); // 0x0032C530-0x0032C534
		[CLSCompliant] // 0x0014360C-0x00143620
		public static ushort ToUInt16(char value); // 0x0032C534-0x0032C538
		[CLSCompliant] // 0x00143620-0x00143634
		public static ushort ToUInt16(sbyte value); // 0x0032C538-0x0032C5F0
		[CLSCompliant] // 0x00143634-0x00143648
		public static ushort ToUInt16(byte value); // 0x0032C5F0-0x0032C5F4
		[CLSCompliant] // 0x00143648-0x0014365C
		public static ushort ToUInt16(short value); // 0x0032C5F4-0x0032C6AC
		[CLSCompliant] // 0x0014365C-0x00143670
		public static ushort ToUInt16(int value); // 0x0032C6AC-0x0032C764
		[CLSCompliant] // 0x00143670-0x00143684
		public static ushort ToUInt16(uint value); // 0x0032C764-0x0032C81C
		[CLSCompliant] // 0x00143684-0x00143698
		public static ushort ToUInt16(long value); // 0x0032C81C-0x0032C8DC
		[CLSCompliant] // 0x00143698-0x001436AC
		public static ushort ToUInt16(ulong value); // 0x0032C8DC-0x0032C99C
		[CLSCompliant] // 0x001436AC-0x001436C0
		public static ushort ToUInt16(float value); // 0x0032C99C-0x0032CA2C
		[CLSCompliant] // 0x001436C0-0x001436D4
		public static ushort ToUInt16(double value); // 0x0032CA2C-0x0032CAB8
		[CLSCompliant] // 0x001436D4-0x001436E8
		public static ushort ToUInt16(decimal value); // 0x0032CAB8-0x0032CB78
		[CLSCompliant] // 0x001436E8-0x001436FC
		public static ushort ToUInt16(string value, IFormatProvider provider); // 0x0032CB78-0x0032CB94
		public static int ToInt32(object value); // 0x0032CB94-0x0032CD60
		public static int ToInt32(object value, IFormatProvider provider); // 0x0032CD60-0x0032CF30
		public static int ToInt32(bool value); // 0x0032CF30-0x0032CF34
		public static int ToInt32(char value); // 0x0032CF34-0x0032CF38
		public static int ToInt32(byte value); // 0x0032CF38-0x0032CF3C
		public static int ToInt32(short value); // 0x0032CF3C-0x0032CF40
		[CLSCompliant] // 0x001436FC-0x00143710
		public static int ToInt32(ushort value); // 0x0032CF40-0x0032CF44
		[CLSCompliant] // 0x00143710-0x00143724
		public static int ToInt32(uint value); // 0x0032CF44-0x0032CFFC
		public static int ToInt32(long value); // 0x0032CFFC-0x0032D0BC
		[CLSCompliant] // 0x00143724-0x00143738
		public static int ToInt32(ulong value); // 0x0032D0BC-0x0032D17C
		public static int ToInt32(float value); // 0x0032D17C-0x0032D20C
		public static int ToInt32(double value); // 0x0032AEA0-0x0032B010
		public static int ToInt32(decimal value); // 0x0032D20C-0x0032D2B4
		public static int ToInt32(string value); // 0x0032D2B4-0x0032D354
		public static int ToInt32(string value, IFormatProvider provider); // 0x0032D354-0x0032D370
		[CLSCompliant] // 0x00143738-0x0014374C
		public static uint ToUInt32(object value); // 0x0032D370-0x0032D53C
		[CLSCompliant] // 0x0014374C-0x00143760
		public static uint ToUInt32(object value, IFormatProvider provider); // 0x0032D53C-0x0032D70C
		[CLSCompliant] // 0x00143760-0x00143774
		public static uint ToUInt32(bool value); // 0x0032D70C-0x0032D710
		[CLSCompliant] // 0x00143774-0x00143788
		public static uint ToUInt32(char value); // 0x0032D710-0x0032D714
		[CLSCompliant] // 0x00143788-0x0014379C
		public static uint ToUInt32(sbyte value); // 0x0032D714-0x0032D7CC
		[CLSCompliant] // 0x0014379C-0x001437B0
		public static uint ToUInt32(byte value); // 0x0032D7CC-0x0032D7D0
		[CLSCompliant] // 0x001437B0-0x001437C4
		public static uint ToUInt32(short value); // 0x0032D7D0-0x0032D888
		[CLSCompliant] // 0x001437C4-0x001437D8
		public static uint ToUInt32(ushort value); // 0x0032D888-0x0032D88C
		[CLSCompliant] // 0x001437D8-0x001437EC
		public static uint ToUInt32(int value); // 0x0032D88C-0x0032D944
		[CLSCompliant] // 0x001437EC-0x00143800
		public static uint ToUInt32(long value); // 0x0032D944-0x0032DA00
		[CLSCompliant] // 0x00143800-0x00143814
		public static uint ToUInt32(ulong value); // 0x0032DA00-0x0032DABC
		[CLSCompliant] // 0x00143814-0x00143828
		public static uint ToUInt32(float value); // 0x0032DABC-0x0032DB50
		[CLSCompliant] // 0x00143828-0x0014383C
		public static uint ToUInt32(double value); // 0x0032DB50-0x0032DC70
		[CLSCompliant] // 0x0014383C-0x00143850
		public static uint ToUInt32(decimal value); // 0x0032DC70-0x0032DD30
		[CLSCompliant] // 0x00143850-0x00143864
		public static uint ToUInt32(string value, IFormatProvider provider); // 0x0032DD30-0x0032DD4C
		public static long ToInt64(object value, IFormatProvider provider); // 0x0032DD4C-0x0032DF20
		public static long ToInt64(bool value); // 0x0032DF20-0x0032DF28
		public static long ToInt64(char value); // 0x0032DF28-0x0032DF30
		[CLSCompliant] // 0x00143864-0x00143878
		public static long ToInt64(sbyte value); // 0x0032DF30-0x0032DF38
		public static long ToInt64(byte value); // 0x0032DF38-0x0032DF40
		public static long ToInt64(short value); // 0x0032DF40-0x0032DF48
		[CLSCompliant] // 0x00143878-0x0014388C
		public static long ToInt64(ushort value); // 0x0032DF48-0x0032DF50
		public static long ToInt64(int value); // 0x0032DF50-0x0032DF58
		[CLSCompliant] // 0x0014388C-0x001438A0
		public static long ToInt64(uint value); // 0x0032DF58-0x0032DF60
		[CLSCompliant] // 0x001438A0-0x001438B4
		public static long ToInt64(ulong value); // 0x0032DF60-0x0032E020
		public static long ToInt64(float value); // 0x0032E020-0x0032E0B0
		public static long ToInt64(double value); // 0x0032E0B0-0x0032E218
		public static long ToInt64(decimal value); // 0x0032E218-0x0032E2D8
		public static long ToInt64(string value); // 0x0032E2D8-0x0032E37C
		public static long ToInt64(string value, IFormatProvider provider); // 0x0032E37C-0x0032E39C
		[CLSCompliant] // 0x001438B4-0x001438C8
		public static ulong ToUInt64(object value, IFormatProvider provider); // 0x0032E39C-0x0032E570
		[CLSCompliant] // 0x001438C8-0x001438DC
		public static ulong ToUInt64(bool value); // 0x0032E570-0x0032E578
		[CLSCompliant] // 0x001438DC-0x001438F0
		public static ulong ToUInt64(char value); // 0x0032E578-0x0032E580
		[CLSCompliant] // 0x001438F0-0x00143904
		public static ulong ToUInt64(sbyte value); // 0x0032E580-0x0032E63C
		[CLSCompliant] // 0x00143904-0x00143918
		public static ulong ToUInt64(byte value); // 0x0032E63C-0x0032E644
		[CLSCompliant] // 0x00143918-0x0014392C
		public static ulong ToUInt64(short value); // 0x0032E644-0x0032E700
		[CLSCompliant] // 0x0014392C-0x00143940
		public static ulong ToUInt64(ushort value); // 0x0032E700-0x0032E708
		[CLSCompliant] // 0x00143940-0x00143954
		public static ulong ToUInt64(int value); // 0x0032E708-0x0032E7C4
		[CLSCompliant] // 0x00143954-0x00143968
		public static ulong ToUInt64(uint value); // 0x0032E7C4-0x0032E7CC
		[CLSCompliant] // 0x00143968-0x0014397C
		public static ulong ToUInt64(long value); // 0x0032E7CC-0x0032E88C
		[CLSCompliant] // 0x0014397C-0x00143990
		public static ulong ToUInt64(float value); // 0x0032E88C-0x0032E920
		[CLSCompliant] // 0x00143990-0x001439A4
		public static ulong ToUInt64(double value); // 0x0032E920-0x0032EA78
		[CLSCompliant] // 0x001439A4-0x001439B8
		public static ulong ToUInt64(decimal value); // 0x0032EA78-0x0032EB38
		[CLSCompliant] // 0x001439B8-0x001439CC
		public static ulong ToUInt64(string value, IFormatProvider provider); // 0x0032EB38-0x0032EB58
		public static float ToSingle(object value, IFormatProvider provider); // 0x0032EB58-0x0032ED34
		[CLSCompliant] // 0x001439CC-0x001439E0
		public static float ToSingle(sbyte value); // 0x0032ED34-0x0032ED44
		public static float ToSingle(byte value); // 0x0032ED44-0x0032ED54
		public static float ToSingle(short value); // 0x0032ED54-0x0032ED64
		[CLSCompliant] // 0x001439E0-0x001439F4
		public static float ToSingle(ushort value); // 0x0032ED64-0x0032ED74
		public static float ToSingle(int value); // 0x0032ED74-0x0032ED84
		[CLSCompliant] // 0x001439F4-0x00143A08
		public static float ToSingle(uint value); // 0x0032ED84-0x0032ED98
		public static float ToSingle(long value); // 0x0032ED98-0x0032EDA8
		[CLSCompliant] // 0x00143A08-0x00143A1C
		public static float ToSingle(ulong value); // 0x0032EDA8-0x0032EDC4
		public static float ToSingle(double value); // 0x0032EDC4-0x0032EDD4
		public static float ToSingle(decimal value); // 0x0032EDD4-0x0032EE7C
		public static float ToSingle(string value, IFormatProvider provider); // 0x0032EE7C-0x0032EE98
		public static float ToSingle(bool value); // 0x0032EE98-0x0032EEB4
		public static double ToDouble(object value, IFormatProvider provider); // 0x0032EEB4-0x0032F08C
		[CLSCompliant] // 0x00143A1C-0x00143A30
		public static double ToDouble(sbyte value); // 0x0032F08C-0x0032F09C
		public static double ToDouble(byte value); // 0x0032F09C-0x0032F0AC
		public static double ToDouble(short value); // 0x0032F0AC-0x0032F0BC
		[CLSCompliant] // 0x00143A30-0x00143A44
		public static double ToDouble(ushort value); // 0x0032F0BC-0x0032F0CC
		public static double ToDouble(int value); // 0x0032F0CC-0x0032F0DC
		[CLSCompliant] // 0x00143A44-0x00143A58
		public static double ToDouble(uint value); // 0x0032F0DC-0x0032F0EC
		public static double ToDouble(long value); // 0x0032F0EC-0x0032F0FC
		[CLSCompliant] // 0x00143A58-0x00143A6C
		public static double ToDouble(ulong value); // 0x0032F0FC-0x0032F10C
		public static double ToDouble(float value); // 0x0032F10C-0x0032F11C
		public static double ToDouble(decimal value); // 0x0032F11C-0x0032F1C4
		public static double ToDouble(string value, IFormatProvider provider); // 0x0032F1C4-0x0032F268
		public static double ToDouble(bool value); // 0x0032F268-0x0032F280
		public static decimal ToDecimal(object value, IFormatProvider provider); // 0x0032F280-0x0032F4A4
		[CLSCompliant] // 0x00143A6C-0x00143A80
		public static decimal ToDecimal(sbyte value); // 0x0032F4A4-0x0032F530
		public static decimal ToDecimal(byte value); // 0x0032F530-0x0032F5BC
		public static decimal ToDecimal(short value); // 0x0032F5BC-0x0032F648
		[CLSCompliant] // 0x00143A80-0x00143A94
		public static decimal ToDecimal(ushort value); // 0x0032F648-0x0032F6D4
		public static decimal ToDecimal(int value); // 0x0032F6D4-0x0032F760
		[CLSCompliant] // 0x00143A94-0x00143AA8
		public static decimal ToDecimal(uint value); // 0x0032F760-0x0032F7EC
		public static decimal ToDecimal(long value); // 0x0032F7EC-0x0032F88C
		[CLSCompliant] // 0x00143AA8-0x00143ABC
		public static decimal ToDecimal(ulong value); // 0x0032F88C-0x0032F92C
		public static decimal ToDecimal(float value); // 0x0032F92C-0x0032F9B8
		public static decimal ToDecimal(double value); // 0x0032F9B8-0x0032FA58
		public static decimal ToDecimal(string value, IFormatProvider provider); // 0x0032FA58-0x0032FB48
		public static decimal ToDecimal(bool value); // 0x0032FB48-0x0032FBD4
		public static DateTime ToDateTime(string value, IFormatProvider provider); // 0x0032FBD4-0x0032FDAC
		public static string ToString(object value, IFormatProvider provider); // 0x0032FE84-0x00330058
		public static string ToString(char value, IFormatProvider provider); // 0x00330058-0x0033007C
		public static string ToString(int value, IFormatProvider provider); // 0x0033007C-0x003300A0
		public static int ToInt32(string value, int fromBase); // 0x003300A0-0x00330188
		public static string ToString(byte value, int toBase); // 0x00330188-0x00330288
		public static string ToString(int value, int toBase); // 0x00330288-0x00330384
		public static string ToBase64String(byte[] inArray); // 0x00330384-0x00330478
		[ComVisible] // 0x00143ABC-0x00143AD0
		public static string ToBase64String(byte[] inArray, int offset, int length, Base64FormattingOptions options); // 0x00330478-0x00330838
		private static unsafe int ConvertToBase64Array(char* outChars, byte* inData, int offset, int length, bool insertLineBreaks); // 0x00330960-0x00330C68
		private static int ToBase64_CalculateAndValidateOutputLength(int inputLength, bool insertLineBreaks); // 0x00330838-0x00330960
		public static byte[] FromBase64String(string s); // 0x00330C68-0x00330D6C
		private static unsafe byte[] FromBase64CharPtr(char* inputPtr, int inputLength); // 0x00330D6C-0x00330EC8
		private static unsafe int FromBase64_Decode(char* startInputPtr, int inputLength, byte* startDestPtr, int destLength); // 0x00330FD8-0x00331380
		private static unsafe int FromBase64_ComputeResultLength(char* inputPtr, int inputLength); // 0x00330EC8-0x00330FD8
	}

	[Serializable]
	public struct DateTime : IComparable, IFormattable, IConvertible, ISerializable, IComparable<DateTime>, IEquatable<DateTime> // TypeDefIndex: 174
	{
		// Fields
		private const long TicksPerMillisecond = 10000; // Metadata: 0x00203447
		private const long TicksPerSecond = 10000000; // Metadata: 0x0020344F
		private const long TicksPerMinute = 600000000; // Metadata: 0x00203457
		private const long TicksPerHour = 36000000000; // Metadata: 0x0020345F
		private const long TicksPerDay = 864000000000; // Metadata: 0x00203467
		private const int MillisPerSecond = 1000; // Metadata: 0x0020346F
		private const int MillisPerMinute = 60000; // Metadata: 0x00203473
		private const int MillisPerHour = 3600000; // Metadata: 0x00203477
		private const int MillisPerDay = 86400000; // Metadata: 0x0020347B
		private const int DaysPerYear = 365; // Metadata: 0x0020347F
		private const int DaysPer4Years = 1461; // Metadata: 0x00203483
		private const int DaysPer100Years = 36524; // Metadata: 0x00203487
		private const int DaysPer400Years = 146097; // Metadata: 0x0020348B
		private const int DaysTo1601 = 584388; // Metadata: 0x0020348F
		private const int DaysTo1899 = 693593; // Metadata: 0x00203493
		internal const int DaysTo1970 = 719162; // Metadata: 0x00203497
		private const int DaysTo10000 = 3652059; // Metadata: 0x0020349B
		internal const long MinTicks = 0; // Metadata: 0x0020349F
		internal const long MaxTicks = 3155378975999999999; // Metadata: 0x002034A7
		private const long MaxMillis = 315537897600000; // Metadata: 0x002034AF
		private const long FileTimeOffset = 504911232000000000; // Metadata: 0x002034B7
		private const long DoubleDateOffset = 599264352000000000; // Metadata: 0x002034BF
		private const long OADateMinAsTicks = 31241376000000000; // Metadata: 0x002034C7
		private const double OADateMinAsDouble = -657435; // Metadata: 0x002034CF
		private const double OADateMaxAsDouble = 2958466; // Metadata: 0x002034D7
		private const int DatePartYear = 0; // Metadata: 0x002034DF
		private const int DatePartDayOfYear = 1; // Metadata: 0x002034E3
		private const int DatePartMonth = 2; // Metadata: 0x002034E7
		private const int DatePartDay = 3; // Metadata: 0x002034EB
		private static readonly int[] DaysToMonth365; // 0x00
		private static readonly int[] DaysToMonth366; // 0x04
		public static readonly DateTime MinValue; // 0x08
		public static readonly DateTime MaxValue; // 0x10
		private const ulong TicksMask = 4611686018427387903; // Metadata: 0x002034EF
		private const ulong FlagsMask = 13835058055282163712; // Metadata: 0x002034F7
		private const ulong LocalMask = 9223372036854775808; // Metadata: 0x002034FF
		private const long TicksCeiling = 4611686018427387904; // Metadata: 0x00203507
		private const ulong KindUnspecified = 0; // Metadata: 0x0020350F
		private const ulong KindUtc = 4611686018427387904; // Metadata: 0x00203517
		private const ulong KindLocal = 9223372036854775808; // Metadata: 0x0020351F
		private const ulong KindLocalAmbiguousDst = 13835058055282163712; // Metadata: 0x00203527
		private const int KindShift = 62; // Metadata: 0x0020352F
		private const string TicksField = "ticks"; // Metadata: 0x00203533
		private const string DateDataField = "dateData"; // Metadata: 0x0020353C
		private ulong dateData; // 0x00
	
		// Properties
		internal long InternalTicks { get; } // 0x00335354-0x00335360 
		private ulong InternalKind { get; } // 0x00335360-0x003354AC 
		public DateTime Date { get; } // 0x00336B1C-0x00336B60 
		public int Day { get; } // 0x00336B70-0x00336BB8 
		public DayOfWeek DayOfWeek { get; } // 0x00336BB8-0x00336BF4 
		public int DayOfYear { get; } // 0x00336BF4-0x00336C10 
		public int Hour { get; } // 0x00336C54-0x00336C88 
		public DateTimeKind Kind { get; } // 0x00336C9C-0x00336CBC 
		public int Millisecond { get; } // 0x00336CBC-0x00336CEC 
		public int Minute { get; } // 0x00336CEC-0x00336D28 
		public int Month { get; } // 0x00336D28-0x00336D34 
		public static DateTime Now { get; } // 0x00336D34-0x00336F0C 
		public static DateTime UtcNow { get; } // 0x00336F0C-0x00336FA8 
		public int Second { get; } // 0x00336FAC-0x00336FE0 
		public long Ticks { get; } // 0x00336FE0-0x00337034 
		public TimeSpan TimeOfDay { get; } // 0x00337034-0x00337084 
		public int Year { get; } // 0x00337084-0x00337090 
	
		// Constructors
		public DateTime(long ticks); // 0x00334308-0x00334324
		private DateTime(ulong dateData); // 0x00334324-0x00334490
		public DateTime(long ticks, DateTimeKind kind); // 0x00334490-0x003345B4
		internal DateTime(long ticks, DateTimeKind kind, bool isAmbiguousDst); // 0x003345B4-0x00334670
		public DateTime(int year, int month, int day); // 0x003348F8-0x003349E0
		public DateTime(int year, int month, int day, int hour, int minute, int second); // 0x00334AF0-0x00334C78
		public DateTime(int year, int month, int day, int hour, int minute, int second, DateTimeKind kind); // 0x00334C78-0x00334F24
		public DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond); // 0x00334F24-0x00335338
		private DateTime(SerializationInfo info, StreamingContext context); // 0x00335338-0x00335354
		static DateTime(); // 0x00339D88-0x00339ED0
	
		// Methods
		public DateTime Add(TimeSpan value); // 0x003354AC-0x00335748
		private DateTime Add(double value, int scale); // 0x00335748-0x00335790
		public DateTime AddDays(double value); // 0x00335790-0x003357D8
		public DateTime AddMilliseconds(double value); // 0x003357D8-0x00335D38
		public DateTime AddMonths(int months); // 0x00335F24-0x00335F58
		public DateTime AddSeconds(double value); // 0x00335F58-0x00335F7C
		public DateTime AddTicks(long value); // 0x00335F7C-0x0033608C
		public DateTime AddYears(int value); // 0x0033608C-0x003361BC
		public int CompareTo(object value); // 0x003361BC-0x00336204
		public int CompareTo(DateTime value); // 0x00336204-0x00336240
		private static long DateToTicks(int year, int month, int day); // 0x00334670-0x003348F8
		private static long TimeToTicks(int hour, int minute, int second); // 0x003349E0-0x00334AF0
		public static int DaysInMonth(int year, int month); // 0x00335D38-0x00335F24
		public override bool Equals(object value); // 0x00336400-0x00336408
		public bool Equals(DateTime value); // 0x00336408-0x00336428
		public static DateTime FromBinary(long dateData); // 0x00336428-0x0033675C
		internal static DateTime FromBinaryRaw(long dateData); // 0x0033675C-0x00336954
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00336954-0x003369F8
		public bool IsDaylightSavingTime(); // 0x003369F8-0x00336A00
		public static DateTime SpecifyKind(DateTime value, DateTimeKind kind); // 0x00336A00-0x00336AC0
		public long ToBinary(); // 0x00336AC0-0x00336AD0
		internal long ToBinaryRaw(); // 0x00336AD0-0x00336B1C
		private int GetDatePart(int part); // 0x00336B60-0x00336B70
		public override int GetHashCode(); // 0x00336C10-0x00336C54
		internal bool IsAmbiguousDaylightSavingTime(); // 0x00336C88-0x00336C9C
		internal static long GetSystemTimeAsFileTime(); // 0x00336FA8-0x00336FAC
		public static bool IsLeapYear(int year); // 0x00336240-0x00336400
		public static DateTime Parse(string s, IFormatProvider provider); // 0x0032FDAC-0x0032FE84
		public static DateTime ParseExact(string s, string format, IFormatProvider provider, DateTimeStyles style); // 0x003371B0-0x003372B0
		private static double TicksToOADate(long value); // 0x003373D8-0x00337634
		public double ToOADate(); // 0x00337634-0x003377C8
		public long ToFileTime(); // 0x003377C8-0x003377D0
		public long ToFileTimeUtc(); // 0x003377D0-0x00337A74
		public DateTime ToLocalTime(); // 0x00337A74-0x00337A8C
		internal DateTime ToLocalTime(bool throwOnOverflow); // 0x00337A8C-0x00337B7C
		public string ToLongDateString(); // 0x00337C38-0x00337D1C
		public string ToLongTimeString(); // 0x00337D1C-0x00337E00
		public string ToShortDateString(); // 0x00337E00-0x00337EE4
		public string ToShortTimeString(); // 0x00337EE4-0x00337FB4
		public override string ToString(); // 0x00337FB4-0x00338088
		public string ToString(string format); // 0x00338088-0x00338160
		public string ToString(IFormatProvider provider); // 0x00338160-0x0033823C
		public string ToString(string format, IFormatProvider provider); // 0x0033823C-0x00338244
		public DateTime ToUniversalTime(); // 0x00338244-0x0033826C
		public static DateTime operator +(DateTime d, TimeSpan t); // 0x0033826C-0x00338390
		public static DateTime operator -(DateTime d, TimeSpan t); // 0x00338390-0x003384AC
		public static TimeSpan operator -(DateTime d1, DateTime d2); // 0x003384AC-0x003384EC
		public static bool operator ==(DateTime d1, DateTime d2); // 0x003384EC-0x00338508
		public static bool operator <(DateTime t1, DateTime t2); // 0x00338508-0x00338528
		public static bool operator <=(DateTime t1, DateTime t2); // 0x00338528-0x00338548
		public static bool operator >(DateTime t1, DateTime t2); // 0x00338548-0x00338568
		public static bool operator >=(DateTime t1, DateTime t2); // 0x00338568-0x003386D8
		public string[] GetDateTimeFormats(); // 0x003386D8-0x003386E0
		public string[] GetDateTimeFormats(IFormatProvider provider); // 0x003389BC-0x003389C4
		public TypeCode GetTypeCode(); // 0x003389C4-0x00338AF8
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x00338AF8-0x00338C34
		char IConvertible.ToChar(IFormatProvider provider); // 0x00338C34-0x00338D70
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x00338D70-0x00338EAC
		byte IConvertible.ToByte(IFormatProvider provider); // 0x00338EAC-0x00338FE8
		short IConvertible.ToInt16(IFormatProvider provider); // 0x00338FE8-0x00339124
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x00339124-0x00339260
		int IConvertible.ToInt32(IFormatProvider provider); // 0x00339260-0x0033939C
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x0033939C-0x003394D8
		long IConvertible.ToInt64(IFormatProvider provider); // 0x003394D8-0x00339614
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x00339614-0x00339750
		float IConvertible.ToSingle(IFormatProvider provider); // 0x00339750-0x0033988C
		double IConvertible.ToDouble(IFormatProvider provider); // 0x0033988C-0x003399C8
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x003399C8-0x003399D8
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x003399D8-0x00339AA0
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x00339AA0-0x00339AA8
		internal static bool TryCreate(int year, int month, int day, int hour, int minute, int second, int millisecond, out DateTime result); // 0x00339AA8-0x00339D88
	}

	[Serializable]
	[ComVisible] // 0x0013A480-0x0013A494
	public enum DateTimeKind // TypeDefIndex: 175
	{
		Unspecified = 0,
		Utc = 1,
		Local = 2
	}

	[Serializable]
	[ComVisible] // 0x0013A494-0x0013A4A8
	public enum DayOfWeek // TypeDefIndex: 176
	{
		Sunday = 0,
		Monday = 1,
		Tuesday = 2,
		Wednesday = 3,
		Thursday = 4,
		Friday = 5,
		Saturday = 6
	}

	[Serializable]
	[ComVisible] // 0x0013A4A8-0x0013A4BC
	public sealed class DBNull : ISerializable, IConvertible // TypeDefIndex: 177
	{
		// Fields
		public static readonly DBNull Value; // 0x00
	
		// Constructors
		private DBNull(); // 0x00333638-0x00333640
		private DBNull(SerializationInfo info, StreamingContext context); // 0x00333640-0x003336F8
		static DBNull(); // 0x003341B8-0x00334300
	
		// Methods
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x003336F8-0x00333728
		public override string ToString(); // 0x00333728-0x0033378C
		public string ToString(IFormatProvider provider); // 0x0033378C-0x003337F0
		public TypeCode GetTypeCode(); // 0x003337F0-0x003337F8
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x003337F8-0x003338A0
		char IConvertible.ToChar(IFormatProvider provider); // 0x003338A0-0x00333948
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x00333948-0x003339F0
		byte IConvertible.ToByte(IFormatProvider provider); // 0x003339F0-0x00333A98
		short IConvertible.ToInt16(IFormatProvider provider); // 0x00333A98-0x00333B40
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x00333B40-0x00333BE8
		int IConvertible.ToInt32(IFormatProvider provider); // 0x00333BE8-0x00333C90
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x00333C90-0x00333D38
		long IConvertible.ToInt64(IFormatProvider provider); // 0x00333D38-0x00333DE0
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x00333DE0-0x00333E88
		float IConvertible.ToSingle(IFormatProvider provider); // 0x00333E88-0x00333F30
		double IConvertible.ToDouble(IFormatProvider provider); // 0x00333F30-0x00333FD8
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x00333FD8-0x00334080
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x00334080-0x00334128
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x00334128-0x003341B8
	}

	[Serializable]
	[ComVisible] // 0x0013A4BC-0x0013A4D0
	public struct Decimal : IFormattable, IComparable, IConvertible, IDeserializationCallback, IComparable<decimal>, IEquatable<decimal> // TypeDefIndex: 178
	{
		// Fields
		private const int SignMask = -2147483648; // Metadata: 0x00203570
		private const byte DECIMAL_NEG = 128; // Metadata: 0x00203574
		private const byte DECIMAL_ADD = 0; // Metadata: 0x00203575
		private const int ScaleMask = 16711680; // Metadata: 0x00203576
		private const int ScaleShift = 16; // Metadata: 0x0020357A
		private const int MaxInt32Scale = 9; // Metadata: 0x0020357E
		private static uint[] Powers10; // 0x00
		[DecimalConstant] // 0x0014220C-0x00142248
		public static readonly decimal Zero; // 0x04
		[DecimalConstant] // 0x00142248-0x00142284
		public static readonly decimal One; // 0x14
		[DecimalConstant] // 0x00142284-0x001422C0
		public static readonly decimal MinusOne; // 0x24
		[DecimalConstant] // 0x001422C0-0x00142300
		public static readonly decimal MaxValue; // 0x34
		[DecimalConstant] // 0x00142300-0x00142340
		public static readonly decimal MinValue; // 0x44
		[DecimalConstant] // 0x00142340-0x0014237C
		private static readonly decimal NearNegativeZero; // 0x54
		[DecimalConstant] // 0x0014237C-0x001423B8
		private static readonly decimal NearPositiveZero; // 0x64
		private int flags; // 0x00
		private int hi; // 0x04
		private int lo; // 0x08
		private int mid; // 0x0C
	
		// Constructors
		public Decimal(int value); // 0x005559C8-0x005559F8
		[CLSCompliant] // 0x00143AD0-0x00143AE4
		public Decimal(uint value); // 0x005559F8-0x00555A10
		public Decimal(long value); // 0x00555A10-0x00555A40
		[CLSCompliant] // 0x00143AE4-0x00143AF8
		public Decimal(ulong value); // 0x00555A40-0x00555A54
		public Decimal(float value); // 0x00555A54-0x00555A5C
		public Decimal(double value); // 0x00555A5C-0x00555BDC
		public Decimal(int[] bits); // 0x00555BE0-0x00555D60
		public Decimal(int lo, int mid, int hi, bool isNegative, byte scale); // 0x00555E48-0x00555FE8
		private Decimal(int lo, int mid, int hi, int flags); // 0x00556348-0x0055636C
		static Decimal(); // 0x005588C0-0x00558A90
	
		// Methods
		private void SetBits(int[] bits); // 0x00555D60-0x00555E48
		[OnSerializing] // 0x00143AF8-0x00143B08
		private void OnSerializing(StreamingContext ctx); // 0x005560F0-0x00556270
		void IDeserializationCallback.OnDeserialization(object sender); // 0x00556270-0x00556348
		private static void FCallAddSub(ref decimal d1, ref decimal d2, byte bSign); // 0x0055636C-0x00556370
		[ReliabilityContract] // 0x00143B08-0x00143B20
		private static int FCallCompare(ref decimal d1, ref decimal d2); // 0x00556370-0x005564A4
		public int CompareTo(object value); // 0x005564A4-0x00556548
		public int CompareTo(decimal value); // 0x00556548-0x00556650
		public override bool Equals(object value); // 0x00556650-0x00556704
		public bool Equals(decimal value); // 0x00556704-0x00556728
		public override int GetHashCode(); // 0x00556728-0x0055676C
		public override string ToString(); // 0x0055676C-0x005567B4
		public string ToString(IFormatProvider provider); // 0x005567B4-0x00556800
		public string ToString(string format, IFormatProvider provider); // 0x00556800-0x00556808
		public static decimal Parse(string s, IFormatProvider provider); // 0x00556808-0x0055684C
		public static decimal Parse(string s, NumberStyles style, IFormatProvider provider); // 0x0055684C-0x005568A4
		public static int[] GetBits(decimal d); // 0x00555FE8-0x005560F0
		internal static decimal ToDecimal(byte[] buffer); // 0x005568A4-0x00556B4C
		private static void FCallMultiply(ref decimal d1, ref decimal d2); // 0x00556B4C-0x00556B50
		public static decimal Round(decimal d, int decimals); // 0x00556B50-0x00556BFC
		private static void FCallRound(ref decimal d, int decimals); // 0x00556BFC-0x00556C00
		public static byte ToByte(decimal value); // 0x00556C00-0x00556DD4
		[CLSCompliant] // 0x00143B20-0x00143B34
		public static sbyte ToSByte(decimal value); // 0x00556EFC-0x005570D4
		public static short ToInt16(decimal value); // 0x00557208-0x005573E0
		public static double ToDouble(decimal d); // 0x005573E0-0x005573E4
		internal static int FCallToInt32(decimal d); // 0x005573E4-0x005573E8
		public static int ToInt32(decimal d); // 0x005570D4-0x00557208
		public static long ToInt64(decimal d); // 0x005573EC-0x00557524
		[CLSCompliant] // 0x00143B34-0x00143B48
		public static ushort ToUInt16(decimal value); // 0x00557524-0x005576F8
		[CLSCompliant] // 0x00143B48-0x00143B5C
		public static uint ToUInt32(decimal d); // 0x00556DD4-0x00556EFC
		[CLSCompliant] // 0x00143B5C-0x00143B70
		public static ulong ToUInt64(decimal d); // 0x005576F8-0x0055781C
		public static float ToSingle(decimal d); // 0x0055781C-0x00557820
		private static void FCallTruncate(ref decimal d); // 0x005573E8-0x005573EC
		public static implicit operator decimal(byte value); // 0x00557820-0x00557838
		[CLSCompliant] // 0x00143B70-0x00143B84
		public static implicit operator decimal(sbyte value); // 0x00557838-0x00557870
		public static implicit operator decimal(short value); // 0x00557870-0x005578A8
		[CLSCompliant] // 0x00143B84-0x00143B98
		public static implicit operator decimal(ushort value); // 0x005578A8-0x005578C0
		public static implicit operator decimal(int value); // 0x005578C0-0x005578F8
		[CLSCompliant] // 0x00143B98-0x00143BAC
		public static implicit operator decimal(uint value); // 0x005578F8-0x00557910
		public static implicit operator decimal(long value); // 0x00557910-0x00557944
		[CLSCompliant] // 0x00143BAC-0x00143BC0
		public static implicit operator decimal(ulong value); // 0x00557944-0x00557954
		public static explicit operator decimal(float value); // 0x00557954-0x0055796C
		public static explicit operator decimal(double value); // 0x0055796C-0x00557984
		[CLSCompliant] // 0x00143BC0-0x00143BD4
		public static explicit operator ulong(decimal value); // 0x00557984-0x00557A24
		public static explicit operator float(decimal value); // 0x00557A24-0x00557ABC
		public static explicit operator double(decimal value); // 0x00557ABC-0x00557B54
		public static decimal operator +(decimal d1, decimal d2); // 0x00557B54-0x00557C20
		public static decimal operator *(decimal d1, decimal d2); // 0x00557C20-0x00557CE8
		public static bool operator ==(decimal d1, decimal d2); // 0x00557CE8-0x00557DA0
		public static bool operator !=(decimal d1, decimal d2); // 0x00557DA0-0x00557E50
		public TypeCode GetTypeCode(); // 0x00557E50-0x00557EE8
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x00557EE8-0x00558018
		char IConvertible.ToChar(IFormatProvider provider); // 0x005580AC-0x0055814C
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x0055814C-0x005581E4
		byte IConvertible.ToByte(IFormatProvider provider); // 0x005581E4-0x0055827C
		short IConvertible.ToInt16(IFormatProvider provider); // 0x0055827C-0x00558314
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x00558314-0x005583AC
		int IConvertible.ToInt32(IFormatProvider provider); // 0x005583AC-0x00558444
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x00558444-0x005584DC
		long IConvertible.ToInt64(IFormatProvider provider); // 0x005584DC-0x00558574
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x00558574-0x0055860C
		float IConvertible.ToSingle(IFormatProvider provider); // 0x0055860C-0x005586A4
		double IConvertible.ToDouble(IFormatProvider provider); // 0x005586A4-0x005586AC
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x005586AC-0x005587E4
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x005587E4-0x005588B4
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x005588B4-0x005588C0
	}

	[Serializable]
	internal class DefaultBinder : Binder // TypeDefIndex: 179
	{
		// Nested types
		internal class BinderState // TypeDefIndex: 180
		{
			// Fields
			internal int[] m_argsMap; // 0x08
			internal int m_originalSize; // 0x0C
			internal bool m_isParamArray; // 0x10
	
			// Constructors
			internal BinderState(int[] argsMap, int originalSize, bool isParamArray); // 0x0055C778-0x0055C7A8
		}
	
		[Serializable]
		[CompilerGenerated] // 0x0013A4D0-0x0013A4E0
		private sealed class <>c // TypeDefIndex: 181
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static Predicate<Type> <>9__3_0; // 0x04
	
			// Constructors
			static <>c(); // 0x00560D6C-0x00560DE0
			public <>c(); // 0x00560DE0-0x00560DE8
	
			// Methods
			internal bool <SelectProperty>b__3_0(Type t); // 0x00560DE8-0x00560ECC
		}
	
		// Constructors
		public DefaultBinder(); // 0x00560D64-0x00560D6C
	
		// Methods
		public override MethodBase BindToMethod(BindingFlags bindingAttr, MethodBase[] match, ref object[] args, ParameterModifier[] modifiers, CultureInfo cultureInfo, string[] names, out object state); // 0x00558A90-0x0055C268
		public override FieldInfo BindToField(BindingFlags bindingAttr, FieldInfo[] match, object value, CultureInfo cultureInfo); // 0x0055CAAC-0x0055D0E4
		public override MethodBase SelectMethod(BindingFlags bindingAttr, MethodBase[] match, Type[] types, ParameterModifier[] modifiers); // 0x0055D1A8-0x0055DC38
		public override PropertyInfo SelectProperty(BindingFlags bindingAttr, PropertyInfo[] match, Type returnType, Type[] indexes, ParameterModifier[] modifiers); // 0x0055DF38-0x0055EE80
		public override object ChangeType(object value, Type type, CultureInfo cultureInfo); // 0x0055FBCC-0x0055FC68
		public override void ReorderArgumentArray(ref object[] args, object state); // 0x0055FC68-0x00560220
		public static MethodBase ExactBinding(MethodBase[] match, Type[] types, ParameterModifier[] modifiers); // 0x00560220-0x00560568
		public static PropertyInfo ExactPropertyBinding(PropertyInfo[] match, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x005606D4-0x00560AA0
		private static int FindMostSpecific(ParameterInfo[] p1, int[] paramOrder1, Type paramArrayType1, ParameterInfo[] p2, int[] paramOrder2, Type paramArrayType2, Type[] types, object[] args); // 0x0055F4EC-0x0055FB08
		private static int FindMostSpecificType(Type c1, Type c2, Type t); // 0x0055EE80-0x0055F4EC
		private static int FindMostSpecificMethod(MethodBase m1, int[] paramOrder1, Type paramArrayType1, MethodBase m2, int[] paramOrder2, Type paramArrayType2, Type[] types, object[] args); // 0x0055C994-0x0055CAAC
		private static int FindMostSpecificField(FieldInfo cur1, FieldInfo cur2); // 0x0055D0E4-0x0055D1A8
		private static int FindMostSpecificProperty(PropertyInfo cur1, PropertyInfo cur2); // 0x0055FB08-0x0055FBCC
		internal static bool CompareMethodSigAndName(MethodBase m1, MethodBase m2); // 0x00560AA0-0x00560CA0
		internal static int GetHierarchyDepth(Type t); // 0x00560CA0-0x00560D64
		internal static MethodBase FindMostDerivedNewSlotMeth(MethodBase[] match, int cMatches); // 0x00560568-0x005606D4
		private static void ReorderParams(int[] paramOrder, object[] vars); // 0x0055C7A8-0x0055C994
		private static bool CreateParamOrder(int[] paramOrder, ParameterInfo[] pars, string[] names); // 0x0055C268-0x0055C610
		private static bool CanConvertPrimitive(RuntimeType source, RuntimeType target); // 0x0055DC38-0x0055DF38
		private static bool CanConvertPrimitiveObjectToType(object source, RuntimeType type); // 0x0055C610-0x0055C778
	}

	[Serializable]
	[ComVisible] // 0x0013A4E0-0x0013A4F4
	public class DivideByZeroException : ArithmeticException // TypeDefIndex: 182
	{
		// Constructors
		public DivideByZeroException(); // 0x00566818-0x0056688C
		protected DivideByZeroException(SerializationInfo info, StreamingContext context); // 0x00566894-0x005668B4
	}

	[Serializable]
	[ComVisible] // 0x0013A4F4-0x0013A508
	public class DllNotFoundException : TypeLoadException // TypeDefIndex: 183
	{
		// Constructors
		public DllNotFoundException(); // 0x005668B4-0x00566928
		public DllNotFoundException(string message); // 0x00566928-0x0056694C
		protected DllNotFoundException(SerializationInfo info, StreamingContext context); // 0x0056694C-0x00566970
	}

	[Serializable]
	[ComVisible] // 0x0013A508-0x0013A51C
	public struct Double : IComparable, IFormattable, IConvertible, IComparable<double>, IEquatable<double> // TypeDefIndex: 184
	{
		// Fields
		internal double m_value; // 0x00
		public const double MinValue = -1.7976931348623157E+308; // Metadata: 0x00203582
		public const double MaxValue = 1.7976931348623157E+308; // Metadata: 0x0020358A
		public const double Epsilon = 5E-324; // Metadata: 0x00203592
		public const double NegativeInfinity = -1D / 0D; // Metadata: 0x0020359A
		public const double PositiveInfinity = 1D / 0D; // Metadata: 0x002035A2
		public const double NaN = 0D / 0D; // Metadata: 0x002035AA
		internal static double NegativeZero; // 0x00
	
		// Constructors
		static Double(); // 0x00567BC4-0x00567C60
	
		// Methods
		public static bool IsPositiveInfinity(double d); // 0x00566970-0x00566998
		[ReliabilityContract] // 0x00143BD4-0x00143BEC
		public static bool IsNaN(double d); // 0x00566998-0x00566B68
		public int CompareTo(object value); // 0x00566B68-0x00566C90
		public int CompareTo(double value); // 0x00566C90-0x00566DE4
		public override bool Equals(object obj); // 0x00566DE4-0x00566EEC
		public bool Equals(double obj); // 0x00566EEC-0x00566F08
		public override int GetHashCode(); // 0x00566F08-0x00566F14
		public override string ToString(); // 0x00566F14-0x00566F54
		public string ToString(IFormatProvider provider); // 0x00566F54-0x00566F98
		public string ToString(string format, IFormatProvider provider); // 0x00566F98-0x00566FE0
		public static double Parse(string s); // 0x00566FE0-0x00567078
		public static double Parse(string s, IFormatProvider provider); // 0x00567080-0x00567120
		public static double Parse(string s, NumberStyles style, IFormatProvider provider); // 0x00567120-0x005671D0
		private static double Parse(string s, NumberStyles style, NumberFormatInfo info); // 0x00567078-0x00567080
		public TypeCode GetTypeCode(); // 0x005671D0-0x00567268
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x00567268-0x00567398
		char IConvertible.ToChar(IFormatProvider provider); // 0x00567398-0x00567438
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x00567438-0x005674D0
		byte IConvertible.ToByte(IFormatProvider provider); // 0x005674D0-0x00567568
		short IConvertible.ToInt16(IFormatProvider provider); // 0x00567568-0x00567600
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x00567600-0x00567698
		int IConvertible.ToInt32(IFormatProvider provider); // 0x00567698-0x00567730
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x00567730-0x005677C8
		long IConvertible.ToInt64(IFormatProvider provider); // 0x005677C8-0x00567860
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x00567860-0x005678F8
		float IConvertible.ToSingle(IFormatProvider provider); // 0x005678F8-0x00567900
		double IConvertible.ToDouble(IFormatProvider provider); // 0x00567900-0x005679B0
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x005679B0-0x00567AEC
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x00567AEC-0x00567BBC
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x00567BBC-0x00567BC4
	}

	[Serializable]
	internal sealed class Empty : ISerializable // TypeDefIndex: 185
	{
		// Fields
		public static readonly Empty Value; // 0x00
	
		// Constructors
		private Empty(); // 0x00567C60-0x00567C68
		static Empty(); // 0x00567D9C-0x00567E10
	
		// Methods
		public override string ToString(); // 0x00567C68-0x00567CCC
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00567CCC-0x00567D9C
	}

	[Serializable]
	[ComVisible] // 0x0013A51C-0x0013A530
	public class EntryPointNotFoundException : TypeLoadException // TypeDefIndex: 186
	{
		// Constructors
		public EntryPointNotFoundException(); // 0x00567E10-0x00567E84
		public EntryPointNotFoundException(string message); // 0x00567E84-0x00567EA8
		protected EntryPointNotFoundException(SerializationInfo info, StreamingContext context); // 0x00567EA8-0x00567ED4
	}

	[Serializable]
	[ComVisible] // 0x0013A530-0x0013A544
	public abstract struct Enum : IComparable, IFormattable, IConvertible // TypeDefIndex: 187
	{
		// Fields
		private static readonly char[] enumSeperatorCharArray; // 0x00
		private const string enumSeperator = ", "; // Metadata: 0x002035B2
	
		// Nested types
		private enum ParseFailureKind // TypeDefIndex: 188
		{
			None = 0,
			Argument = 1,
			ArgumentNull = 2,
			ArgumentWithParameter = 3,
			UnhandledException = 4
		}
	
		private struct EnumResult // TypeDefIndex: 189
		{
			// Fields
			internal object parsedEnum; // 0x00
			internal bool canThrow; // 0x04
			internal ParseFailureKind m_failure; // 0x08
			internal string m_failureMessageID; // 0x0C
			internal string m_failureParameter; // 0x10
			internal object m_failureMessageFormatArgument; // 0x14
			internal Exception m_innerException; // 0x18
	
			// Methods
			internal void Init(bool canMethodThrow); // 0x0056D6E4-0x0056D6EC
			internal void SetFailure(Exception unhandledException); // 0x0056D6EC-0x0056D6FC
			internal void SetFailure(ParseFailureKind failure, string failureParameter); // 0x0056D6FC-0x0056D704
			internal void SetFailure(ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument); // 0x0056D704-0x0056D720
			internal Exception GetEnumParseException(); // 0x0056D720-0x0056D728
		}
	
		private class ValuesAndNames // TypeDefIndex: 190
		{
			// Fields
			public ulong[] Values; // 0x08
			public string[] Names; // 0x0C
	
			// Constructors
			public ValuesAndNames(ulong[] values, string[] names); // 0x00568064-0x0056808C
		}
	
		// Constructors
		protected Enum(); // 0x0056D5D0-0x0056D5D8
		static Enum(); // 0x0056D5D8-0x0056D6E4
	
		// Methods
		private static ValuesAndNames GetCachedValuesAndNames(RuntimeType enumType, bool getNames); // 0x00567ED4-0x00568060
		private static string InternalFormattedHexString(object value); // 0x0056808C-0x00568468
		private static string InternalFormat(RuntimeType eT, object value); // 0x00568468-0x005685CC
		private static string InternalFlagsFormat(RuntimeType eT, object value); // 0x005686E0-0x00568A58
		internal static ulong ToUInt64(object value); // 0x00568A58-0x00568C44
		private static int InternalCompareTo(object o1, object o2); // 0x00568C44-0x00568C48
		internal static RuntimeType InternalGetUnderlyingType(RuntimeType enumType); // 0x00568C48-0x00568C4C
		private static bool GetEnumValuesAndNames(RuntimeType enumType, out ulong[] values, out string[] names); // 0x00568060-0x00568064
		private static object InternalBoxEnum(RuntimeType enumType, long value); // 0x00568C4C-0x00568C50
		[ComVisible] // 0x00143BEC-0x00143C00
		public static object Parse(Type enumType, string value, bool ignoreCase); // 0x00568C50-0x00568DB8
		private static bool TryParseEnum(Type enumType, string value, bool ignoreCase, ref EnumResult parseResult); // 0x00568DB8-0x005699CC
		[ComVisible] // 0x00143C00-0x00143C14
		public static Type GetUnderlyingType(Type enumType); // 0x0056112C-0x00561238
		[ComVisible] // 0x00143C14-0x00143C28
		public static Array GetValues(Type enumType); // 0x0056A1FC-0x0056A308
		internal static ulong[] InternalGetValues(RuntimeType enumType); // 0x0056A308-0x0056A3A4
		[ComVisible] // 0x00143C28-0x00143C3C
		public static string GetName(Type enumType, object value); // 0x005685CC-0x005686E0
		internal static string[] InternalGetNames(RuntimeType enumType); // 0x0056A3A4-0x0056A440
		[ComVisible] // 0x00143C3C-0x00143C50
		public static object ToObject(Type enumType, object value); // 0x005699CC-0x00569F78
		[ComVisible] // 0x00143C50-0x00143C64
		public static bool IsDefined(Type enumType, object value); // 0x0056BAC4-0x0056BBD8
		private object get_value(); // 0x0056BBD8-0x0056BBDC
		internal object GetValue(); // 0x0056BBDC-0x0056BBE0
		private bool InternalHasFlag(Enum flags); // 0x0056BBE0-0x0056BBE4
		private int get_hashcode(); // 0x0056BBE4-0x0056BBE8
		public override bool Equals(object obj); // 0x0056BBE8-0x0056BBF0
		public override int GetHashCode(); // 0x0056BBF0-0x0056BBF4
		public override string ToString(); // 0x0056BBF4-0x0056BD38
		[Obsolete] // 0x00143C64-0x00143CD0
		public string ToString(string format, IFormatProvider provider); // 0x0056BD38-0x0056BD3C
		public int CompareTo(object target); // 0x0056C02C-0x0056C284
		public string ToString(string format); // 0x0056BD3C-0x0056C02C
		[Obsolete] // 0x00143CD0-0x00143D38
		public string ToString(IFormatProvider provider); // 0x0056C2A8-0x0056C2B8
		public bool HasFlag(Enum flag); // 0x0056C2B8-0x0056C4B4
		public TypeCode GetTypeCode(); // 0x0056C4B4-0x0056C9B0
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x0056C9B0-0x0056CA7C
		char IConvertible.ToChar(IFormatProvider provider); // 0x0056CA7C-0x0056CB48
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x0056CB48-0x0056CC14
		byte IConvertible.ToByte(IFormatProvider provider); // 0x0056CC14-0x0056CCE0
		short IConvertible.ToInt16(IFormatProvider provider); // 0x0056CCE0-0x0056CDAC
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x0056CDAC-0x0056CE78
		int IConvertible.ToInt32(IFormatProvider provider); // 0x0056CE78-0x0056CF44
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x0056CF44-0x0056D010
		long IConvertible.ToInt64(IFormatProvider provider); // 0x0056D010-0x0056D0DC
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x0056D0DC-0x0056D1A8
		float IConvertible.ToSingle(IFormatProvider provider); // 0x0056D1A8-0x0056D274
		double IConvertible.ToDouble(IFormatProvider provider); // 0x0056D274-0x0056D340
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x0056D340-0x0056D414
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x0056D414-0x0056D53C
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x0056D53C-0x0056D5D0
		[CLSCompliant] // 0x00143D38-0x00143D70
		[ComVisible] // 0x00143D38-0x00143D70
		public static object ToObject(Type enumType, sbyte value); // 0x0056A6C0-0x0056A940
		[ComVisible] // 0x00143D70-0x00143D84
		public static object ToObject(Type enumType, short value); // 0x0056A940-0x0056ABC0
		[ComVisible] // 0x00143D84-0x00143D98
		public static object ToObject(Type enumType, int value); // 0x0056A440-0x0056A6C0
		[ComVisible] // 0x00143D98-0x00143DAC
		public static object ToObject(Type enumType, byte value); // 0x0056B0C4-0x0056B344
		[CLSCompliant] // 0x00143DAC-0x00143DE4
		[ComVisible] // 0x00143DAC-0x00143DE4
		public static object ToObject(Type enumType, ushort value); // 0x0056B344-0x0056B5C4
		[CLSCompliant] // 0x00143DE4-0x00143E1C
		[ComVisible] // 0x00143DE4-0x00143E1C
		public static object ToObject(Type enumType, uint value); // 0x0056AE44-0x0056B0C4
		[ComVisible] // 0x00143E1C-0x00143E30
		public static object ToObject(Type enumType, long value); // 0x0056ABC0-0x0056AE44
		[CLSCompliant] // 0x00143E30-0x00143E68
		[ComVisible] // 0x00143E30-0x00143E68
		public static object ToObject(Type enumType, ulong value); // 0x00569F78-0x0056A1FC
		private static object ToObject(Type enumType, char value); // 0x0056B5C4-0x0056B844
		private static object ToObject(Type enumType, bool value); // 0x0056B844-0x0056BAC4
	}

	[Serializable]
	[ComVisible] // 0x0013A544-0x0013A558
	public class EventArgs // TypeDefIndex: 191
	{
		// Fields
		public static readonly EventArgs Empty; // 0x00
	
		// Constructors
		public EventArgs(); // 0x0056F008-0x0056F010
		static EventArgs(); // 0x0056F010-0x0056F084
	}

	[Serializable]
	[ComVisible] // 0x0013A558-0x0013A56C
	public delegate void EventHandler(object sender, EventArgs e); // TypeDefIndex: 192; 0x0056F098-0x0056F920

	[Serializable]
	public delegate void EventHandler<TEventArgs>(object sender, TEventArgs e); // TypeDefIndex: 193; 0x00000000-0x00000000

	[Serializable]
	[ClassInterface] // 0x0013A56C-0x0013A60C
	[ComDefaultInterface] // 0x0013A56C-0x0013A60C
	[ComVisible] // 0x0013A56C-0x0013A60C
	public class Exception : ISerializable, _Exception // TypeDefIndex: 194
	{
		// Fields
		[OptionalField] // 0x001423B8-0x001423C8
		private static object s_EDILock; // 0x00
		private string _className; // 0x08
		internal string _message; // 0x0C
		private IDictionary _data; // 0x10
		private Exception _innerException; // 0x14
		private string _helpURL; // 0x18
		private object _stackTrace; // 0x1C
		private string _stackTraceString; // 0x20
		private string _remoteStackTraceString; // 0x24
		private int _remoteStackIndex; // 0x28
		private object _dynamicMethods; // 0x2C
		internal int _HResult; // 0x30
		private string _source; // 0x34
		[OptionalField] // 0x001423C8-0x001423F8
		private SafeSerializationManager _safeSerializationManager; // 0x38
		internal StackTrace[] captured_traces; // 0x3C
		private IntPtr[] native_trace_ips; // 0x40
		private const int _COMPlusExceptionCode = -532462766; // Metadata: 0x002035CC
	
		// Properties
		public virtual string Message { get; } // 0x0056FF60-0x00570068 
		public Exception InnerException { get; } // 0x005700C4-0x005700CC 
		public virtual string StackTrace { get; } // 0x005700CC-0x005700D4 
		public virtual string Source { get; } // 0x00570124-0x005702D0 
		public int HResult { get; protected set; } // 0x0056FF58-0x0056FF60 0x0056FA4C-0x0056FA54
	
		// Nested types
		internal enum ExceptionMessageKind // TypeDefIndex: 195
		{
			ThreadAbort = 1,
			ThreadInterrupted = 2,
			OutOfMemory = 3
		}
	
		// Constructors
		public Exception(); // 0x0056FA54-0x0056FA74
		public Exception(string message); // 0x0056FA74-0x0056FA9C
		public Exception(string message, Exception innerException); // 0x0056FA9C-0x0056FACC
		protected Exception(SerializationInfo info, StreamingContext context); // 0x0056FACC-0x0056FF58
		static Exception(); // 0x00570DFC-0x00570E7C
	
		// Methods
		private void Init(); // 0x0056F9C0-0x0056FA4C
		private string GetClassName(); // 0x00570068-0x005700BC
		private string GetStackTrace(bool needFileInfo); // 0x005700D4-0x0057011C
		[FriendAccessAllowed] // 0x00143E68-0x00143E78
		internal void SetErrorCode(int hr); // 0x0056688C-0x00566894
		public override string ToString(); // 0x005702D0-0x005702DC
		private string ToString(bool needFileLineInfo, bool needMessage); // 0x005702DC-0x00570678
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00570678-0x00570AF0
		[OnDeserialized] // 0x00143E78-0x00143E88
		private void OnDeserialized(StreamingContext context); // 0x00570AF0-0x00570B84
		private string StripFileInfo(string stackTrace, bool isRemoteStackTrace); // 0x0057011C-0x00570124
		internal void RestoreExceptionDispatchInfo(ExceptionDispatchInfo exceptionDispatchInfo); // 0x00570B84-0x00570C98
		public new Type GetType(); // 0x005700BC-0x005700C4
		internal static string GetMessageFromNativeResources(ExceptionMessageKind kind); // 0x00570C98-0x00570D04
		internal Exception FixRemotingException(); // 0x00570D04-0x00570DFC
	}

	[Serializable]
	[ComVisible] // 0x0013A60C-0x0013A658
	[Obsolete] // 0x0013A60C-0x0013A658
	public sealed class ExecutionEngineException : SystemException // TypeDefIndex: 196
	{
		// Constructors
		public ExecutionEngineException(); // 0x00570E7C-0x00570EF0
		public ExecutionEngineException(string message); // 0x00570EF0-0x00570F14
		public ExecutionEngineException(string message, Exception innerException); // 0x0056EEFC-0x0056EF20
		internal ExecutionEngineException(SerializationInfo info, StreamingContext context); // 0x00570F14-0x00570F34
	}

	[Serializable]
	[ComVisible] // 0x0013A658-0x0013A66C
	public class FieldAccessException : MemberAccessException // TypeDefIndex: 197
	{
		// Constructors
		public FieldAccessException(); // 0x00570F34-0x00570FA8
		public FieldAccessException(string message); // 0x00570FA8-0x00570FCC
		protected FieldAccessException(SerializationInfo info, StreamingContext context); // 0x00570FCC-0x00570FEC
	}

	[Serializable]
	[AttributeUsage] // 0x0013A66C-0x0013A6B8
	[ComVisible] // 0x0013A66C-0x0013A6B8
	public class FlagsAttribute : Attribute // TypeDefIndex: 198
	{
		// Constructors
		public FlagsAttribute(); // 0x00570FEC-0x00570FF4
	}

	[Serializable]
	[ComVisible] // 0x0013A6B8-0x0013A6CC
	public class FormatException : SystemException // TypeDefIndex: 199
	{
		// Constructors
		public FormatException(); // 0x00570FF4-0x00571068
		public FormatException(string message); // 0x0056C284-0x0056C2A8
		public FormatException(string message, Exception innerException); // 0x00571068-0x0057108C
		protected FormatException(SerializationInfo info, StreamingContext context); // 0x0057108C-0x005710AC
	}

	public static class GC // TypeDefIndex: 200
	{
		// Fields
		internal static readonly object EPHEMERON_TOMBSTONE; // 0x00
	
		// Constructors
		static GC(); // 0x005711A0-0x00571204
	
		// Methods
		internal static void register_ephemeron_array(Ephemeron[] array); // 0x005710AC-0x005710B0
		private static object get_ephemeron_tombstone(); // 0x005710B0-0x005710B4
		[ReliabilityContract] // 0x00143E88-0x00143EA0
		public static void KeepAlive(object obj); // 0x005710B4-0x005710B8
		[ReliabilityContract] // 0x00143EA0-0x00143EB8
		private static void _SuppressFinalize(object o); // 0x005710B8-0x005710BC
		[ReliabilityContract] // 0x00143EB8-0x00143ED0
		public static void SuppressFinalize(object obj); // 0x00566628-0x00566708
		private static void _ReRegisterForFinalize(object o); // 0x005710BC-0x005710C0
		public static void ReRegisterForFinalize(object obj); // 0x005710C0-0x005711A0
	}

	internal static class DateTimeFormat // TypeDefIndex: 201
	{
		// Fields
		internal static readonly TimeSpan NullOffset; // 0x00
		internal static char[] allStandardFormats; // 0x08
		internal static string[] fixedNumberFormats; // 0x0C
	
		// Constructors
		static DateTimeFormat(); // 0x0033D85C-0x0033DC80
	
		// Methods
		internal static void FormatDigits(StringBuilder outputBuffer, int value, int len); // 0x00339ED0-0x00339F6C
		internal static void FormatDigits(StringBuilder outputBuffer, int value, int len, bool overrideLengthLimit); // 0x00339F6C-0x0033A04C
		private static void HebrewFormatDigits(StringBuilder outputBuffer, int digits); // 0x0033A04C-0x0033A0F8
		internal static int ParseRepeatPattern(string format, int pos, char patternChar); // 0x0033A0F8-0x0033A174
		private static string FormatDayOfWeek(int dayOfWeek, int repeat, DateTimeFormatInfo dtfi); // 0x0033A174-0x0033A1BC
		private static string FormatMonth(int month, int repeatCount, DateTimeFormatInfo dtfi); // 0x0033A1BC-0x0033A204
		private static string FormatHebrewMonthName(DateTime time, int month, int repeatCount, DateTimeFormatInfo dtfi); // 0x0033A204-0x0033A34C
		internal static int ParseQuoteString(string format, int pos, StringBuilder result); // 0x0033A34C-0x0033A5E4
		internal static int ParseNextChar(string format, int pos); // 0x0033A5E4-0x0033A644
		private static bool IsUseGenitiveForm(string format, int index, int tokenLen, char patternToMatch); // 0x0033A644-0x0033A7E8
		private static string FormatCustomized(DateTime dateTime, string format, DateTimeFormatInfo dtfi, TimeSpan offset); // 0x0033A7E8-0x0033BDC8
		private static void FormatCustomizedTimeZone(DateTime dateTime, TimeSpan offset, string format, int tokenLen, bool timeOnly, StringBuilder result); // 0x0033BDC8-0x0033C2A4
		private static void FormatCustomizedRoundripTimeZone(DateTime dateTime, TimeSpan offset, StringBuilder result); // 0x0033C2A4-0x0033C594
		internal static string GetRealFormat(string format, DateTimeFormatInfo dtfi); // 0x0033C598-0x0033C950
		private static string ExpandPredefinedFormat(string format, ref DateTime dateTime, ref DateTimeFormatInfo dtfi, ref TimeSpan offset); // 0x0033C950-0x0033D034
		internal static string Format(DateTime dateTime, string format, DateTimeFormatInfo dtfi); // 0x00337B7C-0x00337C38
		internal static string Format(DateTime dateTime, string format, DateTimeFormatInfo dtfi, TimeSpan offset); // 0x0033D038-0x0033D354
		internal static string[] GetAllDateTimes(DateTime dateTime, char format, DateTimeFormatInfo dtfi); // 0x0033D354-0x0033D85C
		internal static string[] GetAllDateTimes(DateTime dateTime, DateTimeFormatInfo dtfi); // 0x003386E0-0x003389BC
		internal static void InvalidFormatForLocal(string format, DateTime dateTime); // 0x0033D034-0x0033D038
		internal static void InvalidFormatForUtc(string format, DateTime dateTime); // 0x0033C594-0x0033C598
	}

	internal static class DateTimeParse // TypeDefIndex: 202
	{
		// Fields
		internal static MatchNumberDelegate m_hebrewNumberParser; // 0x00
		private static DS[][] dateParsingStates; // 0x04
	
		// Nested types
		internal delegate bool MatchNumberDelegate(ref __DTString str, int digitLen, out int result); // TypeDefIndex: 203; 0x0055516C-0x00555628
	
		internal enum DTT // TypeDefIndex: 204
		{
			End = 0,
			NumEnd = 1,
			NumAmpm = 2,
			NumSpace = 3,
			NumDatesep = 4,
			NumTimesep = 5,
			MonthEnd = 6,
			MonthSpace = 7,
			MonthDatesep = 8,
			NumDatesuff = 9,
			NumTimesuff = 10,
			DayOfWeek = 11,
			YearSpace = 12,
			YearDateSep = 13,
			YearEnd = 14,
			TimeZone = 15,
			Era = 16,
			NumUTCTimeMark = 17,
			Unk = 18,
			NumLocalTimeMark = 19,
			Max = 20
		}
	
		internal enum TM // TypeDefIndex: 205
		{
			NotSet = -1,
			AM = 0,
			PM = 1
		}
	
		internal enum DS // TypeDefIndex: 206
		{
			BEGIN = 0,
			N = 1,
			NN = 2,
			D_Nd = 3,
			D_NN = 4,
			D_NNd = 5,
			D_M = 6,
			D_MN = 7,
			D_NM = 8,
			D_MNd = 9,
			D_NDS = 10,
			D_Y = 11,
			D_YN = 12,
			D_YNd = 13,
			D_YM = 14,
			D_YMd = 15,
			D_S = 16,
			T_S = 17,
			T_Nt = 18,
			T_NNt = 19,
			ERROR = 20,
			DX_NN = 21,
			DX_NNN = 22,
			DX_MN = 23,
			DX_NM = 24,
			DX_MNN = 25,
			DX_DS = 26,
			DX_DSN = 27,
			DX_NDS = 28,
			DX_NNDS = 29,
			DX_YNN = 30,
			DX_YMN = 31,
			DX_YN = 32,
			DX_YM = 33,
			TX_N = 34,
			TX_NN = 35,
			TX_NNN = 36,
			TX_TS = 37,
			DX_NNY = 38
		}
	
		// Constructors
		static DateTimeParse(); // 0x00349354-0x00349ED0
	
		// Methods
		internal static DateTime ParseExact(string s, string format, DateTimeFormatInfo dtfi, DateTimeStyles style); // 0x003372B0-0x003373D8
		internal static bool TryParseExact(string s, string format, DateTimeFormatInfo dtfi, DateTimeStyles style, ref DateTimeResult result); // 0x0033DC80-0x0033DE00
		private static bool MatchWord(ref __DTString str, string target); // 0x0033E924-0x0033EB34
		private static bool GetTimeZoneName(ref __DTString str); // 0x0033EB34-0x0033EC14
		internal static bool IsDigit(char ch); // 0x0033EC14-0x0033EC30
		private static bool ParseFraction(ref __DTString str, out double result); // 0x0033EC30-0x0033ED40
		private static bool ParseTimeZone(ref __DTString str, ref TimeSpan result); // 0x0033ED40-0x0033EFF0
		private static bool HandleTimeZone(ref __DTString str, ref DateTimeResult result); // 0x0033EFF0-0x0033F1C8
		private static bool Lex(DS dps, ref __DTString str, ref DateTimeToken dtok, ref DateTimeRawInfo raw, ref DateTimeResult result, ref DateTimeFormatInfo dtfi, DateTimeStyles styles); // 0x0033F1C8-0x00340460
		private static bool VerifyValidPunctuation(ref __DTString str); // 0x0034093C-0x00340B20
		private static bool GetYearMonthDayOrder(string datePattern, DateTimeFormatInfo dtfi, out int order); // 0x00340B20-0x00340E0C
		private static bool GetYearMonthOrder(string pattern, DateTimeFormatInfo dtfi, out int order); // 0x00340E0C-0x00341008
		private static bool GetMonthDayOrder(string pattern, DateTimeFormatInfo dtfi, out int order); // 0x00341008-0x00341218
		private static bool TryAdjustYear(ref DateTimeResult result, int year, out int adjustedYear); // 0x00341218-0x00341340
		private static bool SetDateYMD(ref DateTimeResult result, int year, int month, int day); // 0x00341340-0x003413D4
		private static bool SetDateMDY(ref DateTimeResult result, int month, int day, int year); // 0x003413D4-0x00341474
		private static bool SetDateDMY(ref DateTimeResult result, int day, int month, int year); // 0x00341474-0x00341514
		private static bool SetDateYDM(ref DateTimeResult result, int year, int day, int month); // 0x00341514-0x003415B4
		private static void GetDefaultYear(ref DateTimeResult result, ref DateTimeStyles styles); // 0x003415B4-0x0034168C
		private static bool GetDayOfNN(ref DateTimeResult result, ref DateTimeStyles styles, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x003417EC-0x00341A08
		private static bool GetDayOfNNN(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x00341A08-0x00341E0C
		private static bool GetDayOfMN(ref DateTimeResult result, ref DateTimeStyles styles, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x00341E0C-0x0034215C
		private static bool GetHebrewDayOfNM(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x0034215C-0x00342320
		private static bool GetDayOfNM(ref DateTimeResult result, ref DateTimeStyles styles, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x00342320-0x00342670
		private static bool GetDayOfMNN(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x00342670-0x00342B78
		private static bool GetDayOfYNN(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x00342B78-0x00342D48
		private static bool GetDayOfNNY(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x00342D48-0x00342F5C
		private static bool GetDayOfYMN(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x00342F5C-0x00343070
		private static bool GetDayOfYN(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x00343070-0x00343184
		private static bool GetDayOfYM(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x00343184-0x00343284
		private static void AdjustTimeMark(DateTimeFormatInfo dtfi, ref DateTimeRawInfo raw); // 0x00343284-0x00343408
		private static bool AdjustHour(ref int hour, TM timeMark); // 0x00343408-0x00343458
		private static bool GetTimeOfN(DateTimeFormatInfo dtfi, ref DateTimeResult result, ref DateTimeRawInfo raw); // 0x00343458-0x0034352C
		private static bool GetTimeOfNN(DateTimeFormatInfo dtfi, ref DateTimeResult result, ref DateTimeRawInfo raw); // 0x0034352C-0x003435F8
		private static bool GetTimeOfNNN(DateTimeFormatInfo dtfi, ref DateTimeResult result, ref DateTimeRawInfo raw); // 0x003435F8-0x003436D8
		private static bool GetDateOfDSN(ref DateTimeResult result, ref DateTimeRawInfo raw); // 0x003436D8-0x0034378C
		private static bool GetDateOfNDS(ref DateTimeResult result, ref DateTimeRawInfo raw); // 0x0034378C-0x003438AC
		private static bool GetDateOfNNDS(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x003438AC-0x00343C3C
		private static bool ProcessDateTimeSuffix(ref DateTimeResult result, ref DateTimeRawInfo raw, ref DateTimeToken dtok); // 0x00343C3C-0x00343D64
		internal static bool ProcessHebrewTerminalState(DS dps, ref DateTimeResult result, ref DateTimeStyles styles, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x00343D64-0x00344198
		internal static bool ProcessTerminaltState(DS dps, ref DateTimeResult result, ref DateTimeStyles styles, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x00340460-0x0034093C
		internal static DateTime Parse(string s, DateTimeFormatInfo dtfi, DateTimeStyles styles); // 0x00337090-0x003371B0
		internal static bool TryParse(string s, DateTimeFormatInfo dtfi, DateTimeStyles styles, ref DateTimeResult result); // 0x00344198-0x00344C98
		private static bool DetermineTimeZoneAdjustments(ref DateTimeResult result, DateTimeStyles styles, bool bTimeOnly); // 0x003456F8-0x003459A8
		private static bool DateTimeOffsetTimeZonePostProcessing(ref DateTimeResult result, DateTimeStyles styles); // 0x003459A8-0x00345C30
		private static bool AdjustTimeZoneToUniversal(ref DateTimeResult result); // 0x00345C30-0x00345D38
		private static bool AdjustTimeZoneToLocal(ref DateTimeResult result, bool bTimeOnly); // 0x00345D38-0x0034608C
		private static bool ParseISO8601(ref DateTimeRawInfo raw, ref __DTString str, DateTimeStyles styles, ref DateTimeResult result); // 0x00344C98-0x003453EC
		internal static bool MatchHebrewDigits(ref __DTString str, int digitLen, out int number); // 0x0034615C-0x00346264
		internal static bool ParseDigits(ref __DTString str, int digitLen, out int result); // 0x0034608C-0x0034615C
		internal static bool ParseDigits(ref __DTString str, int minDigitLen, int maxDigitLen, out int result); // 0x00346264-0x003462FC
		private static bool ParseFractionExact(ref __DTString str, int maxDigitLen, ref double result); // 0x003462FC-0x00346464
		private static bool ParseSign(ref __DTString str, ref bool result); // 0x00346464-0x003464C4
		private static bool ParseTimeZoneOffset(ref __DTString str, int len, ref TimeSpan result); // 0x003464C4-0x0034676C
		private static bool MatchAbbreviatedMonthName(ref __DTString str, DateTimeFormatInfo dtfi, ref int result); // 0x0034676C-0x00346950
		private static bool MatchMonthName(ref __DTString str, DateTimeFormatInfo dtfi, ref int result); // 0x00346950-0x00346BA8
		private static bool MatchAbbreviatedDayName(ref __DTString str, DateTimeFormatInfo dtfi, ref int result); // 0x00346BA8-0x00346CD8
		private static bool MatchDayName(ref __DTString str, DateTimeFormatInfo dtfi, ref int result); // 0x00346CD8-0x00346E08
		private static bool MatchEraName(ref __DTString str, DateTimeFormatInfo dtfi, ref int result); // 0x00346E08-0x00346FC8
		private static bool MatchTimeMark(ref __DTString str, DateTimeFormatInfo dtfi, ref TM result); // 0x00346FC8-0x003471C8
		private static bool MatchAbbreviatedTimeMark(ref __DTString str, DateTimeFormatInfo dtfi, ref TM result); // 0x003471C8-0x003472C0
		private static bool CheckNewValue(ref int currentValue, int newValue, char patternChar, ref DateTimeResult result); // 0x003472C0-0x0034738C
		private static DateTime GetDateTimeNow(ref DateTimeResult result, ref DateTimeStyles styles); // 0x0034168C-0x003417EC
		private static bool CheckDefaultDateTime(ref DateTimeResult result, ref Calendar cal, DateTimeStyles styles); // 0x003453EC-0x003456F8
		private static string ExpandPredefinedFormat(string format, ref DateTimeFormatInfo dtfi, ref ParsingInfo parseInfo, ref DateTimeResult result); // 0x0034738C-0x00347920
		private static bool ParseByFormat(ref __DTString str, ref __DTString format, ref ParsingInfo parseInfo, DateTimeFormatInfo dtfi, ref DateTimeResult result); // 0x00347920-0x003491DC
		internal static bool TryParseQuoteString(string format, int pos, StringBuilder result, out int returnValue); // 0x003491DC-0x00349354
		private static bool DoStrictParse(string s, string formatParam, DateTimeStyles styles, DateTimeFormatInfo dtfi, ref DateTimeResult result); // 0x0033E050-0x0033E924
		private static Exception GetDateTimeParseException(ref DateTimeResult result); // 0x0033DE00-0x0033E050
	}

	internal struct __DTString // TypeDefIndex: 207
	{
		// Fields
		internal string Value; // 0x00
		internal int Index; // 0x04
		internal int len; // 0x08
		internal char m_current; // 0x0C
		private CompareInfo m_info; // 0x10
		private bool m_checkDigitToken; // 0x14
		private static char[] WhiteSpaceChecks; // 0x00
	
		// Properties
		internal CompareInfo CompareInfo { get; } // 0x00A63DC4-0x00A63E20 
	
		// Constructors
		internal __DTString(string str, DateTimeFormatInfo dtfi, bool checkDigitToken); // 0x00A63D94-0x00A63DB4
		internal __DTString(string str, DateTimeFormatInfo dtfi); // 0x00A63DB4-0x00A63DC4
		static __DTString(); // 0x00A65700-0x00A657D4
	
		// Methods
		internal bool GetNext(); // 0x00A63E20-0x00A63E3C
		internal bool AtEnd(); // 0x00A63E3C-0x00A63EA8
		internal bool Advance(int count); // 0x00A63EA8-0x00A641F8
		internal void GetRegularToken(out TokenType tokenType, out int tokenValue, DateTimeFormatInfo dtfi); // 0x00A641F8-0x00A64464
		internal TokenType GetSeparatorToken(DateTimeFormatInfo dtfi, out int indexBeforeSeparator, out char charBeforeSeparator); // 0x00A64464-0x00A64580
		internal bool MatchSpecifiedWord(string target); // 0x00A64580-0x00A64588
		internal bool MatchSpecifiedWord(string target, int endIndex); // 0x00A64588-0x00A64B3C
		internal bool MatchSpecifiedWords(string target, bool checkWordBoundary, ref int matchLength); // 0x00A64B3C-0x00A64CC0
		internal bool Match(string str); // 0x00A64CC0-0x00A64D40
		internal bool Match(char ch); // 0x00A64D40-0x00A64E14
		internal int MatchLongestWords(string[] words, ref int maxMatchStrLen); // 0x00A64E14-0x00A64EAC
		internal int GetRepeatCount(); // 0x00A64EAC-0x00A64F78
		internal bool GetNextDigit(); // 0x00A64F78-0x00A64FB0
		internal char GetChar(); // 0x00A64FB0-0x00A64FEC
		internal int GetDigit(); // 0x00A64FEC-0x00A650D0
		internal void SkipWhiteSpaces(); // 0x00A650D0-0x00A650D8
		internal bool SkipWhiteSpaceCurrent(); // 0x00A650D8-0x00A651F8
		internal void TrimTail(); // 0x00A651F8-0x00A653EC
		internal void RemoveTrailingInQuoteSpaces(); // 0x00A653EC-0x00A65554
		internal void RemoveLeadingInQuoteSpaces(); // 0x00A65554-0x00A65678
		internal DTSubString GetSubString(); // 0x00A65678-0x00A656D8
		internal void ConsumeSubString(DTSubString sub); // 0x00A656D8-0x00A65700
	}

	internal enum DTSubStringType // TypeDefIndex: 208
	{
		Unknown = 0,
		Invalid = 1,
		Number = 2,
		End = 3,
		Other = 4
	}

	internal struct DTSubString // TypeDefIndex: 209
	{
		// Fields
		internal string s; // 0x00
		internal int index; // 0x04
		internal int length; // 0x08
		internal DTSubStringType type; // 0x0C
		internal int value; // 0x10
	
		// Properties
		internal char this[int relativeIndex] { get => default; } // 0x00334300-0x00334308 
	}

	internal struct DateTimeToken // TypeDefIndex: 210
	{
		// Fields
		internal DateTimeParse.DTT dtt; // 0x00
		internal TokenType suffix; // 0x04
		internal int num; // 0x08
	}

	internal struct DateTimeRawInfo // TypeDefIndex: 211
	{
		// Fields
		private unsafe int* num; // 0x00
		internal int numCount; // 0x04
		internal int month; // 0x08
		internal int year; // 0x0C
		internal int dayOfWeek; // 0x10
		internal int era; // 0x14
		internal DateTimeParse.TM timeMark; // 0x18
		internal double fraction; // 0x20
		internal bool hasSameDateAndTimeSeparators; // 0x28
		internal bool timeZone; // 0x29
	
		// Methods
		internal unsafe void Init(int* numberBuffer); // 0x00555830-0x0055588C
		internal void AddNumber(int value); // 0x0055588C-0x005558BC
		internal int GetNumber(int index); // 0x005558BC-0x00555950
	}

	internal enum ParseFailureKind // TypeDefIndex: 212
	{
		None = 0,
		ArgumentNull = 1,
		Format = 2,
		FormatWithParameter = 3,
		FormatBadDateTimeCalendar = 4
	}

	[Flags] // 0x0013A700-0x0013A710
	internal enum ParseFlags // TypeDefIndex: 213
	{
		HaveYear = 1,
		HaveMonth = 2,
		HaveDay = 4,
		HaveHour = 8,
		HaveMinute = 16,
		HaveSecond = 32,
		HaveTime = 64,
		HaveDate = 128,
		TimeZoneUsed = 256,
		TimeZoneUtc = 512,
		ParsedMonthName = 1024,
		CaptureOffset = 2048,
		YearDefault = 4096,
		Rfc1123Pattern = 8192,
		UtcSortPattern = 16384
	}

	internal struct DateTimeResult // TypeDefIndex: 214
	{
		// Fields
		internal int Year; // 0x00
		internal int Month; // 0x04
		internal int Day; // 0x08
		internal int Hour; // 0x0C
		internal int Minute; // 0x10
		internal int Second; // 0x14
		internal double fraction; // 0x18
		internal int era; // 0x20
		internal ParseFlags flags; // 0x24
		internal TimeSpan timeZoneOffset; // 0x28
		internal Calendar calendar; // 0x30
		internal DateTime parsedDate; // 0x38
		internal ParseFailureKind failure; // 0x40
		internal string failureMessageID; // 0x44
		internal object failureMessageFormatArgument; // 0x48
		internal string failureArgumentName; // 0x4C
	
		// Methods
		internal void Init(); // 0x00555950-0x00555984
		internal void SetDate(int year, int month, int day); // 0x00555984-0x0055599C
		internal void SetFailure(ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument); // 0x0055599C-0x005559B8
		internal void SetFailure(ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument, string failureArgumentName); // 0x005559B8-0x005559C8
	}

	internal struct ParsingInfo // TypeDefIndex: 215
	{
		// Fields
		internal Calendar calendar; // 0x00
		internal int dayOfWeek; // 0x04
		internal DateTimeParse.TM timeMark; // 0x08
		internal bool fUseHour12; // 0x0C
		internal bool fUseTwoDigitYear; // 0x0D
		internal bool fAllowInnerWhite; // 0x0E
		internal bool fAllowTrailingWhite; // 0x0F
		internal bool fCustomNumberParser; // 0x10
		internal DateTimeParse.MatchNumberDelegate parseNumberDelegate; // 0x14
	
		// Methods
		internal void Init(); // 0x0074A860-0x0074A870
	}

	internal enum TokenType // TypeDefIndex: 216
	{
		NumberToken = 1,
		YearNumberToken = 2,
		Am = 3,
		Pm = 4,
		MonthToken = 5,
		EndOfString = 6,
		DayOfWeekToken = 7,
		TimeZoneToken = 8,
		EraToken = 9,
		DateWordToken = 10,
		UnknownToken = 11,
		HebrewNumber = 12,
		JapaneseEraToken = 13,
		TEraToken = 14,
		IgnorableSymbol = 15,
		RegularTokenMask = 255,
		SEP_Unk = 256,
		SEP_End = 512,
		SEP_Space = 768,
		SEP_Am = 1024,
		SEP_Pm = 1280,
		SEP_Date = 1536,
		SEP_Time = 1792,
		SEP_YearSuff = 2048,
		SEP_MonthSuff = 2304,
		SEP_DaySuff = 2560,
		SEP_HourSuff = 2816,
		SEP_MinuteSuff = 3072,
		SEP_SecondSuff = 3328,
		SEP_LocalTimeMark = 3584,
		SEP_DateOrOffset = 3840,
		SeparatorTokenMask = 65280
	}

	[Serializable]
	[ComVisible] // 0x0013A710-0x0013A724
	public struct Guid : IFormattable, IComparable, IComparable<Guid>, IEquatable<Guid> // TypeDefIndex: 217
	{
		// Fields
		public static readonly Guid Empty; // 0x00
		private int _a; // 0x00
		private short _b; // 0x04
		private short _c; // 0x06
		private byte _d; // 0x08
		private byte _e; // 0x09
		private byte _f; // 0x0A
		private byte _g; // 0x0B
		private byte _h; // 0x0C
		private byte _i; // 0x0D
		private byte _j; // 0x0E
		private byte _k; // 0x0F
		private static object _rngAccess; // 0x10
		private static RandomNumberGenerator _rng; // 0x14
	
		// Nested types
		[Flags] // 0x0013A724-0x0013A734
		private enum GuidStyles // TypeDefIndex: 218
		{
			None = 0,
			NumberFormat = 0,
			AllowParenthesis = 1,
			AllowBraces = 2,
			AllowDashes = 4,
			AllowHexPrefix = 8,
			Any = 15,
			RequireParenthesis = 16,
			RequireBraces = 32,
			RequireDashes = 64,
			DigitFormat = 64,
			ParenthesisFormat = 80,
			BraceFormat = 96,
			RequireHexPrefix = 128,
			HexFormat = 160
		}
	
		private enum GuidParseThrowStyle // TypeDefIndex: 219
		{
			None = 0,
			All = 1,
			AllButOverflow = 2
		}
	
		private enum ParseFailureKind // TypeDefIndex: 220
		{
			None = 0,
			ArgumentNull = 1,
			Format = 2,
			FormatWithParameter = 3,
			NativeException = 4,
			FormatWithInnerException = 5
		}
	
		private struct GuidResult // TypeDefIndex: 221
		{
			// Fields
			internal Guid parsedGuid; // 0x00
			internal GuidParseThrowStyle throwStyle; // 0x10
			internal ParseFailureKind m_failure; // 0x14
			internal string m_failureMessageID; // 0x18
			internal object m_failureMessageFormatArgument; // 0x1C
			internal string m_failureArgumentName; // 0x20
			internal Exception m_innerException; // 0x24
	
			// Methods
			internal void Init(GuidParseThrowStyle canThrow); // 0x00424CE8-0x00424CF0
			internal void SetFailure(Exception nativeException); // 0x00424CF0-0x00424D00
			internal void SetFailure(ParseFailureKind failure, string failureMessageID); // 0x00424D00-0x00424D2C
			internal void SetFailure(ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument); // 0x00424D2C-0x00424D54
			internal void SetFailure(ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument, string failureArgumentName, Exception innerException); // 0x00424D54-0x00424D7C
			internal Exception GetGuidParseException(); // 0x00424D7C-0x00424D84
		}
	
		// Constructors
		public Guid(byte[] b); // 0x00421478-0x004216A0
		public Guid(string g); // 0x00421C34-0x00421C3C
		static Guid(); // 0x00424BFC-0x00424CE8
	
		// Methods
		public static Guid Parse(string input); // 0x00421C3C-0x00421D9C
		private static bool TryParseGuid(string g, GuidStyles flags, ref GuidResult result); // 0x004216A0-0x00421C34
		private static bool TryParseGuidWithHexPrefix(string guidString, ref GuidResult result); // 0x00422278-0x00422B50
		private static bool TryParseGuidWithNoStyle(string guidString, ref GuidResult result); // 0x00422B50-0x00423058
		private static bool TryParseGuidWithDashes(string guidString, ref GuidResult result); // 0x00421D9C-0x00422278
		private static bool StringToShort(string str, int requiredLength, int flags, out short result, ref GuidResult parseResult); // 0x004233CC-0x00423474
		private static unsafe bool StringToShort(string str, int* parsePos, int requiredLength, int flags, out short result, ref GuidResult parseResult); // 0x004235CC-0x00423690
		private static bool StringToInt(string str, int requiredLength, int flags, out int result, ref GuidResult parseResult); // 0x00423324-0x004233CC
		private static bool StringToInt(string str, ref int parsePos, int requiredLength, int flags, out int result, ref GuidResult parseResult); // 0x0042351C-0x004235CC
		private static unsafe bool StringToInt(string str, int* parsePos, int requiredLength, int flags, out int result, ref GuidResult parseResult); // 0x00423690-0x004238E8
		private static bool StringToLong(string str, ref int parsePos, int flags, out long result, ref GuidResult parseResult); // 0x00423474-0x0042351C
		private static unsafe bool StringToLong(string str, int* parsePos, int flags, out long result, ref GuidResult parseResult); // 0x004238E8-0x004241F0
		private static string EatAllWhitespace(string str); // 0x00423058-0x004231D4
		private static bool IsHexPrefix(string str, int i); // 0x004231D4-0x00423324
		public override string ToString(); // 0x004241F0-0x004241F8
		public override int GetHashCode(); // 0x004241F8-0x00424358
		public override bool Equals(object o); // 0x00424358-0x0042440C
		public bool Equals(Guid g); // 0x0042440C-0x00424430
		private int GetResult(uint me, uint them); // 0x00424430-0x004245F4
		public int CompareTo(object value); // 0x004245F4-0x00424724
		public int CompareTo(Guid value); // 0x00424724-0x0042474C
		public static bool operator ==(Guid a, Guid b); // 0x0041BD2C-0x0041BDE8
		public string ToString(string format); // 0x0042474C-0x00424754
		private static char HexToChar(int a); // 0x00424754-0x00424768
		private static unsafe int HexsToChars(char* guidChars, int offset, int a, int b); // 0x00424768-0x00424810
		private static unsafe int HexsToChars(char* guidChars, int offset, int a, int b, bool hex); // 0x00424810-0x00424980
		public string ToString(string format, IFormatProvider provider); // 0x00424980-0x00424988
		public static Guid NewGuid(); // 0x00424988-0x00424BFC
	}

	[CLSCompliant] // 0x0013A734-0x0013A7C8
	[ComVisible] // 0x0013A734-0x0013A7C8
	[Guid] // 0x0013A734-0x0013A7C8
	[InterfaceType] // 0x0013A734-0x0013A7C8
	public interface _AppDomain // TypeDefIndex: 222
	{
	}

	[ComVisible] // 0x0013A7C8-0x0013A848
	[Guid] // 0x0013A7C8-0x0013A848
	[InterfaceType] // 0x0013A7C8-0x0013A848
	public interface IAppDomainSetup // TypeDefIndex: 223
	{
	}

	[ComVisible] // 0x0013A848-0x0013A85C
	public interface IAsyncResult // TypeDefIndex: 224
	{
		// Properties
		WaitHandle AsyncWaitHandle { get; }
		object AsyncState { get; }
		bool CompletedSynchronously { get; }
	}

	[ComVisible] // 0x0013A85C-0x0013A870
	public interface ICloneable // TypeDefIndex: 225
	{
		// Methods
		object Clone();
	}

	[ComVisible] // 0x0013A870-0x0013A884
	public interface IComparable // TypeDefIndex: 226
	{
		// Methods
		int CompareTo(object obj);
	}

	public interface IComparable<in T> // TypeDefIndex: 227
	{
		// Methods
		int CompareTo(T other);
	}

	[CLSCompliant] // 0x0013A884-0x0013A8BC
	[ComVisible] // 0x0013A884-0x0013A8BC
	public interface IConvertible // TypeDefIndex: 228
	{
		// Methods
		TypeCode GetTypeCode();
		bool ToBoolean(IFormatProvider provider);
		char ToChar(IFormatProvider provider);
		sbyte ToSByte(IFormatProvider provider);
		byte ToByte(IFormatProvider provider);
		short ToInt16(IFormatProvider provider);
		ushort ToUInt16(IFormatProvider provider);
		int ToInt32(IFormatProvider provider);
		uint ToUInt32(IFormatProvider provider);
		long ToInt64(IFormatProvider provider);
		ulong ToUInt64(IFormatProvider provider);
		float ToSingle(IFormatProvider provider);
		double ToDouble(IFormatProvider provider);
		decimal ToDecimal(IFormatProvider provider);
		DateTime ToDateTime(IFormatProvider provider);
		string ToString(IFormatProvider provider);
		object ToType(Type conversionType, IFormatProvider provider);
	}

	[ComVisible] // 0x0013A8BC-0x0013A8D0
	public interface ICustomFormatter // TypeDefIndex: 229
	{
		// Methods
		string Format(string format, object arg, IFormatProvider formatProvider);
	}

	[ComVisible] // 0x0013A8D0-0x0013A8E4
	public interface IDisposable // TypeDefIndex: 230
	{
		// Methods
		void Dispose();
	}

	public interface IEquatable<T> // TypeDefIndex: 231
	{
		// Methods
		bool Equals(T other);
	}

	[ComVisible] // 0x0013A8E4-0x0013A8F8
	public interface IFormatProvider // TypeDefIndex: 232
	{
		// Methods
		object GetFormat(Type formatType);
	}

	[ComVisible] // 0x0013A8F8-0x0013A90C
	public interface IFormattable // TypeDefIndex: 233
	{
		// Methods
		string ToString(string format, IFormatProvider formatProvider);
	}

	[Serializable]
	[ComVisible] // 0x0013A90C-0x0013A920
	public sealed class IndexOutOfRangeException : SystemException // TypeDefIndex: 234
	{
		// Constructors
		public IndexOutOfRangeException(); // 0x002ADA48-0x002ADAD0
		public IndexOutOfRangeException(string message); // 0x002AB590-0x002AB5BC
		internal IndexOutOfRangeException(SerializationInfo info, StreamingContext context); // 0x002ADAD0-0x002ADC90
	}

	[Serializable]
	[ComVisible] // 0x0013A920-0x0013A934
	public struct Int16 : IComparable, IFormattable, IConvertible, IComparable<short>, IEquatable<short> // TypeDefIndex: 235
	{
		// Fields
		internal short m_value; // 0x00
		public const short MaxValue = 32767; // Metadata: 0x0020381C
		public const short MinValue = -32768; // Metadata: 0x0020381E
	
		// Methods
		public int CompareTo(object value); // 0x002ADC90-0x002ADC98
		public int CompareTo(short value); // 0x002ADC98-0x002ADD38
		public override bool Equals(object obj); // 0x002ADD38-0x002ADD58
		public bool Equals(short obj); // 0x002ADD58-0x002ADD7C
		public override int GetHashCode(); // 0x002ADD7C-0x002ADD88
		public override string ToString(); // 0x002ADE18-0x002ADE40
		public string ToString(IFormatProvider provider); // 0x002ADE40-0x002ADF00
		public string ToString(string format, IFormatProvider provider); // 0x002ADF00-0x002ADF30
		private string ToString(string format, NumberFormatInfo info); // 0x002ADFC0-0x002ADFC8
		public static short Parse(string s, IFormatProvider provider); // 0x002ADFC8-0x002ADFF4
		public static short Parse(string s, NumberStyles style, IFormatProvider provider); // 0x002AE20C-0x002AE24C
		private static short Parse(string s, NumberStyles style, NumberFormatInfo info); // 0x002ADFF4-0x002AE20C
		public TypeCode GetTypeCode(); // 0x002AE458-0x002AE4E8
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x002AE4E8-0x002AE578
		char IConvertible.ToChar(IFormatProvider provider); // 0x002AE578-0x002AE608
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x002AE608-0x002AE698
		byte IConvertible.ToByte(IFormatProvider provider); // 0x002AE698-0x002AE6A0
		short IConvertible.ToInt16(IFormatProvider provider); // 0x002AE6A0-0x002AE730
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x002AE730-0x002AE7C0
		int IConvertible.ToInt32(IFormatProvider provider); // 0x002AE7C0-0x002AE850
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x002AE850-0x002AE8E0
		long IConvertible.ToInt64(IFormatProvider provider); // 0x002AE8E0-0x002AE970
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x002AE970-0x002AEA00
		float IConvertible.ToSingle(IFormatProvider provider); // 0x002AEA00-0x002AEA90
		double IConvertible.ToDouble(IFormatProvider provider); // 0x002AEA90-0x002AEB28
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x002AEB28-0x002AEC64
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x002AEC90-0x002AED60
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x002AED60-0x002AEE6C
	}

	[Serializable]
	[ComVisible] // 0x0013A934-0x0013A948
	public struct Int32 : IComparable, IFormattable, IConvertible, IComparable<int>, IEquatable<int> // TypeDefIndex: 236
	{
		// Fields
		internal int m_value; // 0x00
		public const int MaxValue = 2147483647; // Metadata: 0x00203820
		public const int MinValue = -2147483648; // Metadata: 0x00203824
	
		// Methods
		public int CompareTo(object value); // 0x002AEE6C-0x002AEE90
		public int CompareTo(int value); // 0x002AEE90-0x002AEF3C
		public override bool Equals(object obj); // 0x002AEF3C-0x002AEF58
		public bool Equals(int obj); // 0x002AEF58-0x002AEF74
		public override int GetHashCode(); // 0x002AEF74-0x002AEFA4
		public override string ToString(); // 0x002AEFA4-0x002AEFF8
		public string ToString(string format); // 0x002AEFF8-0x002AF050
		public string ToString(IFormatProvider provider); // 0x002AF050-0x002AF0AC
		public string ToString(string format, IFormatProvider provider); // 0x002AF0AC-0x002AF0DC
		public static int Parse(string s); // 0x002AF0DC-0x002AF104
		public static int Parse(string s, IFormatProvider provider); // 0x002AF104-0x002AF130
		public static int Parse(string s, NumberStyles style, IFormatProvider provider); // 0x002AF130-0x002AF170
		public static bool TryParse(string s, out int result); // 0x002AF170-0x002AF1A8
		public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out int result); // 0x002AF308-0x002AF358
		public TypeCode GetTypeCode(); // 0x002AF358-0x002AF3E8
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x002AF3E8-0x002AF478
		char IConvertible.ToChar(IFormatProvider provider); // 0x002AF478-0x002AF508
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x002AF508-0x002AF598
		byte IConvertible.ToByte(IFormatProvider provider); // 0x002AF598-0x002AF628
		short IConvertible.ToInt16(IFormatProvider provider); // 0x002AF628-0x002AF6B8
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x002AF6B8-0x002AF6C0
		int IConvertible.ToInt32(IFormatProvider provider); // 0x002AF6C0-0x002AF750
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x002AF750-0x002AF7E0
		long IConvertible.ToInt64(IFormatProvider provider); // 0x002AF7E0-0x002AF870
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x002AF870-0x002AF900
		float IConvertible.ToSingle(IFormatProvider provider); // 0x002AF900-0x002AF990
		double IConvertible.ToDouble(IFormatProvider provider); // 0x002AF990-0x002AFA28
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x002AFA28-0x002AFB64
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x002AFB64-0x002AFC34
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x002AFC34-0x002AFD54
	}

	[Serializable]
	[ComVisible] // 0x0013A948-0x0013A95C
	public struct Int64 : IComparable, IFormattable, IConvertible, IComparable<long>, IEquatable<long> // TypeDefIndex: 237
	{
		// Fields
		internal long m_value; // 0x00
		public const long MaxValue = 9223372036854775807; // Metadata: 0x00203828
		public const long MinValue = -9223372036854775808; // Metadata: 0x00203830
	
		// Methods
		public int CompareTo(object value); // 0x002AFD54-0x002AFD5C
		public int CompareTo(long value); // 0x002AFD5C-0x002AFE24
		public override bool Equals(object obj); // 0x002AFE24-0x002AFE48
		public bool Equals(long obj); // 0x002AFE48-0x002AFE70
		public override int GetHashCode(); // 0x002AFE70-0x002AFEB0
		public override string ToString(); // 0x002AFF50-0x002AFFBC
		public string ToString(IFormatProvider provider); // 0x002AFFBC-0x002B0030
		public string ToString(string format, IFormatProvider provider); // 0x002B0030-0x002B006C
		public static long Parse(string s); // 0x002B006C-0x002B0094
		public static long Parse(string s, IFormatProvider provider); // 0x002B02B8-0x002B02E4
		public static long Parse(string s, NumberStyles style, IFormatProvider provider); // 0x002B02E4-0x002B0324
		public static bool TryParse(string s, out long result); // 0x002B0324-0x002B035C
		public TypeCode GetTypeCode(); // 0x002B04CC-0x002B0560
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x002B0560-0x002B05F4
		char IConvertible.ToChar(IFormatProvider provider); // 0x002B05F4-0x002B0688
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x002B0688-0x002B071C
		byte IConvertible.ToByte(IFormatProvider provider); // 0x002B071C-0x002B07B0
		short IConvertible.ToInt16(IFormatProvider provider); // 0x002B07B0-0x002B0844
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x002B0844-0x002B08D8
		int IConvertible.ToInt32(IFormatProvider provider); // 0x002B08D8-0x002B096C
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x002B096C-0x002B0974
		long IConvertible.ToInt64(IFormatProvider provider); // 0x002B0974-0x002B0A08
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x002B0A08-0x002B0A9C
		float IConvertible.ToSingle(IFormatProvider provider); // 0x002B0A9C-0x002B0B30
		double IConvertible.ToDouble(IFormatProvider provider); // 0x002B0B30-0x002B0BDC
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x002B0BDC-0x002B0D18
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x002B0D18-0x002B0DE8
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x002B0DE8-0x002B0DF8
	}

	[Serializable]
	[ComVisible] // 0x0013A95C-0x0013A970
	public class InvalidCastException : SystemException // TypeDefIndex: 238
	{
		// Constructors
		public InvalidCastException(); // 0x002B1164-0x002B11EC
		public InvalidCastException(string message); // 0x002AEC64-0x002AEC90
		protected InvalidCastException(SerializationInfo info, StreamingContext context); // 0x002B11EC-0x002B120C
	}

	[Serializable]
	[ComVisible] // 0x0013A970-0x0013A984
	public class InvalidOperationException : SystemException // TypeDefIndex: 239
	{
		// Constructors
		public InvalidOperationException(); // 0x002B120C-0x002B1294
		public InvalidOperationException(string message); // 0x002A0954-0x002A0980
		public InvalidOperationException(string message, Exception innerException); // 0x002B1294-0x002B12C0
		protected InvalidOperationException(SerializationInfo info, StreamingContext context); // 0x002B12C0-0x002B12E0
	}

	[Serializable]
	[ComVisible] // 0x0013A984-0x0013A998
	public sealed class InvalidProgramException : SystemException // TypeDefIndex: 240
	{
		// Constructors
		public InvalidProgramException(); // 0x002B12E0-0x002B1368
		public InvalidProgramException(string message); // 0x002B1368-0x002B1394
		internal InvalidProgramException(SerializationInfo info, StreamingContext context); // 0x002B1394-0x002B13B4
	}

	[Serializable]
	[TypeForwardedFrom] // 0x0013A998-0x0013A9CC
	public class InvalidTimeZoneException : Exception // TypeDefIndex: 241
	{
		// Constructors
		public InvalidTimeZoneException(string message); // 0x002B13B4-0x002B1440
		public InvalidTimeZoneException(string message, Exception innerException); // 0x002B1440-0x002B14D4
		protected InvalidTimeZoneException(SerializationInfo info, StreamingContext context); // 0x002B14D4-0x002B157C
		public InvalidTimeZoneException(); // 0x002B157C-0x002B1600
	}

	public static class Math // TypeDefIndex: 242
	{
		// Fields
		private static double doubleRoundLimit; // 0x00
		private const int maxRoundingDigits = 15; // Metadata: 0x00203838
		private static double[] roundPower10Double; // 0x08
		public const double PI = 3.141592653589793; // Metadata: 0x0020383C
		public const double E = 2.718281828459045; // Metadata: 0x00203844
	
		// Constructors
		static Math(); // 0x002B36A4-0x002B3758
	
		// Methods
		public static double Acos(double d); // 0x002B30E8-0x002B30EC
		public static double Asin(double d); // 0x002B30EC-0x002B30F0
		public static double Atan(double d); // 0x002B30F0-0x002B30F4
		public static double Atan2(double y, double x); // 0x002B30F4-0x002B30F8
		public static double Ceiling(double a); // 0x002B30F8-0x002B30FC
		public static double Cos(double d); // 0x002B30FC-0x002B3100
		public static double Floor(double d); // 0x002B3100-0x002B3104
		private static double InternalTruncate(double d); // 0x002B3104-0x002B3194
		public static double Sin(double a); // 0x002B3198-0x002B319C
		public static double Tan(double a); // 0x002B319C-0x002B31A0
		public static double Round(double a); // 0x002B31A0-0x002B3250
		private static unsafe double SplitFractionDouble(double* value); // 0x002B3194-0x002B3198
		public static double Truncate(double d); // 0x002B3250-0x002B32D8
		[ReliabilityContract] // 0x00143ED0-0x00143EE8
		public static double Sqrt(double d); // 0x002B32D8-0x002B32F4
		public static double Log(double d); // 0x002B32F4-0x002B32F8
		public static double Pow(double x, double y); // 0x002B32F8-0x002B32FC
		public static int Abs(int value); // 0x002B32FC-0x002B3388
		private static int AbsHelper(int value); // 0x002B3388-0x002B3440
		public static float Abs(float value); // 0x002B3440-0x002B3448
		[ReliabilityContract] // 0x00143EE8-0x00143F00
		public static int Max(int val1, int val2); // 0x002B3448-0x002B3454
		[ReliabilityContract] // 0x00143F00-0x00143F18
		public static float Max(float val1, float val2); // 0x002B3454-0x002B3490
		[ReliabilityContract] // 0x00143F18-0x00143F30
		public static int Min(int val1, int val2); // 0x002B3490-0x002B349C
		[ReliabilityContract] // 0x00143F30-0x00143F48
		public static float Min(float val1, float val2); // 0x002B349C-0x002B34D8
		public static double Log(double a, double newBase); // 0x002B34D8-0x002B36A4
	}

	[Serializable]
	[ComVisible] // 0x0013A9CC-0x0013A9E0
	public class MemberAccessException : SystemException // TypeDefIndex: 243
	{
		// Constructors
		public MemberAccessException(); // 0x002B3758-0x002B37E0
		public MemberAccessException(string message); // 0x002B37E0-0x002B380C
		protected MemberAccessException(SerializationInfo info, StreamingContext context); // 0x002B380C-0x002B382C
	}

	[Serializable]
	[ComVisible] // 0x0013A9E0-0x0013A9F4
	public class MethodAccessException : MemberAccessException // TypeDefIndex: 244
	{
		// Constructors
		public MethodAccessException(); // 0x002B382C-0x002B38C8
		public MethodAccessException(string message); // 0x002B38C8-0x002B3908
		protected MethodAccessException(SerializationInfo info, StreamingContext context); // 0x002B3908-0x002B3928
	}

	[Serializable]
	[ComVisible] // 0x0013A9F4-0x0013AA08
	public class MissingFieldException : MissingMemberException, ISerializable // TypeDefIndex: 245
	{
		// Properties
		public override string Message { get; } // 0x002B3C34-0x002B3DA4 
	
		// Constructors
		public MissingFieldException(); // 0x002B3928-0x002B39AC
		public MissingFieldException(string message); // 0x002B39EC-0x002B3A14
		protected MissingFieldException(SerializationInfo info, StreamingContext context); // 0x002B3A14-0x002B3A2C
		public MissingFieldException(string className, string fieldName); // 0x002B3F30-0x002B3F54
	}

	[Serializable]
	[ComVisible] // 0x0013AA08-0x0013AA1C
	public class MissingMemberException : MemberAccessException, ISerializable // TypeDefIndex: 246
	{
		// Fields
		protected string ClassName; // 0x44
		protected string MemberName; // 0x48
		protected byte[] Signature; // 0x4C
	
		// Properties
		public override string Message { get; } // 0x002B3DA4-0x002B3F2C 
	
		// Constructors
		public MissingMemberException(); // 0x002B3F54-0x002B3FF0
		public MissingMemberException(string message); // 0x002B39AC-0x002B39EC
		protected MissingMemberException(SerializationInfo info, StreamingContext context); // 0x002B3A2C-0x002B3C34
	
		// Methods
		internal static string FormatSignature(byte[] signature); // 0x002B3F2C-0x002B3F30
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x002B3FF0-0x002B41BC
	}

	[Serializable]
	[ComVisible] // 0x0013AA1C-0x0013AA30
	public class MissingMethodException : MissingMemberException, ISerializable // TypeDefIndex: 247
	{
		// Fields
		[NonSerialized]
		private string signature; // 0x50
	
		// Properties
		public override string Message { get; } // 0x002B4280-0x002B4398 
	
		// Constructors
		public MissingMethodException(); // 0x002B41BC-0x002B4240
		public MissingMethodException(string message); // 0x002B4240-0x002B4268
		protected MissingMethodException(SerializationInfo info, StreamingContext context); // 0x002B4268-0x002B4280
		public MissingMethodException(string className, string methodName); // 0x002B4398-0x002B43BC
		private MissingMethodException(string className, string methodName, string signature, string message); // 0x002B43BC-0x002B481C
	}

	[Serializable]
	[ComVisible] // 0x0013AA30-0x0013AA44
	public sealed class MulticastNotSupportedException : SystemException // TypeDefIndex: 248
	{
		// Constructors
		public MulticastNotSupportedException(); // 0x002B8C40-0x002B8CC8
		public MulticastNotSupportedException(string message); // 0x002B8CC8-0x002B8CF4
		internal MulticastNotSupportedException(SerializationInfo info, StreamingContext context); // 0x002B8CF4-0x002B8D14
	}

	[AttributeUsage] // 0x0013AA44-0x0013AA90
	[ComVisible] // 0x0013AA44-0x0013AA90
	public sealed class NonSerializedAttribute : Attribute // TypeDefIndex: 249
	{
		// Constructors
		public NonSerializedAttribute(); // 0x002B8D14-0x002B8D1C
	}

	[Serializable]
	[ComVisible] // 0x0013AA90-0x0013AAA4
	public class NotImplementedException : SystemException // TypeDefIndex: 250
	{
		// Constructors
		public NotImplementedException(); // 0x002B8D1C-0x002B8DA4
		public NotImplementedException(string message); // 0x002B8DA4-0x002B8DD0
		protected NotImplementedException(SerializationInfo info, StreamingContext context); // 0x002B8DD0-0x002B8DF0
	}

	[Serializable]
	[ComVisible] // 0x0013AAA4-0x0013AAB8
	public class NotSupportedException : SystemException // TypeDefIndex: 251
	{
		// Constructors
		public NotSupportedException(); // 0x002B2ED4-0x002B2F5C
		public NotSupportedException(string message); // 0x002AB564-0x002AB590
		protected NotSupportedException(SerializationInfo info, StreamingContext context); // 0x002B8DF0-0x002B8E10
	}

	[Serializable]
	[ComVisible] // 0x0013AAB8-0x0013AACC
	public class NullReferenceException : SystemException // TypeDefIndex: 252
	{
		// Constructors
		public NullReferenceException(); // 0x002B8F54-0x002B8FDC
		public NullReferenceException(string message); // 0x002B8FDC-0x002B9008
		protected NullReferenceException(SerializationInfo info, StreamingContext context); // 0x002B9008-0x002B9028
	}

	[FriendAccessAllowed] // 0x0013AACC-0x0013AADC
	internal class Number // TypeDefIndex: 253
	{
		// Nested types
		[FriendAccessAllowed] // 0x0013AADC-0x0013AAEC
		internal struct NumberBuffer // TypeDefIndex: 254
		{
			// Fields
			public static readonly int NumberBufferBytes; // 0x00
			private unsafe byte* baseAddress; // 0x00
			public unsafe char* digits; // 0x04
			public int precision; // 0x08
			public int scale; // 0x0C
			public bool sign; // 0x10
	
			// Constructors
			public unsafe NumberBuffer(byte* stackBuffer); // 0x002BBE44-0x002BBE60
			static NumberBuffer(); // 0x002BBE84-0x002BBEEC
	
			// Methods
			public unsafe byte* PackForNative(); // 0x002BBE60-0x002BBE84
		}
	
		// Methods
		public static unsafe bool NumberBufferToDecimal(byte* number, ref decimal value); // 0x002B9224-0x002B9228
		internal static unsafe bool NumberBufferToDouble(byte* number, ref double value); // 0x002B9228-0x002B922C
		public static string FormatDecimal(decimal value, string format, NumberFormatInfo info); // 0x002B922C-0x002B92D8
		public static string FormatDouble(double value, string format, NumberFormatInfo info); // 0x002B9404-0x002B94A4
		public static string FormatInt32(int value, string format, NumberFormatInfo info); // 0x002ADD88-0x002ADE18
		public static string FormatUInt32(uint value, string format, NumberFormatInfo info); // 0x002ADF30-0x002ADFC0
		public static string FormatInt64(long value, string format, NumberFormatInfo info); // 0x002AFEB0-0x002AFF50
		public static string FormatUInt64(ulong value, string format, NumberFormatInfo info); // 0x002B99A4-0x002B9A44
		public static string FormatSingle(float value, string format, NumberFormatInfo info); // 0x002B9B5C-0x002B9BEC
		private static bool HexNumberToInt32(ref NumberBuffer number, ref int value); // 0x002B9DB0-0x002B9DE0
		private static bool HexNumberToInt64(ref NumberBuffer number, ref long value); // 0x002B9E90-0x002B9EC4
		private static bool HexNumberToUInt32(ref NumberBuffer number, ref uint value); // 0x002B9DE0-0x002B9E90
		private static bool HexNumberToUInt64(ref NumberBuffer number, ref ulong value); // 0x002B9EC4-0x002B9F8C
		private static bool IsWhite(char ch); // 0x002B9F8C-0x002B9FB0
		private static bool NumberToInt32(ref NumberBuffer number, ref int value); // 0x002B9FB0-0x002BA05C
		private static bool NumberToInt64(ref NumberBuffer number, ref long value); // 0x002BA05C-0x002BA12C
		private static bool NumberToUInt32(ref NumberBuffer number, ref uint value); // 0x002BA12C-0x002BA1CC
		private static bool NumberToUInt64(ref NumberBuffer number, ref ulong value); // 0x002BA1CC-0x002BA290
		private static unsafe char* MatchChars(char* p, string str); // 0x002BA290-0x002BA2FC
		private static unsafe char* MatchChars(char* p, char* str); // 0x002BA2FC-0x002BA340
		internal static decimal ParseDecimal(string value, NumberStyles options, NumberFormatInfo numfmt); // 0x002BA340-0x002BA504
		internal static double ParseDouble(string value, NumberStyles options, NumberFormatInfo numfmt); // 0x002BA690-0x002BAA10
		internal static int ParseInt32(string s, NumberStyles style, NumberFormatInfo info); // 0x002AE24C-0x002AE458
		internal static long ParseInt64(string value, NumberStyles options, NumberFormatInfo numfmt); // 0x002B0094-0x002B02B8
		private static unsafe bool ParseNumber(ref char* str, NumberStyles options, ref NumberBuffer number, StringBuilder sb, NumberFormatInfo numfmt, bool parseDecimal); // 0x002BAA34-0x002BB224
		internal static float ParseSingle(string value, NumberStyles options, NumberFormatInfo numfmt); // 0x002BB224-0x002BB600
		internal static uint ParseUInt32(string value, NumberStyles options, NumberFormatInfo numfmt); // 0x002BB600-0x002BB7EC
		internal static ulong ParseUInt64(string value, NumberStyles options, NumberFormatInfo numfmt); // 0x002BB7EC-0x002BB9E4
		private static void StringToNumber(string str, NumberStyles options, ref NumberBuffer number, NumberFormatInfo info, bool parseDecimal); // 0x002BA504-0x002BA690
		private static bool TrailingZeros(string s, int index); // 0x002BB9E4-0x002BBA58
		internal static bool TryParseInt32(string s, NumberStyles style, NumberFormatInfo info, out int result); // 0x002AF1A8-0x002AF308
		internal static bool TryParseInt64(string s, NumberStyles style, NumberFormatInfo info, out long result); // 0x002B035C-0x002B04CC
		internal static bool TryParseSingle(string value, NumberStyles options, NumberFormatInfo numfmt, out float result); // 0x002BBA58-0x002BBBDC
		internal static bool TryParseUInt32(string s, NumberStyles style, NumberFormatInfo info, out uint result); // 0x002BBBDC-0x002BBD28
		internal static bool TryStringToNumber(string str, NumberStyles options, ref NumberBuffer number, NumberFormatInfo numfmt, bool parseDecimal); // 0x002BAA10-0x002BAA34
		[FriendAccessAllowed] // 0x00143F48-0x00143F58
		internal static bool TryStringToNumber(string str, NumberStyles options, ref NumberBuffer number, StringBuilder sb, NumberFormatInfo numfmt, bool parseDecimal); // 0x002BBD28-0x002BBE44
	}

	[Serializable]
	[ComVisible] // 0x0013AAEC-0x0013AB00
	public class ObjectDisposedException : InvalidOperationException // TypeDefIndex: 255
	{
		// Fields
		private string objectName; // 0x44
	
		// Properties
		public override string Message { get; } // 0x00745C30-0x00745D74 
		public string ObjectName { get; } // 0x00745D74-0x00745E30 
	
		// Constructors
		private ObjectDisposedException(); // 0x00745AD8-0x00745B68
		public ObjectDisposedException(string objectName); // 0x00745BA0-0x00745C30
		public ObjectDisposedException(string objectName, string message); // 0x00745B68-0x00745BA0
		protected ObjectDisposedException(SerializationInfo info, StreamingContext context); // 0x00745E30-0x00745EDC
	
		// Methods
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00745EDC-0x00745FE8
	}

	[Serializable]
	[AttributeUsage] // 0x0013AB00-0x0013AB4C
	[ComVisible] // 0x0013AB00-0x0013AB4C
	public sealed class ObsoleteAttribute : Attribute // TypeDefIndex: 256
	{
		// Fields
		private string _message; // 0x08
		private bool _error; // 0x0C
	
		// Constructors
		public ObsoleteAttribute(); // 0x00745FE8-0x0074600C
		public ObsoleteAttribute(string message); // 0x0074600C-0x00746034
		public ObsoleteAttribute(string message, bool error); // 0x00746034-0x0074605C
	}

	[Serializable]
	[ComVisible] // 0x0013AB4C-0x0013AB60
	public class OperationCanceledException : SystemException // TypeDefIndex: 257
	{
		// Fields
		[NonSerialized]
		private CancellationToken _cancellationToken; // 0x44
	
		// Properties
		public CancellationToken CancellationToken { get; private set; } // 0x00746794-0x0074679C 0x0074679C-0x007467A4
	
		// Constructors
		public OperationCanceledException(); // 0x007467A4-0x0074682C
		public OperationCanceledException(string message); // 0x0074682C-0x00746858
		public OperationCanceledException(string message, CancellationToken token); // 0x00746858-0x0074688C
		protected OperationCanceledException(SerializationInfo info, StreamingContext context); // 0x0074688C-0x007468AC
	}

	[Serializable]
	[ComVisible] // 0x0013AB60-0x0013AB74
	public class OutOfMemoryException : SystemException // TypeDefIndex: 258
	{
		// Constructors
		public OutOfMemoryException(); // 0x00746C60-0x00746D08
		public OutOfMemoryException(string message); // 0x00746D08-0x00746D34
		protected OutOfMemoryException(SerializationInfo info, StreamingContext context); // 0x00746D34-0x00746D54
	}

	[Serializable]
	[ComVisible] // 0x0013AB74-0x0013AB88
	public class OverflowException : ArithmeticException // TypeDefIndex: 259
	{
		// Constructors
		public OverflowException(); // 0x00746D54-0x00746DDC
		public OverflowException(string message); // 0x00746DDC-0x00746E08
		public OverflowException(string message, Exception innerException); // 0x00746E08-0x00746E34
		protected OverflowException(SerializationInfo info, StreamingContext context); // 0x00746E34-0x00746E54
	}

	[AttributeUsage] // 0x0013AB88-0x0013ABE4
	[ComVisible] // 0x0013AB88-0x0013ABE4
	public sealed class ParamArrayAttribute : Attribute // TypeDefIndex: 260
	{
		// Constructors
		public ParamArrayAttribute(); // 0x00746E54-0x00746E5C
	}

	internal struct ParamsArray // TypeDefIndex: 261
	{
		// Fields
		private static readonly object[] oneArgArray; // 0x00
		private static readonly object[] twoArgArray; // 0x04
		private static readonly object[] threeArgArray; // 0x08
		private readonly object arg0; // 0x00
		private readonly object arg1; // 0x04
		private readonly object arg2; // 0x08
		private readonly object[] args; // 0x0C
	
		// Properties
		public int Length { get; } // 0x00748F8C-0x0074902C 
		public object this[int index] { get => default; } // 0x0074902C-0x00749040 
	
		// Constructors
		public ParamsArray(object arg0); // 0x00748D28-0x00748DDC
		public ParamsArray(object arg0, object arg1); // 0x00748DDC-0x00748E90
		public ParamsArray(object arg0, object arg1, object arg2); // 0x00748E90-0x00748F60
		public ParamsArray(object[] args); // 0x00748F60-0x00748F8C
		static ParamsArray(); // 0x00749048-0x007490F0
	
		// Methods
		private object GetAtSlow(int index); // 0x00749040-0x00749048
	}

	[Serializable]
	[ComVisible] // 0x0013AC18-0x0013AC2C
	public class PlatformNotSupportedException : NotSupportedException // TypeDefIndex: 262
	{
		// Constructors
		public PlatformNotSupportedException(); // 0x0074A870-0x0074A8F8
		protected PlatformNotSupportedException(SerializationInfo info, StreamingContext context); // 0x0074A8F8-0x0074A918
	}

	[Serializable]
	[ComVisible] // 0x0013AC2C-0x0013AC40
	public class Random // TypeDefIndex: 263
	{
		// Fields
		private int inext; // 0x08
		private int inextp; // 0x0C
		private int[] SeedArray; // 0x10
	
		// Constructors
		public Random(); // 0x00745A04-0x00745A28
		public Random(int Seed); // 0x0074AA58-0x0074AD60
	
		// Methods
		protected virtual double Sample(); // 0x0074AD60-0x0074AD90
		private int InternalSample(); // 0x0074AD90-0x0074AE90
		private double GetSampleForLargeRange(); // 0x0074AE90-0x0074AEE8
		public virtual int Next(int minValue, int maxValue); // 0x0074AEE8-0x0074B0C0
		public virtual int Next(int maxValue); // 0x0074B0C0-0x0074B1FC
		public virtual void NextBytes(byte[] buffer); // 0x0074B1FC-0x0074B2FC
	}

	[Serializable]
	[ComVisible] // 0x0013AC40-0x0013AC54
	public class RankException : SystemException // TypeDefIndex: 264
	{
		// Constructors
		public RankException(); // 0x0074B2FC-0x0074B384
		public RankException(string message); // 0x0074B384-0x0074B3B0
		protected RankException(SerializationInfo info, StreamingContext context); // 0x0074B3B0-0x0074B3D0
	}

	internal enum TypeNameFormatFlags // TypeDefIndex: 265
	{
		FormatBasic = 0,
		FormatNamespace = 1,
		FormatFullInst = 2,
		FormatAssembly = 4,
		FormatSignature = 8,
		FormatNoVersion = 16,
		FormatAngleBrackets = 64,
		FormatStubInfo = 128,
		FormatGenericParam = 256,
		FormatSerialization = 259
	}

	internal enum TypeNameKind // TypeDefIndex: 266
	{
		Name = 0,
		ToString = 1,
		SerializationName = 2,
		FullName = 3
	}

	[Serializable]
	internal class RuntimeType : System.Reflection.TypeInfo, ISerializable, ICloneable // TypeDefIndex: 267
	{
		// Fields
		internal static readonly RuntimeType ValueType; // 0x00
		internal static readonly RuntimeType EnumType; // 0x04
		private static readonly RuntimeType ObjectType; // 0x08
		private static readonly RuntimeType StringType; // 0x0C
		private static readonly RuntimeType DelegateType; // 0x10
		private static Type[] s_SICtorParamTypes; // 0x14
		private const BindingFlags MemberBindingMask = BindingFlags.Default | BindingFlags.IgnoreCase | BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy; // Metadata: 0x00203884
		private const BindingFlags InvocationMask = BindingFlags.Default | BindingFlags.InvokeMethod | BindingFlags.CreateInstance | BindingFlags.GetField | BindingFlags.SetField | BindingFlags.GetProperty | BindingFlags.SetProperty | BindingFlags.PutDispProperty | BindingFlags.PutRefDispProperty; // Metadata: 0x00203888
		private const BindingFlags BinderNonCreateInstance = BindingFlags.Default | BindingFlags.InvokeMethod | BindingFlags.GetField | BindingFlags.SetField | BindingFlags.GetProperty | BindingFlags.SetProperty; // Metadata: 0x0020388C
		private const BindingFlags BinderGetSetProperty = BindingFlags.Default | BindingFlags.GetProperty | BindingFlags.SetProperty; // Metadata: 0x00203890
		private const BindingFlags BinderSetInvokeProperty = BindingFlags.Default | BindingFlags.InvokeMethod | BindingFlags.SetProperty; // Metadata: 0x00203894
		private const BindingFlags BinderGetSetField = BindingFlags.Default | BindingFlags.GetField | BindingFlags.SetField; // Metadata: 0x00203898
		private const BindingFlags BinderSetInvokeField = BindingFlags.Default | BindingFlags.InvokeMethod | BindingFlags.SetField; // Metadata: 0x0020389C
		private const BindingFlags BinderNonFieldGetSet = BindingFlags.Default | BindingFlags.InvokeMethod | BindingFlags.CreateInstance | BindingFlags.GetProperty | BindingFlags.SetProperty | BindingFlags.PutDispProperty | BindingFlags.PutRefDispProperty | BindingFlags.ExactBinding | BindingFlags.SuppressChangeType | BindingFlags.OptionalParamBinding; // Metadata: 0x002038A0
		private const BindingFlags ClassicBindingMask = BindingFlags.Default | BindingFlags.InvokeMethod | BindingFlags.GetProperty | BindingFlags.SetProperty | BindingFlags.PutDispProperty | BindingFlags.PutRefDispProperty; // Metadata: 0x002038A4
		private static RuntimeType s_typedRef; // 0x18
		[NonSerialized]
		private MonoTypeInfo type_info; // 0x0C
		internal object GenericCache; // 0x10
		private RuntimeConstructorInfo m_serializationCtor; // 0x14
	
		// Properties
		public override Module Module { get; } // 0x0040ECCC-0x0040ECD0 
		public override Assembly Assembly { get; } // 0x0040ECD8-0x0040ECDC 
		public override RuntimeTypeHandle TypeHandle { get; } // 0x0040ECE4-0x0040ED34 
		public override Type BaseType { get; } // 0x0040F11C-0x0040F120 
		public override Type UnderlyingSystemType { get; } // 0x0040F128-0x0040F12C 
		public override bool IsEnum { get; } // 0x0040F398-0x0040F440 
		public override GenericParameterAttributes GenericParameterAttributes { get; } // 0x0040F480-0x0040F554 
		internal override bool IsSzArray { get; } // 0x0040F598-0x0040F59C 
		public override bool IsGenericTypeDefinition { get; } // 0x00410CF8-0x00410CFC 
		public override bool IsGenericParameter { get; } // 0x00410D00-0x00410D04 
		public override int GenericParameterPosition { get; } // 0x00410D04-0x00410DD8 
		public override bool IsGenericType { get; } // 0x00410EB4-0x00410EB8 
		public override MemberTypes MemberType { get; } // 0x004134A8-0x004134E8 
		public override Type ReflectedType { get; } // 0x004134E8-0x004134F8 
		public override int MetadataToken { get; } // 0x004134F8-0x004134FC 
		public override bool ContainsGenericParameters { get; } // 0x00415E0C-0x00415F40 
		public override MethodBase DeclaringMethod { get; } // 0x00416398-0x0041639C 
		public override string AssemblyQualifiedName { get; } // 0x004163B4-0x004163C0 
		public override Type DeclaringType { get; } // 0x004163C0-0x004163C4 
		public override string Name { get; } // 0x004163C4-0x004163C8 
		public override string Namespace { get; } // 0x004163C8-0x004163CC 
		public override string FullName { get; } // 0x004164F4-0x00416618 
	
		// Nested types
		internal enum MemberListType // TypeDefIndex: 268
		{
			All = 0,
			CaseSensitive = 1,
			CaseInsensitive = 2,
			HandleToInfo = 3
		}
	
		private struct ListBuilder<T> // TypeDefIndex: 269
			where T : class
		{
			// Fields
			private T[] _items;
			private T _item;
			private int _count;
			private int _capacity;
	
			// Properties
			public T this[int index] { get => default; }
			public int Count { get; }
	
			// Constructors
			public ListBuilder(int capacity);
	
			// Methods
			public T[] ToArray();
			public void CopyTo(object[] array, int index);
			public void Add(T item);
		}
	
		// Constructors
		internal RuntimeType(); // 0x0040A97C-0x0040AA14
		static RuntimeType(); // 0x00416618-0x00416AD8
	
		// Methods
		private static void ThrowIfTypeNeverValidGenericArgument(RuntimeType type); // 0x004097E8-0x004099A8
		internal static void SanityCheckGenericArguments(RuntimeType[] genericArguments, RuntimeType[] genericParamters); // 0x004099A8-0x00409C7C
		private static void SplitName(string fullname, out string name, out string ns); // 0x00409C7C-0x00409D98
		private static void FilterHelper(BindingFlags bindingFlags, ref string name, bool allowPrefixLookup, out bool prefixLookup, out bool ignoreCase, out MemberListType listType); // 0x00409D98-0x00409F30
		private static void FilterHelper(BindingFlags bindingFlags, ref string name, out bool ignoreCase, out MemberListType listType); // 0x00409F30-0x00409FE0
		private static bool FilterApplyPrefixLookup(MemberInfo memberInfo, string name, bool ignoreCase); // 0x00409FE0-0x0040A084
		private static bool FilterApplyBase(MemberInfo memberInfo, BindingFlags bindingFlags, bool isPublic, bool isNonProtectedInternal, bool isStatic, string name, bool prefixLookup); // 0x0040A084-0x0040A2FC
		private static bool FilterApplyType(Type type, BindingFlags bindingFlags, string name, bool prefixLookup, string ns); // 0x0040A2FC-0x0040A484
		private static bool FilterApplyMethodInfo(RuntimeMethodInfo method, BindingFlags bindingFlags, CallingConventions callConv, Type[] argumentTypes); // 0x0040A484-0x0040A540
		private static bool FilterApplyConstructorInfo(RuntimeConstructorInfo constructor, BindingFlags bindingFlags, CallingConventions callConv, Type[] argumentTypes); // 0x0040A8C0-0x0040A97C
		private static bool FilterApplyMethodBase(MethodBase methodBase, BindingFlags methodFlags, BindingFlags bindingFlags, CallingConventions callConv, Type[] argumentTypes); // 0x0040A540-0x0040A8C0
		internal bool IsSpecialSerializableType(); // 0x0040AA14-0x0040AB44
		private ListBuilder<MethodInfo> GetMethodCandidates(string name, BindingFlags bindingAttr, CallingConventions callConv, Type[] types, bool allowPrefixLookup); // 0x0040AE54-0x0040B098
		private ListBuilder<ConstructorInfo> GetConstructorCandidates(string name, BindingFlags bindingAttr, CallingConventions callConv, Type[] types, bool allowPrefixLookup); // 0x0040B434-0x0040B750
		private ListBuilder<PropertyInfo> GetPropertyCandidates(string name, BindingFlags bindingAttr, Type[] types, bool allowPrefixLookup); // 0x0040BA3C-0x0040BCF4
		private ListBuilder<EventInfo> GetEventCandidates(string name, BindingFlags bindingAttr, bool allowPrefixLookup); // 0x0040C0A8-0x0040C2F8
		private ListBuilder<FieldInfo> GetFieldCandidates(string name, BindingFlags bindingAttr, bool allowPrefixLookup); // 0x0040C6A4-0x0040C8F4
		private ListBuilder<Type> GetNestedTypeCandidates(string fullname, BindingFlags bindingAttr, bool allowPrefixLookup); // 0x0040CC9C-0x0040CEA8
		public override MethodInfo[] GetMethods(BindingFlags bindingAttr); // 0x0040D2F8-0x0040D39C
		[ComVisible] // 0x00143F58-0x00143F6C
		public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr); // 0x0040D39C-0x0040D44C
		public override FieldInfo[] GetFields(BindingFlags bindingAttr); // 0x0040D44C-0x0040D4E4
		protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConv, Type[] types, ParameterModifier[] modifiers); // 0x0040D4E4-0x0040D868
		protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x0040D868-0x0040DB14
		protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x0040DB14-0x0040DE28
		public override EventInfo GetEvent(string name, BindingFlags bindingAttr); // 0x0040DE28-0x0040E054
		public override FieldInfo GetField(string name, BindingFlags bindingAttr); // 0x0040E054-0x0040E4E4
		public override Type GetNestedType(string fullname, BindingFlags bindingAttr); // 0x0040E4E4-0x0040E758
		public override MemberInfo[] GetMember(string name, MemberTypes type, BindingFlags bindingAttr); // 0x0040E758-0x0040ECCC
		internal RuntimeModule GetRuntimeModule(); // 0x0040ECD0-0x0040ECD4
		internal RuntimeAssembly GetRuntimeAssembly(); // 0x0040ECDC-0x0040ECE0
		public override bool IsInstanceOfType(object o); // 0x0040ED34-0x0040ED38
		[ComVisible] // 0x00143F6C-0x00143F80
		public override bool IsSubclassOf(Type type); // 0x0040ED3C-0x0040EF40
		public override bool IsAssignableFrom(Type c); // 0x0040EF40-0x0040F040
		public override bool IsEquivalentTo(Type other); // 0x0040F050-0x0040F114
		private RuntimeType GetBaseType(); // 0x0040AB44-0x0040AE40
		protected override TypeAttributes GetAttributeFlagsImpl(); // 0x0040F12C-0x0040F130
		protected override bool IsContextfulImpl(); // 0x0040F134-0x0040F138
		protected override bool IsByRefImpl(); // 0x0040F1F8-0x0040F1FC
		protected override bool IsPrimitiveImpl(); // 0x0040F200-0x0040F204
		protected override bool IsPointerImpl(); // 0x0040F208-0x0040F20C
		protected override bool IsCOMObjectImpl(); // 0x0040F210-0x0040F214
		protected override bool IsValueTypeImpl(); // 0x0040F224-0x0040F398
		protected override bool HasElementTypeImpl(); // 0x0040F440-0x0040F444
		protected override bool IsArrayImpl(); // 0x0040F5EC-0x0040F5F0
		public override int GetArrayRank(); // 0x0040F5F4-0x0040F6C8
		public override Type GetElementType(); // 0x0040F6CC-0x0040F6D0
		public override string[] GetEnumNames(); // 0x0040F6D4-0x0040F844
		public override Array GetEnumValues(); // 0x0040F844-0x0040FA90
		public override Type GetEnumUnderlyingType(); // 0x0040FA90-0x0040FBA8
		public override bool IsEnumDefined(object value); // 0x0040FBA8-0x00410364
		public override string GetEnumName(object value); // 0x00410364-0x004105F4
		internal RuntimeType[] GetGenericArgumentsInternal(); // 0x004105F4-0x004106EC
		public override Type[] GetGenericArguments(); // 0x004106F0-0x00410794
		public override Type MakeGenericType(params /* 0x001461E8-0x001461F8 */ Type[] instantiation); // 0x00410794-0x00410CF4
		public override Type GetGenericTypeDefinition(); // 0x00410DDC-0x00410EB0
		[DebuggerHidden] // 0x00143F80-0x00143FB0
		[DebuggerStepThrough] // 0x00143F80-0x00143FB0
		public override object InvokeMember(string name, BindingFlags bindingFlags, Binder binder, object target, object[] providedArgs, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParams); // 0x00410EBC-0x00412A50
		public override bool Equals(object obj); // 0x00412C30-0x00412C44
		public static bool operator ==(RuntimeType left, RuntimeType right); // 0x00403924-0x00403938
		public static bool operator !=(RuntimeType left, RuntimeType right); // 0x0040AE40-0x0040AE54
		public object Clone(); // 0x00412C44-0x00412C48
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00412C48-0x00412D08
		public override object[] GetCustomAttributes(bool inherit); // 0x00412D08-0x00412DDC
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00412DDC-0x00412FC0
		public override bool IsDefined(Type attributeType, bool inherit); // 0x00412FC0-0x004131A4
		public override IList<CustomAttributeData> GetCustomAttributesData(); // 0x004131A4-0x004131AC
		internal override string FormatTypeName(bool serialization); // 0x004131AC-0x004133F8
		private void CreateInstanceCheckThis(); // 0x00413500-0x004137E4
		internal object CreateInstanceImpl(BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes, ref StackCrawlMark stackMark); // 0x004137E4-0x004143FC
		[DebuggerHidden] // 0x00143FB0-0x00143FE0
		[DebuggerStepThrough] // 0x00143FB0-0x00143FE0
		internal object CreateInstanceDefaultCtor(bool publicOnly, bool skipCheckThis, bool fillCache, ref StackCrawlMark stackMark); // 0x00414404-0x00414544
		internal MonoCMethod GetDefaultConstructor(); // 0x00414570-0x004147AC
		private string GetDefaultMemberName(); // 0x00412A50-0x00412C30
		internal RuntimeConstructorInfo GetSerializationCtor(); // 0x00400E34-0x00401078
		internal object CreateInstanceSlow(bool publicOnly, bool skipCheckThis, bool fillCache, ref StackCrawlMark stackMark); // 0x00414544-0x00414570
		private object CreateInstanceMono(bool nonPublic); // 0x004147AC-0x00414B74
		internal object CheckValue(object value, Binder binder, CultureInfo culture, BindingFlags invokeAttr); // 0x00414B78-0x00414E04
		private object TryConvertToType(object value, ref bool failed); // 0x00414E04-0x004150F4
		private static object IsConvertibleToPrimitiveType(object value, Type targetType); // 0x004150F4-0x00415C0C
		private string GetCachedName(TypeNameKind kind); // 0x004133F8-0x004134A8
		private Type make_array_type(int rank); // 0x00415C0C-0x00415C10
		public override Type MakeArrayType(); // 0x00415C10-0x00415C18
		public override Type MakeArrayType(int rank); // 0x00415C18-0x00415CC4
		private Type make_byref_type(); // 0x00415CC4-0x00415CC8
		public override Type MakeByRefType(); // 0x00415CC8-0x00415D88
		private static Type MakePointerType(Type type); // 0x00415D88-0x00415D8C
		public override Type MakePointerType(); // 0x00415D8C-0x00415E0C
		public override Type[] GetGenericParameterConstraints(); // 0x00415F40-0x00416090
		internal static object CreateInstanceForAnotherGenericParameter(Type genericType, RuntimeType genericArgument); // 0x00416094-0x004162F8
		private static Type MakeGenericType(Type gt, Type[] types); // 0x00410CF4-0x00410CF8
		internal IntPtr GetMethodsByName_native(IntPtr namePtr, BindingFlags bindingAttr, bool ignoreCase); // 0x004162F8-0x004162FC
		internal RuntimeMethodInfo[] GetMethodsByName(string name, BindingFlags bindingAttr, bool ignoreCase, RuntimeType reflectedType); // 0x0040B098-0x0040B434
		private IntPtr GetPropertiesByName_native(IntPtr name, BindingFlags bindingAttr, bool icase); // 0x004162FC-0x00416300
		private IntPtr GetConstructors_native(BindingFlags bindingAttr); // 0x00416300-0x00416304
		private RuntimeConstructorInfo[] GetConstructors_internal(BindingFlags bindingAttr, RuntimeType reflectedType); // 0x0040B750-0x0040BA3C
		private RuntimePropertyInfo[] GetPropertiesByName(string name, BindingFlags bindingAttr, bool icase, RuntimeType reflectedType); // 0x0040BCF4-0x0040C0A8
		protected override TypeCode GetTypeCodeImpl(); // 0x00416304-0x00416384
		private static TypeCode GetTypeCodeImplInternal(Type type); // 0x00416384-0x00416388
		public override string ToString(); // 0x00416388-0x00416394
		private bool IsGenericCOMObjectImpl(); // 0x004143FC-0x00414404
		private static object CreateInstanceInternal(Type type); // 0x00414B74-0x00414B78
		internal string getFullName(bool full_name, bool assembly_qualified); // 0x00416394-0x00416398
		private Type[] GetGenericArgumentsInternal(bool runtimeArray); // 0x004106EC-0x004106F0
		private GenericParameterAttributes GetGenericParameterAttributes(); // 0x0040F554-0x0040F598
		private int GetGenericParameterPosition(); // 0x00410DD8-0x00410DDC
		private IntPtr GetEvents_native(IntPtr name, BindingFlags bindingAttr); // 0x0041639C-0x004163A0
		private IntPtr GetFields_native(IntPtr name, BindingFlags bindingAttr); // 0x004163A0-0x004163A4
		private RuntimeFieldInfo[] GetFields_internal(string name, BindingFlags bindingAttr, RuntimeType reflectedType); // 0x0040C8F4-0x0040CC9C
		private RuntimeEventInfo[] GetEvents_internal(string name, BindingFlags bindingAttr, RuntimeType reflectedType); // 0x0040C2F8-0x0040C6A4
		public override Type[] GetInterfaces(); // 0x004163A4-0x004163A8
		private IntPtr GetNestedTypes_native(IntPtr name, BindingFlags bindingAttr); // 0x004163A8-0x004163B4
		private RuntimeType[] GetNestedTypes_internal(string displayName, BindingFlags bindingAttr); // 0x0040CEA8-0x0040D2F8
		public override int GetHashCode(); // 0x004163CC-0x004164F4
	}

	[Serializable]
	internal class ReflectionOnlyType : RuntimeType // TypeDefIndex: 270
	{
		// Properties
		public override RuntimeTypeHandle TypeHandle { get; } // 0x002C474C-0x002C47F4 
	
		// Constructors
		private ReflectionOnlyType(); // 0x002C46C8-0x002C474C
	}

	[Serializable]
	[CLSCompliant] // 0x0013AC88-0x0013ACC0
	[ComVisible] // 0x0013AC88-0x0013ACC0
	public struct SByte : IComparable, IFormattable, IConvertible, IComparable<sbyte>, IEquatable<sbyte> // TypeDefIndex: 271
	{
		// Fields
		private sbyte m_value; // 0x00
		public const sbyte MaxValue = 127; // Metadata: 0x002038B8
		public const sbyte MinValue = 128; // Metadata: 0x002038B9
	
		// Methods
		public int CompareTo(object obj); // 0x004171C4-0x004171CC
		public int CompareTo(sbyte value); // 0x004171CC-0x0041726C
		public override bool Equals(object obj); // 0x0041726C-0x00417274
		public bool Equals(sbyte obj); // 0x00417274-0x0041728C
		public override int GetHashCode(); // 0x0041728C-0x00417298
		public override string ToString(); // 0x00417298-0x004172C4
		public string ToString(IFormatProvider provider); // 0x004172C4-0x00417390
		public string ToString(string format, IFormatProvider provider); // 0x00417390-0x004173C0
		private string ToString(string format, NumberFormatInfo info); // 0x004173C0-0x004173C8
		[CLSCompliant] // 0x00143FE0-0x00143FF4
		public static sbyte Parse(string s, IFormatProvider provider); // 0x004173C8-0x004173F4
		[CLSCompliant] // 0x00143FF4-0x00144008
		public static sbyte Parse(string s, NumberStyles style, IFormatProvider provider); // 0x00417610-0x00417650
		private static sbyte Parse(string s, NumberStyles style, NumberFormatInfo info); // 0x004173F4-0x00417610
		public TypeCode GetTypeCode(); // 0x00417650-0x004176E0
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x004176E0-0x00417770
		char IConvertible.ToChar(IFormatProvider provider); // 0x00417770-0x00417778
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x00417778-0x00417808
		byte IConvertible.ToByte(IFormatProvider provider); // 0x00417808-0x00417898
		short IConvertible.ToInt16(IFormatProvider provider); // 0x00417898-0x00417928
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x00417928-0x00417930
		int IConvertible.ToInt32(IFormatProvider provider); // 0x00417930-0x004179C0
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x004179C0-0x00417A50
		long IConvertible.ToInt64(IFormatProvider provider); // 0x00417A50-0x00417AE0
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x00417AE0-0x00417B70
		float IConvertible.ToSingle(IFormatProvider provider); // 0x00417B70-0x00417C00
		double IConvertible.ToDouble(IFormatProvider provider); // 0x00417C00-0x00417C98
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x00417C98-0x00417DD8
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x00417DD8-0x00417EA8
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x00417EA8-0x00417EB0
	}

	[AttributeUsage] // 0x0013ACC0-0x0013AD0C
	[ComVisible] // 0x0013ACC0-0x0013AD0C
	public sealed class SerializableAttribute : Attribute // TypeDefIndex: 272
	{
		// Constructors
		public SerializableAttribute(); // 0x005B182C-0x005B1834
	}

	internal sealed class SharedStatics // TypeDefIndex: 273
	{
		// Fields
		private static readonly SharedStatics _sharedStatics; // 0x00
		private Tokenizer.StringMaker _maker; // 0x08
	
		// Constructors
		private SharedStatics(); // 0x005B1834-0x005B183C
		static SharedStatics(); // 0x005B183C-0x005B18B0
	
		// Methods
		public static Tokenizer.StringMaker GetSharedStringMaker(); // 0x005A9AE0-0x005A9D48
		public static void ReleaseSharedStringMaker(ref Tokenizer.StringMaker maker); // 0x005AA108-0x005AA298
	}

	[Serializable]
	[ComVisible] // 0x0013AD0C-0x0013AD20
	public struct Single : IComparable, IFormattable, IConvertible, IComparable<float>, IEquatable<float> // TypeDefIndex: 274
	{
		// Fields
		internal float m_value; // 0x00
		public const float MinValue = -3.4028235E+38f; // Metadata: 0x002038BA
		public const float Epsilon = 1E-45f; // Metadata: 0x002038BE
		public const float MaxValue = 3.4028235E+38f; // Metadata: 0x002038C2
		public const float PositiveInfinity = 1F / 0F; // Metadata: 0x002038C6
		public const float NegativeInfinity = -1F / 0F; // Metadata: 0x002038CA
		public const float NaN = 0F / 0F; // Metadata: 0x002038CE
	
		// Methods
		public static bool IsInfinity(float f); // 0x005B18B0-0x005B18CC
		[ReliabilityContract] // 0x00144008-0x00144020
		public static bool IsNaN(float f); // 0x005B18CC-0x005B1A34
		public int CompareTo(object value); // 0x005B1A34-0x005B1AA4
		public int CompareTo(float value); // 0x005B1AA4-0x005B1BDC
		public override bool Equals(object obj); // 0x005B1BDC-0x005B1C30
		public bool Equals(float obj); // 0x005B1C30-0x005B1C94
		public override int GetHashCode(); // 0x005B1C94-0x005B1CD8
		public override string ToString(); // 0x005B1CD8-0x005B1D34
		public string ToString(IFormatProvider provider); // 0x005B1D34-0x005B1D94
		public string ToString(string format); // 0x005B1D94-0x005B1DF8
		public string ToString(string format, IFormatProvider provider); // 0x005B1DF8-0x005B1E2C
		public static float Parse(string s); // 0x005B1E2C-0x005B1E58
		public static float Parse(string s, IFormatProvider provider); // 0x005B1E60-0x005B1E90
		public static float Parse(string s, NumberStyles style, IFormatProvider provider); // 0x005B1E90-0x005B1ED4
		private static float Parse(string s, NumberStyles style, NumberFormatInfo info); // 0x005B1E58-0x005B1E60
		public static bool TryParse(string s, out float result); // 0x005B1ED4-0x005B1F0C
		private static bool TryParse(string s, NumberStyles style, NumberFormatInfo info, out float result); // 0x005B1F0C-0x005B2070
		public TypeCode GetTypeCode(); // 0x005B2078-0x005B2110
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x005B2110-0x005B2244
		char IConvertible.ToChar(IFormatProvider provider); // 0x005B2244-0x005B22E4
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x005B22E4-0x005B237C
		byte IConvertible.ToByte(IFormatProvider provider); // 0x005B237C-0x005B2414
		short IConvertible.ToInt16(IFormatProvider provider); // 0x005B2414-0x005B24AC
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x005B24AC-0x005B2544
		int IConvertible.ToInt32(IFormatProvider provider); // 0x005B2544-0x005B25DC
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x005B25DC-0x005B2674
		long IConvertible.ToInt64(IFormatProvider provider); // 0x005B2674-0x005B270C
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x005B270C-0x005B2714
		float IConvertible.ToSingle(IFormatProvider provider); // 0x005B2714-0x005B27AC
		double IConvertible.ToDouble(IFormatProvider provider); // 0x005B27AC-0x005B284C
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x005B284C-0x005B298C
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x005B298C-0x005B2A5C
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x005B2A5C-0x005B2A64
	}

	[Serializable]
	[ComVisible] // 0x0013AD20-0x0013AD34
	public sealed class StackOverflowException : SystemException // TypeDefIndex: 275
	{
		// Constructors
		public StackOverflowException(); // 0x005B2A64-0x005B2AEC
		public StackOverflowException(string message); // 0x005B2AEC-0x005B2B18
		internal StackOverflowException(SerializationInfo info, StreamingContext context); // 0x005B2B18-0x005B2B38
	}

	[Serializable]
	[ComVisible] // 0x0013AD34-0x0013AD80
	public sealed class String : IComparable, ICloneable, IConvertible, IComparable<string>, IEnumerable<char>, IEquatable<string> // TypeDefIndex: 276
	{
		// Fields
		[NonSerialized]
		private int m_stringLength; // 0x08
		[NonSerialized]
		private char m_firstChar; // 0x0C
		private const int TrimHead = 0; // Metadata: 0x002038D2
		private const int TrimTail = 1; // Metadata: 0x002038D6
		private const int TrimBoth = 2; // Metadata: 0x002038DA
		public static readonly string Empty; // 0x00
		private const int charPtrAlignConst = 1; // Metadata: 0x002038DE
		private const int alignConst = 3; // Metadata: 0x002038E2
	
		// Properties
		public char Cthis[int index] { get => default; } // 0x005A6A0C-0x005A6AB8 
		public int Length { get; } // 0x005A6804-0x005A680C 
	
		// Constructors
		[CLSCompliant] // 0x001440C0-0x001440D4
		public unsafe String(char* value); // 0x005B5450-0x005B5454
		[CLSCompliant] // 0x001440D4-0x001440E8
		public unsafe String(char* value, int startIndex, int length); // 0x005B5454-0x005B5458
		[CLSCompliant] // 0x001440E8-0x001440FC
		public unsafe String(sbyte* value, int startIndex, int length, Encoding enc); // 0x005B5458-0x005B545C
		public String(char[] value, int startIndex, int length); // 0x005B5730-0x005B5734
		public String(char[] value); // 0x005B5734-0x005B5738
		public String(char c, int count); // 0x005B6088-0x005B608C
	
		// Methods
		public static string Join(string separator, params /* 0x001461F8-0x00146208 */ string[] value); // 0x005B2B38-0x005B2C04
		public static string Join(string separator, string[] value, int startIndex, int count); // 0x005B2C04-0x005B303C
		private static int CompareOrdinalIgnoreCaseHelper(string strA, string strB); // 0x005B3040-0x005B3170
		[ReliabilityContract] // 0x00144020-0x00144038
		private static bool EqualsHelper(string strA, string strB); // 0x005B3170-0x005B32F4
		private static int CompareOrdinalHelper(string strA, string strB); // 0x005B32F4-0x005B34F0
		[ReliabilityContract] // 0x00144038-0x00144050
		public override bool Equals(object obj); // 0x005B34F0-0x005B3604
		[ReliabilityContract] // 0x00144050-0x00144068
		public bool Equals(string value); // 0x005AD190-0x005AD268
		public bool Equals(string value, StringComparison comparisonType); // 0x005B3604-0x005B3A08
		public static bool Equals(string a, string b); // 0x005B3A54-0x005B3A90
		public static bool Equals(string a, string b, StringComparison comparisonType); // 0x005B3A90-0x005B3E98
		public static bool operator ==(string a, string b); // 0x005A8604-0x005A8608
		public static bool operator !=(string a, string b); // 0x005B3E98-0x005B3EAC
		public void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count); // 0x005B3EAC-0x005B4164
		public char[] ToCharArray(); // 0x005B4170-0x005B4210
		public static bool IsNullOrEmpty(string value); // 0x005B4210-0x005B4230
		public static bool IsNullOrWhiteSpace(string value); // 0x005B4230-0x005B4300
		[ReliabilityContract] // 0x00144068-0x00144080
		public override int GetHashCode(); // 0x005B4300-0x005B4378
		[ReliabilityContract] // 0x00144080-0x00144098
		internal int GetLegacyNonRandomizedHashCode(); // 0x005B4378-0x005B43F0
		public string[] Split(params /* 0x00146208-0x00146218 */ char[] separator); // 0x005B43F0-0x005B4410
		[ComVisible] // 0x00144098-0x001440AC
		public string[] Split(char[] separator, StringSplitOptions options); // 0x005B46DC-0x005B46FC
		[ComVisible] // 0x001440AC-0x001440C0
		internal string[] SplitInternal(char[] separator, int count, StringSplitOptions options); // 0x005B4410-0x005B46DC
		private string[] InternalSplitKeepEmptyEntries(int[] sepList, int[] lengthList, int numReplaces, int count); // 0x005B4DC0-0x005B50B8
		private string[] InternalSplitOmitEmptyEntries(int[] sepList, int[] lengthList, int numReplaces, int count); // 0x005B4978-0x005B4DC0
		private int MakeSeparatorList(char[] separator, ref int[] sepList); // 0x005B46FC-0x005B4978
		public string Substring(int startIndex); // 0x005B50B8-0x005B50C4
		public string Substring(int startIndex, int length); // 0x005A881C-0x005A8A80
		private string InternalSubString(int startIndex, int length); // 0x005B50C4-0x005B5114
		public string Trim(params /* 0x00146218-0x00146228 */ char[] trimChars); // 0x005B5114-0x005B5134
		public string TrimEnd(params /* 0x00146228-0x00146238 */ char[] trimChars); // 0x005B5430-0x005B5450
		internal static unsafe string CreateStringFromEncoding(byte* bytes, int byteLength, Encoding encoding); // 0x005B545C-0x005B5564
		public string Normalize(NormalizationForm normalizationForm); // 0x005B5564-0x005B5648
		internal static string FastAllocateString(int length); // 0x005B303C-0x005B3040
		private static void FillStringChecked(string dest, int destPos, string src); // 0x005B5648-0x005B5730
		internal static unsafe void wstrcpy(char* dmem, char* smem, int charCount); // 0x005B4164-0x005B4170
		private string CtorCharArray(char[] value); // 0x005B5738-0x005B5800
		private string CtorCharArrayStartLength(char[] value, int startIndex, int length); // 0x005B5800-0x005B5A84
		private static unsafe int wcslen(char* ptr); // 0x005B5A84-0x005B5B24
		private unsafe string CtorCharPtr(char* ptr); // 0x005B5B24-0x005B5D40
		private unsafe string CtorCharPtrStartLength(char* ptr, int startIndex, int length); // 0x005B5D40-0x005B6088
		public static int Compare(string strA, string strB); // 0x005B608C-0x005B6178
		public static int Compare(string strA, string strB, StringComparison comparisonType); // 0x005AFD94-0x005B0174
		public static int Compare(string strA, string strB, bool ignoreCase, CultureInfo culture); // 0x005B6178-0x005B6284
		public static int Compare(string strA, int indexA, string strB, int indexB, int length, CultureInfo culture, CompareOptions options); // 0x005B6284-0x005B63EC
		public static int Compare(string strA, int indexA, string strB, int indexB, int length, StringComparison comparisonType); // 0x005B0C94-0x005B1298
		public int CompareTo(object value); // 0x005B65F8-0x005B66E8
		public int CompareTo(string strB); // 0x005B66E8-0x005B67E8
		public static int CompareOrdinal(string strA, string strB); // 0x005B67E8-0x005B6828
		public static int CompareOrdinal(string strA, int indexA, string strB, int indexB, int length); // 0x005B6828-0x005B6880
		public bool Contains(string value); // 0x005B6880-0x005B68B8
		public bool EndsWith(string value); // 0x005B68DC-0x005B68E4
		[ComVisible] // 0x001440FC-0x00144110
		public bool EndsWith(string value, StringComparison comparisonType); // 0x005AD268-0x005AD63C
		internal bool EndsWith(char value); // 0x005B68E4-0x005B6920
		public int IndexOf(char value); // 0x005B6920-0x005B6940
		public int IndexOf(char value, int startIndex); // 0x005B6B08-0x005B6B28
		public int IndexOfAny(char[] anyOf); // 0x005ABE88-0x005ABEA8
		public int IndexOfAny(char[] anyOf, int startIndex); // 0x005B6C8C-0x005B6CAC
		public int IndexOf(string value); // 0x005A87CC-0x005A87F4
		public int IndexOf(string value, int startIndex); // 0x005A87F4-0x005A881C
		public int IndexOf(string value, StringComparison comparisonType); // 0x005B68B8-0x005B68DC
		public int IndexOf(string value, int startIndex, StringComparison comparisonType); // 0x005B6CAC-0x005B6CD0
		public int IndexOf(string value, int startIndex, int count, StringComparison comparisonType); // 0x005B6CD0-0x005B71C4
		public int LastIndexOf(char value); // 0x005B71C4-0x005B71E4
		public int LastIndexOf(char value, int startIndex); // 0x005B7398-0x005B73B4
		public int LastIndexOfAny(char[] anyOf); // 0x005B73B4-0x005B73D4
		public int LastIndexOfAny(char[] anyOf, int startIndex); // 0x005B75C0-0x005B75DC
		public int LastIndexOf(string value); // 0x005B75DC-0x005B7604
		public int LastIndexOf(string value, StringComparison comparisonType); // 0x005B7B5C-0x005B7B80
		public int LastIndexOf(string value, int startIndex, int count, StringComparison comparisonType); // 0x005B7604-0x005B7B5C
		public string PadLeft(int totalWidth, char paddingChar); // 0x005B7B80-0x005B7B9C
		public string PadRight(int totalWidth, char paddingChar); // 0x005B7D08-0x005B7D24
		public bool StartsWith(string value); // 0x005B7D24-0x005B7DE4
		[ComVisible] // 0x00144110-0x00144124
		public bool StartsWith(string value, StringComparison comparisonType); // 0x005B7DE4-0x005B81B8
		public string ToLower(); // 0x005B81B8-0x005B8244
		public string ToLower(CultureInfo culture); // 0x005B8244-0x005B8334
		public string ToLowerInvariant(); // 0x005B8334-0x005B83C0
		public string ToUpper(); // 0x005B83C0-0x005B844C
		public string ToUpper(CultureInfo culture); // 0x005B844C-0x005B853C
		public string ToUpperInvariant(); // 0x005B853C-0x005B85C8
		public override string ToString(); // 0x005B85C8-0x005B85CC
		public string ToString(IFormatProvider provider); // 0x005B85CC-0x005B85D0
		public object Clone(); // 0x005B85D0-0x005B85D4
		private static bool IsBOMWhitespace(char c); // 0x005B85D4-0x005B85DC
		public string Trim(); // 0x005B2070-0x005B2078
		private string TrimHelper(int trimType); // 0x005B5134-0x005B52AC
		private string TrimHelper(char[] trimChars, int trimType); // 0x005B52AC-0x005B5430
		private string CreateTrimmedString(int start, int end); // 0x005B85DC-0x005B8678
		public string Insert(int startIndex, string value); // 0x005B8678-0x005B881C
		public string Replace(char oldChar, char newChar); // 0x005B881C-0x005B8820
		public string Replace(string oldValue, string newValue); // 0x005B8900-0x005B89C4
		public string Remove(int startIndex, int count); // 0x005B8B0C-0x005B8D3C
		public static string Format(string format, object arg0); // 0x005A8780-0x005A87CC
		public static string Format(string format, object arg0, object arg1); // 0x005B17C0-0x005B180C
		public static string Format(string format, object arg0, object arg1, object arg2); // 0x005B8E70-0x005B8EC0
		public static string Format(string format, params /* 0x00146238-0x00146248 */ object[] args); // 0x005B8EC0-0x005B8FC0
		public static string Format(IFormatProvider provider, string format, object arg0); // 0x005B8FC0-0x005B9014
		public static string Format(IFormatProvider provider, string format, object arg0, object arg1); // 0x005B9014-0x005B906C
		public static string Format(IFormatProvider provider, string format, object arg0, object arg1, object arg2); // 0x005B906C-0x005B90D0
		public static string Format(IFormatProvider provider, string format, params /* 0x00146248-0x00146258 */ object[] args); // 0x005B90D0-0x005B91D4
		private static string FormatHelper(IFormatProvider provider, string format, ParamsArray args); // 0x005B8D3C-0x005B8E70
		public static string Copy(string str); // 0x005B91D4-0x005B92B8
		public static string Concat(object arg0); // 0x005B92B8-0x005B933C
		public static string Concat(object arg0, object arg1); // 0x005B933C-0x005B9424
		public static string Concat(object arg0, object arg1, object arg2); // 0x005B9424-0x005B955C
		public static string Concat(params /* 0x00146258-0x00146268 */ object[] args); // 0x005B955C-0x005B9830
		public static string Concat(string str0, string str1); // 0x005AB91C-0x005ABA38
		public static string Concat(string str0, string str1, string str2); // 0x005AABC8-0x005AAD0C
		public static string Concat(string str0, string str1, string str2, string str3); // 0x005B98E0-0x005B9A98
		private static string ConcatArray(string[] values, int totalLength); // 0x005B9830-0x005B98E0
		public static string Concat(params /* 0x00146268-0x00146278 */ string[] values); // 0x005B9A98-0x005B9CBC
		public TypeCode GetTypeCode(); // 0x005B9CBC-0x005B9CC4
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x005B9CC4-0x005B9D50
		char IConvertible.ToChar(IFormatProvider provider); // 0x005B9D50-0x005B9DDC
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x005B9DDC-0x005B9E68
		byte IConvertible.ToByte(IFormatProvider provider); // 0x005B9E68-0x005B9EF4
		short IConvertible.ToInt16(IFormatProvider provider); // 0x005B9EF4-0x005B9F80
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x005B9F80-0x005BA00C
		int IConvertible.ToInt32(IFormatProvider provider); // 0x005BA00C-0x005BA098
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x005BA098-0x005BA124
		long IConvertible.ToInt64(IFormatProvider provider); // 0x005BA124-0x005BA1B0
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x005BA1B0-0x005BA23C
		float IConvertible.ToSingle(IFormatProvider provider); // 0x005BA23C-0x005BA2C8
		double IConvertible.ToDouble(IFormatProvider provider); // 0x005BA2C8-0x005BA354
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x005BA354-0x005BA3E8
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x005BA3E8-0x005BA47C
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x005BA47C-0x005BA510
		IEnumerator<char> IEnumerable<char>.GetEnumerator(); // 0x005BA510-0x005BA584
		IEnumerator IEnumerable.GetEnumerator(); // 0x005BA584-0x005BA5F8
		internal static int CompareOrdinalUnchecked(string strA, int indexA, int lenA, string strB, int indexB, int lenB); // 0x005BA5F8-0x005BA7A8
		public int IndexOf(char value, int startIndex, int count); // 0x005B6940-0x005B6B08
		internal int IndexOfUnchecked(char value, int startIndex, int count); // 0x005BA7A8-0x005BA94C
		internal int IndexOfUnchecked(string value, int startIndex, int count); // 0x005BA94C-0x005BAA5C
		public int IndexOfAny(char[] anyOf, int startIndex, int count); // 0x005B6B28-0x005B6C8C
		private int IndexOfAnyUnchecked(char[] anyOf, int startIndex, int count); // 0x005BAA5C-0x005BAB70
		public int LastIndexOf(char value, int startIndex, int count); // 0x005B71E4-0x005B7398
		internal int LastIndexOfUnchecked(char value, int startIndex, int count); // 0x005BAB70-0x005BAD1C
		public int LastIndexOfAny(char[] anyOf, int startIndex, int count); // 0x005B73D4-0x005B75C0
		private int LastIndexOfAnyUnchecked(char[] anyOf, int startIndex, int count); // 0x005BAD1C-0x005BADF8
		internal static int nativeCompareOrdinalEx(string strA, int indexA, string strB, int indexB, int count); // 0x005B63EC-0x005B65F8
		private string ReplaceInternal(char oldChar, char newChar); // 0x005B8820-0x005B8900
		internal string ReplaceInternal(string oldValue, string newValue); // 0x005B89C4-0x005B8B0C
		private string ReplaceUnchecked(string oldValue, string newValue); // 0x005BAE44-0x005BB2C4
		private string ReplaceFallback(string oldValue, string newValue, int testedCount); // 0x005BB2C4-0x005BB47C
		private string PadHelper(int totalWidth, char paddingChar, bool isRightPadded); // 0x005B7B9C-0x005B7D08
		internal bool StartsWithOrdinalUnchecked(string value); // 0x005BB47C-0x005BB4E4
		internal bool IsAscii(); // 0x005B3A08-0x005B3A54
		internal static unsafe void CharCopy(char* dest, char* src, int count); // 0x005BADF8-0x005BAE44
		private static unsafe void memset(byte* dest, int val, int len); // 0x005BB4E4-0x005BB5A4
		private static unsafe void memcpy(byte* dest, byte* src, int size); // 0x005BB5A4-0x005BB5AC
		internal static unsafe void bzero(byte* dest, int len); // 0x005BB5AC-0x005BB5B8
		internal static unsafe void bzero_aligned_1(byte* dest, int len); // 0x005BB5B8-0x005BB5C4
		internal static unsafe void bzero_aligned_2(byte* dest, int len); // 0x005BB5C4-0x005BB5D0
		internal static unsafe void bzero_aligned_4(byte* dest, int len); // 0x005BB5D0-0x005BB5DC
		internal static unsafe void bzero_aligned_8(byte* dest, int len); // 0x005BB5DC-0x005BB5EC
		internal static unsafe void memcpy_aligned_1(byte* dest, byte* src, int size); // 0x005BB5EC-0x005BB5F8
		internal static unsafe void memcpy_aligned_2(byte* dest, byte* src, int size); // 0x005BB5F8-0x005BB604
		internal static unsafe void memcpy_aligned_4(byte* dest, byte* src, int size); // 0x005BB604-0x005BB610
		internal static unsafe void memcpy_aligned_8(byte* dest, byte* src, int size); // 0x005BB610-0x005BB61C
		private unsafe string CreateString(sbyte* value); // 0x005BB61C-0x005BB6D4
		private unsafe string CreateString(sbyte* value, int startIndex, int length); // 0x005BBAEC-0x005BBB0C
		private unsafe string CreateString(char* value); // 0x005BBB0C-0x005BBB10
		private unsafe string CreateString(char* value, int startIndex, int length); // 0x005BBB10-0x005BBB28
		private string CreateString(char[] val, int startIndex, int length); // 0x005B16C0-0x005B16D8
		private string CreateString(char[] val); // 0x005A6AB8-0x005A6ABC
		private string CreateString(char c, int count); // 0x005B0A18-0x005B0B2C
		private unsafe string CreateString(sbyte* value, int startIndex, int length, Encoding enc); // 0x005BB6D4-0x005BBAEC
	}

	[ComVisible] // 0x0013AD80-0x0013ADB4
	[Flags] // 0x0013AD80-0x0013ADB4
	public enum StringSplitOptions // TypeDefIndex: 277
	{
		None = 0,
		RemoveEmptyEntries = 1
	}

	[Serializable]
	[ComVisible] // 0x0013ADB4-0x0013ADC8
	public abstract class StringComparer : IComparer, IEqualityComparer, IComparer<string>, IEqualityComparer<string> // TypeDefIndex: 278
	{
		// Fields
		private static readonly StringComparer _invariantCulture; // 0x00
		private static readonly StringComparer _invariantCultureIgnoreCase; // 0x04
		private static readonly StringComparer _ordinal; // 0x08
		private static readonly StringComparer _ordinalIgnoreCase; // 0x0C
	
		// Properties
		public static StringComparer InvariantCultureIgnoreCase { get; } // 0x006E7A1C-0x006E7AA8 
		public static StringComparer CurrentCultureIgnoreCase { get; } // 0x006E7AA8-0x006E7B54 
		public static StringComparer Ordinal { get; } // 0x006E7B54-0x006E7BE0 
		public static StringComparer OrdinalIgnoreCase { get; } // 0x006E7BE0-0x006E7C6C 
	
		// Constructors
		protected StringComparer(); // 0x006E8004-0x006E800C
		static StringComparer(); // 0x006E800C-0x006E8154
	
		// Methods
		public int Compare(object x, object y); // 0x006E7C6C-0x006E7E38
		public new bool Equals(object x, object y); // 0x006E7E38-0x006E7F0C
		public int GetHashCode(object obj); // 0x006E7F0C-0x006E8004
		public abstract int Compare(string x, string y);
		public abstract bool Equals(string x, string y);
		public abstract int GetHashCode(string obj);
	}

	[Serializable]
	internal sealed class CultureAwareComparer : StringComparer // TypeDefIndex: 279
	{
		// Fields
		private CompareInfo _compareInfo; // 0x08
		private bool _ignoreCase; // 0x0C
		[OptionalField] // 0x001423F8-0x00142408
		private CompareOptions _options; // 0x10
	
		// Constructors
		internal CultureAwareComparer(CultureInfo culture, bool ignoreCase); // 0x0033319C-0x00333268
	
		// Methods
		public override int Compare(string x, string y); // 0x00333268-0x003332F0
		public override bool Equals(string x, string y); // 0x003332F0-0x0033337C
		public override int GetHashCode(string obj); // 0x0033337C-0x00333458
		public override bool Equals(object obj); // 0x00333458-0x0033355C
		public override int GetHashCode(); // 0x0033355C-0x003335A4
	}

	[Serializable]
	internal sealed class OrdinalComparer : StringComparer // TypeDefIndex: 280
	{
		// Fields
		private bool _ignoreCase; // 0x08
	
		// Constructors
		internal OrdinalComparer(bool ignoreCase); // 0x007468AC-0x00746938
	
		// Methods
		public override int Compare(string x, string y); // 0x00746938-0x00746990
		public override bool Equals(string x, string y); // 0x00746990-0x00746A30
		public override int GetHashCode(string obj); // 0x00746A30-0x00746B10
		public override bool Equals(object obj); // 0x00746B10-0x00746BC4
		public override int GetHashCode(); // 0x00746BC4-0x00746C60
	}

	[Serializable]
	[ComVisible] // 0x0013ADC8-0x0013ADDC
	public class SystemException : Exception // TypeDefIndex: 281
	{
		// Constructors
		public SystemException(); // 0x006E8154-0x006E820C
		public SystemException(string message); // 0x006E820C-0x006E82AC
		public SystemException(string message, Exception innerException); // 0x006E82AC-0x006E8354
		protected SystemException(SerializationInfo info, StreamingContext context); // 0x006E8354-0x006E83FC
	}

	[AttributeUsage] // 0x0013ADDC-0x0013AE14
	[ComVisible] // 0x0013ADDC-0x0013AE14
	public sealed class STAThreadAttribute : Attribute // TypeDefIndex: 282
	{
		// Constructors
		public STAThreadAttribute(); // 0x00417EB0-0x00417EB8
	}

	[Serializable]
	[AttributeUsage] // 0x0013AE14-0x0013AE60
	[ComVisible] // 0x0013AE14-0x0013AE60
	public class ThreadStaticAttribute : Attribute // TypeDefIndex: 283
	{
		// Constructors
		public ThreadStaticAttribute(); // 0x00656500-0x00656508
	}

	internal enum ExceptionArgument // TypeDefIndex: 284
	{
		obj = 0,
		dictionary = 1,
		dictionaryCreationThreshold = 2,
		array = 3,
		info = 4,
		key = 5,
		collection = 6,
		list = 7,
		match = 8,
		converter = 9,
		queue = 10,
		stack = 11,
		capacity = 12,
		index = 13,
		startIndex = 14,
		value = 15,
		count = 16,
		arrayIndex = 17,
		name = 18,
		mode = 19,
		item = 20,
		options = 21,
		view = 22,
		sourceBytesToCopy = 23,
		start = 24,
		pointer = 25,
		ownedMemory = 26,
		text = 27
	}

	internal enum ExceptionResource // TypeDefIndex: 285
	{
		Argument_ImplementIComparable = 0,
		Argument_InvalidType = 1,
		Argument_InvalidArgumentForComparison = 2,
		Argument_InvalidRegistryKeyPermissionCheck = 3,
		ArgumentOutOfRange_NeedNonNegNum = 4,
		Arg_ArrayPlusOffTooSmall = 5,
		Arg_NonZeroLowerBound = 6,
		Arg_RankMultiDimNotSupported = 7,
		Arg_RegKeyDelHive = 8,
		Arg_RegKeyStrLenBug = 9,
		Arg_RegSetStrArrNull = 10,
		Arg_RegSetMismatchedKind = 11,
		Arg_RegSubKeyAbsent = 12,
		Arg_RegSubKeyValueAbsent = 13,
		Argument_AddingDuplicate = 14,
		Serialization_InvalidOnDeser = 15,
		Serialization_MissingKeys = 16,
		Serialization_NullKey = 17,
		Argument_InvalidArrayType = 18,
		NotSupported_KeyCollectionSet = 19,
		NotSupported_ValueCollectionSet = 20,
		ArgumentOutOfRange_SmallCapacity = 21,
		ArgumentOutOfRange_Index = 22,
		Argument_InvalidOffLen = 23,
		Argument_ItemNotExist = 24,
		ArgumentOutOfRange_Count = 25,
		ArgumentOutOfRange_InvalidThreshold = 26,
		ArgumentOutOfRange_ListInsert = 27,
		NotSupported_ReadOnlyCollection = 28,
		InvalidOperation_CannotRemoveFromStackOrQueue = 29,
		InvalidOperation_EmptyQueue = 30,
		InvalidOperation_EnumOpCantHappen = 31,
		InvalidOperation_EnumFailedVersion = 32,
		InvalidOperation_EmptyStack = 33,
		ArgumentOutOfRange_BiggerThanCollection = 34,
		InvalidOperation_EnumNotStarted = 35,
		InvalidOperation_EnumEnded = 36,
		NotSupported_SortedListNestedWrite = 37,
		InvalidOperation_NoValue = 38,
		InvalidOperation_RegRemoveSubKey = 39,
		Security_RegistryPermission = 40,
		UnauthorizedAccess_RegistryNoWrite = 41,
		ObjectDisposed_RegKeyClosed = 42,
		NotSupported_InComparableType = 43,
		Argument_InvalidRegistryOptionsCheck = 44,
		Argument_InvalidRegistryViewCheck = 45
	}

	[Serializable]
	[ComVisible] // 0x0013AE60-0x0013AE74
	public class TimeoutException : SystemException // TypeDefIndex: 286
	{
		// Constructors
		public TimeoutException(); // 0x00A52908-0x00A52990
		public TimeoutException(string message); // 0x00A52990-0x00A529BC
		protected TimeoutException(SerializationInfo info, StreamingContext context); // 0x00A529BC-0x00A529DC
	}

	[Serializable]
	[ComVisible] // 0x0013AE74-0x0013AE88
	public struct TimeSpan : IComparable, IComparable<TimeSpan>, IEquatable<TimeSpan>, IFormattable // TypeDefIndex: 287
	{
		// Fields
		public static readonly TimeSpan Zero; // 0x00
		public static readonly TimeSpan MaxValue; // 0x08
		public static readonly TimeSpan MinValue; // 0x10
		internal long _ticks; // 0x00
		private static bool _legacyConfigChecked; // 0x18
		private static bool _legacyMode; // 0x19
	
		// Properties
		public long Ticks { get; } // 0x0026EDF0-0x0026EE28 
		public int Hours { get; } // 0x0026EE28-0x0026EE88 
		public int Minutes { get; } // 0x0026EE88-0x0026EEB8 
		public double TotalHours { get; } // 0x0026EEB8-0x0026EEE8 
		public double TotalMilliseconds { get; } // 0x0026EEE8-0x0026EF48 
		public double TotalMinutes { get; } // 0x0026EF48-0x0026EFA8 
		public double TotalSeconds { get; } // 0x0026EFA8-0x0026F0BC 
		private static bool LegacyMode { get; } // 0x0026FC7C-0x0026FDB4 
	
		// Constructors
		public TimeSpan(long ticks); // 0x0026EBF4-0x0026EC9C
		public TimeSpan(int hours, int minutes, int seconds); // 0x0026EDA4-0x0026EDC0
		public TimeSpan(int days, int hours, int minutes, int seconds, int milliseconds); // 0x0026EDC0-0x0026EDF0
		static TimeSpan(); // 0x0026FF3C-0x0026FFC8
	
		// Methods
		public TimeSpan Add(TimeSpan ts); // 0x0026F0BC-0x0026F1F4
		public int CompareTo(object value); // 0x0026F1F4-0x0026F1FC
		public int CompareTo(TimeSpan value); // 0x0026F1FC-0x0026F230
		public static TimeSpan FromDays(double value); // 0x0026F230-0x0026F2D8
		public override bool Equals(object value); // 0x0026F53C-0x0026F544
		public bool Equals(TimeSpan obj); // 0x0026F544-0x0026F560
		public override int GetHashCode(); // 0x0026F560-0x0026F56C
		public static TimeSpan FromHours(double value); // 0x0026F56C-0x0026F610
		private static TimeSpan Interval(double value, int scale); // 0x0026F2D8-0x0026F53C
		public static TimeSpan FromMilliseconds(double value); // 0x0026F610-0x0026F6B0
		public static TimeSpan FromMinutes(double value); // 0x0026F6B0-0x0026F86C
		public TimeSpan Negate(); // 0x0026F86C-0x0026F880
		public static TimeSpan FromSeconds(double value); // 0x0026F880-0x0026F9FC
		public TimeSpan Subtract(TimeSpan ts); // 0x0026F9FC-0x0026FA18
		public static TimeSpan FromTicks(long value); // 0x0026FA18-0x0026FAC0
		internal static long TimeToTicks(int hour, int minute, int second); // 0x0026EC9C-0x0026EDA4
		public override string ToString(); // 0x0026FAC0-0x0026FB64
		public string ToString(string format); // 0x0026FB64-0x0026FC7C
		public string ToString(string format, IFormatProvider formatProvider); // 0x0026FDB4-0x0026FDBC
		public static TimeSpan operator -(TimeSpan t1, TimeSpan t2); // 0x0026FDBC-0x0026FDF0
		public static TimeSpan operator +(TimeSpan t1, TimeSpan t2); // 0x0026FDF0-0x0026FE24
		public static bool operator ==(TimeSpan t1, TimeSpan t2); // 0x0026FE24-0x0026FE3C
		public static bool operator !=(TimeSpan t1, TimeSpan t2); // 0x0026FE3C-0x0026FE50
		public static bool operator <(TimeSpan t1, TimeSpan t2); // 0x0026FE50-0x0026FE68
		public static bool operator <=(TimeSpan t1, TimeSpan t2); // 0x0026FE68-0x0026FE80
		public static bool operator >(TimeSpan t1, TimeSpan t2); // 0x0026FE80-0x0026FE98
		public static bool operator >=(TimeSpan t1, TimeSpan t2); // 0x0026FE98-0x0026FEB0
		private static bool GetLegacyFormatMode(); // 0x0026FEB0-0x0026FF3C
	}

	[Flags] // 0x0013AE88-0x0013AE98
	internal enum TimeZoneInfoOptions // TypeDefIndex: 288
	{
		None = 1,
		NoThrowOnInvalidTime = 2
	}

	[Serializable]
	[TypeForwardedFrom] // 0x0013AE98-0x0013AECC
	public sealed class TimeZoneInfo : IEquatable<TimeZoneInfo>, ISerializable, IDeserializationCallback // TypeDefIndex: 289
	{
		// Fields
		private TimeSpan baseUtcOffset; // 0x08
		private string daylightDisplayName; // 0x10
		private string displayName; // 0x14
		private string id; // 0x18
		private static TimeZoneInfo local; // 0x00
		private List<KeyValuePair<DateTime, TimeType>> transitions; // 0x1C
		private static bool readlinkNotFound; // 0x04
		private string standardDisplayName; // 0x20
		private bool supportsDaylightSavingTime; // 0x24
		private static TimeZoneInfo utc; // 0x08
		private static string timeZoneDirectory; // 0x0C
		private AdjustmentRule[] adjustmentRules; // 0x28
		private static RegistryKey timeZoneKey; // 0x10
		private static RegistryKey localZoneKey; // 0x14
		private static ReadOnlyCollection<TimeZoneInfo> systemTimeZones; // 0x18
	
		// Properties
		public TimeSpan BaseUtcOffset { get; } // 0x00273940-0x0027394C 
		public string DisplayName { get; } // 0x0027394C-0x00273954 
		public string Id { get; } // 0x002735C4-0x002735CC 
		public static TimeZoneInfo Local { get; } // 0x00273844-0x00273940 
		public bool SupportsDaylightSavingTime { get; } // 0x00275CE0-0x00275CE8 
		public static TimeZoneInfo Utc { get; } // 0x002730F8-0x002731BC 
		private static string TimeZoneDirectory { get; } // 0x002745B4-0x0027463C 
		private static bool IsWindows { get; } // 0x0027463C-0x00274698 
		private static RegistryKey TimeZoneKey { get; } // 0x00275B44-0x00275CE0 
		private static RegistryKey LocalZoneKey { get; } // 0x00274698-0x00274834 
	
		// Nested types
		[Serializable]
		[TypeForwardedFrom] // 0x0013AECC-0x0013AF00
		public sealed class AdjustmentRule : IEquatable<AdjustmentRule>, ISerializable, IDeserializationCallback // TypeDefIndex: 290
		{
			// Fields
			private DateTime m_dateStart; // 0x08
			private DateTime m_dateEnd; // 0x10
			private TimeSpan m_daylightDelta; // 0x18
			private TransitionTime m_daylightTransitionStart; // 0x20
			private TransitionTime m_daylightTransitionEnd; // 0x38
			private TimeSpan m_baseUtcOffsetDelta; // 0x50
	
			// Properties
			public DateTime DateStart { get; } // 0x00A504EC-0x00A504F8 
			public DateTime DateEnd { get; } // 0x00A504F8-0x00A50504 
			public TimeSpan DaylightDelta { get; } // 0x00A50504-0x00A50510 
			public TransitionTime DaylightTransitionStart { get; } // 0x00A50510-0x00A50528 
			public TransitionTime DaylightTransitionEnd { get; } // 0x00A50528-0x00A50540 
	
			// Constructors
			private AdjustmentRule(); // 0x00A50890-0x00A50898
			private AdjustmentRule(SerializationInfo info, StreamingContext context); // 0x00A51550-0x00A51810
	
			// Methods
			public bool Equals(AdjustmentRule other); // 0x00A50540-0x00A50884
			public override int GetHashCode(); // 0x00A50884-0x00A50890
			public static AdjustmentRule CreateAdjustmentRule(DateTime dateStart, DateTime dateEnd, TimeSpan daylightDelta, TransitionTime daylightTransitionStart, TransitionTime daylightTransitionEnd); // 0x00A50898-0x00A50B08
			internal static AdjustmentRule CreateAdjustmentRule(DateTime dateStart, DateTime dateEnd, TimeSpan daylightDelta, TransitionTime daylightTransitionStart, TransitionTime daylightTransitionEnd, TimeSpan baseUtcOffsetDelta); // 0x00A510DC-0x00A5117C
			private static void ValidateAdjustmentRule(DateTime dateStart, DateTime dateEnd, TimeSpan daylightDelta, TransitionTime daylightTransitionStart, TransitionTime daylightTransitionEnd); // 0x00A50B08-0x00A510DC
			void IDeserializationCallback.OnDeserialization(object sender); // 0x00A5117C-0x00A51344
			void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00A51344-0x00A51550
		}
	
		[Serializable]
		[TypeForwardedFrom] // 0x0013AF00-0x0013AF34
		public struct TransitionTime : IEquatable<TransitionTime>, ISerializable, IDeserializationCallback // TypeDefIndex: 291
		{
			// Fields
			private DateTime m_timeOfDay; // 0x00
			private byte m_month; // 0x08
			private byte m_week; // 0x09
			private byte m_day; // 0x0A
			private DayOfWeek m_dayOfWeek; // 0x0C
			private bool m_isFixedDateRule; // 0x10
	
			// Properties
			public DateTime TimeOfDay { get; } // 0x00A51AFC-0x00A51B10 
			public int Month { get; } // 0x00A51B10-0x00A51B20 
			public int Week { get; } // 0x00A51B20-0x00A51B30 
			public int Day { get; } // 0x00A51B30-0x00A51B40 
			public DayOfWeek DayOfWeek { get; } // 0x00A51B40-0x00A51B50 
			public bool IsFixedDateRule { get; } // 0x00A51B50-0x00A51C08 
	
			// Constructors
			private TransitionTime(SerializationInfo info, StreamingContext context); // 0x00A5272C-0x00A52748
	
			// Methods
			public override bool Equals(object obj); // 0x00A51C08-0x00A51C10
			public static bool operator !=(TransitionTime t1, TransitionTime t2); // 0x00A51C10-0x00A51C74
			public bool Equals(TransitionTime other); // 0x00A51C74-0x00A51CA4
			public override int GetHashCode(); // 0x00A51CA4-0x00A51CB4
			public static TransitionTime CreateFixedDateRule(DateTime timeOfDay, int month, int day); // 0x00A51CB4-0x00A51D28
			public static TransitionTime CreateFloatingDateRule(DateTime timeOfDay, int month, int week, DayOfWeek dayOfWeek); // 0x00A51D9C-0x00A51E10
			private static TransitionTime CreateTransitionTime(DateTime timeOfDay, int month, int week, int day, DayOfWeek dayOfWeek, bool isFixedDateRule); // 0x00A51D28-0x00A51D9C
			private static void ValidateTransitionTime(DateTime timeOfDay, int month, int week, int day, DayOfWeek dayOfWeek); // 0x00A51E10-0x00A522DC
			void IDeserializationCallback.OnDeserialization(object sender); // 0x00A522DC-0x00A52480
			void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00A52480-0x00A5272C
		}
	
		internal struct SYSTEMTIME // TypeDefIndex: 292
		{
			// Fields
			internal ushort wYear; // 0x00
			internal ushort wMonth; // 0x02
			internal ushort wDayOfWeek; // 0x04
			internal ushort wDay; // 0x06
			internal ushort wHour; // 0x08
			internal ushort wMinute; // 0x0A
			internal ushort wSecond; // 0x0C
			internal ushort wMilliseconds; // 0x0E
		}
	
		internal struct TIME_ZONE_INFORMATION // TypeDefIndex: 293
		{
			// Fields
			internal int Bias; // 0x00
			internal string StandardName; // 0x04
			internal SYSTEMTIME StandardDate; // 0x08
			internal int StandardBias; // 0x18
			internal string DaylightName; // 0x1C
			internal SYSTEMTIME DaylightDate; // 0x20
			internal int DaylightBias; // 0x30
		}
	
		internal struct DYNAMIC_TIME_ZONE_INFORMATION // TypeDefIndex: 294
		{
			// Fields
			internal TIME_ZONE_INFORMATION TZI; // 0x00
			internal string TimeZoneKeyName; // 0x34
			internal byte DynamicDaylightTimeDisabled; // 0x38
		}
	
		[Serializable]
		[CompilerGenerated] // 0x0013AF34-0x0013AF44
		private sealed class <>c // TypeDefIndex: 295
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static Comparison<AdjustmentRule> <>9__19_0; // 0x04
	
			// Constructors
			static <>c(); // 0x00A50408-0x00A5047C
			public <>c(); // 0x00A5047C-0x00A50484
	
			// Methods
			internal int <CreateLocalUnity>b__19_0(AdjustmentRule rule1, AdjustmentRule rule2); // 0x00A50484-0x00A504EC
		}
	
		// Constructors
		private TimeZoneInfo(SerializationInfo info, StreamingContext context); // 0x00279E24-0x0027A350
		private TimeZoneInfo(string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime); // 0x002727E4-0x00272F84
	
		// Methods
		internal static bool UtcOffsetOutOfRange(TimeSpan offset); // 0x00270388-0x002703D8
		private static List<AdjustmentRule> CreateAdjustmentRule(int year, out long[] data, out string[] names, string standardNameCurrentYear, string daylightNameCurrentYear); // 0x002703D8-0x00270DE4
		private static TimeZoneInfo CreateLocalUnity(); // 0x00270DE4-0x002713CC
		internal static extern uint EnumDynamicTimeZoneInformation(uint dwIndex, out DYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation); // 0x00271480-0x002715D0
		internal static extern uint GetDynamicTimeZoneInformation(out DYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation); // 0x002715D0-0x00271718
		internal static extern uint GetDynamicTimeZoneInformationEffectiveYears(ref DYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation, out uint FirstYear, out uint LastYear); // 0x00271718-0x00271890
		internal static extern bool GetTimeZoneInformationForYear(ushort wYear, ref DYNAMIC_TIME_ZONE_INFORMATION pdtzi, out TIME_ZONE_INFORMATION ptzi); // 0x00271890-0x00271A74
		internal static AdjustmentRule CreateAdjustmentRuleFromTimeZoneInformation(ref DYNAMIC_TIME_ZONE_INFORMATION timeZoneInformation, DateTime startDate, DateTime endDate, int defaultBaseUtcOffset); // 0x00271A74-0x00271F24
		private static bool TransitionTimeFromTimeZoneInformation(DYNAMIC_TIME_ZONE_INFORMATION timeZoneInformation, out TransitionTime transitionTime, bool readStartDate); // 0x00271F24-0x0027213C
		internal static TimeZoneInfo TryCreateTimeZone(DYNAMIC_TIME_ZONE_INFORMATION timeZoneInformation); // 0x0027213C-0x002727E4
		internal static TimeZoneInfo GetLocalTimeZoneInfoWinRTFallback(); // 0x00272F84-0x002730F8
		internal static TimeZoneInfo FindSystemTimeZoneByIdWinRTFallback(string id); // 0x002731BC-0x002734C0
		internal static List<TimeZoneInfo> GetSystemTimeZonesWinRTFallback(); // 0x002735CC-0x00273844
		private static extern int readlink(string path, byte[] buffer, int buflen); // 0x00273F48-0x00274078
		private static string readlink(string path); // 0x00274078-0x0027429C
		private static bool TryGetNameFromPath(string path, out string name); // 0x0027429C-0x002745B4
		private static TimeZoneInfo CreateLocal(); // 0x00273954-0x00273F48
		private static TimeZoneInfo FindSystemTimeZoneByIdCore(string id); // 0x00274D30-0x00274DCC
		private static void GetSystemTimeZonesCore(List<TimeZoneInfo> systemTimeZones); // 0x00274DCC-0x00275B44
		private static string TrimSpecial(string str); // 0x00274834-0x002749C0
		private static bool TryAddTicks(DateTime date, long ticks, out DateTime result, DateTimeKind kind = DateTimeKind.Unspecified /* Metadata: 0x00203A1E */); // 0x00275D20-0x00275F48
		public static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo sourceTimeZone, TimeZoneInfo destinationTimeZone); // 0x00275F48-0x00276268
		private DateTime ConvertTimeFromUtc(DateTime dateTime); // 0x00276558-0x00276758
		public static DateTime ConvertTimeFromUtc(DateTime dateTime, TimeZoneInfo destinationTimeZone); // 0x00276484-0x00276558
		internal static DateTime ConvertTimeToUtc(DateTime dateTime, TimeZoneInfoOptions flags); // 0x00276780-0x002767BC
		public static DateTime ConvertTimeToUtc(DateTime dateTime, TimeZoneInfo sourceTimeZone); // 0x0027645C-0x00276484
		private static DateTime ConvertTimeToUtc(DateTime dateTime, TimeZoneInfo sourceTimeZone, TimeZoneInfoOptions flags); // 0x002767BC-0x00276A44
		internal static TimeSpan GetDateTimeNowUtcOffsetFromUtc(DateTime time, out bool isAmbiguousLocalDst); // 0x00276B44-0x00276B90
		public static TimeZoneInfo CreateCustomTimeZone(string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName); // 0x00275CE8-0x00275D20
		public static TimeZoneInfo CreateCustomTimeZone(string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, AdjustmentRule[] adjustmentRules); // 0x00276C20-0x00276C54
		public static TimeZoneInfo CreateCustomTimeZone(string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime); // 0x002713CC-0x00271480
		public override bool Equals(object obj); // 0x00276C54-0x00276CDC
		public bool Equals(TimeZoneInfo other); // 0x00276CDC-0x00276D24
		public static TimeZoneInfo FindSystemTimeZoneById(string id); // 0x002749C0-0x00274B6C
		private static TimeZoneInfo FindSystemTimeZoneByFileName(string id, string filepath); // 0x00274B6C-0x00274D30
		private static TimeZoneInfo FromRegistryKey(string id, RegistryKey key); // 0x00276F50-0x002774F4
		private static void ParseRegTzi(List<AdjustmentRule> adjustmentRules, int start_year, int end_year, byte[] buffer); // 0x00277728-0x00277B80
		public AdjustmentRule[] GetAdjustmentRules(); // 0x00277D38-0x00277E5C
		public override int GetHashCode(); // 0x00277E5C-0x00277F18
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00277F18-0x002780D0
		public static ReadOnlyCollection<TimeZoneInfo> GetSystemTimeZones(); // 0x002734C0-0x002735C4
		public TimeSpan GetUtcOffset(DateTime dateTime); // 0x00276758-0x00276780
		private TimeSpan GetUtcOffset(DateTime dateTime, out bool isDST); // 0x00276A44-0x00276B44
		private static TimeSpan GetUtcOffsetHelper(DateTime dateTime, TimeZoneInfo tz, out bool isDST); // 0x002780D0-0x002784B8
		public bool HasSameRules(TimeZoneInfo other); // 0x00276D24-0x00276F50
		public bool IsAmbiguousTime(DateTime dateTime); // 0x00278B24-0x00278DF8
		private bool IsInDST(AdjustmentRule rule, DateTime dateTime); // 0x00278A7C-0x00278B24
		private bool IsInDSTForYear(AdjustmentRule rule, DateTime dateTime, int year); // 0x002790F4-0x0027948C
		public bool IsDaylightSavingTime(DateTime dateTime); // 0x0027948C-0x002795B4
		internal bool IsDaylightSavingTime(DateTime dateTime, TimeZoneInfoOptions flags); // 0x002795B4-0x002795CC
		public bool IsInvalidTime(DateTime dateTime); // 0x00276268-0x0027645C
		void IDeserializationCallback.OnDeserialization(object sender); // 0x002795CC-0x00279714
		private static void Validate(string id, TimeSpan baseUtcOffset, AdjustmentRule[] adjustmentRules); // 0x00279714-0x00279E1C
		public override string ToString(); // 0x00279E1C-0x00279E24
		private AdjustmentRule GetApplicableRule(DateTime dateTime); // 0x002787E8-0x00278A7C
		private bool TryGetTransitionOffset(DateTime dateTime, out TimeSpan offset, out bool isDst); // 0x002784B8-0x002787E8
		private static DateTime TransitionPoint(TransitionTime transition, int year); // 0x00278DF8-0x002790F4
		private static AdjustmentRule[] ValidateRules(List<AdjustmentRule> adjustmentRules); // 0x00277B80-0x00277D38
		private static TimeZoneInfo BuildFromStream(string id, Stream stream); // 0x002774F4-0x00277728
		private static bool ValidTZFile(byte[] buffer, int length); // 0x0027A350-0x0027A480
		private static int SwapInt32(int i); // 0x0027B330-0x0027B338
		private static int ReadBigEndianInt32(byte[] buffer, int start); // 0x0027B338-0x0027B3E4
		private static TimeZoneInfo ParseTZBuffer(string id, byte[] buffer, int length); // 0x0027A480-0x0027B330
		private static Dictionary<int, string> ParseAbbreviations(byte[] buffer, int index, int count); // 0x0027B3E4-0x0027B680
		private static Dictionary<int, TimeType> ParseTimesTypes(byte[] buffer, int index, int count, Dictionary<int, string> abbreviations); // 0x0027B680-0x0027B88C
		private static List<KeyValuePair<DateTime, TimeType>> ParseTransitions(byte[] buffer, int index, int count, Dictionary<int, TimeType> time_types); // 0x0027B88C-0x0027BA7C
		private static DateTime DateTimeFromUnixTime(long unix_time); // 0x0027BA7C-0x0027BAE8
		internal static TimeSpan GetLocalUtcOffset(DateTime dateTime, TimeZoneInfoOptions flags); // 0x0027BAE8-0x0027BB44
		internal TimeSpan GetUtcOffset(DateTime dateTime, TimeZoneInfoOptions flags); // 0x0027BB44-0x0027BB6C
		internal static TimeSpan GetUtcOffsetFromUtc(DateTime time, TimeZoneInfo zone, out bool isDaylightSavings, out bool isAmbiguousLocalDst); // 0x00276B90-0x00276C20
	}

	[Serializable]
	[TypeForwardedFrom] // 0x0013AF44-0x0013AF78
	public class TimeZoneNotFoundException : Exception // TypeDefIndex: 296
	{
		// Constructors
		public TimeZoneNotFoundException(string message, Exception innerException); // 0x00A52748-0x00A527DC
		protected TimeZoneNotFoundException(SerializationInfo info, StreamingContext context); // 0x00A527DC-0x00A52884
		public TimeZoneNotFoundException(); // 0x00A52884-0x00A52908
	}

	[Serializable]
	[ClassInterface] // 0x0013AF78-0x0013B018
	[ComDefaultInterface] // 0x0013AF78-0x0013B018
	[ComVisible] // 0x0013AF78-0x0013B018
	public abstract class Type : MemberInfo, _Type, IReflect // TypeDefIndex: 297
	{
		// Fields
		public static readonly MemberFilter FilterAttribute; // 0x00
		public static readonly MemberFilter FilterName; // 0x04
		public static readonly MemberFilter FilterNameIgnoreCase; // 0x08
		public static readonly object Missing; // 0x0C
		public static readonly char Delimiter; // 0x10
		public static readonly Type[] EmptyTypes; // 0x14
		private static Binder defaultBinder; // 0x18
		private const BindingFlags DefaultLookup = BindingFlags.Default | BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public; // Metadata: 0x00203A22
		internal const BindingFlags DeclaredOnlyLookup = BindingFlags.Default | BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic; // Metadata: 0x00203A26
		internal RuntimeTypeHandle _impl; // 0x08
	
		// Properties
		public override MemberTypes MemberType { get; } // 0x00A52A20-0x00A52A28 
		public override Type DeclaringType { get; } // 0x00A52A28-0x00A52A30 
		public virtual MethodBase DeclaringMethod { get; } // 0x00A52A30-0x00A52A38 
		public override Type ReflectedType { get; } // 0x00A52A38-0x00A52A40 
		public static Binder DefaultBinder { get; } // 0x00A52ED0-0x00A52FC8 
		public abstract Module Module { get; }
		public abstract Assembly Assembly { get; }
		public virtual RuntimeTypeHandle TypeHandle { get; } // 0x00A530CC-0x00A53154 
		public abstract string FullName { get; }
		public abstract string Namespace { get; }
		public abstract string AssemblyQualifiedName { get; }
		public abstract Type BaseType { get; }
		public bool IsNested { get; } // 0x00A54184-0x00A54220 
		public TypeAttributes Attributes { get; } // 0x00A54220-0x00A54230 
		public virtual GenericParameterAttributes GenericParameterAttributes { get; } // 0x00A54230-0x00A542B8 
		public bool IsNotPublic { get; } // 0x00A542B8-0x00A542E4 
		public bool IsPublic { get; } // 0x00A542E4-0x00A5430C 
		public bool IsNestedPublic { get; } // 0x00A5430C-0x00A54338 
		public bool IsNestedAssembly { get; } // 0x00A54338-0x00A54364 
		public bool IsExplicitLayout { get; } // 0x00A54364-0x00A54390 
		public bool IsClass { get; } // 0x00A54390-0x00A543DC 
		public bool IsInterface { get; } // 0x00A543EC-0x00A544DC 
		public bool IsValueType { get; } // 0x00A543DC-0x00A543EC 
		public bool IsAbstract { get; } // 0x00A544DC-0x00A544FC 
		public bool IsSealed { get; } // 0x00A544FC-0x00A5451C 
		public virtual bool IsEnum { get; } // 0x00A5451C-0x00A545C0 
		public virtual bool IsSerializable { get; } // 0x00A545C0-0x00A546E8 
		public bool IsArray { get; } // 0x00A546E8-0x00A546F8 
		internal virtual bool IsSzArray { get; } // 0x00A546F8-0x00A54700 
		public virtual bool IsGenericType { get; } // 0x00A54700-0x00A54708 
		public virtual bool IsGenericTypeDefinition { get; } // 0x00A54708-0x00A54710 
		public virtual bool IsGenericParameter { get; } // 0x00A54710-0x00A54718 
		public virtual int GenericParameterPosition { get; } // 0x00A54718-0x00A547C0 
		public virtual bool ContainsGenericParameters { get; } // 0x00A547C0-0x00A548F4 
		public bool IsByRef { get; } // 0x00A54A5C-0x00A54A6C 
		public bool IsPointer { get; } // 0x00A54A6C-0x00A54A7C 
		public bool IsPrimitive { get; } // 0x00A54A7C-0x00A54A8C 
		public bool IsCOMObject { get; } // 0x00A54A8C-0x00A54A9C 
		public bool HasElementType { get; } // 0x00A548F4-0x00A54904 
		public bool IsContextful { get; } // 0x00A54A9C-0x00A54AAC 
		public bool IsMarshalByRef { get; } // 0x00A54AAC-0x00A54ABC 
		public abstract Type UnderlyingSystemType { get; }
	
		// Constructors
		protected Type(); // 0x00A52A18-0x00A52A20
		static Type(); // 0x00A5744C-0x00A576D4
	
		// Methods
		public static Type GetType(string typeName, Func<AssemblyName, Assembly> assemblyResolver, Func<Assembly, string, bool, Type> typeResolver, bool throwOnError); // 0x00A52A40-0x00A52A60
		public virtual Type MakePointerType(); // 0x00A52AB4-0x00A52B3C
		public virtual Type MakeByRefType(); // 0x00A52B3C-0x00A52BC4
		public virtual Type MakeArrayType(); // 0x00A52BC4-0x00A52C4C
		public virtual Type MakeArrayType(int rank); // 0x00A52C4C-0x00A52CD4
		public static TypeCode GetTypeCode(Type type); // 0x00A52CD4-0x00A52D70
		protected virtual TypeCode GetTypeCodeImpl(); // 0x00A52D84-0x00A52EBC
		private static void CreateBinder(); // 0x00A52FC8-0x00A530CC
		public abstract object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters);
		public static RuntimeTypeHandle GetTypeHandle(object o); // 0x00A53154-0x00A532D8
		public virtual int GetArrayRank(); // 0x00A532D8-0x00A53380
		[ComVisible] // 0x00144124-0x00144138
		public ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x00A53380-0x00A5352C
		[ComVisible] // 0x00144138-0x0014414C
		public ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers); // 0x00A5352C-0x00A536D4
		[ComVisible] // 0x0014414C-0x00144160
		public ConstructorInfo GetConstructor(Type[] types); // 0x00A536D4-0x00A53700
		protected abstract ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
		[ComVisible] // 0x00144160-0x00144174
		public abstract ConstructorInfo[] GetConstructors(BindingFlags bindingAttr);
		public MethodInfo GetMethod(string name, BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers); // 0x00A53700-0x00A53904
		public MethodInfo GetMethod(string name, Type[] types); // 0x00A53904-0x00A53AF8
		public MethodInfo GetMethod(string name, BindingFlags bindingAttr); // 0x00A53AF8-0x00A53BEC
		public MethodInfo GetMethod(string name); // 0x00A53BEC-0x00A53CDC
		protected abstract MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
		public MethodInfo[] GetMethods(); // 0x00A53CDC-0x00A53CF0
		public abstract MethodInfo[] GetMethods(BindingFlags bindingAttr);
		public abstract FieldInfo GetField(string name, BindingFlags bindingAttr);
		public FieldInfo GetField(string name); // 0x00A53CF0-0x00A53D04
		public abstract FieldInfo[] GetFields(BindingFlags bindingAttr);
		public abstract Type[] GetInterfaces();
		public abstract EventInfo GetEvent(string name, BindingFlags bindingAttr);
		public PropertyInfo GetProperty(string name, Type returnType, Type[] types); // 0x00A53D04-0x00A53E44
		public PropertyInfo GetProperty(string name, Type returnType); // 0x00A53E44-0x00A53FAC
		public PropertyInfo GetProperty(string name); // 0x00A53FAC-0x00A54098
		protected abstract PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers);
		public abstract Type GetNestedType(string name, BindingFlags bindingAttr);
		public MemberInfo[] GetMember(string name); // 0x00A54098-0x00A540AC
		public virtual MemberInfo[] GetMember(string name, BindingFlags bindingAttr); // 0x00A540AC-0x00A540DC
		public virtual MemberInfo[] GetMember(string name, MemberTypes type, BindingFlags bindingAttr); // 0x00A540DC-0x00A54184
		public virtual Type[] GetGenericParameterConstraints(); // 0x00A5495C-0x00A54A5C
		protected virtual bool IsValueTypeImpl(); // 0x00A54ABC-0x00A54B60
		protected abstract TypeAttributes GetAttributeFlagsImpl();
		protected abstract bool IsArrayImpl();
		protected abstract bool IsByRefImpl();
		protected abstract bool IsPointerImpl();
		protected abstract bool IsPrimitiveImpl();
		protected abstract bool IsCOMObjectImpl();
		public virtual Type MakeGenericType(params /* 0x00146278-0x00146288 */ Type[] typeArguments); // 0x00A54B60-0x00A54C08
		protected virtual bool IsContextfulImpl(); // 0x00A54C08-0x00A54CC4
		protected virtual bool IsMarshalByRefImpl(); // 0x00A54CC4-0x00A54D80
		public abstract Type GetElementType();
		public virtual Type[] GetGenericArguments(); // 0x00A54D80-0x00A54E28
		public virtual Type GetGenericTypeDefinition(); // 0x00A54E28-0x00A54ED0
		protected abstract bool HasElementTypeImpl();
		internal Type GetRootElementType(); // 0x00A54904-0x00A5495C
		public virtual string[] GetEnumNames(); // 0x00A54ED0-0x00A54FD8
		public virtual Array GetEnumValues(); // 0x00A55614-0x00A55728
		private Array GetEnumRawConstantValues(); // 0x00A55728-0x00A55758
		private void GetEnumData(out string[] enumNames, out Array enumValues); // 0x00A54FD8-0x00A55614
		public virtual Type GetEnumUnderlyingType(); // 0x00A55758-0x00A558F0
		public virtual bool IsEnumDefined(object value); // 0x00A558F0-0x00A55FDC
		public virtual string GetEnumName(object value); // 0x00A564E4-0x00A567B4
		private static int BinarySearch(Array array, object value); // 0x00A5632C-0x00A564E4
		internal static bool IsIntegerType(Type t); // 0x00A55FDC-0x00A5632C
		[ComVisible] // 0x00144174-0x00144188
		public virtual bool IsSubclassOf(Type c); // 0x00A567B4-0x00A568C8
		public virtual bool IsInstanceOfType(object o); // 0x00A568C8-0x00A5690C
		public virtual bool IsAssignableFrom(Type c); // 0x00A5690C-0x00A56B8C
		public virtual bool IsEquivalentTo(Type other); // 0x00A56D78-0x00A56E00
		internal bool ImplementInterface(Type ifaceType); // 0x00A56B8C-0x00A56D78
		internal string FormatTypeName(); // 0x00A56E00-0x00A56E14
		internal virtual string FormatTypeName(bool serialization); // 0x00A56E14-0x00A56E9C
		public override string ToString(); // 0x00A56E9C-0x00A56F18
		public override bool Equals(object o); // 0x00A56F18-0x00A56FCC
		public virtual bool Equals(Type o); // 0x00A56FCC-0x00A57024
		public static bool operator ==(Type left, Type right); // 0x00A52D70-0x00A52D84
		public static bool operator !=(Type left, Type right); // 0x00A52EBC-0x00A52ED0
		public override int GetHashCode(); // 0x00A57024-0x00A57088
		public new Type GetType(); // 0x00A57088-0x00A57090
		private static Type internal_from_name(string name, bool throwOnError, bool ignoreCase); // 0x00A57090-0x00A57094
		public static Type GetType(string typeName); // 0x00A57094-0x00A5714C
		public static Type GetType(string typeName, bool throwOnError); // 0x00A57360-0x00A5741C
		public static Type GetType(string typeName, bool throwOnError, bool ignoreCase); // 0x00A5714C-0x00A57360
		public static Type GetTypeFromHandle(RuntimeTypeHandle handle); // 0x00A51810-0x00A51AFC
		private static Type internal_from_handle(IntPtr handle); // 0x00A57448-0x00A5744C
	}

	[CLSCompliant] // 0x0013B018-0x0013B050
	[ComVisible] // 0x0013B018-0x0013B050
	public struct TypedReference // TypeDefIndex: 298
	{
		// Fields
		private RuntimeTypeHandle type; // 0x00
		private IntPtr Value; // 0x04
		private IntPtr Type; // 0x08
	
		// Properties
		internal bool IsNull { get; } // 0x00A5B798-0x00A5B7CC 
	
		// Methods
		[CLSCompliant] // 0x00144188-0x0014419C
		public static TypedReference MakeTypedReference(object target, FieldInfo[] flds); // 0x00A5AED8-0x00A5B5D0
		private static TypedReference MakeTypedReferenceInternal(object target, FieldInfo[] fields); // 0x00A5B5D0-0x00A5B6A4
		public override int GetHashCode(); // 0x00A5B6A4-0x00A5B754
		public override bool Equals(object o); // 0x00A5B754-0x00A5B798
		[CLSCompliant] // 0x0014419C-0x001441B0
		public static void SetTypedReference(TypedReference target, object value); // 0x00A5B7CC-0x00A5B95C
	}

	[Serializable]
	[ComVisible] // 0x0013B050-0x0013B064
	public sealed class TypeInitializationException : SystemException // TypeDefIndex: 299
	{
		// Fields
		private string _typeName; // 0x44
	
		// Properties
		public string TypeName { get; } // 0x00A57B84-0x00A57BF4 
	
		// Constructors
		private TypeInitializationException(); // 0x00A57938-0x00A579C0
		public TypeInitializationException(string fullTypeName, Exception innerException); // 0x00A579C0-0x00A57AD8
		internal TypeInitializationException(SerializationInfo info, StreamingContext context); // 0x00A57AD8-0x00A57B84
	
		// Methods
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00A57BF4-0x00A57D50
	}

	[Serializable]
	[ComVisible] // 0x0013B064-0x0013B078
	public class TypeLoadException : SystemException, ISerializable // TypeDefIndex: 300
	{
		// Fields
		private string ClassName; // 0x44
		private string AssemblyName; // 0x48
		private string MessageArg; // 0x4C
		internal int ResourceId; // 0x50
	
		// Properties
		public override string Message { get; } // 0x00A57DD8-0x00A57DF0 
	
		// Constructors
		public TypeLoadException(); // 0x00A57D50-0x00A57DD8
		public TypeLoadException(string message); // 0x00A5741C-0x00A57448
		private TypeLoadException(string className, string assemblyName); // 0x00A57F34-0x00A57F58
		private TypeLoadException(string className, string assemblyName, string messageArg, int resourceId); // 0x00A57F58-0x00A57FB0
		protected TypeLoadException(SerializationInfo info, StreamingContext context); // 0x00A57FB0-0x00A5810C
	
		// Methods
		private void SetMessageField(); // 0x00A57DF0-0x00A57F34
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00A5810C-0x00A582E0
	}

	[Serializable]
	[CLSCompliant] // 0x0013B078-0x0013B0B0
	[ComVisible] // 0x0013B078-0x0013B0B0
	public struct UInt16 : IComparable, IFormattable, IConvertible, IComparable<ushort>, IEquatable<ushort> // TypeDefIndex: 301
	{
		// Fields
		private ushort m_value; // 0x00
		public const ushort MaxValue = 65535; // Metadata: 0x00203A2A
		public const ushort MinValue = 0; // Metadata: 0x00203A2C
	
		// Methods
		public int CompareTo(object value); // 0x00A5B95C-0x00A5B964
		public int CompareTo(ushort value); // 0x00A5B964-0x00A5BA04
		public override bool Equals(object obj); // 0x00A5BA04-0x00A5BA20
		public bool Equals(ushort obj); // 0x00A5BA20-0x00A5BA3C
		public override int GetHashCode(); // 0x00A5BA3C-0x00A5BA44
		public override string ToString(); // 0x00A5BA44-0x00A5BAA0
		public string ToString(IFormatProvider provider); // 0x00A5BAA0-0x00A5BB04
		public string ToString(string format, IFormatProvider provider); // 0x00A5BB04-0x00A5BB38
		[CLSCompliant] // 0x001441B0-0x001441C4
		public static ushort Parse(string s, IFormatProvider provider); // 0x00A5BB38-0x00A5BB64
		[CLSCompliant] // 0x001441C4-0x001441D8
		public static ushort Parse(string s, NumberStyles style, IFormatProvider provider); // 0x00A5BD18-0x00A5BD58
		private static ushort Parse(string s, NumberStyles style, NumberFormatInfo info); // 0x00A5BB64-0x00A5BD18
		public TypeCode GetTypeCode(); // 0x00A5BD58-0x00A5BDE8
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x00A5BDE8-0x00A5BE78
		char IConvertible.ToChar(IFormatProvider provider); // 0x00A5BE78-0x00A5BF08
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x00A5BF08-0x00A5BF98
		byte IConvertible.ToByte(IFormatProvider provider); // 0x00A5BF98-0x00A5C028
		short IConvertible.ToInt16(IFormatProvider provider); // 0x00A5C028-0x00A5C030
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x00A5C030-0x00A5C0C0
		int IConvertible.ToInt32(IFormatProvider provider); // 0x00A5C0C0-0x00A5C150
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x00A5C150-0x00A5C1E0
		long IConvertible.ToInt64(IFormatProvider provider); // 0x00A5C1E0-0x00A5C270
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x00A5C270-0x00A5C300
		float IConvertible.ToSingle(IFormatProvider provider); // 0x00A5C300-0x00A5C390
		double IConvertible.ToDouble(IFormatProvider provider); // 0x00A5C390-0x00A5C428
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x00A5C428-0x00A5C568
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x00A5C568-0x00A5C638
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x00A5C638-0x00A5C744
	}

	[Serializable]
	[CLSCompliant] // 0x0013B0B0-0x0013B0E8
	[ComVisible] // 0x0013B0B0-0x0013B0E8
	public struct UInt32 : IComparable, IFormattable, IConvertible, IComparable<uint>, IEquatable<uint> // TypeDefIndex: 302
	{
		// Fields
		private uint m_value; // 0x00
		public const uint MaxValue = 4294967295; // Metadata: 0x00203A2E
		public const uint MinValue = 0; // Metadata: 0x00203A32
	
		// Methods
		public int CompareTo(object value); // 0x00A5C744-0x00A5C74C
		public int CompareTo(uint value); // 0x00A5C74C-0x00A5C7F8
		public override bool Equals(object obj); // 0x00A5C7F8-0x00A5C800
		public bool Equals(uint obj); // 0x00A5C800-0x00A5C81C
		public override int GetHashCode(); // 0x00A5C81C-0x00A5C850
		public override string ToString(); // 0x00A5C850-0x00A5C87C
		public string ToString(IFormatProvider provider); // 0x00A5C87C-0x00A5C8E0
		public string ToString(string format, IFormatProvider provider); // 0x00A5C8E0-0x00A5C914
		[CLSCompliant] // 0x001441D8-0x001441EC
		public static uint Parse(string s, IFormatProvider provider); // 0x00A5C914-0x00A5C944
		[CLSCompliant] // 0x001441EC-0x00144200
		public static uint Parse(string s, NumberStyles style, IFormatProvider provider); // 0x00A5C944-0x00A5C988
		[CLSCompliant] // 0x00144200-0x00144214
		public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out uint result); // 0x00A5C988-0x00A5C9E0
		public TypeCode GetTypeCode(); // 0x00A5C9E0-0x00A5CA70
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x00A5CA70-0x00A5CB00
		char IConvertible.ToChar(IFormatProvider provider); // 0x00A5CB00-0x00A5CB90
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x00A5CB90-0x00A5CC20
		byte IConvertible.ToByte(IFormatProvider provider); // 0x00A5CC20-0x00A5CCB0
		short IConvertible.ToInt16(IFormatProvider provider); // 0x00A5CCB0-0x00A5CD40
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x00A5CD40-0x00A5CDD0
		int IConvertible.ToInt32(IFormatProvider provider); // 0x00A5CDD0-0x00A5CDD8
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x00A5CDD8-0x00A5CE68
		long IConvertible.ToInt64(IFormatProvider provider); // 0x00A5CE68-0x00A5CEF8
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x00A5CEF8-0x00A5CF88
		float IConvertible.ToSingle(IFormatProvider provider); // 0x00A5CF88-0x00A5D018
		double IConvertible.ToDouble(IFormatProvider provider); // 0x00A5D018-0x00A5D0B0
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x00A5D0B0-0x00A5D1F0
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x00A5D1F0-0x00A5D2C0
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x00A5D2C0-0x00A5D3E0
	}

	[Serializable]
	[CLSCompliant] // 0x0013B0E8-0x0013B120
	[ComVisible] // 0x0013B0E8-0x0013B120
	public struct UInt64 : IComparable, IFormattable, IConvertible, IComparable<ulong>, IEquatable<ulong> // TypeDefIndex: 303
	{
		// Fields
		private ulong m_value; // 0x00
		public const ulong MaxValue = 18446744073709551615; // Metadata: 0x00203A36
		public const ulong MinValue = 0; // Metadata: 0x00203A3E
	
		// Methods
		public int CompareTo(object value); // 0x00A5D3E0-0x00A5D41C
		public int CompareTo(ulong value); // 0x00A5D41C-0x00A5D4E4
		public override bool Equals(object obj); // 0x00A5D4E4-0x00A5D4EC
		public bool Equals(ulong obj); // 0x00A5D4EC-0x00A5D514
		public override int GetHashCode(); // 0x00A5D514-0x00A5D55C
		public override string ToString(); // 0x00A5D55C-0x00A5D5D8
		public string ToString(IFormatProvider provider); // 0x00A5D5D8-0x00A5D658
		public string ToString(string format); // 0x00A5D658-0x00A5D6DC
		public string ToString(string format, IFormatProvider provider); // 0x00A5D6DC-0x00A5D720
		[CLSCompliant] // 0x00144214-0x00144228
		public static ulong Parse(string s, IFormatProvider provider); // 0x00A5D720-0x00A5D750
		[CLSCompliant] // 0x00144228-0x0014423C
		public static ulong Parse(string s, NumberStyles style, IFormatProvider provider); // 0x00A5D750-0x00A5D794
		public TypeCode GetTypeCode(); // 0x00A5D794-0x00A5D828
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x00A5D828-0x00A5D8BC
		char IConvertible.ToChar(IFormatProvider provider); // 0x00A5D8BC-0x00A5D950
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x00A5D950-0x00A5D9E4
		byte IConvertible.ToByte(IFormatProvider provider); // 0x00A5D9E4-0x00A5DA78
		short IConvertible.ToInt16(IFormatProvider provider); // 0x00A5DA78-0x00A5DB0C
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x00A5DB0C-0x00A5DBA0
		int IConvertible.ToInt32(IFormatProvider provider); // 0x00A5DBA0-0x00A5DC34
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x00A5DC34-0x00A5DCC8
		long IConvertible.ToInt64(IFormatProvider provider); // 0x00A5DCC8-0x00A5DCD0
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x00A5DCD0-0x00A5DD64
		float IConvertible.ToSingle(IFormatProvider provider); // 0x00A5DD64-0x00A5DDF8
		double IConvertible.ToDouble(IFormatProvider provider); // 0x00A5DDF8-0x00A5DEA4
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x00A5DEA4-0x00A5DFE4
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x00A5DFE4-0x00A5E0B4
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x00A5E0B4-0x00A5E0BC
	}

	[Serializable]
	[ComVisible] // 0x0013B120-0x0013B134
	public class UnauthorizedAccessException : SystemException // TypeDefIndex: 304
	{
		// Constructors
		public UnauthorizedAccessException(); // 0x00A5E4E4-0x00A5E56C
		public UnauthorizedAccessException(string message); // 0x00A5E56C-0x00A5E598
		protected UnauthorizedAccessException(SerializationInfo info, StreamingContext context); // 0x00A5E598-0x00A5E5B8
	}

	[Serializable]
	[ComVisible] // 0x0013B134-0x0013B148
	public class UnhandledExceptionEventArgs : EventArgs // TypeDefIndex: 305
	{
		// Fields
		private object _Exception; // 0x08
		private bool _IsTerminating; // 0x0C
	
		// Properties
		public object ExceptionObject { [ReliabilityContract] /* 0x0014423C-0x00144254 */ get; } // 0x00A5E64C-0x00A5E654 
		public bool IsTerminating { [ReliabilityContract] /* 0x00144254-0x0014426C */ get; } // 0x00A5E654-0x00A5E65C 
	
		// Constructors
		public UnhandledExceptionEventArgs(object exception, bool isTerminating); // 0x00A5E5B8-0x00A5E64C
	}

	[Serializable]
	[ComVisible] // 0x0013B148-0x0013B15C
	public delegate void UnhandledExceptionEventHandler(object sender, UnhandledExceptionEventArgs e); // TypeDefIndex: 306; 0x00A5E670-0x00A5EEF8

	[Serializable]
	internal class UnitySerializationHolder : ISerializable, IObjectReference // TypeDefIndex: 307
	{
		// Fields
		private Type[] m_instantiation; // 0x08
		private int[] m_elementTypes; // 0x0C
		private int m_genericParameterPosition; // 0x10
		private Type m_declaringType; // 0x14
		private MethodBase m_declaringMethod; // 0x18
		private string m_data; // 0x1C
		private string m_assemblyName; // 0x20
		private int m_unityType; // 0x24
	
		// Constructors
		internal UnitySerializationHolder(SerializationInfo info, StreamingContext context); // 0x00A5FC84-0x00A60024
	
		// Methods
		internal static void GetUnitySerializationInfo(SerializationInfo info, Missing missing); // 0x00A5EF3C-0x00A5F02C
		internal static RuntimeType AddElementTypes(SerializationInfo info, RuntimeType type); // 0x00A5F02C-0x00A5F3D4
		internal Type MakeElementTypes(Type type); // 0x00A5F3D4-0x00A5F5F0
		internal static void GetUnitySerializationInfo(SerializationInfo info, RuntimeType type); // 0x00A5F5F0-0x00A5FA90
		internal static void GetUnitySerializationInfo(SerializationInfo info, int unityType, string data, RuntimeAssembly assembly); // 0x00A5FA90-0x00A5FC84
		private void ThrowInsufficientInformation(string field); // 0x00A60024-0x00A60114
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00A60114-0x00A601BC
		public virtual object GetRealObject(StreamingContext context); // 0x00A601BC-0x00A6091C
	}

	internal struct UnSafeCharBuffer // TypeDefIndex: 308
	{
		// Fields
		private unsafe char* m_buffer; // 0x00
		private int m_totalSize; // 0x04
		private int m_length; // 0x08
	
		// Constructors
		public unsafe UnSafeCharBuffer(char* buffer, int bufferSize); // 0x00A5E378-0x00A5E4DC
	
		// Methods
		public void AppendString(string stringToAppend); // 0x00A5E4DC-0x00A5E4E4
	}

	[Serializable]
	[ComVisible] // 0x0013B15C-0x0013B170
	public sealed class Version : ICloneable, IComparable, IComparable<System.Version>, IEquatable<System.Version> // TypeDefIndex: 309
	{
		// Fields
		private int _Major; // 0x08
		private int _Minor; // 0x0C
		private int _Build; // 0x10
		private int _Revision; // 0x14
		private static readonly char[] SeparatorsArray; // 0x00
		private const int ZERO_CHAR_VALUE = 48; // Metadata: 0x00203A46
	
		// Properties
		public int Major { get; } // 0x00A61B1C-0x00A61B24 
		public int Minor { get; } // 0x00A61B24-0x00A61B2C 
		public int Build { get; } // 0x00A61B2C-0x00A61B34 
		public int Revision { get; } // 0x00A61B34-0x00A61B3C 
	
		// Nested types
		internal enum ParseFailureKind // TypeDefIndex: 310
		{
			ArgumentNullException = 0,
			ArgumentException = 1,
			ArgumentOutOfRangeException = 2,
			FormatException = 3
		}
	
		internal struct VersionResult // TypeDefIndex: 311
		{
			// Fields
			internal Version m_parsedVersion; // 0x00
			internal ParseFailureKind m_failure; // 0x04
			internal string m_exceptionArgument; // 0x08
			internal string m_argumentName; // 0x0C
			internal bool m_canThrow; // 0x10
	
			// Methods
			internal void Init(string argumentName, bool canThrow); // 0x00A63118-0x00A63124
			internal void SetFailure(ParseFailureKind failure); // 0x00A63124-0x00A6312C
			internal void SetFailure(ParseFailureKind failure, string argument); // 0x00A6312C-0x00A63134
			internal Exception GetVersionParseException(); // 0x00A63134-0x00A6313C
		}
	
		// Constructors
		public Version(int major, int minor, int build, int revision); // 0x00A61350-0x00A61594
		public Version(int major, int minor, int build); // 0x00A61594-0x00A61764
		public Version(int major, int minor); // 0x00A61764-0x00A618C0
		public Version(string version); // 0x00A618C0-0x00A619D0
		public Version(); // 0x00A61B3C-0x00A61B70
		static Version(); // 0x00A6300C-0x00A63118
	
		// Methods
		public object Clone(); // 0x00A61B70-0x00A61C60
		public int CompareTo(object version); // 0x00A61C60-0x00A61DD0
		public int CompareTo(Version value); // 0x00A61DEC-0x00A61EE4
		public override bool Equals(object obj); // 0x00A61EE4-0x00A61FE4
		public bool Equals(Version obj); // 0x00A61FE4-0x00A620D0
		public override int GetHashCode(); // 0x00A620D0-0x00A62100
		public override string ToString(); // 0x00A62100-0x00A62128
		public string ToString(int fieldCount); // 0x00A62128-0x00A626D0
		private static void AppendPositiveNumber(int num, StringBuilder sb); // 0x00A626D0-0x00A62754
		public static Version Parse(string input); // 0x00A619D0-0x00A61B1C
		private static bool TryParseVersion(string version, ref VersionResult result); // 0x00A62754-0x00A62DF0
		private static bool TryParseComponent(string component, string componentName, ref VersionResult result, out int parsedComponent); // 0x00A62DF0-0x00A62F68
		public static bool operator ==(Version v1, Version v2); // 0x00A61DD0-0x00A61DEC
		public static bool operator !=(Version v1, Version v2); // 0x00A62F68-0x00A6300C
	}

	[ClassInterface] // 0x0013B170-0x0013B1A8
	[ComVisible] // 0x0013B170-0x0013B1A8
	public sealed class AppDomain : MarshalByRefObject, IEvidenceFactory, _AppDomain // TypeDefIndex: 312
	{
		// Fields
		private IntPtr _mono_app_domain; // 0x0C
		private static string _process_guid; // 0x00
		[ThreadStatic] // 0x00142408-0x00142418
		private static Dictionary<string, object> type_resolve_in_progress; // 0x80000000
		[ThreadStatic] // 0x00142418-0x00142428
		private static Dictionary<string, object> assembly_resolve_in_progress; // 0x80000004
		[ThreadStatic] // 0x00142428-0x00142438
		private static Dictionary<string, object> assembly_resolve_in_progress_refonly; // 0x80000008
		private object _evidence; // 0x10
		private object _granted; // 0x14
		private int _principalPolicy; // 0x18
		[ThreadStatic] // 0x00142438-0x00142448
		private static object _principal; // 0x8000000C
		private static AppDomain default_domain; // 0x04
		[CompilerGenerated] // 0x00142448-0x00142458
		private AssemblyLoadEventHandler AssemblyLoad; // 0x1C
		[CompilerGenerated] // 0x00142458-0x00142468
		private ResolveEventHandler AssemblyResolve; // 0x20
		[CompilerGenerated] // 0x00142468-0x00142478
		private EventHandler DomainUnload; // 0x24
		[CompilerGenerated] // 0x00142478-0x00142488
		private EventHandler ProcessExit; // 0x28
		[CompilerGenerated] // 0x00142488-0x00142498
		private ResolveEventHandler ResourceResolve; // 0x2C
		[CompilerGenerated] // 0x00142498-0x001424A8
		private ResolveEventHandler TypeResolve; // 0x30
		[CompilerGenerated] // 0x001424A8-0x001424B8
		private UnhandledExceptionEventHandler UnhandledException; // 0x34
		[CompilerGenerated] // 0x001424B8-0x001424C8
		private EventHandler<FirstChanceExceptionEventArgs> FirstChanceException; // 0x38
		private object _domain_manager; // 0x3C
		[CompilerGenerated] // 0x001424C8-0x001424D8
		private ResolveEventHandler ReflectionOnlyAssemblyResolve; // 0x40
		private object _activation; // 0x44
		private object _applicationIdentity; // 0x48
		private List<string> compatibility_switch; // 0x4C
	
		// Properties
		public static AppDomain CurrentDomain { get; } // 0x004EB968-0x004EB96C 
	
		// Events
		public event EventHandler DomainUnload {
			add; // 0x004ECA7C-0x004ECB88
			remove; // 0x004ECB88-0x004ECC94
		}
		public event UnhandledExceptionEventHandler UnhandledException {
			add; // 0x004ECC94-0x004ECDA0
			remove; // 0x004ECDA0-0x004ECEAC
		}
	
		// Constructors
		private AppDomain(); // 0x004EB958-0x004EB960
	
		// Methods
		private string getFriendlyName(); // 0x004EB960-0x004EB964
		private static AppDomain getCurDomain(); // 0x004EB964-0x004EB968
		private Assembly[] GetAssemblies(bool refOnly); // 0x004EB96C-0x004EB970
		public Assembly[] GetAssemblies(); // 0x004EB970-0x004EB978
		public object GetData(string name); // 0x004EB978-0x004EB97C
		public override object InitializeLifetimeService(); // 0x004EB97C-0x004EB984
		internal Assembly LoadAssembly(string assemblyRef, Evidence securityEvidence, bool refOnly); // 0x004EB984-0x004EB988
		public Assembly Load(string assemblyString); // 0x004EB988-0x004EB9A8
		internal Assembly Load(string assemblyString, Evidence assemblySecurity, bool refonly); // 0x004EB9A8-0x004EBB24
		private static AppDomain InternalSetDomainByID(int domain_id); // 0x004EBB24-0x004EBB28
		private static AppDomain InternalSetDomain(AppDomain context); // 0x004EBB28-0x004EBB2C
		internal static void InternalPushDomainRefByID(int domain_id); // 0x004EBB2C-0x004EBB30
		internal static void InternalPopDomainRef(); // 0x004EBB30-0x004EBB34
		internal static Context InternalSetContext(Context context); // 0x004EBB34-0x004EBB38
		internal static Context InternalGetContext(); // 0x004EBB38-0x004EBB3C
		internal static Context InternalGetDefaultContext(); // 0x004EBB3C-0x004EBB40
		internal static string InternalGetProcessGuid(string newguid); // 0x004EBB40-0x004EBB44
		internal static object InvokeInDomainByID(int domain_id, MethodInfo method, object obj, object[] args); // 0x004EBB44-0x004EBDC8
		internal static string GetProcessGuid(); // 0x004EBDC8-0x004EBEBC
		private static bool InternalIsFinalizingForUnload(int domain_id); // 0x004EBEBC-0x004EBEC0
		public bool IsFinalizingForUnload(); // 0x004EBEC0-0x004EBED8
		private int getDomainID(); // 0x004EBED8-0x004EBEE0
		public override string ToString(); // 0x004EBEE0-0x004EBEE4
		private void DoAssemblyLoad(Assembly assembly); // 0x004EBEE4-0x004EBF78
		private Assembly DoAssemblyResolve(string name, Assembly requestingAssembly, bool refonly); // 0x004EBF78-0x004EC3B8
		internal Assembly DoTypeResolve(object name_or_tb); // 0x004EC3B8-0x004EC804
		private void DoDomainUnload(); // 0x004EC804-0x004EC820
		internal byte[] GetMarshalledDomainObjRef(); // 0x004EC820-0x004EC92C
		internal void ProcessMessageInDomain(byte[] arrRequest, CADMethodCallMessage cadMsg, out byte[] arrResponse, out CADMethodReturnMessage cadMrm); // 0x004EC92C-0x004ECA7C
	}

	[FriendAccessAllowed] // 0x0013B1A8-0x0013B1B8
	internal class CLRConfig // TypeDefIndex: 313
	{
		// Methods
		internal static bool CheckThrowUnobservedTaskExceptions(); // 0x00775158-0x0077515C
	}

	internal static class CompatibilitySwitches // TypeDefIndex: 314
	{
		// Fields
		public static readonly bool IsAppEarlierThanSilverlight4; // 0x00
		public static readonly bool IsAppEarlierThanWindowsPhone8; // 0x01
	
		// Constructors
		static CompatibilitySwitches(); // 0x00322AB0-0x00322AB4
	}

	[ComVisible] // 0x0013B1B8-0x0013B1CC
	public static class Environment // TypeDefIndex: 315
	{
		// Fields
		private const int mono_corlib_version = 1051100001; // Metadata: 0x00203A5A
		private static string nl; // 0x00
		private static OperatingSystem os; // 0x04
	
		// Properties
		public static int CurrentManagedThreadId { get; } // 0x0056D8A0-0x0056D8D4 
		public static bool HasShutdownStarted { get; } // 0x0056D8D4-0x0056D8D8 
		public static string NewLine { get; } // 0x00565BB8-0x00565C48 
		private static PlatformID Platform { get; } // 0x0056D8DC-0x0056D8E0 
		public static OperatingSystem OSVersion { get; } // 0x0056D8E4-0x0056D9B0 
		public static string StackTrace { get; } // 0x0056DC38-0x0056DCC8 
		public static int TickCount { get; } // 0x0056DCC8-0x0056DCCC 
		public static bool Is64BitProcess { get; } // 0x0056EF20-0x0056EF44 
		public static int ProcessorCount { get; } // 0x0056EF44-0x0056EF48 
		internal static bool IsRunningOnWindows { get; } // 0x0056E040-0x0056E060 
	
		// Nested types
		[ComVisible] // 0x0013B1CC-0x0013B1E0
		public enum SpecialFolder // TypeDefIndex: 316
		{
			Desktop = 0,
			Programs = 2,
			MyDocuments = 5,
			Personal = 5,
			Favorites = 6,
			Startup = 7,
			Recent = 8,
			SendTo = 9,
			StartMenu = 11,
			MyMusic = 13,
			MyVideos = 14,
			DesktopDirectory = 16,
			MyComputer = 17,
			NetworkShortcuts = 19,
			Fonts = 20,
			Templates = 21,
			CommonStartMenu = 22,
			CommonPrograms = 23,
			CommonStartup = 24,
			CommonDesktopDirectory = 25,
			ApplicationData = 26,
			PrinterShortcuts = 27,
			LocalApplicationData = 28,
			InternetCache = 32,
			Cookies = 33,
			History = 34,
			CommonApplicationData = 35,
			Windows = 36,
			System = 37,
			ProgramFiles = 38,
			MyPictures = 39,
			UserProfile = 40,
			SystemX86 = 41,
			ProgramFilesX86 = 42,
			CommonProgramFiles = 43,
			CommonProgramFilesX86 = 44,
			CommonTemplates = 45,
			CommonDocuments = 46,
			CommonAdminTools = 47,
			AdminTools = 48,
			CommonMusic = 53,
			CommonPictures = 54,
			CommonVideos = 55,
			Resources = 56,
			LocalizedResources = 57,
			CommonOemLinks = 58,
			CDBurning = 59
		}
	
		public enum SpecialFolderOption // TypeDefIndex: 317
		{
			None = 0,
			DoNotVerify = 16384,
			Create = 32768
		}
	
		// Methods
		internal static string GetResourceString(string key); // 0x00555BDC-0x00555BE0
		internal static string GetResourceString(string key, params /* 0x00146288-0x00146298 */ object[] values); // 0x00558018-0x005580AC
		internal static string GetResourceStringEncodingName(int codePage); // 0x0056D728-0x0056D8A0
		private static string GetNewLine(); // 0x0056D8D8-0x0056D8DC
		internal static string GetOSVersionString(); // 0x0056D8E0-0x0056D8E4
		internal static System.Version CreateVersionFromString(string info); // 0x0056D9B0-0x0056DC38
		public static void Exit(int exitCode); // 0x0056DCCC-0x0056DCD0
		public static string ExpandEnvironmentVariables(string name); // 0x0056DCD0-0x0056E03C
		internal static string internalGetEnvironmentVariable_native(IntPtr variable); // 0x0056E1A8-0x0056E1AC
		internal static string internalGetEnvironmentVariable(string variable); // 0x0056E1AC-0x0056E25C
		public static string GetEnvironmentVariable(string variable); // 0x0056E03C-0x0056E040
		private static Hashtable GetEnvironmentVariablesNoCase(); // 0x0056E060-0x0056E1A8
		public static string GetFolderPath(SpecialFolder folder); // 0x0056E260-0x0056E268
		private static string GetWindowsFolderPath(int folder); // 0x0056E2A0-0x0056E2A4
		public static string GetFolderPath(SpecialFolder folder, SpecialFolderOption option); // 0x0056E268-0x0056E2A0
		private static string ReadXdgUserDir(string config_dir, string home_dir, string key, string fallback); // 0x0056E8DC-0x0056EE64
		internal static string UnixGetFolderPath(SpecialFolder folder, SpecialFolderOption option); // 0x0056E2A4-0x0056E8DC
		public static void FailFast(string message, Exception exception); // 0x0056EE68-0x0056EEFC
		private static string[] GetEnvironmentVariableNames(); // 0x0056E25C-0x0056E260
		internal static string GetMachineConfigPath(); // 0x0056EF48-0x0056EF4C
		internal static string internalGetHome(); // 0x0056EE64-0x0056EE68
		internal static int GetPageSize(); // 0x0056EF4C-0x0056EF50
		internal static string GetStackTrace(Exception e, bool needFileInfo); // 0x0056EF50-0x0056F008
	}

	internal static class ParseNumbers // TypeDefIndex: 318
	{
		// Methods
		public static int StringToInt(string value, int fromBase, int flags); // 0x007490F0-0x0074910C
		public static unsafe int StringToInt(string value, int fromBase, int flags, int* parsePos); // 0x0074910C-0x007496E0
		public static unsafe long StringToLong(string value, int fromBase, int flags, int* parsePos); // 0x007496E0-0x00749DE0
		public static string IntToString(int value, int toBase, int width, char paddingChar, int flags); // 0x00749DE0-0x0074A06C
		private static void EndianSwap(ref byte[] value); // 0x0074A6B0-0x0074A860
		private static StringBuilder ConvertToBase2(byte[] value); // 0x0074A06C-0x0074A208
		private static StringBuilder ConvertToBase8(byte[] value); // 0x0074A208-0x0074A47C
		private static StringBuilder ConvertToBase16(byte[] value); // 0x0074A47C-0x0074A6B0
	}

	internal class MonoTypeInfo // TypeDefIndex: 319
	{
		// Fields
		public string full_name; // 0x08
		public MonoCMethod default_ctor; // 0x0C
	
		// Constructors
		public MonoTypeInfo(); // 0x002B7A18-0x002B7A7C
	}

	internal sealed class TypeNameParser // TypeDefIndex: 320
	{
		// Methods
		internal static Type GetType(string typeName, Func<AssemblyName, Assembly> assemblyResolver, Func<Assembly, string, bool, Type> typeResolver, bool throwOnError, bool ignoreCase, ref StackCrawlMark stackMark); // 0x00A52A60-0x00A52AB4
	}

	[Serializable]
	[ClassInterface] // 0x0013B1E0-0x0013B218
	[ComVisible] // 0x0013B1E0-0x0013B218
	public sealed class AppDomainSetup : IAppDomainSetup // TypeDefIndex: 321
	{
		// Fields
		private string application_base; // 0x08
		private string application_name; // 0x0C
		private string cache_path; // 0x10
		private string configuration_file; // 0x14
		private string dynamic_base; // 0x18
		private string license_file; // 0x1C
		private string private_bin_path; // 0x20
		private string private_bin_path_probe; // 0x24
		private string shadow_copy_directories; // 0x28
		private string shadow_copy_files; // 0x2C
		private bool publisher_policy; // 0x30
		private bool path_changed; // 0x31
		private int loader_optimization; // 0x34
		private bool disallow_binding_redirects; // 0x38
		private bool disallow_code_downloads; // 0x39
		private object _activationArguments; // 0x3C
		private object domain_initializer; // 0x40
		private object application_trust; // 0x44
		private string[] domain_initializer_args; // 0x48
		private bool disallow_appbase_probe; // 0x4C
		private byte[] configuration_bytes; // 0x50
		private byte[] serialized_non_primitives; // 0x54
		[CompilerGenerated] // 0x001424D8-0x001424E8
		private string <TargetFrameworkName>k__BackingField; // 0x58
	
		// Constructors
		public AppDomainSetup(); // 0x00763D34-0x00763D3C
	}

	public struct ArgIterator // TypeDefIndex: 322
	{
		// Fields
		private IntPtr sig; // 0x00
		private IntPtr args; // 0x04
		private int next_arg; // 0x08
		private int num_args; // 0x0C
	
		// Methods
		public override bool Equals(object o); // 0x00764134-0x00764144
		public override int GetHashCode(); // 0x00764144-0x00764150
	}

	[ComVisible] // 0x0013B218-0x0013B22C
	public class AssemblyLoadEventArgs : EventArgs // TypeDefIndex: 323
	{
		// Fields
		private Assembly m_loadedAssembly; // 0x08
	
		// Constructors
		public AssemblyLoadEventArgs(Assembly loadedAssembly); // 0x0076D8B8-0x0076D944
	}

	[Serializable]
	[ComVisible] // 0x0013B22C-0x0013B240
	public delegate void AssemblyLoadEventHandler(object sender, AssemblyLoadEventArgs args); // TypeDefIndex: 324; 0x0076D958-0x0076E1E0

	public static class Console // TypeDefIndex: 325
	{
		// Fields
		internal static TextWriter stdout; // 0x00
		private static TextWriter stderr; // 0x04
		private static TextReader stdin; // 0x08
		private static Encoding inputEncoding; // 0x0C
		private static Encoding outputEncoding; // 0x10
		private static ConsoleCancelEventHandler cancel_event; // 0x14
		private static readonly InternalCancelHandler cancel_handler; // 0x18
	
		// Properties
		public static TextWriter Error { get; } // 0x00323734-0x003237C0 
		public static Encoding InputEncoding { get; } // 0x00323A20-0x00323AAC 
		public static Encoding OutputEncoding { get; } // 0x00323AAC-0x00323B38 
	
		// Nested types
		private class WindowsConsole // TypeDefIndex: 326
		{
			// Fields
			public static bool ctrlHandlerAdded; // 0x00
			private static WindowsCancelHandler cancelHandler; // 0x04
	
			// Nested types
			private delegate bool WindowsCancelHandler(int keyCode); // TypeDefIndex: 327; 0x00325120-0x003255C4
	
			// Constructors
			static WindowsConsole(); // 0x00325044-0x003250E8
	
			// Methods
			private static extern int GetConsoleCP(); // 0x00324DC8-0x00324EB8
			private static extern int GetConsoleOutputCP(); // 0x00324EB8-0x00324FB4
			private static bool DoWindowsConsoleCancelEvent(int keyCode); // 0x00324FB4-0x00325044
			public static int GetInputCodePage(); // 0x00322D74-0x00322DEC
			public static int GetOutputCodePage(); // 0x00322DEC-0x00322E64
		}
	
		private delegate void InternalCancelHandler(); // TypeDefIndex: 328; 0x00324950-0x00324D8C
	
		// Constructors
		static Console(); // 0x00322AB4-0x00322D60
	
		// Methods
		private static void SetupStreams(Encoding inputEncoding, Encoding outputEncoding); // 0x00322E64-0x003232F0
		private static Stream Open(IntPtr handle, FileAccess access, int bufferSize); // 0x003237C0-0x00323930
		public static Stream OpenStandardError(int bufferSize); // 0x00323674-0x00323734
		public static Stream OpenStandardInput(int bufferSize); // 0x003234F4-0x003235B4
		public static Stream OpenStandardOutput(int bufferSize); // 0x003235B4-0x00323674
		public static void SetOut(TextWriter newOut); // 0x00323930-0x00323A20
		public static ConsoleKeyInfo ReadKey(); // 0x00323B38-0x00323BBC
		public static ConsoleKeyInfo ReadKey(bool intercept); // 0x00323BBC-0x00323C44
		internal static void DoConsoleCancelEvent(); // 0x00323D68-0x00324020
	}

	internal static class ConsoleDriver // TypeDefIndex: 329
	{
		// Fields
		internal static IConsoleDriver driver; // 0x00
		private static bool is_console; // 0x04
		private static bool called_isatty; // 0x05
	
		// Properties
		public static bool IsConsole { get; } // 0x003232F0-0x003234F4 
	
		// Constructors
		static ConsoleDriver(); // 0x003256F0-0x003257E0
	
		// Methods
		private static IConsoleDriver CreateNullConsoleDriver(); // 0x003257E0-0x0032584C
		private static IConsoleDriver CreateWindowsConsoleDriver(); // 0x0032584C-0x003258B8
		private static IConsoleDriver CreateTermInfoDriver(string term); // 0x003258B8-0x0032592C
		public static ConsoleKeyInfo ReadKey(bool intercept); // 0x00323C44-0x00323D68
		private static bool Isatty(IntPtr handle); // 0x0032592C-0x00325930
		internal static int InternalKeyAvailable(int ms_timeout); // 0x00325930-0x00325934
		internal static unsafe bool TtySetup(string keypadXmit, string teardown, out byte[] control_characters, out int* address); // 0x00325934-0x00325938
		internal static bool SetEcho(bool wantEcho); // 0x00325938-0x00325A74
	}

	internal sealed class DelegateData // TypeDefIndex: 330
	{
		// Fields
		public Type target_type; // 0x08
		public string method_name; // 0x0C
		public bool curried_first_arg; // 0x10
	
		// Constructors
		public DelegateData(); // 0x00562134-0x0056213C
	}

	[Serializable]
	[ClassInterface] // 0x0013B240-0x0013B278
	[ComVisible] // 0x0013B240-0x0013B278
	public abstract class Delegate : ICloneable, ISerializable // TypeDefIndex: 331
	{
		// Fields
		private IntPtr method_ptr; // 0x08
		private IntPtr invoke_impl; // 0x0C
		private object m_target; // 0x10
		private IntPtr method; // 0x14
		private IntPtr delegate_trampoline; // 0x18
		private IntPtr extra_arg; // 0x1C
		private IntPtr method_code; // 0x20
		private MethodInfo method_info; // 0x24
		private MethodInfo original_method_info; // 0x28
		private DelegateData data; // 0x2C
		private bool method_is_virtual; // 0x30
	
		// Properties
		public MethodInfo Method { get; } // 0x00560ECC-0x00560EDC 
		public object Target { get; } // 0x00560EE0-0x00560EE8 
	
		// Methods
		private MethodInfo GetVirtualMethod_internal(); // 0x00560EDC-0x00560EE0
		internal static Delegate CreateDelegate_internal(Type type, object target, MethodInfo info, bool throwOnBindFailure); // 0x00560EE8-0x00560EEC
		private static bool arg_type_match(Type delArgType, Type argType); // 0x00560EEC-0x0056112C
		private static bool arg_type_match_this(Type delArgType, Type argType, bool boxedThis); // 0x00561238-0x00561414
		private static bool return_type_match(Type delReturnType, Type returnType); // 0x00561414-0x00561500
		public static Delegate CreateDelegate(Type type, object firstArgument, MethodInfo method, bool throwOnBindFailure); // 0x00561500-0x00561520
		private static Delegate CreateDelegate(Type type, object firstArgument, MethodInfo method, bool throwOnBindFailure, bool allowClosed); // 0x00561520-0x00562134
		public static Delegate CreateDelegate(Type type, object firstArgument, MethodInfo method); // 0x0056213C-0x00562160
		public static Delegate CreateDelegate(Type type, MethodInfo method, bool throwOnBindFailure); // 0x00562160-0x0056218C
		public static Delegate CreateDelegate(Type type, MethodInfo method); // 0x0056218C-0x005621B8
		public static Delegate CreateDelegate(Type type, object target, string method); // 0x005621B8-0x005621DC
		private static MethodInfo GetCandidateMethod(Type type, Type target, string method, BindingFlags bflags, bool ignoreCase, bool throwOnBindFailure); // 0x005621FC-0x00562770
		public static Delegate CreateDelegate(Type type, Type target, string method, bool ignoreCase, bool throwOnBindFailure); // 0x00562770-0x005628C0
		public static Delegate CreateDelegate(Type type, Type target, string method); // 0x005628C0-0x005628E4
		public static Delegate CreateDelegate(Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure); // 0x005628E4-0x00562A04
		public static Delegate CreateDelegate(Type type, object target, string method, bool ignoreCase); // 0x005621DC-0x005621FC
		public object DynamicInvoke(params /* 0x00146298-0x001462A8 */ object[] args); // 0x00562A04-0x00562A14
		private void InitializeDelegateData(); // 0x00562A14-0x00562B6C
		protected virtual object DynamicInvokeImpl(object[] args); // 0x00562B6C-0x00562FCC
		public virtual object Clone(); // 0x00562FCC-0x00562FD4
		public override bool Equals(object obj); // 0x00562FD4-0x00563208
		public override int GetHashCode(); // 0x00563208-0x0056328C
		protected virtual MethodInfo GetMethodImpl(); // 0x0056328C-0x005633F0
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x005633F0-0x00563408
		public virtual Delegate[] GetInvocationList(); // 0x005636F0-0x005637BC
		public static Delegate Combine(Delegate a, Delegate b); // 0x005637BC-0x005639F0
		[ComVisible] // 0x001442AC-0x001442C0
		public static Delegate Combine(params /* 0x001462A8-0x001462B8 */ Delegate[] delegates); // 0x005639F0-0x00563A60
		protected virtual Delegate CombineImpl(Delegate d); // 0x00563A60-0x00563B04
		public static Delegate Remove(Delegate source, Delegate value); // 0x00563B04-0x00563D38
		protected virtual Delegate RemoveImpl(Delegate d); // 0x00563D38-0x00563D68
		internal static Delegate CreateDelegateNoSecurityCheck(RuntimeType type, object firstArgument, MethodInfo method); // 0x00563D68-0x00563D70
		internal static MulticastDelegate AllocDelegateLike_internal(Delegate d); // 0x00563D70-0x00563D74
	}

	[Serializable]
	internal class DelegateSerializationHolder : ISerializable, IObjectReference // TypeDefIndex: 332
	{
		// Fields
		private Delegate _delegate; // 0x08
	
		// Nested types
		[Serializable]
		private class DelegateEntry // TypeDefIndex: 333
		{
			// Fields
			private string type; // 0x08
			private string assembly; // 0x0C
			private object target; // 0x10
			private string targetTypeAssembly; // 0x14
			private string targetTypeName; // 0x18
			private string methodName; // 0x1C
			public DelegateEntry delegateEntry; // 0x20
	
			// Constructors
			public DelegateEntry(Delegate del, string targetLabel); // 0x00564370-0x00564594
	
			// Methods
			public Delegate DeserializeDelegate(SerializationInfo info, int index); // 0x00564024-0x00564370
		}
	
		// Constructors
		private DelegateSerializationHolder(SerializationInfo info, StreamingContext ctx); // 0x00563D74-0x00564024
	
		// Methods
		public static void GetDelegateData(Delegate instance, SerializationInfo info, StreamingContext ctx); // 0x00563408-0x005636F0
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00564594-0x0056461C
		public object GetRealObject(StreamingContext context); // 0x0056461C-0x00564624
	}

	internal static class EmptyArray<T> // TypeDefIndex: 334
	{
		// Fields
		public static readonly T[] Value;
	
		// Constructors
		static EmptyArray();
	}

	internal enum SByteEnum : sbyte // TypeDefIndex: 335
	{
	
	}

	internal enum Int16Enum : short // TypeDefIndex: 336
	{
	
	}

	internal enum Int32Enum // TypeDefIndex: 337
	{
	
	}

	internal enum Int64Enum : long // TypeDefIndex: 338
	{
	
	}

	internal enum ByteEnum : byte // TypeDefIndex: 339
	{
	
	}

	internal enum UInt16Enum : ushort // TypeDefIndex: 340
	{
	
	}

	internal enum UInt32Enum : uint // TypeDefIndex: 341
	{
	
	}

	internal enum UInt64Enum : ulong // TypeDefIndex: 342
	{
	
	}

	internal interface IConsoleDriver // TypeDefIndex: 343
	{
		// Methods
		ConsoleKeyInfo ReadKey(bool intercept);
	}

	[Serializable]
	[ComVisible] // 0x0013B278-0x0013B28C
	public struct IntPtr : ISerializable // TypeDefIndex: 344
	{
		// Fields
		private unsafe void* m_value; // 0x00
		public static readonly IntPtr Zero; // 0x00
	
		// Properties
		public static int Size { [ReliabilityContract] /* 0x0014432C-0x00144344 */ get; } // 0x002B0EBC-0x002B0FB0 
	
		// Constructors
		[ReliabilityContract] // 0x001442C0-0x001442D8
		public unsafe IntPtr(int value); // 0x002B0DF8-0x002B0E08
		[ReliabilityContract] // 0x001442D8-0x001442F0
		public unsafe IntPtr(long value); // 0x002B0E08-0x002B0E18
		[CLSCompliant] // 0x001442F0-0x0014432C
		[ReliabilityContract] // 0x001442F0-0x0014432C
		public unsafe IntPtr(void* value); // 0x002B0E18-0x002B0EA0
		private unsafe IntPtr(SerializationInfo info, StreamingContext context); // 0x002B0EA0-0x002B0EBC
	
		// Methods
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x002B0FB0-0x002B1060
		public override bool Equals(object obj); // 0x002B1060-0x002B1070
		public override int GetHashCode(); // 0x002B1070-0x002B1080
		[ReliabilityContract] // 0x00144344-0x0014435C
		public int ToInt32(); // 0x002B1080-0x002B1088
		[ReliabilityContract] // 0x0014435C-0x00144374
		public long ToInt64(); // 0x002B1088-0x002B109C
		[CLSCompliant] // 0x00144374-0x001443B0
		[ReliabilityContract] // 0x00144374-0x001443B0
		public unsafe void* ToPointer(); // 0x002B109C-0x002B10A4
		public override string ToString(); // 0x002B10A4-0x002B10D0
		public string ToString(string format); // 0x002B10D0-0x002B1100
		[ReliabilityContract] // 0x001443B0-0x001443C8
		public static bool operator ==(IntPtr value1, IntPtr value2); // 0x002B1100-0x002B1114
		[ReliabilityContract] // 0x001443C8-0x001443E0
		public static bool operator !=(IntPtr value1, IntPtr value2); // 0x002B1114-0x002B1128
		[ReliabilityContract] // 0x001443E0-0x001443F8
		public static explicit operator IntPtr(int value); // 0x002B1128-0x002B112C
		[ReliabilityContract] // 0x001443F8-0x00144410
		public static explicit operator IntPtr(long value); // 0x002B112C-0x002B1130
		[CLSCompliant] // 0x00144410-0x0014444C
		[ReliabilityContract] // 0x00144410-0x0014444C
		public static unsafe explicit operator IntPtr(void* value); // 0x002B1130-0x002B1134
		public static explicit operator int(IntPtr value); // 0x002B1134-0x002B1138
		[CLSCompliant] // 0x0014444C-0x00144460
		public static unsafe explicit operator void*(IntPtr value); // 0x002B1138-0x002B1150
		[ReliabilityContract] // 0x00144460-0x00144478
		internal bool IsNull(); // 0x002B1150-0x002B1164
	}

	internal static class KnownTerminals // TypeDefIndex: 345
	{
		// Properties
		public static byte[] linux { get; } // 0x002B1600-0x002B1684 
		public static byte[] xterm { get; } // 0x002B1684-0x002B1708 
		public static byte[] ansi { get; } // 0x002B1708-0x002B178C 
	}

	[Serializable]
	[ComVisible] // 0x0013B28C-0x0013B2A0
	public abstract class MarshalByRefObject // TypeDefIndex: 346
	{
		// Fields
		[NonSerialized]
		private object _identity; // 0x08
	
		// Properties
		internal ServerIdentity ObjectIdentity { get; set; } // 0x002B2E50-0x002B2ED4 0x002B2F5C-0x002B2FE0
	
		// Constructors
		protected MarshalByRefObject(); // 0x002A1BCC-0x002A1BD4
	
		// Methods
		public virtual ObjRef CreateObjRef(Type requestedType); // 0x002B2FE0-0x002B3064
		public virtual object InitializeLifetimeService(); // 0x002B3064-0x002B30E8
	}

	internal class MonoAsyncCall // TypeDefIndex: 347
	{
		// Fields
		private object msg; // 0x08
		private IntPtr cb_method; // 0x0C
		private object cb_target; // 0x10
		private object state; // 0x14
		private object res; // 0x18
		private object out_args; // 0x1C
	
		// Constructors
		public MonoAsyncCall(); // 0x002B481C-0x002B4824
	}

	internal static class MonoCustomAttrs // TypeDefIndex: 348
	{
		// Fields
		private static Assembly corlib; // 0x00
		[ThreadStatic] // 0x001424E8-0x001424F8
		private static Dictionary<Type, AttributeUsageAttribute> usage_cache; // 0x80000000
		private static readonly AttributeUsageAttribute DefaultAttributeUsage; // 0x04
	
		// Nested types
		private class AttributeInfo // TypeDefIndex: 349
		{
			// Fields
			private AttributeUsageAttribute _usage; // 0x08
			private int _inheritanceLevel; // 0x0C
	
			// Properties
			public AttributeUsageAttribute Usage { get; } // 0x002B686C-0x002B6874 
			public int InheritanceLevel { get; } // 0x002B6874-0x002B687C 
	
			// Constructors
			public AttributeInfo(AttributeUsageAttribute usage, int inheritanceLevel); // 0x002B687C-0x002B68A4
		}
	
		// Constructors
		static MonoCustomAttrs(); // 0x002B78F0-0x002B7974
	
		// Methods
		private static bool IsUserCattrProvider(object obj); // 0x002B4824-0x002B4AA8
		internal static object[] GetCustomAttributesInternal(ICustomAttributeProvider obj, Type attributeType, bool pseudoAttrs); // 0x002B4AA8-0x002B4AAC
		internal static object[] GetPseudoCustomAttributes(ICustomAttributeProvider obj, Type attributeType); // 0x002B4AAC-0x002B4E9C
		private static object[] GetPseudoCustomAttributes(Type type); // 0x002B4E9C-0x002B5064
		internal static object[] GetCustomAttributesBase(ICustomAttributeProvider obj, Type attributeType, bool inheritedOnly); // 0x002B5064-0x002B52C0
		internal static object[] GetCustomAttributes(ICustomAttributeProvider obj, Type attributeType, bool inherit); // 0x002B52C0-0x002B62A8
		internal static object[] GetCustomAttributes(ICustomAttributeProvider obj, bool inherit); // 0x002B68A4-0x002B6AE4
		private static CustomAttributeData[] GetCustomAttributesDataInternal(ICustomAttributeProvider obj); // 0x002B6AE4-0x002B6AE8
		internal static IList<CustomAttributeData> GetCustomAttributesData(ICustomAttributeProvider obj); // 0x002B6AE8-0x002B6BDC
		internal static bool IsDefined(ICustomAttributeProvider obj, Type attributeType, bool inherit); // 0x002B6BDC-0x002B6FB0
		internal static bool IsDefinedInternal(ICustomAttributeProvider obj, Type AttributeType); // 0x002B6FB0-0x002B6FB4
		private static PropertyInfo GetBasePropertyDefinition(MonoProperty property); // 0x002B6FB4-0x002B735C
		private static EventInfo GetBaseEventDefinition(MonoEvent evt); // 0x002B735C-0x002B757C
		private static ICustomAttributeProvider GetBase(ICustomAttributeProvider obj); // 0x002B62A8-0x002B663C
		private static AttributeUsageAttribute RetrieveAttributeUsageNoCache(Type attributeType); // 0x002B757C-0x002B78F0
		private static AttributeUsageAttribute RetrieveAttributeUsage(Type attributeType); // 0x002B663C-0x002B686C
	}

	internal sealed class MonoListItem // TypeDefIndex: 350
	{
		// Fields
		private MonoListItem next; // 0x08
		private object data; // 0x0C
	}

	internal sealed class MonoType : RuntimeType // TypeDefIndex: 351
	{
	}

	[Serializable]
	[ComVisible] // 0x0013B2A0-0x0013B2B4
	public abstract class MulticastDelegate : Delegate // TypeDefIndex: 352
	{
		// Fields
		private Delegate[] delegates; // 0x34
	
		// Methods
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x002B7A7C-0x002B7A9C
		protected sealed override object DynamicInvokeImpl(object[] args); // 0x002B7A9C-0x002B7B40
		public sealed override bool Equals(object obj); // 0x002B7B40-0x002B7D7C
		public sealed override int GetHashCode(); // 0x002B7D7C-0x002B7D84
		protected override MethodInfo GetMethodImpl(); // 0x002B7D84-0x002B7DEC
		public sealed override Delegate[] GetInvocationList(); // 0x002B7DEC-0x002B7F60
		protected sealed override Delegate CombineImpl(Delegate follow); // 0x002B7F60-0x002B8500
		private int LastIndexOf(Delegate[] haystack, Delegate[] needle); // 0x002B8500-0x002B86D8
		protected sealed override Delegate RemoveImpl(Delegate value); // 0x002B86D8-0x002B8C40
	}

	internal class NullConsoleDriver : IConsoleDriver // TypeDefIndex: 353
	{
		// Fields
		private static readonly ConsoleKeyInfo EmptyConsoleKeyInfo; // 0x00
	
		// Constructors
		public NullConsoleDriver(); // 0x002B8EAC-0x002B8EB4
		static NullConsoleDriver(); // 0x002B8EB4-0x002B8F54
	
		// Methods
		public ConsoleKeyInfo ReadKey(bool intercept); // 0x002B8E10-0x002B8EAC
	}

	[ComVisible] // 0x0013B2B4-0x0013B2C8
	public static class Nullable // TypeDefIndex: 354
	{
		// Methods
		public static Type GetUnderlyingType(Type nullableType); // 0x002B9028-0x002B9224
	}

	[Serializable]
	[DebuggerStepThrough] // 0x0013B2C8-0x0013B2D8
	public struct Nullable<T> // TypeDefIndex: 355
		where T : struct
	{
		// Fields
		internal T value;
		internal bool has_value;
	
		// Properties
		public bool HasValue { get; }
		public T Value { get; }
	
		// Constructors
		public Nullable(T value);
	
		// Methods
		public override bool Equals(object other);
		private bool Equals(T? other);
		public override int GetHashCode();
		public T GetValueOrDefault();
		public override string ToString();
		private static object Box(T? o);
		private static T? Unbox(object o);
	}

	internal sealed class NumberFormatter // TypeDefIndex: 356
	{
		// Fields
		private static readonly unsafe ulong* MantissaBitsTable; // 0x00
		private static readonly unsafe int* TensExponentTable; // 0x04
		private static readonly unsafe char* DigitLowerTable; // 0x08
		private static readonly unsafe char* DigitUpperTable; // 0x0C
		private static readonly unsafe long* TenPowersList; // 0x10
		private static readonly unsafe int* DecHexDigits; // 0x14
		private NumberFormatInfo _nfi; // 0x08
		private char[] _cbuf; // 0x0C
		private bool _NaN; // 0x10
		private bool _infinity; // 0x11
		private bool _isCustomFormat; // 0x12
		private bool _specifierIsUpper; // 0x13
		private bool _positive; // 0x14
		private char _specifier; // 0x16
		private int _precision; // 0x18
		private int _defPrecision; // 0x1C
		private int _digitsLen; // 0x20
		private int _offset; // 0x24
		private int _decPointPos; // 0x28
		private uint _val1; // 0x2C
		private uint _val2; // 0x30
		private uint _val3; // 0x34
		private uint _val4; // 0x38
		private int _ind; // 0x3C
		[ThreadStatic] // 0x001424F8-0x00142508
		private static NumberFormatter threadNumberFormatter; // 0x80000000
		[ThreadStatic] // 0x00142508-0x00142518
		private static NumberFormatter userFormatProvider; // 0x80000004
	
		// Properties
		private CultureInfo CurrentCulture { set; } // 0x002BCD78-0x002BCDC8
		private int IntegerDigits { get; } // 0x002BDCAC-0x002BDCBC 
		private int DecimalDigits { get; } // 0x002BDCBC-0x002BDCD0 
		private bool IsFloatingSource { get; } // 0x002BDCD0-0x002BDCE8 
		private bool IsZero { get; } // 0x002BDCE8-0x002BDCFC 
		private bool IsZeroInteger { get; } // 0x002BDCFC-0x002BDD20 
	
		// Nested types
		private class CustomInfo // TypeDefIndex: 357
		{
			// Fields
			public bool UseGroup; // 0x08
			public int DecimalDigits; // 0x0C
			public int DecimalPointPos; // 0x10
			public int DecimalTailSharpDigits; // 0x14
			public int IntegerDigits; // 0x18
			public int IntegerHeadSharpDigits; // 0x1C
			public int IntegerHeadPos; // 0x20
			public bool UseExponent; // 0x24
			public int ExponentDigits; // 0x28
			public int ExponentTailSharpDigits; // 0x2C
			public bool ExponentNegativeSignOnly; // 0x30
			public int DividePlaces; // 0x34
			public int Percents; // 0x38
			public int Permilles; // 0x3C
	
			// Constructors
			public CustomInfo(); // 0x00744D38-0x00744D4C
	
			// Methods
			public static void GetActiveSection(string format, ref bool positive, bool zero, ref int offset, ref int length); // 0x007440CC-0x007446A4
			public static CustomInfo Parse(string format, int offset, int length, NumberFormatInfo nfi); // 0x007446A4-0x00744D38
			public string Format(string format, int offset, int length, NumberFormatInfo nfi, bool positive, StringBuilder sb_int, StringBuilder sb_dec, StringBuilder sb_exp); // 0x00744D4C-0x0074593C
		}
	
		// Constructors
		static NumberFormatter(); // 0x002BBEF0-0x002BBF74
		private NumberFormatter(Thread current); // 0x002BCC7C-0x002BCD78
	
		// Methods
		private static unsafe void GetFormatterTables(out ulong* MantissaBitsTable, out int* TensExponentTable, out char* DigitLowerTable, out char* DigitUpperTable, out long* TenPowersList, out int* DecHexDigits); // 0x002BBEEC-0x002BBEF0
		private static long GetTenPowerOf(int i); // 0x002BBF74-0x002BC00C
		private void InitDecHexDigits(uint value); // 0x002BC00C-0x002BC0F8
		private void InitDecHexDigits(ulong value); // 0x002BC2E4-0x002BC4BC
		private void InitDecHexDigits(uint hi, ulong lo); // 0x002BC4BC-0x002BC7B4
		private static uint FastToDecHex(int val); // 0x002BC0F8-0x002BC1FC
		private static uint ToDecHex(int val); // 0x002BC1FC-0x002BC2E4
		private static int FastDecHexLen(int val); // 0x002BC7B4-0x002BC7E4
		private static int DecHexLen(uint val); // 0x002BC7E4-0x002BC8D0
		private int DecHexLen(); // 0x002BC8D0-0x002BCA3C
		private static int ScaleOrder(long hi); // 0x002BCA3C-0x002BCAE8
		private int InitialFloatingPrecision(); // 0x002BCAE8-0x002BCBE8
		private static int ParsePrecision(string format); // 0x002BCBE8-0x002BCC7C
		private void Init(string format); // 0x002BCDC8-0x002BCF2C
		private void InitHex(ulong value); // 0x002BCF2C-0x002BCF70
		private void Init(string format, int value, int defPrecision); // 0x002BCF70-0x002BCFFC
		private void Init(string format, uint value, int defPrecision); // 0x002BCFFC-0x002BD074
		private void Init(string format, long value); // 0x002BD074-0x002BD104
		private void Init(string format, ulong value); // 0x002BD104-0x002BD188
		private void Init(string format, double value, int defPrecision); // 0x002BD188-0x002BD564
		private void Init(string format, decimal value); // 0x002BD6D0-0x002BD958
		private void ResetCharBuf(int size); // 0x002BD958-0x002BD9EC
		private void Resize(int len); // 0x002BD9EC-0x002BDA58
		private void Append(char c); // 0x002BDA58-0x002BDAE4
		private void Append(char c, int cnt); // 0x002BDAE4-0x002BDB94
		private void Append(string s); // 0x002BDB94-0x002BDC8C
		private NumberFormatInfo GetNumberFormatInstance(IFormatProvider fp); // 0x002BDC8C-0x002BDCAC
		private void RoundPos(int pos); // 0x002BDD20-0x002BDD2C
		private bool RoundDecimal(int decimals); // 0x002BDEA4-0x002BDEB8
		private bool RoundBits(int shift); // 0x002BDD2C-0x002BDEA4
		private void RemoveTrailingZeros(); // 0x002BDFE0-0x002BE01C
		private void AddOneToDecHex(); // 0x002BDEB8-0x002BDFE0
		private static uint AddOneToDecHex(uint val); // 0x002BE01C-0x002BE0C8
		private int CountTrailingZeros(); // 0x002BD564-0x002BD6D0
		private static int CountTrailingZeros(uint val); // 0x002BE0C8-0x002BE13C
		private static NumberFormatter GetInstance(IFormatProvider fp); // 0x002BE13C-0x002BE394
		private void Release(); // 0x002BE394-0x002BE478
		public static string NumberToString(string format, uint value, IFormatProvider fp); // 0x002B9778-0x002B988C
		public static string NumberToString(string format, int value, IFormatProvider fp); // 0x002B9664-0x002B9778
		public static string NumberToString(string format, ulong value, IFormatProvider fp); // 0x002B9A44-0x002B9B5C
		public static string NumberToString(string format, long value, IFormatProvider fp); // 0x002B988C-0x002B99A4
		public static string NumberToString(string format, float value, IFormatProvider fp); // 0x002B9BEC-0x002B9DB0
		public static string NumberToString(string format, double value, IFormatProvider fp); // 0x002B94A4-0x002B9664
		public static string NumberToString(string format, decimal value, IFormatProvider fp); // 0x002B92D8-0x002B9404
		private string IntegerToString(string format, IFormatProvider fp); // 0x002BE478-0x002BE67C
		private string NumberToString(string format, NumberFormatInfo nfi); // 0x002BE6FC-0x002BE8C0
		private string FormatCurrency(int precision, NumberFormatInfo nfi); // 0x002BE9E8-0x002BEFC8
		private string FormatDecimal(int precision, NumberFormatInfo nfi); // 0x002BEFC8-0x002BF0BC
		private string FormatHexadecimal(int precision); // 0x002BF8C8-0x002BFAC4
		private string FormatFixedPoint(int precision, NumberFormatInfo nfi); // 0x002BF10C-0x002BF240
		private string FormatRoundtrip(double origval, NumberFormatInfo nfi); // 0x002BE8C0-0x002BE9E8
		private string FormatRoundtrip(float origval, NumberFormatInfo nfi); // 0x002BE67C-0x002BE6FC
		private string FormatGeneral(int precision, NumberFormatInfo nfi); // 0x002BF240-0x002BF3C8
		private string FormatNumber(int precision, NumberFormatInfo nfi); // 0x002BF3C8-0x002BF634
		private string FormatPercent(int precision, NumberFormatInfo nfi); // 0x002BF634-0x002BF8C8
		private string FormatExponential(int precision, NumberFormatInfo nfi); // 0x002BF0BC-0x002BF10C
		private string FormatExponential(int precision, NumberFormatInfo nfi, int expDigits); // 0x002C0A50-0x002C0B4C
		private string FormatCustom(string format, NumberFormatInfo nfi); // 0x002BFAC4-0x002C0260
		private static void ZeroTrimEnd(StringBuilder sb, bool canEmpty); // 0x002C114C-0x002C1254
		private static bool IsZeroOnly(StringBuilder sb); // 0x002C1038-0x002C114C
		private static void AppendNonNegativeNumber(StringBuilder sb, int v); // 0x002C0E10-0x002C0F68
		private void AppendIntegerString(int minLength, StringBuilder sb); // 0x002C0F68-0x002C1004
		private void AppendIntegerString(int minLength); // 0x002C0914-0x002C0970
		private void AppendDecimalString(int precision, StringBuilder sb); // 0x002C1004-0x002C1038
		private void AppendDecimalString(int precision); // 0x002C0528-0x002C0540
		private void AppendIntegerStringWithGroupSeparator(int[] groups, string groupSeparator); // 0x002C0260-0x002C0528
		private void AppendExponent(NumberFormatInfo nfi, int exponent, int minDigits); // 0x002C0C58-0x002C0DF0
		private void AppendOneDigit(int start); // 0x002C0B6C-0x002C0C58
		private void AppendDigits(int start, int end); // 0x002C0540-0x002C0914
		private void AppendDigits(int start, int end, StringBuilder sb); // 0x002C1254-0x002C1570
		private void Multiply10(int count); // 0x002C0B4C-0x002C0B6C
		private void Divide10(int count); // 0x002C0DF0-0x002C0E10
		private NumberFormatter GetClone(); // 0x002C0970-0x002C0A50
	}

	[Serializable]
	[ClassInterface] // 0x0013B2D8-0x0013B310
	[ComVisible] // 0x0013B2D8-0x0013B310
	public class Object // TypeDefIndex: 358
	{
		// Constructors
		[ReliabilityContract] // 0x00144478-0x00144490
		public Object(); // 0x0074593C-0x00745940
	
		// Methods
		public virtual bool Equals(object obj); // 0x00745A28-0x00745A3C
		public static bool Equals(object objA, object objB); // 0x00745A3C-0x00745A70
		[ReliabilityContract] // 0x00144490-0x001444A8
		~Object(); // 0x00745A70-0x00745A74
		public virtual int GetHashCode(); // 0x00745A74-0x00745A78
		public Type GetType(); // 0x00745A7C-0x00745A80
		protected object MemberwiseClone(); // 0x00745A80-0x00745A84
		public virtual string ToString(); // 0x00745A84-0x00745ABC
		[ReliabilityContract] // 0x001444A8-0x001444C0
		public static bool ReferenceEquals(object objA, object objB); // 0x00745ABC-0x00745AD0
		internal static int InternalGetHashCode(object o); // 0x00745A78-0x00745A7C
		private void FieldGetter(string typeName, string fieldName, ref object val); // 0x00745AD0-0x00745AD4
		private void FieldSetter(string typeName, string fieldName, object val); // 0x00745AD4-0x00745AD8
	}

	[Serializable]
	[ComVisible] // 0x0013B310-0x0013B324
	public sealed class OperatingSystem : ICloneable, ISerializable // TypeDefIndex: 359
	{
		// Fields
		private PlatformID _platform; // 0x08
		private System.Version _version; // 0x0C
		private string _servicePack; // 0x10
	
		// Properties
		public PlatformID Platform { get; } // 0x0074640C-0x00746414 
		public string ServicePack { get; } // 0x00746414-0x0074641C 
	
		// Constructors
		public OperatingSystem(PlatformID platform, System.Version version); // 0x0074605C-0x00746204
		private OperatingSystem(SerializationInfo information, StreamingContext context); // 0x00746204-0x0074640C
	
		// Methods
		public object Clone(); // 0x0074641C-0x00746498
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00746498-0x007465AC
		public override string ToString(); // 0x007465AC-0x00746794
	}

	[Serializable]
	[ComVisible] // 0x0013B324-0x0013B338
	public enum PlatformID // TypeDefIndex: 360
	{
		Win32S = 0,
		Win32Windows = 1,
		Win32NT = 2,
		WinCE = 3,
		Unix = 4,
		Xbox = 5,
		MacOSX = 6
	}

	[ComVisible] // 0x0013B338-0x0013B34C
	public class ResolveEventArgs : EventArgs // TypeDefIndex: 361
	{
		// Fields
		private string m_Name; // 0x08
		private Assembly m_Requesting; // 0x0C
	
		// Constructors
		public ResolveEventArgs(string name); // 0x002C47F4-0x002C4880
		public ResolveEventArgs(string name, Assembly requestingAssembly); // 0x002C4880-0x002C4914
	}

	[Serializable]
	[ComVisible] // 0x0013B34C-0x0013B360
	public delegate Assembly ResolveEventHandler(object sender, ResolveEventArgs args); // TypeDefIndex: 362; 0x002C4928-0x002C5164

	[ComVisible] // 0x0013B360-0x0013B374
	public struct RuntimeArgumentHandle // TypeDefIndex: 363
	{
		// Fields
		internal IntPtr args; // 0x00
	}

	[Serializable]
	[ComVisible] // 0x0013B374-0x0013B388
	public struct RuntimeFieldHandle : ISerializable // TypeDefIndex: 364
	{
		// Fields
		private IntPtr value; // 0x00
	
		// Properties
		public IntPtr Value { get; } // 0x00408BF0-0x00408E24 
	
		// Constructors
		internal RuntimeFieldHandle(IntPtr v); // 0x00408998-0x00408BD4
		private RuntimeFieldHandle(SerializationInfo info, StreamingContext context); // 0x00408BD4-0x00408BF0
	
		// Methods
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00408E24-0x00408F78
		[ReliabilityContract] // 0x001444C0-0x001444D8
		public override bool Equals(object obj); // 0x00408F78-0x00408F80
		public override int GetHashCode(); // 0x00408F80-0x00408F8C
		private static void SetValueInternal(FieldInfo fi, object obj, object value); // 0x00408F8C-0x00408F90
		internal static void SetValue(RtFieldInfo field, object obj, object value, RuntimeType fieldType, FieldAttributes fieldAttr, RuntimeType declaringType, ref bool domainInitialized); // 0x00408F90-0x00408F94
		internal static unsafe void SetValueDirect(RtFieldInfo field, RuntimeType fieldType, void* pTypedRef, object value, RuntimeType contextType); // 0x00408F94-0x00408FA0
	}

	[Serializable]
	[ComVisible] // 0x0013B388-0x0013B39C
	public struct RuntimeMethodHandle : ISerializable // TypeDefIndex: 365
	{
		// Fields
		private IntPtr value; // 0x00
	
		// Properties
		public IntPtr Value { get; } // 0x004091F8-0x0040942C 
	
		// Constructors
		internal RuntimeMethodHandle(IntPtr v); // 0x00408FA0-0x004091DC
		private RuntimeMethodHandle(SerializationInfo info, StreamingContext context); // 0x004091DC-0x004091F8
	
		// Methods
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0040942C-0x00409580
		[ReliabilityContract] // 0x001444D8-0x001444F0
		public override bool Equals(object obj); // 0x00409580-0x00409588
		public override int GetHashCode(); // 0x00409588-0x00409594
		internal static string ConstructInstantiation(RuntimeMethodInfo method, TypeNameFormatFlags format); // 0x00409594-0x004097E0
		internal bool IsNullHandle(); // 0x004097E0-0x004097E8
	}

	[Serializable]
	[ComVisible] // 0x0013B39C-0x0013B3B0
	public struct RuntimeTypeHandle : ISerializable // TypeDefIndex: 366
	{
		// Fields
		private IntPtr value; // 0x00
	
		// Properties
		public IntPtr Value { get; } // 0x00416D54-0x00416F24 
	
		// Constructors
		internal RuntimeTypeHandle(IntPtr val); // 0x00416AD8-0x00416AE0
		internal RuntimeTypeHandle(RuntimeType type); // 0x00416AE0-0x00416D38
		private RuntimeTypeHandle(SerializationInfo info, StreamingContext context); // 0x00416D38-0x00416D54
	
		// Methods
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00416F24-0x00417078
		[ReliabilityContract] // 0x001444F0-0x00144508
		public override bool Equals(object obj); // 0x00417078-0x00417080
		public override int GetHashCode(); // 0x00417080-0x0041708C
		internal static TypeAttributes GetAttributes(RuntimeType type); // 0x0040F130-0x0040F134
		private static int GetMetadataToken(RuntimeType type); // 0x0041708C-0x00417090
		internal static int GetToken(RuntimeType type); // 0x004134FC-0x00413500
		private static Type GetGenericTypeDefinition_impl(RuntimeType type); // 0x00417090-0x00417094
		internal static Type GetGenericTypeDefinition(RuntimeType type); // 0x00410EB0-0x00410EB4
		internal static bool HasElementType(RuntimeType type); // 0x0040F444-0x0040F480
		internal static bool HasInstantiation(RuntimeType type); // 0x00410EB8-0x00410EBC
		internal static bool IsArray(RuntimeType type); // 0x0040F5F0-0x0040F5F4
		internal static bool IsByRef(RuntimeType type); // 0x0040F1FC-0x0040F200
		internal static bool IsComObject(RuntimeType type); // 0x00417094-0x00417098
		internal static bool IsInstanceOfType(RuntimeType type, object o); // 0x0040ED38-0x0040ED3C
		internal static bool IsPointer(RuntimeType type); // 0x0040F20C-0x0040F210
		internal static bool IsPrimitive(RuntimeType type); // 0x0040F204-0x0040F208
		internal static bool HasReferences(RuntimeType type); // 0x00417098-0x0041709C
		internal static bool IsComObject(RuntimeType type, bool isGenericCOM); // 0x0040F214-0x0040F224
		internal static bool IsContextful(RuntimeType type); // 0x0040F138-0x0040F1F8
		internal static bool IsEquivalentTo(RuntimeType rtType1, RuntimeType rtType2); // 0x0040F114-0x0040F11C
		internal static bool IsSzArray(RuntimeType type); // 0x0040F59C-0x0040F5EC
		internal static bool IsInterface(RuntimeType type); // 0x0041709C-0x004170CC
		internal static int GetArrayRank(RuntimeType type); // 0x0040F6C8-0x0040F6CC
		internal static RuntimeAssembly GetAssembly(RuntimeType type); // 0x0040ECE0-0x0040ECE4
		internal static RuntimeType GetElementType(RuntimeType type); // 0x0040F6D0-0x0040F6D4
		internal static RuntimeModule GetModule(RuntimeType type); // 0x0040ECD4-0x0040ECD8
		internal static bool IsGenericVariable(RuntimeType type); // 0x0040F120-0x0040F124
		internal static RuntimeType GetBaseType(RuntimeType type); // 0x0040F124-0x0040F128
		internal static bool CanCastTo(RuntimeType type, RuntimeType target); // 0x0040F040-0x0040F050
		private static bool type_is_assignable_from(Type a, Type b); // 0x004170CC-0x004171C4
		internal static bool IsGenericTypeDefinition(RuntimeType type); // 0x00410CFC-0x00410D00
		internal static IntPtr GetGenericParameterInfo(RuntimeType type); // 0x00416090-0x00416094
	}

	[Serializable]
	[ComVisible] // 0x0013B3B0-0x0013B3C4
	public enum StringComparison // TypeDefIndex: 367
	{
		CurrentCulture = 0,
		CurrentCultureIgnoreCase = 1,
		InvariantCulture = 2,
		InvariantCultureIgnoreCase = 3,
		Ordinal = 4,
		OrdinalIgnoreCase = 5
	}

	internal class TermInfoDriver : IConsoleDriver // TypeDefIndex: 368
	{
		// Fields
		private static unsafe int* native_terminal_size; // 0x00
		private static int terminal_size; // 0x04
		private static readonly string[] locations; // 0x08
		private TermInfoReader reader; // 0x08
		private int cursorLeft; // 0x0C
		private int cursorTop; // 0x10
		private string title; // 0x14
		private string titleFormat; // 0x18
		private bool cursorVisible; // 0x1C
		private string csrVisible; // 0x20
		private string csrInvisible; // 0x24
		private string clear; // 0x28
		private string bell; // 0x2C
		private string term; // 0x30
		private StreamReader stdin; // 0x34
		private CStreamWriter stdout; // 0x38
		private int windowWidth; // 0x3C
		private int windowHeight; // 0x40
		private int bufferHeight; // 0x44
		private int bufferWidth; // 0x48
		private char[] buffer; // 0x4C
		private int readpos; // 0x50
		private int writepos; // 0x54
		private string keypadXmit; // 0x58
		private string keypadLocal; // 0x5C
		private bool inited; // 0x60
		private object initLock; // 0x64
		private bool initKeys; // 0x68
		private string origPair; // 0x6C
		private string origColors; // 0x70
		private string cursorAddress; // 0x74
		private ConsoleColor fgcolor; // 0x78
		private string setfgcolor; // 0x7C
		private string setbgcolor; // 0x80
		private int maxColors; // 0x84
		private bool noGetPosition; // 0x88
		private Hashtable keymap; // 0x8C
		private ByteMatcher rootmap; // 0x90
		private int rl_startx; // 0x94
		private int rl_starty; // 0x98
		private byte[] control_characters; // 0x9C
		private static readonly int[] _consoleColorToAnsiCode; // 0x0C
		private char[] echobuf; // 0xA0
		private int echon; // 0xA4
	
		// Properties
		public bool Initialized { get; } // 0x006E8F4C-0x006E8F54 
		public int WindowHeight { get; } // 0x006E9CC0-0x006E9CEC 
		public int WindowWidth { get; } // 0x006E9C94-0x006E9CC0 
	
		// Constructors
		public TermInfoDriver(string term); // 0x006E8780-0x006E8B80
		static TermInfoDriver(); // 0x006EE630-0x006EE8B0
	
		// Methods
		private static string TryTermInfoDir(string dir, string term); // 0x006E83FC-0x006E8558
		private static string SearchTerminfo(string term); // 0x006E8558-0x006E8744
		private void WriteConsole(string str); // 0x006E8744-0x006E8780
		public void Init(); // 0x006E8F54-0x006E97BC
		private void IncrementX(); // 0x006E9C28-0x006E9C94
		public void WriteSpecialKey(ConsoleKeyInfo key); // 0x006E9CEC-0x006E9E34
		public void WriteSpecialKey(char c); // 0x006EA098-0x006EA0CC
		public bool IsSpecialKey(ConsoleKeyInfo key); // 0x006EA234-0x006EA2C8
		public bool IsSpecialKey(char c); // 0x006EA2C8-0x006EA2FC
		private void GetCursorPosition(); // 0x006E989C-0x006E9C28
		private void CheckWindowDimensions(); // 0x006EA434-0x006EA610
		private void AddToBuffer(int b); // 0x006EA2FC-0x006EA434
		private void AdjustBuffer(); // 0x006EA610-0x006EA62C
		private ConsoleKeyInfo CreateKeyInfoFromInt(int n, bool alt); // 0x006EA0CC-0x006EA234
		private object GetKeyFromBuffer(bool cooked); // 0x006EA62C-0x006EAA64
		private ConsoleKeyInfo ReadKeyInternal(out bool fresh); // 0x006EAA64-0x006EACBC
		private bool InputPending(); // 0x006EAE98-0x006EAED8
		private void QueueEcho(char c); // 0x006EAED8-0x006EB01C
		private void Echo(ConsoleKeyInfo key); // 0x006EB01C-0x006EB094
		private void EchoFlush(); // 0x006EB094-0x006EB0E4
		public int Read([In, Out] char[] dest, int index, int count); // 0x006EB0E4-0x006EB4F0
		public ConsoleKeyInfo ReadKey(bool intercept); // 0x006EB900-0x006EB96C
		public string ReadLine(); // 0x006EB96C-0x006EB974
		public string ReadToEnd(); // 0x006EBBEC-0x006EBBF4
		private string ReadUntilConditionInternal(bool haltOnNewLine); // 0x006EB974-0x006EBBEC
		public void SetCursorPosition(int left, int top); // 0x006E9E34-0x006EA098
		private void CreateKeyMap(); // 0x006EBBF4-0x006EE544
		private void InitKeys(); // 0x006EACBC-0x006EAE98
		private void AddStringMapping(TermInfoStrings s); // 0x006EE544-0x006EE5AC
	}

	internal static class ParameterizedStrings // TypeDefIndex: 369
	{
		// Fields
		[ThreadStatic] // 0x00142518-0x00142528
		private static LowLevelStack _cachedStack; // 0x80000000
	
		// Nested types
		public struct FormatParam // TypeDefIndex: 370
		{
			// Fields
			private readonly int _int32; // 0x00
			private readonly string _string; // 0x04
	
			// Properties
			public int Int32 { get; } // 0x00748BA4-0x00748BAC 
			public string String { get; } // 0x00748BAC-0x00748C1C 
			public object Object { get; } // 0x00748C1C-0x00748D28 
	
			// Constructors
			public FormatParam(int value); // 0x00748B88-0x00748B98
			private FormatParam(int intValue, string stringValue); // 0x00748B98-0x00748BA4
	
			// Methods
			public static implicit operator FormatParam(int value); // 0x00748664-0x00748670
		}
	
		private sealed class LowLevelStack // TypeDefIndex: 371
		{
			// Fields
			private FormatParam[] _arr; // 0x08
			private int _count; // 0x0C
	
			// Constructors
			public LowLevelStack(); // 0x00747020-0x00747088
	
			// Methods
			public FormatParam Pop(); // 0x00748114-0x007482D8
			public void Push(FormatParam item); // 0x00748534-0x00748664
			public void Clear(); // 0x00747088-0x007470B4
		}
	
		// Methods
		public static string Evaluate(string format, params /* 0x001462B8-0x001462C8 */ FormatParam[] args); // 0x00746E5C-0x00747020
		private static string EvaluateInternal(string format, ref int pos, FormatParam[] args, LowLevelStack stack, ref FormatParam[] dynamicVars, ref FormatParam[] staticVars); // 0x007470B4-0x00748114
		private static bool AsBool(int i); // 0x007487AC-0x007487B8
		private static int AsInt(bool b); // 0x007487A8-0x007487AC
		private static string StringFromAsciiBytes(byte[] buffer, int offset, int length); // 0x007487B8-0x00748900
		private static unsafe extern int snprintf(byte* str, IntPtr size, string format, string arg1); // 0x00748900-0x00748A18
		private static unsafe extern int snprintf(byte* str, IntPtr size, string format, int arg1); // 0x00748A18-0x00748B88
		private static string FormatPrintF(string format, object arg); // 0x007482D8-0x00748534
		private static FormatParam[] GetDynamicOrStaticVariables(char c, ref FormatParam[] dynamicVars, ref FormatParam[] staticVars, out int index); // 0x00748670-0x007487A8
	}

	internal class ByteMatcher // TypeDefIndex: 372
	{
		// Fields
		private Hashtable map; // 0x08
		private Hashtable starts; // 0x0C
	
		// Constructors
		public ByteMatcher(); // 0x007750B0-0x0077514C
	
		// Methods
		public void AddMapping(TermInfoStrings key, byte[] val); // 0x0077495C-0x00774AB8
		public void Sort(); // 0x00774AB8-0x00774ABC
		public bool StartsWith(int c); // 0x00774ABC-0x00774B68
		public TermInfoStrings Match(char[] buffer, int offset, int length, out int used); // 0x00774B68-0x007750B0
	}

	internal enum TermInfoNumbers // TypeDefIndex: 373
	{
		Columns = 0,
		InitTabs = 1,
		Lines = 2,
		LinesOfMemory = 3,
		MagicCookieGlitch = 4,
		PaddingBaudRate = 5,
		VirtualTerminal = 6,
		WidthStatusLine = 7,
		NumLabels = 8,
		LabelHeight = 9,
		LabelWidth = 10,
		MaxAttributes = 11,
		MaximumWindows = 12,
		MaxColors = 13,
		MaxPairs = 14,
		NoColorVideo = 15,
		BufferCapacity = 16,
		DotVertSpacing = 17,
		DotHorzSpacing = 18,
		MaxMicroAddress = 19,
		MaxMicroJump = 20,
		MicroColSize = 21,
		MicroLineSize = 22,
		NumberOfPins = 23,
		OutputResChar = 24,
		OutputResLine = 25,
		OutputResHorzInch = 26,
		OutputResVertInch = 27,
		PrintRate = 28,
		WideCharSize = 29,
		Buttons = 30,
		BitImageEntwining = 31,
		BitImageType = 32,
		Last = 33
	}

	internal class TermInfoReader // TypeDefIndex: 374
	{
		// Fields
		private short boolSize; // 0x08
		private short numSize; // 0x0A
		private short strOffsets; // 0x0C
		private byte[] buffer; // 0x10
		private int booleansOffset; // 0x14
	
		// Constructors
		public TermInfoReader(string term, string filename); // 0x006E8B80-0x006E8E68
		public TermInfoReader(string term, byte[] buffer); // 0x006E8E68-0x006E8F4C
	
		// Methods
		private void ReadHeader(byte[] buffer, ref int position); // 0x006EE8B0-0x006EEA28
		private void ReadNames(byte[] buffer, ref int position); // 0x006EEA28-0x006EEA70
		public int Get(TermInfoNumbers number); // 0x006E9840-0x006E989C
		public string Get(TermInfoStrings tstr); // 0x006E97BC-0x006E9840
		public byte[] GetStringBytes(TermInfoStrings tstr); // 0x006EE5AC-0x006EE630
		private short GetInt16(byte[] buffer, int offset); // 0x006EEA70-0x006EEAF4
		private string GetString(byte[] buffer, int offset); // 0x006EEAF4-0x006EEB9C
		private byte[] GetStringBytes(byte[] buffer, int offset); // 0x006EEB9C-0x006EEC88
	}

	internal enum TermInfoStrings // TypeDefIndex: 375
	{
		BackTab = 0,
		Bell = 1,
		CarriageReturn = 2,
		ChangeScrollRegion = 3,
		ClearAllTabs = 4,
		ClearScreen = 5,
		ClrEol = 6,
		ClrEos = 7,
		ColumnAddress = 8,
		CommandCharacter = 9,
		CursorAddress = 10,
		CursorDown = 11,
		CursorHome = 12,
		CursorInvisible = 13,
		CursorLeft = 14,
		CursorMemAddress = 15,
		CursorNormal = 16,
		CursorRight = 17,
		CursorToLl = 18,
		CursorUp = 19,
		CursorVisible = 20,
		DeleteCharacter = 21,
		DeleteLine = 22,
		DisStatusLine = 23,
		DownHalfLine = 24,
		EnterAltCharsetMode = 25,
		EnterBlinkMode = 26,
		EnterBoldMode = 27,
		EnterCaMode = 28,
		EnterDeleteMode = 29,
		EnterDimMode = 30,
		EnterInsertMode = 31,
		EnterSecureMode = 32,
		EnterProtectedMode = 33,
		EnterReverseMode = 34,
		EnterStandoutMode = 35,
		EnterUnderlineMode = 36,
		EraseChars = 37,
		ExitAltCharsetMode = 38,
		ExitAttributeMode = 39,
		ExitCaMode = 40,
		ExitDeleteMode = 41,
		ExitInsertMode = 42,
		ExitStandoutMode = 43,
		ExitUnderlineMode = 44,
		FlashScreen = 45,
		FormFeed = 46,
		FromStatusLine = 47,
		Init1string = 48,
		Init2string = 49,
		Init3string = 50,
		InitFile = 51,
		InsertCharacter = 52,
		InsertLine = 53,
		InsertPadding = 54,
		KeyBackspace = 55,
		KeyCatab = 56,
		KeyClear = 57,
		KeyCtab = 58,
		KeyDc = 59,
		KeyDl = 60,
		KeyDown = 61,
		KeyEic = 62,
		KeyEol = 63,
		KeyEos = 64,
		KeyF0 = 65,
		KeyF1 = 66,
		KeyF10 = 67,
		KeyF2 = 68,
		KeyF3 = 69,
		KeyF4 = 70,
		KeyF5 = 71,
		KeyF6 = 72,
		KeyF7 = 73,
		KeyF8 = 74,
		KeyF9 = 75,
		KeyHome = 76,
		KeyIc = 77,
		KeyIl = 78,
		KeyLeft = 79,
		KeyLl = 80,
		KeyNpage = 81,
		KeyPpage = 82,
		KeyRight = 83,
		KeySf = 84,
		KeySr = 85,
		KeyStab = 86,
		KeyUp = 87,
		KeypadLocal = 88,
		KeypadXmit = 89,
		LabF0 = 90,
		LabF1 = 91,
		LabF10 = 92,
		LabF2 = 93,
		LabF3 = 94,
		LabF4 = 95,
		LabF5 = 96,
		LabF6 = 97,
		LabF7 = 98,
		LabF8 = 99,
		LabF9 = 100,
		MetaOff = 101,
		MetaOn = 102,
		Newline = 103,
		PadChar = 104,
		ParmDch = 105,
		ParmDeleteLine = 106,
		ParmDownCursor = 107,
		ParmIch = 108,
		ParmIndex = 109,
		ParmInsertLine = 110,
		ParmLeftCursor = 111,
		ParmRightCursor = 112,
		ParmRindex = 113,
		ParmUpCursor = 114,
		PkeyKey = 115,
		PkeyLocal = 116,
		PkeyXmit = 117,
		PrintScreen = 118,
		PrtrOff = 119,
		PrtrOn = 120,
		RepeatChar = 121,
		Reset1string = 122,
		Reset2string = 123,
		Reset3string = 124,
		ResetFile = 125,
		RestoreCursor = 126,
		RowAddress = 127,
		SaveCursor = 128,
		ScrollForward = 129,
		ScrollReverse = 130,
		SetAttributes = 131,
		SetTab = 132,
		SetWindow = 133,
		Tab = 134,
		ToStatusLine = 135,
		UnderlineChar = 136,
		UpHalfLine = 137,
		InitProg = 138,
		KeyA1 = 139,
		KeyA3 = 140,
		KeyB2 = 141,
		KeyC1 = 142,
		KeyC3 = 143,
		PrtrNon = 144,
		CharPadding = 145,
		AcsChars = 146,
		PlabNorm = 147,
		KeyBtab = 148,
		EnterXonMode = 149,
		ExitXonMode = 150,
		EnterAmMode = 151,
		ExitAmMode = 152,
		XonCharacter = 153,
		XoffCharacter = 154,
		EnaAcs = 155,
		LabelOn = 156,
		LabelOff = 157,
		KeyBeg = 158,
		KeyCancel = 159,
		KeyClose = 160,
		KeyCommand = 161,
		KeyCopy = 162,
		KeyCreate = 163,
		KeyEnd = 164,
		KeyEnter = 165,
		KeyExit = 166,
		KeyFind = 167,
		KeyHelp = 168,
		KeyMark = 169,
		KeyMessage = 170,
		KeyMove = 171,
		KeyNext = 172,
		KeyOpen = 173,
		KeyOptions = 174,
		KeyPrevious = 175,
		KeyPrint = 176,
		KeyRedo = 177,
		KeyReference = 178,
		KeyRefresh = 179,
		KeyReplace = 180,
		KeyRestart = 181,
		KeyResume = 182,
		KeySave = 183,
		KeySuspend = 184,
		KeyUndo = 185,
		KeySbeg = 186,
		KeyScancel = 187,
		KeyScommand = 188,
		KeyScopy = 189,
		KeyScreate = 190,
		KeySdc = 191,
		KeySdl = 192,
		KeySelect = 193,
		KeySend = 194,
		KeySeol = 195,
		KeySexit = 196,
		KeySfind = 197,
		KeyShelp = 198,
		KeyShome = 199,
		KeySic = 200,
		KeySleft = 201,
		KeySmessage = 202,
		KeySmove = 203,
		KeySnext = 204,
		KeySoptions = 205,
		KeySprevious = 206,
		KeySprint = 207,
		KeySredo = 208,
		KeySreplace = 209,
		KeySright = 210,
		KeySrsume = 211,
		KeySsave = 212,
		KeySsuspend = 213,
		KeySundo = 214,
		ReqForInput = 215,
		KeyF11 = 216,
		KeyF12 = 217,
		KeyF13 = 218,
		KeyF14 = 219,
		KeyF15 = 220,
		KeyF16 = 221,
		KeyF17 = 222,
		KeyF18 = 223,
		KeyF19 = 224,
		KeyF20 = 225,
		KeyF21 = 226,
		KeyF22 = 227,
		KeyF23 = 228,
		KeyF24 = 229,
		KeyF25 = 230,
		KeyF26 = 231,
		KeyF27 = 232,
		KeyF28 = 233,
		KeyF29 = 234,
		KeyF30 = 235,
		KeyF31 = 236,
		KeyF32 = 237,
		KeyF33 = 238,
		KeyF34 = 239,
		KeyF35 = 240,
		KeyF36 = 241,
		KeyF37 = 242,
		KeyF38 = 243,
		KeyF39 = 244,
		KeyF40 = 245,
		KeyF41 = 246,
		KeyF42 = 247,
		KeyF43 = 248,
		KeyF44 = 249,
		KeyF45 = 250,
		KeyF46 = 251,
		KeyF47 = 252,
		KeyF48 = 253,
		KeyF49 = 254,
		KeyF50 = 255,
		KeyF51 = 256,
		KeyF52 = 257,
		KeyF53 = 258,
		KeyF54 = 259,
		KeyF55 = 260,
		KeyF56 = 261,
		KeyF57 = 262,
		KeyF58 = 263,
		KeyF59 = 264,
		KeyF60 = 265,
		KeyF61 = 266,
		KeyF62 = 267,
		KeyF63 = 268,
		ClrBol = 269,
		ClearMargins = 270,
		SetLeftMargin = 271,
		SetRightMargin = 272,
		LabelFormat = 273,
		SetClock = 274,
		DisplayClock = 275,
		RemoveClock = 276,
		CreateWindow = 277,
		GotoWindow = 278,
		Hangup = 279,
		DialPhone = 280,
		QuickDial = 281,
		Tone = 282,
		Pulse = 283,
		FlashHook = 284,
		FixedPause = 285,
		WaitTone = 286,
		User0 = 287,
		User1 = 288,
		User2 = 289,
		User3 = 290,
		User4 = 291,
		User5 = 292,
		User6 = 293,
		User7 = 294,
		User8 = 295,
		User9 = 296,
		OrigPair = 297,
		OrigColors = 298,
		InitializeColor = 299,
		InitializePair = 300,
		SetColorPair = 301,
		SetForeground = 302,
		SetBackground = 303,
		ChangeCharPitch = 304,
		ChangeLinePitch = 305,
		ChangeResHorz = 306,
		ChangeResVert = 307,
		DefineChar = 308,
		EnterDoublewideMode = 309,
		EnterDraftQuality = 310,
		EnterItalicsMode = 311,
		EnterLeftwardMode = 312,
		EnterMicroMode = 313,
		EnterNearLetterQuality = 314,
		EnterNormalQuality = 315,
		EnterShadowMode = 316,
		EnterSubscriptMode = 317,
		EnterSuperscriptMode = 318,
		EnterUpwardMode = 319,
		ExitDoublewideMode = 320,
		ExitItalicsMode = 321,
		ExitLeftwardMode = 322,
		ExitMicroMode = 323,
		ExitShadowMode = 324,
		ExitSubscriptMode = 325,
		ExitSuperscriptMode = 326,
		ExitUpwardMode = 327,
		MicroColumnAddress = 328,
		MicroDown = 329,
		MicroLeft = 330,
		MicroRight = 331,
		MicroRowAddress = 332,
		MicroUp = 333,
		OrderOfPins = 334,
		ParmDownMicro = 335,
		ParmLeftMicro = 336,
		ParmRightMicro = 337,
		ParmUpMicro = 338,
		SelectCharSet = 339,
		SetBottomMargin = 340,
		SetBottomMarginParm = 341,
		SetLeftMarginParm = 342,
		SetRightMarginParm = 343,
		SetTopMargin = 344,
		SetTopMarginParm = 345,
		StartBitImage = 346,
		StartCharSetDef = 347,
		StopBitImage = 348,
		StopCharSetDef = 349,
		SubscriptCharacters = 350,
		SuperscriptCharacters = 351,
		TheseCauseCr = 352,
		ZeroMotion = 353,
		CharSetNames = 354,
		KeyMouse = 355,
		MouseInfo = 356,
		ReqMousePos = 357,
		GetMouse = 358,
		SetAForeground = 359,
		SetABackground = 360,
		PkeyPlab = 361,
		DeviceType = 362,
		CodeSetInit = 363,
		Set0DesSeq = 364,
		Set1DesSeq = 365,
		Set2DesSeq = 366,
		Set3DesSeq = 367,
		SetLrMargin = 368,
		SetTbMargin = 369,
		BitImageRepeat = 370,
		BitImageNewline = 371,
		BitImageCarriageReturn = 372,
		ColorNames = 373,
		DefineBitImageRegion = 374,
		EndBitImageRegion = 375,
		SetColorBand = 376,
		SetPageLength = 377,
		DisplayPcChar = 378,
		EnterPcCharsetMode = 379,
		ExitPcCharsetMode = 380,
		EnterScancodeMode = 381,
		ExitScancodeMode = 382,
		PcTermOptions = 383,
		ScancodeEscape = 384,
		AltScancodeEsc = 385,
		EnterHorizontalHlMode = 386,
		EnterLeftHlMode = 387,
		EnterLowHlMode = 388,
		EnterRightHlMode = 389,
		EnterTopHlMode = 390,
		EnterVerticalHlMode = 391,
		SetAAttributes = 392,
		SetPglenInch = 393,
		Last = 394
	}

	[Serializable]
	[ComVisible] // 0x0013B3C4-0x0013B3D8
	public abstract class TimeZone // TypeDefIndex: 376
	{
		// Fields
		[NonSerialized]
		private static object tz_lock; // 0x00
	
		// Constructors
		protected TimeZone(); // 0x00270300-0x00270308
		static TimeZone(); // 0x00270308-0x00270388
	}

	[Serializable]
	internal class CurrentSystemTimeZone : TimeZone // TypeDefIndex: 377
	{
		// Fields
		private readonly TimeZoneInfo LocalTimeZone; // 0x08
	
		// Constructors
		internal CurrentSystemTimeZone(); // 0x003335A4-0x00333634
	
		// Methods
		public static bool GetTimeZoneData(int year, out long[] data, out string[] names, out bool daylight_inverted); // 0x00333634-0x00333638
	}

	internal class TimeType // TypeDefIndex: 378
	{
		// Fields
		public readonly int Offset; // 0x08
		public readonly bool IsDst; // 0x0C
		public string Name; // 0x10
	
		// Constructors
		public TimeType(int offset, bool is_dst, string abbrev); // 0x0026FFC8-0x0026FFF8
	
		// Methods
		public override string ToString(); // 0x0026FFF8-0x00270300
	}

	[Serializable]
	[ComVisible] // 0x0013B3D8-0x0013B3EC
	public enum TypeCode // TypeDefIndex: 379
	{
		Empty = 0,
		Object = 1,
		DBNull = 2,
		Boolean = 3,
		Char = 4,
		SByte = 5,
		Byte = 6,
		Int16 = 7,
		UInt16 = 8,
		Int32 = 9,
		UInt32 = 10,
		Int64 = 11,
		UInt64 = 12,
		Single = 13,
		Double = 14,
		Decimal = 15,
		DateTime = 16,
		String = 18
	}

	internal interface TypeName : IEquatable<TypeName> // TypeDefIndex: 380
	{
		// Properties
		string DisplayName { get; }
	}

	internal interface TypeIdentifier : TypeName // TypeDefIndex: 381
	{
		// Properties
		string InternalName { get; }
	}

	internal class TypeNames // TypeDefIndex: 382
	{
		// Nested types
		internal abstract class ATypeName : TypeName // TypeDefIndex: 383
		{
			// Properties
			public abstract string DisplayName { get; }
	
			// Constructors
			protected ATypeName(); // 0x00A57778-0x00A57780
	
			// Methods
			public bool Equals(TypeName other); // 0x00A58EE4-0x00A58FE4
			public override int GetHashCode(); // 0x00A58FE4-0x00A59028
			public override bool Equals(object other); // 0x00A59028-0x00A5909C
		}
	}

	internal class TypeIdentifiers // TypeDefIndex: 384
	{
		// Nested types
		private class Display : TypeNames.ATypeName, TypeIdentifier // TypeDefIndex: 385
		{
			// Fields
			private string displayName; // 0x08
			private string internal_name; // 0x0C
	
			// Properties
			public override string DisplayName { get; } // 0x00A57780-0x00A57788 
			public string InternalName { get; } // 0x00A57788-0x00A577B0 
	
			// Constructors
			internal Display(string displayName); // 0x00A57750-0x00A57778
	
			// Methods
			private string GetInternalName(); // 0x00A577B0-0x00A577B8
		}
	
		// Methods
		internal static TypeIdentifier FromDisplay(string displayName); // 0x00A576D4-0x00A57750
	}

	internal interface ModifierSpec // TypeDefIndex: 386
	{
		// Methods
		Type Resolve(Type type);
		StringBuilder Append(StringBuilder sb);
	}

	internal class ArraySpec : ModifierSpec // TypeDefIndex: 387
	{
		// Fields
		private int dimensions; // 0x08
		private bool bound; // 0x0C
	
		// Constructors
		internal ArraySpec(int dimensions, bool bound); // 0x0076D640-0x0076D668
	
		// Methods
		public Type Resolve(Type type); // 0x0076D668-0x0076D70C
		public StringBuilder Append(StringBuilder sb); // 0x0076D70C-0x0076D7F8
		public override string ToString(); // 0x0076D7F8-0x0076D898
	}

	internal class PointerSpec : ModifierSpec // TypeDefIndex: 388
	{
		// Fields
		private int pointer_level; // 0x08
	
		// Constructors
		internal PointerSpec(int pointer_level); // 0x0074A918-0x0074A920
	
		// Methods
		public Type Resolve(Type type); // 0x0074A920-0x0074A980
		public StringBuilder Append(StringBuilder sb); // 0x0074A980-0x0074A9B8
		public override string ToString(); // 0x0074A9B8-0x0074AA58
	}

	internal class TypeSpec // TypeDefIndex: 389
	{
		// Fields
		private TypeIdentifier name; // 0x08
		private string assembly_name; // 0x0C
		private List<TypeIdentifier> nested; // 0x10
		private List<TypeSpec> generic_params; // 0x14
		private List<ModifierSpec> modifier_spec; // 0x18
		private bool is_byref; // 0x1C
		private string display_fullname; // 0x20
	
		// Properties
		internal bool HasModifiers { get; } // 0x00A5909C-0x00A590AC 
		internal string DisplayFullName { get; } // 0x00A596DC-0x00A59708 
	
		// Nested types
		[Flags] // 0x0013B3EC-0x0013B3FC
		internal enum DisplayNameFormat // TypeDefIndex: 390
		{
			Default = 0,
			WANT_ASSEMBLY = 1,
			NO_MODIFIERS = 2
		}
	
		// Constructors
		public TypeSpec(); // 0x00A5AED0-0x00A5AED8
	
		// Methods
		private string GetDisplayFullName(DisplayNameFormat flags); // 0x00A590AC-0x00A596DC
		private StringBuilder GetModifierString(StringBuilder sb); // 0x00A59708-0x00A5991C
		internal static TypeSpec Parse(string typeName); // 0x00A582E0-0x00A58420
		internal static string UnescapeInternalName(string displayName); // 0x00A577B8-0x00A57938
		internal Type Resolve(Func<AssemblyName, Assembly> assemblyResolver, Func<Assembly, string, bool, Type> typeResolver, bool throwOnError, bool ignoreCase); // 0x00A58420-0x00A58EE4
		private void AddName(string type_name); // 0x00A5AB54-0x00A5AC4C
		private void AddModifier(ModifierSpec md); // 0x00A5AC50-0x00A5AD10
		private static void SkipSpace(string name, ref int pos); // 0x00A5AD10-0x00A5ADF8
		private static void BoundCheck(int idx, string s); // 0x00A5ADF8-0x00A5AED0
		private static TypeIdentifier ParsedTypeIdentifier(string displayName); // 0x00A5AC4C-0x00A5AC50
		private static TypeSpec Parse(string name, ref int p, bool is_recurse, bool allow_aqn); // 0x00A5991C-0x00A5AB54
	}

	[Serializable]
	[CLSCompliant] // 0x0013B3FC-0x0013B434
	[ComVisible] // 0x0013B3FC-0x0013B434
	public struct UIntPtr : ISerializable // TypeDefIndex: 391
	{
		// Fields
		public static readonly UIntPtr Zero; // 0x00
		private unsafe void* _pointer; // 0x00
	
		// Properties
		public static int Size { get; } // 0x00A5E200-0x00A5E208 
	
		// Constructors
		public unsafe UIntPtr(uint value); // 0x00A5E0BC-0x00A5E158
		static UIntPtr(); // 0x00A5E320-0x00A5E378
	
		// Methods
		public override bool Equals(object obj); // 0x00A5E158-0x00A5E160
		public override int GetHashCode(); // 0x00A5E160-0x00A5E200
		public override string ToString(); // 0x00A5E208-0x00A5E2F0
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00A5E2F0-0x00A5E30C
		public static bool operator ==(UIntPtr value1, UIntPtr value2); // 0x00A5E30C-0x00A5E320
	}

	[Serializable]
	[ComVisible] // 0x0013B434-0x0013B448
	public abstract class ValueType // TypeDefIndex: 392
	{
		// Constructors
		protected ValueType(); // 0x00A60DF0-0x00A60DF8
	
		// Methods
		private static bool InternalEquals(object o1, object o2, out object[] fields); // 0x00A60DF8-0x00A60DFC
		internal static bool DefaultEquals(object o1, object o2); // 0x00A60DFC-0x00A61108
		public override bool Equals(object obj); // 0x00A61108-0x00A6110C
		internal static int InternalGetHashCode(object o, out object[] fields); // 0x00A6110C-0x00A61110
		public override int GetHashCode(); // 0x00A61110-0x00A61210
		public override string ToString(); // 0x00A61210-0x00A61348
	}

	internal struct Variant // TypeDefIndex: 393
	{
		// Fields
		public short vt; // 0x00
		public ushort wReserved1; // 0x02
		public ushort wReserved2; // 0x04
		public ushort wReserved3; // 0x06
		public long llVal; // 0x08
		public int lVal; // 0x08
		public byte bVal; // 0x08
		public short iVal; // 0x08
		public float fltVal; // 0x08
		public double dblVal; // 0x08
		public short boolVal; // 0x08
		public IntPtr bstrVal; // 0x08
		public sbyte cVal; // 0x08
		public ushort uiVal; // 0x08
		public uint ulVal; // 0x08
		public ulong ullVal; // 0x08
		public int intVal; // 0x08
		public uint uintVal; // 0x08
		public IntPtr pdispVal; // 0x08
		public BRECORD bRecord; // 0x08
	
		// Methods
		public void Clear(); // 0x00A61348-0x00A61350
	}

	internal struct BRECORD // TypeDefIndex: 394
	{
		// Fields
		private IntPtr pvRecord; // 0x00
		private IntPtr pRecInfo; // 0x04
	}

	[Serializable]
	[ComVisible] // 0x0013B448-0x0013B45C
	public struct Void // TypeDefIndex: 395
	{
	}

	[Serializable]
	[ComVisible] // 0x0013B45C-0x0013B470
	public class WeakReference : ISerializable // TypeDefIndex: 396
	{
		// Fields
		private bool isLongReference; // 0x08
		private GCHandle gcHandle; // 0x0C
	
		// Properties
		public virtual object Target { get; set; } // 0x00A6332C-0x00A63360 0x00A63360-0x00A6336C
		public virtual bool TrackResurrection { get; } // 0x00A6336C-0x00A63374 
	
		// Constructors
		protected WeakReference(); // 0x00A63164-0x00A6316C
		public WeakReference(object target); // 0x00A6316C-0x00A631A4
		public WeakReference(object target, bool trackResurrection); // 0x00A631A4-0x00A631DC
		protected WeakReference(SerializationInfo info, StreamingContext context); // 0x00A631DC-0x00A6332C
	
		// Methods
		private void AllocateHandle(object target); // 0x00A6313C-0x00A63164
		~WeakReference(); // 0x00A63374-0x00A633E0
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00A633E0-0x00A635A4
	}

	internal struct InputRecord // TypeDefIndex: 397
	{
		// Fields
		public short EventType; // 0x00
		public bool KeyDown; // 0x02
		public short RepeatCount; // 0x04
		public short VirtualKeyCode; // 0x06
		public short VirtualScanCode; // 0x08
		public char Character; // 0x0A
		public int ControlKeyState; // 0x0C
		private int pad1; // 0x10
		private bool pad2; // 0x14
	}

	internal struct Coord // TypeDefIndex: 398
	{
		// Fields
		public short X; // 0x00
		public short Y; // 0x02
	}

	internal struct SmallRect // TypeDefIndex: 399
	{
		// Fields
		public short Left; // 0x00
		public short Top; // 0x02
		public short Right; // 0x04
		public short Bottom; // 0x06
	}

	internal struct ConsoleScreenBufferInfo // TypeDefIndex: 400
	{
		// Fields
		public Coord Size; // 0x00
		public Coord CursorPosition; // 0x04
		public short Attribute; // 0x08
		public SmallRect Window; // 0x0A
		public Coord MaxWindowSize; // 0x12
	}

	internal enum Handles // TypeDefIndex: 401
	{
		STD_ERROR = -12,
		STD_OUTPUT = -11,
		STD_INPUT = -10
	}

	internal class WindowsConsoleDriver : IConsoleDriver // TypeDefIndex: 402
	{
		// Fields
		private IntPtr inputHandle; // 0x08
		private IntPtr outputHandle; // 0x0C
		private short defaultAttribute; // 0x10
	
		// Constructors
		public WindowsConsoleDriver(); // 0x00A635A4-0x00A63608
	
		// Methods
		public ConsoleKeyInfo ReadKey(bool intercept); // 0x00A6380C-0x00A639F0
		private static bool IsModifierKey(short virtualKeyCode); // 0x00A63B80-0x00A63BB0
		private static extern IntPtr GetStdHandle(Handles handle); // 0x00A63608-0x00A63710
		private static extern bool GetConsoleScreenBufferInfo(IntPtr handle, out ConsoleScreenBufferInfo info); // 0x00A63710-0x00A6380C
		private static extern bool ReadConsoleInput(IntPtr handle, out InputRecord record, int length, out int nread); // 0x00A639F0-0x00A63B80
	}

	internal class __ComObject // TypeDefIndex: 403
	{
		// Constructors
		private __ComObject(); // 0x00A63BB0-0x00A63D94
	}
}

namespace System.Configuration.Assemblies
{
	[Serializable]
	[ComVisible] // 0x0013B470-0x0013B484
	public enum AssemblyHashAlgorithm // TypeDefIndex: 404
	{
		None = 0,
		MD5 = 32771,
		SHA1 = 32772,
		SHA256 = 32780,
		SHA384 = 32781,
		SHA512 = 32782
	}

	[Serializable]
	[ComVisible] // 0x0013B484-0x0013B498
	public enum AssemblyVersionCompatibility // TypeDefIndex: 405
	{
		SameMachine = 1,
		SameProcess = 2,
		SameDomain = 3
	}
}

namespace System.Text
{
	[Serializable]
	[ComVisible] // 0x0013B498-0x0013B4AC
	public class ASCIIEncoding : Encoding // TypeDefIndex: 406
	{
		// Constructors
		public ASCIIEncoding(); // 0x006EED54-0x006EED5C
	
		// Methods
		internal override void SetDefaultFallbacks(); // 0x006EEE38-0x006EEE58
		public override int GetByteCount(char[] chars, int index, int count); // 0x006EF160-0x006EF378
		public override int GetByteCount(string chars); // 0x006EF378-0x006EF46C
		[CLSCompliant] // 0x00144508-0x00144540
		[ComVisible] // 0x00144508-0x00144540
		public override unsafe int GetByteCount(char* chars, int count); // 0x006EF46C-0x006EF5D8
		public override int GetBytes(string chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x006EF5D8-0x006EF8DC
		public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x006EF8DC-0x006EFBF0
		[CLSCompliant] // 0x00144540-0x00144578
		[ComVisible] // 0x00144540-0x00144578
		public override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount); // 0x006EFBF0-0x006EFD94
		public override int GetCharCount(byte[] bytes, int index, int count); // 0x006EFD94-0x006EFFAC
		[CLSCompliant] // 0x00144578-0x001445B0
		[ComVisible] // 0x00144578-0x001445B0
		public override unsafe int GetCharCount(byte* bytes, int count); // 0x006EFFAC-0x006F0118
		public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x006F0118-0x006F042C
		[CLSCompliant] // 0x001445B0-0x001445E8
		[ComVisible] // 0x001445B0-0x001445E8
		public override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount); // 0x006F042C-0x006F05D0
		public override string GetString(byte[] bytes, int byteIndex, int byteCount); // 0x006F05D0-0x006F07E0
		internal override unsafe int GetByteCount(char* chars, int charCount, EncoderNLS encoder); // 0x006F07E0-0x006F0C1C
		internal override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, EncoderNLS encoder); // 0x006F0D04-0x006F12B4
		internal override unsafe int GetCharCount(byte* bytes, int count, DecoderNLS decoder); // 0x006F1358-0x006F151C
		internal override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount, DecoderNLS decoder); // 0x006F15A0-0x006F18EC
		public override int GetMaxByteCount(int charCount); // 0x006F19A0-0x006F1B5C
		public override int GetMaxCharCount(int byteCount); // 0x006F1B5C-0x006F1CFC
		[ComVisible] // 0x001445E8-0x001445FC
		public override Decoder GetDecoder(); // 0x006F1CFC-0x006F1D6C
		[ComVisible] // 0x001445FC-0x00144610
		public override Encoder GetEncoder(); // 0x006F1DB8-0x006F1E28
	}

	[Serializable]
	[ComVisible] // 0x0013B4AC-0x0013B4C0
	public abstract class Decoder // TypeDefIndex: 407
	{
		// Fields
		internal DecoderFallback m_fallback; // 0x08
		[NonSerialized]
		internal DecoderFallbackBuffer m_fallbackBuffer; // 0x0C
	
		// Properties
		[ComVisible] // 0x001463A4-0x001463B8
		public DecoderFallback Fallback { get; } // 0x006F1524-0x006F152C 
		[ComVisible] // 0x001463B8-0x001463CC
		public DecoderFallbackBuffer FallbackBuffer { get; } // 0x006F152C-0x006F1594 
		internal bool InternalHasFallbackBuffer { get; } // 0x006F1F00-0x006F1F10 
	
		// Constructors
		protected Decoder(); // 0x006F1EF8-0x006F1F00
	
		// Methods
		internal void SerializeDecoder(SerializationInfo info); // 0x006F1E74-0x006F1EF8
		[ComVisible] // 0x00144610-0x00144624
		public virtual void Reset(); // 0x006F1F10-0x006F2018
		public abstract int GetCharCount(byte[] bytes, int index, int count);
		[ComVisible] // 0x00144624-0x00144638
		public virtual int GetCharCount(byte[] bytes, int index, int count, bool flush); // 0x006F2018-0x006F2040
		[CLSCompliant] // 0x00144638-0x00144670
		[ComVisible] // 0x00144638-0x00144670
		public virtual unsafe int GetCharCount(byte* bytes, int count, bool flush); // 0x006F2040-0x006F2218
		public abstract int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
		public virtual int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush); // 0x006F2218-0x006F2250
		[CLSCompliant] // 0x00144670-0x001446A8
		[ComVisible] // 0x00144670-0x001446A8
		public virtual unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount, bool flush); // 0x006F2250-0x006F24E4
	}

	[Serializable]
	internal sealed class InternalDecoderBestFitFallback : DecoderFallback // TypeDefIndex: 408
	{
		// Fields
		internal Encoding encoding; // 0x0C
		internal char[] arrayBestFit; // 0x10
		internal char cReplacement; // 0x14
	
		// Properties
		public override int MaxCharCount { get; } // 0x006FEB34-0x006FEB3C 
	
		// Constructors
		internal InternalDecoderBestFitFallback(Encoding encoding); // 0x006F7560-0x006F7594
	
		// Methods
		public override DecoderFallbackBuffer CreateFallbackBuffer(); // 0x006FE978-0x006FE9E8
		public override bool Equals(object value); // 0x006FEB3C-0x006FEC34
		public override int GetHashCode(); // 0x006FEC34-0x006FEC68
	}

	internal sealed class InternalDecoderBestFitFallbackBuffer : DecoderFallbackBuffer // TypeDefIndex: 409
	{
		// Fields
		internal char cBestFit; // 0x10
		internal int iCount; // 0x14
		internal int iSize; // 0x18
		private InternalDecoderBestFitFallback oFallback; // 0x1C
		private static object s_InternalSyncObject; // 0x00
	
		// Properties
		private static object InternalSyncObject { get; } // 0x006FEC68-0x006FED1C 
	
		// Constructors
		public InternalDecoderBestFitFallbackBuffer(InternalDecoderBestFitFallback fallback); // 0x006FE9E8-0x006FEB34
	
		// Methods
		public override bool Fallback(byte[] bytesUnknown, int index); // 0x006FED1C-0x006FED68
		public override char GetNextChar(); // 0x006FF068-0x006FF09C
		public override void Reset(); // 0x006FF09C-0x006FF0B0
		internal override unsafe int InternalFallback(byte[] bytes, byte* pBytes); // 0x006FF0B0-0x006FF0B8
		private char TryBestFit(byte[] bytesCheck); // 0x006FED68-0x006FF068
	}

	[Serializable]
	public sealed class DecoderExceptionFallback : DecoderFallback // TypeDefIndex: 410
	{
		// Properties
		public override int MaxCharCount { get; } // 0x006F2568-0x006F2570 
	
		// Constructors
		public DecoderExceptionFallback(); // 0x006F24E4-0x006F24EC
	
		// Methods
		public override DecoderFallbackBuffer CreateFallbackBuffer(); // 0x006F24F4-0x006F2560
		public override bool Equals(object value); // 0x006F2570-0x006F25EC
		public override int GetHashCode(); // 0x006F25EC-0x006F25F4
	}

	public sealed class DecoderExceptionFallbackBuffer : DecoderFallbackBuffer // TypeDefIndex: 411
	{
		// Constructors
		public DecoderExceptionFallbackBuffer(); // 0x006F2560-0x006F2568
	
		// Methods
		public override bool Fallback(byte[] bytesUnknown, int index); // 0x006F25F4-0x006F2604
		public override char GetNextChar(); // 0x006F28EC-0x006F28F4
		private void Throw(byte[] bytesUnknown, int index); // 0x006F2604-0x006F28EC
	}

	[Serializable]
	public sealed class DecoderFallbackException : ArgumentException // TypeDefIndex: 412
	{
		// Fields
		private byte[] bytesUnknown; // 0x48
		private int index; // 0x4C
	
		// Constructors
		public DecoderFallbackException(); // 0x006F35B4-0x006F363C
		internal DecoderFallbackException(SerializationInfo info, StreamingContext context); // 0x006F363C-0x006F365C
		public DecoderFallbackException(string message, byte[] bytesUnknown, int index); // 0x006F2AAC-0x006F2AD4
	}

	[Serializable]
	public abstract class DecoderFallback // TypeDefIndex: 413
	{
		// Fields
		internal bool bIsMicrosoftBestFitFallback; // 0x08
		private static DecoderFallback replacementFallback; // 0x00
		private static DecoderFallback exceptionFallback; // 0x04
		private static object s_InternalSyncObject; // 0x08
	
		// Properties
		private static object InternalSyncObject { get; } // 0x006F2ADC-0x006F2B94 
		public static DecoderFallback ReplacementFallback { get; } // 0x006EEFDC-0x006EF160 
		public static DecoderFallback ExceptionFallback { get; } // 0x006F2BF8-0x006F2D80 
		public abstract int MaxCharCount { get; }
	
		// Constructors
		protected DecoderFallback(); // 0x006F24EC-0x006F24F4
	
		// Methods
		public abstract DecoderFallbackBuffer CreateFallbackBuffer();
	}

	public abstract class DecoderFallbackBuffer // TypeDefIndex: 414
	{
		// Fields
		internal unsafe byte* byteStart; // 0x08
		internal unsafe char* charEnd; // 0x0C
	
		// Constructors
		protected DecoderFallbackBuffer(); // 0x006F2AD4-0x006F2ADC
	
		// Methods
		public abstract bool Fallback(byte[] bytesUnknown, int index);
		public abstract char GetNextChar();
		public virtual void Reset(); // 0x006F2D80-0x006F2DAC
		internal void InternalReset(); // 0x006F1988-0x006F19A0
		internal unsafe void InternalInitialize(byte* byteStart, char* charEnd); // 0x006F1594-0x006F15A0
		internal virtual unsafe bool InternalFallback(byte[] bytes, byte* pBytes, ref char* chars); // 0x006F2DAC-0x006F307C
		internal virtual unsafe int InternalFallback(byte[] bytes, byte* pBytes); // 0x006F307C-0x006F3310
		internal void ThrowLastBytesRecursive(byte[] bytesUnknown); // 0x006F3310-0x006F35B4
	}

	[Serializable]
	internal class DecoderNLS : Decoder, ISerializable // TypeDefIndex: 415
	{
		// Fields
		protected Encoding m_encoding; // 0x10
		[NonSerialized]
		protected bool m_mustFlush; // 0x14
		[NonSerialized]
		internal bool m_throwOnOverflow; // 0x15
		[NonSerialized]
		internal int m_bytesUsed; // 0x18
	
		// Properties
		public bool MustFlush { get; } // 0x006F41F4-0x006F41FC 
		internal virtual bool HasState { get; } // 0x006F41FC-0x006F4204 
	
		// Constructors
		internal DecoderNLS(SerializationInfo info, StreamingContext context); // 0x006F365C-0x006F3770
		internal DecoderNLS(Encoding encoding); // 0x006F1D6C-0x006F1DB8
		internal DecoderNLS(); // 0x006F386C-0x006F38A0
	
		// Methods
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x006F3770-0x006F386C
		public override void Reset(); // 0x006F38A0-0x006F38BC
		public override int GetCharCount(byte[] bytes, int index, int count); // 0x006F38BC-0x006F38E8
		public override int GetCharCount(byte[] bytes, int index, int count, bool flush); // 0x006F38E8-0x006F3B30
		public override unsafe int GetCharCount(byte* bytes, int count, bool flush); // 0x006F3B30-0x006F3CC0
		public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x006F3CC0-0x006F3D00
		public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush); // 0x006F3D00-0x006F402C
		public override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount, bool flush); // 0x006F402C-0x006F41F4
		internal void ClearMustFlush(); // 0x006F4204-0x006F4210
	}

	[Serializable]
	public sealed class DecoderReplacementFallback : DecoderFallback // TypeDefIndex: 416
	{
		// Fields
		private string strDefault; // 0x0C
	
		// Properties
		public string DefaultString { get; } // 0x006F18EC-0x006F18F4 
		public override int MaxCharCount { get; } // 0x006F451C-0x006F4548 
	
		// Constructors
		public DecoderReplacementFallback(); // 0x006F2B94-0x006F2BF8
		public DecoderReplacementFallback(string replacement); // 0x006F4210-0x006F4468
	
		// Methods
		public override DecoderFallbackBuffer CreateFallbackBuffer(); // 0x006F4468-0x006F44D8
		public override bool Equals(object value); // 0x006F4548-0x006F45EC
		public override int GetHashCode(); // 0x006F45EC-0x006F4620
	}

	public sealed class DecoderReplacementFallbackBuffer : DecoderFallbackBuffer // TypeDefIndex: 417
	{
		// Fields
		private string strDefault; // 0x10
		private int fallbackCount; // 0x14
		private int fallbackIndex; // 0x18
	
		// Constructors
		public DecoderReplacementFallbackBuffer(DecoderReplacementFallback fallback); // 0x006F44D8-0x006F451C
	
		// Methods
		public override bool Fallback(byte[] bytesUnknown, int index); // 0x006F4620-0x006F46A4
		public override char GetNextChar(); // 0x006F46A4-0x006F470C
		public override void Reset(); // 0x006F470C-0x006F4724
		internal override unsafe int InternalFallback(byte[] bytes, byte* pBytes); // 0x006F4724-0x006F4750
	}

	[Serializable]
	[ComVisible] // 0x0013B4C0-0x0013B4D4
	public abstract class Encoder // TypeDefIndex: 418
	{
		// Fields
		internal EncoderFallback m_fallback; // 0x08
		[NonSerialized]
		internal EncoderFallbackBuffer m_fallbackBuffer; // 0x0C
	
		// Properties
		[ComVisible] // 0x001463CC-0x001463E0
		public EncoderFallback Fallback { get; } // 0x006F0C1C-0x006F0C24 
		[ComVisible] // 0x001463E0-0x001463F4
		public EncoderFallbackBuffer FallbackBuffer { get; } // 0x006F0C34-0x006F0C9C 
		internal bool InternalHasFallbackBuffer { get; } // 0x006F0C24-0x006F0C34 
	
		// Constructors
		protected Encoder(); // 0x006F47D4-0x006F47DC
	
		// Methods
		internal void SerializeEncoder(SerializationInfo info); // 0x006F4750-0x006F47D4
		[ComVisible] // 0x001446A8-0x001446BC
		public virtual void Reset(); // 0x006F47DC-0x006F48E4
		public abstract int GetByteCount(char[] chars, int index, int count, bool flush);
		[CLSCompliant] // 0x001446BC-0x001446F4
		[ComVisible] // 0x001446BC-0x001446F4
		public virtual unsafe int GetByteCount(char* chars, int count, bool flush); // 0x006F48E4-0x006F4AD0
		public abstract int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush);
		[CLSCompliant] // 0x001446F4-0x0014472C
		[ComVisible] // 0x001446F4-0x0014472C
		public virtual unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, bool flush); // 0x006F4AD0-0x006F4D6C
	}

	[Serializable]
	internal class InternalEncoderBestFitFallback : EncoderFallback // TypeDefIndex: 419
	{
		// Fields
		internal Encoding encoding; // 0x0C
		internal char[] arrayBestFit; // 0x10
	
		// Properties
		public override int MaxCharCount { get; } // 0x006FF274-0x006FF27C 
	
		// Constructors
		internal InternalEncoderBestFitFallback(Encoding encoding); // 0x006F7538-0x006F7560
	
		// Methods
		public override EncoderFallbackBuffer CreateFallbackBuffer(); // 0x006FF0B8-0x006FF128
		public override bool Equals(object value); // 0x006FF27C-0x006FF38C
		public override int GetHashCode(); // 0x006FF38C-0x006FF3C0
	}

	internal sealed class InternalEncoderBestFitFallbackBuffer : EncoderFallbackBuffer // TypeDefIndex: 420
	{
		// Fields
		private char cBestFit; // 0x1C
		private InternalEncoderBestFitFallback oFallback; // 0x20
		private int iCount; // 0x24
		private int iSize; // 0x28
		private static object s_InternalSyncObject; // 0x00
	
		// Properties
		private static object InternalSyncObject { get; } // 0x006FF3C0-0x006FF474 
		public override int Remaining { get; } // 0x006FFA18-0x006FFA28 
	
		// Constructors
		public InternalEncoderBestFitFallbackBuffer(InternalEncoderBestFitFallback fallback); // 0x006FF128-0x006FF274
	
		// Methods
		public override bool Fallback(char charUnknown, int index); // 0x006FF474-0x006FF4A8
		public override bool Fallback(char charUnknownHigh, char charUnknownLow, int index); // 0x006FF68C-0x006FF9B0
		public override char GetNextChar(); // 0x006FF9B0-0x006FF9E4
		public override bool MovePrevious(); // 0x006FF9E4-0x006FFA18
		public override void Reset(); // 0x006FFA28-0x006FFA40
		private char TryBestFit(char cUnknown); // 0x006FF4A8-0x006FF68C
	}

	[Serializable]
	public sealed class EncoderExceptionFallback : EncoderFallback // TypeDefIndex: 421
	{
		// Properties
		public override int MaxCharCount { get; } // 0x006F4DF0-0x006F4DF8 
	
		// Constructors
		public EncoderExceptionFallback(); // 0x006F4D6C-0x006F4D74
	
		// Methods
		public override EncoderFallbackBuffer CreateFallbackBuffer(); // 0x006F4D7C-0x006F4DE8
		public override bool Equals(object value); // 0x006F4DF8-0x006F4E74
		public override int GetHashCode(); // 0x006F4E74-0x006F4E7C
	}

	public sealed class EncoderExceptionFallbackBuffer : EncoderFallbackBuffer // TypeDefIndex: 422
	{
		// Properties
		public override int Remaining { get; } // 0x006F5798-0x006F57A0 
	
		// Constructors
		public EncoderExceptionFallbackBuffer(); // 0x006F4DE8-0x006F4DF0
	
		// Methods
		public override bool Fallback(char charUnknown, int index); // 0x006F4E84-0x006F4FE4
		public override bool Fallback(char charUnknownHigh, char charUnknownLow, int index); // 0x006F500C-0x006F5458
		public override char GetNextChar(); // 0x006F5788-0x006F5790
		public override bool MovePrevious(); // 0x006F5790-0x006F5798
	}

	[Serializable]
	public sealed class EncoderFallbackException : ArgumentException // TypeDefIndex: 423
	{
		// Fields
		private char charUnknown; // 0x48
		private char charUnknownHigh; // 0x4A
		private char charUnknownLow; // 0x4C
		private int index; // 0x50
	
		// Constructors
		public EncoderFallbackException(); // 0x006F5DE0-0x006F5E68
		internal EncoderFallbackException(SerializationInfo info, StreamingContext context); // 0x006F5E68-0x006F5E88
		internal EncoderFallbackException(string message, char charUnknown, int index); // 0x006F4FE4-0x006F500C
		internal EncoderFallbackException(string message, char charUnknownHigh, char charUnknownLow, int index); // 0x006F5458-0x006F5788
	}

	[Serializable]
	public abstract class EncoderFallback // TypeDefIndex: 424
	{
		// Fields
		internal bool bIsMicrosoftBestFitFallback; // 0x08
		private static EncoderFallback replacementFallback; // 0x00
		private static EncoderFallback exceptionFallback; // 0x04
		private static object s_InternalSyncObject; // 0x08
	
		// Properties
		private static object InternalSyncObject { get; } // 0x006F57A0-0x006F5858 
		public static EncoderFallback ReplacementFallback { get; } // 0x006EEE58-0x006EEFDC 
		public static EncoderFallback ExceptionFallback { get; } // 0x006F58BC-0x006F5A44 
		public abstract int MaxCharCount { get; }
	
		// Constructors
		protected EncoderFallback(); // 0x006F4D74-0x006F4D7C
	
		// Methods
		public abstract EncoderFallbackBuffer CreateFallbackBuffer();
	}

	public abstract class EncoderFallbackBuffer // TypeDefIndex: 425
	{
		// Fields
		internal unsafe char* charStart; // 0x08
		internal unsafe char* charEnd; // 0x0C
		internal EncoderNLS encoder; // 0x10
		internal bool setEncoder; // 0x14
		internal bool bUsedEncoder; // 0x15
		internal bool bFallingBack; // 0x16
		internal int iRecursionCount; // 0x18
	
		// Properties
		public abstract int Remaining { get; }
	
		// Constructors
		protected EncoderFallbackBuffer(); // 0x006F4E7C-0x006F4E84
	
		// Methods
		public abstract bool Fallback(char charUnknown, int index);
		public abstract bool Fallback(char charUnknownHigh, char charUnknownLow, int index);
		public abstract char GetNextChar();
		public abstract bool MovePrevious();
		public virtual void Reset(); // 0x006F5A44-0x006F5A70
		internal void InternalReset(); // 0x006F5A70-0x006F5A90
		internal unsafe void InternalInitialize(char* charStart, char* charEnd, EncoderNLS encoder, bool setEncoder); // 0x006F0C9C-0x006F0CC0
		internal char InternalGetNextChar(); // 0x006F0CC8-0x006F0D04
		internal virtual unsafe bool InternalFallback(char ch, ref char* chars); // 0x006F5A90-0x006F5CAC
		internal void ThrowLastCharRecursive(int charRecursive); // 0x006F5CB4-0x006F5DE0
	}

	[Serializable]
	internal class EncoderNLS : Encoder, ISerializable // TypeDefIndex: 426
	{
		// Fields
		internal char charLeftOver; // 0x10
		protected Encoding m_encoding; // 0x14
		[NonSerialized]
		protected bool m_mustFlush; // 0x18
		[NonSerialized]
		internal bool m_throwOnOverflow; // 0x19
		[NonSerialized]
		internal int m_charsUsed; // 0x1C
	
		// Properties
		public Encoding Encoding { get; } // 0x006F69F4-0x006F69FC 
		public bool MustFlush { get; } // 0x006F5CAC-0x006F5CB4 
	
		// Constructors
		internal EncoderNLS(SerializationInfo info, StreamingContext context); // 0x006F5E88-0x006F5F9C
		internal EncoderNLS(Encoding encoding); // 0x006F1E28-0x006F1E74
		internal EncoderNLS(); // 0x006F60CC-0x006F6100
	
		// Methods
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x006F5F9C-0x006F60CC
		public override void Reset(); // 0x006F6100-0x006F6128
		public override int GetByteCount(char[] chars, int index, int count, bool flush); // 0x006F6128-0x006F6370
		public override unsafe int GetByteCount(char* chars, int count, bool flush); // 0x006F6370-0x006F6500
		public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush); // 0x006F6500-0x006F682C
		public override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, bool flush); // 0x006F682C-0x006F69F4
		internal void ClearMustFlush(); // 0x006F69FC-0x006F6A08
	}

	[Serializable]
	public sealed class EncoderReplacementFallback : EncoderFallback // TypeDefIndex: 427
	{
		// Fields
		private string strDefault; // 0x0C
	
		// Properties
		public string DefaultString { get; } // 0x006F12B4-0x006F12BC 
		public override int MaxCharCount { get; } // 0x006F6D3C-0x006F6D68 
	
		// Constructors
		public EncoderReplacementFallback(); // 0x006F5858-0x006F58BC
		public EncoderReplacementFallback(string replacement); // 0x006F6A08-0x006F6C60
	
		// Methods
		public override EncoderFallbackBuffer CreateFallbackBuffer(); // 0x006F6C60-0x006F6CD0
		public override bool Equals(object value); // 0x006F6D68-0x006F6E0C
		public override int GetHashCode(); // 0x006F6E0C-0x006F6E40
	}

	public sealed class EncoderReplacementFallbackBuffer : EncoderFallbackBuffer // TypeDefIndex: 428
	{
		// Fields
		private string strDefault; // 0x1C
		private int fallbackCount; // 0x20
		private int fallbackIndex; // 0x24
	
		// Properties
		public override int Remaining { get; } // 0x006F7450-0x006F7460 
	
		// Constructors
		public EncoderReplacementFallbackBuffer(EncoderReplacementFallback fallback); // 0x006F6CD0-0x006F6D3C
	
		// Methods
		public override bool Fallback(char charUnknown, int index); // 0x006F6E40-0x006F701C
		public override bool Fallback(char charUnknownHigh, char charUnknownLow, int index); // 0x006F701C-0x006F73B4
		public override char GetNextChar(); // 0x006F73B4-0x006F741C
		public override bool MovePrevious(); // 0x006F741C-0x006F7450
		public override void Reset(); // 0x006F7460-0x006F747C
	}

	[Serializable]
	[ComVisible] // 0x0013B4D4-0x0013B4E8
	public abstract class Encoding : ICloneable // TypeDefIndex: 429
	{
		// Fields
		private static Encoding defaultEncoding; // 0x00
		private static Encoding unicodeEncoding; // 0x04
		private static Encoding bigEndianUnicode; // 0x08
		private static Encoding utf7Encoding; // 0x0C
		private static Encoding utf8Encoding; // 0x10
		private static Encoding utf32Encoding; // 0x14
		private static Encoding asciiEncoding; // 0x18
		private static Encoding latin1Encoding; // 0x1C
		private static Hashtable encodings; // 0x20
		internal int m_codePage; // 0x08
		internal CodePageDataItem dataItem; // 0x0C
		[NonSerialized]
		internal bool m_deserializedFromEverett; // 0x10
		[OptionalField] // 0x00142528-0x00142558
		private bool m_isReadOnly; // 0x11
		[OptionalField] // 0x00142558-0x00142588
		internal EncoderFallback encoderFallback; // 0x14
		[OptionalField] // 0x00142588-0x001425B8
		internal DecoderFallback decoderFallback; // 0x18
		private static object s_InternalSyncObject; // 0x24
	
		// Properties
		private static object InternalSyncObject { get; } // 0x006F7C20-0x006F7CD8 
		public virtual string EncodingName { get; } // 0x006F9B60-0x006F9B6C 
		public virtual string HeaderName { get; } // 0x006F9B6C-0x006F9BB4 
		public virtual string WebName { get; } // 0x006F9BB4-0x006F9BFC 
		[ComVisible] // 0x001463F4-0x00146408
		public EncoderFallback EncoderFallback { get; set; } // 0x006F0CC0-0x006F0CC8 0x006F9BFC-0x006F9D10
		[ComVisible] // 0x00146408-0x0014641C
		public DecoderFallback DecoderFallback { get; set; } // 0x006F151C-0x006F1524 0x006F9D18-0x006F9E2C
		[ComVisible] // 0x0014641C-0x00146430
		public bool IsReadOnly { get; } // 0x006F9D10-0x006F9D18 
		public static Encoding ASCII { get; } // 0x006EEC88-0x006EED54 
		private static Encoding Latin1 { get; } // 0x006F8EA4-0x006F8F70 
		public virtual int CodePage { get; } // 0x006FAD70-0x006FAD78 
		public static Encoding Default { get; } // 0x006F89DC-0x006F8A8C 
		public static Encoding Unicode { get; } // 0x006F8A8C-0x006F8B60 
		public static Encoding BigEndianUnicode { get; } // 0x006F8B60-0x006F8C34 
		public static Encoding UTF7 { get; } // 0x006F8C34-0x006F8D00 
		public static Encoding UTF8 { get; } // 0x006F8DD4-0x006F8EA4 
		public static Encoding UTF32 { get; } // 0x006F8D00-0x006F8DD4 
	
		// Nested types
		[Serializable]
		internal class DefaultEncoder : Encoder, ISerializable, IObjectReference // TypeDefIndex: 430
		{
			// Fields
			private Encoding m_encoding; // 0x10
			[NonSerialized]
			private bool m_hasInitializedEncoding; // 0x14
			[NonSerialized]
			internal char charLeftOver; // 0x16
	
			// Constructors
			public DefaultEncoder(Encoding encoding); // 0x006FB138-0x006FB160
			internal DefaultEncoder(SerializationInfo info, StreamingContext context); // 0x006FBE78-0x006FC22C
	
			// Methods
			public object GetRealObject(StreamingContext context); // 0x006FC22C-0x006FC324
			void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x006FC324-0x006FC3F4
			public override int GetByteCount(char[] chars, int index, int count, bool flush); // 0x006FC3F4-0x006FC44C
			public override unsafe int GetByteCount(char* chars, int count, bool flush); // 0x006FC44C-0x006FC490
			public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush); // 0x006FC490-0x006FC4F8
			public override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, bool flush); // 0x006FC4F8-0x006FC558
		}
	
		[Serializable]
		internal class DefaultDecoder : Decoder, ISerializable, IObjectReference // TypeDefIndex: 431
		{
			// Fields
			private Encoding m_encoding; // 0x10
			[NonSerialized]
			private bool m_hasInitializedEncoding; // 0x14
	
			// Constructors
			public DefaultDecoder(Encoding encoding); // 0x006FADF4-0x006FAE1C
			internal DefaultDecoder(SerializationInfo info, StreamingContext context); // 0x006FB810-0x006FBB64
	
			// Methods
			public object GetRealObject(StreamingContext context); // 0x006FBB64-0x006FBBD8
			void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x006FBBD8-0x006FBCA8
			public override int GetCharCount(byte[] bytes, int index, int count); // 0x006FBCA8-0x006FBCD4
			public override int GetCharCount(byte[] bytes, int index, int count, bool flush); // 0x006FBCD4-0x006FBD2C
			public override unsafe int GetCharCount(byte* bytes, int count, bool flush); // 0x006FBD2C-0x006FBD70
			public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x006FBD70-0x006FBDB0
			public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush); // 0x006FBDB0-0x006FBE18
			public override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount, bool flush); // 0x006FBE18-0x006FBE78
		}
	
		internal class EncodingCharBuffer // TypeDefIndex: 432
		{
			// Fields
			private unsafe char* chars; // 0x08
			private unsafe char* charStart; // 0x0C
			private unsafe char* charEnd; // 0x10
			private int charCountResult; // 0x14
			private Encoding enc; // 0x18
			private DecoderNLS decoder; // 0x1C
			private unsafe byte* byteStart; // 0x20
			private unsafe byte* byteEnd; // 0x24
			private unsafe byte* bytes; // 0x28
			private DecoderFallbackBuffer fallbackBuffer; // 0x2C
	
			// Properties
			internal bool MoreData { get; } // 0x006FCC08-0x006FCC20 
			internal int BytesUsed { get; } // 0x006FCC44-0x006FCC54 
			internal int Count { get; } // 0x006FCE58-0x006FCE60 
	
			// Constructors
			internal unsafe EncodingCharBuffer(Encoding enc, DecoderNLS decoder, char* charStart, int charCount, byte* byteStart, int byteCount); // 0x006FCA98-0x006FCB64
	
			// Methods
			internal bool AddChar(char ch, int numBytes); // 0x006FCB64-0x006FCBF0
			internal bool AddChar(char ch); // 0x006FCBF0-0x006FCBF8
			internal void AdjustBytes(int count); // 0x006FCBF8-0x006FCC08
			internal byte GetNextByte(); // 0x006FCC20-0x006FCC44
			internal bool Fallback(byte fallbackByte); // 0x006FCC54-0x006FCCFC
			internal bool Fallback(byte[] byteBuffer); // 0x006FCCFC-0x006FCE58
		}
	
		internal class EncodingByteBuffer // TypeDefIndex: 433
		{
			// Fields
			private unsafe byte* bytes; // 0x08
			private unsafe byte* byteStart; // 0x0C
			private unsafe byte* byteEnd; // 0x10
			private unsafe char* chars; // 0x14
			private unsafe char* charStart; // 0x18
			private unsafe char* charEnd; // 0x1C
			private int byteCountResult; // 0x20
			private Encoding enc; // 0x24
			private EncoderNLS encoder; // 0x28
			internal EncoderFallbackBuffer fallbackBuffer; // 0x2C
	
			// Properties
			internal bool MoreData { get; } // 0x006FC9B0-0x006FCA0C 
			internal int CharsUsed { get; } // 0x006FCA78-0x006FCA90 
			internal int Count { get; } // 0x006FCA90-0x006FCA98 
	
			// Constructors
			internal unsafe EncodingByteBuffer(Encoding inEncoding, EncoderNLS inEncoder, byte* inByteStart, int inByteCount, char* inCharStart, int inCharCount); // 0x006FC558-0x006FC844
	
			// Methods
			internal bool AddByte(byte b, int moreBytesExpected); // 0x006FC844-0x006FC898
			internal bool AddByte(byte b1); // 0x006FC94C-0x006FC954
			internal bool AddByte(byte b1, byte b2); // 0x006FC954-0x006FC970
			internal bool AddByte(byte b1, byte b2, int moreBytesExpected); // 0x006FC970-0x006FC9B0
			internal void MovePrevious(bool bThrow); // 0x006FC898-0x006FC94C
			internal char GetNextChar(); // 0x006FCA0C-0x006FCA78
		}
	
		// Constructors
		protected Encoding(); // 0x006F747C-0x006F7484
		protected Encoding(int codePage); // 0x006EED5C-0x006EEE38
	
		// Methods
		internal virtual void SetDefaultFallbacks(); // 0x006F7484-0x006F7538
		internal void OnDeserializing(); // 0x006F7594-0x006F75AC
		internal void OnDeserialized(); // 0x006F75AC-0x006F75F4
		[OnDeserializing] // 0x0014472C-0x0014473C
		private void OnDeserializing(StreamingContext ctx); // 0x006F75F4-0x006F760C
		[OnDeserialized] // 0x0014473C-0x0014474C
		private void OnDeserialized(StreamingContext ctx); // 0x006F760C-0x006F7654
		[OnSerializing] // 0x0014474C-0x0014475C
		private void OnSerializing(StreamingContext ctx); // 0x006F7654-0x006F7660
		internal void DeserializeEncoding(SerializationInfo info, StreamingContext context); // 0x006F7660-0x006F7A90
		internal void SerializeEncoding(SerializationInfo info, StreamingContext context); // 0x006F7A90-0x006F7C20
		public static Encoding GetEncoding(int codepage); // 0x006F7CD8-0x006F887C
		public static Encoding GetEncoding(string name); // 0x006F9738-0x006F97FC
		public virtual byte[] GetPreamble(); // 0x006F995C-0x006F99E8
		private void GetDataItem(); // 0x006F99E8-0x006F9B60
		[ComVisible] // 0x0014475C-0x00144770
		public virtual object Clone(); // 0x006F9E2C-0x006F9F28
		public virtual int GetByteCount(string s); // 0x006F9F30-0x006FA02C
		public abstract int GetByteCount(char[] chars, int index, int count);
		[CLSCompliant] // 0x00144770-0x001447A8
		[ComVisible] // 0x00144770-0x001447A8
		public virtual unsafe int GetByteCount(char* chars, int count); // 0x006FA02C-0x006FA208
		internal virtual unsafe int GetByteCount(char* chars, int count, EncoderNLS encoder); // 0x006FA208-0x006FA218
		public virtual byte[] GetBytes(char[] chars, int index, int count); // 0x006FA218-0x006FA2EC
		public abstract int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
		public virtual byte[] GetBytes(string s); // 0x006FA2EC-0x006FA434
		public virtual int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x006FA434-0x006FA534
		internal virtual unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, EncoderNLS encoder); // 0x006FA534-0x006FA560
		[CLSCompliant] // 0x001447A8-0x001447E0
		[ComVisible] // 0x001447A8-0x001447E0
		public virtual unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount); // 0x006FA560-0x006FA7F8
		public abstract int GetCharCount(byte[] bytes, int index, int count);
		[CLSCompliant] // 0x001447E0-0x00144818
		[ComVisible] // 0x001447E0-0x00144818
		public virtual unsafe int GetCharCount(byte* bytes, int count); // 0x006FA7F8-0x006FA9D0
		internal virtual unsafe int GetCharCount(byte* bytes, int count, DecoderNLS decoder); // 0x006FA9D0-0x006FA9E0
		public virtual char[] GetChars(byte[] bytes, int index, int count); // 0x006FA9E0-0x006FAAB4
		public abstract int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
		[CLSCompliant] // 0x00144818-0x00144850
		[ComVisible] // 0x00144818-0x00144850
		public virtual unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount); // 0x006FAAB4-0x006FAD44
		internal virtual unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount, DecoderNLS decoder); // 0x006FAD44-0x006FAD70
		public virtual Decoder GetDecoder(); // 0x006FAD78-0x006FADF4
		private static Encoding CreateDefaultEncoding(); // 0x006FAE1C-0x006FAEB4
		internal void setReadOnly(bool value = true /* Metadata: 0x00204292 */); // 0x006FB0B4-0x006FB0BC
		public virtual Encoder GetEncoder(); // 0x006FB0BC-0x006FB138
		public abstract int GetMaxByteCount(int charCount);
		public abstract int GetMaxCharCount(int byteCount);
		public virtual string GetString(byte[] bytes); // 0x006FB160-0x006FB25C
		public virtual string GetString(byte[] bytes, int index, int count); // 0x006FB25C-0x006FB294
		public override bool Equals(object value); // 0x006FB294-0x006FB3B8
		public override int GetHashCode(); // 0x006FB3B8-0x006FB428
		internal virtual char[] GetBestFitUnicodeToBytesData(); // 0x006FB428-0x006FB4B4
		internal virtual char[] GetBestFitBytesToUnicodeData(); // 0x006FB4B4-0x006FB540
		internal void ThrowBytesOverflow(); // 0x006FB540-0x006FB6A8
		internal void ThrowBytesOverflow(EncoderNLS encoder, bool nothingEncoded); // 0x006F12BC-0x006F1358
		internal void ThrowCharsOverflow(); // 0x006FB6A8-0x006FB810
		internal void ThrowCharsOverflow(DecoderNLS decoder, bool nothingDecoded); // 0x006F18F4-0x006F1988
	}

	[Serializable]
	[ComVisible] // 0x0013B4E8-0x0013B4FC
	internal abstract class EncodingNLS : Encoding // TypeDefIndex: 434
	{
		// Constructors
		protected EncodingNLS(int codePage); // 0x006FD194-0x006FD198
	
		// Methods
		public override int GetByteCount(char[] chars, int index, int count); // 0x006FD198-0x006FD3B0
		public override int GetByteCount(string s); // 0x006FD3B0-0x006FD4A4
		public override unsafe int GetByteCount(char* chars, int count); // 0x006FD4A4-0x006FD610
		public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x006FD610-0x006FD914
		public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x006FD914-0x006FDC28
		public override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount); // 0x006FDC28-0x006FDDCC
		public override int GetCharCount(byte[] bytes, int index, int count); // 0x006FDDCC-0x006FDFE4
		public override unsafe int GetCharCount(byte* bytes, int count); // 0x006FDFE4-0x006FE150
		public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x006FE150-0x006FE464
		public override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount); // 0x006FE464-0x006FE608
		public override string GetString(byte[] bytes, int index, int count); // 0x006FE608-0x006FE818
		public override Decoder GetDecoder(); // 0x006FE818-0x006FE888
		public override Encoder GetEncoder(); // 0x006FE888-0x006FE8F8
	}

	[ComVisible] // 0x0013B4FC-0x0013B510
	public abstract class EncodingProvider // TypeDefIndex: 435
	{
		// Fields
		private static object s_InternalSyncObject; // 0x00
		private static EncodingProvider[] s_providers; // 0x04
	
		// Constructors
		static EncodingProvider(); // 0x006FE8F8-0x006FE978
	
		// Methods
		public abstract Encoding GetEncoding(string name);
		public abstract Encoding GetEncoding(int codepage);
		internal static Encoding GetEncodingFromProvider(int codepage); // 0x006F887C-0x006F89DC
		internal static Encoding GetEncodingFromProvider(string encodingName); // 0x006F97FC-0x006F995C
	}

	[Serializable]
	internal class Latin1Encoding : EncodingNLS, ISerializable // TypeDefIndex: 436
	{
		// Fields
		private static readonly char[] arrayCharBestFit; // 0x00
	
		// Constructors
		public Latin1Encoding(); // 0x006F9F28-0x006F9F30
		internal Latin1Encoding(SerializationInfo info, StreamingContext context); // 0x006FFA40-0x006FFA70
		static Latin1Encoding(); // 0x007006E0-0x00700778
	
		// Methods
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x006FFA70-0x006FFB98
		internal override unsafe int GetByteCount(char* chars, int charCount, EncoderNLS encoder); // 0x006FFB98-0x006FFDF0
		internal override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, EncoderNLS encoder); // 0x006FFDF0-0x0070028C
		internal override unsafe int GetCharCount(byte* bytes, int count, DecoderNLS decoder); // 0x0070028C-0x00700294
		internal override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount, DecoderNLS decoder); // 0x00700294-0x007002F8
		public override int GetMaxByteCount(int charCount); // 0x007002F8-0x007004B4
		public override int GetMaxCharCount(int byteCount); // 0x007004B4-0x00700654
		internal override char[] GetBestFitUnicodeToBytesData(); // 0x00700654-0x007006E0
	}

	[Serializable]
	[ComVisible] // 0x0013B510-0x0013B55C
	public sealed class StringBuilder : ISerializable // TypeDefIndex: 437
	{
		// Fields
		internal char[] m_ChunkChars; // 0x08
		internal StringBuilder m_ChunkPrevious; // 0x0C
		internal int m_ChunkLength; // 0x10
		internal int m_ChunkOffset; // 0x14
		internal int m_MaxCapacity; // 0x18
		internal const int DefaultCapacity = 16; // Metadata: 0x00204293
		private const string CapacityField = "Capacity"; // Metadata: 0x00204297
		private const string MaxCapacityField = "m_MaxCapacity"; // Metadata: 0x002042A3
		private const string StringValueField = "m_StringValue"; // Metadata: 0x002042B4
		private const string ThreadIDField = "m_currentThread"; // Metadata: 0x002042C5
		internal const int MaxChunkSize = 8000; // Metadata: 0x002042D8
	
		// Properties
		public int Capacity { get; } // 0x00703BD0-0x00703C00 
		public int MaxCapacity { get; } // 0x00703C00-0x00703C08 
		public int Length { get; set; } // 0x006EB4F8-0x006EB508 0x006EB59C-0x006EB7C0
		public char Cthis[int index] { get => default; set {} } // 0x006EB7C0-0x006EB900 0x00701918-0x00701AC4
	
		// Constructors
		public StringBuilder(); // 0x006EB4F0-0x006EB4F8
		public StringBuilder(int capacity); // 0x006F28F4-0x006F2968
		public StringBuilder(string value); // 0x0070315C-0x00703164
		public StringBuilder(string value, int capacity); // 0x007030F4-0x0070315C
		public StringBuilder(string value, int startIndex, int length, int capacity); // 0x00703164-0x007034C8
		private StringBuilder(SerializationInfo info, StreamingContext context); // 0x007035F8-0x00703A70
		private StringBuilder(StringBuilder from); // 0x00706F64-0x0070700C
		private StringBuilder(int size, int maxCapacity, StringBuilder previousBlock); // 0x0070700C-0x007070A8
	
		// Methods
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00703A70-0x00703BD0
		public override string ToString(); // 0x00703C08-0x00703DB0
		public string ToString(int startIndex, int length); // 0x00703DB0-0x00704160
		public StringBuilder Clear(); // 0x00704160-0x0070417C
		public StringBuilder Append(char value, int repeatCount); // 0x0070417C-0x007042E8
		public StringBuilder Append(char[] value, int startIndex, int charCount); // 0x00704500-0x007047A4
		public StringBuilder Append(string value); // 0x006F2968-0x006F2AAC
		private void AppendHelper(string value); // 0x00704940-0x00704990
		public StringBuilder Append(string value, int startIndex, int count); // 0x00702254-0x007024F0
		[ComVisible] // 0x00144850-0x00144864
		public StringBuilder AppendLine(); // 0x00704990-0x007049B4
		[ComVisible] // 0x00144864-0x00144878
		public StringBuilder AppendLine(string value); // 0x007049B4-0x007049DC
		public StringBuilder Insert(int index, string value, int count); // 0x007049DC-0x00704C34
		public StringBuilder Remove(int startIndex, int length); // 0x00701AC4-0x00701CD8
		public StringBuilder Append(char value); // 0x006EB508-0x006EB59C
		public StringBuilder Append(int value); // 0x00705448-0x007054F0
		public StringBuilder Append(long value); // 0x007054F0-0x0070559C
		public StringBuilder Append(object value); // 0x0070559C-0x007055E0
		public StringBuilder Insert(int index, string value); // 0x007055E0-0x00705700
		public StringBuilder Insert(int index, char value); // 0x00705840-0x0070586C
		public StringBuilder AppendFormat(string format, object arg0); // 0x0070586C-0x007058C0
		public StringBuilder AppendFormat(string format, object arg0, object arg1); // 0x00706240-0x00706298
		public StringBuilder AppendFormat(string format, object arg0, object arg1, object arg2); // 0x00706298-0x007062FC
		public StringBuilder AppendFormat(string format, params /* 0x001462C8-0x001462D8 */ object[] args); // 0x007062FC-0x00706400
		public StringBuilder AppendFormat(IFormatProvider provider, string format, object arg0); // 0x00706400-0x00706458
		public StringBuilder AppendFormat(IFormatProvider provider, string format, object arg0, object arg1); // 0x00706458-0x007064B4
		private static void FormatError(); // 0x007064B4-0x0070655C
		internal StringBuilder AppendFormatHelper(IFormatProvider provider, string format, ParamsArray args); // 0x007058C0-0x00706240
		public StringBuilder Replace(string oldValue, string newValue); // 0x0070655C-0x00706588
		public StringBuilder Replace(string oldValue, string newValue, int startIndex, int count); // 0x00706588-0x00706A28
		[CLSCompliant] // 0x00144878-0x0014488C
		public unsafe StringBuilder Append(char* value, int valueCount); // 0x007047A4-0x00704940
		private unsafe void Insert(int index, char* value, int valueCount); // 0x00705700-0x00705840
		private void ReplaceAllInChunk(int[] replacements, int replacementsCount, StringBuilder sourceChunk, int removeCount, string value); // 0x00706B40-0x00706DAC
		private bool StartsWith(StringBuilder chunk, int indexInChunk, int count, string value); // 0x00706A28-0x00706B40
		private unsafe void ReplaceInPlaceAtChunk(ref StringBuilder chunk, ref int indexInChunk, char* value, int count); // 0x0070510C-0x00705260
		private static unsafe void ThreadSafeCopy(char* sourcePtr, char[] destination, int destinationIndex, int count); // 0x007034C8-0x007035F8
		private static void ThreadSafeCopy(char[] source, int sourceIndex, char[] destination, int destinationIndex, int count); // 0x00706E28-0x00706F64
		private StringBuilder FindChunkForIndex(int index); // 0x007042E8-0x00704324
		private StringBuilder Next(StringBuilder chunk); // 0x00706DAC-0x00706E28
		private void ExpandByABlock(int minBlockCharCount); // 0x00704324-0x00704500
		private void MakeRoom(int index, int count, out StringBuilder chunk, out int indexInChunk, bool doneMoveFollowingChars); // 0x00704C34-0x0070510C
		private void Remove(int startIndex, int count, out StringBuilder chunk, out int indexInChunk); // 0x00705260-0x00705448
	}

	internal static class StringBuilderCache // TypeDefIndex: 438
	{
		// Fields
		[ThreadStatic] // 0x001425B8-0x001425C8
		private static StringBuilder CachedInstance; // 0x80000000
	
		// Methods
		public static StringBuilder Acquire(int capacity = 16 /* Metadata: 0x002042DC */); // 0x00644C44-0x00644D28
		public static void Release(StringBuilder sb); // 0x00644D28-0x00644DB4
		public static string GetStringAndRelease(StringBuilder sb); // 0x00644DB4-0x00644DF8
	}

	[Serializable]
	[ComVisible] // 0x0013B55C-0x0013B570
	public class UnicodeEncoding : Encoding // TypeDefIndex: 439
	{
		// Fields
		[OptionalField] // 0x001425C8-0x001425F8
		internal bool isThrowException; // 0x1C
		internal bool bigEndian; // 0x1D
		internal bool byteOrderMark; // 0x1E
		private static readonly ulong highLowPatternMask; // 0x00
	
		// Nested types
		[Serializable]
		private class Decoder : DecoderNLS, ISerializable // TypeDefIndex: 440
		{
			// Fields
			internal int lastByte; // 0x1C
			internal char lastChar; // 0x20
	
			// Properties
			internal override bool HasState { get; } // 0x006564DC-0x00656500 
	
			// Constructors
			public Decoder(UnicodeEncoding encoding); // 0x00655518-0x00655528
			internal Decoder(SerializationInfo info, StreamingContext context); // 0x00655D74-0x00656240
	
			// Methods
			new void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00656240-0x006564AC
			public override void Reset(); // 0x006564AC-0x006564DC
		}
	
		// Constructors
		public UnicodeEncoding(); // 0x00650E2C-0x00650E50
		public UnicodeEncoding(bool bigEndian, bool byteOrderMark); // 0x00650E50-0x00650E6C
		public UnicodeEncoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes); // 0x00650E6C-0x00650EE4
		static UnicodeEncoding(); // 0x00655CB8-0x00655D74
	
		// Methods
		[OnDeserializing] // 0x0014488C-0x0014489C
		private new void OnDeserializing(StreamingContext ctx); // 0x00650EE4-0x00650EF0
		internal override void SetDefaultFallbacks(); // 0x00650EF0-0x00650FC4
		public override int GetByteCount(char[] chars, int index, int count); // 0x00650FC4-0x006511DC
		public override int GetByteCount(string s); // 0x006511DC-0x006512D0
		[CLSCompliant] // 0x0014489C-0x001448D4
		[ComVisible] // 0x0014489C-0x001448D4
		public override unsafe int GetByteCount(char* chars, int count); // 0x006512D0-0x0065143C
		public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x0065143C-0x00651740
		public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x00651740-0x00651A54
		[CLSCompliant] // 0x001448D4-0x0014490C
		[ComVisible] // 0x001448D4-0x0014490C
		public override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount); // 0x00651A54-0x00651BF8
		public override int GetCharCount(byte[] bytes, int index, int count); // 0x00651BF8-0x00651E10
		[CLSCompliant] // 0x0014490C-0x00144944
		[ComVisible] // 0x0014490C-0x00144944
		public override unsafe int GetCharCount(byte* bytes, int count); // 0x00651E10-0x00651F7C
		public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x00651F7C-0x00652290
		[CLSCompliant] // 0x00144944-0x0014497C
		[ComVisible] // 0x00144944-0x0014497C
		public override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount); // 0x00652290-0x00652434
		[ComVisible] // 0x0014497C-0x00144990
		public override string GetString(byte[] bytes, int index, int count); // 0x00652434-0x00652644
		internal override unsafe int GetByteCount(char* chars, int count, EncoderNLS encoder); // 0x00652644-0x00652EA4
		internal override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, EncoderNLS encoder); // 0x00652EA4-0x00653968
		internal override unsafe int GetCharCount(byte* bytes, int count, DecoderNLS baseDecoder); // 0x00653968-0x00654554
		internal override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount, DecoderNLS baseDecoder); // 0x00654554-0x00655424
		[ComVisible] // 0x00144990-0x001449A4
		public override Encoder GetEncoder(); // 0x00655424-0x00655498
		public override Decoder GetDecoder(); // 0x00655498-0x00655518
		public override byte[] GetPreamble(); // 0x00655528-0x00655690
		public override int GetMaxByteCount(int charCount); // 0x00655690-0x00655870
		public override int GetMaxCharCount(int byteCount); // 0x00655870-0x00655A4C
		public override bool Equals(object value); // 0x00655A4C-0x00655C04
		public override int GetHashCode(); // 0x00655C04-0x00655CB8
	}

	[Serializable]
	public sealed class UTF32Encoding : Encoding // TypeDefIndex: 441
	{
		// Fields
		private bool emitUTF32ByteOrderMark; // 0x1C
		private bool isThrowException; // 0x1D
		private bool bigEndian; // 0x1E
	
		// Nested types
		[Serializable]
		internal class UTF32Decoder : DecoderNLS // TypeDefIndex: 442
		{
			// Fields
			internal int iChar; // 0x1C
			internal int readByteCount; // 0x20
	
			// Properties
			internal override bool HasState { get; } // 0x006483F0-0x00648400 
	
			// Constructors
			public UTF32Decoder(UTF32Encoding encoding); // 0x00647C8C-0x00647C94
	
			// Methods
			public override void Reset(); // 0x006483C4-0x006483F0
		}
	
		// Constructors
		public UTF32Encoding(); // 0x00644DF8-0x00644E1C
		public UTF32Encoding(bool bigEndian, bool byteOrderMark); // 0x00644E8C-0x00644EA8
		public UTF32Encoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters); // 0x00644E1C-0x00644E8C
	
		// Methods
		internal override void SetDefaultFallbacks(); // 0x00644EA8-0x00644F7C
		public override int GetByteCount(char[] chars, int index, int count); // 0x00644F7C-0x00645194
		public override int GetByteCount(string s); // 0x00645194-0x00645288
		[CLSCompliant] // 0x001449A4-0x001449B8
		public override unsafe int GetByteCount(char* chars, int count); // 0x00645288-0x006453F4
		public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x006453F4-0x006456F8
		public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x006456F8-0x00645A0C
		[CLSCompliant] // 0x001449B8-0x001449CC
		public override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount); // 0x00645A0C-0x00645BB0
		public override int GetCharCount(byte[] bytes, int index, int count); // 0x00645BB0-0x00645DC8
		[CLSCompliant] // 0x001449CC-0x001449E0
		public override unsafe int GetCharCount(byte* bytes, int count); // 0x00645DC8-0x00645F34
		public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x00645F34-0x00646248
		[CLSCompliant] // 0x001449E0-0x001449F4
		public override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount); // 0x00646248-0x006463EC
		public override string GetString(byte[] bytes, int index, int count); // 0x006463EC-0x006465FC
		internal override unsafe int GetByteCount(char* chars, int count, EncoderNLS encoder); // 0x006465FC-0x00646A90
		internal override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, EncoderNLS encoder); // 0x00646A90-0x00647044
		internal override unsafe int GetCharCount(byte* bytes, int count, DecoderNLS baseDecoder); // 0x00647054-0x00647594
		internal override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount, DecoderNLS baseDecoder); // 0x00647594-0x00647BF0
		private uint GetSurrogate(char cHigh, char cLow); // 0x00647044-0x00647054
		private char GetHighSurrogate(uint iChar); // 0x00647BF0-0x00647C08
		private char GetLowSurrogate(uint iChar); // 0x00647C08-0x00647C18
		public override Decoder GetDecoder(); // 0x00647C18-0x00647C8C
		public override Encoder GetEncoder(); // 0x00647C94-0x00647D08
		public override int GetMaxByteCount(int charCount); // 0x00647D08-0x00647EE8
		public override int GetMaxCharCount(int byteCount); // 0x00647EE8-0x00648040
		public override byte[] GetPreamble(); // 0x00648040-0x006481AC
		public override bool Equals(object value); // 0x006481AC-0x00648314
		public override int GetHashCode(); // 0x00648314-0x006483C4
	}

	[Serializable]
	[ComVisible] // 0x0013B570-0x0013B584
	public class UTF7Encoding : Encoding // TypeDefIndex: 443
	{
		// Fields
		private byte[] base64Bytes; // 0x1C
		private sbyte[] base64Values; // 0x20
		private bool[] directEncode; // 0x24
		[OptionalField] // 0x001425F8-0x00142628
		private bool m_allowOptionals; // 0x28
	
		// Nested types
		[Serializable]
		private class Decoder : DecoderNLS, ISerializable // TypeDefIndex: 444
		{
			// Fields
			internal int bits; // 0x1C
			internal int bitCount; // 0x20
			internal bool firstByte; // 0x24
	
			// Properties
			internal override bool HasState { get; } // 0x0064B4C0-0x0064B4D4 
	
			// Constructors
			public Decoder(UTF7Encoding encoding); // 0x0064AE04-0x0064AE0C
			internal Decoder(SerializationInfo info, StreamingContext context); // 0x0064B0A4-0x0064B35C
	
			// Methods
			new void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x0064B35C-0x0064B48C
			public override void Reset(); // 0x0064B48C-0x0064B4C0
		}
	
		[Serializable]
		private class Encoder : EncoderNLS, ISerializable // TypeDefIndex: 445
		{
			// Fields
			internal int bits; // 0x20
			internal int bitCount; // 0x24
	
			// Constructors
			public Encoder(UTF7Encoding encoding); // 0x0064AE80-0x0064AE88
			internal Encoder(SerializationInfo info, StreamingContext context); // 0x0064B748-0x0064B9AC
	
			// Methods
			new void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x0064B9AC-0x0064BABC
			public override void Reset(); // 0x0064BABC-0x0064BAEC
		}
	
		[Serializable]
		internal sealed class DecoderUTF7Fallback : DecoderFallback // TypeDefIndex: 446
		{
			// Properties
			public override int MaxCharCount { get; } // 0x0064B55C-0x0064B564 
	
			// Constructors
			public DecoderUTF7Fallback(); // 0x006488D0-0x006488D8
	
			// Methods
			public override DecoderFallbackBuffer CreateFallbackBuffer(); // 0x0064B4D4-0x0064B54C
			public override bool Equals(object value); // 0x0064B564-0x0064B5E0
			public override int GetHashCode(); // 0x0064B5E0-0x0064B5E8
		}
	
		internal sealed class DecoderUTF7FallbackBuffer : DecoderFallbackBuffer // TypeDefIndex: 447
		{
			// Fields
			private char cFallback; // 0x10
			private int iCount; // 0x14
			private int iSize; // 0x18
	
			// Constructors
			public DecoderUTF7FallbackBuffer(DecoderUTF7Fallback fallback); // 0x0064B54C-0x0064B55C
	
			// Methods
			public override bool Fallback(byte[] bytesUnknown, int index); // 0x0064B5E8-0x0064B644
			public override char GetNextChar(); // 0x0064B644-0x0064B65C
			public override void Reset(); // 0x0064B65C-0x0064B670
			internal override unsafe int InternalFallback(byte[] bytes, byte* pBytes); // 0x0064B670-0x0064B748
		}
	
		// Constructors
		public UTF7Encoding(); // 0x00648400-0x0064842C
		public UTF7Encoding(bool allowOptionals); // 0x0064842C-0x00648458
	
		// Methods
		private void MakeTables(); // 0x00648458-0x00648820
		internal override void SetDefaultFallbacks(); // 0x00648820-0x006488D0
		[OnDeserializing] // 0x001449F4-0x00144A04
		private new void OnDeserializing(StreamingContext ctx); // 0x006488D8-0x006488E0
		[OnDeserialized] // 0x00144A04-0x00144A14
		private new void OnDeserialized(StreamingContext ctx); // 0x006488E0-0x006489C8
		[ComVisible] // 0x00144A14-0x00144A28
		public override bool Equals(object value); // 0x006489C8-0x00648B2C
		[ComVisible] // 0x00144A28-0x00144A3C
		public override int GetHashCode(); // 0x00648B2C-0x00648BC8
		public override int GetByteCount(char[] chars, int index, int count); // 0x00648BC8-0x00648DE0
		[ComVisible] // 0x00144A3C-0x00144A50
		public override int GetByteCount(string s); // 0x00648DE0-0x00648ED4
		[CLSCompliant] // 0x00144A50-0x00144A88
		[ComVisible] // 0x00144A50-0x00144A88
		public override unsafe int GetByteCount(char* chars, int count); // 0x00648ED4-0x00649040
		[ComVisible] // 0x00144A88-0x00144A9C
		public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x00649040-0x00649344
		public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x00649344-0x00649658
		[CLSCompliant] // 0x00144A9C-0x00144AD4
		[ComVisible] // 0x00144A9C-0x00144AD4
		public override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount); // 0x00649658-0x006497FC
		public override int GetCharCount(byte[] bytes, int index, int count); // 0x006497FC-0x00649A14
		[CLSCompliant] // 0x00144AD4-0x00144B0C
		[ComVisible] // 0x00144AD4-0x00144B0C
		public override unsafe int GetCharCount(byte* bytes, int count); // 0x00649A14-0x00649B80
		public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x00649B80-0x00649E94
		[CLSCompliant] // 0x00144B0C-0x00144B44
		[ComVisible] // 0x00144B0C-0x00144B44
		public override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount); // 0x00649E94-0x0064A038
		[ComVisible] // 0x00144B44-0x00144B58
		public override string GetString(byte[] bytes, int index, int count); // 0x0064A038-0x0064A248
		internal override unsafe int GetByteCount(char* chars, int count, EncoderNLS baseEncoder); // 0x0064A248-0x0064A27C
		internal override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, EncoderNLS baseEncoder); // 0x0064A27C-0x0064A8C4
		internal override unsafe int GetCharCount(byte* bytes, int count, DecoderNLS baseDecoder); // 0x0064A8C4-0x0064A8F8
		internal override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount, DecoderNLS baseDecoder); // 0x0064A8F8-0x0064AD90
		public override Decoder GetDecoder(); // 0x0064AD90-0x0064AE04
		public override Encoder GetEncoder(); // 0x0064AE0C-0x0064AE80
		public override int GetMaxByteCount(int charCount); // 0x0064AE88-0x0064AFD0
		public override int GetMaxCharCount(int byteCount); // 0x0064AFD0-0x0064B0A4
	}

	[Serializable]
	[ComVisible] // 0x0013B584-0x0013B598
	public class UTF8Encoding : Encoding // TypeDefIndex: 448
	{
		// Fields
		private bool emitUTF8Identifier; // 0x1C
		private bool isThrowException; // 0x1D
	
		// Nested types
		[Serializable]
		internal class UTF8Encoder : EncoderNLS, ISerializable // TypeDefIndex: 449
		{
			// Fields
			internal int surrogateChar; // 0x20
	
			// Constructors
			public UTF8Encoder(UTF8Encoding encoding); // 0x0064FCF4-0x0064FCFC
			internal UTF8Encoder(SerializationInfo info, StreamingContext context); // 0x00650900-0x00650CA8
	
			// Methods
			new void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00650CA8-0x00650E04
			public override void Reset(); // 0x00650E04-0x00650E2C
		}
	
		[Serializable]
		internal class UTF8Decoder : DecoderNLS, ISerializable // TypeDefIndex: 450
		{
			// Fields
			internal int bits; // 0x1C
	
			// Properties
			internal override bool HasState { get; } // 0x006508F0-0x00650900 
	
			// Constructors
			public UTF8Decoder(UTF8Encoding encoding); // 0x0064FC78-0x0064FC80
			internal UTF8Decoder(SerializationInfo info, StreamingContext context); // 0x0065037C-0x00650738
	
			// Methods
			new void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00650738-0x006508C8
			public override void Reset(); // 0x006508C8-0x006508F0
		}
	
		// Constructors
		public UTF8Encoding(); // 0x0064BAEC-0x0064BB10
		public UTF8Encoding(bool encoderShouldEmitUTF8Identifier); // 0x0064BB10-0x0064BB3C
		public UTF8Encoding(bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes); // 0x0064BB3C-0x0064BB84
	
		// Methods
		internal override void SetDefaultFallbacks(); // 0x0064BB84-0x0064BC58
		public override int GetByteCount(char[] chars, int index, int count); // 0x0064BC58-0x0064BE70
		public override int GetByteCount(string chars); // 0x0064BE70-0x0064BF64
		[CLSCompliant] // 0x00144B58-0x00144B90
		[ComVisible] // 0x00144B58-0x00144B90
		public override unsafe int GetByteCount(char* chars, int count); // 0x0064BF64-0x0064C0D0
		public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x0064C0D0-0x0064C3D4
		public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x0064C3D4-0x0064C6E8
		[CLSCompliant] // 0x00144B90-0x00144BC8
		[ComVisible] // 0x00144B90-0x00144BC8
		public override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount); // 0x0064C6E8-0x0064C88C
		public override int GetCharCount(byte[] bytes, int index, int count); // 0x0064C88C-0x0064CAA4
		[CLSCompliant] // 0x00144BC8-0x00144C00
		[ComVisible] // 0x00144BC8-0x00144C00
		public override unsafe int GetCharCount(byte* bytes, int count); // 0x0064CAA4-0x0064CC10
		public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x0064CC10-0x0064CF24
		[CLSCompliant] // 0x00144C00-0x00144C38
		[ComVisible] // 0x00144C00-0x00144C38
		public override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount); // 0x0064CF24-0x0064D0C8
		[ComVisible] // 0x00144C38-0x00144C4C
		public override string GetString(byte[] bytes, int index, int count); // 0x0064D0C8-0x0064D2D8
		internal override unsafe int GetByteCount(char* chars, int count, EncoderNLS baseEncoder); // 0x0064D2D8-0x0064DAD0
		private static unsafe int PtrDiff(char* a, char* b); // 0x0064DAE8-0x0064DAF4
		private static unsafe int PtrDiff(byte* a, byte* b); // 0x0064DAF4-0x0064DAFC
		private static bool InRange(int ch, int start, int end); // 0x0064DAD0-0x0064DAE8
		internal override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, EncoderNLS baseEncoder); // 0x0064DAFC-0x0064E484
		internal override unsafe int GetCharCount(byte* bytes, int count, DecoderNLS baseDecoder); // 0x0064E484-0x0064EBD8
		internal override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount, DecoderNLS baseDecoder); // 0x0064EC30-0x0064F834
		private unsafe bool FallbackInvalidByteSequence(ref byte* pSrc, int ch, DecoderFallbackBuffer fallback, ref char* pTarget); // 0x0064F834-0x0064F8B4
		private unsafe int FallbackInvalidByteSequence(byte* pSrc, int ch, DecoderFallbackBuffer fallback); // 0x0064EBD8-0x0064EC30
		private unsafe byte[] GetBytesUnknown(ref byte* pSrc, int ch); // 0x0064F8B4-0x0064FC04
		public override Decoder GetDecoder(); // 0x0064FC04-0x0064FC78
		public override Encoder GetEncoder(); // 0x0064FC80-0x0064FCF4
		public override int GetMaxByteCount(int charCount); // 0x0064FCFC-0x0064FEDC
		public override int GetMaxCharCount(int byteCount); // 0x0064FEDC-0x006500B0
		public override byte[] GetPreamble(); // 0x006500B0-0x0065018C
		public override bool Equals(object value); // 0x0065018C-0x006502F0
		public override int GetHashCode(); // 0x006502F0-0x0065037C
	}

	internal enum NormalizationCheck // TypeDefIndex: 451
	{
		Yes = 0,
		No = 1,
		Maybe = 2
	}

	internal class Normalization // TypeDefIndex: 452
	{
		// Fields
		private static unsafe byte* props; // 0x00
		private static unsafe int* mappedChars; // 0x04
		private static unsafe short* charMapIndex; // 0x08
		private static unsafe short* helperIndex; // 0x0C
		private static unsafe ushort* mapIdxToComposite; // 0x10
		private static unsafe byte* combiningClass; // 0x14
		private static object forLock; // 0x18
		public static readonly bool isReady; // 0x1C
	
		// Constructors
		static Normalization(); // 0x00702EA4-0x007030F4
	
		// Methods
		private static uint PropValue(int cp); // 0x00700778-0x00700844
		private static int CharMapIdx(int cp); // 0x00700844-0x00700914
		private static byte GetCombiningClass(int c); // 0x00700914-0x00700A0C
		private static int GetPrimaryCompositeFromMapIndex(int src); // 0x00700A0C-0x00700B08
		private static int GetPrimaryCompositeHelperIndex(int cp); // 0x00700B08-0x00700C04
		private static string Compose(string source, int checkType); // 0x00700C04-0x00700D4C
		private static StringBuilder Combine(string source, int start, int checkType); // 0x00700F0C-0x007010D4
		private static void Combine(StringBuilder sb, int i, int checkType); // 0x007010D4-0x00701230
		private static int CombineHangul(StringBuilder sb, string s, int current); // 0x007013E0-0x007015DC
		private static int Fetch(StringBuilder sb, string s, int i); // 0x007018D0-0x00701918
		private static int TryComposeWithPreviousStarter(StringBuilder sb, string s, int current); // 0x007015DC-0x007018D0
		private static int TryCompose(int i, int starter, int candidate); // 0x00701CD8-0x00701EC4
		private static string Decompose(string source, int checkType); // 0x00701EC4-0x00701F84
		private static void Decompose(string source, ref StringBuilder sb, int checkType); // 0x00700D4C-0x00700F0C
		private static void ReorderCanonical(string src, ref StringBuilder sb, int start); // 0x007024F0-0x007028D0
		private static void DecomposeChar(ref StringBuilder sb, ref int[] buf, string s, int i, int checkType, ref int start); // 0x00701F84-0x00702254
		public static NormalizationCheck QuickCheck(char c, int type); // 0x00701230-0x007013E0
		private static int GetCanonicalHangul(int s, int[] buf, int bufIdx); // 0x00702BA8-0x00702CF0
		private static int GetCanonical(int c, int[] buf, int bufIdx, int checkType); // 0x007028D0-0x00702BA8
		public static string Normalize(string source, NormalizationForm normalizationForm); // 0x00702CF0-0x00702DD0
		public static string Normalize(string source, int type); // 0x00702DD0-0x00702EA0
		private static void load_normalization_resource(out IntPtr props, out IntPtr mappedChars, out IntPtr charMapIndex, out IntPtr helperIndex, out IntPtr mapIdxToComposite, out IntPtr combiningClass); // 0x00702EA0-0x00702EA4
	}

	internal static class EncodingHelper // TypeDefIndex: 453
	{
		// Fields
		private static Encoding utf8EncodingWithoutMarkers; // 0x00
		private static readonly object lockobj; // 0x04
		private static Assembly i18nAssembly; // 0x08
		private static bool i18nDisabled; // 0x0C
	
		// Properties
		internal static Encoding UTF8Unmarked { get; } // 0x006FCE60-0x006FD110 
	
		// Constructors
		static EncodingHelper(); // 0x006FD114-0x006FD194
	
		// Methods
		internal static string InternalCodePage(ref int code_page); // 0x006FD110-0x006FD114
		internal static Encoding GetDefaultEncoding(); // 0x006FAEB4-0x006FB0B4
		internal static object InvokeI18N(string name, params /* 0x001462D8-0x001462E8 */ object[] args); // 0x006F8F70-0x006F9738
	}

	[ComVisible] // 0x0013B598-0x0013B5AC
	public enum NormalizationForm // TypeDefIndex: 454
	{
		FormC = 1,
		FormD = 2,
		FormKC = 5,
		FormKD = 6
	}
}

namespace System.Resources
{
	internal sealed class FastResourceComparer : IComparer, IEqualityComparer, IComparer<string>, IEqualityComparer<string> // TypeDefIndex: 455
	{
		// Fields
		internal static readonly FastResourceComparer Default; // 0x00
	
		// Constructors
		public FastResourceComparer(); // 0x002C599C-0x002C59A4
		static FastResourceComparer(); // 0x002C59A4-0x002C5A18
	
		// Methods
		public int GetHashCode(object key); // 0x002C51A8-0x002C52AC
		public int GetHashCode(string key); // 0x002C53A8-0x002C5428
		internal static int HashFunction(string key); // 0x002C52AC-0x002C53A8
		public int Compare(object a, object b); // 0x002C5428-0x002C5590
		public int Compare(string a, string b); // 0x002C5590-0x002C55A0
		public bool Equals(string a, string b); // 0x002C55A0-0x002C55B0
		public new bool Equals(object a, object b); // 0x002C55B0-0x002C5718
		public static int CompareOrdinal(string a, byte[] bytes, int bCharLength); // 0x002C5718-0x002C5818
		public static int CompareOrdinal(byte[] bytes, int aCharLength, string b); // 0x002C5818-0x002C58AC
		internal static unsafe int CompareOrdinal(byte* a, int byteLen, string b); // 0x002C58AC-0x002C599C
	}

	internal class FileBasedResourceGroveler : IResourceGroveler // TypeDefIndex: 456
	{
		// Fields
		private ResourceManager.ResourceManagerMediator _mediator; // 0x08
	
		// Constructors
		public FileBasedResourceGroveler(ResourceManager.ResourceManagerMediator mediator); // 0x002C5A18-0x002C5A38
	}

	internal interface IResourceGroveler // TypeDefIndex: 457
	{
	}

	[ComVisible] // 0x0013B5AC-0x0013B5C0
	public interface IResourceReader : IEnumerable, IDisposable // TypeDefIndex: 458
	{
		// Methods
		void Close();
		IDictionaryEnumerator GetEnumerator();
	}

	internal class ManifestBasedResourceGroveler : IResourceGroveler // TypeDefIndex: 459
	{
		// Fields
		private ResourceManager.ResourceManagerMediator _mediator; // 0x08
	
		// Constructors
		public ManifestBasedResourceGroveler(ResourceManager.ResourceManagerMediator mediator); // 0x002C5A38-0x002C5A58
	
		// Methods
		internal static CultureInfo GetNeutralResourcesLanguage(Assembly a, ref UltimateResourceFallbackLocation fallbackLocation); // 0x002C5A58-0x002C5E30
		private static bool GetNeutralResourcesLanguageAttribute(Assembly assembly, ref string cultureName, ref short fallbackLocation); // 0x002C5E30-0x002C5EC0
	}

	[AttributeUsage] // 0x0013B5C0-0x0013B60C
	[ComVisible] // 0x0013B5C0-0x0013B60C
	public sealed class NeutralResourcesLanguageAttribute : Attribute // TypeDefIndex: 460
	{
		// Fields
		private string _culture; // 0x08
		private UltimateResourceFallbackLocation _fallbackLoc; // 0x0C
	
		// Properties
		public string CultureName { get; } // 0x002C5EC0-0x002C5EC8 
		public UltimateResourceFallbackLocation Location { get; } // 0x002C5EC8-0x002C5ED0 
	
		// Constructors
		public NeutralResourcesLanguageAttribute(string cultureName); // 0x002C5ED0-0x002C60D4
	}

	[Serializable]
	[ComVisible] // 0x0013B60C-0x0013B620
	public class ResourceManager // TypeDefIndex: 461
	{
		// Fields
		[Obsolete] // 0x00142628-0x00142678
		protected Hashtable ResourceSets; // 0x08
		[NonSerialized]
		private Dictionary<string, ResourceSet> _resourceSets; // 0x0C
		protected Assembly MainAssembly; // 0x10
		private CultureInfo _neutralResourcesCulture; // 0x14
		[NonSerialized]
		private CultureNameResourceSetPair _lastUsedResourceCache; // 0x18
		private bool UseManifest; // 0x1C
		[OptionalField] // 0x00142678-0x001426A8
		private bool UseSatelliteAssem; // 0x1D
		[OptionalField] // 0x001426A8-0x001426B8
		private UltimateResourceFallbackLocation _fallbackLoc; // 0x20
		[OptionalField] // 0x001426B8-0x001426E8
		private Assembly _callingAssembly; // 0x24
		[OptionalField] // 0x001426E8-0x00142718
		private RuntimeAssembly m_callingAssembly; // 0x28
		[NonSerialized]
		private IResourceGroveler resourceGroveler; // 0x2C
		public static readonly int MagicNumber; // 0x00
		public static readonly int HeaderVersionNumber; // 0x04
		private static readonly Type _minResourceSet; // 0x08
		internal static readonly string ResReaderTypeName; // 0x0C
		internal static readonly string ResSetTypeName; // 0x10
		internal static readonly string MscorlibName; // 0x14
		internal static readonly int DEBUG; // 0x18
	
		// Nested types
		internal class CultureNameResourceSetPair // TypeDefIndex: 462
		{
			// Constructors
			public CultureNameResourceSetPair(); // 0x002C62D4-0x002C62DC
		}
	
		internal class ResourceManagerMediator // TypeDefIndex: 463
		{
			// Fields
			private ResourceManager _rm; // 0x08
	
			// Constructors
			internal ResourceManagerMediator(ResourceManager rm); // 0x002C62DC-0x002C6398
		}
	
		// Constructors
		protected ResourceManager(); // 0x002C6208-0x002C62D4
		static ResourceManager(); // 0x002C6A4C-0x002C6C60
	
		// Methods
		private void Init(); // 0x002C610C-0x002C6208
		[OnDeserializing] // 0x00144C4C-0x00144C5C
		private void OnDeserializing(StreamingContext ctx); // 0x002C6398-0x002C63AC
		[OnDeserialized] // 0x00144C5C-0x00144C6C
		private void OnDeserialized(StreamingContext ctx); // 0x002C63AC-0x002C65A0
		[OnSerializing] // 0x00144C6C-0x00144C7C
		private void OnSerializing(StreamingContext ctx); // 0x002C65A0-0x002C6620
		internal static bool CompareNames(string asmTypeName1, string typeName2, AssemblyName asmName2); // 0x002C6620-0x002C6A4C
	}

	internal struct ResourceLocator // TypeDefIndex: 464
	{
		// Fields
		internal object _value; // 0x00
		internal int _dataPos; // 0x04
	
		// Properties
		internal int DataPosition { get; } // 0x002C60E0-0x002C60E8 
		internal object Value { get; set; } // 0x002C60E8-0x002C60F0 0x002C60F0-0x002C60F8
	
		// Constructors
		internal ResourceLocator(int dataPos, object value); // 0x002C60D4-0x002C60E0
	
		// Methods
		internal static bool CanCache(ResourceTypeCode value); // 0x002C60F8-0x002C610C
	}

	[ComVisible] // 0x0013B620-0x0013B634
	public sealed class ResourceReader : IResourceReader // TypeDefIndex: 465
	{
		// Fields
		private BinaryReader _store; // 0x08
		internal Dictionary<string, ResourceLocator> _resCache; // 0x0C
		private long _nameSectionOffset; // 0x10
		private long _dataSectionOffset; // 0x18
		private int[] _nameHashes; // 0x20
		private unsafe int* _nameHashesPtr; // 0x24
		private int[] _namePositions; // 0x28
		private unsafe int* _namePositionsPtr; // 0x2C
		private RuntimeType[] _typeTable; // 0x30
		private int[] _typeNamePositions; // 0x34
		private BinaryFormatter _objFormatter; // 0x38
		private int _numResources; // 0x3C
		private UnmanagedMemoryStream _ums; // 0x40
		private int _version; // 0x44
	
		// Nested types
		internal sealed class ResourceEnumerator : IDictionaryEnumerator // TypeDefIndex: 466
		{
			// Fields
			private ResourceReader _reader; // 0x08
			private bool _currentIsValid; // 0x0C
			private int _currentName; // 0x10
			private int _dataPosition; // 0x14
	
			// Properties
			public object Key { get; } // 0x002CBE08-0x002CBFBC 
			public object Current { get; } // 0x002CBFBC-0x002CC040 
			internal int DataPosition { get; } // 0x002CC460-0x002CC468 
			public DictionaryEntry Entry { get; } // 0x002CC040-0x002CC460 
			public object Value { get; } // 0x002CC468-0x002CC614 
	
			// Constructors
			internal ResourceEnumerator(ResourceReader reader); // 0x002C7430-0x002C7460
	
			// Methods
			public bool MoveNext(); // 0x002CBDAC-0x002CBE08
			public void Reset(); // 0x002CC614-0x002CC6F0
		}
	
		// Constructors
		internal ResourceReader(Stream stream, Dictionary<string, ResourceLocator> resCache); // 0x002C6C60-0x002C6D50
	
		// Methods
		public void Close(); // 0x002C6F08-0x002C6F54
		public void Dispose(); // 0x002C6FA8-0x002C6FF4
		private void Dispose(bool disposing); // 0x002C6F54-0x002C6FA8
		internal static unsafe int ReadUnalignedI4(int* p); // 0x002C6FF4-0x002C6FFC
		private void SkipString(); // 0x002C6FFC-0x002C7144
		private int GetNameHash(int index); // 0x002C7144-0x002C71A0
		private int GetNamePosition(int index); // 0x002C71A0-0x002C7338
		IEnumerator IEnumerable.GetEnumerator(); // 0x002C7338-0x002C733C
		public IDictionaryEnumerator GetEnumerator(); // 0x002C733C-0x002C7430
		internal ResourceEnumerator GetEnumeratorInternal(); // 0x002C7460-0x002C74E4
		internal int FindPosForResource(string name); // 0x002C74E4-0x002C7964
		private bool CompareStringEqualsName(string name); // 0x002C7964-0x002C7CB0
		private string AllocateStringForNameIndex(int index, out int dataOffset); // 0x002C7CB0-0x002C87F4
		private object GetValueForNameIndex(int index); // 0x002C87F4-0x002C8B5C
		internal string LoadString(int pos); // 0x002C8E3C-0x002C9218
		internal object LoadObject(int pos); // 0x002C976C-0x002C97A4
		internal object LoadObject(int pos, out ResourceTypeCode typeCode); // 0x002C97A4-0x002C9858
		internal object LoadObjectV1(int pos); // 0x002C8B5C-0x002C8CC8
		private object _LoadObjectV1(int pos); // 0x002C9858-0x002CA2CC
		internal object LoadObjectV2(int pos, out ResourceTypeCode typeCode); // 0x002C8CC8-0x002C8E3C
		private object _LoadObjectV2(int pos, out ResourceTypeCode typeCode); // 0x002CA518-0x002CB1D0
		private object DeserializeObject(int typeIndex); // 0x002CA2CC-0x002CA518
		private void ReadResources(); // 0x002C6D50-0x002C6F08
		private void _ReadResources(); // 0x002CB1D0-0x002CBDAC
		private RuntimeType FindType(int typeIndex); // 0x002C9218-0x002C976C
	}

	[Serializable]
	[ComVisible] // 0x0013B634-0x0013B648
	public class ResourceSet : IDisposable, IEnumerable // TypeDefIndex: 467
	{
		// Fields
		[NonSerialized]
		protected IResourceReader Reader; // 0x08
		protected Hashtable Table; // 0x0C
		private Hashtable _caseInsensitiveTable; // 0x10
	
		// Constructors
		protected ResourceSet(); // 0x002CC6F0-0x002CC710
		internal ResourceSet(bool junk); // 0x002CC780-0x002CC788
	
		// Methods
		private void CommonInit(); // 0x002CC710-0x002CC780
		protected virtual void Dispose(bool disposing); // 0x002CC788-0x002CC87C
		public void Dispose(); // 0x002CC87C-0x002CC890
		[ComVisible] // 0x00144C7C-0x00144C90
		public virtual IDictionaryEnumerator GetEnumerator(); // 0x002CC890-0x002CC894
		IEnumerator IEnumerable.GetEnumerator(); // 0x002CC964-0x002CC968
		private IDictionaryEnumerator GetEnumeratorHelper(); // 0x002CC894-0x002CC964
		public virtual string GetString(string name); // 0x002CC968-0x002CCB6C
		public virtual string GetString(string name, bool ignoreCase); // 0x002CCC98-0x002CD034
		public virtual object GetObject(string name); // 0x002CD3A8-0x002CD3AC
		public virtual object GetObject(string name, bool ignoreCase); // 0x002CD3AC-0x002CD3E4
		private object GetObjectInternal(string name); // 0x002CCB6C-0x002CCC98
		private object GetCaseInsensitiveObjectInternal(string name); // 0x002CD034-0x002CD3A8
	}

	[Serializable]
	internal enum ResourceTypeCode // TypeDefIndex: 468
	{
		Null = 0,
		String = 1,
		Boolean = 2,
		Char = 3,
		Byte = 4,
		SByte = 5,
		Int16 = 6,
		UInt16 = 7,
		Int32 = 8,
		UInt32 = 9,
		Int64 = 10,
		UInt64 = 11,
		Single = 12,
		Double = 13,
		Decimal = 14,
		DateTime = 15,
		TimeSpan = 16,
		LastPrimitive = 16,
		ByteArray = 32,
		Stream = 33,
		StartOfUserTypes = 64
	}

	internal sealed class RuntimeResourceSet : ResourceSet, IEnumerable // TypeDefIndex: 469
	{
		// Fields
		internal const int Version = 2; // Metadata: 0x00204350
		private Dictionary<string, ResourceLocator> _resCache; // 0x14
		private ResourceReader _defaultReader; // 0x18
		private Dictionary<string, ResourceLocator> _caseInsensitiveTable; // 0x1C
		private bool _haveReadFromReader; // 0x20
	
		// Constructors
		internal RuntimeResourceSet(string fileName); // 0x002CD3E4-0x002CD52C
		internal RuntimeResourceSet(Stream stream); // 0x002CD52C-0x002CD630
	
		// Methods
		protected override void Dispose(bool disposing); // 0x002CD630-0x002CD76C
		public override IDictionaryEnumerator GetEnumerator(); // 0x002CD76C-0x002CD770
		new IEnumerator IEnumerable.GetEnumerator(); // 0x002CD8B8-0x002CD8BC
		private new IDictionaryEnumerator GetEnumeratorHelper(); // 0x002CD770-0x002CD8B8
		public override string GetString(string key); // 0x002CD8BC-0x002CD9A8
		public override string GetString(string key, bool ignoreCase); // 0x002CE510-0x002CE604
		public override object GetObject(string key); // 0x002CE604-0x002CE624
		public override object GetObject(string key, bool ignoreCase); // 0x002CE624-0x002CE640
		private object GetObject(string key, bool ignoreCase, bool isString); // 0x002CD9A8-0x002CE510
		private object ResolveResourceLocator(ResourceLocator resLocation, string key, Dictionary<string, ResourceLocator> copyOfCache, bool keyInWrongCase); // 0x002CE640-0x002CE7B4
	}

	[AttributeUsage] // 0x0013B648-0x0013B694
	[ComVisible] // 0x0013B648-0x0013B694
	public sealed class SatelliteContractVersionAttribute : Attribute // TypeDefIndex: 470
	{
		// Fields
		private string _version; // 0x08
	
		// Constructors
		public SatelliteContractVersionAttribute(string version); // 0x002CE7B4-0x002CE9E0
	}

	[Serializable]
	[ComVisible] // 0x0013B694-0x0013B6A8
	public enum UltimateResourceFallbackLocation // TypeDefIndex: 471
	{
		MainAssembly = 0,
		Satellite = 1
	}
}

namespace System.Reflection
{
	public static class CustomAttributeExtensions // TypeDefIndex: 472
	{
		// Extension methods
		public static Attribute GetCustomAttribute(this Assembly element, Type attributeType); // 0x0074FFEC-0x0074FFF4
		public static T GetCustomAttribute<T>(this Assembly element)
			where T : Attribute;
	}

	[Serializable]
	[ComVisible] // 0x0013B6B8-0x0013B6CC
	public sealed class AmbiguousMatchException : SystemException // TypeDefIndex: 473
	{
		// Constructors
		public AmbiguousMatchException(); // 0x0074B3D0-0x0074B458
		public AmbiguousMatchException(string message); // 0x0074B458-0x0074B484
		internal AmbiguousMatchException(SerializationInfo info, StreamingContext context); // 0x0074B484-0x0074B500
	}

	[AttributeUsage] // 0x0013B6CC-0x0013B718
	[ComVisible] // 0x0013B6CC-0x0013B718
	public sealed class AssemblyCopyrightAttribute : Attribute // TypeDefIndex: 474
	{
		// Fields
		private string m_copyright; // 0x08
	
		// Constructors
		public AssemblyCopyrightAttribute(string copyright); // 0x0074BF90-0x0074BFB0
	}

	[AttributeUsage] // 0x0013B718-0x0013B764
	[ComVisible] // 0x0013B718-0x0013B764
	public sealed class AssemblyTrademarkAttribute : Attribute // TypeDefIndex: 475
	{
		// Fields
		private string m_trademark; // 0x08
	
		// Constructors
		public AssemblyTrademarkAttribute(string trademark); // 0x0074DEE4-0x0074DF04
	}

	[AttributeUsage] // 0x0013B764-0x0013B7B0
	[ComVisible] // 0x0013B764-0x0013B7B0
	public sealed class AssemblyProductAttribute : Attribute // TypeDefIndex: 476
	{
		// Fields
		private string m_product; // 0x08
	
		// Constructors
		public AssemblyProductAttribute(string product); // 0x0074DEA4-0x0074DEC4
	}

	[AttributeUsage] // 0x0013B7B0-0x0013B7FC
	[ComVisible] // 0x0013B7B0-0x0013B7FC
	public sealed class AssemblyCompanyAttribute : Attribute // TypeDefIndex: 477
	{
		// Fields
		private string m_company; // 0x08
	
		// Constructors
		public AssemblyCompanyAttribute(string company); // 0x0074BF50-0x0074BF70
	}

	[AttributeUsage] // 0x0013B7FC-0x0013B848
	[ComVisible] // 0x0013B7FC-0x0013B848
	public sealed class AssemblyDescriptionAttribute : Attribute // TypeDefIndex: 478
	{
		// Fields
		private string m_description; // 0x08
	
		// Constructors
		public AssemblyDescriptionAttribute(string description); // 0x0074BFF0-0x0074C010
	}

	[AttributeUsage] // 0x0013B848-0x0013B894
	[ComVisible] // 0x0013B848-0x0013B894
	public sealed class AssemblyTitleAttribute : Attribute // TypeDefIndex: 479
	{
		// Fields
		private string m_title; // 0x08
	
		// Constructors
		public AssemblyTitleAttribute(string title); // 0x0074DEC4-0x0074DEE4
	}

	[AttributeUsage] // 0x0013B894-0x0013B8E0
	[ComVisible] // 0x0013B894-0x0013B8E0
	public sealed class AssemblyConfigurationAttribute : Attribute // TypeDefIndex: 480
	{
		// Fields
		private string m_configuration; // 0x08
	
		// Constructors
		public AssemblyConfigurationAttribute(string configuration); // 0x0074BF70-0x0074BF90
	}

	[AttributeUsage] // 0x0013B8E0-0x0013B92C
	[ComVisible] // 0x0013B8E0-0x0013B92C
	public sealed class AssemblyDefaultAliasAttribute : Attribute // TypeDefIndex: 481
	{
		// Fields
		private string m_defaultAlias; // 0x08
	
		// Constructors
		public AssemblyDefaultAliasAttribute(string defaultAlias); // 0x0074BFB0-0x0074BFD0
	}

	[AttributeUsage] // 0x0013B92C-0x0013B978
	[ComVisible] // 0x0013B92C-0x0013B978
	public sealed class AssemblyInformationalVersionAttribute : Attribute // TypeDefIndex: 482
	{
		// Fields
		private string m_informationalVersion; // 0x08
	
		// Constructors
		public AssemblyInformationalVersionAttribute(string informationalVersion); // 0x0074C0CC-0x0074C0EC
	}

	[AttributeUsage] // 0x0013B978-0x0013B9C4
	[ComVisible] // 0x0013B978-0x0013B9C4
	public sealed class AssemblyFileVersionAttribute : Attribute // TypeDefIndex: 483
	{
		// Fields
		private string _version; // 0x08
	
		// Constructors
		public AssemblyFileVersionAttribute(string version); // 0x0074C010-0x0074C0CC
	}

	[AttributeUsage] // 0x0013B9C4-0x0013BA10
	[ComVisible] // 0x0013B9C4-0x0013BA10
	public sealed class AssemblyKeyFileAttribute : Attribute // TypeDefIndex: 484
	{
		// Fields
		private string m_keyFile; // 0x08
	
		// Constructors
		public AssemblyKeyFileAttribute(string keyFile); // 0x0074C0EC-0x0074C168
	}

	[AttributeUsage] // 0x0013BA10-0x0013BA5C
	[ComVisible] // 0x0013BA10-0x0013BA5C
	public sealed class AssemblyDelaySignAttribute : Attribute // TypeDefIndex: 485
	{
		// Fields
		private bool m_delaySign; // 0x08
	
		// Constructors
		public AssemblyDelaySignAttribute(bool delaySign); // 0x0074BFD0-0x0074BFF0
	}

	[Serializable]
	[ComVisible] // 0x0013BA5C-0x0013BA90
	[Flags] // 0x0013BA5C-0x0013BA90
	public enum AssemblyNameFlags // TypeDefIndex: 486
	{
		None = 0,
		PublicKey = 1,
		Retargetable = 256,
		EnableJITcompileOptimizer = 16384,
		EnableJITcompileTracking = 32768
	}

	[Serializable]
	[ComVisible] // 0x0013BA90-0x0013BAA4
	public enum AssemblyContentType // TypeDefIndex: 487
	{
		Default = 0,
		WindowsRuntime = 1
	}

	[Serializable]
	[ComVisible] // 0x0013BAA4-0x0013BAB8
	public enum ProcessorArchitecture // TypeDefIndex: 488
	{
		None = 0,
		MSIL = 1,
		X86 = 2,
		IA64 = 3,
		Amd64 = 4,
		Arm = 5
	}

	[Serializable]
	[ClassInterface] // 0x0013BAB8-0x0013BAF0
	[ComVisible] // 0x0013BAB8-0x0013BAF0
	public abstract class Binder // TypeDefIndex: 489
	{
		// Constructors
		protected Binder(); // 0x0074DF04-0x0074DF08
	
		// Methods
		public abstract MethodBase BindToMethod(BindingFlags bindingAttr, MethodBase[] match, ref object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] names, out object state);
		public abstract FieldInfo BindToField(BindingFlags bindingAttr, FieldInfo[] match, object value, CultureInfo culture);
		public abstract MethodBase SelectMethod(BindingFlags bindingAttr, MethodBase[] match, Type[] types, ParameterModifier[] modifiers);
		public abstract PropertyInfo SelectProperty(BindingFlags bindingAttr, PropertyInfo[] match, Type returnType, Type[] indexes, ParameterModifier[] modifiers);
		public abstract object ChangeType(object value, Type type, CultureInfo culture);
		public abstract void ReorderArgumentArray(ref object[] args, object state);
	}

	[Serializable]
	[ComVisible] // 0x0013BAF0-0x0013BB24
	[Flags] // 0x0013BAF0-0x0013BB24
	public enum BindingFlags // TypeDefIndex: 490
	{
		Default = 0,
		IgnoreCase = 1,
		DeclaredOnly = 2,
		Instance = 4,
		Static = 8,
		Public = 16,
		NonPublic = 32,
		FlattenHierarchy = 64,
		InvokeMethod = 256,
		CreateInstance = 512,
		GetField = 1024,
		SetField = 2048,
		GetProperty = 4096,
		SetProperty = 8192,
		PutDispProperty = 16384,
		PutRefDispProperty = 32768,
		ExactBinding = 65536,
		SuppressChangeType = 131072,
		OptionalParamBinding = 262144,
		IgnoreReturn = 16777216
	}

	[Serializable]
	[ComVisible] // 0x0013BB24-0x0013BB58
	[Flags] // 0x0013BB24-0x0013BB58
	public enum CallingConventions // TypeDefIndex: 491
	{
		Standard = 1,
		VarArgs = 2,
		Any = 3,
		HasThis = 32,
		ExplicitThis = 64
	}

	[Serializable]
	[AttributeUsage] // 0x0013BB58-0x0013BB90
	[ComVisible] // 0x0013BB58-0x0013BB90
	public sealed class DefaultMemberAttribute : Attribute // TypeDefIndex: 492
	{
		// Fields
		private string m_memberName; // 0x08
	
		// Properties
		public string MemberName { get; } // 0x007508F0-0x007508F8 
	
		// Constructors
		public DefaultMemberAttribute(string memberName); // 0x007508D0-0x007508F0
	}

	[Serializable]
	[ComVisible] // 0x0013BB90-0x0013BBC4
	[Flags] // 0x0013BB90-0x0013BBC4
	public enum EventAttributes // TypeDefIndex: 493
	{
		None = 0,
		SpecialName = 512,
		ReservedMask = 1024,
		RTSpecialName = 1024
	}

	[Serializable]
	[ComVisible] // 0x0013BBC4-0x0013BBF8
	[Flags] // 0x0013BBC4-0x0013BBF8
	public enum FieldAttributes // TypeDefIndex: 494
	{
		PrivateScope = 0,
		Private = 1,
		FamANDAssem = 2,
		Assembly = 3,
		Family = 4,
		FamORAssem = 5,
		Public = 6,
		FieldAccessMask = 7,
		Static = 16,
		InitOnly = 32,
		Literal = 64,
		NotSerialized = 128,
		HasFieldRVA = 256,
		SpecialName = 512,
		RTSpecialName = 1024,
		HasFieldMarshal = 4096,
		PinvokeImpl = 8192,
		HasDefault = 32768,
		ReservedMask = 38144
	}

	[Flags] // 0x0013BBF8-0x0013BC08
	public enum GenericParameterAttributes // TypeDefIndex: 495
	{
		None = 0,
		Covariant = 1,
		Contravariant = 2,
		VarianceMask = 3,
		ReferenceTypeConstraint = 4,
		NotNullableValueTypeConstraint = 8,
		DefaultConstructorConstraint = 16,
		SpecialConstraintMask = 28
	}

	[ComVisible] // 0x0013BC08-0x0013BC1C
	public interface ICustomAttributeProvider // TypeDefIndex: 496
	{
		// Methods
		object[] GetCustomAttributes(Type attributeType, bool inherit);
		bool IsDefined(Type attributeType, bool inherit);
	}

	[Serializable]
	[ComVisible] // 0x0013BC1C-0x0013BC30
	public class InvalidFilterCriteriaException : ApplicationException // TypeDefIndex: 497
	{
		// Constructors
		public InvalidFilterCriteriaException(); // 0x00757F50-0x00757FD8
		public InvalidFilterCriteriaException(string message); // 0x00757FD8-0x00758004
		protected InvalidFilterCriteriaException(SerializationInfo info, StreamingContext context); // 0x00758004-0x00758080
	}

	[ComVisible] // 0x0013BC30-0x0013BC9C
	[Guid] // 0x0013BC30-0x0013BC9C
	public interface IReflect // TypeDefIndex: 498
	{
	}

	public interface IReflectableType // TypeDefIndex: 499
	{
	}

	[Serializable]
	[Flags] // 0x0013BC9C-0x0013BCAC
	internal enum PInvokeAttributes // TypeDefIndex: 500
	{
		CharSetNotSpec = 0,
		BestFitUseAssem = 0,
		ThrowOnUnmappableCharUseAssem = 0,
		NoMangle = 1,
		CharSetAnsi = 2,
		CharSetUnicode = 4,
		CharSetMask = 6,
		CharSetAuto = 6,
		BestFitEnabled = 16,
		BestFitDisabled = 32,
		BestFitMask = 48,
		SupportsLastError = 64,
		CallConvWinapi = 256,
		CallConvCdecl = 512,
		CallConvStdcall = 768,
		CallConvThiscall = 1024,
		CallConvFastcall = 1280,
		CallConvMask = 1792,
		ThrowOnUnmappableCharEnabled = 4096,
		ThrowOnUnmappableCharDisabled = 8192,
		ThrowOnUnmappableCharMask = 12288,
		MaxValue = 65535
	}

	[Serializable]
	[ComVisible] // 0x0013BCAC-0x0013BCC0
	public delegate bool MemberFilter(MemberInfo m, object filterCriteria); // TypeDefIndex: 501; 0x00758168-0x007589A4

	[Serializable]
	[ClassInterface] // 0x0013BCC0-0x0013BD60
	[ComDefaultInterface] // 0x0013BCC0-0x0013BD60
	[ComVisible] // 0x0013BCC0-0x0013BD60
	public abstract class MemberInfo : ICustomAttributeProvider, _MemberInfo // TypeDefIndex: 502
	{
		// Properties
		public abstract MemberTypes MemberType { get; }
		public abstract string Name { get; }
		public abstract Type DeclaringType { get; }
		public abstract Type ReflectedType { get; }
		public virtual int MetadataToken { get; } // 0x00758A9C-0x00758AA0 
		public virtual Module Module { get; } // 0x00758AA0-0x00758B80 
	
		// Constructors
		protected MemberInfo(); // 0x00756774-0x00756778
	
		// Methods
		public abstract object[] GetCustomAttributes(bool inherit);
		public abstract object[] GetCustomAttributes(Type attributeType, bool inherit);
		public abstract bool IsDefined(Type attributeType, bool inherit);
		public virtual IList<CustomAttributeData> GetCustomAttributesData(); // 0x00758A14-0x00758A9C
		public static bool operator ==(MemberInfo left, MemberInfo right); // 0x00750164-0x007505E4
		public static bool operator !=(MemberInfo left, MemberInfo right); // 0x00758EC4-0x00758ED8
		public override bool Equals(object obj); // 0x00758ED8-0x00758EEC
		public override int GetHashCode(); // 0x00756790-0x00756794
	}

	[Serializable]
	internal class MemberInfoSerializationHolder : ISerializable, IObjectReference // TypeDefIndex: 503
	{
		// Fields
		private string m_memberName; // 0x08
		private RuntimeType m_reflectedType; // 0x0C
		private string m_signature; // 0x10
		private string m_signature2; // 0x14
		private MemberTypes m_memberType; // 0x18
		private SerializationInfo m_info; // 0x1C
	
		// Constructors
		internal MemberInfoSerializationHolder(SerializationInfo info, StreamingContext context); // 0x0075921C-0x00759588
	
		// Methods
		public static void GetSerializationInfo(SerializationInfo info, string name, RuntimeType reflectedClass, string signature, MemberTypes type); // 0x00758EEC-0x00758F14
		public static void GetSerializationInfo(SerializationInfo info, string name, RuntimeType reflectedClass, string signature, string signature2, MemberTypes type, Type[] genericArguments); // 0x00758F14-0x0075921C
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00759588-0x00759630
		public virtual object GetRealObject(StreamingContext context); // 0x00759630-0x0075A9B0
	}

	[Serializable]
	[ComVisible] // 0x0013BD60-0x0013BD94
	[Flags] // 0x0013BD60-0x0013BD94
	public enum MemberTypes // TypeDefIndex: 504
	{
		Constructor = 1,
		Event = 2,
		Field = 4,
		Method = 8,
		Property = 16,
		TypeInfo = 32,
		Custom = 64,
		NestedType = 128,
		All = 191
	}

	[Serializable]
	[ComVisible] // 0x0013BD94-0x0013BDC8
	[Flags] // 0x0013BD94-0x0013BDC8
	public enum MethodAttributes // TypeDefIndex: 505
	{
		PrivateScope = 0,
		ReuseSlot = 0,
		Private = 1,
		FamANDAssem = 2,
		Assembly = 3,
		Family = 4,
		FamORAssem = 5,
		Public = 6,
		MemberAccessMask = 7,
		UnmanagedExport = 8,
		Static = 16,
		Final = 32,
		Virtual = 64,
		HideBySig = 128,
		VtableLayoutMask = 256,
		NewSlot = 256,
		CheckAccessOnOverride = 512,
		Abstract = 1024,
		SpecialName = 2048,
		RTSpecialName = 4096,
		PinvokeImpl = 8192,
		HasSecurity = 16384,
		RequireSecObject = 32768,
		ReservedMask = 53248
	}

	[Serializable]
	[ClassInterface] // 0x0013BDC8-0x0013BE68
	[ComDefaultInterface] // 0x0013BDC8-0x0013BE68
	[ComVisible] // 0x0013BDC8-0x0013BE68
	public abstract class MethodBase : MemberInfo, _MethodBase // TypeDefIndex: 506
	{
		// Properties
		public abstract RuntimeMethodHandle MethodHandle { get; }
		public abstract MethodAttributes Attributes { get; }
		public virtual CallingConventions CallingConvention { get; } // 0x0075AD78-0x0075AD80 
		public virtual bool IsGenericMethodDefinition { get; } // 0x0075AE28-0x0075AE30 
		public virtual bool ContainsGenericParameters { get; } // 0x0075AE30-0x0075AE38 
		public virtual bool IsGenericMethod { get; } // 0x0075AE38-0x0075AE40 
		public virtual bool IsSecurityCritical { get; } // 0x0075AE40-0x0075AEC8 
		public bool IsPublic { get; } // 0x0075AF00-0x0075AF2C 
		public bool IsStatic { get; } // 0x0075AF2C-0x0075AF4C 
		public bool IsVirtual { get; } // 0x0075AF4C-0x0075AF6C 
		public bool IsAbstract { get; } // 0x0075AF6C-0x0075AF8C 
		[ComVisible] // 0x00146430-0x00146444
		public bool IsConstructor { get; } // 0x0075AF8C-0x0075B050 
	
		// Constructors
		protected MethodBase(); // 0x0074DF0C-0x0074DF10
	
		// Methods
		public static MethodBase GetMethodFromHandle(RuntimeMethodHandle handle); // 0x0075AA90-0x0075AD38
		public static bool operator ==(MethodBase left, MethodBase right); // 0x00758B94-0x00758DE0
		public static bool operator !=(MethodBase left, MethodBase right); // 0x00758B80-0x00758B94
		public override bool Equals(object obj); // 0x0075AD54-0x0075AD68
		public override int GetHashCode(); // 0x0074E010-0x0074E014
		internal virtual ParameterInfo[] GetParametersNoCopy(); // 0x0075AD68-0x0075AD78
		public abstract ParameterInfo[] GetParameters();
		public abstract MethodImplAttributes GetMethodImplementationFlags();
		public abstract object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture);
		[ComVisible] // 0x00144CB0-0x00144CC4
		public virtual Type[] GetGenericArguments(); // 0x0075AD80-0x0075AE28
		[DebuggerHidden] // 0x00144CC4-0x00144CF4
		[DebuggerStepThrough] // 0x00144CC4-0x00144CF4
		public object Invoke(object obj, object[] parameters); // 0x0075AEC8-0x0075AF00
		internal static string ConstructParameters(Type[] parameterTypes, CallingConventions callingConvention, bool serialization); // 0x0075B050-0x0075B334
		internal virtual string FormatNameAndSig(bool serialization); // 0x0075B334-0x0075B4BC
		internal virtual Type[] GetParameterTypes(); // 0x0075B4BC-0x0075B61C
		internal virtual ParameterInfo[] GetParametersInternal(); // 0x0075B61C-0x0075B62C
		internal virtual int GetParametersCount(); // 0x0075B62C-0x0075B660
		internal static MethodBase GetMethodFromHandleNoGenericCheck(RuntimeMethodHandle handle); // 0x0075B660-0x0075B6CC
		internal static MethodBase GetMethodFromHandleNoGenericCheck(RuntimeMethodHandle handle, RuntimeTypeHandle reflectedType); // 0x0075B6D0-0x0075B774
		private static MethodBase GetMethodFromHandleInternalType(IntPtr method_handle, IntPtr type_handle); // 0x0075AD38-0x0075AD40
		internal static MethodBase GetMethodFromHandleInternalType_native(IntPtr method_handle, IntPtr type_handle, bool genericCheck); // 0x0075B6CC-0x0075B6D0
	}

	[ComVisible] // 0x0013BE68-0x0013BE9C
	[Flags] // 0x0013BE68-0x0013BE9C
	public enum ExceptionHandlingClauseOptions // TypeDefIndex: 507
	{
		Clause = 0,
		Filter = 1,
		Finally = 2,
		Fault = 4
	}

	[Serializable]
	[ComVisible] // 0x0013BE9C-0x0013BEB0
	public enum MethodImplAttributes // TypeDefIndex: 508
	{
		IL = 0,
		Managed = 0,
		Native = 1,
		OPTIL = 2,
		CodeTypeMask = 3,
		Runtime = 3,
		ManagedMask = 4,
		Unmanaged = 4,
		NoInlining = 8,
		ForwardRef = 16,
		Synchronized = 32,
		NoOptimization = 64,
		PreserveSig = 128,
		AggressiveInlining = 256,
		InternalCall = 4096,
		MaxMethodImplVal = 65535
	}

	[Serializable]
	[ClassInterface] // 0x0013BEB0-0x0013BF50
	[ComDefaultInterface] // 0x0013BEB0-0x0013BF50
	[ComVisible] // 0x0013BEB0-0x0013BF50
	public abstract class MethodInfo : MethodBase, _MethodInfo // TypeDefIndex: 509
	{
		// Properties
		public override MemberTypes MemberType { get; } // 0x0075B790-0x0075B798 
		public virtual Type ReturnType { get; } // 0x0075B798-0x0075B820 
	
		// Constructors
		protected MethodInfo(); // 0x0075B774-0x0075B778
	
		// Methods
		public static bool operator ==(MethodInfo left, MethodInfo right); // 0x0075A9B0-0x0075AA90
		public static bool operator !=(MethodInfo left, MethodInfo right); // 0x0075AD40-0x0075AD54
		public override bool Equals(object obj); // 0x0075B778-0x0075B78C
		public override int GetHashCode(); // 0x0075B78C-0x0075B790
		[ComVisible] // 0x00144CF4-0x00144D08
		public override Type[] GetGenericArguments(); // 0x0075B820-0x0075B8C8
		[ComVisible] // 0x00144D08-0x00144D1C
		public virtual MethodInfo GetGenericMethodDefinition(); // 0x0075B8C8-0x0075B970
		public virtual MethodInfo MakeGenericMethod(params /* 0x001462E8-0x001462F8 */ Type[] typeArguments); // 0x0075B970-0x0075BA18
		internal virtual MethodInfo GetBaseMethod(); // 0x0075BA18-0x0075BA1C
	}

	[Serializable]
	[ComVisible] // 0x0013BF50-0x0013BF64
	public sealed class Missing : ISerializable // TypeDefIndex: 510
	{
		// Fields
		public static readonly Missing Value; // 0x00
	
		// Constructors
		private Missing(); // 0x0075BA1C-0x0075BA20
		static Missing(); // 0x0075BAE0-0x0075BBA4
	
		// Methods
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x0075BA20-0x0075BAE0
	}

	[Serializable]
	[ComVisible] // 0x0013BF64-0x0013BF98
	[Flags] // 0x0013BF64-0x0013BF98
	public enum ParameterAttributes // TypeDefIndex: 511
	{
		None = 0,
		In = 1,
		Out = 2,
		Lcid = 4,
		Retval = 8,
		Optional = 16,
		HasDefault = 4096,
		HasFieldMarshal = 8192,
		Reserved3 = 16384,
		Reserved4 = 32768,
		ReservedMask = 61440
	}

	[Serializable]
	[ComVisible] // 0x0013BF98-0x0013BFE4
	[DefaultMember] // 0x0013BF98-0x0013BFE4
	public struct ParameterModifier // TypeDefIndex: 512
	{
		// Fields
		private bool[] _byRef; // 0x00
	}

	[Serializable]
	[CLSCompliant] // 0x0013BFE4-0x0013C01C
	[ComVisible] // 0x0013BFE4-0x0013C01C
	public sealed class Pointer : ISerializable // TypeDefIndex: 513
	{
		// Fields
		private unsafe void* _ptr; // 0x08
		private RuntimeType _ptrType; // 0x0C
	
		// Constructors
		private Pointer(); // 0x00762E8C-0x00762E90
		private Pointer(SerializationInfo info, StreamingContext context); // 0x00762E90-0x00763080
	
		// Methods
		public static unsafe object Box(void* ptr, Type type); // 0x00763080-0x00763324
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00763324-0x0076341C
	}

	[Serializable]
	[ComVisible] // 0x0013C01C-0x0013C050
	[Flags] // 0x0013C01C-0x0013C050
	public enum PropertyAttributes // TypeDefIndex: 514
	{
		None = 0,
		SpecialName = 512,
		RTSpecialName = 1024,
		HasDefault = 4096,
		Reserved2 = 8192,
		Reserved3 = 16384,
		Reserved4 = 32768,
		ReservedMask = 62464
	}

	[Serializable]
	[ComVisible] // 0x0013C050-0x0013C064
	public sealed class ReflectionTypeLoadException : SystemException, ISerializable // TypeDefIndex: 515
	{
		// Fields
		private Type[] _classes; // 0x44
		private Exception[] _exceptions; // 0x48
	
		// Constructors
		private ReflectionTypeLoadException(); // 0x00763820-0x007638A8
		public ReflectionTypeLoadException(Type[] classes, Exception[] exceptions); // 0x007638A8-0x007638E8
		internal ReflectionTypeLoadException(SerializationInfo info, StreamingContext context); // 0x007638E8-0x00763B4C
	
		// Methods
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00763B4C-0x00763D34
	}

	[Serializable]
	[ComVisible] // 0x0013C064-0x0013C078
	public class TargetException : ApplicationException // TypeDefIndex: 516
	{
		// Constructors
		public TargetException(); // 0x002C3B00-0x002C3B2C
		public TargetException(string message); // 0x002C1788-0x002C17B4
		protected TargetException(SerializationInfo info, StreamingContext context); // 0x002C3B2C-0x002C3B4C
	}

	[Serializable]
	[ComVisible] // 0x0013C078-0x0013C08C
	public sealed class TargetInvocationException : ApplicationException // TypeDefIndex: 517
	{
		// Constructors
		private TargetInvocationException(); // 0x002C3B4C-0x002C3BD4
		public TargetInvocationException(Exception inner); // 0x002C3BD4-0x002C3C64
		public TargetInvocationException(string message, Exception inner); // 0x002C3C64-0x002C3C90
		internal TargetInvocationException(SerializationInfo info, StreamingContext context); // 0x002C3C90-0x002C3CB0
	}

	[Serializable]
	[ComVisible] // 0x0013C08C-0x0013C0A0
	public sealed class TargetParameterCountException : ApplicationException // TypeDefIndex: 518
	{
		// Constructors
		public TargetParameterCountException(); // 0x002C3CB0-0x002C3D38
		public TargetParameterCountException(string message); // 0x002C3D38-0x002C3D64
		internal TargetParameterCountException(SerializationInfo info, StreamingContext context); // 0x002C3D64-0x002C3D84
	}

	[Serializable]
	[ComVisible] // 0x0013C0A0-0x0013C0D4
	[Flags] // 0x0013C0A0-0x0013C0D4
	public enum TypeAttributes // TypeDefIndex: 519
	{
		NotPublic = 0,
		AutoLayout = 0,
		Class = 0,
		AnsiClass = 0,
		Public = 1,
		NestedPublic = 2,
		NestedPrivate = 3,
		NestedFamily = 4,
		NestedAssembly = 5,
		NestedFamANDAssem = 6,
		VisibilityMask = 7,
		NestedFamORAssem = 7,
		SequentialLayout = 8,
		ExplicitLayout = 16,
		LayoutMask = 24,
		ClassSemanticsMask = 32,
		Interface = 32,
		Abstract = 128,
		Sealed = 256,
		SpecialName = 1024,
		RTSpecialName = 2048,
		Import = 4096,
		Serializable = 8192,
		WindowsRuntime = 16384,
		UnicodeClass = 65536,
		AutoClass = 131072,
		StringFormatMask = 196608,
		CustomFormatClass = 196608,
		HasSecurity = 262144,
		ReservedMask = 264192,
		BeforeFieldInit = 1048576,
		CustomFormatMask = 12582912
	}

	[Serializable]
	[ComVisible] // 0x0013C0D4-0x0013C0E8
	public delegate bool TypeFilter(Type m, object filterCriteria); // TypeDefIndex: 520; 0x002C3D98-0x002C45D4

	[Serializable]
	[ComVisible] // 0x0013C0E8-0x0013C0FC
	public abstract class TypeInfo : Type, IReflectableType // TypeDefIndex: 521
	{
		// Constructors
		[FriendAccessAllowed] // 0x00144D1C-0x00144D2C
		internal TypeInfo(); // 0x002C4644-0x002C46C8
	}

	[Serializable]
	[ClassInterface] // 0x0013C0FC-0x0013C19C
	[ComDefaultInterface] // 0x0013C0FC-0x0013C19C
	[ComVisible] // 0x0013C0FC-0x0013C19C
	public class Assembly : ICustomAttributeProvider, ISerializable, _Assembly, IEvidenceFactory // TypeDefIndex: 522
	{
		// Fields
		internal IntPtr _mono_assembly; // 0x08
		private ResolveEventHolder resolve_event_holder; // 0x0C
		private object _evidence; // 0x10
		private object _minimum; // 0x14
		private object _optional; // 0x18
		private object _refuse; // 0x1C
		private object _granted; // 0x20
		private object _denied; // 0x24
		private bool fromByteArray; // 0x28
		private string assemblyName; // 0x2C
	
		// Properties
		public virtual string CodeBase { get; } // 0x0074B578-0x0074B580 
		public virtual string FullName { get; } // 0x0074B580-0x0074B590 
		[MonoTODO] // 0x00146444-0x00146454
		public bool IsFullyTrusted { get; } // 0x0074BD2C-0x0074BD34 
	
		// Nested types
		internal class ResolveEventHolder // TypeDefIndex: 523
		{
			// Constructors
			public ResolveEventHolder(); // 0x0074B564-0x0074B568
		}
	
		// Constructors
		protected Assembly(); // 0x0074B500-0x0074B564
	
		// Methods
		private string get_code_base(bool escaped); // 0x0074B568-0x0074B56C
		private string get_fullname(); // 0x0074B56C-0x0074B570
		internal static string GetAotId(); // 0x0074B570-0x0074B574
		private string GetCodeBase(bool escaped); // 0x0074B574-0x0074B578
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0074B590-0x0074B618
		public virtual bool IsDefined(Type attributeType, bool inherit); // 0x0074B618-0x0074B6AC
		public virtual object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x0074B6AC-0x0074B740
		internal IntPtr GetManifestResourceInternal(string name, out int size, out Module module); // 0x0074B740-0x0074B744
		internal virtual Type[] GetTypes(bool exportedOnly); // 0x0074B744-0x0074B748
		public virtual Type[] GetTypes(); // 0x0074B748-0x0074B75C
		public virtual Type GetType(string name); // 0x0074B75C-0x0074B78C
		internal Type InternalGetType(Module module, string name, bool throwOnError, bool ignoreCase); // 0x0074B78C-0x0074B7AC
		public virtual AssemblyName GetName(bool copiedName); // 0x0074B7AC-0x0074B834
		public virtual AssemblyName GetName(); // 0x0074B834-0x0074B848
		public override string ToString(); // 0x0074B848-0x0074B870
		public static Assembly GetAssembly(Type type); // 0x0074B870-0x0074B97C
		public static Assembly Load(string assemblyString); // 0x0074B97C-0x0074B9B8
		private static Assembly load_with_partial_name(string name, Evidence e); // 0x0074B9B8-0x0074B9BC
		[Obsolete] // 0x00144D2C-0x00144D60
		public static Assembly LoadWithPartialName(string partialName, Evidence securityEvidence); // 0x0074B9BC-0x0074B9C4
		internal static Assembly LoadWithPartialName(string partialName, Evidence securityEvidence, bool oldBehavior); // 0x0074B9C4-0x0074BAA8
		internal virtual Module[] GetModulesInternal(); // 0x0074BAA8-0x0074BAAC
		public static Assembly GetExecutingAssembly(); // 0x0074BAAC-0x0074BB14
		public static Assembly GetCallingAssembly(); // 0x0074BB14-0x0074BB18
		public override int GetHashCode(); // 0x0074BB18-0x0074BB1C
		public override bool Equals(object o); // 0x0074BB1C-0x0074BCAC
		private static Exception CreateNIE(); // 0x0074BCAC-0x0074BD2C
		public virtual Type GetType(string name, bool throwOnError, bool ignoreCase); // 0x0074BD34-0x0074BD9C
		public virtual Module GetModule(string name); // 0x0074BD9C-0x0074BE04
		public virtual Module[] GetModules(bool getResourceModules); // 0x0074BE04-0x0074BE6C
		public static bool operator ==(Assembly left, Assembly right); // 0x0074BE6C-0x0074BEDC
		public static bool operator !=(Assembly left, Assembly right); // 0x0074BEDC-0x0074BF50
	}

	[Serializable]
	[ClassInterface] // 0x0013C19C-0x0013C23C
	[ComDefaultInterface] // 0x0013C19C-0x0013C23C
	[ComVisible] // 0x0013C19C-0x0013C23C
	public sealed class AssemblyName : ICloneable, ISerializable, IDeserializationCallback, _AssemblyName // TypeDefIndex: 524
	{
		// Fields
		private string name; // 0x08
		private string codebase; // 0x0C
		private int major; // 0x10
		private int minor; // 0x14
		private int build; // 0x18
		private int revision; // 0x1C
		private CultureInfo cultureinfo; // 0x20
		private AssemblyNameFlags flags; // 0x24
		private AssemblyHashAlgorithm hashalg; // 0x28
		private StrongNameKeyPair keypair; // 0x2C
		private byte[] publicKey; // 0x30
		private byte[] keyToken; // 0x34
		private AssemblyVersionCompatibility versioncompat; // 0x38
		private System.Version version; // 0x3C
		private ProcessorArchitecture processor_architecture; // 0x40
		private AssemblyContentType contentType; // 0x44
	
		// Properties
		public string Name { get; } // 0x0074CE30-0x0074CE38 
		public CultureInfo CultureInfo { get; } // 0x0074CE38-0x0074CE40 
		public AssemblyNameFlags Flags { get; } // 0x0074CE40-0x0074CE48 
		public string FullName { get; } // 0x0074CE48-0x0074D2D8 
		public System.Version Version { get; set; } // 0x0074D2D8-0x0074D2E0 0x0074D410-0x0074D554
		private bool IsPublicKeyValid { get; } // 0x0074D6AC-0x0074D804 
	
		// Constructors
		public AssemblyName(); // 0x0074C168-0x0074C174
		public AssemblyName(string assemblyName); // 0x0074C178-0x0074C41C
		internal AssemblyName(SerializationInfo si, StreamingContext sc); // 0x0074C800-0x0074CE30
	
		// Methods
		private static bool ParseAssemblyName(IntPtr name, out MonoAssemblyName aname, out bool is_version_definited, out bool is_token_defined); // 0x0074C174-0x0074C178
		public override string ToString(); // 0x0074D554-0x0074D578
		public byte[] GetPublicKeyToken(); // 0x0074D578-0x0074D6AC
		private byte[] InternalGetPublicKeyToken(); // 0x0074D2E0-0x0074D410
		private static unsafe void get_public_token(byte* token, byte* pubkey, int len); // 0x0074D8BC-0x0074D8C0
		private byte[] ComputePublicKeyToken(); // 0x0074D804-0x0074D8BC
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0074D8C0-0x0074DB94
		public object Clone(); // 0x0074DB94-0x0074DDA4
		public void OnDeserialization(object sender); // 0x0074DDA4-0x0074DDAC
		private static unsafe MonoAssemblyName* GetNativeName(IntPtr assembly_ptr); // 0x0074DDAC-0x0074DDB0
		internal unsafe void FillName(MonoAssemblyName* native, string codeBase, bool addVersion, bool addPublickey, bool defaultToken, bool assemblyRef); // 0x0074C41C-0x0074C800
		internal static AssemblyName Create(Assembly assembly, bool fillCodebase); // 0x0074DDB0-0x0074DEA4
	}

	[Serializable]
	[ClassInterface] // 0x0013C23C-0x0013C2DC
	[ComDefaultInterface] // 0x0013C23C-0x0013C2DC
	[ComVisible] // 0x0013C23C-0x0013C2DC
	public abstract class ConstructorInfo : MethodBase, _ConstructorInfo // TypeDefIndex: 525
	{
		// Fields
		[ComVisible] // 0x00142740-0x00142754
		public static readonly string ConstructorName; // 0x00
		[ComVisible] // 0x00142754-0x00142768
		public static readonly string TypeConstructorName; // 0x04
	
		// Properties
		[ComVisible] // 0x00146454-0x00146468
		public override MemberTypes MemberType { get; } // 0x0074DF10-0x0074DF18 
	
		// Constructors
		protected ConstructorInfo(); // 0x0074DF08-0x0074DF0C
		static ConstructorInfo(); // 0x0074E0F8-0x0074E188
	
		// Methods
		[DebuggerHidden] // 0x00144D60-0x00144D90
		[DebuggerStepThrough] // 0x00144D60-0x00144D90
		public object Invoke(object[] parameters); // 0x0074DF18-0x0074DFF8
		public abstract object Invoke(BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture);
		public override bool Equals(object obj); // 0x0074DFF8-0x0074E00C
		public override int GetHashCode(); // 0x0074E00C-0x0074E010
		public static bool operator ==(ConstructorInfo left, ConstructorInfo right); // 0x0074E014-0x0074E084
		public static bool operator !=(ConstructorInfo left, ConstructorInfo right); // 0x0074E084-0x0074E0F8
	}

	[Serializable]
	[ComVisible] // 0x0013C2DC-0x0013C2F0
	public class CustomAttributeData // TypeDefIndex: 526
	{
		// Fields
		private ConstructorInfo ctorInfo; // 0x08
		private IList<CustomAttributeTypedArgument> ctorArgs; // 0x0C
		private IList<CustomAttributeNamedArgument> namedArgs; // 0x10
		private LazyCAttrData lazyData; // 0x14
	
		// Properties
		[ComVisible] // 0x00146468-0x0014647C
		public virtual ConstructorInfo Constructor { get; } // 0x0074E3E4-0x0074E3EC 
		[ComVisible] // 0x0014647C-0x00146490
		public virtual IList<CustomAttributeTypedArgument> ConstructorArguments { get; } // 0x0074E3EC-0x0074E404 
		public virtual IList<CustomAttributeNamedArgument> NamedArguments { get; } // 0x0074E404-0x0074E41C 
		public Type AttributeType { get; } // 0x0074E6B0-0x0074E6E4 
	
		// Nested types
		private class LazyCAttrData // TypeDefIndex: 527
		{
			// Fields
			internal Assembly assembly; // 0x08
			internal IntPtr data; // 0x0C
			internal uint data_length; // 0x10
	
			// Constructors
			public LazyCAttrData(); // 0x0074E24C-0x0074E250
		}
	
		// Constructors
		protected CustomAttributeData(); // 0x0074E188-0x0074E18C
		internal CustomAttributeData(ConstructorInfo ctorInfo, Assembly assembly, IntPtr data, uint data_length); // 0x0074E18C-0x0074E24C
	
		// Methods
		private static void ResolveArgumentsInternal(ConstructorInfo ctor, Assembly assembly, IntPtr data, uint data_length, out object[] ctorArgs, out object[] namedArgs); // 0x0074E250-0x0074E254
		private void ResolveArguments(); // 0x0074E254-0x0074E3E4
		public static IList<CustomAttributeData> GetCustomAttributes(Assembly target); // 0x0074E41C-0x0074E4A0
		public static IList<CustomAttributeData> GetCustomAttributes(MemberInfo target); // 0x0074E4A0-0x0074E524
		internal static IList<CustomAttributeData> GetCustomAttributesInternal(RuntimeType target); // 0x0074E524-0x0074E5A8
		public static IList<CustomAttributeData> GetCustomAttributes(Module target); // 0x0074E5A8-0x0074E62C
		public static IList<CustomAttributeData> GetCustomAttributes(ParameterInfo target); // 0x0074E62C-0x0074E6B0
		public override string ToString(); // 0x0074E6E4-0x0074F0D4
		private static T[] UnboxValues<T>(object[] values);
		public override bool Equals(object obj); // 0x0074F0D4-0x0074FB80
		public override int GetHashCode(); // 0x0074FB80-0x0074FFEC
	}

	[Serializable]
	[ComVisible] // 0x0013C2F0-0x0013C304
	public class CustomAttributeFormatException : FormatException // TypeDefIndex: 528
	{
		// Constructors
		public CustomAttributeFormatException(); // 0x0074FFF4-0x00750068
		public CustomAttributeFormatException(string message); // 0x00750068-0x00750070
		protected CustomAttributeFormatException(SerializationInfo info, StreamingContext context); // 0x00750070-0x00750154
	}

	[Serializable]
	[ComVisible] // 0x0013C304-0x0013C318
	public struct CustomAttributeNamedArgument // TypeDefIndex: 529
	{
		// Fields
		private CustomAttributeTypedArgument typedArgument; // 0x00
		private MemberInfo memberInfo; // 0x08
	
		// Constructors
		public CustomAttributeNamedArgument(MemberInfo memberInfo, object value); // 0x00750154-0x0075015C
	
		// Methods
		public override string ToString(); // 0x0075015C-0x00750164
		public override bool Equals(object obj); // 0x007505E4-0x007505EC
		public override int GetHashCode(); // 0x007505EC-0x007508B0
	}

	[Serializable]
	[ComVisible] // 0x0013C318-0x0013C32C
	public struct CustomAttributeTypedArgument // TypeDefIndex: 530
	{
		// Fields
		private Type argumentType; // 0x00
		private object value; // 0x04
	
		// Constructors
		public CustomAttributeTypedArgument(Type argumentType, object value); // 0x007508B0-0x007508B8
	
		// Methods
		public override string ToString(); // 0x007508B8-0x007508C0
		public override bool Equals(object obj); // 0x007508C0-0x007508C8
		public override int GetHashCode(); // 0x007508C8-0x007508D0
	}

	[Serializable]
	[ClassInterface] // 0x0013C32C-0x0013C3CC
	[ComDefaultInterface] // 0x0013C32C-0x0013C3CC
	[ComVisible] // 0x0013C32C-0x0013C3CC
	public abstract class EventInfo : MemberInfo, _EventInfo // TypeDefIndex: 531
	{
		// Fields
		private AddEventAdapter cached_add_event; // 0x08
	
		// Properties
		public virtual Type EventHandlerType { get; } // 0x007566D0-0x00756768 
		public override MemberTypes MemberType { get; } // 0x00756768-0x00756770 
	
		// Nested types
		private delegate void AddEventAdapter(object _this, Delegate dele); // TypeDefIndex: 532; 0x007569E0-0x00757268
	
		// Constructors
		protected EventInfo(); // 0x00756770-0x00756774
	
		// Methods
		public abstract MethodInfo GetAddMethod(bool nonPublic);
		public abstract MethodInfo GetRaiseMethod(bool nonPublic);
		public abstract MethodInfo GetRemoveMethod(bool nonPublic);
		public override bool Equals(object obj); // 0x00756778-0x0075678C
		public override int GetHashCode(); // 0x0075678C-0x00756790
		public static bool operator ==(EventInfo left, EventInfo right); // 0x00756794-0x00756804
		public static bool operator !=(EventInfo left, EventInfo right); // 0x00756804-0x00756878
		private static EventInfo internal_from_handle_type(IntPtr event_handle, IntPtr type_handle); // 0x00756878-0x0075687C
		internal static EventInfo GetEventFromHandle(RuntimeEventHandle handle, RuntimeTypeHandle reflectedType); // 0x0075687C-0x007569CC
	}

	[ComVisible] // 0x0013C3CC-0x0013C3E0
	public class ExceptionHandlingClause // TypeDefIndex: 533
	{
		// Fields
		internal Type catch_type; // 0x08
		internal int filter_offset; // 0x0C
		internal ExceptionHandlingClauseOptions flags; // 0x10
		internal int try_offset; // 0x14
		internal int try_length; // 0x18
		internal int handler_offset; // 0x1C
		internal int handler_length; // 0x20
	
		// Methods
		public override string ToString(); // 0x00757308-0x007576AC
	}

	[Serializable]
	[ClassInterface] // 0x0013C3E0-0x0013C480
	[ComDefaultInterface] // 0x0013C3E0-0x0013C480
	[ComVisible] // 0x0013C3E0-0x0013C480
	public abstract class FieldInfo : MemberInfo, _FieldInfo // TypeDefIndex: 534
	{
		// Properties
		public abstract FieldAttributes Attributes { get; }
		public abstract RuntimeFieldHandle FieldHandle { get; }
		public abstract Type FieldType { get; }
		public override MemberTypes MemberType { get; } // 0x007576B0-0x007576B8 
		public bool IsLiteral { get; } // 0x007576B8-0x007576D8 
		public bool IsStatic { get; } // 0x007576D8-0x007576F8 
		public bool IsInitOnly { get; } // 0x007576F8-0x00757718 
		public bool IsNotSerialized { get; } // 0x00757718-0x00757738 
	
		// Constructors
		protected FieldInfo(); // 0x007576AC-0x007576B0
	
		// Methods
		public abstract object GetValue(object obj);
		public abstract void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, CultureInfo culture);
		[DebuggerHidden] // 0x00144D90-0x00144DC0
		[DebuggerStepThrough] // 0x00144D90-0x00144DC0
		public void SetValue(object obj, object value); // 0x00757738-0x00757770
		private static FieldInfo internal_from_handle_type(IntPtr field_handle, IntPtr type_handle); // 0x00757770-0x00757774
		public static FieldInfo GetFieldFromHandle(RuntimeFieldHandle handle); // 0x00757774-0x00757854
		[ComVisible] // 0x00144DC0-0x00144DD4
		public static FieldInfo GetFieldFromHandle(RuntimeFieldHandle handle, RuntimeTypeHandle declaringType); // 0x00757854-0x007579A4
		internal virtual int GetFieldOffset(); // 0x00757A14-0x00757AB0
		[CLSCompliant] // 0x00144DD4-0x00144DE8
		public virtual void SetValueDirect(TypedReference obj, object value); // 0x00757AB0-0x00757B58
		private MarshalAsAttribute get_marshal_info(); // 0x00757B58-0x00757B5C
		internal object[] GetPseudoCustomAttributes(); // 0x00757B5C-0x00757E28
		public virtual object GetRawConstantValue(); // 0x00757E28-0x00757EC4
		public override bool Equals(object obj); // 0x00757EC4-0x00757ED8
		public override int GetHashCode(); // 0x00757ED8-0x00757EDC
		public static bool operator ==(FieldInfo left, FieldInfo right); // 0x007579A4-0x00757A14
		public static bool operator !=(FieldInfo left, FieldInfo right); // 0x00757EDC-0x00757F50
	}

	[ComVisible] // 0x0013C480-0x0013C494
	public class LocalVariableInfo // TypeDefIndex: 535
	{
		// Fields
		internal Type type; // 0x08
		internal bool is_pinned; // 0x0C
		internal ushort position; // 0x0E
	
		// Methods
		public override string ToString(); // 0x00758080-0x00758154
	}

	[ComVisible] // 0x0013C494-0x0013C4A8
	public class MethodBody // TypeDefIndex: 536
	{
		// Fields
		private ExceptionHandlingClause[] clauses; // 0x08
		private LocalVariableInfo[] locals; // 0x0C
		private byte[] il; // 0x10
		private bool init_locals; // 0x14
		private int sig_token; // 0x18
		private int max_stack; // 0x1C
	}

	[Serializable]
	[ClassInterface] // 0x0013C4A8-0x0013C548
	[ComDefaultInterface] // 0x0013C4A8-0x0013C548
	[ComVisible] // 0x0013C4A8-0x0013C548
	public abstract class Module : ISerializable, ICustomAttributeProvider, _Module // TypeDefIndex: 537
	{
		// Fields
		public static readonly TypeFilter FilterTypeName; // 0x00
		public static readonly TypeFilter FilterTypeNameIgnoreCase; // 0x04
		internal IntPtr _impl; // 0x08
		internal Assembly assembly; // 0x0C
		internal string fqname; // 0x10
		internal string name; // 0x14
		internal string scopename; // 0x18
		internal bool is_resource; // 0x1C
		internal int token; // 0x20
		private const BindingFlags defaultBindingFlags = BindingFlags.Default | BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public; // Metadata: 0x00204668
	
		// Properties
		public virtual Assembly Assembly { get; } // 0x0075C140-0x0075C1D4 
		public virtual string ScopeName { get; } // 0x0075C254-0x0075C2E8 
		public virtual Guid ModuleVersionId { get; } // 0x0075C2E8-0x0075C37C 
	
		// Constructors
		protected Module(); // 0x0075BBA4-0x0075BBA8
		static Module(); // 0x0075C538-0x0075C608
	
		// Methods
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0075BBA8-0x0075BC30
		public override string ToString(); // 0x0075BC30-0x0075BC38
		internal virtual Guid GetModuleVersionId(); // 0x0075BC38-0x0075BC68
		private static bool filter_by_type_name(Type m, object filterCriteria); // 0x0075BC6C-0x0075BE84
		private static bool filter_by_type_name_ignore_case(Type m, object filterCriteria); // 0x0075BE84-0x0075C0B8
		private string GetGuidInternal(); // 0x0075BC68-0x0075BC6C
		public override bool Equals(object o); // 0x0075C0B8-0x0075C0CC
		public override int GetHashCode(); // 0x0075C0CC-0x0075C0D0
		public static bool operator ==(Module left, Module right); // 0x0075C0D0-0x0075C140
		private static Exception CreateNIE(); // 0x0075C1D4-0x0075C254
		public virtual bool IsResource(); // 0x0075C37C-0x0075C410
		public virtual object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x0075C410-0x0075C4A4
		public virtual bool IsDefined(Type attributeType, bool inherit); // 0x0075C4A4-0x0075C538
	}

	internal abstract class RuntimeAssembly : Assembly // TypeDefIndex: 538
	{
		// Constructors
		protected RuntimeAssembly(); // 0x002C1CB0-0x002C1CB8
	
		// Methods
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x002C1A74-0x002C1B5C
		internal static RuntimeAssembly LoadWithPartialNameInternal(string partialName, Evidence securityEvidence, ref StackCrawlMark stackMark); // 0x002C1B5C-0x002C1C64
		internal static RuntimeAssembly LoadWithPartialNameInternal(AssemblyName an, Evidence securityEvidence, ref StackCrawlMark stackMark); // 0x002C1C64-0x002C1CA4
		public override AssemblyName GetName(bool copiedName); // 0x002C1CA4-0x002C1CB0
	}

	[Serializable]
	[ClassInterface] // 0x0013C548-0x0013C5E8
	[ComDefaultInterface] // 0x0013C548-0x0013C5E8
	[ComVisible] // 0x0013C548-0x0013C5E8
	internal class MonoAssembly : RuntimeAssembly // TypeDefIndex: 539
	{
		// Constructors
		public MonoAssembly(); // 0x0075CA60-0x0075CA68
	
		// Methods
		public override Type GetType(string name, bool throwOnError, bool ignoreCase); // 0x0075C608-0x0075C738
		public override Module GetModule(string name); // 0x0075C738-0x0075C8E4
		public override Module[] GetModules(bool getResourceModules); // 0x0075C8E4-0x0075CA60
	}

	internal struct MonoEventInfo // TypeDefIndex: 540
	{
		// Fields
		public Type declaring_type; // 0x00
		public Type reflected_type; // 0x04
		public string name; // 0x08
		public MethodInfo add_method; // 0x0C
		public MethodInfo remove_method; // 0x10
		public MethodInfo raise_method; // 0x14
		public EventAttributes attrs; // 0x18
		public MethodInfo[] other_methods; // 0x1C
	
		// Methods
		private static void get_event_info(MonoEvent ev, out MonoEventInfo info); // 0x0075E044-0x0075E048
		internal static MonoEventInfo GetEventInfo(MonoEvent ev); // 0x0075DB98-0x0075DBE0
	}

	internal abstract class RuntimeEventInfo : EventInfo, ISerializable // TypeDefIndex: 541
	{
		// Properties
		internal BindingFlags BindingFlags { get; } // 0x002C2210-0x002C2218 
		public override Module Module { get; } // 0x002C2218-0x002C221C 
		private RuntimeType ReflectedTypeInternal { get; } // 0x002C2354-0x002C245C 
	
		// Constructors
		protected RuntimeEventInfo(); // 0x002C2558-0x002C2560
	
		// Methods
		internal RuntimeType GetDeclaringTypeInternal(); // 0x002C224C-0x002C2354
		internal RuntimeModule GetRuntimeModule(); // 0x002C221C-0x002C224C
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x002C245C-0x002C2558
	}

	[Serializable]
	internal sealed class MonoEvent : RuntimeEventInfo // TypeDefIndex: 542
	{
		// Fields
		private IntPtr klass; // 0x0C
		private IntPtr handle; // 0x10
	
		// Properties
		public override Type DeclaringType { get; } // 0x0075DD00-0x0075DD30 
		public override Type ReflectedType { get; } // 0x0075DD30-0x0075DD60 
		public override string Name { get; } // 0x0075DD60-0x0075DD90 
	
		// Constructors
		public MonoEvent(); // 0x0075DFE0-0x0075E044
	
		// Methods
		public override MethodInfo GetAddMethod(bool nonPublic); // 0x0075DB08-0x0075DB98
		public override MethodInfo GetRaiseMethod(bool nonPublic); // 0x0075DBE0-0x0075DC70
		public override MethodInfo GetRemoveMethod(bool nonPublic); // 0x0075DC70-0x0075DD00
		public override string ToString(); // 0x0075DD90-0x0075DE28
		public override bool IsDefined(Type attributeType, bool inherit); // 0x0075DE28-0x0075DEBC
		public override object[] GetCustomAttributes(bool inherit); // 0x0075DEBC-0x0075DF48
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x0075DF48-0x0075DFDC
		public override IList<CustomAttributeData> GetCustomAttributesData(); // 0x0075DFDC-0x0075DFE0
	}

	internal abstract class RuntimeFieldInfo : FieldInfo, ISerializable // TypeDefIndex: 543
	{
		// Properties
		internal BindingFlags BindingFlags { get; } // 0x002C2560-0x002C2568 
		public override Module Module { get; } // 0x002C2568-0x002C256C 
		private RuntimeType ReflectedTypeInternal { get; } // 0x002C26A4-0x002C27AC 
	
		// Constructors
		protected RuntimeFieldInfo(); // 0x002C1A6C-0x002C1A74
	
		// Methods
		internal RuntimeType GetDeclaringTypeInternal(); // 0x002C259C-0x002C26A4
		internal RuntimeModule GetRuntimeModule(); // 0x002C256C-0x002C259C
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x002C27AC-0x002C28C0
	}

	internal abstract class RtFieldInfo : RuntimeFieldInfo // TypeDefIndex: 544
	{
		// Constructors
		protected RtFieldInfo(); // 0x002C1A64-0x002C1A6C
	
		// Methods
		internal object UnsafeGetValue(object obj); // 0x002C1570-0x002C1574
		internal void CheckConsistency(object target); // 0x002C1574-0x002C1788
		[DebuggerHidden] // 0x00144DE8-0x00144E18
		[DebuggerStepThrough] // 0x00144DE8-0x00144E18
		internal void UnsafeSetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, CultureInfo culture); // 0x002C17B4-0x002C1814
		[DebuggerHidden] // 0x00144E18-0x00144E48
		[DebuggerStepThrough] // 0x00144E18-0x00144E48
		public override void SetValueDirect(TypedReference obj, object value); // 0x002C1814-0x002C1A64
	}

	[Serializable]
	internal class MonoField : RtFieldInfo // TypeDefIndex: 545
	{
		// Fields
		internal IntPtr klass; // 0x08
		internal RuntimeFieldHandle fhandle; // 0x0C
		private string name; // 0x10
		private Type type; // 0x14
		private FieldAttributes attrs; // 0x18
	
		// Properties
		public override FieldAttributes Attributes { get; } // 0x0075E048-0x0075E050 
		public override RuntimeFieldHandle FieldHandle { get; } // 0x0075E050-0x0075E058 
		public override Type FieldType { get; } // 0x0075E05C-0x0075E100 
		public override Type ReflectedType { get; } // 0x0075E104-0x0075E10C 
		public override Type DeclaringType { get; } // 0x0075E10C-0x0075E114 
		public override string Name { get; } // 0x0075E114-0x0075E11C 
	
		// Constructors
		public MonoField(); // 0x0075EA74-0x0075EA7C
	
		// Methods
		private Type ResolveType(); // 0x0075E058-0x0075E05C
		private Type GetParentType(bool declaring); // 0x0075E100-0x0075E104
		public override bool IsDefined(Type attributeType, bool inherit); // 0x0075E11C-0x0075E1B0
		public override object[] GetCustomAttributes(bool inherit); // 0x0075E1B0-0x0075E23C
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x0075E23C-0x0075E2D0
		internal override int GetFieldOffset(); // 0x0075E2D0-0x0075E2D4
		private object GetValueInternal(object obj); // 0x0075E2D4-0x0075E2D8
		public override object GetValue(object obj); // 0x0075E2D8-0x0075E4EC
		public override string ToString(); // 0x0075E5D0-0x0075E650
		private static void SetValueInternal(FieldInfo fi, object obj, object value); // 0x0075E650-0x0075E654
		public override void SetValue(object obj, object val, BindingFlags invokeAttr, Binder binder, CultureInfo culture); // 0x0075E654-0x0075EA6C
		public override object GetRawConstantValue(); // 0x0075EA6C-0x0075EA70
		public override IList<CustomAttributeData> GetCustomAttributesData(); // 0x0075EA70-0x0075EA74
		private void CheckGeneric(); // 0x0075E4EC-0x0075E5D0
	}

	internal struct MonoMethodInfo // TypeDefIndex: 546
	{
		// Fields
		private Type parent; // 0x00
		private Type ret; // 0x04
		internal MethodAttributes attrs; // 0x08
		internal MethodImplAttributes iattrs; // 0x0C
		private CallingConventions callconv; // 0x10
	
		// Methods
		private static void get_method_info(IntPtr handle, out MonoMethodInfo info); // 0x0075F9EC-0x0075F9F0
		private static int get_method_attributes(IntPtr handle); // 0x0075F9F0-0x0075F9F4
		internal static MonoMethodInfo GetMethodInfo(IntPtr handle); // 0x0075F388-0x0075F3D4
		internal static Type GetDeclaringType(IntPtr handle); // 0x0075D610-0x0075D644
		internal static Type GetReturnType(IntPtr handle); // 0x0075EAC8-0x0075EAFC
		internal static MethodAttributes GetAttributes(IntPtr handle); // 0x0075D51C-0x0075D520
		internal static CallingConventions GetCallingConvention(IntPtr handle); // 0x0075D558-0x0075D58C
		internal static MethodImplAttributes GetMethodImplementationFlags(IntPtr handle); // 0x0075CAA0-0x0075CAD4
		private static ParameterInfo[] get_parameter_info(IntPtr handle, MemberInfo member); // 0x0075F9F4-0x0075F9F8
		internal static ParameterInfo[] GetParametersInfo(IntPtr handle, MemberInfo member); // 0x0075CAE0-0x0075CAE4
	}

	internal abstract class RuntimeMethodInfo : MethodInfo, ISerializable // TypeDefIndex: 547
	{
		// Properties
		internal BindingFlags BindingFlags { get; } // 0x002C28C0-0x002C28C8 
		public override Module Module { get; } // 0x002C28C8-0x002C28CC 
		private RuntimeType ReflectedTypeInternal { get; } // 0x002C2A68-0x002C2B70 
	
		// Constructors
		protected RuntimeMethodInfo(); // 0x002C3048-0x002C3050
	
		// Methods
		internal override string FormatNameAndSig(bool serialization); // 0x002C2B70-0x002C2D38
		public override string ToString(); // 0x002C2D38-0x002C2DF4
		internal RuntimeModule GetRuntimeModule(); // 0x002C28CC-0x002C2A68
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x002C2DF4-0x002C2F80
		internal string SerializationToString(); // 0x002C2F80-0x002C3048
	}

	[Serializable]
	internal class MonoMethod : RuntimeMethodInfo // TypeDefIndex: 548
	{
		// Fields
		internal IntPtr mhandle; // 0x08
		private string name; // 0x0C
		private Type reftype; // 0x10
	
		// Properties
		public override Type ReturnType { get; } // 0x0075EA90-0x0075EAC8 
		public override RuntimeMethodHandle MethodHandle { get; } // 0x0075EEF0-0x0075EF20 
		public override MethodAttributes Attributes { get; } // 0x0075EF20-0x0075EF28 
		public override CallingConventions CallingConvention { get; } // 0x0075EF28-0x0075EF60 
		public override Type ReflectedType { get; } // 0x0075EF60-0x0075EF68 
		public override Type DeclaringType { get; } // 0x0075EF68-0x0075EFA0 
		public override string Name { get; } // 0x0075EFA0-0x0075EFC8 
		public override bool IsGenericMethodDefinition { get; } // 0x0075F87C-0x0075F880 
		public override bool IsGenericMethod { get; } // 0x0075F880-0x0075F884 
		public override bool ContainsGenericParameters { get; } // 0x0075F884-0x0075F97C 
		public override bool IsSecurityCritical { get; } // 0x0075F988-0x0075F9EC 
	
		// Constructors
		internal MonoMethod(); // 0x0075EA7C-0x0075EA84
	
		// Methods
		internal static string get_name(MethodBase method); // 0x0075D66C-0x0075D670
		internal static MonoMethod get_base_method(MonoMethod method, bool definition); // 0x0075EA84-0x0075EA88
		internal override MethodInfo GetBaseMethod(); // 0x0075EA88-0x0075EA90
		public override MethodImplAttributes GetMethodImplementationFlags(); // 0x0075EAFC-0x0075EB34
		public override ParameterInfo[] GetParameters(); // 0x0075EB34-0x0075EBF8
		internal override ParameterInfo[] GetParametersInternal(); // 0x0075EBF8-0x0075EC04
		internal override int GetParametersCount(); // 0x0075EC04-0x0075EC34
		internal object InternalInvoke(object obj, object[] parameters, out Exception exc); // 0x0075EC34-0x0075EC38
		[DebuggerHidden] // 0x00144E48-0x00144E78
		[DebuggerStepThrough] // 0x00144E48-0x00144E78
		public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x0075EC38-0x0075EEF0
		internal static void ConvertValues(Binder binder, object[] args, ParameterInfo[] pinfo, CultureInfo culture, BindingFlags invokeAttr); // 0x0075CF00-0x0075D300
		public override bool IsDefined(Type attributeType, bool inherit); // 0x0075EFC8-0x0075F05C
		public override object[] GetCustomAttributes(bool inherit); // 0x0075F05C-0x0075F0E8
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x0075F0E8-0x0075F17C
		internal void GetPInvoke(out PInvokeAttributes flags, out string entryPoint, out string dllName); // 0x0075F17C-0x0075F180
		internal object[] GetPseudoCustomAttributes(); // 0x0075F180-0x0075F388
		public override MethodInfo MakeGenericMethod(params /* 0x001462F8-0x00146308 */ Type[] methodInstantiation); // 0x0075F3D4-0x0075F7C4
		private MethodInfo MakeGenericMethod_impl(Type[] types); // 0x0075F7C4-0x0075F7C8
		public override Type[] GetGenericArguments(); // 0x0075F7C8-0x0075F7CC
		private MethodInfo GetGenericMethodDefinition_impl(); // 0x0075F7CC-0x0075F7D0
		public override MethodInfo GetGenericMethodDefinition(); // 0x0075F7D0-0x0075F87C
		public override IList<CustomAttributeData> GetCustomAttributesData(); // 0x0075F97C-0x0075F980
		private static int get_core_clr_security_level(); // 0x0075F980-0x0075F988
	}

	internal abstract class RuntimeConstructorInfo : ConstructorInfo, ISerializable // TypeDefIndex: 549
	{
		// Properties
		public override Module Module { get; } // 0x002C1CB8-0x002C1CBC 
		internal BindingFlags BindingFlags { get; } // 0x002C1DCC-0x002C1DD4 
		private RuntimeType ReflectedTypeInternal { get; } // 0x002C1DD4-0x002C1EDC 
	
		// Constructors
		protected RuntimeConstructorInfo(); // 0x002C218C-0x002C2210
	
		// Methods
		internal RuntimeModule GetRuntimeModule(); // 0x002C1CBC-0x002C1DCC
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x002C1EDC-0x002C2010
		internal string SerializationToString(); // 0x002C2010-0x002C2024
		internal void SerializationInvoke(object target, SerializationInfo info, StreamingContext context); // 0x002C2024-0x002C218C
	}

	[Serializable]
	internal class MonoCMethod : RuntimeConstructorInfo // TypeDefIndex: 550
	{
		// Fields
		internal IntPtr mhandle; // 0x08
		private string name; // 0x0C
		private Type reftype; // 0x10
	
		// Properties
		public override RuntimeMethodHandle MethodHandle { get; } // 0x0075D4E4-0x0075D514 
		public override MethodAttributes Attributes { get; } // 0x0075D514-0x0075D51C 
		public override CallingConventions CallingConvention { get; } // 0x0075D520-0x0075D558 
		public override bool ContainsGenericParameters { get; } // 0x0075D58C-0x0075D5D0 
		public override Type ReflectedType { get; } // 0x0075D5D0-0x0075D5D8 
		public override Type DeclaringType { get; } // 0x0075D5D8-0x0075D610 
		public override string Name { get; } // 0x0075D644-0x0075D66C 
		public override bool IsSecurityCritical { get; } // 0x0075DAF8-0x0075DB00 
	
		// Constructors
		public MonoCMethod(); // 0x0075DB00-0x0075DB08
	
		// Methods
		public override MethodImplAttributes GetMethodImplementationFlags(); // 0x0075CA68-0x0075CAA0
		public override ParameterInfo[] GetParameters(); // 0x0075CAD4-0x0075CAE0
		internal override ParameterInfo[] GetParametersInternal(); // 0x0075CAE4-0x0075CAF0
		internal override int GetParametersCount(); // 0x0075CAF0-0x0075CB14
		internal object InternalInvoke(object obj, object[] parameters, out Exception exc); // 0x0075CB14-0x0075CB18
		[DebuggerHidden] // 0x00144E78-0x00144EA8
		[DebuggerStepThrough] // 0x00144E78-0x00144EA8
		public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x0075CB18-0x0075CCA0
		private object DoInvoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x0075CCA0-0x0075CF00
		public object InternalInvoke(object obj, object[] parameters); // 0x0075D300-0x0075D4B0
		[DebuggerHidden] // 0x00144EA8-0x00144ED8
		[DebuggerStepThrough] // 0x00144EA8-0x00144ED8
		public override object Invoke(BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x0075D4B0-0x0075D4E4
		public override bool IsDefined(Type attributeType, bool inherit); // 0x0075D670-0x0075D704
		public override object[] GetCustomAttributes(bool inherit); // 0x0075D704-0x0075D790
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x0075D790-0x0075D824
		public override string ToString(); // 0x0075D824-0x0075DAEC
		public override IList<CustomAttributeData> GetCustomAttributesData(); // 0x0075DAEC-0x0075DAF0
		private static int get_core_clr_security_level(); // 0x0075DAF0-0x0075DAF8
	}

	internal abstract class RuntimeModule : Module // TypeDefIndex: 551
	{
		// Constructors
		protected RuntimeModule(); // 0x002C3050-0x002C30D4
	}

	[Serializable]
	[ClassInterface] // 0x0013C5E8-0x0013C688
	[ComDefaultInterface] // 0x0013C5E8-0x0013C688
	[ComVisible] // 0x0013C5E8-0x0013C688
	internal class MonoModule : RuntimeModule // TypeDefIndex: 552
	{
		// Properties
		public override Assembly Assembly { get; } // 0x0075F9F8-0x0075FA00 
		public override string ScopeName { get; } // 0x0075FA00-0x0075FA08 
		public override Guid ModuleVersionId { get; } // 0x0075FA08-0x0075FA24 
	
		// Constructors
		public MonoModule(); // 0x0075FD3C-0x0075FD44
	
		// Methods
		public override bool IsResource(); // 0x0075FA24-0x0075FA2C
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x0075FA2C-0x0075FAC0
		public override bool IsDefined(Type attributeType, bool inherit); // 0x0075FAC0-0x0075FB54
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0075FB54-0x0075FC48
		internal RuntimeAssembly GetRuntimeAssembly(); // 0x0075FC48-0x0075FD3C
	}

	internal abstract class RuntimeParameterInfo : ParameterInfo // TypeDefIndex: 553
	{
		// Constructors
		protected RuntimeParameterInfo(); // 0x002C30D4-0x002C30DC
	}

	[Serializable]
	[ClassInterface] // 0x0013C688-0x0013C728
	[ComDefaultInterface] // 0x0013C688-0x0013C728
	[ComVisible] // 0x0013C688-0x0013C728
	internal class MonoParameterInfo : RuntimeParameterInfo // TypeDefIndex: 554
	{
		// Properties
		public override object DefaultValue { get; } // 0x0075FE50-0x007601E0 
	
		// Constructors
		internal MonoParameterInfo(ParameterInfo pinfo, MemberInfo member); // 0x0075FD44-0x0075FE48
	
		// Methods
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x007601E0-0x00760274
		public override bool IsDefined(Type attributeType, bool inherit); // 0x00760274-0x00760308
	}

	internal struct MonoPropertyInfo // TypeDefIndex: 555
	{
		// Fields
		public Type parent; // 0x00
		public Type declaring_type; // 0x04
		public string name; // 0x08
		public MethodInfo get_method; // 0x0C
		public MethodInfo set_method; // 0x10
		public PropertyAttributes attrs; // 0x14
	
		// Methods
		internal static void get_property_info(MonoProperty prop, ref MonoPropertyInfo info, PInfo req_info); // 0x00760348-0x0076034C
		internal static Type[] GetTypeModifiers(MonoProperty prop, bool optional); // 0x0076186C-0x00761870
		internal static object get_default_value(MonoProperty prop); // 0x00760C1C-0x00760C20
	}

	[Flags] // 0x0013C728-0x0013C738
	internal enum PInfo // TypeDefIndex: 556
	{
		Attributes = 1,
		GetMethod = 2,
		SetMethod = 4,
		ReflectedType = 8,
		DeclaringType = 16,
		Name = 32
	}

	internal abstract class RuntimePropertyInfo : PropertyInfo, ISerializable // TypeDefIndex: 557
	{
		// Properties
		internal BindingFlags BindingFlags { get; } // 0x002C30DC-0x002C30E4 
		public override Module Module { get; } // 0x002C30E4-0x002C30E8 
		private RuntimeType ReflectedTypeInternal { get; } // 0x002C3220-0x002C3328 
	
		// Constructors
		protected RuntimePropertyInfo(); // 0x002C3684-0x002C368C
	
		// Methods
		internal RuntimeType GetDeclaringTypeInternal(); // 0x002C3118-0x002C3220
		internal RuntimeModule GetRuntimeModule(); // 0x002C30E8-0x002C3118
		public override string ToString(); // 0x002C3328-0x002C3330
		private string FormatNameAndSig(bool serialization); // 0x002C3330-0x002C3554
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x002C3554-0x002C367C
		internal string SerializationToString(); // 0x002C367C-0x002C3684
	}

	[Serializable]
	internal class MonoProperty : RuntimePropertyInfo // TypeDefIndex: 558
	{
		// Fields
		internal IntPtr klass; // 0x08
		internal IntPtr prop; // 0x0C
		private MonoPropertyInfo info; // 0x10
		private PInfo cached; // 0x28
		private GetterAdapter cached_getter; // 0x2C
	
		// Properties
		public override PropertyAttributes Attributes { get; } // 0x0076034C-0x00760388 
		public override bool CanRead { get; } // 0x00760388-0x007603D0 
		public override bool CanWrite { get; } // 0x007603D0-0x00760418 
		public override Type PropertyType { get; } // 0x00760418-0x0076051C 
		public override Type ReflectedType { get; } // 0x0076051C-0x00760558 
		public override Type DeclaringType { get; } // 0x00760558-0x00760594 
		public override string Name { get; } // 0x00760594-0x007605D0 
	
		// Nested types
		private delegate object GetterAdapter(object _this); // TypeDefIndex: 559; 0x00761934-0x00762184
	
		private delegate R Getter<T, R>(T _this); // TypeDefIndex: 560; 0x00000000-0x00000000
	
		private delegate R StaticGetter<R>(); // TypeDefIndex: 561; 0x00000000-0x00000000
	
		// Constructors
		public MonoProperty(); // 0x00761918-0x00761920
	
		// Methods
		private void CachePropertyInfo(PInfo flags); // 0x00760308-0x00760348
		public override MethodInfo[] GetAccessors(bool nonPublic); // 0x007605D0-0x00760814
		public override MethodInfo GetGetMethod(bool nonPublic); // 0x00760814-0x007608B0
		public override ParameterInfo[] GetIndexParameters(); // 0x007608B0-0x00760B04
		public override MethodInfo GetSetMethod(bool nonPublic); // 0x00760B7C-0x00760C18
		public override object GetConstantValue(); // 0x00760C18-0x00760C1C
		public override object GetRawConstantValue(); // 0x00760C20-0x00760C24
		public override bool IsDefined(Type attributeType, bool inherit); // 0x00760C24-0x00760CB4
		public override object[] GetCustomAttributes(bool inherit); // 0x00760CB4-0x00760D3C
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00760D3C-0x00760DCC
		private static object GetterAdapterFrame<T, R>(Getter<T, R> getter, object obj);
		private static object StaticGetterAdapterFrame<R>(StaticGetter<R> getter, object obj);
		private static GetterAdapter CreateGetterDelegate(MethodInfo method); // 0x00760DCC-0x00761290
		public override object GetValue(object obj, object[] index); // 0x00761290-0x007612C8
		public override object GetValue(object obj, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture); // 0x007612C8-0x0076152C
		public override void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture); // 0x0076152C-0x007617C8
		public override Type[] GetOptionalCustomModifiers(); // 0x007617C8-0x0076186C
		public override Type[] GetRequiredCustomModifiers(); // 0x00761870-0x00761914
		public override IList<CustomAttributeData> GetCustomAttributesData(); // 0x00761914-0x00761918
	}

	[Serializable]
	[ClassInterface] // 0x0013C738-0x0013C7D8
	[ComDefaultInterface] // 0x0013C738-0x0013C7D8
	[ComVisible] // 0x0013C738-0x0013C7D8
	public class ParameterInfo : ICustomAttributeProvider, IObjectReference, _ParameterInfo // TypeDefIndex: 562
	{
		// Fields
		protected Type ClassImpl; // 0x08
		protected object DefaultValueImpl; // 0x0C
		protected MemberInfo MemberImpl; // 0x10
		protected string NameImpl; // 0x14
		protected int PositionImpl; // 0x18
		protected ParameterAttributes AttrsImpl; // 0x1C
		internal MarshalAsAttribute marshalAs; // 0x20
	
		// Properties
		public virtual Type ParameterType { get; } // 0x007627B8-0x007627C0 
		public virtual ParameterAttributes Attributes { get; } // 0x007627C0-0x007627C8 
		public bool IsIn { get; } // 0x007627C8-0x007627E8 
		public bool IsOptional { get; } // 0x007627E8-0x00762808 
		public bool IsOut { get; } // 0x00762808-0x00762828 
		public bool IsRetval { get; } // 0x007624C0-0x007624E0 
		public virtual string Name { get; } // 0x00762828-0x00762830 
		public virtual int Position { get; } // 0x00762830-0x00762838 
		public virtual object DefaultValue { get; } // 0x00762B88-0x00762C10 
	
		// Constructors
		protected ParameterInfo(); // 0x00762274-0x00762278
	
		// Methods
		public override string ToString(); // 0x00762278-0x007624C0
		internal static void FormatParameters(StringBuilder sb, ParameterInfo[] p, CallingConventions callingConvention, bool serialization); // 0x007624E0-0x007627B8
		internal object[] GetPseudoCustomAttributes(); // 0x00762838-0x00762B88
		internal object GetDefaultValueImpl(); // 0x0075FE48-0x0075FE50
		public virtual object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00762C10-0x00762C70
		public object GetRealObject(StreamingContext context); // 0x00762C70-0x00762CF8
		public virtual bool IsDefined(Type attributeType, bool inherit); // 0x00762CF8-0x00762E8C
		internal static ParameterInfo New(ParameterInfo pinfo, MemberInfo member); // 0x00760B04-0x00760B7C
	}

	[Serializable]
	[ClassInterface] // 0x0013C7D8-0x0013C878
	[ComDefaultInterface] // 0x0013C7D8-0x0013C878
	[ComVisible] // 0x0013C7D8-0x0013C878
	public abstract class PropertyInfo : MemberInfo, _PropertyInfo // TypeDefIndex: 563
	{
		// Properties
		public abstract PropertyAttributes Attributes { get; }
		public abstract bool CanRead { get; }
		public abstract bool CanWrite { get; }
		public override MemberTypes MemberType { get; } // 0x0076341C-0x00763424 
		public abstract Type PropertyType { get; }
	
		// Constructors
		protected PropertyInfo(); // 0x00763424-0x00763428
	
		// Methods
		public abstract MethodInfo[] GetAccessors(bool nonPublic);
		public abstract MethodInfo GetGetMethod(bool nonPublic);
		public abstract ParameterInfo[] GetIndexParameters();
		public abstract MethodInfo GetSetMethod(bool nonPublic);
		[DebuggerHidden] // 0x00144ED8-0x00144F08
		[DebuggerStepThrough] // 0x00144ED8-0x00144F08
		public virtual object GetValue(object obj, object[] index); // 0x00763428-0x00763460
		public abstract object GetValue(object obj, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture);
		public abstract void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture);
		public virtual Type[] GetOptionalCustomModifiers(); // 0x00763460-0x007634EC
		public virtual Type[] GetRequiredCustomModifiers(); // 0x007634EC-0x00763578
		private static NotImplementedException CreateNIE(); // 0x00763578-0x007635E4
		public virtual object GetConstantValue(); // 0x007635E4-0x0076364C
		public virtual object GetRawConstantValue(); // 0x0076364C-0x007636B4
		public override bool Equals(object obj); // 0x007636B4-0x007636C8
		public override int GetHashCode(); // 0x007636C8-0x007636CC
		public static bool operator ==(PropertyInfo left, PropertyInfo right); // 0x00758E54-0x00758EC4
		public static bool operator !=(PropertyInfo left, PropertyInfo right); // 0x00758DE0-0x00758E54
		private static PropertyInfo internal_from_handle_type(IntPtr event_handle, IntPtr type_handle); // 0x007636CC-0x007636D0
		internal static PropertyInfo GetPropertyFromHandle(RuntimePropertyHandle handle, RuntimeTypeHandle reflectedType); // 0x007636D0-0x00763820
	}

	[Serializable]
	[ComVisible] // 0x0013C878-0x0013C88C
	public class StrongNameKeyPair : ISerializable, IDeserializationCallback // TypeDefIndex: 564
	{
		// Fields
		private byte[] _publicKey; // 0x08
		private string _keyPairContainer; // 0x0C
		private bool _keyPairExported; // 0x10
		private byte[] _keyPairArray; // 0x14
	
		// Constructors
		protected StrongNameKeyPair(SerializationInfo info, StreamingContext context); // 0x002C368C-0x002C3954
	
		// Methods
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x002C3954-0x002C3AFC
		void IDeserializationCallback.OnDeserialization(object sender); // 0x002C3AFC-0x002C3B00
	}
}

namespace System.Reflection.Emit
{
	public class AssemblyBuilder : Assembly, _AssemblyBuilder // TypeDefIndex: 565
	{
	}

	public abstract class ConstructorBuilder : ConstructorInfo, _ConstructorBuilder // TypeDefIndex: 566
	{
		// Properties
		public override MethodAttributes Attributes { get; } // 0x007508F8-0x0075097C 
		public override Type DeclaringType { get; } // 0x0075097C-0x00750A00 
		public override string Name { get; } // 0x00750A00-0x00750A84 
		public override RuntimeMethodHandle MethodHandle { get; } // 0x00750B08-0x00750BB0 
		public override Type ReflectedType { get; } // 0x00750BB0-0x00750C58 
	
		// Methods
		public override ParameterInfo[] GetParameters(); // 0x00750A84-0x00750B08
		public override object[] GetCustomAttributes(bool inherit); // 0x00750C58-0x00750D00
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00750D00-0x00750DA8
		public override MethodImplAttributes GetMethodImplementationFlags(); // 0x00750DA8-0x00750E50
		public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x00750E50-0x00750EF8
		public override object Invoke(BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x00750EF8-0x00750FA0
		public override bool IsDefined(Type attributeType, bool inherit); // 0x00750FA0-0x00751048
	}

	public class CustomAttributeBuilder : _CustomAttributeBuilder // TypeDefIndex: 567
	{
	}

	public abstract class EnumBuilder : System.Reflection.TypeInfo, _EnumBuilder // TypeDefIndex: 568
	{
		// Properties
		public override Assembly Assembly { get; } // 0x00751780-0x00751804 
		public override string AssemblyQualifiedName { get; } // 0x00751804-0x00751888 
		public override Type BaseType { get; } // 0x00751888-0x0075190C 
		public override string FullName { get; } // 0x0075190C-0x00751990 
		public override Module Module { get; } // 0x00751990-0x00751A14 
		public override string Name { get; } // 0x00751A14-0x00751A98 
		public override string Namespace { get; } // 0x00751A98-0x00751B1C 
		public override Type UnderlyingSystemType { get; } // 0x00751BA0-0x00751C48 
	
		// Methods
		public override Type GetElementType(); // 0x00751B1C-0x00751BA0
		protected override TypeAttributes GetAttributeFlagsImpl(); // 0x00751C48-0x00751CF0
		protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x00751CF0-0x00751D98
		[ComVisible] // 0x00144F08-0x00144F1C
		public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr); // 0x00751D98-0x00751E40
		public override object[] GetCustomAttributes(bool inherit); // 0x00751E40-0x00751EE8
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00751EE8-0x00751F90
		public override EventInfo GetEvent(string name, BindingFlags bindingAttr); // 0x00751F90-0x00752038
		public override FieldInfo GetField(string name, BindingFlags bindingAttr); // 0x00752038-0x007520E0
		public override FieldInfo[] GetFields(BindingFlags bindingAttr); // 0x007520E0-0x00752188
		public override Type[] GetInterfaces(); // 0x00752188-0x00752230
		protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x00752230-0x007522D8
		public override MethodInfo[] GetMethods(BindingFlags bindingAttr); // 0x007522D8-0x00752380
		public override Type GetNestedType(string name, BindingFlags bindingAttr); // 0x00752380-0x00752428
		protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x00752428-0x007524D0
		protected override bool HasElementTypeImpl(); // 0x007524D0-0x00752578
		public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters); // 0x00752578-0x00752620
		protected override bool IsArrayImpl(); // 0x00752620-0x007526C8
		protected override bool IsByRefImpl(); // 0x007526C8-0x00752770
		protected override bool IsCOMObjectImpl(); // 0x00752770-0x00752818
		public override bool IsDefined(Type attributeType, bool inherit); // 0x00752818-0x007528C0
		protected override bool IsPointerImpl(); // 0x007528C0-0x00752968
		protected override bool IsPrimitiveImpl(); // 0x00752968-0x00752A10
	}

	public class EventBuilder : _EventBuilder // TypeDefIndex: 569
	{
	}

	public abstract class FieldBuilder : FieldInfo, _FieldBuilder // TypeDefIndex: 570
	{
		// Properties
		public override FieldAttributes Attributes { get; } // 0x00752A10-0x00752A94 
		public override Type DeclaringType { get; } // 0x00752A94-0x00752B18 
		public override Type FieldType { get; } // 0x00752B18-0x00752B9C 
		public override string Name { get; } // 0x00752B9C-0x00752C20 
		public override RuntimeFieldHandle FieldHandle { get; } // 0x00752CA4-0x00752D4C 
		public override Type ReflectedType { get; } // 0x00752D4C-0x00752DF4 
	
		// Methods
		public override object GetValue(object obj); // 0x00752C20-0x00752CA4
		public override object[] GetCustomAttributes(bool inherit); // 0x00752DF4-0x00752E9C
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00752E9C-0x00752F44
		public override bool IsDefined(Type attributeType, bool inherit); // 0x00752F44-0x00752FEC
		public override void SetValue(object obj, object val, BindingFlags invokeAttr, Binder binder, CultureInfo culture); // 0x00752FEC-0x00753090
	}

	public abstract class GenericTypeParameterBuilder : System.Reflection.TypeInfo // TypeDefIndex: 571
	{
		// Properties
		public override Assembly Assembly { get; } // 0x00753090-0x00753114 
		public override string AssemblyQualifiedName { get; } // 0x00753114-0x00753198 
		public override Type BaseType { get; } // 0x00753198-0x0075321C 
		public override string FullName { get; } // 0x0075321C-0x007532A0 
		public override Module Module { get; } // 0x007532A0-0x00753324 
		public override string Name { get; } // 0x00753324-0x007533A8 
		public override string Namespace { get; } // 0x007533A8-0x0075342C 
		public override Type UnderlyingSystemType { get; } // 0x007534B0-0x00753558 
	
		// Methods
		public override Type GetElementType(); // 0x0075342C-0x007534B0
		protected override TypeAttributes GetAttributeFlagsImpl(); // 0x00753558-0x00753600
		protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x00753600-0x007536A8
		[ComVisible] // 0x00144F1C-0x00144F30
		public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr); // 0x007536A8-0x00753750
		public override object[] GetCustomAttributes(bool inherit); // 0x00753750-0x007537F8
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x007537F8-0x007538A0
		public override EventInfo GetEvent(string name, BindingFlags bindingAttr); // 0x007538A0-0x00753948
		public override FieldInfo GetField(string name, BindingFlags bindingAttr); // 0x00753948-0x007539F0
		public override FieldInfo[] GetFields(BindingFlags bindingAttr); // 0x007539F0-0x00753A98
		public override Type[] GetInterfaces(); // 0x00753A98-0x00753B40
		protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x00753B40-0x00753BE8
		public override MethodInfo[] GetMethods(BindingFlags bindingAttr); // 0x00753BE8-0x00753C90
		public override Type GetNestedType(string name, BindingFlags bindingAttr); // 0x00753C90-0x00753D38
		protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x00753D38-0x00753DE0
		protected override bool HasElementTypeImpl(); // 0x00753DE0-0x00753E88
		public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters); // 0x00753E88-0x00753F30
		protected override bool IsArrayImpl(); // 0x00753F30-0x00753FD8
		protected override bool IsByRefImpl(); // 0x00753FD8-0x00754080
		protected override bool IsCOMObjectImpl(); // 0x00754080-0x00754128
		public override bool IsDefined(Type attributeType, bool inherit); // 0x00754128-0x007541D0
		protected override bool IsPointerImpl(); // 0x007541D0-0x00754278
		protected override bool IsPrimitiveImpl(); // 0x00754278-0x0075437C
	}

	public class ILGenerator : _ILGenerator // TypeDefIndex: 572
	{
	}

	[ClassInterface] // 0x0013C88C-0x0013C8C4
	[ComVisible] // 0x0013C88C-0x0013C8C4
	public sealed class LocalBuilder : LocalVariableInfo, _LocalBuilder // TypeDefIndex: 573
	{
		// Fields
		private string name; // 0x10
		internal ILGenerator ilgen; // 0x14
		private int startOffset; // 0x18
		private int endOffset; // 0x1C
	}

	public abstract class MethodBuilder : MethodInfo, _MethodBuilder // TypeDefIndex: 574
	{
		// Properties
		public override MethodAttributes Attributes { get; } // 0x0075437C-0x00754400 
		public override Type DeclaringType { get; } // 0x00754400-0x00754484 
		public override string Name { get; } // 0x00754484-0x00754508 
		public override RuntimeMethodHandle MethodHandle { get; } // 0x0075458C-0x00754634 
		public override Type ReflectedType { get; } // 0x00754634-0x007546DC 
	
		// Methods
		public override ParameterInfo[] GetParameters(); // 0x00754508-0x0075458C
		public override object[] GetCustomAttributes(bool inherit); // 0x007546DC-0x00754784
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00754784-0x0075482C
		public override MethodImplAttributes GetMethodImplementationFlags(); // 0x0075482C-0x007548D4
		public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x007548D4-0x0075497C
		public override bool IsDefined(Type attributeType, bool inherit); // 0x0075497C-0x00754A24
	}

	public abstract class ModuleBuilder : Module, _ModuleBuilder // TypeDefIndex: 575
	{
	}

	public class ParameterBuilder : _ParameterBuilder // TypeDefIndex: 576
	{
	}

	public abstract class PropertyBuilder : PropertyInfo, _PropertyBuilder // TypeDefIndex: 577
	{
		// Properties
		public override PropertyAttributes Attributes { get; } // 0x00754A24-0x00754AA8 
		public override bool CanRead { get; } // 0x00754AA8-0x00754B2C 
		public override bool CanWrite { get; } // 0x00754B2C-0x00754BB0 
		public override Type DeclaringType { get; } // 0x00754BB0-0x00754C34 
		public override string Name { get; } // 0x00754C34-0x00754CB8 
		public override Type PropertyType { get; } // 0x00754CB8-0x00754D3C 
		public override Type ReflectedType { get; } // 0x00754DC0-0x00754E68 
	
		// Methods
		public override ParameterInfo[] GetIndexParameters(); // 0x00754D3C-0x00754DC0
		public override MethodInfo[] GetAccessors(bool nonPublic); // 0x00754E68-0x00754F10
		public override object[] GetCustomAttributes(bool inherit); // 0x00754F10-0x00754FB8
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00754FB8-0x00755060
		public override MethodInfo GetGetMethod(bool nonPublic); // 0x00755060-0x00755108
		public override MethodInfo GetSetMethod(bool nonPublic); // 0x00755108-0x007551B0
		public override object GetValue(object obj, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture); // 0x007551B0-0x00755258
		public override bool IsDefined(Type attributeType, bool inherit); // 0x00755258-0x00755300
		public override void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture); // 0x00755300-0x007553A4
	}

	public class SignatureHelper : _SignatureHelper // TypeDefIndex: 578
	{
	}

	public abstract class TypeBuilder : System.Reflection.TypeInfo, _TypeBuilder // TypeDefIndex: 579
	{
		// Fields
		public const int UnspecifiedTypeSize = 0; // Metadata: 0x00204684
	
		// Properties
		public override Assembly Assembly { get; } // 0x007553A4-0x00755428 
		public override string AssemblyQualifiedName { get; } // 0x00755428-0x007554AC 
		public override Type BaseType { get; } // 0x007554AC-0x00755530 
		public override string FullName { get; } // 0x00755530-0x007555B4 
		public override Module Module { get; } // 0x007555B4-0x00755638 
		public override string Name { get; } // 0x00755638-0x007556BC 
		public override string Namespace { get; } // 0x007556BC-0x00755740 
		public override Type UnderlyingSystemType { get; } // 0x007557C4-0x0075586C 
	
		// Methods
		public override Type GetElementType(); // 0x00755740-0x007557C4
		protected override TypeAttributes GetAttributeFlagsImpl(); // 0x0075586C-0x00755914
		protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x00755914-0x007559BC
		[ComVisible] // 0x00144F30-0x00144F44
		public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr); // 0x007559BC-0x00755A64
		public override object[] GetCustomAttributes(bool inherit); // 0x00755A64-0x00755B0C
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00755B0C-0x00755BB4
		public override EventInfo GetEvent(string name, BindingFlags bindingAttr); // 0x00755BB4-0x00755C5C
		public override FieldInfo GetField(string name, BindingFlags bindingAttr); // 0x00755C5C-0x00755D04
		public override FieldInfo[] GetFields(BindingFlags bindingAttr); // 0x00755D04-0x00755DAC
		public override Type[] GetInterfaces(); // 0x00755DAC-0x00755E54
		protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x00755E54-0x00755EFC
		public override MethodInfo[] GetMethods(BindingFlags bindingAttr); // 0x00755EFC-0x00755FA4
		public override Type GetNestedType(string name, BindingFlags bindingAttr); // 0x00755FA4-0x0075604C
		protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x0075604C-0x007560F4
		protected override bool HasElementTypeImpl(); // 0x007560F4-0x0075619C
		public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters); // 0x0075619C-0x00756244
		protected override bool IsArrayImpl(); // 0x00756244-0x007562EC
		protected override bool IsByRefImpl(); // 0x007562EC-0x00756394
		protected override bool IsCOMObjectImpl(); // 0x00756394-0x0075643C
		public override bool IsDefined(Type attributeType, bool inherit); // 0x0075643C-0x007564E4
		protected override bool IsPointerImpl(); // 0x007564E4-0x0075658C
		protected override bool IsPrimitiveImpl(); // 0x0075658C-0x00756634
	}

	internal abstract class TypeBuilderInstantiation : System.Reflection.TypeInfo // TypeDefIndex: 580
	{
		// Methods
		internal static Type MakeGenericType(Type type, Type[] typeArguments); // 0x00756634-0x007566D0
	}
}

namespace System.IO
{
	internal static class __Error // TypeDefIndex: 581
	{
		// Methods
		internal static void EndOfFile(); // 0x002ACDD4-0x002ACE7C
		internal static void FileNotOpen(); // 0x002ACE7C-0x002ACF28
		internal static void StreamIsClosed(); // 0x002AB200-0x002AB2AC
		internal static void MemoryStreamNotExpandable(); // 0x002ACF28-0x002ACFCC
		internal static void ReaderClosed(); // 0x002A3CE8-0x002A3D94
		internal static void ReadNotSupported(); // 0x0029FFBC-0x002A0060
		internal static void WrongAsyncResult(); // 0x002A2DE4-0x002A2E8C
		internal static void EndReadCalledTwice(); // 0x002A2E8C-0x002A2F34
		internal static void EndWriteCalledTwice(); // 0x002A2F34-0x002A2FDC
		internal static string GetDisplayablePath(string path, bool isInvalidPath); // 0x002ACFCC-0x002AD160
		internal static void WinIOError(int errorCode, string maybeFullPath); // 0x002AD160-0x002ADA48
		internal static void WriteNotSupported(); // 0x002A0F40-0x002A0FE4
		internal static void WriterClosed(); // 0x002A6484-0x002A6530
	}

	[ComVisible] // 0x0013C8C4-0x0013C8D8
	public class BinaryReader : IDisposable // TypeDefIndex: 582
	{
		// Fields
		private Stream m_stream; // 0x08
		private byte[] m_buffer; // 0x0C
		private Decoder m_decoder; // 0x10
		private byte[] m_charBytes; // 0x14
		private char[] m_singleChar; // 0x18
		private char[] m_charBuffer; // 0x1C
		private int m_maxCharsSize; // 0x20
		private bool m_2BytesPerChar; // 0x24
		private bool m_isMemoryStream; // 0x25
		private bool m_leaveOpen; // 0x26
	
		// Properties
		public virtual Stream BaseStream { get; } // 0x004250EC-0x004250F4 
	
		// Constructors
		public BinaryReader(Stream input); // 0x00424D84-0x00424E10
		public BinaryReader(Stream input, Encoding encoding); // 0x004250D0-0x004250EC
		public BinaryReader(Stream input, Encoding encoding, bool leaveOpen); // 0x00424E10-0x004250D0
	
		// Methods
		public virtual void Close(); // 0x004250F4-0x00425108
		protected virtual void Dispose(bool disposing); // 0x00425108-0x00425168
		public void Dispose(); // 0x00425168-0x0042517C
		public virtual int Read(); // 0x0042517C-0x004251A8
		public virtual bool ReadBoolean(); // 0x00425588-0x004255EC
		public virtual byte ReadByte(); // 0x004255EC-0x00425650
		[CLSCompliant] // 0x00144F44-0x00144F58
		public virtual sbyte ReadSByte(); // 0x00425650-0x004256AC
		public virtual char ReadChar(); // 0x004256AC-0x004256E0
		public virtual short ReadInt16(); // 0x004256E0-0x00425778
		[CLSCompliant] // 0x00144F58-0x00144F6C
		public virtual ushort ReadUInt16(); // 0x00425778-0x0042580C
		public virtual int ReadInt32(); // 0x0042580C-0x00425A14
		[CLSCompliant] // 0x00144F6C-0x00144F80
		public virtual uint ReadUInt32(); // 0x00425B5C-0x00425C60
		public virtual long ReadInt64(); // 0x00425C60-0x00425E5C
		[CLSCompliant] // 0x00144F80-0x00144F94
		public virtual ulong ReadUInt64(); // 0x00425E5C-0x00426058
		public virtual float ReadSingle(); // 0x00426058-0x00426090
		public virtual double ReadDouble(); // 0x00426090-0x004260C8
		public virtual decimal ReadDecimal(); // 0x004260C8-0x00426280
		public virtual string ReadString(); // 0x004262AC-0x004265D0
		private int InternalReadChars(char[] buffer, int index, int count); // 0x004266EC-0x00426AF4
		private int InternalReadOneChar(); // 0x004251A8-0x00425588
		public virtual char[] ReadChars(int count); // 0x00426B70-0x00426D2C
		public virtual int Read(byte[] buffer, int index, int count); // 0x00426D2C-0x00426F90
		public virtual byte[] ReadBytes(int count); // 0x00426F90-0x0042719C
		protected virtual void FillBuffer(int numBytes); // 0x0042719C-0x00427378
		protected internal int Read7BitEncodedInt(); // 0x004265D0-0x004266C0
	}

	[Serializable]
	[ComVisible] // 0x0013C8D8-0x0013C8EC
	public class BinaryWriter : IDisposable // TypeDefIndex: 583
	{
		// Fields
		public static readonly BinaryWriter Null; // 0x00
		protected Stream OutStream; // 0x08
		private byte[] _buffer; // 0x0C
		private Encoding _encoding; // 0x10
		private Encoder _encoder; // 0x14
		[OptionalField] // 0x00142768-0x00142778
		private bool _leaveOpen; // 0x18
		private byte[] _largeByteBuffer; // 0x1C
		private int _maxChars; // 0x20
	
		// Constructors
		protected BinaryWriter(); // 0x00427378-0x00427488
		public BinaryWriter(Stream output, Encoding encoding); // 0x00427488-0x004274A4
		public BinaryWriter(Stream output, Encoding encoding, bool leaveOpen); // 0x004274A4-0x00427668
		static BinaryWriter(); // 0x00428950-0x004289C0
	
		// Methods
		protected virtual void Dispose(bool disposing); // 0x00427668-0x004276BC
		public void Dispose(); // 0x004276BC-0x004276D0
		public virtual void Flush(); // 0x004276D0-0x00427704
		public virtual void Write(bool value); // 0x00427704-0x00427790
		public virtual void Write(byte value); // 0x00427790-0x004277CC
		public virtual void Write(byte[] buffer); // 0x004277CC-0x004278BC
		public virtual void Write(byte[] buffer, int index, int count); // 0x004278BC-0x00427914
		public virtual void Write(char ch); // 0x00427914-0x00427AC8
		public virtual void Write(char[] chars); // 0x00427AC8-0x00427C04
		public virtual void Write(double value); // 0x00427C04-0x00427C64
		public virtual void Write(short value); // 0x00427C64-0x00427D28
		[CLSCompliant] // 0x00144F94-0x00144FA8
		public virtual void Write(ushort value); // 0x00427D28-0x00427DEC
		public virtual void Write(int value); // 0x00427DEC-0x00427F20
		[CLSCompliant] // 0x00144FA8-0x00144FBC
		public virtual void Write(uint value); // 0x00427F20-0x00428054
		public virtual void Write(long value); // 0x00428054-0x00428274
		[CLSCompliant] // 0x00144FBC-0x00144FD0
		public virtual void Write(ulong value); // 0x00428274-0x00428494
		public virtual void Write(float value); // 0x00428494-0x004284F0
		public virtual void Write(string value); // 0x004284F0-0x004288E4
		protected void Write7BitEncodedInt(int value); // 0x004288E4-0x00428950
	}

	[ComVisible] // 0x0013C8EC-0x0013C900
	public static class Directory // TypeDefIndex: 584
	{
		// Nested types
		internal sealed class SearchData // TypeDefIndex: 585
		{
			// Fields
			public readonly string fullPath; // 0x08
			public readonly string userPath; // 0x0C
			public readonly SearchOption searchOption; // 0x10
	
			// Constructors
			public SearchData(string fullPath, string userPath, SearchOption searchOption); // 0x0042C52C-0x0042C55C
		}
	
		// Methods
		public static string[] GetFiles(string path); // 0x00429DBC-0x00429EA4
		private static string[] InternalGetFiles(string path, string searchPattern, SearchOption searchOption); // 0x00429EA4-0x00429ED8
		public static string[] GetDirectories(string path); // 0x00429FC4-0x0042A0A8
		public static string[] GetDirectories(string path, string searchPattern); // 0x0042A0DC-0x0042A204
		private static string[] InternalGetDirectories(string path, string searchPattern, SearchOption searchOption); // 0x0042A0A8-0x0042A0DC
		internal static string[] InternalGetFileDirectoryNames(string path, string userPathOriginal, string searchPattern, bool includeFiles, bool includeDirs, SearchOption searchOption, bool checkHost); // 0x00429ED8-0x00429FC4
		public static DirectoryInfo CreateDirectory(string path); // 0x0042A2E8-0x0042A600
		private static DirectoryInfo CreateDirectoriesInternal(string path); // 0x0042A734-0x0042A924
		public static void Delete(string path); // 0x0042B294-0x0042B54C
		private static void RecursiveDelete(string path); // 0x0042B7E8-0x0042B984
		public static void Delete(string path, bool recursive); // 0x0042BC70-0x0042BD14
		public static bool Exists(string path); // 0x0042BD14-0x0042BE8C
		public static string GetCurrentDirectory(); // 0x0042BFC0-0x0042BFD8
		internal static string InsecureGetCurrentDirectory(); // 0x0042BFD8-0x0042C0C0
		internal static string GetDemandDir(string fullPath, bool thisDirOnly); // 0x0042C1F8-0x0042C4A0
	}

	[Serializable]
	[ComVisible] // 0x0013C900-0x0013C914
	public class DirectoryNotFoundException : IOException // TypeDefIndex: 586
	{
		// Constructors
		public DirectoryNotFoundException(); // 0x0042D130-0x0042D1CC
		public DirectoryNotFoundException(string message); // 0x0042B7A8-0x0042B7E8
		protected DirectoryNotFoundException(SerializationInfo info, StreamingContext context); // 0x0042D1CC-0x0042D1EC
	}

	[Serializable]
	[ComVisible] // 0x0013C914-0x0013C928
	public class DriveNotFoundException : IOException // TypeDefIndex: 587
	{
		// Constructors
		public DriveNotFoundException(); // 0x0042D20C-0x0042D2A8
		public DriveNotFoundException(string message); // 0x0042D2A8-0x0042D2E8
		protected DriveNotFoundException(SerializationInfo info, StreamingContext context); // 0x0042D2E8-0x0042D308
	}

	[Serializable]
	[ComVisible] // 0x0013C928-0x0013C93C
	public class EndOfStreamException : IOException // TypeDefIndex: 588
	{
		// Constructors
		public EndOfStreamException(); // 0x0042D308-0x0042D3A4
		public EndOfStreamException(string message); // 0x0042D3A4-0x0042D3E4
		protected EndOfStreamException(SerializationInfo info, StreamingContext context); // 0x0042D3E4-0x0042D404
	}

	[Serializable]
	[ComVisible] // 0x0013C93C-0x0013C950
	public class FileLoadException : IOException // TypeDefIndex: 589
	{
		// Fields
		private string _fileName; // 0x48
		private string _fusionLog; // 0x4C
	
		// Properties
		public override string Message { get; } // 0x0042DFF4-0x0042E00C 
		public string FusionLog { get; } // 0x0042E450-0x0042E458 
	
		// Constructors
		public FileLoadException(); // 0x0042DF18-0x0042DFB4
		public FileLoadException(string message); // 0x0042DFB4-0x0042DFF4
		protected FileLoadException(SerializationInfo info, StreamingContext context); // 0x0042E458-0x0042E5DC
	
		// Methods
		private void SetMessageField(); // 0x0042E00C-0x0042E044
		public override string ToString(); // 0x0042E0E0-0x0042E450
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0042E5DC-0x0042E7F8
		internal static string FormatFileLoadExceptionMessage(string fileName, int hResult); // 0x0042E044-0x0042E0E0
	}

	[Serializable]
	[ComVisible] // 0x0013C950-0x0013C964
	public class FileNotFoundException : IOException // TypeDefIndex: 590
	{
		// Fields
		private string _fileName; // 0x48
		private string _fusionLog; // 0x4C
	
		// Properties
		public override string Message { get; } // 0x0042E91C-0x0042E934 
		public string FusionLog { get; } // 0x0042ED68-0x0042ED70 
	
		// Constructors
		public FileNotFoundException(); // 0x0042E7F8-0x0042E894
		public FileNotFoundException(string message); // 0x0042E894-0x0042E8D4
		public FileNotFoundException(string message, string fileName); // 0x0042E8D4-0x0042E91C
		protected FileNotFoundException(SerializationInfo info, StreamingContext context); // 0x0042ED70-0x0042EEF4
	
		// Methods
		private void SetMessageField(); // 0x0042E934-0x0042E9F8
		public override string ToString(); // 0x0042E9F8-0x0042ED68
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0042EEF4-0x0042F110
	}

	internal static class FileSystemEnumerableFactory // TypeDefIndex: 591
	{
		// Methods
		internal static IEnumerable<string> CreateFileNameIterator(string path, string originalUserPath, string searchPattern, bool includeFiles, bool includeDirs, SearchOption searchOption, bool checkHost); // 0x0042A204-0x0042A2E8
	}

	internal abstract class Iterator<TSource> : IEnumerable<TSource>, IEnumerator<TSource> // TypeDefIndex: 592
	{
		// Fields
		private int threadId;
		internal int state;
		internal TSource current;
	
		// Properties
		public TSource Current { get; }
		object IEnumerator.Current { get; }
	
		// Constructors
		public Iterator();
	
		// Methods
		protected abstract Iterator<TSource> Clone();
		public void Dispose();
		protected virtual void Dispose(bool disposing);
		public IEnumerator<TSource> GetEnumerator();
		public abstract bool MoveNext();
		IEnumerator IEnumerable.GetEnumerator();
		void IEnumerator.Reset();
	}

	internal class FileSystemEnumerableIterator<TSource> : Iterator<TSource> // TypeDefIndex: 593
	{
		// Fields
		private SearchResultHandler<TSource> _resultHandler;
		private List<Directory.SearchData> searchStack;
		private Directory.SearchData searchData;
		private string searchCriteria;
		private SafeFindHandle _hnd;
		private bool needsParentPathDiscoveryDemand;
		private bool empty;
		private string userPath;
		private SearchOption searchOption;
		private string fullPath;
		private string normalizedSearchPath;
		private bool _checkHost;
	
		// Constructors
		internal FileSystemEnumerableIterator(string path, string originalUserPath, string searchPattern, SearchOption searchOption, SearchResultHandler<TSource> resultHandler, bool checkHost);
		private FileSystemEnumerableIterator(string fullPath, string normalizedSearchPath, string searchCriteria, string userPath, SearchOption searchOption, SearchResultHandler<TSource> resultHandler, bool checkHost);
	
		// Methods
		private void CommonInit();
		protected override Iterator<TSource> Clone();
		protected override void Dispose(bool disposing);
		public override bool MoveNext();
		private SearchResult CreateSearchResult(Directory.SearchData localSearchData, Win32Native.WIN32_FIND_DATA findData);
		private void HandleError(int hr, string path);
		private void AddSearchableDirsToStack(Directory.SearchData localSearchData);
		internal void DoDemand(string fullPathToDemand);
		private static string NormalizeSearchPattern(string searchPattern);
		private static string GetNormalizedSearchCriteria(string fullSearchString, string fullPathMod);
		private static string GetFullSearchString(string fullPath, string searchPattern);
	}

	internal abstract class SearchResultHandler<TSource> // TypeDefIndex: 594
	{
		// Constructors
		protected SearchResultHandler();
	
		// Methods
		internal abstract bool IsResultIncluded(SearchResult result);
		internal abstract TSource CreateObject(SearchResult result);
	}

	internal class StringResultHandler : SearchResultHandler<string> // TypeDefIndex: 595
	{
		// Fields
		private bool _includeFiles; // 0x08
		private bool _includeDirs; // 0x09
	
		// Constructors
		internal StringResultHandler(bool includeFiles, bool includeDirs); // 0x002A7120-0x002A7194
	
		// Methods
		internal override bool IsResultIncluded(SearchResult result); // 0x002A7194-0x002A720C
		internal override string CreateObject(SearchResult result); // 0x002A720C-0x002A7230
	}

	internal sealed class SearchResult // TypeDefIndex: 596
	{
		// Fields
		private string fullPath; // 0x08
		private string userPath; // 0x0C
		private Win32Native.WIN32_FIND_DATA findData; // 0x10
	
		// Properties
		internal string UserPath { get; } // 0x0029FB04-0x0029FB0C 
		internal Win32Native.WIN32_FIND_DATA FindData { get; } // 0x0029FB0C-0x0029FB14 
	
		// Constructors
		internal SearchResult(string fullPath, string userPath, Win32Native.WIN32_FIND_DATA findData); // 0x0029FAD4-0x0029FB04
	}

	internal static class FileSystemEnumerableHelpers // TypeDefIndex: 597
	{
		// Methods
		internal static bool IsDir(Win32Native.WIN32_FIND_DATA data); // 0x00435B7C-0x00435C5C
		internal static bool IsFile(Win32Native.WIN32_FIND_DATA data); // 0x00435C5C-0x00435C8C
	}

	[Serializable]
	[ComVisible] // 0x0013C964-0x0013C978
	public abstract class FileSystemInfo : MarshalByRefObject, ISerializable // TypeDefIndex: 598
	{
		// Fields
		internal MonoIOStat _data; // 0x10
		internal int _dataInitialised; // 0x38
		protected string FullPath; // 0x3C
		protected string OriginalPath; // 0x40
		private string _displayPath; // 0x44
	
		// Properties
		public virtual string FullName { get; } // 0x00435D0C-0x00435D14 
		public abstract string Name { get; }
		public abstract bool Exists { get; }
	
		// Constructors
		protected FileSystemInfo(); // 0x0042C564-0x0042C5D8
		protected FileSystemInfo(SerializationInfo info, StreamingContext context); // 0x0042CD1C-0x0042CE74
	
		// Methods
		public void Refresh(); // 0x0042CEC0-0x0042CEF0
		[ComVisible] // 0x00144FD0-0x00144FE4
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00435D14-0x00435E4C
	}

	[Serializable]
	[ComVisible] // 0x0013C978-0x0013C98C
	public class IOException : SystemException // TypeDefIndex: 599
	{
		// Fields
		[NonSerialized]
		private string _maybeFullPath; // 0x44
	
		// Constructors
		public IOException(); // 0x00434798-0x00434820
		public IOException(string message); // 0x004266C0-0x004266EC
		public IOException(string message, int hresult); // 0x00435E4C-0x00435E78
		internal IOException(string message, int hresult, string maybeFullPath); // 0x00435E78-0x00435EAC
		public IOException(string message, Exception innerException); // 0x00426280-0x004262AC
		protected IOException(SerializationInfo info, StreamingContext context); // 0x0042D1EC-0x0042D20C
	}

	[Serializable]
	[ComVisible] // 0x0013C98C-0x0013C9A0
	public class MemoryStream : Stream // TypeDefIndex: 600
	{
		// Fields
		private byte[] _buffer; // 0x14
		private int _origin; // 0x18
		private int _position; // 0x1C
		private int _length; // 0x20
		private int _capacity; // 0x24
		private bool _expandable; // 0x28
		private bool _writable; // 0x29
		private bool _exposable; // 0x2A
		private bool _isOpen; // 0x2B
		[NonSerialized]
		private Task<int> _lastReadTask; // 0x2C
	
		// Properties
		public override bool CanRead { get; } // 0x004363C8-0x004363D0 
		public override bool CanSeek { get; } // 0x004363D0-0x004363D8 
		public override bool CanWrite { get; } // 0x004363D8-0x004363E0 
		public virtual int Capacity { get; set; } // 0x004365F4-0x00436624 0x00436624-0x004367CC
		public override long Length { get; } // 0x004367CC-0x00436800 
		public override long Position { get; set; } // 0x00436800-0x00436834 0x00436834-0x00436994
	
		// Constructors
		public MemoryStream(); // 0x00435EAC-0x00435EB4
		public MemoryStream(int capacity); // 0x00435EB4-0x00435FF0
		public MemoryStream(byte[] buffer); // 0x00435FF0-0x00435FF8
		public MemoryStream(byte[] buffer, bool writable); // 0x00435FF8-0x00436124
		public MemoryStream(byte[] buffer, int index, int count); // 0x00436124-0x0043614C
		public MemoryStream(byte[] buffer, int index, int count, bool writable, bool publiclyVisible); // 0x0043614C-0x004363C8
	
		// Methods
		private void EnsureWriteable(); // 0x004363E0-0x0043640C
		protected override void Dispose(bool disposing); // 0x0043640C-0x00436428
		private bool EnsureCapacity(int value); // 0x00436428-0x00436534
		public override void Flush(); // 0x00436534-0x00436538
		public virtual byte[] GetBuffer(); // 0x00436538-0x004365F4
		internal byte[] InternalGetBuffer(); // 0x00426B68-0x00426B70
		internal int InternalGetPosition(); // 0x00426AF4-0x00426B1C
		internal int InternalReadInt32(); // 0x00425A14-0x00425B5C
		internal int InternalEmulateRead(int count); // 0x00426B1C-0x00426B68
		public override int Read([In, Out] byte[] buffer, int offset, int count); // 0x00436994-0x00436CE4
		[ComVisible] // 0x00144FE4-0x00144FF8
		public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken); // 0x00436CE4-0x00437150
		public override int ReadByte(); // 0x00437150-0x004371C8
		public override long Seek(long offset, SeekOrigin loc); // 0x004371C8-0x00437480
		public virtual byte[] ToArray(); // 0x00437480-0x0043756C
		public override void Write(byte[] buffer, int offset, int count); // 0x0043756C-0x00437970
		[ComVisible] // 0x00144FF8-0x0014500C
		public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken); // 0x00437970-0x00437D6C
		public override void WriteByte(byte value); // 0x00437D6C-0x00437E64
	}

	[Serializable]
	[ComVisible] // 0x0013C9A0-0x0013C9B4
	public class PathTooLongException : IOException // TypeDefIndex: 601
	{
		// Constructors
		public PathTooLongException(); // 0x0029F484-0x0029F50C
		public PathTooLongException(string message); // 0x0029F50C-0x0029F538
		protected PathTooLongException(SerializationInfo info, StreamingContext context); // 0x0029F538-0x0029F558
	}

	internal sealed class PinnedBufferMemoryStream : UnmanagedMemoryStream // TypeDefIndex: 602
	{
		// Fields
		private byte[] _array; // 0x4C
		private GCHandle _pinningHandle; // 0x50
	
		// Constructors
		internal PinnedBufferMemoryStream(byte[] array); // 0x0029F558-0x0029F65C
	
		// Methods
		~PinnedBufferMemoryStream(); // 0x0029FA10-0x0029FA88
		protected override void Dispose(bool disposing); // 0x0029FA88-0x0029FAC4
	}

	[Serializable]
	[ComVisible] // 0x0013C9B4-0x0013C9C8
	public abstract class Stream : MarshalByRefObject, IDisposable // TypeDefIndex: 603
	{
		// Fields
		public static readonly Stream Null; // 0x00
		[NonSerialized]
		private ReadWriteTask _activeReadWriteTask; // 0x0C
		[NonSerialized]
		private SemaphoreSlim _asyncActiveSemaphore; // 0x10
	
		// Properties
		public abstract bool CanRead { get; }
		public abstract bool CanSeek { get; }
		public abstract bool CanWrite { get; }
		public abstract long Length { get; }
		public abstract long Position { get; set; }
	
		// Nested types
		private struct ReadWriteParameters // TypeDefIndex: 604
		{
			// Fields
			internal byte[] Buffer; // 0x00
			internal int Offset; // 0x04
			internal int Count; // 0x08
		}
	
		private sealed class ReadWriteTask : Task<int>, ITaskCompletionAction // TypeDefIndex: 605
		{
			// Fields
			internal readonly bool _isRead; // 0x2C
			internal Stream _stream; // 0x30
			internal byte[] _buffer; // 0x34
			internal int _offset; // 0x38
			internal int _count; // 0x3C
			private AsyncCallback _callback; // 0x40
			private ExecutionContext _context; // 0x44
			private static ContextCallback s_invokeAsyncCallback; // 0x00
	
			// Constructors
			public ReadWriteTask(bool isRead, Func<object, int> function, object state, Stream stream, byte[] buffer, int offset, int count, AsyncCallback callback); // 0x002A0200-0x002A0388
	
			// Methods
			internal void ClearBeginState(); // 0x002A1EE4-0x002A1EF4
			private static void InvokeAsyncCallback(object completedTask); // 0x002A2948-0x002A2A5C
			void ITaskCompletionAction.Invoke(Task completingTask); // 0x002A2A5C-0x002A2C78
		}
	
		[Serializable]
		private sealed class NullStream : Stream // TypeDefIndex: 606
		{
			// Fields
			private static Task<int> s_nullReadTask; // 0x00
	
			// Properties
			public override bool CanRead { get; } // 0x002A22CC-0x002A22D4 
			public override bool CanWrite { get; } // 0x002A22D4-0x002A22DC 
			public override bool CanSeek { get; } // 0x002A22DC-0x002A22E4 
			public override long Length { get; } // 0x002A22E4-0x002A22F0 
			public override long Position { get; set; } // 0x002A22F0-0x002A22FC 0x002A22FC-0x002A2300
	
			// Constructors
			internal NullStream(); // 0x002A1C50-0x002A1CD4
	
			// Methods
			protected override void Dispose(bool disposing); // 0x002A2300-0x002A2304
			public override void Flush(); // 0x002A2304-0x002A2308
			public override IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback callback, object state); // 0x002A2308-0x002A2374
			public override int EndRead(IAsyncResult asyncResult); // 0x002A2374-0x002A2454
			public override IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback callback, object state); // 0x002A2454-0x002A24C0
			public override void EndWrite(IAsyncResult asyncResult); // 0x002A24C0-0x002A25A0
			public override int Read([In, Out] byte[] buffer, int offset, int count); // 0x002A25A0-0x002A25A8
			[ComVisible] // 0x00145048-0x0014505C
			public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken); // 0x002A25A8-0x002A26B0
			public override int ReadByte(); // 0x002A26B0-0x002A26B8
			public override void Write(byte[] buffer, int offset, int count); // 0x002A26B8-0x002A26BC
			[ComVisible] // 0x0014505C-0x00145070
			public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken); // 0x002A26BC-0x002A279C
			public override void WriteByte(byte value); // 0x002A279C-0x002A27A0
			public override long Seek(long offset, SeekOrigin origin); // 0x002A27A0-0x002A2948
		}
	
		internal sealed class SynchronousAsyncResult : IAsyncResult // TypeDefIndex: 607
		{
			// Fields
			private readonly object _stateObject; // 0x08
			private readonly bool _isWrite; // 0x0C
			private ManualResetEvent _waitHandle; // 0x10
			private ExceptionDispatchInfo _exceptionInfo; // 0x14
			private bool _endXxxCalled; // 0x18
			private int _bytesRead; // 0x1C
	
			// Properties
			public WaitHandle AsyncWaitHandle { get; } // 0x002A2C78-0x002A2DC0 
			public object AsyncState { get; } // 0x002A2DC0-0x002A2DC8 
			public bool CompletedSynchronously { get; } // 0x002A2DC8-0x002A2DD0 
	
			// Nested types
			[Serializable]
			[CompilerGenerated] // 0x0013C9C8-0x0013C9D8
			private sealed class <>c // TypeDefIndex: 608
			{
				// Fields
				public static readonly <>c <>9; // 0x00
				public static Func<ManualResetEvent> <>9__12_0; // 0x04
	
				// Constructors
				static <>c(); // 0x002A2FDC-0x002A3050
				public <>c(); // 0x002A3050-0x002A3058
	
				// Methods
				internal ManualResetEvent <get_AsyncWaitHandle>b__12_0(); // 0x002A3058-0x002A30C8
			}
	
			// Constructors
			internal SynchronousAsyncResult(int bytesRead, object asyncStateObject); // 0x002A19D0-0x002A19F8
			internal SynchronousAsyncResult(object asyncStateObject); // 0x002A1AE8-0x002A1B10
			internal SynchronousAsyncResult(Exception ex, object asyncStateObject, bool isWrite); // 0x002A19F8-0x002A1A34
	
			// Methods
			internal void ThrowIfError(); // 0x002A2DD0-0x002A2DE4
			internal static int EndRead(IAsyncResult asyncResult); // 0x002A1A34-0x002A1AE8
			internal static void EndWrite(IAsyncResult asyncResult); // 0x002A1B10-0x002A1BC4
		}
	
		[Serializable]
		[CompilerGenerated] // 0x0013C9D8-0x0013C9E8
		private sealed class <>c // TypeDefIndex: 609
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static Func<SemaphoreSlim> <>9__4_0; // 0x04
			public static Func<object, int> <>9__39_0; // 0x08
			public static Func<Stream, ReadWriteParameters, AsyncCallback, object, IAsyncResult> <>9__43_0; // 0x0C
			public static Func<Stream, IAsyncResult, int> <>9__43_1; // 0x10
			public static Func<object, int> <>9__46_0; // 0x14
			public static Action<Task, object> <>9__47_0; // 0x18
			public static Func<Stream, ReadWriteParameters, AsyncCallback, object, IAsyncResult> <>9__53_0; // 0x1C
			public static Func<Stream, IAsyncResult, VoidTaskResult> <>9__53_1; // 0x20
	
			// Constructors
			static <>c(); // 0x002A1CD4-0x002A1D48
			public <>c(); // 0x002A1D48-0x002A1D50
	
			// Methods
			internal SemaphoreSlim <EnsureAsyncActiveSemaphoreInitialized>b__4_0(); // 0x002A1D50-0x002A1DC4
			internal int <BeginReadInternal>b__39_0(object <p0>); // 0x002A1DC4-0x002A1EE4
			internal IAsyncResult <BeginEndReadAsync>b__43_0(Stream stream, ReadWriteParameters args, AsyncCallback callback, object state); // 0x002A1EF4-0x002A1F5C
			internal int <BeginEndReadAsync>b__43_1(Stream stream, IAsyncResult asyncResult); // 0x002A1F5C-0x002A1F98
			internal int <BeginWriteInternal>b__46_0(object <p0>); // 0x002A1F98-0x002A20BC
			internal void <RunReadWriteTaskWhenReady>b__47_0(Task t, object state); // 0x002A20BC-0x002A2224
			internal IAsyncResult <BeginEndWriteAsync>b__53_0(Stream stream, ReadWriteParameters args, AsyncCallback callback, object state); // 0x002A2224-0x002A228C
			internal VoidTaskResult <BeginEndWriteAsync>b__53_1(Stream stream, IAsyncResult asyncResult); // 0x002A228C-0x002A22CC
		}
	
		// Constructors
		protected Stream(); // 0x002A1BC4-0x002A1BCC
		static Stream(); // 0x002A1BD4-0x002A1C50
	
		// Methods
		internal SemaphoreSlim EnsureAsyncActiveSemaphoreInitialized(); // 0x0029FB14-0x0029FC5C
		public virtual void Close(); // 0x0029FC5C-0x0029FCF8
		public void Dispose(); // 0x0029FCF8-0x0029FD08
		protected virtual void Dispose(bool disposing); // 0x0029FD08-0x0029FD0C
		public abstract void Flush();
		public virtual IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback callback, object state); // 0x0029FD0C-0x0029FD38
		internal IAsyncResult BeginReadInternal(byte[] buffer, int offset, int count, AsyncCallback callback, object state, bool serializeAsynchronously); // 0x0029FD38-0x0029FFBC
		public virtual int EndRead(IAsyncResult asyncResult); // 0x002A0644-0x002A0950
		[ComVisible] // 0x0014500C-0x00145020
		public virtual Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken); // 0x002A0980-0x002A0A5C
		private Task<int> BeginEndReadAsync(byte[] buffer, int offset, int count); // 0x002A0A5C-0x002A0C90
		public virtual IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback callback, object state); // 0x002A0C90-0x002A0CBC
		internal IAsyncResult BeginWriteInternal(byte[] buffer, int offset, int count, AsyncCallback callback, object state, bool serializeAsynchronously); // 0x002A0CBC-0x002A0F40
		private void RunReadWriteTaskWhenReady(Task asyncWaiter, ReadWriteTask readWriteTask); // 0x002A0388-0x002A0580
		private void RunReadWriteTask(ReadWriteTask readWriteTask); // 0x002A0580-0x002A0644
		public virtual void EndWrite(IAsyncResult asyncResult); // 0x002A1178-0x002A1474
		[ComVisible] // 0x00145020-0x00145034
		public Task WriteAsync(byte[] buffer, int offset, int count); // 0x002A1478-0x002A1530
		[ComVisible] // 0x00145034-0x00145048
		public virtual Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken); // 0x002A1530-0x002A1600
		private Task BeginEndWriteAsync(byte[] buffer, int offset, int count); // 0x002A1600-0x002A1834
		public abstract long Seek(long offset, SeekOrigin origin);
		public abstract int Read([In, Out] byte[] buffer, int offset, int count);
		public virtual int ReadByte(); // 0x002A1834-0x002A1908
		public abstract void Write(byte[] buffer, int offset, int count);
		public virtual void WriteByte(byte value); // 0x002A1908-0x002A19D0
		internal IAsyncResult BlockingBeginRead(byte[] buffer, int offset, int count, AsyncCallback callback, object state); // 0x002A0060-0x002A0200
		internal static int BlockingEndRead(IAsyncResult asyncResult); // 0x002A0950-0x002A0954
		internal IAsyncResult BlockingBeginWrite(byte[] buffer, int offset, int count, AsyncCallback callback, object state); // 0x002A0FE4-0x002A1178
		internal static void BlockingEndWrite(IAsyncResult asyncResult); // 0x002A1474-0x002A1478
	}

	[Serializable]
	[ComVisible] // 0x0013C9E8-0x0013C9FC
	public class StreamReader : TextReader // TypeDefIndex: 610
	{
		// Fields
		public static readonly StreamReader Null; // 0x00
		private Stream stream; // 0x0C
		private Encoding encoding; // 0x10
		private Decoder decoder; // 0x14
		private byte[] byteBuffer; // 0x18
		private char[] charBuffer; // 0x1C
		private byte[] _preamble; // 0x20
		private int charPos; // 0x24
		private int charLen; // 0x28
		private int byteLen; // 0x2C
		private int bytePos; // 0x30
		private int _maxCharsPerBuffer; // 0x34
		private bool _detectEncoding; // 0x38
		private bool _checkPreamble; // 0x39
		private bool _isBlocked; // 0x3A
		private bool _closable; // 0x3B
		[NonSerialized]
		private Task _asyncReadTask; // 0x3C
	
		// Properties
		internal static int DefaultBufferSize { get; } // 0x002A30C8-0x002A30D0 
		public virtual Encoding CurrentEncoding { get; } // 0x002A3C30-0x002A3C38 
		public virtual Stream BaseStream { get; } // 0x002A3C38-0x002A3C40 
		internal bool LeaveOpen { get; } // 0x002A3C18-0x002A3C2C 
	
		// Nested types
		private class NullStreamReader : StreamReader // TypeDefIndex: 611
		{
			// Properties
			public override Stream BaseStream { get; } // 0x002A530C-0x002A5398 
			public override Encoding CurrentEncoding { get; } // 0x002A5398-0x002A53A0 
	
			// Constructors
			internal NullStreamReader(); // 0x002A523C-0x002A530C
	
			// Methods
			protected override void Dispose(bool disposing); // 0x002A53A0-0x002A53A4
			public override int Peek(); // 0x002A53A4-0x002A53AC
			public override int Read(); // 0x002A53AC-0x002A53B4
			public override int Read(char[] buffer, int index, int count); // 0x002A53B4-0x002A53BC
			public override string ReadLine(); // 0x002A53BC-0x002A53C4
			public override string ReadToEnd(); // 0x002A53C4-0x002A5428
			internal override int ReadBuffer(); // 0x002A5428-0x002A5430
		}
	
		// Constructors
		internal StreamReader(); // 0x002A31A0-0x002A3224
		public StreamReader(Stream stream); // 0x002A322C-0x002A3234
		public StreamReader(Stream stream, bool detectEncodingFromByteOrderMarks); // 0x002A3234-0x002A32E8
		public StreamReader(Stream stream, Encoding encoding); // 0x002A34F8-0x002A35A4
		public StreamReader(Stream stream, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool leaveOpen); // 0x002A32E8-0x002A34F8
		public StreamReader(string path); // 0x002A370C-0x002A3714
		public StreamReader(string path, bool detectEncodingFromByteOrderMarks); // 0x002A3714-0x002A37CC
		public StreamReader(string path, Encoding encoding); // 0x002A37F0-0x002A389C
		public StreamReader(string path, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize); // 0x002A37CC-0x002A37F0
		internal StreamReader(string path, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool checkHost); // 0x002A389C-0x002A3B3C
		static StreamReader(); // 0x002A51C0-0x002A523C
	
		// Methods
		private void CheckAsyncTaskInProgress(); // 0x002A30D0-0x002A31A0
		private void Init(Stream stream, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool leaveOpen); // 0x002A35A4-0x002A370C
		internal void Init(Stream stream); // 0x002A3B3C-0x002A3B4C
		protected override void Dispose(bool disposing); // 0x002A3B4C-0x002A3C18
		public override int Peek(); // 0x002A3C40-0x002A3CE8
		internal bool DataAvailable(); // 0x002A3D94-0x002A3DAC
		public override int Read(); // 0x002A3DAC-0x002A3E54
		public override int Read([In, Out] char[] buffer, int index, int count); // 0x002A3E54-0x002A40F4
		public override string ReadToEnd(); // 0x002A445C-0x002A457C
		private void CompressBuffer(int n); // 0x002A457C-0x002A45C8
		private void DetectEncoding(); // 0x002A45C8-0x002A4B24
		private bool IsPreamble(); // 0x002A4B24-0x002A4CD8
		internal virtual int ReadBuffer(); // 0x002A4CD8-0x002A4F0C
		private int ReadBuffer(char[] userBuffer, int userOffset, int desiredChars, out bool readToUserBuffer); // 0x002A40F4-0x002A445C
		public override string ReadLine(); // 0x002A4F0C-0x002A51C0
	}

	[Serializable]
	[ComVisible] // 0x0013C9FC-0x0013CA10
	public class StreamWriter : TextWriter // TypeDefIndex: 612
	{
		// Fields
		internal const int DefaultBufferSize = 1024; // Metadata: 0x00204688
		private const int DefaultFileStreamBufferSize = 4096; // Metadata: 0x0020468C
		private const int MinBufferSize = 128; // Metadata: 0x00204690
		private const int DontCopyOnWriteLineThreshold = 512; // Metadata: 0x00204694
		public static readonly StreamWriter Null; // 0x00
		private Stream stream; // 0x14
		private Encoding encoding; // 0x18
		private Encoder encoder; // 0x1C
		private byte[] byteBuffer; // 0x20
		private char[] charBuffer; // 0x24
		private int charPos; // 0x28
		private int charLen; // 0x2C
		private bool autoFlush; // 0x30
		private bool haveWrittenPreamble; // 0x31
		private bool closable; // 0x32
		[NonSerialized]
		private Task _asyncWriteTask; // 0x34
		private static Encoding _UTF8NoBOM; // 0x04
	
		// Properties
		internal static Encoding UTF8NoBOM { [FriendAccessAllowed] /* 0x00145070-0x00145080 */ get; } // 0x002A5500-0x002A5660 
		public virtual bool AutoFlush { set; } // 0x002A6530-0x002A6564
		internal bool LeaveOpen { get; } // 0x002A61F4-0x002A6208 
	
		// Constructors
		internal StreamWriter(); // 0x002A5660-0x002A56E4
		public StreamWriter(Stream stream); // 0x002A579C-0x002A5840
		public StreamWriter(Stream stream, Encoding encoding); // 0x002A5A4C-0x002A5A70
		public StreamWriter(Stream stream, Encoding encoding, int bufferSize, bool leaveOpen); // 0x002A5840-0x002A5A4C
		public StreamWriter(string path, bool append); // 0x002A5BDC-0x002A5C8C
		public StreamWriter(string path, bool append, Encoding encoding); // 0x002A5CB0-0x002A5CD8
		public StreamWriter(string path, bool append, Encoding encoding, int bufferSize); // 0x002A5C8C-0x002A5CB0
		internal StreamWriter(string path, bool append, Encoding encoding, int bufferSize, bool checkHost); // 0x002A5CD8-0x002A5F54
		static StreamWriter(); // 0x002A6A60-0x002A6B58
	
		// Methods
		private void CheckAsyncTaskInProgress(); // 0x002A5430-0x002A5500
		private void Init(Stream streamArg, Encoding encodingArg, int bufferSize, bool shouldLeaveOpen); // 0x002A5A70-0x002A5BDC
		private static Stream CreateFile(string path, bool append, bool checkHost); // 0x002A5F54-0x002A6058
		public override void Close(); // 0x002A6058-0x002A60F4
		protected override void Dispose(bool disposing); // 0x002A60F4-0x002A61F4
		public override void Flush(); // 0x002A6460-0x002A6484
		private void Flush(bool flushStream, bool flushEncoder); // 0x002A6208-0x002A645C
		public override void Write(char value); // 0x002A6564-0x002A6600
		public override void Write(char[] buffer); // 0x002A6600-0x002A66D0
		public override void Write(char[] buffer, int index, int count); // 0x002A66D0-0x002A698C
		public override void Write(string value); // 0x002A698C-0x002A6A60
	}

	[Serializable]
	[ComVisible] // 0x0013CA10-0x0013CA24
	public class StringReader : TextReader // TypeDefIndex: 613
	{
		// Fields
		private string _s; // 0x0C
		private int _pos; // 0x10
		private int _length; // 0x14
	
		// Constructors
		public StringReader(string s); // 0x002A6B58-0x002A6C68
	
		// Methods
		protected override void Dispose(bool disposing); // 0x002A6C68-0x002A6C7C
		public override int Peek(); // 0x002A6C7C-0x002A6CC4
		public override int Read(); // 0x002A6CC4-0x002A6D14
		public override int Read([In, Out] char[] buffer, int index, int count); // 0x002A6D14-0x002A6F84
		public override string ReadToEnd(); // 0x002A6F84-0x002A6FCC
		public override string ReadLine(); // 0x002A6FCC-0x002A7120
	}

	[Serializable]
	[ComVisible] // 0x0013CA24-0x0013CA38
	public abstract class TextReader : MarshalByRefObject, IDisposable // TypeDefIndex: 614
	{
		// Fields
		[NonSerialized]
		private static Func<object, string> _ReadLineDelegate; // 0x00
		[NonSerialized]
		private static Func<object, int> _ReadDelegate; // 0x04
		public static readonly TextReader Null; // 0x08
	
		// Nested types
		[Serializable]
		private sealed class NullTextReader : TextReader // TypeDefIndex: 615
		{
			// Constructors
			public NullTextReader(); // 0x002A7A98-0x002A7B1C
	
			// Methods
			public override int Read(char[] buffer, int index, int count); // 0x002A7F24-0x002A7F2C
			public override string ReadLine(); // 0x002A7F2C-0x002A7F34
		}
	
		[Serializable]
		internal sealed class SyncTextReader : TextReader // TypeDefIndex: 616
		{
			// Fields
			internal TextReader _in; // 0x0C
	
			// Constructors
			internal SyncTextReader(TextReader t); // 0x002A7894-0x002A7920
	
			// Methods
			protected override void Dispose(bool disposing); // 0x002A7F34-0x002A8018
			public override int Peek(); // 0x002A8018-0x002A804C
			public override int Read(); // 0x002A804C-0x002A8080
			public override int Read([In, Out] char[] buffer, int index, int count); // 0x002A8080-0x002A80D8
			public override string ReadLine(); // 0x002A80D8-0x002A810C
			public override string ReadToEnd(); // 0x002A810C-0x002A8140
		}
	
		[Serializable]
		[CompilerGenerated] // 0x0013CA38-0x0013CA48
		private sealed class <>c // TypeDefIndex: 617
		{
			// Fields
			public static readonly <>c <>9; // 0x00
	
			// Constructors
			static <>c(); // 0x002A7B1C-0x002A7B90
			public <>c(); // 0x002A7B90-0x002A7B98
	
			// Methods
			internal string <.cctor>b__22_0(object state); // 0x002A7B98-0x002A7D24
			internal int <.cctor>b__22_1(object state); // 0x002A7D24-0x002A7F24
		}
	
		// Constructors
		protected TextReader(); // 0x002A3224-0x002A322C
		static TextReader(); // 0x002A7920-0x002A7A98
	
		// Methods
		public void Dispose(); // 0x002A7230-0x002A72CC
		protected virtual void Dispose(bool disposing); // 0x002A3C2C-0x002A3C30
		public virtual int Peek(); // 0x002A72CC-0x002A72D4
		public virtual int Read(); // 0x002A72D4-0x002A72DC
		public virtual int Read([In, Out] char[] buffer, int index, int count); // 0x002A72DC-0x002A7554
		public virtual string ReadToEnd(); // 0x002A7554-0x002A766C
		public virtual string ReadLine(); // 0x002A766C-0x002A77B0
		public static TextReader Synchronized(TextReader reader); // 0x002A77B0-0x002A7894
	}

	[Serializable]
	[ComVisible] // 0x0013CA48-0x0013CA5C
	public abstract class TextWriter : MarshalByRefObject, IDisposable // TypeDefIndex: 618
	{
		// Fields
		public static readonly TextWriter Null; // 0x00
		[NonSerialized]
		private static Action<object> _WriteCharDelegate; // 0x04
		[NonSerialized]
		private static Action<object> _WriteStringDelegate; // 0x08
		[NonSerialized]
		private static Action<object> _WriteCharArrayRangeDelegate; // 0x0C
		[NonSerialized]
		private static Action<object> _WriteLineCharDelegate; // 0x10
		[NonSerialized]
		private static Action<object> _WriteLineStringDelegate; // 0x14
		[NonSerialized]
		private static Action<object> _WriteLineCharArrayRangeDelegate; // 0x18
		[NonSerialized]
		private static Action<object> _FlushDelegate; // 0x1C
		protected char[] CoreNewLine; // 0x0C
		private IFormatProvider InternalFormatProvider; // 0x10
	
		// Properties
		private static string InitialNewLine { get; } // 0x002A8140-0x002A8148 
		public virtual IFormatProvider FormatProvider { get; } // 0x002A8200-0x002A8244 
	
		// Nested types
		[Serializable]
		private sealed class NullTextWriter : TextWriter // TypeDefIndex: 619
		{
			// Constructors
			internal NullTextWriter(); // 0x002A8EE0-0x002A8F9C
	
			// Methods
			public override void Write(char[] buffer, int index, int count); // 0x002A9B74-0x002A9B78
			public override void Write(string value); // 0x002A9B78-0x002A9B7C
			public override void WriteLine(); // 0x002A9B7C-0x002A9B80
			public override void WriteLine(string value); // 0x002A9B80-0x002A9B84
		}
	
		[Serializable]
		internal sealed class SyncTextWriter : TextWriter, IDisposable // TypeDefIndex: 620
		{
			// Fields
			private TextWriter _out; // 0x14
	
			// Properties
			public override IFormatProvider FormatProvider { get; } // 0x002A9B84-0x002A9BB8 
	
			// Constructors
			internal SyncTextWriter(TextWriter t); // 0x002A8464-0x002A8514
	
			// Methods
			public override void Close(); // 0x002A9BB8-0x002A9BEC
			protected override void Dispose(bool disposing); // 0x002A9BEC-0x002A9CD0
			public override void Flush(); // 0x002A9CD0-0x002A9D04
			public override void Write(char value); // 0x002A9D04-0x002A9D40
			public override void Write(char[] buffer); // 0x002A9D40-0x002A9D7C
			public override void Write(char[] buffer, int index, int count); // 0x002A9D7C-0x002A9DD4
			public override void Write(string value); // 0x002A9DD4-0x002A9E10
			public override void WriteLine(); // 0x002A9E10-0x002A9E44
			public override void WriteLine(char value); // 0x002A9E44-0x002A9E80
			public override void WriteLine(char[] buffer, int index, int count); // 0x002A9E80-0x002A9ED8
			public override void WriteLine(string value); // 0x002A9ED8-0x002A9F14
			public override void WriteLine(string format, object arg0); // 0x002A9F14-0x002A9F58
			public override void WriteLine(string format, object arg0, object arg1); // 0x002A9F58-0x002A9FB0
			public override void WriteLine(string format, object arg0, object arg1, object arg2); // 0x002A9FB0-0x002AA010
		}
	
		[Serializable]
		[CompilerGenerated] // 0x0013CA5C-0x0013CA6C
		private sealed class <>c // TypeDefIndex: 621
		{
			// Fields
			public static readonly <>c <>9; // 0x00
	
			// Constructors
			static <>c(); // 0x002A8F9C-0x002A9010
			public <>c(); // 0x002A9010-0x002A9018
	
			// Methods
			internal void <.cctor>b__73_0(object state); // 0x002A9018-0x002A918C
			internal void <.cctor>b__73_1(object state); // 0x002A918C-0x002A9300
			internal void <.cctor>b__73_2(object state); // 0x002A9300-0x002A9500
			internal void <.cctor>b__73_3(object state); // 0x002A9500-0x002A9674
			internal void <.cctor>b__73_4(object state); // 0x002A9674-0x002A97E8
			internal void <.cctor>b__73_5(object state); // 0x002A97E8-0x002A99E8
			internal void <.cctor>b__73_6(object state); // 0x002A99E8-0x002A9B74
		}
	
		// Constructors
		protected TextWriter(); // 0x002A8148-0x002A8200
		protected TextWriter(IFormatProvider formatProvider); // 0x002A56E4-0x002A579C
		static TextWriter(); // 0x002A8C20-0x002A8EE0
	
		// Methods
		public virtual void Close(); // 0x002A8244-0x002A82E0
		protected virtual void Dispose(bool disposing); // 0x002A645C-0x002A6460
		public void Dispose(); // 0x002A82E0-0x002A837C
		public virtual void Flush(); // 0x002A837C-0x002A8380
		public static TextWriter Synchronized(TextWriter writer); // 0x002A8380-0x002A8464
		public virtual void Write(char value); // 0x002A8514-0x002A8518
		public virtual void Write(char[] buffer); // 0x002A8518-0x002A8550
		public virtual void Write(char[] buffer, int index, int count); // 0x002A8550-0x002A87C0
		public virtual void Write(string value); // 0x002A87C0-0x002A87FC
		public virtual void WriteLine(); // 0x002A87FC-0x002A8810
		public virtual void WriteLine(char value); // 0x002A8810-0x002A8848
		public virtual void WriteLine(char[] buffer, int index, int count); // 0x002A8848-0x002A888C
		public virtual void WriteLine(string value); // 0x002A888C-0x002A8AF8
		public virtual void WriteLine(string format, object arg0); // 0x002A8AF8-0x002A8B4C
		public virtual void WriteLine(string format, object arg0, object arg1); // 0x002A8B4C-0x002A8BB4
		public virtual void WriteLine(string format, object arg0, object arg1, object arg2); // 0x002A8BB4-0x002A8C20
	}

	public class UnmanagedMemoryStream : Stream // TypeDefIndex: 622
	{
		// Fields
		private SafeBuffer _buffer; // 0x14
		private unsafe byte* _mem; // 0x18
		private long _length; // 0x20
		private long _capacity; // 0x28
		private long _position; // 0x30
		private long _offset; // 0x38
		private FileAccess _access; // 0x40
		internal bool _isOpen; // 0x44
		[NonSerialized]
		private Task<int> _lastReadTask; // 0x48
	
		// Properties
		public override bool CanRead { get; } // 0x002AB1AC-0x002AB1C4 
		public override bool CanSeek { get; } // 0x002AB1C4-0x002AB1CC 
		public override bool CanWrite { get; } // 0x002AB1CC-0x002AB1E4 
		public override long Length { get; } // 0x002AB2AC-0x002AB2D4 
		public override long Position { get; set; } // 0x002AB2D4-0x002AB314 0x002AB314-0x002AB42C
		[CLSCompliant] // 0x00146490-0x001464A4
		public unsafe byte* PositionPointer { get; } // 0x002AB42C-0x002AB564 
	
		// Constructors
		protected UnmanagedMemoryStream(); // 0x0029F65C-0x0029F6EC
		internal unsafe UnmanagedMemoryStream(byte* pointer, long length, long capacity, FileAccess access, bool skipSecurityCheck); // 0x002AB0E4-0x002AB1AC
	
		// Methods
		internal unsafe void Initialize(byte* pointer, long length, long capacity, FileAccess access, bool skipSecurityCheck); // 0x0029F6EC-0x0029FA10
		protected override void Dispose(bool disposing); // 0x0029FAC4-0x0029FAD4
		public override void Flush(); // 0x002AB1E4-0x002AB200
		public override int Read([In, Out] byte[] buffer, int offset, int count); // 0x002AB5BC-0x002AB9D0
		[ComVisible] // 0x00145080-0x00145094
		public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken); // 0x002AB9D0-0x002ABDCC
		public override int ReadByte(); // 0x002ABDCC-0x002ABF48
		public override long Seek(long offset, SeekOrigin loc); // 0x002ABF48-0x002AC1C4
		public override void Write(byte[] buffer, int offset, int count); // 0x002AC1C4-0x002AC730
		[ComVisible] // 0x00145094-0x001450A8
		public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken); // 0x002AC730-0x002ACAC8
		public override void WriteByte(byte value); // 0x002ACAC8-0x002ACDD4
	}

	internal static class PathInternal // TypeDefIndex: 623
	{
		// Methods
		public static bool IsPartiallyQualified(string path); // 0x0029F3BC-0x0029F3C4
		public static bool HasIllegalCharacters(string path, bool checkAdditional); // 0x0029F3C4-0x0029F484
	}

	[Serializable]
	[ComVisible] // 0x0013CA6C-0x0013CA80
	public sealed class DirectoryInfo : FileSystemInfo // TypeDefIndex: 624
	{
		// Fields
		private string current; // 0x48
		private string parent; // 0x4C
	
		// Properties
		public override bool Exists { get; } // 0x0042CE74-0x0042CEC0 
		public override string Name { get; } // 0x0042CEF0-0x0042CEF8 
		public DirectoryInfo Parent { get; } // 0x0042AA18-0x0042AAB0 
	
		// Constructors
		public DirectoryInfo(string path); // 0x0042C55C-0x0042C564
		internal DirectoryInfo(string path, bool simpleOriginalPath); // 0x0042A924-0x0042AA18
		private DirectoryInfo(SerializationInfo info, StreamingContext context); // 0x0042CCF8-0x0042CD1C
	
		// Methods
		private void Initialize(); // 0x0042C978-0x0042CCF8
		public void Create(); // 0x0042AAB0-0x0042AAB8
		public DirectoryInfo[] GetDirectories(); // 0x0042CEF8-0x0042CF5C
		public DirectoryInfo[] GetDirectories(string searchPattern); // 0x0042CF5C-0x0042D128
		public override string ToString(); // 0x0042D128-0x0042D130
		internal void CheckPath(string path); // 0x0042C5D8-0x0042C7EC
	}

	[ComVisible] // 0x0013CA80-0x0013CA94
	public static class File // TypeDefIndex: 625
	{
		// Methods
		public static FileStream Create(string path); // 0x0042D404-0x0042D40C
		public static FileStream Create(string path, int bufferSize); // 0x0042D40C-0x0042D4A4
		public static StreamWriter CreateText(string path); // 0x0042D4D4-0x0042D54C
		public static void Delete(string path); // 0x0042B984-0x0042BC70
		public static bool Exists(string path); // 0x0042A600-0x0042A734
		public static FileStream Open(string path, FileMode mode); // 0x0042DB50-0x0042DBF4
		public static FileStream OpenRead(string path); // 0x0042DC24-0x0042DCC4
		public static StreamReader OpenText(string path); // 0x0042DCC4-0x0042DD38
		internal static int FillAttributeInfo(string path, ref MonoIOStat data, bool tryagain, bool returnErrorOnNotFound); // 0x0042DD38-0x0042DE74
	}

	[Serializable]
	[ComVisible] // 0x0013CA94-0x0013CAC8
	[Flags] // 0x0013CA94-0x0013CAC8
	public enum FileAccess // TypeDefIndex: 626
	{
		Read = 1,
		Write = 2,
		ReadWrite = 3
	}

	[Serializable]
	[ComVisible] // 0x0013CAC8-0x0013CAFC
	[Flags] // 0x0013CAC8-0x0013CAFC
	public enum FileAttributes // TypeDefIndex: 627
	{
		ReadOnly = 1,
		Hidden = 2,
		System = 4,
		Directory = 16,
		Archive = 32,
		Device = 64,
		Normal = 128,
		Temporary = 256,
		SparseFile = 512,
		ReparsePoint = 1024,
		Compressed = 2048,
		Offline = 4096,
		NotContentIndexed = 8192,
		Encrypted = 16384,
		IntegrityStream = 32768,
		NoScrubData = 131072
	}

	[Serializable]
	[ComVisible] // 0x0013CAFC-0x0013CB10
	public enum FileMode // TypeDefIndex: 628
	{
		CreateNew = 1,
		Create = 2,
		Open = 3,
		OpenOrCreate = 4,
		Truncate = 5,
		Append = 6
	}

	[Serializable]
	[ComVisible] // 0x0013CB10-0x0013CB44
	[Flags] // 0x0013CB10-0x0013CB44
	public enum FileOptions // TypeDefIndex: 629
	{
		WriteThrough = -2147483648,
		None = 0,
		Encrypted = 16384,
		DeleteOnClose = 67108864,
		SequentialScan = 134217728,
		RandomAccess = 268435456,
		Asynchronous = 1073741824
	}

	[Serializable]
	[ComVisible] // 0x0013CB44-0x0013CB78
	[Flags] // 0x0013CB44-0x0013CB78
	public enum FileShare // TypeDefIndex: 630
	{
		None = 0,
		Read = 1,
		Write = 2,
		ReadWrite = 3,
		Delete = 4,
		Inheritable = 16
	}

	[ComVisible] // 0x0013CB78-0x0013CB8C
	public class FileStream : Stream // TypeDefIndex: 631
	{
		// Fields
		private static byte[] buf_recycle; // 0x00
		private static readonly object buf_recycle_lock; // 0x04
		private byte[] buf; // 0x14
		private string name; // 0x18
		private SafeFileHandle safeHandle; // 0x1C
		private bool isExposed; // 0x20
		private long append_startpos; // 0x28
		private FileAccess access; // 0x30
		private bool owner; // 0x34
		private bool async; // 0x35
		private bool canseek; // 0x36
		private bool anonymous; // 0x37
		private bool buf_dirty; // 0x38
		private int buf_size; // 0x3C
		private int buf_length; // 0x40
		private int buf_offset; // 0x44
		private long buf_start; // 0x48
	
		// Properties
		public override bool CanRead { get; } // 0x00431474-0x0043148C 
		public override bool CanWrite { get; } // 0x0043148C-0x004314A4 
		public override bool CanSeek { get; } // 0x004314A4-0x004314AC 
		public override long Length { get; } // 0x004314AC-0x0043169C 
		public override long Position { get; set; } // 0x00431814-0x00431A2C 0x00431A2C-0x00431B30
	
		// Nested types
		private delegate int ReadDelegate(byte[] buffer, int offset, int count); // TypeDefIndex: 632; 0x004348C0-0x004351D4
	
		private delegate void WriteDelegate(byte[] buffer, int offset, int count); // TypeDefIndex: 633; 0x004351D4-0x004359D0
	
		// Constructors
		internal FileStream(IntPtr handle, FileAccess access, bool ownsHandle, int bufferSize, bool isAsync, bool isConsoleWrapper); // 0x0042F110-0x0042F2DC
		public FileStream(string path, FileMode mode, FileAccess access, FileShare share); // 0x0042DBF4-0x0042DC24
		public FileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize); // 0x0042D4A4-0x0042D4D4
		internal FileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, FileOptions options, string msgPath, bool bFromProxy, bool useLongPath = false /* Metadata: 0x00204730 */, bool checkHost = false /* Metadata: 0x00204731 */); // 0x0043004C-0x00430080
		internal FileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, bool anonymous, FileOptions options); // 0x0042F6A8-0x0043004C
		static FileStream(); // 0x00434820-0x004348C0
	
		// Methods
		private void Init(SafeFileHandle safeHandle, FileAccess access, bool ownsHandle, int bufferSize, bool isAsync, bool isConsoleWrapper); // 0x0042F2DC-0x0042F6A8
		private void ExposeHandle(); // 0x004312C4-0x004312F4
		public override int ReadByte(); // 0x00431DA8-0x00431FB4
		public override void WriteByte(byte value); // 0x00432168-0x0043235C
		public override int Read([In, Out] byte[] array, int offset, int count); // 0x0043235C-0x004326B0
		private int ReadInternal(byte[] dest, int offset, int count); // 0x004326B0-0x0043274C
		public override IAsyncResult BeginRead(byte[] array, int offset, int numBytes, AsyncCallback userCallback, object stateObject); // 0x0043282C-0x00432B68
		public override int EndRead(IAsyncResult asyncResult); // 0x00432C34-0x00432E20
		public override void Write(byte[] array, int offset, int count); // 0x00432E58-0x00433160
		private void WriteInternal(byte[] src, int offset, int count); // 0x00433160-0x004333F4
		public override IAsyncResult BeginWrite(byte[] array, int offset, int numBytes, AsyncCallback userCallback, object stateObject); // 0x004335E0-0x00433988
		public override void EndWrite(IAsyncResult asyncResult); // 0x00433B28-0x00433D18
		public override long Seek(long offset, SeekOrigin origin); // 0x00433D24-0x0043405C
		public override void Flush(); // 0x0043405C-0x00434130
		~FileStream(); // 0x00434130-0x004341A8
		protected override void Dispose(bool disposing); // 0x004341A8-0x004345D8
		public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken); // 0x004345DC-0x00434600
		public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken); // 0x00434600-0x00434624
		private int ReadSegment(byte[] dest, int dest_offset, int count); // 0x0043274C-0x0043282C
		private int WriteSegment(byte[] src, int src_offset, int count); // 0x00433568-0x004335E0
		private void FlushBuffer(); // 0x00431B30-0x00431DA8
		private void FlushBufferIfDirty(); // 0x0043169C-0x004316AC
		private void RefillBuffer(); // 0x0043212C-0x00432168
		private int ReadData(SafeHandle safeHandle, byte[] buf, int offset, int count); // 0x00431FB4-0x0043212C
		private void InitBuffer(int size, bool isZeroSize); // 0x00430FBC-0x004312C4
		private string GetSecureFileName(string filename); // 0x00430DA8-0x00430E60
		private string GetSecureFileName(string filename, bool full); // 0x00430C20-0x00430CFC
	}

	internal class FileStreamAsyncResult : IAsyncResult // TypeDefIndex: 634
	{
		// Fields
		private object state; // 0x08
		private ManualResetEvent wh; // 0x0C
		private AsyncCallback cb; // 0x10
		private bool completedSynch; // 0x14
		public int Count; // 0x18
		public int OriginalCount; // 0x1C
		public int BytesRead; // 0x20
		private AsyncCallback realcb; // 0x24
	
		// Properties
		public object AsyncState { get; } // 0x00435B64-0x00435B6C 
		public bool CompletedSynchronously { get; } // 0x00435B6C-0x00435B74 
		public WaitHandle AsyncWaitHandle { get; } // 0x00435B74-0x00435B7C 
	
		// Constructors
		public FileStreamAsyncResult(AsyncCallback cb, object state); // 0x00433988-0x00433A5C
	
		// Methods
		private static void CBWrapper(IAsyncResult ares); // 0x004359D0-0x00435B64
	}

	internal enum MonoFileType // TypeDefIndex: 635
	{
		Unknown = 0,
		Disk = 1,
		Char = 2,
		Pipe = 3,
		Remote = 32768
	}

	internal static class MonoIO // TypeDefIndex: 636
	{
		// Fields
		public static readonly IntPtr InvalidHandle; // 0x00
		private static bool dump_handles; // 0x04
	
		// Properties
		public static IntPtr ConsoleOutput { get; } // 0x00437FE8-0x00437FEC 
		public static IntPtr ConsoleInput { get; } // 0x00437FEC-0x00437FF0 
		public static IntPtr ConsoleError { get; } // 0x00437FF0-0x00437FF4 
		public static char VolumeSeparatorChar { get; } // 0x00437FF4-0x00437FF8 
		public static char DirectorySeparatorChar { get; } // 0x00437FF8-0x00437FFC 
		public static char AltDirectorySeparatorChar { get; } // 0x00437FFC-0x00438000 
		public static char PathSeparator { get; } // 0x00438000-0x00438004 
	
		// Constructors
		static MonoIO(); // 0x00438008-0x004380A4
	
		// Methods
		public static Exception GetException(MonoIOError error); // 0x0042C0C4-0x0042C1F8
		public static Exception GetException(string path, MonoIOError error); // 0x0042AB54-0x0042B294
		private static unsafe bool CreateDirectory(char* path, out MonoIOError error); // 0x00437E68-0x00437E6C
		public static bool CreateDirectory(string path, out MonoIOError error); // 0x0042AAB8-0x0042AB54
		private static unsafe bool RemoveDirectory(char* path, out MonoIOError error); // 0x00437E6C-0x00437E70
		public static bool RemoveDirectory(string path, out MonoIOError error); // 0x0042B70C-0x0042B7A8
		public static string GetCurrentDirectory(out MonoIOError error); // 0x0042C0C0-0x0042C0C4
		private static unsafe bool DeleteFile(char* path, out MonoIOError error); // 0x00437E70-0x00437E74
		public static bool DeleteFile(string path, out MonoIOError error); // 0x0042B670-0x0042B70C
		private static unsafe FileAttributes GetFileAttributes(char* path, out MonoIOError error); // 0x00437E74-0x00437E78
		public static FileAttributes GetFileAttributes(string path, out MonoIOError error); // 0x00437E78-0x00437F14
		private static MonoFileType GetFileType(IntPtr handle, out MonoIOError error); // 0x00437F14-0x00437F18
		public static MonoFileType GetFileType(SafeHandle safeHandle, out MonoIOError error); // 0x00430E60-0x00430FBC
		private static unsafe IntPtr FindFirstFile(char* pathWithPattern, out string fileName, out int fileAttr, out int error); // 0x00437F18-0x00437F1C
		public static IntPtr FindFirstFile(string pathWithPattern, out string fileName, out int fileAttr, out int error); // 0x00437F1C-0x00437FC8
		public static bool FindNextFile(IntPtr hnd, out string fileName, out int fileAttr, out int error); // 0x00437FC8-0x00437FCC
		public static bool FindCloseFile(IntPtr hnd); // 0x00437FCC-0x00437FD0
		public static bool ExistsFile(string path, out MonoIOError error); // 0x0042DAA8-0x0042DB50
		public static bool ExistsDirectory(string path, out MonoIOError error); // 0x0042BF1C-0x0042BFC0
		public static bool ExistsSymlink(string path, out MonoIOError error); // 0x0042B5DC-0x0042B670
		private static unsafe bool GetFileStat(char* path, out MonoIOStat stat, out MonoIOError error); // 0x00437FD0-0x00437FD4
		public static bool GetFileStat(string path, out MonoIOStat stat, out MonoIOError error); // 0x0042DE74-0x0042DF18
		private static unsafe IntPtr Open(char* filename, FileMode mode, FileAccess access, FileShare share, FileOptions options, out MonoIOError error); // 0x00437FD4-0x00437FD8
		public static IntPtr Open(string filename, FileMode mode, FileAccess access, FileShare share, FileOptions options, out MonoIOError error); // 0x00430CFC-0x00430DA8
		public static bool Close(IntPtr handle, out MonoIOError error); // 0x004345D8-0x004345DC
		private static int Read(IntPtr handle, byte[] dest, int dest_offset, int count, out MonoIOError error); // 0x00437FD8-0x00437FDC
		public static int Read(SafeHandle safeHandle, byte[] dest, int dest_offset, int count, out MonoIOError error); // 0x00434624-0x00434798
		private static int Write(IntPtr handle, in byte[] src, int src_offset, int count, out MonoIOError error); // 0x00437FDC-0x00437FE0
		public static int Write(SafeHandle safeHandle, byte[] src, int src_offset, int count, out MonoIOError error); // 0x004333F4-0x00433568
		private static long Seek(IntPtr handle, long offset, SeekOrigin origin, out MonoIOError error); // 0x00437FE0-0x00437FE4
		public static long Seek(SafeHandle safeHandle, long offset, SeekOrigin origin, out MonoIOError error); // 0x004312F4-0x00431474
		private static long GetLength(IntPtr handle, out MonoIOError error); // 0x00437FE4-0x00437FE8
		public static long GetLength(SafeHandle safeHandle, out MonoIOError error); // 0x004316AC-0x00431814
		private static void DumpHandles(); // 0x00437E64-0x00437E68
		public static bool RemapPath(string path, out string newPath); // 0x00438004-0x00438008
	}

	internal enum MonoIOError // TypeDefIndex: 637
	{
		ERROR_SUCCESS = 0,
		ERROR_FILE_NOT_FOUND = 2,
		ERROR_PATH_NOT_FOUND = 3,
		ERROR_TOO_MANY_OPEN_FILES = 4,
		ERROR_ACCESS_DENIED = 5,
		ERROR_INVALID_HANDLE = 6,
		ERROR_INVALID_DRIVE = 15,
		ERROR_NOT_SAME_DEVICE = 17,
		ERROR_NO_MORE_FILES = 18,
		ERROR_NOT_READY = 21,
		ERROR_WRITE_FAULT = 29,
		ERROR_READ_FAULT = 30,
		ERROR_GEN_FAILURE = 31,
		ERROR_SHARING_VIOLATION = 32,
		ERROR_LOCK_VIOLATION = 33,
		ERROR_HANDLE_DISK_FULL = 39,
		ERROR_FILE_EXISTS = 80,
		ERROR_CANNOT_MAKE = 82,
		ERROR_INVALID_PARAMETER = 87,
		ERROR_BROKEN_PIPE = 109,
		ERROR_INVALID_NAME = 123,
		ERROR_DIR_NOT_EMPTY = 145,
		ERROR_ALREADY_EXISTS = 183,
		ERROR_FILENAME_EXCED_RANGE = 206,
		ERROR_DIRECTORY = 267,
		ERROR_ENCRYPTION_FAILED = 6000
	}

	internal struct MonoIOStat // TypeDefIndex: 638
	{
		// Fields
		public FileAttributes fileAttributes; // 0x00
		public long Length; // 0x08
		public long CreationTime; // 0x10
		public long LastAccessTime; // 0x18
		public long LastWriteTime; // 0x20
	}

	[ComVisible] // 0x0013CB8C-0x0013CBA0
	public static class Path // TypeDefIndex: 639
	{
		// Fields
		[Obsolete] // 0x00142778-0x001427E4
		public static readonly char[] InvalidPathChars; // 0x00
		public static readonly char AltDirectorySeparatorChar; // 0x04
		public static readonly char DirectorySeparatorChar; // 0x06
		public static readonly char PathSeparator; // 0x08
		internal static readonly string DirectorySeparatorStr; // 0x0C
		public static readonly char VolumeSeparatorChar; // 0x10
		internal static readonly char[] PathSeparatorChars; // 0x14
		private static readonly bool dirEqualsVolume; // 0x18
		internal static readonly char[] trimEndCharsWindows; // 0x1C
		internal static readonly char[] trimEndCharsUnix; // 0x20
	
		// Properties
		internal static string DirectorySeparatorCharAsString { get; } // 0x0042C4A0-0x0042C52C 
		internal static char[] TrimEndChars { get; } // 0x0043BFBC-0x0043C098 
	
		// Constructors
		static Path(); // 0x0043AD80-0x0043AFD4
	
		// Methods
		public static string ChangeExtension(string path, string extension); // 0x004380A4-0x00438314
		public static string Combine(string path1, string path2); // 0x004383E0-0x004387C0
		internal static string CleanPath(string s); // 0x00438A3C-0x0043916C
		public static string GetDirectoryName(string path); // 0x0042D54C-0x0042DAA8
		public static string GetFileName(string path); // 0x0042C7EC-0x0042C978
		public static string GetFileNameWithoutExtension(string path); // 0x0043985C-0x004398E8
		public static string GetFullPath(string path); // 0x0042BE8C-0x0042BF1C
		internal static string GetFullPathInternal(string path); // 0x00435C8C-0x00435D0C
		private static extern int GetFullPathName(string path, int numBufferChars, StringBuilder buffer, ref IntPtr lpFilePartOrNull); // 0x004398E8-0x00439A44
		internal static string GetFullPathName(string path); // 0x00439A44-0x00439C58
		internal static string WindowsDriveAdjustment(string path); // 0x00439C58-0x0043A098
		internal static string InsecureGetFullPath(string path); // 0x00430080-0x00430C20
		internal static bool IsDirectorySeparator(char c); // 0x0043A098-0x0043A178
		public static string GetPathRoot(string path); // 0x0043916C-0x0043985C
		public static bool IsPathRooted(string path); // 0x004387C0-0x00438A3C
		public static char[] GetInvalidPathChars(); // 0x0043ACDC-0x0043AD80
		private static int findExtension(string path); // 0x00438314-0x004383E0
		private static string GetServerAndShare(string path); // 0x0043AFD4-0x0043B1F8
		private static bool SameRoot(string root, string path); // 0x0043B1F8-0x0043B6B0
		private static string CanonicalizePath(string path); // 0x0043A178-0x0043ACDC
		public static string Combine(params /* 0x00146308-0x00146318 */ string[] paths); // 0x0043B6B0-0x0043BB28
		public static string Combine(string path1, string path2, string path3); // 0x0043BB28-0x0043BDAC
		internal static void Validate(string path); // 0x0042B54C-0x0042B5DC
		internal static void Validate(string path, string parameterName); // 0x0043BDAC-0x0043BFBC
		internal static void CheckSearchPattern(string searchPattern); // 0x0043C098-0x0043C304
		internal static void CheckInvalidPathChars(string path, bool checkAdditional = false /* Metadata: 0x002047AE */); // 0x0043C304-0x0043C420
		internal static string InternalCombine(string path1, string path2); // 0x0043C420-0x0043C7A0
	}

	[Serializable]
	[ComVisible] // 0x0013CBA0-0x0013CBB4
	public enum SearchOption // TypeDefIndex: 640
	{
		TopDirectoryOnly = 0,
		AllDirectories = 1
	}

	[Serializable]
	[ComVisible] // 0x0013CBB4-0x0013CBC8
	public enum SeekOrigin // TypeDefIndex: 641
	{
		Begin = 0,
		Current = 1,
		End = 2
	}

	internal class UnexceptionalStreamReader : StreamReader // TypeDefIndex: 642
	{
		// Fields
		private static bool[] newline; // 0x00
		private static char newlineChar; // 0x04
	
		// Constructors
		static UnexceptionalStreamReader(); // 0x002AA010-0x002AA118
		public UnexceptionalStreamReader(Stream stream, Encoding encoding); // 0x002AA118-0x002AA1A8
	
		// Methods
		public override int Peek(); // 0x002AA1A8-0x002AA288
		public override int Read(); // 0x002AA288-0x002AA368
		public override int Read([In, Out] char[] dest_buffer, int index, int count); // 0x002AA368-0x002AA6B0
		private bool CheckEOL(char current); // 0x002AA6B0-0x002AA9E8
		public override string ReadLine(); // 0x002AA9E8-0x002AAAC8
		public override string ReadToEnd(); // 0x002AAAC8-0x002AABA8
	}

	internal class UnexceptionalStreamWriter : StreamWriter // TypeDefIndex: 643
	{
		// Constructors
		public UnexceptionalStreamWriter(Stream stream, Encoding encoding); // 0x002AABA8-0x002AAC4C
	
		// Methods
		public override void Flush(); // 0x002AAC4C-0x002AAD38
		public override void Write(char[] buffer, int index, int count); // 0x002AAD38-0x002AAE38
		public override void Write(char value); // 0x002AAE38-0x002AAF1C
		public override void Write(char[] value); // 0x002AAF1C-0x002AB000
		public override void Write(string value); // 0x002AB000-0x002AB0E4
	}

	internal class CStreamReader : StreamReader // TypeDefIndex: 644
	{
		// Fields
		private TermInfoDriver driver; // 0x40
	
		// Constructors
		public CStreamReader(Stream stream, Encoding encoding); // 0x004289C0-0x00428B3C
	
		// Methods
		public override int Peek(); // 0x00428B3C-0x00428C20
		public override int Read(); // 0x00428C20-0x00428D64
		public override int Read([In, Out] char[] dest, int index, int count); // 0x00428D64-0x00428FEC
		public override string ReadLine(); // 0x00428FEC-0x004290E4
		public override string ReadToEnd(); // 0x004290E4-0x004291DC
	}

	internal class CStreamWriter : StreamWriter // TypeDefIndex: 645
	{
		// Fields
		private TermInfoDriver driver; // 0x38
	
		// Constructors
		public CStreamWriter(Stream stream, Encoding encoding, bool leaveOpen); // 0x004291DC-0x00429364
	
		// Methods
		public override void Write(char[] buffer, int index, int count); // 0x00429364-0x00429774
		public override void Write(char val); // 0x00429774-0x00429958
		public void InternalWriteString(string val); // 0x00429A40-0x00429B28
		public void InternalWriteChar(char val); // 0x00429958-0x00429A40
		public void InternalWriteChars(char[] buffer, int n); // 0x00429B28-0x00429C2C
		public override void Write(char[] val); // 0x00429C2C-0x00429C7C
		public override void Write(string val); // 0x00429C7C-0x00429DBC
	}
}

namespace System.Globalization
{
	public static class CharUnicodeInfo // TypeDefIndex: 646
	{
		// Fields
		private static ushort[] s_pCategoryLevel1Index; // 0x00
		private static byte[] s_pCategoriesValue; // 0x04
		private static ushort[] s_pNumericLevel1Index; // 0x08
		private static byte[] s_pNumericValues; // 0x0C
		private static ushort[] s_pDigitValues; // 0x10
	
		// Nested types
		internal static class Debug // TypeDefIndex: 647
		{
			// Methods
			internal static void Assert(bool condition, string message); // 0x005756B4-0x005756B8
		}
	
		// Constructors
		static CharUnicodeInfo(); // 0x00575CB4-0x00575E38
	
		// Methods
		internal static int InternalConvertToUtf32(string s, int index); // 0x0057558C-0x005756B4
		internal static bool IsWhiteSpace(string s, int index); // 0x005756B8-0x00575774
		internal static bool IsWhiteSpace(char c); // 0x005758B4-0x00575944
		public static UnicodeCategory GetUnicodeCategory(char ch); // 0x00575944-0x005759C4
		public static UnicodeCategory GetUnicodeCategory(string s, int index); // 0x00575774-0x005758B4
		internal static UnicodeCategory InternalGetUnicodeCategory(int ch); // 0x005759C4-0x00575A48
		internal static byte InternalGetCategoryValue(int ch, int offset); // 0x00575AF0-0x00575CB4
		internal static UnicodeCategory InternalGetUnicodeCategory(string value, int index); // 0x00575A48-0x00575AF0
	}

	[Serializable]
	[ComVisible] // 0x0013CBC8-0x0013CBDC
	public abstract class Calendar : ICloneable // TypeDefIndex: 648
	{
		// Fields
		internal int m_currentEraValue; // 0x08
		[OptionalField] // 0x001427E4-0x00142814
		private bool m_isReadOnly; // 0x0C
		internal int twoDigitYearMax; // 0x10
	
		// Properties
		[ComVisible] // 0x001464A4-0x001464B8
		public virtual DateTime MinSupportedDateTime { get; } // 0x00571BB4-0x00571C48 
		[ComVisible] // 0x001464B8-0x001464CC
		public virtual DateTime MaxSupportedDateTime { get; } // 0x00571C48-0x00571CDC 
		internal virtual int ID { get; } // 0x00571CF0-0x00571CF8 
		internal virtual int BaseCalendarID { get; } // 0x00571CF8-0x00571D08 
		internal virtual int CurrentEraValue { get; } // 0x00571E8C-0x00571F4C 
		public abstract int[] Eras { get; }
		public virtual int TwoDigitYearMax { get; } // 0x005723BC-0x005723C4 
	
		// Constructors
		protected Calendar(); // 0x00571CDC-0x00571CF0
	
		// Methods
		[ComVisible] // 0x001450A8-0x001450BC
		public virtual object Clone(); // 0x00571D08-0x00571E84
		internal void SetReadOnlyState(bool readOnly); // 0x00571E84-0x00571E8C
		public abstract int GetDayOfMonth(DateTime time);
		public abstract DayOfWeek GetDayOfWeek(DateTime time);
		public abstract int GetDaysInMonth(int year, int month, int era);
		public abstract int GetEra(DateTime time);
		public abstract int GetMonth(DateTime time);
		public abstract int GetMonthsInYear(int year, int era);
		public abstract int GetYear(DateTime time);
		public virtual bool IsLeapYear(int year); // 0x00572040-0x00572054
		public abstract bool IsLeapYear(int year, int era);
		public abstract DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
		internal virtual bool TryToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era, out DateTime result); // 0x00572054-0x00572208
		internal virtual bool IsValidYear(int year, int era); // 0x00572208-0x005722B4
		internal virtual bool IsValidMonth(int year, int month, int era); // 0x005722B4-0x0057232C
		internal virtual bool IsValidDay(int year, int month, int day, int era); // 0x0057232C-0x005723BC
		public virtual int ToFourDigitYear(int year); // 0x005723C4-0x005724F4
		internal static int GetSystemTwoDigitYearSetting(int CalID, int defaultYearValue); // 0x005724F4-0x00572570
	}

	internal class CalendarData // TypeDefIndex: 649
	{
		// Fields
		internal const int MAX_CALENDARS = 23; // Metadata: 0x002047C3
		internal string sNativeName; // 0x08
		internal string[] saShortDates; // 0x0C
		internal string[] saYearMonths; // 0x10
		internal string[] saLongDates; // 0x14
		internal string sMonthDay; // 0x18
		internal string[] saEraNames; // 0x1C
		internal string[] saAbbrevEraNames; // 0x20
		internal string[] saAbbrevEnglishEraNames; // 0x24
		internal string[] saDayNames; // 0x28
		internal string[] saAbbrevDayNames; // 0x2C
		internal string[] saSuperShortDayNames; // 0x30
		internal string[] saMonthNames; // 0x34
		internal string[] saAbbrevMonthNames; // 0x38
		internal string[] saMonthGenitiveNames; // 0x3C
		internal string[] saAbbrevMonthGenitiveNames; // 0x40
		internal string[] saLeapYearMonthNames; // 0x44
		internal int iTwoDigitYearMax; // 0x48
		internal int iCurrentEra; // 0x4C
		internal bool bUseUserOverrides; // 0x50
		internal static CalendarData Invariant; // 0x00
	
		// Constructors
		private CalendarData(); // 0x005725D4-0x005725E4
		static CalendarData(); // 0x005725E4-0x00573FC8
		internal CalendarData(string localeName, int calendarId, bool bUseUserOverrides); // 0x00573FC8-0x00574874
	
		// Methods
		private void InitializeEraNames(string localeName, int calendarId); // 0x005748CC-0x00575080
		private void InitializeAbbreviatedEraNames(string localeName, int calendarId); // 0x00575080-0x0057550C
		internal static CalendarData GetCalendarData(int calendarId); // 0x00571F4C-0x00572040
		private static string CalendarIdToCultureName(int calendarId); // 0x0057550C-0x00575588
		public static int nativeGetTwoDigitYearMax(int calID); // 0x00572570-0x005725D4
		private static bool nativeGetCalendarData(CalendarData data, string localeName, int calendarId); // 0x00574874-0x005748CC
		private bool fill_calendar_data(string localeName, int datetimeIndex); // 0x00575588-0x0057558C
	}

	[Serializable]
	[ComVisible] // 0x0013CBDC-0x0013CC10
	[Flags] // 0x0013CBDC-0x0013CC10
	public enum CompareOptions // TypeDefIndex: 650
	{
		None = 0,
		IgnoreCase = 1,
		IgnoreNonSpace = 2,
		IgnoreSymbols = 4,
		IgnoreKanaType = 8,
		IgnoreWidth = 16,
		OrdinalIgnoreCase = 268435456,
		StringSort = 536870912,
		Ordinal = 1073741824
	}

	[Serializable]
	[ComVisible] // 0x0013CC10-0x0013CC24
	public class CompareInfo : IDeserializationCallback // TypeDefIndex: 651
	{
		// Fields
		private const CompareOptions ValidIndexMaskOffFlags = CompareOptions.None | CompareOptions.OrdinalIgnoreCase | CompareOptions.StringSort | CompareOptions.Ordinal; // Metadata: 0x002047EB
		private const CompareOptions ValidCompareMaskOffFlags = CompareOptions.None | CompareOptions.OrdinalIgnoreCase | CompareOptions.Ordinal; // Metadata: 0x002047EF
		private const CompareOptions ValidHashCodeOfStringMaskOffFlags = CompareOptions.None | CompareOptions.OrdinalIgnoreCase | CompareOptions.StringSort | CompareOptions.Ordinal; // Metadata: 0x002047F3
		[OptionalField] // 0x00142814-0x00142844
		private string m_name; // 0x08
		[NonSerialized]
		private string m_sortName; // 0x0C
		[OptionalField] // 0x00142844-0x00142874
		private int win32LCID; // 0x10
		private int culture; // 0x14
		private const int LINGUISTIC_IGNORECASE = 16; // Metadata: 0x002047F7
		private const int NORM_IGNORECASE = 1; // Metadata: 0x002047FB
		private const int NORM_IGNOREKANATYPE = 65536; // Metadata: 0x002047FF
		private const int LINGUISTIC_IGNOREDIACRITIC = 32; // Metadata: 0x00204803
		private const int NORM_IGNORENONSPACE = 2; // Metadata: 0x00204807
		private const int NORM_IGNORESYMBOLS = 4; // Metadata: 0x0020480B
		private const int NORM_IGNOREWIDTH = 131072; // Metadata: 0x0020480F
		private const int SORT_STRINGSORT = 4096; // Metadata: 0x00204813
		private const int COMPARE_OPTIONS_ORDINAL = 1073741824; // Metadata: 0x00204817
		internal const int NORM_LINGUISTIC_CASING = 134217728; // Metadata: 0x0020481B
		private const int RESERVED_FIND_ASCII_STRING = 536870912; // Metadata: 0x0020481F
		private const int SORT_VERSION_WHIDBEY = 4096; // Metadata: 0x00204823
		private const int SORT_VERSION_V4 = 393473; // Metadata: 0x00204827
		[OptionalField] // 0x00142874-0x001428A4
		private SortVersion m_SortVersion; // 0x18
		[NonSerialized]
		private SimpleCollator collator; // 0x1C
		private static Dictionary<string, SimpleCollator> collators; // 0x00
		private static bool managedCollation; // 0x04
		private static bool managedCollationChecked; // 0x05
	
		// Properties
		[ComVisible] // 0x001464CC-0x001464E0
		public virtual string Name { get; } // 0x005766B4-0x00576750 
		private static bool UseManagedCollation { get; } // 0x00577138-0x0057723C 
	
		// Constructors
		internal CompareInfo(CultureInfo culture); // 0x0057635C-0x005763B8
	
		// Methods
		public static CompareInfo GetCompareInfo(string name); // 0x005763B8-0x005764C4
		[OnDeserializing] // 0x001450BC-0x001450CC
		private void OnDeserializing(StreamingContext ctx); // 0x005764C4-0x005764D0
		private void OnDeserialized(); // 0x005764D0-0x005765E4
		[OnDeserialized] // 0x001450CC-0x001450DC
		private void OnDeserialized(StreamingContext ctx); // 0x005765E4-0x005765E8
		[OnSerializing] // 0x001450DC-0x001450EC
		private void OnSerializing(StreamingContext ctx); // 0x005765E8-0x005766B0
		void IDeserializationCallback.OnDeserialization(object sender); // 0x005766B0-0x005766B4
		public virtual int Compare(string string1, string string2); // 0x00576750-0x0057677C
		public virtual int Compare(string string1, string string2, CompareOptions options); // 0x0057677C-0x0057696C
		public virtual int Compare(string string1, int offset1, int length1, string string2, int offset2, int length2, CompareOptions options); // 0x005769EC-0x00576E30
		private static int CompareOrdinal(string string1, int offset1, int length1, string string2, int offset2, int length2); // 0x00576E30-0x00576E90
		public virtual bool IsPrefix(string source, string prefix, CompareOptions options); // 0x00576E90-0x00577138
		public virtual bool IsSuffix(string source, string suffix, CompareOptions options); // 0x00577500-0x005777DC
		public virtual int IndexOf(string source, string value, int startIndex, int count, CompareOptions options); // 0x005777DC-0x00577B28
		public virtual int LastIndexOf(string source, string value, int startIndex, int count, CompareOptions options); // 0x00577BE4-0x00577F2C
		public virtual SortKey GetSortKey(string source, CompareOptions options); // 0x00577F2C-0x00577F30
		private SortKey CreateSortKey(string source, CompareOptions options); // 0x00577F30-0x00578084
		public override bool Equals(object value); // 0x00578174-0x0057825C
		public override int GetHashCode(); // 0x0057825C-0x005782A0
		internal int GetHashCodeOfString(string source, CompareOptions options); // 0x005782A0-0x005782BC
		internal int GetHashCodeOfString(string source, CompareOptions options, bool forceRandomizedHashing, long additionalEntropy); // 0x005782BC-0x00578438
		public override string ToString(); // 0x00578438-0x005784B4
		private SimpleCollator GetCollator(); // 0x0057723C-0x00577500
		private SortKey CreateSortKeyCore(string source, CompareOptions options); // 0x00578084-0x00578174
		private int internal_index_switch(string s1, int sindex, int count, string s2, CompareOptions opt, bool first); // 0x00577B28-0x00577BE4
		private int internal_compare_switch(string str1, int offset1, int length1, string str2, int offset2, int length2, CompareOptions options); // 0x0057696C-0x005769EC
		private int internal_compare_managed(string str1, int offset1, int length1, string str2, int offset2, int length2, CompareOptions options); // 0x00578570-0x005785E4
		private int internal_index_managed(string s1, int sindex, int count, string s2, CompareOptions opt, bool first); // 0x005784E4-0x0057856C
		private void assign_sortkey(object key, string source, CompareOptions options); // 0x005784B4-0x005784B8
		private int internal_compare(string str1, int offset1, int length1, string str2, int offset2, int length2, CompareOptions options); // 0x0057856C-0x00578570
		private int internal_index(string source, int sindex, int count, string value, CompareOptions options, bool first); // 0x005784B8-0x005784E4
	}

	[Serializable]
	[ComVisible] // 0x0013CC24-0x0013CC38
	public class CultureNotFoundException : ArgumentException, ISerializable // TypeDefIndex: 652
	{
		// Fields
		private string m_invalidCultureName; // 0x48
		private int? m_invalidCultureId; // 0x4C
	
		// Properties
		public virtual int? InvalidCultureId { get; } // 0x00690290-0x006902A4 
		public virtual string InvalidCultureName { get; } // 0x006902A4-0x006902AC 
		private static string DefaultMessage { get; } // 0x0068FDF0-0x0068FE50 
		private string FormatedInvalidCultureId { get; } // 0x006902AC-0x00690414 
		public override string Message { get; } // 0x00690414-0x00690570 
	
		// Constructors
		public CultureNotFoundException(); // 0x0068FDCC-0x0068FDF0
		public CultureNotFoundException(string paramName, string message); // 0x0068CB44-0x0068CB58
		public CultureNotFoundException(string paramName, string invalidCultureName, string message); // 0x0068FE50-0x0068FE78
		protected CultureNotFoundException(SerializationInfo info, StreamingContext context); // 0x0068FE78-0x006900DC
	
		// Methods
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x006900DC-0x00690290
	}

	[Flags] // 0x0013CC38-0x0013CC48
	internal enum MonthNameStyles // TypeDefIndex: 653
	{
		Regular = 0,
		Genitive = 1,
		LeapYear = 2
	}

	[Flags] // 0x0013CC48-0x0013CC58
	internal enum DateTimeFormatFlags // TypeDefIndex: 654
	{
		NotInitialized = -1,
		None = 0,
		UseGenitiveMonth = 1,
		UseLeapYearMonth = 2,
		UseSpacesInMonthNames = 4,
		UseHebrewRule = 8,
		UseSpacesInDayNames = 16,
		UseDigitPrefixInTokens = 32
	}

	[Serializable]
	[ComVisible] // 0x0013CC58-0x0013CC6C
	public sealed class DateTimeFormatInfo : ICloneable, IFormatProvider // TypeDefIndex: 655
	{
		// Fields
		private static DateTimeFormatInfo invariantInfo; // 0x00
		[NonSerialized]
		private CultureData m_cultureData; // 0x08
		[OptionalField] // 0x001428A4-0x001428D4
		internal string m_name; // 0x0C
		[NonSerialized]
		private string m_langName; // 0x10
		[NonSerialized]
		private CompareInfo m_compareInfo; // 0x14
		[NonSerialized]
		private CultureInfo m_cultureInfo; // 0x18
		internal string amDesignator; // 0x1C
		internal string pmDesignator; // 0x20
		[OptionalField] // 0x001428D4-0x00142904
		internal string dateSeparator; // 0x24
		[OptionalField] // 0x00142904-0x00142934
		internal string generalShortTimePattern; // 0x28
		[OptionalField] // 0x00142934-0x00142964
		internal string generalLongTimePattern; // 0x2C
		[OptionalField] // 0x00142964-0x00142994
		internal string timeSeparator; // 0x30
		internal string monthDayPattern; // 0x34
		[OptionalField] // 0x00142994-0x001429C4
		internal string dateTimeOffsetPattern; // 0x38
		internal const string rfc1123Pattern = "ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'"; // Metadata: 0x00204857
		internal const string sortableDateTimePattern = "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss"; // Metadata: 0x0020487E
		internal const string universalSortableDateTimePattern = "yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'"; // Metadata: 0x0020489F
		internal Calendar calendar; // 0x3C
		internal int firstDayOfWeek; // 0x40
		internal int calendarWeekRule; // 0x44
		[NonSerialized]
		[OptionalField] // 0x001429C4-0x001429F4
		internal string fullDateTimePattern; // 0x48
		internal string[] abbreviatedDayNames; // 0x4C
		[OptionalField] // 0x001429F4-0x00142A24
		internal string[] m_superShortDayNames; // 0x50
		internal string[] dayNames; // 0x54
		internal string[] abbreviatedMonthNames; // 0x58
		internal string[] monthNames; // 0x5C
		[OptionalField] // 0x00142A24-0x00142A54
		internal string[] genitiveMonthNames; // 0x60
		[OptionalField] // 0x00142A54-0x00142A84
		internal string[] m_genitiveAbbreviatedMonthNames; // 0x64
		[OptionalField] // 0x00142A84-0x00142AB4
		internal string[] leapYearMonthNames; // 0x68
		internal string longDatePattern; // 0x6C
		internal string shortDatePattern; // 0x70
		internal string yearMonthPattern; // 0x74
		internal string longTimePattern; // 0x78
		internal string shortTimePattern; // 0x7C
		[OptionalField] // 0x00142AB4-0x00142AE4
		private string[] allYearMonthPatterns; // 0x80
		internal string[] allShortDatePatterns; // 0x84
		internal string[] allLongDatePatterns; // 0x88
		internal string[] allShortTimePatterns; // 0x8C
		internal string[] allLongTimePatterns; // 0x90
		internal string[] m_eraNames; // 0x94
		internal string[] m_abbrevEraNames; // 0x98
		internal string[] m_abbrevEnglishEraNames; // 0x9C
		internal int[] optionalCalendars; // 0xA0
		private const int DEFAULT_ALL_DATETIMES_SIZE = 132; // Metadata: 0x002048C1
		internal bool m_isReadOnly; // 0xA4
		[OptionalField] // 0x00142AE4-0x00142B14
		internal DateTimeFormatFlags formatFlags; // 0xA8
		internal static bool preferExistingTokens; // 0x04
		[OptionalField] // 0x00142B14-0x00142B44
		private int CultureID; // 0xAC
		[OptionalField] // 0x00142B44-0x00142B74
		private bool m_useUserOverride; // 0xB0
		[OptionalField] // 0x00142B74-0x00142BA4
		private bool bUseCalendarInfo; // 0xB1
		[OptionalField] // 0x00142BA4-0x00142BD4
		private int nDataItem; // 0xB4
		[OptionalField] // 0x00142BD4-0x00142C04
		internal bool m_isDefaultCalendar; // 0xB8
		[OptionalField] // 0x00142C04-0x00142C34
		private static Hashtable s_calendarNativeNames; // 0x08
		[OptionalField] // 0x00142C34-0x00142C64
		internal string[] m_dateWords; // 0xBC
		[NonSerialized]
		private string m_fullTimeSpanPositivePattern; // 0xC0
		[NonSerialized]
		private string m_fullTimeSpanNegativePattern; // 0xC4
		internal const DateTimeStyles InvalidDateTimeStyles = DateTimeStyles.None; // Metadata: 0x002048C5
		[NonSerialized]
		private TokenHashValue[] m_dtfiTokenHash; // 0xC8
		private const int TOKEN_HASH_SIZE = 199; // Metadata: 0x002048C9
		private const int SECOND_PRIME = 197; // Metadata: 0x002048CD
		private const string dateSeparatorOrTimeZoneOffset = "-"; // Metadata: 0x002048D1
		private const string invariantDateSeparator = "/"; // Metadata: 0x002048D6
		private const string invariantTimeSeparator = ":"; // Metadata: 0x002048DB
		internal const string IgnorablePeriod = "."; // Metadata: 0x002048E0
		internal const string IgnorableComma = ","; // Metadata: 0x002048E5
		internal const string CJKYearSuff = "\uFFFD"; // Metadata: 0x002048EA
		internal const string CJKMonthSuff = "\uFFFD"; // Metadata: 0x002048F1
		internal const string CJKDaySuff = "\uFFFD"; // Metadata: 0x002048F8
		internal const string KoreanYearSuff = "\uFFFD"; // Metadata: 0x002048FF
		internal const string KoreanMonthSuff = "\uFFFD"; // Metadata: 0x00204906
		internal const string KoreanDaySuff = "\uFFFD"; // Metadata: 0x0020490D
		internal const string KoreanHourSuff = "\uFFFD"; // Metadata: 0x00204914
		internal const string KoreanMinuteSuff = "\uFFFD"; // Metadata: 0x0020491B
		internal const string KoreanSecondSuff = "\uFFFD"; // Metadata: 0x00204922
		internal const string CJKHourSuff = "\uFFFD"; // Metadata: 0x00204929
		internal const string ChineseHourSuff = "\uFFFD"; // Metadata: 0x00204930
		internal const string CJKMinuteSuff = "\uFFFD"; // Metadata: 0x00204937
		internal const string CJKSecondSuff = "\uFFFD"; // Metadata: 0x0020493E
		internal const string LocalTimeMark = "T"; // Metadata: 0x00204945
		internal const string KoreanLangName = "ko"; // Metadata: 0x0020494A
		internal const string JapaneseLangName = "ja"; // Metadata: 0x00204950
		internal const string EnglishLangName = "en"; // Metadata: 0x00204956
		private static DateTimeFormatInfo s_jajpDTFI; // 0x0C
		private static DateTimeFormatInfo s_zhtwDTFI; // 0x10
	
		// Properties
		private string CultureName { get; } // 0x00690578-0x006905B0 
		private CultureInfo Culture { get; } // 0x006905B0-0x00690668 
		private string LanguageName { get; } // 0x00690668-0x006906A0 
		public static DateTimeFormatInfo InvariantInfo { get; } // 0x00691F08-0x0069208C 
		public static DateTimeFormatInfo CurrentInfo { get; } // 0x0069208C-0x00692218 
		public string AMDesignator { get; } // 0x006924B0-0x006924B8 
		public Calendar Calendar { get; set; } // 0x0069070C-0x00690714 0x00690A88-0x00690D80
		private int[] OptionalCalendars { get; } // 0x006924C0-0x006924FC 
		internal string[] EraNames { get; } // 0x00692510-0x0069257C 
		internal string[] AbbreviatedEraNames { get; } // 0x006926E4-0x00692750 
		internal string[] AbbreviatedEnglishEraNames { get; } // 0x006928E8-0x00692954 
		public string DateSeparator { get; } // 0x00692954-0x0069295C 
		public string FullDateTimePattern { get; } // 0x0069295C-0x006929EC 
		public string LongDatePattern { get; set; } // 0x00691A8C-0x00691AE8 0x0069122C-0x0069136C
		public string LongTimePattern { get; set; } // 0x00691A30-0x00691A8C 0x006915F0-0x00691738
		public string MonthDayPattern { get; } // 0x00692A98-0x00692B04 
		public string PMDesignator { get; } // 0x00692B04-0x00692B0C 
		public string RFC1123Pattern { get; } // 0x00692B0C-0x00692B68 
		public string ShortDatePattern { get; set; } // 0x00691B44-0x00691BA0 0x0069136C-0x006914B4
		public string ShortTimePattern { get; set; } // 0x00691AE8-0x00691B44 0x00691738-0x00691878
		public string SortableDateTimePattern { get; } // 0x00692C14-0x00692C70 
		internal string GeneralShortTimePattern { get; } // 0x00692C70-0x00692D00 
		internal string GeneralLongTimePattern { get; } // 0x00692D00-0x00692D90 
		internal string DateTimeOffsetPattern { get; } // 0x00692D90-0x00692F74 
		public string TimeSeparator { get; } // 0x00692F74-0x00692F7C 
		public string UniversalSortableDateTimePattern { get; } // 0x00692F7C-0x00692FD8 
		public string YearMonthPattern { get; set; } // 0x00691BA0-0x00691BFC 0x006914B4-0x006915F0
		public string[] AbbreviatedDayNames { get; } // 0x00693044-0x00693154 
		public string[] DayNames { get; } // 0x00693154-0x00693264 
		public string[] AbbreviatedMonthNames { get; } // 0x00693264-0x00693374 
		public string[] MonthNames { get; } // 0x00693374-0x00693484 
		internal bool HasSpacesInMonthNames { get; } // 0x00693484-0x00693498 
		internal bool HasSpacesInDayNames { get; } // 0x00693604-0x00693618 
		private string[] AllYearMonthPatterns { get; } // 0x00691E6C-0x00691F08 
		private string[] AllShortDatePatterns { get; } // 0x00691DD0-0x00691E6C 
		private string[] AllShortTimePatterns { get; } // 0x00691D34-0x00691DD0 
		private string[] AllLongDatePatterns { get; } // 0x00691C98-0x00691D34 
		private string[] AllLongTimePatterns { get; } // 0x00691BFC-0x00691C98 
		private string[] UnclonedYearMonthPatterns { get; } // 0x00692FD8-0x00693044 
		private string[] UnclonedShortDatePatterns { get; } // 0x00692B68-0x00692BD4 
		private string[] UnclonedLongDatePatterns { get; } // 0x006929EC-0x00692A58 
		private string[] UnclonedShortTimePatterns { get; } // 0x00692BD4-0x00692C14 
		private string[] UnclonedLongTimePatterns { get; } // 0x00692A58-0x00692A98 
		public bool IsReadOnly { get; } // 0x006924B8-0x006924C0 
		[ComVisible] // 0x001464E0-0x001464F4
		public string[] MonthGenitiveNames { get; } // 0x00694B90-0x00694CA4 
		internal string FullTimeSpanPositivePattern { get; } // 0x00694CA4-0x00694DB4 
		internal string FullTimeSpanNegativePattern { get; } // 0x00694DB4-0x00694E34 
		internal CompareInfo CompareInfo { get; } // 0x00694E34-0x00694EBC 
		internal DateTimeFormatFlags FormatFlags { get; } // 0x00693498-0x00693604 
		internal bool HasForceTwoDigitYears { get; } // 0x00695184-0x006951C8 
		internal bool HasYearMonthAdjustment { get; } // 0x006951C8-0x006951DC 
	
		// Constructors
		public DateTimeFormatInfo(); // 0x00690858-0x0069094C
		internal DateTimeFormatInfo(CultureData cultureData, Calendar cal); // 0x0068C3D0-0x0068C414
		static DateTimeFormatInfo(); // 0x00698200-0x00698268
	
		// Methods
		private static bool InitPreferExistingTokens(); // 0x00690570-0x00690578
		private string[] internalGetAbbreviatedDayOfWeekNames(); // 0x006906A0-0x0069070C
		private string[] internalGetDayOfWeekNames(); // 0x00690714-0x00690780
		private string[] internalGetAbbreviatedMonthNames(); // 0x00690780-0x006907EC
		private string[] internalGetMonthNames(); // 0x006907EC-0x00690858
		private void InitializeOverridableProperties(CultureData cultureData, int calendarID); // 0x00690D80-0x00690F2C
		[OnDeserialized] // 0x001450EC-0x001450FC
		private void OnDeserialized(StreamingContext ctx); // 0x00690F2C-0x0069122C
		[OnSerializing] // 0x001450FC-0x0014510C
		private void OnSerializing(StreamingContext ctx); // 0x00691878-0x00691A30
		public static DateTimeFormatInfo GetInstance(IFormatProvider provider); // 0x00692218-0x00692400
		public object GetFormat(Type formatType); // 0x00692400-0x006924B0
		public object Clone(); // 0x0068BC70-0x0068BE38
		public string GetEraName(int era); // 0x0069257C-0x006926E4
		public string GetAbbreviatedEraName(int era); // 0x00692750-0x006928E8
		internal string internalGetMonthName(int month, MonthNameStyles style, bool abbreviated); // 0x00693618-0x00693830
		private string[] internalGetGenitiveMonthNames(bool abbreviated); // 0x00693830-0x00693908
		internal string[] internalGetLeapYearMonthNames(); // 0x00693908-0x00693974
		public string GetAbbreviatedDayName(DayOfWeek dayofweek); // 0x00693974-0x00693B38
		private static string[] GetCombinedPatterns(string[] patterns1, string[] patterns2, string connectString); // 0x00693B38-0x00693D24
		public string[] GetAllDateTimePatterns(char format); // 0x00693D24-0x006942E0
		public string GetDayName(DayOfWeek dayofweek); // 0x006942E0-0x006944A4
		public string GetAbbreviatedMonthName(int month); // 0x006944A4-0x0069466C
		public string GetMonthName(int month); // 0x0069466C-0x00694834
		private static string[] GetMergedPatterns(string[] patterns, string defaultPattern); // 0x00694834-0x00694B90
		internal static void ValidateStyles(DateTimeStyles style, string parameterName); // 0x00694EBC-0x0069503C
		internal bool YearMonthAdjustment(ref int year, ref int month, bool parsedMonthName); // 0x006951DC-0x00695360
		internal static DateTimeFormatInfo GetJapaneseCalendarDTFI(); // 0x00695360-0x006954FC
		internal static DateTimeFormatInfo GetTaiwanCalendarDTFI(); // 0x00695634-0x006957D4
		private void ClearTokenHashTable(); // 0x006924FC-0x00692510
		internal TokenHashValue[] CreateTokenHashTable(); // 0x006957D4-0x0069693C
		private void AddMonthNames(TokenHashValue[] temp, string monthPostfix); // 0x0069735C-0x00697428
		private static bool TryParseHebrewNumber(ref __DTString str, out bool badFormat, out int number); // 0x00697428-0x006975EC
		private static bool IsHebrewChar(char ch); // 0x00697A24-0x00697A3C
		internal bool Tokenize(TokenType TokenMask, out TokenType tokenType, out int tokenValue, ref __DTString str); // 0x00697A3C-0x00697F88
		private void InsertAtCurrentHashNode(TokenHashValue[] hashTable, string str, char ch, TokenType tokenType, int tokenValue, int pos, int hashcode, int hashProbe); // 0x00697F88-0x00698200
		private void InsertHash(TokenHashValue[] hashTable, string str, TokenType tokenType, int tokenValue); // 0x0069693C-0x00696EC4
	}

	internal class TokenHashValue // TypeDefIndex: 656
	{
		// Fields
		internal string tokenString; // 0x08
		internal TokenType tokenType; // 0x0C
		internal int tokenValue; // 0x10
	
		// Constructors
		internal TokenHashValue(string tokenString, TokenType tokenType, int tokenValue); // 0x0042111C-0x00421478
	}

	internal enum FORMATFLAGS // TypeDefIndex: 657
	{
		None = 0,
		UseGenitiveMonth = 1,
		UseLeapYearMonth = 2,
		UseSpacesInMonthNames = 4,
		UseHebrewParsing = 8,
		UseSpacesInDayNames = 16,
		UseDigitPrefixInTokens = 32
	}

	internal enum CalendarId : ushort // TypeDefIndex: 658
	{
		GREGORIAN = 1,
		GREGORIAN_US = 2,
		JAPAN = 3,
		TAIWAN = 4,
		KOREA = 5,
		HIJRI = 6,
		THAI = 7,
		HEBREW = 8,
		GREGORIAN_ME_FRENCH = 9,
		GREGORIAN_ARABIC = 10,
		GREGORIAN_XLIT_ENGLISH = 11,
		GREGORIAN_XLIT_FRENCH = 12,
		JULIAN = 13,
		JAPANESELUNISOLAR = 14,
		CHINESELUNISOLAR = 15,
		SAKA = 16,
		LUNAR_ETO_CHN = 17,
		LUNAR_ETO_KOR = 18,
		LUNAR_ETO_ROKUYOU = 19,
		KOREANLUNISOLAR = 20,
		TAIWANLUNISOLAR = 21,
		PERSIAN = 22,
		UMALQURA = 23,
		LAST_CALENDAR = 23
	}

	internal class DateTimeFormatInfoScanner // TypeDefIndex: 659
	{
		// Fields
		internal List<string> m_dateWords; // 0x08
		private static Dictionary<string, string> s_knownWords; // 0x00
		private FoundDatePattern m_ymdFlags; // 0x0C
	
		// Properties
		private static Dictionary<string, string> KnownWords { get; } // 0x00698268-0x00698880 
	
		// Nested types
		private enum FoundDatePattern // TypeDefIndex: 660
		{
			None = 0,
			FoundYearPatternFlag = 1,
			FoundMonthPatternFlag = 2,
			FoundDayPatternFlag = 4,
			FoundYMDPatternFlag = 7
		}
	
		// Constructors
		public DateTimeFormatInfoScanner(); // 0x00696EC4-0x00696F50
	
		// Methods
		internal static int SkipWhiteSpacesAndNonLetter(string pattern, int currentIndex); // 0x00698880-0x006989CC
		internal void AddDateWordOrPostfix(string formatPostfix, string str); // 0x006989CC-0x00698D3C
		internal int AddDateWords(string pattern, int index, string formatPostfix); // 0x00698E54-0x006990BC
		internal static int ScanRepeatChar(string pattern, char ch, int index, out int count); // 0x006990BC-0x00699140
		internal void AddIgnorableSymbols(string text); // 0x00698D3C-0x00698E54
		internal void ScanDateWord(string pattern); // 0x00699140-0x006993DC
		internal string[] GetDateWordsOfDTFI(DateTimeFormatInfo dtfi); // 0x00696F50-0x0069735C
		internal static FORMATFLAGS GetFormatFlagGenitiveMonth(string[] monthNames, string[] genitveMonthNames, string[] abbrevMonthNames, string[] genetiveAbbrevMonthNames); // 0x0069503C-0x00695080
		internal static FORMATFLAGS GetFormatFlagUseSpaceInMonthNames(string[] monthNames, string[] genitveMonthNames, string[] abbrevMonthNames, string[] genetiveAbbrevMonthNames); // 0x00695080-0x00695134
		internal static FORMATFLAGS GetFormatFlagUseSpaceInDayNames(string[] dayNames, string[] abbrevDayNames); // 0x00695134-0x00695170
		internal static FORMATFLAGS GetFormatFlagUseHebrewCalendar(int calID); // 0x00695170-0x00695184
		private static bool EqualStringArrays(string[] array1, string[] array2); // 0x006993DC-0x006994D0
		private static bool ArrayElementsHaveSpace(string[] array); // 0x00699934-0x00699A90
		private static bool ArrayElementsBeginWithDigit(string[] array); // 0x006994D0-0x00699934
	}

	[Serializable]
	[ComVisible] // 0x0013CC6C-0x0013CCA0
	[Flags] // 0x0013CC6C-0x0013CCA0
	public enum DateTimeStyles // TypeDefIndex: 661
	{
		None = 0,
		AllowLeadingWhite = 1,
		AllowTrailingWhite = 2,
		AllowInnerWhite = 4,
		AllowWhiteSpaces = 7,
		NoCurrentDateDefault = 8,
		AdjustToUniversal = 16,
		AssumeLocal = 32,
		AssumeUniversal = 64,
		RoundtripKind = 128
	}

	[Serializable]
	[ComVisible] // 0x0013CCA0-0x0013CCB4
	public class GregorianCalendar : Calendar // TypeDefIndex: 662
	{
		// Fields
		internal GregorianCalendarTypes m_type; // 0x14
		internal static readonly int[] DaysToMonth365; // 0x00
		internal static readonly int[] DaysToMonth366; // 0x04
		private static Calendar s_defaultInstance; // 0x08
	
		// Properties
		[ComVisible] // 0x001464F4-0x00146508
		public override DateTime MinSupportedDateTime { get; } // 0x006A1A54-0x006A1AE8 
		[ComVisible] // 0x00146508-0x0014651C
		public override DateTime MaxSupportedDateTime { get; } // 0x006A1AE8-0x006A1B7C 
		internal override int ID { get; } // 0x006A1B84-0x006A1B8C 
		public override int[] Eras { get; } // 0x006A2260-0x006A22FC 
		public override int TwoDigitYearMax { get; } // 0x006A29D4-0x006A2A14 
	
		// Constructors
		public GregorianCalendar(); // 0x006A1B7C-0x006A1B84
		public GregorianCalendar(GregorianCalendarTypes type); // 0x0068F6E0-0x0068F874
		static GregorianCalendar(); // 0x006A2BF8-0x006A2CC8
	
		// Methods
		[OnDeserialized] // 0x0014510C-0x0014511C
		private void OnDeserialized(StreamingContext ctx); // 0x006A1914-0x006A1A54
		internal static Calendar GetDefaultInstance(); // 0x0069094C-0x00690A88
		internal virtual int GetDatePart(long ticks, int part); // 0x006A1B8C-0x006A1E28
		public override int GetDayOfMonth(DateTime time); // 0x006A1E28-0x006A1E7C
		public override DayOfWeek GetDayOfWeek(DateTime time); // 0x006A1E7C-0x006A1ECC
		public override int GetDaysInMonth(int year, int month, int era); // 0x006A1ECC-0x006A2258
		public override int GetEra(DateTime time); // 0x006A2258-0x006A2260
		public override int GetMonth(DateTime time); // 0x006A22FC-0x006A2350
		public override int GetMonthsInYear(int year, int era); // 0x006A2350-0x006A2528
		public override int GetYear(DateTime time); // 0x006A2528-0x006A257C
		public override bool IsLeapYear(int year, int era); // 0x006A257C-0x006A279C
		public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era); // 0x006A279C-0x006A28C0
		internal override bool TryToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era, out DateTime result); // 0x006A28C0-0x006A29D4
		public override int ToFourDigitYear(int year); // 0x006A2A14-0x006A2BF8
	}

	[Serializable]
	internal class EraInfo // TypeDefIndex: 663
	{
		// Fields
		internal int era; // 0x08
		internal long ticks; // 0x10
		internal int yearOffset; // 0x18
		internal int minEraYear; // 0x1C
		internal int maxEraYear; // 0x20
		[OptionalField] // 0x00142C64-0x00142C94
		internal string eraName; // 0x24
		[OptionalField] // 0x00142C94-0x00142CC4
		internal string abbrevEraName; // 0x28
		[OptionalField] // 0x00142CC4-0x00142CF4
		internal string englishEraName; // 0x2C
	
		// Constructors
		internal EraInfo(int era, int startYear, int startMonth, int startDay, int yearOffset, int minEraYear, int maxEraYear); // 0x006A17FC-0x006A1880
		internal EraInfo(int era, int startYear, int startMonth, int startDay, int yearOffset, int minEraYear, int maxEraYear, string eraName, string abbrevEraName, string englishEraName); // 0x006A1880-0x006A1914
	}

	[Serializable]
	internal class GregorianCalendarHelper // TypeDefIndex: 664
	{
		// Fields
		internal static readonly int[] DaysToMonth365; // 0x00
		internal static readonly int[] DaysToMonth366; // 0x04
		[OptionalField] // 0x00142CF4-0x00142D24
		internal int m_maxYear; // 0x08
		[OptionalField] // 0x00142D24-0x00142D54
		internal int m_minYear; // 0x0C
		internal Calendar m_Cal; // 0x10
		[OptionalField] // 0x00142D54-0x00142D84
		internal EraInfo[] m_EraInfo; // 0x14
		[OptionalField] // 0x00142D84-0x00142DB4
		internal int[] m_eras; // 0x18
		[OptionalField] // 0x00142DB4-0x00142DE4
		internal DateTime m_minDate; // 0x20
	
		// Properties
		internal int MaxYear { get; } // 0x006A2CC8-0x006A2CD0 
		public int[] Eras { get; } // 0x006A429C-0x006A4488 
	
		// Constructors
		internal GregorianCalendarHelper(Calendar cal, EraInfo[] eraInfo); // 0x006A2CD0-0x006A2E08
		static GregorianCalendarHelper(); // 0x006A4828-0x006A48F8
	
		// Methods
		internal int GetGregorianYear(int year, int era); // 0x006A2E08-0x006A3228
		internal bool IsValidYear(int year, int era); // 0x006A3228-0x006A33AC
		internal virtual int GetDatePart(long ticks, int part); // 0x006A33AC-0x006A3664
		internal static long GetAbsoluteDate(int year, int month, int day); // 0x006A38D4-0x006A3B58
		internal static long DateToTicks(int year, int month, int day); // 0x006A3B58-0x006A3C04
		internal static long TimeToTicks(int hour, int minute, int second, int millisecond); // 0x006A3C04-0x006A3E1C
		internal void CheckTicksRange(long ticks); // 0x006A3664-0x006A38D4
		public int GetDayOfMonth(DateTime time); // 0x006A3E1C-0x006A3E70
		public DayOfWeek GetDayOfWeek(DateTime time); // 0x006A3E70-0x006A3EE4
		public int GetDaysInMonth(int year, int month, int era); // 0x006A3EE4-0x006A40FC
		public int GetEra(DateTime time); // 0x006A40FC-0x006A429C
		public int GetMonth(DateTime time); // 0x006A4488-0x006A44DC
		public int GetMonthsInYear(int year, int era); // 0x006A44DC-0x006A44F0
		public int GetYear(DateTime time); // 0x006A44F0-0x006A46C0
		public bool IsLeapYear(int year, int era); // 0x006A46C0-0x006A4724
		public DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era); // 0x006A4724-0x006A4828
	}

	[Serializable]
	[ComVisible] // 0x0013CCB4-0x0013CCC8
	public enum GregorianCalendarTypes // TypeDefIndex: 665
	{
		Localized = 1,
		USEnglish = 2,
		MiddleEastFrench = 9,
		Arabic = 10,
		TransliteratedEnglish = 11,
		TransliteratedFrench = 12
	}

	internal struct HebrewNumberParsingContext // TypeDefIndex: 666
	{
		// Fields
		internal HebrewNumber.HS state; // 0x00
		internal int result; // 0x04
	
		// Constructors
		public HebrewNumberParsingContext(int result); // 0x006A63C8-0x006A63D8
	}

	internal enum HebrewNumberParsingState // TypeDefIndex: 667
	{
		InvalidHebrewNumber = 0,
		NotHebrewDigit = 1,
		FoundEndOfHebrewNumber = 2,
		ContinueParsing = 3
	}

	internal class HebrewNumber // TypeDefIndex: 668
	{
		// Fields
		private static HebrewValue[] HebrewValues; // 0x00
		private static char maxHebrewNumberCh; // 0x04
		private static readonly HS[][] NumberPasingState; // 0x08
	
		// Nested types
		private enum HebrewToken // TypeDefIndex: 669
		{
			Invalid = -1,
			Digit400 = 0,
			Digit200_300 = 1,
			Digit100 = 2,
			Digit10 = 3,
			Digit1 = 4,
			Digit6_7 = 5,
			Digit7 = 6,
			Digit9 = 7,
			SingleQuote = 8,
			DoubleQuote = 9
		}
	
		private class HebrewValue // TypeDefIndex: 670
		{
			// Fields
			internal HebrewToken token; // 0x08
			internal int value; // 0x0C
	
			// Constructors
			internal HebrewValue(HebrewToken token, int value); // 0x006A63A0-0x006A63C8
		}
	
		internal enum HS // TypeDefIndex: 671
		{
			_err = -1,
			Start = 0,
			S400 = 1,
			S400_400 = 2,
			S400_X00 = 3,
			S400_X0 = 4,
			X00_DQ = 5,
			S400_X00_X0 = 6,
			X0_DQ = 7,
			X = 8,
			X0 = 9,
			X00 = 10,
			S400_DQ = 11,
			S400_400_DQ = 12,
			S400_400_100 = 13,
			S9 = 14,
			X00_S9 = 15,
			S9_DQ = 16,
			END = 100
		}
	
		// Constructors
		static HebrewNumber(); // 0x006A4C1C-0x006A63A0
	
		// Methods
		internal static string ToString(int Number); // 0x006A48F8-0x006A4C1C
		internal static HebrewNumberParsingState ParseByChar(char ch, ref HebrewNumberParsingContext context); // 0x00697748-0x00697A24
		internal static bool IsDigit(char ch); // 0x006975EC-0x00697748
	}

	[Serializable]
	[ComVisible] // 0x0013CCC8-0x0013CCDC
	public class JapaneseCalendar : Calendar // TypeDefIndex: 672
	{
		// Fields
		internal static readonly DateTime calendarMinValue; // 0x00
		internal static EraInfo[] japaneseEraInfo; // 0x08
		internal static Calendar s_defaultInstance; // 0x0C
		internal GregorianCalendarHelper helper; // 0x14
	
		// Properties
		[ComVisible] // 0x0014651C-0x00146530
		public override DateTime MinSupportedDateTime { get; } // 0x006A7C44-0x006A7CD8 
		[ComVisible] // 0x00146530-0x00146544
		public override DateTime MaxSupportedDateTime { get; } // 0x006A7CD8-0x006A7D6C 
		internal override int ID { get; } // 0x006A845C-0x006A8464 
		public override int[] Eras { get; } // 0x006A8988-0x006A89B0 
		public override int TwoDigitYearMax { get; } // 0x006A8E5C-0x006A8E9C 
	
		// Constructors
		public JapaneseCalendar(); // 0x006A826C-0x006A845C
		static JapaneseCalendar(); // 0x006A8E9C-0x006A8F30
	
		// Methods
		internal static EraInfo[] GetEraInfo(); // 0x006A7D6C-0x006A8264
		private static EraInfo[] GetErasFromRegistry(); // 0x006A8264-0x006A826C
		internal static Calendar GetDefaultInstance(); // 0x006954FC-0x00695634
		public override int GetDaysInMonth(int year, int month, int era); // 0x006A8464-0x006A84AC
		public override int GetDayOfMonth(DateTime time); // 0x006A84AC-0x006A8518
		public override DayOfWeek GetDayOfWeek(DateTime time); // 0x006A8518-0x006A8558
		public override int GetMonthsInYear(int year, int era); // 0x006A8558-0x006A8594
		public override int GetEra(DateTime time); // 0x006A8594-0x006A85D4
		public override int GetMonth(DateTime time); // 0x006A85D4-0x006A8640
		public override int GetYear(DateTime time); // 0x006A8640-0x006A8680
		public override bool IsLeapYear(int year, int era); // 0x006A8680-0x006A870C
		public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era); // 0x006A870C-0x006A8790
		public override int ToFourDigitYear(int year); // 0x006A8790-0x006A8988
		internal static string[] EraNames(); // 0x006A89B0-0x006A8B2C
		internal static string[] AbbrevEraNames(); // 0x006A8B2C-0x006A8CA8
		internal static string[] EnglishEraNames(); // 0x006A8CA8-0x006A8E24
		internal override bool IsValidYear(int year, int era); // 0x006A8E24-0x006A8E5C
	}

	[Serializable]
	[ComVisible] // 0x0013CCDC-0x0013CCF0
	public sealed class NumberFormatInfo : ICloneable, IFormatProvider // TypeDefIndex: 673
	{
		// Fields
		private static NumberFormatInfo invariantInfo; // 0x00
		internal int[] numberGroupSizes; // 0x08
		internal int[] currencyGroupSizes; // 0x0C
		internal int[] percentGroupSizes; // 0x10
		internal string positiveSign; // 0x14
		internal string negativeSign; // 0x18
		internal string numberDecimalSeparator; // 0x1C
		internal string numberGroupSeparator; // 0x20
		internal string currencyGroupSeparator; // 0x24
		internal string currencyDecimalSeparator; // 0x28
		internal string currencySymbol; // 0x2C
		internal string ansiCurrencySymbol; // 0x30
		internal string nanSymbol; // 0x34
		internal string positiveInfinitySymbol; // 0x38
		internal string negativeInfinitySymbol; // 0x3C
		internal string percentDecimalSeparator; // 0x40
		internal string percentGroupSeparator; // 0x44
		internal string percentSymbol; // 0x48
		internal string perMilleSymbol; // 0x4C
		[OptionalField] // 0x00142DE4-0x00142E14
		internal string[] nativeDigits; // 0x50
		[OptionalField] // 0x00142E14-0x00142E44
		internal int m_dataItem; // 0x54
		internal int numberDecimalDigits; // 0x58
		internal int currencyDecimalDigits; // 0x5C
		internal int currencyPositivePattern; // 0x60
		internal int currencyNegativePattern; // 0x64
		internal int numberNegativePattern; // 0x68
		internal int percentPositivePattern; // 0x6C
		internal int percentNegativePattern; // 0x70
		internal int percentDecimalDigits; // 0x74
		[OptionalField] // 0x00142E44-0x00142E74
		internal int digitSubstitution; // 0x78
		internal bool isReadOnly; // 0x7C
		[OptionalField] // 0x00142E74-0x00142EA4
		internal bool m_useUserOverride; // 0x7D
		[OptionalField] // 0x00142EA4-0x00142ED4
		internal bool m_isInvariant; // 0x7E
		[OptionalField] // 0x00142ED4-0x00142F04
		internal bool validForParseAsNumber; // 0x7F
		[OptionalField] // 0x00142F04-0x00142F34
		internal bool validForParseAsCurrency; // 0x80
		private const NumberStyles InvalidNumberStyles = NumberStyles.None; // Metadata: 0x00204A84
	
		// Properties
		public static NumberFormatInfo InvariantInfo { get; } // 0x00419954-0x00419A40 
		public int CurrencyDecimalDigits { get; } // 0x00419FDC-0x00419FE4 
		public string CurrencyDecimalSeparator { get; } // 0x00419FE4-0x00419FEC 
		public bool IsReadOnly { get; } // 0x00419FEC-0x00419FF4 
		public int[] CurrencyGroupSizes { get; } // 0x00419FF4-0x0041A0FC 
		public int[] NumberGroupSizes { get; } // 0x0041A0FC-0x0041A204 
		public int[] PercentGroupSizes { get; } // 0x0041A204-0x0041A30C 
		public string CurrencyGroupSeparator { get; } // 0x0041A30C-0x0041A314 
		public string CurrencySymbol { get; } // 0x0041A314-0x0041A31C 
		public static NumberFormatInfo CurrentInfo { get; } // 0x00419D70-0x00419EFC 
		public string NaNSymbol { get; } // 0x0041A31C-0x0041A324 
		public int CurrencyNegativePattern { get; } // 0x0041A324-0x0041A32C 
		public int NumberNegativePattern { get; } // 0x0041A32C-0x0041A334 
		public int PercentPositivePattern { get; } // 0x0041A334-0x0041A33C 
		public int PercentNegativePattern { get; } // 0x0041A33C-0x0041A344 
		public string NegativeInfinitySymbol { get; } // 0x0041A344-0x0041A34C 
		public string NegativeSign { get; } // 0x0041A34C-0x0041A354 
		public int NumberDecimalDigits { get; } // 0x0041A354-0x0041A35C 
		public string NumberDecimalSeparator { get; } // 0x0041A35C-0x0041A364 
		public string NumberGroupSeparator { get; } // 0x0041A364-0x0041A36C 
		public int CurrencyPositivePattern { get; } // 0x0041A36C-0x0041A374 
		public string PositiveInfinitySymbol { get; } // 0x0041A374-0x0041A37C 
		public string PositiveSign { get; } // 0x0041A37C-0x0041A384 
		public int PercentDecimalDigits { get; } // 0x0041A384-0x0041A38C 
		public string PercentDecimalSeparator { get; } // 0x0041A38C-0x0041A394 
		public string PercentGroupSeparator { get; } // 0x0041A394-0x0041A39C 
		public string PercentSymbol { get; } // 0x0041A39C-0x0041A3A4 
		public string PerMilleSymbol { get; } // 0x0041A3A4-0x0041A3AC 
	
		// Constructors
		public NumberFormatInfo(); // 0x004191C4-0x004191CC
		internal NumberFormatInfo(CultureData cultureData); // 0x004191CC-0x004198B8
	
		// Methods
		[OnSerializing] // 0x0014511C-0x0014512C
		private void OnSerializing(StreamingContext ctx); // 0x004198B8-0x0041994C
		[OnDeserializing] // 0x0014512C-0x0014513C
		private void OnDeserializing(StreamingContext ctx); // 0x0041994C-0x00419950
		[OnDeserialized] // 0x0014513C-0x0014514C
		private void OnDeserialized(StreamingContext ctx); // 0x00419950-0x00419954
		public static NumberFormatInfo GetInstance(IFormatProvider formatProvider); // 0x00419B98-0x00419D70
		public object Clone(); // 0x00419EFC-0x00419FDC
		public object GetFormat(Type formatType); // 0x0041A3AC-0x0041A45C
		public static NumberFormatInfo ReadOnly(NumberFormatInfo nfi); // 0x00419A40-0x00419B98
		internal static void ValidateParseStyleInteger(NumberStyles style); // 0x0041A45C-0x0041A58C
		internal static void ValidateParseStyleFloatingPoint(NumberStyles style); // 0x0041A58C-0x0041A6AC
	}

	[Serializable]
	[ComVisible] // 0x0013CCF0-0x0013CD24
	[Flags] // 0x0013CCF0-0x0013CD24
	public enum NumberStyles // TypeDefIndex: 674
	{
		None = 0,
		AllowLeadingWhite = 1,
		AllowTrailingWhite = 2,
		AllowLeadingSign = 4,
		Integer = 7,
		AllowTrailingSign = 8,
		AllowParentheses = 16,
		AllowDecimalPoint = 32,
		AllowThousands = 64,
		Number = 111,
		AllowExponent = 128,
		Float = 167,
		AllowCurrencySymbol = 256,
		Currency = 383,
		Any = 511,
		AllowHexSpecifier = 512,
		HexNumber = 515
	}

	[Serializable]
	public sealed class SortVersion : IEquatable<SortVersion> // TypeDefIndex: 675
	{
		// Fields
		private int m_NlsVersion; // 0x08
		private Guid m_SortId; // 0x0C
	
		// Methods
		public override bool Equals(object obj); // 0x0041BB58-0x0041BBF4
		public bool Equals(SortVersion other); // 0x0041BC08-0x0041BD08
		public override int GetHashCode(); // 0x0041BDE8-0x0041BE24
		public static bool operator ==(SortVersion left, SortVersion right); // 0x0041BD08-0x0041BD2C
		public static bool operator !=(SortVersion left, SortVersion right); // 0x0041BBF4-0x0041BC08
	}

	[Serializable]
	[ComVisible] // 0x0013CD24-0x0013CD38
	public class TaiwanCalendar : Calendar // TypeDefIndex: 676
	{
		// Fields
		internal static EraInfo[] taiwanEraInfo; // 0x00
		internal static Calendar s_defaultInstance; // 0x04
		internal GregorianCalendarHelper helper; // 0x14
		internal static readonly DateTime calendarMinValue; // 0x08
	
		// Properties
		[ComVisible] // 0x00146544-0x00146558
		public override DateTime MinSupportedDateTime { get; } // 0x0041C154-0x0041C1E8 
		[ComVisible] // 0x00146558-0x0014656C
		public override DateTime MaxSupportedDateTime { get; } // 0x0041C1E8-0x0041C27C 
		internal override int ID { get; } // 0x0041C27C-0x0041C284 
		public override int[] Eras { get; } // 0x0041C548-0x0041C574 
		public override int TwoDigitYearMax { get; } // 0x0041C574-0x0041C5B4 
	
		// Constructors
		public TaiwanCalendar(); // 0x0041BF5C-0x0041C154
		static TaiwanCalendar(); // 0x0041C7C4-0x0041C92C
	
		// Methods
		internal static Calendar GetDefaultInstance(); // 0x0041BE24-0x0041BF5C
		public override int GetDaysInMonth(int year, int month, int era); // 0x0041C284-0x0041C2D4
		public override int GetDayOfMonth(DateTime time); // 0x0041C2D4-0x0041C31C
		public override DayOfWeek GetDayOfWeek(DateTime time); // 0x0041C31C-0x0041C364
		public override int GetMonthsInYear(int year, int era); // 0x0041C364-0x0041C3A0
		public override int GetEra(DateTime time); // 0x0041C3A0-0x0041C3E8
		public override int GetMonth(DateTime time); // 0x0041C3E8-0x0041C430
		public override int GetYear(DateTime time); // 0x0041C430-0x0041C478
		public override bool IsLeapYear(int year, int era); // 0x0041C478-0x0041C4B4
		public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era); // 0x0041C4B4-0x0041C548
		public override int ToFourDigitYear(int year); // 0x0041C5B4-0x0041C7C4
	}

	[Serializable]
	[ComVisible] // 0x0013CD38-0x0013CD4C
	public class TextInfo : ICloneable, IDeserializationCallback // TypeDefIndex: 677
	{
		// Fields
		[OptionalField] // 0x00142F34-0x00142F64
		private bool m_isReadOnly; // 0x08
		[OptionalField] // 0x00142F64-0x00142F94
		private string m_cultureName; // 0x0C
		[NonSerialized]
		private CultureData m_cultureData; // 0x10
		[NonSerialized]
		private string m_textInfoName; // 0x14
		[NonSerialized]
		private bool? m_IsAsciiCasingSameAsInvariant; // 0x18
		internal static TextInfo s_Invariant; // 0x00
		[OptionalField] // 0x00142F94-0x00142FC4
		private string customCultureName; // 0x1C
		[OptionalField] // 0x00142FC4-0x00142FF4
		internal bool m_useUserOverride; // 0x20
		[OptionalField] // 0x00142FF4-0x00143024
		internal int m_win32LangID; // 0x24
	
		// Properties
		internal static TextInfo Invariant { get; } // 0x0041C92C-0x0041C9F4 
		[ComVisible] // 0x0014656C-0x00146580
		public string CultureName { get; } // 0x0041D320-0x0041D328 
		private bool IsAsciiCasingSameAsInvariant { get; } // 0x0041D510-0x0041D648 
	
		// Constructors
		internal TextInfo(CultureData cultureData); // 0x0041C9F4-0x0041CA58
	
		// Methods
		[OnDeserializing] // 0x0014514C-0x0014515C
		private void OnDeserializing(StreamingContext ctx); // 0x0041CA58-0x0041CA68
		private void OnDeserialized(); // 0x0041CA68-0x0041CBE0
		[OnDeserialized] // 0x0014515C-0x0014516C
		private void OnDeserialized(StreamingContext ctx); // 0x0041CBE0-0x0041CBE4
		[OnSerializing] // 0x0014516C-0x0014517C
		private void OnSerializing(StreamingContext ctx); // 0x0041CBE4-0x0041CCA4
		internal static int GetHashCodeOrdinalIgnoreCase(string s); // 0x0041CCA4-0x0041CCC8
		internal static int GetHashCodeOrdinalIgnoreCase(string s, bool forceRandomizedHashing, long additionalEntropy); // 0x0041CCC8-0x0041CD08
		internal static int CompareOrdinalIgnoreCase(string str1, string str2); // 0x0041CE48-0x0041CEBC
		internal static int CompareOrdinalIgnoreCaseEx(string strA, int indexA, string strB, int indexB, int lengthA, int lengthB); // 0x0041D0C0-0x0041D0E4
		internal static int IndexOfStringOrdinalIgnoreCase(string source, string value, int startIndex, int count); // 0x0041D0E4-0x0041D208
		internal static int LastIndexOfStringOrdinalIgnoreCase(string source, string value, int startIndex, int count); // 0x0041D208-0x0041D320
		[ComVisible] // 0x0014517C-0x00145190
		public virtual object Clone(); // 0x0041D328-0x0041D4A4
		internal void SetReadOnlyState(bool readOnly); // 0x0041D4A4-0x0041D4AC
		public virtual char ToLower(char c); // 0x0041D4AC-0x0041D4FC
		public virtual string ToLower(string str); // 0x0041DC68-0x0041DD24
		private static char ToLowerAsciiInvariant(char c); // 0x0041D648-0x0041D65C
		public virtual char ToUpper(char c); // 0x0041DE64-0x0041DEB8
		public virtual string ToUpper(string str); // 0x0041E520-0x0041E5DC
		private static char ToUpperAsciiInvariant(char c); // 0x0041DEB8-0x0041DED0
		private static bool IsAscii(char c); // 0x0041D4FC-0x0041D510
		public override bool Equals(object obj); // 0x0041E71C-0x0041E7F0
		public override int GetHashCode(); // 0x0041E7F0-0x0041E824
		public override string ToString(); // 0x0041E824-0x0041E8AC
		void IDeserializationCallback.OnDeserialization(object sender); // 0x0041E8AC-0x0041E8B0
		internal int GetCaseInsensitiveHashCode(string str); // 0x0041E8B0-0x0041E8CC
		internal int GetCaseInsensitiveHashCode(string str, bool forceRandomizedHashing, long additionalEntropy); // 0x0041CD08-0x0041CE48
		private int GetInvariantCaseInsensitiveHashCode(string str); // 0x0041E8CC-0x0041EA14
		private string ToUpperInternal(string str); // 0x0041E5DC-0x0041E71C
		private string ToLowerInternal(string str); // 0x0041DD24-0x0041DE64
		private char ToUpperInternal(char c); // 0x0041DED0-0x0041E520
		private char ToLowerInternal(char c); // 0x0041D65C-0x0041DC68
		private static int InternalCompareStringOrdinalIgnoreCase(string strA, int indexA, string strB, int indexB, int lenA, int lenB); // 0x0041CEBC-0x0041D0C0
	}

	internal static class TimeSpanFormat // TypeDefIndex: 678
	{
		// Fields
		internal static readonly FormatLiterals PositiveInvariantFormatLiterals; // 0x00
		internal static readonly FormatLiterals NegativeInvariantFormatLiterals; // 0x1C
	
		// Nested types
		internal enum Pattern // TypeDefIndex: 679
		{
			None = 0,
			Minimum = 1,
			Full = 2
		}
	
		internal struct FormatLiterals // TypeDefIndex: 680
		{
			// Fields
			internal string AppCompatLiteral; // 0x00
			internal int dd; // 0x04
			internal int hh; // 0x08
			internal int mm; // 0x0C
			internal int ss; // 0x10
			internal int ff; // 0x14
			private string[] literals; // 0x18
	
			// Properties
			internal string Start { get; } // 0x004210E4-0x004210EC 
			internal string DayHourSep { get; } // 0x004210EC-0x004210F4 
			internal string HourMinuteSep { get; } // 0x004210F4-0x004210FC 
			internal string MinuteSecondSep { get; } // 0x004210FC-0x00421104 
			internal string SecondFractionSep { get; } // 0x00421104-0x0042110C 
			internal string End { get; } // 0x0042110C-0x00421114 
	
			// Methods
			internal static FormatLiterals InitInvariant(bool isNegative); // 0x00420D48-0x004210E4
			internal void Init(string format, bool useInvariantFieldLengths); // 0x00421114-0x0042111C
		}
	
		// Constructors
		static TimeSpanFormat(); // 0x00420C78-0x00420D48
	
		// Methods
		private static string IntToString(int n, int digits); // 0x0041EE8C-0x0041EEBC
		internal static string Format(TimeSpan value, string format, IFormatProvider formatProvider); // 0x0041EEBC-0x0041F1A8
		private static string FormatStandard(TimeSpan value, bool isInvariant, string format, Pattern pattern); // 0x0041F1A8-0x0041F898
		internal static string FormatCustomized(TimeSpan value, string format, DateTimeFormatInfo dtfi); // 0x0041F898-0x00420C78
	}

	[Serializable]
	[ComVisible] // 0x0013CD4C-0x0013CD60
	public enum UnicodeCategory // TypeDefIndex: 681
	{
		UppercaseLetter = 0,
		LowercaseLetter = 1,
		TitlecaseLetter = 2,
		ModifierLetter = 3,
		OtherLetter = 4,
		NonSpacingMark = 5,
		SpacingCombiningMark = 6,
		EnclosingMark = 7,
		DecimalDigitNumber = 8,
		LetterNumber = 9,
		OtherNumber = 10,
		SpaceSeparator = 11,
		LineSeparator = 12,
		ParagraphSeparator = 13,
		Control = 14,
		Format = 15,
		Surrogate = 16,
		PrivateUse = 17,
		ConnectorPunctuation = 18,
		DashPunctuation = 19,
		OpenPunctuation = 20,
		ClosePunctuation = 21,
		InitialQuotePunctuation = 22,
		FinalQuotePunctuation = 23,
		OtherPunctuation = 24,
		MathSymbol = 25,
		CurrencySymbol = 26,
		ModifierSymbol = 27,
		OtherSymbol = 28,
		OtherNotAssigned = 29
	}

	[Serializable]
	[ComVisible] // 0x0013CD60-0x0013CD74
	public class SortKey // TypeDefIndex: 682
	{
		// Fields
		private readonly string source; // 0x08
		private readonly byte[] key; // 0x0C
		private readonly CompareOptions options; // 0x10
		private readonly int lcid; // 0x14
	
		// Properties
		public virtual string OriginalString { get; } // 0x0041B690-0x0041B698 
		public virtual byte[] KeyData { get; } // 0x0041B698-0x0041B6A0 
	
		// Constructors
		internal SortKey(int lcid, string source, CompareOptions opt); // 0x0041B628-0x0041B658
		internal SortKey(int lcid, string source, byte[] buffer, CompareOptions opt, int lv1Length, int lv2Length, int lv3Length, int kanaSmallLength, int markTypeLength, int katakanaLength, int kanaWidthLength, int identLength); // 0x0041B658-0x0041B690
	
		// Methods
		public static int Compare(SortKey sortkey1, SortKey sortkey2); // 0x0041B3AC-0x0041B628
		public override bool Equals(object value); // 0x0041B6A0-0x0041B770
		public override int GetHashCode(); // 0x0041B770-0x0041B84C
		public override string ToString(); // 0x0041B84C-0x0041BB58
	}

	internal class CultureData // TypeDefIndex: 683
	{
		// Fields
		private string sAM1159; // 0x08
		private string sPM2359; // 0x0C
		private string sTimeSeparator; // 0x10
		private string[] saLongTimes; // 0x14
		private string[] saShortTimes; // 0x18
		private int iFirstDayOfWeek; // 0x1C
		private int iFirstWeekOfYear; // 0x20
		private int[] waCalendars; // 0x24
		private CalendarData[] calendars; // 0x28
		private string sISO639Language; // 0x2C
		private readonly string sRealName; // 0x30
		private bool bUseOverrides; // 0x34
		private int calendarId; // 0x38
		private int numberIndex; // 0x3C
		private int iDefaultAnsiCodePage; // 0x40
		private int iDefaultOemCodePage; // 0x44
		private int iDefaultMacCodePage; // 0x48
		private int iDefaultEbcdicCodePage; // 0x4C
		private bool isRightToLeft; // 0x50
		private string sListSeparator; // 0x54
		private static CultureData s_Invariant; // 0x00
	
		// Properties
		public static CultureData Invariant { get; } // 0x00689378-0x006898E0 
		internal string[] LongTimes { get; } // 0x00689D98-0x00689DB0 
		internal string[] ShortTimes { get; } // 0x00689DB0-0x00689DC8 
		internal string SISO639LANGNAME { get; } // 0x00689DC8-0x00689DD0 
		internal int IFIRSTDAYOFWEEK { get; } // 0x00689DD0-0x00689DD8 
		internal int IFIRSTWEEKOFYEAR { get; } // 0x00689DD8-0x00689DE0 
		internal string SAM1159 { get; } // 0x00689DE0-0x00689DE8 
		internal string SPM2359 { get; } // 0x00689DE8-0x00689DF0 
		internal string TimeSeparator { get; } // 0x00689DF0-0x00689DF8 
		internal int[] CalendarIds { get; } // 0x00689DF8-0x00689FE8 
		internal bool IsInvariantCulture { get; } // 0x00689FE8-0x00689FF4 
		internal string CultureName { get; } // 0x00689FF4-0x00689FFC 
		internal string SCOMPAREINFO { get; } // 0x00689FFC-0x0068A058 
		internal string STEXTINFO { get; } // 0x0068A058-0x0068A060 
		internal int ILANGUAGE { get; } // 0x0068A060-0x0068A068 
		internal bool UseUserOverride { get; } // 0x0068A068-0x0068A070 
	
		// Constructors
		private CultureData(string name); // 0x00689354-0x00689378
	
		// Methods
		public static CultureData GetCultureData(string cultureName, bool useUserOverride); // 0x006898E0-0x00689A08
		public static CultureData GetCultureData(string cultureName, bool useUserOverride, int datetimeIndex, int calendarId, int numberIndex, string iso2lang, int ansiCodePage, int oemCodePage, int macCodePage, int ebcdicCodePage, bool rightToLeft, string listSeparator); // 0x00689A24-0x00689C1C
		internal static CultureData GetCultureData(int culture, bool bUseUserOverride); // 0x00689C20-0x00689C28
		private void fill_culture_data(int datetimeIndex); // 0x00689C1C-0x00689C20
		public CalendarData GetCalendar(int calendarId); // 0x00689C28-0x00689D98
		internal string[] EraNames(int calendarId); // 0x0068A070-0x0068A098
		internal string[] AbbrevEraNames(int calendarId); // 0x0068A098-0x0068A0C0
		internal string[] AbbreviatedEnglishEraNames(int calendarId); // 0x0068A0C0-0x0068A0E8
		internal string[] ShortDates(int calendarId); // 0x0068A0E8-0x0068A110
		internal string[] LongDates(int calendarId); // 0x0068A110-0x0068A138
		internal string[] YearMonths(int calendarId); // 0x0068A138-0x0068A160
		internal string[] DayNames(int calendarId); // 0x0068A160-0x0068A188
		internal string[] AbbreviatedDayNames(int calendarId); // 0x0068A188-0x0068A1B0
		internal string[] MonthNames(int calendarId); // 0x0068A1B0-0x0068A1D8
		internal string[] GenitiveMonthNames(int calendarId); // 0x0068A1D8-0x0068A200
		internal string[] AbbreviatedMonthNames(int calendarId); // 0x0068A200-0x0068A228
		internal string[] AbbreviatedGenitiveMonthNames(int calendarId); // 0x0068A228-0x0068A250
		internal string[] LeapYearMonthNames(int calendarId); // 0x0068A250-0x0068A278
		internal string MonthDay(int calendarId); // 0x0068A278-0x0068A2A0
		internal string DateSeparator(int calendarId); // 0x0068A2A0-0x0068A2E8
		private static string GetDateSeparator(string format); // 0x0068A2E8-0x0068A34C
		private static string GetSeparator(string format, string timeParts); // 0x0068A34C-0x0068A49C
		private static int IndexOfTimePart(string format, int startIndex, string timeParts); // 0x0068A49C-0x0068A5DC
		private static string UnescapeNlsString(string str, int start, int end); // 0x0068A5DC-0x0068A860
		internal static string[] ReescapeWin32Strings(string[] array); // 0x0068A860-0x0068A864
		internal static string ReescapeWin32String(string str); // 0x0068A864-0x0068A868
		internal void GetNFIValues(NumberFormatInfo nfi); // 0x0068A868-0x0068A940
		private static void fill_number_data(NumberFormatInfo nfi, int numberIndex); // 0x0068A940-0x0068A9A0
	}

	[Serializable]
	internal class CodePageDataItem // TypeDefIndex: 684
	{
		// Fields
		internal int m_dataIndex; // 0x08
		internal int m_uiFamilyCodePage; // 0x0C
		internal string m_webName; // 0x10
		internal string m_headerName; // 0x14
		internal uint m_flags; // 0x18
		private static readonly char[] sep; // 0x00
	
		// Properties
		public string WebName { get; } // 0x00576084-0x00576198 
		public string HeaderName { get; } // 0x00576198-0x005762AC 
	
		// Constructors
		internal CodePageDataItem(int dataIndex); // 0x00575E38-0x00575F68
		static CodePageDataItem(); // 0x005762AC-0x0057635C
	
		// Methods
		internal static string CreateString(string pStrings, uint index); // 0x00575F68-0x00576084
	}

	internal static class EncodingTable // TypeDefIndex: 685
	{
		// Fields
		internal static InternalEncodingDataItem[] encodingDataPtr; // 0x00
		internal static InternalCodePageDataItem[] codePageDataPtr; // 0x04
		private static int lastEncodingItem; // 0x08
		private static Hashtable hashByName; // 0x0C
		private static Hashtable hashByCodePage; // 0x10
	
		// Constructors
		static EncodingTable(); // 0x00699B5C-0x006A0F20
	
		// Methods
		private static int GetNumEncodingItems(); // 0x00699A90-0x00699B30
		private static InternalEncodingDataItem ENC(string name, ushort cp); // 0x00699B30-0x00699B44
		private static InternalCodePageDataItem MapCodePageDataItem(ushort cp, ushort fcp, string names, uint flags); // 0x00699B44-0x00699B5C
		private static int internalGetCodePageFromName(string name); // 0x006A0F20-0x006A12F0
		internal static int GetCodePageFromName(string name); // 0x006A12F0-0x006A1530
		internal static CodePageDataItem GetCodePageDataItem(int codepage); // 0x006A1530-0x006A17FC
	}

	internal struct InternalEncodingDataItem // TypeDefIndex: 686
	{
		// Fields
		internal string webName; // 0x00
		internal ushort codePage; // 0x04
	}

	internal struct InternalCodePageDataItem // TypeDefIndex: 687
	{
		// Fields
		internal ushort codePage; // 0x00
		internal ushort uiFamilyCodePage; // 0x02
		internal uint flags; // 0x04
		internal string Names; // 0x08
	}

	internal static class TextInfoToUpperData // TypeDefIndex: 688
	{
		// Fields
		public static readonly char[] range_00e0_0586; // 0x00
		public static readonly char[] range_1e01_1ff3; // 0x04
		public static readonly char[] range_2170_2184; // 0x08
		public static readonly char[] range_24d0_24e9; // 0x0C
		public static readonly char[] range_2c30_2ce3; // 0x10
		public static readonly char[] range_2d00_2d25; // 0x14
		public static readonly char[] range_a641_a697; // 0x18
		public static readonly char[] range_a723_a78c; // 0x1C
	
		// Constructors
		static TextInfoToUpperData(); // 0x0041EC6C-0x0041EE8C
	}

	internal static class TextInfoToLowerData // TypeDefIndex: 689
	{
		// Fields
		public static readonly char[] range_00c0_0556; // 0x00
		public static readonly char[] range_10a0_10c5; // 0x04
		public static readonly char[] range_1e00_1ffc; // 0x08
		public static readonly char[] range_2160_216f; // 0x0C
		public static readonly char[] range_24b6_24cf; // 0x10
		public static readonly char[] range_2c00_2c2e; // 0x14
		public static readonly char[] range_2c60_2ce2; // 0x18
		public static readonly char[] range_a640_a696; // 0x1C
		public static readonly char[] range_a722_a78b; // 0x20
	
		// Constructors
		static TextInfoToLowerData(); // 0x0041EA14-0x0041EC6C
	}

	[Serializable]
	[ComVisible] // 0x0013CD74-0x0013CD88
	public class CultureInfo : ICloneable, IFormatProvider // TypeDefIndex: 690
	{
		// Fields
		private static CultureInfo invariant_culture_info; // 0x00
		private static object shared_table_lock; // 0x04
		private static CultureInfo default_current_culture; // 0x08
		private bool m_isReadOnly; // 0x08
		private int cultureID; // 0x0C
		[NonSerialized]
		private int parent_lcid; // 0x10
		[NonSerialized]
		private int datetime_index; // 0x14
		[NonSerialized]
		private int number_index; // 0x18
		[NonSerialized]
		private int default_calendar_type; // 0x1C
		private bool m_useUserOverride; // 0x20
		internal NumberFormatInfo numInfo; // 0x24
		internal DateTimeFormatInfo dateTimeInfo; // 0x28
		private TextInfo textInfo; // 0x2C
		internal string m_name; // 0x30
		[NonSerialized]
		private string englishname; // 0x34
		[NonSerialized]
		private string nativename; // 0x38
		[NonSerialized]
		private string iso3lang; // 0x3C
		[NonSerialized]
		private string iso2lang; // 0x40
		[NonSerialized]
		private string win3lang; // 0x44
		[NonSerialized]
		private string territory; // 0x48
		[NonSerialized]
		private string[] native_calendar_names; // 0x4C
		private CompareInfo compareInfo; // 0x50
		[NonSerialized]
		private readonly unsafe void* textinfo_data; // 0x54
		private int m_dataItem; // 0x58
		private Calendar calendar; // 0x5C
		[NonSerialized]
		private CultureInfo parent_culture; // 0x60
		[NonSerialized]
		private bool constructed; // 0x64
		[NonSerialized]
		internal byte[] cached_serialized_form; // 0x68
		[NonSerialized]
		internal CultureData m_cultureData; // 0x6C
		[NonSerialized]
		internal bool m_isInherited; // 0x70
		internal const int InvariantCultureId = 127; // Metadata: 0x00204B50
		private const int CalendarTypeBits = 8; // Metadata: 0x00204B54
		private const string MSG_READONLY = "This instance is read only"; // Metadata: 0x00204B58
		private static CultureInfo s_DefaultThreadCurrentUICulture; // 0x0C
		private static CultureInfo s_DefaultThreadCurrentCulture; // 0x10
		private static Dictionary<int, CultureInfo> shared_by_number; // 0x14
		private static Dictionary<string, CultureInfo> shared_by_name; // 0x18
		internal static readonly bool IsTaiwanSku; // 0x1C
	
		// Properties
		public static CultureInfo InvariantCulture { get; } // 0x0068A9A0-0x0068AA34 
		public static CultureInfo CurrentCulture { get; } // 0x0068AA34-0x0068AA68 
		public static CultureInfo CurrentUICulture { get; } // 0x0068AA68-0x0068AA9C 
		internal string Territory { get; } // 0x0068B16C-0x0068B174 
		public virtual int LCID { get; } // 0x0068B174-0x0068B17C 
		public virtual string Name { get; } // 0x0068B17C-0x0068B184 
		public virtual Calendar Calendar { get; } // 0x0068B184-0x0068B238 
		public virtual CultureInfo Parent { get; } // 0x0068B4F8-0x0068B7AC 
		public virtual TextInfo TextInfo { get; } // 0x0068B7EC-0x0068B8F8 
		public virtual CompareInfo CompareInfo { get; } // 0x0068BF30-0x0068C090 
		public virtual bool IsNeutralCulture { get; } // 0x0068C090-0x0068C0DC 
		public virtual NumberFormatInfo NumberFormat { get; set; } // 0x0068C0E0-0x0068C194 0x0068C194-0x0068C2BC
		public virtual DateTimeFormatInfo DateTimeFormat { get; set; } // 0x0068C2BC-0x0068C3D0 0x0068C414-0x0068C53C
		public virtual string EnglishName { get; } // 0x0068C53C-0x0068C570 
		public bool IsReadOnly { get; } // 0x0068C570-0x0068C578 
		internal int CalendarType { get; } // 0x0068CB58-0x0068CC24 
		public static CultureInfo DefaultThreadCurrentCulture { get; } // 0x0068F874-0x0068F908 
		public static CultureInfo DefaultThreadCurrentUICulture { get; } // 0x0068F908-0x0068F99C 
		internal string SortName { get; } // 0x0068F99C-0x0068F9A4 
		internal static CultureInfo UserDefaultUICulture { get; } // 0x0068F9A4-0x0068FA1C 
		internal static CultureInfo UserDefaultCulture { get; } // 0x0068FA1C-0x0068FA94 
	
		// Nested types
		private struct Data // TypeDefIndex: 691
		{
			// Fields
			public int ansi; // 0x00
			public int ebcdic; // 0x04
			public int mac; // 0x08
			public int oem; // 0x0C
			public bool right_to_left; // 0x10
			public byte list_sep; // 0x11
		}
	
		// Constructors
		public CultureInfo(int culture); // 0x0068B7CC-0x0068B7EC
		public CultureInfo(int culture, bool useUserOverride); // 0x0068C860-0x0068C87C
		private CultureInfo(int culture, bool useUserOverride, bool read_only); // 0x0068C87C-0x0068CB44
		public CultureInfo(string name); // 0x0068B7AC-0x0068B7CC
		public CultureInfo(string name, bool useUserOverride); // 0x00689A08-0x00689A24
		private CultureInfo(string name, bool useUserOverride, bool read_only); // 0x0068CC24-0x0068CEAC
		private CultureInfo(); // 0x0068CF64-0x0068CF84
		static CultureInfo(); // 0x0068FCA4-0x0068FDCC
	
		// Methods
		internal static CultureInfo ConstructCurrentCulture(); // 0x0068AA9C-0x0068ACE4
		internal static CultureInfo ConstructCurrentUICulture(); // 0x0068B0F4-0x0068B16C
		public virtual object Clone(); // 0x0068B994-0x0068BC70
		public override bool Equals(object value); // 0x0068BE38-0x0068BF04
		private Data GetTextInfoData(); // 0x0068BF04-0x0068BF1C
		public override int GetHashCode(); // 0x0068BF1C-0x0068BF28
		public override string ToString(); // 0x0068BF28-0x0068BF30
		private void CheckNeutral(); // 0x0068C0DC-0x0068C0E0
		public virtual object GetFormat(Type formatType); // 0x0068C578-0x0068C6B8
		private void Construct(); // 0x0068B238-0x0068B258
		private bool construct_internal_locale_from_lcid(int lcid); // 0x0068C6B8-0x0068C6BC
		private bool construct_internal_locale_from_name(string name); // 0x0068C6BC-0x0068C6C0
		private static string get_current_locale_name(); // 0x0068ACE4-0x0068ACE8
		private void ConstructInvariant(bool read_only); // 0x0068C6C0-0x0068C860
		private TextInfo CreateTextInfo(bool readOnly); // 0x0068B8F8-0x0068B994
		private static void insert_into_shared_tables(CultureInfo c); // 0x0068CF84-0x0068D19C
		public static CultureInfo GetCultureInfo(int culture); // 0x0068D19C-0x0068D468
		public static CultureInfo GetCultureInfo(string name); // 0x0068D468-0x0068D724
		internal static CultureInfo CreateCulture(string name, bool reference); // 0x0068D724-0x0068D7CC
		public static CultureInfo CreateSpecificCulture(string name); // 0x0068ACE8-0x0068B0F4
		private static CultureInfo CreateSpecificCultureFromNeutral(string name); // 0x0068D7CC-0x0068F6E0
		private static Calendar CreateCalendar(int calendarType); // 0x0068B258-0x0068B4F8
		private static Exception CreateNotFoundException(string name); // 0x0068CEAC-0x0068CF64
		internal static void CheckDomainSafetyObject(object obj, object container); // 0x0068FA94-0x0068FCA4
	}

	public sealed class IdnMapping // TypeDefIndex: 692
	{
		// Fields
		private bool allow_unassigned; // 0x08
		private bool use_std3; // 0x09
		private Punycode puny; // 0x0C
	
		// Constructors
		public IdnMapping(); // 0x006A63D8-0x006A6454
	
		// Methods
		public override bool Equals(object obj); // 0x006A6454-0x006A652C
		public override int GetHashCode(); // 0x006A652C-0x006A6540
		public string GetAscii(string unicode); // 0x006A6540-0x006A6618
		public string GetAscii(string unicode, int index, int count); // 0x006A6618-0x006A67A4
		private string Convert(string input, int index, int count, bool toAscii); // 0x006A67A4-0x006A6AA8
		private string ToAscii(string s, int offset); // 0x006A6AA8-0x006A6DC0
		private void VerifyLength(string s, int offset); // 0x006A74DC-0x006A766C
		private string NamePrep(string s, int offset); // 0x006A7018-0x006A71B0
		private void VerifyProhibitedCharacters(string s, int offset); // 0x006A766C-0x006A78E8
		private void VerifyStd3AsciiRules(string s, int offset); // 0x006A71B0-0x006A74DC
		public string GetUnicode(string ascii); // 0x006A78E8-0x006A79C0
		public string GetUnicode(string ascii, int index, int count); // 0x006A79C0-0x006A7C44
		private string ToUnicode(string s, int offset); // 0x006A6DC0-0x006A7018
	}

	internal class Bootstring // TypeDefIndex: 693
	{
		// Fields
		private readonly char delimiter; // 0x08
		private readonly int base_num; // 0x0C
		private readonly int tmin; // 0x10
		private readonly int tmax; // 0x14
		private readonly int skew; // 0x18
		private readonly int damp; // 0x1C
		private readonly int initial_bias; // 0x20
		private readonly int initial_n; // 0x24
	
		// Constructors
		public Bootstring(char delimiter, int baseNum, int tmin, int tmax, int skew, int damp, int initialBias, int initialN); // 0x00571204-0x00571254
	
		// Methods
		public string Encode(string s, int offset); // 0x00571254-0x00571738
		private char EncodeDigit(int d); // 0x00571738-0x00571750
		private int DecodeDigit(char c); // 0x005717E8-0x00571810
		private int Adapt(int delta, int numPoints, bool firstTime); // 0x00571750-0x005717E8
		public string Decode(string s, int offset); // 0x00571810-0x00571BB4
	}

	internal class Punycode : Bootstring // TypeDefIndex: 694
	{
		// Constructors
		public Punycode(); // 0x0041A6AC-0x0041A88C
	}

	[Serializable]
	[ComVisible] // 0x0013CD88-0x0013CD9C
	public class RegionInfo // TypeDefIndex: 695
	{
		// Fields
		private static RegionInfo currentRegion; // 0x00
		private int regionId; // 0x08
		private string iso2Name; // 0x0C
		private string iso3Name; // 0x10
		private string win3Name; // 0x14
		private string englishName; // 0x18
		private string nativeName; // 0x1C
		private string currencySymbol; // 0x20
		private string isoCurrencySymbol; // 0x24
		private string currencyEnglishName; // 0x28
		private string currencyNativeName; // 0x2C
	
		// Properties
		public static RegionInfo CurrentRegion { get; } // 0x0041A88C-0x0041A998 
		[ComVisible] // 0x00146580-0x00146594
		public virtual string CurrencyEnglishName { get; } // 0x0041AF50-0x0041AF58 
		public virtual string CurrencySymbol { get; } // 0x0041AF58-0x0041AF60 
		[MonoTODO] // 0x00146594-0x001465F4
		public virtual string DisplayName { get; } // 0x0041AF60-0x0041AF68 
		public virtual string EnglishName { get; } // 0x0041AF68-0x0041AF70 
		[ComVisible] // 0x001465F4-0x00146608
		public virtual int GeoId { get; } // 0x0041AF70-0x0041AF78 
		public virtual bool IsMetric { get; } // 0x0041AF78-0x0041B010 
		public virtual string ISOCurrencySymbol { get; } // 0x0041B010-0x0041B018 
		[ComVisible] // 0x00146608-0x0014661C
		public virtual string NativeName { get; } // 0x0041B018-0x0041B020 
		[ComVisible] // 0x0014661C-0x00146630
		public virtual string CurrencyNativeName { get; } // 0x0041B020-0x0041B028 
		public virtual string Name { get; } // 0x0041B028-0x0041B030 
		public virtual string ThreeLetterISORegionName { get; } // 0x0041B030-0x0041B038 
		public virtual string ThreeLetterWindowsRegionName { get; } // 0x0041B038-0x0041B040 
		public virtual string TwoLetterISORegionName { get; } // 0x0041B040-0x0041B048 
	
		// Constructors
		public RegionInfo(int culture); // 0x0041AB64-0x0041ACA8
		public RegionInfo(string name); // 0x0041ADC8-0x0041AF4C
		private RegionInfo(CultureInfo ci); // 0x0041A998-0x0041AB64
	
		// Methods
		private bool GetByTerritory(CultureInfo ci); // 0x0041ACA8-0x0041ADC8
		private bool construct_internal_region_from_name(string name); // 0x0041AF4C-0x0041AF50
		public override bool Equals(object value); // 0x0041B048-0x0041B130
		public override int GetHashCode(); // 0x0041B130-0x0041B174
		public override string ToString(); // 0x0041B174-0x0041B184
		internal static void ClearCachedData(); // 0x0041B184-0x0041B3AC
	}
}

namespace System.Diagnostics
{
	[Serializable]
	[AttributeUsage] // 0x0013CD9C-0x0013CDE8
	[ComVisible] // 0x0013CD9C-0x0013CDE8
	public sealed class ConditionalAttribute : Attribute // TypeDefIndex: 696
	{
		// Fields
		private string m_conditionString; // 0x08
	
		// Constructors
		public ConditionalAttribute(string conditionString); // 0x00564624-0x00564644
	}

	[Serializable]
	[AttributeUsage] // 0x0013CDE8-0x0013CE34
	[ComVisible] // 0x0013CDE8-0x0013CE34
	public sealed class DebuggerStepThroughAttribute : Attribute // TypeDefIndex: 697
	{
		// Constructors
		public DebuggerStepThroughAttribute(); // 0x005648A4-0x005648AC
	}

	[Serializable]
	[AttributeUsage] // 0x0013CE34-0x0013CE80
	[ComVisible] // 0x0013CE34-0x0013CE80
	public sealed class DebuggerHiddenAttribute : Attribute // TypeDefIndex: 698
	{
		// Constructors
		public DebuggerHiddenAttribute(); // 0x00564894-0x0056489C
	}

	[Serializable]
	[AttributeUsage] // 0x0013CE80-0x0013CECC
	[ComVisible] // 0x0013CE80-0x0013CECC
	public sealed class DebuggerNonUserCodeAttribute : Attribute // TypeDefIndex: 699
	{
		// Constructors
		public DebuggerNonUserCodeAttribute(); // 0x0056489C-0x005648A4
	}

	[AttributeUsage] // 0x0013CECC-0x0013CF18
	[ComVisible] // 0x0013CECC-0x0013CF18
	public sealed class DebuggableAttribute : Attribute // TypeDefIndex: 700
	{
		// Fields
		private DebuggingModes m_debuggingModes; // 0x08
	
		// Nested types
		[ComVisible] // 0x0013CF18-0x0013CF4C
		[Flags] // 0x0013CF18-0x0013CF4C
		public enum DebuggingModes // TypeDefIndex: 701
		{
			None = 0,
			Default = 1,
			IgnoreSymbolStoreSequencePoints = 2,
			EnableEditAndContinue = 4,
			DisableOptimizations = 256
		}
	
		// Constructors
		public DebuggableAttribute(DebuggingModes modes); // 0x00564644-0x00564664
	}

	[ComVisible] // 0x0013CF4C-0x0013CF60
	public enum DebuggerBrowsableState // TypeDefIndex: 702
	{
		Never = 0,
		Collapsed = 2,
		RootHidden = 3
	}

	[AttributeUsage] // 0x0013CF60-0x0013CFAC
	[ComVisible] // 0x0013CF60-0x0013CFAC
	public sealed class DebuggerBrowsableAttribute : Attribute // TypeDefIndex: 703
	{
		// Fields
		private DebuggerBrowsableState state; // 0x08
	
		// Constructors
		public DebuggerBrowsableAttribute(DebuggerBrowsableState state); // 0x00564758-0x00564814
	}

	[AttributeUsage] // 0x0013CFAC-0x0013CFF8
	[ComVisible] // 0x0013CFAC-0x0013CFF8
	public sealed class DebuggerTypeProxyAttribute : Attribute // TypeDefIndex: 704
	{
		// Fields
		private string typeName; // 0x08
	
		// Constructors
		public DebuggerTypeProxyAttribute(Type type); // 0x005648AC-0x00564A28
	}

	[AttributeUsage] // 0x0013CFF8-0x0013D044
	[ComVisible] // 0x0013CFF8-0x0013D044
	public sealed class DebuggerDisplayAttribute : Attribute // TypeDefIndex: 705
	{
		// Fields
		private string name; // 0x08
		private string value; // 0x0C
		private string type; // 0x10
	
		// Constructors
		public DebuggerDisplayAttribute(string value); // 0x00564814-0x00564894
	}

	[ComVisible] // 0x0013D044-0x0013D0B0
	[MonoTODO] // 0x0013D044-0x0013D0B0
	public sealed class Debugger // TypeDefIndex: 706
	{
		// Fields
		public static readonly string DefaultCategory; // 0x00
	
		// Properties
		public static bool IsAttached { get; } // 0x00564664-0x005646DC 
	
		// Constructors
		static Debugger(); // 0x005646E4-0x00564758
	
		// Methods
		private static bool IsAttached_internal(); // 0x005646DC-0x005646E0
		public static void NotifyOfCrossThreadDependency(); // 0x005646E0-0x005646E4
	}

	[Serializable]
	[ComVisible] // 0x0013D0B0-0x0013D128
	[MonoTODO] // 0x0013D0B0-0x0013D128
	public class StackFrame // TypeDefIndex: 707
	{
		// Fields
		public const int OFFSET_UNKNOWN = -1; // Metadata: 0x00204B96
		private int ilOffset; // 0x08
		private int nativeOffset; // 0x0C
		private long methodAddress; // 0x10
		private uint methodIndex; // 0x18
		private MethodBase methodBase; // 0x1C
		private string fileName; // 0x20
		private int lineNumber; // 0x24
		private int columnNumber; // 0x28
		private string internalMethodName; // 0x2C
	
		// Constructors
		public StackFrame(); // 0x00564A2C-0x00564A94
		public StackFrame(int skipFrames, bool fNeedFileInfo); // 0x00564A94-0x00564B04
	
		// Methods
		private static bool get_frame_info(int skip, bool needFileInfo, out MethodBase method, out int iloffset, out int native_offset, out string file, out int line, out int column); // 0x00564A28-0x00564A2C
		public virtual int GetFileLineNumber(); // 0x00564B04-0x00564B0C
		public virtual string GetFileName(); // 0x00564B0C-0x00564B14
		internal string GetSecureFileName(); // 0x00564B14-0x00564C1C
		public virtual int GetILOffset(); // 0x00564C1C-0x00564C24
		public virtual MethodBase GetMethod(); // 0x00564C24-0x00564C2C
		public virtual int GetNativeOffset(); // 0x00564C2C-0x00564C34
		internal long GetMethodAddress(); // 0x00564C34-0x00564C3C
		internal uint GetMethodIndex(); // 0x00564C3C-0x00564C44
		internal string GetInternalMethodName(); // 0x00564C44-0x00564C4C
		public override string ToString(); // 0x00564C4C-0x00564F58
	}

	[Serializable]
	[ComVisible] // 0x0013D128-0x0013D19C
	[MonoTODO] // 0x0013D128-0x0013D19C
	public class StackTrace // TypeDefIndex: 708
	{
		// Fields
		public const int METHODS_TO_SKIP = 0; // Metadata: 0x00204B9A
		private StackFrame[] frames; // 0x08
		private readonly StackTrace[] captured_traces; // 0x0C
		private bool debug_info; // 0x10
		private static bool isAotidSet; // 0x00
		private static string aotid; // 0x04
	
		// Properties
		public virtual int FrameCount { get; } // 0x0056531C-0x00565330 
	
		// Nested types
		internal enum TraceFormat // TypeDefIndex: 709
		{
			Normal = 0,
			TrailingNewLine = 1,
			NoResourceLookup = 2
		}
	
		// Constructors
		public StackTrace(); // 0x00564F58-0x00564F80
		public StackTrace(bool fNeedFileInfo); // 0x00565160-0x0056518C
		public StackTrace(int skipFrames, bool fNeedFileInfo); // 0x0056518C-0x005651BC
		public StackTrace(Exception e, bool fNeedFileInfo); // 0x005651C0-0x005651E0
		public StackTrace(Exception e, int skipFrames, bool fNeedFileInfo); // 0x005651E0-0x0056531C
	
		// Methods
		private void init_frames(int skipFrames, bool fNeedFileInfo); // 0x00564F80-0x00565160
		private static StackFrame[] get_trace(Exception e, int skipFrames, bool fNeedFileInfo); // 0x005651BC-0x005651C0
		public virtual StackFrame GetFrame(int index); // 0x00565330-0x005653A8
		private static string GetAotId(); // 0x005653A8-0x005654CC
		private bool AddFrames(StringBuilder sb); // 0x005654CC-0x00565BB8
		internal void GetFullNameForStackTrace(StringBuilder sb, MethodBase mi); // 0x00565C48-0x005662D4
		public override string ToString(); // 0x005662D4-0x00566470
		internal string ToString(TraceFormat traceFormat); // 0x00566470-0x00566480
	}
}

namespace System.Diagnostics.Tracing
{
	public enum EventLevel // TypeDefIndex: 710
	{
		LogAlways = 0,
		Critical = 1,
		Error = 2,
		Warning = 3,
		Informational = 4,
		Verbose = 5
	}

	[Flags] // 0x0013D19C-0x0013D1AC
	public enum EventKeywords : long // TypeDefIndex: 711
	{
		All = -1,
		None = 0,
		MicrosoftTelemetry = 562949953421312,
		WdiContext = 562949953421312,
		WdiDiagnostic = 1125899906842624,
		Sqm = 2251799813685248,
		AuditFailure = 4503599627370496,
		CorrelationHint = 4503599627370496,
		AuditSuccess = 9007199254740992,
		EventLogClassic = 36028797018963968
	}

	[AttributeUsage] // 0x0013D1AC-0x0013D1C0
	public sealed class EventAttribute : Attribute // TypeDefIndex: 712
	{
		// Fields
		[CompilerGenerated] // 0x00143024-0x00143034
		private int <EventId>k__BackingField; // 0x08
		[CompilerGenerated] // 0x00143034-0x00143044
		private EventLevel <Level>k__BackingField; // 0x0C
	
		// Properties
		private int EventId { [CompilerGenerated] /* 0x00145190-0x001451A0 */ set; } // 0x005664A0-0x005664A8
		public EventLevel Level { [CompilerGenerated] /* 0x001451A0-0x001451B0 */ set; } // 0x005664A8-0x005664B0
	
		// Constructors
		public EventAttribute(int eventId); // 0x00566480-0x005664A0
	}

	public class EventSource : IDisposable // TypeDefIndex: 713
	{
		// Fields
		[CompilerGenerated] // 0x00143044-0x00143054
		private string <Name>k__BackingField; // 0x08
	
		// Properties
		private string Name { [CompilerGenerated] /* 0x001451B0-0x001451C0 */ set; } // 0x00566500-0x00566508
	
		// Constructors
		protected EventSource(); // 0x005664B0-0x00566500
	
		// Methods
		~EventSource(); // 0x00566508-0x00566580
		public bool IsEnabled(); // 0x00566580-0x00566588
		public bool IsEnabled(EventLevel level, EventKeywords keywords); // 0x00566588-0x00566590
		public void Dispose(); // 0x00566590-0x00566628
		protected virtual void Dispose(bool disposing); // 0x00566708-0x0056670C
		protected void WriteEvent(int eventId, int arg1); // 0x0056670C-0x005667FC
		protected void WriteEvent(int eventId, params /* 0x00146318-0x00146328 */ object[] args); // 0x005667FC-0x00566800
	}

	[AttributeUsage] // 0x0013D1C0-0x0013D1D4
	public sealed class EventSourceAttribute : Attribute // TypeDefIndex: 714
	{
		// Fields
		[CompilerGenerated] // 0x00143054-0x00143064
		private string <Guid>k__BackingField; // 0x08
		[CompilerGenerated] // 0x00143064-0x00143074
		private string <Name>k__BackingField; // 0x0C
	
		// Properties
		public string Guid { [CompilerGenerated] /* 0x001451C0-0x001451D0 */ set; } // 0x00566800-0x00566808
		public string Name { [CompilerGenerated] /* 0x001451D0-0x001451E0 */ set; } // 0x00566808-0x00566810
	
		// Constructors
		public EventSourceAttribute(); // 0x00566810-0x00566818
	}
}

namespace System.Diagnostics.Contracts
{
	public static class Contract // TypeDefIndex: 715
	{
		// Methods
		[ReliabilityContract] // 0x001451E0-0x001451F8
		public static bool ForAll<T>(IEnumerable<T> collection, Predicate<T> predicate);
	}
}

namespace System.Numerics.Hashing
{
	internal static class HashHelpers // TypeDefIndex: 716
	{
		// Fields
		public static readonly int RandomSeed; // 0x00
	
		// Constructors
		static HashHelpers(); // 0x0074594C-0x00745A04
	
		// Methods
		public static int Combine(int h1, int h2); // 0x00745940-0x0074594C
	}
}

namespace System.Threading
{
	[ComVisible] // 0x0013D1D4-0x0013D24C
	[DebuggerDisplay] // 0x0013D1D4-0x0013D24C
	public struct CancellationToken // TypeDefIndex: 717
	{
		// Fields
		private CancellationTokenSource m_source; // 0x00
		private static readonly Action<object> s_ActionToActionObjShunt; // 0x00
	
		// Properties
		public static CancellationToken None { get; } // 0x00656BA8-0x00656BE8 
		public bool IsCancellationRequested { get; } // 0x00656C0C-0x00656C78 
		public bool CanBeCanceled { get; } // 0x00656C98-0x00656CCC 
	
		// Constructors
		internal CancellationToken(CancellationTokenSource source); // 0x00656CCC-0x00656CD4
		static CancellationToken(); // 0x00657BDC-0x00657CDC
	
		// Methods
		private static void ActionToActionObjShunt(object obj); // 0x00656CD4-0x00656F50
		internal CancellationTokenRegistration InternalRegisterWithoutEC(Action<object> callback, object state); // 0x00656F50-0x00656F78
		private CancellationTokenRegistration Register(Action<object> callback, object state, bool useSynchronizationContext, bool useExecutionContext); // 0x006575F0-0x0065771C
		public bool Equals(CancellationToken other); // 0x006577EC-0x00657884
		public override bool Equals(object other); // 0x00657884-0x0065793C
		public override int GetHashCode(); // 0x0065793C-0x00657944
		public static bool operator ==(CancellationToken left, CancellationToken right); // 0x00657944-0x00657964
		public static bool operator !=(CancellationToken left, CancellationToken right); // 0x00657964-0x00657A70
		public void ThrowIfCancellationRequested(); // 0x00657A70-0x00657B0C
		internal void ThrowIfSourceDisposed(); // 0x00657BC0-0x00657BC8
		private void ThrowOperationCanceledException(); // 0x00657BC8-0x00657BDC
		private static void ThrowObjectDisposedException(); // 0x00657B14-0x00657BC0
	}

	public struct CancellationTokenRegistration : IEquatable<CancellationTokenRegistration>, IDisposable // TypeDefIndex: 718
	{
		// Fields
		private readonly CancellationCallbackInfo m_callbackInfo; // 0x00
		private readonly SparselyPopulatedArrayAddInfo<CancellationCallbackInfo> m_registrationInfo; // 0x04
	
		// Constructors
		internal CancellationTokenRegistration(CancellationCallbackInfo callbackInfo, SparselyPopulatedArrayAddInfo<CancellationCallbackInfo> registrationInfo); // 0x00657CDC-0x00657E08
	
		// Methods
		[FriendAccessAllowed] // 0x001451F8-0x00145208
		internal bool TryDeregister(); // 0x00657E08-0x00657EBC
		public void Dispose(); // 0x00657F4C-0x006580FC
		public override bool Equals(object obj); // 0x006580FC-0x00658104
		public bool Equals(CancellationTokenRegistration other); // 0x00658104-0x00658260
		public override int GetHashCode(); // 0x00658260-0x00658268
	}

	[ComVisible] // 0x0013D24C-0x0013D260
	public class CancellationTokenSource : IDisposable // TypeDefIndex: 719
	{
		// Fields
		private static readonly CancellationTokenSource _staticSource_Set; // 0x00
		private static readonly CancellationTokenSource _staticSource_NotCancelable; // 0x04
		private static readonly int s_nLists; // 0x08
		private ManualResetEvent m_kernelEvent; // 0x08
		private SparselyPopulatedArray<CancellationCallbackInfo>[] m_registeredCallbacksLists; // 0x0C
		private int m_state; // 0x10
		private int m_threadIDExecutingCallbacks; // 0x14
		private bool m_disposed; // 0x18
		private CancellationTokenRegistration[] m_linkingRegistrations; // 0x1C
		private static readonly Action<object> s_LinkedTokenCancelDelegate; // 0x0C
		private CancellationCallbackInfo m_executingCallback; // 0x20
		private Timer m_timer; // 0x24
		private static readonly TimerCallback s_timerCallback; // 0x10
	
		// Properties
		public bool IsCancellationRequested { get; } // 0x00656BE8-0x00656C0C 
		internal bool IsCancellationCompleted { get; } // 0x00657EBC-0x00657EE0 
		internal bool IsDisposed { get; } // 0x00657B0C-0x00657B14 
		internal int ThreadIDExecutingCallbacks { get; set; } // 0x00657EE0-0x00657EF8 0x00658380-0x0065839C
		public CancellationToken Token { get; } // 0x0065839C-0x006583B4 
		internal bool CanBeCanceled { get; } // 0x00656C78-0x00656C98 
		internal CancellationCallbackInfo ExecutingCallback { get; } // 0x0065843C-0x00658454 
	
		// Constructors
		public CancellationTokenSource(); // 0x00658454-0x00658488
		private CancellationTokenSource(bool set); // 0x00658488-0x006584D4
		static CancellationTokenSource(); // 0x00659528-0x0065967C
	
		// Methods
		private static void LinkedTokenCancelDelegate(object source); // 0x00658268-0x00658360
		public void Cancel(); // 0x00658360-0x00658380
		public void Cancel(bool throwOnFirstException); // 0x006584D4-0x006584F8
		private static void TimerCallbackLogic(object obj); // 0x006586A8-0x00658860
		public void Dispose(); // 0x00658860-0x006588FC
		protected virtual void Dispose(bool disposing); // 0x006588FC-0x006589F4
		internal void ThrowIfDisposed(); // 0x006583B4-0x0065843C
		private static void ThrowObjectDisposedException(); // 0x006589F4-0x00658AA0
		internal static CancellationTokenSource InternalGetStaticSource(bool set); // 0x0065771C-0x006577EC
		internal CancellationTokenRegistration InternalRegister(Action<object> callback, object stateForCallback, SynchronizationContext targetSyncContext, ExecutionContext executionContext); // 0x006571CC-0x006575F0
		private void NotifyCancellation(bool throwOnFirstException); // 0x006584F8-0x006586A8
		private void ExecuteCallbackHandlers(bool throwOnFirstException); // 0x00658B4C-0x006590F0
		private void CancellationCallbackCoreWork_OnSyncContext(object obj); // 0x00659200-0x00659274
		private void CancellationCallbackCoreWork(CancellationCallbackCoreWorkArguments args); // 0x006590F4-0x00659200
		public static CancellationTokenSource CreateLinkedTokenSource(CancellationToken token1, CancellationToken token2); // 0x00659274-0x00659528
		internal void WaitForCallbackToComplete(CancellationCallbackInfo callbackInfo); // 0x00657EF8-0x00657F4C
	}

	internal struct CancellationCallbackCoreWorkArguments // TypeDefIndex: 720
	{
		// Fields
		internal SparselyPopulatedArrayFragment<CancellationCallbackInfo> m_currArrayFragment; // 0x00
		internal int m_currArrayIndex; // 0x04
	
		// Constructors
		public CancellationCallbackCoreWorkArguments(SparselyPopulatedArrayFragment<CancellationCallbackInfo> currArrayFragment, int currArrayIndex); // 0x0065679C-0x006567A8
	}

	internal class CancellationCallbackInfo // TypeDefIndex: 721
	{
		// Fields
		internal readonly Action<object> Callback; // 0x08
		internal readonly object StateForCallback; // 0x0C
		internal readonly SynchronizationContext TargetSyncContext; // 0x10
		internal readonly ExecutionContext TargetExecutionContext; // 0x14
		internal readonly CancellationTokenSource CancellationTokenSource; // 0x18
		private static ContextCallback s_executionContextCallback; // 0x00
	
		// Constructors
		internal CancellationCallbackInfo(Action<object> callback, object stateForCallback, SynchronizationContext targetSyncContext, ExecutionContext targetExecutionContext, CancellationTokenSource cancellationTokenSource); // 0x006567A8-0x006567E8
	
		// Methods
		internal void ExecuteCallback(); // 0x006567E8-0x00656900
		private static void ExecutionContextCallback(object obj); // 0x00656A78-0x00656BA8
	}

	internal class SparselyPopulatedArray<T> // TypeDefIndex: 722
		where T : class
	{
		// Fields
		private SparselyPopulatedArrayFragment<T> m_tail;
	
		// Properties
		internal SparselyPopulatedArrayFragment<T> Tail { get; }
	
		// Constructors
		internal SparselyPopulatedArray(int initialSize);
	
		// Methods
		internal SparselyPopulatedArrayAddInfo<T> Add(T element);
	}

	internal struct SparselyPopulatedArrayAddInfo<T> // TypeDefIndex: 723
		where T : class
	{
		// Fields
		private SparselyPopulatedArrayFragment<T> m_source;
		private int m_index;
	
		// Properties
		internal SparselyPopulatedArrayFragment<T> Source { get; }
		internal int Index { get; }
	
		// Constructors
		internal SparselyPopulatedArrayAddInfo(SparselyPopulatedArrayFragment<T> source, int index);
	}

	internal class SparselyPopulatedArrayFragment<T> // TypeDefIndex: 724
		where T : class
	{
		// Fields
		internal readonly T[] m_elements;
		internal int m_freeCount;
		internal SparselyPopulatedArrayFragment<T> m_next;
		internal SparselyPopulatedArrayFragment<T> m_prev;
	
		// Properties
		internal T this[int index] { get => default; }
		internal int Length { get; }
		internal SparselyPopulatedArrayFragment<T> Prev { get; }
	
		// Constructors
		internal SparselyPopulatedArrayFragment(int size);
		internal SparselyPopulatedArrayFragment(int size, SparselyPopulatedArrayFragment<T> prev);
	
		// Methods
		internal T SafeAtomicRemove(int index, T expectedElement);
	}

	public static class LazyInitializer // TypeDefIndex: 725
	{
		// Methods
		public static T EnsureInitialized<T>(ref T target, Func<T> valueFactory)
			where T : class;
		private static T EnsureInitializedCore<T>(ref T target, Func<T> valueFactory)
			where T : class;
	}

	[ComVisible] // 0x0013D294-0x0013D2E8
	[DebuggerDisplay] // 0x0013D294-0x0013D2E8
	public class ManualResetEventSlim : IDisposable // TypeDefIndex: 726
	{
		// Fields
		private object m_lock; // 0x08
		private ManualResetEvent m_eventObj; // 0x0C
		private int m_combinedState; // 0x10
		private static Action<object> s_cancellationTokenCallback; // 0x00
	
		// Properties
		public WaitHandle WaitHandle { get; } // 0x0065C2F8-0x0065C32C 
		public bool IsSet { get; private set; } // 0x0065C584-0x0065C608 0x0065C610-0x0065C64C
		public int SpinCount { get; private set; } // 0x0065C6E0-0x0065C764 0x0065C774-0x0065C79C
		private int Waiters { get; set; } // 0x0065C79C-0x0065C824 0x0065C824-0x0065C934
	
		// Constructors
		public ManualResetEventSlim(bool initialState); // 0x0065C934-0x0065C960
		public ManualResetEventSlim(bool initialState, int spinCount); // 0x0065C9D4-0x0065CB54
		static ManualResetEventSlim(); // 0x0065D688-0x0065D72C
	
		// Methods
		private void Initialize(bool initialState, int spinCount); // 0x0065C960-0x0065C9D4
		private void EnsureLockObjectCreated(); // 0x0065CB6C-0x0065CBFC
		private bool LazyInitializeEvent(); // 0x0065C3E8-0x0065C584
		public void Set(); // 0x0065CC28-0x0065CC30
		private void Set(bool duringCancellation); // 0x0065CC30-0x0065CDC8
		public bool Wait(int millisecondsTimeout, CancellationToken cancellationToken); // 0x0065CE7C-0x0065D3C0
		public void Dispose(); // 0x0065D3C8-0x0065D464
		protected virtual void Dispose(bool disposing); // 0x0065D464-0x0065D554
		private void ThrowIfDisposed(); // 0x0065C32C-0x0065C3E8
		private static void CancellationTokenCallback(object obj); // 0x0065D554-0x0065D688
		private void UpdateStateAtomically(int newBits, int updateBitsMask); // 0x0065C64C-0x0065C6E0
		private static int ExtractStatePortionAndShiftRight(int state, int mask, int rightBitShiftCount); // 0x0065C764-0x0065C774
		private static int ExtractStatePortion(int state, int mask); // 0x0065C608-0x0065C610
	}

	[ComVisible] // 0x0013D2E8-0x0013D350
	[DebuggerDisplay] // 0x0013D2E8-0x0013D350
	public class SemaphoreSlim : IDisposable // TypeDefIndex: 727
	{
		// Fields
		private int m_currentCount; // 0x08
		private readonly int m_maxCount; // 0x0C
		private int m_waitCount; // 0x10
		private object m_lockObj; // 0x14
		private ManualResetEvent m_waitHandle; // 0x18
		private TaskNode m_asyncHead; // 0x1C
		private TaskNode m_asyncTail; // 0x20
		private static readonly Task<bool> s_trueTask; // 0x00
		private static Action<object> s_cancellationTokenCanceledEventHandler; // 0x04
	
		// Nested types
		private sealed class TaskNode : Task<bool>, IThreadPoolWorkItem // TypeDefIndex: 728
		{
			// Fields
			internal TaskNode Prev; // 0x2C
			internal TaskNode Next; // 0x30
	
			// Constructors
			internal TaskNode(); // 0x00256320-0x002563B0
	
			// Methods
			new void IThreadPoolWorkItem.ExecuteWorkItem(); // 0x002563B0-0x00256418
			new void IThreadPoolWorkItem.MarkAborted(ThreadAbortException tae); // 0x00256418-0x0025641C
		}
	
		[CompilerGenerated] // 0x0013D350-0x0013D360
		private struct <WaitUntilCountOrTimeoutAsync>d__31 : IAsyncStateMachine // TypeDefIndex: 729
		{
			// Fields
			public int <>1__state; // 0x00
			public AsyncTaskMethodBuilder<bool> <>t__builder; // 0x04
			public CancellationToken cancellationToken; // 0x10
			public TaskNode asyncWaiter; // 0x14
			public int millisecondsTimeout; // 0x18
			private CancellationTokenSource <cts>5__1; // 0x1C
			public SemaphoreSlim <>4__this; // 0x20
			private object <>7__wrap1; // 0x24
			private ConfiguredTaskAwaitable<Task> <>u__1; // 0x28
			private ConfiguredTaskAwaitable<bool> <>u__2; // 0x30
	
			// Methods
			private void MoveNext(); // 0x002562A4-0x00256318
			[DebuggerHidden] // 0x00145280-0x00145290
			private void SetStateMachine(IAsyncStateMachine stateMachine); // 0x00256318-0x00256320
		}
	
		// Constructors
		public SemaphoreSlim(int initialCount, int maxCount); // 0x0065F230-0x0065F464
		static SemaphoreSlim(); // 0x006606D8-0x006607D8
	
		// Methods
		public void Wait(); // 0x0065F46C-0x0065F478
		public bool Wait(int millisecondsTimeout, CancellationToken cancellationToken); // 0x0065F478-0x0065F9D8
		private bool WaitUntilCountOrTimeout(int millisecondsTimeout, uint startTime, CancellationToken cancellationToken); // 0x0065FDF4-0x0065FE88
		public Task WaitAsync(); // 0x0065FE88-0x0065FE94
		public Task<bool> WaitAsync(int millisecondsTimeout, CancellationToken cancellationToken); // 0x0065FAC0-0x0065FDF4
		private TaskNode CreateAndAddAsyncWaiter(); // 0x0065FE94-0x0065FF50
		private bool RemoveAsyncWaiter(TaskNode task); // 0x006600B8-0x0066015C
		private async Task<bool> WaitUntilCountOrTimeoutAsync(TaskNode asyncWaiter, int millisecondsTimeout, CancellationToken cancellationToken); // 0x0065FF50-0x006600B8
		public int Release(); // 0x0066015C-0x00660164
		public int Release(int releaseCount); // 0x00660164-0x0066049C
		private static void QueueWaiterTask(TaskNode waiterTask); // 0x0066049C-0x006604A8
		public void Dispose(); // 0x006604A8-0x00660544
		protected virtual void Dispose(bool disposing); // 0x00660544-0x006605B4
		private static void CancellationTokenCanceledEventHandler(object obj); // 0x006605B4-0x006606D8
		private void CheckDispose(); // 0x0065F9D8-0x0065FAC0
		private static string GetResourceString(string str); // 0x0065F464-0x0065F46C
	}

	[ComVisible] // 0x0013D360-0x0013D420
	[DebuggerDisplay] // 0x0013D360-0x0013D420
	[DebuggerTypeProxy] // 0x0013D360-0x0013D420
	public struct SpinLock // TypeDefIndex: 730
	{
		// Fields
		private int m_owner; // 0x00
		private static int MAXIMUM_WAITERS; // 0x00
	
		// Properties
		public bool IsHeldByCurrentThread { [ReliabilityContract] /* 0x001452A8-0x001452C0 */ get; } // 0x00257BB8-0x00257BC0 
		public bool IsThreadOwnerTrackingEnabled { [ReliabilityContract] /* 0x001452C0-0x001452D8 */ get; } // 0x00257BC0-0x00257BE4 
	
		// Nested types
		internal class SystemThreading_SpinLockDebugView // TypeDefIndex: 731
		{
		}
	
		// Constructors
		public SpinLock(bool enableThreadOwnerTracking); // 0x00256D24-0x00256DA4
		static SpinLock(); // 0x00257BE4-0x00257C4C
	
		// Methods
		public void Enter(ref bool lockTaken); // 0x002572DC-0x00257368
		public void TryEnter(int millisecondsTimeout, ref bool lockTaken); // 0x00257368-0x00257370
		private void ContinueTryEnter(int millisecondsTimeout, ref bool lockTaken); // 0x00257740-0x00257818
		private void DecrementWaiters(); // 0x00257818-0x00257820
		private void ContinueTryEnterWithThreadTracking(int millisecondsTimeout, uint startTime, ref bool lockTaken); // 0x002578E8-0x00257A80
		[ReliabilityContract] // 0x00145290-0x001452A8
		public void Exit(bool useMemoryBarrier); // 0x00257A80-0x00257B84
		private void ExitSlowPath(bool useMemoryBarrier); // 0x00257BB0-0x00257BB8
	}

	public struct SpinWait // TypeDefIndex: 732
	{
		// Fields
		private int m_count; // 0x00
	
		// Properties
		public bool NextSpinWillYield { get; } // 0x00257C4C-0x00257C64 
	
		// Methods
		public void SpinOnce(); // 0x00257C64-0x00257C6C
	}

	internal static class PlatformHelper // TypeDefIndex: 733
	{
		// Fields
		private static int s_processorCount; // 0x00
		private static int s_lastProcessorCountRefreshTicks; // 0x04
	
		// Properties
		internal static int ProcessorCount { get; } // 0x0065967C-0x0065975C 
		internal static bool IsSingleProcessor { get; } // 0x0065CB54-0x0065CB6C 
	}

	internal static class TimeoutHelper // TypeDefIndex: 734
	{
		// Methods
		public static uint GetTime(); // 0x002573E8-0x0025758C
		public static int UpdateTimeOut(uint startTime, int originalWaitMillisecondsTimeout); // 0x0025758C-0x00257640
	}

	[Serializable]
	[ComVisible] // 0x0013D420-0x0013D434
	public class AbandonedMutexException : SystemException // TypeDefIndex: 735
	{
		// Fields
		private int m_MutexIndex; // 0x44
		private Mutex m_Mutex; // 0x48
	
		// Constructors
		public AbandonedMutexException(); // 0x00656508-0x00656598
		public AbandonedMutexException(int location, WaitHandle handle); // 0x00656598-0x00656698
		protected AbandonedMutexException(SerializationInfo info, StreamingContext context); // 0x00656718-0x0065679C
	
		// Methods
		private void SetupException(int location, WaitHandle handle); // 0x00656698-0x00656718
	}

	public sealed class AsyncLocal<T> : IAsyncLocal // TypeDefIndex: 736
	{
		// Fields
		private readonly Action<AsyncLocalValueChangedArgs<T>> m_valueChangedHandler;
	
		// Methods
		void IAsyncLocal.OnValueChanged(object previousValueObj, object currentValueObj, bool contextChanged);
	}

	internal interface IAsyncLocal // TypeDefIndex: 737
	{
		// Methods
		void OnValueChanged(object previousValue, object currentValue, bool contextChanged);
	}

	public struct AsyncLocalValueChangedArgs<T> // TypeDefIndex: 738
	{
		// Fields
		[CompilerGenerated] // 0x00143074-0x00143084
		private T <PreviousValue>k__BackingField;
		[CompilerGenerated] // 0x00143084-0x00143094
		private T <CurrentValue>k__BackingField;
		[CompilerGenerated] // 0x00143094-0x001430A4
		private bool <ThreadContextChanged>k__BackingField;
	
		// Properties
		private T PreviousValue { [CompilerGenerated] /* 0x001452D8-0x001452E8 */ set; }
		private T CurrentValue { [CompilerGenerated] /* 0x001452E8-0x001452F8 */ set; }
		private bool ThreadContextChanged { [CompilerGenerated] /* 0x001452F8-0x00145308 */ set; }
	
		// Constructors
		internal AsyncLocalValueChangedArgs(T previousValue, T currentValue, bool contextChanged);
	}

	[ComVisible] // 0x0013D434-0x0013D448
	public enum EventResetMode // TypeDefIndex: 739
	{
		AutoReset = 0,
		ManualReset = 1
	}

	[ComVisible] // 0x0013D448-0x0013D45C
	public class EventWaitHandle : WaitHandle // TypeDefIndex: 740
	{
		// Constructors
		public EventWaitHandle(bool initialState, EventResetMode mode); // 0x00659FBC-0x00659FD8
		public EventWaitHandle(bool initialState, EventResetMode mode, string name); // 0x00659FD8-0x0065A38C
	
		// Methods
		public bool Reset(); // 0x0065A390-0x0065A438
		public bool Set(); // 0x00658AA4-0x00658B4C
	}

	[ComVisible] // 0x0013D45C-0x0013D470
	public delegate void ContextCallback(object state); // TypeDefIndex: 741; 0x0065975C-0x00659F84

	internal struct ExecutionContextSwitcher // TypeDefIndex: 742
	{
		// Fields
		internal ExecutionContext.Reader outerEC; // 0x00
		internal bool outerECBelongsToScope; // 0x04
		internal object hecsw; // 0x08
		internal Thread thread; // 0x0C
	
		// Methods
		[HandleProcessCorruptedStateExceptions] // 0x00145308-0x00145340
		[ReliabilityContract] // 0x00145308-0x00145340
		internal bool UndoNoThrow(); // 0x0065C06C-0x0065C074
		[ReliabilityContract] // 0x00145340-0x00145358
		internal void Undo(); // 0x0065C074-0x0065C07C
	}

	[Serializable]
	public sealed class ExecutionContext : IDisposable, ISerializable // TypeDefIndex: 743
	{
		// Fields
		private SynchronizationContext _syncContext; // 0x08
		private SynchronizationContext _syncContextNoFlow; // 0x0C
		private LogicalCallContext _logicalCallContext; // 0x10
		private IllogicalCallContext _illogicalCallContext; // 0x14
		private Flags _flags; // 0x18
		private Dictionary<IAsyncLocal, object> _localValues; // 0x1C
		private List<IAsyncLocal> _localChangeNotifications; // 0x20
		private static readonly ExecutionContext s_dummyDefaultEC; // 0x00
	
		// Properties
		internal bool isNewCapture { get; set; } // 0x0065A600-0x0065A610 0x0065A610-0x0065A628
		internal bool isFlowSuppressed { get; set; } // 0x0065A628-0x0065A634 0x0065A634-0x0065A64C
		internal static ExecutionContext PreAllocatedDefault { get; } // 0x0065A64C-0x0065A6D8 
		internal bool IsPreAllocatedDefault { get; } // 0x0065A6D8-0x0065A6E4 
		internal LogicalCallContext LogicalCallContext { get; set; } // 0x0065ACBC-0x0065AD3C 0x0065AD3C-0x0065AD44
		internal IllogicalCallContext IllogicalCallContext { get; set; } // 0x0065AD44-0x0065ADC4 0x0065ADC4-0x0065ADCC
		internal SynchronizationContext SynchronizationContext { [ReliabilityContract] /* 0x00145398-0x001453B0 */ get; [ReliabilityContract] /* 0x001453B0-0x001453C8 */ set; } // 0x0065ADCC-0x0065ADD4 0x0065ADD4-0x0065ADDC
		internal SynchronizationContext SynchronizationContextNoFlow { [ReliabilityContract] /* 0x001453C8-0x001453E0 */ get; [ReliabilityContract] /* 0x001453E0-0x001453F8 */ set; } // 0x0065ADDC-0x0065ADE4 0x0065ADE4-0x0065ADEC
	
		// Nested types
		private enum Flags // TypeDefIndex: 744
		{
			None = 0,
			IsNewCapture = 1,
			IsFlowSuppressed = 2,
			IsPreAllocatedDefault = 4
		}
	
		internal struct Reader // TypeDefIndex: 745
		{
			// Fields
			private ExecutionContext m_ec; // 0x00
	
			// Properties
			public bool IsNull { get; } // 0x0065BF80-0x0065BF94 
			public bool IsFlowSuppressed { get; } // 0x0065BF9C-0x0065BFB4 
			public SynchronizationContext SynchronizationContext { get; } // 0x0065BFB4-0x0065BFC8 
			public SynchronizationContext SynchronizationContextNoFlow { get; } // 0x0065BFC8-0x0065BFDC 
			public LogicalCallContext.Reader LogicalCallContext { get; } // 0x0065BFDC-0x0065BFE4 
	
			// Constructors
			public Reader(ExecutionContext ec); // 0x0065BF70-0x0065BF78
	
			// Methods
			public ExecutionContext DangerousGetRawExecutionContext(); // 0x0065BF78-0x0065BF80
			public bool IsDefaultFTContext(bool ignoreSyncCtx); // 0x0065BF94-0x0065BF9C
			public bool HasSameLocalValues(ExecutionContext other); // 0x0065BFE4-0x0065C06C
		}
	
		[Flags] // 0x0013D470-0x0013D480
		internal enum CaptureOptions // TypeDefIndex: 746
		{
			None = 0,
			IgnoreSyncCtx = 1,
			OptimizeDefaultCase = 2
		}
	
		// Constructors
		[ReliabilityContract] // 0x00145358-0x00145370
		internal ExecutionContext(); // 0x0065A6E4-0x0065A6EC
		[ReliabilityContract] // 0x00145370-0x00145388
		internal ExecutionContext(bool isPreAllocatedDefault); // 0x0065A6EC-0x0065A714
		private ExecutionContext(SerializationInfo info, StreamingContext context); // 0x0065BCF8-0x0065BE90
		static ExecutionContext(); // 0x0065BE90-0x0065BF70
	
		// Methods
		[HandleProcessCorruptedStateExceptions] // 0x00145388-0x00145398
		internal static void OnAsyncLocalContextChanged(ExecutionContext previous, ExecutionContext current); // 0x0065A714-0x0065ACBC
		public void Dispose(); // 0x0065ADEC-0x0065ADF0
		public static void Run(ExecutionContext executionContext, ContextCallback callback, object state); // 0x00656914-0x00656A78
		[FriendAccessAllowed] // 0x001453F8-0x00145408
		internal static void Run(ExecutionContext executionContext, ContextCallback callback, object state, bool preserveSyncCtx); // 0x0065ADF0-0x0065AE90
		[HandleProcessCorruptedStateExceptions] // 0x00145408-0x00145418
		internal static void RunInternal(ExecutionContext executionContext, ContextCallback callback, object state, bool preserveSyncCtx); // 0x0065AE90-0x0065B108
		internal static void EstablishCopyOnWriteScope(ref ExecutionContextSwitcher ecsw); // 0x0065B4E0-0x0065B68C
		private static void EstablishCopyOnWriteScope(Thread currentThread, bool knownNullWindowsIdentity, ref ExecutionContextSwitcher ecsw); // 0x0065B17C-0x0065B200
		[HandleProcessCorruptedStateExceptions] // 0x00145418-0x00145428
		internal static ExecutionContextSwitcher SetExecutionContext(ExecutionContext executionContext, bool preserveSyncCtx); // 0x0065B200-0x0065B4E0
		public ExecutionContext CreateCopy(); // 0x0065B68C-0x0065B87C
		internal ExecutionContext CreateMutableCopy(); // 0x0065B87C-0x0065BA40
		public static bool IsFlowSuppressed(); // 0x0065BA40-0x0065BA88
		public static ExecutionContext Capture(); // 0x0065BA88-0x0065BB04
		[FriendAccessAllowed] // 0x00145428-0x00145438
		internal static ExecutionContext FastCapture(); // 0x0065BB04-0x0065BBC4
		internal static ExecutionContext Capture(ref StackCrawlMark stackMark, CaptureOptions options); // 0x00656F78-0x006571CC
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0065BBC4-0x0065BCF8
		internal bool IsDefaultFTContext(bool ignoreSyncCtx); // 0x0065B108-0x0065B17C
	}

	[Serializable]
	public class LockRecursionException : Exception // TypeDefIndex: 747
	{
		// Constructors
		public LockRecursionException(); // 0x0065C120-0x0065C1A4
		public LockRecursionException(string message); // 0x0065C1A4-0x0065C230
		protected LockRecursionException(SerializationInfo info, StreamingContext context); // 0x0065C230-0x0065C2D8
	}

	[ComVisible] // 0x0013D480-0x0013D494
	public sealed class ManualResetEvent : EventWaitHandle // TypeDefIndex: 748
	{
		// Constructors
		public ManualResetEvent(bool initialState); // 0x0065C2D8-0x0065C2F8
	}

	[ComVisible] // 0x0013D494-0x0013D4A8
	public static class Monitor // TypeDefIndex: 749
	{
		// Methods
		public static void Enter(object obj); // 0x0065D72C-0x0065D730
		public static void Enter(object obj, ref bool lockTaken); // 0x0065CBFC-0x0065CC24
		private static void ThrowLockTakenException(); // 0x0065D730-0x0065D7EC
		[ReliabilityContract] // 0x00145438-0x00145450
		public static void Exit(object obj); // 0x0065CC24-0x0065CC28
		public static bool Wait(object obj, int millisecondsTimeout, bool exitContext); // 0x0065D7F8-0x0065D8B8
		public static bool Wait(object obj, int millisecondsTimeout); // 0x0065D3C0-0x0065D3C8
		public static void Pulse(object obj); // 0x0065D9C8-0x0065DA7C
		public static void PulseAll(object obj); // 0x0065CDC8-0x0065CE7C
		private static bool Monitor_test_synchronised(object obj); // 0x0065DBF4-0x0065DBF8
		private static void Monitor_pulse(object obj); // 0x0065DBF8-0x0065DBFC
		private static void ObjPulse(object obj); // 0x0065DA7C-0x0065DB38
		private static void Monitor_pulse_all(object obj); // 0x0065DBFC-0x0065DC00
		private static void ObjPulseAll(object obj); // 0x0065DB38-0x0065DBF4
		private static bool Monitor_wait(object obj, int ms); // 0x0065DC00-0x0065DC04
		private static bool ObjWait(bool exitContext, int millisecondsTimeout, object obj); // 0x0065D8B8-0x0065D9C8
		private static void try_enter_with_atomic_var(object obj, int millisecondsTimeout, ref bool lockTaken); // 0x0065DC04-0x0065DC08
		private static void ReliableEnterTimeout(object obj, int timeout, ref bool lockTaken); // 0x0065DC08-0x0065DD18
		private static void ReliableEnter(object obj, ref bool lockTaken); // 0x0065D7EC-0x0065D7F8
	}

	[ComVisible] // 0x0013D4A8-0x0013D4BC
	public delegate void ParameterizedThreadStart(object obj); // TypeDefIndex: 750; 0x0065DD38-0x0065E560

	[Serializable]
	[ComVisible] // 0x0013D4BC-0x0013D508
	[TypeForwardedFrom] // 0x0013D4BC-0x0013D508
	public class SemaphoreFullException : SystemException // TypeDefIndex: 751
	{
		// Constructors
		public SemaphoreFullException(); // 0x0065F19C-0x0065F210
		protected SemaphoreFullException(SerializationInfo info, StreamingContext context); // 0x0065F210-0x0065F230
	}

	public delegate void SendOrPostCallback(object state); // TypeDefIndex: 752; 0x00256430-0x00256C58

	public class SynchronizationContext // TypeDefIndex: 753
	{
		// Properties
		public static SynchronizationContext Current { get; } // 0x00257EA0-0x00257EFC 
		internal static SynchronizationContext CurrentNoFlow { [FriendAccessAllowed] /* 0x00145450-0x00145460 */ get; } // 0x00257F34-0x00257F90 
	
		// Constructors
		public SynchronizationContext(); // 0x00257C6C-0x00257C74
	
		// Methods
		public virtual void Send(SendOrPostCallback d, object state); // 0x00257C74-0x00257CA4
		public virtual void Post(SendOrPostCallback d, object state); // 0x00257CA4-0x00257D30
		public static void SetSynchronizationContext(SynchronizationContext syncContext); // 0x00257D70-0x00257DF0
		private static SynchronizationContext GetThreadLocalContext(); // 0x00257F2C-0x00257F34
		public virtual SynchronizationContext CreateCopy(); // 0x00257F90-0x00257FFC
	}

	[Serializable]
	[ComVisible] // 0x0013D508-0x0013D51C
	public class SynchronizationLockException : SystemException // TypeDefIndex: 754
	{
		// Constructors
		public SynchronizationLockException(); // 0x00257FFC-0x00258084
		public SynchronizationLockException(string message); // 0x00257B84-0x00257BB0
		protected SynchronizationLockException(SerializationInfo info, StreamingContext context); // 0x00258084-0x002580A4
	}

	internal class ThreadHelper // TypeDefIndex: 755
	{
		// Fields
		private Delegate _start; // 0x08
		private object _startArg; // 0x0C
		private ExecutionContext _executionContext; // 0x10
		internal static ContextCallback _ccb; // 0x00
	
		// Constructors
		static ThreadHelper(); // 0x00265FF4-0x0026608C
		internal ThreadHelper(Delegate start); // 0x00265AE8-0x00265B08
	
		// Methods
		internal void SetExecutionContextHelper(ExecutionContext ec); // 0x002658CC-0x002658D4
		private static void ThreadStart_Context(object state); // 0x0026608C-0x002662A0
		internal void ThreadStart(object obj); // 0x002666DC-0x002668D0
		internal void ThreadStart(); // 0x002668D0-0x00266AB4
	}

	[ClassInterface] // 0x0013D51C-0x0013D5BC
	[ComDefaultInterface] // 0x0013D51C-0x0013D5BC
	[ComVisible] // 0x0013D51C-0x0013D5BC
	public sealed class Thread : CriticalFinalizerObject, _Thread // TypeDefIndex: 756
	{
		// Fields
		private static LocalDataStoreMgr s_LocalDataStoreMgr; // 0x00
		[ThreadStatic] // 0x001430A4-0x001430B4
		private static LocalDataStoreHolder s_LocalDataStore; // 0x80000000
		[ThreadStatic] // 0x001430B4-0x001430C4
		internal static CultureInfo m_CurrentCulture; // 0x80000004
		[ThreadStatic] // 0x001430C4-0x001430D4
		internal static CultureInfo m_CurrentUICulture; // 0x80000008
		private static AsyncLocal<CultureInfo> s_asyncLocalCurrentCulture; // 0x04
		private static AsyncLocal<CultureInfo> s_asyncLocalCurrentUICulture; // 0x08
		private InternalThread internal_thread; // 0x08
		private object m_ThreadStartArg; // 0x0C
		private object pending_exception; // 0x10
		private IPrincipal principal; // 0x14
		private int principal_version; // 0x18
		[ThreadStatic] // 0x001430D4-0x001430E4
		private static Thread current_thread; // 0x8000000C
		private MulticastDelegate m_Delegate; // 0x1C
		private ExecutionContext m_ExecutionContext; // 0x20
		private bool m_ExecutionContextBelongsToOuterScope; // 0x24
	
		// Properties
		internal bool ExecutionContextBelongsToCurrentScope { get; set; } // 0x0026599C-0x002659B0 0x002659B0-0x002659BC
		public CultureInfo CurrentUICulture { get; } // 0x00265B64-0x00265B68 
		public CultureInfo CurrentCulture { get; } // 0x00265C64-0x00265C68 
		private InternalThread Internal { get; } // 0x00265D6C-0x00265D94 
		public static Context CurrentContext { get; } // 0x00265D94-0x00265D9C 
		public static Thread CurrentThread { [ReliabilityContract] /* 0x001454F0-0x00145508 */ get; } // 0x00257820-0x00257890 
		public bool IsThreadPoolThread { get; } // 0x002644D8-0x002644DC 
		internal bool IsThreadPoolThreadInternal { get; } // 0x00265DB0-0x00265DF0 
		public bool IsBackground { set; } // 0x00265054-0x0026509C
		public string Name { set; } // 0x00265EBC-0x00265EF0
		public ThreadState ThreadState { get; } // 0x00260134-0x00260160 
		public int ManagedThreadId { [ReliabilityContract] /* 0x00145538-0x00145550 */ get; } // 0x00257890-0x002578E8 
	
		// Constructors
		public Thread(ThreadStart start); // 0x002654F0-0x002655BC
		public Thread(ParameterizedThreadStart start); // 0x00264F88-0x00265054
	
		// Methods
		public void Start(); // 0x002656DC-0x00265700
		public void Start(object parameter); // 0x0026509C-0x002651A0
		private void Start(ref StackCrawlMark stackMark); // 0x00265700-0x002658CC
		[ReliabilityContract] // 0x00145460-0x00145478
		internal ExecutionContext.Reader GetExecutionContextReader(); // 0x00257EFC-0x00257F2C
		[ReliabilityContract] // 0x00145478-0x00145490
		internal ExecutionContext GetMutableExecutionContext(); // 0x00257DF0-0x00257EA0
		[ReliabilityContract] // 0x00145490-0x001454A8
		internal void SetExecutionContext(ExecutionContext value, bool belongsToCurrentScope); // 0x002659BC-0x002659CC
		[ReliabilityContract] // 0x001454A8-0x001454C0
		internal void SetExecutionContext(ExecutionContext.Reader value, bool belongsToCurrentScope); // 0x002659CC-0x00265A04
		private static void SleepInternal(int millisecondsTimeout); // 0x00265A04-0x00265A08
		public static void Sleep(int millisecondsTimeout); // 0x00257668-0x0025773C
		[ReliabilityContract] // 0x001454C0-0x001454D8
		private static bool YieldInternal(); // 0x00265A08-0x00265A0C
		[ReliabilityContract] // 0x001454D8-0x001454F0
		public static bool Yield(); // 0x0025773C-0x00257740
		private void SetStartHelper(Delegate start, int maxStackSize); // 0x002655BC-0x002656DC
		internal CultureInfo GetCurrentUICultureNoAppX(); // 0x00265B68-0x00265C64
		private CultureInfo GetCurrentCultureNoAppX(); // 0x00265C68-0x00265D64
		public static void MemoryBarrier(); // 0x00265D64-0x00265D68
		private void ConstructInternalThread(); // 0x00265D68-0x00265D6C
		private static Thread GetCurrentThread(); // 0x00265D9C-0x00265DA0
		public static int GetDomainID(); // 0x00265DA0-0x00265DA4
		private IntPtr Thread_internal(MulticastDelegate start); // 0x00265DA4-0x00265DA8
		[ReliabilityContract] // 0x00145508-0x00145520
		~Thread(); // 0x00265DA8-0x00265DB0
		private static void SetName_internal(InternalThread thread, string name); // 0x00265EB8-0x00265EBC
		private static void SpinWait_nop(); // 0x00265EF4-0x00265EF8
		[ReliabilityContract] // 0x00145520-0x00145538
		public static void SpinWait(int iterations); // 0x00257640-0x00257668
		private void StartInternal(IPrincipal principal, ref StackCrawlMark stackMark); // 0x002658D4-0x0026599C
		private static void SetState(InternalThread thread, ThreadState set); // 0x00265EB0-0x00265EB4
		private static void ClrState(InternalThread thread, ThreadState clr); // 0x00265EB4-0x00265EB8
		private static ThreadState GetState(InternalThread thread); // 0x00265EF0-0x00265EF4
		private static int SystemMaxStackStize(); // 0x00265EF8-0x00265EFC
		private static int GetProcessDefaultStackSize(int maxStackSize); // 0x00265A0C-0x00265AE8
		private void SetStart(MulticastDelegate start, int maxStackSize); // 0x00265B1C-0x00265B64
		[ReliabilityContract] // 0x00145550-0x00145568
		public static void BeginCriticalRegion(); // 0x00256DA4-0x002572DC
		[ReliabilityContract] // 0x00145568-0x00145580
		public static void EndCriticalRegion(); // 0x00257370-0x002573E8
		[ComVisible] // 0x00145580-0x00145594
		public override int GetHashCode(); // 0x00265EFC-0x00265F00
		private ThreadState ValidateThreadState(); // 0x00265DF0-0x00265EB0
	}

	[Serializable]
	internal enum StackCrawlMark // TypeDefIndex: 757
	{
		LookForMe = 0,
		LookForMyCaller = 1,
		LookForMyCallersCaller = 2,
		LookForThread = 3
	}

	[Serializable]
	[ComVisible] // 0x0013D5BC-0x0013D5D0
	public sealed class ThreadAbortException : SystemException // TypeDefIndex: 758
	{
		// Constructors
		private ThreadAbortException(); // 0x00265F2C-0x00265FD4
		internal ThreadAbortException(SerializationInfo info, StreamingContext context); // 0x00265FD4-0x00265FF4
	}

	[Serializable]
	[ComVisible] // 0x0013D5D0-0x0013D5E4
	public class ThreadInterruptedException : SystemException // TypeDefIndex: 759
	{
		// Constructors
		public ThreadInterruptedException(); // 0x00266AB4-0x00266B5C
		protected ThreadInterruptedException(SerializationInfo info, StreamingContext context); // 0x00266B5C-0x00266B7C
	}

	internal interface IThreadPoolWorkItem // TypeDefIndex: 760
	{
		// Methods
		void ExecuteWorkItem();
		void MarkAborted(ThreadAbortException tae);
	}

	[ComVisible] // 0x0013D5E4-0x0013D5F8
	public delegate void WaitCallback(object state); // TypeDefIndex: 761; 0x0026BC3C-0x0026C464

	[ComVisible] // 0x0013D5F8-0x0013D60C
	public delegate void WaitOrTimerCallback(object state, bool timedOut); // TypeDefIndex: 762; 0x0026DB24-0x0026E3AC

	internal static class ThreadPoolGlobals // TypeDefIndex: 763
	{
		// Fields
		public static uint tpQuantum; // 0x00
		public static int processorCount; // 0x04
		public static bool tpHosted; // 0x08
		public static bool vmTpInitialized; // 0x09
		public static bool enableWorkerTracking; // 0x0A
		public static ThreadPoolWorkQueue workQueue; // 0x0C
	
		// Constructors
		static ThreadPoolGlobals(); // 0x002675D4-0x00267684
	}

	internal sealed class ThreadPoolWorkQueue // TypeDefIndex: 764
	{
		// Fields
		internal QueueSegment queueHead; // 0x08
		internal QueueSegment queueTail; // 0x0C
		internal static SparseArray<WorkStealingQueue> allThreadQueues; // 0x00
		private int numOutstandingThreadRequests; // 0x10
	
		// Nested types
		internal class SparseArray<T> // TypeDefIndex: 765
			where T : class
		{
			// Fields
			private T[] m_array;
	
			// Properties
			internal T[] Current { get; }
	
			// Constructors
			internal SparseArray(int initialSize);
	
			// Methods
			internal int Add(T e);
			internal void Remove(T e);
		}
	
		internal class WorkStealingQueue // TypeDefIndex: 766
		{
			// Fields
			internal IThreadPoolWorkItem[] m_array; // 0x08
			private int m_mask; // 0x0C
			private int m_headIndex; // 0x10
			private int m_tailIndex; // 0x14
			private SpinLock m_foreignLock; // 0x18
	
			// Constructors
			public WorkStealingQueue(); // 0x00269394-0x00269430
	
			// Methods
			public void LocalPush(IThreadPoolWorkItem obj); // 0x00267A88-0x00267F20
			public bool LocalFindAndPop(IThreadPoolWorkItem obj); // 0x00267FF0-0x002682E0
			public bool LocalPop(out IThreadPoolWorkItem obj); // 0x0026856C-0x00268820
			public bool TrySteal(out IThreadPoolWorkItem obj, ref bool missedSteal); // 0x002689A8-0x002689C4
			private bool TrySteal(out IThreadPoolWorkItem obj, ref bool missedSteal, int millisecondsTimeout); // 0x00269120-0x00269394
		}
	
		internal class QueueSegment // TypeDefIndex: 767
		{
			// Fields
			internal readonly IThreadPoolWorkItem[] nodes; // 0x08
			private int indexes; // 0x0C
			public QueueSegment Next; // 0x10
	
			// Constructors
			[ReliabilityContract] // 0x00145594-0x001455AC
			public QueueSegment(); // 0x00267708-0x0026777C
	
			// Methods
			private void GetIndexes(out int upper, out int lower); // 0x00269090-0x002690BC
			private bool CompareExchangeIndexes(ref int prevUpper, int newUpper, ref int prevLower, int newLower); // 0x002690BC-0x00269120
			public bool IsUsedUp(); // 0x00268940-0x002689A8
			public bool TryEnqueue(IThreadPoolWorkItem node); // 0x00267F20-0x00267FF0
			public bool TryDequeue(out IThreadPoolWorkItem node); // 0x00268820-0x00268940
		}
	
		// Constructors
		public ThreadPoolWorkQueue(); // 0x00267684-0x00267708
		static ThreadPoolWorkQueue(); // 0x00268FFC-0x00269090
	
		// Methods
		public ThreadPoolWorkQueueThreadLocals EnsureCurrentThreadHasQueue(); // 0x0026777C-0x00267838
		internal void EnsureThreadRequested(); // 0x00267978-0x00267A40
		internal void MarkThreadRequestSatisfied(); // 0x00267A40-0x00267A88
		public void Enqueue(IThreadPoolWorkItem callback, bool forceGlobal); // 0x002673BC-0x00267524
		internal bool LocalFindAndPop(IThreadPoolWorkItem callback); // 0x00267524-0x002675BC
		public void Dequeue(ThreadPoolWorkQueueThreadLocals tl, out IThreadPoolWorkItem callback, out bool missedSteal); // 0x002682E0-0x0026856C
		internal static bool Dispatch(); // 0x002689C4-0x00268FFC
	}

	internal sealed class ThreadPoolWorkQueueThreadLocals // TypeDefIndex: 768
	{
		// Fields
		[ThreadStatic] // 0x001430E4-0x001430F4
		public static ThreadPoolWorkQueueThreadLocals threadLocals; // 0x80000000
		public readonly ThreadPoolWorkQueue workQueue; // 0x08
		public readonly ThreadPoolWorkQueue.WorkStealingQueue workStealingQueue; // 0x0C
		public readonly System.Random random; // 0x10
	
		// Constructors
		public ThreadPoolWorkQueueThreadLocals(ThreadPoolWorkQueue tpq); // 0x00267838-0x00267978
	
		// Methods
		private void CleanUp(); // 0x00269430-0x00269578
		~ThreadPoolWorkQueueThreadLocals(); // 0x00269578-0x00269630
	}

	internal static class _ThreadPoolWaitCallback // TypeDefIndex: 769
	{
		// Methods
		internal static bool PerformWaitCallback(); // 0x0026E458-0x0026E4D0
	}

	internal sealed class QueueUserWorkItemCallback : IThreadPoolWorkItem // TypeDefIndex: 770
	{
		// Fields
		private WaitCallback callback; // 0x08
		private ExecutionContext context; // 0x0C
		private object state; // 0x10
		internal static ContextCallback ccb; // 0x00
	
		// Constructors
		static QueueUserWorkItemCallback(); // 0x0065E598-0x0065E630
		internal QueueUserWorkItemCallback(WaitCallback waitCallback, object stateObj, bool compressStack, ref StackCrawlMark stackMark); // 0x0065E630-0x0065E714
	
		// Methods
		void IThreadPoolWorkItem.ExecuteWorkItem(); // 0x0065E714-0x0065E830
		void IThreadPoolWorkItem.MarkAborted(ThreadAbortException tae); // 0x0065E830-0x0065E834
		private static void WaitCallback_Context(object state); // 0x0065E834-0x0065E934
	}

	public static class ThreadPool // TypeDefIndex: 771
	{
		// Methods
		private static RegisteredWaitHandle RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, object state, uint millisecondsTimeOutInterval, bool executeOnlyOnce, ref StackCrawlMark stackMark, bool compressStack); // 0x00266B7C-0x00266ECC
		public static RegisteredWaitHandle RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, object state, TimeSpan timeout, bool executeOnlyOnce); // 0x00266EF8-0x00267158
		public static bool QueueUserWorkItem(WaitCallback callBack, object state); // 0x00257D44-0x00257D70
		public static bool UnsafeQueueUserWorkItem(WaitCallback callBack, object state); // 0x00266ECC-0x00266EF8
		private static bool QueueUserWorkItemHelper(WaitCallback callBack, object state, ref StackCrawlMark stackMark, bool compressStack); // 0x00267158-0x002672BC
		internal static void UnsafeQueueCustomWorkItem(IThreadPoolWorkItem workItem, bool forceGlobal); // 0x00258950-0x00258A08
		internal static bool TryPopCustomWorkItem(IThreadPoolWorkItem workItem); // 0x00265260-0x00265360
		internal static bool RequestWorkerThread(); // 0x002675BC-0x002675C0
		private static void EnsureVMInitialized(); // 0x002672BC-0x002673BC
		internal static bool NotifyWorkItemComplete(); // 0x002675C4-0x002675C8
		internal static void ReportThreadStatus(bool isWorking); // 0x002675C8-0x002675CC
		internal static void NotifyWorkItemProgress(); // 0x0026536C-0x00265450
		internal static void NotifyWorkItemProgressNative(); // 0x002675CC-0x002675D0
		internal static bool IsThreadPoolHosted(); // 0x002675D0-0x002675D4
		private static void InitializeVMTp(ref bool enableWorkerTracking); // 0x002675C0-0x002675C4
	}

	[ComVisible] // 0x0013D60C-0x0013D620
	public delegate void ThreadStart(); // TypeDefIndex: 772; 0x002662A0-0x002666DC

	[Serializable]
	[ComVisible] // 0x0013D620-0x0013D654
	[Flags] // 0x0013D620-0x0013D654
	public enum ThreadState // TypeDefIndex: 773
	{
		Running = 0,
		StopRequested = 1,
		SuspendRequested = 2,
		Background = 4,
		Unstarted = 8,
		Stopped = 16,
		WaitSleepJoin = 32,
		Suspended = 64,
		AbortRequested = 128,
		Aborted = 256
	}

	[Serializable]
	[ComVisible] // 0x0013D654-0x0013D668
	public class ThreadStateException : SystemException // TypeDefIndex: 774
	{
		// Constructors
		public ThreadStateException(); // 0x00269668-0x002696F0
		public ThreadStateException(string message); // 0x00265F00-0x00265F2C
		protected ThreadStateException(SerializationInfo info, StreamingContext context); // 0x002696F0-0x00269710
	}

	[ComVisible] // 0x0013D668-0x0013D67C
	public static class Timeout // TypeDefIndex: 775
	{
		// Fields
		[ComVisible] // 0x001430F4-0x00143108
		public static readonly TimeSpan InfiniteTimeSpan; // 0x00
	
		// Constructors
		static Timeout(); // 0x00269710-0x002697BC
	}

	[ComVisible] // 0x0013D67C-0x0013D690
	public abstract class WaitHandle : MarshalByRefObject, IDisposable // TypeDefIndex: 776
	{
		// Fields
		public const int WaitTimeout = 258; // Metadata: 0x00204C6E
		private const int MAX_WAITHANDLES = 64; // Metadata: 0x00204C72
		private IntPtr waitHandle; // 0x0C
		internal SafeWaitHandle safeWaitHandle; // 0x10
		internal bool hasThreadAffinity; // 0x14
		private const int WAIT_OBJECT_0 = 0; // Metadata: 0x00204C76
		private const int WAIT_ABANDONED = 128; // Metadata: 0x00204C7A
		private const int WAIT_FAILED = 2147483647; // Metadata: 0x00204C7E
		private const int ERROR_TOO_MANY_POSTS = 298; // Metadata: 0x00204C82
		protected static readonly IntPtr InvalidHandle; // 0x00
		internal const int MaxWaitHandles = 64; // Metadata: 0x00204C86
	
		// Properties
		[Obsolete] // 0x00146630-0x00146688
		public virtual IntPtr Handle { set; } // 0x0026C5BC-0x0026C6DC
		public SafeWaitHandle SafeWaitHandle { [ReliabilityContract] /* 0x001455AC-0x001455C4 */ get; } // 0x0026C6DC-0x0026C7BC 
	
		// Constructors
		protected WaitHandle(); // 0x0026C4F8-0x0026C518
		static WaitHandle(); // 0x0026D9D0-0x0026DA3C
	
		// Methods
		private void Init(); // 0x0026C518-0x0026C5BC
		internal void SetHandleInternal(SafeWaitHandle handle); // 0x0026C7BC-0x0026C7F8
		public virtual bool WaitOne(int millisecondsTimeout, bool exitContext); // 0x0026C7F8-0x0026C8E8
		public virtual bool WaitOne(TimeSpan timeout, bool exitContext); // 0x0026C9A0-0x0026CB14
		public virtual bool WaitOne(); // 0x0026CB14-0x0026CB2C
		public virtual bool WaitOne(int millisecondsTimeout); // 0x0026CB2C-0x0026CB40
		public virtual bool WaitOne(TimeSpan timeout); // 0x0026CB40-0x0026CB6C
		private bool WaitOne(long timeout, bool exitContext); // 0x0026C8E8-0x0026C9A0
		internal static bool InternalWaitOne(SafeHandle waitableSafeHandle, long millisecondsTimeout, bool hasThreadAffinity, bool exitContext); // 0x0026CB6C-0x0026CCD0
		[ReliabilityContract] // 0x001455C4-0x001455DC
		public static int WaitAny(WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext); // 0x0026CEC4-0x0026D300
		[ReliabilityContract] // 0x001455DC-0x001455F4
		public static int WaitAny(WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext); // 0x0026D6B8-0x0026D850
		private static void ThrowAbandonedMutexException(); // 0x0026CE3C-0x0026CEC4
		private static void ThrowAbandonedMutexException(int location, WaitHandle handle); // 0x0026D620-0x0026D6B8
		public virtual void Close(); // 0x0026D850-0x0026D8EC
		protected virtual void Dispose(bool explicitDisposing); // 0x0026D8EC-0x0026D930
		public void Dispose(); // 0x0026D930-0x0026D9CC
		private static int WaitMultiple(WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext, bool WaitAll); // 0x0026D300-0x0026D620
		private static int WaitOneNative(SafeHandle waitableSafeHandle, uint millisecondsTimeout, bool hasThreadAffinity, bool exitContext); // 0x0026CCD0-0x0026CE3C
		private static unsafe int Wait_internal(IntPtr* handles, int numHandles, bool waitAll, int ms); // 0x0026D9CC-0x0026D9D0
	}

	[Serializable]
	[ComVisible] // 0x0013D690-0x0013D6A4
	public class WaitHandleCannotBeOpenedException : ApplicationException // TypeDefIndex: 777
	{
		// Constructors
		public WaitHandleCannotBeOpenedException(); // 0x0026DA3C-0x0026DAC4
		public WaitHandleCannotBeOpenedException(string message); // 0x0026DAC4-0x0026DAF0
		protected WaitHandleCannotBeOpenedException(SerializationInfo info, StreamingContext context); // 0x0026DAF0-0x0026DB10
	}

	public static class Interlocked // TypeDefIndex: 778
	{
		// Methods
		[ReliabilityContract] // 0x001455F4-0x0014560C
		public static int CompareExchange(ref int location1, int value, int comparand); // 0x00658AA0-0x00658AA4
		[ReliabilityContract] // 0x0014560C-0x00145624
		internal static int CompareExchange(ref int location1, int value, int comparand, ref bool succeeded); // 0x0065C07C-0x0065C080
		[ReliabilityContract] // 0x00145624-0x0014563C
		public static object CompareExchange(ref object location1, object value, object comparand); // 0x0065C080-0x0065C084
		public static float CompareExchange(ref float location1, float value, float comparand); // 0x0065C084-0x0065C088
		[ReliabilityContract] // 0x0014563C-0x00145654
		public static int Decrement(ref int location); // 0x0065C088-0x0065C08C
		[ReliabilityContract] // 0x00145654-0x0014566C
		public static int Increment(ref int location); // 0x0065C08C-0x0065C090
		[ReliabilityContract] // 0x0014566C-0x00145684
		public static int Exchange(ref int location1, int value); // 0x006590F0-0x006590F4
		[ReliabilityContract] // 0x00145684-0x0014569C
		public static object Exchange(ref object location1, object value); // 0x0065C090-0x0065C094
		public static float Exchange(ref float location1, float value); // 0x0065C094-0x0065C098
		public static long CompareExchange(ref long location1, long value, long comparand); // 0x0065C098-0x0065C09C
		[ReliabilityContract] // 0x0014569C-0x001456B4
		public static IntPtr CompareExchange(ref IntPtr location1, IntPtr value, IntPtr comparand); // 0x0065C09C-0x0065C0A0
		public static double CompareExchange(ref double location1, double value, double comparand); // 0x0065C0A0-0x0065C0A4
		[ComVisible] // 0x001456B4-0x001456F0
		[ReliabilityContract] // 0x001456B4-0x001456F0
		public static T CompareExchange<T>(ref T location1, T value, T comparand)
			where T : class;
		public static long Exchange(ref long location1, long value); // 0x0065C0A4-0x0065C0A8
		[ReliabilityContract] // 0x001456F0-0x00145708
		public static IntPtr Exchange(ref IntPtr location1, IntPtr value); // 0x0065C0A8-0x0065C0AC
		public static double Exchange(ref double location1, double value); // 0x0065C0AC-0x0065C0B0
		[ComVisible] // 0x00145708-0x00145744
		[ReliabilityContract] // 0x00145708-0x00145744
		public static T Exchange<T>(ref T location1, T value)
			where T : class;
		public static long Read(ref long location); // 0x0065C0B0-0x0065C0B4
		[ReliabilityContract] // 0x00145744-0x0014575C
		public static int Add(ref int location1, int value); // 0x0065C0B4-0x0065C0B8
	}

	[ComVisible] // 0x0013D6A4-0x0013D6B8
	public sealed class Mutex : WaitHandle // TypeDefIndex: 779
	{
	}

	internal static class NativeEventCalls // TypeDefIndex: 780
	{
		// Methods
		public static IntPtr CreateEvent_internal(bool manual, bool initial, string name, out int errorCode); // 0x0065A38C-0x0065A390
		public static bool SetEvent(SafeWaitHandle handle); // 0x0065A51C-0x0065A600
		private static bool SetEvent_internal(IntPtr handle); // 0x0065DD18-0x0065DD1C
		public static bool ResetEvent(SafeWaitHandle handle); // 0x0065A438-0x0065A51C
		private static bool ResetEvent_internal(IntPtr handle); // 0x0065DD1C-0x0065DD20
		public static void CloseEvent_internal(IntPtr handle); // 0x0065DD20-0x0065DD24
	}

	[ComVisible] // 0x0013D6B8-0x0013D6CC
	public struct NativeOverlapped // TypeDefIndex: 781
	{
		// Fields
		public IntPtr InternalLow; // 0x00
		public IntPtr InternalHigh; // 0x04
		public int OffsetLow; // 0x08
		public int OffsetHigh; // 0x0C
		public IntPtr EventHandle; // 0x10
	}

	[ComVisible] // 0x0013D6CC-0x0013D6E0
	public sealed class RegisteredWaitHandle : MarshalByRefObject // TypeDefIndex: 782
	{
		// Fields
		private WaitHandle _waitObject; // 0x0C
		private WaitOrTimerCallback _callback; // 0x10
		private object _state; // 0x14
		private WaitHandle _finalEvent; // 0x18
		private ManualResetEvent _cancelEvent; // 0x1C
		private TimeSpan _timeout; // 0x20
		private int _callsInProcess; // 0x28
		private bool _executeOnlyOnce; // 0x2C
		private bool _unregistered; // 0x2D
	
		// Constructors
		internal RegisteredWaitHandle(WaitHandle waitObject, WaitOrTimerCallback callback, object state, TimeSpan timeout, bool executeOnlyOnce); // 0x0065E934-0x0065EA00
	
		// Methods
		internal void Wait(object state); // 0x0065EA00-0x0065F034
		private void DoCallBack(object timedOut); // 0x0065F034-0x0065F19C
	}

	internal sealed class InternalThread : CriticalFinalizerObject // TypeDefIndex: 783
	{
		// Fields
		private int lock_thread_id; // 0x08
		private IntPtr handle; // 0x0C
		private IntPtr native_handle; // 0x10
		private IntPtr unused3; // 0x14
		private IntPtr name; // 0x18
		private int name_len; // 0x1C
		private ThreadState state; // 0x20
		private object abort_exc; // 0x24
		private int abort_state_handle; // 0x28
		internal long thread_id; // 0x30
		private IntPtr debugger_thread; // 0x38
		private UIntPtr static_data; // 0x3C
		private IntPtr runtime_thread_info; // 0x40
		private object current_appcontext; // 0x44
		private object root_domain_thread; // 0x48
		internal byte[] _serialized_principal; // 0x4C
		internal int _serialized_principal_version; // 0x50
		private IntPtr appdomain_refs; // 0x54
		private int interruption_requested; // 0x58
		private IntPtr synch_cs; // 0x5C
		internal bool threadpool_thread; // 0x60
		private bool thread_interrupt_requested; // 0x61
		internal int stack_size; // 0x64
		internal byte apartment_state; // 0x68
		internal int critical_region_level; // 0x6C
		internal int managed_id; // 0x70
		private int small_id; // 0x74
		private IntPtr manage_callback; // 0x78
		private IntPtr unused4; // 0x7C
		private IntPtr flags; // 0x80
		private IntPtr thread_pinning_ref; // 0x84
		private IntPtr abort_protected_block_count; // 0x88
		private int priority; // 0x8C
		private IntPtr owned_mutex; // 0x90
		private IntPtr suspended_event; // 0x94
		private int self_suspended; // 0x98
		private IntPtr unused1; // 0x9C
		private IntPtr unused2; // 0xA0
		private IntPtr last; // 0xA4
	
		// Methods
		private void Thread_free_internal(); // 0x0065C0B8-0x0065C0BC
		[ReliabilityContract] // 0x0014575C-0x00145774
		~InternalThread(); // 0x0065C0BC-0x0065C120
	}

	[ComVisible] // 0x0013D6E0-0x0013D6F4
	public sealed class Timer : MarshalByRefObject, IDisposable // TypeDefIndex: 784
	{
		// Fields
		private static readonly Scheduler scheduler; // 0x00
		private TimerCallback callback; // 0x0C
		private object state; // 0x10
		private long due_time_ms; // 0x18
		private long period_ms; // 0x20
		private long next_run; // 0x28
		private bool disposed; // 0x30
	
		// Nested types
		private sealed class TimerComparer : IComparer // TypeDefIndex: 785
		{
			// Constructors
			public TimerComparer(); // 0x0026A36C-0x0026A374
	
			// Methods
			public int Compare(object x, object y); // 0x0026BAEC-0x0026BBEC
		}
	
		private sealed class Scheduler // TypeDefIndex: 786
		{
			// Fields
			private static Scheduler instance; // 0x00
			private SortedList list; // 0x08
			private ManualResetEvent changed; // 0x0C
	
			// Properties
			public static Scheduler Instance { get; } // 0x0026A110-0x0026A19C 
	
			// Constructors
			static Scheduler(); // 0x0026A19C-0x0026A20C
			private Scheduler(); // 0x0026A20C-0x0026A36C
	
			// Methods
			public void Remove(Timer timer); // 0x00269E00-0x00269ED4
			public void Change(Timer timer, long new_next_run); // 0x00269ED8-0x0026A080
			private int FindByDueTime(long nr); // 0x0026A664-0x0026A8BC
			private void Add(Timer timer); // 0x0026A3F0-0x0026A664
			private int InternalRemove(Timer timer); // 0x0026A374-0x0026A3F0
			private static void TimerCB(object o); // 0x0026A8BC-0x0026A9B8
			private void SchedulerThread(); // 0x0026B1E0-0x0026B9D0
			private void ShrinkIfNeeded(List<Timer> list, int initial); // 0x0026B9D0-0x0026BAEC
		}
	
		// Constructors
		public Timer(TimerCallback callback, object state, int dueTime, int period); // 0x002610E0-0x00261138
		public Timer(TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period); // 0x002698A8-0x002699B0
		static Timer(); // 0x0026A080-0x0026A110
	
		// Methods
		private void Init(TimerCallback callback, object state, long dueTime, long period); // 0x002697BC-0x002698A8
		public bool Change(TimeSpan dueTime, TimeSpan period); // 0x00269D10-0x00269E00
		public void Dispose(); // 0x002621C0-0x00262280
		private bool Change(long dueTime, long period, bool first); // 0x002699B0-0x00269D10
		internal void KeepRootedWhileScheduled(); // 0x00261138-0x0026113C
		private static long GetTimeMonotonic(); // 0x00269ED4-0x00269ED8
	}

	[ComVisible] // 0x0013D6F4-0x0013D708
	public delegate void TimerCallback(object state); // TypeDefIndex: 787; 0x0026A9B8-0x0026B1E0

	public static class Volatile // TypeDefIndex: 788
	{
		// Methods
		[ReliabilityContract] // 0x00145774-0x0014578C
		public static bool Read(ref bool location); // 0x0026BC24-0x0026BC3C
		[ReliabilityContract] // 0x0014578C-0x001457A4
		public static T Read<T>(ref T location)
			where T : class;
		[ReliabilityContract] // 0x001457A4-0x001457BC
		public static void Write<T>(ref T location, T value)
			where T : class;
	}
}

namespace System.Threading.Tasks
{
	[FriendAccessAllowed] // 0x0013D708-0x0013D718
	internal enum CausalityTraceLevel // TypeDefIndex: 789
	{
		Required = 0,
		Important = 1,
		Verbose = 2
	}

	[FriendAccessAllowed] // 0x0013D718-0x0013D728
	internal enum AsyncCausalityStatus // TypeDefIndex: 790
	{
		Started = 0,
		Completed = 1,
		Canceled = 2,
		Error = 3
	}

	internal enum CausalityRelation // TypeDefIndex: 791
	{
		AssignDelegate = 0,
		Join = 1,
		Choice = 2,
		Cancel = 3,
		Error = 4
	}

	internal enum CausalitySynchronousWork // TypeDefIndex: 792
	{
		CompletionNotification = 0,
		ProgressNotification = 1,
		Execution = 2
	}

	[FriendAccessAllowed] // 0x0013D728-0x0013D738
	internal static class AsyncCausalityTracer // TypeDefIndex: 793
	{
		// Properties
		[FriendAccessAllowed] // 0x00146688-0x00146698
		internal static bool LoggingOn { [FriendAccessAllowed] /* 0x001457BC-0x001457CC */ get; } // 0x002580A4-0x002580AC 
	
		// Methods
		[FriendAccessAllowed] // 0x001457CC-0x001457DC
		internal static void TraceOperationCreation(CausalityTraceLevel traceLevel, int taskId, string operationName, ulong relatedContext); // 0x002580AC-0x002580B0
		[FriendAccessAllowed] // 0x001457DC-0x001457EC
		internal static void TraceOperationCompletion(CausalityTraceLevel traceLevel, int taskId, AsyncCausalityStatus status); // 0x002580B0-0x002580B4
		internal static void TraceOperationRelation(CausalityTraceLevel traceLevel, int taskId, CausalityRelation relation); // 0x002580B4-0x002580B8
		internal static void TraceSynchronousWorkStart(CausalityTraceLevel traceLevel, int taskId, CausalitySynchronousWork work); // 0x002580B8-0x002580BC
		internal static void TraceSynchronousWorkCompletion(CausalityTraceLevel traceLevel, CausalitySynchronousWork work); // 0x002580BC-0x002580C0
	}

	[DebuggerDisplay] // 0x0013D738-0x0013D7D8
	[DebuggerTypeProxy] // 0x0013D738-0x0013D7D8
	public class Task<TResult> : Task // TypeDefIndex: 794
	{
		// Fields
		internal TResult m_result;
		private static readonly TaskFactory<TResult> s_Factory;
		internal static readonly Func<Task<Task>, Task<TResult>> TaskWhenAnyCast;
	
		// Properties
		[DebuggerBrowsable] // 0x00146698-0x001466AC
		public TResult Result { get; }
		internal TResult ResultOnSuccess { get; }
	
		// Nested types
		[Serializable]
		[CompilerGenerated] // 0x0013D7D8-0x0013D7E8
		private sealed class <>c // TypeDefIndex: 795
		{
			// Fields
			public static readonly <>c<TResult> <>9;
	
			// Constructors
			static <>c();
			public <>c();
	
			// Methods
			internal Task<TResult> <.cctor>b__64_0(Task<Task> completed);
		}
	
		// Constructors
		internal Task();
		internal Task(TResult result);
		internal Task(bool canceled, TResult result, TaskCreationOptions creationOptions, CancellationToken ct);
		public Task(Func<object, TResult> function, object state, CancellationToken cancellationToken, TaskCreationOptions creationOptions);
		internal Task(Func<TResult> valueSelector, Task parent, CancellationToken cancellationToken, TaskCreationOptions creationOptions, InternalTaskOptions internalOptions, TaskScheduler scheduler, ref StackCrawlMark stackMark);
		internal Task(Func<TResult> valueSelector, Task parent, CancellationToken cancellationToken, TaskCreationOptions creationOptions, InternalTaskOptions internalOptions, TaskScheduler scheduler);
		internal Task(Delegate valueSelector, object state, Task parent, CancellationToken cancellationToken, TaskCreationOptions creationOptions, InternalTaskOptions internalOptions, TaskScheduler scheduler);
		static Task();
	
		// Methods
		internal static Task<TResult> StartNew(Task parent, Func<TResult> function, CancellationToken cancellationToken, TaskCreationOptions creationOptions, InternalTaskOptions internalOptions, TaskScheduler scheduler, ref StackCrawlMark stackMark);
		internal bool TrySetResult(TResult result);
		internal void DangerousSetResult(TResult result);
		internal TResult GetResultCore(bool waitCompletionNotification);
		internal bool TrySetException(object exceptionObject);
		internal bool TrySetCanceled(CancellationToken tokenToRecord);
		internal bool TrySetCanceled(CancellationToken tokenToRecord, object cancellationException);
		internal override void InnerInvoke();
		public new TaskAwaiter<TResult> GetAwaiter();
		public new ConfiguredTaskAwaitable<TResult> ConfigureAwait(bool continueOnCapturedContext);
	}

	internal class SystemThreadingTasks_FutureDebugView<TResult> // TypeDefIndex: 796
	{
	}

	public class TaskFactory<TResult> // TypeDefIndex: 797
	{
		// Fields
		private CancellationToken m_defaultCancellationToken;
		private TaskScheduler m_defaultScheduler;
		private TaskCreationOptions m_defaultCreationOptions;
		private TaskContinuationOptions m_defaultContinuationOptions;
	
		// Nested types
		private sealed class FromAsyncTrimPromise<TInstance> : Task<TResult> // TypeDefIndex: 798
			where TInstance : class
		{
			// Fields
			internal static readonly AsyncCallback s_completeFromAsyncResult;
			private TInstance m_thisRef;
			private Func<TInstance, IAsyncResult, TResult> m_endMethod;
	
			// Constructors
			internal FromAsyncTrimPromise(TInstance thisRef, Func<TInstance, IAsyncResult, TResult> endMethod);
			static FromAsyncTrimPromise();
	
			// Methods
			internal static void CompleteFromAsyncResult(IAsyncResult asyncResult);
			internal void Complete(TInstance thisRef, Func<TInstance, IAsyncResult, TResult> endMethod, IAsyncResult asyncResult, bool requiresSynchronization);
		}
	
		// Constructors
		public TaskFactory();
		public TaskFactory(CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskContinuationOptions continuationOptions, TaskScheduler scheduler);
	
		// Methods
		internal static Task<TResult> FromAsyncTrim<TInstance, TArgs>(TInstance thisRef, TArgs args, Func<TInstance, TArgs, AsyncCallback, object, IAsyncResult> beginMethod, Func<TInstance, IAsyncResult, TResult> endMethod)
			where TInstance : class;
	}

	internal class Shared<T> // TypeDefIndex: 799
	{
		// Fields
		internal T Value;
	
		// Constructors
		internal Shared(T value);
	}

	public enum TaskStatus // TypeDefIndex: 800
	{
		Created = 0,
		WaitingForActivation = 1,
		WaitingToRun = 2,
		Running = 3,
		WaitingForChildrenToComplete = 4,
		RanToCompletion = 5,
		Canceled = 6,
		Faulted = 7
	}

	[DebuggerDisplay] // 0x0013D7E8-0x0013D888
	[DebuggerTypeProxy] // 0x0013D7E8-0x0013D888
	public class Task : IThreadPoolWorkItem, IAsyncResult, IDisposable // TypeDefIndex: 801
	{
		// Fields
		[ThreadStatic] // 0x00143108-0x00143118
		internal static Task t_currentTask; // 0x80000000
		[ThreadStatic] // 0x00143118-0x00143128
		private static StackGuard t_stackGuard; // 0x80000004
		internal static int s_taskIdCounter; // 0x00
		private static readonly TaskFactory s_factory; // 0x04
		private int m_taskId; // 0x08
		internal object m_action; // 0x0C
		internal object m_stateObject; // 0x10
		internal TaskScheduler m_taskScheduler; // 0x14
		internal readonly Task m_parent; // 0x18
		internal int m_stateFlags; // 0x1C
		private object m_continuationObject; // 0x20
		private static readonly object s_taskCompletionSentinel; // 0x08
		[FriendAccessAllowed] // 0x00143128-0x00143138
		internal static bool s_asyncDebuggingEnabled; // 0x0C
		private static readonly Dictionary<int, Task> s_currentActiveTasks; // 0x10
		private static readonly object s_activeTasksLock; // 0x14
		internal ContingentProperties m_contingentProperties; // 0x24
		private static readonly Action<object> s_taskCancelCallback; // 0x18
		private static readonly Func<ContingentProperties> s_createContingentProperties; // 0x1C
		private static Task s_completedTask; // 0x20
		private static readonly Predicate<Task> s_IsExceptionObservedByParentPredicate; // 0x24
		private static ContextCallback s_ecCallback; // 0x28
		private static readonly Predicate<object> s_IsTaskContinuationNullPredicate; // 0x2C
	
		// Properties
		internal TaskCreationOptions Options { get; } // 0x0025B3FC-0x0025B480 
		internal bool IsWaitNotificationEnabledOrNotRanToCompletion { get; } // 0x0025BAB8-0x0025BAE0 
		internal virtual bool ShouldNotifyDebuggerOfWaitCompletion { get; } // 0x0025BAE0-0x0025BAF8 
		internal bool IsWaitNotificationEnabled { get; } // 0x0025BA98-0x0025BAB0 
		public int Id { get; } // 0x002598CC-0x00259980 
		internal static Task InternalCurrent { get; } // 0x0025BD14-0x0025BDA4 
		internal static StackGuard CurrentStackGuard { get; } // 0x0025BDA4-0x0025BEA8 
		public AggregateException Exception { get; } // 0x0025BEA8-0x0025BED8 
		public TaskStatus Status { get; } // 0x0025C080-0x0025C0D8 
		public bool IsCanceled { get; } // 0x00259CE0-0x00259D08 
		internal bool IsCancellationRequested { get; } // 0x0025C0D8-0x0025C11C 
		internal CancellationToken CancellationToken { get; } // 0x0025C218-0x0025C238 
		internal bool IsCancellationAcknowledged { get; } // 0x0025C238-0x0025C250 
		public bool IsCompleted { get; } // 0x0025C250-0x0025C2D8 
		internal bool IsRanToCompletion { get; } // 0x00259CB8-0x00259CE0 
		public TaskCreationOptions CreationOptions { get; } // 0x0025AF94-0x0025AFA8 
		WaitHandle IAsyncResult.AsyncWaitHandle { get; } // 0x0025C2E4-0x0025C3D0 
		public object AsyncState { get; } // 0x0025C50C-0x0025C514 
		bool IAsyncResult.CompletedSynchronously { get; } // 0x0025C514-0x0025C51C 
		internal TaskScheduler ExecutingTaskScheduler { get; } // 0x0025C51C-0x0025C524 
		public static Task CompletedTask { get; } // 0x0025C524-0x0025C620 
		internal ManualResetEventSlim CompletedEvent { get; } // 0x0025C3D0-0x0025C50C 
		internal bool IsSelfReplicatingRoot { get; } // 0x0025BB0C-0x0025BB2C 
		internal bool IsChildReplica { get; } // 0x0025C620-0x0025C634 
		internal bool ExceptionRecorded { get; } // 0x0025C634-0x0025C690 
		public bool IsFaulted { get; } // 0x0025BED8-0x0025BEF0 
		internal ExecutionContext CapturedContext { get; set; } // 0x0025C6B0-0x0025C760 0x002583E8-0x00258468
		internal bool IsExceptionObservedByParent { get; } // 0x0025D658-0x0025D670 
		internal bool IsDelegateInvoked { get; } // 0x0025D670-0x0025D688 
		internal virtual object SavedStateForNextReplica { get; } // 0x0025EB44-0x0025EB4C 
		internal virtual object SavedStateFromPreviousReplica { set; } // 0x0025EB4C-0x0025EB50
		internal virtual Task HandedOverChildReplica { get; set; } // 0x0025EB50-0x0025EB58 0x0025EB58-0x0025EB5C
	
		// Nested types
		internal class ContingentProperties // TypeDefIndex: 802
		{
			// Fields
			internal ExecutionContext m_capturedContext; // 0x08
			internal ManualResetEventSlim m_completionEvent; // 0x0C
			internal TaskExceptionHolder m_exceptionsHolder; // 0x10
			internal CancellationToken m_cancellationToken; // 0x14
			internal Shared<CancellationTokenRegistration> m_cancellationRegistration; // 0x18
			internal int m_internalCancellationRequested; // 0x1C
			internal int m_completionCountdown; // 0x20
			internal List<Task> m_exceptionalChildren; // 0x24
	
			// Constructors
			public ContingentProperties(); // 0x0025AD88-0x0025ADB0
	
			// Methods
			internal void SetCompleted(); // 0x0025DB64-0x0025DB8C
			internal void DeregisterCancellationCallback(); // 0x0025DB8C-0x0025DC80
		}
	
		private sealed class SetOnInvokeMres : ManualResetEventSlim, ITaskCompletionAction // TypeDefIndex: 803
		{
			// Constructors
			internal SetOnInvokeMres(); // 0x0025FE78-0x0025FF04
	
			// Methods
			public void Invoke(Task completingTask); // 0x00262280-0x00262288
		}
	
		private sealed class DelayPromise : Task<VoidTaskResult> // TypeDefIndex: 804
		{
			// Fields
			internal readonly CancellationToken Token; // 0x2C
			internal CancellationTokenRegistration Registration; // 0x30
			internal Timer Timer; // 0x3C
	
			// Constructors
			internal DelayPromise(CancellationToken token); // 0x00260FC4-0x002610CC
	
			// Methods
			internal void Complete(); // 0x002618E0-0x00261A40
		}
	
		[CompilerGenerated] // 0x0013D888-0x0013D898
		private sealed class <>c__DisplayClass178_0 // TypeDefIndex: 805
		{
			// Fields
			public Task root; // 0x08
			public bool replicasAreQuitting; // 0x0C
			public Action<object> taskReplicaDelegate; // 0x10
			public TaskCreationOptions creationOptionsForReplicas; // 0x14
			public InternalTaskOptions internalOptionsForReplicas; // 0x18
	
			// Constructors
			public <>c__DisplayClass178_0(); // 0x0025EB5C-0x0025EB64
	
			// Methods
			internal void <ExecuteSelfReplicating>b__0(object <p0>); // 0x00261C40-0x002621C0
		}
	
		[Serializable]
		[CompilerGenerated] // 0x0013D898-0x0013D8A8
		private sealed class <>c // TypeDefIndex: 806
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static Action<object> <>9__276_0; // 0x04
			public static TimerCallback <>9__276_1; // 0x08
	
			// Constructors
			static <>c(); // 0x0026171C-0x00261790
			public <>c(); // 0x00261790-0x00261798
	
			// Methods
			internal void <Delay>b__276_0(object state); // 0x00261798-0x002618E0
			internal void <Delay>b__276_1(object state); // 0x00261A40-0x00261B88
			internal ContingentProperties <.cctor>b__295_0(); // 0x00261B88-0x00261C04
			internal bool <.cctor>b__295_1(Task t); // 0x00261C04-0x00261C30
			internal bool <.cctor>b__295_2(object tc); // 0x00261C30-0x00261C40
		}
	
		// Constructors
		internal Task(bool canceled, TaskCreationOptions creationOptions, CancellationToken ct); // 0x0025AC98-0x0025AD88
		internal Task(); // 0x0025ADB0-0x0025ADD8
		internal Task(Delegate action, object state, Task parent, CancellationToken cancellationToken, TaskCreationOptions creationOptions, InternalTaskOptions internalOptions, TaskScheduler scheduler); // 0x002582E4-0x002583E8
		static Task(); // 0x00261418-0x002616F0
	
		// Methods
		[FriendAccessAllowed] // 0x001457EC-0x001457FC
		internal static bool AddToActiveTasks(Task task); // 0x00259980-0x00259B30
		[FriendAccessAllowed] // 0x001457FC-0x0014580C
		internal static void RemoveFromActiveTasks(int taskId); // 0x0025AB10-0x0025AC98
		internal void TaskConstructorCore(object action, object state, CancellationToken cancellationToken, TaskCreationOptions creationOptions, InternalTaskOptions internalOptions, TaskScheduler scheduler); // 0x0025ADD8-0x0025AF94
		private void AssignCancellationToken(CancellationToken cancellationToken, Task antecedent, TaskContinuation continuation); // 0x0025B038-0x0025B3C8
		private static void TaskCancelCallback(object o); // 0x0025B4D8-0x0025B62C
		internal void PossiblyCaptureContext(ref StackCrawlMark stackMark); // 0x002595D8-0x00259670
		internal static TaskCreationOptions OptionsMethod(int flags); // 0x0025B8DC-0x0025B8E4
		internal bool AtomicStateUpdate(int newBits, int illegalBits); // 0x0025B8E4-0x0025B968
		internal bool AtomicStateUpdate(int newBits, int illegalBits, ref int oldFlags); // 0x0025B968-0x0025B9FC
		internal void SetNotificationForWaitCompletion(bool enabled); // 0x0025B9FC-0x0025BA98
		internal bool NotifyDebuggerOfWaitCompletionIfNecessary(); // 0x0025975C-0x002597AC
		private void NotifyDebuggerOfWaitCompletion(); // 0x0025BAB0-0x0025BAB8
		internal bool MarkStarted(); // 0x0025BAF8-0x0025BB04
		internal bool FireTaskScheduledIfNeeded(TaskScheduler ts); // 0x0025BB04-0x0025BB0C
		internal void AddNewChild(); // 0x0025AFA8-0x0025B038
		internal void DisregardChild(); // 0x0025B480-0x0025B4D8
		internal static Task InternalStartNew(Task creatingTask, Delegate action, object state, CancellationToken cancellationToken, TaskScheduler scheduler, TaskCreationOptions options, InternalTaskOptions internalOptions, ref StackCrawlMark stackMark); // 0x0025BB2C-0x0025BC7C
		internal static int NewId(); // 0x0025BC7C-0x0025BD14
		internal static Task InternalCurrentIfAttached(TaskCreationOptions creationOptions); // 0x00259550-0x002595D8
		internal ContingentProperties EnsureContingentPropertiesInitialized(bool needsProtection); // 0x0025B3C8-0x0025B3FC
		private ContingentProperties EnsureContingentPropertiesInitializedCore(bool needsProtection); // 0x0025C11C-0x0025C218
		private static bool IsCompletedMethod(int flags); // 0x0025C2D8-0x0025C2E4
		private static ExecutionContext CopyExecutionContext(ExecutionContext capturedContext); // 0x0025C760-0x0025C814
		public void Dispose(); // 0x0025C814-0x0025C8B0
		protected virtual void Dispose(bool disposing); // 0x0025C8B0-0x0025C9F8
		internal void ScheduleAndStart(bool needsProtection); // 0x00259F54-0x0025A1F4
		internal void AddException(object exceptionObject); // 0x0025CA34-0x0025CA3C
		internal void AddException(object exceptionObject, bool representsCancellation); // 0x0025CDDC-0x0025CF9C
		private AggregateException GetExceptions(bool includeTaskCanceledExceptions); // 0x0025BEF0-0x0025C080
		internal ReadOnlyCollection<ExceptionDispatchInfo> GetExceptionDispatchInfos(); // 0x0025D31C-0x0025D418
		internal ExceptionDispatchInfo GetCancellationExceptionDispatchInfo(); // 0x0025D4B0-0x0025D4E4
		internal void ThrowIfExceptional(bool includeTaskCanceledExceptions); // 0x0025D4EC-0x0025D57C
		internal void UpdateExceptionObservedStatus(); // 0x0025D57C-0x0025D658
		internal void Finish(bool bUserDelegateExecuted); // 0x0025CB64-0x0025CD30
		internal void FinishStageTwo(); // 0x0025D688-0x0025D8D0
		internal void FinishStageThree(); // 0x0025DC80-0x0025DCE8
		internal void ProcessChildCompletion(Task childTask); // 0x0025DCE8-0x0025DEBC
		internal void AddExceptionsFromChildren(); // 0x0025D8D0-0x0025DB64
		internal void FinishThreadAbortedTask(bool bTAEAddedToExceptionHolder, bool delegateRan); // 0x0025CA3C-0x0025CAB8
		private void Execute(); // 0x0025E5E8-0x0025E780
		internal virtual bool ShouldReplicate(); // 0x0025EA84-0x0025EA8C
		internal virtual Task CreateReplicaTask(Action<object> taskReplicaDelegate, object stateObject, Task parentTask, TaskScheduler taskScheduler, TaskCreationOptions creationOptionsForReplica, InternalTaskOptions internalOptionsForReplica); // 0x0025EA8C-0x0025EB44
		private static void ExecuteSelfReplicating(Task root); // 0x0025E780-0x0025E93C
		void IThreadPoolWorkItem.ExecuteWorkItem(); // 0x0025EB64-0x0025EB6C
		void IThreadPoolWorkItem.MarkAborted(ThreadAbortException tae); // 0x0025ECF4-0x0025ED30
		internal bool ExecuteEntry(bool bPreventDoubleExecution); // 0x0025EB6C-0x0025ECF4
		private void ExecuteWithThreadLocal(ref Task currentTaskSlot); // 0x0025ED30-0x0025EF8C
		private static void ExecutionContextCallback(object obj); // 0x0025F0C0-0x0025F1AC
		internal virtual void InnerInvoke(); // 0x0025F1AC-0x0025F260
		internal void InnerInvokeWithArg(Task childTask); // 0x0025F260-0x0025F270
		private void HandleException(Exception unhandledException); // 0x0025E93C-0x0025EA84
		public TaskAwaiter GetAwaiter(); // 0x0025F294-0x0025F2C4
		public ConfiguredTaskAwaitable ConfigureAwait(bool continueOnCapturedContext); // 0x0025F2C4-0x0025F2E4
		internal void SetContinuationForAwait(Action continuationAction, bool continueOnCapturedContext, bool flowExecutionContext, ref StackCrawlMark stackMark); // 0x0025F2E4-0x0025F534
		public void Wait(); // 0x0025F5E4-0x0025F5F0
		public bool Wait(int millisecondsTimeout, CancellationToken cancellationToken); // 0x0025F5F0-0x0025F738
		private bool WrappedTryRunInline(); // 0x0025F830-0x0025F9A0
		internal bool InternalWait(int millisecondsTimeout, CancellationToken cancellationToken); // 0x0025F738-0x0025F830
		private bool SpinThenBlockingWait(int millisecondsTimeout, CancellationToken cancellationToken); // 0x0025FBD0-0x0025FDA8
		private bool SpinWait(int millisecondsTimeout); // 0x0025FDA8-0x0025FE78
		internal bool InternalCancel(bool bCancelNonExecutingOnly); // 0x0025A1F4-0x0025A480
		internal void RecordInternalCancellationRequest(); // 0x0025FFFC-0x0026004C
		internal void RecordInternalCancellationRequest(CancellationToken tokenToRecord); // 0x0026004C-0x00260104
		internal void RecordInternalCancellationRequest(CancellationToken tokenToRecord, object cancellationException); // 0x00260104-0x00260134
		internal void CancellationCleanupLogic(); // 0x0025EF8C-0x0025F0C0
		private void SetCancellationAcknowledged(); // 0x0025F270-0x0025F294
		internal void FinishContinuations(); // 0x0025DEBC-0x0025E5E8
		private void LogFinishCompletionNotification(); // 0x00260160-0x00260164
		public Task ContinueWith(Action<Task> continuationAction); // 0x00260164-0x00260218
		private Task ContinueWith(Action<Task> continuationAction, TaskScheduler scheduler, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, ref StackCrawlMark stackMark); // 0x002602C8-0x00260484
		public Task ContinueWith(Action<Task, object> continuationAction, object state, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler); // 0x002607BC-0x002607F4
		private Task ContinueWith(Action<Task, object> continuationAction, object state, TaskScheduler scheduler, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, ref StackCrawlMark stackMark); // 0x002607F4-0x002609AC
		internal static void CreationOptionsFromContinuationOptions(TaskContinuationOptions continuationOptions, out TaskCreationOptions creationOptions, out InternalTaskOptions internalOptions); // 0x00260484-0x00260644
		internal void ContinueWithCore(Task continuationTask, TaskScheduler scheduler, CancellationToken cancellationToken, TaskContinuationOptions options); // 0x00260644-0x002607BC
		internal void AddCompletionAction(ITaskCompletionAction action); // 0x002609AC-0x002609B4
		private void AddCompletionAction(ITaskCompletionAction action, bool addBeforeOthers); // 0x0025FF04-0x0025FFFC
		private bool AddTaskContinuationComplex(object tc, bool addBeforeOthers); // 0x002609B4-0x00260D58
		private bool AddTaskContinuation(object tc, bool addBeforeOthers); // 0x0025F568-0x0025F5E4
		internal void RemoveContinuation(object continuationObject); // 0x0025B62C-0x0025B8DC
		public static Task<TResult> FromResult<TResult>(TResult result);
		public static Task FromException(Exception exception); // 0x00260D58-0x00260DE8
		public static Task<TResult> FromException<TResult>(Exception exception);
		[FriendAccessAllowed] // 0x0014580C-0x0014581C
		internal static Task FromCancellation(CancellationToken cancellationToken); // 0x00260DE8-0x00260ED8
		[FriendAccessAllowed] // 0x0014581C-0x0014582C
		internal static Task<TResult> FromCancellation<TResult>(CancellationToken cancellationToken);
		internal static Task<TResult> FromCancellation<TResult>(OperationCanceledException exception);
		public static Task Run(Action action); // 0x00260ED8-0x00260FC4
		public static Task<TResult> Run<TResult>(Func<TResult> function);
		public static Task Delay(int millisecondsDelay, CancellationToken cancellationToken); // 0x00255C38-0x00256050
		public static Task<Task> WhenAny(params /* 0x00146328-0x00146338 */ Task[] tasks); // 0x00256050-0x002562A4
	}

	internal sealed class CompletionActionInvoker : IThreadPoolWorkItem // TypeDefIndex: 807
	{
		// Fields
		private readonly ITaskCompletionAction m_action; // 0x08
		private readonly Task m_completingTask; // 0x0C
	
		// Constructors
		internal CompletionActionInvoker(ITaskCompletionAction action, Task completingTask); // 0x00259378-0x002593A0
	
		// Methods
		public void ExecuteWorkItem(); // 0x002593A0-0x00259480
		public void MarkAborted(ThreadAbortException tae); // 0x00259480-0x00259484
	}

	internal class SystemThreadingTasks_TaskDebugView // TypeDefIndex: 808
	{
	}

	[Serializable]
	[Flags] // 0x0013D8A8-0x0013D8B8
	public enum TaskCreationOptions // TypeDefIndex: 809
	{
		None = 0,
		PreferFairness = 1,
		LongRunning = 2,
		AttachedToParent = 4,
		DenyChildAttach = 8,
		HideScheduler = 16,
		RunContinuationsAsynchronously = 64
	}

	[Serializable]
	[Flags] // 0x0013D8B8-0x0013D8C8
	internal enum InternalTaskOptions // TypeDefIndex: 810
	{
		None = 0,
		ChildReplica = 256,
		ContinuationTask = 512,
		PromiseTask = 1024,
		SelfReplicating = 2048,
		LazyCancellation = 4096,
		QueuedByRuntime = 8192,
		DoNotDispose = 16384,
		InternalOptionsMask = 65280
	}

	[Serializable]
	[Flags] // 0x0013D8C8-0x0013D8D8
	public enum TaskContinuationOptions // TypeDefIndex: 811
	{
		None = 0,
		PreferFairness = 1,
		LongRunning = 2,
		AttachedToParent = 4,
		DenyChildAttach = 8,
		HideScheduler = 16,
		LazyCancellation = 32,
		RunContinuationsAsynchronously = 64,
		NotOnRanToCompletion = 65536,
		NotOnFaulted = 131072,
		OnlyOnCanceled = 196608,
		NotOnCanceled = 262144,
		OnlyOnFaulted = 327680,
		OnlyOnRanToCompletion = 393216,
		ExecuteSynchronously = 524288
	}

	internal class StackGuard // TypeDefIndex: 812
	{
		// Fields
		private int m_inliningDepth; // 0x08
	
		// Constructors
		public StackGuard(); // 0x002597E0-0x002597E8
	
		// Methods
		internal bool TryBeginInliningScope(); // 0x002597AC-0x002597C0
		internal void EndInliningScope(); // 0x002597C8-0x002597E0
		private bool CheckForSufficientStack(); // 0x002597C0-0x002597C8
	}

	internal struct VoidTaskResult // TypeDefIndex: 813
	{
	}

	internal interface ITaskCompletionAction // TypeDefIndex: 814
	{
		// Methods
		void Invoke(Task completingTask);
	}

	[Serializable]
	public class TaskCanceledException : OperationCanceledException // TypeDefIndex: 815
	{
		// Fields
		[NonSerialized]
		private Task m_canceledTask; // 0x48
	
		// Constructors
		public TaskCanceledException(); // 0x00262288-0x002622FC
		public TaskCanceledException(Task task); // 0x0025D03C-0x0025D0EC
		protected TaskCanceledException(SerializationInfo info, StreamingContext context); // 0x002622FC-0x0026231C
	}

	internal sealed class ContinuationTaskFromTask : Task // TypeDefIndex: 816
	{
		// Fields
		private Task m_antecedent; // 0x28
	
		// Constructors
		public ContinuationTaskFromTask(Task antecedent, Delegate action, object state, TaskCreationOptions creationOptions, InternalTaskOptions internalOptions, ref StackCrawlMark stackMark); // 0x00259484-0x00259550
	
		// Methods
		internal override void InnerInvoke(); // 0x00259670-0x0025975C
	}

	internal abstract class TaskContinuation // TypeDefIndex: 817
	{
		// Constructors
		protected TaskContinuation(); // 0x00258170-0x00258178
	
		// Methods
		internal abstract void Run(Task completedTask, bool bCanInlineContinuationTask);
		protected static void InlineIfPossibleOrElseQueue(Task task, bool needsProtection); // 0x00259D08-0x00259F54
	}

	internal class StandardTaskContinuation : TaskContinuation // TypeDefIndex: 818
	{
		// Fields
		internal readonly Task m_task; // 0x08
		internal readonly TaskContinuationOptions m_options; // 0x0C
		private readonly TaskScheduler m_taskScheduler; // 0x10
	
		// Constructors
		internal StandardTaskContinuation(Task task, TaskContinuationOptions options, TaskScheduler scheduler); // 0x002597E8-0x002598CC
	
		// Methods
		internal override void Run(Task completedTask, bool bCanInlineContinuationTask); // 0x00259B30-0x00259CB8
	}

	internal sealed class SynchronizationContextAwaitTaskContinuation : AwaitTaskContinuation // TypeDefIndex: 819
	{
		// Fields
		private static readonly SendOrPostCallback s_postCallback; // 0x00
		private static ContextCallback s_postActionCallback; // 0x04
		private readonly SynchronizationContext m_syncContext; // 0x10
	
		// Nested types
		[Serializable]
		[CompilerGenerated] // 0x0013D8D8-0x0013D8E8
		private sealed class <>c // TypeDefIndex: 820
		{
			// Fields
			public static readonly <>c <>9; // 0x00
	
			// Constructors
			static <>c(); // 0x0025A948-0x0025A9BC
			public <>c(); // 0x0025A9BC-0x0025A9C4
	
			// Methods
			internal void <.cctor>b__7_0(object state); // 0x0025A9C4-0x0025AB10
		}
	
		// Constructors
		internal SynchronizationContextAwaitTaskContinuation(SynchronizationContext context, Action action, bool flowExecutionContext, ref StackCrawlMark stackMark); // 0x0025A480-0x0025A4B4
		static SynchronizationContextAwaitTaskContinuation(); // 0x0025A870-0x0025A948
	
		// Methods
		internal sealed override void Run(Task task, bool canInlineContinuationTask); // 0x0025A4B4-0x0025A614
		private static void PostAction(object state); // 0x0025A728-0x0025A870
		private static ContextCallback GetPostActionCallback(); // 0x0025A614-0x0025A728
	}

	internal sealed class TaskSchedulerAwaitTaskContinuation : AwaitTaskContinuation // TypeDefIndex: 821
	{
		// Fields
		private readonly TaskScheduler m_scheduler; // 0x10
	
		// Nested types
		[Serializable]
		[CompilerGenerated] // 0x0013D8E8-0x0013D8F8
		private sealed class <>c // TypeDefIndex: 822
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static Action<object> <>9__2_0; // 0x04
	
			// Constructors
			static <>c(); // 0x002644DC-0x00264550
			public <>c(); // 0x00264550-0x00264558
	
			// Methods
			internal void <Run>b__2_0(object state); // 0x00264558-0x00264738
		}
	
		// Constructors
		internal TaskSchedulerAwaitTaskContinuation(TaskScheduler scheduler, Action action, bool flowExecutionContext, ref StackCrawlMark stackMark); // 0x0025F534-0x0025F568
	
		// Methods
		internal sealed override void Run(Task ignored, bool canInlineContinuationTask); // 0x00264204-0x002644D8
	}

	internal class AwaitTaskContinuation : TaskContinuation, IThreadPoolWorkItem // TypeDefIndex: 823
	{
		// Fields
		private readonly ExecutionContext m_capturedContext; // 0x08
		protected readonly Action m_action; // 0x0C
		private static ContextCallback s_invokeActionCallback; // 0x00
	
		// Properties
		internal static bool IsValidLocationForInlining { get; } // 0x0025854C-0x00258694 
	
		// Nested types
		[Serializable]
		[CompilerGenerated] // 0x0013D8F8-0x0013D908
		private sealed class <>c // TypeDefIndex: 824
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static WaitCallback <>9__17_0; // 0x04
	
			// Constructors
			static <>c(); // 0x002591B0-0x00259224
			public <>c(); // 0x00259224-0x0025922C
	
			// Methods
			internal void <ThrowAsyncIfNecessary>b__17_0(object s); // 0x0025922C-0x00259378
		}
	
		// Constructors
		internal AwaitTaskContinuation(Action action, bool flowExecutionContext, ref StackCrawlMark stackMark); // 0x002580C0-0x00258170
		internal AwaitTaskContinuation(Action action, bool flowExecutionContext); // 0x00258178-0x0025821C
	
		// Methods
		protected Task CreateTask(Action<object> action, object state, TaskScheduler scheduler); // 0x0025821C-0x002582E4
		internal override void Run(Task task, bool canInlineContinuationTask); // 0x00258468-0x0025854C
		private void ExecuteWorkItemHelper(); // 0x00258B30-0x00258C7C
		void IThreadPoolWorkItem.ExecuteWorkItem(); // 0x00258C7C-0x00258CB8
		void IThreadPoolWorkItem.MarkAborted(ThreadAbortException tae); // 0x00258CB8-0x00258CBC
		private static void InvokeAction(object state); // 0x00258CBC-0x00258E08
		protected static ContextCallback GetInvokeActionCallback(); // 0x00258694-0x00258750
		protected void RunCallback(ContextCallback callback, object state, ref Task currentTask); // 0x00258750-0x00258950
		internal static void RunOrScheduleAction(Action action, bool allowInlining, ref Task currentTask); // 0x00258F98-0x00259134
		internal static void UnsafeScheduleAction(Action action, Task task); // 0x00259134-0x002591B0
		protected static void ThrowAsyncIfNecessary(Exception exc); // 0x00258E08-0x00258F98
	}

	internal class TaskExceptionHolder // TypeDefIndex: 825
	{
		// Fields
		private static readonly bool s_failFastOnUnobservedException; // 0x00
		private static bool s_domainUnloadStarted; // 0x01
		private static EventHandler s_adUnloadEventHandler; // 0x04
		private readonly Task m_task; // 0x08
		private List<ExceptionDispatchInfo> m_faultExceptions; // 0x0C
		private ExceptionDispatchInfo m_cancellationException; // 0x10
		private bool m_isHandled; // 0x14
	
		// Properties
		internal bool ContainsFaultList { get; } // 0x0025C690-0x0025C6B0 
	
		// Constructors
		internal TaskExceptionHolder(Task task); // 0x0025CF9C-0x0025D02C
		static TaskExceptionHolder(); // 0x00263780-0x002637E8
	
		// Methods
		private static bool ShouldFailFastOnUnobservedException(); // 0x002624BC-0x002624C4
		private static void EnsureADUnloadCallbackRegistered(); // 0x0026231C-0x002624BC
		private static void AppDomainUnloadCallback(object sender, EventArgs e); // 0x002624C4-0x00262558
		~TaskExceptionHolder(); // 0x00262558-0x00262D0C
		internal void Add(object exceptionObject, bool representsCancellation); // 0x0025D02C-0x0025D03C
		private void SetCancellationException(object exceptionObject); // 0x00262F24-0x00262FF8
		private void AddFaultException(object exceptionObject); // 0x00262FF8-0x002636E0
		private void MarkAsUnhandled(); // 0x002636E0-0x00263780
		internal void MarkAsHandled(bool calledFromFinalizer); // 0x0025CD30-0x0025CDDC
		internal AggregateException CreateExceptionObject(bool calledFromFinalizer, Exception includeThisException); // 0x0025D0EC-0x0025D31C
		internal ReadOnlyCollection<ExceptionDispatchInfo> GetExceptionDispatchInfos(); // 0x0025D418-0x0025D4B0
		internal ExceptionDispatchInfo GetCancellationExceptionDispatchInfo(); // 0x0025D4E4-0x0025D4EC
	}

	public class TaskFactory // TypeDefIndex: 826
	{
		// Fields
		private CancellationToken m_defaultCancellationToken; // 0x08
		private TaskScheduler m_defaultScheduler; // 0x0C
		private TaskCreationOptions m_defaultCreationOptions; // 0x10
		private TaskContinuationOptions m_defaultContinuationOptions; // 0x14
	
		// Nested types
		internal sealed class CompleteOnInvokePromise : Task<Task>, ITaskCompletionAction // TypeDefIndex: 827
		{
			// Fields
			private IList<Task> _tasks; // 0x2C
			private int m_firstTaskAlreadyCompleted; // 0x30
	
			// Constructors
			public CompleteOnInvokePromise(IList<Task> tasks); // 0x00263A78-0x00263B80
	
			// Methods
			public void Invoke(Task completingTask); // 0x00263B80-0x00263E08
		}
	
		// Constructors
		public TaskFactory(); // 0x002616F0-0x0026171C
		public TaskFactory(CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskContinuationOptions continuationOptions, TaskScheduler scheduler); // 0x002637E8-0x00263830
	
		// Methods
		internal static void CheckCreationOptions(TaskCreationOptions creationOptions); // 0x002639CC-0x00263A78
		internal static Task<Task> CommonCWAnyLogic(IList<Task> tasks); // 0x0026113C-0x00261418
		internal static void CheckMultiTaskContinuationOptions(TaskContinuationOptions continuationOptions); // 0x00263830-0x002639CC
	}

	[DebuggerDisplay] // 0x0013D908-0x0013D9A8
	[DebuggerTypeProxy] // 0x0013D908-0x0013D9A8
	public abstract class TaskScheduler // TypeDefIndex: 828
	{
		// Fields
		private static ConditionalWeakTable<TaskScheduler, object> s_activeTaskSchedulers; // 0x00
		private static readonly TaskScheduler s_defaultTaskScheduler; // 0x04
		internal static int s_taskSchedulerIdCounter; // 0x08
		private int m_taskSchedulerId; // 0x08
		private static EventHandler<UnobservedTaskExceptionEventArgs> _unobservedTaskException; // 0x0C
		private static readonly object _unobservedTaskExceptionLockObject; // 0x10
	
		// Properties
		internal virtual bool RequiresAtomicStartTransition { get; } // 0x00263E14-0x00263E1C 
		public static TaskScheduler Default { get; } // 0x00258AA4-0x00258B30 
		public static TaskScheduler Current { get; } // 0x00260218-0x002602C8 
		internal static TaskScheduler InternalCurrent { get; } // 0x00258A08-0x00258AA4 
		public int Id { get; } // 0x00263FFC-0x002640D4 
	
		// Nested types
		internal sealed class SystemThreadingTasks_TaskSchedulerDebugView // TypeDefIndex: 829
		{
		}
	
		// Constructors
		protected TaskScheduler(); // 0x00263E1C-0x00263EB8
		static TaskScheduler(); // 0x002640D4-0x0026417C
	
		// Methods
		protected internal abstract void QueueTask(Task task);
		protected abstract bool TryExecuteTaskInline(Task task, bool taskWasPreviouslyQueued);
		internal bool TryRunInline(Task task, bool taskWasPreviouslyQueued); // 0x0025F9A0-0x0025FBD0
		protected internal virtual bool TryDequeue(Task task); // 0x00263E08-0x00263E10
		internal virtual void NotifyWorkItemProgress(); // 0x00263E10-0x00263E14
		internal void InternalQueueTask(Task task); // 0x0025C9F8-0x0025CA34
		private void AddToActiveTaskSchedulers(); // 0x00263EB8-0x00263FFC
		internal static void PublishUnobservedTaskException(object sender, UnobservedTaskExceptionEventArgs ueea); // 0x00262D98-0x00262F24
	}

	public class UnobservedTaskExceptionEventArgs : EventArgs // TypeDefIndex: 830
	{
		// Fields
		private AggregateException m_exception; // 0x08
		internal bool m_observed; // 0x0C
	
		// Constructors
		public UnobservedTaskExceptionEventArgs(AggregateException exception); // 0x00262D0C-0x00262D98
	}

	[Serializable]
	public class TaskSchedulerException : Exception // TypeDefIndex: 831
	{
		// Constructors
		public TaskSchedulerException(); // 0x00264738-0x002647DC
		public TaskSchedulerException(Exception innerException); // 0x0025CAB8-0x0025CB64
		protected TaskSchedulerException(SerializationInfo info, StreamingContext context); // 0x002647DC-0x00264884
	}

	internal static class TaskToApm // TypeDefIndex: 832
	{
		// Nested types
		private sealed class TaskWrapperAsyncResult : IAsyncResult // TypeDefIndex: 833
		{
			// Fields
			internal readonly Task Task; // 0x08
			private readonly object m_state; // 0x0C
			private readonly bool m_completedSynchronously; // 0x10
	
			// Properties
			object IAsyncResult.AsyncState { get; } // 0x00264C78-0x00264C80 
			bool IAsyncResult.CompletedSynchronously { get; } // 0x00264C80-0x00264C88 
			WaitHandle IAsyncResult.AsyncWaitHandle { get; } // 0x00264C88-0x00264D60 
	
			// Constructors
			internal TaskWrapperAsyncResult(Task task, object state, bool completedSynchronously); // 0x002649B4-0x002649E4
		}
	
		[CompilerGenerated] // 0x0013D9A8-0x0013D9B8
		private sealed class <>c__DisplayClass3_0 // TypeDefIndex: 834
		{
			// Fields
			public AsyncCallback callback; // 0x08
			public IAsyncResult asyncResult; // 0x0C
	
			// Constructors
			public <>c__DisplayClass3_0(); // 0x00264C3C-0x00264C44
	
			// Methods
			internal void <InvokeCallbackWhenTaskCompletes>b__0(); // 0x00264C44-0x00264C78
		}
	
		// Methods
		public static IAsyncResult Begin(Task task, AsyncCallback callback, object state); // 0x00264884-0x002649B4
		public static void End(IAsyncResult asyncResult); // 0x00264B38-0x00264C3C
		public static TResult End<TResult>(IAsyncResult asyncResult);
		private static void InvokeCallbackWhenTaskCompletes(Task antecedent, AsyncCallback callback, IAsyncResult asyncResult); // 0x002649E4-0x00264B38
	}

	internal sealed class ThreadPoolTaskScheduler : TaskScheduler // TypeDefIndex: 835
	{
		// Fields
		private static readonly ParameterizedThreadStart s_longRunningThreadWork; // 0x00
	
		// Properties
		internal override bool RequiresAtomicStartTransition { get; } // 0x00265450-0x00265458 
	
		// Constructors
		internal ThreadPoolTaskScheduler(); // 0x0026417C-0x00264204
		static ThreadPoolTaskScheduler(); // 0x00265458-0x002654F0
	
		// Methods
		private static void LongRunningThreadWork(object obj); // 0x00264D60-0x00264E50
		protected internal override void QueueTask(Task task); // 0x00264E50-0x00264F88
		protected override bool TryExecuteTaskInline(Task task, bool taskWasPreviouslyQueued); // 0x002651A0-0x00265260
		protected internal override bool TryDequeue(Task task); // 0x00265360-0x00265368
		internal override void NotifyWorkItemProgress(); // 0x00265368-0x0026536C
	}
}

namespace System.Security
{
	[AttributeUsage] // 0x0013D9B8-0x0013DA14
	[ComVisible] // 0x0013D9B8-0x0013DA14
	public sealed class UnverifiableCodeAttribute : Attribute // TypeDefIndex: 836
	{
		// Constructors
		public UnverifiableCodeAttribute(); // 0x005ADC08-0x005ADC10
	}

	[AttributeUsage] // 0x0013DA14-0x0013DA70
	[ComVisible] // 0x0013DA14-0x0013DA70
	public sealed class AllowPartiallyTrustedCallersAttribute : Attribute // TypeDefIndex: 837
	{
		// Constructors
		public AllowPartiallyTrustedCallersAttribute(); // 0x00417EB8-0x00417EC0
	}

	[AttributeUsage] // 0x0013DA70-0x0013DAB4
	public sealed class SecurityCriticalAttribute : Attribute // TypeDefIndex: 838
	{
		// Constructors
		public SecurityCriticalAttribute(); // 0x005A91A8-0x005A91B0
	}

	public enum SecurityRuleSet : byte // TypeDefIndex: 839
	{
		None = 0,
		Level1 = 1,
		Level2 = 2
	}

	[AttributeUsage] // 0x0013DAB4-0x0013DAE8
	public sealed class SecurityRulesAttribute : Attribute // TypeDefIndex: 840
	{
		// Fields
		private SecurityRuleSet m_ruleSet; // 0x08
		private bool m_skipVerificationInFullTrust; // 0x09
	
		// Properties
		public bool SkipVerificationInFullTrust { set; } // 0x005ADC00-0x005ADC08
	
		// Constructors
		public SecurityRulesAttribute(SecurityRuleSet ruleSet); // 0x005ADBE0-0x005ADC00
	}

	[Serializable]
	internal sealed class SecurityDocument // TypeDefIndex: 841
	{
		// Fields
		internal byte[] m_data; // 0x08
	
		// Constructors
		public SecurityDocument(int numData); // 0x005A91B0-0x005A9228
	
		// Methods
		public void GuaranteeSize(int size); // 0x005A9228-0x005A9300
		public void AddString(string str, ref int position); // 0x005A9300-0x005A9510
		public void AppendString(string str, ref int position); // 0x005A9510-0x005A965C
		public static int EncodedStringSize(string str); // 0x005A9664-0x005A9690
		public string GetString(ref int position, bool bCreate); // 0x005A9690-0x005A9AE0
		public void AddToken(byte b, ref int position); // 0x005AA298-0x005AA304
		public SecurityElement GetRootElement(); // 0x005AA304-0x005AA32C
		public SecurityElement GetElement(int position, bool bCreate); // 0x005AA32C-0x005AA34C
		internal SecurityElement InternalGetElement(ref int position, bool bCreate); // 0x005AA34C-0x005AA678
	}

	[ComVisible] // 0x0013DAE8-0x0013DAFC
	public interface IEvidenceFactory // TypeDefIndex: 842
	{
	}

	internal enum SecurityElementType // TypeDefIndex: 843
	{
		Regular = 0,
		Format = 1,
		Comment = 2
	}

	[Serializable]
	[ComVisible] // 0x0013DAFC-0x0013DB10
	public sealed class SecurityElement // TypeDefIndex: 844
	{
		// Fields
		private string text; // 0x08
		private string tag; // 0x0C
		private ArrayList attributes; // 0x10
		private ArrayList children; // 0x14
		private static readonly char[] invalid_tag_chars; // 0x00
		private static readonly char[] invalid_text_chars; // 0x04
		private static readonly char[] invalid_attr_name_chars; // 0x08
		private static readonly char[] invalid_attr_value_chars; // 0x0C
		private static readonly char[] invalid_chars; // 0x10
	
		// Properties
		public Hashtable Attributes { get; } // 0x005AAE54-0x005AB234 
		public ArrayList Children { get; } // 0x005AB244-0x005AB24C 
		public string Tag { get; } // 0x005AB24C-0x005AB254 
		public string Text { get; set; } // 0x005AB254-0x005AB25C 0x005AAD0C-0x005AAE54
		internal string m_strText { set; } // 0x005AA870-0x005AA878
	
		// Nested types
		internal class SecurityAttribute // TypeDefIndex: 845
		{
			// Fields
			private string _name; // 0x08
			private string _value; // 0x0C
	
			// Properties
			public string Name { get; } // 0x005AB234-0x005AB23C 
			public string Value { get; } // 0x005AB23C-0x005AB244 
	
			// Constructors
			public SecurityAttribute(string name, string value); // 0x005ABA38-0x005ABC30
		}
	
		// Constructors
		public SecurityElement(string tag); // 0x005AA678-0x005AA680
		public SecurityElement(string tag, string text); // 0x005AA984-0x005AAB00
		static SecurityElement(); // 0x005AD63C-0x005AD808
	
		// Methods
		public void AddAttribute(string name, string value); // 0x005AA680-0x005AA870
		public void AddChild(SecurityElement child); // 0x005AA878-0x005AA984
		public static string Escape(string str); // 0x005ABC30-0x005ABE88
		private static string Unescape(string str); // 0x005AB324-0x005AB5AC
		public static SecurityElement FromString(string xml); // 0x005ABEA8-0x005AC100
		public static bool IsValidAttributeName(string name); // 0x005AC110-0x005AC1D8
		public static bool IsValidAttributeValue(string value); // 0x005AC1D8-0x005AC2A0
		public static bool IsValidTag(string tag); // 0x005AAB00-0x005AABC8
		public static bool IsValidText(string text); // 0x005AB25C-0x005AB324
		public SecurityElement SearchForChildByTag(string tag); // 0x005AC2A0-0x005AC468
		public override string ToString(); // 0x005AC468-0x005AC514
		private void ToXml(ref StringBuilder s, int level); // 0x005AC514-0x005ACDD4
		internal SecurityAttribute GetAttribute(string name); // 0x005AB5AC-0x005AB91C
		internal string SearchForTextOfLocalName(string strLocalName); // 0x005ACDD4-0x005AD190
	}

	[Serializable]
	[ComVisible] // 0x0013DB10-0x0013DB24
	public class SecurityException : SystemException // TypeDefIndex: 846
	{
		// Fields
		private string permissionState; // 0x44
	
		// Constructors
		public SecurityException(); // 0x005AD808-0x005AD890
		public SecurityException(string message); // 0x005AD890-0x005AD8BC
		protected SecurityException(SerializationInfo info, StreamingContext context); // 0x005AD8BC-0x005ADA64
		public SecurityException(string message, Exception inner); // 0x005ADA64-0x005ADA90
	
		// Methods
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x005ADA90-0x005ADBCC
		public override string ToString(); // 0x005ADBCC-0x005ADBD4
	}

	[ComVisible] // 0x0013DB24-0x0013DB38
	public static class SecurityManager // TypeDefIndex: 847
	{
		// Methods
		internal static bool CheckElevatedPermissions(); // 0x005ADBD4-0x005ADBDC
		internal static void EnsureElevatedPermissions(); // 0x005ADBDC-0x005ADBE0
	}

	[Serializable]
	[ComVisible] // 0x0013DB38-0x0013DB4C
	public sealed class XmlSyntaxException : SystemException // TypeDefIndex: 848
	{
		// Constructors
		public XmlSyntaxException(); // 0x005A965C-0x005A9664
		public XmlSyntaxException(int lineNumber); // 0x005AE904-0x005AE9B0
		public XmlSyntaxException(int lineNumber, string message); // 0x005AE9B0-0x005AEA64
		public XmlSyntaxException(string message); // 0x005AC100-0x005AC108
		public XmlSyntaxException(string message, Exception inner); // 0x005AC108-0x005AC110
		internal XmlSyntaxException(SerializationInfo info, StreamingContext context); // 0x005B180C-0x005B182C
	}
}

namespace System.Security.Policy
{
	[Serializable]
	[ComVisible] // 0x0013DB4C-0x0013DBC0
	[MonoTODO] // 0x0013DB4C-0x0013DBC0
	public sealed class Evidence : ICollection // TypeDefIndex: 849
	{
		// Fields
		private bool _locked; // 0x08
		private ArrayList hostEvidenceList; // 0x0C
		private ArrayList assemblyEvidenceList; // 0x10
	
		// Properties
		[Obsolete] // 0x001466AC-0x001466BC
		public int Count { get; } // 0x005A8BB8-0x005A8C14 
		public bool IsSynchronized { get; } // 0x005A8C14-0x005A8C1C 
		public object SyncRoot { get; } // 0x005A8C1C-0x005A8C20 
	
		// Nested types
		private class EvidenceEnumerator : IEnumerator // TypeDefIndex: 850
		{
			// Fields
			private IEnumerator currentEnum; // 0x08
			private IEnumerator hostEnum; // 0x0C
			private IEnumerator assemblyEnum; // 0x10
	
			// Properties
			public object Current { get; } // 0x005A90D0-0x005A91A8 
	
			// Constructors
			public EvidenceEnumerator(IEnumerator hostenum, IEnumerator assemblyenum); // 0x005A8DB4-0x005A8DE0
	
			// Methods
			public bool MoveNext(); // 0x005A8DE0-0x005A8F64
			public void Reset(); // 0x005A8F64-0x005A90D0
		}
	
		// Constructors
		public Evidence(); // 0x005A8BB0-0x005A8BB8
	
		// Methods
		[Obsolete] // 0x0014582C-0x0014583C
		public void CopyTo(Array array, int index); // 0x005A8C20-0x005A8CF0
		[Obsolete] // 0x0014583C-0x0014584C
		public IEnumerator GetEnumerator(); // 0x005A8CF0-0x005A8DB4
	}
}

namespace System.Security.Permissions
{
	[Serializable]
	[AttributeUsage] // 0x0013DBC0-0x0013DC44
	[ComVisible] // 0x0013DBC0-0x0013DC44
	[Obsolete] // 0x0013DBC0-0x0013DC44
	public abstract class CodeAccessSecurityAttribute : SecurityAttribute // TypeDefIndex: 851
	{
	}

	[Serializable]
	[AttributeUsage] // 0x0013DC44-0x0013DCC8
	[ComVisible] // 0x0013DC44-0x0013DCC8
	[Obsolete] // 0x0013DC44-0x0013DCC8
	public abstract class SecurityAttribute : Attribute // TypeDefIndex: 852
	{
	}

	[Serializable]
	[AttributeUsage] // 0x0013DCC8-0x0013DD4C
	[ComVisible] // 0x0013DCC8-0x0013DD4C
	[Obsolete] // 0x0013DCC8-0x0013DD4C
	public sealed class SecurityPermissionAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 853
	{
		// Fields
		private SecurityPermissionFlag m_Flags; // 0x08
	
		// Properties
		public bool SkipVerification { set; } // 0x005A8B98-0x005A8BB0
	}

	[Serializable]
	[ComVisible] // 0x0013DD4C-0x0013DDA8
	[Flags] // 0x0013DD4C-0x0013DDA8
	[Obsolete] // 0x0013DD4C-0x0013DDA8
	public enum SecurityPermissionFlag // TypeDefIndex: 854
	{
		NoFlags = 0,
		Assertion = 1,
		UnmanagedCode = 2,
		SkipVerification = 4,
		Execution = 8,
		ControlThread = 16,
		ControlEvidence = 32,
		ControlPolicy = 64,
		SerializationFormatter = 128,
		ControlDomainPolicy = 256,
		ControlPrincipal = 512,
		ControlAppDomain = 1024,
		RemotingConfiguration = 2048,
		Infrastructure = 4096,
		BindingRedirects = 8192,
		AllFlags = 16383
	}
}

namespace System.Security.Util
{
	internal sealed class Parser // TypeDefIndex: 855
	{
		// Fields
		private SecurityDocument _doc; // 0x08
		private Tokenizer _t; // 0x0C
	
		// Constructors
		private Parser(Tokenizer t); // 0x005B0778-0x005B080C
		internal Parser(string input); // 0x005B0890-0x005B090C
	
		// Methods
		internal SecurityElement GetTopElement(); // 0x005ADC10-0x005ADC50
		private void GetRequiredSizes(TokenizerStream stream, ref int index); // 0x005ADC50-0x005AE66C
		private int DetermineFormat(TokenizerStream stream); // 0x005AEA64-0x005AECF4
		private void ParseContents(); // 0x005B0174-0x005B05D0
	}

	internal sealed class Tokenizer // TypeDefIndex: 856
	{
		// Fields
		public int LineNo; // 0x08
		private int _inProcessingTag; // 0x0C
		private byte[] _inBytes; // 0x10
		private char[] _inChars; // 0x14
		private string _inString; // 0x18
		private int _inIndex; // 0x1C
		private int _inSize; // 0x20
		private int _inSavedCharacter; // 0x24
		private TokenSource _inTokenSource; // 0x28
		private ITokenReader _inTokenReader; // 0x2C
		private StringMaker _maker; // 0x30
		private string[] _searchStrings; // 0x34
		private string[] _replaceStrings; // 0x38
		private int _inNestedIndex; // 0x3C
		private int _inNestedSize; // 0x40
		private string _inNestedString; // 0x44
	
		// Nested types
		private enum TokenSource // TypeDefIndex: 857
		{
			UnicodeByteArray = 0,
			UTF8ByteArray = 1,
			ASCIIByteArray = 2,
			CharArray = 3,
			String = 4,
			NestedStrings = 5,
			Other = 6
		}
	
		[Serializable]
		internal sealed class StringMaker // TypeDefIndex: 858
		{
			// Fields
			private string[] aStrings; // 0x08
			private uint cStringsMax; // 0x0C
			private uint cStringsUsed; // 0x10
			public StringBuilder _outStringBuilder; // 0x14
			public char[] _outChars; // 0x18
			public int _outIndex; // 0x1C
	
			// Constructors
			public StringMaker(); // 0x005B155C-0x005B15FC
	
			// Methods
			private static uint HashString(string str); // 0x005B1484-0x005B14E8
			private static uint HashCharArray(char[] a, int l); // 0x005B14E8-0x005B155C
			private bool CompareStringAndChars(string str, char[] a, int l); // 0x005B15FC-0x005B16C0
			public string MakeString(); // 0x005A9D48-0x005AA108
		}
	
		internal interface ITokenReader // TypeDefIndex: 859
		{
			// Methods
			int Read();
		}
	
		internal class StreamTokenReader : ITokenReader // TypeDefIndex: 860
		{
			// Fields
			internal StreamReader _in; // 0x08
			internal int _numCharRead; // 0x0C
	
			// Properties
			internal int NumCharEncountered { get; } // 0x005B0A10-0x005B0A18 
	
			// Constructors
			internal StreamTokenReader(StreamReader input); // 0x005B0B2C-0x005B0B54
	
			// Methods
			public virtual int Read(); // 0x005B142C-0x005B1484
		}
	
		// Constructors
		internal Tokenizer(string input); // 0x005B090C-0x005B0958
	
		// Methods
		internal void BasicInitialization(); // 0x005B0958-0x005B0A10
		public void Recycle(); // 0x005B080C-0x005B0890
		internal void ChangeFormat(Encoding encoding); // 0x005AFAF4-0x005AFD94
		internal void GetTokens(TokenizerStream stream, int maxNum, bool endAfterKet); // 0x005AECF4-0x005AFA98
		private string GetStringToken(); // 0x005B1298-0x005B12C0
	}

	internal sealed class TokenizerShortBlock // TypeDefIndex: 861
	{
		// Fields
		internal short[] m_block; // 0x08
		internal TokenizerShortBlock m_next; // 0x0C
	
		// Constructors
		public TokenizerShortBlock(); // 0x005B16D8-0x005B174C
	}

	internal sealed class TokenizerStringBlock // TypeDefIndex: 862
	{
		// Fields
		internal string[] m_block; // 0x08
		internal TokenizerStringBlock m_next; // 0x0C
	
		// Constructors
		public TokenizerStringBlock(); // 0x005B174C-0x005B17C0
	}

	internal sealed class TokenizerStream // TypeDefIndex: 863
	{
		// Fields
		private int m_countTokens; // 0x08
		private TokenizerShortBlock m_headTokens; // 0x0C
		private TokenizerShortBlock m_lastTokens; // 0x10
		private TokenizerShortBlock m_currentTokens; // 0x14
		private int m_indexTokens; // 0x18
		private TokenizerStringBlock m_headStrings; // 0x1C
		private TokenizerStringBlock m_currentStrings; // 0x20
		private int m_indexStrings; // 0x24
	
		// Constructors
		internal TokenizerStream(); // 0x005B05D0-0x005B0688
	
		// Methods
		internal void AddToken(short token); // 0x005B0B54-0x005B0C94
		internal void AddString(string str); // 0x005B12C0-0x005B1424
		internal void Reset(); // 0x005B0688-0x005B06AC
		internal short GetNextFullToken(); // 0x005B06AC-0x005B0778
		internal short GetNextToken(); // 0x005AE66C-0x005AE680
		internal string GetNextString(); // 0x005AE844-0x005AE904
		internal void ThrowAwayNextString(); // 0x005AE680-0x005AE684
		internal void TagLastToken(short tag); // 0x005AE684-0x005AE844
		internal int GetTokenCount(); // 0x005B1424-0x005B142C
		internal void GoToPosition(int position); // 0x005AFA98-0x005AFAF4
	}
}

namespace System.Security.Principal
{
	[ComVisible] // 0x0013DDA8-0x0013DDBC
	public interface IPrincipal // TypeDefIndex: 864
	{
	}
}

namespace System.Security.Cryptography
{
	[ComVisible] // 0x0013DDBC-0x0013DDD0
	public abstract class AsymmetricAlgorithm : IDisposable // TypeDefIndex: 865
	{
		// Fields
		protected int KeySizeValue; // 0x08
		protected KeySizes[] LegalKeySizesValue; // 0x0C
	
		// Properties
		public virtual int KeySize { get; set; } // 0x00417F6C-0x00417F74 0x00417F74-0x004181D4
	
		// Constructors
		protected AsymmetricAlgorithm(); // 0x00417EC0-0x00417EC8
	
		// Methods
		public void Dispose(); // 0x00417EC8-0x00417ECC
		public void Clear(); // 0x00417ECC-0x00417F68
		protected virtual void Dispose(bool disposing); // 0x00417F68-0x00417F6C
		public virtual void FromXmlString(string xmlString); // 0x004181D4-0x0041825C
		public virtual string ToXmlString(bool includePrivateParameters); // 0x0041825C-0x004182E4
	}

	[ComVisible] // 0x0013DDD0-0x0013DDE4
	public abstract class AsymmetricSignatureDeformatter // TypeDefIndex: 866
	{
		// Constructors
		protected AsymmetricSignatureDeformatter(); // 0x004182E4-0x004182EC
	
		// Methods
		public abstract void SetKey(AsymmetricAlgorithm key);
		public abstract void SetHashAlgorithm(string strName);
		public abstract bool VerifySignature(byte[] rgbHash, byte[] rgbSignature);
	}

	[Serializable]
	[ComVisible] // 0x0013DDE4-0x0013DDF8
	public enum CipherMode // TypeDefIndex: 867
	{
		CBC = 1,
		ECB = 2,
		OFB = 3,
		CFB = 4,
		CTS = 5
	}

	[Serializable]
	[ComVisible] // 0x0013DDF8-0x0013DE0C
	public enum PaddingMode // TypeDefIndex: 868
	{
		None = 1,
		PKCS7 = 2,
		Zeros = 3,
		ANSIX923 = 4,
		ISO10126 = 5
	}

	[ComVisible] // 0x0013DE0C-0x0013DE20
	public sealed class KeySizes // TypeDefIndex: 869
	{
		// Fields
		private int m_minSize; // 0x08
		private int m_maxSize; // 0x0C
		private int m_skipSize; // 0x10
	
		// Properties
		public int MinSize { get; } // 0x0082F1FC-0x0082F204 
		public int MaxSize { get; } // 0x0082F204-0x0082F20C 
		public int SkipSize { get; } // 0x0082F20C-0x0082F214 
	
		// Constructors
		public KeySizes(int minSize, int maxSize, int skipSize); // 0x00829384-0x008293B4
	
		// Methods
		internal bool IsLegal(int keySize); // 0x0082F214-0x0082F284
		internal static bool IsLegalKeySize(KeySizes[] legalKeys, int size); // 0x0082F284-0x0082F33C
	}

	[Serializable]
	[ComVisible] // 0x0013DE20-0x0013DE34
	public class CryptographicException : SystemException // TypeDefIndex: 870
	{
		// Constructors
		public CryptographicException(); // 0x00827FE0-0x00828068
		public CryptographicException(string message); // 0x00828068-0x00828094
		public CryptographicException(string format, string insert); // 0x00828094-0x00828150
		public CryptographicException(string message, Exception inner); // 0x00828150-0x0082817C
		protected CryptographicException(SerializationInfo info, StreamingContext context); // 0x0082817C-0x0082819C
	}

	[Serializable]
	[ComVisible] // 0x0013DE34-0x0013DE48
	public class CryptographicUnexpectedOperationException : CryptographicException // TypeDefIndex: 871
	{
		// Constructors
		public CryptographicUnexpectedOperationException(); // 0x0082819C-0x008281C4
		public CryptographicUnexpectedOperationException(string message); // 0x008281C4-0x00828204
		protected CryptographicUnexpectedOperationException(SerializationInfo info, StreamingContext context); // 0x00828204-0x00828224
	}

	[Serializable]
	[ComVisible] // 0x0013DE48-0x0013DE7C
	[Flags] // 0x0013DE48-0x0013DE7C
	public enum CspProviderFlags // TypeDefIndex: 872
	{
		NoFlags = 0,
		UseMachineKeyStore = 1,
		UseDefaultKeyContainer = 2,
		UseNonExportableKey = 4,
		UseExistingKey = 8,
		UseArchivableKey = 16,
		UseUserProtectedKey = 32,
		NoPrompt = 64,
		CreateEphemeralKey = 128
	}

	[ComVisible] // 0x0013DE7C-0x0013DE90
	public sealed class CspParameters // TypeDefIndex: 873
	{
		// Fields
		public int ProviderType; // 0x08
		public string ProviderName; // 0x0C
		public string KeyContainerName; // 0x10
		public int KeyNumber; // 0x14
		private int m_flags; // 0x18
	
		// Properties
		public CspProviderFlags Flags { get; set; } // 0x00828224-0x0082822C 0x0082822C-0x0082836C
	
		// Constructors
		public CspParameters(); // 0x0082836C-0x00828390
		public CspParameters(int dwTypeIn); // 0x0082840C-0x0082842C
		public CspParameters(int dwTypeIn, string strProviderNameIn, string strContainerNameIn); // 0x00828390-0x0082840C
		internal CspParameters(int providerType, string providerName, string keyContainerName, CspProviderFlags flags); // 0x0082842C-0x00828470
	}

	[Serializable]
	[ComVisible] // 0x0013DE90-0x0013DEA4
	public enum CryptoStreamMode // TypeDefIndex: 874
	{
		Read = 0,
		Write = 1
	}

	[ComVisible] // 0x0013DEA4-0x0013DEB8
	public class CryptoStream : Stream, IDisposable // TypeDefIndex: 875
	{
		// Fields
		private Stream _stream; // 0x14
		private ICryptoTransform _Transform; // 0x18
		private byte[] _InputBuffer; // 0x1C
		private int _InputBufferIndex; // 0x20
		private int _InputBlockSize; // 0x24
		private byte[] _OutputBuffer; // 0x28
		private int _OutputBufferIndex; // 0x2C
		private int _OutputBlockSize; // 0x30
		private CryptoStreamMode _transformMode; // 0x34
		private bool _canRead; // 0x38
		private bool _canWrite; // 0x39
		private bool _finalBlockTransformed; // 0x3A
	
		// Properties
		public override bool CanRead { get; } // 0x00824198-0x008241A0 
		public override bool CanSeek { get; } // 0x008241A0-0x008241A8 
		public override bool CanWrite { get; } // 0x008241A8-0x008241B0 
		public override long Length { get; } // 0x008241B0-0x00824258 
		public override long Position { get; set; } // 0x00824258-0x00824300 0x00824300-0x008243A8
		public bool HasFlushedFinalBlock { get; } // 0x008243A8-0x008243B0 
	
		// Nested types
		private struct HopToThreadPoolAwaitable : INotifyCompletion // TypeDefIndex: 876
		{
			// Properties
			public bool IsCompleted { get; } // 0x00827F4C-0x00827FD8 
	
			// Methods
			public HopToThreadPoolAwaitable GetAwaiter(); // 0x00827F44-0x00827F4C
			public void OnCompleted(Action continuation); // 0x00827FD8-0x00827FDC
			public void GetResult(); // 0x00827FDC-0x00827FE0
		}
	
		[CompilerGenerated] // 0x0013DEB8-0x0013DEC8
		private struct <ReadAsyncInternal>d__34 : IAsyncStateMachine // TypeDefIndex: 877
		{
			// Fields
			public int <>1__state; // 0x00
			public AsyncTaskMethodBuilder<int> <>t__builder; // 0x04
			public CryptoStream <>4__this; // 0x10
			public int count; // 0x14
			public int offset; // 0x18
			public byte[] buffer; // 0x1C
			public CancellationToken cancellationToken; // 0x20
			private byte[] <tempInputBuffer>5__1; // 0x24
			private int <currentOutputIndex>5__2; // 0x28
			private int <bytesToDeliver>5__3; // 0x2C
			private SemaphoreSlim <sem>5__4; // 0x30
			private HopToThreadPoolAwaitable <>u__1; // 0x34
			private ConfiguredTaskAwaitable.ConfiguredTaskAwaiter <>u__2; // 0x38
			private int <>7__wrap1; // 0x40
			private ConfiguredTaskAwaitable<int> <>u__3; // 0x44
	
			// Methods
			private void MoveNext(); // 0x0082707C-0x008270F0
			[DebuggerHidden] // 0x0014593C-0x0014594C
			private void SetStateMachine(IAsyncStateMachine stateMachine); // 0x008270F0-0x00827F30
		}
	
		[CompilerGenerated] // 0x0013DEC8-0x0013DED8
		private struct <WriteAsyncInternal>d__37 : IAsyncStateMachine // TypeDefIndex: 878
		{
			// Fields
			public int <>1__state; // 0x00
			public AsyncTaskMethodBuilder <>t__builder; // 0x04
			public CryptoStream <>4__this; // 0x10
			public int count; // 0x14
			public int offset; // 0x18
			public byte[] buffer; // 0x1C
			public CancellationToken cancellationToken; // 0x20
			private int <bytesToWrite>5__1; // 0x24
			private int <currentInputIndex>5__2; // 0x28
			private int <numWholeBlocksInBytes>5__3; // 0x2C
			private SemaphoreSlim <sem>5__4; // 0x30
			private HopToThreadPoolAwaitable <>u__1; // 0x34
			private ConfiguredTaskAwaitable.ConfiguredTaskAwaiter <>u__2; // 0x38
	
			// Methods
			private void MoveNext(); // 0x00827F30-0x00827F38
			[DebuggerHidden] // 0x0014594C-0x0014595C
			private void SetStateMachine(IAsyncStateMachine stateMachine); // 0x00827F38-0x00827F44
		}
	
		// Constructors
		public CryptoStream(Stream stream, ICryptoTransform transform, CryptoStreamMode mode); // 0x00823D58-0x00823FFC
	
		// Methods
		public void FlushFinalBlock(); // 0x008243B0-0x0082468C
		public override void Flush(); // 0x0082468C-0x00824690
		public override long Seek(long offset, SeekOrigin origin); // 0x00824690-0x00824738
		public override int Read([In, Out] byte[] buffer, int offset, int count); // 0x00824738-0x00825020
		public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken); // 0x00825020-0x0082535C
		private async Task<int> ReadAsyncInternal(byte[] buffer, int offset, int count, CancellationToken cancellationToken); // 0x0082535C-0x008254A4
		public override void Write(byte[] buffer, int offset, int count); // 0x008254A4-0x00825BE0
		public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken); // 0x00825BE0-0x00825F10
		private async Task WriteAsyncInternal(byte[] buffer, int offset, int count, CancellationToken cancellationToken); // 0x00825F10-0x00826068
		protected override void Dispose(bool disposing); // 0x00826068-0x0082707C
		private void InitializeBuffer(); // 0x00823FFC-0x00824198
	}

	[ComVisible] // 0x0013DED8-0x0013DEEC
	public abstract class DES : SymmetricAlgorithm // TypeDefIndex: 879
	{
		// Fields
		private static KeySizes[] s_legalBlockSizes; // 0x00
		private static KeySizes[] s_legalKeySizes; // 0x04
	
		// Properties
		public override byte[] Key { get; set; } // 0x0082852C-0x008286D4 0x00828B98-0x00828EA8
	
		// Constructors
		protected DES(); // 0x00828470-0x0082852C
		static DES(); // 0x008291AC-0x00829384
	
		// Methods
		public static DES Create(); // 0x00828EA8-0x00828F10
		public static bool IsWeakKey(byte[] rgbKey); // 0x008286D4-0x008288A8
		public static bool IsSemiWeakKey(byte[] rgbKey); // 0x008288A8-0x00828B98
		private static bool IsLegalKeySize(byte[] rgbKey); // 0x00829038-0x0082905C
		private static ulong QuadWordFromBigEndian(byte[] block); // 0x0082905C-0x008291AC
	}

	[ComVisible] // 0x0013DEEC-0x0013DF00
	public sealed class DESCryptoServiceProvider : DES // TypeDefIndex: 880
	{
		// Constructors
		public DESCryptoServiceProvider(); // 0x00828F10-0x00829038
	
		// Methods
		public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV); // 0x008293B4-0x0082958C
		public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV); // 0x0082989C-0x00829A74
		public override void GenerateKey(); // 0x00829A74-0x00829C28
		public override void GenerateIV(); // 0x00829C28-0x00829CF4
	}

	[Serializable]
	[ComVisible] // 0x0013DF00-0x0013DF14
	public struct DSAParameters // TypeDefIndex: 881
	{
		// Fields
		public byte[] P; // 0x00
		public byte[] Q; // 0x04
		public byte[] G; // 0x08
		public byte[] Y; // 0x0C
		public byte[] J; // 0x10
		[NonSerialized]
		public byte[] X; // 0x14
		public byte[] Seed; // 0x18
		public int Counter; // 0x1C
	}

	[ComVisible] // 0x0013DF14-0x0013DF28
	public abstract class DSA : AsymmetricAlgorithm // TypeDefIndex: 882
	{
		// Constructors
		protected DSA(); // 0x0082B998-0x0082B9A0
	
		// Methods
		public static DSA Create(); // 0x0082B9A0-0x0082BA28
		public override void FromXmlString(string xmlString); // 0x0082BA5C-0x0082C5EC
		public override string ToXmlString(bool includePrivateParameters); // 0x0082C5EC-0x0082CB28
		public abstract DSAParameters ExportParameters(bool includePrivateParameters);
		public abstract void ImportParameters(DSAParameters parameters);
	}

	[ComVisible] // 0x0013DF28-0x0013DF3C
	public abstract class HashAlgorithm : ICryptoTransform // TypeDefIndex: 883
	{
		// Fields
		protected int HashSizeValue; // 0x08
		protected internal byte[] HashValue; // 0x0C
		protected int State; // 0x10
		private bool m_bDisposed; // 0x14
	
		// Properties
		public virtual int HashSize { get; } // 0x0082EC0C-0x0082EC14 
		public virtual byte[] Hash { get; } // 0x0082EC14-0x0082EDD0 
		public virtual int InputBlockSize { get; } // 0x0082F104-0x0082F10C 
		public virtual int OutputBlockSize { get; } // 0x0082F10C-0x0082F114 
		public virtual bool CanTransformMultipleBlocks { get; } // 0x0082F114-0x0082F11C 
	
		// Constructors
		protected HashAlgorithm(); // 0x0082EC04-0x0082EC0C
	
		// Methods
		public byte[] ComputeHash(byte[] buffer); // 0x0082DC6C-0x0082DE68
		public byte[] ComputeHash(byte[] buffer, int offset, int count); // 0x0082EDD0-0x0082F104
		public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset); // 0x0082E14C-0x0082E3E4
		public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x0082E610-0x0082E914
		public void Dispose(); // 0x0082F11C-0x0082F1B8
		protected virtual void Dispose(bool disposing); // 0x0082F1B8-0x0082F1FC
		public abstract void Initialize();
		protected abstract void HashCore(byte[] array, int ibStart, int cbSize);
		protected abstract byte[] HashFinal();
	}

	[ComVisible] // 0x0013DF3C-0x0013DF50
	public abstract class HMAC : KeyedHashAlgorithm // TypeDefIndex: 884
	{
		// Fields
		private int blockSizeValue; // 0x1C
		internal string m_hashName; // 0x20
		internal HashAlgorithm m_hash1; // 0x24
		internal HashAlgorithm m_hash2; // 0x28
		private byte[] m_inner; // 0x2C
		private byte[] m_outer; // 0x30
		private bool m_hashing; // 0x34
	
		// Properties
		protected int BlockSizeValue { get; } // 0x0082D8C8-0x0082D8D0 
		public override byte[] Key { set; } // 0x0082DE68-0x0082DF30
	
		// Constructors
		protected HMAC(); // 0x0082EB1C-0x0082EB2C
	
		// Methods
		private void UpdateIOPadBuffers(); // 0x0082D8D0-0x0082DB18
		internal void InitializeKey(byte[] key); // 0x0082DB18-0x0082DC6C
		public static HMAC Create(); // 0x0082DF30-0x0082DF98
		public override void Initialize(); // 0x0082E02C-0x0082E094
		protected override void HashCore(byte[] rgb, int ib, int cb); // 0x0082E094-0x0082E14C
		protected override byte[] HashFinal(); // 0x0082E3E4-0x0082E610
		protected override void Dispose(bool disposing); // 0x0082E914-0x0082EAB8
	}

	[ComVisible] // 0x0013DF50-0x0013DF64
	public class HMACSHA1 : HMAC // TypeDefIndex: 885
	{
		// Constructors
		public HMACSHA1(); // 0x0082DF98-0x0082E02C
		public HMACSHA1(byte[] key); // 0x0082EB34-0x0082EB3C
		public HMACSHA1(byte[] key, bool useManagedSha1); // 0x0082EB3C-0x0082EC04
	}

	[ComVisible] // 0x0013DF64-0x0013DF78
	public interface ICryptoTransform : IDisposable // TypeDefIndex: 886
	{
		// Properties
		int InputBlockSize { get; }
		int OutputBlockSize { get; }
		bool CanTransformMultipleBlocks { get; }
	
		// Methods
		int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
		byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount);
	}

	[ComVisible] // 0x0013DF78-0x0013DF8C
	public abstract class KeyedHashAlgorithm : HashAlgorithm // TypeDefIndex: 887
	{
		// Fields
		protected byte[] KeyValue; // 0x18
	
		// Properties
		public virtual byte[] Key { set; } // 0x0082F33C-0x0082F4B0
	
		// Constructors
		protected KeyedHashAlgorithm(); // 0x0082EB2C-0x0082EB34
	
		// Methods
		protected override void Dispose(bool disposing); // 0x0082EAB8-0x0082EB1C
	}

	[ComVisible] // 0x0013DF8C-0x0013DFA0
	public abstract class MD5 : HashAlgorithm // TypeDefIndex: 888
	{
		// Constructors
		protected MD5(); // 0x0082F4B0-0x0082F4D0
	
		// Methods
		public static MD5 Create(); // 0x0082F4D0-0x0082F538
	}

	[ComVisible] // 0x0013DFA0-0x0013DFB4
	public abstract class RandomNumberGenerator : IDisposable // TypeDefIndex: 889
	{
		// Constructors
		protected RandomNumberGenerator(); // 0x00837230-0x00837238
	
		// Methods
		public static RandomNumberGenerator Create(); // 0x00839BB0-0x00839C18
		public void Dispose(); // 0x00839C18-0x00839CB4
		protected virtual void Dispose(bool disposing); // 0x00837638-0x0083763C
		public abstract void GetBytes(byte[] data);
	}

	[ComVisible] // 0x0013DFB4-0x0013DFC8
	public abstract class RC2 : SymmetricAlgorithm // TypeDefIndex: 890
	{
		// Fields
		protected int EffectiveKeySizeValue; // 0x2C
		private static KeySizes[] s_legalBlockSizes; // 0x00
		private static KeySizes[] s_legalKeySizes; // 0x04
	
		// Properties
		public virtual int EffectiveKeySize { get; } // 0x00832B74-0x00832B88 
		public override int KeySize { get; set; } // 0x00832B88-0x00832B90 0x00832B90-0x00832C5C
	
		// Constructors
		protected RC2(); // 0x00832AB4-0x00832B74
		static RC2(); // 0x00832E98-0x00833074
	
		// Methods
		public static RC2 Create(); // 0x00832C5C-0x00832CC4
	}

	[ComVisible] // 0x0013DFC8-0x0013DFDC
	public sealed class RC2CryptoServiceProvider : RC2 // TypeDefIndex: 891
	{
		// Fields
		private bool m_use40bitSalt; // 0x30
		private static KeySizes[] s_legalKeySizes; // 0x00
	
		// Properties
		public override int EffectiveKeySize { get; } // 0x00833074-0x0083307C 
	
		// Constructors
		public RC2CryptoServiceProvider(); // 0x00832CC4-0x00832E98
		static RC2CryptoServiceProvider(); // 0x00833C70-0x00833D84
	
		// Methods
		public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV); // 0x0083307C-0x0083316C
		public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV); // 0x008339DC-0x00833ACC
		public override void GenerateKey(); // 0x00833ACC-0x00833BA4
		public override void GenerateIV(); // 0x00833BA4-0x00833C70
	}

	[ComVisible] // 0x0013DFDC-0x0013DFF0
	public abstract class Rijndael : SymmetricAlgorithm // TypeDefIndex: 892
	{
		// Fields
		private static KeySizes[] s_legalBlockSizes; // 0x00
		private static KeySizes[] s_legalKeySizes; // 0x04
	
		// Constructors
		protected Rijndael(); // 0x00839CB4-0x00839D74
		static Rijndael(); // 0x00839D74-0x00839F54
	}

	[ComVisible] // 0x0013DFF0-0x0013E004
	public sealed class RijndaelManaged : Rijndael // TypeDefIndex: 893
	{
		// Constructors
		public RijndaelManaged(); // 0x00839F54-0x0083A044
	
		// Methods
		public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV); // 0x0083A044-0x0083A074
		public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV); // 0x0083A1B8-0x0083A1E8
		public override void GenerateKey(); // 0x0083A1E8-0x0083A27C
		public override void GenerateIV(); // 0x0083A27C-0x0083A310
		private ICryptoTransform NewEncryptor(byte[] rgbKey, CipherMode mode, byte[] rgbIV, int feedbackSize, RijndaelManagedTransformMode encryptMode); // 0x0083A074-0x0083A1B8
	}

	[Serializable]
	internal enum RijndaelManagedTransformMode // TypeDefIndex: 894
	{
		Encrypt = 0,
		Decrypt = 1
	}

	[ComVisible] // 0x0013E004-0x0013E018
	public sealed class RijndaelManagedTransform : ICryptoTransform // TypeDefIndex: 895
	{
		// Fields
		private CipherMode m_cipherMode; // 0x08
		private PaddingMode m_paddingValue; // 0x0C
		private RijndaelManagedTransformMode m_transformMode; // 0x10
		private int m_blockSizeBits; // 0x14
		private int m_blockSizeBytes; // 0x18
		private int m_inputBlockSize; // 0x1C
		private int m_outputBlockSize; // 0x20
		private int[] m_encryptKeyExpansion; // 0x24
		private int[] m_decryptKeyExpansion; // 0x28
		private int m_Nr; // 0x2C
		private int m_Nb; // 0x30
		private int m_Nk; // 0x34
		private int[] m_encryptindex; // 0x38
		private int[] m_decryptindex; // 0x3C
		private int[] m_IV; // 0x40
		private int[] m_lastBlockBuffer; // 0x44
		private byte[] m_depadBuffer; // 0x48
		private byte[] m_shiftRegister; // 0x4C
		private static readonly byte[] s_Sbox; // 0x00
		private static readonly int[] s_Rcon; // 0x04
		private static readonly int[] s_T; // 0x08
		private static readonly int[] s_TF; // 0x0C
		private static readonly int[] s_iT; // 0x10
		private static readonly int[] s_iTF; // 0x14
	
		// Properties
		public int InputBlockSize { get; } // 0x0083B488-0x0083B490 
		public int OutputBlockSize { get; } // 0x0083B490-0x0083B498 
		public bool CanTransformMultipleBlocks { get; } // 0x0083B498-0x0083B4A0 
	
		// Constructors
		internal RijndaelManagedTransform(byte[] rgbKey, CipherMode mode, byte[] rgbIV, int blockSize, int feedbackSize, PaddingMode PaddingValue, RijndaelManagedTransformMode transformMode); // 0x0083A310-0x0083AB34
		static RijndaelManagedTransform(); // 0x0083E930-0x0083EB34
	
		// Methods
		public void Dispose(); // 0x0083B390-0x0083B398
		private void Dispose(bool disposing); // 0x0083B398-0x0083B488
		public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset); // 0x0083B4A0-0x0083B870
		public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x0083DE54-0x0083E204
		public void Reset(); // 0x0083E204-0x0083E280
		private int EncryptData(byte[] inputBuffer, int inputOffset, int inputCount, ref byte[] outputBuffer, int outputOffset, PaddingMode paddingMode, bool fLast); // 0x0083B870-0x0083CB18
		private int DecryptData(byte[] inputBuffer, int inputOffset, int inputCount, ref byte[] outputBuffer, int outputOffset, PaddingMode paddingMode, bool fLast); // 0x0083CB18-0x0083DE54
		private unsafe void Enc(int* encryptindex, int* encryptKeyExpansion, int* T, int* TF, int* work, int* temp); // 0x0083E280-0x0083E4BC
		private unsafe void Dec(int* decryptindex, int* decryptKeyExpansion, int* iT, int* iTF, int* work, int* temp); // 0x0083E4BC-0x0083E724
		private void GenerateKeyExpansion(byte[] rgbKey); // 0x0083AB34-0x0083B390
		private static int rot1(int val); // 0x0083E928-0x0083E930
		private static int rot2(int val); // 0x0083E920-0x0083E928
		private static int rot3(int val); // 0x0083E724-0x0083E72C
		private static int SubWord(int a); // 0x0083E72C-0x0083E8F0
		private static int MulX(int x); // 0x0083E8F0-0x0083E920
	}

	[ComVisible] // 0x0013E018-0x0013E02C
	public abstract class RIPEMD160 : HashAlgorithm // TypeDefIndex: 896
	{
		// Constructors
		protected RIPEMD160(); // 0x00835170-0x00835190
	
		// Methods
		public static RIPEMD160 Create(); // 0x00835190-0x008351F8
	}

	[ComVisible] // 0x0013E02C-0x0013E040
	public class RIPEMD160Managed : RIPEMD160 // TypeDefIndex: 897
	{
		// Fields
		private byte[] _buffer; // 0x18
		private long _count; // 0x20
		private uint[] _stateMD160; // 0x28
		private uint[] _blockDWords; // 0x2C
	
		// Constructors
		public RIPEMD160Managed(); // 0x008351F8-0x0083531C
	
		// Methods
		public override void Initialize(); // 0x00835464-0x008354C8
		protected override void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x008354C8-0x008354E0
		protected override byte[] HashFinal(); // 0x0083569C-0x008356A0
		private void InitializeState(); // 0x0083531C-0x00835464
		private void _HashData(byte[] partIn, int ibStart, int cbSize); // 0x008354E0-0x0083569C
		private byte[] _EndHash(); // 0x008356A0-0x00835944
		private static unsafe void MDTransform(uint* blockDWords, uint* state, byte* block); // 0x00835944-0x008370BC
		private static uint F(uint x, uint y, uint z); // 0x008370BC-0x008370C8
		private static uint G(uint x, uint y, uint z); // 0x008370C8-0x008370D8
		private static uint H(uint x, uint y, uint z); // 0x008370D8-0x008370E8
		private static uint I(uint x, uint y, uint z); // 0x008370E8-0x008370F8
		private static uint J(uint x, uint y, uint z); // 0x008370F8-0x00837108
	}

	[Serializable]
	[ComVisible] // 0x0013E040-0x0013E054
	public struct RSAParameters // TypeDefIndex: 898
	{
		// Fields
		public byte[] Exponent; // 0x00
		public byte[] Modulus; // 0x04
		[NonSerialized]
		public byte[] P; // 0x08
		[NonSerialized]
		public byte[] Q; // 0x0C
		[NonSerialized]
		public byte[] DP; // 0x10
		[NonSerialized]
		public byte[] DQ; // 0x14
		[NonSerialized]
		public byte[] InverseQ; // 0x18
		[NonSerialized]
		public byte[] D; // 0x1C
	}

	[ComVisible] // 0x0013E054-0x0013E068
	public abstract class RSA : AsymmetricAlgorithm // TypeDefIndex: 899
	{
		// Constructors
		protected RSA(); // 0x0083763C-0x00837644
	
		// Methods
		public static RSA Create(); // 0x00837644-0x008376CC
		public virtual byte[] EncryptValue(byte[] rgb); // 0x00837700-0x008377A8
		public override void FromXmlString(string xmlString); // 0x008377A8-0x0083801C
		public override string ToXmlString(bool includePrivateParameters); // 0x0083801C-0x008384B4
		public abstract RSAParameters ExportParameters(bool includePrivateParameters);
		public abstract void ImportParameters(RSAParameters parameters);
	}

	[ComVisible] // 0x0013E068-0x0013E07C
	public sealed class RSACryptoServiceProvider : RSA, ICspAsymmetricAlgorithm // TypeDefIndex: 900
	{
		// Fields
		private static CspProviderFlags s_UseMachineKeyStore; // 0x00
		private KeyPairPersistence store; // 0x10
		private bool persistKey; // 0x14
		private bool persisted; // 0x15
		private bool privateKeyExportable; // 0x16
		private bool m_disposed; // 0x17
		private RSAManaged rsa; // 0x18
	
		// Properties
		public static bool UseMachineKeyStore { get; } // 0x008384B4-0x00838550 
		public override int KeySize { get; } // 0x00838A8C-0x00838AB0 
	
		// Constructors
		public RSACryptoServiceProvider(); // 0x008376CC-0x00837700
		public RSACryptoServiceProvider(CspParameters parameters); // 0x00838588-0x00838594
		public RSACryptoServiceProvider(int dwKeySize); // 0x00838550-0x00838588
		public RSACryptoServiceProvider(int dwKeySize, CspParameters parameters); // 0x00838594-0x008385EC
		static RSACryptoServiceProvider(); // 0x00838EC8-0x00838ECC
	
		// Methods
		private void Common(int dwKeySize, bool parameters); // 0x008385EC-0x00838870
		private void Common(CspParameters p); // 0x00838870-0x00838A14
		~RSACryptoServiceProvider(); // 0x00838A14-0x00838A8C
		public override byte[] EncryptValue(byte[] rgb); // 0x00838AB0-0x00838AEC
		public override RSAParameters ExportParameters(bool includePrivateParameters); // 0x00838AEC-0x00838D18
		public override void ImportParameters(RSAParameters parameters); // 0x00838D18-0x00838DA8
		protected override void Dispose(bool disposing); // 0x00838DA8-0x00838E18
		private void OnKeyGenerated(object sender, EventArgs e); // 0x00838E18-0x00838EC8
	}

	[ComVisible] // 0x0013E07C-0x0013E090
	public abstract class SHA1 : HashAlgorithm // TypeDefIndex: 901
	{
		// Constructors
		protected SHA1(); // 0x0059B690-0x0059B6B0
	
		// Methods
		public static SHA1 Create(); // 0x0059B6B0-0x0059B718
	}

	[ComVisible] // 0x0013E090-0x0013E0A4
	public class SHA1Managed : SHA1 // TypeDefIndex: 902
	{
		// Fields
		private byte[] _buffer; // 0x18
		private long _count; // 0x20
		private uint[] _stateSHA1; // 0x28
		private uint[] _expandedBuffer; // 0x2C
	
		// Constructors
		public SHA1Managed(); // 0x0059DF14-0x0059E038
	
		// Methods
		public override void Initialize(); // 0x0059E180-0x0059E1E4
		protected override void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x0059E1E4-0x0059E1FC
		protected override byte[] HashFinal(); // 0x0059E3B8-0x0059E3BC
		private void InitializeState(); // 0x0059E038-0x0059E180
		private void _HashData(byte[] partIn, int ibStart, int cbSize); // 0x0059E1FC-0x0059E3B8
		private byte[] _EndHash(); // 0x0059E3BC-0x0059E65C
		private static unsafe void SHATransform(uint* expandedBuffer, uint* state, byte* block); // 0x0059E65C-0x0059EA84
		private static unsafe void SHAExpand(uint* x); // 0x0059EC54-0x0059EC98
	}

	[ComVisible] // 0x0013E0A4-0x0013E0B8
	public abstract class SHA256 : HashAlgorithm // TypeDefIndex: 903
	{
		// Constructors
		protected SHA256(); // 0x0059EC98-0x0059ECB8
	
		// Methods
		public static SHA256 Create(); // 0x0059ECB8-0x0059ED20
	}

	[ComVisible] // 0x0013E0B8-0x0013E0CC
	public class SHA256Managed : SHA256 // TypeDefIndex: 904
	{
		// Fields
		private byte[] _buffer; // 0x18
		private long _count; // 0x20
		private uint[] _stateSHA256; // 0x28
		private uint[] _W; // 0x2C
		private static readonly uint[] _K; // 0x00
	
		// Constructors
		public SHA256Managed(); // 0x0059ED20-0x0059EE44
		static SHA256Managed(); // 0x005A016C-0x005A0204
	
		// Methods
		public override void Initialize(); // 0x0059F040-0x0059F0A4
		protected override void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x0059F0A4-0x0059F0BC
		protected override byte[] HashFinal(); // 0x0059F30C-0x0059F310
		private void InitializeState(); // 0x0059EE44-0x0059F040
		private void _HashData(byte[] partIn, int ibStart, int cbSize); // 0x0059F0BC-0x0059F30C
		private byte[] _EndHash(); // 0x0059F310-0x0059F5B0
		private static unsafe void SHATransform(uint* expandedBuffer, uint* state, byte* block); // 0x0059F5B0-0x0059FE70
		private static uint RotateRight(uint x, int n); // 0x005A0058-0x005A0064
		private static uint Ch(uint x, uint y, uint z); // 0x0059FFB0-0x0059FFC0
		private static uint Maj(uint x, uint y, uint z); // 0x005A0044-0x005A0058
		private static uint sigma_0(uint x); // 0x005A0064-0x005A00E8
		private static uint sigma_1(uint x); // 0x005A00E8-0x005A016C
		private static uint Sigma_0(uint x); // 0x0059FFC0-0x005A0044
		private static uint Sigma_1(uint x); // 0x0059FF2C-0x0059FFB0
		private static unsafe void SHA256Expand(uint* x); // 0x0059FE70-0x0059FF2C
	}

	[ComVisible] // 0x0013E0CC-0x0013E0E0
	public abstract class SHA384 : HashAlgorithm // TypeDefIndex: 905
	{
		// Constructors
		protected SHA384(); // 0x005A0204-0x005A0224
	
		// Methods
		public static SHA384 Create(); // 0x005A0224-0x005A028C
	}

	[ComVisible] // 0x0013E0E0-0x0013E0F4
	public class SHA384Managed : SHA384 // TypeDefIndex: 906
	{
		// Fields
		private byte[] _buffer; // 0x18
		private ulong _count; // 0x20
		private ulong[] _stateSHA384; // 0x28
		private ulong[] _W; // 0x2C
		private static readonly ulong[] _K; // 0x00
	
		// Constructors
		public SHA384Managed(); // 0x005A028C-0x005A03B0
		static SHA384Managed(); // 0x005A2020-0x005A20B8
	
		// Methods
		public override void Initialize(); // 0x005A05EC-0x005A0650
		protected override void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x005A0650-0x005A0668
		protected override byte[] HashFinal(); // 0x005A08B8-0x005A08BC
		private void InitializeState(); // 0x005A03B0-0x005A05EC
		private void _HashData(byte[] partIn, int ibStart, int cbSize); // 0x005A0668-0x005A08B8
		private byte[] _EndHash(); // 0x005A08BC-0x005A0B5C
		private static unsafe void SHATransform(ulong* expandedBuffer, ulong* state, byte* block); // 0x005A0B5C-0x005A1888
		private static ulong RotateRight(ulong x, int n); // 0x005A1E50-0x005A1EBC
		private static ulong Ch(ulong x, ulong y, ulong z); // 0x005A1D34-0x005A1D60
		private static ulong Maj(ulong x, ulong y, ulong z); // 0x005A1E1C-0x005A1E50
		private static ulong Sigma_0(ulong x); // 0x005A1D60-0x005A1E1C
		private static ulong Sigma_1(ulong x); // 0x005A1C78-0x005A1D34
		private static ulong sigma_0(ulong x); // 0x005A1EBC-0x005A1F6C
		private static ulong sigma_1(ulong x); // 0x005A1F6C-0x005A2020
		private static unsafe void SHA384Expand(ulong* x); // 0x005A1B8C-0x005A1C78
	}

	[ComVisible] // 0x0013E0F4-0x0013E108
	public abstract class SHA512 : HashAlgorithm // TypeDefIndex: 907
	{
		// Constructors
		protected SHA512(); // 0x005A20B8-0x005A20D8
	
		// Methods
		public static SHA512 Create(); // 0x005A20D8-0x005A2140
	}

	[ComVisible] // 0x0013E108-0x0013E11C
	public class SHA512Managed : SHA512 // TypeDefIndex: 908
	{
		// Fields
		private byte[] _buffer; // 0x18
		private ulong _count; // 0x20
		private ulong[] _stateSHA512; // 0x28
		private ulong[] _W; // 0x2C
		private static readonly ulong[] _K; // 0x00
	
		// Constructors
		public SHA512Managed(); // 0x005A2140-0x005A2264
		static SHA512Managed(); // 0x005A3BD0-0x005A3C68
	
		// Methods
		public override void Initialize(); // 0x005A24A0-0x005A2504
		protected override void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x005A2504-0x005A251C
		protected override byte[] HashFinal(); // 0x005A276C-0x005A2770
		private void InitializeState(); // 0x005A2264-0x005A24A0
		private void _HashData(byte[] partIn, int ibStart, int cbSize); // 0x005A251C-0x005A276C
		private byte[] _EndHash(); // 0x005A2770-0x005A2A10
		private static unsafe void SHATransform(ulong* expandedBuffer, ulong* state, byte* block); // 0x005A2A10-0x005A373C
		private static ulong RotateRight(ulong x, int n); // 0x005A3A00-0x005A3A6C
		private static ulong Ch(ulong x, ulong y, ulong z); // 0x005A38E4-0x005A3910
		private static ulong Maj(ulong x, ulong y, ulong z); // 0x005A39CC-0x005A3A00
		private static ulong Sigma_0(ulong x); // 0x005A3910-0x005A39CC
		private static ulong Sigma_1(ulong x); // 0x005A3828-0x005A38E4
		private static ulong sigma_0(ulong x); // 0x005A3A6C-0x005A3B1C
		private static ulong sigma_1(ulong x); // 0x005A3B1C-0x005A3BD0
		private static unsafe void SHA512Expand(ulong* x); // 0x005A373C-0x005A3828
	}

	[ComVisible] // 0x0013E11C-0x0013E130
	public abstract class SymmetricAlgorithm : IDisposable // TypeDefIndex: 909
	{
		// Fields
		protected int BlockSizeValue; // 0x08
		protected int FeedbackSizeValue; // 0x0C
		protected byte[] IVValue; // 0x10
		protected byte[] KeyValue; // 0x14
		protected KeySizes[] LegalBlockSizesValue; // 0x18
		protected KeySizes[] LegalKeySizesValue; // 0x1C
		protected int KeySizeValue; // 0x20
		protected CipherMode ModeValue; // 0x24
		protected PaddingMode PaddingValue; // 0x28
	
		// Properties
		public virtual int BlockSize { get; set; } // 0x005A3E50-0x005A3E58 0x005A3E58-0x005A40D0
		public virtual int FeedbackSize { get; } // 0x005A40D0-0x005A40D8 
		public virtual byte[] IV { get; set; } // 0x005A40D8-0x005A4200 0x005A4200-0x005A43C8
		public virtual byte[] Key { get; set; } // 0x005A43C8-0x005A44F0 0x005A44F0-0x005A46C4
		public virtual KeySizes[] LegalKeySizes { get; } // 0x005A4840-0x005A4948 
		public virtual int KeySize { get; set; } // 0x005A4948-0x005A4950 0x005A4950-0x005A4A20
		public virtual CipherMode Mode { get; set; } // 0x005A4A20-0x005A4A28 0x005A4A28-0x005A4AE8
		public virtual PaddingMode Padding { get; set; } // 0x005A4AE8-0x005A4AF0 0x005A4AF0-0x005A4BB0
	
		// Constructors
		protected SymmetricAlgorithm(); // 0x005A3C68-0x005A3C90
	
		// Methods
		public void Dispose(); // 0x005A3C90-0x005A3D2C
		public void Clear(); // 0x005A3D2C-0x005A3DF0
		protected virtual void Dispose(bool disposing); // 0x005A3DF0-0x005A3E50
		public bool ValidKeySize(int bitLength); // 0x005A46C4-0x005A4840
		public virtual ICryptoTransform CreateEncryptor(); // 0x005A4BB0-0x005A4C08
		public abstract ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV);
		public virtual ICryptoTransform CreateDecryptor(); // 0x005A4C08-0x005A4C60
		public abstract ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV);
		public abstract void GenerateKey();
		public abstract void GenerateIV();
	}

	[ComVisible] // 0x0013E130-0x0013E144
	public abstract class TripleDES : SymmetricAlgorithm // TypeDefIndex: 910
	{
		// Fields
		private static KeySizes[] s_legalBlockSizes; // 0x00
		private static KeySizes[] s_legalKeySizes; // 0x04
	
		// Properties
		public override byte[] Key { get; set; } // 0x005A4D30-0x005A4E98 0x005A5088-0x005A52FC
	
		// Constructors
		protected TripleDES(); // 0x005A4C60-0x005A4D30
		static TripleDES(); // 0x005A586C-0x005A5A4C
	
		// Methods
		public static TripleDES Create(); // 0x005A52FC-0x005A5364
		public static bool IsWeakKey(byte[] rgbKey); // 0x005A4E98-0x005A5088
		private static bool EqualBytes(byte[] rgbKey, int start1, int start2, int count); // 0x005A55BC-0x005A586C
		private static bool IsLegalKeySize(byte[] rgbKey); // 0x005A5418-0x005A5440
	}

	[ComVisible] // 0x0013E144-0x0013E158
	public sealed class TripleDESCryptoServiceProvider : TripleDES // TypeDefIndex: 911
	{
		// Constructors
		public TripleDESCryptoServiceProvider(); // 0x005A5364-0x005A5418
	
		// Methods
		public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV); // 0x005A5A54-0x005A5B94
		public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV); // 0x005A5F00-0x005A6040
		public override void GenerateKey(); // 0x005A6040-0x005A61B8
		public override void GenerateIV(); // 0x005A6304-0x005A63CC
	}

	internal static class Utils // TypeDefIndex: 912
	{
		// Fields
		private static RNGCryptoServiceProvider _rng; // 0x00
	
		// Properties
		internal static RNGCryptoServiceProvider StaticRandomNumberGenerator { get; } // 0x005A61B8-0x005A6304 
	
		// Constructors
		static Utils(); // 0x005A669C-0x005A66A0
	
		// Methods
		internal static byte[] GenerateRandom(int keySize); // 0x005A66A0-0x005A6768
		internal static bool HasAlgorithm(int dwCalg, int dwKeySize); // 0x005A5A4C-0x005A5A54
		internal static string DiscardWhiteSpaces(string inputBuffer); // 0x005A6768-0x005A6804
		internal static string DiscardWhiteSpaces(string inputBuffer, int inputOffset, int inputCount); // 0x005A680C-0x005A6A0C
		internal static int ConvertByteArrayToInt(byte[] input); // 0x005A6ABC-0x005A6B24
		internal static byte[] ConvertIntToByteArray(int dwInput); // 0x005A6B24-0x005A6CC8
		internal static byte[] FixupKeyParity(byte[] key); // 0x005A5440-0x005A55BC
		internal static unsafe void DWORDFromLittleEndian(uint* x, int digits, byte* block); // 0x005A6CC8-0x005A6CE4
		internal static void DWORDToLittleEndian(byte[] block, uint[] x, int digits); // 0x005A6CE4-0x005A6E84
		internal static unsafe void DWORDFromBigEndian(uint* x, int digits, byte* block); // 0x0059EC34-0x0059EC54
		internal static void DWORDToBigEndian(byte[] block, uint[] x, int digits); // 0x0059EA84-0x0059EC34
		internal static unsafe void QuadWordFromBigEndian(ulong* x, int digits, byte* block); // 0x005A1B48-0x005A1B8C
		internal static void QuadWordToBigEndian(byte[] block, ulong[] x, int digits); // 0x005A1888-0x005A1B48
	}

	[ComVisible] // 0x0013E158-0x0013E16C
	public class CryptoConfig // TypeDefIndex: 913
	{
		// Properties
		[MonoLimitation] // 0x001466BC-0x001466F0
		public static bool AllowOnlyFipsAlgorithms { get; } // 0x00418B1C-0x00418B24 
	
		// Methods
		public static byte[] EncodeOID(string str); // 0x004182EC-0x004188F4
		private static byte[] EncodeLongNumber(long x); // 0x004188F4-0x00418B1C
		public static string MapNameToOID(string name); // 0x00418B24-0x004191C4
	}

	internal class DESTransform : SymmetricTransform // TypeDefIndex: 914
	{
		// Fields
		internal static readonly int KEY_BIT_SIZE; // 0x00
		internal static readonly int KEY_BYTE_SIZE; // 0x04
		internal static readonly int BLOCK_BIT_SIZE; // 0x08
		internal static readonly int BLOCK_BYTE_SIZE; // 0x0C
		private byte[] keySchedule; // 0x34
		private byte[] byteBuff; // 0x38
		private uint[] dwordBuff; // 0x3C
		private static readonly uint[] spBoxes; // 0x10
		private static readonly byte[] PC1; // 0x14
		private static readonly byte[] leftRotTotal; // 0x18
		private static readonly byte[] PC2; // 0x1C
		internal static readonly uint[] ipTab; // 0x20
		internal static readonly uint[] fpTab; // 0x24
	
		// Constructors
		internal DESTransform(SymmetricAlgorithm symmAlgo, bool encryption, byte[] key, byte[] iv); // 0x0082958C-0x0082989C
		static DESTransform(); // 0x0082B790-0x0082B998
	
		// Methods
		private uint CipherFunct(uint r, int n); // 0x0082A478-0x0082A97C
		internal static void Permutation(byte[] input, byte[] output, uint[] permTab, bool preSwap); // 0x0082A97C-0x0082AFC4
		private static void BSwap(byte[] byteBuff); // 0x0082AFC4-0x0082B234
		internal void SetKey(byte[] key); // 0x00829E18-0x0082A478
		public void ProcessBlock(byte[] input, byte[] output); // 0x0082B234-0x0082B6A8
		protected override void ECB(byte[] input, byte[] output); // 0x0082B6A8-0x0082B790
		internal static byte[] GetStrongKey(); // 0x00829CF4-0x00829E18
	}

	[ComVisible] // 0x0013E16C-0x0013E180
	public sealed class DSACryptoServiceProvider : DSA, ICspAsymmetricAlgorithm // TypeDefIndex: 915
	{
		// Fields
		private KeyPairPersistence store; // 0x10
		private bool persistKey; // 0x14
		private bool persisted; // 0x15
		private bool privateKeyExportable; // 0x16
		private bool m_disposed; // 0x17
		private DSAManaged dsa; // 0x18
		private static bool useMachineKeyStore; // 0x00
	
		// Properties
		public override int KeySize { get; } // 0x0082CE34-0x0082CE68 
	
		// Constructors
		public DSACryptoServiceProvider(); // 0x0082BA28-0x0082BA5C
		public DSACryptoServiceProvider(int dwKeySize); // 0x0082CB28-0x0082CB60
	
		// Methods
		private void Common(int dwKeySize, bool parameters); // 0x0082CB60-0x0082CDBC
		~DSACryptoServiceProvider(); // 0x0082CDBC-0x0082CE34
		public override DSAParameters ExportParameters(bool includePrivateParameters); // 0x0082CE68-0x0082CF5C
		public override void ImportParameters(DSAParameters parameters); // 0x0082CF5C-0x0082CFEC
		protected override void Dispose(bool disposing); // 0x0082CFEC-0x0082D05C
		private void OnKeyGenerated(object sender, EventArgs e); // 0x0082D05C-0x0082D8C8
	}

	[ComVisible] // 0x0013E180-0x0013E194
	public interface ICspAsymmetricAlgorithm // TypeDefIndex: 916
	{
	}

	[ComVisible] // 0x0013E194-0x0013E1A8
	public sealed class MD5CryptoServiceProvider : MD5 // TypeDefIndex: 917
	{
		// Fields
		private uint[] _H; // 0x18
		private uint[] buff; // 0x1C
		private ulong count; // 0x20
		private byte[] _ProcessingBuffer; // 0x28
		private int _ProcessingBufferCount; // 0x2C
		private static readonly uint[] K; // 0x00
	
		// Constructors
		public MD5CryptoServiceProvider(); // 0x0082F538-0x0082F5F4
		static MD5CryptoServiceProvider(); // 0x00832A1C-0x00832AB4
	
		// Methods
		~MD5CryptoServiceProvider(); // 0x0082F5F4-0x0082F66C
		protected override void Dispose(bool disposing); // 0x0082F66C-0x0082F708
		protected override void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x0082F708-0x0082F804
		protected override byte[] HashFinal(); // 0x00832428-0x00832550
		public override void Initialize(); // 0x00832774-0x00832884
		private void ProcessBlock(byte[] inputBuffer, int inputOffset); // 0x0082F804-0x00832428
		private void ProcessFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x00832550-0x00832774
		internal void AddLength(ulong length, byte[] buffer, int position); // 0x00832884-0x00832A1C
	}

	internal class RC2Transform : SymmetricTransform // TypeDefIndex: 918
	{
		// Fields
		private ushort R0; // 0x34
		private ushort R1; // 0x36
		private ushort R2; // 0x38
		private ushort R3; // 0x3A
		private ushort[] K; // 0x3C
		private int j; // 0x40
		private static readonly byte[] pitable; // 0x00
	
		// Constructors
		public RC2Transform(RC2 rc2Algo, bool encryption, byte[] key, byte[] iv); // 0x0083316C-0x008339DC
		static RC2Transform(); // 0x008350D8-0x00835170
	
		// Methods
		protected override void ECB(byte[] input, byte[] output); // 0x00833D84-0x008350D8
	}

	public sealed class RNGCryptoServiceProvider : RandomNumberGenerator // TypeDefIndex: 919
	{
		// Fields
		private static object _lock; // 0x00
		private IntPtr _handle; // 0x08
	
		// Constructors
		static RNGCryptoServiceProvider(); // 0x00837108-0x00837194
		public RNGCryptoServiceProvider(); // 0x00837198-0x00837230
	
		// Methods
		private void Check(); // 0x0083723C-0x008372FC
		private static bool RngOpen(); // 0x00837194-0x00837198
		private static IntPtr RngInitialize(byte[] seed); // 0x00837238-0x0083723C
		private static IntPtr RngGetBytes(IntPtr handle, byte[] data); // 0x008372FC-0x00837300
		private static void RngClose(IntPtr handle); // 0x00837300-0x00837304
		public override void GetBytes(byte[] data); // 0x00837304-0x0083753C
		~RNGCryptoServiceProvider(); // 0x0083753C-0x00837634
		protected override void Dispose(bool disposing); // 0x00837634-0x00837638
	}

	[ComVisible] // 0x0013E1A8-0x0013E1BC
	public class RSAPKCS1SignatureDeformatter : AsymmetricSignatureDeformatter // TypeDefIndex: 920
	{
		// Fields
		private RSA rsa; // 0x08
		private string hashName; // 0x0C
	
		// Constructors
		public RSAPKCS1SignatureDeformatter(AsymmetricAlgorithm key); // 0x00838ECC-0x00838F00
	
		// Methods
		public override void SetHashAlgorithm(string strName); // 0x00838F00-0x00838FB0
		public override void SetKey(AsymmetricAlgorithm key); // 0x00838FB0-0x008390F4
		public override bool VerifySignature(byte[] rgbHash, byte[] rgbSignature); // 0x008390F4-0x00839BB0
	}

	internal class SHA1Internal // TypeDefIndex: 921
	{
		// Fields
		private uint[] _H; // 0x08
		private ulong count; // 0x10
		private byte[] _ProcessingBuffer; // 0x18
		private int _ProcessingBufferCount; // 0x1C
		private uint[] buff; // 0x20
	
		// Constructors
		public SHA1Internal(); // 0x0059B798-0x0059B840
	
		// Methods
		public void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x0059B910-0x0059BA0C
		public byte[] HashFinal(); // 0x0059BA3C-0x0059BB68
		public void Initialize(); // 0x0059BB90-0x0059BCDC
		private void ProcessBlock(byte[] inputBuffer, uint inputOffset); // 0x0059BCDC-0x0059C784
		private static void InitialiseBuff(uint[] buff, byte[] input, uint inputOffset); // 0x0059C9B8-0x0059D6F4
		private static void FillBuff(uint[] buff); // 0x0059D6F4-0x0059DD80
		private void ProcessFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x0059C784-0x0059C9B8
		internal void AddLength(ulong length, byte[] buffer, int position); // 0x0059DD80-0x0059DF14
	}

	[ComVisible] // 0x0013E1BC-0x0013E1D0
	public sealed class SHA1CryptoServiceProvider : SHA1 // TypeDefIndex: 922
	{
		// Fields
		private SHA1Internal sha; // 0x18
	
		// Constructors
		public SHA1CryptoServiceProvider(); // 0x0059B718-0x0059B798
	
		// Methods
		~SHA1CryptoServiceProvider(); // 0x0059B840-0x0059B8B8
		protected override void Dispose(bool disposing); // 0x0059B8B8-0x0059B8C0
		protected override void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x0059B8C0-0x0059B910
		protected override byte[] HashFinal(); // 0x0059BA0C-0x0059BA3C
		public override void Initialize(); // 0x0059BB68-0x0059BB90
	}

	internal class TripleDESTransform : SymmetricTransform // TypeDefIndex: 923
	{
		// Fields
		private DESTransform E1; // 0x34
		private DESTransform D2; // 0x38
		private DESTransform E3; // 0x3C
		private DESTransform D1; // 0x40
		private DESTransform E2; // 0x44
		private DESTransform D3; // 0x48
	
		// Constructors
		public TripleDESTransform(TripleDES algo, bool encryption, byte[] key, byte[] iv); // 0x005A5B94-0x005A5F00
	
		// Methods
		protected override void ECB(byte[] input, byte[] output); // 0x005A64AC-0x005A669C
		internal static byte[] GetStrongKey(); // 0x005A63CC-0x005A64AC
	}
}

namespace System.Security.Cryptography.X509Certificates
{
	[Flags] // 0x0013E1D0-0x0013E1E0
	public enum X509KeyStorageFlags // TypeDefIndex: 924
	{
		DefaultKeySet = 0,
		UserKeySet = 1,
		MachineKeySet = 2,
		Exportable = 4,
		UserProtected = 8,
		PersistKeySet = 16,
		EphemeralKeySet = 32
	}

	[Serializable]
	[ComVisible] // 0x0013E1E0-0x0013E22C
	[MonoTODO] // 0x0013E1E0-0x0013E22C
	public class X509Certificate : IDeserializationCallback, ISerializable, IDisposable // TypeDefIndex: 925
	{
		// Fields
		private X509CertificateImpl impl; // 0x08
		private bool hideDates; // 0x0C
		private string issuer_name; // 0x10
		private string subject_name; // 0x14
	
		// Properties
		internal X509CertificateImpl Impl { get; } // 0x005A7044-0x005A7060 
	
		// Constructors
		internal X509Certificate(X509CertificateImpl impl); // 0x005A6E84-0x005A6F4C
		public X509Certificate(); // 0x005A72DC-0x005A72E4
		public X509Certificate(SerializationInfo info, StreamingContext context); // 0x005A72E4-0x005A7478
	
		// Methods
		public virtual bool Equals(X509Certificate other); // 0x005A70F0-0x005A7214
		public override int GetHashCode(); // 0x005A7230-0x005A7294
		public virtual byte[] GetRawCertData(); // 0x005A7294-0x005A72D4
		public override string ToString(); // 0x005A72D4-0x005A72DC
		[ComVisible] // 0x0014595C-0x00145970
		public override bool Equals(object obj); // 0x005A7478-0x005A7528
		[ComVisible] // 0x00145970-0x001459D4
		[MonoTODO] // 0x00145970-0x001459D4
		public virtual void Import(byte[] rawData, string password, X509KeyStorageFlags keyStorageFlags); // 0x005A7528-0x005A7564
		void IDeserializationCallback.OnDeserialization(object sender); // 0x005A76B0-0x005A76B4
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x005A76B4-0x005A77C8
		public void Dispose(); // 0x005A77C8-0x005A77DC
		protected virtual void Dispose(bool disposing); // 0x005A77DC-0x005A77F4
		[ComVisible] // 0x001459D4-0x001459E8
		public virtual void Reset(); // 0x005A77F4-0x005A782C
	}

	internal abstract class X509CertificateImpl : IDisposable // TypeDefIndex: 926
	{
		// Fields
		private byte[] cachedCertificateHash; // 0x08
	
		// Properties
		public abstract bool IsValid { get; }
	
		// Constructors
		protected X509CertificateImpl(); // 0x005A7D68-0x005A7D70
	
		// Methods
		protected void ThrowIfContextInvalid(); // 0x005A78C8-0x005A7950
		public abstract X509CertificateImpl Clone();
		public abstract byte[] GetRawCertData();
		protected abstract byte[] GetCertHash(bool lazy);
		public override int GetHashCode(); // 0x005A79DC-0x005A7AEC
		public abstract bool Equals(X509CertificateImpl other, out bool result);
		public override bool Equals(object obj); // 0x005A7AEC-0x005A7CE4
		public void Dispose(); // 0x005A782C-0x005A78C8
		protected virtual void Dispose(bool disposing); // 0x005A7CE4-0x005A7CF0
		~X509CertificateImpl(); // 0x005A7CF0-0x005A7D68
	}

	internal sealed class X509CertificateImplMono : X509CertificateImpl // TypeDefIndex: 927
	{
		// Fields
		private Mono.Security.X509.X509Certificate x509; // 0x0C
	
		// Properties
		public override bool IsValid { get; } // 0x005A7D90-0x005A7DA0 
	
		// Constructors
		public X509CertificateImplMono(Mono.Security.X509.X509Certificate x509); // 0x005A7D70-0x005A7D90
	
		// Methods
		public override X509CertificateImpl Clone(); // 0x005A7DA0-0x005A7E20
		public override byte[] GetRawCertData(); // 0x005A7E20-0x005A7E5C
		protected override byte[] GetCertHash(bool lazy); // 0x005A7E5C-0x005A7EC4
		public override bool Equals(X509CertificateImpl other, out bool result); // 0x005A7EC4-0x005A7ED4
		protected override void Dispose(bool disposing); // 0x005A7ED4-0x005A7EE0
	}

	internal static class X509Helper // TypeDefIndex: 928
	{
		// Methods
		private static X509CertificateImpl Import(byte[] rawData); // 0x005A7EE0-0x005A7EE4
		public static X509CertificateImpl InitFromCertificate(X509CertificateImpl impl); // 0x005A6F4C-0x005A7044
		public static bool IsValid(X509CertificateImpl impl); // 0x005A7214-0x005A7230
		internal static void ThrowIfContextInvalid(X509CertificateImpl impl); // 0x005A7060-0x005A70F0
		internal static Exception GetInvalidContextException(); // 0x005A7950-0x005A79DC
		internal static Mono.Security.X509.X509Certificate ImportPkcs12(byte[] rawData, string password); // 0x005A8100-0x005A8604
		private static byte[] PEM(string type, byte[] data); // 0x005A8608-0x005A8780
		private static byte[] ConvertData(byte[] data); // 0x005A8A80-0x005A8B98
		private static X509CertificateImpl ImportCore(byte[] rawData); // 0x005A7EE4-0x005A8100
		public static X509CertificateImpl Import(byte[] rawData, string password, X509KeyStorageFlags keyStorageFlags); // 0x005A7564-0x005A76B0
	}
}

namespace System.Runtime.Versioning
{
	internal static class BinaryCompatibility // TypeDefIndex: 929
	{
		// Fields
		public static readonly bool TargetsAtLeast_Desktop_V4_5; // 0x00
		public static readonly bool TargetsAtLeast_Desktop_V4_5_1; // 0x01
	
		// Constructors
		static BinaryCompatibility(); // 0x0040891C-0x00408998
	}
}

namespace System.Runtime.Serialization
{
	[Serializable]
	internal delegate void DeserializationEventHandler(object sender); // TypeDefIndex: 930; 0x0037D7E4-0x0037E00C

	[Serializable]
	internal delegate void SerializationEventHandler(StreamingContext context); // TypeDefIndex: 931; 0x00401CC8-0x0040214C

	[ComVisible] // 0x0013E22C-0x0013E240
	public class FormatterConverter : IFormatterConverter // TypeDefIndex: 932
	{
		// Constructors
		public FormatterConverter(); // 0x0037E258-0x0037E260
	
		// Methods
		public object Convert(object value, Type type); // 0x0037E260-0x0037E388
		public bool ToBoolean(object value); // 0x0037E388-0x0037E4A8
		public int ToInt32(object value); // 0x0037E4A8-0x0037E5C8
		public long ToInt64(object value); // 0x0037E5C8-0x0037E6E8
		public float ToSingle(object value); // 0x0037E6E8-0x0037E808
		public string ToString(object value); // 0x0037E808-0x0037E928
	}

	[ComVisible] // 0x0013E240-0x0013E254
	public static class FormatterServices // TypeDefIndex: 933
	{
		// Fields
		internal static ConcurrentDictionary<MemberHolder, MemberInfo[]> m_MemberInfoTable; // 0x00
		private static bool unsafeTypeForwardersIsEnabled; // 0x04
		private static bool unsafeTypeForwardersIsEnabledInitialized; // 0x05
		private static readonly Type[] advancedTypes; // 0x08
		private static Binder s_binder; // 0x0C
	
		// Nested types
		[CompilerGenerated] // 0x0013E254-0x0013E264
		private sealed class <>c__DisplayClass9_0 // TypeDefIndex: 934
		{
			// Fields
			public Type type; // 0x08
	
			// Constructors
			public <>c__DisplayClass9_0(); // 0x0037FFEC-0x0037FFF4
	
			// Methods
			internal MemberInfo[] <GetSerializableMembers>b__0(MemberHolder _); // 0x00381A64-0x00381B88
		}
	
		// Constructors
		static FormatterServices(); // 0x0037E928-0x0037EACC
	
		// Methods
		private static MemberInfo[] GetSerializableMembers(RuntimeType type); // 0x0037EACC-0x0037ED0C
		private static bool CheckSerializable(RuntimeType type); // 0x0037ED0C-0x0037ED40
		private static MemberInfo[] InternalGetSerializableMembers(RuntimeType type); // 0x0037ED40-0x0037F788
		private static bool GetParentTypes(RuntimeType parentType, out RuntimeType[] parentTypes, out int parentTypeCount); // 0x0037F788-0x0037FCB8
		public static MemberInfo[] GetSerializableMembers(Type type, StreamingContext context); // 0x0037FCB8-0x0037FFEC
		public static object GetUninitializedObject(Type type); // 0x0037FFF4-0x00380264
		private static object nativeGetUninitializedObject(RuntimeType type); // 0x00380264-0x0038026C
		private static bool GetEnableUnsafeTypeForwarders(); // 0x0038026C-0x00380274
		internal static bool UnsafeTypeForwardersIsEnabled(); // 0x00380274-0x003803A8
		internal static void SerializationSetValue(MemberInfo fi, object target, object value); // 0x003803A8-0x00380624
		public static object PopulateObjectMembers(object obj, MemberInfo[] members, object[] data); // 0x00380624-0x00380A14
		public static object[] GetObjectData(object obj, MemberInfo[] members); // 0x00380A14-0x00380EFC
		public static Type GetTypeFromAssembly(Assembly assem, string name); // 0x00380EFC-0x00380FF8
		internal static Assembly LoadAssemblyFromString(string assemblyName); // 0x00380FF8-0x00381000
		internal static Assembly LoadAssemblyFromStringNoThrow(string assemblyName); // 0x00381000-0x00381110
		internal static string GetClrAssemblyName(Type type, out bool hasTypeForwardedFrom); // 0x00381110-0x003813AC
		internal static string GetClrTypeFullName(Type type); // 0x003813AC-0x0038147C
		private static string GetClrTypeFullNameForArray(Type type); // 0x0038147C-0x003816E4
		private static string GetClrTypeFullNameForNonArrayTypes(Type type); // 0x003816E4-0x00381A64
	}

	internal sealed class SurrogateForCyclicalReference : ISerializationSurrogate // TypeDefIndex: 935
	{
		// Fields
		private ISerializationSurrogate innerSurrogate; // 0x08
	
		// Methods
		public void GetObjectData(object obj, SerializationInfo info, StreamingContext context); // 0x004086D8-0x004087E4
		public object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector); // 0x004087E4-0x004088FC
	}

	[ComVisible] // 0x0013E264-0x0013E278
	public interface IDeserializationCallback // TypeDefIndex: 936
	{
		// Methods
		void OnDeserialization(object sender);
	}

	[ComVisible] // 0x0013E278-0x0013E28C
	public interface IFormatter // TypeDefIndex: 937
	{
	}

	[CLSCompliant] // 0x0013E28C-0x0013E2C4
	[ComVisible] // 0x0013E28C-0x0013E2C4
	public interface IFormatterConverter // TypeDefIndex: 938
	{
		// Methods
		object Convert(object value, Type type);
		bool ToBoolean(object value);
		int ToInt32(object value);
		long ToInt64(object value);
		float ToSingle(object value);
		string ToString(object value);
	}

	[ComVisible] // 0x0013E2C4-0x0013E2D8
	public interface IObjectReference // TypeDefIndex: 939
	{
		// Methods
		object GetRealObject(StreamingContext context);
	}

	[ComVisible] // 0x0013E2D8-0x0013E2EC
	public interface ISerializable // TypeDefIndex: 940
	{
		// Methods
		void GetObjectData(SerializationInfo info, StreamingContext context);
	}

	[ComVisible] // 0x0013E2EC-0x0013E300
	public interface ISerializationSurrogate // TypeDefIndex: 941
	{
		// Methods
		void GetObjectData(object obj, SerializationInfo info, StreamingContext context);
		object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector);
	}

	[ComVisible] // 0x0013E300-0x0013E314
	public interface ISurrogateSelector // TypeDefIndex: 942
	{
		// Methods
		ISerializationSurrogate GetSurrogate(Type type, StreamingContext context, out ISurrogateSelector selector);
	}

	[Serializable]
	internal class MemberHolder // TypeDefIndex: 943
	{
		// Fields
		internal Type memberType; // 0x08
		internal StreamingContext context; // 0x0C
	
		// Constructors
		internal MemberHolder(Type type, StreamingContext ctx); // 0x003FB608-0x003FB638
	
		// Methods
		public override int GetHashCode(); // 0x003FB638-0x003FB66C
		public override bool Equals(object obj); // 0x003FB66C-0x003FB7DC
	}

	[Serializable]
	[ComVisible] // 0x0013E314-0x0013E328
	public class ObjectIDGenerator // TypeDefIndex: 944
	{
		// Fields
		internal int m_currentCount; // 0x08
		internal int m_currentSize; // 0x0C
		internal long[] m_ids; // 0x10
		internal object[] m_objs; // 0x14
		private static readonly int[] sizes; // 0x00
	
		// Constructors
		public ObjectIDGenerator(); // 0x003FD79C-0x003FD8B0
		static ObjectIDGenerator(); // 0x003FE1FC-0x003FE294
	
		// Methods
		private int FindElement(object obj, out bool found); // 0x003FD8B0-0x003FD9E0
		public virtual long GetId(object obj, out bool firstTime); // 0x003FD9E0-0x003FDC30
		public virtual long HasId(object obj, out bool firstTime); // 0x003FE0A4-0x003FE1FC
		private void Rehash(); // 0x003FDC30-0x003FE0A4
	}

	[ComVisible] // 0x0013E328-0x0013E33C
	public class ObjectManager // TypeDefIndex: 945
	{
		// Fields
		private DeserializationEventHandler m_onDeserializationHandler; // 0x08
		private SerializationEventHandler m_onDeserializedHandler; // 0x0C
		internal ObjectHolder[] m_objects; // 0x10
		internal object m_topObject; // 0x14
		internal ObjectHolderList m_specialFixupObjects; // 0x18
		internal long m_fixupCount; // 0x20
		internal ISurrogateSelector m_selector; // 0x28
		internal StreamingContext m_context; // 0x2C
	
		// Properties
		internal object TopObject { get; set; } // 0x003FC6AC-0x003FC6B4 0x003FE328-0x003FE330
		internal ObjectHolderList SpecialFixupObjects { get; } // 0x003FE330-0x003FE3B0 
	
		// Constructors
		internal ObjectManager(ISurrogateSelector selector, StreamingContext context, bool checkSecurity, bool isCrossAppDomain); // 0x003FE294-0x003FE320
		static ObjectManager(); // 0x003FE3B0-0x003FE3B4
	
		// Methods
		private bool CanCallGetType(object obj); // 0x003FE320-0x003FE328
		internal ObjectHolder FindObjectHolder(long objectID); // 0x003FE3B4-0x003FE460
		internal ObjectHolder FindOrCreateObjectHolder(long objectID); // 0x003FC074-0x003FC144
		private void AddObjectHolder(ObjectHolder holder); // 0x003FE460-0x003FE654
		private bool GetCompletionInfo(FixupHolder fixup, out ObjectHolder holder, out object member, bool bThrowIfMissing); // 0x003FE654-0x003FEAA8
		private void FixupSpecialObject(ObjectHolder holder); // 0x003FEAA8-0x003FEED8
		private bool ResolveObjectReference(ObjectHolder holder); // 0x003FFC40-0x004000A0
		private bool DoValueTypeFixup(FieldInfo memberToFix, ObjectHolder holder, object value); // 0x003FF238-0x003FFB34
		internal void CompleteObject(ObjectHolder holder, bool bObjectFullyComplete); // 0x003FC6B4-0x003FD2D0
		private void DoNewlyRegisteredObjectFixups(ObjectHolder holder); // 0x003FFB34-0x003FFC40
		public virtual object GetObject(long objectID); // 0x004001E0-0x00400310
		internal void RegisterString(string obj, long objectID, SerializationInfo info, long idOfContainingObj, MemberInfo member); // 0x00400310-0x00400468
		public void RegisterObject(object obj, long objectID, SerializationInfo info, long idOfContainingObj, MemberInfo member, int[] arrayIndex); // 0x00400468-0x00400C90
		internal void CompleteISerializableObject(object obj, SerializationInfo info, StreamingContext context); // 0x003FEED8-0x003FF238
		internal static RuntimeConstructorInfo GetConstructor(RuntimeType t); // 0x00400C90-0x00400E08
		public virtual void DoFixups(); // 0x00401078-0x004014A4
		private void RegisterFixup(FixupHolder fixup, long objectToBeFixed, long objectRequired); // 0x004014A4-0x00401614
		public virtual void RecordFixup(long objectToBeFixed, MemberInfo member, long objectRequired); // 0x00401614-0x0040191C
		public virtual void RecordDelayedFixup(long objectToBeFixed, string memberName, long objectRequired); // 0x0040191C-0x00401AD4
		public virtual void RecordArrayElementFixup(long arrayToBeFixed, int[] indices, long objectRequired); // 0x00401AD4-0x00401C8C
		public virtual void RaiseDeserializationEvent(); // 0x00401C8C-0x00401CC8
		internal virtual void AddOnDeserialization(DeserializationEventHandler handler); // 0x0040214C-0x00402238
		internal virtual void AddOnDeserialized(object obj); // 0x00402238-0x00402308
		internal virtual void RaiseOnDeserializedEvent(object obj); // 0x00402A98-0x00402B74
		public void RaiseOnDeserializingEvent(object obj); // 0x00402F48-0x00403024
	}

	internal sealed class ObjectHolder // TypeDefIndex: 946
	{
		// Fields
		private object m_object; // 0x08
		internal long m_id; // 0x10
		private int m_missingElementsRemaining; // 0x18
		private int m_missingDecendents; // 0x1C
		internal SerializationInfo m_serInfo; // 0x20
		internal ISerializationSurrogate m_surrogate; // 0x24
		internal FixupHolderList m_missingElements; // 0x28
		internal LongList m_dependentObjects; // 0x2C
		internal ObjectHolder m_next; // 0x30
		internal int m_flags; // 0x34
		private bool m_markForFixupWhenAvailable; // 0x38
		private ValueTypeFixupInfo m_valueFixup; // 0x3C
		private TypeLoadExceptionHolder m_typeLoad; // 0x40
		private bool m_reachable; // 0x44
	
		// Properties
		internal bool IsIncompleteObjectReference { get; set; } // 0x003FC4D0-0x003FC4DC 0x003FC4DC-0x003FC4F4
		internal bool RequiresDelayedFixup { get; } // 0x003FC4F4-0x003FC504 
		internal bool RequiresValueTypeFixup { get; } // 0x003FBE80-0x003FBE8C 
		internal bool ValueTypeFixupPerformed { get; set; } // 0x003FC504-0x003FC548 0x003FC548-0x003FC55C
		internal bool HasISerializable { get; } // 0x003FC55C-0x003FC568 
		internal bool HasSurrogate { get; } // 0x003FC568-0x003FC574 
		internal bool CanSurrogatedObjectValueChange { get; } // 0x003FC574-0x003FC638 
		internal bool CanObjectValueChange { get; } // 0x003FC638-0x003FC660 
		internal int DirectlyDependentObjects { get; } // 0x003FC660-0x003FC668 
		internal int TotalDependentObjects { get; } // 0x003FC668-0x003FC674 
		internal bool Reachable { get; set; } // 0x003FC674-0x003FC67C 0x003FC67C-0x003FC684
		internal bool TypeLoadExceptionReachable { get; } // 0x003FC684-0x003FC694 
		internal TypeLoadExceptionHolder TypeLoadException { get; set; } // 0x003FC694-0x003FC69C 0x003FC69C-0x003FC6A4
		internal object ObjectValue { get; } // 0x003FC6A4-0x003FC6AC 
		internal SerializationInfo SerializationInfo { get; set; } // 0x003FD2D0-0x003FD2D8 0x003FD2D8-0x003FD2E0
		internal ISerializationSurrogate Surrogate { get; } // 0x003FD2E0-0x003FD2E8 
		internal LongList DependentObjects { get; set; } // 0x003FD2E8-0x003FD2F0 0x003FD2F0-0x003FD2F8
		internal bool RequiresSerInfoFixup { get; set; } // 0x003FD2F8-0x003FD318 0x003FD318-0x003FD330
		internal ValueTypeFixupInfo ValueFixup { get; } // 0x003FD330-0x003FD338 
		internal bool CompletelyFixed { get; } // 0x003FD338-0x003FD360 
		internal long ContainerID { get; } // 0x003FC05C-0x003FC074 
	
		// Constructors
		internal ObjectHolder(long objID); // 0x003FB7DC-0x003FB814
		internal ObjectHolder(object obj, long objID, SerializationInfo info, ISerializationSurrogate surrogate, long idOfContainingObj, FieldInfo field, int[] arrayIndex); // 0x003FB914-0x003FBB40
		internal ObjectHolder(string obj, long objID, SerializationInfo info, ISerializationSurrogate surrogate, long idOfContainingObj, FieldInfo field, int[] arrayIndex); // 0x003FB814-0x003FB914
	
		// Methods
		private void IncrementDescendentFixups(int amount); // 0x003FBE4C-0x003FBE5C
		internal void DecrementFixupsRemaining(ObjectManager manager); // 0x003FBE5C-0x003FBE80
		internal void RemoveDependency(long id); // 0x003FBF44-0x003FBF84
		internal void AddFixup(FixupHolder fixup, ObjectManager manager); // 0x003FBF84-0x003FC05C
		private void UpdateDescendentDependencyChain(int amount, ObjectManager manager); // 0x003FBE8C-0x003FBF44
		internal void AddDependency(long dependentObject); // 0x003FC144-0x003FC1F4
		internal void UpdateData(object obj, SerializationInfo info, ISerializationSurrogate surrogate, long idOfContainer, FieldInfo field, int[] arrayIndex, ObjectManager manager); // 0x003FC1F4-0x003FC3F0
		internal void MarkForCompletionWhenAvailable(); // 0x003FC4C4-0x003FC4D0
		internal void SetFlags(); // 0x003FBD7C-0x003FBE4C
		internal void SetObjectValue(object obj, ObjectManager manager); // 0x003FC3F0-0x003FC4C4
	}

	[Serializable]
	internal class FixupHolder // TypeDefIndex: 947
	{
		// Fields
		internal long m_id; // 0x08
		internal object m_fixupInfo; // 0x10
		internal int m_fixupType; // 0x14
	
		// Constructors
		internal FixupHolder(long id, object fixupInfo, int fixupType); // 0x0037E044-0x0037E07C
	}

	[Serializable]
	internal class FixupHolderList // TypeDefIndex: 948
	{
		// Fields
		internal FixupHolder[] m_values; // 0x08
		internal int m_count; // 0x0C
	
		// Constructors
		internal FixupHolderList(); // 0x0037E07C-0x0037E084
		internal FixupHolderList(int startingSize); // 0x0037E084-0x0037E104
	
		// Methods
		internal virtual void Add(FixupHolder fixup); // 0x0037E104-0x0037E1B4
		private void EnlargeArray(); // 0x0037E1B4-0x0037E258
	}

	[Serializable]
	internal class LongList // TypeDefIndex: 949
	{
		// Fields
		private long[] m_values; // 0x08
		private int m_count; // 0x0C
		private int m_totalItems; // 0x10
		private int m_currentItem; // 0x14
	
		// Properties
		internal int Count { get; } // 0x003FB43C-0x003FB444 
		internal long Current { get; } // 0x003FB4D0-0x003FB518 
	
		// Constructors
		internal LongList(); // 0x003FB278-0x003FB280
		internal LongList(int startingSize); // 0x003FB280-0x003FB304
	
		// Methods
		internal void Add(long value); // 0x003FB304-0x003FB398
		internal void StartEnumeration(); // 0x003FB444-0x003FB450
		internal bool MoveNext(); // 0x003FB450-0x003FB4D0
		internal bool RemoveElement(long value); // 0x003FB518-0x003FB608
		private void EnlargeArray(); // 0x003FB398-0x003FB43C
	}

	internal class ObjectHolderList // TypeDefIndex: 950
	{
		// Fields
		internal ObjectHolder[] m_values; // 0x08
		internal int m_count; // 0x0C
	
		// Properties
		internal int Version { get; } // 0x003FD600-0x003FD608 
		internal int Count { get; } // 0x003FD608-0x003FD610 
	
		// Constructors
		internal ObjectHolderList(); // 0x003FD368-0x003FD370
		internal ObjectHolderList(int startingSize); // 0x003FD370-0x003FD3F0
	
		// Methods
		internal virtual void Add(ObjectHolder value); // 0x003FD3F0-0x003FD4A0
		internal ObjectHolderListEnumerator GetFixupEnumerator(); // 0x003FD544-0x003FD5B8
		private void EnlargeArray(); // 0x003FD4A0-0x003FD544
	}

	internal class ObjectHolderListEnumerator // TypeDefIndex: 951
	{
		// Fields
		private bool m_isFixupEnumerator; // 0x08
		private ObjectHolderList m_list; // 0x0C
		private int m_startingVersion; // 0x10
		private int m_currPos; // 0x14
	
		// Properties
		internal ObjectHolder Current { get; } // 0x003FD73C-0x003FD79C 
	
		// Constructors
		internal ObjectHolderListEnumerator(ObjectHolderList list, bool isFixupEnumerator); // 0x003FD5B8-0x003FD600
	
		// Methods
		internal bool MoveNext(); // 0x003FD610-0x003FD73C
	}

	internal class TypeLoadExceptionHolder // TypeDefIndex: 952
	{
		// Fields
		private string m_typeName; // 0x08
	
		// Properties
		internal string TypeName { get; } // 0x004001D8-0x004001E0 
	
		// Constructors
		internal TypeLoadExceptionHolder(string typeName); // 0x004088FC-0x0040891C
	}

	public sealed class SafeSerializationEventArgs : EventArgs // TypeDefIndex: 953
	{
		// Fields
		private StreamingContext m_streamingContext; // 0x08
		private List<object> m_serializedStates; // 0x10
	
		// Properties
		internal IList<object> SerializedStates { get; } // 0x004035A4-0x004035AC 
	
		// Constructors
		internal SafeSerializationEventArgs(StreamingContext streamingContext); // 0x004034DC-0x004035A4
	}

	public interface ISafeSerializationData // TypeDefIndex: 954
	{
		// Methods
		void CompleteDeserialization(object deserialized);
	}

	[Serializable]
	internal sealed class SafeSerializationManager : IObjectReference, ISerializable // TypeDefIndex: 955
	{
		// Fields
		private IList<object> m_serializedStates; // 0x08
		private SerializationInfo m_savedSerializationInfo; // 0x0C
		private object m_realObject; // 0x10
		private RuntimeType m_realType; // 0x14
		[CompilerGenerated] // 0x00143138-0x00143148
		private EventHandler<SafeSerializationEventArgs> SerializeObjectState; // 0x18
	
		// Properties
		internal bool IsActive { get; } // 0x00403B98-0x00403BA8 
	
		// Constructors
		internal SafeSerializationManager(); // 0x004035AC-0x004035B4
		private SafeSerializationManager(SerializationInfo info, StreamingContext context); // 0x004035B4-0x004037C4
	
		// Methods
		internal void CompleteSerialization(object serializedObject, SerializationInfo info, StreamingContext context); // 0x00403BA8-0x00403D58
		internal void CompleteDeserialization(object deserializedObject); // 0x00404068-0x004044E8
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x004044E8-0x004045C0
		object IObjectReference.GetRealObject(StreamingContext context); // 0x004045C0-0x0040492C
		[OnDeserialized] // 0x001459E8-0x001459F8
		private void OnDeserialized(StreamingContext context); // 0x0040492C-0x00404A08
	}

	[AttributeUsage] // 0x0013E33C-0x0013E388
	[ComVisible] // 0x0013E33C-0x0013E388
	public sealed class OptionalFieldAttribute : Attribute // TypeDefIndex: 956
	{
		// Fields
		private int versionAdded; // 0x08
	
		// Properties
		public int VersionAdded { set; } // 0x00403420-0x004034DC
	
		// Constructors
		public OptionalFieldAttribute(); // 0x00403410-0x00403420
	}

	[AttributeUsage] // 0x0013E388-0x0013E3D4
	[ComVisible] // 0x0013E388-0x0013E3D4
	public sealed class OnSerializingAttribute : Attribute // TypeDefIndex: 957
	{
		// Constructors
		public OnSerializingAttribute(); // 0x00403408-0x00403410
	}

	[AttributeUsage] // 0x0013E3D4-0x0013E420
	[ComVisible] // 0x0013E3D4-0x0013E420
	public sealed class OnSerializedAttribute : Attribute // TypeDefIndex: 958
	{
	}

	[AttributeUsage] // 0x0013E420-0x0013E46C
	[ComVisible] // 0x0013E420-0x0013E46C
	public sealed class OnDeserializingAttribute : Attribute // TypeDefIndex: 959
	{
		// Constructors
		public OnDeserializingAttribute(); // 0x00403400-0x00403408
	}

	[AttributeUsage] // 0x0013E46C-0x0013E4B8
	[ComVisible] // 0x0013E46C-0x0013E4B8
	public sealed class OnDeserializedAttribute : Attribute // TypeDefIndex: 960
	{
		// Constructors
		public OnDeserializedAttribute(); // 0x004033F8-0x00403400
	}

	[Serializable]
	[ComVisible] // 0x0013E4B8-0x0013E4CC
	public abstract class SerializationBinder // TypeDefIndex: 961
	{
		// Constructors
		protected SerializationBinder(); // 0x00404A18-0x00404A84
	
		// Methods
		public virtual void BindToName(Type serializedType, out string assemblyName, out string typeName); // 0x00404A08-0x00404A18
		public abstract Type BindToType(string assemblyName, string typeName);
	}

	internal class SerializationEvents // TypeDefIndex: 962
	{
		// Fields
		private List<MethodInfo> m_OnSerializingMethods; // 0x08
		private List<MethodInfo> m_OnSerializedMethods; // 0x0C
		private List<MethodInfo> m_OnDeserializingMethods; // 0x10
		private List<MethodInfo> m_OnDeserializedMethods; // 0x14
	
		// Properties
		internal bool HasOnSerializingEvents { get; } // 0x00405074-0x00405098 
	
		// Constructors
		internal SerializationEvents(Type t); // 0x00404F48-0x00405074
	
		// Methods
		private List<MethodInfo> GetMethodsWithAttribute(Type attribute, Type t); // 0x00404C88-0x00404F48
		internal void InvokeOnSerializing(object obj, StreamingContext context); // 0x00405098-0x0040546C
		internal void InvokeOnDeserializing(object obj, StreamingContext context); // 0x00403024-0x004033F8
		internal void InvokeOnDeserialized(object obj, StreamingContext context); // 0x00402B74-0x00402F48
		internal SerializationEventHandler AddOnSerialized(object obj, SerializationEventHandler handler); // 0x0040546C-0x00405800
		internal SerializationEventHandler AddOnDeserialized(object obj, SerializationEventHandler handler); // 0x00402704-0x00402A98
	}

	internal static class SerializationEventsCache // TypeDefIndex: 963
	{
		// Fields
		private static Hashtable cache; // 0x00
	
		// Constructors
		static SerializationEventsCache(); // 0x00405800-0x00405880
	
		// Methods
		internal static SerializationEvents GetSerializationEventsForType(Type t); // 0x00402308-0x00402704
	}

	[Serializable]
	[ComVisible] // 0x0013E4CC-0x0013E4E0
	public class SerializationException : SystemException // TypeDefIndex: 964
	{
		// Fields
		private static string _nullMessage; // 0x00
	
		// Constructors
		public SerializationException(); // 0x00405880-0x00405930
		public SerializationException(string message); // 0x003FB24C-0x003FB278
		public SerializationException(string message, Exception innerException); // 0x00400E08-0x00400E34
		protected SerializationException(SerializationInfo info, StreamingContext context); // 0x00405930-0x00405950
		static SerializationException(); // 0x00405950-0x004059C8
	}

	internal sealed class SerializationFieldInfo : FieldInfo // TypeDefIndex: 965
	{
		// Fields
		private RuntimeFieldInfo m_field; // 0x08
		private string m_serializationName; // 0x0C
	
		// Properties
		public override Module Module { get; } // 0x004059C8-0x004059FC 
		public override int MetadataToken { get; } // 0x004059FC-0x00405A30 
		public override string Name { get; } // 0x00405ADC-0x00405AE4 
		public override Type DeclaringType { get; } // 0x00405AE4-0x00405B18 
		public override Type ReflectedType { get; } // 0x00405B18-0x00405B4C 
		public override Type FieldType { get; } // 0x00405C10-0x00405C44 
		internal RuntimeFieldInfo FieldInfo { get; } // 0x004000B0-0x004000B8 
		public override RuntimeFieldHandle FieldHandle { get; } // 0x00405F8C-0x00405FC0 
		public override FieldAttributes Attributes { get; } // 0x00405FC0-0x00405FF4 
	
		// Constructors
		internal SerializationFieldInfo(RuntimeFieldInfo field, string namePrefix); // 0x00405A30-0x00405ADC
	
		// Methods
		public override object[] GetCustomAttributes(bool inherit); // 0x00405B4C-0x00405B88
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00405B88-0x00405BCC
		public override bool IsDefined(Type attributeType, bool inherit); // 0x00405BCC-0x00405C10
		public override object GetValue(object obj); // 0x00405C44-0x00405C80
		internal object InternalGetValue(object obj); // 0x00405C80-0x00405DB0
		public override void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, CultureInfo culture); // 0x00405DB0-0x00405E18
		internal void InternalSetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, CultureInfo culture); // 0x00405E18-0x00405F8C
	}

	[ComVisible] // 0x0013E4E0-0x0013E4F4
	public sealed class SerializationInfo // TypeDefIndex: 966
	{
		// Fields
		internal string[] m_members; // 0x08
		internal object[] m_data; // 0x0C
		internal Type[] m_types; // 0x10
		private Dictionary<string, int> m_nameToIndex; // 0x14
		internal int m_currMember; // 0x18
		internal IFormatterConverter m_converter; // 0x1C
		private string m_fullTypeName; // 0x20
		private string m_assemName; // 0x24
		private Type objectType; // 0x28
		private bool isFullTypeNameSetExplicit; // 0x2C
		private bool isAssemblyNameSetExplicit; // 0x2D
		private bool requireSameTokenInPartialTrust; // 0x2E
	
		// Properties
		public string FullTypeName { get; } // 0x00406234-0x0040623C 
		public string AssemblyName { get; } // 0x0040623C-0x00406244 
		public int MemberCount { get; } // 0x00406490-0x00406498 
		public Type ObjectType { get; } // 0x00406244-0x0040624C 
		public bool IsFullTypeNameSetExplicit { get; } // 0x00406498-0x004064A0 
		public bool IsAssemblyNameSetExplicit { get; } // 0x004064A0-0x004064A8 
	
		// Constructors
		[CLSCompliant] // 0x001459F8-0x00145A0C
		public SerializationInfo(Type type, IFormatterConverter converter); // 0x00405FF4-0x00406010
		[CLSCompliant] // 0x00145A0C-0x00145A20
		public SerializationInfo(Type type, IFormatterConverter converter, bool requireSameTokenInPartialTrust); // 0x00406010-0x00406234
	
		// Methods
		public void SetType(Type type); // 0x00403E78-0x00404068
		private static bool Compare(byte[] a, byte[] b); // 0x00406250-0x00406310
		internal static void DemandForUnsafeAssemblyNameAssignments(string originalAssemblyName, string newAssemblyName); // 0x0040624C-0x00406250
		internal static bool IsAssemblyNameAssignmentSafe(string originalAssemblyName, string newAssemblyName); // 0x00406310-0x00406490
		public SerializationInfoEnumerator GetEnumerator(); // 0x004064A8-0x0040654C
		private void ExpandArrays(); // 0x00406598-0x00406698
		public void AddValue(string name, object value, Type type); // 0x00403D58-0x00403E78
		public void AddValue(string name, object value); // 0x00406938-0x00406A18
		public void AddValue(string name, bool value); // 0x00406A18-0x00406AF0
		public void AddValue(string name, char value); // 0x00406AF0-0x00406BC8
		public void AddValue(string name, byte value); // 0x00406BC8-0x00406CA0
		public void AddValue(string name, int value); // 0x00406CA0-0x00406D78
		public void AddValue(string name, long value); // 0x00406D78-0x00406E58
		[CLSCompliant] // 0x00145A20-0x00145A34
		public void AddValue(string name, ulong value); // 0x00406E58-0x00406F38
		public void AddValue(string name, float value); // 0x00406F38-0x00407018
		public void AddValue(string name, DateTime value); // 0x00407018-0x004070F8
		internal void AddValueInternal(string name, object value, Type type); // 0x00406698-0x00406938
		internal void UpdateValue(string name, object value, Type type); // 0x004000B8-0x004001D8
		private int FindElement(string name); // 0x004070F8-0x004071FC
		private object GetElement(string name, out Type foundType); // 0x004071FC-0x00407380
		[ComVisible] // 0x00145A34-0x00145A48
		private object GetElementNoThrow(string name, out Type foundType); // 0x00407380-0x00407424
		public object GetValue(string name, Type type); // 0x00403938-0x00403B98
		[ComVisible] // 0x00145A48-0x00145A5C
		internal object GetValueNoThrow(string name, Type type); // 0x004037C4-0x00403924
		public bool GetBoolean(string name); // 0x00407424-0x004075A4
		public int GetInt32(string name); // 0x004075A4-0x0040771C
		public long GetInt64(string name); // 0x0040771C-0x00407894
		public float GetSingle(string name); // 0x00407894-0x00407A14
		public string GetString(string name); // 0x00407A14-0x00407BF8
	}

	[ComVisible] // 0x0013E4F4-0x0013E508
	public struct SerializationEntry // TypeDefIndex: 967
	{
		// Fields
		private Type m_type; // 0x00
		private object m_value; // 0x04
		private string m_name; // 0x08
	
		// Properties
		public object Value { get; } // 0x00404A84-0x00404A94 
		public string Name { get; } // 0x00404A94-0x00404A9C 
	
		// Constructors
		internal SerializationEntry(string entryName, object entryValue, Type entryType); // 0x00404A9C-0x00404BC8
	}

	[ComVisible] // 0x0013E508-0x0013E51C
	public sealed class SerializationInfoEnumerator : IEnumerator // TypeDefIndex: 968
	{
		// Fields
		private string[] m_members; // 0x08
		private object[] m_data; // 0x0C
		private Type[] m_types; // 0x10
		private int m_numItems; // 0x14
		private int m_currItem; // 0x18
		private bool m_current; // 0x1C
	
		// Properties
		object IEnumerator.Current { get; } // 0x00407C20-0x00407DB8 
		public SerializationEntry Current { get; } // 0x00407DB8-0x00407F38 
		public string Name { get; } // 0x00407F4C-0x00408044 
		public object Value { get; } // 0x00408044-0x0040813C 
		public Type ObjectType { get; } // 0x0040813C-0x00408234 
	
		// Constructors
		internal SerializationInfoEnumerator(string[] members, object[] info, Type[] types, int numItems); // 0x0040654C-0x00406598
	
		// Methods
		public bool MoveNext(); // 0x00407BF8-0x00407C20
		public void Reset(); // 0x00407F38-0x00407F4C
	}

	public sealed class SerializationObjectManager // TypeDefIndex: 969
	{
		// Fields
		private Hashtable m_objectSeenTable; // 0x08
		private SerializationEventHandler m_onSerializedHandler; // 0x0C
		private StreamingContext m_context; // 0x10
	
		// Constructors
		public SerializationObjectManager(StreamingContext context); // 0x00408234-0x004082D8
	
		// Methods
		public void RegisterObject(object obj); // 0x004082D8-0x00408454
		public void RaiseOnSerializedEvent(); // 0x00408524-0x004085E0
		private void AddOnSerialized(object obj); // 0x00408454-0x00408524
	}

	[Serializable]
	[ComVisible] // 0x0013E51C-0x0013E530
	public struct StreamingContext // TypeDefIndex: 970
	{
		// Fields
		internal object m_additionalContext; // 0x00
		internal StreamingContextStates m_state; // 0x04
	
		// Properties
		public StreamingContextStates State { get; } // 0x004086D0-0x004086D8 
	
		// Constructors
		public StreamingContext(StreamingContextStates state); // 0x004085E0-0x004085F0
		public StreamingContext(StreamingContextStates state, object additional); // 0x004085F0-0x004086C0
	
		// Methods
		public override bool Equals(object obj); // 0x004086C0-0x004086C8
		public override int GetHashCode(); // 0x004086C8-0x004086D0
	}

	[Serializable]
	[ComVisible] // 0x0013E530-0x0013E564
	[Flags] // 0x0013E530-0x0013E564
	public enum StreamingContextStates // TypeDefIndex: 971
	{
		CrossProcess = 1,
		CrossMachine = 2,
		File = 4,
		Persistence = 8,
		Remoting = 16,
		Other = 32,
		Clone = 64,
		CrossAppDomain = 128,
		All = 255
	}

	internal class ValueTypeFixupInfo // TypeDefIndex: 972
	{
		// Fields
		private long m_containerID; // 0x08
		private FieldInfo m_parentField; // 0x10
		private int[] m_parentIndex; // 0x14
	
		// Properties
		public long ContainerID { get; } // 0x003FD360-0x003FD368 
		public FieldInfo ParentField { get; } // 0x004000A0-0x004000A8 
		public int[] ParentIndex { get; } // 0x004000A8-0x004000B0 
	
		// Constructors
		public ValueTypeFixupInfo(long containerID, FieldInfo member, int[] parentIndex); // 0x003FBB40-0x003FBD7C
	}
}

namespace System.Runtime.Serialization.Formatters
{
	[Serializable]
	[ComVisible] // 0x0013E564-0x0013E578
	public enum FormatterTypeStyle // TypeDefIndex: 973
	{
		TypesWhenNeeded = 0,
		TypesAlways = 1,
		XsdString = 2
	}

	[Serializable]
	[ComVisible] // 0x0013E578-0x0013E58C
	public enum FormatterAssemblyStyle // TypeDefIndex: 974
	{
		Simple = 0,
		Full = 1
	}

	[ComVisible] // 0x0013E58C-0x0013E5A0
	public enum TypeFilterLevel // TypeDefIndex: 975
	{
		Low = 2,
		Full = 3
	}
}

namespace System.Runtime.Serialization.Formatters.Binary
{
	internal static class BinaryConverter // TypeDefIndex: 976
	{
		// Methods
		internal static BinaryTypeEnum GetBinaryTypeInfo(Type type, WriteObjectInfo objectInfo, string typeName, ObjectWriter objectWriter, out object typeInformation, out int assemId); // 0x00382E74-0x003832A0
		internal static BinaryTypeEnum GetParserBinaryTypeInfo(Type type, out object typeInformation); // 0x00383818-0x00383AC8
		internal static void WriteTypeInfo(BinaryTypeEnum binaryTypeEnum, object typeInformation, int assemId, __BinaryWriter sout); // 0x0038204C-0x003822DC
		internal static object ReadTypeInfo(BinaryTypeEnum binaryTypeEnum, __BinaryParser input, out int assemId); // 0x003828D8-0x00382B6C
		internal static void TypeFromInfo(BinaryTypeEnum binaryTypeEnum, object typeInformation, ObjectReader objectReader, BinaryAssemblyInfo assemblyInfo, out InternalPrimitiveTypeE primitiveTypeEnum, out string typeString, out Type type, out bool isVariant); // 0x00383C7C-0x003840F0
	}

	internal static class IOUtil // TypeDefIndex: 977
	{
		// Methods
		internal static bool FlagTest(MessageEnum flag, MessageEnum target); // 0x00386264-0x00386278
		internal static void WriteStringWithCode(string value, __BinaryWriter sout); // 0x003861F4-0x00386264
		internal static void WriteWithCode(Type type, object value, __BinaryWriter sout); // 0x00386278-0x00386458
	}

	internal interface IStreamable // TypeDefIndex: 978
	{
	}

	internal sealed class BinaryAssemblyInfo // TypeDefIndex: 979
	{
		// Fields
		internal string assemblyString; // 0x08
		private Assembly assembly; // 0x0C
	
		// Constructors
		internal BinaryAssemblyInfo(string assemblyString); // 0x00382CC8-0x00382CE8
		internal BinaryAssemblyInfo(string assemblyString, Assembly assembly); // 0x00382CE8-0x00382D10
	
		// Methods
		internal Assembly GetAssembly(); // 0x00382D10-0x00382E74
	}

	internal sealed class SerializationHeaderRecord : IStreamable // TypeDefIndex: 980
	{
		// Fields
		internal int binaryFormatterMajorVersion; // 0x08
		internal int binaryFormatterMinorVersion; // 0x0C
		internal BinaryHeaderEnum binaryHeaderEnum; // 0x10
		internal int topId; // 0x14
		internal int headerId; // 0x18
		internal int majorVersion; // 0x1C
		internal int minorVersion; // 0x20
	
		// Constructors
		internal SerializationHeaderRecord(); // 0x00397BB4-0x00397BC4
		internal SerializationHeaderRecord(BinaryHeaderEnum binaryHeaderEnum, int topId, int headerId, int majorVersion, int minorVersion); // 0x00397BC4-0x00397C10
	
		// Methods
		public void Write(__BinaryWriter sout); // 0x00397C10-0x00397D04
		private static int GetInt32(byte[] buffer, int index); // 0x00397D04-0x00397DD0
		public void Read(__BinaryParser input); // 0x00397DD0-0x00397FDC
		public void Dump(); // 0x00398018-0x0039801C
	}

	internal sealed class BinaryAssembly : IStreamable // TypeDefIndex: 981
	{
		// Fields
		internal int assemId; // 0x08
		internal string assemblyString; // 0x0C
	
		// Constructors
		internal BinaryAssembly(); // 0x00382B6C-0x00382B74
	
		// Methods
		internal void Set(int assemId, string assemblyString); // 0x00382B74-0x00382B80
		public void Write(__BinaryWriter sout); // 0x00382B80-0x00382C14
		public void Read(__BinaryParser input); // 0x00382C14-0x00382C90
		public void Dump(); // 0x00382CC4-0x00382CC8
	}

	internal sealed class BinaryCrossAppDomainAssembly : IStreamable // TypeDefIndex: 982
	{
		// Fields
		internal int assemId; // 0x08
		internal int assemblyIndex; // 0x0C
	
		// Constructors
		internal BinaryCrossAppDomainAssembly(); // 0x00384754-0x0038475C
	
		// Methods
		public void Read(__BinaryParser input); // 0x0038475C-0x003847D8
		public void Dump(); // 0x003847D8-0x003847DC
	}

	internal sealed class BinaryObject : IStreamable // TypeDefIndex: 983
	{
		// Fields
		internal int objectId; // 0x08
		internal int mapId; // 0x0C
	
		// Constructors
		internal BinaryObject(); // 0x003867A4-0x003867AC
	
		// Methods
		internal void Set(int objectId, int mapId); // 0x003867AC-0x003867B8
		public void Write(__BinaryWriter sout); // 0x003867B8-0x0038684C
		public void Read(__BinaryParser input); // 0x0038684C-0x003868C8
		public void Dump(); // 0x003868C8-0x003868CC
	}

	internal sealed class BinaryMethodCall // TypeDefIndex: 984
	{
		// Fields
		private string methodName; // 0x08
		private string typeName; // 0x0C
		private object[] args; // 0x10
		private object callContext; // 0x14
		private Type[] argTypes; // 0x18
		private bool bArgsPrimitive; // 0x1C
		private MessageEnum messageEnum; // 0x20
	
		// Constructors
		public BinaryMethodCall(); // 0x0038645C-0x0038646C
	
		// Methods
		internal void Write(__BinaryWriter sout); // 0x00385FAC-0x003861F4
		internal void Dump(); // 0x00386458-0x0038645C
	}

	internal sealed class BinaryMethodReturn : IStreamable // TypeDefIndex: 985
	{
		// Fields
		private object returnValue; // 0x08
		private object[] args; // 0x0C
		private object callContext; // 0x10
		private Type[] argTypes; // 0x14
		private bool bArgsPrimitive; // 0x18
		private MessageEnum messageEnum; // 0x1C
		private Type returnType; // 0x20
		private static object instanceOfVoid; // 0x00
	
		// Constructors
		static BinaryMethodReturn(); // 0x0038646C-0x00386544
		internal BinaryMethodReturn(); // 0x00386544-0x00386554
	
		// Methods
		public void Write(__BinaryWriter sout); // 0x00386554-0x003867A0
		public void Dump(); // 0x003867A0-0x003867A4
	}

	internal sealed class BinaryObjectString : IStreamable // TypeDefIndex: 986
	{
		// Fields
		internal int objectId; // 0x08
		internal string value; // 0x0C
	
		// Constructors
		internal BinaryObjectString(); // 0x003868CC-0x003868D4
	
		// Methods
		internal void Set(int objectId, string value); // 0x003868D4-0x003868E0
		public void Write(__BinaryWriter sout); // 0x003868E0-0x00386974
		public void Read(__BinaryParser input); // 0x00386974-0x003869F0
		public void Dump(); // 0x003869F0-0x003869F4
	}

	internal sealed class BinaryCrossAppDomainString : IStreamable // TypeDefIndex: 987
	{
		// Fields
		internal int objectId; // 0x08
		internal int value; // 0x0C
	
		// Constructors
		internal BinaryCrossAppDomainString(); // 0x00384838-0x00384840
	
		// Methods
		public void Read(__BinaryParser input); // 0x00384840-0x003848BC
		public void Dump(); // 0x003848BC-0x003848C0
	}

	internal sealed class BinaryCrossAppDomainMap : IStreamable // TypeDefIndex: 988
	{
		// Fields
		internal int crossAppDomainArrayIndex; // 0x08
	
		// Constructors
		internal BinaryCrossAppDomainMap(); // 0x003847DC-0x003847E4
	
		// Methods
		public void Read(__BinaryParser input); // 0x003847E4-0x00384834
		public void Dump(); // 0x00384834-0x00384838
	}

	internal sealed class MemberPrimitiveTyped : IStreamable // TypeDefIndex: 989
	{
		// Fields
		internal InternalPrimitiveTypeE primitiveTypeEnum; // 0x08
		internal object value; // 0x0C
	
		// Constructors
		internal MemberPrimitiveTyped(); // 0x0038A37C-0x0038A384
	
		// Methods
		internal void Set(InternalPrimitiveTypeE primitiveTypeEnum, object value); // 0x0038A384-0x0038A390
		public void Write(__BinaryWriter sout); // 0x0038A390-0x0038A424
		public void Read(__BinaryParser input); // 0x0038A424-0x0038A484
		public void Dump(); // 0x0038A96C-0x0038A970
	}

	internal sealed class BinaryObjectWithMap : IStreamable // TypeDefIndex: 990
	{
		// Fields
		internal BinaryHeaderEnum binaryHeaderEnum; // 0x08
		internal int objectId; // 0x0C
		internal string name; // 0x10
		internal int numMembers; // 0x14
		internal string[] memberNames; // 0x18
		internal int assemId; // 0x1C
	
		// Constructors
		internal BinaryObjectWithMap(); // 0x003869F4-0x003869FC
		internal BinaryObjectWithMap(BinaryHeaderEnum binaryHeaderEnum); // 0x003869FC-0x00386A1C
	
		// Methods
		internal void Set(int objectId, string name, int numMembers, string[] memberNames, int assemId); // 0x00386A1C-0x00386A4C
		public void Write(__BinaryWriter sout); // 0x00386A4C-0x00386BB8
		public void Read(__BinaryParser input); // 0x00386BB8-0x00386DAC
		public void Dump(); // 0x00386DAC-0x00386DB0
	}

	internal sealed class BinaryObjectWithMapTyped : IStreamable // TypeDefIndex: 991
	{
		// Fields
		internal BinaryHeaderEnum binaryHeaderEnum; // 0x08
		internal int objectId; // 0x0C
		internal string name; // 0x10
		internal int numMembers; // 0x14
		internal string[] memberNames; // 0x18
		internal BinaryTypeEnum[] binaryTypeEnumA; // 0x1C
		internal object[] typeInformationA; // 0x20
		internal int[] memberAssemIds; // 0x24
		internal int assemId; // 0x28
	
		// Constructors
		internal BinaryObjectWithMapTyped(); // 0x00386DB0-0x00386DB8
		internal BinaryObjectWithMapTyped(BinaryHeaderEnum binaryHeaderEnum); // 0x00386DB8-0x00386DD8
	
		// Methods
		internal void Set(int objectId, string name, int numMembers, string[] memberNames, BinaryTypeEnum[] binaryTypeEnumA, object[] typeInformationA, int[] memberAssemIds, int assemId); // 0x00386DD8-0x00386E14
		public void Write(__BinaryWriter sout); // 0x00386E14-0x003870DC
		public void Read(__BinaryParser input); // 0x003870DC-0x003875B0
	}

	internal sealed class BinaryArray : IStreamable // TypeDefIndex: 992
	{
		// Fields
		internal int objectId; // 0x08
		internal int rank; // 0x0C
		internal int[] lengthA; // 0x10
		internal int[] lowerBoundA; // 0x14
		internal BinaryTypeEnum binaryTypeEnum; // 0x18
		internal object typeInformation; // 0x1C
		internal int assemId; // 0x20
		private BinaryHeaderEnum binaryHeaderEnum; // 0x24
		internal BinaryArrayTypeEnum binaryArrayTypeEnum; // 0x28
	
		// Constructors
		internal BinaryArray(); // 0x00381B88-0x00381B90
		internal BinaryArray(BinaryHeaderEnum binaryHeaderEnum); // 0x00381B90-0x00381BB0
	
		// Methods
		internal void Set(int objectId, int rank, int[] lengthA, int[] lowerBoundA, BinaryTypeEnum binaryTypeEnum, object typeInformation, BinaryArrayTypeEnum binaryArrayTypeEnum, int assemId); // 0x00381BB0-0x00381C30
		public void Write(__BinaryWriter sout); // 0x00381C30-0x0038204C
		public void Read(__BinaryParser input); // 0x003822DC-0x00382870
	}

	internal sealed class MemberPrimitiveUnTyped : IStreamable // TypeDefIndex: 993
	{
		// Fields
		internal InternalPrimitiveTypeE typeInformation; // 0x08
		internal object value; // 0x0C
	
		// Constructors
		internal MemberPrimitiveUnTyped(); // 0x0038A970-0x0038A978
	
		// Methods
		internal void Set(InternalPrimitiveTypeE typeInformation, object value); // 0x0038A978-0x0038A984
		internal void Set(InternalPrimitiveTypeE typeInformation); // 0x0038A984-0x0038A98C
		public void Write(__BinaryWriter sout); // 0x0038A98C-0x0038A9C8
		public void Read(__BinaryParser input); // 0x0038A9C8-0x0038AA00
		public void Dump(); // 0x0038AA00-0x0038AA04
	}

	internal sealed class MemberReference : IStreamable // TypeDefIndex: 994
	{
		// Fields
		internal int idRef; // 0x08
	
		// Constructors
		internal MemberReference(); // 0x0038AA04-0x0038AA0C
	
		// Methods
		internal void Set(int idRef); // 0x0038AA0C-0x0038AA14
		public void Write(__BinaryWriter sout); // 0x0038AA14-0x0038AA7C
		public void Read(__BinaryParser input); // 0x0038AA7C-0x0038AACC
		public void Dump(); // 0x0038AACC-0x0038AAD0
	}

	internal sealed class ObjectNull : IStreamable // TypeDefIndex: 995
	{
		// Fields
		internal int nullCount; // 0x08
	
		// Constructors
		internal ObjectNull(); // 0x0038C358-0x0038C360
	
		// Methods
		internal void SetNullCount(int nullCount); // 0x0038C360-0x0038C368
		public void Write(__BinaryWriter sout); // 0x0038C368-0x0038C424
		public void Read(__BinaryParser input, BinaryHeaderEnum binaryHeaderEnum); // 0x0038C424-0x0038C4C8
		public void Dump(); // 0x0038C4C8-0x0038C4CC
	}

	internal sealed class MessageEnd : IStreamable // TypeDefIndex: 996
	{
		// Constructors
		internal MessageEnd(); // 0x0038AAD0-0x0038AAD8
	
		// Methods
		public void Write(__BinaryWriter sout); // 0x0038AAD8-0x0038AB08
		public void Read(__BinaryParser input); // 0x0038AB08-0x0038AB0C
		public void Dump(); // 0x0038AB0C-0x0038AB10
		public void Dump(Stream sout); // 0x0038AB10-0x0038AB14
	}

	internal sealed class ObjectMap // TypeDefIndex: 997
	{
		// Fields
		internal string objectName; // 0x08
		internal Type objectType; // 0x0C
		internal BinaryTypeEnum[] binaryTypeEnumA; // 0x10
		internal object[] typeInformationA; // 0x14
		internal Type[] memberTypes; // 0x18
		internal string[] memberNames; // 0x1C
		internal ReadObjectInfo objectInfo; // 0x20
		internal bool isInitObjectInfo; // 0x24
		internal ObjectReader objectReader; // 0x28
		internal int objectId; // 0x2C
		internal BinaryAssemblyInfo assemblyInfo; // 0x30
	
		// Constructors
		internal ObjectMap(string objectName, Type objectType, string[] memberNames, ObjectReader objectReader, int objectId, BinaryAssemblyInfo assemblyInfo); // 0x0038AE30-0x0038B090
		internal ObjectMap(string objectName, string[] memberNames, BinaryTypeEnum[] binaryTypeEnumA, object[] typeInformationA, int[] memberAssemIds, ObjectReader objectReader, int objectId, BinaryAssemblyInfo assemblyInfo, SizedArray assemIdToAssemblyTable); // 0x0038B910-0x0038BD6C
	
		// Methods
		internal ReadObjectInfo CreateObjectInfo(ref SerializationInfo si, ref object[] memberData); // 0x0038BE6C-0x0038BEE4
		internal static ObjectMap Create(string name, Type objectType, string[] memberNames, ObjectReader objectReader, int objectId, BinaryAssemblyInfo assemblyInfo); // 0x0038BFE0-0x0038C07C
		internal static ObjectMap Create(string name, string[] memberNames, BinaryTypeEnum[] binaryTypeEnumA, object[] typeInformationA, int[] memberAssemIds, ObjectReader objectReader, int objectId, BinaryAssemblyInfo assemblyInfo, SizedArray assemIdToAssemblyTable); // 0x0038C07C-0x0038C130
	}

	internal sealed class ObjectProgress // TypeDefIndex: 998
	{
		// Fields
		internal static int opRecordIdCount; // 0x00
		internal bool isInitial; // 0x08
		internal int count; // 0x0C
		internal BinaryTypeEnum expectedType; // 0x10
		internal object expectedTypeInformation; // 0x14
		internal string name; // 0x18
		internal InternalObjectTypeE objectTypeEnum; // 0x1C
		internal InternalMemberTypeE memberTypeEnum; // 0x20
		internal InternalMemberValueE memberValueEnum; // 0x24
		internal Type dtType; // 0x28
		internal int numItems; // 0x2C
		internal BinaryTypeEnum binaryTypeEnum; // 0x30
		internal object typeInformation; // 0x34
		internal int nullCount; // 0x38
		internal int memberLength; // 0x3C
		internal BinaryTypeEnum[] binaryTypeEnumA; // 0x40
		internal object[] typeInformationA; // 0x44
		internal string[] memberNames; // 0x48
		internal Type[] memberTypes; // 0x4C
		internal ParseRecord pr; // 0x50
	
		// Constructors
		internal ObjectProgress(); // 0x0038C4CC-0x0038C550
		static ObjectProgress(); // 0x0038C854-0x0038C8BC
	
		// Methods
		internal void Init(); // 0x0038C558-0x0038C62C
		internal void ArrayCountIncrement(int value); // 0x0038C6AC-0x0038C6BC
		internal bool GetNext(out BinaryTypeEnum outBinaryTypeEnum, out object outTypeInformation); // 0x0038C6BC-0x0038C854
	}

	internal sealed class Converter // TypeDefIndex: 999
	{
		// Fields
		private static int primitiveTypeEnumLength; // 0x00
		private static Type[] typeA; // 0x04
		private static Type[] arrayTypeA; // 0x08
		private static string[] valueA; // 0x0C
		private static TypeCode[] typeCodeA; // 0x10
		private static InternalPrimitiveTypeE[] codeA; // 0x14
		internal static Type typeofISerializable; // 0x18
		internal static Type typeofString; // 0x1C
		internal static Type typeofConverter; // 0x20
		internal static Type typeofBoolean; // 0x24
		internal static Type typeofByte; // 0x28
		internal static Type typeofChar; // 0x2C
		internal static Type typeofDecimal; // 0x30
		internal static Type typeofDouble; // 0x34
		internal static Type typeofInt16; // 0x38
		internal static Type typeofInt32; // 0x3C
		internal static Type typeofInt64; // 0x40
		internal static Type typeofSByte; // 0x44
		internal static Type typeofSingle; // 0x48
		internal static Type typeofTimeSpan; // 0x4C
		internal static Type typeofDateTime; // 0x50
		internal static Type typeofUInt16; // 0x54
		internal static Type typeofUInt32; // 0x58
		internal static Type typeofUInt64; // 0x5C
		internal static Type typeofObject; // 0x60
		internal static Type typeofSystemVoid; // 0x64
		internal static Assembly urtAssembly; // 0x68
		internal static string urtAssemblyString; // 0x6C
		internal static Type typeofTypeArray; // 0x70
		internal static Type typeofObjectArray; // 0x74
		internal static Type typeofStringArray; // 0x78
		internal static Type typeofBooleanArray; // 0x7C
		internal static Type typeofByteArray; // 0x80
		internal static Type typeofCharArray; // 0x84
		internal static Type typeofDecimalArray; // 0x88
		internal static Type typeofDoubleArray; // 0x8C
		internal static Type typeofInt16Array; // 0x90
		internal static Type typeofInt32Array; // 0x94
		internal static Type typeofInt64Array; // 0x98
		internal static Type typeofSByteArray; // 0x9C
		internal static Type typeofSingleArray; // 0xA0
		internal static Type typeofTimeSpanArray; // 0xA4
		internal static Type typeofDateTimeArray; // 0xA8
		internal static Type typeofUInt16Array; // 0xAC
		internal static Type typeofUInt32Array; // 0xB0
		internal static Type typeofUInt64Array; // 0xB4
		internal static Type typeofMarshalByRefObject; // 0xB8
	
		// Constructors
		static Converter(); // 0x00389660-0x00389CDC
	
		// Methods
		internal static InternalPrimitiveTypeE ToCode(Type type); // 0x00383AC8-0x00383C7C
		internal static bool IsWriteAsByteArray(InternalPrimitiveTypeE code); // 0x003876F8-0x0038771C
		internal static int TypeLength(InternalPrimitiveTypeE code); // 0x0038771C-0x003877A4
		internal static Type ToArrayType(InternalPrimitiveTypeE code); // 0x00384380-0x003844C8
		private static void InitTypeA(); // 0x00387EB0-0x003885BC
		private static void InitArrayTypeA(); // 0x003877A4-0x00387EB0
		internal static Type ToType(InternalPrimitiveTypeE code); // 0x00384238-0x00384380
		internal static Array CreatePrimitiveArray(InternalPrimitiveTypeE code, int length); // 0x003885BC-0x00388650
		internal static bool IsPrimitiveArray(Type type, out object typeInformation); // 0x003832A0-0x003836FC
		private static void InitValueA(); // 0x00388650-0x00388D98
		internal static string ToComType(InternalPrimitiveTypeE code); // 0x003840F0-0x00384238
		private static void InitTypeCodeA(); // 0x00388D98-0x003890A8
		internal static TypeCode ToTypeCode(InternalPrimitiveTypeE code); // 0x003890A8-0x003891F0
		private static void InitCodeA(); // 0x003891F0-0x00389550
		internal static InternalPrimitiveTypeE ToPrimitiveTypeEnum(TypeCode typeCode); // 0x003875B0-0x003876F8
		internal static object FromString(string value, InternalPrimitiveTypeE code); // 0x00389550-0x00389660
	}

	[Serializable]
	internal enum BinaryHeaderEnum // TypeDefIndex: 1000
	{
		SerializedStreamHeader = 0,
		Object = 1,
		ObjectWithMap = 2,
		ObjectWithMapAssemId = 3,
		ObjectWithMapTyped = 4,
		ObjectWithMapTypedAssemId = 5,
		ObjectString = 6,
		Array = 7,
		MemberPrimitiveTyped = 8,
		MemberReference = 9,
		ObjectNull = 10,
		MessageEnd = 11,
		Assembly = 12,
		ObjectNullMultiple256 = 13,
		ObjectNullMultiple = 14,
		ArraySinglePrimitive = 15,
		ArraySingleObject = 16,
		ArraySingleString = 17,
		CrossAppDomainMap = 18,
		CrossAppDomainString = 19,
		CrossAppDomainAssembly = 20,
		MethodCall = 21,
		MethodReturn = 22
	}

	[Serializable]
	internal enum BinaryTypeEnum // TypeDefIndex: 1001
	{
		Primitive = 0,
		String = 1,
		Object = 2,
		ObjectUrt = 3,
		ObjectUser = 4,
		ObjectArray = 5,
		StringArray = 6,
		PrimitiveArray = 7
	}

	[Serializable]
	internal enum BinaryArrayTypeEnum // TypeDefIndex: 1002
	{
		Single = 0,
		Jagged = 1,
		Rectangular = 2,
		SingleOffset = 3,
		JaggedOffset = 4,
		RectangularOffset = 5
	}

	[Serializable]
	internal enum InternalSerializerTypeE // TypeDefIndex: 1003
	{
		Soap = 1,
		Binary = 2
	}

	[Serializable]
	internal enum InternalParseTypeE // TypeDefIndex: 1004
	{
		Empty = 0,
		SerializedStreamHeader = 1,
		Object = 2,
		Member = 3,
		ObjectEnd = 4,
		MemberEnd = 5,
		Headers = 6,
		HeadersEnd = 7,
		SerializedStreamHeaderEnd = 8,
		Envelope = 9,
		EnvelopeEnd = 10,
		Body = 11,
		BodyEnd = 12
	}

	[Serializable]
	internal enum InternalObjectTypeE // TypeDefIndex: 1005
	{
		Empty = 0,
		Object = 1,
		Array = 2
	}

	[Serializable]
	internal enum InternalObjectPositionE // TypeDefIndex: 1006
	{
		Empty = 0,
		Top = 1,
		Child = 2,
		Headers = 3
	}

	[Serializable]
	internal enum InternalArrayTypeE // TypeDefIndex: 1007
	{
		Empty = 0,
		Single = 1,
		Jagged = 2,
		Rectangular = 3,
		Base64 = 4
	}

	[Serializable]
	internal enum InternalMemberTypeE // TypeDefIndex: 1008
	{
		Empty = 0,
		Header = 1,
		Field = 2,
		Item = 3
	}

	[Serializable]
	internal enum InternalMemberValueE // TypeDefIndex: 1009
	{
		Empty = 0,
		InlineValue = 1,
		Nested = 2,
		Reference = 3,
		Null = 4
	}

	[Serializable]
	internal enum InternalPrimitiveTypeE // TypeDefIndex: 1010
	{
		Invalid = 0,
		Boolean = 1,
		Byte = 2,
		Char = 3,
		Currency = 4,
		Decimal = 5,
		Double = 6,
		Int16 = 7,
		Int32 = 8,
		Int64 = 9,
		SByte = 10,
		Single = 11,
		TimeSpan = 12,
		DateTime = 13,
		UInt16 = 14,
		UInt32 = 15,
		UInt64 = 16,
		Null = 17,
		String = 18
	}

	[Serializable]
	[Flags] // 0x0013E5A0-0x0013E5B0
	internal enum MessageEnum // TypeDefIndex: 1011
	{
		NoArgs = 1,
		ArgsInline = 2,
		ArgsIsArray = 4,
		ArgsInArray = 8,
		NoContext = 16,
		ContextInline = 32,
		ContextInArray = 64,
		MethodSignatureInArray = 128,
		PropertyInArray = 256,
		NoReturnValue = 512,
		ReturnValueVoid = 1024,
		ReturnValueInline = 2048,
		ReturnValueInArray = 4096,
		ExceptionInArray = 8192,
		GenericMethod = 32768
	}

	[Serializable]
	internal enum ValueFixupEnum // TypeDefIndex: 1012
	{
		Empty = 0,
		Array = 1,
		Header = 2,
		Member = 3
	}

	[ComVisible] // 0x0013E5B0-0x0013E5C4
	public sealed class BinaryFormatter : IRemotingFormatter // TypeDefIndex: 1013
	{
		// Fields
		internal ISurrogateSelector m_surrogates; // 0x08
		internal StreamingContext m_context; // 0x0C
		internal SerializationBinder m_binder; // 0x14
		internal FormatterTypeStyle m_typeFormat; // 0x18
		internal FormatterAssemblyStyle m_assemblyFormat; // 0x1C
		internal TypeFilterLevel m_securityLevel; // 0x20
		internal object[] m_crossAppDomainArray; // 0x24
		private static Dictionary<Type, TypeInformation> typeNameCache; // 0x00
	
		// Properties
		public FormatterAssemblyStyle AssemblyFormat { set; } // 0x003848C0-0x003848C8
		public ISurrogateSelector SurrogateSelector { set; } // 0x003848C8-0x003848D0
	
		// Constructors
		public BinaryFormatter(); // 0x003848D0-0x00384930
		public BinaryFormatter(ISurrogateSelector selector, StreamingContext context); // 0x00384930-0x00384974
		static BinaryFormatter(); // 0x00385F1C-0x00385FAC
	
		// Methods
		public object Deserialize(Stream serializationStream); // 0x00384974-0x00384994
		internal object Deserialize(Stream serializationStream, HeaderHandler handler, bool fCheck); // 0x003849B0-0x00384C94
		public object Deserialize(Stream serializationStream, HeaderHandler handler); // 0x00384994-0x003849B0
		public void Serialize(Stream serializationStream, object graph); // 0x003853EC-0x00385410
		public void Serialize(Stream serializationStream, object graph, Header[] headers); // 0x00385410-0x00385430
		internal void Serialize(Stream serializationStream, object graph, Header[] headers, bool fCheck); // 0x00385430-0x00385690
		internal static TypeInformation GetTypeInformation(Type type); // 0x00385C30-0x00385EEC
	}

	internal sealed class __BinaryWriter // TypeDefIndex: 1014
	{
		// Fields
		internal Stream sout; // 0x08
		internal FormatterTypeStyle formatterTypeStyle; // 0x0C
		internal Hashtable objectMapTable; // 0x10
		internal ObjectWriter objectWriter; // 0x14
		internal BinaryWriter dataWriter; // 0x18
		internal int m_nestedObjectCount; // 0x1C
		private int nullCount; // 0x20
		internal BinaryMethodCall binaryMethodCall; // 0x24
		internal BinaryMethodReturn binaryMethodReturn; // 0x28
		internal BinaryObject binaryObject; // 0x2C
		internal BinaryObjectWithMap binaryObjectWithMap; // 0x30
		internal BinaryObjectWithMapTyped binaryObjectWithMapTyped; // 0x34
		internal BinaryObjectString binaryObjectString; // 0x38
		internal BinaryArray binaryArray; // 0x3C
		private byte[] byteBuffer; // 0x40
		private int chunkSize; // 0x44
		internal MemberPrimitiveUnTyped memberPrimitiveUnTyped; // 0x48
		internal MemberPrimitiveTyped memberPrimitiveTyped; // 0x4C
		internal ObjectNull objectNull; // 0x50
		internal MemberReference memberReference; // 0x54
		internal BinaryAssembly binaryAssembly; // 0x58
	
		// Constructors
		internal __BinaryWriter(Stream sout, ObjectWriter objectWriter, FormatterTypeStyle formatterTypeStyle); // 0x003F82B4-0x003F836C
	
		// Methods
		internal void WriteBegin(); // 0x003F836C-0x003F8370
		internal void WriteEnd(); // 0x003F8370-0x003F83A4
		internal void WriteBoolean(bool value); // 0x003F83A4-0x003F83E0
		internal void WriteByte(byte value); // 0x003F83E0-0x003F841C
		private void WriteBytes(byte[] value); // 0x003F841C-0x003F8458
		private void WriteBytes(byte[] byteA, int offset, int size); // 0x003F8458-0x003F84B0
		internal void WriteChar(char value); // 0x003F84B0-0x003F84EC
		internal void WriteChars(char[] value); // 0x003F84EC-0x003F8528
		internal void WriteDecimal(decimal value); // 0x003F8528-0x003F8600
		internal void WriteSingle(float value); // 0x003F863C-0x003F8678
		internal void WriteDouble(double value); // 0x003F8678-0x003F86C8
		internal void WriteInt16(short value); // 0x003F86C8-0x003F8704
		internal void WriteInt32(int value); // 0x003F8704-0x003F8740
		internal void WriteInt64(long value); // 0x003F8740-0x003F8790
		internal void WriteSByte(sbyte value); // 0x003F8790-0x003F87CC
		internal void WriteString(string value); // 0x003F8600-0x003F863C
		internal void WriteTimeSpan(TimeSpan value); // 0x003F87CC-0x003F8834
		internal void WriteDateTime(DateTime value); // 0x003F8834-0x003F889C
		internal void WriteUInt16(ushort value); // 0x003F889C-0x003F88D8
		internal void WriteUInt32(uint value); // 0x003F88D8-0x003F8914
		internal void WriteUInt64(ulong value); // 0x003F8914-0x003F8964
		internal void WriteObjectEnd(NameInfo memberNameInfo, NameInfo typeNameInfo); // 0x003F8964-0x003F8968
		internal void WriteSerializationHeaderEnd(); // 0x003F8968-0x003F8A24
		internal void WriteSerializationHeader(int topId, int headerId, int minorVersion, int majorVersion); // 0x003F8A24-0x003F8B04
		internal void WriteMethodCall(); // 0x003F8B04-0x003F8BC4
		internal void WriteMethodReturn(); // 0x003F8BC4-0x003F8C84
		internal void WriteObject(NameInfo nameInfo, NameInfo typeNameInfo, int numMembers, string[] memberNames, Type[] memberTypes, WriteObjectInfo[] memberObjectInfos); // 0x003F8C84-0x003F93A0
		internal void WriteObjectString(int objectId, string value); // 0x003F94A4-0x003F957C
		internal void WriteSingleArray(NameInfo memberNameInfo, NameInfo arrayNameInfo, WriteObjectInfo objectInfo, NameInfo arrayElemTypeNameInfo, int length, int lowerBound, Array array); // 0x003F957C-0x003F99F4
		private void WriteArrayAsBytes(Array array, int typeLength); // 0x003F99F4-0x003F9D80
		internal void WriteJaggedArray(NameInfo memberNameInfo, NameInfo arrayNameInfo, WriteObjectInfo objectInfo, NameInfo arrayElemTypeNameInfo, int length, int lowerBound); // 0x003F9D80-0x003F9FD0
		internal void WriteRectangleArray(NameInfo memberNameInfo, NameInfo arrayNameInfo, WriteObjectInfo objectInfo, NameInfo arrayElemTypeNameInfo, int rank, int[] lengthA, int[] lowerBoundA); // 0x003F9FD0-0x003FA1E8
		internal void WriteObjectByteArray(NameInfo memberNameInfo, NameInfo arrayNameInfo, WriteObjectInfo objectInfo, NameInfo arrayElemTypeNameInfo, int length, int lowerBound, byte[] byteA); // 0x003FA1E8-0x003FA230
		internal void WriteMember(NameInfo memberNameInfo, NameInfo typeNameInfo, object value); // 0x003FA230-0x003FA3FC
		internal void WriteNullMember(NameInfo memberNameInfo, NameInfo typeNameInfo); // 0x003FA3FC-0x003FA510
		internal void WriteMemberObjectRef(NameInfo memberNameInfo, int idRef); // 0x003FA510-0x003FA614
		internal void WriteMemberNested(NameInfo memberNameInfo); // 0x003FA614-0x003FA638
		internal void WriteMemberString(NameInfo memberNameInfo, NameInfo typeNameInfo, string value); // 0x003FA638-0x003FA688
		internal void WriteItem(NameInfo itemNameInfo, NameInfo typeNameInfo, object value); // 0x003FA688-0x003FA6C4
		internal void WriteNullItem(NameInfo itemNameInfo, NameInfo typeNameInfo); // 0x003FA6C4-0x003FA6D4
		internal void WriteDelayedNullItem(); // 0x003FA6D4-0x003FA6E4
		internal void WriteItemEnd(); // 0x003FA6E4-0x003FA6E8
		private void InternalWriteItemNull(); // 0x003F93A0-0x003F94A4
		internal void WriteItemObjectRef(NameInfo nameInfo, int idRef); // 0x003FA6E8-0x003FA714
		internal void WriteAssembly(Type type, string assemblyString, int assemId, bool isNew); // 0x003FA714-0x003FA838
		internal void WriteValue(InternalPrimitiveTypeE code, object value); // 0x003FA838-0x003FB24C
	}

	internal sealed class ObjectMapInfo // TypeDefIndex: 1015
	{
		// Fields
		internal int objectId; // 0x08
		private int numMembers; // 0x0C
		private string[] memberNames; // 0x10
		private Type[] memberTypes; // 0x14
	
		// Constructors
		internal ObjectMapInfo(int objectId, int numMembers, string[] memberNames, Type[] memberTypes); // 0x0038C130-0x0038C168
	
		// Methods
		internal bool isCompatible(int numMembers, string[] memberNames, Type[] memberTypes); // 0x0038C168-0x0038C358
	}

	internal sealed class WriteObjectInfo // TypeDefIndex: 1016
	{
		// Fields
		internal int objectInfoId; // 0x08
		internal object obj; // 0x0C
		internal Type objectType; // 0x10
		internal bool isSi; // 0x14
		internal bool isNamed; // 0x15
		internal bool isTyped; // 0x16
		internal bool isArray; // 0x17
		internal SerializationInfo si; // 0x18
		internal SerObjectInfoCache cache; // 0x1C
		internal object[] memberData; // 0x20
		internal ISerializationSurrogate serializationSurrogate; // 0x24
		internal StreamingContext context; // 0x28
		internal SerObjectInfoInit serObjectInfoInit; // 0x30
		internal long objectId; // 0x38
		internal long assemId; // 0x40
		private string binderTypeName; // 0x48
		private string binderAssemblyString; // 0x4C
	
		// Constructors
		internal WriteObjectInfo(); // 0x003986F8-0x00398700
	
		// Methods
		internal void ObjectEnd(); // 0x0039380C-0x00393818
		private void InternalInit(); // 0x00398744-0x00398770
		internal static WriteObjectInfo Serialize(object obj, ISurrogateSelector surrogateSelector, StreamingContext context, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, ObjectWriter objectWriter, SerializationBinder binder); // 0x00392CD4-0x00392D50
		internal void InitSerialize(object obj, ISurrogateSelector surrogateSelector, StreamingContext context, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, ObjectWriter objectWriter, SerializationBinder binder); // 0x00398900-0x00398FA8
		internal static WriteObjectInfo Serialize(Type objectType, ISurrogateSelector surrogateSelector, StreamingContext context, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, SerializationBinder binder); // 0x00394A4C-0x00394ABC
		internal void InitSerialize(Type objectType, ISurrogateSelector surrogateSelector, StreamingContext context, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, SerializationBinder binder); // 0x00399D3C-0x0039A0A8
		private void InitSiWrite(); // 0x00399178-0x003996A0
		private static void CheckTypeForwardedFrom(SerObjectInfoCache cache, Type objectType, string binderAssemblyString); // 0x003996A0-0x0039986C
		private void InitNoMembers(); // 0x00398FA8-0x00399134
		private void InitMemberInfo(); // 0x0039986C-0x00399D3C
		internal string GetTypeFullName(); // 0x003837E0-0x00383818
		internal string GetAssemblyString(); // 0x003837A8-0x003837E0
		private void InvokeSerializationBinder(SerializationBinder binder); // 0x00399134-0x00399178
		internal Type GetMemberType(MemberInfo objMember); // 0x0039A0A8-0x0039A2A8
		internal void GetMemberInfo(out string[] outMemberNames, out Type[] outMemberTypes, out object[] outMemberData); // 0x003948F8-0x00394A0C
		private static WriteObjectInfo GetObjectInfo(SerObjectInfoInit serObjectInfoInit); // 0x00398770-0x00398900
		private static void PutObjectInfo(SerObjectInfoInit serObjectInfoInit, WriteObjectInfo objectInfo); // 0x00398700-0x00398744
	}

	internal sealed class ReadObjectInfo // TypeDefIndex: 1017
	{
		// Fields
		internal int objectInfoId; // 0x08
		internal static int readObjectInfoCounter; // 0x00
		internal Type objectType; // 0x0C
		internal ObjectManager objectManager; // 0x10
		internal int count; // 0x14
		internal bool isSi; // 0x18
		internal bool isNamed; // 0x19
		internal bool isTyped; // 0x1A
		internal bool bSimpleAssembly; // 0x1B
		internal SerObjectInfoCache cache; // 0x1C
		internal string[] wireMemberNames; // 0x20
		internal Type[] wireMemberTypes; // 0x24
		private int lastPosition; // 0x28
		internal ISerializationSurrogate serializationSurrogate; // 0x2C
		internal StreamingContext context; // 0x30
		internal List<Type> memberTypesList; // 0x38
		internal SerObjectInfoInit serObjectInfoInit; // 0x3C
		internal IFormatterConverter formatterConverter; // 0x40
	
		// Constructors
		internal ReadObjectInfo(); // 0x00396D3C-0x00396D44
	
		// Methods
		internal void ObjectEnd(); // 0x0038FF88-0x0038FF8C
		internal void PrepareForReuse(); // 0x0038BFD4-0x0038BFE0
		internal static ReadObjectInfo Create(Type objectType, ISurrogateSelector surrogateSelector, StreamingContext context, ObjectManager objectManager, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, bool bSimpleAssembly); // 0x0038D664-0x0038D6F0
		internal void Init(Type objectType, ISurrogateSelector surrogateSelector, StreamingContext context, ObjectManager objectManager, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, bool bSimpleAssembly); // 0x00396DD8-0x00396E24
		internal static ReadObjectInfo Create(Type objectType, string[] memberNames, Type[] memberTypes, ISurrogateSelector surrogateSelector, StreamingContext context, ObjectManager objectManager, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, bool bSimpleAssembly); // 0x0038D6F0-0x0038D780
		internal void Init(Type objectType, string[] memberNames, Type[] memberTypes, ISurrogateSelector surrogateSelector, StreamingContext context, ObjectManager objectManager, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, bool bSimpleAssembly); // 0x00397054-0x003970D0
		private void InitReadConstructor(Type objectType, ISurrogateSelector surrogateSelector, StreamingContext context); // 0x00396E24-0x00397054
		private void InitSiRead(); // 0x00397144-0x003971D4
		private void InitNoMembers(); // 0x003970D0-0x00397144
		private void InitMemberInfo(); // 0x003971D4-0x00397524
		internal MemberInfo GetMemberInfo(string name); // 0x00391E9C-0x00392114
		internal Type GetType(string name); // 0x00391880-0x00391A50
		internal void AddValue(string name, object value, ref SerializationInfo si, ref object[] memberData); // 0x00391A50-0x00391B1C
		internal void InitDataStore(ref SerializationInfo si, ref object[] memberData); // 0x0038BEE4-0x0038BFD4
		internal void RecordFixup(long objectId, string name, long idRef); // 0x00391B54-0x00391C68
		internal void PopulateObjectMembers(object obj, object[] memberData); // 0x0038FAA4-0x0038FB64
		private int Position(string name); // 0x0039780C-0x00397A60
		internal Type[] GetMemberTypes(string[] inMemberNames, Type objectType); // 0x0038B0D4-0x0038B910
		internal Type GetMemberType(MemberInfo objMember); // 0x0039760C-0x0039780C
		private static ReadObjectInfo GetObjectInfo(SerObjectInfoInit serObjectInfoInit); // 0x00396D44-0x00396DD8
	}

	internal sealed class SerObjectInfoInit // TypeDefIndex: 1018
	{
		// Fields
		internal Hashtable seenBeforeTable; // 0x08
		internal int objectInfoIdCount; // 0x0C
		internal SerStack oiPool; // 0x10
	
		// Constructors
		public SerObjectInfoInit(); // 0x0038C9F4-0x0038CAAC
	}

	internal sealed class SerObjectInfoCache // TypeDefIndex: 1019
	{
		// Fields
		internal string fullTypeName; // 0x08
		internal string assemblyString; // 0x0C
		internal bool hasTypeForwardedFrom; // 0x10
		internal MemberInfo[] memberInfos; // 0x14
		internal string[] memberNames; // 0x18
		internal Type[] memberTypes; // 0x1C
	
		// Constructors
		internal SerObjectInfoCache(string typeName, string assemblyName, bool hasTypeForwardedFrom); // 0x00397A60-0x00397A90
		internal SerObjectInfoCache(Type type); // 0x00397524-0x0039760C
	}

	internal sealed class TypeInformation // TypeDefIndex: 1020
	{
		// Fields
		private string fullTypeName; // 0x08
		private string assemblyString; // 0x0C
		private bool hasTypeForwardedFrom; // 0x10
	
		// Properties
		internal string FullTypeName { get; } // 0x00397A90-0x00397A98 
		internal string AssemblyString { get; } // 0x00392B20-0x00392B28 
		internal bool HasTypeForwardedFrom { get; } // 0x00392B18-0x00392B20 
	
		// Constructors
		internal TypeInformation(string fullTypeName, string assemblyString, bool hasTypeForwardedFrom); // 0x00385EEC-0x00385F1C
	}

	internal sealed class ObjectReader // TypeDefIndex: 1021
	{
		// Fields
		internal Stream m_stream; // 0x08
		internal ISurrogateSelector m_surrogates; // 0x0C
		internal StreamingContext m_context; // 0x10
		internal ObjectManager m_objectManager; // 0x18
		internal InternalFE formatterEnums; // 0x1C
		internal SerializationBinder m_binder; // 0x20
		internal long topId; // 0x28
		internal bool bSimpleAssembly; // 0x30
		internal object handlerObject; // 0x34
		internal object m_topObject; // 0x38
		internal Header[] headers; // 0x3C
		internal HeaderHandler handler; // 0x40
		internal SerObjectInfoInit serObjectInfoInit; // 0x44
		internal IFormatterConverter m_formatterConverter; // 0x48
		internal SerStack stack; // 0x4C
		private SerStack valueFixupStack; // 0x50
		internal object[] crossAppDomainArray; // 0x54
		private bool bFullDeserialization; // 0x58
		private bool bOldFormatDetected; // 0x59
		private IntSizedArray valTypeObjectIdTable; // 0x5C
		private NameCache typeCache; // 0x60
		private string previousAssemblyString; // 0x64
		private string previousName; // 0x68
		private Type previousType; // 0x6C
	
		// Properties
		private SerStack ValueFixupStack { get; } // 0x0038C8BC-0x0038C94C 
		internal object TopObject { get; set; } // 0x0038C9D0-0x0038C9D8 0x0038C9D8-0x0038C9F4
	
		// Nested types
		internal class TypeNAssembly // TypeDefIndex: 1022
		{
			// Fields
			public Type type; // 0x08
			public string assemblyName; // 0x0C
	
			// Constructors
			public TypeNAssembly(); // 0x00392AF0-0x00392AF8
		}
	
		internal sealed class TopLevelAssemblyTypeResolver // TypeDefIndex: 1023
		{
			// Fields
			private Assembly m_topLevelAssembly; // 0x08
	
			// Constructors
			public TopLevelAssemblyTypeResolver(Assembly topLevelAssembly); // 0x00392AF8-0x00392B18
	
			// Methods
			public Type ResolveType(Assembly assembly, string simpleTypeName, bool ignoreCase); // 0x00392B28-0x00392B98
		}
	
		// Constructors
		internal ObjectReader(Stream stream, ISurrogateSelector selector, StreamingContext context, InternalFE formatterEnums, SerializationBinder binder); // 0x00384C9C-0x00384DC4
	
		// Methods
		internal object Deserialize(HeaderHandler handler, __BinaryParser serParser, bool fCheck); // 0x00384ED0-0x003853EC
		private bool HasSurrogate(Type t); // 0x0038D250-0x0038D35C
		private void CheckSerializable(Type t); // 0x0038D35C-0x0038D514
		private void InitFullDeserialization(); // 0x0038D514-0x0038D61C
		internal object CrossAppDomainArray(int index); // 0x0038D61C-0x0038D664
		internal ReadObjectInfo CreateReadObjectInfo(Type objectType); // 0x0038B090-0x0038B0D4
		internal ReadObjectInfo CreateReadObjectInfo(Type objectType, string[] memberNames, Type[] memberTypes); // 0x0038BE1C-0x0038BE6C
		internal void Parse(ParseRecord pr); // 0x0038D780-0x0038D95C
		private void ParseError(ParseRecord processing, ParseRecord onStack); // 0x0038EBB8-0x0038EE6C
		private void ParseSerializedStreamHeader(ParseRecord pr); // 0x0038D95C-0x0038D98C
		private void ParseSerializedStreamHeaderEnd(ParseRecord pr); // 0x0038D98C-0x0038D9B4
		private void ParseObject(ParseRecord pr); // 0x0038D9B4-0x0038DDB8
		private void ParseObjectEnd(ParseRecord pr); // 0x0038DDB8-0x0038E218
		private void ParseArray(ParseRecord pr); // 0x0038EFC8-0x0038FA2C
		private void NextRectangleMap(ParseRecord pr); // 0x0038FFBC-0x00390130
		private void ParseArrayMember(ParseRecord pr); // 0x00390130-0x0039119C
		private void ParseArrayMemberEnd(ParseRecord pr); // 0x00391844-0x00391880
		private void ParseMember(ParseRecord pr); // 0x0038E218-0x0038EAE0
		private void ParseMemberEnd(ParseRecord pr); // 0x0038EAE0-0x0038EBB8
		private void ParseString(ParseRecord pr, ParseRecord parentPr); // 0x003911CC-0x00391234
		private void RegisterObject(object obj, ParseRecord pr, ParseRecord objectPr); // 0x0038FA84-0x0038FAA4
		private void RegisterObject(object obj, ParseRecord pr, ParseRecord objectPr, bool bIsString); // 0x00391C68-0x00391E9C
		internal long GetId(long objectId); // 0x00392114-0x0039224C
		internal Type Bind(string assemblyString, string typeString); // 0x0039224C-0x003922A0
		internal Type FastBindToType(string assemblyName, string typeName); // 0x003922A0-0x00392660
		private static Assembly ResolveSimpleAssemblyName(AssemblyName assemblyName); // 0x00392660-0x003926D4
		private static void GetSimplyNamedTypeFromAssembly(Assembly assm, string typeName, ref Type type); // 0x003926D4-0x00392964
		internal Type GetType(BinaryAssemblyInfo assemblyInfo, string name); // 0x003844C8-0x00384754
		private static void CheckTypeForwardedTo(Assembly sourceAssembly, Assembly destAssembly, Type resolvedType); // 0x00392964-0x00392AF0
	}

	internal sealed class ObjectWriter // TypeDefIndex: 1024
	{
		// Fields
		private Queue m_objectQueue; // 0x08
		private ObjectIDGenerator m_idGenerator; // 0x0C
		private int m_currentId; // 0x10
		private ISurrogateSelector m_surrogates; // 0x14
		private StreamingContext m_context; // 0x18
		private __BinaryWriter serWriter; // 0x20
		private SerializationObjectManager m_objectManager; // 0x24
		private long topId; // 0x28
		private string topName; // 0x30
		private Header[] headers; // 0x34
		private InternalFE formatterEnums; // 0x38
		private SerializationBinder m_binder; // 0x3C
		private SerObjectInfoInit serObjectInfoInit; // 0x40
		private IFormatterConverter m_formatterConverter; // 0x44
		internal object[] crossAppDomainArray; // 0x48
		private object previousObj; // 0x4C
		private long previousId; // 0x50
		private Type previousType; // 0x58
		private InternalPrimitiveTypeE previousCode; // 0x5C
		private Hashtable assemblyToIdTable; // 0x60
		private SerStack niPool; // 0x64
	
		// Properties
		internal SerializationObjectManager ObjectManager { get; } // 0x00393A00-0x00393A08 
	
		// Constructors
		internal ObjectWriter(ISurrogateSelector selector, StreamingContext context, InternalFE formatterEnums, SerializationBinder binder); // 0x00385690-0x00385780
	
		// Methods
		internal void Serialize(object graph, Header[] inHeaders, __BinaryWriter serWriter, bool fCheck); // 0x00385780-0x00385C30
		private void Write(WriteObjectInfo objectInfo, NameInfo memberNameInfo, NameInfo typeNameInfo); // 0x003930A8-0x003937DC
		private void Write(WriteObjectInfo objectInfo, NameInfo memberNameInfo, NameInfo typeNameInfo, string[] memberNames, Type[] memberTypes, object[] memberData, WriteObjectInfo[] memberObjectInfos); // 0x00394ABC-0x00395028
		private void WriteMemberSetup(WriteObjectInfo objectInfo, NameInfo memberNameInfo, NameInfo typeNameInfo, string memberName, Type memberType, object memberData, WriteObjectInfo memberObjectInfo); // 0x00395058-0x00395168
		private void WriteMembers(NameInfo memberNameInfo, NameInfo memberTypeNameInfo, object memberData, WriteObjectInfo objectInfo, NameInfo typeNameInfo, WriteObjectInfo memberObjectInfo); // 0x003951A4-0x003955D8
		private void WriteArray(WriteObjectInfo objectInfo, NameInfo memberNameInfo, WriteObjectInfo memberObjectInfo); // 0x00393A08-0x003948F8
		private void WriteArrayMember(WriteObjectInfo objectInfo, NameInfo arrayElemTypeNameInfo, object data); // 0x00395A00-0x00395E08
		private void WriteRectangle(WriteObjectInfo objectInfo, int rank, int[] maxA, Array array, NameInfo arrayElemNameTypeInfo, int[] lowerBoundA); // 0x00395E08-0x003961B0
		private object GetNext(out long objID); // 0x00393818-0x00393A00
		private long InternalGetId(object obj, bool assignUniqueIdToValueType, Type type, out bool isNew); // 0x00392BE8-0x00392CD4
		private long Schedule(object obj, bool assignUniqueIdToValueType, Type type); // 0x003961B0-0x003961D0
		private long Schedule(object obj, bool assignUniqueIdToValueType, Type type, WriteObjectInfo objectInfo); // 0x003957D0-0x0039587C
		private bool WriteKnownValueClass(NameInfo memberNameInfo, NameInfo typeNameInfo, object data); // 0x003958B8-0x00395A00
		private void WriteObjectRef(NameInfo nameInfo, long objectId); // 0x0039587C-0x003958B8
		private void WriteString(NameInfo memberNameInfo, NameInfo typeNameInfo, object stringObject); // 0x003961D0-0x0039637C
		private bool CheckForNull(WriteObjectInfo objectInfo, NameInfo memberNameInfo, NameInfo typeNameInfo, object data); // 0x003955D8-0x00395724
		private void WriteSerializedStreamHeader(long topId, long headerId); // 0x00392B98-0x00392BE8
		private NameInfo TypeToNameInfo(Type type, WriteObjectInfo objectInfo, InternalPrimitiveTypeE code, NameInfo nameInfo); // 0x0039637C-0x00396474
		private NameInfo TypeToNameInfo(Type type); // 0x00395168-0x003951A4
		private NameInfo TypeToNameInfo(WriteObjectInfo objectInfo); // 0x00393038-0x003930A8
		private NameInfo TypeToNameInfo(WriteObjectInfo objectInfo, NameInfo nameInfo); // 0x00395760-0x003957D0
		private void TypeToNameInfo(Type type, NameInfo nameInfo); // 0x00395724-0x00395760
		private NameInfo MemberToNameInfo(string name); // 0x00395028-0x00395058
		internal InternalPrimitiveTypeE ToCode(Type type); // 0x003836FC-0x003837A8
		private long GetAssemblyId(WriteObjectInfo objectInfo); // 0x00392D50-0x00393038
		private Type GetType(object obj); // 0x00394A20-0x00394A4C
		private NameInfo GetNameInfo(); // 0x00396474-0x003965D0
		private bool CheckTypeFormat(FormatterTypeStyle test, FormatterTypeStyle want); // 0x00394A0C-0x00394A20
		private void PutNameInfo(NameInfo nameInfo); // 0x003937DC-0x0039380C
	}

	internal sealed class __BinaryParser // TypeDefIndex: 1025
	{
		// Fields
		internal ObjectReader objectReader; // 0x08
		internal Stream input; // 0x0C
		internal long topId; // 0x10
		internal long headerId; // 0x18
		internal SizedArray objectMapIdTable; // 0x20
		internal SizedArray assemIdToAssemblyTable; // 0x24
		internal SerStack stack; // 0x28
		internal BinaryTypeEnum expectedType; // 0x2C
		internal object expectedTypeInformation; // 0x30
		internal ParseRecord PRS; // 0x34
		private BinaryAssemblyInfo systemAssemblyInfo; // 0x38
		private BinaryReader dataReader; // 0x3C
		private static Encoding encoding; // 0x00
		private SerStack opPool; // 0x40
		private BinaryObject binaryObject; // 0x44
		private BinaryObjectWithMap bowm; // 0x48
		private BinaryObjectWithMapTyped bowmt; // 0x4C
		internal BinaryObjectString objectString; // 0x50
		internal BinaryCrossAppDomainString crossAppDomainString; // 0x54
		internal MemberPrimitiveTyped memberPrimitiveTyped; // 0x58
		private byte[] byteBuffer; // 0x5C
		internal MemberPrimitiveUnTyped memberPrimitiveUnTyped; // 0x60
		internal MemberReference memberReference; // 0x64
		internal ObjectNull objectNull; // 0x68
		internal static MessageEnd messageEnd; // 0x04
	
		// Properties
		internal BinaryAssemblyInfo SystemAssemblyInfo { get; } // 0x0039A2A8-0x0039A378 
		internal SizedArray ObjectMapIdTable { get; } // 0x0039A378-0x0039A3F4 
		internal SizedArray AssemIdToAssemblyTable { get; } // 0x0039A3F4-0x0039A474 
		internal ParseRecord prs { get; } // 0x0039A474-0x0039A4F4 
	
		// Constructors
		internal __BinaryParser(Stream stream, ObjectReader objectReader); // 0x00384DC4-0x00384ED0
		static __BinaryParser(); // 0x0039F1F4-0x0039F27C
	
		// Methods
		internal void Run(); // 0x0038CAAC-0x0038D250
		internal void ReadBegin(); // 0x0039A4F4-0x0039A4F8
		internal void ReadEnd(); // 0x0039D254-0x0039D258
		internal bool ReadBoolean(); // 0x0039D718-0x0039D74C
		internal byte ReadByte(); // 0x003828A4-0x003828D8
		internal byte[] ReadBytes(int length); // 0x00397FDC-0x00398018
		internal void ReadBytes(byte[] byteA, int offset, int size); // 0x0039D74C-0x0039D7D4
		internal char ReadChar(); // 0x0039D7D4-0x0039D808
		internal char[] ReadChars(int length); // 0x0039D808-0x0039D844
		internal decimal ReadDecimal(); // 0x0039D844-0x0039D938
		internal float ReadSingle(); // 0x0039D938-0x0039D96C
		internal double ReadDouble(); // 0x0039D96C-0x0039D9A0
		internal short ReadInt16(); // 0x0039D9A0-0x0039D9D4
		internal int ReadInt32(); // 0x00382870-0x003828A4
		internal long ReadInt64(); // 0x0039D9D4-0x0039DA08
		internal sbyte ReadSByte(); // 0x0039DA08-0x0039DA40
		internal string ReadString(); // 0x00382C90-0x00382CC4
		internal TimeSpan ReadTimeSpan(); // 0x0039DA40-0x0039DAA0
		internal DateTime ReadDateTime(); // 0x0039DAA0-0x0039DB6C
		internal ushort ReadUInt16(); // 0x0039DB6C-0x0039DBA0
		internal uint ReadUInt32(); // 0x0039DBA0-0x0039DBD4
		internal ulong ReadUInt64(); // 0x0039DBD4-0x0039DC08
		internal void ReadSerializationHeaderRecord(); // 0x0039A4F8-0x0039A668
		internal void ReadAssembly(BinaryHeaderEnum binaryHeaderEnum); // 0x0039A668-0x0039A970
		private void ReadObject(); // 0x0039A970-0x0039AF08
		internal void ReadCrossAppDomainMap(); // 0x0039AF08-0x0039B110
		internal void ReadObjectWithMap(BinaryHeaderEnum binaryHeaderEnum); // 0x0039B110-0x0039B1DC
		private void ReadObjectWithMap(BinaryObjectWithMap record); // 0x0039DD24-0x0039E420
		internal void ReadObjectWithMapTyped(BinaryHeaderEnum binaryHeaderEnum); // 0x0039B1DC-0x0039B294
		private void ReadObjectWithMapTyped(BinaryObjectWithMapTyped record); // 0x0039E420-0x0039EBD8
		private void ReadObjectString(BinaryHeaderEnum binaryHeaderEnum); // 0x0039B294-0x0039BB18
		private void ReadMemberPrimitiveTyped(); // 0x0039C430-0x0039C994
		private void ReadArray(BinaryHeaderEnum binaryHeaderEnum); // 0x0039BB18-0x0039C430
		private void ReadArrayAsBytes(ParseRecord pr); // 0x0039EBD8-0x0039F1F4
		private void ReadMemberPrimitiveUnTyped(); // 0x0039D258-0x0039D668
		private void ReadMemberReference(); // 0x0039C994-0x0039CCEC
		private void ReadObjectNull(BinaryHeaderEnum binaryHeaderEnum); // 0x0039CCEC-0x0039D048
		private void ReadMessageEnd(); // 0x0039D048-0x0039D254
		internal object ReadValue(InternalPrimitiveTypeE code); // 0x0038A484-0x0038A96C
		private ObjectProgress GetOp(); // 0x0039DC08-0x0039DD24
		private void PutOp(ObjectProgress op); // 0x0039D668-0x0039D718
	}

	internal sealed class ParseRecord // TypeDefIndex: 1026
	{
		// Fields
		internal static int parseRecordIdCount; // 0x00
		internal InternalParseTypeE PRparseTypeEnum; // 0x08
		internal InternalObjectTypeE PRobjectTypeEnum; // 0x0C
		internal InternalArrayTypeE PRarrayTypeEnum; // 0x10
		internal InternalMemberTypeE PRmemberTypeEnum; // 0x14
		internal InternalMemberValueE PRmemberValueEnum; // 0x18
		internal InternalObjectPositionE PRobjectPositionEnum; // 0x1C
		internal string PRname; // 0x20
		internal string PRvalue; // 0x24
		internal object PRvarValue; // 0x28
		internal string PRkeyDt; // 0x2C
		internal Type PRdtType; // 0x30
		internal InternalPrimitiveTypeE PRdtTypeCode; // 0x34
		internal bool PRisEnum; // 0x38
		internal long PRobjectId; // 0x40
		internal long PRidRef; // 0x48
		internal string PRarrayElementTypeString; // 0x50
		internal Type PRarrayElementType; // 0x54
		internal bool PRisArrayVariant; // 0x58
		internal InternalPrimitiveTypeE PRarrayElementTypeCode; // 0x5C
		internal int PRrank; // 0x60
		internal int[] PRlengthA; // 0x64
		internal int[] PRpositionA; // 0x68
		internal int[] PRlowerBoundA; // 0x6C
		internal int[] PRupperBoundA; // 0x70
		internal int[] PRindexMap; // 0x74
		internal int PRmemberIndex; // 0x78
		internal int PRlinearlength; // 0x7C
		internal int[] PRrectangularMap; // 0x80
		internal bool PRisLowerBound; // 0x84
		internal long PRtopId; // 0x88
		internal long PRheaderId; // 0x90
		internal ReadObjectInfo PRobjectInfo; // 0x98
		internal bool PRisValueTypeFixup; // 0x9C
		internal object PRnewObj; // 0xA0
		internal object[] PRobjectA; // 0xA4
		internal PrimitiveArray PRprimitiveArray; // 0xA8
		internal bool PRisRegistered; // 0xAC
		internal object[] PRmemberData; // 0xB0
		internal SerializationInfo PRsi; // 0xB4
		internal int PRnullCount; // 0xB8
	
		// Constructors
		internal ParseRecord(); // 0x0038C550-0x0038C558
		static ParseRecord(); // 0x003965E4-0x0039664C
	
		// Methods
		internal void Init(); // 0x0038C62C-0x0038C6AC
	}

	internal sealed class SerStack // TypeDefIndex: 1027
	{
		// Fields
		internal object[] objects; // 0x08
		internal string stackId; // 0x0C
		internal int top; // 0x10
	
		// Constructors
		internal SerStack(string stackId); // 0x0038C94C-0x0038C9D0
	
		// Methods
		internal void Push(object obj); // 0x0038EE6C-0x0038EF20
		internal object Pop(); // 0x0038EF20-0x0038EFC8
		internal void IncreaseCapacity(); // 0x00397A98-0x00397B58
		internal object Peek(); // 0x0038FA2C-0x0038FA84
		internal object PeekPeek(); // 0x00397B58-0x00397BB4
		internal bool IsEmpty(); // 0x003965D0-0x003965E4
	}

	[Serializable]
	internal sealed class SizedArray : ICloneable // TypeDefIndex: 1028
	{
		// Fields
		internal object[] objects; // 0x08
		internal object[] negObjects; // 0x0C
	
		// Properties
		internal object this[int index] { get => default; set {} } // 0x0038BD6C-0x0038BE1C 0x003982BC-0x00398444
	
		// Constructors
		internal SizedArray(); // 0x0039801C-0x003980A0
		internal SizedArray(int length); // 0x003980A0-0x00398128
		private SizedArray(SizedArray sizedArray); // 0x00398128-0x0039824C
	
		// Methods
		public object Clone(); // 0x0039824C-0x003982BC
		internal void IncreaseCapacity(int index); // 0x00398444-0x003986F8
	}

	[Serializable]
	internal sealed class IntSizedArray : ICloneable // TypeDefIndex: 1029
	{
		// Fields
		internal int[] objects; // 0x08
		internal int[] negObjects; // 0x0C
	
		// Properties
		internal int this[int index] { get => default; set {} } // 0x00389F20-0x00389FD0 0x00389FD0-0x0038A0C8
	
		// Constructors
		public IntSizedArray(); // 0x00389CDC-0x00389D60
		private IntSizedArray(IntSizedArray sizedArray); // 0x00389D60-0x00389EB0
	
		// Methods
		public object Clone(); // 0x00389EB0-0x00389F20
		internal void IncreaseCapacity(int index); // 0x0038A0C8-0x0038A37C
	}

	internal sealed class NameCache // TypeDefIndex: 1030
	{
		// Fields
		private static ConcurrentDictionary<string, object> ht; // 0x00
		private string name; // 0x08
	
		// Constructors
		public NameCache(); // 0x0038ACC0-0x0038ACC8
		static NameCache(); // 0x0038ACC8-0x0038AD58
	
		// Methods
		internal object GetCachedValue(string name); // 0x0038AB14-0x0038ABF8
		internal void SetCachedValue(object value); // 0x0038ABF8-0x0038ACC0
	}

	internal sealed class ValueFixup // TypeDefIndex: 1031
	{
		// Fields
		internal ValueFixupEnum valueFixupEnum; // 0x08
		internal Array arrayObj; // 0x0C
		internal int[] indexMap; // 0x10
		internal object header; // 0x14
		internal object memberObject; // 0x18
		internal static MemberInfo valueInfo; // 0x00
		internal ReadObjectInfo objectInfo; // 0x1C
		internal string memberName; // 0x20
	
		// Constructors
		internal ValueFixup(Array arrayObj, int[] indexMap); // 0x0039119C-0x003911CC
		internal ValueFixup(object memberObject, string memberName, ReadObjectInfo objectInfo); // 0x00391B1C-0x00391B54
	
		// Methods
		internal void Fixup(ParseRecord record, ParseRecord parent); // 0x0038FB64-0x0038FF88
	}

	internal sealed class InternalFE // TypeDefIndex: 1032
	{
		// Fields
		internal FormatterTypeStyle FEtypeFormat; // 0x08
		internal FormatterAssemblyStyle FEassemblyFormat; // 0x0C
		internal TypeFilterLevel FEsecurityLevel; // 0x10
		internal InternalSerializerTypeE FEserializerTypeEnum; // 0x14
	
		// Constructors
		public InternalFE(); // 0x00384C94-0x00384C9C
	}

	internal sealed class NameInfo // TypeDefIndex: 1033
	{
		// Fields
		internal string NIFullName; // 0x08
		internal long NIobjectId; // 0x10
		internal long NIassemId; // 0x18
		internal InternalPrimitiveTypeE NIprimitiveTypeEnum; // 0x20
		internal Type NItype; // 0x24
		internal bool NIisSealed; // 0x28
		internal bool NIisArray; // 0x29
		internal bool NIisArrayItem; // 0x2A
		internal bool NItransmitTypeOnObject; // 0x2B
		internal bool NItransmitTypeOnMember; // 0x2C
		internal bool NIisParentTypeOnObject; // 0x2D
		internal InternalArrayTypeE NIarrayEnum; // 0x30
		private bool NIsealedStatusChecked; // 0x34
	
		// Properties
		public bool IsSealed { get; } // 0x0038AD88-0x0038ADE0 
		public string NIname { get; set; } // 0x0038ADE0-0x0038AE28 0x0038AE28-0x0038AE30
	
		// Constructors
		internal NameInfo(); // 0x0038AD58-0x0038AD60
	
		// Methods
		internal void Init(); // 0x0038AD60-0x0038AD88
	}

	internal sealed class PrimitiveArray // TypeDefIndex: 1034
	{
		// Fields
		private InternalPrimitiveTypeE code; // 0x08
		private bool[] booleanA; // 0x0C
		private char[] charA; // 0x10
		private double[] doubleA; // 0x14
		private short[] int16A; // 0x18
		private int[] int32A; // 0x1C
		private long[] int64A; // 0x20
		private sbyte[] sbyteA; // 0x24
		private float[] singleA; // 0x28
		private ushort[] uint16A; // 0x2C
		private uint[] uint32A; // 0x30
		private ulong[] uint64A; // 0x34
	
		// Constructors
		internal PrimitiveArray(InternalPrimitiveTypeE code, Array array); // 0x0038FF8C-0x0038FFBC
	
		// Methods
		internal void Init(InternalPrimitiveTypeE code, Array array); // 0x0039664C-0x00396D3C
		internal void SetValue(string value, int index); // 0x00391234-0x00391844
	}
}

namespace System.Runtime.Remoting
{
	[Serializable]
	internal class ChannelInfo : IChannelInfo // TypeDefIndex: 1035
	{
		// Fields
		private object[] channelData; // 0x08
	
		// Properties
		public object[] ChannelData { get; } // 0x002D93B0-0x002D93B8 
	
		// Constructors
		public ChannelInfo(); // 0x002D8D40-0x002D8DCC
		public ChannelInfo(object remoteChannelData); // 0x002D92D4-0x002D93B0
	}

	[ComVisible] // 0x0013E62C-0x0013E640
	public class ActivatedClientTypeEntry : TypeEntry // TypeDefIndex: 1036
	{
		// Fields
		private string applicationUrl; // 0x10
		private Type obj_type; // 0x14
	
		// Properties
		public string ApplicationUrl { get; } // 0x002D34F0-0x002D34F8 
		public IContextAttribute[] ContextAttributes { get; } // 0x002D34F8-0x002D3500 
		public Type ObjectType { get; } // 0x002D3500-0x002D3508 
	
		// Constructors
		public ActivatedClientTypeEntry(string typeName, string assemblyName, string appUrl); // 0x002D3360-0x002D34F0
	
		// Methods
		public override string ToString(); // 0x002D3508-0x002D3544
	}

	[ComVisible] // 0x0013E640-0x0013E654
	public class ActivatedServiceTypeEntry : TypeEntry // TypeDefIndex: 1037
	{
		// Fields
		private Type obj_type; // 0x10
	
		// Properties
		public Type ObjectType { get; } // 0x002D36CC-0x002D36D4 
	
		// Constructors
		public ActivatedServiceTypeEntry(string typeName, string assemblyName); // 0x002D3544-0x002D36CC
	
		// Methods
		public override string ToString(); // 0x002D36D4-0x002D370C
	}

	[Serializable]
	internal class EnvoyInfo : IEnvoyInfo // TypeDefIndex: 1038
	{
		// Fields
		private IMessageSink envoySinks; // 0x08
	
		// Properties
		public IMessageSink EnvoySinks { get; } // 0x006634B8-0x006634C0 
	
		// Constructors
		public EnvoyInfo(IMessageSink sinks); // 0x00663498-0x006634B8
	}

	[ComVisible] // 0x0013E654-0x0013E668
	public interface IChannelInfo // TypeDefIndex: 1039
	{
		// Properties
		object[] ChannelData { get; }
	}

	[ComVisible] // 0x0013E668-0x0013E67C
	public interface IEnvoyInfo // TypeDefIndex: 1040
	{
		// Properties
		IMessageSink EnvoySinks { get; }
	}

	[ComVisible] // 0x0013E67C-0x0013E690
	public interface IRemotingTypeInfo // TypeDefIndex: 1041
	{
		// Properties
		string TypeName { get; }
	
		// Methods
		bool CanCastTo(Type fromType, object o);
	}

	internal abstract class Identity // TypeDefIndex: 1042
	{
		// Fields
		protected string _objectUri; // 0x08
		protected IMessageSink _channelSink; // 0x0C
		protected IMessageSink _envoySink; // 0x10
		private DynamicPropertyCollection _clientDynamicProperties; // 0x14
		private DynamicPropertyCollection _serverDynamicProperties; // 0x18
		protected ObjRef _objRef; // 0x1C
		private bool _disposed; // 0x20
	
		// Properties
		public IMessageSink ChannelSink { get; set; } // 0x00663560-0x00663568 0x00663568-0x00663570
		public IMessageSink EnvoySink { get; } // 0x00663570-0x00663578 
		public string ObjectUri { get; set; } // 0x00663578-0x00663580 0x00663580-0x00663588
		public bool IsConnected { get; } // 0x00663588-0x00663598 
		public bool Disposed { get; set; } // 0x00663598-0x006635A0 0x006635A0-0x006635A8
		public DynamicPropertyCollection ClientDynamicProperties { get; } // 0x006635A8-0x00663624 
		public bool HasServerDynamicSinks { get; } // 0x00663624-0x00663678 
	
		// Constructors
		public Identity(string objectUri); // 0x00663540-0x00663560
	
		// Methods
		public abstract ObjRef CreateObjRef(Type requestedType);
		public void NotifyClientDynamicSinks(bool start, IMessage req_msg, bool client_site, bool async); // 0x00663678-0x00663708
		public void NotifyServerDynamicSinks(bool start, IMessage req_msg, bool client_site, bool async); // 0x00663708-0x00663798
	}

	internal class ClientIdentity : Identity // TypeDefIndex: 1043
	{
		// Fields
		private WeakReference _proxyReference; // 0x24
	
		// Properties
		public MarshalByRefObject ClientProxy { get; set; } // 0x002DECF0-0x002DEE0C 0x002DEE0C-0x002DEE84
		public string TargetUri { get; } // 0x002DEE8C-0x002DEEC0 
	
		// Constructors
		public ClientIdentity(string objectUri, ObjRef objRef); // 0x002DEB78-0x002DECF0
	
		// Methods
		public override ObjRef CreateObjRef(Type requestedType); // 0x002DEE84-0x002DEE8C
	}

	[ComVisible] // 0x0013E690-0x0013E6A4
	public class InternalRemotingServices // TypeDefIndex: 1044
	{
		// Fields
		private static Hashtable _soapAttributes; // 0x00
	
		// Constructors
		static InternalRemotingServices(); // 0x00663E84-0x00663F04
	
		// Methods
		public static SoapAttribute GetCachedSoapAttribute(object reflectionObject); // 0x00663798-0x00663E64
	}

	[Serializable]
	[ComVisible] // 0x0013E6A4-0x0013E6B8
	public class ObjRef : IObjectReference, ISerializable // TypeDefIndex: 1045
	{
		// Fields
		private IChannelInfo channel_info; // 0x08
		private string uri; // 0x0C
		private IRemotingTypeInfo typeInfo; // 0x10
		private IEnvoyInfo envoyInfo; // 0x14
		private int flags; // 0x18
		private Type _serverType; // 0x1C
		private static int MarshalledObjectRef; // 0x00
		private static int WellKnowObjectRef; // 0x04
	
		// Properties
		internal bool IsReferenceToWellKnow { get; } // 0x0067D438-0x0067D4DC 
		public virtual IChannelInfo ChannelInfo { [ReliabilityContract] /* 0x00145A5C-0x00145A74 */ get; } // 0x0067D4DC-0x0067D4E4 
		public virtual IEnvoyInfo EnvoyInfo { get; set; } // 0x0067D4E4-0x0067D4EC 0x0067D4EC-0x0067D4F4
		public virtual IRemotingTypeInfo TypeInfo { get; set; } // 0x0067D4F4-0x0067D4FC 0x0067D4FC-0x0067D504
		public virtual string URI { get; set; } // 0x0067D504-0x0067D50C 0x0067D50C-0x0067D514
		internal Type ServerType { get; } // 0x0067D824-0x0067D9B0 
	
		// Constructors
		public ObjRef(); // 0x0067CAEC-0x0067CB0C
		internal ObjRef(string uri, IChannelInfo cinfo); // 0x0067CB7C-0x0067CBA4
		internal ObjRef(Type type, string url, object remoteChannelData); // 0x0067CBA4-0x0067CCB4
		protected ObjRef(SerializationInfo info, StreamingContext context); // 0x0067CCB4-0x0067D438
		static ObjRef(); // 0x0067D9B0-0x0067DA28
	
		// Methods
		internal ObjRef DeserializeInTheCurrentDomain(int domainId, byte[] tInfo); // 0x0066A0D8-0x0066A268
		internal byte[] SerializeType(); // 0x0066B818-0x0066B8F8
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0067D514-0x0067D748
		public virtual object GetRealObject(StreamingContext context); // 0x0067D748-0x0067D824
		internal void UpdateChannelInfo(); // 0x0067CB0C-0x0067CB7C
	}

	[ComVisible] // 0x0013E6B8-0x0013E6CC
	public static class RemotingConfiguration // TypeDefIndex: 1046
	{
		// Fields
		private static string applicationID; // 0x00
		private static string applicationName; // 0x04
		private static string processGuid; // 0x08
		private static bool defaultConfigRead; // 0x0C
		private static bool defaultDelayedConfigRead; // 0x0D
		private static string _errorMode; // 0x10
		private static Hashtable wellKnownClientEntries; // 0x14
		private static Hashtable activatedClientEntries; // 0x18
		private static Hashtable wellKnownServiceEntries; // 0x1C
		private static Hashtable activatedServiceEntries; // 0x20
		private static Hashtable channelTemplates; // 0x24
		private static Hashtable clientProviderTemplates; // 0x28
		private static Hashtable serverProviderTemplates; // 0x2C
	
		// Properties
		public static string ApplicationName { get; set; } // 0x00682DCC-0x00682E58 0x00682E58-0x00682EE8
		public static string ProcessId { get; } // 0x00682EE8-0x00683000 
	
		// Constructors
		static RemotingConfiguration(); // 0x006863E4-0x00686558
	
		// Methods
		internal static void LoadDefaultDelayedChannels(); // 0x00683000-0x006833BC
		public static bool IsActivationAllowed(Type svrType); // 0x006833BC-0x0068354C
		public static ActivatedClientTypeEntry IsRemotelyActivatedClientType(Type svrType); // 0x0068354C-0x00683728
		public static WellKnownClientTypeEntry IsWellKnownClientType(Type svrType); // 0x00683728-0x00683904
		public static void RegisterActivatedClientType(ActivatedClientTypeEntry entry); // 0x00683904-0x00683CF0
		public static void RegisterActivatedServiceType(ActivatedServiceTypeEntry entry); // 0x00683CF0-0x00683E9C
		public static void RegisterWellKnownClientType(WellKnownClientTypeEntry entry); // 0x00683E9C-0x00684288
		public static void RegisterWellKnownServiceType(WellKnownServiceTypeEntry entry); // 0x00684288-0x006844E0
		internal static void RegisterChannelTemplate(ChannelData channel); // 0x00684640-0x00684710
		internal static void RegisterClientProviderTemplate(ProviderData prov); // 0x00684710-0x006847E0
		internal static void RegisterServerProviderTemplate(ProviderData prov); // 0x006847E0-0x006848B0
		internal static void RegisterChannels(ArrayList channels, bool onlyDelayed); // 0x006848B0-0x006859D4
		internal static void RegisterTypes(ArrayList types); // 0x006859D4-0x00686104
		public static bool CustomErrorsEnabled(bool isLocalRequest); // 0x00686104-0x0068621C
		internal static void SetCustomErrorsMode(string mode); // 0x0068621C-0x006863E4
	}

	internal class ConfigHandler : SmallXmlParser.IContentHandler // TypeDefIndex: 1047
	{
		// Fields
		private ArrayList typeEntries; // 0x08
		private ArrayList channelInstances; // 0x0C
		private ChannelData currentChannel; // 0x10
		private Stack currentProviderData; // 0x14
		private string currentClientUrl; // 0x18
		private string appName; // 0x1C
		private string currentXmlPath; // 0x20
		private bool onlyDelayedChannels; // 0x24
	
		// Constructors
		public ConfigHandler(bool onlyDelayedChannels); // 0x002DEEC0-0x002DEF70
	
		// Methods
		private void ValidatePath(string element, params /* 0x00146338-0x00146348 */ string[] paths); // 0x002DEF70-0x002DF0C8
		private bool CheckPath(string path); // 0x002DF0C8-0x002DF200
		public void OnStartParsing(SmallXmlParser parser); // 0x002DF200-0x002DF204
		public void OnProcessingInstruction(string name, string text); // 0x002DF204-0x002DF208
		public void OnIgnorableWhitespace(string s); // 0x002DF208-0x002DF20C
		public void OnStartElement(string name, SmallXmlParser.IAttrList attrs); // 0x002DF20C-0x002DF404
		public void ParseElement(string name, SmallXmlParser.IAttrList attrs); // 0x002DF404-0x002E0B64
		public void OnEndElement(string name); // 0x002E2D00-0x002E2DD4
		private void ReadCustomProviderData(string name, SmallXmlParser.IAttrList attrs); // 0x002E0B64-0x002E10E4
		private void ReadLifetine(SmallXmlParser.IAttrList attrs); // 0x002E10E4-0x002E1798
		private TimeSpan ParseTime(string s); // 0x002E2DD4-0x002E32D8
		private void ReadChannel(SmallXmlParser.IAttrList attrs, bool isTemplate); // 0x002E1798-0x002E1D04
		private ProviderData ReadProvider(string name, SmallXmlParser.IAttrList attrs, bool isTemplate); // 0x002E1D04-0x002E2250
		private void ReadClientActivated(SmallXmlParser.IAttrList attrs); // 0x002E2530-0x002E2690
		private void ReadServiceActivated(SmallXmlParser.IAttrList attrs); // 0x002E2690-0x002E2764
		private void ReadClientWellKnown(SmallXmlParser.IAttrList attrs); // 0x002E2250-0x002E2350
		private void ReadServiceWellKnown(SmallXmlParser.IAttrList attrs); // 0x002E2350-0x002E2530
		private void ReadInteropXml(SmallXmlParser.IAttrList attrs, bool isElement); // 0x002E2764-0x002E29DC
		private void ReadPreload(SmallXmlParser.IAttrList attrs); // 0x002E29DC-0x002E2D00
		private string GetNotNull(SmallXmlParser.IAttrList attrs, string name); // 0x002E32D8-0x002E344C
		private string ExtractAssembly(ref string type); // 0x002E344C-0x002E3574
		public void OnChars(string ch); // 0x002E3574-0x002E3578
		public void OnEndParsing(SmallXmlParser parser); // 0x002E3578-0x002E36F8
	}

	internal class ChannelData // TypeDefIndex: 1048
	{
		// Fields
		internal string Ref; // 0x08
		internal string Type; // 0x0C
		internal string Id; // 0x10
		internal string DelayLoadAsClientChannel; // 0x14
		private ArrayList _serverProviders; // 0x18
		private ArrayList _clientProviders; // 0x1C
		private Hashtable _customProperties; // 0x20
	
		// Properties
		internal ArrayList ServerProviders { get; } // 0x002D7F40-0x002D7FC0 
		public ArrayList ClientProviders { get; } // 0x002D7FC0-0x002D8040 
		public Hashtable CustomProperties { get; } // 0x002D8040-0x002D80C0 
	
		// Constructors
		public ChannelData(); // 0x002D8C88-0x002D8D40
	
		// Methods
		public void CopyFrom(ChannelData other); // 0x002D80C0-0x002D8C88
	}

	internal class ProviderData // TypeDefIndex: 1049
	{
		// Fields
		internal string Ref; // 0x08
		internal string Type; // 0x0C
		internal string Id; // 0x10
		internal Hashtable CustomProperties; // 0x14
		internal IList CustomData; // 0x18
	
		// Constructors
		public ProviderData(); // 0x006634C4-0x00663540
	
		// Methods
		public void CopyFrom(ProviderData other); // 0x0067DA28-0x0067E2B0
	}

	internal class FormatterData : ProviderData // TypeDefIndex: 1050
	{
		// Constructors
		public FormatterData(); // 0x006634C0-0x006634C4
	}

	[Serializable]
	[ComVisible] // 0x0013E6CC-0x0013E6E0
	public class RemotingException : SystemException // TypeDefIndex: 1051
	{
		// Constructors
		public RemotingException(); // 0x00686558-0x00686560
		public RemotingException(string message); // 0x00662A50-0x00662A58
		protected RemotingException(SerializationInfo info, StreamingContext context); // 0x00686560-0x00686580
		public RemotingException(string message, Exception InnerException); // 0x00686580-0x00686588
	}

	[ComVisible] // 0x0013E6E0-0x0013E6F4
	public static class RemotingServices // TypeDefIndex: 1052
	{
		// Fields
		private static Hashtable uri_hash; // 0x00
		private static BinaryFormatter _serializationFormatter; // 0x04
		private static BinaryFormatter _deserializationFormatter; // 0x08
		private static string app_id; // 0x0C
		private static readonly object app_id_lock; // 0x10
		private static int next_id; // 0x14
		private static readonly MethodInfo FieldSetterMethod; // 0x18
		private static readonly MethodInfo FieldGetterMethod; // 0x1C
	
		// Nested types
		[Serializable]
		private class CACD // TypeDefIndex: 1053
		{
			// Fields
			public object d; // 0x08
			public object c; // 0x0C
	
			// Constructors
			public CACD(); // 0x00688DB8-0x00688DC0
		}
	
		// Constructors
		static RemotingServices(); // 0x00686588-0x00686888
	
		// Methods
		internal static object InternalExecute(MethodBase method, object obj, object[] parameters, out object[] out_args); // 0x00686904-0x00686908
		internal static MethodBase GetVirtualMethod(Type type, MethodBase method); // 0x00675C54-0x00675C58
		public static bool IsTransparentProxy(object proxy); // 0x006698A4-0x0066992C
		internal static IMethodReturnMessage InternalExecuteMessage(MarshalByRefObject target, IMethodCallMessage reqMsg); // 0x0067AF28-0x0067BDC0
		[ComVisible] // 0x00145A74-0x00145A88
		public static object Connect(Type classToProxy, string url); // 0x00686908-0x006869C0
		[ComVisible] // 0x00145A88-0x00145A9C
		public static object Connect(Type classToProxy, string url, object data); // 0x00686A60-0x00686B1C
		public static Type GetServerTypeForUri(string URI); // 0x006756E8-0x006757D4
		public static object Unmarshal(ObjRef objectRef); // 0x0066A268-0x0066A2EC
		public static object Unmarshal(ObjRef objectRef, bool fRefine); // 0x00686B1C-0x00686EC8
		public static ObjRef Marshal(MarshalByRefObject Obj); // 0x0066992C-0x006699B4
		public static ObjRef Marshal(MarshalByRefObject Obj, string ObjURI, Type RequestedType); // 0x00686EC8-0x00686F40
		private static string NewUri(); // 0x00686F40-0x00687490
		[ReliabilityContract] // 0x00145A9C-0x00145AB4
		public static RealProxy GetRealProxy(object proxy); // 0x00679024-0x0067909C
		public static MethodBase GetMethodBaseFromMethodMessage(IMethodMessage msg); // 0x00675C58-0x00676028
		internal static MethodBase GetMethodBaseFromName(Type type, string methodName, Type[] signature); // 0x006759C8-0x00675C54
		private static MethodBase FindInterfaceMethod(Type type, string methodName, Type[] signature); // 0x00687928-0x00687ABC
		public static void GetObjectData(object obj, SerializationInfo info, StreamingContext context); // 0x0067909C-0x00679250
		public static bool IsOneWay(MethodBase method); // 0x00678AC4-0x00678B88
		internal static object CreateClientProxy(ActivatedClientTypeEntry entry, object[] activationAttributes); // 0x00687ABC-0x00687D2C
		internal static object CreateClientProxy(Type objectType, string url, object[] activationAttributes); // 0x00687D2C-0x00687EA4
		internal static object CreateClientProxy(WellKnownClientTypeEntry entry); // 0x00688000-0x006880D4
		internal static object CreateClientProxyForContextBound(Type type, object[] activationAttributes); // 0x006880D4-0x006882F4
		internal static Identity GetIdentityForUri(string uri); // 0x00680750-0x00680AE8
		private static string RemoveAppNameFromUri(string uri); // 0x00688398-0x006884B0
		internal static ClientIdentity GetOrCreateClientIdentity(ObjRef objRef, Type proxyType, out object clientProxy); // 0x006884B0-0x00688B24
		private static IMessageSink GetClientChannelSinkChain(string url, object channelData, out string objectUri); // 0x00687EA4-0x00688000
		internal static ClientActivatedIdentity CreateContextBoundObjectIdentity(Type objectType); // 0x00688B24-0x00688BE8
		internal static ClientActivatedIdentity CreateClientActivatedServerIdentity(MarshalByRefObject realObject, Type objectType, string objectUri); // 0x00687738-0x00687928
		internal static ServerIdentity CreateWellKnownServerIdentity(Type objectType, string objectUri, WellKnownObjectMode mode); // 0x006844E0-0x00684640
		private static void RegisterServerIdentity(ServerIdentity identity); // 0x00687490-0x00687738
		internal static object GetProxyForRemoteObject(ObjRef objref, Type classToProxy); // 0x0067E510-0x0067E640
		internal static object GetRemoteObject(ObjRef objRef, Type proxyType); // 0x006869C0-0x00686A60
		internal static byte[] SerializeCallData(object obj); // 0x00688BE8-0x00688DB8
		internal static object DeserializeCallData(byte[] array); // 0x00688DC0-0x00688FF8
		internal static byte[] SerializeExceptionData(Exception ex); // 0x00688FF8-0x006890F0
		private static void RegisterInternalChannels(); // 0x00686888-0x00686904
		internal static void DisposeIdentity(Identity ident); // 0x00682018-0x00682298
		internal static Identity GetMessageTargetIdentity(IMessage msg); // 0x00660D48-0x00661284
		internal static void SetMessageTargetIdentity(IMessage msg, Identity ident); // 0x006890F0-0x00689354
		internal static bool UpdateOutArgObject(ParameterInfo pi, object local, object remote); // 0x00680AE8-0x00680E54
		private static string GetNormalizedUri(string uri); // 0x006882F4-0x00688398
	}

	internal abstract class ServerIdentity : Identity // TypeDefIndex: 1054
	{
		// Fields
		protected Type _objectType; // 0x24
		protected MarshalByRefObject _serverObject; // 0x28
		protected IMessageSink _serverSink; // 0x2C
		protected Context _context; // 0x30
		protected Lease _lease; // 0x34
	
		// Properties
		public Type ObjectType { get; } // 0x0037925C-0x00379264 
		public Lease Lease { get; } // 0x00379DA8-0x00379DB0 
		public Context Context { get; set; } // 0x00379DB0-0x00379DB8 0x00379DB8-0x00379DC0
	
		// Constructors
		public ServerIdentity(string objectUri, Context context, Type objectType); // 0x00379234-0x0037925C
	
		// Methods
		public void StartTrackingLifetime(ILease lease); // 0x00379264-0x00379464
		public virtual void OnLifetimeExpired(); // 0x00379464-0x00379468
		public override ObjRef CreateObjRef(Type requestedType); // 0x00379510-0x003796F0
		public void AttachServerObject(MarshalByRefObject serverObject, Context context); // 0x00379C10-0x00379DA8
		public abstract IMessage SyncObjectProcessMessage(IMessage msg);
		public abstract IMessageCtrl AsyncObjectProcessMessage(IMessage msg, IMessageSink replySink);
		protected void DisposeServerObject(); // 0x00379468-0x00379510
	}

	internal class ClientActivatedIdentity : ServerIdentity // TypeDefIndex: 1055
	{
		// Fields
		private MarshalByRefObject _targetThis; // 0x38
	
		// Constructors
		public ClientActivatedIdentity(string objectUri, Type objectType); // 0x002DE648-0x002DE670
	
		// Methods
		public MarshalByRefObject GetServerObject(); // 0x002DE670-0x002DE678
		public void SetClientProxy(MarshalByRefObject obj); // 0x002DE678-0x002DE680
		public override void OnLifetimeExpired(); // 0x002DE680-0x002DE710
		public override IMessage SyncObjectProcessMessage(IMessage msg); // 0x002DE710-0x002DE848
		public override IMessageCtrl AsyncObjectProcessMessage(IMessage msg, IMessageSink replySink); // 0x002DEA30-0x002DEB78
	}

	internal class SingletonIdentity : ServerIdentity // TypeDefIndex: 1056
	{
		// Constructors
		public SingletonIdentity(string objectUri, Context context, Type objectType); // 0x0037B09C-0x0037B0C4
	
		// Methods
		public MarshalByRefObject GetServerObject(); // 0x0037B0C4-0x0037B378
		public override IMessage SyncObjectProcessMessage(IMessage msg); // 0x0037B378-0x0037B4A8
		public override IMessageCtrl AsyncObjectProcessMessage(IMessage msg, IMessageSink replySink); // 0x0037B4A8-0x0037B5E8
	}

	internal class SingleCallIdentity : ServerIdentity // TypeDefIndex: 1057
	{
		// Constructors
		public SingleCallIdentity(string objectUri, Context context, Type objectType); // 0x0037AA58-0x0037AA80
	
		// Methods
		public override IMessage SyncObjectProcessMessage(IMessage msg); // 0x0037AA80-0x0037AE04
		public override IMessageCtrl AsyncObjectProcessMessage(IMessage msg, IMessageSink replySink); // 0x0037AE04-0x0037B09C
	}

	internal class DisposerReplySink : IMessageSink // TypeDefIndex: 1058
	{
		// Fields
		private IMessageSink _next; // 0x08
		private IDisposable _disposable; // 0x0C
	
		// Constructors
		public DisposerReplySink(IMessageSink next, IDisposable disposable); // 0x0066327C-0x006632A4
	
		// Methods
		public IMessage SyncProcessMessage(IMessage msg); // 0x006632A4-0x00663410
		public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x00663410-0x00663498
	}

	[ComVisible] // 0x0013E6F4-0x0013E708
	public class SoapServices // TypeDefIndex: 1059
	{
		// Fields
		private static Hashtable _xmlTypes; // 0x00
		private static Hashtable _xmlElements; // 0x04
		private static Hashtable _soapActions; // 0x08
		private static Hashtable _soapActionsMethods; // 0x0C
		private static Hashtable _typeInfos; // 0x10
	
		// Properties
		public static string XmlNsForClrTypeWithAssembly { get; } // 0x0037B5E8-0x0037B644 
		public static string XmlNsForClrTypeWithNs { get; } // 0x0037B644-0x0037B6A0 
		public static string XmlNsForClrTypeWithNsAndAssembly { get; } // 0x0037B6A0-0x0037B6FC 
	
		// Nested types
		private class TypeInfo // TypeDefIndex: 1060
		{
			// Fields
			public Hashtable Attributes; // 0x08
			public Hashtable Elements; // 0x0C
	
			// Constructors
			public TypeInfo(); // 0x0037CD7C-0x0037CD84
		}
	
		// Constructors
		static SoapServices(); // 0x0037CD84-0x0037CE84
	
		// Methods
		public static string CodeXmlNamespaceForClrTypeNamespace(string typeNamespace, string assemblyName); // 0x0037B6FC-0x0037B954
		private static string GetNameKey(string name, string namspace); // 0x0037BA5C-0x0037BADC
		private static string GetAssemblyName(MethodBase mb); // 0x0037BADC-0x0037BCA0
		public static bool GetXmlElementForInteropType(Type type, out string xmlElement, out string xmlNamespace); // 0x0037BCA0-0x0037BE40
		public static string GetXmlNamespaceForMethodCall(MethodBase mb); // 0x0037BE40-0x0037BF1C
		public static string GetXmlNamespaceForMethodResponse(MethodBase mb); // 0x0037BF1C-0x0037BFF8
		public static bool GetXmlTypeForInteropType(Type type, out string xmlType, out string xmlTypeNamespace); // 0x0037BFF8-0x0037C190
		public static void PreLoad(Assembly assembly); // 0x0037C190-0x0037C280
		public static void PreLoad(Type type); // 0x0037C280-0x0037C9B4
		public static void RegisterInteropXmlElement(string xmlElement, string xmlNamespace, Type type); // 0x0037CB98-0x0037CD7C
		public static void RegisterInteropXmlType(string xmlType, string xmlTypeNamespace, Type type); // 0x0037C9B4-0x0037CB98
		private static string EncodeNs(string ns); // 0x0037B954-0x0037BA5C
	}

	[ComVisible] // 0x0013E708-0x0013E71C
	public class TypeEntry // TypeDefIndex: 1061
	{
		// Fields
		private string assembly_name; // 0x08
		private string type_name; // 0x0C
	
		// Properties
		public string AssemblyName { get; set; } // 0x0037CE8C-0x0037CE94 0x0037CE94-0x0037CE9C
		public string TypeName { get; set; } // 0x0037CE9C-0x0037CEA4 0x0037CEA4-0x0037CEAC
	
		// Constructors
		protected TypeEntry(); // 0x0037CE84-0x0037CE8C
	}

	[Serializable]
	internal class TypeInfo : IRemotingTypeInfo // TypeDefIndex: 1062
	{
		// Fields
		private string serverType; // 0x08
		private string[] serverHierarchy; // 0x0C
		private string[] interfacesImplemented; // 0x10
	
		// Properties
		public string TypeName { get; } // 0x0037CEAC-0x0037CEB4 
	
		// Constructors
		public TypeInfo(Type type); // 0x003796F0-0x00379C10
	
		// Methods
		public bool CanCastTo(Type fromType, object o); // 0x0037CEB4-0x0037D210
	}

	[ComVisible] // 0x0013E71C-0x0013E730
	public class WellKnownClientTypeEntry : TypeEntry // TypeDefIndex: 1063
	{
		// Fields
		private Type obj_type; // 0x10
		private string obj_url; // 0x14
		private string app_url; // 0x18
	
		// Properties
		public string ApplicationUrl { get; } // 0x0037D388-0x0037D390 
		public Type ObjectType { get; } // 0x0037D390-0x0037D398 
		public string ObjectUrl { get; } // 0x0037D398-0x0037D3A0 
	
		// Constructors
		public WellKnownClientTypeEntry(string typeName, string assemblyName, string objectUrl); // 0x0037D210-0x0037D388
	
		// Methods
		public override string ToString(); // 0x0037D3A0-0x0037D3E4
	}

	[Serializable]
	[ComVisible] // 0x0013E730-0x0013E744
	public enum WellKnownObjectMode // TypeDefIndex: 1064
	{
		Singleton = 1,
		SingleCall = 2
	}

	[ComVisible] // 0x0013E744-0x0013E758
	public class WellKnownServiceTypeEntry : TypeEntry // TypeDefIndex: 1065
	{
		// Fields
		private Type obj_type; // 0x10
		private string obj_uri; // 0x14
		private WellKnownObjectMode obj_mode; // 0x18
	
		// Properties
		public WellKnownObjectMode Mode { get; } // 0x0037D560-0x0037D568 
		public Type ObjectType { get; } // 0x0037D568-0x0037D570 
		public string ObjectUri { get; } // 0x0037D570-0x0037D578 
	
		// Constructors
		public WellKnownServiceTypeEntry(string typeName, string assemblyName, string objectUri, WellKnownObjectMode mode); // 0x0037D3E4-0x0037D560
	
		// Methods
		public override string ToString(); // 0x0037D578-0x0037D7D0
	}
}

namespace System.Runtime.Remoting.Services
{
	[ComVisible] // 0x0013E758-0x0013E76C
	public interface ITrackingHandler // TypeDefIndex: 1066
	{
		// Methods
		void DisconnectedObject(object obj);
		void MarshaledObject(object obj, ObjRef or);
		void UnmarshaledObject(object obj, ObjRef or);
	}

	[ComVisible] // 0x0013E76C-0x0013E780
	public class TrackingServices // TypeDefIndex: 1067
	{
		// Fields
		private static ArrayList _handlers; // 0x00
	
		// Constructors
		static TrackingServices(); // 0x0037A9D8-0x0037AA58
	
		// Methods
		internal static void NotifyMarshaledObject(object obj, ObjRef or); // 0x0037A1C8-0x0037A5D0
		internal static void NotifyUnmarshaledObject(object obj, ObjRef or); // 0x0037A5D0-0x0037A9D8
		internal static void NotifyDisconnectedObject(object obj); // 0x00379DC0-0x0037A1C8
	}
}

namespace System.Runtime.Remoting.Proxies
{
	[AttributeUsage] // 0x0013E780-0x0013E7B8
	[ComVisible] // 0x0013E780-0x0013E7B8
	public class ProxyAttribute : Attribute, IContextAttribute // TypeDefIndex: 1068
	{
		// Methods
		public virtual MarshalByRefObject CreateInstance(Type serverType); // 0x0067E2B0-0x0067E444
		public virtual RealProxy CreateProxy(ObjRef objRef, Type serverType, object serverObject, Context serverContext); // 0x0067E484-0x0067E510
		[ComVisible] // 0x00145AB4-0x00145AC8
		public void GetPropertiesForNewContext(IConstructionCallMessage msg); // 0x0067E640-0x0067E644
		[ComVisible] // 0x00145AC8-0x00145ADC
		public bool IsContextOK(Context ctx, IConstructionCallMessage msg); // 0x0067E644-0x0067E6A8
	}

	internal class TransparentProxy // TypeDefIndex: 1069
	{
		// Fields
		public RealProxy _rp; // 0x08
		private RuntimeRemoteClassHandle _class; // 0x0C
		private bool _custom_type_info; // 0x10
	
		// Properties
		private bool IsContextBoundObject { get; } // 0x00682578-0x006825A8 
		private Context TargetContext { get; } // 0x006825A8-0x006825CC 
	
		// Methods
		internal RuntimeType GetProxyType(); // 0x0068242C-0x00682578
		private bool InCurrentContext(); // 0x006825CC-0x0068261C
		internal object LoadRemoteFieldNew(IntPtr classPtr, IntPtr fieldPtr); // 0x0068261C-0x006829F4
		internal void StoreRemoteField(IntPtr classPtr, IntPtr fieldPtr, object arg); // 0x006829F4-0x00682DCC
	}

	[ComVisible] // 0x0013E7B8-0x0013E7CC
	public abstract class RealProxy // TypeDefIndex: 1070
	{
		// Fields
		private Type class_to_proxy; // 0x08
		internal Context _targetContext; // 0x0C
		internal MarshalByRefObject _server; // 0x10
		private int _targetDomainId; // 0x14
		internal string _targetUri; // 0x18
		internal Identity _objectIdentity; // 0x1C
		private object _objTP; // 0x20
		private object _stubData; // 0x24
	
		// Properties
		internal Identity ObjectIdentity { get; set; } // 0x0067EA74-0x0067EA7C 0x0067EA7C-0x0067EA84
	
		// Constructors
		protected RealProxy(Type classToProxy); // 0x0067E6A8-0x0067E710
		internal RealProxy(Type classToProxy, ClientIdentity identity); // 0x0067E874-0x0067E8E4
		protected RealProxy(Type classToProxy, IntPtr stub, object stubData); // 0x0067E710-0x0067E874
	
		// Methods
		private static Type InternalGetProxyType(object transparentProxy); // 0x0067E8E4-0x0067E8E8
		public Type GetProxiedType(); // 0x0067E8E8-0x0067E9BC
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0067E9BC-0x0067EA74
		public abstract IMessage Invoke(IMessage msg);
		internal static object PrivateInvoke(RealProxy rp, IMessage msg, out Exception exc, out object[] out_args); // 0x0067EA84-0x0067F878
		internal virtual object InternalGetTransparentProxy(string className); // 0x00680414-0x00680418
		public virtual object GetTransparentProxy(); // 0x00680418-0x006805EC
		protected void AttachServer(MarshalByRefObject s); // 0x006805EC-0x006805F4
		internal void SetTargetDomain(int domainId); // 0x006805F4-0x006805FC
		internal object GetAppDomainTarget(); // 0x006805FC-0x00680750
		private static object[] ProcessResponse(IMethodReturnMessage mrm, MonoMethodMessage call); // 0x0067F9BC-0x00680414
	}

	internal class RemotingProxy : RealProxy, IRemotingTypeInfo // TypeDefIndex: 1071
	{
		// Fields
		private static MethodInfo _cache_GetTypeMethod; // 0x00
		private static MethodInfo _cache_GetHashCodeMethod; // 0x04
		private IMessageSink _sink; // 0x28
		private bool _hasEnvoySink; // 0x2C
		private ConstructionCall _ctorCall; // 0x30
	
		// Properties
		public string TypeName { get; } // 0x00681AF0-0x00681C94 
	
		// Constructors
		internal RemotingProxy(Type type, ClientIdentity identity); // 0x00680E54-0x00680EBC
		internal RemotingProxy(Type type, string activationUrl, object[] activationAttributes); // 0x0067E444-0x0067E484
		static RemotingProxy(); // 0x00682298-0x0068242C
	
		// Methods
		public override IMessage Invoke(IMessage request); // 0x00680EBC-0x006815EC
		internal void AttachIdentity(Identity identity); // 0x006815EC-0x00681AF0
		internal IMessage ActivateRemoteObject(IMethodMessage request); // 0x0067F878-0x0067F9BC
		public bool CanCastTo(Type fromType, object o); // 0x00681C94-0x00681F04
		~RemotingProxy(); // 0x00681F04-0x00682018
	}
}

namespace System.Runtime.Remoting.Lifetime
{
	[ComVisible] // 0x0013E7CC-0x0013E7E0
	public interface ILease // TypeDefIndex: 1072
	{
		// Properties
		TimeSpan CurrentLeaseTime { get; }
		LeaseState CurrentState { get; }
		TimeSpan InitialLeaseTime { set; }
		TimeSpan RenewOnCallTime { get; set; }
		TimeSpan SponsorshipTimeout { set; }
	
		// Methods
		TimeSpan Renew(TimeSpan renewalTime);
	}

	[ComVisible] // 0x0013E7E0-0x0013E7F4
	public interface ISponsor // TypeDefIndex: 1073
	{
		// Methods
		TimeSpan Renewal(ILease lease);
	}

	internal class Lease : MarshalByRefObject, ILease // TypeDefIndex: 1074
	{
		// Fields
		private DateTime _leaseExpireTime; // 0x10
		private LeaseState _currentState; // 0x18
		private TimeSpan _initialLeaseTime; // 0x20
		private TimeSpan _renewOnCallTime; // 0x28
		private TimeSpan _sponsorshipTimeout; // 0x30
		private ArrayList _sponsors; // 0x38
		private Queue _renewingSponsors; // 0x3C
		private RenewalDelegate _renewalDelegate; // 0x40
	
		// Properties
		public TimeSpan CurrentLeaseTime { get; } // 0x006641F8-0x006642B0 
		public LeaseState CurrentState { get; } // 0x006642B0-0x006642B8 
		public TimeSpan InitialLeaseTime { set; } // 0x006642C4-0x0066448C
		public TimeSpan RenewOnCallTime { get; set; } // 0x0066448C-0x00664498 0x00664498-0x00664598
		public TimeSpan SponsorshipTimeout { set; } // 0x00664598-0x00664698
	
		// Nested types
		private delegate TimeSpan RenewalDelegate(ILease lease); // TypeDefIndex: 1075; 0x00665114-0x00665950
	
		// Constructors
		public Lease(); // 0x00663F04-0x0066403C
	
		// Methods
		public void Activate(); // 0x006642B8-0x006642C4
		public TimeSpan Renew(TimeSpan renewalTime); // 0x00664698-0x00664788
		public void Unregister(ISponsor obj); // 0x00664788-0x006648D4
		internal void UpdateState(); // 0x006648D4-0x00664A80
		private void CheckNextSponsor(); // 0x00664A80-0x00664D9C
		private void ProcessSponsorResponse(object state, bool timedOut); // 0x00664DDC-0x006650D4
	}

	internal class LeaseManager // TypeDefIndex: 1076
	{
		// Fields
		private ArrayList _objects; // 0x08
		private Timer _timer; // 0x0C
	
		// Constructors
		public LeaseManager(); // 0x00666088-0x00666104
	
		// Methods
		public void SetPollTime(TimeSpan timeSpan); // 0x00665950-0x00665A38
		public void TrackLifetime(ServerIdentity identity); // 0x00665A38-0x00665B84
		public void StartManager(); // 0x00665B84-0x00665C90
		public void StopManager(); // 0x00665D24-0x00665D44
		public void ManageLeases(object state); // 0x00665D44-0x00666088
	}

	internal class LeaseSink : IMessageSink // TypeDefIndex: 1077
	{
		// Fields
		private IMessageSink _nextSink; // 0x08
	
		// Constructors
		public LeaseSink(IMessageSink nextSink); // 0x00666104-0x00666124
	
		// Methods
		public IMessage SyncProcessMessage(IMessage msg); // 0x00666124-0x0066620C
		public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x00666628-0x00666718
		private void RenewLease(IMessage msg); // 0x0066620C-0x00666628
	}

	[Serializable]
	[ComVisible] // 0x0013E7F4-0x0013E808
	public enum LeaseState // TypeDefIndex: 1078
	{
		Null = 0,
		Initial = 1,
		Active = 2,
		Renewing = 3,
		Expired = 4
	}

	[ComVisible] // 0x0013E808-0x0013E81C
	public sealed class LifetimeServices // TypeDefIndex: 1079
	{
		// Fields
		private static TimeSpan _leaseManagerPollTime; // 0x00
		private static TimeSpan _leaseTime; // 0x08
		private static TimeSpan _renewOnCallTime; // 0x10
		private static TimeSpan _sponsorshipTimeout; // 0x18
		private static LeaseManager _leaseManager; // 0x20
	
		// Properties
		public static TimeSpan LeaseManagerPollTime { get; set; } // 0x00665C90-0x00665D24 0x00666880-0x00666958
		public static TimeSpan LeaseTime { get; set; } // 0x0066403C-0x006640D0 0x00666958-0x006669EC
		public static TimeSpan RenewOnCallTime { get; set; } // 0x006640D0-0x00664164 0x006669EC-0x00666A80
		public static TimeSpan SponsorshipTimeout { get; set; } // 0x00664164-0x006641F8 0x00666A80-0x00666B14
	
		// Constructors
		static LifetimeServices(); // 0x00666718-0x00666880
	
		// Methods
		internal static void TrackLifetime(ServerIdentity identity); // 0x00666B14-0x00666BC0
	}
}

namespace System.Runtime.Remoting.Contexts
{
	[ComVisible] // 0x0013E81C-0x0013E830
	public class Context // TypeDefIndex: 1080
	{
		// Fields
		private int domain_id; // 0x08
		private int context_id; // 0x0C
		private UIntPtr static_data; // 0x10
		private UIntPtr data; // 0x14
		[ContextStatic] // 0x00143148-0x00143158
		private static object[] local_slots; // 0x00
		private static IMessageSink default_server_context_sink; // 0x04
		private IMessageSink server_context_sink_chain; // 0x18
		private IMessageSink client_context_sink_chain; // 0x1C
		private List<IContextProperty> context_properties; // 0x20
		private static int global_count; // 0x08
		private LocalDataStoreHolder _localDataStore; // 0x24
		private static LocalDataStoreMgr _localDataStoreMgr; // 0x0C
		private static DynamicPropertyCollection global_dynamic_properties; // 0x10
		private DynamicPropertyCollection context_dynamic_properties; // 0x28
		private ContextCallbackObject callback_object; // 0x2C
	
		// Properties
		public static Context DefaultContext { get; } // 0x002E388C-0x002E3894 
		public virtual int ContextID { get; } // 0x002E3894-0x002E389C 
		public virtual IContextProperty[] ContextProperties { get; } // 0x002E389C-0x002E3924 
		internal bool IsDefaultContext { get; } // 0x002E3924-0x002E3938 
		internal bool NeedsContextSink { get; } // 0x002E3938-0x002E3A60 
		internal static bool HasGlobalDynamicSinks { get; } // 0x002E4018-0x002E4108 
		internal bool HasDynamicSinks { get; } // 0x002E4180-0x002E4198 
		internal bool HasExitSinks { get; } // 0x002D3B94-0x002D3C7C 
		private LocalDataStore MyLocalStore { get; } // 0x002E4B5C-0x002E4D38 
	
		// Constructors
		public Context(); // 0x002E3700-0x002E37BC
		static Context(); // 0x002E50A8-0x002E5128
	
		// Methods
		private static void RegisterContext(Context ctx); // 0x002E36F8-0x002E36FC
		private static void ReleaseContext(Context ctx); // 0x002E36FC-0x002E3700
		~Context(); // 0x002E37BC-0x002E388C
		public static bool RegisterDynamicProperty(IDynamicProperty prop, ContextBoundObject obj, Context ctx); // 0x002E3A60-0x002E3B10
		public static bool UnregisterDynamicProperty(string name, ContextBoundObject obj, Context ctx); // 0x002E3DEC-0x002E3E9C
		private static DynamicPropertyCollection GetDynamicPropertyCollection(ContextBoundObject obj, Context ctx); // 0x002E3B10-0x002E3DEC
		internal static void NotifyGlobalDynamicSinks(bool start, IMessage req_msg, bool client_site, bool async); // 0x002E3E9C-0x002E4018
		internal void NotifyDynamicSinks(bool start, IMessage req_msg, bool client_site, bool async); // 0x002E4108-0x002E4180
		public virtual IContextProperty GetProperty(string name); // 0x002E4198-0x002E43A0
		public virtual void SetProperty(IContextProperty prop); // 0x002E43A0-0x002E4540
		public virtual void Freeze(); // 0x002E4540-0x002E470C
		public override string ToString(); // 0x002E470C-0x002E479C
		internal IMessageSink GetServerContextSinkChain(); // 0x002D5F64-0x002D61D0
		internal IMessageSink GetClientContextSinkChain(); // 0x002D3C7C-0x002D3EB0
		internal IMessageSink CreateServerObjectSinkChain(MarshalByRefObject obj, bool forceInternalExecute); // 0x002DE848-0x002DEA30
		internal IMessageSink CreateEnvoySink(MarshalByRefObject serverObject); // 0x002E479C-0x002E49E0
		internal static Context SwitchToContext(Context newContext); // 0x002D7050-0x002D7058
		internal static Context CreateNewContext(IConstructionCallMessage msg); // 0x002D65A8-0x002D7050
		public void DoCallBack(CrossContextDelegate deleg); // 0x002E49E0-0x002E4B5C
		public static LocalDataStoreSlot AllocateDataSlot(); // 0x002E4D38-0x002E4DE0
		public static LocalDataStoreSlot AllocateNamedDataSlot(string name); // 0x002E4DE0-0x002E4E90
		public static void FreeNamedDataSlot(string name); // 0x002E4E90-0x002E4F40
		public static LocalDataStoreSlot GetNamedDataSlot(string name); // 0x002E4F40-0x002E4FF0
		public static object GetData(LocalDataStoreSlot slot); // 0x002E4FF0-0x002E5048
		public static void SetData(LocalDataStoreSlot slot, object data); // 0x002E5048-0x002E50A8
	}

	internal class DynamicPropertyCollection // TypeDefIndex: 1081
	{
		// Fields
		private ArrayList _properties; // 0x08
	
		// Properties
		public bool HasProperties { get; } // 0x00662284-0x006622C8 
	
		// Nested types
		private class DynamicPropertyReg // TypeDefIndex: 1082
		{
			// Fields
			public IDynamicProperty Property; // 0x08
			public IDynamicMessageSink Sink; // 0x0C
	
			// Constructors
			public DynamicPropertyReg(); // 0x00662898-0x006628A0
		}
	
		// Constructors
		public DynamicPropertyCollection(); // 0x00663200-0x0066327C
	
		// Methods
		public bool RegisterDynamicProperty(IDynamicProperty prop); // 0x006622C8-0x0066260C
		public bool UnregisterDynamicProperty(string name); // 0x006628A0-0x00662A50
		public void NotifyMessage(bool start, IMessage msg, bool client_site, bool async); // 0x00662A58-0x00663200
		private int FindProperty(string name); // 0x0066260C-0x00662898
	}

	internal class ContextCallbackObject : ContextBoundObject // TypeDefIndex: 1083
	{
		// Constructors
		public ContextCallbackObject(); // 0x006607DC-0x006607E4
	
		// Methods
		public void DoCallBack(CrossContextDelegate deleg); // 0x006607D8-0x006607DC
	}

	internal class CrossContextChannel : IMessageSink // TypeDefIndex: 1084
	{
		// Nested types
		private class ContextRestoreSink : IMessageSink // TypeDefIndex: 1085
		{
			// Fields
			private IMessageSink _next; // 0x08
			private Context _context; // 0x0C
			private IMessage _call; // 0x10
	
			// Constructors
			public ContextRestoreSink(IMessageSink next, Context context, IMessage call); // 0x006619CC-0x006619FC
	
			// Methods
			public IMessage SyncProcessMessage(IMessage msg); // 0x00661A04-0x00661D68
			public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x00661D68-0x00661DFC
		}
	
		// Constructors
		public CrossContextChannel(); // 0x006619FC-0x00661A04
	
		// Methods
		public IMessage SyncProcessMessage(IMessage msg); // 0x006607E4-0x00660D48
		public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x00661404-0x006619CC
	}

	[ComVisible] // 0x0013E830-0x0013E844
	public delegate void CrossContextDelegate(); // TypeDefIndex: 1086; 0x00661E10-0x0066224C

	[ComVisible] // 0x0013E844-0x0013E858
	public interface IContextAttribute // TypeDefIndex: 1087
	{
		// Methods
		void GetPropertiesForNewContext(IConstructionCallMessage msg);
		bool IsContextOK(Context ctx, IConstructionCallMessage msg);
	}

	[ComVisible] // 0x0013E858-0x0013E86C
	public interface IContextProperty // TypeDefIndex: 1088
	{
		// Properties
		string Name { get; }
	
		// Methods
		void Freeze(Context newContext);
		bool IsNewContextOK(Context newCtx);
	}

	[ComVisible] // 0x0013E86C-0x0013E880
	public interface IContributeClientContextSink // TypeDefIndex: 1089
	{
		// Methods
		IMessageSink GetClientContextSink(IMessageSink nextSink);
	}

	[ComVisible] // 0x0013E880-0x0013E894
	public interface IContributeDynamicSink // TypeDefIndex: 1090
	{
		// Methods
		IDynamicMessageSink GetDynamicSink();
	}

	[ComVisible] // 0x0013E894-0x0013E8A8
	public interface IContributeEnvoySink // TypeDefIndex: 1091
	{
		// Methods
		IMessageSink GetEnvoySink(MarshalByRefObject obj, IMessageSink nextSink);
	}

	[ComVisible] // 0x0013E8A8-0x0013E8BC
	public interface IContributeObjectSink // TypeDefIndex: 1092
	{
		// Methods
		IMessageSink GetObjectSink(MarshalByRefObject obj, IMessageSink nextSink);
	}

	[ComVisible] // 0x0013E8BC-0x0013E8D0
	public interface IContributeServerContextSink // TypeDefIndex: 1093
	{
		// Methods
		IMessageSink GetServerContextSink(IMessageSink nextSink);
	}

	[ComVisible] // 0x0013E8D0-0x0013E8E4
	public interface IDynamicMessageSink // TypeDefIndex: 1094
	{
		// Methods
		void ProcessMessageFinish(IMessage replyMsg, bool bCliSide, bool bAsync);
		void ProcessMessageStart(IMessage reqMsg, bool bCliSide, bool bAsync);
	}

	[ComVisible] // 0x0013E8E4-0x0013E8F8
	public interface IDynamicProperty // TypeDefIndex: 1095
	{
		// Properties
		string Name { get; }
	}
}

namespace System.Runtime.Remoting.Channels
{
	[ComVisible] // 0x0013E8F8-0x0013E90C
	public sealed class ChannelServices // TypeDefIndex: 1096
	{
		// Fields
		private static ArrayList registeredChannels; // 0x00
		private static ArrayList delayedClientChannels; // 0x04
		private static CrossContextChannel _crossContextSink; // 0x08
		internal static string CrossContextUrl; // 0x0C
		private static IList oldStartModeTypes; // 0x10
	
		// Properties
		internal static CrossContextChannel CrossContextChannel { get; } // 0x002D9884-0x002D9910 
	
		// Constructors
		static ChannelServices(); // 0x002DCF10-0x002DD110
	
		// Methods
		internal static IMessageSink CreateClientChannelSinkChain(string url, object remoteChannelData, out string objectUri); // 0x002D9910-0x002DA360
		internal static IMessageSink CreateClientChannelSinkChain(IChannelSender sender, string url, object[] channelDataArray, out string objectUri); // 0x002DA360-0x002DA59C
		[Obsolete] // 0x00145ADC-0x00145B30
		public static void RegisterChannel(IChannel chnl); // 0x002DA59C-0x002DA620
		public static void RegisterChannel(IChannel chnl, bool ensureSecurity); // 0x002DA620-0x002DB1A8
		internal static void RegisterChannelConfig(ChannelData channel); // 0x002DB1A8-0x002DC3B0
		private static object CreateProvider(ProviderData prov); // 0x002DC3B0-0x002DC7E4
		public static IMessage SyncDispatchMessage(IMessage msg); // 0x002DC7E4-0x002DC904
		private static ReturnMessage CheckIncomingMessage(IMessage msg); // 0x002DC904-0x002DCCB0
		internal static IMessage CheckReturnMessage(IMessage callMsg, IMessage retMsg); // 0x002DCCB0-0x002DCF08
		private static bool IsLocalCall(IMessage callMsg); // 0x002DCF08-0x002DCF10
		internal static object[] GetCurrentChannelInfo(); // 0x002D8DCC-0x002D92D4
	}

	[Serializable]
	internal class CrossAppDomainData // TypeDefIndex: 1097
	{
		// Fields
		private object _ContextID; // 0x08
		private int _DomainID; // 0x0C
		private string _processGuid; // 0x10
	
		// Properties
		internal int DomainID { get; } // 0x002DD5E8-0x002DD5F0 
		internal string ProcessID { get; } // 0x002DD5E0-0x002DD5E8 
	
		// Constructors
		internal CrossAppDomainData(int domainId); // 0x002DD360-0x002DD424
	}

	[Serializable]
	internal class CrossAppDomainChannel : IChannelSender, IChannelReceiver // TypeDefIndex: 1098
	{
		// Fields
		private static object s_lock; // 0x00
	
		// Properties
		public virtual string ChannelName { get; } // 0x002DD284-0x002DD2E0 
		public virtual int ChannelPriority { get; } // 0x002DD2E0-0x002DD2E8 
		public virtual object ChannelData { get; } // 0x002DD2E8-0x002DD360 
	
		// Constructors
		public CrossAppDomainChannel(); // 0x002DD27C-0x002DD284
		static CrossAppDomainChannel(); // 0x002DD9D4-0x002DDA54
	
		// Methods
		internal static void RegisterCrossAppDomainChannel(); // 0x002DD110-0x002DD27C
		public virtual void StartListening(object data); // 0x002DD424-0x002DD428
		public virtual IMessageSink CreateMessageSink(string url, object data, out string uri); // 0x002DD428-0x002DD5E0
	}

	[MonoTODO] // 0x0013E90C-0x0013E954
	internal class CrossAppDomainSink : IMessageSink // TypeDefIndex: 1099
	{
		// Fields
		private static Hashtable s_sinks; // 0x00
		private static MethodInfo processMessageMethod; // 0x04
		private int _domainID; // 0x08
	
		// Properties
		internal int TargetDomainId { get; } // 0x002DDA74-0x002DDA7C 
	
		// Nested types
		private struct ProcessMessageRes // TypeDefIndex: 1100
		{
			// Fields
			public byte[] arrResponse; // 0x00
			public CADMethodReturnMessage cadMrm; // 0x04
		}
	
		// Constructors
		internal CrossAppDomainSink(int domainID); // 0x002DDA54-0x002DDA74
		static CrossAppDomainSink(); // 0x002DE33C-0x002DE450
	
		// Methods
		internal static CrossAppDomainSink GetSink(int domainID); // 0x002DD5F0-0x002DD9D4
		private static ProcessMessageRes ProcessMessageInDomain(byte[] arrRequest, CADMethodCallMessage cadMsg); // 0x002DDA7C-0x002DDC38
		public virtual IMessage SyncProcessMessage(IMessage msgRequest); // 0x002DDC38-0x002DE0BC
		public virtual IMessageCtrl AsyncProcessMessage(IMessage reqMsg, IMessageSink replySink); // 0x002DE0BC-0x002DE184
		public void SendAsyncMessage(object data); // 0x002DE184-0x002DE33C
		[CompilerGenerated] // 0x00145B30-0x00145B40
		private void <AsyncProcessMessage>b__10_0(object data); // 0x002DE450-0x002DE590
	}

	internal class CADSerializer // TypeDefIndex: 1101
	{
		// Methods
		internal static IMessage DeserializeMessage(MemoryStream mem, IMethodCallMessage msg); // 0x002D93E0-0x002D9468
		internal static MemoryStream SerializeMessage(IMessage msg); // 0x002D9468-0x002D95A0
		internal static object DeserializeObjectSafe(byte[] mem); // 0x002D95A0-0x002D9668
		internal static MemoryStream SerializeObject(object obj); // 0x002D974C-0x002D9884
		internal static object DeserializeObject(MemoryStream mem); // 0x002D9668-0x002D974C
	}

	internal class AsyncRequest // TypeDefIndex: 1102
	{
		// Fields
		internal IMessageSink ReplySink; // 0x08
		internal IMessage MsgRequest; // 0x0C
	
		// Constructors
		public AsyncRequest(IMessage msgRequest, IMessageSink replySink); // 0x002D93B8-0x002D93E0
	}

	[ComVisible] // 0x0013E954-0x0013E968
	public interface IChannel // TypeDefIndex: 1103
	{
		// Properties
		string ChannelName { get; }
		int ChannelPriority { get; }
	}

	[ComVisible] // 0x0013E968-0x0013E9B4
	[DefaultMember] // 0x0013E968-0x0013E9B4
	public interface IChannelDataStore // TypeDefIndex: 1104
	{
	}

	[ComVisible] // 0x0013E9B4-0x0013E9C8
	public interface IChannelReceiver : IChannel // TypeDefIndex: 1105
	{
		// Properties
		object ChannelData { get; }
	
		// Methods
		void StartListening(object data);
	}

	[ComVisible] // 0x0013E9C8-0x0013E9DC
	public interface IChannelSender : IChannel // TypeDefIndex: 1106
	{
		// Methods
		IMessageSink CreateMessageSink(string url, object remoteChannelData, out string objectURI);
	}

	[ComVisible] // 0x0013E9DC-0x0013E9F0
	public interface IClientChannelSinkProvider // TypeDefIndex: 1107
	{
		// Properties
		IClientChannelSinkProvider Next { set; }
	}

	public interface ISecurableChannel // TypeDefIndex: 1108
	{
		// Properties
		bool IsSecured { set; }
	}

	[ComVisible] // 0x0013E9F0-0x0013EA04
	public interface IServerChannelSinkProvider // TypeDefIndex: 1109
	{
		// Properties
		IServerChannelSinkProvider Next { set; }
	}

	[ComVisible] // 0x0013EA04-0x0013EA18
	public class SinkProviderData // TypeDefIndex: 1110
	{
		// Fields
		private string sinkName; // 0x08
		private ArrayList children; // 0x0C
		private Hashtable properties; // 0x10
	
		// Properties
		public IList Children { get; } // 0x002DE638-0x002DE640 
		public IDictionary Properties { get; } // 0x002DE640-0x002DE648 
	
		// Constructors
		public SinkProviderData(string name); // 0x002DE590-0x002DE638
	}
}

namespace System.Runtime.Remoting.Activation
{
	internal class ActivationServices // TypeDefIndex: 1111
	{
		// Fields
		private static IActivator _constructionActivator; // 0x00
	
		// Properties
		private static IActivator ConstructionActivator { get; } // 0x002D370C-0x002D37B8 
	
		// Methods
		public static IMessage Activate(RemotingProxy proxy, ConstructionCall ctorCall); // 0x002D37C0-0x002D3B94
		public static IMessage RemoteActivate(IConstructionCallMessage ctorCall); // 0x002D3EB0-0x002D40D0
		public static ConstructionCall CreateConstructionCall(Type type, string activationUrl, object[] activationAttributes); // 0x002D40D0-0x002D4EF4
		public static IMessage CreateInstanceFromMessage(IConstructionCallMessage ctorCall); // 0x002D4F3C-0x002D5578
		public static object CreateProxyForType(Type type); // 0x002D557C-0x002D5730
		public static object AllocateUninitializedClassInstance(Type type); // 0x002D5578-0x002D557C
		public static void EnableProxyActivation(Type type, bool enable); // 0x002D5730-0x002D5734
	}

	internal class AppDomainLevelActivator : IActivator // TypeDefIndex: 1112
	{
		// Fields
		private string _activationUrl; // 0x08
		private IActivator _next; // 0x0C
	
		// Properties
		public IActivator NextActivator { get; } // 0x002D5734-0x002D573C 
	
		// Constructors
		public AppDomainLevelActivator(string activationUrl, IActivator next); // 0x002D4EF4-0x002D4F1C
	
		// Methods
		public IConstructionReturnMessage Activate(IConstructionCallMessage ctorCall); // 0x002D573C-0x002D5DBC
	}

	[Serializable]
	internal class ConstructionLevelActivator : IActivator // TypeDefIndex: 1113
	{
		// Properties
		public IActivator NextActivator { get; } // 0x002D5DBC-0x002D5DC4 
	
		// Constructors
		public ConstructionLevelActivator(); // 0x002D37B8-0x002D37C0
	
		// Methods
		public IConstructionReturnMessage Activate(IConstructionCallMessage msg); // 0x002D5DC4-0x002D5F64
	}

	[Serializable]
	internal class ContextLevelActivator : IActivator // TypeDefIndex: 1114
	{
		// Fields
		private IActivator m_NextActivator; // 0x08
	
		// Properties
		public IActivator NextActivator { get; } // 0x002D61D0-0x002D61D8 
	
		// Constructors
		public ContextLevelActivator(IActivator next); // 0x002D4F1C-0x002D4F3C
	
		// Methods
		public IConstructionReturnMessage Activate(IConstructionCallMessage ctorCall); // 0x002D61D8-0x002D65A8
	}

	[ComVisible] // 0x0013EA18-0x0013EA2C
	public interface IActivator // TypeDefIndex: 1115
	{
		// Properties
		IActivator NextActivator { get; }
	
		// Methods
		IConstructionReturnMessage Activate(IConstructionCallMessage msg);
	}

	[ComVisible] // 0x0013EA2C-0x0013EA40
	public interface IConstructionCallMessage : IMethodCallMessage // TypeDefIndex: 1116
	{
		// Properties
		Type ActivationType { get; }
		string ActivationTypeName { get; }
		IActivator Activator { get; set; }
		object[] CallSiteActivationAttributes { get; }
		IList ContextProperties { get; }
	}

	[ComVisible] // 0x0013EA40-0x0013EA54
	public interface IConstructionReturnMessage : IMethodReturnMessage // TypeDefIndex: 1117
	{
	}

	internal class RemoteActivationAttribute : Attribute, IContextAttribute // TypeDefIndex: 1118
	{
		// Fields
		private IList _contextProperties; // 0x08
	
		// Constructors
		public RemoteActivationAttribute(IList contextProperties); // 0x002D7058-0x002D7078
	
		// Methods
		public bool IsContextOK(Context ctx, IConstructionCallMessage ctor); // 0x002D7078-0x002D7080
		public void GetPropertiesForNewContext(IConstructionCallMessage ctor); // 0x002D7080-0x002D74B0
	}

	internal class RemoteActivator : MarshalByRefObject, IActivator // TypeDefIndex: 1119
	{
		// Properties
		public IActivator NextActivator { get; } // 0x002D7EB8-0x002D7F40 
	
		// Methods
		public IConstructionReturnMessage Activate(IConstructionCallMessage msg); // 0x002D74B0-0x002D7AEC
		public override object InitializeLifetimeService(); // 0x002D7AEC-0x002D7EB8
	}
}

namespace System.Runtime.Remoting.Metadata
{
	[ComVisible] // 0x0013EA54-0x0013EA68
	public class SoapAttribute : Attribute // TypeDefIndex: 1120
	{
		// Fields
		private bool _useAttribute; // 0x08
		protected string ProtXmlNamespace; // 0x0C
		protected object ReflectInfo; // 0x10
	
		// Properties
		public virtual bool UseAttribute { get; } // 0x0067C3E8-0x0067C3F0 
		public virtual string XmlNamespace { get; } // 0x0067C3F0-0x0067C3F8 
	
		// Constructors
		public SoapAttribute(); // 0x0067C3E0-0x0067C3E8
	
		// Methods
		internal virtual void SetReflectionObject(object reflectionObject); // 0x0067C3F8-0x0067C400
	}

	[AttributeUsage] // 0x0013EA68-0x0013EAA0
	[ComVisible] // 0x0013EA68-0x0013EAA0
	public sealed class SoapFieldAttribute : SoapAttribute // TypeDefIndex: 1121
	{
		// Fields
		private string _elementName; // 0x14
		private bool _isElement; // 0x18
	
		// Properties
		public string XmlElementName { get; } // 0x0067C400-0x0067C408 
	
		// Constructors
		public SoapFieldAttribute(); // 0x00663E6C-0x00663E74
	
		// Methods
		public bool IsInteropXmlElement(); // 0x0067C408-0x0067C410
		internal override void SetReflectionObject(object reflectionObject); // 0x0067C410-0x0067C534
	}

	[AttributeUsage] // 0x0013EAA0-0x0013EAD8
	[ComVisible] // 0x0013EAA0-0x0013EAD8
	public sealed class SoapMethodAttribute : SoapAttribute // TypeDefIndex: 1122
	{
		// Fields
		private string _responseElement; // 0x14
		private string _responseNamespace; // 0x18
		private string _returnElement; // 0x1C
		private string _soapAction; // 0x20
		private bool _useAttribute; // 0x24
		private string _namespace; // 0x28
	
		// Properties
		public override bool UseAttribute { get; } // 0x0067C534-0x0067C53C 
		public override string XmlNamespace { get; } // 0x0067C53C-0x0067C544 
	
		// Constructors
		public SoapMethodAttribute(); // 0x00663E74-0x00663E7C
	
		// Methods
		internal override void SetReflectionObject(object reflectionObject); // 0x0067C544-0x0067C7C0
	}

	[AttributeUsage] // 0x0013EAD8-0x0013EB10
	[ComVisible] // 0x0013EAD8-0x0013EB10
	public sealed class SoapParameterAttribute : SoapAttribute // TypeDefIndex: 1123
	{
		// Constructors
		public SoapParameterAttribute(); // 0x00663E7C-0x00663E84
	}

	[AttributeUsage] // 0x0013EB10-0x0013EB48
	[ComVisible] // 0x0013EB10-0x0013EB48
	public sealed class SoapTypeAttribute : SoapAttribute // TypeDefIndex: 1124
	{
		// Fields
		private bool _useAttribute; // 0x14
		private string _xmlElementName; // 0x18
		private string _xmlNamespace; // 0x1C
		private string _xmlTypeName; // 0x20
		private string _xmlTypeNamespace; // 0x24
		private bool _isType; // 0x28
		private bool _isElement; // 0x29
	
		// Properties
		public override bool UseAttribute { get; } // 0x0067C7C0-0x0067C7C8 
		public string XmlElementName { get; } // 0x0067C7C8-0x0067C7D0 
		public override string XmlNamespace { get; } // 0x0067C7D0-0x0067C7D8 
		public string XmlTypeName { get; } // 0x0067C7D8-0x0067C7E0 
		public string XmlTypeNamespace { get; } // 0x0067C7E0-0x0067C7E8 
		internal bool IsInteropXmlElement { get; } // 0x0067C7E8-0x0067C7F0 
		internal bool IsInteropXmlType { get; } // 0x0067C7F0-0x0067C7F8 
	
		// Constructors
		public SoapTypeAttribute(); // 0x00663E64-0x00663E6C
	
		// Methods
		internal override void SetReflectionObject(object reflectionObject); // 0x0067C7F8-0x0067CAEC
	}
}

namespace System.Runtime.Remoting.Messaging
{
	[Serializable]
	[ComVisible] // 0x0013EB48-0x0013EB5C
	public sealed class CallContext // TypeDefIndex: 1125
	{
		// Constructors
		private CallContext(); // 0x0066B8F8-0x0066B900
	
		// Methods
		internal static object SetCurrentCallContext(LogicalCallContext ctx); // 0x0066B900-0x0066B908
		internal static LogicalCallContext SetLogicalCallContext(LogicalCallContext callCtx); // 0x0066B908-0x0066B994
	}

	internal class IllogicalCallContext // TypeDefIndex: 1126
	{
		// Fields
		private Hashtable m_Datastore; // 0x08
		private object m_HostContext; // 0x0C
	
		// Properties
		private Hashtable Datastore { get; } // 0x00670838-0x006708B8 
		internal object HostContext { get; set; } // 0x006708B8-0x006708C0 0x006708C0-0x006708C8
		internal bool HasUserData { get; } // 0x006708C8-0x00670904 
	
		// Constructors
		public IllogicalCallContext(); // 0x00670C6C-0x00670C74
	
		// Methods
		public IllogicalCallContext CreateCopy(); // 0x00670904-0x00670C6C
	}

	[Serializable]
	[ComVisible] // 0x0013EB5C-0x0013EB70
	public sealed class LogicalCallContext : ISerializable, ICloneable // TypeDefIndex: 1127
	{
		// Fields
		private static Type s_callContextType; // 0x00
		private Hashtable m_Datastore; // 0x08
		private CallContextRemotingData m_RemotingData; // 0x0C
		private CallContextSecurityData m_SecurityData; // 0x10
		private object m_HostContext; // 0x14
		private bool m_IsCorrelationMgr; // 0x18
	
		// Properties
		public bool HasInfo { get; } // 0x0066A854-0x0066A8C8 
		private bool HasUserData { get; } // 0x006715CC-0x00671608 
		private Hashtable Datastore { get; } // 0x006710E4-0x00671164 
	
		// Nested types
		internal struct Reader // TypeDefIndex: 1128
		{
			// Fields
			private LogicalCallContext m_ctx; // 0x00
	
			// Properties
			public bool IsNull { get; } // 0x0067241C-0x00672444 
			public bool HasInfo { get; } // 0x00672444-0x0067254C 
	
			// Constructors
			public Reader(LogicalCallContext ctx); // 0x00672414-0x0067241C
	
			// Methods
			public LogicalCallContext Clone(); // 0x0067254C-0x00672554
		}
	
		// Constructors
		internal LogicalCallContext(); // 0x00670C74-0x00670C7C
		internal LogicalCallContext(SerializationInfo info, StreamingContext context); // 0x00670C7C-0x006710E4
		static LogicalCallContext(); // 0x00672308-0x00672414
	
		// Methods
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00671164-0x006715CC
		public object Clone(); // 0x00671608-0x00671FD4
		internal void Merge(LogicalCallContext lc); // 0x00671FD4-0x00672308
	}

	[Serializable]
	internal class CallContextSecurityData : ICloneable // TypeDefIndex: 1129
	{
		// Fields
		private IPrincipal _principal; // 0x08
	
		// Properties
		internal bool HasInfo { get; } // 0x0066BA44-0x0066BA54 
	
		// Constructors
		public CallContextSecurityData(); // 0x0066BADC-0x0066BAE4
	
		// Methods
		public object Clone(); // 0x0066BA54-0x0066BADC
	}

	[Serializable]
	internal class CallContextRemotingData : ICloneable // TypeDefIndex: 1130
	{
		// Fields
		private string _logicalCallID; // 0x08
	
		// Properties
		internal string LogicalCallID { get; set; } // 0x0066B994-0x0066B99C 0x0066B99C-0x0066B9A4
		internal bool HasInfo { get; } // 0x0066B9A4-0x0066B9B4 
	
		// Constructors
		public CallContextRemotingData(); // 0x0066BA3C-0x0066BA44
	
		// Methods
		public object Clone(); // 0x0066B9B4-0x0066BA3C
	}

	internal enum ArgInfoType : byte // TypeDefIndex: 1131
	{
		In = 0,
		Out = 1
	}

	internal class ArgInfo // TypeDefIndex: 1132
	{
		// Fields
		private int[] _paramMap; // 0x08
		private int _inoutArgCount; // 0x0C
		private MethodBase _method; // 0x10
	
		// Constructors
		public ArgInfo(MethodBase method, ArgInfoType type); // 0x00666BC0-0x00666E6C
	
		// Methods
		public object[] GetInOutArgs(object[] args); // 0x00666E6C-0x0066702C
	}

	[ComVisible] // 0x0013EB70-0x0013EB84
	public class AsyncResult : IAsyncResult, IMessageSink, IThreadPoolWorkItem // TypeDefIndex: 1133
	{
		// Fields
		private object async_state; // 0x08
		private WaitHandle handle; // 0x0C
		private object async_delegate; // 0x10
		private IntPtr data; // 0x14
		private object object_data; // 0x18
		private bool sync_completed; // 0x1C
		private bool completed; // 0x1D
		private bool endinvoke_called; // 0x1E
		private object async_callback; // 0x20
		private ExecutionContext current; // 0x24
		private ExecutionContext original; // 0x28
		private long add_time; // 0x30
		private MonoMethodMessage call_message; // 0x38
		private IMessageCtrl message_ctrl; // 0x3C
		private IMessage reply_message; // 0x40
		private WaitCallback orig_cb; // 0x44
		internal static ContextCallback ccb; // 0x00
	
		// Properties
		public virtual object AsyncState { get; } // 0x00667254-0x0066725C 
		public virtual WaitHandle AsyncWaitHandle { get; } // 0x0066725C-0x0066737C 
		public virtual bool CompletedSynchronously { get; } // 0x0066737C-0x00667384 
		public virtual bool IsCompleted { get; } // 0x00667384-0x0066738C 
		public bool EndInvokeCalled { get; set; } // 0x0066738C-0x00667394 0x00667394-0x0066739C
		public virtual object AsyncDelegate { get; } // 0x0066739C-0x006673A4 
		public IMessageSink NextSink { get; } // 0x006673A4-0x006673AC 
		internal MonoMethodMessage CallMessage { get; set; } // 0x00667844-0x0066784C 0x0066784C-0x00667854
	
		// Constructors
		internal AsyncResult(); // 0x0066702C-0x00667034
		internal AsyncResult(WaitCallback cb, object state, bool capture_context); // 0x00667034-0x00667138
		static AsyncResult(); // 0x00667860-0x006678F8
	
		// Methods
		private static void WaitCallback_Context(object state); // 0x00667138-0x00667254
		public virtual IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x006673AC-0x00667434
		public virtual IMessage GetReplyMessage(); // 0x00667434-0x0066743C
		public virtual void SetMessageCtrl(IMessageCtrl mc); // 0x0066743C-0x00667444
		internal void SetCompletedSynchronously(bool completed); // 0x00667444-0x0066744C
		internal IMessage EndInvoke(); // 0x0066744C-0x00667548
		public virtual IMessage SyncProcessMessage(IMessage msg); // 0x00667548-0x00667844
		void IThreadPoolWorkItem.ExecuteWorkItem(); // 0x00667854-0x00667858
		void IThreadPoolWorkItem.MarkAborted(ThreadAbortException tae); // 0x0066785C-0x00667860
		internal object Invoke(); // 0x00667858-0x0066785C
		[CompilerGenerated] // 0x00145B40-0x00145B50
		private void <.ctor>b__17_0(object <p0>); // 0x006678F8-0x006679DC
	}

	internal class CADArgHolder // TypeDefIndex: 1134
	{
		// Fields
		public int index; // 0x08
	
		// Constructors
		public CADArgHolder(int i); // 0x006679DC-0x006679FC
	}

	internal class CADObjRef // TypeDefIndex: 1135
	{
		// Fields
		internal ObjRef objref; // 0x08
		internal int SourceDomain; // 0x0C
		internal byte[] TypeInfo; // 0x10
	
		// Constructors
		public CADObjRef(ObjRef o, int sourceDomain); // 0x006699B4-0x006699F8
	}

	[Serializable]
	internal class CADMethodRef // TypeDefIndex: 1136
	{
		// Fields
		private bool ctor; // 0x08
		private string typeName; // 0x0C
		private string methodName; // 0x10
		private string[] param_names; // 0x14
		private string[] generic_arg_names; // 0x18
	
		// Constructors
		public CADMethodRef(IMethodMessage msg); // 0x00667AB0-0x00667EB0
	
		// Methods
		private Type[] GetTypes(string[] typeArray); // 0x0066AE80-0x0066B064
		public MethodBase Resolve(); // 0x00668040-0x006686B0
	}

	internal class CADMessageBase // TypeDefIndex: 1137
	{
		// Fields
		protected object[] _args; // 0x08
		protected byte[] _serializedArgs; // 0x0C
		protected int _propertyCount; // 0x10
		protected CADArgHolder _callContext; // 0x14
		internal byte[] serializedMethod; // 0x18
	
		// Constructors
		public CADMessageBase(IMethodMessage msg); // 0x006679FC-0x00667AB0
	
		// Methods
		internal MethodBase GetMethod(); // 0x00667EB0-0x00668040
		protected static Type[] GetSignature(MethodBase methodBase, bool load); // 0x006686B0-0x006688DC
		internal static int MarshalProperties(IDictionary dict, ref ArrayList args); // 0x006688DC-0x006690A0
		internal static void UnmarshalProperties(IDictionary dict, int count, ArrayList args); // 0x00669260-0x006693FC
		private static bool IsPossibleToIgnoreMarshal(object obj); // 0x006693FC-0x00669714
		protected object MarshalArgument(object arg, ref ArrayList args); // 0x00669714-0x006698A4
		protected object UnmarshalArgument(object arg, ArrayList args); // 0x006699F8-0x0066A0D8
		internal object[] MarshalArguments(object[] arguments, ref ArrayList args); // 0x0066A2EC-0x0066A438
		internal object[] UnmarshalArguments(object[] arguments, ArrayList args); // 0x0066A438-0x0066A584
		protected void SaveLogicalCallContext(IMethodMessage msg, ref ArrayList serializeList); // 0x0066A584-0x0066A854
		internal LogicalCallContext GetLogicalCallContext(ArrayList args); // 0x0066A8C8-0x0066A9DC
	}

	internal class CADMethodCallMessage : CADMessageBase // TypeDefIndex: 1138
	{
		// Fields
		private string _uri; // 0x1C
	
		// Properties
		internal string Uri { get; } // 0x0066A9DC-0x0066A9E4 
		internal int PropertiesCount { get; } // 0x0066AE78-0x0066AE80 
	
		// Constructors
		internal CADMethodCallMessage(IMethodCallMessage callMsg); // 0x0066AA80-0x0066AD10
	
		// Methods
		internal static CADMethodCallMessage Create(IMessage callMsg); // 0x0066A9E4-0x0066AA80
		internal ArrayList GetArguments(); // 0x0066AD10-0x0066AE6C
		internal object[] GetArgs(ArrayList args); // 0x0066AE6C-0x0066AE78
	}

	internal class CADMethodReturnMessage : CADMessageBase // TypeDefIndex: 1139
	{
		// Fields
		private object _returnValue; // 0x1C
		private CADArgHolder _exception; // 0x20
		private Type[] _sig; // 0x24
	
		// Properties
		internal int PropertiesCount { get; } // 0x0066B810-0x0066B818 
	
		// Constructors
		internal CADMethodReturnMessage(IMethodReturnMessage retMsg); // 0x0066B100-0x0066B56C
	
		// Methods
		internal static CADMethodReturnMessage Create(IMessage callMsg); // 0x0066B064-0x0066B100
		internal ArrayList GetArguments(); // 0x0066B56C-0x0066B6C8
		internal object[] GetArgs(ArrayList args); // 0x0066B6C8-0x0066B6D4
		internal object GetReturnValue(ArrayList args); // 0x0066B6D4-0x0066B6E0
		internal Exception GetException(ArrayList args); // 0x0066B6E0-0x0066B810
	}

	internal class ClientContextTerminatorSink : IMessageSink // TypeDefIndex: 1140
	{
		// Fields
		private Context _context; // 0x08
	
		// Constructors
		public ClientContextTerminatorSink(Context ctx); // 0x0066BCF8-0x0066BD18
	
		// Methods
		public IMessage SyncProcessMessage(IMessage msg); // 0x0066BD18-0x0066C000
		public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x0066C000-0x0066C33C
	}

	internal class ClientContextReplySink : IMessageSink // TypeDefIndex: 1141
	{
		// Fields
		private IMessageSink _replySink; // 0x08
		private Context _context; // 0x0C
	
		// Constructors
		public ClientContextReplySink(Context ctx, IMessageSink replySink); // 0x0066BAE4-0x0066BB0C
	
		// Methods
		public IMessage SyncProcessMessage(IMessage msg); // 0x0066BB0C-0x0066BC70
		public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x0066BC70-0x0066BCF8
	}

	[Serializable]
	[CLSCompliant] // 0x0013EB84-0x0013EBBC
	[ComVisible] // 0x0013EB84-0x0013EBBC
	public class ConstructionCall : MethodCall, IConstructionCallMessage // TypeDefIndex: 1142
	{
		// Fields
		private IActivator _activator; // 0x34
		private object[] _activationAttributes; // 0x38
		private IList _contextProperties; // 0x3C
		private Type _activationType; // 0x40
		private string _activationTypeName; // 0x44
		private bool _isContextOk; // 0x48
		[NonSerialized]
		private RemotingProxy _sourceProxy; // 0x4C
	
		// Properties
		internal bool IsContextOk { get; set; } // 0x0066C634-0x0066C63C 0x0066C63C-0x0066C644
		public Type ActivationType { get; } // 0x0066C644-0x0066C740 
		public string ActivationTypeName { get; } // 0x0066C740-0x0066C748 
		public IActivator Activator { get; set; } // 0x0066C748-0x0066C750 0x0066C750-0x0066C758
		public object[] CallSiteActivationAttributes { get; } // 0x0066C758-0x0066C760 
		public IList ContextProperties { get; } // 0x0066C768-0x0066C7E8 
		public override IDictionary Properties { get; } // 0x0066D984-0x0066D9B8 
		internal RemotingProxy SourceProxy { get; set; } // 0x0066D9EC-0x0066D9F4 0x0066D9F4-0x0066D9FC
	
		// Constructors
		internal ConstructionCall(Type type); // 0x0066C33C-0x0066C38C
		internal ConstructionCall(SerializationInfo info, StreamingContext context); // 0x0066C394-0x0066C3AC
	
		// Methods
		internal override void InitDictionary(); // 0x0066C4B0-0x0066C558
		internal void SetActivationAttributes(object[] attributes); // 0x0066C760-0x0066C768
		internal override void InitMethodProperty(string key, object value); // 0x0066C7E8-0x0066CBCC
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0066D1F4-0x0066D420
	}

	internal class ConstructionCallDictionary : MessageDictionary // TypeDefIndex: 1143
	{
		// Fields
		public static string[] InternalKeys; // 0x00
	
		// Constructors
		public ConstructionCallDictionary(IConstructionCallMessage message); // 0x0066C558-0x0066C600
		static ConstructionCallDictionary(); // 0x0066F264-0x0066F794
	
		// Methods
		protected override object GetMethodProperty(string key); // 0x0066DA24-0x0066E2C4
		protected override void SetMethodProperty(string key, object value); // 0x0066EB1C-0x0066EEB8
	}

	[Serializable]
	[CLSCompliant] // 0x0013EBBC-0x0013EBF4
	[ComVisible] // 0x0013EBBC-0x0013EBF4
	public class ConstructionResponse : MethodResponse, IConstructionReturnMessage // TypeDefIndex: 1144
	{
		// Properties
		public override IDictionary Properties { get; } // 0x0066FAEC-0x0066FAF0 
	
		// Constructors
		internal ConstructionResponse(object resultObject, LogicalCallContext callCtx, IMethodCallMessage msg); // 0x0066F794-0x0066F7B4
		internal ConstructionResponse(Exception e, IMethodCallMessage msg); // 0x0066F8C0-0x0066F8C4
		internal ConstructionResponse(SerializationInfo info, StreamingContext context); // 0x0066F9F0-0x0066FA08
	}

	[Serializable]
	internal class EnvoyTerminatorSink : IMessageSink // TypeDefIndex: 1145
	{
		// Fields
		public static EnvoyTerminatorSink Instance; // 0x00
	
		// Constructors
		public EnvoyTerminatorSink(); // 0x0066FDBC-0x0066FDC4
		static EnvoyTerminatorSink(); // 0x0066FDC4-0x0066FE38
	
		// Methods
		public IMessage SyncProcessMessage(IMessage msg); // 0x0066FBAC-0x0066FCB0
		public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x0066FCB0-0x0066FDBC
	}

	[Serializable]
	internal class ErrorMessage : IMethodCallMessage // TypeDefIndex: 1146
	{
		// Fields
		private string _uri; // 0x08
	
		// Properties
		public int ArgCount { get; } // 0x0066FEA4-0x0066FEAC 
		public object[] Args { get; } // 0x0066FEAC-0x0066FEB4 
		public MethodBase MethodBase { get; } // 0x0066FEB4-0x0066FEBC 
		public string MethodName { get; } // 0x0066FEBC-0x0066FF18 
		public object MethodSignature { get; } // 0x0066FF18-0x0066FF20 
		public virtual IDictionary Properties { get; } // 0x0066FF20-0x0066FF28 
		public string TypeName { get; } // 0x0066FF28-0x0066FF84 
		public string Uri { get; } // 0x0066FF84-0x0066FF8C 
		public LogicalCallContext LogicalCallContext { get; } // 0x0066FF94-0x0066FF9C 
	
		// Constructors
		public ErrorMessage(); // 0x0066FE38-0x0066FEA4
	
		// Methods
		public object GetArg(int arg_num); // 0x0066FF8C-0x0066FF94
	}

	[Serializable]
	[ComVisible] // 0x0013EBF4-0x0013EC08
	public class Header // TypeDefIndex: 1147
	{
	}

	[ComVisible] // 0x0013EC08-0x0013EC1C
	public delegate object HeaderHandler(Header[] headers); // TypeDefIndex: 1148; 0x0066FFB0-0x00670800

	internal interface IInternalMessage // TypeDefIndex: 1149
	{
		// Properties
		Identity TargetIdentity { get; set; }
		string Uri { get; set; }
	}

	[ComVisible] // 0x0013EC1C-0x0013EC30
	public interface IMessage // TypeDefIndex: 1150
	{
		// Properties
		IDictionary Properties { get; }
	}

	[ComVisible] // 0x0013EC30-0x0013EC44
	public interface IMessageCtrl // TypeDefIndex: 1151
	{
	}

	[ComVisible] // 0x0013EC44-0x0013EC58
	public interface IMessageSink // TypeDefIndex: 1152
	{
		// Methods
		IMessage SyncProcessMessage(IMessage msg);
		IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink);
	}

	[ComVisible] // 0x0013EC58-0x0013EC6C
	public interface IMethodCallMessage : IMethodMessage // TypeDefIndex: 1153
	{
	}

	[ComVisible] // 0x0013EC6C-0x0013EC80
	public interface IMethodMessage : IMessage // TypeDefIndex: 1154
	{
		// Properties
		int ArgCount { get; }
		object[] Args { get; }
		LogicalCallContext LogicalCallContext { get; }
		MethodBase MethodBase { get; }
		string MethodName { get; }
		object MethodSignature { get; }
		string TypeName { get; }
		string Uri { get; }
	
		// Methods
		object GetArg(int argNum);
	}

	[ComVisible] // 0x0013EC80-0x0013EC94
	public interface IMethodReturnMessage : IMethodMessage // TypeDefIndex: 1155
	{
		// Properties
		Exception Exception { get; }
		object[] OutArgs { get; }
		object ReturnValue { get; }
	}

	[ComVisible] // 0x0013EC94-0x0013ECA8
	public interface IRemotingFormatter : IFormatter // TypeDefIndex: 1156
	{
	}

	internal interface ISerializationRootObject // TypeDefIndex: 1157
	{
	}

	[Serializable]
	[CLSCompliant] // 0x0013ECA8-0x0013ECE0
	[ComVisible] // 0x0013ECA8-0x0013ECE0
	public class MethodCall : IMethodCallMessage, ISerializable, IInternalMessage, ISerializationRootObject // TypeDefIndex: 1158
	{
		// Fields
		private string _uri; // 0x08
		private string _typeName; // 0x0C
		private string _methodName; // 0x10
		private object[] _args; // 0x14
		private Type[] _methodSignature; // 0x18
		private MethodBase _methodBase; // 0x1C
		private LogicalCallContext _callContext; // 0x20
		private Identity _targetIdentity; // 0x24
		private Type[] _genericArguments; // 0x28
		protected IDictionary ExternalProperties; // 0x2C
		protected IDictionary InternalProperties; // 0x30
	
		// Properties
		public int ArgCount { get; } // 0x00674904-0x00674928 
		public object[] Args { get; } // 0x00674928-0x00674930 
		public LogicalCallContext LogicalCallContext { get; } // 0x00674930-0x006749B0 
		public MethodBase MethodBase { get; } // 0x006749B0-0x006749E0 
		public string MethodName { get; } // 0x00675378-0x006753C0 
		public object MethodSignature { get; } // 0x006753C0-0x00675564 
		public virtual IDictionary Properties { get; } // 0x0066D9B8-0x0066D9EC 
		public string TypeName { get; } // 0x0067560C-0x0067567C 
		public string Uri { get; set; } // 0x0067567C-0x00675684 0x00675684-0x0067568C
		string IInternalMessage.Uri { get; set; } // 0x0067568C-0x00675694 0x00675694-0x0067569C
		Identity IInternalMessage.TargetIdentity { get; set; } // 0x00676178-0x00676180 0x00676180-0x00676188
		private Type[] GenericArguments { get; } // 0x00676028-0x00676078 
	
		// Constructors
		internal MethodCall(SerializationInfo info, StreamingContext context); // 0x0066C3AC-0x0066C4B0
		internal MethodCall(CADMethodCallMessage msg); // 0x006742AC-0x00674430
		internal MethodCall(); // 0x0066C38C-0x0066C394
	
		// Methods
		internal void CopyFrom(IMethodMessage call); // 0x00674430-0x00674904
		internal virtual void InitMethodProperty(string key, object value); // 0x0066CBCC-0x0066D1F4
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0066D420-0x0066D984
		internal virtual void InitDictionary(); // 0x00675564-0x0067560C
		public object GetArg(int argNum); // 0x0067569C-0x006756E4
		public virtual void Init(); // 0x006756E4-0x006756E8
		public void ResolveMethod(); // 0x006749E0-0x00675378
		private Type CastTo(string clientType, Type serverType); // 0x006757D4-0x006759C8
		private static string GetTypeNameFromAssemblyQualifiedName(string aqname); // 0x00676078-0x00676178
	}

	internal class MCMDictionary : MessageDictionary // TypeDefIndex: 1159
	{
		// Fields
		public static string[] InternalKeys; // 0x00
	
		// Constructors
		public MCMDictionary(IMethodMessage message); // 0x00672554-0x006725FC
		static MCMDictionary(); // 0x006725FC-0x00672910
	}

	[Serializable]
	internal class MessageDictionary : IDictionary // TypeDefIndex: 1160
	{
		// Fields
		private IDictionary _internalProperties; // 0x08
		protected IMethodMessage _message; // 0x0C
		private string[] _methodKeys; // 0x10
		private bool _ownProperties; // 0x14
	
		// Properties
		internal IDictionary InternalDictionary { get; } // 0x006691C8-0x00669260 
		public string[] MethodKeys { set; } // 0x0066DA1C-0x0066DA24
		public object this[object key] { get => default; set {} } // 0x00672A14-0x00672C00 0x00672C00-0x00672C04
		public ICollection Keys { get; } // 0x00672E2C-0x00673324 
		public ICollection Values { get; } // 0x00673324-0x006737EC 
		public int Count { get; } // 0x006737EC-0x006738F8 
		public bool IsSynchronized { get; } // 0x006738F8-0x00673900 
		public object SyncRoot { get; } // 0x00673900-0x00673904 
	
		// Nested types
		private class DictionaryEnumerator : IDictionaryEnumerator // TypeDefIndex: 1161
		{
			// Fields
			private MessageDictionary _methodDictionary; // 0x08
			private IDictionaryEnumerator _hashtableEnum; // 0x0C
			private int _posMethod; // 0x10
	
			// Properties
			public object Current { get; } // 0x00673C24-0x00673CA8 
			public DictionaryEntry Entry { get; } // 0x00673CA8-0x00673EC0 
			public object Key { get; } // 0x00674234-0x00674270 
			public object Value { get; } // 0x00674270-0x006742AC 
	
			// Constructors
			public DictionaryEnumerator(MessageDictionary methodDictionary); // 0x00673A64-0x00673BB4
	
			// Methods
			public bool MoveNext(); // 0x00673EC0-0x00674154
			public void Reset(); // 0x00674154-0x00674234
		}
	
		// Constructors
		public MessageDictionary(IMethodMessage message); // 0x0066D9FC-0x0066DA1C
	
		// Methods
		internal bool HasUserData(); // 0x006690A0-0x006691C8
		protected virtual IDictionary AllocInternalProperties(); // 0x00672910-0x00672988
		public IDictionary GetInternalProperties(); // 0x0066C600-0x0066C634
		private bool IsOverridenKey(string key); // 0x00672988-0x00672A14
		protected virtual object GetMethodProperty(string key); // 0x0066E2C4-0x0066EB1C
		protected virtual void SetMethodProperty(string key, object value); // 0x0066EEB8-0x0066F264
		public void Add(object key, object value); // 0x00672C04-0x00672E2C
		public void CopyTo(Array array, int index); // 0x00673904-0x006739F4
		IEnumerator IEnumerable.GetEnumerator(); // 0x006739F4-0x00673A64
		public IDictionaryEnumerator GetEnumerator(); // 0x00673BB4-0x00673C24
	}

	[Serializable]
	[CLSCompliant] // 0x0013ED14-0x0013ED4C
	[ComVisible] // 0x0013ED14-0x0013ED4C
	public class MethodResponse : IMethodReturnMessage, ISerializable, IInternalMessage, ISerializationRootObject // TypeDefIndex: 1162
	{
		// Fields
		private string _methodName; // 0x08
		private string _uri; // 0x0C
		private string _typeName; // 0x10
		private MethodBase _methodBase; // 0x14
		private object _returnValue; // 0x18
		private Exception _exception; // 0x1C
		private Type[] _methodSignature; // 0x20
		private ArgInfo _inArgInfo; // 0x24
		private object[] _args; // 0x28
		private object[] _outArgs; // 0x2C
		private IMethodCallMessage _callMsg; // 0x30
		private LogicalCallContext _callContext; // 0x34
		private Identity _targetIdentity; // 0x38
		protected IDictionary ExternalProperties; // 0x3C
		protected IDictionary InternalProperties; // 0x40
	
		// Properties
		public int ArgCount { get; } // 0x00676B30-0x00676B44 
		public object[] Args { get; } // 0x00676B44-0x00676B4C 
		public Exception Exception { get; } // 0x00676B4C-0x00676B54 
		public LogicalCallContext LogicalCallContext { get; } // 0x00676B54-0x00676BD4 
		public MethodBase MethodBase { get; } // 0x00676BD4-0x00676D1C 
		public string MethodName { get; } // 0x00676D1C-0x00676E04 
		public object MethodSignature { get; } // 0x00676EEC-0x00677074 
		public object[] OutArgs { get; } // 0x00677074-0x00677148 
		public virtual IDictionary Properties { get; } // 0x0066FAF0-0x0066FBAC 
		public object ReturnValue { get; } // 0x006772BC-0x006772C4 
		public string TypeName { get; } // 0x00676E04-0x00676EEC 
		public string Uri { get; set; } // 0x006772C4-0x006773AC 0x006773AC-0x006773B4
		string IInternalMessage.Uri { get; set; } // 0x006773B4-0x006773B8 0x006773B8-0x006773C0
		Identity IInternalMessage.TargetIdentity { get; set; } // 0x00677998-0x006779A0 0x006779A0-0x006779A8
	
		// Constructors
		internal MethodResponse(Exception e, IMethodCallMessage msg); // 0x0066F8C4-0x0066F9F0
		internal MethodResponse(object returnValue, object[] outArgs, LogicalCallContext callCtx, IMethodCallMessage msg); // 0x0066F7B4-0x0066F8C0
		internal MethodResponse(IMethodCallMessage msg, CADMethodReturnMessage retmsg); // 0x00676188-0x006764B8
		internal MethodResponse(SerializationInfo info, StreamingContext context); // 0x0066FA08-0x0066FAEC
	
		// Methods
		internal void InitMethodProperty(string key, object value); // 0x006764B8-0x00676B30
		public object GetArg(int argNum); // 0x006773C0-0x00677408
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00677408-0x00677998
	}

	internal class MethodReturnDictionary : MessageDictionary // TypeDefIndex: 1163
	{
		// Fields
		public static string[] InternalReturnKeys; // 0x00
		public static string[] InternalExceptionKeys; // 0x04
	
		// Constructors
		public MethodReturnDictionary(IMethodReturnMessage message); // 0x00677148-0x006772BC
		static MethodReturnDictionary(); // 0x006779A8-0x00677E34
	}

	[Serializable]
	internal class MonoMethodMessage : IMethodCallMessage, IMethodReturnMessage, IInternalMessage // TypeDefIndex: 1164
	{
		// Fields
		private MonoMethod method; // 0x08
		private object[] args; // 0x0C
		private string[] names; // 0x10
		private byte[] arg_types; // 0x14
		public LogicalCallContext ctx; // 0x18
		public object rval; // 0x1C
		public Exception exc; // 0x20
		private AsyncResult asyncResult; // 0x24
		private CallType call_type; // 0x28
		private string uri; // 0x2C
		private MCMDictionary properties; // 0x30
		private Type[] methodSignature; // 0x34
		private Identity identity; // 0x38
		internal static string CallContextKey; // 0x00
		internal static string UriKey; // 0x04
	
		// Properties
		public IDictionary Properties { get; } // 0x006783B8-0x00678438 
		public int ArgCount { get; } // 0x00678438-0x00678474 
		public object[] Args { get; } // 0x00678518-0x00678520 
		public LogicalCallContext LogicalCallContext { get; set; } // 0x00678520-0x00678528 0x00678528-0x00678530
		public MethodBase MethodBase { get; } // 0x00678530-0x00678538 
		public string MethodName { get; } // 0x00678538-0x006785E0 
		public object MethodSignature { get; } // 0x006785E0-0x0067876C 
		public string TypeName { get; } // 0x0067876C-0x0067883C 
		public string Uri { get; set; } // 0x0067883C-0x00678844 0x00678844-0x0067884C
		public Exception Exception { get; } // 0x00678894-0x0067889C 
		public int OutArgCount { get; } // 0x0067889C-0x00678918 
		public object[] OutArgs { get; } // 0x00678918-0x00678AA4 
		public object ReturnValue { get; } // 0x00678AA4-0x00678AAC 
		Identity IInternalMessage.TargetIdentity { get; set; } // 0x00678AAC-0x00678AB4 0x00678AB4-0x00678ABC
		public AsyncResult AsyncResult { get; } // 0x00678ABC-0x00678AC4 
		internal CallType CallType { get; } // 0x00678474-0x00678518 
	
		// Constructors
		internal MonoMethodMessage(MethodInfo minfo, object[] in_args, object[] out_args); // 0x006781E0-0x006783B8
		static MonoMethodMessage(); // 0x00678C24-0x00678CB4
	
		// Methods
		internal void InitMessage(MonoMethod method, object[] out_args); // 0x00677E34-0x006781E0
		public object GetArg(int arg_num); // 0x0067884C-0x00678894
		public bool NeedsOutProcessing(out int outCount); // 0x00678B88-0x00678C24
	}

	internal enum CallType // TypeDefIndex: 1165
	{
		Sync = 0,
		BeginInvoke = 1,
		EndInvoke = 2,
		OneWay = 3
	}

	[AttributeUsage] // 0x0013ED4C-0x0013ED84
	[ComVisible] // 0x0013ED4C-0x0013ED84
	public class OneWayAttribute : Attribute // TypeDefIndex: 1166
	{
	}

	internal class RemotingSurrogate : ISerializationSurrogate // TypeDefIndex: 1167
	{
		// Constructors
		public RemotingSurrogate(); // 0x006792D8-0x006792E0
	
		// Methods
		public virtual void GetObjectData(object obj, SerializationInfo si, StreamingContext sc); // 0x00678F54-0x00679024
		public virtual object SetObjectData(object obj, SerializationInfo si, StreamingContext sc, ISurrogateSelector selector); // 0x00679250-0x006792D8
	}

	internal class ObjRefSurrogate : ISerializationSurrogate // TypeDefIndex: 1168
	{
		// Constructors
		public ObjRefSurrogate(); // 0x00678F4C-0x00678F54
	
		// Methods
		public virtual void GetObjectData(object obj, SerializationInfo si, StreamingContext sc); // 0x00678CB4-0x00678EB0
		public virtual object SetObjectData(object obj, SerializationInfo si, StreamingContext sc, ISurrogateSelector selector); // 0x00678EB0-0x00678F4C
	}

	[ComVisible] // 0x0013ED84-0x0013ED98
	public class RemotingSurrogateSelector : ISurrogateSelector // TypeDefIndex: 1169
	{
		// Fields
		private static Type s_cachedTypeObjRef; // 0x00
		private static ObjRefSurrogate _objRefSurrogate; // 0x04
		private static RemotingSurrogate _objRemotingSurrogate; // 0x08
		private ISurrogateSelector _next; // 0x08
	
		// Constructors
		public RemotingSurrogateSelector(); // 0x006792E0-0x006792E8
		static RemotingSurrogateSelector(); // 0x00679520-0x00679620
	
		// Methods
		public virtual ISerializationSurrogate GetSurrogate(Type type, StreamingContext context, out ISurrogateSelector ssout); // 0x006792E8-0x00679520
	}

	[ComVisible] // 0x0013ED98-0x0013EDAC
	public class ReturnMessage : IMethodReturnMessage, IInternalMessage // TypeDefIndex: 1170
	{
		// Fields
		private object[] _outArgs; // 0x08
		private object[] _args; // 0x0C
		private LogicalCallContext _callCtx; // 0x10
		private object _returnValue; // 0x14
		private string _uri; // 0x18
		private Exception _exception; // 0x1C
		private MethodBase _methodBase; // 0x20
		private string _methodName; // 0x24
		private Type[] _methodSignature; // 0x28
		private string _typeName; // 0x2C
		private MethodReturnDictionary _properties; // 0x30
		private Identity _targetIdentity; // 0x34
		private ArgInfo _inArgInfo; // 0x38
	
		// Properties
		public int ArgCount { get; } // 0x006797C0-0x006797E4 
		public object[] Args { get; } // 0x006797E4-0x006797EC 
		public LogicalCallContext LogicalCallContext { get; } // 0x006797EC-0x0067986C 
		public MethodBase MethodBase { get; } // 0x0067986C-0x00679874 
		public string MethodName { get; } // 0x00679874-0x006798D4 
		public object MethodSignature { get; } // 0x006798D4-0x00679A78 
		public virtual IDictionary Properties { get; } // 0x00679A78-0x00679AF8 
		public string TypeName { get; } // 0x00679AF8-0x00679B80 
		public string Uri { get; set; } // 0x00679B80-0x00679B88 0x00679B88-0x00679B90
		string IInternalMessage.Uri { get; set; } // 0x00679B90-0x00679B98 0x00679B98-0x00679BA0
		public Exception Exception { get; } // 0x00679BE8-0x00679BF0 
		public object[] OutArgs { get; } // 0x00679BF0-0x00679CBC 
		public virtual object ReturnValue { get; } // 0x00679CBC-0x00679CC4 
		Identity IInternalMessage.TargetIdentity { get; set; } // 0x00679CC4-0x00679CCC 0x00679CCC-0x00679CD4
	
		// Constructors
		public ReturnMessage(object ret, object[] outArgs, int outArgsCount, LogicalCallContext callCtx, IMethodCallMessage mcm); // 0x00679620-0x006797C0
		public ReturnMessage(Exception e, IMethodCallMessage mcm); // 0x00661284-0x00661404
	
		// Methods
		public object GetArg(int argNum); // 0x00679BA0-0x00679BE8
	}

	internal class ServerContextTerminatorSink : IMessageSink // TypeDefIndex: 1171
	{
		// Constructors
		public ServerContextTerminatorSink(); // 0x0067A124-0x0067A12C
	
		// Methods
		public IMessage SyncProcessMessage(IMessage msg); // 0x00679CD4-0x00679F54
		public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x00679F54-0x0067A124
	}

	internal class ServerObjectTerminatorSink : IMessageSink // TypeDefIndex: 1172
	{
		// Fields
		private IMessageSink _nextSink; // 0x08
	
		// Constructors
		public ServerObjectTerminatorSink(IMessageSink nextSink); // 0x0067A2F4-0x0067A314
	
		// Methods
		public IMessage SyncProcessMessage(IMessage msg); // 0x0067A314-0x0067A528
		public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x0067A528-0x0067A7B0
	}

	internal class ServerObjectReplySink : IMessageSink // TypeDefIndex: 1173
	{
		// Fields
		private IMessageSink _replySink; // 0x08
		private ServerIdentity _identity; // 0x0C
	
		// Constructors
		public ServerObjectReplySink(ServerIdentity identity, IMessageSink replySink); // 0x0067A12C-0x0067A154
	
		// Methods
		public IMessage SyncProcessMessage(IMessage msg); // 0x0067A154-0x0067A26C
		public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x0067A26C-0x0067A2F4
	}

	internal class StackBuilderSink : IMessageSink // TypeDefIndex: 1174
	{
		// Fields
		private MarshalByRefObject _target; // 0x08
		private RealProxy _rp; // 0x0C
	
		// Constructors
		public StackBuilderSink(MarshalByRefObject obj, bool forceInternalExecute); // 0x0067A7B0-0x0067A84C
	
		// Methods
		public IMessage SyncProcessMessage(IMessage msg); // 0x0067A84C-0x0067A9A0
		public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x0067BDC0-0x0067BF2C
		private void ExecuteAsyncMessage(object ob); // 0x0067BF2C-0x0067C2FC
		private void CheckParameters(IMessage msg); // 0x0067A9A0-0x0067AF28
		[CompilerGenerated] // 0x00145B50-0x00145B60
		private void <AsyncProcessMessage>b__4_0(object data); // 0x0067C2FC-0x0067C3E0
	}
}

namespace System.Runtime.ExceptionServices
{
	[AttributeUsage] // 0x0013EDAC-0x0013EDF0
	public sealed class HandleProcessCorruptedStateExceptionsAttribute : Attribute // TypeDefIndex: 1175
	{
		// Constructors
		public HandleProcessCorruptedStateExceptionsAttribute(); // 0x002D1464-0x002D146C
	}

	public class FirstChanceExceptionEventArgs : EventArgs // TypeDefIndex: 1176
	{
	}

	public sealed class ExceptionDispatchInfo // TypeDefIndex: 1177
	{
		// Fields
		private Exception m_Exception; // 0x08
		private object m_stackTrace; // 0x0C
	
		// Properties
		internal object BinaryStackTraceArray { get; } // 0x002D1454-0x002D145C 
		public Exception SourceException { get; } // 0x002D145C-0x002D1464 
	
		// Constructors
		private ExceptionDispatchInfo(Exception exception); // 0x002D12EC-0x002D1454
	
		// Methods
		public static ExceptionDispatchInfo Capture(Exception source); // 0x002CF3EC-0x002CF4DC
		public void Throw(); // 0x002CF6E0-0x002CF76C
	}
}

namespace System.Runtime.ConstrainedExecution
{
	[ComVisible] // 0x0013EDF0-0x0013EE04
	public abstract class CriticalFinalizerObject // TypeDefIndex: 1178
	{
		// Constructors
		[ReliabilityContract] // 0x00145B60-0x00145B78
		protected CriticalFinalizerObject(); // 0x002D12B4-0x002D12BC
	
		// Methods
		[ReliabilityContract] // 0x00145B78-0x00145B90
		~CriticalFinalizerObject(); // 0x002D12BC-0x002D12C4
	}

	[Serializable]
	public enum Consistency // TypeDefIndex: 1179
	{
		MayCorruptProcess = 0,
		MayCorruptAppDomain = 1,
		MayCorruptInstance = 2,
		WillNotCorruptState = 3
	}

	[Serializable]
	public enum Cer // TypeDefIndex: 1180
	{
		None = 0,
		MayFail = 1,
		Success = 2
	}

	[AttributeUsage] // 0x0013EE04-0x0013EE38
	public sealed class ReliabilityContractAttribute : Attribute // TypeDefIndex: 1181
	{
		// Fields
		private Consistency _consistency; // 0x08
		private Cer _cer; // 0x0C
	
		// Constructors
		public ReliabilityContractAttribute(Consistency consistencyGuarantee, Cer cer); // 0x002D12C4-0x002D12EC
	}
}

namespace System.Runtime.CompilerServices
{
	[DefaultMember] // 0x0013EE38-0x0013EE6C
	public interface ITuple // TypeDefIndex: 1182
	{
	}

	[AttributeUsage] // 0x0013EE6C-0x0013EEA4
	[CLSCompliant] // 0x0013EE6C-0x0013EEA4
	public sealed class TupleElementNamesAttribute : Attribute // TypeDefIndex: 1183
	{
		// Fields
		private readonly string[] _transformNames; // 0x08
	
		// Constructors
		public TupleElementNamesAttribute(string[] transformNames); // 0x002D1064-0x002D1120
	}

	public struct AsyncTaskMethodBuilder // TypeDefIndex: 1184
	{
		// Fields
		private static readonly Task<VoidTaskResult> s_cachedCompleted; // 0x00
		private AsyncTaskMethodBuilder<VoidTaskResult> m_builder; // 0x00
	
		// Properties
		public Task Task { get; } // 0x002CFFF0-0x002D00A0 
	
		// Constructors
		static AsyncTaskMethodBuilder(); // 0x002D011C-0x002D01C0
	
		// Methods
		public static AsyncTaskMethodBuilder Create(); // 0x002CFF04-0x002CFF84
		[DebuggerStepThrough] // 0x00145B90-0x00145BA0
		public void Start<TStateMachine>(ref TStateMachine stateMachine)
			where TStateMachine : IAsyncStateMachine;
		public void SetStateMachine(IAsyncStateMachine stateMachine); // 0x002CFF84-0x002CFFF0
		public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)
			where TAwaiter : INotifyCompletion
			where TStateMachine : IAsyncStateMachine;
		public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)
			where TAwaiter : ICriticalNotifyCompletion
			where TStateMachine : IAsyncStateMachine;
		public void SetResult(); // 0x002D00A0-0x002D0114
		public void SetException(Exception exception); // 0x002D0114-0x002D011C
	}

	public struct AsyncTaskMethodBuilder<TResult> // TypeDefIndex: 1185
	{
		// Fields
		internal static readonly Task<TResult> s_defaultResultTask;
		private AsyncMethodBuilderCore m_coreState;
		private Task<TResult> m_task;
	
		// Properties
		public Task<TResult> Task { get; }
	
		// Constructors
		static AsyncTaskMethodBuilder();
	
		// Methods
		public static AsyncTaskMethodBuilder<TResult> Create();
		[DebuggerStepThrough] // 0x00145BA0-0x00145BB0
		public void Start<TStateMachine>(ref TStateMachine stateMachine)
			where TStateMachine : IAsyncStateMachine;
		public void SetStateMachine(IAsyncStateMachine stateMachine);
		public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)
			where TAwaiter : INotifyCompletion
			where TStateMachine : IAsyncStateMachine;
		public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)
			where TAwaiter : ICriticalNotifyCompletion
			where TStateMachine : IAsyncStateMachine;
		public void SetResult(TResult result);
		internal void SetResult(Task<TResult> completedTask);
		public void SetException(Exception exception);
		private Task<TResult> GetTaskForResult(TResult result);
	}

	internal static class AsyncTaskCache // TypeDefIndex: 1186
	{
		// Fields
		internal static readonly Task<bool> TrueTask; // 0x00
		internal static readonly Task<bool> FalseTask; // 0x04
		internal static readonly Task<int>[] Int32Tasks; // 0x08
	
		// Constructors
		static AsyncTaskCache(); // 0x002CFE08-0x002CFF04
	
		// Methods
		private static Task<int>[] CreateInt32Tasks(); // 0x002CFCCC-0x002CFE08
		internal static Task<TResult> CreateCacheableTask<TResult>(TResult result);
	}

	internal struct AsyncMethodBuilderCore // TypeDefIndex: 1187
	{
		// Fields
		internal IAsyncStateMachine m_stateMachine; // 0x00
		internal Action m_defaultContextAction; // 0x04
	
		// Nested types
		internal sealed class MoveNextRunner // TypeDefIndex: 1188
		{
			// Fields
			private readonly ExecutionContext m_context; // 0x08
			internal IAsyncStateMachine m_stateMachine; // 0x0C
			private static ContextCallback s_invokeMoveNext; // 0x00
	
			// Constructors
			internal MoveNextRunner(ExecutionContext context, IAsyncStateMachine stateMachine); // 0x002CEBE0-0x002CED14
	
			// Methods
			internal void Run(); // 0x002CF888-0x002CFAAC
			private static void InvokeMoveNext(object stateMachine); // 0x002CFAAC-0x002CFC8C
		}
	
		private class ContinuationWrapper // TypeDefIndex: 1189
		{
			// Fields
			internal readonly Action m_continuation; // 0x08
			private readonly Action m_invokeAction; // 0x0C
			internal readonly Task m_innerTask; // 0x10
	
			// Constructors
			internal ContinuationWrapper(Action continuation, Action invokeAction, Task innerTask); // 0x002CF4DC-0x002CF520
	
			// Methods
			internal void Invoke(); // 0x002CF85C-0x002CF888
		}
	
		[CompilerGenerated] // 0x0013EEA4-0x0013EEB4
		private sealed class <>c__DisplayClass4_0 // TypeDefIndex: 1190
		{
			// Fields
			public Task innerTask; // 0x08
			public Action continuation; // 0x0C
	
			// Constructors
			public <>c__DisplayClass4_0(); // 0x002CED1C-0x002CED24
	
			// Methods
			internal void <OutputAsyncCausalityEvents>b__0(); // 0x002CF7E8-0x002CF85C
		}
	
		[Serializable]
		[CompilerGenerated] // 0x0013EEB4-0x0013EEC4
		private sealed class <>c // TypeDefIndex: 1191
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static SendOrPostCallback <>9__6_0; // 0x04
			public static WaitCallback <>9__6_1; // 0x08
	
			// Constructors
			static <>c(); // 0x002CF5E8-0x002CF65C
			public <>c(); // 0x002CF65C-0x002CF664
	
			// Methods
			internal void <ThrowAsync>b__6_0(object state); // 0x002CF664-0x002CF6E0
			internal void <ThrowAsync>b__6_1(object state); // 0x002CF76C-0x002CF7E8
		}
	
		// Methods
		public void SetStateMachine(IAsyncStateMachine stateMachine); // 0x002CE9E0-0x002CEBE0
		internal Action GetCompletionAction(Task taskForTracing, ref MoveNextRunner runnerToInitialize); // 0x002CED14-0x002CED1C
		private Action OutputAsyncCausalityEvents(Task innerTask, Action continuation); // 0x002CEDE4-0x002CF00C
		internal void PostBoxInitialization(IAsyncStateMachine stateMachine, MoveNextRunner runner, Task builtTask); // 0x002CF00C-0x002CF028
		internal static void ThrowAsync(Exception exception, SynchronizationContext targetContext); // 0x002CF028-0x002CF3EC
		internal static Action CreateContinuationWrapper(Action continuation, Action invokeAction, Task innerTask = null); // 0x002CED24-0x002CEDE4
		internal static Task TryGetContinuationTask(Action action); // 0x002CF520-0x002CF5E8
	}

	[Serializable]
	[AttributeUsage] // 0x0013EEC4-0x0013EF08
	public sealed class AsyncStateMachineAttribute : StateMachineAttribute // TypeDefIndex: 1192
	{
		// Constructors
		public AsyncStateMachineAttribute(Type stateMachineType); // 0x002CFC8C-0x002CFCAC
	}

	public interface IAsyncStateMachine // TypeDefIndex: 1193
	{
		// Methods
		void MoveNext();
		void SetStateMachine(IAsyncStateMachine stateMachine);
	}

	public interface INotifyCompletion // TypeDefIndex: 1194
	{
		// Methods
		void OnCompleted(Action continuation);
	}

	public interface ICriticalNotifyCompletion : INotifyCompletion // TypeDefIndex: 1195
	{
		// Methods
		void UnsafeOnCompleted(Action continuation);
	}

	[Serializable]
	[AttributeUsage] // 0x0013EF08-0x0013EF4C
	public sealed class IteratorStateMachineAttribute : StateMachineAttribute // TypeDefIndex: 1196
	{
		// Constructors
		public IteratorStateMachineAttribute(Type stateMachineType); // 0x002D08DC-0x002D08FC
	}

	[Serializable]
	[AttributeUsage] // 0x0013EF4C-0x0013EF90
	public sealed class RuntimeCompatibilityAttribute : Attribute // TypeDefIndex: 1197
	{
		// Fields
		private bool m_wrapNonExceptionThrows; // 0x08
	
		// Properties
		public bool WrapNonExceptionThrows { set; } // 0x002D0904-0x002D090C
	
		// Constructors
		public RuntimeCompatibilityAttribute(); // 0x002D08FC-0x002D0904
	}

	[Serializable]
	public sealed class RuntimeWrappedException : Exception // TypeDefIndex: 1198
	{
		// Fields
		private object m_wrappedException; // 0x44
	
		// Constructors
		private RuntimeWrappedException(object thrownObject); // 0x002D09FC-0x002D0ABC
		internal RuntimeWrappedException(SerializationInfo info, StreamingContext context); // 0x002D0C08-0x002D0D30
	
		// Methods
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x002D0ABC-0x002D0C08
	}

	[Serializable]
	[AttributeUsage] // 0x0013EF90-0x0013EFD4
	public class StateMachineAttribute : Attribute // TypeDefIndex: 1199
	{
		// Fields
		[CompilerGenerated] // 0x00143158-0x00143168
		private Type <StateMachineType>k__BackingField; // 0x08
	
		// Properties
		private Type StateMachineType { [CompilerGenerated] /* 0x00145BB0-0x00145BC0 */ set; } // 0x002D0D30-0x002D0D38
	
		// Constructors
		public StateMachineAttribute(Type stateMachineType); // 0x002CFCAC-0x002CFCCC
	}

	public struct TaskAwaiter : ICriticalNotifyCompletion // TypeDefIndex: 1200
	{
		// Fields
		private readonly Task m_task; // 0x00
	
		// Constructors
		internal TaskAwaiter(Task task); // 0x002D0DA4-0x002D0DAC
	
		// Methods
		public void OnCompleted(Action continuation); // 0x002D0DAC-0x002D0DD0
		public void UnsafeOnCompleted(Action continuation); // 0x002D0DD0-0x002D0DFC
		public void GetResult(); // 0x002D0DFC-0x002D0E04
		internal static void ValidateEnd(Task task); // 0x002D04E0-0x002D051C
		private static void HandleNonSuccessAndDebuggerNotification(Task task); // 0x002D0E04-0x002D0EAC
		private static void ThrowForNonSuccess(Task task); // 0x002D0EAC-0x002D1064
		internal static void OnCompletedInternal(Task task, Action continuation, bool continueOnCapturedContext, bool flowExecutionContext); // 0x002D0368-0x002D046C
	}

	public struct TaskAwaiter<TResult> : ICriticalNotifyCompletion // TypeDefIndex: 1201
	{
		// Fields
		private readonly Task<TResult> m_task;
	
		// Constructors
		internal TaskAwaiter(Task<TResult> task);
	
		// Methods
		public void OnCompleted(Action continuation);
		public void UnsafeOnCompleted(Action continuation);
		public TResult GetResult();
	}

	public struct ConfiguredTaskAwaitable // TypeDefIndex: 1202
	{
		// Fields
		private readonly ConfiguredTaskAwaiter m_configuredTaskAwaiter; // 0x00
	
		// Nested types
		public struct ConfiguredTaskAwaiter : ICriticalNotifyCompletion // TypeDefIndex: 1203
		{
			// Fields
			private readonly Task m_task; // 0x00
			private readonly bool m_continueOnCapturedContext; // 0x04
	
			// Properties
			public bool IsCompleted { get; } // 0x002D033C-0x002D0368 
	
			// Constructors
			internal ConfiguredTaskAwaiter(Task task, bool continueOnCapturedContext); // 0x002D0304-0x002D033C
	
			// Methods
			public void OnCompleted(Action continuation); // 0x002D046C-0x002D04B4
			public void UnsafeOnCompleted(Action continuation); // 0x002D04B4-0x002D04E0
			public void GetResult(); // 0x002D051C-0x002D0524
		}
	
		// Constructors
		internal ConfiguredTaskAwaitable(Task task, bool continueOnCapturedContext); // 0x002D0274-0x002D0294
	
		// Methods
		public ConfiguredTaskAwaiter GetAwaiter(); // 0x002D0294-0x002D0304
	}

	public struct ConfiguredTaskAwaitable<TResult> // TypeDefIndex: 1204
	{
		// Fields
		private readonly ConfiguredTaskAwaiter m_configuredTaskAwaiter;
	
		// Nested types
		public struct ConfiguredTaskAwaiter : ICriticalNotifyCompletion // TypeDefIndex: 1205
		{
			// Fields
			private readonly Task<TResult> m_task;
			private readonly bool m_continueOnCapturedContext;
	
			// Properties
			public bool IsCompleted { get; }
	
			// Constructors
			internal ConfiguredTaskAwaiter(Task<TResult> task, bool continueOnCapturedContext);
	
			// Methods
			public void OnCompleted(Action continuation);
			public void UnsafeOnCompleted(Action continuation);
			public TResult GetResult();
		}
	
		// Constructors
		internal ConfiguredTaskAwaitable(Task<TResult> task, bool continueOnCapturedContext);
	
		// Methods
		public ConfiguredTaskAwaiter GetAwaiter();
	}

	[AttributeUsage] // 0x0013EFD4-0x0013F018
	public sealed class TypeForwardedFromAttribute : Attribute // TypeDefIndex: 1206
	{
		// Fields
		private string assemblyFullName; // 0x08
	
		// Properties
		public string AssemblyFullName { get; } // 0x002D12A4-0x002D12AC 
	
		// Constructors
		public TypeForwardedFromAttribute(string assemblyFullName); // 0x002D11DC-0x002D12A4
	}

	[Serializable]
	public enum LoadHint // TypeDefIndex: 1207
	{
		Default = 0,
		Always = 1,
		Sometimes = 2
	}

	[Serializable]
	[AttributeUsage] // 0x0013F018-0x0013F02C
	public sealed class DefaultDependencyAttribute : Attribute // TypeDefIndex: 1208
	{
		// Fields
		private LoadHint loadHint; // 0x08
	
		// Constructors
		public DefaultDependencyAttribute(LoadHint loadHintArgument); // 0x002D061C-0x002D063C
	}

	[Serializable]
	[AttributeUsage] // 0x0013F02C-0x0013F060
	public sealed class DependencyAttribute : Attribute // TypeDefIndex: 1209
	{
		// Fields
		private string dependentAssembly; // 0x08
		private LoadHint loadHint; // 0x0C
	
		// Constructors
		public DependencyAttribute(string dependentAssemblyArgument, LoadHint loadHintArgument); // 0x002D063C-0x002D0850
	}

	[Serializable]
	[ComVisible] // 0x0013F060-0x0013F094
	[Flags] // 0x0013F060-0x0013F094
	public enum CompilationRelaxations // TypeDefIndex: 1210
	{
		NoStringInterning = 8
	}

	[Serializable]
	[AttributeUsage] // 0x0013F094-0x0013F0CC
	[ComVisible] // 0x0013F094-0x0013F0CC
	public class CompilationRelaxationsAttribute : Attribute // TypeDefIndex: 1211
	{
		// Fields
		private int m_relaxations; // 0x08
	
		// Properties
		public int CompilationRelaxations { get; } // 0x002D0200-0x002D0208 
	
		// Constructors
		public CompilationRelaxationsAttribute(int relaxations); // 0x002D01C0-0x002D01E0
		public CompilationRelaxationsAttribute(CompilationRelaxations relaxations); // 0x002D01E0-0x002D0200
	}

	[Serializable]
	[AttributeUsage] // 0x0013F0CC-0x0013F100
	public sealed class CompilerGeneratedAttribute : Attribute // TypeDefIndex: 1212
	{
		// Constructors
		public CompilerGeneratedAttribute(); // 0x002D0208-0x002D0274
	}

	[Serializable]
	[AttributeUsage] // 0x0013F100-0x0013F14C
	[ComVisible] // 0x0013F100-0x0013F14C
	public abstract class CustomConstantAttribute : Attribute // TypeDefIndex: 1213
	{
		// Properties
		public abstract object Value { get; }
	
		// Constructors
		protected CustomConstantAttribute(); // 0x002D0524-0x002D052C
	}

	[Serializable]
	[AttributeUsage] // 0x0013F14C-0x0013F198
	[ComVisible] // 0x0013F14C-0x0013F198
	public sealed class DateTimeConstantAttribute : CustomConstantAttribute // TypeDefIndex: 1214
	{
		// Fields
		private DateTime date; // 0x08
	
		// Properties
		public override object Value { get; } // 0x002D052C-0x002D05A0 
	}

	[Serializable]
	[AttributeUsage] // 0x0013F198-0x0013F1E4
	[ComVisible] // 0x0013F198-0x0013F1E4
	public sealed class DecimalConstantAttribute : Attribute // TypeDefIndex: 1215
	{
		// Fields
		private decimal dec; // 0x08
	
		// Properties
		public decimal Value { get; } // 0x002D060C-0x002D061C 
	
		// Constructors
		[CLSCompliant] // 0x00145BC0-0x00145BD4
		public DecimalConstantAttribute(byte scale, byte sign, uint hi, uint mid, uint low); // 0x002D05A0-0x002D060C
	}

	[AttributeUsage] // 0x0013F1E4-0x0013F1F8
	public sealed class ExtensionAttribute : Attribute // TypeDefIndex: 1216
	{
		// Constructors
		public ExtensionAttribute(); // 0x002D0850-0x002D0858
	}

	[AttributeUsage] // 0x0013F1F8-0x0013F22C
	public sealed class FixedBufferAttribute : Attribute // TypeDefIndex: 1217
	{
		// Fields
		private Type elementType; // 0x08
		private int length; // 0x0C
	
		// Properties
		public Type ElementType { get; } // 0x002D0880-0x002D0888 
		public int Length { get; } // 0x002D0888-0x002D0890 
	
		// Constructors
		public FixedBufferAttribute(Type elementType, int length); // 0x002D0858-0x002D0880
	}

	[AttributeUsage] // 0x0013F22C-0x0013F270
	public sealed class InternalsVisibleToAttribute : Attribute // TypeDefIndex: 1218
	{
		// Fields
		private string _assemblyName; // 0x08
		private bool _allInternalsVisible; // 0x0C
	
		// Properties
		public string AssemblyName { get; } // 0x002D08C4-0x002D08CC 
		public bool AllInternalsVisible { get; set; } // 0x002D08CC-0x002D08D4 0x002D08D4-0x002D08DC
	
		// Constructors
		public InternalsVisibleToAttribute(string assemblyName); // 0x002D0898-0x002D08C4
	}

	[AttributeUsage] // 0x0013F270-0x0013F2C8
	[FriendAccessAllowed] // 0x0013F270-0x0013F2C8
	internal sealed class FriendAccessAllowedAttribute : Attribute // TypeDefIndex: 1219
	{
		// Constructors
		public FriendAccessAllowedAttribute(); // 0x002D0890-0x002D0898
	}

	[ComVisible] // 0x0013F2C8-0x0013F2DC
	public static class IsVolatile // TypeDefIndex: 1220
	{
	}

	[AttributeUsage] // 0x0013F2DC-0x0013F320
	internal sealed class TypeDependencyAttribute : Attribute // TypeDefIndex: 1221
	{
		// Fields
		private string typeName; // 0x08
	
		// Constructors
		public TypeDependencyAttribute(string typeName); // 0x002D1120-0x002D11DC
	}

	[Serializable]
	[AttributeUsage] // 0x0013F320-0x0013F334
	public sealed class UnsafeValueTypeAttribute : Attribute // TypeDefIndex: 1222
	{
		// Constructors
		public UnsafeValueTypeAttribute(); // 0x002D12AC-0x002D12B4
	}

	[Serializable]
	[AttributeUsage] // 0x0013F334-0x0013F368
	public sealed class StringFreezingAttribute : Attribute // TypeDefIndex: 1223
	{
		// Constructors
		public StringFreezingAttribute(); // 0x002D0D38-0x002D0DA4
	}

	[FriendAccessAllowed] // 0x0013F368-0x0013F378
	internal static class JitHelpers // TypeDefIndex: 1224
	{
		// Methods
		internal static T UnsafeCast<T>(object o)
			where T : class;
		internal static int UnsafeEnumCast<T>(T val)
			where T : struct;
		internal static long UnsafeEnumCastLong<T>(T val)
			where T : struct;
	}

	internal struct Ephemeron // TypeDefIndex: 1225
	{
		// Fields
		internal object key; // 0x00
		internal object value; // 0x04
	}

	public sealed class ConditionalWeakTable<TKey, TValue> // TypeDefIndex: 1226
		where TKey : class
		where TValue : class
	{
		// Fields
		private Ephemeron[] data;
		private object _lock;
		private int size;
	
		// Constructors
		public ConditionalWeakTable();
	
		// Methods
		~ConditionalWeakTable();
		private void RehashWithoutResize();
		private void RecomputeSize();
		private void Rehash();
		public void Add(TKey key, TValue value);
		public bool Remove(TKey key);
		public bool TryGetValue(TKey key, out TValue value);
	}

	public static class RuntimeHelpers // TypeDefIndex: 1227
	{
		// Properties
		public static int OffsetToStringData { get; } // 0x002D09EC-0x002D09F0 
	
		// Methods
		private static void InitializeArray(Array array, IntPtr fldHandle); // 0x002D090C-0x002D0910
		public static void InitializeArray(Array array, RuntimeFieldHandle fldHandle); // 0x002D0910-0x002D09EC
		public static int GetHashCode(object o); // 0x002D09F0-0x002D09F8
		[MonoTODO] // 0x00145BD4-0x00145C30
		[ReliabilityContract] // 0x00145BD4-0x00145C30
		public static void PrepareConstrainedRegions(); // 0x002D09F8-0x002D09FC
		public static bool IsReferenceOrContainsReferences<T>();
	}
}

namespace System.Runtime.InteropServices
{
	[AttributeUsage] // 0x0013F378-0x0013F3D4
	[ComVisible] // 0x0013F378-0x0013F3D4
	public sealed class UnmanagedFunctionPointerAttribute : Attribute // TypeDefIndex: 1228
	{
		// Fields
		private CallingConvention m_callingConvention; // 0x08
		public CharSet CharSet; // 0x0C
		public bool BestFitMapping; // 0x10
		public bool ThrowOnUnmappableChar; // 0x11
		public bool SetLastError; // 0x12
	
		// Constructors
		public UnmanagedFunctionPointerAttribute(CallingConvention callingConvention); // 0x002D3340-0x002D3360
	}

	[AttributeUsage] // 0x0013F3D4-0x0013F420
	[ComVisible] // 0x0013F3D4-0x0013F420
	public sealed class DispIdAttribute : Attribute // TypeDefIndex: 1229
	{
		// Fields
		internal int _val; // 0x08
	
		// Constructors
		public DispIdAttribute(int dispId); // 0x002D1880-0x002D18A0
	}

	[Serializable]
	[ComVisible] // 0x0013F420-0x0013F434
	public enum ComInterfaceType // TypeDefIndex: 1230
	{
		InterfaceIsDual = 0,
		InterfaceIsIUnknown = 1,
		InterfaceIsIDispatch = 2,
		InterfaceIsIInspectable = 3
	}

	[AttributeUsage] // 0x0013F434-0x0013F480
	[ComVisible] // 0x0013F434-0x0013F480
	public sealed class InterfaceTypeAttribute : Attribute // TypeDefIndex: 1231
	{
		// Fields
		internal ComInterfaceType _val; // 0x08
	
		// Constructors
		public InterfaceTypeAttribute(ComInterfaceType interfaceType); // 0x002D23DC-0x002D23FC
	}

	[AttributeUsage] // 0x0013F480-0x0013F4CC
	[ComVisible] // 0x0013F480-0x0013F4CC
	public sealed class ComDefaultInterfaceAttribute : Attribute // TypeDefIndex: 1232
	{
		// Fields
		internal Type _val; // 0x08
	
		// Constructors
		public ComDefaultInterfaceAttribute(Type defaultInterface); // 0x002D1818-0x002D1838
	}

	[Serializable]
	[ComVisible] // 0x0013F4CC-0x0013F4E0
	public enum ClassInterfaceType // TypeDefIndex: 1233
	{
		None = 0,
		AutoDispatch = 1,
		AutoDual = 2
	}

	[AttributeUsage] // 0x0013F4E0-0x0013F52C
	[ComVisible] // 0x0013F4E0-0x0013F52C
	public sealed class ClassInterfaceAttribute : Attribute // TypeDefIndex: 1234
	{
		// Fields
		internal ClassInterfaceType _val; // 0x08
	
		// Constructors
		public ClassInterfaceAttribute(ClassInterfaceType classInterfaceType); // 0x002D17C0-0x002D17E0
	}

	[AttributeUsage] // 0x0013F52C-0x0013F578
	[ComVisible] // 0x0013F52C-0x0013F578
	public sealed class ComVisibleAttribute : Attribute // TypeDefIndex: 1235
	{
		// Fields
		internal bool _val; // 0x08
	
		// Constructors
		public ComVisibleAttribute(bool visibility); // 0x002D1840-0x002D1860
	}

	[AttributeUsage] // 0x0013F578-0x0013F5C4
	[ComVisible] // 0x0013F578-0x0013F5C4
	public sealed class TypeLibImportClassAttribute : Attribute // TypeDefIndex: 1236
	{
		// Fields
		internal string _importClassName; // 0x08
	
		// Constructors
		public TypeLibImportClassAttribute(Type importClass); // 0x002D32D4-0x002D3318
	}

	[Serializable]
	[ComVisible] // 0x0013F5C4-0x0013F5D8
	public enum VarEnum // TypeDefIndex: 1237
	{
		VT_EMPTY = 0,
		VT_NULL = 1,
		VT_I2 = 2,
		VT_I4 = 3,
		VT_R4 = 4,
		VT_R8 = 5,
		VT_CY = 6,
		VT_DATE = 7,
		VT_BSTR = 8,
		VT_DISPATCH = 9,
		VT_ERROR = 10,
		VT_BOOL = 11,
		VT_VARIANT = 12,
		VT_UNKNOWN = 13,
		VT_DECIMAL = 14,
		VT_I1 = 16,
		VT_UI1 = 17,
		VT_UI2 = 18,
		VT_UI4 = 19,
		VT_I8 = 20,
		VT_UI8 = 21,
		VT_INT = 22,
		VT_UINT = 23,
		VT_VOID = 24,
		VT_HRESULT = 25,
		VT_PTR = 26,
		VT_SAFEARRAY = 27,
		VT_CARRAY = 28,
		VT_USERDEFINED = 29,
		VT_LPSTR = 30,
		VT_LPWSTR = 31,
		VT_RECORD = 36,
		VT_FILETIME = 64,
		VT_BLOB = 65,
		VT_STREAM = 66,
		VT_STORAGE = 67,
		VT_STREAMED_OBJECT = 68,
		VT_STORED_OBJECT = 69,
		VT_BLOB_OBJECT = 70,
		VT_CF = 71,
		VT_CLSID = 72,
		VT_VECTOR = 4096,
		VT_ARRAY = 8192,
		VT_BYREF = 16384
	}

	[Serializable]
	[ComVisible] // 0x0013F5D8-0x0013F5EC
	public enum UnmanagedType // TypeDefIndex: 1238
	{
		Bool = 2,
		I1 = 3,
		U1 = 4,
		I2 = 5,
		U2 = 6,
		I4 = 7,
		U4 = 8,
		I8 = 9,
		U8 = 10,
		R4 = 11,
		R8 = 12,
		Currency = 15,
		BStr = 19,
		LPStr = 20,
		LPWStr = 21,
		LPTStr = 22,
		ByValTStr = 23,
		IUnknown = 25,
		IDispatch = 26,
		Struct = 27,
		Interface = 28,
		SafeArray = 29,
		ByValArray = 30,
		SysInt = 31,
		SysUInt = 32,
		VBByRefStr = 34,
		AnsiBStr = 35,
		TBStr = 36,
		VariantBool = 37,
		FunctionPtr = 38,
		AsAny = 40,
		LPArray = 42,
		LPStruct = 43,
		CustomMarshaler = 44,
		Error = 45,
		IInspectable = 46,
		HString = 47,
		LPUTF8Str = 48
	}

	[AttributeUsage] // 0x0013F5EC-0x0013F638
	[ComVisible] // 0x0013F5EC-0x0013F638
	public sealed class ComImportAttribute : Attribute // TypeDefIndex: 1239
	{
		// Constructors
		public ComImportAttribute(); // 0x002D1838-0x002D1840
	}

	[AttributeUsage] // 0x0013F638-0x0013F684
	[ComVisible] // 0x0013F638-0x0013F684
	public sealed class GuidAttribute : Attribute // TypeDefIndex: 1240
	{
		// Fields
		internal string _val; // 0x08
	
		// Constructors
		public GuidAttribute(string guid); // 0x002D23B4-0x002D23D4
	}

	[AttributeUsage] // 0x0013F684-0x0013F6D0
	[ComVisible] // 0x0013F684-0x0013F6D0
	public sealed class PreserveSigAttribute : Attribute // TypeDefIndex: 1241
	{
		// Constructors
		public PreserveSigAttribute(); // 0x002D2B60-0x002D2B68
	}

	[AttributeUsage] // 0x0013F6D0-0x0013F71C
	[ComVisible] // 0x0013F6D0-0x0013F71C
	public sealed class InAttribute : Attribute // TypeDefIndex: 1242
	{
		// Constructors
		public InAttribute(); // 0x002D23D4-0x002D23DC
	}

	[AttributeUsage] // 0x0013F71C-0x0013F768
	[ComVisible] // 0x0013F71C-0x0013F768
	public sealed class OutAttribute : Attribute // TypeDefIndex: 1243
	{
		// Constructors
		public OutAttribute(); // 0x002D2B58-0x002D2B60
	}

	[AttributeUsage] // 0x0013F768-0x0013F7B4
	[ComVisible] // 0x0013F768-0x0013F7B4
	public sealed class OptionalAttribute : Attribute // TypeDefIndex: 1244
	{
		// Constructors
		public OptionalAttribute(); // 0x002D2B50-0x002D2B58
	}

	[Flags] // 0x0013F7B4-0x0013F7C4
	public enum DllImportSearchPath // TypeDefIndex: 1245
	{
		LegacyBehavior = 0,
		AssemblyDirectory = 2,
		UseDllDirectoryForDependencies = 256,
		ApplicationDirectory = 512,
		UserDirectories = 1024,
		System32 = 2048,
		SafeDirectories = 4096
	}

	[AttributeUsage] // 0x0013F7C4-0x0013F810
	[ComVisible] // 0x0013F7C4-0x0013F810
	public sealed class DefaultDllImportSearchPathsAttribute : Attribute // TypeDefIndex: 1246
	{
		// Fields
		internal DllImportSearchPath _paths; // 0x08
	
		// Constructors
		public DefaultDllImportSearchPathsAttribute(DllImportSearchPath paths); // 0x002D1860-0x002D1880
	}

	[AttributeUsage] // 0x0013F810-0x0013F85C
	[ComVisible] // 0x0013F810-0x0013F85C
	public sealed class DllImportAttribute : Attribute // TypeDefIndex: 1247
	{
		// Fields
		internal string _val; // 0x08
		public string EntryPoint; // 0x0C
		public CharSet CharSet; // 0x10
		public bool SetLastError; // 0x14
		public bool ExactSpelling; // 0x15
		public bool PreserveSig; // 0x16
		public CallingConvention CallingConvention; // 0x18
		public bool BestFitMapping; // 0x1C
		public bool ThrowOnUnmappableChar; // 0x1D
	
		// Properties
		public string Value { get; } // 0x002D1C48-0x002D1C50 
	
		// Constructors
		internal DllImportAttribute(string dllName, string entryPoint, CharSet charSet, bool exactSpelling, bool setLastError, bool preserveSig, CallingConvention callingConvention, bool bestFitMapping, bool throwOnUnmappableChar); // 0x002D1B98-0x002D1BF0
		public DllImportAttribute(string dllName); // 0x002D1C28-0x002D1C48
	
		// Methods
		internal static Attribute GetCustomAttribute(RuntimeMethodInfo method); // 0x002D18A0-0x002D1B98
		internal static bool IsDefined(RuntimeMethodInfo method); // 0x002D1BF0-0x002D1C28
	}

	[AttributeUsage] // 0x0013F85C-0x0013F8A8
	[ComVisible] // 0x0013F85C-0x0013F8A8
	public sealed class FieldOffsetAttribute : Attribute // TypeDefIndex: 1248
	{
		// Fields
		internal int _val; // 0x08
	
		// Constructors
		public FieldOffsetAttribute(int offset); // 0x002D1F04-0x002D1F4C
	}

	[AttributeUsage] // 0x0013F8A8-0x0013F8F4
	[ComVisible] // 0x0013F8A8-0x0013F8F4
	public sealed class TypeLibVersionAttribute : Attribute // TypeDefIndex: 1249
	{
		// Fields
		internal int _major; // 0x08
		internal int _minor; // 0x0C
	
		// Constructors
		public TypeLibVersionAttribute(int major, int minor); // 0x002D3318-0x002D3340
	}

	[AttributeUsage] // 0x0013F8F4-0x0013F940
	[ComVisible] // 0x0013F8F4-0x0013F940
	public sealed class ComCompatibleVersionAttribute : Attribute // TypeDefIndex: 1250
	{
		// Fields
		internal int _major; // 0x08
		internal int _minor; // 0x0C
		internal int _build; // 0x10
		internal int _revision; // 0x14
	
		// Constructors
		public ComCompatibleVersionAttribute(int major, int minor, int build, int revision); // 0x002D17E0-0x002D1818
	}

	[AttributeUsage] // 0x0013F940-0x0013F98C
	[ComVisible] // 0x0013F940-0x0013F98C
	public sealed class BestFitMappingAttribute : Attribute // TypeDefIndex: 1251
	{
		// Fields
		internal bool _bestFitMapping; // 0x08
	
		// Constructors
		public BestFitMappingAttribute(bool BestFitMapping); // 0x002D146C-0x002D148C
	}

	[Serializable]
	[ComVisible] // 0x0013F98C-0x0013F9A0
	public enum CallingConvention // TypeDefIndex: 1252
	{
		Winapi = 1,
		Cdecl = 2,
		StdCall = 3,
		ThisCall = 4,
		FastCall = 5
	}

	[Serializable]
	[ComVisible] // 0x0013F9A0-0x0013F9B4
	public enum CharSet // TypeDefIndex: 1253
	{
		None = 1,
		Ansi = 2,
		Unicode = 3,
		Auto = 4
	}

	[Serializable]
	[ComVisible] // 0x0013F9B4-0x0013F9C8
	public class COMException : ExternalException // TypeDefIndex: 1254
	{
		// Constructors
		public COMException(); // 0x002D148C-0x002D1528
		protected COMException(SerializationInfo info, StreamingContext context); // 0x002D1554-0x002D1574
	
		// Methods
		public override string ToString(); // 0x002D1594-0x002D17C0
	}

	[Serializable]
	[ComVisible] // 0x0013F9C8-0x0013F9DC
	public sealed class ErrorWrapper // TypeDefIndex: 1255
	{
		// Fields
		private int m_ErrorCode; // 0x08
	}

	[Serializable]
	[ComVisible] // 0x0013F9DC-0x0013F9F0
	public class ExternalException : SystemException // TypeDefIndex: 1256
	{
		// Properties
		public virtual int ErrorCode { get; } // 0x002D1CD8-0x002D1CE0 
	
		// Constructors
		public ExternalException(); // 0x002D1C50-0x002D1CD8
		public ExternalException(string message); // 0x002D1528-0x002D1554
		protected ExternalException(SerializationInfo info, StreamingContext context); // 0x002D1574-0x002D1594
	
		// Methods
		public override string ToString(); // 0x002D1CE0-0x002D1F04
	}

	[ComVisible] // 0x0013F9F0-0x0013FA04
	public interface ICustomMarshaler // TypeDefIndex: 1257
	{
		// Methods
		object MarshalNativeToManaged(IntPtr pNativeData);
		IntPtr MarshalManagedToNative(object ManagedObj);
		void CleanUpNativeData(IntPtr pNativeData);
		void CleanUpManagedData(object ManagedObj);
		int GetNativeDataSize();
	}

	[Serializable]
	[ComVisible] // 0x0013FA04-0x0013FA18
	public class MarshalDirectiveException : SystemException // TypeDefIndex: 1258
	{
		// Constructors
		public MarshalDirectiveException(); // 0x002D2A7C-0x002D2B04
		public MarshalDirectiveException(string message); // 0x002D2B04-0x002D2B30
		protected MarshalDirectiveException(SerializationInfo info, StreamingContext context); // 0x002D2B30-0x002D2B50
	}

	public abstract class SafeHandle : CriticalFinalizerObject, IDisposable // TypeDefIndex: 1259
	{
		// Fields
		protected IntPtr handle; // 0x08
		private int _state; // 0x0C
		private bool _ownsHandle; // 0x10
		private bool _fullyInitialized; // 0x11
		private const int RefCount_Mask = 2147483644; // Metadata: 0x0020523F
		private const int RefCount_One = 4; // Metadata: 0x00205243
	
		// Properties
		public bool IsClosed { [ReliabilityContract] /* 0x00145C78-0x00145C90 */ get; } // 0x002D2F50-0x002D2F5C 
		public abstract bool IsInvalid { [ReliabilityContract] /* 0x00145C90-0x00145CA8 */ get; }
	
		// Constructors
		[ReliabilityContract] // 0x00145C30-0x00145C48
		protected SafeHandle(IntPtr invalidHandleValue, bool ownsHandle); // 0x002D2E10-0x002D2EC8
	
		// Methods
		~SafeHandle(); // 0x002D2EC8-0x002D2F40
		[ReliabilityContract] // 0x00145C48-0x00145C60
		protected void SetHandle(IntPtr handle); // 0x002D2F40-0x002D2F48
		[ReliabilityContract] // 0x00145C60-0x00145C78
		public IntPtr DangerousGetHandle(); // 0x002D2F48-0x002D2F50
		[ReliabilityContract] // 0x00145CA8-0x00145CC0
		public void Close(); // 0x002D2F5C-0x002D2F70
		[ReliabilityContract] // 0x00145CC0-0x00145CD8
		public void Dispose(); // 0x002D2F70-0x002D2F84
		[ReliabilityContract] // 0x00145CD8-0x00145CF0
		protected virtual void Dispose(bool disposing); // 0x002D2F84-0x002D2FA4
		[ReliabilityContract] // 0x00145CF0-0x00145D08
		protected abstract bool ReleaseHandle();
		[ReliabilityContract] // 0x00145D08-0x00145D20
		public void SetHandleAsInvalid(); // 0x002D3098-0x002D3140
		[ReliabilityContract] // 0x00145D20-0x00145D38
		public void DangerousAddRef(ref bool success); // 0x002D2C44-0x002D2D60
		[ReliabilityContract] // 0x00145D38-0x00145D50
		public void DangerousRelease(); // 0x002D2E08-0x002D2E10
		private void InternalDispose(); // 0x002D2FA4-0x002D3084
		private void InternalFinalize(); // 0x002D3084-0x002D3098
		private void DangerousReleaseInternal(bool dispose); // 0x002D3140-0x002D32D4
	}

	[ComVisible] // 0x0013FA18-0x0013FA64
	[MonoTODO] // 0x0013FA18-0x0013FA64
	public struct GCHandle // TypeDefIndex: 1260
	{
		// Fields
		private int handle; // 0x00
	
		// Properties
		public bool IsAllocated { get; } // 0x002D1F88-0x002D2058 
		public object Target { get; set; } // 0x002D205C-0x002D208C 0x002D208C-0x002D21F8
	
		// Constructors
		internal GCHandle(object value, GCHandleType type); // 0x002D1F50-0x002D1F88
	
		// Methods
		public IntPtr AddrOfPinnedObject(); // 0x002D21FC-0x002D2204
		public static GCHandle Alloc(object value, GCHandleType type); // 0x002D2204-0x002D22EC
		public void Free(); // 0x002D22F0-0x002D22F8
		private static object GetTarget(int handle); // 0x002D2058-0x002D205C
		private static int GetTargetHandle(object obj, int handle, GCHandleType type); // 0x002D1F4C-0x002D1F50
		private static void FreeHandle(int handle); // 0x002D22EC-0x002D22F0
		private static IntPtr GetAddrOfPinnedObject(int handle); // 0x002D21F8-0x002D21FC
		public static bool operator ==(GCHandle a, GCHandle b); // 0x002D22F8-0x002D23A0
		public override bool Equals(object o); // 0x002D23A0-0x002D23A8
		public override int GetHashCode(); // 0x002D23A8-0x002D23B4
	}

	[Serializable]
	[ComVisible] // 0x0013FA64-0x0013FA78
	public enum GCHandleType // TypeDefIndex: 1261
	{
		Weak = 0,
		WeakTrackResurrection = 1,
		Normal = 2,
		Pinned = 3
	}

	public static class Marshal // TypeDefIndex: 1262
	{
		// Fields
		public static readonly int SystemMaxDBCSCharSize; // 0x00
		public static readonly int SystemDefaultCharSize; // 0x04
	
		// Constructors
		static Marshal(); // 0x002D2918-0x002D299C
	
		// Methods
		[ReliabilityContract] // 0x00145D50-0x00145D68
		public static IntPtr AllocHGlobal(IntPtr cb); // 0x002D23FC-0x002D2400
		[ReliabilityContract] // 0x00145D68-0x00145D80
		public static IntPtr AllocHGlobal(int cb); // 0x002D2400-0x002D2490
		internal static void copy_to_unmanaged(Array source, int startIndex, IntPtr destination, int length); // 0x002D2490-0x002D2494
		internal static void copy_from_unmanaged(IntPtr source, int startIndex, Array destination, int length); // 0x002D2494-0x002D2498
		public static void Copy(float[] source, int startIndex, IntPtr destination, int length); // 0x002D2498-0x002D2530
		public static void Copy(IntPtr source, byte[] destination, int startIndex, int length); // 0x002D2530-0x002D25C8
		public static void Copy(IntPtr source, char[] destination, int startIndex, int length); // 0x002D25C8-0x002D2660
		public static void Copy(IntPtr source, int[] destination, int startIndex, int length); // 0x002D2660-0x002D26F8
		public static void Copy(IntPtr source, float[] destination, int startIndex, int length); // 0x002D26F8-0x002D2790
		public static void FreeBSTR(IntPtr ptr); // 0x002D2790-0x002D2794
		[ReliabilityContract] // 0x00145D80-0x00145D98
		public static void FreeHGlobal(IntPtr hglobal); // 0x002D2794-0x002D2798
		public static int GetHRForException(Exception e); // 0x002D2798-0x002D27A8
		[ReliabilityContract] // 0x00145D98-0x00145DB0
		public static int GetLastWin32Error(); // 0x002D27A8-0x002D27AC
		public static string PtrToStringAnsi(IntPtr ptr); // 0x002D27AC-0x002D27B0
		public static string PtrToStringUni(IntPtr ptr); // 0x002D27B0-0x002D27B4
		[ComVisible] // 0x00145DB0-0x00145DC4
		public static object PtrToStructure(IntPtr ptr, Type structureType); // 0x002D27B4-0x002D27B8
		public static T PtrToStructure<T>(IntPtr ptr);
		[ReliabilityContract] // 0x00145DC4-0x00145DDC
		public static int ReadInt32(IntPtr ptr); // 0x002D27B8-0x002D2804
		[ReliabilityContract] // 0x00145DDC-0x00145DF4
		private static int ReleaseInternal(IntPtr pUnk); // 0x002D2804-0x002D2808
		[ReliabilityContract] // 0x00145DF4-0x00145E0C
		public static int Release(IntPtr pUnk); // 0x002D2808-0x002D2908
		public static int SizeOf(Type t); // 0x002D2908-0x002D290C
		public static IntPtr StringToHGlobalUni(string s); // 0x002D290C-0x002D2910
		[ComVisible] // 0x00145E0C-0x00145E48
		[ReliabilityContract] // 0x00145E0C-0x00145E48
		public static void StructureToPtr(object structure, IntPtr ptr, bool fDeleteOld); // 0x002D2910-0x002D2914
		public static void StructureToPtr<T>(T structure, IntPtr ptr, bool fDeleteOld);
		public static IntPtr UnsafeAddrOfPinnedArrayElement(Array arr, int index); // 0x002D2914-0x002D2918
		public static IntPtr UnsafeAddrOfPinnedArrayElement<T>(T[] arr, int index);
	}

	[AttributeUsage] // 0x0013FA78-0x0013FAC4
	[ComVisible] // 0x0013FA78-0x0013FAC4
	public sealed class MarshalAsAttribute : Attribute // TypeDefIndex: 1263
	{
		// Fields
		public string MarshalCookie; // 0x08
		[ComVisible] // 0x001431B8-0x001431CC
		public string MarshalType; // 0x0C
		[ComVisible] // 0x001431CC-0x001431E0
		public Type MarshalTypeRef; // 0x10
		public Type SafeArrayUserDefinedSubType; // 0x14
		private UnmanagedType utype; // 0x18
		public UnmanagedType ArraySubType; // 0x1C
		public VarEnum SafeArraySubType; // 0x20
		public int SizeConst; // 0x24
		public int IidParameterIndex; // 0x28
		public short SizeParamIndex; // 0x2C
	
		// Methods
		internal MarshalAsAttribute Copy(); // 0x002D299C-0x002D2A7C
	}

	public abstract class SafeBuffer : SafeHandleZeroOrMinusOneIsInvalid, IDisposable // TypeDefIndex: 1264
	{
		// Fields
		private bool inited; // 0x12
	
		// Methods
		[CLSCompliant] // 0x00145E48-0x00145E84
		[ReliabilityContract] // 0x00145E48-0x00145E84
		public unsafe void AcquirePointer(ref byte* pointer); // 0x002D2B68-0x002D2C44
		[ReliabilityContract] // 0x00145E84-0x00145E9C
		public void ReleasePointer(); // 0x002D2D60-0x002D2E08
	}

	[CLSCompliant] // 0x0013FAC4-0x0013FB58
	[ComVisible] // 0x0013FAC4-0x0013FB58
	[Guid] // 0x0013FAC4-0x0013FB58
	[InterfaceType] // 0x0013FAC4-0x0013FB58
	public interface _Activator // TypeDefIndex: 1265
	{
	}

	[CLSCompliant] // 0x0013FB58-0x0013FBEC
	[ComVisible] // 0x0013FB58-0x0013FBEC
	[Guid] // 0x0013FB58-0x0013FBEC
	[InterfaceType] // 0x0013FB58-0x0013FBEC
	public interface _Assembly // TypeDefIndex: 1266
	{
	}

	[CLSCompliant] // 0x0013FBEC-0x0013FC80
	[ComVisible] // 0x0013FBEC-0x0013FC80
	[Guid] // 0x0013FBEC-0x0013FC80
	[InterfaceType] // 0x0013FBEC-0x0013FC80
	public interface _AssemblyName // TypeDefIndex: 1267
	{
	}

	[CLSCompliant] // 0x0013FC80-0x0013FD14
	[ComVisible] // 0x0013FC80-0x0013FD14
	[Guid] // 0x0013FC80-0x0013FD14
	[InterfaceType] // 0x0013FC80-0x0013FD14
	public interface _Attribute // TypeDefIndex: 1268
	{
	}

	[CLSCompliant] // 0x0013FD14-0x0013FDA8
	[ComVisible] // 0x0013FD14-0x0013FDA8
	[Guid] // 0x0013FD14-0x0013FDA8
	[InterfaceType] // 0x0013FD14-0x0013FDA8
	public interface _ConstructorInfo // TypeDefIndex: 1269
	{
	}

	[CLSCompliant] // 0x0013FDA8-0x0013FE3C
	[ComVisible] // 0x0013FDA8-0x0013FE3C
	[Guid] // 0x0013FDA8-0x0013FE3C
	[InterfaceType] // 0x0013FDA8-0x0013FE3C
	public interface _EventInfo // TypeDefIndex: 1270
	{
	}

	[CLSCompliant] // 0x0013FE3C-0x0013FED0
	[ComVisible] // 0x0013FE3C-0x0013FED0
	[Guid] // 0x0013FE3C-0x0013FED0
	[InterfaceType] // 0x0013FE3C-0x0013FED0
	public interface _Exception // TypeDefIndex: 1271
	{
	}

	[CLSCompliant] // 0x0013FED0-0x0013FF64
	[ComVisible] // 0x0013FED0-0x0013FF64
	[Guid] // 0x0013FED0-0x0013FF64
	[InterfaceType] // 0x0013FED0-0x0013FF64
	public interface _FieldInfo // TypeDefIndex: 1272
	{
	}

	[CLSCompliant] // 0x0013FF64-0x0013FFF8
	[ComVisible] // 0x0013FF64-0x0013FFF8
	[Guid] // 0x0013FF64-0x0013FFF8
	[InterfaceType] // 0x0013FF64-0x0013FFF8
	public interface _MemberInfo // TypeDefIndex: 1273
	{
	}

	[CLSCompliant] // 0x0013FFF8-0x0014008C
	[ComVisible] // 0x0013FFF8-0x0014008C
	[Guid] // 0x0013FFF8-0x0014008C
	[InterfaceType] // 0x0013FFF8-0x0014008C
	public interface _MethodBase // TypeDefIndex: 1274
	{
	}

	[CLSCompliant] // 0x0014008C-0x00140120
	[ComVisible] // 0x0014008C-0x00140120
	[Guid] // 0x0014008C-0x00140120
	[InterfaceType] // 0x0014008C-0x00140120
	public interface _MethodInfo // TypeDefIndex: 1275
	{
	}

	[CLSCompliant] // 0x00140120-0x001401B4
	[ComVisible] // 0x00140120-0x001401B4
	[Guid] // 0x00140120-0x001401B4
	[InterfaceType] // 0x00140120-0x001401B4
	public interface _Module // TypeDefIndex: 1276
	{
	}

	[CLSCompliant] // 0x001401B4-0x00140248
	[ComVisible] // 0x001401B4-0x00140248
	[Guid] // 0x001401B4-0x00140248
	[InterfaceType] // 0x001401B4-0x00140248
	public interface _ParameterInfo // TypeDefIndex: 1277
	{
	}

	[CLSCompliant] // 0x00140248-0x001402DC
	[ComVisible] // 0x00140248-0x001402DC
	[Guid] // 0x00140248-0x001402DC
	[InterfaceType] // 0x00140248-0x001402DC
	public interface _PropertyInfo // TypeDefIndex: 1278
	{
	}

	[CLSCompliant] // 0x001402DC-0x00140370
	[ComVisible] // 0x001402DC-0x00140370
	[Guid] // 0x001402DC-0x00140370
	[InterfaceType] // 0x001402DC-0x00140370
	public interface _SignatureHelper // TypeDefIndex: 1279
	{
	}

	[CLSCompliant] // 0x00140370-0x00140404
	[ComVisible] // 0x00140370-0x00140404
	[Guid] // 0x00140370-0x00140404
	[InterfaceType] // 0x00140370-0x00140404
	public interface _Thread // TypeDefIndex: 1280
	{
	}

	[CLSCompliant] // 0x00140404-0x00140498
	[ComVisible] // 0x00140404-0x00140498
	[Guid] // 0x00140404-0x00140498
	[InterfaceType] // 0x00140404-0x00140498
	public interface _Type // TypeDefIndex: 1281
	{
	}
}

namespace System.Collections
{
	[Serializable]
	public struct DictionaryEntry // TypeDefIndex: 1282
	{
		// Fields
		private object _key; // 0x00
		private object _value; // 0x04
	
		// Properties
		public object Key { get; } // 0x0077CDBC-0x0077CDCC 
		public object Value { get; } // 0x0077CDCC-0x0077CDD4 
	
		// Constructors
		public DictionaryEntry(object key, object value); // 0x0077CDA8-0x0077CDBC
	}

	internal sealed class LowLevelComparer : IComparer // TypeDefIndex: 1283
	{
		// Fields
		internal static readonly LowLevelComparer Default; // 0x00
	
		// Constructors
		private LowLevelComparer(); // 0x007831C0-0x007831C8
		static LowLevelComparer(); // 0x007833E4-0x00783458
	
		// Methods
		public int Compare(object a, object b); // 0x007831C8-0x007833E4
	}

	[Serializable]
	[ComVisible] // 0x00140498-0x00140574
	[DebuggerDisplay] // 0x00140498-0x00140574
	[DebuggerTypeProxy] // 0x00140498-0x00140574
	public class ArrayList : IList, ICloneable // TypeDefIndex: 1284
	{
		// Fields
		private object[] _items; // 0x08
		private int _size; // 0x0C
		private int _version; // 0x10
		[NonSerialized]
		private object _syncRoot; // 0x14
		private static readonly object[] emptyArray; // 0x00
	
		// Properties
		public virtual int Capacity { set; } // 0x007783C8-0x0077851C
		public virtual int Count { get; } // 0x0077851C-0x00778524 
		public virtual bool IsFixedSize { get; } // 0x00778524-0x0077852C 
		public virtual bool IsReadOnly { get; } // 0x0077852C-0x00778534 
		public virtual bool IsSynchronized { get; } // 0x00778534-0x0077853C 
		public virtual object SyncRoot { get; } // 0x0077853C-0x007785C8 
		public virtual object this[int index] { get => default; set {} } // 0x007785C8-0x007786D4 0x007786D4-0x00778820
	
		// Nested types
		[Serializable]
		private class ReadOnlyArrayList : ArrayList // TypeDefIndex: 1285
		{
			// Fields
			private ArrayList _list; // 0x18
	
			// Properties
			public override int Count { get; } // 0x00779ECC-0x00779F00 
			public override bool IsReadOnly { get; } // 0x00779F00-0x00779F08 
			public override bool IsFixedSize { get; } // 0x00779F08-0x00779F10 
			public override bool IsSynchronized { get; } // 0x00779F10-0x00779F44 
			public override object this[int index] { get => default; set {} } // 0x00779F44-0x00779F80 0x00779F80-0x0077A028
			public override object SyncRoot { get; } // 0x0077A028-0x0077A05C 
			public override int Capacity { set; } // 0x0077A1AC-0x0077A254
	
			// Constructors
			internal ReadOnlyArrayList(ArrayList l); // 0x0077945C-0x007794E4
	
			// Methods
			public override int Add(object obj); // 0x0077A05C-0x0077A104
			public override void AddRange(ICollection c); // 0x0077A104-0x0077A1AC
			public override void Clear(); // 0x0077A254-0x0077A2FC
			public override object Clone(); // 0x0077A2FC-0x0077A450
			public override bool Contains(object obj); // 0x0077A450-0x0077A48C
			public override void CopyTo(Array array, int index); // 0x0077A48C-0x0077A4D0
			public override IEnumerator GetEnumerator(); // 0x0077A4D0-0x0077A504
			public override int IndexOf(object value); // 0x0077A504-0x0077A540
			public override void Insert(int index, object obj); // 0x0077A540-0x0077A5E8
			public override void InsertRange(int index, ICollection c); // 0x0077A5E8-0x0077A690
			public override void Remove(object value); // 0x0077A690-0x0077A738
			public override void RemoveAt(int index); // 0x0077A738-0x0077A7E0
			public override object[] ToArray(); // 0x0077A7E0-0x0077A814
			public override Array ToArray(Type type); // 0x0077A814-0x0077A850
		}
	
		[Serializable]
		private sealed class ArrayListEnumeratorSimple : IEnumerator, ICloneable // TypeDefIndex: 1286
		{
			// Fields
			private ArrayList list; // 0x08
			private int index; // 0x0C
			private int version; // 0x10
			private object currentElement; // 0x14
			[NonSerialized]
			private bool isArrayList; // 0x18
			private static object dummyObject; // 0x00
	
			// Properties
			public object Current { get; } // 0x00779BCC-0x00779D28 
	
			// Constructors
			internal ArrayListEnumeratorSimple(ArrayList list); // 0x00778D84-0x00778ED0
			static ArrayListEnumeratorSimple(); // 0x00779E4C-0x00779ECC
	
			// Methods
			public object Clone(); // 0x00779920-0x00779928
			public bool MoveNext(); // 0x00779928-0x00779BCC
			public void Reset(); // 0x00779D28-0x00779E4C
		}
	
		internal class ArrayListDebugView // TypeDefIndex: 1287
		{
		}
	
		// Constructors
		public ArrayList(); // 0x00777FD0-0x00778070
		public ArrayList(int capacity); // 0x00778070-0x007781F0
		public ArrayList(ICollection c); // 0x007781F0-0x007783C8
		static ArrayList(); // 0x0077987C-0x00779920
	
		// Methods
		public virtual int Add(object value); // 0x00778820-0x007788EC
		public virtual void AddRange(ICollection c); // 0x00778994-0x007789AC
		public virtual void Clear(); // 0x007789AC-0x007789E8
		public virtual object Clone(); // 0x007789E8-0x00778AD0
		public virtual bool Contains(object item); // 0x00778AD0-0x00778C24
		public virtual void CopyTo(Array array, int arrayIndex); // 0x00778C24-0x00778D14
		private void EnsureCapacity(int min); // 0x007788EC-0x00778994
		public virtual IEnumerator GetEnumerator(); // 0x00778D14-0x00778D84
		public virtual int IndexOf(object value); // 0x00778ED0-0x00778EF8
		public virtual void Insert(int index, object value); // 0x00778EF8-0x007790B0
		public virtual void InsertRange(int index, ICollection c); // 0x007790B0-0x00779390
		public static ArrayList ReadOnly(ArrayList list); // 0x00779390-0x0077945C
		public virtual void Remove(object obj); // 0x007794E4-0x00779528
		public virtual void RemoveAt(int index); // 0x00779528-0x0077967C
		public virtual object[] ToArray(); // 0x0077967C-0x0077970C
		public virtual Array ToArray(Type type); // 0x0077970C-0x0077987C
	}

	[Serializable]
	[ComVisible] // 0x001405A8-0x001405BC
	public class CaseInsensitiveComparer : IComparer // TypeDefIndex: 1288
	{
		// Fields
		private CompareInfo m_compareInfo; // 0x08
	
		// Properties
		public static CaseInsensitiveComparer Default { get; } // 0x0077A9D8-0x0077AA7C 
	
		// Constructors
		public CaseInsensitiveComparer(); // 0x0077A850-0x0077A908
		public CaseInsensitiveComparer(CultureInfo culture); // 0x0077A908-0x0077A9D8
	
		// Methods
		public int Compare(object a, object b); // 0x0077AA7C-0x0077ABE0
	}

	[Serializable]
	[ComVisible] // 0x001405BC-0x00140624
	[Obsolete] // 0x001405BC-0x00140624
	public class CaseInsensitiveHashCodeProvider : IHashCodeProvider // TypeDefIndex: 1289
	{
		// Fields
		private TextInfo m_text; // 0x08
	
		// Properties
		public static CaseInsensitiveHashCodeProvider Default { get; } // 0x0077AFF0-0x0077B094 
	
		// Constructors
		public CaseInsensitiveHashCodeProvider(); // 0x0077AE68-0x0077AF20
		public CaseInsensitiveHashCodeProvider(CultureInfo culture); // 0x0077AF20-0x0077AFF0
		static CaseInsensitiveHashCodeProvider(); // 0x0077B1A0-0x0077B1A4
	
		// Methods
		public int GetHashCode(object obj); // 0x0077B094-0x0077B1A0
	}

	[Serializable]
	[ComVisible] // 0x00140624-0x00140638
	public abstract class CollectionBase : IList // TypeDefIndex: 1290
	{
		// Fields
		private ArrayList list; // 0x08
	
		// Properties
		protected ArrayList InnerList { get; } // 0x0077B21C-0x0077B298 
		public int Count { get; } // 0x0077B298-0x0077B2B8 
		bool IList.IsReadOnly { get; } // 0x0077B5A0-0x0077B5D8 
		bool IList.IsFixedSize { get; } // 0x0077B5D8-0x0077B610 
		bool ICollection.IsSynchronized { get; } // 0x0077B610-0x0077B648 
		object ICollection.SyncRoot { get; } // 0x0077B648-0x0077B680 
		object IList.this[int index] { get => default; set {} } // 0x0077B6C8-0x0077B7F4 0x0077B7F4-0x0077BA94
	
		// Constructors
		protected CollectionBase(); // 0x0077B1A4-0x0077B21C
	
		// Methods
		public void Clear(); // 0x0077B2B8-0x0077B320
		public void RemoveAt(int index); // 0x0077B320-0x0077B5A0
		void ICollection.CopyTo(Array array, int index); // 0x0077B680-0x0077B6C8
		bool IList.Contains(object value); // 0x0077BA94-0x0077BAD4
		int IList.Add(object value); // 0x0077BAD4-0x0077BCB4
		void IList.Remove(object value); // 0x0077BCB4-0x0077BEF4
		int IList.IndexOf(object value); // 0x0077BEF4-0x0077BF34
		void IList.Insert(int index, object value); // 0x0077BF34-0x0077C180
		public IEnumerator GetEnumerator(); // 0x0077C180-0x0077C1B8
		protected virtual void OnSet(int index, object oldValue, object newValue); // 0x0077C1B8-0x0077C1BC
		protected virtual void OnInsert(int index, object value); // 0x0077C1BC-0x0077C1C0
		protected virtual void OnClear(); // 0x0077C1C0-0x0077C1C4
		protected virtual void OnRemove(int index, object value); // 0x0077C1C4-0x0077C1C8
		protected virtual void OnValidate(object value); // 0x0077C1C8-0x0077C26C
		protected virtual void OnSetComplete(int index, object oldValue, object newValue); // 0x0077C26C-0x0077C270
		protected virtual void OnInsertComplete(int index, object value); // 0x0077C270-0x0077C274
		protected virtual void OnClearComplete(); // 0x0077C274-0x0077C278
		protected virtual void OnRemoveComplete(int index, object value); // 0x0077C278-0x0077C27C
	}

	[Serializable]
	[ComVisible] // 0x00140638-0x0014064C
	public sealed class Comparer : IComparer, ISerializable // TypeDefIndex: 1291
	{
		// Fields
		private CompareInfo m_compareInfo; // 0x08
		public static readonly Comparer Default; // 0x00
		public static readonly Comparer DefaultInvariant; // 0x04
	
		// Constructors
		private Comparer(); // 0x0077C27C-0x0077C29C
		public Comparer(CultureInfo culture); // 0x0077C29C-0x0077C36C
		private Comparer(SerializationInfo info, StreamingContext context); // 0x0077C36C-0x0077C57C
		static Comparer(); // 0x0077C650-0x0077C728
	
		// Methods
		public int Compare(object a, object b); // 0x0077ABE0-0x0077AE68
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0077C57C-0x0077C650
	}

	[Serializable]
	internal class CompatibleComparer : IEqualityComparer // TypeDefIndex: 1292
	{
		// Fields
		private IComparer _comparer; // 0x08
		private IHashCodeProvider _hcp; // 0x0C
	
		// Properties
		internal IComparer Comparer { get; } // 0x0077CAD0-0x0077CAD8 
		internal IHashCodeProvider HashCodeProvider { get; } // 0x0077CAD8-0x0077CAE0 
	
		// Constructors
		internal CompatibleComparer(IComparer comparer, IHashCodeProvider hashCodeProvider); // 0x0077C728-0x0077C750
	
		// Methods
		public int Compare(object a, object b); // 0x0077C750-0x0077C964
		public new bool Equals(object a, object b); // 0x0077C964-0x0077C984
		public int GetHashCode(object obj); // 0x0077C984-0x0077CAD0
	}

	[Serializable]
	[ComVisible] // 0x0014064C-0x00140728
	[DebuggerDisplay] // 0x0014064C-0x00140728
	[DebuggerTypeProxy] // 0x0014064C-0x00140728
	public class Hashtable : IDictionary, ISerializable, IDeserializationCallback, ICloneable // TypeDefIndex: 1293
	{
		// Fields
		private bucket[] buckets; // 0x08
		private int count; // 0x0C
		private int occupancy; // 0x10
		private int loadsize; // 0x14
		private float loadFactor; // 0x18
		private int version; // 0x1C
		private bool isWriterInProgress; // 0x20
		private ICollection keys; // 0x24
		private IEqualityComparer _keycomparer; // 0x28
		private object _syncRoot; // 0x2C
	
		// Properties
		public virtual object this[object key] { get => default; set {} } // 0x0077F584-0x0077F828 0x0077F828-0x0077F844
		public virtual bool IsSynchronized { get; } // 0x0077FF08-0x0077FF10 
		public virtual ICollection Keys { get; } // 0x00780034-0x007800B8 
		public virtual object SyncRoot { get; } // 0x00780454-0x007804E0 
		public virtual int Count { get; } // 0x007804E0-0x007804E8 
	
		// Nested types
		private struct bucket // TypeDefIndex: 1294
		{
			// Fields
			public object key; // 0x00
			public object val; // 0x04
			public int hash_coll; // 0x08
		}
	
		[Serializable]
		private class KeyCollection : ICollection // TypeDefIndex: 1295
		{
			// Fields
			private Hashtable _hashtable; // 0x08
	
			// Properties
			public virtual bool IsSynchronized { get; } // 0x007821B8-0x007821EC 
			public virtual object SyncRoot { get; } // 0x007821EC-0x00782220 
			public virtual int Count { get; } // 0x00782220-0x00782244 
	
			// Constructors
			internal KeyCollection(Hashtable hashtable); // 0x007800B8-0x007800D8
	
			// Methods
			public virtual void CopyTo(Array array, int arrayIndex); // 0x00781F24-0x00782140
			public virtual IEnumerator GetEnumerator(); // 0x00782140-0x007821B8
		}
	
		[Serializable]
		private class SyncHashtable : Hashtable, IEnumerable // TypeDefIndex: 1296
		{
			// Fields
			protected Hashtable _table; // 0x30
	
			// Properties
			public override int Count { get; } // 0x007825F4-0x00782628 
			public override bool IsSynchronized { get; } // 0x00782628-0x00782630 
			public override object this[object key] { get => default; set {} } // 0x00782630-0x0078266C 0x0078266C-0x00782764
			public override object SyncRoot { get; } // 0x00782764-0x00782798 
			public override ICollection Keys { get; } // 0x00782DDC-0x00782ED0 
	
			// Constructors
			internal SyncHashtable(Hashtable table); // 0x007805B8-0x007805D8
			internal SyncHashtable(SerializationInfo info, StreamingContext context); // 0x00782244-0x0078241C
	
			// Methods
			public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0078241C-0x007825F4
			public override void Add(object key, object value); // 0x00782798-0x00782890
			public override void Clear(); // 0x00782890-0x00782978
			public override bool Contains(object key); // 0x00782978-0x007829B4
			public override bool ContainsKey(object key); // 0x007829B4-0x00782AAC
			public override void CopyTo(Array array, int arrayIndex); // 0x00782AAC-0x00782BA4
			public override object Clone(); // 0x00782BA4-0x00782D74
			new IEnumerator IEnumerable.GetEnumerator(); // 0x00782D74-0x00782DA8
			public override IDictionaryEnumerator GetEnumerator(); // 0x00782DA8-0x00782DDC
			public override void Remove(object key); // 0x00782ED0-0x00782FC0
			public override void OnDeserialization(object sender); // 0x00782FC0-0x007831C0
		}
	
		[Serializable]
		private class HashtableEnumerator : IDictionaryEnumerator, ICloneable // TypeDefIndex: 1297
		{
			// Fields
			private Hashtable hashtable; // 0x08
			private int bucket; // 0x0C
			private int version; // 0x10
			private bool current; // 0x14
			private int getObjectRetType; // 0x18
			private object currentKey; // 0x1C
			private object currentValue; // 0x20
	
			// Properties
			public virtual object Key { get; } // 0x007818E8-0x007819A4 
			public virtual DictionaryEntry Entry { get; } // 0x00781B78-0x00781C40 
			public virtual object Current { get; } // 0x00781C40-0x00781D4C 
			public virtual object Value { get; } // 0x00781D4C-0x00781E08 
	
			// Constructors
			internal HashtableEnumerator(Hashtable hashtable, int getObjRetType); // 0x0077FD2C-0x0077FD94
	
			// Methods
			public object Clone(); // 0x007818E0-0x007818E8
			public virtual bool MoveNext(); // 0x007819A4-0x00781B78
			public virtual void Reset(); // 0x00781E08-0x00781F24
		}
	
		internal class HashtableDebugView // TypeDefIndex: 1298
		{
		}
	
		// Constructors
		internal Hashtable(bool trash); // 0x0077DD34-0x0077DD40
		public Hashtable(); // 0x0077514C-0x00775158
		public Hashtable(int capacity); // 0x0077E090-0x0077E098
		public Hashtable(int capacity, float loadFactor); // 0x0077DD40-0x0077E090
		[Obsolete] // 0x00145E9C-0x00145F08
		public Hashtable(int capacity, float loadFactor, IHashCodeProvider hcp, IComparer comparer); // 0x0077E098-0x0077E13C
		public Hashtable(int capacity, float loadFactor, IEqualityComparer equalityComparer); // 0x0077E13C-0x0077E158
		[Obsolete] // 0x00145F08-0x00145F68
		public Hashtable(IHashCodeProvider hcp, IComparer comparer); // 0x0077E158-0x0077E180
		public Hashtable(IEqualityComparer equalityComparer); // 0x0077E180-0x0077E1A4
		public Hashtable(int capacity, IEqualityComparer equalityComparer); // 0x0077E1A4-0x0077E1C4
		protected Hashtable(SerializationInfo info, StreamingContext context); // 0x0077E1C4-0x0077E284
	
		// Methods
		private uint InitHash(object key, int hashsize, out uint seed, out uint incr); // 0x0077E284-0x0077E2D0
		public virtual void Add(object key, object value); // 0x0077E2D0-0x0077E2EC
		[ReliabilityContract] // 0x00145F68-0x00145F80
		public virtual void Clear(); // 0x0077EB00-0x0077EC88
		public virtual object Clone(); // 0x0077ECAC-0x0077EE48
		public virtual bool Contains(object key); // 0x0077EE48-0x0077EE58
		public virtual bool ContainsKey(object key); // 0x0077EE58-0x0077F054
		private void CopyKeys(Array array, int arrayIndex); // 0x0077F054-0x0077F128
		private void CopyEntries(Array array, int arrayIndex); // 0x0077F128-0x0077F27C
		public virtual void CopyTo(Array array, int arrayIndex); // 0x0077F27C-0x0077F498
		private void CopyValues(Array array, int arrayIndex); // 0x0077F498-0x0077F584
		private void expand(); // 0x0077F844-0x0077F8E8
		private void rehash(); // 0x0077FA88-0x0077FABC
		private void UpdateVersion(); // 0x0077EC88-0x0077ECAC
		[ReliabilityContract] // 0x00145F80-0x00145F98
		private void rehash(int newsize, bool forceNewHashCode); // 0x0077F8E8-0x0077FA88
		IEnumerator IEnumerable.GetEnumerator(); // 0x0077FCB8-0x0077FD2C
		public virtual IDictionaryEnumerator GetEnumerator(); // 0x0077FD94-0x0077FE08
		protected virtual int GetHash(object key); // 0x0077FE08-0x0077FF08
		protected virtual bool KeyEquals(object item, object key); // 0x0077FF10-0x00780034
		[ReliabilityContract] // 0x00145F98-0x00145FB0
		private void Insert(object key, object nvalue, bool add); // 0x0077E2EC-0x0077EB00
		private void putEntry(bucket[] newBuckets, object key, object nvalue, int hashcode); // 0x0077FABC-0x0077FCB8
		[ReliabilityContract] // 0x00145FB0-0x00145FC8
		public virtual void Remove(object key); // 0x007800D8-0x00780454
		public static Hashtable Synchronized(Hashtable table); // 0x007804E8-0x007805B8
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x007805D8-0x00780BAC
		public virtual void OnDeserialization(object sender); // 0x00780BAC-0x007818E0
	}

	[FriendAccessAllowed] // 0x0014075C-0x0014076C
	internal static class HashHelpers // TypeDefIndex: 1299
	{
		// Fields
		public static readonly int[] primes; // 0x00
		private static ConditionalWeakTable<object, SerializationInfo> s_SerializationInfoTable; // 0x04
	
		// Properties
		internal static ConditionalWeakTable<object, SerializationInfo> SerializationInfoTable { get; } // 0x0077D77C-0x0077D8D4 
	
		// Constructors
		static HashHelpers(); // 0x0077DC9C-0x0077DD34
	
		// Methods
		[ReliabilityContract] // 0x00145FC8-0x00145FE0
		public static bool IsPrime(int candidate); // 0x0077D8D4-0x0077D9CC
		[ReliabilityContract] // 0x00145FE0-0x00145FF8
		public static int GetPrime(int min); // 0x0077D9CC-0x0077DBF8
		public static int ExpandPrime(int oldSize); // 0x0077DBF8-0x0077DC9C
	}

	[ComVisible] // 0x0014076C-0x00140780
	public interface ICollection : IEnumerable // TypeDefIndex: 1300
	{
		// Properties
		int Count { get; }
		object SyncRoot { get; }
		bool IsSynchronized { get; }
	
		// Methods
		void CopyTo(Array array, int index);
	}

	[ComVisible] // 0x00140780-0x00140794
	public interface IComparer // TypeDefIndex: 1301
	{
		// Methods
		int Compare(object x, object y);
	}

	[ComVisible] // 0x00140794-0x001407E0
	public interface IDictionary : ICollection // TypeDefIndex: 1302
	{
		// Properties
		object this[object key] { get => default; set {} }
		ICollection Keys { get; }
	
		// Methods
		IDictionaryEnumerator GetEnumerator();
	}

	[ComVisible] // 0x001407E0-0x001407F4
	public interface IDictionaryEnumerator : IEnumerator // TypeDefIndex: 1303
	{
		// Properties
		object Key { get; }
		object Value { get; }
		DictionaryEntry Entry { get; }
	}

	[ComVisible] // 0x001407F4-0x00140860
	[Guid] // 0x001407F4-0x00140860
	public interface IEnumerable // TypeDefIndex: 1304
	{
		// Methods
		[DispId] // 0x00145FF8-0x0014600C
		IEnumerator GetEnumerator();
	}

	[ComVisible] // 0x00140860-0x001408CC
	[Guid] // 0x00140860-0x001408CC
	public interface IEnumerator // TypeDefIndex: 1305
	{
		// Properties
		object Current { get; }
	
		// Methods
		bool MoveNext();
		void Reset();
	}

	[ComVisible] // 0x001408CC-0x001408E0
	public interface IEqualityComparer // TypeDefIndex: 1306
	{
		// Methods
		bool Equals(object x, object y);
		int GetHashCode(object obj);
	}

	[ComVisible] // 0x001408E0-0x0014094C
	[Obsolete] // 0x001408E0-0x0014094C
	public interface IHashCodeProvider // TypeDefIndex: 1307
	{
		// Methods
		int GetHashCode(object obj);
	}

	[ComVisible] // 0x0014094C-0x00140998
	public interface IList : ICollection // TypeDefIndex: 1308
	{
		// Properties
		object this[int index] { get => default; set {} }
		bool IsReadOnly { get; }
		bool IsFixedSize { get; }
	
		// Methods
		int Add(object value);
		bool Contains(object value);
		void Clear();
		int IndexOf(object value);
		void Insert(int index, object value);
		void Remove(object value);
		void RemoveAt(int index);
	}

	public interface IStructuralComparable // TypeDefIndex: 1309
	{
		// Methods
		int CompareTo(object other, IComparer comparer);
	}

	public interface IStructuralEquatable // TypeDefIndex: 1310
	{
		// Methods
		bool Equals(object other, IEqualityComparer comparer);
		int GetHashCode(IEqualityComparer comparer);
	}

	[Serializable]
	[ComVisible] // 0x00140998-0x00140A4C
	[DebuggerDisplay] // 0x00140998-0x00140A4C
	[DebuggerTypeProxy] // 0x00140998-0x00140A4C
	public class Queue : ICollection, ICloneable // TypeDefIndex: 1311
	{
		// Fields
		private object[] _array; // 0x08
		private int _head; // 0x0C
		private int _tail; // 0x10
		private int _size; // 0x14
		private int _growFactor; // 0x18
		private int _version; // 0x1C
		[NonSerialized]
		private object _syncRoot; // 0x20
	
		// Properties
		public virtual int Count { get; } // 0x007839D8-0x007839E0 
		public virtual bool IsSynchronized { get; } // 0x00783B2C-0x00783B34 
		public virtual object SyncRoot { get; } // 0x00783B34-0x00783BC4 
	
		// Nested types
		[Serializable]
		private class QueueEnumerator : IEnumerator, ICloneable // TypeDefIndex: 1312
		{
			// Fields
			private Queue _q; // 0x08
			private int _index; // 0x0C
			private int _version; // 0x10
			private object currentElement; // 0x14
	
			// Properties
			public virtual object Current { get; } // 0x0031F104-0x0031F234 
	
			// Constructors
			internal QueueEnumerator(Queue q); // 0x0031EF08-0x0031EFA0
	
			// Methods
			public object Clone(); // 0x0031EFA0-0x0031EFA8
			public virtual bool MoveNext(); // 0x0031EFA8-0x0031F104
			public virtual void Reset(); // 0x0031F234-0x0031F350
		}
	
		internal class QueueDebugView // TypeDefIndex: 1313
		{
		}
	
		// Constructors
		public Queue(); // 0x00783458-0x00783464
		public Queue(int capacity); // 0x007836B0-0x007836B8
		public Queue(int capacity, float growFactor); // 0x00783464-0x007836B0
		public Queue(ICollection col); // 0x007836B8-0x007839D8
	
		// Methods
		public virtual object Clone(); // 0x007839E0-0x00783B2C
		public virtual void CopyTo(Array array, int index); // 0x00783BC4-0x00783E5C
		public virtual void Enqueue(object obj); // 0x00783E5C-0x00783FC0
		public virtual IEnumerator GetEnumerator(); // 0x00784118-0x0078418C
		public virtual object Dequeue(); // 0x0078418C-0x00784318
		public virtual object Peek(); // 0x00784318-0x00784420
		internal object GetElement(int i); // 0x00784420-0x007844A0
		private void SetCapacity(int capacity); // 0x00783FC0-0x00784118
	}

	[Serializable]
	[ComVisible] // 0x00140A4C-0x00140B28
	[DebuggerDisplay] // 0x00140A4C-0x00140B28
	[DebuggerTypeProxy] // 0x00140A4C-0x00140B28
	public class SortedList : IDictionary, ICloneable // TypeDefIndex: 1314
	{
		// Fields
		private object[] keys; // 0x08
		private object[] values; // 0x0C
		private int _size; // 0x10
		private int version; // 0x14
		private IComparer comparer; // 0x18
		private KeyList keyList; // 0x1C
		[NonSerialized]
		private object _syncRoot; // 0x20
		private static object[] emptyArray; // 0x00
	
		// Properties
		public virtual int Capacity { get; set; } // 0x0031F9C4-0x0031F9E8 0x0031F9E8-0x0031FBC8
		public virtual int Count { get; } // 0x0031FBC8-0x0031FBD0 
		public virtual ICollection Keys { get; } // 0x0031FBD0-0x0031FBE0 
		public virtual bool IsSynchronized { get; } // 0x0031FBE0-0x0031FBE8 
		public virtual object SyncRoot { get; } // 0x0031FBE8-0x0031FC74 
		public virtual object this[object key] { get => default; set {} } // 0x003205F8-0x00320668 0x00320668-0x00320800
	
		// Nested types
		[Serializable]
		private class SortedListEnumerator : IDictionaryEnumerator, ICloneable // TypeDefIndex: 1315
		{
			// Fields
			private SortedList sortedList; // 0x08
			private object key; // 0x0C
			private object value; // 0x10
			private int index; // 0x14
			private int startIndex; // 0x18
			private int endIndex; // 0x1C
			private int version; // 0x20
			private bool current; // 0x24
			private int getObjectRetType; // 0x28
	
			// Properties
			public virtual object Key { get; } // 0x003213D8-0x00321508 
			public virtual DictionaryEntry Entry { get; } // 0x003216B8-0x0032180C 
			public virtual object Current { get; } // 0x0032180C-0x00321938 
			public virtual object Value { get; } // 0x00321938-0x00321A68 
	
			// Constructors
			internal SortedListEnumerator(SortedList sortedList, int index, int count, int getObjRetType); // 0x00320340-0x003203A0
	
			// Methods
			public object Clone(); // 0x003213D0-0x003213D8
			public virtual bool MoveNext(); // 0x00321508-0x003216B8
			public virtual void Reset(); // 0x00321A68-0x00321B50
		}
	
		[Serializable]
		private class KeyList : IList // TypeDefIndex: 1316
		{
			// Fields
			private SortedList sortedList; // 0x08
	
			// Properties
			public virtual int Count { get; } // 0x00320B7C-0x00320BA0 
			public virtual bool IsReadOnly { get; } // 0x00320BA0-0x00320BA8 
			public virtual bool IsFixedSize { get; } // 0x00320BA8-0x00320BB0 
			public virtual bool IsSynchronized { get; } // 0x00320BB0-0x00320BE4 
			public virtual object SyncRoot { get; } // 0x00320BE4-0x00320C18 
			public virtual object this[int index] { get => default; set {} } // 0x00320F88-0x00320FC4 0x00320FC4-0x0032106C
	
			// Constructors
			internal KeyList(SortedList sortedList); // 0x003205D8-0x003205F8
	
			// Methods
			public virtual int Add(object key); // 0x00320C18-0x00320CC0
			public virtual void Clear(); // 0x00320CC0-0x00320D68
			public virtual bool Contains(object key); // 0x00320D68-0x00320DA4
			public virtual void CopyTo(Array array, int arrayIndex); // 0x00320DA4-0x00320EE0
			public virtual void Insert(int index, object value); // 0x00320EE0-0x00320F88
			public virtual IEnumerator GetEnumerator(); // 0x0032106C-0x00321124
			public virtual int IndexOf(object key); // 0x00321124-0x00321280
			public virtual void Remove(object key); // 0x00321280-0x00321328
			public virtual void RemoveAt(int index); // 0x00321328-0x003213D0
		}
	
		internal class SortedListDebugView // TypeDefIndex: 1317
		{
		}
	
		// Constructors
		public SortedList(); // 0x0031F350-0x0031F370
		public SortedList(int initialCapacity); // 0x0031F478-0x0031F5E0
		public SortedList(IComparer comparer); // 0x0031F5E0-0x0031F60C
		public SortedList(IComparer comparer, int capacity); // 0x0031F60C-0x0031F63C
		static SortedList(); // 0x00320AD8-0x00320B7C
	
		// Methods
		private void Init(); // 0x0031F370-0x0031F478
		public virtual void Add(object key, object value); // 0x0031F63C-0x0031F834
		public virtual object Clone(); // 0x0031FC74-0x0031FDA8
		public virtual bool Contains(object key); // 0x0031FDA8-0x0031FDD4
		public virtual void CopyTo(Array array, int arrayIndex); // 0x0031FDD4-0x00320104
		private void EnsureCapacity(int min); // 0x00320104-0x0032018C
		public virtual object GetByIndex(int index); // 0x0032018C-0x003202B0
		IEnumerator IEnumerable.GetEnumerator(); // 0x003202B0-0x00320340
		public virtual IDictionaryEnumerator GetEnumerator(); // 0x003203A0-0x00320430
		public virtual object GetKey(int index); // 0x00320430-0x00320554
		public virtual IList GetKeyList(); // 0x00320554-0x003205D8
		public virtual int IndexOfKey(object key); // 0x00320800-0x00320900
		private void Insert(int index, object key, object value); // 0x0031F834-0x0031F9C4
		public virtual void RemoveAt(int index); // 0x00320900-0x00320AD8
	}

	[Serializable]
	[ComVisible] // 0x00140B5C-0x00140C10
	[DebuggerDisplay] // 0x00140B5C-0x00140C10
	[DebuggerTypeProxy] // 0x00140B5C-0x00140C10
	public class Stack : ICollection, ICloneable // TypeDefIndex: 1318
	{
		// Fields
		private object[] _array; // 0x08
		private int _size; // 0x0C
		private int _version; // 0x10
		[NonSerialized]
		private object _syncRoot; // 0x14
	
		// Properties
		public virtual int Count { get; } // 0x00321CDC-0x00321CE4 
		public virtual bool IsSynchronized { get; } // 0x00321CE4-0x00321CEC 
		public virtual object SyncRoot { get; } // 0x00321CEC-0x00321D78 
	
		// Nested types
		[Serializable]
		private class StackEnumerator : IEnumerator, ICloneable // TypeDefIndex: 1319
		{
			// Fields
			private Stack _stack; // 0x08
			private int _index; // 0x0C
			private int _version; // 0x10
			private object currentElement; // 0x14
	
			// Properties
			public virtual object Current { get; } // 0x003228BC-0x003229D0 
	
			// Constructors
			internal StackEnumerator(Stack stack); // 0x00322300-0x00322344
	
			// Methods
			public object Clone(); // 0x003226D8-0x003226E0
			public virtual bool MoveNext(); // 0x003226E0-0x003228BC
			public virtual void Reset(); // 0x003229D0-0x00322AB0
		}
	
		internal class StackDebugView // TypeDefIndex: 1320
		{
		}
	
		// Constructors
		public Stack(); // 0x00321B50-0x00321BD0
		public Stack(int initialCapacity); // 0x00321BD0-0x00321CDC
	
		// Methods
		public virtual void Clear(); // 0x00321D78-0x00321DB0
		public virtual object Clone(); // 0x00321DB0-0x00321E98
		public virtual void CopyTo(Array array, int index); // 0x00321E98-0x00322290
		public virtual IEnumerator GetEnumerator(); // 0x00322290-0x00322300
		public virtual object Peek(); // 0x00322344-0x0032243C
		public virtual object Pop(); // 0x0032243C-0x00322588
		public virtual void Push(object obj); // 0x00322588-0x003226D8
	}
}

namespace System.Collections.ObjectModel
{
	[Serializable]
	[ComVisible] // 0x00140C10-0x00140CEC
	[DebuggerDisplay] // 0x00140C10-0x00140CEC
	[DebuggerTypeProxy] // 0x00140C10-0x00140CEC
	public class ReadOnlyCollection<T> : IList<T>, IList, IReadOnlyList<T> // TypeDefIndex: 1321
	{
		// Fields
		private IList<T> list;
		[NonSerialized]
		private object _syncRoot;
	
		// Properties
		public int Count { get; }
		public T this[int index] { get => default; }
		bool ICollection<T>.IsReadOnly { get; }
		T IList<T>.this[int index] { get => default; set {} }
		bool ICollection.IsSynchronized { get; }
		object ICollection.SyncRoot { get; }
		bool IList.IsFixedSize { get; }
		bool IList.IsReadOnly { get; }
		object IList.this[int index] { get => default; set {} }
	
		// Constructors
		public ReadOnlyCollection(IList<T> list);
	
		// Methods
		public bool Contains(T value);
		public void CopyTo(T[] array, int index);
		public IEnumerator<T> GetEnumerator();
		public int IndexOf(T value);
		void ICollection<T>.Add(T value);
		void ICollection<T>.Clear();
		void IList<T>.Insert(int index, T value);
		bool ICollection<T>.Remove(T value);
		void IList<T>.RemoveAt(int index);
		IEnumerator IEnumerable.GetEnumerator();
		void ICollection.CopyTo(Array array, int index);
		int IList.Add(object value);
		void IList.Clear();
		private static bool IsCompatibleObject(object value);
		bool IList.Contains(object value);
		int IList.IndexOf(object value);
		void IList.Insert(int index, object value);
		void IList.Remove(object value);
		void IList.RemoveAt(int index);
	}
}

namespace System.Collections.Concurrent
{
	[EventSource] // 0x00140CEC-0x00140DA4
	internal sealed class CDSCollectionETWBCLProvider : EventSource // TypeDefIndex: 1322
	{
		// Fields
		public static CDSCollectionETWBCLProvider Log; // 0x00
	
		// Constructors
		private CDSCollectionETWBCLProvider(); // 0x0077CAE0-0x0077CAE8
		static CDSCollectionETWBCLProvider(); // 0x0077CB40-0x0077CDA8
	
		// Methods
		[Event] // 0x0014600C-0x00146040
		public void ConcurrentDictionary_AcquiringAllLocks(int numOfBuckets); // 0x0077CAE8-0x0077CB40
	}

	[Serializable]
	[DebuggerDisplay] // 0x00140DA4-0x00140E6C
	[DebuggerTypeProxy] // 0x00140DA4-0x00140E6C
	public class ConcurrentDictionary<TKey, TValue> : IDictionary<TKey, TValue>, IDictionary, IReadOnlyDictionary<TKey, TValue> // TypeDefIndex: 1323
	{
		// Fields
		private Tables _tables;
		private IEqualityComparer<TKey> _comparer;
		private readonly bool _growLockArray;
		private int _budget;
		private static readonly bool s_isValueWriteAtomic;
	
		// Properties
		public TValue this[TKey key] { get => default; set {} }
		public int Count { get; }
		public ICollection<TKey> Keys { get; }
		bool ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get; }
		ICollection IDictionary.Keys { get; }
		object IDictionary.this[object key] { get => default; set {} }
		bool ICollection.IsSynchronized { get; }
		object ICollection.SyncRoot { get; }
		private static int DefaultConcurrencyLevel { get; }
	
		// Nested types
		private sealed class Tables // TypeDefIndex: 1324
		{
			// Fields
			internal readonly Node<TKey, TValue>[] _buckets;
			internal readonly object[] _locks;
			internal int[] _countPerLock;
	
			// Constructors
			internal Tables(Node<TKey, TValue>[] buckets, object[] locks, int[] countPerLock);
		}
	
		[Serializable]
		private sealed class Node // TypeDefIndex: 1325
		{
			// Fields
			internal readonly TKey _key;
			internal TValue _value;
			internal Node<TKey, TValue> _next;
			internal readonly int _hashcode;
	
			// Constructors
			internal Node(TKey key, TValue value, int hashcode, Node<TKey, TValue> next);
		}
	
		[Serializable]
		private sealed class DictionaryEnumerator : IDictionaryEnumerator // TypeDefIndex: 1326
		{
			// Fields
			private IEnumerator<KeyValuePair<TKey, TValue>> _enumerator;
	
			// Properties
			public DictionaryEntry Entry { get; }
			public object Key { get; }
			public object Value { get; }
			public object Current { get; }
	
			// Constructors
			internal DictionaryEnumerator(ConcurrentDictionary<TKey, TValue> dictionary);
	
			// Methods
			public bool MoveNext();
			public void Reset();
		}
	
		[CompilerGenerated] // 0x00140E6C-0x00140E7C
		private sealed class <GetEnumerator>d__32 : IEnumerator<KeyValuePair<TKey, TValue>> // TypeDefIndex: 1327
		{
			// Fields
			private int <>1__state;
			private KeyValuePair<TKey, TValue> <>2__current;
			public ConcurrentDictionary<TKey, TValue> <>4__this;
			private Node<TKey, TValue>[] <buckets>5__1;
			private Node<TKey, TValue> <current>5__2;
			private int <i>5__3;
	
			// Properties
			KeyValuePair<TKey, TValue> IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Current { [DebuggerHidden] /* 0x001460D8-0x001460E8 */ get; }
			object IEnumerator.Current { [DebuggerHidden] /* 0x001460F8-0x00146108 */ get; }
	
			// Constructors
			[DebuggerHidden] // 0x001460B8-0x001460C8
			public <GetEnumerator>d__32(int <>1__state);
	
			// Methods
			[DebuggerHidden] // 0x001460C8-0x001460D8
			void IDisposable.Dispose();
			private bool MoveNext();
			[DebuggerHidden] // 0x001460E8-0x001460F8
			void IEnumerator.Reset();
		}
	
		// Constructors
		public ConcurrentDictionary();
		internal ConcurrentDictionary(int concurrencyLevel, int capacity, bool growLockArray, IEqualityComparer<TKey> comparer);
		static ConcurrentDictionary();
	
		// Methods
		private static bool IsValueWriteAtomic();
		public bool TryAdd(TKey key, TValue value);
		public bool ContainsKey(TKey key);
		public bool TryRemove(TKey key, out TValue value);
		private bool TryRemoveInternal(TKey key, out TValue value, bool matchValue, TValue oldValue);
		public bool TryGetValue(TKey key, out TValue value);
		private bool TryGetValueInternal(TKey key, int hashcode, out TValue value);
		public void Clear();
		void ICollection<KeyValuePair<TKey, TValue>>.CopyTo(KeyValuePair<TKey, TValue>[] array, int index);
		private void CopyToPairs(KeyValuePair<TKey, TValue>[] array, int index);
		private void CopyToEntries(DictionaryEntry[] array, int index);
		private void CopyToObjects(object[] array, int index);
		[IteratorStateMachine] // 0x00146040-0x001460B8
		public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator();
		private bool TryAddInternal(TKey key, int hashcode, TValue value, bool updateIfExists, bool acquireLock, out TValue resultingValue);
		private static void ThrowKeyNotFoundException();
		private static void ThrowKeyNullException();
		private int GetCountInternal();
		public TValue GetOrAdd(TKey key, Func<TKey, TValue> valueFactory);
		void IDictionary<TKey, TValue>.Add(TKey key, TValue value);
		bool IDictionary<TKey, TValue>.Remove(TKey key);
		void ICollection<KeyValuePair<TKey, TValue>>.Add(KeyValuePair<TKey, TValue> keyValuePair);
		bool ICollection<KeyValuePair<TKey, TValue>>.Contains(KeyValuePair<TKey, TValue> keyValuePair);
		bool ICollection<KeyValuePair<TKey, TValue>>.Remove(KeyValuePair<TKey, TValue> keyValuePair);
		IEnumerator IEnumerable.GetEnumerator();
		IDictionaryEnumerator IDictionary.GetEnumerator();
		void ICollection.CopyTo(Array array, int index);
		private void GrowTable(Tables tables);
		private static int GetBucket(int hashcode, int bucketCount);
		private static void GetBucketAndLockNo(int hashcode, out int bucketNo, out int lockNo, int bucketCount, int lockCount);
		private void AcquireAllLocks(ref int locksAcquired);
		private void AcquireLocks(int fromInclusive, int toExclusive, ref int locksAcquired);
		private void ReleaseLocks(int fromInclusive, int toExclusive);
		private ReadOnlyCollection<TKey> GetKeys();
	}

	internal sealed class IDictionaryDebugView<K, V> // TypeDefIndex: 1328
	{
	}
}

namespace System.Collections.Generic
{
	public static class CollectionExtensions // TypeDefIndex: 1329
	{
		// Extension methods
		public static TValue GetValueOrDefault<TKey, TValue>(this IReadOnlyDictionary<TKey, TValue> dictionary, TKey key);
		public static TValue GetValueOrDefault<TKey, TValue>(this IReadOnlyDictionary<TKey, TValue> dictionary, TKey key, TValue defaultValue);
	}

	public static class KeyValuePair // TypeDefIndex: 1330
	{
		// Methods
		internal static string PairToString(object key, object value); // 0x0077D4F0-0x0077D618
	}

	[Serializable]
	public struct KeyValuePair<TKey, TValue> // TypeDefIndex: 1331
	{
		// Fields
		private TKey key;
		private TValue value;
	
		// Properties
		public TKey Key { get; }
		public TValue Value { get; }
	
		// Constructors
		public KeyValuePair(TKey key, TValue value);
	
		// Methods
		public override string ToString();
	}

	internal static class IntrospectiveSortUtilities // TypeDefIndex: 1332
	{
		// Methods
		internal static int FloorLog2(int n); // 0x0076B374-0x0076B4B0
		internal static void ThrowOrIgnoreBadComparer(object comparer); // 0x0076B4B0-0x0076B55C
	}

	internal class ArraySortHelper<T> // TypeDefIndex: 1333
	{
		// Methods
		public static void Sort(T[] keys, int index, int length, IComparer<T> comparer);
		public static int BinarySearch(T[] array, int index, int length, T value, IComparer<T> comparer);
		internal static void Sort(T[] keys, int index, int length, Comparison<T> comparer);
		internal static int InternalBinarySearch(T[] array, int index, int length, T value, IComparer<T> comparer);
		private static void SwapIfGreater(T[] keys, Comparison<T> comparer, int a, int b);
		private static void Swap(T[] a, int i, int j);
		internal static void IntrospectiveSort(T[] keys, int left, int length, Comparison<T> comparer);
		private static void IntroSort(T[] keys, int lo, int hi, int depthLimit, Comparison<T> comparer);
		private static int PickPivotAndPartition(T[] keys, int lo, int hi, Comparison<T> comparer);
		private static void Heapsort(T[] keys, int lo, int hi, Comparison<T> comparer);
		private static void DownHeap(T[] keys, int i, int n, int lo, Comparison<T> comparer);
		private static void InsertionSort(T[] keys, int lo, int hi, Comparison<T> comparer);
	}

	internal class ArraySortHelper<TKey, TValue> // TypeDefIndex: 1334
	{
		// Fields
		private static ArraySortHelper<TKey, TValue> s_defaultArraySortHelper;
	
		// Properties
		public static ArraySortHelper<TKey, TValue> Default { get; }
	
		// Constructors
		public ArraySortHelper();
	
		// Methods
		private static ArraySortHelper<TKey, TValue> CreateArraySortHelper();
		public void Sort(TKey[] keys, TValue[] values, int index, int length, IComparer<TKey> comparer);
		private static void SwapIfGreaterWithItems(TKey[] keys, TValue[] values, IComparer<TKey> comparer, int a, int b);
		private static void Swap(TKey[] keys, TValue[] values, int i, int j);
		internal static void IntrospectiveSort(TKey[] keys, TValue[] values, int left, int length, IComparer<TKey> comparer);
		private static void IntroSort(TKey[] keys, TValue[] values, int lo, int hi, int depthLimit, IComparer<TKey> comparer);
		private static int PickPivotAndPartition(TKey[] keys, TValue[] values, int lo, int hi, IComparer<TKey> comparer);
		private static void Heapsort(TKey[] keys, TValue[] values, int lo, int hi, IComparer<TKey> comparer);
		private static void DownHeap(TKey[] keys, TValue[] values, int i, int n, int lo, IComparer<TKey> comparer);
		private static void InsertionSort(TKey[] keys, TValue[] values, int lo, int hi, IComparer<TKey> comparer);
	}

	internal enum InsertionBehavior : byte // TypeDefIndex: 1335
	{
		None = 0,
		OverwriteExisting = 1,
		ThrowOnExisting = 2
	}

	[Serializable]
	[DebuggerDisplay] // 0x00140E8C-0x00140F54
	[DebuggerTypeProxy] // 0x00140E8C-0x00140F54
	public class Dictionary<TKey, TValue> : IDictionary<TKey, TValue>, IDictionary, IReadOnlyDictionary<TKey, TValue>, ISerializable, IDeserializationCallback // TypeDefIndex: 1336
	{
		// Fields
		private int[] buckets;
		private Entry[] entries;
		private int count;
		private int version;
		private int freeList;
		private int freeCount;
		private IEqualityComparer<TKey> comparer;
		private KeyCollection keys;
		private ValueCollection values;
		private object _syncRoot;
		private const string VersionName = "Version"; // Metadata: 0x0020525A
		private const string HashSizeName = "HashSize"; // Metadata: 0x00205265
		private const string KeyValuePairsName = "KeyValuePairs"; // Metadata: 0x00205271
		private const string ComparerName = "Comparer"; // Metadata: 0x00205282
	
		// Properties
		public int Count { get; }
		public KeyCollection Keys { get; }
		ICollection<TKey> IDictionary<TKey,TValue>.Keys { get; }
		public ValueCollection Values { get; }
		public TValue this[TKey key] { get => default; set {} }
		bool ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get; }
		bool ICollection.IsSynchronized { get; }
		object ICollection.SyncRoot { get; }
		ICollection IDictionary.Keys { get; }
		object IDictionary.this[object key] { get => default; set {} }
	
		// Nested types
		private struct Entry // TypeDefIndex: 1337
		{
			// Fields
			public int hashCode;
			public int next;
			public TKey key;
			public TValue value;
		}
	
		[Serializable]
		public struct Enumerator : IEnumerator<KeyValuePair<TKey, TValue>>, IDictionaryEnumerator // TypeDefIndex: 1338
		{
			// Fields
			private Dictionary<TKey, TValue> dictionary;
			private int version;
			private int index;
			private KeyValuePair<TKey, TValue> current;
			private int getEnumeratorRetType;
	
			// Properties
			public KeyValuePair<TKey, TValue> Current { get; }
			object IEnumerator.Current { get; }
			DictionaryEntry IDictionaryEnumerator.Entry { get; }
			object IDictionaryEnumerator.Key { get; }
			object IDictionaryEnumerator.Value { get; }
	
			// Constructors
			internal Enumerator(Dictionary<TKey, TValue> dictionary, int getEnumeratorRetType);
	
			// Methods
			public bool MoveNext();
			public void Dispose();
			void IEnumerator.Reset();
		}
	
		[Serializable]
		[DebuggerDisplay] // 0x00140F54-0x00140FF4
		[DebuggerTypeProxy] // 0x00140F54-0x00140FF4
		public sealed class KeyCollection : ICollection<TKey>, ICollection, IReadOnlyCollection<TKey> // TypeDefIndex: 1339
		{
			// Fields
			private Dictionary<TKey, TValue> dictionary;
	
			// Properties
			public int Count { get; }
			bool ICollection<TKey>.IsReadOnly { get; }
			bool ICollection.IsSynchronized { get; }
			object ICollection.SyncRoot { get; }
	
			// Nested types
			[Serializable]
			public struct Enumerator : IEnumerator<TKey> // TypeDefIndex: 1340
			{
				// Fields
				private Dictionary<TKey, TValue> dictionary;
				private int index;
				private int version;
				private TKey currentKey;
	
				// Properties
				public TKey Current { get; }
				object IEnumerator.Current { get; }
	
				// Constructors
				internal Enumerator(Dictionary<TKey, TValue> dictionary);
	
				// Methods
				public void Dispose();
				public bool MoveNext();
				void IEnumerator.Reset();
			}
	
			// Constructors
			public KeyCollection(Dictionary<TKey, TValue> dictionary);
	
			// Methods
			public Enumerator GetEnumerator();
			public void CopyTo(TKey[] array, int index);
			void ICollection<TKey>.Add(TKey item);
			void ICollection<TKey>.Clear();
			bool ICollection<TKey>.Contains(TKey item);
			bool ICollection<TKey>.Remove(TKey item);
			IEnumerator<TKey> IEnumerable<TKey>.GetEnumerator();
			IEnumerator IEnumerable.GetEnumerator();
			void ICollection.CopyTo(Array array, int index);
		}
	
		[Serializable]
		[DebuggerDisplay] // 0x00140FF4-0x00141094
		[DebuggerTypeProxy] // 0x00140FF4-0x00141094
		public sealed class ValueCollection : ICollection<TValue>, ICollection, IReadOnlyCollection<TValue> // TypeDefIndex: 1341
		{
			// Fields
			private Dictionary<TKey, TValue> dictionary;
	
			// Properties
			public int Count { get; }
			bool ICollection<TValue>.IsReadOnly { get; }
			bool ICollection.IsSynchronized { get; }
			object ICollection.SyncRoot { get; }
	
			// Nested types
			[Serializable]
			public struct Enumerator : IEnumerator<TValue> // TypeDefIndex: 1342
			{
				// Fields
				private Dictionary<TKey, TValue> dictionary;
				private int index;
				private int version;
				private TValue currentValue;
	
				// Properties
				public TValue Current { get; }
				object IEnumerator.Current { get; }
	
				// Constructors
				internal Enumerator(Dictionary<TKey, TValue> dictionary);
	
				// Methods
				public void Dispose();
				public bool MoveNext();
				void IEnumerator.Reset();
			}
	
			// Constructors
			public ValueCollection(Dictionary<TKey, TValue> dictionary);
	
			// Methods
			public Enumerator GetEnumerator();
			public void CopyTo(TValue[] array, int index);
			void ICollection<TValue>.Add(TValue item);
			bool ICollection<TValue>.Remove(TValue item);
			void ICollection<TValue>.Clear();
			bool ICollection<TValue>.Contains(TValue item);
			IEnumerator<TValue> IEnumerable<TValue>.GetEnumerator();
			IEnumerator IEnumerable.GetEnumerator();
			void ICollection.CopyTo(Array array, int index);
		}
	
		// Constructors
		public Dictionary();
		public Dictionary(int capacity);
		public Dictionary(IEqualityComparer<TKey> comparer);
		public Dictionary(int capacity, IEqualityComparer<TKey> comparer);
		protected Dictionary(SerializationInfo info, StreamingContext context);
	
		// Methods
		public void Add(TKey key, TValue value);
		void ICollection<KeyValuePair<TKey, TValue>>.Add(KeyValuePair<TKey, TValue> keyValuePair);
		bool ICollection<KeyValuePair<TKey, TValue>>.Contains(KeyValuePair<TKey, TValue> keyValuePair);
		bool ICollection<KeyValuePair<TKey, TValue>>.Remove(KeyValuePair<TKey, TValue> keyValuePair);
		public void Clear();
		public bool ContainsKey(TKey key);
		public bool ContainsValue(TValue value);
		private void CopyTo(KeyValuePair<TKey, TValue>[] array, int index);
		public Enumerator GetEnumerator();
		IEnumerator<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator();
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
		private int FindEntry(TKey key);
		private void Initialize(int capacity);
		private bool TryInsert(TKey key, TValue value, InsertionBehavior behavior);
		public virtual void OnDeserialization(object sender);
		private void Resize();
		private void Resize(int newSize, bool forceNewHashCodes);
		public bool Remove(TKey key);
		public bool TryGetValue(TKey key, out TValue value);
		void ICollection<KeyValuePair<TKey, TValue>>.CopyTo(KeyValuePair<TKey, TValue>[] array, int index);
		void ICollection.CopyTo(Array array, int index);
		IEnumerator IEnumerable.GetEnumerator();
		private static bool IsCompatibleKey(object key);
		IDictionaryEnumerator IDictionary.GetEnumerator();
	}

	internal class DictionaryHashHelpers // TypeDefIndex: 1343
	{
		// Fields
		[CompilerGenerated] // 0x001431E0-0x001431F0
		private static readonly ConditionalWeakTable<object, SerializationInfo> <SerializationInfoTable>k__BackingField; // 0x00
	
		// Properties
		internal static ConditionalWeakTable<object, SerializationInfo> SerializationInfoTable { [CompilerGenerated] /* 0x00146128-0x00146138 */ get; } // 0x0077D1E4-0x0077D270 
	
		// Constructors
		static DictionaryHashHelpers(); // 0x0077D270-0x0077D300
	}

	internal sealed class IDictionaryDebugView<K, V> // TypeDefIndex: 1344
	{
	}

	internal sealed class DictionaryKeyCollectionDebugView<TKey, TValue> // TypeDefIndex: 1345
	{
	}

	internal sealed class DictionaryValueCollectionDebugView<TKey, TValue> // TypeDefIndex: 1346
	{
	}

	[Serializable]
	internal sealed class NonRandomizedStringEqualityComparer : EqualityComparer<string> // TypeDefIndex: 1347
	{
		// Constructors
		public NonRandomizedStringEqualityComparer(); // 0x0077D640-0x0077D6A4
	
		// Methods
		public sealed override bool Equals(string x, string y); // 0x0077D618-0x0077D628
		public sealed override int GetHashCode(string obj); // 0x0077D628-0x0077D640
	}

	internal sealed class ObjectEqualityComparer : IEqualityComparer // TypeDefIndex: 1348
	{
		// Fields
		internal static readonly ObjectEqualityComparer Default; // 0x00
	
		// Constructors
		private ObjectEqualityComparer(); // 0x0077D6A4-0x0077D6AC
		static ObjectEqualityComparer(); // 0x0077D708-0x0077D77C
	
		// Methods
		int IEqualityComparer.GetHashCode(object obj); // 0x0077D6AC-0x0077D6D0
		bool IEqualityComparer.Equals(object x, object y); // 0x0077D6D0-0x0077D708
	}

	[Serializable]
	[TypeDependency] // 0x00141094-0x001410EC
	public abstract class Comparer<T> : IComparer, IComparer<T> // TypeDefIndex: 1349
	{
		// Fields
		private static Comparer<T> defaultComparer;
	
		// Properties
		public static Comparer<T> Default { get; }
	
		// Constructors
		protected Comparer();
	
		// Methods
		private static Comparer<T> CreateComparer();
		public abstract int Compare(T x, T y);
		int IComparer.Compare(object x, object y);
	}

	[Serializable]
	internal class GenericComparer<T> : Comparer<T> // TypeDefIndex: 1350
		where T : IComparable<T>
	{
		// Constructors
		public GenericComparer();
	
		// Methods
		public override int Compare(T x, T y);
		public override bool Equals(object obj);
		public override int GetHashCode();
	}

	[Serializable]
	internal class NullableComparer<T> : Comparer<T?> // TypeDefIndex: 1351
		where T : struct, IComparable<T>
	{
		// Constructors
		public NullableComparer();
	
		// Methods
		public override int Compare(T? x, T? y);
		public override bool Equals(object obj);
		public override int GetHashCode();
	}

	[Serializable]
	internal class ObjectComparer<T> : Comparer<T> // TypeDefIndex: 1352
	{
		// Constructors
		public ObjectComparer();
	
		// Methods
		public override int Compare(T x, T y);
		public override bool Equals(object obj);
		public override int GetHashCode();
	}

	internal sealed class Mscorlib_CollectionDebugView<T> // TypeDefIndex: 1353
	{
	}

	[Serializable]
	[TypeDependency] // 0x001410EC-0x0014114C
	public abstract class EqualityComparer<T> : IEqualityComparer, IEqualityComparer<T> // TypeDefIndex: 1354
	{
		// Fields
		private static EqualityComparer<T> defaultComparer;
	
		// Properties
		public static EqualityComparer<T> Default { get; }
	
		// Constructors
		protected EqualityComparer();
	
		// Methods
		private static EqualityComparer<T> CreateComparer();
		public abstract bool Equals(T x, T y);
		public abstract int GetHashCode(T obj);
		internal virtual int IndexOf(T[] array, T value, int startIndex, int count);
		internal virtual int LastIndexOf(T[] array, T value, int startIndex, int count);
		int IEqualityComparer.GetHashCode(object obj);
		bool IEqualityComparer.Equals(object x, object y);
	}

	[Serializable]
	internal class GenericEqualityComparer<T> : EqualityComparer<T> // TypeDefIndex: 1355
		where T : IEquatable<T>
	{
		// Constructors
		public GenericEqualityComparer();
	
		// Methods
		public override bool Equals(T x, T y);
		public override int GetHashCode(T obj);
		internal override int IndexOf(T[] array, T value, int startIndex, int count);
		internal override int LastIndexOf(T[] array, T value, int startIndex, int count);
		public override bool Equals(object obj);
		public override int GetHashCode();
	}

	[Serializable]
	internal class NullableEqualityComparer<T> : EqualityComparer<T?> // TypeDefIndex: 1356
		where T : struct, IEquatable<T>
	{
		// Constructors
		public NullableEqualityComparer();
	
		// Methods
		public override bool Equals(T? x, T? y);
		public override int GetHashCode(T? obj);
		internal override int IndexOf(T?[] array, T? value, int startIndex, int count);
		internal override int LastIndexOf(T?[] array, T? value, int startIndex, int count);
		public override bool Equals(object obj);
		public override int GetHashCode();
	}

	[Serializable]
	internal class ObjectEqualityComparer<T> : EqualityComparer<T> // TypeDefIndex: 1357
	{
		// Constructors
		public ObjectEqualityComparer();
	
		// Methods
		public override bool Equals(T x, T y);
		public override int GetHashCode(T obj);
		internal override int IndexOf(T[] array, T value, int startIndex, int count);
		internal override int LastIndexOf(T[] array, T value, int startIndex, int count);
		public override bool Equals(object obj);
		public override int GetHashCode();
	}

	[Serializable]
	internal class ByteEqualityComparer : EqualityComparer<byte> // TypeDefIndex: 1358
	{
		// Constructors
		public ByteEqualityComparer(); // 0x0077D180-0x0077D1E4
	
		// Methods
		public override bool Equals(byte x, byte y); // 0x0077CDD4-0x0077CDE4
		public override int GetHashCode(byte b); // 0x0077CDE4-0x0077CDEC
		internal override int IndexOf(byte[] array, byte value, int startIndex, int count); // 0x0077CDEC-0x0077D004
		internal override int LastIndexOf(byte[] array, byte value, int startIndex, int count); // 0x0077D004-0x0077D088
		public override bool Equals(object obj); // 0x0077D088-0x0077D11C
		public override int GetHashCode(); // 0x0077D11C-0x0077D180
	}

	[Serializable]
	internal class EnumEqualityComparer<T> : EqualityComparer<T>, ISerializable // TypeDefIndex: 1359
		where T : struct
	{
		// Constructors
		public EnumEqualityComparer();
		protected EnumEqualityComparer(SerializationInfo information, StreamingContext context);
	
		// Methods
		public override bool Equals(T x, T y);
		public override int GetHashCode(T obj);
		public void GetObjectData(SerializationInfo info, StreamingContext context);
		public override bool Equals(object obj);
		public override int GetHashCode();
	}

	[Serializable]
	internal sealed class SByteEnumEqualityComparer<T> : EnumEqualityComparer<T>, ISerializable // TypeDefIndex: 1360
		where T : struct
	{
		// Constructors
		public SByteEnumEqualityComparer();
		public SByteEnumEqualityComparer(SerializationInfo information, StreamingContext context);
	
		// Methods
		public override int GetHashCode(T obj);
	}

	[Serializable]
	internal sealed class ShortEnumEqualityComparer<T> : EnumEqualityComparer<T>, ISerializable // TypeDefIndex: 1361
		where T : struct
	{
		// Constructors
		public ShortEnumEqualityComparer();
		public ShortEnumEqualityComparer(SerializationInfo information, StreamingContext context);
	
		// Methods
		public override int GetHashCode(T obj);
	}

	[Serializable]
	internal sealed class LongEnumEqualityComparer<T> : EqualityComparer<T>, ISerializable // TypeDefIndex: 1362
		where T : struct
	{
		// Constructors
		public LongEnumEqualityComparer();
		public LongEnumEqualityComparer(SerializationInfo information, StreamingContext context);
	
		// Methods
		public override bool Equals(T x, T y);
		public override int GetHashCode(T obj);
		public override bool Equals(object obj);
		public override int GetHashCode();
		public void GetObjectData(SerializationInfo info, StreamingContext context);
	}

	[Serializable]
	internal sealed class InternalStringComparer : EqualityComparer<string> // TypeDefIndex: 1363
	{
		// Constructors
		public InternalStringComparer(); // 0x0077D3B8-0x0077D41C
	
		// Methods
		public override int GetHashCode(string obj); // 0x0077D300-0x0077D324
		public override bool Equals(string x, string y); // 0x0077D324-0x0077D358
		internal override int IndexOf(string[] array, string value, int startIndex, int count); // 0x0077D358-0x0077D3B8
	}

	[TypeDependency] // 0x0014114C-0x00141180
	public interface ICollection<T> : IEnumerable<T> // TypeDefIndex: 1364
	{
		// Properties
		int Count { get; }
		bool IsReadOnly { get; }
	
		// Methods
		void Add(T item);
		void Clear();
		bool Contains(T item);
		void CopyTo(T[] array, int arrayIndex);
		bool Remove(T item);
	}

	public interface IComparer<in T> // TypeDefIndex: 1365
	{
		// Methods
		int Compare(T x, T y);
	}

	public interface IDictionary<TKey, TValue> : ICollection<KeyValuePair<TKey, TValue>> // TypeDefIndex: 1366
	{
		// Properties
		TValue this[TKey key] { get => default; set {} }
		ICollection<TKey> Keys { get; }
	
		// Methods
		bool ContainsKey(TKey key);
		void Add(TKey key, TValue value);
		bool Remove(TKey key);
		bool TryGetValue(TKey key, out TValue value);
	}

	[TypeDependency] // 0x001411B4-0x001411E8
	public interface IEnumerable<out T> : IEnumerable // TypeDefIndex: 1367
	{
		// Methods
		IEnumerator<T> GetEnumerator();
	}

	public interface IEnumerator<out T> : IDisposable, IEnumerator // TypeDefIndex: 1368
	{
		// Properties
		T Current { get; }
	}

	public interface IEqualityComparer<in T> // TypeDefIndex: 1369
	{
		// Methods
		bool Equals(T x, T y);
		int GetHashCode(T obj);
	}

	[TypeDependency] // 0x001411E8-0x00141248
	public interface IList<T> : ICollection<T> // TypeDefIndex: 1370
	{
		// Properties
		T this[int index] { get => default; set {} }
	
		// Methods
		int IndexOf(T item);
		void Insert(int index, T item);
		void RemoveAt(int index);
	}

	[TypeDependency] // 0x00141248-0x0014127C
	public interface IReadOnlyCollection<out T> : IEnumerable<T> // TypeDefIndex: 1371
	{
		// Properties
		int Count { get; }
	}

	[DefaultMember] // 0x0014127C-0x001412B0
	public interface IReadOnlyDictionary<TKey, TValue> : IReadOnlyCollection<KeyValuePair<TKey, TValue>> // TypeDefIndex: 1372
	{
		// Methods
		bool TryGetValue(TKey key, out TValue value);
	}

	[TypeDependency] // 0x001412B0-0x00141310
	public interface IReadOnlyList<out T> : IReadOnlyCollection<T> // TypeDefIndex: 1373
	{
		// Properties
		T this[int index] { get => default; }
	}

	[Serializable]
	[ComVisible] // 0x00141310-0x00141324
	public class KeyNotFoundException : SystemException, ISerializable // TypeDefIndex: 1374
	{
		// Constructors
		public KeyNotFoundException(); // 0x0077D41C-0x0077D4A4
		public KeyNotFoundException(string message); // 0x0077D4A4-0x0077D4D0
		protected KeyNotFoundException(SerializationInfo info, StreamingContext context); // 0x0077D4D0-0x0077D4F0
	}

	[Serializable]
	[DebuggerDisplay] // 0x00141324-0x001413EC
	[DebuggerTypeProxy] // 0x00141324-0x001413EC
	public class List<T> : IList<T>, IList, IReadOnlyList<T> // TypeDefIndex: 1375
	{
		// Fields
		private const int _defaultCapacity = 4; // Metadata: 0x0020528E
		private T[] _items;
		private int _size;
		private int _version;
		[NonSerialized]
		private object _syncRoot;
		private static readonly T[] _emptyArray;
	
		// Properties
		public int Capacity { get; set; }
		public int Count { get; }
		bool IList.IsFixedSize { get; }
		bool ICollection<T>.IsReadOnly { get; }
		bool IList.IsReadOnly { get; }
		bool ICollection.IsSynchronized { get; }
		object ICollection.SyncRoot { get; }
		public T this[int index] { get => default; set {} }
		object IList.this[int index] { get => default; set {} }
	
		// Nested types
		[Serializable]
		public struct Enumerator : IEnumerator<T> // TypeDefIndex: 1376
		{
			// Fields
			private List<T> list;
			private int index;
			private int version;
			private T current;
	
			// Properties
			public T Current { get; }
			object IEnumerator.Current { get; }
	
			// Constructors
			internal Enumerator(List<T> list);
	
			// Methods
			public void Dispose();
			public bool MoveNext();
			private bool MoveNextRare();
			void IEnumerator.Reset();
		}
	
		// Constructors
		public List();
		public List(int capacity);
		public List(IEnumerable<T> collection);
		static List();
	
		// Methods
		private static bool IsCompatibleObject(object value);
		public void Add(T item);
		int IList.Add(object item);
		public void AddRange(IEnumerable<T> collection);
		public ReadOnlyCollection<T> AsReadOnly();
		public void Clear();
		public bool Contains(T item);
		bool IList.Contains(object item);
		public void CopyTo(T[] array);
		void ICollection.CopyTo(Array array, int arrayIndex);
		public void CopyTo(int index, T[] array, int arrayIndex, int count);
		public void CopyTo(T[] array, int arrayIndex);
		private void EnsureCapacity(int min);
		public T Find(Predicate<T> match);
		public void ForEach(Action<T> action);
		public Enumerator GetEnumerator();
		IEnumerator<T> IEnumerable<T>.GetEnumerator();
		IEnumerator IEnumerable.GetEnumerator();
		public int IndexOf(T item);
		int IList.IndexOf(object item);
		public void Insert(int index, T item);
		void IList.Insert(int index, object item);
		public void InsertRange(int index, IEnumerable<T> collection);
		public bool Remove(T item);
		void IList.Remove(object item);
		public int RemoveAll(Predicate<T> match);
		public void RemoveAt(int index);
		public void RemoveRange(int index, int count);
		public void Reverse();
		public void Reverse(int index, int count);
		public void Sort();
		public void Sort(IComparer<T> comparer);
		public void Sort(int index, int count, IComparer<T> comparer);
		public void Sort(Comparison<T> comparison);
		public T[] ToArray();
		public void TrimExcess();
	}
}

[CompilerGenerated] // 0x001413EC-0x001413FC
internal sealed class <PrivateImplementationDetails> // TypeDefIndex: 1377
{
	// Fields
	internal static readonly __StaticArrayInitTypeSize=256 0392525BCB01691D1F319D89F2C12BF93A478467; // 0x00 // Starts with: d9 78 f9 c4 19 dd b5 ed - Metadata: 0x00205292
	internal static readonly __StaticArrayInitTypeSize=72 0588059ACBD52F7EA2835882F977A9CF72EB9775; // 0x100 // Starts with: 20 00 00 00 1e 00 00 00 - Metadata: 0x00205392
	internal static readonly __StaticArrayInitTypeSize=84 0A1ADB22C1D3E1F4B2448EE3F27DF9DE63329C4C; // 0x148 // Starts with: 05 00 00 00 0b 00 00 00 - Metadata: 0x002053DA
	internal static readonly __StaticArrayInitTypeSize=240 121EC59E23F7559B28D338D562528F6299C2DE22; // 0x19C // Starts with: 37 00 00 00 39 00 00 00 - Metadata: 0x0020542E
	internal static readonly __StaticArrayInitTypeSize=3 12D04472A8285260EA12FD3813CDFA9F2D2B548C; // 0x28C // Starts with: 55 04 07 55 04 0c 00 12 - Metadata: 0x0020551E
	internal static readonly __StaticArrayInitTypeSize=3 13A35EF1A549297C70E2AD46045BBD2ECA17852D; // 0x28F // Starts with: 55 04 0c 00 12 00 00 00 - Metadata: 0x00205521
	internal static readonly __StaticArrayInitTypeSize=24 1730F09044E91DB8371B849EFF5E6D17BDE4AED0; // 0x292 // Starts with: 00 12 00 00 00 28 00 00 - Metadata: 0x00205524
	internal static readonly __StaticArrayInitTypeSize=3 1A84029C80CB5518379F199F53FF08A7B764F8FD; // 0x2AA // Starts with: 55 04 03 c6 63 63 a5 f8 - Metadata: 0x0020553C
	internal static readonly __StaticArrayInitTypeSize=4096 1AEF3D8DF416A46288C91C724CBF7B154D9E5BF3; // 0x2AD // Starts with: c6 63 63 a5 f8 7c 7c 84 - Metadata: 0x0020553F
	internal static readonly __StaticArrayInitTypeSize=2048 1E41C4CD0767AEA21C00DEABA2EA9407F1E6CEA5; // 0x12AD // Starts with: 00 00 00 00 00 00 00 00 - Metadata: 0x0020653F
	internal static readonly __StaticArrayInitTypeSize=16 1FE6CE411858B3D864679DE2139FB081F08BFACD; // 0x1AAD // Starts with: 00 12 00 00 00 28 00 00 - Metadata: 0x00206D3F
	internal static readonly __StaticArrayInitTypeSize=3 235D99572263B22ADFEE10FDA0C25E12F4D94FFC; // 0x1ABD // Starts with: 55 04 09 ff ff ff ff ff - Metadata: 0x00206D4F
	internal static readonly __StaticArrayInitTypeSize=40 25420D0055076FA8D3E4DD96BC53AE24DE6E619F; // 0x1AC0 // Starts with: ff ff ff ff ff ff ff ff - Metadata: 0x00206D52
	internal static readonly __StaticArrayInitTypeSize=1208 25CF935D2AE9EDF05DD75BCD47FF84D9255D6F6E; // 0x1AE8 // Starts with: 00 01 41 00 01 01 61 00 - Metadata: 0x00206D7A
	internal static readonly __StaticArrayInitTypeSize=42 29C1A61550F0E3260E1953D4FAD71C256218EF40; // 0x1FA0 // Starts with: 60 21 61 21 62 21 63 21 - Metadata: 0x00207232
	internal static readonly __StaticArrayInitTypeSize=12 2B33BEC8C30DFDC49DAFE20D3BDE19487850D717; // 0x1FCA // Starts with: 00 31 00 00 00 4e 00 00 - Metadata: 0x0020725C
	internal static readonly __StaticArrayInitTypeSize=36 2BA840FF6020B8FF623DBCB7188248CF853FAF4F; // 0x1FD6 // Starts with: 90 00 00 00 20 09 00 00 - Metadata: 0x00207268
	internal static readonly __StaticArrayInitTypeSize=72 2C840AFA48C27B9C05593E468C1232CA1CC74AFD; // 0x1FFA // Starts with: 14 00 00 00 23 00 00 00 - Metadata: 0x0020728C
	internal static readonly __StaticArrayInitTypeSize=16 2D1DA5BB407F0C11C3B5116196C0C6374D932B20; // 0x2042 // Starts with: 00 0f 00 00 00 28 00 00 - Metadata: 0x002072D4
	internal static readonly __StaticArrayInitTypeSize=14 2D3CF0F15AC2DDEC2956EA1B7BBE43FB8B923130; // 0x2052 // Starts with: 2c 00 2b 00 22 00 5c 00 - Metadata: 0x002072E4
	internal static readonly __StaticArrayInitTypeSize=72 2F71D2DA12F3CD0A6A112F5A5A75B4FDC6FE8547; // 0x2060 // Starts with: 14 00 00 00 19 00 00 00 - Metadata: 0x002072F2
	internal static readonly __StaticArrayInitTypeSize=64 320B018758ECE3752FFEDBAEB1A6DB67C80B9359; // 0x20A8 // Starts with: 01 01 01 01 01 01 01 01 - Metadata: 0x0020733A
	internal static readonly __StaticArrayInitTypeSize=72 34476C29F6F81C989CFCA42F7C06E84C66236834; // 0x20E8 // Starts with: 14 00 00 00 15 00 00 00 - Metadata: 0x0020737A
	internal static readonly __StaticArrayInitTypeSize=2382 35EED060772F2748D13B745DAEC8CD7BD3B87604; // 0x2130 // Starts with: c0 00 c1 00 c2 00 c3 00 - Metadata: 0x002073C2
	internal static readonly __StaticArrayInitTypeSize=38 375F9AE9769A3D1DA789E9ACFE81F3A1BB14F0D3; // 0x2A7E // Starts with: 64 00 44 00 66 00 46 00 - Metadata: 0x00207D10
	internal static readonly __StaticArrayInitTypeSize=1450 379C06C9E702D31469C29033F0DD63931EB349F5; // 0x2AA4 // Starts with: 1a 01 28 00 17 00 10 00 - Metadata: 0x00207D36
	internal static readonly __StaticArrayInitTypeSize=10 399BD13E240F33F808CA7940293D6EC4E6FD5A00; // 0x304E // Starts with: 3c 00 3e 00 22 00 27 00 - Metadata: 0x002082E0
	internal static readonly __StaticArrayInitTypeSize=72 39C9CE73C7B0619D409EF28344F687C1B5C130FE; // 0x3058 // Starts with: 14 00 00 00 1e 00 00 00 - Metadata: 0x002082EA
	internal static readonly __StaticArrayInitTypeSize=320 3C53AFB51FEC23491684C7BEDBC6D4E0F409F851; // 0x30A0 // Starts with: ff ff 00 00 01 01 02 02 - Metadata: 0x00208332
	internal static readonly __StaticArrayInitTypeSize=3 3E3442C7396F3F2BB4C7348F4A2074C7DC677D68; // 0x31E0 // Starts with: 55 04 0b 00 31 00 00 00 - Metadata: 0x00208472
	internal static readonly __StaticArrayInitTypeSize=12 3E823444D2DFECF0F90B436B88F02A533CB376F1; // 0x31E3 // Starts with: 00 31 00 00 00 4e 00 00 - Metadata: 0x00208475
	internal static readonly __StaticArrayInitTypeSize=72 3FE6C283BCF384FD2C8789880DFF59664E2AB4A1; // 0x31EF // Starts with: 18 00 00 00 19 00 00 00 - Metadata: 0x00208481
	internal static readonly __StaticArrayInitTypeSize=1665 40981BAA39513E58B28DCF0103CC04DE2A0A0444; // 0x3237 // Starts with: 1a 01 14 00 1d 00 10 00 - Metadata: 0x002084C9
	internal static readonly __StaticArrayInitTypeSize=40 40E7C49413D261F3F38AD3A870C0AC69C8BDA048; // 0x38B8 // Starts with: ff ff ff ff ff ff ff ff - Metadata: 0x00208B4A
	internal static readonly __StaticArrayInitTypeSize=72 421EC7E82F2967DF6CA8C3605514DC6F29EE5845; // 0x38E0 // Starts with: 22 00 3c 00 3e 00 7c 00 - Metadata: 0x00208B72
	internal static readonly __StaticArrayInitTypeSize=256 433175D38B13FFE177FDD661A309F1B528B3F6E2; // 0x3928 // Starts with: 98 2f 8a 42 91 44 37 71 - Metadata: 0x00208BBA
	internal static readonly __StaticArrayInitTypeSize=120 46232052BC757E030490D851F265FB47FA100902; // 0x3A28 // Starts with: 01 00 00 00 02 00 00 00 - Metadata: 0x00208CBA
	internal static readonly __StaticArrayInitTypeSize=72 4858DB4AA76D3933F1CA9E6712D4FDB16903F628; // 0x3AA0 // Starts with: 25 00 00 00 25 00 00 00 - Metadata: 0x00208D32
	internal static readonly __StaticArrayInitTypeSize=48 4E3B533C39447AAEB59A8E48FABD7E15B5B5D195; // 0x3AE8 // Starts with: 38 b0 60 a7 51 ac 96 38 - Metadata: 0x00208D7A
	internal static readonly __StaticArrayInitTypeSize=40 4F7A8890F332B22B8DE0BD29D36FA7364748D76A; // 0x3B18 // Starts with: 01 00 00 00 0a 00 00 00 - Metadata: 0x00208DAA
	internal static readonly __StaticArrayInitTypeSize=72 536422B321459B242ADED7240B7447E904E083E3; // 0x3B40 // Starts with: 14 00 00 00 20 00 00 00 - Metadata: 0x00208DD2
	internal static readonly __StaticArrayInitTypeSize=1080 5382CEF491F422BFE0D6FC46EFAFF9EF9D4C89F3; // 0x3B88 // Starts with: 00 00 00 00 00 00 f0 bf - Metadata: 0x00208E1A
	internal static readonly __StaticArrayInitTypeSize=10 56DFA5053B3131883637F53219E7D88CCEF35949; // 0x3FC0 // Starts with: 09 92 26 89 93 f2 2c 64 - Metadata: 0x00209252
	internal static readonly __StaticArrayInitTypeSize=3 57218C316B6921E2CD61027A2387EDC31A2D9471; // 0x3FCA // Starts with: ef bb bf ff ff ff ff ff - Metadata: 0x0020925C
	internal static readonly __StaticArrayInitTypeSize=40 57F320D62696EC99727E0FE2045A05F1289CC0C6; // 0x3FCD // Starts with: ff ff ff ff ff ff ff ff - Metadata: 0x0020925F
	internal static readonly __StaticArrayInitTypeSize=212 594A33A00BC4F785DFD43E3C6C44FBA1242CCAF3; // 0x3FF5 // Starts with: 22 a7 24 a7 24 a7 26 a7 - Metadata: 0x00209287
	internal static readonly __StaticArrayInitTypeSize=36 5BBDF8058D4235C33F2E8DCF76004031B6187A2F; // 0x40C9 // Starts with: e0 06 00 00 00 11 00 00 - Metadata: 0x0020935B
	internal static readonly __StaticArrayInitTypeSize=288 5BCD21C341BE6DDF8FFFAE1A23ABA24DCBB612BF; // 0x40ED // Starts with: 03 00 00 00 07 00 00 00 - Metadata: 0x0020937F
	internal static readonly __StaticArrayInitTypeSize=72 5BFE2819B4778217C56416C7585FF0E56EBACD89; // 0x420D // Starts with: 14 00 00 00 17 00 00 00 - Metadata: 0x0020949F
	internal static readonly __StaticArrayInitTypeSize=128 609C0E8D8DA86A09D6013D301C86BA8782C16B8C; // 0x4255 // Starts with: 00 00 00 00 00 00 f0 3f - Metadata: 0x002094E7
	internal static readonly __StaticArrayInitTypeSize=48 62BAB0F245E66C3EB982CF5A7015F0A7C3382283; // 0x42D5 // Starts with: 0d 10 0a 17 00 04 02 1b - Metadata: 0x00209567
	internal static readonly __StaticArrayInitTypeSize=2048 646036A65DECCD6835C914A46E6E44B729433B60; // 0x4305 // Starts with: 00 00 00 00 00 00 00 00 - Metadata: 0x00209597
	internal static readonly __StaticArrayInitTypeSize=40 65E32B4E150FD8D24B93B0D42A17F1DAD146162B; // 0x4B05 // Starts with: 02 00 00 00 03 00 00 00 - Metadata: 0x00209D97
	internal static readonly __StaticArrayInitTypeSize=52 6770974FEF1E98B9C1864370E2B5B786EB0EA39E; // 0x4B2D // Starts with: d0 24 d1 24 d2 24 d3 24 - Metadata: 0x00209DBF
	internal static readonly __StaticArrayInitTypeSize=72 67EEAD805D708D9AA4E14BF747E44CED801744F3; // 0x4B61 // Starts with: 1c 00 00 00 1d 00 00 00 - Metadata: 0x00209DF3
	internal static readonly __StaticArrayInitTypeSize=120 6C71197D228427B2864C69B357FEF73D8C9D59DF; // 0x4BA9 // Starts with: f0 02 00 00 80 04 00 00 - Metadata: 0x00209E3B
	internal static readonly __StaticArrayInitTypeSize=9 6D49C9D487D7AD3491ECE08732D68A593CC2038D; // 0x4C21 // Starts with: 2a 86 48 86 f7 0d 01 09 - Metadata: 0x00209EB3
	internal static readonly __StaticArrayInitTypeSize=2048 6D797C11E1D4FB68B6570CF2A92B792433527065; // 0x4C2A // Starts with: 00 82 80 00 00 00 00 00 - Metadata: 0x00209EBC
	internal static readonly __StaticArrayInitTypeSize=3132 6E5DC824F803F8565AF31B42199DAE39FE7F4EA9; // 0x542A // Starts with: 02 00 00 00 03 00 00 00 - Metadata: 0x0020A6BC
	internal static readonly __StaticArrayInitTypeSize=76 6FC754859E4EC74E447048364B216D825C6F8FE7; // 0x6066 // Starts with: a0 10 a1 10 a2 10 a3 10 - Metadata: 0x0020B2F8
	internal static readonly __StaticArrayInitTypeSize=40 704939CD172085D1295FCE3F1D92431D685D7AA2; // 0x60B2 // Starts with: 01 00 00 00 0a 00 00 00 - Metadata: 0x0020B344
	internal static readonly __StaticArrayInitTypeSize=24 7088AAE49F0627B72729078DE6E3182DDCF8ED99; // 0x60DA // Starts with: 00 00 00 00 00 1e 00 00 - Metadata: 0x0020B36C
	internal static readonly __StaticArrayInitTypeSize=72 7341C933A70EAE383CC50C4B945ADB8E08F06737; // 0x60F2 // Starts with: 21 00 00 00 1f 00 00 00 - Metadata: 0x0020B384
	internal static readonly __StaticArrayInitTypeSize=3 736D39815215889F11249D9958F6ED12D37B9F57; // 0x613A // Starts with: 55 04 06 51 f4 a7 50 7e - Metadata: 0x0020B3CC
	internal static readonly __StaticArrayInitTypeSize=4096 7F42F2EDC974BE29B2746957416ED1AEFA605F47; // 0x613D // Starts with: 51 f4 a7 50 7e 41 65 53 - Metadata: 0x0020B3CF
	internal static readonly __StaticArrayInitTypeSize=40 7FE820C9CF0F0B90445A71F1D262D22E4F0C4C68; // 0x713D // Starts with: ff ff ff ff ff ff ff ff - Metadata: 0x0020C3CF
	internal static readonly __StaticArrayInitTypeSize=21252 811A927B7DADD378BE60BBDE794B9277AA9B50EC; // 0x7165 // Starts with: 00 11 10 11 20 11 30 11 - Metadata: 0x0020C3F7
	internal static readonly __StaticArrayInitTypeSize=36 81917F1E21F3C22B9F916994547A614FB03E968E; // 0xC469 // Starts with: 00 00 00 00 00 09 00 00 - Metadata: 0x002116FB
	internal static readonly __StaticArrayInitTypeSize=40 823566DA642D6EA356E15585921F2A4CA23D6760; // 0xC48D // Starts with: ff ff ff ff ff ff ff ff - Metadata: 0x0021171F
	internal static readonly __StaticArrayInitTypeSize=12 82C2A59850B2E85BCE1A45A479537A384DF6098D; // 0xC4B5 // Starts with: 80 04 00 00 10 14 00 00 - Metadata: 0x00211747
	internal static readonly __StaticArrayInitTypeSize=44 82C383F8E6E4D3D87AEBB986A5D0077E8AD157C4; // 0xC4C1 // Starts with: e0 06 00 00 00 12 00 00 - Metadata: 0x00211753
	internal static readonly __StaticArrayInitTypeSize=3 86F4F563FA2C61798AE6238D789139739428463A; // 0xC4ED // Starts with: 55 04 2e ff ff ff ff ff - Metadata: 0x0021177F
	internal static readonly __StaticArrayInitTypeSize=40 871B9CF85DB352BAADF12BAE8F19857683E385AC; // 0xC4F0 // Starts with: ff ff ff ff ff ff ff ff - Metadata: 0x00211782
	internal static readonly __StaticArrayInitTypeSize=16 89A040451C8CC5C8FB268BE44BDD74964C104155; // 0xC518 // Starts with: 00 00 00 00 00 1e 00 00 - Metadata: 0x002117AA
	internal static readonly __StaticArrayInitTypeSize=40 8CAA092E783257106251246FF5C97F88D28517A6; // 0xC528 // Starts with: ff ff ff ff ff ff ff ff - Metadata: 0x002117BA
	internal static readonly __StaticArrayInitTypeSize=2100 8D231DD55FE1AD7631BBD0905A17D5EB616C2154; // 0xC550 // Starts with: 1a 01 1c 00 1d 00 0f 00 - Metadata: 0x002117E2
	internal static readonly __StaticArrayInitTypeSize=40 8E10AC2F34545DFBBF3FCBC06055D797A8C99991; // 0xCD84 // Starts with: ff ff ff ff ff ff ff ff - Metadata: 0x00212016
	internal static readonly __StaticArrayInitTypeSize=256 8F22C9ECE1331718CBD268A9BBFD2F5E451441E3; // 0xCDAC // Starts with: 63 7c 77 7b f2 6b 6f c5 - Metadata: 0x0021203E
	internal static readonly __StaticArrayInitTypeSize=640 90A0542282A011472F94E97CEAE59F8B3B1A3291; // 0xCEAC // Starts with: 22 ae 28 d7 98 2f 8a 42 - Metadata: 0x0021213E
	internal static readonly __StaticArrayInitTypeSize=12 93A63E90605400F34B49F0EB3361D23C89164BDA; // 0xD12C // Starts with: 00 34 00 00 00 a0 00 00 - Metadata: 0x002123BE
	internal static readonly __StaticArrayInitTypeSize=72 94841DD2F330CCB1089BF413E4FA9B04505152E2; // 0xD138 // Starts with: 00 00 00 00 14 00 00 00 - Metadata: 0x002123CA
	internal static readonly __StaticArrayInitTypeSize=12 95264589E48F94B7857CFF398FB72A537E13EEE2; // 0xD180 // Starts with: 00 34 00 00 00 a0 00 00 - Metadata: 0x00212412
	internal static readonly __StaticArrayInitTypeSize=72 95C48758CAE1715783472FB073AB158AB8A0AB2A; // 0xD18C // Starts with: 15 00 00 00 16 00 00 00 - Metadata: 0x0021241E
	internal static readonly __StaticArrayInitTypeSize=72 973417296623D8DC6961B09664E54039E44CA5D8; // 0xD1D4 // Starts with: 14 00 00 00 15 00 00 00 - Metadata: 0x00212466
	internal static readonly __StaticArrayInitTypeSize=3 97FB30C84FF4A41CD4625B44B2940BFC8DB43003; // 0xD21C // Starts with: 55 04 08 52 00 00 00 09 - Metadata: 0x002124AE
	internal static readonly __StaticArrayInitTypeSize=4096 99E2E88877D14C7DDC4E957A0ED7079CA0E9EB24; // 0xD21F // Starts with: 52 00 00 00 09 00 00 00 - Metadata: 0x002124B1
	internal static readonly __StaticArrayInitTypeSize=64 9A9C3962CD4753376E3507C8CB5FD8FCC4B4EDB5; // 0xE21F // Starts with: 03 03 03 03 03 03 03 03 - Metadata: 0x002134B1
	internal static readonly __StaticArrayInitTypeSize=3 9BB00D1FCCBAF03165447FC8028E7CA07CA9FE88; // 0xE25F // Starts with: 55 04 0a 64 00 00 00 64 - Metadata: 0x002134F1
	internal static readonly __StaticArrayInitTypeSize=40 A0074C15377C0C870B055927403EA9FA7A349D12; // 0xE262 // Starts with: 64 00 00 00 64 00 00 00 - Metadata: 0x002134F4
	internal static readonly __StaticArrayInitTypeSize=130 A1319B706116AB2C6D44483F60A7D0ACEA543396; // 0xE28A // Starts with: 41 00 42 00 43 00 44 00 - Metadata: 0x0021351C
	internal static readonly long A13AA52274D951A18029131A8DDECF76B569A15D; // 0xE310 // Starts with: 2e 00 02 30 0e ff 61 ff - Metadata: 0x0021359E
	internal static readonly __StaticArrayInitTypeSize=3 A323DB0813C4D072957BA6FDA79D9776674CD06B; // 0xE318 // Starts with: 55 04 2a 23 a7 23 a7 25 - Metadata: 0x002135A6
	internal static readonly __StaticArrayInitTypeSize=212 A5444763673307F6828C748D4B9708CFC02B0959; // 0xE31B // Starts with: 23 a7 23 a7 25 a7 25 a7 - Metadata: 0x002135A9
	internal static readonly __StaticArrayInitTypeSize=72 A6732F8E7FC23766AB329B492D6BF82E3B33233F; // 0xE3EF // Starts with: 14 00 00 00 1f 00 00 00 - Metadata: 0x0021367D
	internal static readonly __StaticArrayInitTypeSize=174 A705A106D95282BD15E13EEA6B0AF583FF786D83; // 0xE437 // Starts with: 40 a6 42 a6 42 a6 44 a6 - Metadata: 0x002136C5
	internal static readonly __StaticArrayInitTypeSize=1018 A8A491E4CED49AE0027560476C10D933CE70C8DF; // 0xE4E5 // Starts with: 01 1e 01 1e 03 1e 03 1e - Metadata: 0x00213773
	internal static readonly __StaticArrayInitTypeSize=72 AC791C4F39504D1184B73478943D0636258DA7B1; // 0xE8DF // Starts with: 17 00 00 00 19 00 00 00 - Metadata: 0x00213B6D
	internal static readonly __StaticArrayInitTypeSize=52 AFCD4E1211233E99373A3367B23105A3D624B1F2; // 0xE927 // Starts with: b6 24 b7 24 b8 24 b9 24 - Metadata: 0x00213BB5
	internal static readonly __StaticArrayInitTypeSize=40 B472ED77CB3B2A66D49D179F1EE2081B70A6AB61; // 0xE95B // Starts with: ff ff ff ff ff ff ff ff - Metadata: 0x00213BE9
	internal static readonly __StaticArrayInitTypeSize=16 B4FBD02AAB5B16E0F4BD858DA5D9E348F3CE501D; // 0xE983 // Starts with: 01 02 04 06 08 0a 0c 0e - Metadata: 0x00213C11
	internal static readonly __StaticArrayInitTypeSize=256 B53A2C6DF21FC88B17AEFC40EB895B8D63210CDF; // 0xE993 // Starts with: 0e 0e 0e 0e 0e 0e 0e 0e - Metadata: 0x00213C21
	internal static readonly __StaticArrayInitTypeSize=4096 B6002BBF29B2704922EC3BBF0F9EE40ABF185D6B; // 0xEA93 // Starts with: 63 00 00 00 7c 00 00 00 - Metadata: 0x00213D21
	internal static readonly __StaticArrayInitTypeSize=998 B881DA88BE0B68D8A6B6B6893822586B8B2CFC45; // 0xFA93 // Starts with: 00 1e 02 1e 02 1e 04 1e - Metadata: 0x00214D21
	internal static readonly __StaticArrayInitTypeSize=162 B8864ACB9DD69E3D42151513C840AAE270BF21C8; // 0xFE79 // Starts with: 1d 00 0e 0e 0e 10 0e 0f - Metadata: 0x00215107
	internal static readonly __StaticArrayInitTypeSize=360 B8F87834C3597B2EEF22BA6D3A392CC925636401; // 0xFF1B // Starts with: 00 2c 01 2c 02 2c 03 2c - Metadata: 0x002151A9
	internal static readonly __StaticArrayInitTypeSize=72 B9B670F134A59FB1107AF01A9FE8F8E3980B3093; // 0x10083 // Starts with: 14 00 00 00 24 00 00 00 - Metadata: 0x00215311
	internal static readonly __StaticArrayInitTypeSize=20 BE1BDEC0AA74B4DCB079943E70528096CCA985F8; // 0x100CB // Starts with: da 39 a3 ee 5e 6b 4b 0d - Metadata: 0x00215359
	internal static readonly __StaticArrayInitTypeSize=72 BEBC9ECC660A13EFC359BA3383411F698CFF25DB; // 0x100DF // Starts with: 14 00 00 00 16 00 00 00 - Metadata: 0x0021536D
	internal static readonly __StaticArrayInitTypeSize=40 BEE1CFE5DFAA408E14CE4AF4DCD824FA2E42DCB7; // 0x10127 // Starts with: ff ff ff ff ff ff ff ff - Metadata: 0x002153B5
	internal static readonly __StaticArrayInitTypeSize=3 BF477463CE2F5EF38FC4C644BBBF4DF109E7670A; // 0x1014F // Starts with: 55 04 2b 22 00 3c 00 3e - Metadata: 0x002153DD
	internal static readonly __StaticArrayInitTypeSize=6 BF5EB60806ECB74EE484105DD9D6F463BF994867; // 0x10152 // Starts with: 22 00 3c 00 3e 00 44 00 - Metadata: 0x002153E0
	internal static readonly long C1A1100642BA9685B30A84D97348484E14AA1865; // 0x10158 // Starts with: 44 00 48 00 4d 00 53 00 - Metadata: 0x002153E6
	internal static readonly __StaticArrayInitTypeSize=16 C6F364A0AD934EFED8909446C215752E565D77C1; // 0x10160 // Starts with: 09 00 0a 00 0b 00 0c 00 - Metadata: 0x002153EE
	internal static readonly __StaticArrayInitTypeSize=174 CE5835130F5277F63D716FC9115526B0AC68FFAD; // 0x10170 // Starts with: 41 a6 41 a6 43 a6 43 a6 - Metadata: 0x002153FE
	internal static readonly __StaticArrayInitTypeSize=6 CE93C35B755802BC4B3D180716B048FC61701EF7; // 0x1021E // Starts with: 20 00 3c 00 3e 00 02 02 - Metadata: 0x002154AC
	internal static readonly __StaticArrayInitTypeSize=64 CF0B42666EF5E37EDEA0AB8E173E42C196D03814; // 0x10224 // Starts with: 02 02 02 02 02 02 02 02 - Metadata: 0x002154B2
	internal static readonly __StaticArrayInitTypeSize=256 D002CBBE1FF33721AF7C4D1D3ECAD1B7DB5258B7; // 0x10264 // Starts with: 78 a4 6a d7 56 b7 c7 e8 - Metadata: 0x002154F2
	internal static readonly __StaticArrayInitTypeSize=32 D117188BE8D4609C0D531C51B0BB911A4219DEBE; // 0x10364 // Starts with: 70 21 71 21 72 21 73 21 - Metadata: 0x002155F2
	internal static readonly __StaticArrayInitTypeSize=32 D28E8ABDBD777A482CE0EE5C24814ACAE52AABFE; // 0x10384 // Starts with: e3 b0 c4 42 98 fc 1c 14 - Metadata: 0x00215612
	internal static readonly __StaticArrayInitTypeSize=256 D2C5BAE967587C6F3D9F2C4551911E0575A1101F; // 0x103A4 // Starts with: 29 2e 43 c9 a2 d8 7c 01 - Metadata: 0x00215632
	internal static readonly __StaticArrayInitTypeSize=44 D78D08081C7A5AD6FBA7A8DC86BCD6D7A577C636; // 0x104A4 // Starts with: 00 00 00 00 10 09 00 00 - Metadata: 0x00215732
	internal static readonly __StaticArrayInitTypeSize=76 DA19DB47B583EFCF7825D2E39D661D2354F28219; // 0x104D0 // Starts with: 00 2d 01 2d 02 2d 03 2d - Metadata: 0x0021575E
	internal static readonly __StaticArrayInitTypeSize=56 DC2B830D8CD59AD6A4E4332D21CA0DCA2821AD82; // 0x1051C // Starts with: 38 30 28 20 18 10 08 00 - Metadata: 0x002157AA
	internal static readonly __StaticArrayInitTypeSize=52 DD3AEFEADB1CD615F3017763F1568179FEE640B0; // 0x10554 // Starts with: 00 00 00 00 1f 00 00 00 - Metadata: 0x002157E2
	internal static readonly __StaticArrayInitTypeSize=36 E1827270A5FE1C85F5352A66FD87BA747213D006; // 0x10588 // Starts with: 00 07 00 00 00 12 00 00 - Metadata: 0x00215816
	internal static readonly __StaticArrayInitTypeSize=40 E45BAB43F7D5D038672B3E3431F92E34A7AF2571; // 0x105AC // Starts with: ff ff ff ff ff ff ff ff - Metadata: 0x0021583A
	internal static readonly __StaticArrayInitTypeSize=64 E75835D001C843F156FBA01B001DFE1B8029AC17; // 0x105D4 // Starts with: cf 83 e1 35 7e ef b8 bd - Metadata: 0x00215862
	internal static readonly __StaticArrayInitTypeSize=52 E92B39D8233061927D9ACDE54665E68E7535635A; // 0x10614 // Starts with: 00 00 00 00 1f 00 00 00 - Metadata: 0x002158A2
	internal static readonly __StaticArrayInitTypeSize=12 EA9506959484C55CFE0C139C624DF6060E285866; // 0x10648 // Starts with: 80 10 00 00 80 15 00 00 - Metadata: 0x002158D6
	internal static readonly __StaticArrayInitTypeSize=262 EB5E9A80A40096AB74D2E226650C7258D7BC5E9D; // 0x10654 // Starts with: 61 2c 61 2c 6b 02 7d 1d - Metadata: 0x002158E2
	internal static readonly __StaticArrayInitTypeSize=64 EBF68F411848D603D059DFDEA2321C5A5EA78044; // 0x1075A // Starts with: 00 00 00 00 04 00 00 00 - Metadata: 0x002159E8
	internal static readonly __StaticArrayInitTypeSize=10 EC5BB4F59D4B9B2E9ECD3904D44A8275F23AFB11; // 0x1079A // Starts with: 09 92 26 89 93 f2 2c 64 - Metadata: 0x00215A28
	internal static readonly __StaticArrayInitTypeSize=3 EC83FB16C20052BEE2B4025159BC2ED45C9C70C3; // 0x107A4 // Starts with: 55 04 04 1a 00 00 00 1b - Metadata: 0x00215A32
	internal static readonly __StaticArrayInitTypeSize=72 EC89C317EA2BF49A70EFF5E89C691E34733D7C37; // 0x107A7 // Starts with: 1a 00 00 00 1b 00 00 00 - Metadata: 0x00215A35
	internal static readonly __StaticArrayInitTypeSize=40 F06E829E62F3AFBC045D064E10A4F5DF7C969612; // 0x107EF // Starts with: ff ff ff ff ff ff ff ff - Metadata: 0x00215A7D
	internal static readonly __StaticArrayInitTypeSize=11614 F073AA332018FDA0D572E99448FFF1D6422BD520; // 0x10817 // Starts with: 00 11 10 11 10 11 10 11 - Metadata: 0x00215AA5
	internal static readonly __StaticArrayInitTypeSize=120 F34B0E10653402E8F788F8BC3F7CD7090928A429; // 0x13575 // Starts with: 60 03 00 00 90 04 00 00 - Metadata: 0x00218803
	internal static readonly __StaticArrayInitTypeSize=72 F37E34BEADB04F34FCC31078A59F49856CA83D5B; // 0x135ED // Starts with: 15 00 00 00 16 00 00 00 - Metadata: 0x0021887B
	internal static readonly __StaticArrayInitTypeSize=94 F512A9ABF88066AAEB92684F95CC05D8101B462B; // 0x13635 // Starts with: 30 2c 31 2c 32 2c 33 2c - Metadata: 0x002188C3
	internal static readonly __StaticArrayInitTypeSize=12 F8FAABB821300AA500C2CEC6091B3782A7FB44A4; // 0x13693 // Starts with: 00 34 00 00 00 a5 00 00 - Metadata: 0x00218921
	internal static readonly __StaticArrayInitTypeSize=2350 FCBD2781A933F0828ED4AAF88FD8B08D76DDD49B; // 0x1369F // Starts with: e0 00 e1 00 e2 00 e3 00 - Metadata: 0x0021892D

	// Nested types
	private struct __StaticArrayInitTypeSize=3 // TypeDefIndex: 1378
	{
	}

	private struct __StaticArrayInitTypeSize=6 // TypeDefIndex: 1379
	{
	}

	private struct __StaticArrayInitTypeSize=9 // TypeDefIndex: 1380
	{
	}

	private struct __StaticArrayInitTypeSize=10 // TypeDefIndex: 1381
	{
	}

	private struct __StaticArrayInitTypeSize=12 // TypeDefIndex: 1382
	{
	}

	private struct __StaticArrayInitTypeSize=14 // TypeDefIndex: 1383
	{
	}

	private struct __StaticArrayInitTypeSize=16 // TypeDefIndex: 1384
	{
	}

	private struct __StaticArrayInitTypeSize=20 // TypeDefIndex: 1385
	{
	}

	private struct __StaticArrayInitTypeSize=24 // TypeDefIndex: 1386
	{
	}

	private struct __StaticArrayInitTypeSize=32 // TypeDefIndex: 1387
	{
	}

	private struct __StaticArrayInitTypeSize=36 // TypeDefIndex: 1388
	{
	}

	private struct __StaticArrayInitTypeSize=38 // TypeDefIndex: 1389
	{
	}

	private struct __StaticArrayInitTypeSize=40 // TypeDefIndex: 1390
	{
	}

	private struct __StaticArrayInitTypeSize=42 // TypeDefIndex: 1391
	{
	}

	private struct __StaticArrayInitTypeSize=44 // TypeDefIndex: 1392
	{
	}

	private struct __StaticArrayInitTypeSize=48 // TypeDefIndex: 1393
	{
	}

	private struct __StaticArrayInitTypeSize=52 // TypeDefIndex: 1394
	{
	}

	private struct __StaticArrayInitTypeSize=56 // TypeDefIndex: 1395
	{
	}

	private struct __StaticArrayInitTypeSize=64 // TypeDefIndex: 1396
	{
	}

	private struct __StaticArrayInitTypeSize=72 // TypeDefIndex: 1397
	{
	}

	private struct __StaticArrayInitTypeSize=76 // TypeDefIndex: 1398
	{
	}

	private struct __StaticArrayInitTypeSize=84 // TypeDefIndex: 1399
	{
	}

	private struct __StaticArrayInitTypeSize=94 // TypeDefIndex: 1400
	{
	}

	private struct __StaticArrayInitTypeSize=120 // TypeDefIndex: 1401
	{
	}

	private struct __StaticArrayInitTypeSize=128 // TypeDefIndex: 1402
	{
	}

	private struct __StaticArrayInitTypeSize=130 // TypeDefIndex: 1403
	{
	}

	private struct __StaticArrayInitTypeSize=162 // TypeDefIndex: 1404
	{
	}

	private struct __StaticArrayInitTypeSize=174 // TypeDefIndex: 1405
	{
	}

	private struct __StaticArrayInitTypeSize=212 // TypeDefIndex: 1406
	{
	}

	private struct __StaticArrayInitTypeSize=240 // TypeDefIndex: 1407
	{
	}

	private struct __StaticArrayInitTypeSize=256 // TypeDefIndex: 1408
	{
	}

	private struct __StaticArrayInitTypeSize=262 // TypeDefIndex: 1409
	{
	}

	private struct __StaticArrayInitTypeSize=288 // TypeDefIndex: 1410
	{
	}

	private struct __StaticArrayInitTypeSize=320 // TypeDefIndex: 1411
	{
	}

	private struct __StaticArrayInitTypeSize=360 // TypeDefIndex: 1412
	{
	}

	private struct __StaticArrayInitTypeSize=640 // TypeDefIndex: 1413
	{
	}

	private struct __StaticArrayInitTypeSize=998 // TypeDefIndex: 1414
	{
	}

	private struct __StaticArrayInitTypeSize=1018 // TypeDefIndex: 1415
	{
	}

	private struct __StaticArrayInitTypeSize=1080 // TypeDefIndex: 1416
	{
	}

	private struct __StaticArrayInitTypeSize=1208 // TypeDefIndex: 1417
	{
	}

	private struct __StaticArrayInitTypeSize=1450 // TypeDefIndex: 1418
	{
	}

	private struct __StaticArrayInitTypeSize=1665 // TypeDefIndex: 1419
	{
	}

	private struct __StaticArrayInitTypeSize=2048 // TypeDefIndex: 1420
	{
	}

	private struct __StaticArrayInitTypeSize=2100 // TypeDefIndex: 1421
	{
	}

	private struct __StaticArrayInitTypeSize=2350 // TypeDefIndex: 1422
	{
	}

	private struct __StaticArrayInitTypeSize=2382 // TypeDefIndex: 1423
	{
	}

	private struct __StaticArrayInitTypeSize=3132 // TypeDefIndex: 1424
	{
	}

	private struct __StaticArrayInitTypeSize=4096 // TypeDefIndex: 1425
	{
	}

	private struct __StaticArrayInitTypeSize=11614 // TypeDefIndex: 1426
	{
	}

	private struct __StaticArrayInitTypeSize=21252 // TypeDefIndex: 1427
	{
	}

	// Methods
	internal static uint ComputeStringHash(string s); // 0x005FEED8-0x005FEF54
}

namespace System.Runtime.InteropServices
{
	[CLSCompliant] // 0x001413FC-0x001414F8
	[ComVisible] // 0x001413FC-0x001414F8
	[Guid] // 0x001413FC-0x001414F8
	[InterfaceType] // 0x001413FC-0x001414F8
	[TypeLibImportClass] // 0x001413FC-0x001414F8
	public interface _AssemblyBuilder // TypeDefIndex: 1428
	{
	}

	[CLSCompliant] // 0x001414F8-0x001415F4
	[ComVisible] // 0x001414F8-0x001415F4
	[Guid] // 0x001414F8-0x001415F4
	[InterfaceType] // 0x001414F8-0x001415F4
	[TypeLibImportClass] // 0x001414F8-0x001415F4
	public interface _ConstructorBuilder // TypeDefIndex: 1429
	{
	}

	[CLSCompliant] // 0x001415F4-0x001416F0
	[ComVisible] // 0x001415F4-0x001416F0
	[Guid] // 0x001415F4-0x001416F0
	[InterfaceType] // 0x001415F4-0x001416F0
	[TypeLibImportClass] // 0x001415F4-0x001416F0
	public interface _CustomAttributeBuilder // TypeDefIndex: 1430
	{
	}

	[CLSCompliant] // 0x001416F0-0x001417EC
	[ComVisible] // 0x001416F0-0x001417EC
	[Guid] // 0x001416F0-0x001417EC
	[InterfaceType] // 0x001416F0-0x001417EC
	[TypeLibImportClass] // 0x001416F0-0x001417EC
	public interface _EnumBuilder // TypeDefIndex: 1431
	{
	}

	[CLSCompliant] // 0x001417EC-0x001418E8
	[ComVisible] // 0x001417EC-0x001418E8
	[Guid] // 0x001417EC-0x001418E8
	[InterfaceType] // 0x001417EC-0x001418E8
	[TypeLibImportClass] // 0x001417EC-0x001418E8
	public interface _EventBuilder // TypeDefIndex: 1432
	{
	}
}

namespace System.Reflection.Emit
{
	[Serializable]
	[ComVisible] // 0x001418E8-0x00141934
	[Obsolete] // 0x001418E8-0x00141934
	public sealed class UnmanagedMarshal // TypeDefIndex: 1433
	{
	}
}

namespace System.Runtime.InteropServices
{
	[CLSCompliant] // 0x00141934-0x00141A30
	[ComVisible] // 0x00141934-0x00141A30
	[Guid] // 0x00141934-0x00141A30
	[InterfaceType] // 0x00141934-0x00141A30
	[TypeLibImportClass] // 0x00141934-0x00141A30
	public interface _FieldBuilder // TypeDefIndex: 1434
	{
	}

	[CLSCompliant] // 0x00141A30-0x00141B2C
	[ComVisible] // 0x00141A30-0x00141B2C
	[Guid] // 0x00141A30-0x00141B2C
	[InterfaceType] // 0x00141A30-0x00141B2C
	[TypeLibImportClass] // 0x00141A30-0x00141B2C
	public interface _ILGenerator // TypeDefIndex: 1435
	{
	}

	[CLSCompliant] // 0x00141B2C-0x00141C28
	[ComVisible] // 0x00141B2C-0x00141C28
	[Guid] // 0x00141B2C-0x00141C28
	[InterfaceType] // 0x00141B2C-0x00141C28
	[TypeLibImportClass] // 0x00141B2C-0x00141C28
	public interface _LocalBuilder // TypeDefIndex: 1436
	{
	}

	[CLSCompliant] // 0x00141C28-0x00141D24
	[ComVisible] // 0x00141C28-0x00141D24
	[Guid] // 0x00141C28-0x00141D24
	[InterfaceType] // 0x00141C28-0x00141D24
	[TypeLibImportClass] // 0x00141C28-0x00141D24
	public interface _MethodBuilder // TypeDefIndex: 1437
	{
	}

	[CLSCompliant] // 0x00141D24-0x00141E20
	[ComVisible] // 0x00141D24-0x00141E20
	[Guid] // 0x00141D24-0x00141E20
	[InterfaceType] // 0x00141D24-0x00141E20
	[TypeLibImportClass] // 0x00141D24-0x00141E20
	public interface _ModuleBuilder // TypeDefIndex: 1438
	{
	}

	[CLSCompliant] // 0x00141E20-0x00141F1C
	[ComVisible] // 0x00141E20-0x00141F1C
	[Guid] // 0x00141E20-0x00141F1C
	[InterfaceType] // 0x00141E20-0x00141F1C
	[TypeLibImportClass] // 0x00141E20-0x00141F1C
	public interface _ParameterBuilder // TypeDefIndex: 1439
	{
	}

	[CLSCompliant] // 0x00141F1C-0x00142018
	[ComVisible] // 0x00141F1C-0x00142018
	[Guid] // 0x00141F1C-0x00142018
	[InterfaceType] // 0x00141F1C-0x00142018
	[TypeLibImportClass] // 0x00141F1C-0x00142018
	public interface _PropertyBuilder // TypeDefIndex: 1440
	{
	}

	[CLSCompliant] // 0x00142018-0x00142114
	[ComVisible] // 0x00142018-0x00142114
	[Guid] // 0x00142018-0x00142114
	[InterfaceType] // 0x00142018-0x00142114
	[TypeLibImportClass] // 0x00142018-0x00142114
	public interface _TypeBuilder // TypeDefIndex: 1441
	{
	}
}

namespace System.Reflection.Emit
{
	[ComVisible] // 0x00142114-0x00142128
	public sealed class DynamicMethod : MethodInfo // TypeDefIndex: 1442
	{
		// Properties
		public override MethodAttributes Attributes { get; } // 0x00751048-0x007510F0 
		public override Type DeclaringType { get; } // 0x007510F0-0x00751198 
		public override RuntimeMethodHandle MethodHandle { get; } // 0x00751198-0x00751240 
		public override string Name { get; } // 0x00751240-0x007512E8 
		public override Type ReflectedType { get; } // 0x007512E8-0x00751390 
	
		// Methods
		public override object[] GetCustomAttributes(bool inherit); // 0x00751390-0x00751438
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00751438-0x007514E0
		public override MethodImplAttributes GetMethodImplementationFlags(); // 0x007514E0-0x00751588
		public override ParameterInfo[] GetParameters(); // 0x00751588-0x00751630
		public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x00751630-0x007516D8
		public override bool IsDefined(Type attributeType, bool inherit); // 0x007516D8-0x00751780
	}
}

namespace Unity
{
	internal sealed class ThrowStub : ObjectDisposedException // TypeDefIndex: 1443
	{
		// Methods
		public static void ThrowNotSupportedException(); // 0x00A664E0-0x00A66568
	}
}

namespace System
{
	internal class __Il2CppComObject // TypeDefIndex: 1444
	{
		// Methods
		~__Il2CppComObject(); // 0x00A66488-0x00A664E0
	}

	internal sealed class __Il2CppComDelegate : __Il2CppComObject // TypeDefIndex: 1445
	{
		// Methods
		~__Il2CppComDelegate(); // 0x00A66484-0x00A66488
	}
}

namespace Mono.Security
{
	public class ASN1 // TypeDefIndex: 1447
	{
		// Fields
		private byte m_nTag; // 0x08
		private byte[] m_aValue; // 0x0C
		private ArrayList elist; // 0x10
	
		// Properties
		public int Count { get; } // 0x00B33270-0x00B33290 
		public byte Tag { get; } // 0x00B33290-0x00B33298 
		public byte[] Value { get; set; } // 0x00B33298-0x00B333C0 0x00B333C0-0x00B334C0
		public ASN1 this[int index] { get => default; } // 0x00B34074-0x00B34248 
	
		// Constructors
		public ASN1(byte tag); // 0x00B32EF0-0x00B32F18
		public ASN1(byte tag, byte[] data); // 0x00B32F18-0x00B32F40
		public ASN1(byte[] data); // 0x00B32F40-0x00B33120
	
		// Methods
		public ASN1 Add(ASN1 asn1); // 0x00B334C0-0x00B33578
		public virtual byte[] GetBytes(); // 0x00B33578-0x00B33EFC
		protected void Decode(byte[] asn1, ref int anPos, int anLength); // 0x00B33120-0x00B33270
		protected void DecodeTLV(byte[] asn1, ref int pos, out byte tag, out int length, out byte[] content); // 0x00B33EFC-0x00B34074
		public override string ToString(); // 0x00B34248-0x00B34558
	}

	public static class ASN1Convert // TypeDefIndex: 1448
	{
		// Methods
		public static ASN1 FromInt32(int value); // 0x00B34558-0x00B34708
		public static int ToInt32(ASN1 asn1); // 0x00B34728-0x00B348A4
		public static string ToOid(ASN1 asn1); // 0x00B348A4-0x00B34CBC
	}

	internal sealed class BitConverterLE // TypeDefIndex: 1449
	{
		// Methods
		private static unsafe byte[] GetUIntBytes(byte* bytes); // 0x00B34CBC-0x00B34E9C
		internal static byte[] GetBytes(int value); // 0x00B34708-0x00B34728
	}
}

namespace Mono.Security.Interface
{
	public interface ICertificateValidator // TypeDefIndex: 1450
	{
		// Properties
		MonoTlsSettings Settings { get; }
	}

	internal interface ICertificateValidator2 : ICertificateValidator // TypeDefIndex: 1451
	{
	}

	public interface IMonoSslStream : IDisposable // TypeDefIndex: 1452
	{
		// Properties
		bool IsAuthenticated { get; }
		bool CanRead { get; }
		bool CanWrite { get; }
		long Length { get; }
		long Position { get; }
	
		// Methods
		int Read(byte[] buffer, int offset, int count);
		void Write(byte[] buffer, int offset, int count);
		IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);
		int EndRead(IAsyncResult asyncResult);
		IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);
		void EndWrite(IAsyncResult asyncResult);
	}

	[Flags] // 0x00146AF0-0x00146B00
	public enum MonoSslPolicyErrors // TypeDefIndex: 1453
	{
		None = 0,
		RemoteCertificateNotAvailable = 1,
		RemoteCertificateNameMismatch = 2,
		RemoteCertificateChainErrors = 4
	}

	public abstract class MonoTlsProvider // TypeDefIndex: 1454
	{
		// Properties
		public abstract Guid ID { get; }
		public abstract string Name { get; }
		public abstract bool SupportsSslStream { get; }
		public abstract bool SupportsConnectionInfo { get; }
		public abstract bool SupportsMonoExtensions { get; }
		public abstract SslProtocols SupportedProtocols { get; }
		internal abstract bool SupportsCleanShutdown { get; }
	
		// Constructors
		internal MonoTlsProvider(); // 0x00B3500C-0x00B35014
	
		// Methods
		public abstract IMonoSslStream CreateSslStream(Stream innerStream, bool leaveInnerStreamOpen, MonoTlsSettings settings = null);
		internal abstract IMonoSslStream CreateSslStreamInternal(SslStream sslStream, Stream innerStream, bool leaveInnerStreamOpen, MonoTlsSettings settings);
		internal abstract bool ValidateCertificate(ICertificateValidator2 validator, string targetHost, bool serverMode, System.Security.Cryptography.X509Certificates.X509CertificateCollection certificates, bool wantsChain, ref X509Chain chain, ref MonoSslPolicyErrors errors, ref int status11);
	}

	public sealed class MonoTlsSettings // TypeDefIndex: 1455
	{
		// Fields
		[CompilerGenerated] // 0x00146B00-0x00146B10
		private System.Security.Cryptography.X509Certificates.X509CertificateCollection <TrustAnchors>k__BackingField; // 0x08
	
		// Properties
		public System.Security.Cryptography.X509Certificates.X509CertificateCollection TrustAnchors { [CompilerGenerated] /* 0x00146B10-0x00146B20 */ get; } // 0x00B35014-0x00B3501C 
	}
}

namespace Mono.Security.Cryptography
{
	public sealed class CryptoConvert // TypeDefIndex: 1456
	{
		// Methods
		public static string ToHex(byte[] input); // 0x00B34E9C-0x00B3500C
	}
}

internal static class SR // TypeDefIndex: 1458
{
	// Methods
	internal static string GetString(string name, params /* 0x00147DE0-0x00147DF0 */ object[] args); // 0x0073A87C-0x0073A910
	internal static string GetString(CultureInfo culture, string name, params /* 0x00147DF0-0x00147E00 */ object[] args); // 0x0073A910-0x0073A918
	internal static string GetString(string name); // 0x0073A918-0x0073A91C
}

namespace Mono.Unity
{
	internal static class CertHelper // TypeDefIndex: 1459
	{
		// Methods
		public static unsafe void AddCertificatesToNativeChain(UnityTls.unitytls_x509list* nativeCertificateChain, System.Security.Cryptography.X509Certificates.X509CertificateCollection certificates, UnityTls.unitytls_errorstate* errorState); // 0x0072BAB4-0x0072BC6C
		public static unsafe void AddCertificateToNativeChain(UnityTls.unitytls_x509list* nativeCertificateChain, System.Security.Cryptography.X509Certificates.X509Certificate certificate, UnityTls.unitytls_errorstate* errorState); // 0x0072BC6C-0x0072BE90
	}

	internal static class UnityTls // TypeDefIndex: 1460
	{
		// Fields
		private static unitytls_interface_struct marshalledInterface; // 0x00
	
		// Properties
		public static unitytls_interface_struct NativeInterface { get; } // 0x0072BE90-0x0072C034 
	
		// Nested types
		public enum unitytls_error_code : uint // TypeDefIndex: 1461
		{
			UNITYTLS_SUCCESS = 0,
			UNITYTLS_INVALID_ARGUMENT = 1,
			UNITYTLS_INVALID_FORMAT = 2,
			UNITYTLS_INVALID_PASSWORD = 3,
			UNITYTLS_INVALID_STATE = 4,
			UNITYTLS_BUFFER_OVERFLOW = 5,
			UNITYTLS_OUT_OF_MEMORY = 6,
			UNITYTLS_INTERNAL_ERROR = 7,
			UNITYTLS_NOT_SUPPORTED = 8,
			UNITYTLS_ENTROPY_SOURCE_FAILED = 9,
			UNITYTLS_STREAM_CLOSED = 10,
			UNITYTLS_USER_CUSTOM_ERROR_START = 1048576,
			UNITYTLS_USER_WOULD_BLOCK = 1048577,
			UNITYTLS_USER_READ_FAILED = 1048578,
			UNITYTLS_USER_WRITE_FAILED = 1048579,
			UNITYTLS_USER_UNKNOWN_ERROR = 1048580,
			UNITYTLS_USER_CUSTOM_ERROR_END = 2097152
		}
	
		public struct unitytls_errorstate // TypeDefIndex: 1462
		{
			// Fields
			private uint magic; // 0x00
			public unitytls_error_code code; // 0x04
			private ulong reserved; // 0x08
		}
	
		public struct unitytls_key // TypeDefIndex: 1463
		{
		}
	
		public struct unitytls_key_ref // TypeDefIndex: 1464
		{
			// Fields
			public ulong handle; // 0x00
		}
	
		public struct unitytls_x509_ref // TypeDefIndex: 1465
		{
			// Fields
			public ulong handle; // 0x00
		}
	
		public struct unitytls_x509list // TypeDefIndex: 1466
		{
		}
	
		public struct unitytls_x509list_ref // TypeDefIndex: 1467
		{
			// Fields
			public ulong handle; // 0x00
		}
	
		[Flags] // 0x00146D04-0x00146D14
		public enum unitytls_x509verify_result : uint // TypeDefIndex: 1468
		{
			UNITYTLS_X509VERIFY_SUCCESS = 0,
			UNITYTLS_X509VERIFY_FLAG_EXPIRED = 1,
			UNITYTLS_X509VERIFY_FLAG_REVOKED = 2,
			UNITYTLS_X509VERIFY_FLAG_CN_MISMATCH = 4,
			UNITYTLS_X509VERIFY_FLAG_NOT_TRUSTED = 8,
			UNITYTLS_X509VERIFY_FLAG_USER_ERROR1 = 65536,
			UNITYTLS_X509VERIFY_FLAG_USER_ERROR2 = 131072,
			UNITYTLS_X509VERIFY_FLAG_USER_ERROR3 = 262144,
			UNITYTLS_X509VERIFY_FLAG_USER_ERROR4 = 524288,
			UNITYTLS_X509VERIFY_FLAG_USER_ERROR5 = 1048576,
			UNITYTLS_X509VERIFY_FLAG_USER_ERROR6 = 2097152,
			UNITYTLS_X509VERIFY_FLAG_USER_ERROR7 = 4194304,
			UNITYTLS_X509VERIFY_FLAG_USER_ERROR8 = 8388608,
			UNITYTLS_X509VERIFY_FLAG_UNKNOWN_ERROR = 134217728,
			UNITYTLS_X509VERIFY_NOT_DONE = 2147483648,
			UNITYTLS_X509VERIFY_FATAL_ERROR = 4294967295
		}
	
		[UnmanagedFunctionPointer] // 0x00146D14-0x00146D28
		public unsafe delegate unitytls_x509verify_result unitytls_x509verify_callback(void* userData, unitytls_x509_ref cert, unitytls_x509verify_result result, unitytls_errorstate* errorState); // TypeDefIndex: 1469; 0x0073959C-0x00739B44
	
		public struct unitytls_tlsctx // TypeDefIndex: 1470
		{
		}
	
		public struct unitytls_x509name // TypeDefIndex: 1471
		{
		}
	
		public enum unitytls_ciphersuite : uint // TypeDefIndex: 1472
		{
			UNITYTLS_CIPHERSUITE_INVALID = 16777215
		}
	
		public enum unitytls_protocol : uint // TypeDefIndex: 1473
		{
			UNITYTLS_PROTOCOL_TLS_1_0 = 0,
			UNITYTLS_PROTOCOL_TLS_1_1 = 1,
			UNITYTLS_PROTOCOL_TLS_1_2 = 2,
			UNITYTLS_PROTOCOL_INVALID = 3
		}
	
		public struct unitytls_tlsctx_protocolrange // TypeDefIndex: 1474
		{
			// Fields
			public unitytls_protocol min; // 0x00
			public unitytls_protocol max; // 0x04
		}
	
		[UnmanagedFunctionPointer] // 0x00146D28-0x00146D3C
		public unsafe delegate IntPtr unitytls_tlsctx_write_callback(void* userData, byte* data, IntPtr bufferLen, unitytls_errorstate* errorState); // TypeDefIndex: 1475; 0x007388E0-0x00738E30
	
		[UnmanagedFunctionPointer] // 0x00146D3C-0x00146D50
		public unsafe delegate IntPtr unitytls_tlsctx_read_callback(void* userData, byte* buffer, IntPtr bufferLen, unitytls_errorstate* errorState); // TypeDefIndex: 1476; 0x00737CE8-0x00738238
	
		[UnmanagedFunctionPointer] // 0x00146D50-0x00146D64
		public unsafe delegate void unitytls_tlsctx_trace_callback(void* userData, unitytls_tlsctx* ctx, byte* traceMessage, IntPtr traceMessageLen); // TypeDefIndex: 1477; 0x00738364-0x007387E4
	
		[UnmanagedFunctionPointer] // 0x00146D64-0x00146D78
		public unsafe delegate void unitytls_tlsctx_certificate_callback(void* userData, unitytls_tlsctx* ctx, byte* cn, IntPtr cnLen, unitytls_x509name* caList, IntPtr caListLen, unitytls_x509list_ref* chain, unitytls_key_ref* key, unitytls_errorstate* errorState); // TypeDefIndex: 1478; 0x00737634-0x00737BC4
	
		[UnmanagedFunctionPointer] // 0x00146D78-0x00146D8C
		public unsafe delegate unitytls_x509verify_result unitytls_tlsctx_x509verify_callback(void* userData, unitytls_x509list_ref chain, unitytls_errorstate* errorState); // TypeDefIndex: 1479; 0x00738F3C-0x0073949C
	
		public struct unitytls_tlsctx_callbacks // TypeDefIndex: 1480
		{
			// Fields
			public unitytls_tlsctx_read_callback read; // 0x00
			public unitytls_tlsctx_write_callback write; // 0x04
			public unsafe void* data; // 0x08
		}
	
		public class unitytls_interface_struct // TypeDefIndex: 1481
		{
			// Fields
			public readonly ulong UNITYTLS_INVALID_HANDLE; // 0x08
			public readonly unitytls_tlsctx_protocolrange UNITYTLS_TLSCTX_PROTOCOLRANGE_DEFAULT; // 0x10
			public unitytls_errorstate_create_t unitytls_errorstate_create; // 0x18
			public unitytls_errorstate_raise_error_t unitytls_errorstate_raise_error; // 0x1C
			public unitytls_key_get_ref_t unitytls_key_get_ref; // 0x20
			public unitytls_key_parse_der_t unitytls_key_parse_der; // 0x24
			public unitytls_key_parse_pem_t unitytls_key_parse_pem; // 0x28
			public unitytls_key_free_t unitytls_key_free; // 0x2C
			public unitytls_x509_export_der_t unitytls_x509_export_der; // 0x30
			public unitytls_x509list_get_ref_t unitytls_x509list_get_ref; // 0x34
			public unitytls_x509list_get_x509_t unitytls_x509list_get_x509; // 0x38
			public unitytls_x509list_create_t unitytls_x509list_create; // 0x3C
			public unitytls_x509list_append_t unitytls_x509list_append; // 0x40
			public unitytls_x509list_append_der_t unitytls_x509list_append_der; // 0x44
			public unitytls_x509list_append_der_t unitytls_x509list_append_pem; // 0x48
			public unitytls_x509list_free_t unitytls_x509list_free; // 0x4C
			public unitytls_x509verify_default_ca_t unitytls_x509verify_default_ca; // 0x50
			public unitytls_x509verify_explicit_ca_t unitytls_x509verify_explicit_ca; // 0x54
			public unitytls_tlsctx_create_server_t unitytls_tlsctx_create_server; // 0x58
			public unitytls_tlsctx_create_client_t unitytls_tlsctx_create_client; // 0x5C
			public unitytls_tlsctx_server_require_client_authentication_t unitytls_tlsctx_server_require_client_authentication; // 0x60
			public unitytls_tlsctx_set_certificate_callback_t unitytls_tlsctx_set_certificate_callback; // 0x64
			public unitytls_tlsctx_set_trace_callback_t unitytls_tlsctx_set_trace_callback; // 0x68
			public unitytls_tlsctx_set_x509verify_callback_t unitytls_tlsctx_set_x509verify_callback; // 0x6C
			public unitytls_tlsctx_set_supported_ciphersuites_t unitytls_tlsctx_set_supported_ciphersuites; // 0x70
			public unitytls_tlsctx_get_ciphersuite_t unitytls_tlsctx_get_ciphersuite; // 0x74
			public unitytls_tlsctx_get_protocol_t unitytls_tlsctx_get_protocol; // 0x78
			public unitytls_tlsctx_process_handshake_t unitytls_tlsctx_process_handshake; // 0x7C
			public unitytls_tlsctx_read_t unitytls_tlsctx_read; // 0x80
			public unitytls_tlsctx_write_t unitytls_tlsctx_write; // 0x84
			public unitytls_tlsctx_notify_close_t unitytls_tlsctx_notify_close; // 0x88
			public unitytls_tlsctx_free_t unitytls_tlsctx_free; // 0x8C
			public unitytls_random_generate_bytes_t unitytls_random_generate_bytes; // 0x90
	
			// Nested types
			[UnmanagedFunctionPointer] // 0x00146D8C-0x00146DA0
			public delegate unitytls_errorstate unitytls_errorstate_create_t(); // TypeDefIndex: 1482; 0x0072CA5C-0x0072CF1C
	
			[UnmanagedFunctionPointer] // 0x00146DA0-0x00146DB4
			public unsafe delegate void unitytls_errorstate_raise_error_t(unitytls_errorstate* errorState, unitytls_error_code errorCode); // TypeDefIndex: 1483; 0x0072CFB0-0x0072D434
	
			[UnmanagedFunctionPointer] // 0x00146DB4-0x00146DC8
			public unsafe delegate unitytls_key_ref unitytls_key_get_ref_t(unitytls_key* key, unitytls_errorstate* errorState); // TypeDefIndex: 1484; 0x0072D9D4-0x0072DE80
	
			[UnmanagedFunctionPointer] // 0x00146DC8-0x00146DDC
			public unsafe delegate unitytls_key* unitytls_key_parse_der_t(byte* buffer, IntPtr bufferLen, byte* password, IntPtr passwordLen, unitytls_errorstate* errorState); // TypeDefIndex: 1485; 0x0072DF48-0x0072E4D4
	
			[UnmanagedFunctionPointer] // 0x00146DDC-0x00146DF0
			public unsafe delegate unitytls_key* unitytls_key_parse_pem_t(byte* buffer, IntPtr bufferLen, byte* password, IntPtr passwordLen, unitytls_errorstate* errorState); // TypeDefIndex: 1486; 0x0072E5F0-0x0072EB7C
	
			[UnmanagedFunctionPointer] // 0x00146DF0-0x00146E04
			public unsafe delegate void unitytls_key_free_t(unitytls_key* key); // TypeDefIndex: 1487; 0x0072D504-0x0072D968
	
			[UnmanagedFunctionPointer] // 0x00146E04-0x00146E18
			public unsafe delegate IntPtr unitytls_x509_export_der_t(unitytls_x509_ref cert, byte* buffer, IntPtr bufferLen, unitytls_errorstate* errorState); // TypeDefIndex: 1488; 0x007342DC-0x0073489C
	
			[UnmanagedFunctionPointer] // 0x00146E18-0x00146E2C
			public unsafe delegate unitytls_x509list_ref unitytls_x509list_get_ref_t(unitytls_x509list* list, unitytls_errorstate* errorState); // TypeDefIndex: 1489; 0x007359EC-0x00735E98
	
			[UnmanagedFunctionPointer] // 0x00146E2C-0x00146E40
			public unsafe delegate unitytls_x509_ref unitytls_x509list_get_x509_t(unitytls_x509list_ref list, IntPtr index, unitytls_errorstate* errorState); // TypeDefIndex: 1490; 0x00735F50-0x00736454
	
			[UnmanagedFunctionPointer] // 0x00146E40-0x00146E54
			public unsafe delegate unitytls_x509list* unitytls_x509list_create_t(unitytls_errorstate* errorState); // TypeDefIndex: 1491; 0x0073501C-0x007354C0
	
			[UnmanagedFunctionPointer] // 0x00146E54-0x00146E68
			public unsafe delegate void unitytls_x509list_append_t(unitytls_x509list* list, unitytls_x509_ref cert, unitytls_errorstate* errorState); // TypeDefIndex: 1492; 0x00734AC0-0x00734F48
	
			[UnmanagedFunctionPointer] // 0x00146E68-0x00146E7C
			public unsafe delegate void unitytls_x509list_append_der_t(unitytls_x509list* list, byte* buffer, IntPtr bufferLen, unitytls_errorstate* errorState); // TypeDefIndex: 1493; 0x0072C034-0x0072C4B4
	
			[UnmanagedFunctionPointer] // 0x00146E7C-0x00146E90
			public unsafe delegate void unitytls_x509list_free_t(unitytls_x509list* list); // TypeDefIndex: 1494; 0x0073551C-0x00735980
	
			[UnmanagedFunctionPointer] // 0x00146E90-0x00146EA4
			public unsafe delegate unitytls_x509verify_result unitytls_x509verify_default_ca_t(unitytls_x509list_ref chain, byte* cn, IntPtr cnLen, unitytls_x509verify_callback cb, void* userData, unitytls_errorstate* errorState); // TypeDefIndex: 1495; 0x007365B4-0x00736C10
	
			[UnmanagedFunctionPointer] // 0x00146EA4-0x00146EB8
			public unsafe delegate unitytls_x509verify_result unitytls_x509verify_explicit_ca_t(unitytls_x509list_ref chain, unitytls_x509list_ref trustCA, byte* cn, IntPtr cnLen, unitytls_x509verify_callback cb, void* userData, unitytls_errorstate* errorState); // TypeDefIndex: 1496; 0x00736D94-0x00737404
	
			[UnmanagedFunctionPointer] // 0x00146EB8-0x00146ECC
			public unsafe delegate unitytls_tlsctx* unitytls_tlsctx_create_server_t(unitytls_tlsctx_protocolrange supportedProtocols, unitytls_tlsctx_callbacks callbacks, ulong certChain, ulong leafCertificateKey, unitytls_errorstate* errorState); // TypeDefIndex: 1497; 0x0072FA44-0x007300C0
	
			[UnmanagedFunctionPointer] // 0x00146ECC-0x00146EE0
			public unsafe delegate unitytls_tlsctx* unitytls_tlsctx_create_client_t(unitytls_tlsctx_protocolrange supportedProtocols, unitytls_tlsctx_callbacks callbacks, byte* cn, IntPtr cnLen, unitytls_errorstate* errorState); // TypeDefIndex: 1498; 0x0072F238-0x0072F8B4
	
			[UnmanagedFunctionPointer] // 0x00146EE0-0x00146EF4
			public unsafe delegate void unitytls_tlsctx_server_require_client_authentication_t(unitytls_tlsctx* ctx, unitytls_x509list_ref clientAuthCAList, unitytls_errorstate* errorState); // TypeDefIndex: 1499; 0x007321F4-0x0073267C
	
			[UnmanagedFunctionPointer] // 0x00146EF4-0x00146F08
			public unsafe delegate void unitytls_tlsctx_set_certificate_callback_t(unitytls_tlsctx* ctx, unitytls_tlsctx_certificate_callback cb, void* userData, unitytls_errorstate* errorState); // TypeDefIndex: 1500; 0x0073277C-0x00732BFC
	
			[UnmanagedFunctionPointer] // 0x00146F08-0x00146F1C
			public unsafe delegate void unitytls_tlsctx_set_trace_callback_t(unitytls_tlsctx* ctx, unitytls_tlsctx_trace_callback cb, void* userData, unitytls_errorstate* errorState); // TypeDefIndex: 1501; 0x0073321C-0x0073369C
	
			[UnmanagedFunctionPointer] // 0x00146F1C-0x00146F30
			public unsafe delegate void unitytls_tlsctx_set_x509verify_callback_t(unitytls_tlsctx* ctx, unitytls_tlsctx_x509verify_callback cb, void* userData, unitytls_errorstate* errorState); // TypeDefIndex: 1502; 0x0073373C-0x00733BBC
	
			[UnmanagedFunctionPointer] // 0x00146F30-0x00146F44
			public unsafe delegate void unitytls_tlsctx_set_supported_ciphersuites_t(unitytls_tlsctx* ctx, unitytls_ciphersuite* supportedCiphersuites, IntPtr supportedCiphersuitesLen, unitytls_errorstate* errorState); // TypeDefIndex: 1503; 0x00732C90-0x00733110
	
			[UnmanagedFunctionPointer] // 0x00146F44-0x00146F58
			public unsafe delegate unitytls_ciphersuite unitytls_tlsctx_get_ciphersuite_t(unitytls_tlsctx* ctx, unitytls_errorstate* errorState); // TypeDefIndex: 1504; 0x007306D8-0x00730B7C
	
			[UnmanagedFunctionPointer] // 0x00146F58-0x00146F6C
			public unsafe delegate unitytls_protocol unitytls_tlsctx_get_protocol_t(unitytls_tlsctx* ctx, unitytls_errorstate* errorState); // TypeDefIndex: 1505; 0x00730C14-0x007310B8
	
			[UnmanagedFunctionPointer] // 0x00146F6C-0x00146F80
			public unsafe delegate unitytls_x509verify_result unitytls_tlsctx_process_handshake_t(unitytls_tlsctx* ctx, unitytls_errorstate* errorState); // TypeDefIndex: 1506; 0x00731640-0x00731AE4
	
			[UnmanagedFunctionPointer] // 0x00146F80-0x00146F94
			public unsafe delegate IntPtr unitytls_tlsctx_read_t(unitytls_tlsctx* ctx, byte* buffer, IntPtr bufferLen, unitytls_errorstate* errorState); // TypeDefIndex: 1507; 0x00731B98-0x007320E8
	
			[UnmanagedFunctionPointer] // 0x00146F94-0x00146FA8
			public unsafe delegate IntPtr unitytls_tlsctx_write_t(unitytls_tlsctx* ctx, byte* data, IntPtr bufferLen, unitytls_errorstate* errorState); // TypeDefIndex: 1508; 0x00733C50-0x007341A0
	
			[UnmanagedFunctionPointer] // 0x00146FA8-0x00146FBC
			public unsafe delegate void unitytls_tlsctx_notify_close_t(unitytls_tlsctx* ctx, unitytls_errorstate* errorState); // TypeDefIndex: 1509; 0x00731150-0x007315D4
	
			[UnmanagedFunctionPointer] // 0x00146FBC-0x00146FD0
			public unsafe delegate void unitytls_tlsctx_free_t(unitytls_tlsctx* ctx); // TypeDefIndex: 1510; 0x00730214-0x00730678
	
			[UnmanagedFunctionPointer] // 0x00146FD0-0x00146FE4
			public unsafe delegate void unitytls_random_generate_bytes_t(byte* buffer, IntPtr bufferLen, unitytls_errorstate* errorState); // TypeDefIndex: 1511; 0x0072EC74-0x0072F0D0
	
			// Constructors
			public unitytls_interface_struct(); // 0x0072CA28-0x0072CA48
		}
	
		// Constructors
		static UnityTls(); // 0x0072C4B8-0x0072CA28
	
		// Methods
		private static IntPtr GetUnityTlsInterface(); // 0x0072C4B4-0x0072C4B8
	}

	internal static class UnityTlsConversions // TypeDefIndex: 1512
	{
		// Methods
		public static MonoSslPolicyErrors VerifyResultToPolicyErrror(UnityTls.unitytls_x509verify_result verifyResult); // 0x00739C44-0x00739D1C
	}

	internal class UnityTlsProvider : MonoTlsProvider // TypeDefIndex: 1513
	{
		// Properties
		public override string Name { get; } // 0x00739D1C-0x00739D78 
		public override Guid ID { get; } // 0x00739D78-0x00739E10 
		public override bool SupportsSslStream { get; } // 0x00739E10-0x00739E18 
		public override bool SupportsMonoExtensions { get; } // 0x00739E18-0x00739E20 
		public override bool SupportsConnectionInfo { get; } // 0x00739E20-0x00739E28 
		internal override bool SupportsCleanShutdown { get; } // 0x00739E28-0x00739E30 
		public override SslProtocols SupportedProtocols { get; } // 0x00739E30-0x00739E38 
	
		// Constructors
		public UnityTlsProvider(); // 0x0073A874-0x0073A87C
	
		// Methods
		public override IMonoSslStream CreateSslStream(Stream innerStream, bool leaveInnerStreamOpen, MonoTlsSettings settings = null); // 0x00739E38-0x00739E68
		internal override IMonoSslStream CreateSslStreamInternal(SslStream sslStream, Stream innerStream, bool leaveInnerStreamOpen, MonoTlsSettings settings); // 0x00739E68-0x00739F00
		internal override bool ValidateCertificate(ICertificateValidator2 validator, string targetHost, bool serverMode, System.Security.Cryptography.X509Certificates.X509CertificateCollection certificates, bool wantsChain, ref X509Chain chain, ref MonoSslPolicyErrors errors, ref int status11); // 0x00739FB0-0x0073A874
	}

	internal class UnityTlsStream : MobileAuthenticatedStream // TypeDefIndex: 1514
	{
		// Constructors
		public UnityTlsStream(Stream innerStream, bool leaveInnerStreamOpen, SslStream owner, MonoTlsSettings settings, MonoTlsProvider provider); // 0x00739F00-0x00739FB0
	}
}

namespace Mono.Net.Security
{
	internal class BufferOffsetSize // TypeDefIndex: 1515
	{
		// Fields
		public byte[] Buffer; // 0x08
		public int Offset; // 0x0C
		public int Size; // 0x10
		public int TotalBytes; // 0x14
		public bool Complete; // 0x18
	
		// Properties
		public int EndOffset { get; } // 0x00728EE4-0x00728EF4 
		public int Remaining { get; } // 0x00728EF4-0x00728F2C 
	
		// Constructors
		public BufferOffsetSize(byte[] buffer, int offset, int size); // 0x00728800-0x0072897C
	
		// Methods
		public override string ToString(); // 0x00728F2C-0x00728FD8
	}

	internal class BufferOffsetSize2 : BufferOffsetSize // TypeDefIndex: 1516
	{
		// Fields
		public readonly int InitialSize; // 0x1C
	
		// Constructors
		public BufferOffsetSize2(int size); // 0x00728FD8-0x00729060
	
		// Methods
		public void Reset(); // 0x00729060-0x007290DC
	}

	internal enum AsyncOperationStatus // TypeDefIndex: 1517
	{
		Initialize = 0,
		Continue = 1,
		ReadDone = 2,
		Complete = 3
	}

	internal class AsyncProtocolResult // TypeDefIndex: 1518
	{
		// Fields
		[CompilerGenerated] // 0x001477D8-0x001477E8
		private readonly int <UserResult>k__BackingField; // 0x08
		[CompilerGenerated] // 0x001477E8-0x001477F8
		private readonly ExceptionDispatchInfo <Error>k__BackingField; // 0x0C
	
		// Properties
		public int UserResult { [CompilerGenerated] /* 0x00147960-0x00147970 */ get; } // 0x00728734-0x0072873C 
		public ExceptionDispatchInfo Error { [CompilerGenerated] /* 0x00147970-0x00147980 */ get; } // 0x0072873C-0x00728744 
	
		// Constructors
		public AsyncProtocolResult(int result); // 0x007284E0-0x00728500
		public AsyncProtocolResult(ExceptionDispatchInfo error); // 0x00728698-0x007286B8
	}

	internal abstract class AsyncProtocolRequest // TypeDefIndex: 1519
	{
		// Fields
		[CompilerGenerated] // 0x001477F8-0x00147808
		private readonly MobileAuthenticatedStream <Parent>k__BackingField; // 0x08
		[CompilerGenerated] // 0x00147808-0x00147818
		private readonly bool <RunSynchronously>k__BackingField; // 0x0C
		[CompilerGenerated] // 0x00147818-0x00147828
		private int <UserResult>k__BackingField; // 0x10
		private int Started; // 0x14
		private int RequestedSize; // 0x18
		private int WriteRequested; // 0x1C
		private readonly object locker; // 0x20
	
		// Properties
		public MobileAuthenticatedStream Parent { [CompilerGenerated] /* 0x00147980-0x00147990 */ get; } // 0x00726E04-0x00726E0C 
		public bool RunSynchronously { [CompilerGenerated] /* 0x00147990-0x001479A0 */ get; } // 0x00726E0C-0x00726E14 
		public string Name { get; } // 0x00726E14-0x00726E50 
		public int UserResult { [CompilerGenerated] /* 0x001479A0-0x001479B0 */ get; [CompilerGenerated] /* 0x001479B0-0x001479C0 */ protected set; } // 0x00726E50-0x00726E58 0x00726E58-0x00726E60
	
		// Nested types
		[CompilerGenerated] // 0x00146FE4-0x00146FF4
		private struct <StartOperation>d__23 : IAsyncStateMachine // TypeDefIndex: 1520
		{
			// Fields
			public int <>1__state; // 0x00
			public AsyncTaskMethodBuilder<AsyncProtocolResult> <>t__builder; // 0x04
			public AsyncProtocolRequest <>4__this; // 0x10
			public CancellationToken cancellationToken; // 0x14
			private ConfiguredTaskAwaitable.ConfiguredTaskAwaiter <>u__1; // 0x18
	
			// Methods
			private void MoveNext(); // 0x007286B8-0x0072872C
			[DebuggerHidden] // 0x00147B28-0x00147B38
			private void SetStateMachine(IAsyncStateMachine stateMachine); // 0x0072872C-0x00728734
		}
	
		[CompilerGenerated] // 0x00146FF4-0x00147004
		private struct <ProcessOperation>d__24 : IAsyncStateMachine // TypeDefIndex: 1521
		{
			// Fields
			public int <>1__state; // 0x00
			public AsyncTaskMethodBuilder <>t__builder; // 0x04
			public CancellationToken cancellationToken; // 0x10
			public AsyncProtocolRequest <>4__this; // 0x14
			private AsyncOperationStatus <status>5__1; // 0x18
			private AsyncOperationStatus <newStatus>5__2; // 0x1C
			private ConfiguredTaskAwaitable<int?> <>u__1; // 0x20
			private ConfiguredTaskAwaitable.ConfiguredTaskAwaiter <>u__2; // 0x28
	
			// Methods
			private void MoveNext(); // 0x00728070-0x00728078
			[DebuggerHidden] // 0x00147B38-0x00147B48
			private void SetStateMachine(IAsyncStateMachine stateMachine); // 0x00728078-0x007284E0
		}
	
		[CompilerGenerated] // 0x00147004-0x00147014
		private struct <InnerRead>d__25 : IAsyncStateMachine // TypeDefIndex: 1522
		{
			// Fields
			public int <>1__state; // 0x00
			public AsyncTaskMethodBuilder<int?> <>t__builder; // 0x04
			public AsyncProtocolRequest <>4__this; // 0x10
			public CancellationToken cancellationToken; // 0x14
			private int <requestedSize>5__1; // 0x18
			private int? <totalRead>5__2; // 0x1C
			private ConfiguredTaskAwaitable<int> <>u__1; // 0x24
	
			// Methods
			private void MoveNext(); // 0x007278F8-0x0072796C
			[DebuggerHidden] // 0x00147B48-0x00147B58
			private void SetStateMachine(IAsyncStateMachine stateMachine); // 0x0072796C-0x00727F3C
		}
	
		// Constructors
		public AsyncProtocolRequest(MobileAuthenticatedStream parent, bool sync); // 0x00726E60-0x00726EEC
	
		// Methods
		internal async Task<AsyncProtocolResult> StartOperation(CancellationToken cancellationToken); // 0x00726EEC-0x00727028
		private async Task ProcessOperation(CancellationToken cancellationToken); // 0x00727028-0x00727158
		private async Task<int?> InnerRead(CancellationToken cancellationToken); // 0x00727158-0x007272A0
		protected abstract AsyncOperationStatus Run(AsyncOperationStatus status);
		public override string ToString(); // 0x007272A0-0x007277A0
	}

	internal abstract class AsyncReadOrWriteRequest : AsyncProtocolRequest // TypeDefIndex: 1523
	{
		// Fields
		[CompilerGenerated] // 0x00147828-0x00147838
		private readonly BufferOffsetSize <UserBuffer>k__BackingField; // 0x24
		[CompilerGenerated] // 0x00147838-0x00147848
		private int <CurrentSize>k__BackingField; // 0x28
	
		// Properties
		protected BufferOffsetSize UserBuffer { [CompilerGenerated] /* 0x00147B58-0x00147B68 */ get; } // 0x00728744-0x0072874C 
		protected int CurrentSize { [CompilerGenerated] /* 0x00147B68-0x00147B78 */ get; [CompilerGenerated] /* 0x00147B78-0x00147B88 */ set; } // 0x0072874C-0x00728754 0x00728754-0x0072875C
	
		// Constructors
		public AsyncReadOrWriteRequest(MobileAuthenticatedStream parent, bool sync, byte[] buffer, int offset, int size); // 0x0072875C-0x00728800
	
		// Methods
		public override string ToString(); // 0x0072897C-0x007289F0
	}

	internal class AsyncReadRequest : AsyncReadOrWriteRequest // TypeDefIndex: 1524
	{
		// Constructors
		public AsyncReadRequest(MobileAuthenticatedStream parent, bool sync, byte[] buffer, int offset, int size); // 0x007289F0-0x00728A14
	
		// Methods
		protected override AsyncOperationStatus Run(AsyncOperationStatus status); // 0x00728A14-0x00728B00
	}

	internal class AsyncWriteRequest : AsyncReadOrWriteRequest // TypeDefIndex: 1525
	{
		// Constructors
		public AsyncWriteRequest(MobileAuthenticatedStream parent, bool sync, byte[] buffer, int offset, int size); // 0x00728C58-0x00728C7C
	
		// Methods
		protected override AsyncOperationStatus Run(AsyncOperationStatus status); // 0x00728C7C-0x00728D8C
	}

	internal abstract class MobileAuthenticatedStream : AuthenticatedStream, IMonoSslStream // TypeDefIndex: 1526
	{
		// Fields
		private MobileTlsContext xobileTlsContext; // 0x1C
		private ExceptionDispatchInfo lastException; // 0x20
		private AsyncProtocolRequest asyncReadRequest; // 0x24
		private AsyncProtocolRequest asyncWriteRequest; // 0x28
		private BufferOffsetSize2 readBuffer; // 0x2C
		private BufferOffsetSize2 writeBuffer; // 0x30
		private object ioLock; // 0x34
		private bool shutdown; // 0x38
		private static int uniqueNameInteger; // 0x00
		[CompilerGenerated] // 0x00147848-0x00147858
		private readonly SslStream <SslStream>k__BackingField; // 0x3C
		[CompilerGenerated] // 0x00147858-0x00147868
		private readonly MonoTlsSettings <Settings>k__BackingField; // 0x40
		[CompilerGenerated] // 0x00147868-0x00147878
		private readonly MonoTlsProvider <Provider>k__BackingField; // 0x44
		private static int nextId; // 0x04
		internal readonly int ID; // 0x48
	
		// Properties
		public override bool IsAuthenticated { get; } // 0x00729B80-0x00729C58 
		public override bool CanRead { get; } // 0x00729F44-0x00729FA8 
		public override bool CanWrite { get; } // 0x00729FA8-0x0072A028 
		public override bool CanSeek { get; } // 0x0072A028-0x0072A030 
		public override long Length { get; } // 0x0072A030-0x0072A06C 
		public override long Position { get; set; } // 0x0072A06C-0x0072A0A8 0x0072A0A8-0x0072A130
	
		// Nested types
		private enum OperationType // TypeDefIndex: 1527
		{
			Read = 0,
			Write = 1,
			Shutdown = 2
		}
	
		[CompilerGenerated] // 0x00147014-0x00147024
		private struct <StartOperation>d__58 : IAsyncStateMachine // TypeDefIndex: 1528
		{
			// Fields
			public int <>1__state; // 0x00
			public AsyncTaskMethodBuilder<int> <>t__builder; // 0x04
			public MobileAuthenticatedStream <>4__this; // 0x10
			public OperationType type; // 0x14
			public AsyncProtocolRequest asyncRequest; // 0x18
			public CancellationToken cancellationToken; // 0x1C
			private ConfiguredTaskAwaitable<AsyncProtocolResult> <>u__1; // 0x20
	
			// Methods
			private void MoveNext(); // 0x0072B61C-0x0072B690
			[DebuggerHidden] // 0x00147D00-0x00147D10
			private void SetStateMachine(IAsyncStateMachine stateMachine); // 0x0072B690-0x0072B698
		}
	
		[CompilerGenerated] // 0x00147024-0x00147034
		private sealed class <>c__DisplayClass66_0 // TypeDefIndex: 1529
		{
			// Fields
			public MobileAuthenticatedStream <>4__this; // 0x08
			public int len; // 0x0C
	
			// Constructors
			public <>c__DisplayClass66_0(); // 0x0072A248-0x0072A250
	
			// Methods
			internal int <InnerRead>b__0(); // 0x0072A250-0x0072A908
		}
	
		[CompilerGenerated] // 0x00147034-0x00147044
		private struct <InnerRead>d__66 : IAsyncStateMachine // TypeDefIndex: 1530
		{
			// Fields
			public int <>1__state; // 0x00
			public AsyncTaskMethodBuilder<int> <>t__builder; // 0x04
			public MobileAuthenticatedStream <>4__this; // 0x10
			public CancellationToken cancellationToken; // 0x14
			public int requestedSize; // 0x18
			public bool sync; // 0x1C
			private ConfiguredTaskAwaitable<int> <>u__1; // 0x20
	
			// Methods
			private void MoveNext(); // 0x0072A908-0x0072A97C
			[DebuggerHidden] // 0x00147D10-0x00147D20
			private void SetStateMachine(IAsyncStateMachine stateMachine); // 0x0072A97C-0x0072ADD0
		}
	
		[CompilerGenerated] // 0x00147044-0x00147054
		private struct <InnerWrite>d__67 : IAsyncStateMachine // TypeDefIndex: 1531
		{
			// Fields
			public int <>1__state; // 0x00
			public AsyncTaskMethodBuilder <>t__builder; // 0x04
			public CancellationToken cancellationToken; // 0x10
			public MobileAuthenticatedStream <>4__this; // 0x14
			public bool sync; // 0x18
			private ConfiguredTaskAwaitable.ConfiguredTaskAwaiter <>u__1; // 0x1C
	
			// Methods
			private void MoveNext(); // 0x0072ADD0-0x0072ADD8
			[DebuggerHidden] // 0x00147D20-0x00147D30
			private void SetStateMachine(IAsyncStateMachine stateMachine); // 0x0072ADD8-0x0072B61C
		}
	
		// Constructors
		public MobileAuthenticatedStream(Stream innerStream, bool leaveInnerStreamOpen, SslStream owner, MonoTlsSettings settings, MonoTlsProvider provider); // 0x007290DC-0x00729214
		static MobileAuthenticatedStream(); // 0x0072A130-0x0072A198
	
		// Methods
		internal void CheckThrow(bool authSuccessCheck, bool shutdownCheck = false /* Metadata: 0x00219313 */); // 0x00729214-0x00729350
		internal static Exception GetSSPIException(Exception e); // 0x00728500-0x00728660
		internal static Exception GetIOException(Exception e, string message); // 0x00729350-0x007294A4
		internal ExceptionDispatchInfo SetException(Exception e); // 0x00728660-0x00728698
		public override IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState); // 0x007294A4-0x00729590
		public override int EndRead(IAsyncResult asyncResult); // 0x007296E8-0x0072974C
		public override IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState); // 0x0072974C-0x00729838
		public override void EndWrite(IAsyncResult asyncResult); // 0x00729838-0x00729844
		public override int Read(byte[] buffer, int offset, int count); // 0x00729844-0x00729944
		public override void Write(byte[] buffer, int offset, int count); // 0x00729944-0x00729A38
		public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken); // 0x00729A38-0x00729ADC
		public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken); // 0x00729ADC-0x00729B80
		private async Task<int> StartOperation(OperationType type, AsyncProtocolRequest asyncRequest, CancellationToken cancellationToken); // 0x00729590-0x007296E8
		internal async Task<int> InnerRead(bool sync, int requestedSize, CancellationToken cancellationToken); // 0x007277A0-0x007278F8
		internal async Task InnerWrite(bool sync, CancellationToken cancellationToken); // 0x00727F3C-0x00728070
		internal ValueTuple<int, bool> ProcessRead(BufferOffsetSize userBuffer); // 0x00728B00-0x00728C58
		internal ValueTuple<int, bool> ProcessWrite(BufferOffsetSize userBuffer); // 0x00728D8C-0x00728EE4
		protected override void Dispose(bool disposing); // 0x00729C58-0x00729DE4
		public override void Flush(); // 0x00729E80-0x00729EBC
		public override long Seek(long offset, SeekOrigin origin); // 0x00729EBC-0x00729F44
		[CompilerGenerated] // 0x00147CF0-0x00147D00
		private void <InnerWrite>b__67_0(); // 0x0072A198-0x0072A248
	}

	internal abstract class MobileTlsContext : IDisposable // TypeDefIndex: 1532
	{
		// Properties
		public abstract bool IsAuthenticated { get; }
	
		// Methods
		public abstract ValueTuple<int, bool> Read(byte[] buffer, int offset, int count);
		public abstract ValueTuple<int, bool> Write(byte[] buffer, int offset, int count);
		public void Dispose(); // 0x00729DE4-0x00729E80
		protected virtual void Dispose(bool disposing); // 0x0072B698-0x0072B69C
		~MobileTlsContext(); // 0x0072B69C-0x0072B714
	}

	internal static class MonoTlsProviderFactory // TypeDefIndex: 1533
	{
		// Fields
		private static object locker; // 0x00
		internal static readonly Guid UnityTlsId; // 0x04
		internal static readonly Guid AppleTlsId; // 0x14
		internal static readonly Guid BtlsId; // 0x24
		internal static readonly Guid LegacyId; // 0x34
	
		// Constructors
		static MonoTlsProviderFactory(); // 0x0072B714-0x0072B88C
	}

	internal static class SystemCertificateValidator // TypeDefIndex: 1534
	{
		// Fields
		private static bool is_macosx; // 0x00
		private static X509KeyUsageFlags s_flags; // 0x04
	
		// Constructors
		static SystemCertificateValidator(); // 0x0072B88C-0x0072B958
	
		// Methods
		public static X509Chain CreateX509Chain(System.Security.Cryptography.X509Certificates.X509CertificateCollection certs); // 0x0072B958-0x0072BAB4
	}
}

namespace System
{
	internal static class IriHelper // TypeDefIndex: 1535
	{
		// Methods
		internal static bool CheckIriUnicodeRange(char unicode, bool isQuery); // 0x007424AC-0x0074250C
		internal static bool CheckIriUnicodeRange(char highSurr, char lowSurr, ref bool surrogatePair, bool isQuery); // 0x0074250C-0x00742AD8
		internal static bool CheckIsReserved(char ch, UriComponents component); // 0x00742AD8-0x00742C40
		internal static unsafe string EscapeUnescapeIri(char* pInput, int start, int end, UriComponents component); // 0x00742C40-0x00743744
	}

	[Serializable]
	[TypeConverter] // 0x00147054-0x001470CC
	public class Uri : ISerializable // TypeDefIndex: 1536
	{
		// Fields
		public static readonly string UriSchemeFile; // 0x00
		public static readonly string UriSchemeFtp; // 0x04
		public static readonly string UriSchemeGopher; // 0x08
		public static readonly string UriSchemeHttp; // 0x0C
		public static readonly string UriSchemeHttps; // 0x10
		internal static readonly string UriSchemeWs; // 0x14
		internal static readonly string UriSchemeWss; // 0x18
		public static readonly string UriSchemeMailto; // 0x1C
		public static readonly string UriSchemeNews; // 0x20
		public static readonly string UriSchemeNntp; // 0x24
		public static readonly string UriSchemeNetTcp; // 0x28
		public static readonly string UriSchemeNetPipe; // 0x2C
		public static readonly string SchemeDelimiter; // 0x30
		private const int c_Max16BitUtf8SequenceLength = 12; // Metadata: 0x00219320
		internal const int c_MaxUriBufferSize = 65520; // Metadata: 0x00219324
		private const int c_MaxUriSchemeName = 1024; // Metadata: 0x00219328
		private string m_String; // 0x08
		private string m_originalUnicodeString; // 0x0C
		private UriParser m_Syntax; // 0x10
		private string m_DnsSafeHost; // 0x14
		private Flags m_Flags; // 0x18
		private UriInfo m_Info; // 0x20
		private bool m_iriParsing; // 0x24
		private static bool s_ConfigInitialized; // 0x34
		private static bool s_ConfigInitializing; // 0x35
		private static UriIdnScope s_IdnScope; // 0x38
		private static bool s_IriParsing; // 0x3C
		private static bool useDotNetRelativeOrAbsolute; // 0x3D
		private const UriKind DotNetRelativeOrAbsolute = (UriKind) 300; // Metadata: 0x0021932C
		internal static readonly bool IsWindowsFileSystem; // 0x3E
		private static object s_initLock; // 0x40
		private const UriFormat V1ToStringUnescape = (UriFormat) 32767; // Metadata: 0x00219330
		internal const char c_DummyChar = '\xffff'; // Metadata: 0x00219334
		internal const char c_EOL = '\xfffe'; // Metadata: 0x00219336
		internal static readonly char[] HexLowerChars; // 0x44
		private static readonly char[] _WSchars; // 0x48
	
		// Properties
		private bool IsImplicitFile { get; } // 0x003671E4-0x003671F0 
		private bool IsUncOrDosPath { get; } // 0x003671F0-0x00367200 
		private bool IsDosPath { get; } // 0x00367200-0x0036720C 
		private bool IsUncPath { get; } // 0x0036720C-0x00367218 
		private Flags HostType { get; } // 0x00367218-0x00367228 
		private UriParser Syntax { get; } // 0x00367228-0x00367230 
		private bool IsNotAbsoluteUri { get; } // 0x00367230-0x00367244 
		private bool AllowIdn { get; } // 0x00367320-0x00367448 
		internal bool UserDrivenParsing { get; } // 0x003675D8-0x003675E4 
		private ushort SecuredPathIndex { get; } // 0x003675FC-0x00367670 
		public string AbsolutePath { get; } // 0x0036C448-0x0036C56C 
		private string PrivateAbsolutePath { get; } // 0x0036C56C-0x0036C66C 
		public string AbsoluteUri { get; } // 0x0036C66C-0x0036C7DC 
		public bool IsFile { get; } // 0x0036C7DC-0x0036C8F8 
		public bool IsLoopback { get; } // 0x0036C8F8-0x0036C9C8 
		public string PathAndQuery { get; } // 0x0036C9C8-0x0036CAF4 
		public bool IsUnc { get; } // 0x0036CAF4-0x0036CBB4 
		private static object InitializeLock { get; } // 0x0036CBE4-0x0036CD30 
		public int Port { get; } // 0x0036CFA0-0x0036D0F0 
		public string Fragment { get; } // 0x0036D0F0-0x0036D264 
		public string Scheme { get; } // 0x0036D264-0x0036D328 
		private bool OriginalStringSwitched { get; } // 0x0036D328-0x0036D378 
		public string OriginalString { get; } // 0x0036AE68-0x0036AE8C 
		public string DnsSafeHost { get; } // 0x0036D378-0x0036D700 
		public bool IsAbsoluteUri { get; } // 0x00369C00-0x00369C10 
		public bool UserEscaped { get; } // 0x0036D700-0x0036D70C 
	
		// Nested types
		[Flags] // 0x001470CC-0x001470DC
		private enum Flags : ulong // TypeDefIndex: 1537
		{
			Zero = 0,
			HostNotParsed = 0,
			SchemeNotCanonical = 1,
			UserNotCanonical = 2,
			HostNotCanonical = 4,
			PortNotCanonical = 8,
			PathNotCanonical = 16,
			QueryNotCanonical = 32,
			FragmentNotCanonical = 64,
			CannotDisplayCanonical = 127,
			E_UserNotCanonical = 128,
			E_HostNotCanonical = 256,
			E_PortNotCanonical = 512,
			E_PathNotCanonical = 1024,
			E_QueryNotCanonical = 2048,
			E_FragmentNotCanonical = 4096,
			E_CannotDisplayCanonical = 8064,
			ShouldBeCompressed = 8192,
			FirstSlashAbsent = 16384,
			BackslashInPath = 32768,
			IndexMask = 65535,
			IPv6HostType = 65536,
			IPv4HostType = 131072,
			DnsHostType = 196608,
			UncHostType = 262144,
			BasicHostType = 327680,
			UnusedHostType = 393216,
			HostTypeMask = 458752,
			UnknownHostType = 458752,
			UserEscaped = 524288,
			AuthorityFound = 1048576,
			HasUserInfo = 2097152,
			LoopbackHost = 4194304,
			NotDefaultPort = 8388608,
			UserDrivenParsing = 16777216,
			CanonicalDnsHost = 33554432,
			ErrorOrParsingRecursion = 67108864,
			DosPath = 134217728,
			UncPath = 268435456,
			ImplicitFile = 536870912,
			MinimalUriInfoSet = 1073741824,
			AllUriInfoSet = 2147483648,
			IdnHost = 4294967296,
			HasUnicode = 8589934592,
			HostUnicodeNormalized = 17179869184,
			RestUnicodeNormalized = 34359738368,
			UnicodeHost = 68719476736,
			IntranetUri = 137438953472,
			UseOrigUncdStrOffset = 274877906944,
			UserIriCanonical = 549755813888,
			PathIriCanonical = 1099511627776,
			QueryIriCanonical = 2199023255552,
			FragmentIriCanonical = 4398046511104,
			IriCanonical = 8246337208320,
			CompressedSlashes = 17592186044416
		}
	
		private class UriInfo // TypeDefIndex: 1538
		{
			// Fields
			public string Host; // 0x08
			public string ScopeId; // 0x0C
			public string String; // 0x10
			public Offset Offset; // 0x14
			public string DnsSafeHost; // 0x24
			public MoreInfo MoreInfo; // 0x28
	
			// Constructors
			public UriInfo(); // 0x00B1D6BC-0x00B1D6C4
		}
	
		private struct Offset // TypeDefIndex: 1539
		{
			// Fields
			public ushort Scheme; // 0x00
			public ushort User; // 0x02
			public ushort Host; // 0x04
			public ushort PortValue; // 0x06
			public ushort Path; // 0x08
			public ushort Query; // 0x0A
			public ushort Fragment; // 0x0C
			public ushort End; // 0x0E
		}
	
		private class MoreInfo // TypeDefIndex: 1540
		{
			// Fields
			public string Path; // 0x08
			public string Fragment; // 0x0C
			public string AbsoluteUri; // 0x10
			public int Hash; // 0x14
			public string RemoteUrl; // 0x18
	
			// Constructors
			public MoreInfo(); // 0x00B1D6B4-0x00B1D6BC
		}
	
		[Flags] // 0x001470DC-0x001470EC
		private enum Check // TypeDefIndex: 1541
		{
			None = 0,
			EscapedCanonical = 1,
			DisplayCanonical = 2,
			DotSlashAttn = 4,
			FoundNonAscii = 8,
			BackslashInPath = 16,
			ReservedFound = 32,
			NotIriCanonical = 64,
			DotSlashEscaped = 128
		}
	
		// Constructors
		public Uri(string uriString); // 0x00369724-0x003697FC
		public Uri(string uriString, UriKind uriKind); // 0x003699F8-0x00369AD4
		public Uri(Uri baseUri, string relativeUri); // 0x00369AD4-0x00369C00
		public Uri(Uri baseUri, Uri relativeUri); // 0x0036A6EC-0x0036A9B0
		protected Uri(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x0036C1A4-0x0036C310
		private Uri(Flags flags, UriParser uriParser, string uri); // 0x00378C58-0x00378C90
		static Uri(); // 0x00378C90-0x00379234
	
		// Methods
		internal static bool IriParsingStatic(UriParser syntax); // 0x00367244-0x00367320
		private bool AllowIdnStatic(UriParser syntax, Flags flags); // 0x00367464-0x003675B8
		private bool IsIntranet(string schemeHost); // 0x003675D0-0x003675D8
		private void SetUserDrivenParsing(); // 0x003675E4-0x003675FC
		private bool NotAny(Flags flags); // 0x00367448-0x00367464
		private bool InFact(Flags flags); // 0x00367670-0x00367688
		private static bool StaticNotAny(Flags allFlags, Flags checkFlags); // 0x003675B8-0x003675D0
		private static bool StaticInFact(Flags allFlags, Flags checkFlags); // 0x00367688-0x0036769C
		private UriInfo EnsureUriInfo(); // 0x0036769C-0x003676D0
		private void EnsureParseRemaining(); // 0x00367EF8-0x00367F08
		private void EnsureHostString(bool allowDnsOptimization); // 0x003690B4-0x00369130
		private void CreateUri(Uri baseUri, string relativeUri, bool dontEscape); // 0x00369C10-0x00369E1C
		private static ParsingError GetCombinedString(Uri baseUri, string relativeStr, bool dontEscape, ref string result); // 0x0036A9B0-0x0036ACF8
		private static UriFormatException GetException(ParsingError err); // 0x0036BEB4-0x0036C1A4
		void ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x0036C310-0x0036C328
		protected void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x0036C328-0x0036C444
		private static bool StaticIsFile(UriParser syntax); // 0x0036CBB4-0x0036CBE4
		private static void InitializeUriConfig(); // 0x0036CD30-0x0036CFA0
		internal static bool IsGenDelim(char ch); // 0x0036D70C-0x0036D75C
		public static bool IsHexDigit(char character); // 0x0036D75C-0x0036D798
		public static int FromHex(char digit); // 0x0036D798-0x0036D880
		public override int GetHashCode(); // 0x0036D880-0x0036DA44
		public override string ToString(); // 0x0036DAF0-0x0036DC04
		public static bool operator ==(Uri uri1, Uri uri2); // 0x0036DE64-0x0036DEA0
		public static bool operator !=(Uri uri1, Uri uri2); // 0x0036A52C-0x0036A578
		public override bool Equals(object comparand); // 0x0036DEA0-0x0036E864
		private static bool CheckForColonInFirstPathSegment(string uriString); // 0x0036E970-0x0036EA54
		private static ParsingError ParseScheme(string uriString, ref Flags flags, ref UriParser syntax); // 0x0036EA54-0x0036EB78
		internal UriFormatException ParseMinimal(); // 0x0036F144-0x0036F1EC
		private ParsingError PrivateParseMinimal(); // 0x0036F1EC-0x0036FAB0
		private void PrivateParseMinimalIri(string newHost, ushort idx); // 0x00370E24-0x00370F70
		private void CreateUriInfo(Flags cF); // 0x003676D0-0x00367EF8
		private void CreateHostString(); // 0x00369130-0x00369724
		private static string CreateHostStringHelper(string str, ushort idx, ushort end, ref Flags flags, ref string scopeId); // 0x003715C0-0x00371808
		private void GetHostViaCustomSyntax(); // 0x00370F70-0x003715C0
		internal string GetParts(UriComponents uriParts, UriFormat formatAs); // 0x0036C444-0x0036C448
		private string GetEscapedParts(UriComponents uriParts); // 0x00371EF0-0x00371FC8
		private string GetUnescapedParts(UriComponents uriParts, UriFormat formatAs); // 0x003745E4-0x003746BC
		private string ReCreateParts(UriComponents parts, ushort nonCanonical, UriFormat formatAs); // 0x00372E50-0x003745E4
		private string GetUriPartsFromUserString(UriComponents uriParts); // 0x00371FC8-0x00372E50
		private void ParseRemaining(); // 0x00367F08-0x003690B4
		private static unsafe ushort ParseSchemeCheckImplicitFile(char* uriString, ushort length, ref ParsingError err, ref Flags flags, ref UriParser syntax); // 0x0036EB78-0x0036F144
		private static unsafe bool CheckKnownSchemes(long* lptr, ushort nChars, ref UriParser syntax); // 0x00375258-0x0037598C
		private static unsafe ParsingError CheckSchemeSyntax(char* ptr, ushort length, ref UriParser syntax); // 0x0036ACF8-0x0036AE68
		private unsafe ushort CheckAuthorityHelper(char* pString, ushort idx, ushort length, ref ParsingError err, ref Flags flags, UriParser syntax, ref string newHost); // 0x0036FB14-0x00370E24
		private unsafe void CheckAuthorityHelperHandleDnsIri(char* pString, ushort start, int end, int startInput, bool iriParsing, bool hasUnicode, UriParser syntax, string userInfoString, ref Flags flags, ref bool justNormalized, ref string newHost, ref ParsingError err); // 0x0037598C-0x00375E34
		private unsafe void CheckAuthorityHelperHandleAnyHostIri(char* pString, int startInput, int end, bool iriParsing, bool hasUnicode, UriParser syntax, ref Flags flags, ref string newHost, ref ParsingError err); // 0x00375E34-0x003761B0
		private void FindEndOfComponent(string input, ref ushort idx, ushort end, char delim); // 0x003751B0-0x00375204
		private unsafe void FindEndOfComponent(char* str, ref ushort idx, ushort end, char delim); // 0x00376330-0x003763C0
		private unsafe Check CheckCanonical(char* str, ref ushort idx, ushort end, char delim); // 0x00371808-0x00371CB8
		private char[] GetCanonicalPath(char[] dest, ref int pos, UriFormat formatAs); // 0x003746BC-0x003751B0
		private static unsafe void UnescapeOnly(char* pch, int start, ref int end, char ch1, char ch2, char ch3); // 0x003763C0-0x003765F0
		private static char[] Compress(char[] dest, ushort start, ref int destLength, UriParser syntax); // 0x003765F0-0x00376C28
		internal static int CalculateCaseInsensitiveHashCode(string text); // 0x0036DA44-0x0036DAF0
		private static string CombineUri(Uri basePart, string relativePart, UriFormat uriFormat); // 0x0036AE8C-0x0036BEB4
		private static bool IsLWS(char ch); // 0x0036FAB0-0x0036FAE8
		private static bool IsAsciiLetter(char character); // 0x0036FAE8-0x0036FB14
		internal static bool IsAsciiLetterOrDigit(char character); // 0x00376C28-0x00376CD0
		internal static bool IsBidiControlCharacter(char ch); // 0x00376CD0-0x00376D10
		internal static unsafe string StripBidiControlCharacter(char* strToClean, int start, int length); // 0x003761B0-0x00376330
		private void CreateThis(string uri, bool dontEscape, UriKind uriKind); // 0x003697FC-0x003699F8
		private void InitializeUri(ParsingError err, UriKind uriKind, out UriFormatException e); // 0x00376D10-0x00377490
		private bool CheckForConfigLoad(string data); // 0x00377490-0x0037754C
		private bool CheckForUnicode(string data); // 0x0037754C-0x003776E8
		private bool CheckForEscapedUnreserved(string data); // 0x003776E8-0x00377910
		public static bool TryCreate(string uriString, UriKind uriKind, out Uri result); // 0x0036E864-0x0036E970
		public string GetComponents(UriComponents components, UriFormat format); // 0x00371CB8-0x00371EF0
		public bool IsWellFormedOriginalString(); // 0x00377F34-0x00377F90
		public static bool IsWellFormedUriString(string uriString, UriKind uriKind); // 0x0037863C-0x0037870C
		internal bool InternalIsWellFormedOriginalString(); // 0x00377F90-0x0037863C
		public static string UnescapeDataString(string stringToUnescape); // 0x0037870C-0x00378938
		public static string EscapeUriString(string stringToEscape); // 0x00378938-0x00378ACC
		public static string EscapeDataString(string stringToEscape); // 0x00378ACC-0x00378C58
		internal string EscapeUnescapeIri(string input, int start, int end, UriComponents component); // 0x00375204-0x00375258
		internal static Uri CreateHelper(string uriString, bool dontEscape, UriKind uriKind, ref UriFormatException e); // 0x00377910-0x00377C08
		internal static Uri ResolveHelper(Uri baseUri, Uri relativeUri, ref string newUriString, ref bool userEscaped, out UriFormatException e); // 0x00369E1C-0x0036A52C
		private string GetRelativeSerializationString(UriFormat format); // 0x00377C08-0x00377F34
		internal string GetComponentsHelper(UriComponents uriComponents, UriFormat uriFormat); // 0x0036DC04-0x0036DE64
		private void CreateThisFromUri(Uri otherUri); // 0x0036A578-0x0036A6EC
	}

	[Serializable]
	public class UriFormatException : FormatException, ISerializable // TypeDefIndex: 1542
	{
		// Constructors
		public UriFormatException(); // 0x00B1D6C4-0x00B1D6CC
		public UriFormatException(string textString); // 0x00B1D6CC-0x00B1D6D4
		protected UriFormatException(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x00B1D6D4-0x00B1D6F4
	
		// Methods
		void ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x00B1D6F4-0x00B1D714
	}

	public enum UriKind // TypeDefIndex: 1543
	{
		RelativeOrAbsolute = 0,
		Absolute = 1,
		Relative = 2
	}

	[Flags] // 0x001470EC-0x001470FC
	public enum UriComponents // TypeDefIndex: 1544
	{
		SerializationInfoString = -2147483648,
		Scheme = 1,
		UserInfo = 2,
		Host = 4,
		Port = 8,
		SchemeAndServer = 13,
		Path = 16,
		Query = 32,
		PathAndQuery = 48,
		HttpRequestUrl = 61,
		Fragment = 64,
		AbsoluteUri = 127,
		StrongPort = 128,
		HostAndPort = 132,
		StrongAuthority = 134,
		NormalizedHost = 256,
		KeepDelimiter = 1073741824
	}

	public enum UriFormat // TypeDefIndex: 1545
	{
		UriEscaped = 1,
		Unescaped = 2,
		SafeUnescaped = 3
	}

	public enum UriIdnScope // TypeDefIndex: 1546
	{
		None = 0,
		AllExceptIntranet = 1,
		All = 2
	}

	internal enum ParsingError // TypeDefIndex: 1547
	{
		None = 0,
		BadFormat = 1,
		BadScheme = 2,
		BadAuthority = 3,
		EmptyUriString = 4,
		LastRelativeUriOkErrIndex = 4,
		SchemeLimit = 5,
		SizeLimit = 6,
		MustRootedPath = 7,
		BadHostName = 8,
		NonEmptyHost = 9,
		BadPort = 10,
		BadAuthorityTerminator = 11,
		CannotCreateRelative = 12
	}

	[Flags] // 0x001470FC-0x0014710C
	internal enum UnescapeMode // TypeDefIndex: 1548
	{
		CopyOnly = 0,
		Escape = 1,
		Unescape = 2,
		EscapeUnescape = 3,
		V1ToStringFlag = 4,
		UnescapeAll = 8,
		UnescapeAllOrThrow = 24
	}

	internal static class UriHelper // TypeDefIndex: 1549
	{
		// Fields
		private static readonly char[] HexUpperChars; // 0x00
	
		// Constructors
		static UriHelper(); // 0x00B1FAEC-0x00B1FB84
	
		// Methods
		internal static char[] EscapeString(string input, int start, int end, char[] dest, ref int destPos, bool isUriString, char force1, char force2, char rsvd); // 0x00B1D714-0x00B1DEC0
		private static unsafe char[] EnsureDestinationSize(char* pStr, char[] dest, int currentInputPos, short charsToAdd, short minReallocateChars, ref int destPos, int prevInputPos); // 0x00B1DEC0-0x00B1E010
		internal static char[] UnescapeString(string input, int start, int end, char[] dest, ref int destPosition, char rsvd1, char rsvd2, char rsvd3, UnescapeMode unescapeMode, UriParser syntax, bool isQuery); // 0x00B1E520-0x00B1E610
		internal static unsafe char[] UnescapeString(char* pStr, int start, int end, char[] dest, ref int destPosition, char rsvd1, char rsvd2, char rsvd3, UnescapeMode unescapeMode, UriParser syntax, bool isQuery); // 0x00B1E610-0x00B1F228
		internal static unsafe void MatchUTF8Sequence(char* pDest, char[] dest, ref int destOffset, char[] unescapedChars, int charCount, byte[] bytes, int byteCount, bool isQuery, bool iriParsing); // 0x00B1F2B0-0x00B1F978
		internal static void EscapeAsciiChar(char ch, char[] to, ref int pos); // 0x00B1E010-0x00B1E1D4
		internal static char EscapedAscii(char digit, char next); // 0x00B1E1D4-0x00B1E270
		internal static bool IsNotSafeForUnescape(char ch); // 0x00B1F228-0x00B1F2B0
		private static bool IsReservedUnreservedOrHash(char c); // 0x00B1E3B4-0x00B1E520
		internal static bool IsUnreserved(char c); // 0x00B1E270-0x00B1E3B4
		internal static bool Is3986Unreserved(char c); // 0x00B1FA10-0x00B1FAEC
	}

	public abstract class UriParser // TypeDefIndex: 1550
	{
		// Fields
		private static readonly Dictionary<string, UriParser> m_Table; // 0x00
		private static Dictionary<string, UriParser> m_TempTable; // 0x04
		private UriSyntaxFlags m_Flags; // 0x08
		private UriSyntaxFlags m_UpdatableFlags; // 0x0C
		private bool m_UpdatableFlagsUsed; // 0x10
		private int m_Port; // 0x14
		private string m_Scheme; // 0x18
		internal static UriParser HttpUri; // 0x08
		internal static UriParser HttpsUri; // 0x0C
		internal static UriParser WsUri; // 0x10
		internal static UriParser WssUri; // 0x14
		internal static UriParser FtpUri; // 0x18
		internal static UriParser FileUri; // 0x1C
		internal static UriParser GopherUri; // 0x20
		internal static UriParser NntpUri; // 0x24
		internal static UriParser NewsUri; // 0x28
		internal static UriParser MailToUri; // 0x2C
		internal static UriParser UuidUri; // 0x30
		internal static UriParser TelnetUri; // 0x34
		internal static UriParser LdapUri; // 0x38
		internal static UriParser NetTcpUri; // 0x3C
		internal static UriParser NetPipeUri; // 0x40
		internal static UriParser VsMacrosUri; // 0x44
		private static readonly UriQuirksVersion s_QuirksVersion; // 0x48
		private static readonly UriSyntaxFlags HttpSyntaxFlags; // 0x4C
		private static readonly UriSyntaxFlags FileSyntaxFlags; // 0x50
	
		// Properties
		internal string SchemeName { get; } // 0x00B1FB84-0x00B1FB8C 
		internal int DefaultPort { get; } // 0x00B1FB8C-0x00B1FB94 
		internal static bool ShouldUseLegacyV2Quirks { get; } // 0x00B1F978-0x00B1FA10 
		internal UriSyntaxFlags Flags { get; } // 0x00B20FE4-0x00B20FEC 
		internal bool IsSimple { get; } // 0x00B214C4-0x00B214D0 
	
		// Nested types
		private enum UriQuirksVersion // TypeDefIndex: 1551
		{
			V2 = 2,
			V3 = 3
		}
	
		private class BuiltInUriParser : UriParser // TypeDefIndex: 1552
		{
			// Constructors
			internal BuiltInUriParser(string lwrCaseScheme, int defaultPort, UriSyntaxFlags syntaxFlags); // 0x00B20F4C-0x00B20FE4
		}
	
		// Constructors
		static UriParser(); // 0x00B2019C-0x00B20F4C
		internal UriParser(UriSyntaxFlags flags); // 0x00B21070-0x00B210EC
	
		// Methods
		protected virtual UriParser OnNewUri(); // 0x00B1FB94-0x00B1FB98
		protected virtual void InitializeAndValidate(Uri uri, out UriFormatException parsingError); // 0x00B1FB98-0x00B1FBCC
		protected virtual string Resolve(Uri baseUri, Uri relativeUri, out UriFormatException parsingError); // 0x00B1FBCC-0x00B1FE80
		protected virtual string GetComponents(Uri uri, UriComponents components, UriFormat format); // 0x00B1FE80-0x00B20170
		protected virtual bool IsWellFormedOriginalString(Uri uri); // 0x00B20170-0x00B2019C
		internal bool NotAny(UriSyntaxFlags flags); // 0x00B20FEC-0x00B20FF4
		internal bool InFact(UriSyntaxFlags flags); // 0x00B21050-0x00B21068
		internal bool IsAllSet(UriSyntaxFlags flags); // 0x00B21068-0x00B21070
		private bool IsFullMatch(UriSyntaxFlags flags, UriSyntaxFlags expected); // 0x00B20FF4-0x00B21050
		internal static UriParser FindOrFetchAsUnknownV1Syntax(string lwrCaseScheme); // 0x00B210EC-0x00B214C4
		internal UriParser InternalOnNewUri(); // 0x00B214D0-0x00B21558
		internal void InternalValidate(Uri thisUri, out UriFormatException parsingError); // 0x00B21558-0x00B21568
		internal string InternalResolve(Uri thisBaseUri, Uri uriLink, out UriFormatException parsingError); // 0x00B21568-0x00B21590
		internal string InternalGetComponents(Uri thisUri, UriComponents uriComponents, UriFormat uriFormat); // 0x00B21590-0x00B215B8
		internal bool InternalIsWellFormedOriginalString(Uri thisUri); // 0x00B215B8-0x00B215C8
	}

	internal class DomainNameHelper // TypeDefIndex: 1553
	{
		// Methods
		internal static string ParseCanonicalName(string str, int start, int end, ref bool loopback); // 0x0073E208-0x0073E408
		internal static unsafe bool IsValid(char* name, ushort pos, ref int returnedEnd, ref bool notCanonical, bool notImplicitFile); // 0x0073E408-0x0073E588
		internal static unsafe bool IsValidByIri(char* name, ushort pos, ref int returnedEnd, ref bool notCanonical, bool notImplicitFile); // 0x0073E618-0x0073E81C
		internal static unsafe string IdnEquivalent(char* hostname, int start, int end, ref bool allAscii, ref bool atLeastOneValidIdn); // 0x0073E81C-0x0073EAF4
		internal static unsafe string IdnEquivalent(char* hostname, int start, int end, ref bool allAscii, ref string bidiStrippedHost); // 0x0073EAF4-0x0073ED38
		private static bool IsIdnAce(string input, int index); // 0x0073ED80-0x0073EE44
		private static unsafe bool IsIdnAce(char* input, int index); // 0x0073ED38-0x0073ED80
		internal static unsafe string UnicodeEquivalent(string idnHost, char* hostname, int start, int end); // 0x0073EE44-0x0073EF94
		internal static unsafe string UnicodeEquivalent(char* hostname, int start, int end, ref bool allAscii, ref bool atLeastOneValidIdn); // 0x0073EF94-0x0073F52C
		private static bool IsASCIILetterOrDigit(char character, ref bool notCanonical); // 0x0073E588-0x0073E5C8
		private static bool IsValidDomainLabelCharacter(char character, ref bool notCanonical); // 0x0073E5C8-0x0073E618
	}

	internal static class IPv4AddressHelper // TypeDefIndex: 1554
	{
		// Methods
		internal static string ParseCanonicalName(string str, int start, int end, ref bool isLoopback); // 0x00740118-0x00740504
		internal static int ParseHostNumber(string str, int start, int end); // 0x00740588-0x007405D4
		internal static unsafe bool IsValid(char* name, int start, ref int end, bool allowIPv6, bool notImplicitFile, bool unknownScheme); // 0x00740670-0x007406C4
		internal static unsafe bool IsValidCanonical(char* name, int start, ref int end, bool allowIPv6, bool notImplicitFile); // 0x007406C4-0x00740834
		internal static unsafe long ParseNonCanonical(char* name, int start, ref int end, bool notImplicitFile); // 0x00740834-0x00740E1C
		private static unsafe bool Parse(string name, byte* numbers, int start, int end); // 0x00740504-0x00740588
		private static unsafe bool ParseCanonical(string name, byte* numbers, int start, int end); // 0x007405D4-0x00740670
	}

	internal static class IPv6AddressHelper // TypeDefIndex: 1555
	{
		// Methods
		internal static string ParseCanonicalName(string str, int start, ref bool isLoopback, ref string scopeId); // 0x00740E1C-0x00740EEC
		internal static unsafe string CreateCanonicalName(ushort* numbers); // 0x00741558-0x00741F50
		private static unsafe KeyValuePair<int, int> FindCompressionRange(ushort* numbers); // 0x00741F50-0x00742054
		private static unsafe bool ShouldHaveIpv4Embedded(ushort* numbers); // 0x00742054-0x00742100
		private static unsafe bool InternalIsValid(char* name, int start, ref int end, bool validateStrictAddress); // 0x00742100-0x00742474
		internal static unsafe bool IsValid(char* name, int start, ref int end); // 0x00742474-0x00742490
		internal static unsafe bool IsValidStrict(char* name, int start, ref int end); // 0x00742490-0x007424AC
		internal static unsafe bool Parse(string address, ushort* numbers, int start, ref string scopeId); // 0x00740EEC-0x00741558
	}

	internal class UncNameHelper // TypeDefIndex: 1556
	{
		// Methods
		internal static string ParseCanonicalName(string str, int start, int end, ref bool loopback); // 0x00366E7C-0x00366E9C
		internal static unsafe bool IsValid(char* name, ushort start, ref int returnedEnd, bool notImplicitFile); // 0x00366E9C-0x003671E4
	}

	[Flags] // 0x0014710C-0x0014711C
	internal enum UriSyntaxFlags // TypeDefIndex: 1557
	{
		None = 0,
		MustHaveAuthority = 1,
		OptionalAuthority = 2,
		MayHaveUserInfo = 4,
		MayHavePort = 8,
		MayHavePath = 16,
		MayHaveQuery = 32,
		MayHaveFragment = 64,
		AllowEmptyHost = 128,
		AllowUncHost = 256,
		AllowDnsHost = 512,
		AllowIPv4Host = 1024,
		AllowIPv6Host = 2048,
		AllowAnInternetHost = 3584,
		AllowAnyOtherHost = 4096,
		FileLikeUri = 8192,
		MailToLikeUri = 16384,
		V1_UnknownUri = 65536,
		SimpleUserSyntax = 131072,
		BuiltInSyntax = 262144,
		ParserSchemeOnly = 524288,
		AllowDOSPath = 1048576,
		PathIsRooted = 2097152,
		ConvertPathSlashes = 4194304,
		CompressPath = 8388608,
		CanonicalizeAsFilePath = 16777216,
		UnEscapeDotsAndSlashes = 33554432,
		AllowIdn = 67108864,
		AllowIriParsing = 268435456
	}

	internal enum IOOperation // TypeDefIndex: 1558
	{
		Read = 1,
		Write = 2
	}

	internal delegate void IOAsyncCallback(IOAsyncResult ioares); // TypeDefIndex: 1559; 0x0073F540-0x0073FD68

	internal abstract class IOAsyncResult : IAsyncResult // TypeDefIndex: 1560
	{
		// Fields
		private AsyncCallback async_callback; // 0x08
		private object async_state; // 0x0C
		private ManualResetEvent wait_handle; // 0x10
		private bool completed_synchronously; // 0x14
		private bool completed; // 0x15
	
		// Properties
		public AsyncCallback AsyncCallback { get; } // 0x0073FE24-0x0073FE2C 
		public object AsyncState { get; } // 0x0073FE2C-0x0073FE34 
		public WaitHandle AsyncWaitHandle { get; } // 0x0073FE34-0x0073FF54 
		public bool CompletedSynchronously { get; protected set; } // 0x0073FF54-0x0073FF5C 0x0073FF5C-0x0073FF64
		public bool IsCompleted { get; protected set; } // 0x0073FF64-0x0073FF6C 0x0073FF6C-0x00740020
	
		// Constructors
		protected IOAsyncResult(AsyncCallback async_callback, object async_state); // 0x0073FDFC-0x0073FE24
	
		// Methods
		internal abstract void CompleteDisposed();
	}

	internal class IOSelectorJob : IThreadPoolWorkItem // TypeDefIndex: 1561
	{
		// Fields
		private IOOperation operation; // 0x08
		private IOAsyncCallback callback; // 0x0C
		private IOAsyncResult state; // 0x10
	
		// Constructors
		public IOSelectorJob(IOOperation operation, IOAsyncCallback callback, IOAsyncResult state); // 0x00740080-0x007400B0
	
		// Methods
		void IThreadPoolWorkItem.ExecuteWorkItem(); // 0x007400B0-0x007400E0
		void IThreadPoolWorkItem.MarkAborted(ThreadAbortException tae); // 0x007400E0-0x007400E4
		public void MarkDisposed(); // 0x007400E4-0x00740118
	}

	internal static class IOSelector // TypeDefIndex: 1562
	{
		// Methods
		public static void Add(IntPtr handle, IOSelectorJob job); // 0x00740020-0x00740080
	}

	public class UriTypeConverter : TypeConverter // TypeDefIndex: 1563
	{
		// Constructors
		public UriTypeConverter(); // 0x00B215C8-0x00B2164C
	}
}

namespace System.Text.RegularExpressions
{
	[Serializable]
	public class Regex : ISerializable // TypeDefIndex: 1564
	{
		// Fields
		protected internal string pattern; // 0x08
		protected internal RegexRunnerFactory factory; // 0x0C
		protected internal RegexOptions roptions; // 0x10
		[NonSerialized]
		private static readonly TimeSpan MaximumMatchTimeout; // 0x00
		[NonSerialized]
		public static readonly TimeSpan InfiniteMatchTimeout; // 0x08
		[OptionalField] // 0x00147878-0x001478A8
		protected internal TimeSpan internalMatchTimeout; // 0x18
		[NonSerialized]
		internal static readonly TimeSpan FallbackDefaultMatchTimeout; // 0x10
		[NonSerialized]
		internal static readonly TimeSpan DefaultMatchTimeout; // 0x18
		protected internal Hashtable caps; // 0x20
		protected internal Hashtable capnames; // 0x24
		protected internal string[] capslist; // 0x28
		protected internal int capsize; // 0x2C
		internal ExclusiveReference runnerref; // 0x30
		internal SharedReference replref; // 0x34
		internal RegexCode code; // 0x38
		internal bool refsInitialized; // 0x3C
		internal static LinkedList<CachedCodeEntry> livecode; // 0x20
		internal static int cacheSize; // 0x24
	
		// Properties
		public RegexOptions Options { get; } // 0x0059A7A4-0x0059A7AC 
		public TimeSpan MatchTimeout { get; } // 0x0059A7AC-0x0059A7B8 
		public bool RightToLeft { get; } // 0x0059AACC-0x0059AAD8 
	
		// Constructors
		protected Regex(); // 0x005990B0-0x00599150
		public Regex(string pattern); // 0x00599150-0x00599204
		public Regex(string pattern, RegexOptions options); // 0x005997F0-0x005998A8
		private Regex(string pattern, RegexOptions options, TimeSpan matchTimeout, bool useCache); // 0x00599204-0x005997F0
		protected Regex(SerializationInfo info, StreamingContext context); // 0x0059A440-0x0059A64C
		static Regex(); // 0x0059B500-0x0059B690
	
		// Methods
		void ISerializable.GetObjectData(SerializationInfo si, StreamingContext context); // 0x0059A64C-0x0059A7A4
		protected internal static void ValidateMatchTimeout(TimeSpan matchTimeout); // 0x005998A8-0x00599AE0
		private static TimeSpan InitDefaultMatchTimeout(); // 0x0059A7B8-0x0059AACC
		public override string ToString(); // 0x0059AAE4-0x0059AAEC
		public string GroupNameFromNumber(int i); // 0x00597258-0x0059741C
		public bool IsMatch(string input); // 0x0059AAEC-0x0059ABC8
		public bool IsMatch(string input, int startat); // 0x0059ABC8-0x0059ACBC
		public static Match Match(string input, string pattern); // 0x0059ACBC-0x0059AD6C
		public static Match Match(string input, string pattern, RegexOptions options, TimeSpan matchTimeout); // 0x0059AD6C-0x0059AE24
		public Match Match(string input); // 0x0059AE24-0x0059AF00
		public Match Match(string input, int startat); // 0x0059AF00-0x0059AFE8
		public static string Replace(string input, string pattern, string replacement); // 0x0059AFE8-0x0059B0A0
		public static string Replace(string input, string pattern, string replacement, RegexOptions options, TimeSpan matchTimeout); // 0x0059B0A0-0x0059B160
		public string Replace(string input, string replacement); // 0x0059B160-0x0059B250
		public string Replace(string input, string replacement, int count, int startat); // 0x0059B250-0x0059B4F4
		protected void InitializeReferences(); // 0x00599DEC-0x00599EF8
		internal Match Run(bool quick, int prevlen, string input, int beginning, int length, int startat); // 0x00597AC0-0x00597EDC
		private static CachedCodeEntry LookupCachedAndUpdate(string key); // 0x00599AE0-0x00599DEC
		private CachedCodeEntry CacheCode(string key); // 0x00599EF8-0x0059A440
		protected bool UseOptionR(); // 0x0059AAD8-0x0059AAE4
		internal bool UseOptionInvariant(); // 0x0059B4F4-0x0059B500
	}

	internal sealed class CachedCodeEntry // TypeDefIndex: 1565
	{
		// Fields
		internal string _key; // 0x08
		internal RegexCode _code; // 0x0C
		internal Hashtable _caps; // 0x10
		internal Hashtable _capnames; // 0x14
		internal string[] _capslist; // 0x18
		internal int _capsize; // 0x1C
		internal RegexRunnerFactory _factory; // 0x20
		internal ExclusiveReference _runnerref; // 0x24
		internal SharedReference _replref; // 0x28
	
		// Constructors
		internal CachedCodeEntry(string key, Hashtable capnames, string[] capslist, RegexCode code, Hashtable caps, int capsize, ExclusiveReference runner, SharedReference repl); // 0x00596854-0x005968AC
	}

	internal sealed class ExclusiveReference // TypeDefIndex: 1566
	{
		// Fields
		private RegexRunner _ref; // 0x08
		private object _obj; // 0x0C
		private int _locked; // 0x10
	
		// Constructors
		public ExclusiveReference(); // 0x00596BC4-0x00596BCC
	
		// Methods
		internal object Get(); // 0x005969E4-0x00596A2C
		internal void Release(object obj); // 0x00596A2C-0x00596BC4
	}

	internal sealed class SharedReference // TypeDefIndex: 1567
	{
		// Fields
		private WeakReference _ref; // 0x08
		private int _locked; // 0x0C
	
		// Constructors
		public SharedReference(); // 0x00366DFC-0x00366E7C
	
		// Methods
		internal object Get(); // 0x00366D38-0x00366D98
		internal void Cache(object obj); // 0x00366D98-0x00366DFC
	}

	internal sealed class RegexBoyerMoore // TypeDefIndex: 1568
	{
		// Fields
		internal int[] _positive; // 0x08
		internal int[] _negativeASCII; // 0x0C
		internal int[][] _negativeUnicode; // 0x10
		internal string _pattern; // 0x14
		internal int _lowASCII; // 0x18
		internal int _highASCII; // 0x1C
		internal bool _rightToLeft; // 0x20
		internal bool _caseInsensitive; // 0x21
		internal CultureInfo _culture; // 0x24
	
		// Constructors
		internal RegexBoyerMoore(string pattern, bool caseInsensitive, bool rightToLeft, CultureInfo culture); // 0x00349ED0-0x0034A774
	
		// Methods
		private bool MatchPattern(string text, int index); // 0x0034A774-0x0034A928
		internal bool IsMatch(string text, int index, int beglimit, int endlimit); // 0x0034A928-0x0034AA08
		internal int Scan(string text, int index, int beglimit, int endlimit); // 0x0034AA08-0x0034AEF8
		public override string ToString(); // 0x0034AEF8-0x0034AF00
	}

	[Serializable]
	public class Capture // TypeDefIndex: 1569
	{
		// Fields
		internal string _text; // 0x08
		internal int _index; // 0x0C
		internal int _length; // 0x10
	
		// Properties
		public int Index { get; } // 0x005968DC-0x005968E4 
		public int Length { get; } // 0x005968E4-0x005968EC 
		public string Value { get; } // 0x005968EC-0x00596924 
	
		// Constructors
		internal Capture(string text, int i, int l); // 0x005968AC-0x005968DC
	
		// Methods
		public override string ToString(); // 0x00596924-0x00596928
		internal string GetOriginalString(); // 0x00596928-0x00596930
		internal string GetLeftSubstring(); // 0x00596930-0x00596968
		internal string GetRightSubstring(); // 0x00596968-0x005969E4
	}

	internal sealed class RegexCharClass // TypeDefIndex: 1570
	{
		// Fields
		private List<SingleRange> _rangelist; // 0x08
		private StringBuilder _categories; // 0x0C
		private bool _canonical; // 0x10
		private bool _negate; // 0x11
		private RegexCharClass _subtractor; // 0x14
		private static readonly string InternalRegexIgnoreCase; // 0x00
		private static readonly string Space; // 0x04
		private static readonly string NotSpace; // 0x08
		private static readonly string Word; // 0x0C
		private static readonly string NotWord; // 0x10
		internal static readonly string SpaceClass; // 0x14
		internal static readonly string NotSpaceClass; // 0x18
		internal static readonly string WordClass; // 0x1C
		internal static readonly string NotWordClass; // 0x20
		internal static readonly string DigitClass; // 0x24
		internal static readonly string NotDigitClass; // 0x28
		private static Dictionary<string, string> _definedCategories; // 0x2C
		private static readonly string[,] _propTable; // 0x30
		private static readonly LowerCaseMapping[] _lcTable; // 0x34
	
		// Properties
		internal bool CanMerge { get; } // 0x00353410-0x00353438 
		internal bool Negate { set; } // 0x00353438-0x00353440
	
		// Nested types
		private struct LowerCaseMapping // TypeDefIndex: 1571
		{
			// Fields
			internal char _chMin; // 0x00
			internal char _chMax; // 0x02
			internal int _lcOp; // 0x04
			internal int _data; // 0x08
	
			// Constructors
			internal LowerCaseMapping(char chMin, char chMax, int lcOp, int data); // 0x003563D0-0x003563E8
		}
	
		private sealed class SingleRangeComparer : IComparer<SingleRange> // TypeDefIndex: 1572
		{
			// Constructors
			public SingleRangeComparer(); // 0x0035637C-0x003563D0
	
			// Methods
			public int Compare(SingleRange x, SingleRange y); // 0x003563E8-0x00356444
		}
	
		private sealed class SingleRange // TypeDefIndex: 1573
		{
			// Fields
			internal char _first; // 0x08
			internal char _last; // 0x0A
	
			// Constructors
			internal SingleRange(char first, char last); // 0x00353B40-0x00353B68
		}
	
		// Constructors
		static RegexCharClass(); // 0x0034AF00-0x003531F8
		internal RegexCharClass(); // 0x00353314-0x003533D0
		private RegexCharClass(bool negate, List<SingleRange> ranges, StringBuilder categories, RegexCharClass subtraction); // 0x003533D0-0x00353410
	
		// Methods
		internal void AddChar(char c); // 0x00353440-0x00353448
		internal void AddCharClass(RegexCharClass cc); // 0x003535D0-0x003537A4
		private void AddSet(string set); // 0x0035389C-0x00353B40
		internal void AddSubtraction(RegexCharClass sub); // 0x00353B68-0x00353B70
		internal void AddRange(char first, char last); // 0x00353448-0x003535D0
		internal void AddCategoryFromName(string categoryName, bool invert, bool caseInsensitive, string pattern); // 0x00353B70-0x00353E98
		private void AddCategory(string category); // 0x003542B0-0x003542E4
		internal void AddLowercase(CultureInfo culture); // 0x003542E4-0x003544C4
		private void AddLowercaseRange(char chMin, char chMax, CultureInfo culture); // 0x003544C4-0x00354828
		internal void AddWord(bool ecma, bool negate); // 0x00354828-0x00354954
		internal void AddSpace(bool ecma, bool negate); // 0x00354954-0x00354A80
		internal void AddDigit(bool ecma, bool negate, string pattern); // 0x00354A80-0x00354B44
		internal static char SingletonChar(string set); // 0x00354B44-0x00354B74
		internal static bool IsMergeable(string charClass); // 0x00354B74-0x00354C4C
		internal static bool IsEmpty(string charClass); // 0x00354D1C-0x00354E2C
		internal static bool IsSingleton(string set); // 0x00354E2C-0x00354FC8
		internal static bool IsSingletonInverse(string set); // 0x00354FC8-0x00355164
		private static bool IsSubtraction(string charClass); // 0x00354C78-0x00354D1C
		internal static bool IsNegated(string set); // 0x00354C4C-0x00354C78
		internal static bool IsECMAWordChar(char ch); // 0x00355164-0x003551F4
		internal static bool IsWordChar(char ch); // 0x00355280-0x00355338
		internal static bool CharInClass(char ch, string set); // 0x003551F4-0x00355280
		internal static bool CharInClassRecursive(char ch, string set, int start); // 0x00355338-0x003554E4
		private static bool CharInClassInternal(char ch, string set, int start, int mySetLength, int myCategoryLength); // 0x003554E4-0x00355604
		private static bool CharInCategory(char ch, string set, int start, int mySetLength, int myCategoryLength); // 0x00355604-0x00355824
		private static bool CharInCategoryGroup(char ch, UnicodeCategory chcategory, string category, ref int i); // 0x00355824-0x00355924
		private static string NegateCategory(string category); // 0x003531F8-0x00353314
		internal static RegexCharClass Parse(string charClass); // 0x00355924-0x003559A8
		private static RegexCharClass ParseRecursive(string charClass, int start); // 0x003559A8-0x00355C8C
		private int RangeCount(); // 0x003537A4-0x0035381C
		internal string ToStringClass(); // 0x00355C8C-0x00355FB0
		private SingleRange GetRangeAt(int i); // 0x0035381C-0x0035389C
		private void Canonicalize(); // 0x00355FB0-0x0035637C
		private static string SetFromProperty(string capname, bool invert, string pattern); // 0x00353E98-0x003542B0
	}

	internal sealed class RegexCode // TypeDefIndex: 1574
	{
		// Fields
		internal int[] _codes; // 0x08
		internal string[] _strings; // 0x0C
		internal int _trackcount; // 0x10
		internal Hashtable _caps; // 0x14
		internal int _capsize; // 0x18
		internal RegexPrefix _fcPrefix; // 0x1C
		internal RegexBoyerMoore _bmPrefix; // 0x20
		internal int _anchors; // 0x24
		internal bool _rightToLeft; // 0x28
	
		// Constructors
		internal RegexCode(int[] codes, List<string> stringlist, int trackcount, Hashtable caps, int capsize, RegexBoyerMoore bmPrefix, RegexPrefix fcPrefix, int anchors, bool rightToLeft); // 0x00356444-0x003565A8
	
		// Methods
		internal static bool OpcodeBacktracks(int Op); // 0x003565A8-0x00356668
	}

	internal sealed class RegexFCD // TypeDefIndex: 1575
	{
		// Fields
		private int[] _intStack; // 0x08
		private int _intDepth; // 0x0C
		private RegexFC[] _fcStack; // 0x10
		private int _fcDepth; // 0x14
		private bool _skipAllChildren; // 0x18
		private bool _skipchild; // 0x19
		private bool _failed; // 0x1A
	
		// Constructors
		private RegexFCD(); // 0x00356B64-0x00356BF4
	
		// Methods
		internal static RegexPrefix FirstChars(RegexTree t); // 0x00356A04-0x00356B64
		internal static RegexPrefix Prefix(RegexTree tree); // 0x00356E30-0x00357114
		internal static int Anchors(RegexTree tree); // 0x00357294-0x0035740C
		private static int AnchorFromType(int type); // 0x0035740C-0x00357494
		private void PushInt(int I); // 0x00357494-0x0035759C
		private bool IntIsEmpty(); // 0x0035759C-0x003575B0
		private int PopInt(); // 0x003575B0-0x00357600
		private void PushFC(RegexFC fc); // 0x00357600-0x00357738
		private bool FCIsEmpty(); // 0x00357738-0x0035774C
		private RegexFC PopFC(); // 0x0035774C-0x0035779C
		private RegexFC TopFC(); // 0x0035779C-0x003577E8
		private RegexFC RegexFCFromRegexTree(RegexTree tree); // 0x00356BF4-0x00356E08
		private void SkipChild(); // 0x00357F1C-0x00357F28
		private void CalculateFC(int NodeType, RegexNode node, int CurIndex); // 0x003577E8-0x00357F1C
	}

	internal sealed class RegexFC // TypeDefIndex: 1576
	{
		// Fields
		internal RegexCharClass _cc; // 0x08
		internal bool _nullable; // 0x0C
		internal bool _caseInsensitive; // 0x0D
	
		// Constructors
		internal RegexFC(bool nullable); // 0x00356668-0x003566E8
		internal RegexFC(char ch, bool not, bool nullable, bool caseInsensitive); // 0x003566E8-0x00356804
		internal RegexFC(string charClass, bool nullable, bool caseInsensitive); // 0x00356804-0x003568A8
	
		// Methods
		internal bool AddFC(RegexFC fc, bool concatenate); // 0x003568A8-0x003569A0
		internal string GetFirstChars(CultureInfo culture); // 0x003569A0-0x003569FC
		internal bool IsCaseInsensitive(); // 0x003569FC-0x00356A04
	}

	internal sealed class RegexPrefix // TypeDefIndex: 1577
	{
		// Fields
		internal string _prefix; // 0x08
		internal bool _caseInsensitive; // 0x0C
		internal static RegexPrefix _empty; // 0x00
	
		// Properties
		internal string Prefix { get; } // 0x00359508-0x00359510 
		internal bool CaseInsensitive { get; } // 0x00359500-0x00359508 
		internal static RegexPrefix Empty { get; } // 0x00357208-0x00357294 
	
		// Constructors
		internal RegexPrefix(string prefix, bool ci); // 0x00356E08-0x00356E30
		static RegexPrefix(); // 0x00363AD4-0x00363B6C
	}

	[Serializable]
	public class Group : Capture // TypeDefIndex: 1578
	{
		// Fields
		internal static Group _emptygroup; // 0x00
		internal int[] _caps; // 0x14
		internal int _capcount; // 0x18
		[OptionalField] // 0x001478A8-0x001478B8
		internal string _name; // 0x1C
	
		// Properties
		public bool Success { get; } // 0x00596CA4-0x00596CB4 
	
		// Constructors
		internal Group(string text, int[] caps, int capcount, string name); // 0x00596BCC-0x00596CA4
		static Group(); // 0x00596CB4-0x00596D7C
	}

	[Serializable]
	public class GroupCollection : ICollection // TypeDefIndex: 1579
	{
		// Fields
		internal Match _match; // 0x08
		internal Hashtable _captureMap; // 0x0C
		internal Group[] _groups; // 0x10
	
		// Properties
		public object SyncRoot { get; } // 0x00596DA4-0x00596DAC 
		public bool IsSynchronized { get; } // 0x00596DAC-0x00596DB4 
		public int Count { get; } // 0x00596DB4-0x00596DEC 
		public Group this[int groupnum] { get => default; } // 0x00596DEC-0x00596DF0 
	
		// Constructors
		internal GroupCollection(Match match, Hashtable caps); // 0x00596D7C-0x00596DA4
	
		// Methods
		internal Group GetGroup(int groupnum); // 0x00596DF0-0x00596F80
		internal Group GetGroupImpl(int groupnum); // 0x00596F80-0x00597258
		public void CopyTo(Array array, int arrayIndex); // 0x0059741C-0x00597518
		public IEnumerator GetEnumerator(); // 0x00597518-0x00597594
	}

	internal class GroupEnumerator : IEnumerator // TypeDefIndex: 1580
	{
		// Fields
		internal GroupCollection _rgc; // 0x08
		internal int _curindex; // 0x0C
	
		// Properties
		public object Current { get; } // 0x00597610-0x00597614 
		public Capture Capture { get; } // 0x00597614-0x00597718 
	
		// Constructors
		internal GroupEnumerator(GroupCollection rgc); // 0x00597594-0x005975BC
	
		// Methods
		public bool MoveNext(); // 0x005975BC-0x00597610
		public void Reset(); // 0x00597718-0x00597724
	}

	internal sealed class RegexInterpreter : RegexRunner // TypeDefIndex: 1581
	{
		// Fields
		internal int runoperator; // 0x50
		internal int[] runcodes; // 0x54
		internal int runcodepos; // 0x58
		internal string[] runstrings; // 0x5C
		internal RegexCode runcode; // 0x60
		internal RegexPrefix runfcPrefix; // 0x64
		internal RegexBoyerMoore runbmPrefix; // 0x68
		internal int runanchors; // 0x6C
		internal bool runrtl; // 0x70
		internal bool runci; // 0x71
		internal CultureInfo runculture; // 0x74
	
		// Constructors
		internal RegexInterpreter(RegexCode code, CultureInfo culture); // 0x00357F28-0x00357FDC
	
		// Methods
		protected override void InitTrackCount(); // 0x00357FE4-0x00358010
		private void Advance(); // 0x00358010-0x00358018
		private void Advance(int i); // 0x00358018-0x00358088
		private void Goto(int newpos); // 0x003580A4-0x0035811C
		private void Textto(int newpos); // 0x0035815C-0x00358164
		private void Trackto(int newpos); // 0x00358164-0x00358198
		private int Textstart(); // 0x00358198-0x003581A0
		private int Textpos(); // 0x003581A0-0x003581A8
		private int Trackpos(); // 0x003581A8-0x003581D8
		private void TrackPush(); // 0x003581D8-0x0035822C
		private void TrackPush(int I1); // 0x0035822C-0x003582CC
		private void TrackPush(int I1, int I2); // 0x003582CC-0x003583B4
		private void TrackPush(int I1, int I2, int I3); // 0x003583B4-0x003584E4
		private void TrackPush2(int I1); // 0x003584E4-0x00358588
		private void TrackPush2(int I1, int I2); // 0x00358588-0x00358674
		private void Backtrack(); // 0x00358674-0x00358784
		private void SetOperator(int op); // 0x00358088-0x003580A4
		private void TrackPop(); // 0x00358784-0x00358794
		private void TrackPop(int framesize); // 0x00358794-0x003587A4
		private int TrackPeek(); // 0x003587A4-0x003587F0
		private int TrackPeek(int i); // 0x003587F0-0x00358844
		private void StackPush(int I1); // 0x00358844-0x00358898
		private void StackPush(int I1, int I2); // 0x00358898-0x00358938
		private void StackPop(); // 0x00358938-0x00358948
		private void StackPop(int framesize); // 0x00358948-0x00358958
		private int StackPeek(); // 0x00358958-0x003589A4
		private int StackPeek(int i); // 0x003589A4-0x003589F8
		private int Operator(); // 0x003589F8-0x00358A00
		private int Operand(int i); // 0x00358A00-0x00358A54
		private int Leftchars(); // 0x00358A54-0x00358A64
		private int Rightchars(); // 0x00358A64-0x00358A74
		private int Bump(); // 0x00358A74-0x00358A88
		private int Forwardchars(); // 0x00358A88-0x00358AB0
		private char Forwardcharnext(); // 0x00358AB0-0x00358B9C
		private bool Stringmatch(string str); // 0x00358B9C-0x00358DF0
		private bool Refmatch(int index, int len); // 0x00358DF0-0x00359010
		private void Backwardnext(); // 0x00359010-0x0035904C
		private char CharAt(int j); // 0x0035904C-0x00359080
		protected override bool FindFirstChar(); // 0x00359080-0x00359500
		protected override void Go(); // 0x00359510-0x0035A998
	}

	[Serializable]
	public class Match : Group // TypeDefIndex: 1582
	{
		// Fields
		internal static Match _empty; // 0x00
		internal GroupCollection _groupcoll; // 0x20
		internal Regex _regex; // 0x24
		internal int _textbeg; // 0x28
		internal int _textpos; // 0x2C
		internal int _textend; // 0x30
		internal int _textstart; // 0x34
		internal int[][] _matches; // 0x38
		internal int[] _matchcount; // 0x3C
		internal bool _balancing; // 0x40
	
		// Properties
		public static Match Empty { get; } // 0x00597724-0x005977B0 
		public virtual GroupCollection Groups { get; } // 0x005979E4-0x00597A70 
	
		// Constructors
		internal Match(Regex regex, int capcount, string text, int begpos, int len, int startpos); // 0x005977B0-0x00597948
		static Match(); // 0x00598EBC-0x00598F6C
	
		// Methods
		internal virtual void Reset(Regex regex, string text, int textbeg, int textend, int textstart); // 0x00597948-0x005979E4
		public Match NextMatch(); // 0x00597A70-0x00597AC0
		internal virtual string GroupToStringImpl(int groupnum); // 0x00597EDC-0x00598050
		internal string LastGroupToStringImpl(); // 0x00598050-0x00598090
		internal virtual void AddMatch(int cap, int start, int len); // 0x00598090-0x005984C4
		internal virtual void BalanceMatch(int cap); // 0x005984C4-0x005987BC
		internal virtual void RemoveMatch(int cap); // 0x005987BC-0x0059880C
		internal virtual bool IsMatched(int cap); // 0x0059880C-0x00598940
		internal virtual int MatchIndex(int cap); // 0x00598940-0x00598A80
		internal virtual int MatchLength(int cap); // 0x00598A80-0x00598BC0
		internal virtual void Tidy(int textpos); // 0x00598BC0-0x00598EBC
	}

	internal class MatchSparse : Match // TypeDefIndex: 1583
	{
		// Fields
		internal Hashtable _caps; // 0x44
	
		// Properties
		public override GroupCollection Groups { get; } // 0x00599024-0x005990B0 
	
		// Constructors
		internal MatchSparse(Regex regex, Hashtable caps, int capcount, string text, int begpos, int len, int startpos); // 0x00598F6C-0x00599024
	}

	[Serializable]
	public class RegexMatchTimeoutException : TimeoutException, ISerializable // TypeDefIndex: 1584
	{
		// Fields
		private string regexInput; // 0x44
		private string regexPattern; // 0x48
		private TimeSpan matchTimeout; // 0x50
	
		// Constructors
		public RegexMatchTimeoutException(string regexInput, string regexPattern, TimeSpan matchTimeout); // 0x0035AF20-0x0035B00C
		public RegexMatchTimeoutException(); // 0x0035B02C-0x0035B0E4
		protected RegexMatchTimeoutException(SerializationInfo info, StreamingContext context); // 0x0035B1A0-0x0035B35C
	
		// Methods
		void ISerializable.GetObjectData(SerializationInfo si, StreamingContext context); // 0x0035B35C-0x0035B48C
		private new void Init(); // 0x0035B0E4-0x0035B1A0
		private void Init(string input, string pattern, TimeSpan timeout); // 0x0035B00C-0x0035B02C
	}

	internal sealed class RegexNode // TypeDefIndex: 1585
	{
		// Fields
		internal int _type; // 0x08
		internal List<RegexNode> _children; // 0x0C
		internal string _str; // 0x10
		internal char _ch; // 0x14
		internal int _m; // 0x18
		internal int _n; // 0x1C
		internal RegexOptions _options; // 0x20
		internal RegexNode _next; // 0x24
	
		// Constructors
		internal RegexNode(int type, RegexOptions options); // 0x0035B48C-0x0035B4B4
		internal RegexNode(int type, RegexOptions options, char ch); // 0x0035B4B4-0x0035B4E4
		internal RegexNode(int type, RegexOptions options, string str); // 0x0035B4E4-0x0035B514
		internal RegexNode(int type, RegexOptions options, int m); // 0x0035B514-0x0035B544
		internal RegexNode(int type, RegexOptions options, int m, int n); // 0x0035B544-0x0035B57C
	
		// Methods
		internal bool UseOptionR(); // 0x0035B57C-0x0035B588
		internal RegexNode ReverseLeft(); // 0x0035B588-0x0035B634
		internal void MakeRep(int type, int min, int max); // 0x0035B634-0x0035B650
		internal RegexNode Reduce(); // 0x0035B650-0x0035B6AC
		internal RegexNode StripEnation(int emptyType); // 0x0035C4B8-0x0035C560
		internal RegexNode ReduceGroup(); // 0x0035C2C8-0x0035C308
		internal RegexNode ReduceRep(); // 0x0035C0FC-0x0035C2C8
		internal RegexNode ReduceSet(); // 0x0035C308-0x0035C4B8
		internal RegexNode ReduceAlternation(); // 0x0035B6B4-0x0035BC80
		internal RegexNode ReduceConcatenation(); // 0x0035BC80-0x0035C0FC
		internal RegexNode MakeQuantifier(bool lazy, int min, int max); // 0x0035C560-0x0035C694
		internal void AddChild(RegexNode newChild); // 0x0035C694-0x0035C788
		internal RegexNode Child(int i); // 0x00357188-0x00357208
		internal int ChildCount(); // 0x00357114-0x00357188
		internal int Type(); // 0x0035B6AC-0x0035B6B4
	}

	[Flags] // 0x00147150-0x00147160
	public enum RegexOptions // TypeDefIndex: 1586
	{
		None = 0,
		IgnoreCase = 1,
		Multiline = 2,
		ExplicitCapture = 4,
		Compiled = 8,
		Singleline = 16,
		IgnorePatternWhitespace = 32,
		RightToLeft = 64,
		ECMAScript = 256,
		CultureInvariant = 512
	}

	internal sealed class RegexParser // TypeDefIndex: 1587
	{
		// Fields
		internal RegexNode _stack; // 0x08
		internal RegexNode _group; // 0x0C
		internal RegexNode _alternation; // 0x10
		internal RegexNode _concatenation; // 0x14
		internal RegexNode _unit; // 0x18
		internal string _pattern; // 0x1C
		internal int _currentPos; // 0x20
		internal CultureInfo _culture; // 0x24
		internal int _autocap; // 0x28
		internal int _capcount; // 0x2C
		internal int _captop; // 0x30
		internal int _capsize; // 0x34
		internal Hashtable _caps; // 0x38
		internal Hashtable _capnames; // 0x3C
		internal int[] _capnumlist; // 0x40
		internal List<string> _capnamelist; // 0x44
		internal RegexOptions _options; // 0x48
		internal List<RegexOptions> _optionsStack; // 0x4C
		internal bool _ignoreNextParen; // 0x50
		internal static readonly byte[] _category; // 0x00
	
		// Constructors
		private RegexParser(CultureInfo culture); // 0x0035C9DC-0x0035CA94
		static RegexParser(); // 0x00363A3C-0x00363AD4
	
		// Methods
		internal static RegexTree Parse(string re, RegexOptions op); // 0x0035C788-0x0035C9DC
		internal static RegexReplacement ParseReplacement(string rep, Hashtable caps, int capsize, Hashtable capnames, RegexOptions op); // 0x0035D8D4-0x0035DAC8
		internal void SetPattern(string Re); // 0x0035CA94-0x0035CB10
		internal void Reset(RegexOptions topopts); // 0x0035CE24-0x0035CF44
		internal RegexNode ScanRegex(); // 0x0035CF44-0x0035D884
		internal RegexNode ScanReplacement(); // 0x0035DAD8-0x0035DC04
		internal RegexCharClass ScanCharClass(bool caseInsensitive); // 0x0035ED44-0x0035ED4C
		internal RegexCharClass ScanCharClass(bool caseInsensitive, bool scanOnly); // 0x00361158-0x00361B18
		internal RegexNode ScanGroupOpen(); // 0x0035EE54-0x0035FB08
		internal void ScanBlank(); // 0x0035E1C0-0x0035E47C
		internal RegexNode ScanBackslash(); // 0x00360354-0x00360990
		internal RegexNode ScanBasicBackslash(); // 0x003624C0-0x00362BA8
		internal RegexNode ScanDollar(); // 0x00360D10-0x00361158
		internal string ScanCapname(); // 0x00361F54-0x00362038
		internal char ScanOctal(); // 0x00362BA8-0x00362C38
		internal int ScanDecimal(); // 0x00360B90-0x00360C90
		internal char ScanHex(int c); // 0x00362C38-0x00362D88
		internal static int HexDigit(char ch); // 0x00362D88-0x00362DC0
		internal char ScanControl(); // 0x00362DC0-0x00362EC4
		internal bool IsOnlyTopOption(RegexOptions option); // 0x00362EC4-0x00362EF0
		internal void ScanOptions(); // 0x003621FC-0x00362368
		internal char ScanCharEscape(); // 0x00361D00-0x00361F54
		internal string ParseProperty(); // 0x00361B24-0x00361D00
		internal int TypeFromCode(char ch); // 0x00362444-0x003624C0
		internal static RegexOptions OptionFromCode(char ch); // 0x00362EF0-0x00362F70
		internal void CountCaptures(); // 0x0035CB10-0x0035CE24
		internal void NoteCaptureSlot(int i, int pos); // 0x00362F70-0x003630AC
		internal void NoteCaptureName(string name, int pos); // 0x00363134-0x003632A8
		internal void NoteCaptures(Hashtable caps, int capsize, Hashtable capnames); // 0x0035DAC8-0x0035DAD8
		internal void AssignNameSlots(); // 0x003632A8-0x00363A3C
		internal int CaptureSlotFromName(string capname); // 0x00362168-0x003621FC
		internal bool IsCaptureSlot(int i); // 0x0036208C-0x00362148
		internal bool IsCaptureName(string capname); // 0x00362148-0x00362168
		internal bool UseOptionN(); // 0x00362080-0x0036208C
		internal bool UseOptionI(); // 0x0035ED38-0x0035ED44
		internal bool UseOptionM(); // 0x00360998-0x003609A4
		internal bool UseOptionS(); // 0x00360A24-0x00360A30
		internal bool UseOptionX(); // 0x0035E484-0x0035E490
		internal bool UseOptionE(); // 0x00361B18-0x00361B24
		internal static bool IsSpecial(char ch); // 0x0035E7A8-0x0035E884
		internal static bool IsStopperX(char ch); // 0x0035E50C-0x0035E5E8
		internal static bool IsQuantifier(char ch); // 0x0035E884-0x0035E960
		internal bool IsTrueQuantifier(); // 0x0035E5E8-0x0035E7A8
		internal static bool IsSpace(char ch); // 0x00362368-0x00362444
		internal void AddConcatenate(int pos, int cch, bool isReplacement); // 0x0035E960-0x0035EC2C
		internal void PushGroup(); // 0x0035FBCC-0x0035FC38
		internal void PopGroup(); // 0x003600A0-0x0036020C
		internal bool EmptyStack(); // 0x0035FD48-0x0035FD5C
		internal void StartGroup(RegexNode openGroup); // 0x0035E110-0x0035E1C0
		internal void AddAlternate(); // 0x0035FC38-0x0035FD48
		internal void AddConcatenate(); // 0x00360B18-0x00360B54
		internal void AddConcatenate(bool lazy, int min, int max); // 0x00360C98-0x00360D10
		internal RegexNode Unit(); // 0x0036034C-0x00360354
		internal void AddUnitOne(char ch); // 0x0035EC60-0x0035ED38
		internal void AddUnitNotone(char ch); // 0x00360A30-0x00360B08
		internal void AddUnitSet(string cc); // 0x0035ED4C-0x0035EDD4
		internal void AddUnitNode(RegexNode node); // 0x00360990-0x00360998
		internal void AddUnitType(int type); // 0x003609A4-0x00360A24
		internal void AddGroup(); // 0x0035FEC4-0x003600A0
		internal void PushOptions(); // 0x0035EDD4-0x0035EE54
		internal void PopOptions(); // 0x0036020C-0x0036034C
		internal bool EmptyOptionsStack(); // 0x003630AC-0x00363134
		internal void PopKeepOptions(); // 0x0035FB08-0x0035FBCC
		internal ArgumentException MakeException(string message); // 0x0035FD5C-0x0035FEC4
		internal int Textpos(); // 0x0035E47C-0x0035E484
		internal void Textto(int pos); // 0x00360C90-0x00360C98
		internal char MoveRightGetChar(); // 0x00360B54-0x00360B90
		internal void MoveRight(); // 0x0035E490-0x0035E4A0
		internal void MoveRight(int i); // 0x00362070-0x00362080
		internal void MoveLeft(); // 0x00360B08-0x00360B18
		internal char CharAt(int i); // 0x0035EC2C-0x0035EC60
		internal char RightChar(); // 0x0035E4D8-0x0035E50C
		internal char RightChar(int i); // 0x00362038-0x00362070
		internal int CharsRight(); // 0x0035E4A0-0x0035E4D8
	}

	internal sealed class RegexReplacement // TypeDefIndex: 1588
	{
		// Fields
		internal string _rep; // 0x08
		internal List<string> _strings; // 0x0C
		internal List<int> _rules; // 0x10
	
		// Properties
		internal string Pattern { get; } // 0x00364098-0x003640A0 
	
		// Constructors
		internal RegexReplacement(string rep, RegexNode concat, Hashtable _caps); // 0x0035DC04-0x0035E110
	
		// Methods
		private void ReplacementImpl(StringBuilder sb, Match match); // 0x00363B6C-0x00363D9C
		private void ReplacementImplRTL(List<string> al, Match match); // 0x00363D9C-0x00364098
		internal string Replace(Regex regex, string input, int count, int startat); // 0x003640A0-0x0036478C
	}

	[EditorBrowsable] // 0x00147160-0x00147174
	public abstract class RegexRunner // TypeDefIndex: 1589
	{
		// Fields
		protected internal int runtextbeg; // 0x08
		protected internal int runtextend; // 0x0C
		protected internal int runtextstart; // 0x10
		protected internal string runtext; // 0x14
		protected internal int runtextpos; // 0x18
		protected internal int[] runtrack; // 0x1C
		protected internal int runtrackpos; // 0x20
		protected internal int[] runstack; // 0x24
		protected internal int runstackpos; // 0x28
		protected internal int[] runcrawl; // 0x2C
		protected internal int runcrawlpos; // 0x30
		protected internal int runtrackcount; // 0x34
		protected internal Match runmatch; // 0x38
		protected internal Regex runregex; // 0x3C
		private int timeout; // 0x40
		private bool ignoreTimeout; // 0x44
		private int timeoutOccursAt; // 0x48
		private int timeoutChecksToSkip; // 0x4C
	
		// Constructors
		protected internal RegexRunner(); // 0x00357FDC-0x00357FE4
	
		// Methods
		protected internal Match Scan(Regex regex, string text, int textbeg, int textend, int textstart, int prevlen, bool quick, TimeSpan timeout); // 0x0036478C-0x00364B94
		private void StartTimeoutWatch(); // 0x00364B94-0x00364BCC
		protected void CheckTimeout(); // 0x0035A998-0x0035A9C4
		private void DoCheckTimeout(); // 0x00364EC0-0x00364FF8
		protected abstract void Go();
		protected abstract bool FindFirstChar();
		protected abstract void InitTrackCount();
		private void InitMatch(); // 0x00364BCC-0x00364E6C
		private Match TidyMatch(bool quick); // 0x00364E6C-0x00364EC0
		protected void EnsureStorage(); // 0x0035811C-0x0035815C
		protected bool IsBoundary(int index, int startpos, int endpos); // 0x0035AC30-0x0035AD6C
		protected bool IsECMABoundary(int index, int startpos, int endpos); // 0x0035AD6C-0x0035AEA8
		protected void DoubleTrack(); // 0x003650F8-0x003651F8
		protected void DoubleStack(); // 0x00364FF8-0x003650F8
		protected void DoubleCrawl(); // 0x003651F8-0x003652F8
		protected void Crawl(int i); // 0x003652F8-0x00365364
		protected int Popcrawl(); // 0x00365364-0x003653B4
		protected int Crawlpos(); // 0x0035AC00-0x0035AC30
		protected void Capture(int capnum, int start, int end); // 0x0035AB4C-0x0035ABBC
		protected void TransferCapture(int capnum, int uncapnum, int start, int end); // 0x0035AA00-0x0035AB4C
		protected void Uncapture(); // 0x0035ABBC-0x0035AC00
		protected bool IsMatched(int cap); // 0x0035A9C4-0x0035AA00
		protected int MatchIndex(int cap); // 0x0035AEA8-0x0035AEE4
		protected int MatchLength(int cap); // 0x0035AEE4-0x0035AF20
	}

	[EditorBrowsable] // 0x00147174-0x00147188
	public abstract class RegexRunnerFactory // TypeDefIndex: 1590
	{
		// Methods
		protected internal abstract RegexRunner CreateInstance();
	}

	internal sealed class RegexTree // TypeDefIndex: 1591
	{
		// Fields
		internal RegexNode _root; // 0x08
		internal Hashtable _caps; // 0x0C
		internal int[] _capnumlist; // 0x10
		internal Hashtable _capnames; // 0x14
		internal string[] _capslist; // 0x18
		internal RegexOptions _options; // 0x1C
		internal int _captop; // 0x20
	
		// Constructors
		internal RegexTree(RegexNode root, Hashtable caps, int[] capnumlist, int captop, Hashtable capnames, string[] capslist, RegexOptions opts); // 0x0035D884-0x0035D8D4
	}

	internal sealed class RegexWriter // TypeDefIndex: 1592
	{
		// Fields
		internal int[] _intStack; // 0x08
		internal int _depth; // 0x0C
		internal int[] _emitted; // 0x10
		internal int _curpos; // 0x14
		internal Dictionary<string, int> _stringhash; // 0x18
		internal List<string> _stringtable; // 0x1C
		internal bool _counting; // 0x20
		internal int _count; // 0x24
		internal int _trackcount; // 0x28
		internal Hashtable _caps; // 0x2C
	
		// Constructors
		private RegexWriter(); // 0x00365438-0x00365524
	
		// Methods
		internal static RegexCode Write(RegexTree t); // 0x003653B4-0x00365438
		internal void PushInt(int I); // 0x00365A44-0x00365B4C
		internal bool EmptyStack(); // 0x00365B4C-0x00365B60
		internal int PopInt(); // 0x00365B60-0x00365BB0
		internal int CurPos(); // 0x00365BB0-0x00365BB8
		internal void PatchJump(int Offset, int jumpDest); // 0x00365BB8-0x00365C08
		internal void Emit(int op); // 0x00365C08-0x00365D34
		internal void Emit(int op, int opd1); // 0x00365D34-0x00365EAC
		internal void Emit(int op, int opd1, int opd2); // 0x00365EAC-0x0036606C
		internal int StringCode(string str); // 0x0036606C-0x003661F0
		internal ArgumentException MakeException(string message); // 0x003661F0-0x00366264
		internal int MapCapnum(int capnum); // 0x00366264-0x0036631C
		internal RegexCode RegexCodeFromRegexTree(RegexTree tree); // 0x00365524-0x00365A44
		internal void EmitFragment(int nodetype, RegexNode node, int CurIndex); // 0x0036631C-0x00366D38
	}
}

namespace System.ComponentModel
{
	public class ArrayConverter : CollectionConverter // TypeDefIndex: 1593
	{
		// Constructors
		public ArrayConverter(); // 0x0073A91C-0x0073A920
	}

	public class BooleanConverter : TypeConverter // TypeDefIndex: 1594
	{
		// Fields
		private static StandardValuesCollection values; // 0x00
	
		// Constructors
		public BooleanConverter(); // 0x0073AA30-0x0073AAB4
	}

	public class CollectionConverter : TypeConverter // TypeDefIndex: 1595
	{
		// Constructors
		public CollectionConverter(); // 0x0073A920-0x0073A9A4
	}

	public class DecimalConverter : BaseNumberConverter // TypeDefIndex: 1596
	{
		// Constructors
		public DecimalConverter(); // 0x0073AAB4-0x0073AAB8
	}

	[AttributeUsage] // 0x00147188-0x0014719C
	public class DefaultValueAttribute : Attribute // TypeDefIndex: 1597
	{
		// Fields
		private object value; // 0x08
	
		// Properties
		public virtual object Value { get; } // 0x0073AAD8-0x0073AAE0 
	
		// Constructors
		public DefaultValueAttribute(object value); // 0x0073AAB8-0x0073AAD8
	
		// Methods
		public override bool Equals(object obj); // 0x0073AAE0-0x0073AC20
		public override int GetHashCode(); // 0x0073AC20-0x0073AC28
	}

	public class DoubleConverter : BaseNumberConverter // TypeDefIndex: 1598
	{
		// Constructors
		public DoubleConverter(); // 0x0073AC28-0x0073AC2C
	}

	[AttributeUsage] // 0x0014719C-0x001471B0
	public sealed class EditorBrowsableAttribute : Attribute // TypeDefIndex: 1599
	{
		// Fields
		private EditorBrowsableState browsableState; // 0x08
	
		// Constructors
		public EditorBrowsableAttribute(EditorBrowsableState state); // 0x0073AC2C-0x0073AC4C
	
		// Methods
		public override bool Equals(object obj); // 0x0073AC4C-0x0073ACE8
		public override int GetHashCode(); // 0x0073ACE8-0x0073ACF0
	}

	public enum EditorBrowsableState // TypeDefIndex: 1600
	{
		Always = 0,
		Never = 1,
		Advanced = 2
	}

	public class EnumConverter : TypeConverter // TypeDefIndex: 1601
	{
		// Fields
		private StandardValuesCollection values; // 0x08
		private Type type; // 0x0C
	
		// Constructors
		public EnumConverter(Type type); // 0x0073ACF0-0x0073AD7C
	}

	public interface INotifyPropertyChanged // TypeDefIndex: 1602
	{
	}

	public class Int16Converter : BaseNumberConverter // TypeDefIndex: 1603
	{
		// Constructors
		public Int16Converter(); // 0x0073AD7C-0x0073AD80
	}

	public class Int32Converter : BaseNumberConverter // TypeDefIndex: 1604
	{
		// Constructors
		public Int32Converter(); // 0x0073AD80-0x0073AD84
	}

	public class Int64Converter : BaseNumberConverter // TypeDefIndex: 1605
	{
		// Constructors
		public Int64Converter(); // 0x0073AD84-0x0073AD88
	}

	public class PropertyChangedEventArgs : EventArgs // TypeDefIndex: 1606
	{
		// Fields
		private readonly string propertyName; // 0x08
	
		// Properties
		public virtual string PropertyName { get; } // 0x0073AE14-0x0073AE1C 
	
		// Constructors
		public PropertyChangedEventArgs(string propertyName); // 0x0073AD88-0x0073AE14
	}

	public delegate void PropertyChangedEventHandler(object sender, PropertyChangedEventArgs e); // TypeDefIndex: 1607; 0x0073AE30-0x0073B6B8

	public class SingleConverter : BaseNumberConverter // TypeDefIndex: 1608
	{
		// Constructors
		public SingleConverter(); // 0x0073B6FC-0x0073B700
	}

	public class StringConverter : TypeConverter // TypeDefIndex: 1609
	{
		// Constructors
		public StringConverter(); // 0x0073B700-0x0073B784
	}

	public class TimeSpanConverter : TypeConverter // TypeDefIndex: 1610
	{
		// Constructors
		public TimeSpanConverter(); // 0x0073B784-0x0073B808
	}

	[ComVisible] // 0x001471B0-0x001471C4
	public class TypeConverter // TypeDefIndex: 1611
	{
		// Fields
		private const string s_UseCompatibleTypeConverterBehavior = "UseCompatibleTypeConverterBehavior"; // Metadata: 0x00219688
		private static bool useCompatibleTypeConversion; // 0x00
	
		// Nested types
		[DefaultMember] // 0x001471C4-0x001471F8
		public class StandardValuesCollection : ICollection // TypeDefIndex: 1612
		{
			// Fields
			private ICollection values; // 0x08
			private Array valueArray; // 0x0C
	
			// Properties
			public int Count { get; } // 0x0073B80C-0x0073B8FC 
			int ICollection.Count { get; } // 0x0073BABC-0x0073BAC0 
			bool ICollection.IsSynchronized { get; } // 0x0073BAC0-0x0073BAC8 
			object ICollection.SyncRoot { get; } // 0x0073BAC8-0x0073BAD0 
	
			// Methods
			public void CopyTo(Array array, int index); // 0x0073B8FC-0x0073B9E4
			public IEnumerator GetEnumerator(); // 0x0073B9E4-0x0073BABC
			void ICollection.CopyTo(Array array, int index); // 0x0073BAD0-0x0073BAD4
			IEnumerator IEnumerable.GetEnumerator(); // 0x0073BAD4-0x0073BAD8
		}
	
		// Constructors
		public TypeConverter(); // 0x0073AA28-0x0073AA30
		static TypeConverter(); // 0x0073B808-0x0073B80C
	}

	[AttributeUsage] // 0x001471F8-0x0014720C
	public sealed class TypeConverterAttribute : Attribute // TypeDefIndex: 1613
	{
		// Fields
		private string typeName; // 0x08
		public static readonly TypeConverterAttribute Default; // 0x00
	
		// Properties
		public string ConverterTypeName { get; } // 0x0073BB90-0x0073BB98 
	
		// Constructors
		public TypeConverterAttribute(); // 0x0073BAD8-0x0073BB4C
		public TypeConverterAttribute(Type type); // 0x0073BB4C-0x0073BB90
		static TypeConverterAttribute(); // 0x0073BC6C-0x0073BCDC
	
		// Methods
		public override bool Equals(object obj); // 0x0073BB98-0x0073BC38
		public override int GetHashCode(); // 0x0073BC38-0x0073BC6C
	}

	[Serializable]
	public class Win32Exception : ExternalException, ISerializable // TypeDefIndex: 1614
	{
		// Fields
		private readonly int nativeErrorCode; // 0x44
		private static bool s_ErrorMessagesInitialized; // 0x00
		private static Dictionary<int, string> s_ErrorMessage; // 0x04
	
		// Properties
		public int NativeErrorCode { get; } // 0x0073C054-0x0073C05C 
	
		// Constructors
		public Win32Exception(); // 0x0073BCDC-0x0073BD68
		public Win32Exception(int error); // 0x0073BD68-0x0073BE00
		public Win32Exception(int error, string message); // 0x0073BF84-0x0073BFA8
		protected Win32Exception(SerializationInfo info, StreamingContext context); // 0x0073BFA8-0x0073C054
		static Win32Exception(); // 0x0073E01C-0x0073E0BC
	
		// Methods
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0073C05C-0x0073C158
		internal static string GetErrorMessage(int error); // 0x0073BE00-0x0073BF84
		private static void InitializeErrorMessages(); // 0x0073C158-0x0073E01C
	}

	public abstract class BaseNumberConverter : TypeConverter // TypeDefIndex: 1615
	{
		// Constructors
		protected BaseNumberConverter(); // 0x0073A9A4-0x0073AA28
	}
}

namespace System.Security.Authentication
{
	[Serializable]
	public class AuthenticationException : SystemException // TypeDefIndex: 1616
	{
		// Constructors
		public AuthenticationException(); // 0x0058DE48-0x0058DEBC
		public AuthenticationException(string message, Exception innerException); // 0x0058DEBC-0x0058DEC4
		protected AuthenticationException(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x0058DEC4-0x0058DEE4
	}

	[Flags] // 0x0014720C-0x0014721C
	public enum SslProtocols // TypeDefIndex: 1617
	{
		None = 0,
		Ssl2 = 12,
		Ssl3 = 48,
		Tls = 192,
		Default = 240,
		Tls11 = 768,
		Tls12 = 3072
	}
}

namespace System.Security.Cryptography
{
	public enum OidGroup // TypeDefIndex: 1618
	{
		All = 0,
		HashAlgorithm = 1,
		EncryptionAlgorithm = 2,
		PublicKeyAlgorithm = 3,
		SignatureAlgorithm = 4,
		Attribute = 5,
		ExtensionOrAttribute = 6,
		EnhancedKeyUsage = 7,
		Policy = 8,
		Template = 9,
		KeyDerivationFunction = 10
	}

	public sealed class Oid // TypeDefIndex: 1619
	{
		// Fields
		private string m_value; // 0x08
		private string m_friendlyName; // 0x0C
		private OidGroup m_group; // 0x10
	
		// Properties
		public string Value { get; set; } // 0x0058E488-0x0058E490 0x00590CF8-0x00590D00
	
		// Constructors
		public Oid(string oid); // 0x00590C28-0x00590C64
		internal Oid(string oid, OidGroup group, bool lookupFriendlyName); // 0x00590C64-0x00590CB8
		public Oid(string value, string friendlyName); // 0x00590D00-0x00590D28
		public Oid(Oid oid); // 0x0058DF70-0x0058E040
	}

	public sealed class OidCollection : ICollection // TypeDefIndex: 1620
	{
		// Fields
		private ArrayList m_list; // 0x08
	
		// Properties
		public Oid this[int index] { get => default; } // 0x00590DE0-0x00590E88 
		public int Count { get; } // 0x00590E88-0x00590EBC 
		public bool IsSynchronized { get; } // 0x005911F0-0x005911F8 
		public object SyncRoot { get; } // 0x005911F8-0x005911FC 
	
		// Constructors
		public OidCollection(); // 0x00590D28-0x00590DA4
	
		// Methods
		public int Add(Oid oid); // 0x00590DA4-0x00590DE0
		IEnumerator IEnumerable.GetEnumerator(); // 0x00590EBC-0x00590F38
		void ICollection.CopyTo(Array array, int index); // 0x00590F60-0x005911F0
	}

	public sealed class OidEnumerator : IEnumerator // TypeDefIndex: 1621
	{
		// Fields
		private OidCollection m_oids; // 0x08
		private int m_current; // 0x0C
	
		// Properties
		object IEnumerator.Current { get; } // 0x005911FC-0x0059122C 
	
		// Constructors
		internal OidEnumerator(OidCollection oids); // 0x00590F38-0x00590F60
	
		// Methods
		public bool MoveNext(); // 0x0059122C-0x00591298
		public void Reset(); // 0x00591298-0x005912A4
	}

	internal static class CAPI // TypeDefIndex: 1622
	{
		// Methods
		public static string CryptFindOIDInfoNameFromKey(string key, OidGroup oidGroup); // 0x0058F9C4-0x00590304
		public static string CryptFindOIDInfoKeyFromName(string name, OidGroup oidGroup); // 0x00590304-0x00590C28
	}

	internal enum AsnDecodeStatus // TypeDefIndex: 1623
	{
		NotDecoded = -1,
		Ok = 0,
		BadAsn = 1,
		BadTag = 2,
		BadLength = 3,
		InformationNotAvailable = 4
	}

	public class AsnEncodedData // TypeDefIndex: 1624
	{
		// Fields
		internal Oid _oid; // 0x08
		internal byte[] _raw; // 0x0C
	
		// Properties
		public Oid Oid { set; } // 0x0058DEEC-0x0058DF70
		public byte[] RawData { get; set; } // 0x0058E040-0x0058E048 0x0058E048-0x0058E1A0
	
		// Constructors
		protected AsnEncodedData(); // 0x0058DEE4-0x0058DEEC
	
		// Methods
		public virtual void CopyFrom(AsnEncodedData asnEncodedData); // 0x0058E1A0-0x0058E2DC
		internal virtual string ToString(bool multiLine); // 0x0058E2DC-0x0058E488
		internal string Default(bool multiLine); // 0x0058F4DC-0x0058F664
		internal string BasicConstraintsExtension(bool multiLine); // 0x0058E490-0x0058E5D8
		internal string EnhancedKeyUsageExtension(bool multiLine); // 0x0058E5D8-0x0058E720
		internal string KeyUsageExtension(bool multiLine); // 0x0058E720-0x0058E868
		internal string SubjectKeyIdentifierExtension(bool multiLine); // 0x0058E868-0x0058E9B0
		internal string SubjectAltName(bool multiLine); // 0x0058E9B0-0x0058EEA0
		internal string NetscapeCertType(bool multiLine); // 0x0058EEA0-0x0058F4DC
	}
}

namespace System.Security.Cryptography.X509Certificates
{
	public enum StoreLocation // TypeDefIndex: 1625
	{
		CurrentUser = 1,
		LocalMachine = 2
	}

	[Flags] // 0x00147250-0x00147260
	public enum X509ChainStatusFlags // TypeDefIndex: 1626
	{
		NoError = 0,
		NotTimeValid = 1,
		NotTimeNested = 2,
		Revoked = 4,
		NotSignatureValid = 8,
		NotValidForUsage = 16,
		UntrustedRoot = 32,
		RevocationStatusUnknown = 64,
		Cyclic = 128,
		InvalidExtension = 256,
		InvalidPolicyConstraints = 512,
		InvalidBasicConstraints = 1024,
		InvalidNameConstraints = 2048,
		HasNotSupportedNameConstraint = 4096,
		HasNotDefinedNameConstraint = 8192,
		HasNotPermittedNameConstraint = 16384,
		HasExcludedNameConstraint = 32768,
		PartialChain = 65536,
		CtlNotTimeValid = 131072,
		CtlNotSignatureValid = 262144,
		CtlNotValidForUsage = 524288,
		HasWeakSignature = 1048576,
		OfflineRevocation = 16777216,
		NoIssuanceChainPolicy = 33554432,
		ExplicitDistrust = 67108864,
		HasNotSupportedCriticalExtension = 134217728
	}

	[Flags] // 0x00147260-0x00147270
	public enum X509KeyUsageFlags // TypeDefIndex: 1627
	{
		None = 0,
		EncipherOnly = 1,
		CrlSign = 2,
		KeyCertSign = 4,
		KeyAgreement = 8,
		DataEncipherment = 16,
		KeyEncipherment = 32,
		NonRepudiation = 64,
		DigitalSignature = 128,
		DecipherOnly = 32768
	}

	public enum X509RevocationFlag // TypeDefIndex: 1628
	{
		EndCertificateOnly = 0,
		EntireChain = 1,
		ExcludeRoot = 2
	}

	public enum X509RevocationMode // TypeDefIndex: 1629
	{
		NoCheck = 0,
		Online = 1,
		Offline = 2
	}

	public enum X509SubjectKeyIdentifierHashAlgorithm // TypeDefIndex: 1630
	{
		Sha1 = 0,
		ShortSha1 = 1,
		CapiSha1 = 2
	}

	[Flags] // 0x00147270-0x00147280
	public enum X509VerificationFlags // TypeDefIndex: 1631
	{
		NoFlag = 0,
		IgnoreNotTimeValid = 1,
		IgnoreCtlNotTimeValid = 2,
		IgnoreNotTimeNested = 4,
		IgnoreInvalidBasicConstraints = 8,
		AllowUnknownCertificateAuthority = 16,
		IgnoreWrongUsage = 32,
		IgnoreInvalidName = 64,
		IgnoreInvalidPolicy = 128,
		IgnoreEndRevocationUnknown = 256,
		IgnoreCtlSignerRevocationUnknown = 512,
		IgnoreCertificateAuthorityRevocationUnknown = 1024,
		IgnoreRootRevocationUnknown = 2048,
		AllFlags = 4095
	}

	internal class X509Utils // TypeDefIndex: 1632
	{
		// Methods
		internal static string FindOidInfo(uint keyType, string keyValue, OidGroup oidGroup); // 0x00596704-0x00596854
		internal static string FindOidInfoWithFallback(uint key, string value, OidGroup group); // 0x00590CB8-0x00590CF8
	}

	public sealed class PublicKey // TypeDefIndex: 1633
	{
		// Fields
		private AsnEncodedData _keyValue; // 0x08
		private AsnEncodedData _params; // 0x0C
		private Oid _oid; // 0x10
		private static byte[] Empty; // 0x00
	
		// Properties
		public AsnEncodedData EncodedKeyValue { get; } // 0x005912A4-0x005912AC 
		public AsnEncodedData EncodedParameters { get; } // 0x005912AC-0x005912B4 
		public Oid Oid { get; } // 0x005912B4-0x005912BC 
	
		// Constructors
		static PublicKey(); // 0x005912BC-0x00591334
	}

	public sealed class X509BasicConstraintsExtension : System.Security.Cryptography.X509Certificates.X509Extension // TypeDefIndex: 1634
	{
		// Fields
		internal const string oid = "2.5.29.19"; // Metadata: 0x00219802
		internal const string friendlyName = "Basic Constraints"; // Metadata: 0x0021980F
		private bool _certificateAuthority; // 0x11
		private bool _hasPathLengthConstraint; // 0x12
		private int _pathLengthConstraint; // 0x14
		private AsnDecodeStatus _status; // 0x18
	
		// Properties
		public bool CertificateAuthority { get; } // 0x00591954-0x00591A08 
		public bool HasPathLengthConstraint { get; } // 0x00591A08-0x00591ABC 
		public int PathLengthConstraint { get; } // 0x00591ABC-0x00591B70 
	
		// Constructors
		public X509BasicConstraintsExtension(); // 0x00591334-0x005913DC
		public X509BasicConstraintsExtension(AsnEncodedData encodedBasicConstraints, bool critical); // 0x0058F664-0x0058F73C
		public X509BasicConstraintsExtension(bool certificateAuthority, bool hasPathLengthConstraint, int pathLengthConstraint, bool critical); // 0x0059164C-0x00591790
	
		// Methods
		public override void CopyFrom(AsnEncodedData asnEncodedData); // 0x00591B70-0x00591D54
		internal AsnDecodeStatus Decode(byte[] extension); // 0x005913EC-0x0059164C
		internal byte[] Encode(); // 0x00591790-0x00591954
		internal override string ToString(bool multiLine); // 0x00591D5C-0x00592044
	}

	[DefaultMember] // 0x00147280-0x001472B4
	public class X509Certificate2Collection : System.Security.Cryptography.X509Certificates.X509CertificateCollection // TypeDefIndex: 1635
	{
		// Fields
		private static string[] newline_split; // 0x00
	
		// Constructors
		static X509Certificate2Collection(); // 0x0059217C-0x00592264
	}

	internal abstract class X509Certificate2Impl : X509CertificateImpl // TypeDefIndex: 1636
	{
		// Properties
		internal abstract X509CertificateImplCollection IntermediateCertificates { get; }
	}

	[Serializable]
	[DefaultMember] // 0x001472B4-0x001472E8
	public class X509CertificateCollection : CollectionBase // TypeDefIndex: 1637
	{
		// Nested types
		public class X509CertificateEnumerator : IEnumerator // TypeDefIndex: 1638
		{
			// Fields
			private IEnumerator enumerator; // 0x08
	
			// Properties
			public System.Security.Cryptography.X509Certificates.X509Certificate Current { get; } // 0x00592400-0x00592580 
			object IEnumerator.Current { get; } // 0x00592580-0x00592658 
	
			// Constructors
			public X509CertificateEnumerator(X509CertificateCollection mappings); // 0x005922DC-0x005923C4
	
			// Methods
			bool IEnumerator.MoveNext(); // 0x00592658-0x00592730
			void IEnumerator.Reset(); // 0x00592730-0x00592808
			public bool MoveNext(); // 0x00592808-0x005928E0
		}
	
		// Constructors
		public X509CertificateCollection(); // 0x00592264-0x0059226C
	
		// Methods
		public new X509CertificateEnumerator GetEnumerator(); // 0x0059226C-0x005922DC
		public override int GetHashCode(); // 0x005923C4-0x00592400
	}

	internal class X509CertificateImplCollection : IDisposable // TypeDefIndex: 1639
	{
		// Fields
		private List<X509CertificateImpl> list; // 0x08
	
		// Properties
		public int Count { get; } // 0x005928E0-0x00592958 
		public X509CertificateImpl this[int index] { get => default; } // 0x00592958-0x005929D8 
	
		// Methods
		public void Dispose(); // 0x005929D8-0x00592A74
		protected virtual void Dispose(bool disposing); // 0x00592A74-0x00592CA0
		~X509CertificateImplCollection(); // 0x00592CA0-0x00592D18
	}

	public class X509Chain : IDisposable // TypeDefIndex: 1640
	{
		// Fields
		private X509ChainImpl impl; // 0x08
	
		// Properties
		internal X509ChainImpl Impl { get; } // 0x00592D18-0x00592D34 
		public X509ChainPolicy ChainPolicy { set; } // 0x00592E80-0x00592EC8
	
		// Constructors
		public X509Chain(); // 0x00592DC4-0x00592DE8
		public X509Chain(bool useMachineContext); // 0x00592DE8-0x00592E10
	
		// Methods
		public void Dispose(); // 0x00592EC8-0x00592F64
		protected virtual void Dispose(bool disposing); // 0x00592F64-0x00592F8C
		~X509Chain(); // 0x00593028-0x005930A0
	}

	[DefaultMember] // 0x0014731C-0x00147350
	public sealed class X509ChainElementCollection : ICollection // TypeDefIndex: 1641
	{
		// Fields
		private ArrayList _list; // 0x08
	
		// Properties
		public int Count { get; } // 0x0059311C-0x00593150 
		public bool IsSynchronized { get; } // 0x00593150-0x00593184 
		public object SyncRoot { get; } // 0x00593184-0x005931B8 
	
		// Constructors
		internal X509ChainElementCollection(); // 0x005930A0-0x0059311C
	
		// Methods
		void ICollection.CopyTo(Array array, int index); // 0x005931B8-0x005931FC
		IEnumerator IEnumerable.GetEnumerator(); // 0x005931FC-0x00593270
	}

	public sealed class X509ChainElementEnumerator : IEnumerator // TypeDefIndex: 1642
	{
		// Fields
		private IEnumerator enumerator; // 0x08
	
		// Properties
		object IEnumerator.Current { get; } // 0x00593358-0x00593430 
	
		// Constructors
		internal X509ChainElementEnumerator(IEnumerable enumerable); // 0x00593270-0x00593358
	
		// Methods
		public bool MoveNext(); // 0x00593430-0x00593508
		public void Reset(); // 0x00593508-0x005935E0
	}

	internal abstract class X509ChainImpl : IDisposable // TypeDefIndex: 1643
	{
		// Properties
		public abstract bool IsValid { get; }
		public abstract X509ChainPolicy ChainPolicy { set; }
	
		// Constructors
		protected X509ChainImpl(); // 0x0059365C-0x00593664
	
		// Methods
		public void Dispose(); // 0x00592F8C-0x00593028
		protected virtual void Dispose(bool disposing); // 0x005935E0-0x005935E4
		~X509ChainImpl(); // 0x005935E4-0x0059365C
	}

	internal class X509ChainImplMono : X509ChainImpl // TypeDefIndex: 1644
	{
		// Fields
		private StoreLocation location; // 0x08
		private X509ChainElementCollection elements; // 0x0C
		private X509ChainPolicy policy; // 0x10
		private static X509ChainStatus[] Empty; // 0x00
	
		// Properties
		public override bool IsValid { get; } // 0x0059374C-0x00593754 
		public override X509ChainPolicy ChainPolicy { set; } // 0x00593754-0x0059375C
	
		// Constructors
		public X509ChainImplMono(bool useMachineContext); // 0x00593664-0x0059372C
		static X509ChainImplMono(); // 0x0059375C-0x005937D4
	}

	public sealed class X509ChainPolicy // TypeDefIndex: 1645
	{
		// Fields
		private OidCollection apps; // 0x08
		private OidCollection cert; // 0x0C
		private System.Security.Cryptography.X509Certificates.X509CertificateCollection store; // 0x10
		private X509Certificate2Collection store2; // 0x14
		private X509RevocationFlag rflag; // 0x18
		private X509RevocationMode mode; // 0x1C
		private TimeSpan timeout; // 0x20
		private X509VerificationFlags vflags; // 0x28
		private DateTime vtime; // 0x30
	
		// Constructors
		public X509ChainPolicy(); // 0x0059372C-0x0059374C
		internal X509ChainPolicy(System.Security.Cryptography.X509Certificates.X509CertificateCollection store); // 0x00593900-0x00593990
	
		// Methods
		public void Reset(); // 0x005937D4-0x00593900
	}

	public struct X509ChainStatus // TypeDefIndex: 1646
	{
		// Fields
		private X509ChainStatusFlags status; // 0x00
		private string info; // 0x04
	}

	public sealed class X509EnhancedKeyUsageExtension : System.Security.Cryptography.X509Certificates.X509Extension // TypeDefIndex: 1647
	{
		// Fields
		private OidCollection _enhKeyUsage; // 0x14
		private AsnDecodeStatus _status; // 0x18
	
		// Constructors
		public X509EnhancedKeyUsageExtension(AsnEncodedData encodedEnhancedKeyUsages, bool critical); // 0x0058F73C-0x0058F814
	
		// Methods
		public override void CopyFrom(AsnEncodedData asnEncodedData); // 0x00593C84-0x00593E68
		internal AsnDecodeStatus Decode(byte[] extension); // 0x00593990-0x00593C84
		internal override string ToString(bool multiLine); // 0x00593E68-0x00594228
	}

	public class X509Extension : AsnEncodedData // TypeDefIndex: 1648
	{
		// Fields
		private bool _critical; // 0x10
	
		// Properties
		public bool Critical { get; set; } // 0x00591D54-0x00591D5C 0x005913E4-0x005913EC
	
		// Constructors
		protected X509Extension(); // 0x005913DC-0x005913E4
	
		// Methods
		public override void CopyFrom(AsnEncodedData asnEncodedData); // 0x00594228-0x0059437C
		internal string FormatUnkownData(byte[] data); // 0x00592044-0x0059217C
	}

	internal static class X509Helper2 // TypeDefIndex: 1649
	{
		// Methods
		internal static X509ChainImpl CreateChainImpl(bool useMachineContext); // 0x00592E10-0x00592E80
		public static bool IsValid(X509ChainImpl impl); // 0x0059437C-0x00594398
		internal static void ThrowIfContextInvalid(X509ChainImpl impl); // 0x00592D34-0x00592DC4
		internal static Exception GetInvalidChainContextException(); // 0x00594398-0x00594424
	}

	public sealed class X509KeyUsageExtension : System.Security.Cryptography.X509Certificates.X509Extension // TypeDefIndex: 1650
	{
		// Fields
		internal const string oid = "2.5.29.15"; // Metadata: 0x00219824
		internal const string friendlyName = "Key Usage"; // Metadata: 0x00219831
		internal const X509KeyUsageFlags all = X509KeyUsageFlags.None | X509KeyUsageFlags.EncipherOnly | X509KeyUsageFlags.CrlSign | X509KeyUsageFlags.KeyCertSign | X509KeyUsageFlags.KeyAgreement | X509KeyUsageFlags.DataEncipherment | X509KeyUsageFlags.KeyEncipherment | X509KeyUsageFlags.NonRepudiation | X509KeyUsageFlags.DigitalSignature | X509KeyUsageFlags.DecipherOnly; // Metadata: 0x0021983E
		private X509KeyUsageFlags _keyUsages; // 0x14
		private AsnDecodeStatus _status; // 0x18
	
		// Properties
		public X509KeyUsageFlags KeyUsages { get; } // 0x00594A14-0x00594AC8 
	
		// Constructors
		public X509KeyUsageExtension(); // 0x00594424-0x005944CC
		public X509KeyUsageExtension(AsnEncodedData encodedKeyUsage, bool critical); // 0x0058F814-0x0058F8EC
		public X509KeyUsageExtension(X509KeyUsageFlags keyUsages, bool critical); // 0x005946E0-0x005947BC
	
		// Methods
		public override void CopyFrom(AsnEncodedData asnEncodedData); // 0x00594AC8-0x00594CAC
		internal X509KeyUsageFlags GetValidFlags(X509KeyUsageFlags flags); // 0x005947BC-0x005947D0
		internal AsnDecodeStatus Decode(byte[] extension); // 0x005944CC-0x005946E0
		internal byte[] Encode(); // 0x005947D0-0x00594A14
		internal override string ToString(bool multiLine); // 0x00594CAC-0x005953F8
	}

	public sealed class X509SubjectKeyIdentifierExtension : System.Security.Cryptography.X509Certificates.X509Extension // TypeDefIndex: 1651
	{
		// Fields
		internal const string oid = "2.5.29.14"; // Metadata: 0x00219842
		internal const string friendlyName = "Subject Key Identifier"; // Metadata: 0x0021984F
		private byte[] _subjectKeyIdentifier; // 0x14
		private string _ski; // 0x18
		private AsnDecodeStatus _status; // 0x1C
	
		// Properties
		public string SubjectKeyIdentifier { get; } // 0x005960C0-0x00596194 
	
		// Constructors
		public X509SubjectKeyIdentifierExtension(); // 0x005953F8-0x005954A0
		public X509SubjectKeyIdentifierExtension(AsnEncodedData encodedSubjectKeyIdentifier, bool critical); // 0x0058F8EC-0x0058F9C4
		public X509SubjectKeyIdentifierExtension(byte[] subjectKeyIdentifier, bool critical); // 0x0059564C-0x0059586C
		public X509SubjectKeyIdentifierExtension(string subjectKeyIdentifier, bool critical); // 0x00595908-0x00595A94
		public X509SubjectKeyIdentifierExtension(PublicKey key, bool critical); // 0x00595BC4-0x00595BE4
		public X509SubjectKeyIdentifierExtension(PublicKey key, X509SubjectKeyIdentifierHashAlgorithm algorithm, bool critical); // 0x00595BE4-0x005960C0
	
		// Methods
		public override void CopyFrom(AsnEncodedData asnEncodedData); // 0x00596194-0x00596378
		internal static byte FromHexChar(char c); // 0x00596378-0x005963C4
		internal static byte FromHexChars(char c1, char c2); // 0x005963C4-0x0059646C
		internal static byte[] FromHex(string hex); // 0x00595A94-0x00595BC4
		internal AsnDecodeStatus Decode(byte[] extension); // 0x005954A0-0x0059564C
		internal byte[] Encode(); // 0x0059586C-0x00595908
		internal override string ToString(bool multiLine); // 0x0059646C-0x00596704
	}
}

namespace System.Net
{
	[Serializable]
	public abstract class EndPoint // TypeDefIndex: 1652
	{
		// Properties
		public virtual AddressFamily AddressFamily { get; } // 0x0057A60C-0x0057A674 
	
		// Constructors
		protected EndPoint(); // 0x0057A85C-0x0057A864
	
		// Methods
		public virtual SocketAddress Serialize(); // 0x0057A700-0x0057A768
		public virtual EndPoint Create(SocketAddress socketAddress); // 0x0057A7F4-0x0057A85C
	}

	[Serializable]
	public class IPAddress // TypeDefIndex: 1653
	{
		// Fields
		public static readonly IPAddress Any; // 0x00
		public static readonly IPAddress Loopback; // 0x04
		public static readonly IPAddress Broadcast; // 0x08
		public static readonly IPAddress None; // 0x0C
		internal const long LoopbackMask = 255; // Metadata: 0x00219869
		internal long m_Address; // 0x08
		[NonSerialized]
		internal string m_ToString; // 0x10
		public static readonly IPAddress IPv6Any; // 0x10
		public static readonly IPAddress IPv6Loopback; // 0x14
		public static readonly IPAddress IPv6None; // 0x18
		private AddressFamily m_Family; // 0x14
		private ushort[] m_Numbers; // 0x18
		private long m_ScopeId; // 0x20
		private int m_HashCode; // 0x28
		internal const int IPv4AddressBytes = 4; // Metadata: 0x00219871
		internal const int IPv6AddressBytes = 16; // Metadata: 0x00219875
		internal const int NumberOfLabels = 8; // Metadata: 0x00219879
	
		// Properties
		public AddressFamily AddressFamily { get; } // 0x00579278-0x00579280 
		public long ScopeId { get; } // 0x0057B3F0-0x0057B48C 
	
		// Constructors
		public IPAddress(long newAddress); // 0x0057A864-0x0057A94C
		public IPAddress(byte[] address, long scopeid); // 0x0057A94C-0x0057ABC8
		private IPAddress(ushort[] address, uint scopeid); // 0x0057ABC8-0x0057AC60
		internal IPAddress(int newAddress); // 0x0057AC60-0x0057ACE8
		static IPAddress(); // 0x0057BE3C-0x0057C008
	
		// Methods
		public static bool TryParse(string ipString, out IPAddress address); // 0x005797E4-0x00579878
		public static IPAddress Parse(string ipString); // 0x0057915C-0x005791E0
		private static IPAddress InternalParse(string ipString, bool tryParse); // 0x0057ACE8-0x0057B14C
		public byte[] GetAddressBytes(); // 0x0057B1D8-0x0057B3F0
		public override string ToString(); // 0x0057B48C-0x0057BA64
		internal bool Equals(object comparandObj, bool compareScopeId); // 0x0057BA64-0x0057BC20
		public override bool Equals(object comparand); // 0x0057BC20-0x0057BC28
		public override int GetHashCode(); // 0x0057BC28-0x0057BD10
		public IPAddress MapToIPv6(); // 0x0057BD10-0x0057BE3C
	}

	[Serializable]
	public class IPEndPoint : EndPoint // TypeDefIndex: 1654
	{
		// Fields
		private IPAddress m_Address; // 0x08
		private int m_Port; // 0x0C
		internal static IPEndPoint Any; // 0x00
		internal static IPEndPoint IPv6Any; // 0x04
	
		// Properties
		public override AddressFamily AddressFamily { get; } // 0x0057C008-0x0057C02C 
		public IPAddress Address { get; } // 0x0057C17C-0x0057C184 
		public int Port { get; } // 0x0057C184-0x0057C18C 
	
		// Constructors
		public IPEndPoint(IPAddress address, int port); // 0x0057C02C-0x0057C168
		static IPEndPoint(); // 0x0057CB2C-0x0057CDB0
	
		// Methods
		public override string ToString(); // 0x0057C18C-0x0057C284
		public override SocketAddress Serialize(); // 0x0057C284-0x0057C300
		public override EndPoint Create(SocketAddress socketAddress); // 0x0057C384-0x0057C788
		public override bool Equals(object comparand); // 0x0057C8F8-0x0057CAEC
		public override int GetHashCode(); // 0x0057CAEC-0x0057CB2C
	}

	public class IPHostEntry // TypeDefIndex: 1655
	{
		// Fields
		private string hostName; // 0x08
		private string[] aliases; // 0x0C
		private IPAddress[] addressList; // 0x10
		internal bool isTrustedHost; // 0x14
	
		// Properties
		public string HostName { set; } // 0x0057914C-0x00579154
		public string[] Aliases { set; } // 0x00579154-0x0057915C
		public IPAddress[] AddressList { get; set; } // 0x00579DB4-0x00579DBC 0x00579318-0x00579320
	
		// Constructors
		public IPHostEntry(); // 0x0057913C-0x0057914C
	}

	internal static class ValidationHelper // TypeDefIndex: 1656
	{
		// Fields
		public static string[] EmptyArray; // 0x00
		internal static readonly char[] InvalidMethodChars; // 0x04
		internal static readonly char[] InvalidParamChars; // 0x08
	
		// Constructors
		static ValidationHelper(); // 0x0058DD54-0x0058DE48
	
		// Methods
		public static bool ValidateTcpPort(int port); // 0x0057C168-0x0057C17C
	}

	internal static class ExceptionHelper // TypeDefIndex: 1657
	{
		// Properties
		internal static NotImplementedException MethodNotImplementedException { get; } // 0x0057A768-0x0057A7F4 
		internal static NotImplementedException PropertyNotImplementedException { get; } // 0x0057A674-0x0057A700 
	}

	public class SocketAddress // TypeDefIndex: 1658
	{
		// Fields
		internal int m_Size; // 0x08
		internal byte[] m_Buffer; // 0x0C
		private bool m_changed; // 0x10
		private int m_hash; // 0x14
	
		// Properties
		public AddressFamily Family { get; } // 0x0057C788-0x0057C804 
		public int Size { get; } // 0x0057C804-0x0057C80C 
		public byte this[int offset] { get => default; } // 0x0057E20C-0x0057E2E8 
	
		// Constructors
		public SocketAddress(AddressFamily family, int size); // 0x0057E2E8-0x0057E45C
		internal SocketAddress(IPAddress ipAddress); // 0x0057E45C-0x0057E900
		internal SocketAddress(IPAddress ipaddress, int port); // 0x0057C300-0x0057C384
	
		// Methods
		internal IPAddress GetIPAddress(); // 0x0057E900-0x0057EC5C
		internal IPEndPoint GetIPEndPoint(); // 0x0057C80C-0x0057C8F8
		public override bool Equals(object comparand); // 0x0057EC5C-0x0057ED7C
		public override int GetHashCode(); // 0x0057ED7C-0x0057EF80
		public override string ToString(); // 0x0057EF80-0x0057F3D4
	}

	internal static class Logging // TypeDefIndex: 1659
	{
		// Fields
		internal static readonly bool On; // 0x00
	
		// Constructors
		static Logging(); // 0x0057CFF8-0x0057CFFC
	}

	public static class Dns // TypeDefIndex: 1660
	{
		// Nested types
		private delegate IPAddress[] GetHostAddressesCallback(string hostName); // TypeDefIndex: 1661; 0x00579DBC-0x0057A60C
	
		// Constructors
		static Dns(); // 0x0057872C-0x00578730
	
		// Methods
		public static IAsyncResult BeginGetHostAddresses(string hostNameOrAddress, AsyncCallback requestCallback, object state); // 0x00578730-0x005788F8
		public static IPAddress[] EndGetHostAddresses(IAsyncResult asyncResult); // 0x00578938-0x00578BFC
		private static bool GetHostByName_internal(string host, out string h_name, out string[] h_aliases, out string[] h_addr_list, int hint); // 0x00578C08-0x00578C0C
		private static bool GetHostByAddr_internal(string addr, out string h_name, out string[] h_aliases, out string[] h_addr_list, int hint); // 0x00578C0C-0x00578C10
		private static void Error_11001(string hostName); // 0x00578C10-0x00578CC0
		private static IPHostEntry hostent_to_IPHostEntry(string originalHostName, string h_name, string[] h_aliases, string[] h_addrlist); // 0x00578D54-0x0057913C
		private static IPHostEntry GetHostByAddressFromString(string address, bool parse); // 0x00579320-0x00579504
		public static IPHostEntry GetHostEntry(string hostNameOrAddress); // 0x005795C8-0x005797E4
		public static IPHostEntry GetHostEntry(IPAddress address); // 0x00579878-0x00579974
		public static IPAddress[] GetHostAddresses(string hostNameOrAddress); // 0x00579B34-0x00579DB4
		[Obsolete] // 0x00147D30-0x00147D78
		public static IPHostEntry GetHostByName(string hostName); // 0x00579974-0x00579B34
	}

	internal struct IPv6AddressFormatter // TypeDefIndex: 1662
	{
		// Fields
		private ushort[] address; // 0x00
		private long scopeId; // 0x08
	
		// Constructors
		public IPv6AddressFormatter(ushort[] addr, long scopeId); // 0x0057CDB0-0x0057CDBC
	
		// Methods
		private static ushort SwapUShort(ushort number); // 0x0057CDBC-0x0057CE4C
		private uint AsIPv4Int(); // 0x0057CE4C-0x0057CF04
		private bool IsIPv4Compatible(); // 0x0057CF04-0x0057CFE8
		private bool IsIPv4Mapped(); // 0x0057CFE8-0x0057CFF0
		public override string ToString(); // 0x0057CFF0-0x0057CFF8
	}
}

namespace System.Net.Sockets
{
	[Serializable]
	public class SocketException : Win32Exception // TypeDefIndex: 1663
	{
		// Fields
		[NonSerialized]
		private EndPoint m_EndPoint; // 0x48
	
		// Properties
		public override int ErrorCode { get; } // 0x0058D5C8-0x0058D5D0 
		public override string Message { get; } // 0x0058D5D0-0x0058D688 
		public SocketError SocketErrorCode { get; } // 0x00589E8C-0x00589E94 
	
		// Constructors
		public SocketException(); // 0x00582D48-0x00582DD8
		internal SocketException(int error, string message); // 0x00578CC0-0x00578D54
		public SocketException(int errorCode); // 0x00582420-0x005824AC
		internal SocketException(SocketError socketError); // 0x0057B14C-0x0057B1D8
		protected SocketException(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x0058D520-0x0058D5C8
	
		// Methods
		private static int WSAGetLastError_internal(); // 0x0058D51C-0x0058D520
	}

	public enum AddressFamily // TypeDefIndex: 1664
	{
		Unknown = -1,
		Unspecified = 0,
		Unix = 1,
		InterNetwork = 2,
		ImpLink = 3,
		Pup = 4,
		Chaos = 5,
		NS = 6,
		Ipx = 6,
		Iso = 7,
		Osi = 7,
		Ecma = 8,
		DataKit = 9,
		Ccitt = 10,
		Sna = 11,
		DecNet = 12,
		DataLink = 13,
		Lat = 14,
		HyperChannel = 15,
		AppleTalk = 16,
		NetBios = 17,
		VoiceView = 18,
		FireFox = 19,
		Banyan = 21,
		Atm = 22,
		InterNetworkV6 = 23,
		Cluster = 24,
		Ieee12844 = 25,
		Irda = 26,
		NetworkDesigners = 28,
		Max = 29
	}

	public enum IPProtectionLevel // TypeDefIndex: 1665
	{
		Unspecified = -1,
		Unrestricted = 10,
		EdgeRestricted = 20,
		Restricted = 30
	}

	public class LingerOption // TypeDefIndex: 1666
	{
		// Fields
		private bool enabled; // 0x08
		private int lingerTime; // 0x0C
	
		// Properties
		public bool Enabled { set; } // 0x0057F3FC-0x0057F404
		public int LingerTime { set; } // 0x0057F404-0x0057F40C
	
		// Constructors
		public LingerOption(bool enable, int seconds); // 0x0057F3D4-0x0057F3FC
	}

	public class MulticastOption // TypeDefIndex: 1667
	{
	}

	public class NetworkStream : Stream // TypeDefIndex: 1668
	{
		// Fields
		private Socket m_StreamSocket; // 0x14
		private bool m_Readable; // 0x18
		private bool m_Writeable; // 0x19
		private bool m_OwnsSocket; // 0x1A
		private int m_CloseTimeout; // 0x1C
		private bool m_CleanedUp; // 0x20
	
		// Properties
		public override bool CanRead { get; } // 0x0057F40C-0x0057F414 
		public override bool CanSeek { get; } // 0x0057F414-0x0057F41C 
		public override bool CanWrite { get; } // 0x0057F41C-0x0057F424 
		public override long Length { get; } // 0x0057F424-0x0057F4CC 
		public override long Position { get; set; } // 0x0057F4CC-0x0057F574 0x0057F574-0x0057F61C
	
		// Methods
		public override long Seek(long offset, SeekOrigin origin); // 0x0057F61C-0x0057F6C4
		public override int Read([In, Out] byte[] buffer, int offset, int size); // 0x0057F6C4-0x0057FBB8
		public override void Write(byte[] buffer, int offset, int size); // 0x0057FC90-0x00580184
		protected override void Dispose(bool disposing); // 0x0058025C-0x005802DC
		~NetworkStream(); // 0x00580398-0x00580410
		public override IAsyncResult BeginRead(byte[] buffer, int offset, int size, AsyncCallback callback, object state); // 0x00580410-0x00580914
		public override int EndRead(IAsyncResult asyncResult); // 0x00580A04-0x00580DC0
		public override IAsyncResult BeginWrite(byte[] buffer, int offset, int size, AsyncCallback callback, object state); // 0x00580E7C-0x00581380
		public override void EndWrite(IAsyncResult asyncResult); // 0x00581470-0x0058182C
		public override void Flush(); // 0x005818E8-0x005818EC
	}

	public enum ProtocolType // TypeDefIndex: 1669
	{
		Unknown = -1,
		IP = 0,
		IPv6HopByHopOptions = 0,
		Unspecified = 0,
		Icmp = 1,
		Igmp = 2,
		Ggp = 3,
		IPv4 = 4,
		Tcp = 6,
		Pup = 12,
		Udp = 17,
		Idp = 22,
		IPv6 = 41,
		IPv6RoutingHeader = 43,
		IPv6FragmentHeader = 44,
		IPSecEncapsulatingSecurityPayload = 50,
		IPSecAuthenticationHeader = 51,
		IcmpV6 = 58,
		IPv6NoNextHeader = 59,
		IPv6DestinationOptions = 60,
		ND = 77,
		Raw = 255,
		Ipx = 1000,
		Spx = 1256,
		SpxII = 1257
	}

	public enum SelectMode // TypeDefIndex: 1670
	{
		SelectRead = 0,
		SelectWrite = 1,
		SelectError = 2
	}

	public class Socket : IDisposable // TypeDefIndex: 1671
	{
		// Fields
		private static object s_InternalSyncObject; // 0x00
		internal static bool s_SupportsIPv4; // 0x04
		internal static bool s_SupportsIPv6; // 0x05
		internal static bool s_OSSupportsIPv6; // 0x06
		internal static bool s_Initialized; // 0x07
		private static bool s_LoggingEnabled; // 0x08
		private bool is_closed; // 0x08
		private bool is_listening; // 0x09
		private bool useOverlappedIO; // 0x0A
		private int linger_timeout; // 0x0C
		private AddressFamily addressFamily; // 0x10
		private SocketType socketType; // 0x14
		private ProtocolType protocolType; // 0x18
		internal SafeSocketHandle m_Handle; // 0x1C
		internal EndPoint seed_endpoint; // 0x20
		internal SemaphoreSlim ReadSem; // 0x24
		internal SemaphoreSlim WriteSem; // 0x28
		internal bool is_blocking; // 0x2C
		internal bool is_bound; // 0x2D
		internal bool is_connected; // 0x2E
		private int m_IntCleanedUp; // 0x30
		internal bool connect_in_progress; // 0x34
		private static AsyncCallback AcceptAsyncCallback; // 0x0C
		private static IOAsyncCallback BeginAcceptCallback; // 0x10
		private static IOAsyncCallback BeginAcceptReceiveCallback; // 0x14
		private static AsyncCallback ConnectAsyncCallback; // 0x18
		private static IOAsyncCallback BeginConnectCallback; // 0x1C
		private static AsyncCallback DisconnectAsyncCallback; // 0x20
		private static IOAsyncCallback BeginDisconnectCallback; // 0x24
		private static AsyncCallback ReceiveAsyncCallback; // 0x28
		private static IOAsyncCallback BeginReceiveCallback; // 0x2C
		private static IOAsyncCallback BeginReceiveGenericCallback; // 0x30
		private static AsyncCallback ReceiveFromAsyncCallback; // 0x34
		private static IOAsyncCallback BeginReceiveFromCallback; // 0x38
		private static AsyncCallback SendAsyncCallback; // 0x3C
		private static IOAsyncCallback BeginSendGenericCallback; // 0x40
		private static AsyncCallback SendToAsyncCallback; // 0x44
	
		// Properties
		[Obsolete] // 0x00147E00-0x00147E34
		public static bool SupportsIPv4 { get; } // 0x00579280-0x00579318 
		public static bool OSSupportsIPv4 { get; } // 0x00583050-0x005830E8 
		[Obsolete] // 0x00147E34-0x00147E68
		public static bool SupportsIPv6 { get; } // 0x005791E0-0x00579278 
		public static bool OSSupportsIPv6 { get; } // 0x005830E8-0x00583180 
		public IntPtr Handle { get; } // 0x00583180-0x005831AC 
		public AddressFamily AddressFamily { get; } // 0x005831AC-0x005831B4 
		public SocketType SocketType { get; } // 0x005831B4-0x005831BC 
		public ProtocolType ProtocolType { get; } // 0x005831BC-0x005831C4 
		public bool DontFragment { set; } // 0x005831C4-0x005832A0
		public bool DualMode { get; set; } // 0x005833F0-0x005834E0 0x00583780-0x0058385C
		private bool IsDualMode { get; } // 0x0058385C-0x00583870 
		private static object InternalSyncObject { get; } // 0x00585314-0x0058545C 
		internal bool CleanedUp { get; } // 0x0058545C-0x0058546C 
		public bool Blocking { get; set; } // 0x005858AC-0x005858B4 0x005858B4-0x005859AC
		public bool NoDelay { set; } // 0x00585860-0x005858AC
		internal static int FamilyHint { get; } // 0x00579504-0x005795C8 
	
		// Nested types
		private struct WSABUF // TypeDefIndex: 1672
		{
			// Fields
			public int len; // 0x00
			public IntPtr buf; // 0x04
		}
	
		[Serializable]
		[CompilerGenerated] // 0x00147384-0x00147394
		private sealed class <>c // TypeDefIndex: 1673
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static IOAsyncCallback <>9__241_0; // 0x04
	
			// Constructors
			static <>c(); // 0x005897DC-0x00589850
			public <>c(); // 0x00589850-0x00589858
	
			// Methods
			internal void <BeginSend>b__241_0(IOAsyncResult s); // 0x00589858-0x00589960
			internal void <.cctor>b__309_0(IAsyncResult ares); // 0x00589960-0x00589E84
			internal void <.cctor>b__309_1(IOAsyncResult ares); // 0x00589EB8-0x0058A094
			internal void <.cctor>b__309_2(IOAsyncResult ares); // 0x0058A09C-0x0058A394
			internal void <.cctor>b__309_3(IAsyncResult ares); // 0x0058A3A0-0x0058A814
			internal void <.cctor>b__309_4(IOAsyncResult ares); // 0x0058A814-0x0058AB84
			internal void <.cctor>b__309_5(IAsyncResult ares); // 0x0058ADEC-0x0058B260
			internal void <.cctor>b__309_6(IOAsyncResult ares); // 0x0058B260-0x0058B434
			internal void <.cctor>b__309_7(IAsyncResult ares); // 0x0058B434-0x0058B8AC
			internal void <.cctor>b__309_8(IOAsyncResult ares); // 0x0058B8B4-0x0058BB74
			internal void <.cctor>b__309_9(IOAsyncResult ares); // 0x0058BB74-0x0058BD64
			internal void <.cctor>b__309_10(IAsyncResult ares); // 0x0058BD64-0x0058C20C
			internal void <.cctor>b__309_11(IOAsyncResult ares); // 0x0058C20C-0x0058C4D4
			internal void <.cctor>b__309_12(IAsyncResult ares); // 0x0058C4D4-0x0058C94C
			internal void <.cctor>b__309_13(IOAsyncResult ares); // 0x0058C94C-0x0058CB3C
			internal void <.cctor>b__309_14(IAsyncResult ares); // 0x0058CB3C-0x0058CFB4
		}
	
		[CompilerGenerated] // 0x00147394-0x001473A4
		private sealed class <>c__DisplayClass242_0 // TypeDefIndex: 1674
		{
			// Fields
			public int sent_so_far; // 0x08
	
			// Constructors
			public <>c__DisplayClass242_0(); // 0x00588C68-0x00588C70
	
			// Methods
			internal void <BeginSendCallback>b__0(IOAsyncResult s); // 0x0058CFB4-0x0058D0C4
		}
	
		[CompilerGenerated] // 0x001473A4-0x001473B4
		private sealed class <>c__DisplayClass298_0 // TypeDefIndex: 1675
		{
			// Fields
			public Socket <>4__this; // 0x08
			public IOSelectorJob job; // 0x0C
			public IntPtr handle; // 0x10
	
			// Constructors
			public <>c__DisplayClass298_0(); // 0x00589324-0x0058932C
	
			// Methods
			internal void <QueueIOSelectorJob>b__0(Task t); // 0x0058D0C4-0x0058D128
		}
	
		// Constructors
		public Socket(AddressFamily addressFamily, SocketType socketType, ProtocolType protocolType); // 0x00582768-0x00582A14
		internal Socket(AddressFamily family, SocketType type, ProtocolType proto, SafeSocketHandle safe_handle); // 0x00585758-0x00585860
		static Socket(); // 0x00589330-0x005897DC
	
		// Methods
		public int Send(IList<ArraySegment<byte>> buffers, SocketFlags socketFlags); // 0x00583870-0x00583934
		public int Send(byte[] buffer, int offset, int size, SocketFlags socketFlags); // 0x00580184-0x0058025C
		public int Receive(byte[] buffer, int offset, int size, SocketFlags socketFlags); // 0x0057FBB8-0x0057FC90
		public int Receive(IList<ArraySegment<byte>> buffers, SocketFlags socketFlags); // 0x005843AC-0x00584470
		public void SetIPProtectionLevel(IPProtectionLevel level); // 0x00582DD8-0x00582F34
		public IAsyncResult BeginSend(byte[] buffer, int offset, int size, SocketFlags socketFlags, AsyncCallback callback, object state); // 0x00581380-0x00581470
		public int EndSend(IAsyncResult asyncResult); // 0x0058182C-0x005818E8
		public IAsyncResult BeginReceive(byte[] buffer, int offset, int size, SocketFlags socketFlags, AsyncCallback callback, object state); // 0x00580914-0x00580A04
		public int EndReceive(IAsyncResult asyncResult); // 0x00580DC0-0x00580E7C
		internal static void InitializeSockets(); // 0x00582A14-0x00582D44
		public void Dispose(); // 0x005854EC-0x00585588
		~Socket(); // 0x00585588-0x00585600
		internal void InternalShutdown(SocketShutdown how); // 0x005802DC-0x00580390
		private void SocketDefaults(); // 0x00582F34-0x00583050
		private IntPtr Socket_internal(AddressFamily family, SocketType type, ProtocolType proto, out int error); // 0x00582D44-0x00582D48
		private static void Blocking_internal(SafeSocketHandle safeHandle, bool block, out int error); // 0x00585A88-0x00585BE0
		internal static void Blocking_internal(IntPtr socket, bool block, out int error); // 0x0058210C-0x00582110
		private static bool Poll_internal(IntPtr socket, SelectMode mode, int timeout, out int error); // 0x00585C78-0x00585C7C
		public Socket Accept(); // 0x00585C7C-0x00585E14
		internal void Accept(Socket acceptSocket); // 0x00585F80-0x00586164
		public Socket EndAccept(IAsyncResult asyncResult); // 0x00586164-0x00586194
		public Socket EndAccept(out byte[] buffer, out int bytesTransferred, IAsyncResult asyncResult); // 0x00586194-0x005862F8
		private static SafeSocketHandle Accept_internal(SafeSocketHandle safeHandle, out int error, bool blocking); // 0x00585E14-0x00585F80
		private static IntPtr Accept_internal(IntPtr sock, out int error, bool blocking); // 0x00586568-0x0058656C
		public IAsyncResult BeginConnect(string host, int port, AsyncCallback requestCallback, object state); // 0x0058656C-0x00586778
		public IAsyncResult BeginConnect(IPAddress[] addresses, int port, AsyncCallback requestCallback, object state); // 0x00586778-0x00586A20
		private static void BeginMConnect(SocketAsyncResult sockares); // 0x00586A50-0x00586C54
		private static void BeginSConnect(SocketAsyncResult sockares); // 0x00586C54-0x00587240
		public void EndConnect(IAsyncResult asyncResult); // 0x0058750C-0x00587618
		private static void Connect_internal(SafeSocketHandle safeHandle, SocketAddress sa, out int error, bool blocking); // 0x0058734C-0x00587488
		private static void Connect_internal(IntPtr sock, SocketAddress sa, out int error, bool blocking); // 0x00587618-0x0058761C
		public void Disconnect(bool reuseSocket); // 0x0058761C-0x00587750
		public void EndDisconnect(IAsyncResult asyncResult); // 0x005878A8-0x005879B4
		private static void Disconnect_internal(SafeSocketHandle safeHandle, bool reuse, out int error); // 0x00587750-0x005878A8
		private static void Disconnect_internal(IntPtr sock, bool reuse, out int error); // 0x005879B4-0x005879B8
		public int Receive(byte[] buffer, int offset, int size, SocketFlags socketFlags, out SocketError errorCode); // 0x0058427C-0x005843AC
		[CLSCompliant] // 0x00147D78-0x00147D8C
		public int Receive(IList<ArraySegment<byte>> buffers, SocketFlags socketFlags, out SocketError errorCode); // 0x00584470-0x00584BE8
		public IAsyncResult BeginReceive(byte[] buffer, int offset, int size, SocketFlags socketFlags, out SocketError errorCode, AsyncCallback callback, object state); // 0x00584FD4-0x005851A8
		public int EndReceive(IAsyncResult asyncResult, out SocketError errorCode); // 0x005851A8-0x00585314
		private static unsafe int Receive_internal(SafeSocketHandle safeHandle, WSABUF* bufarray, int count, SocketFlags flags, out int error, bool blocking); // 0x00587DA8-0x00587F04
		private static unsafe int Receive_internal(IntPtr sock, WSABUF* bufarray, int count, SocketFlags flags, out int error, bool blocking); // 0x0058814C-0x00588170
		private static unsafe int Receive_internal(SafeSocketHandle safeHandle, byte* buffer, int count, SocketFlags flags, out int error, bool blocking); // 0x00587C4C-0x00587DA8
		private static unsafe int Receive_internal(IntPtr sock, byte* buffer, int count, SocketFlags flags, out int error, bool blocking); // 0x00588170-0x00588194
		internal int ReceiveFrom(byte[] buffer, int offset, int size, SocketFlags socketFlags, ref EndPoint remoteEP, out SocketError errorCode); // 0x00588194-0x00588354
		public int EndReceiveFrom(IAsyncResult asyncResult, ref EndPoint endPoint); // 0x005884B8-0x00588660
		private static unsafe int ReceiveFrom_internal(SafeSocketHandle safeHandle, byte* buffer, int count, SocketFlags flags, ref SocketAddress sockaddr, out int error, bool blocking); // 0x00588354-0x005884B8
		private static unsafe int ReceiveFrom_internal(IntPtr sock, byte* buffer, int count, SocketFlags flags, ref SocketAddress sockaddr, out int error, bool blocking); // 0x00588660-0x0058868C
		public int Send(byte[] buffer, int offset, int size, SocketFlags socketFlags, out SocketError errorCode); // 0x00584100-0x0058427C
		[CLSCompliant] // 0x00147D8C-0x00147DA0
		public int Send(IList<ArraySegment<byte>> buffers, SocketFlags socketFlags, out SocketError errorCode); // 0x00583934-0x00584100
		public IAsyncResult BeginSend(byte[] buffer, int offset, int size, SocketFlags socketFlags, out SocketError errorCode, AsyncCallback callback, object state); // 0x00584BE8-0x00584E68
		private static void BeginSendCallback(SocketAsyncResult sockares, int sent_so_far); // 0x00588944-0x00588C68
		public int EndSend(IAsyncResult asyncResult, out SocketError errorCode); // 0x00584E68-0x00584FD4
		private static unsafe int Send_internal(SafeSocketHandle safeHandle, WSABUF* bufarray, int count, SocketFlags flags, out int error, bool blocking); // 0x005887E8-0x00588944
		private static unsafe int Send_internal(IntPtr sock, WSABUF* bufarray, int count, SocketFlags flags, out int error, bool blocking); // 0x00588C80-0x00588CA4
		private static unsafe int Send_internal(SafeSocketHandle safeHandle, byte* buffer, int count, SocketFlags flags, out int error, bool blocking); // 0x0058868C-0x005887E8
		private static unsafe int Send_internal(IntPtr sock, byte* buffer, int count, SocketFlags flags, out int error, bool blocking); // 0x00588CA4-0x00588CC8
		public int EndSendTo(IAsyncResult asyncResult); // 0x00588CC8-0x00588DEC
		public object GetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName); // 0x005834E0-0x00583780
		private static void GetSocketOption_obj_internal(SafeSocketHandle safeHandle, SocketOptionLevel level, SocketOptionName name, out object obj_val, out int error); // 0x00588DEC-0x00588F54
		private static void GetSocketOption_obj_internal(IntPtr socket, SocketOptionLevel level, SocketOptionName name, out object obj_val, out int error); // 0x00588F54-0x00588F58
		public void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, int optionValue); // 0x005832A0-0x005833F0
		private static void SetSocketOption_internal(SafeSocketHandle safeHandle, SocketOptionLevel level, SocketOptionName name, object obj_val, byte[] byte_val, int int_val, out int error); // 0x00588F58-0x005890D0
		private static void SetSocketOption_internal(IntPtr socket, SocketOptionLevel level, SocketOptionName name, object obj_val, byte[] byte_val, int int_val, out int error); // 0x005890D0-0x005890D4
		public void Close(); // 0x005890D4-0x005890E0
		public void Close(int timeout); // 0x00580390-0x00580398
		internal static void Close_internal(IntPtr socket, out int error); // 0x00582118-0x0058211C
		private static void Shutdown_internal(SafeSocketHandle safeHandle, SocketShutdown how, out int error); // 0x00585600-0x00585758
		internal static void Shutdown_internal(IntPtr socket, SocketShutdown how, out int error); // 0x00582110-0x00582114
		protected virtual void Dispose(bool disposing); // 0x005890E0-0x0058915C
		private void Linger(IntPtr handle); // 0x0058915C-0x00589324
		private void ThrowIfDisposedAndClosed(); // 0x005859AC-0x00585A88
		private void ThrowIfBufferNull(byte[] buffer); // 0x005879B8-0x00587A60
		private void ThrowIfBufferOutOfRange(byte[] buffer, int offset, int size); // 0x00587A60-0x00587C4C
		private void ThrowIfUdp(); // 0x00585BE0-0x00585C78
		private SocketAsyncResult ValidateEndIAsyncResult(IAsyncResult ares, string methodName, string argName); // 0x005862F8-0x00586478
		private void QueueIOSelectorJob(SemaphoreSlim sem, IntPtr handle, IOSelectorJob job); // 0x00587F04-0x005880AC
		private IPEndPoint RemapIPEndPoint(IPEndPoint input); // 0x00587268-0x0058734C
		internal static void cancel_blocking_socket_operation(Thread thread); // 0x00582114-0x00582118
		private static bool IsProtocolSupported_internal(NetworkInterfaceComponent networkInterface); // 0x0058932C-0x00589330
		private static bool IsProtocolSupported(NetworkInterfaceComponent networkInterface); // 0x0058546C-0x005854EC
	}

	public enum SocketError // TypeDefIndex: 1676
	{
		SocketError = -1,
		Success = 0,
		OperationAborted = 995,
		IOPending = 997,
		Interrupted = 10004,
		AccessDenied = 10013,
		Fault = 10014,
		InvalidArgument = 10022,
		TooManyOpenSockets = 10024,
		WouldBlock = 10035,
		InProgress = 10036,
		AlreadyInProgress = 10037,
		NotSocket = 10038,
		DestinationAddressRequired = 10039,
		MessageSize = 10040,
		ProtocolType = 10041,
		ProtocolOption = 10042,
		ProtocolNotSupported = 10043,
		SocketNotSupported = 10044,
		OperationNotSupported = 10045,
		ProtocolFamilyNotSupported = 10046,
		AddressFamilyNotSupported = 10047,
		AddressAlreadyInUse = 10048,
		AddressNotAvailable = 10049,
		NetworkDown = 10050,
		NetworkUnreachable = 10051,
		NetworkReset = 10052,
		ConnectionAborted = 10053,
		ConnectionReset = 10054,
		NoBufferSpaceAvailable = 10055,
		IsConnected = 10056,
		NotConnected = 10057,
		Shutdown = 10058,
		TimedOut = 10060,
		ConnectionRefused = 10061,
		HostDown = 10064,
		HostUnreachable = 10065,
		ProcessLimit = 10067,
		SystemNotReady = 10091,
		VersionNotSupported = 10092,
		NotInitialized = 10093,
		Disconnecting = 10101,
		TypeNotFound = 10109,
		HostNotFound = 11001,
		TryAgain = 11002,
		NoRecovery = 11003,
		NoData = 11004
	}

	[Flags] // 0x001473B4-0x001473C4
	public enum SocketFlags // TypeDefIndex: 1677
	{
		None = 0,
		OutOfBand = 1,
		Peek = 2,
		DontRoute = 4,
		MaxIOVectorLength = 16,
		Truncated = 256,
		ControlDataTruncated = 512,
		Broadcast = 1024,
		Multicast = 2048,
		Partial = 32768
	}

	public enum SocketOptionLevel // TypeDefIndex: 1678
	{
		IP = 0,
		Tcp = 6,
		Udp = 17,
		IPv6 = 41,
		Socket = 65535
	}

	public enum SocketOptionName // TypeDefIndex: 1679
	{
		DontLinger = -129,
		ExclusiveAddressUse = -5,
		Debug = 1,
		IPOptions = 1,
		NoDelay = 1,
		NoChecksum = 1,
		AcceptConnection = 2,
		HeaderIncluded = 2,
		BsdUrgent = 2,
		Expedited = 2,
		TypeOfService = 3,
		ReuseAddress = 4,
		IpTimeToLive = 4,
		KeepAlive = 8,
		MulticastInterface = 9,
		MulticastTimeToLive = 10,
		MulticastLoopback = 11,
		AddMembership = 12,
		DropMembership = 13,
		DontFragment = 14,
		AddSourceMembership = 15,
		DontRoute = 16,
		DropSourceMembership = 16,
		BlockSource = 17,
		UnblockSource = 18,
		PacketInformation = 19,
		ChecksumCoverage = 20,
		HopLimit = 21,
		IPProtectionLevel = 23,
		IPv6Only = 27,
		Broadcast = 32,
		UseLoopback = 64,
		Linger = 128,
		OutOfBandInline = 256,
		SendBuffer = 4097,
		ReceiveBuffer = 4098,
		SendLowWater = 4099,
		ReceiveLowWater = 4100,
		SendTimeout = 4101,
		ReceiveTimeout = 4102,
		Error = 4103,
		Type = 4104,
		ReuseUnicastPort = 12295,
		UpdateAcceptContext = 28683,
		UpdateConnectContext = 28688,
		MaxConnections = 2147483647
	}

	public enum SocketShutdown // TypeDefIndex: 1680
	{
		Receive = 0,
		Send = 1,
		Both = 2
	}

	public enum SocketType // TypeDefIndex: 1681
	{
		Unknown = -1,
		Stream = 1,
		Dgram = 2,
		Raw = 3,
		Rdm = 4,
		Seqpacket = 5
	}

	public class TcpClient : IDisposable // TypeDefIndex: 1682
	{
		// Fields
		private Socket m_ClientSocket; // 0x08
		private bool m_Active; // 0x0C
		private NetworkStream m_DataStream; // 0x10
		private AddressFamily m_Family; // 0x14
		private bool m_CleanedUp; // 0x18
	
		// Properties
		public Socket Client { get; set; } // 0x0058D93C-0x0058D944 0x0058D944-0x0058D94C
	
		// Constructors
		public TcpClient(); // 0x0058D688-0x0058D710
		public TcpClient(AddressFamily family); // 0x0058D710-0x0058D8B0
	
		// Methods
		public IAsyncResult BeginConnect(string host, int port, AsyncCallback requestCallback, object state); // 0x0058D94C-0x0058DA08
		public void EndConnect(IAsyncResult asyncResult); // 0x0058DA08-0x0058DAAC
		protected virtual void Dispose(bool disposing); // 0x0058DAAC-0x0058DCC8
		public void Dispose(); // 0x0058DCC8-0x0058DCDC
		~TcpClient(); // 0x0058DCDC-0x0058DD54
		private void initialize(); // 0x0058D8B0-0x0058D93C
	}

	internal sealed class SafeSocketHandle : SafeHandleZeroOrMinusOneIsInvalid // TypeDefIndex: 1683
	{
		// Fields
		private List<Thread> blocking_threads; // 0x14
		private Dictionary<Thread, StackTrace> threads_stacktraces; // 0x18
		private bool in_cleanup; // 0x1C
		private static bool THROW_ON_ABORT_RETRIES; // 0x00
	
		// Constructors
		public SafeSocketHandle(IntPtr preexistingHandle, bool ownsHandle); // 0x005818EC-0x005819E0
		static SafeSocketHandle(); // 0x005826D8-0x00582768
	
		// Methods
		protected override bool ReleaseHandle(); // 0x005819E0-0x0058210C
		public void RegisterForBlockingSyscall(); // 0x0058211C-0x00582420
		public void UnRegisterForBlockingSyscall(); // 0x005824AC-0x005826D8
	}

	public class SocketAsyncEventArgs : EventArgs, IDisposable // TypeDefIndex: 1684
	{
		// Fields
		private bool disposed; // 0x08
		internal int in_progress; // 0x0C
		internal EndPoint remote_ep; // 0x10
		internal Socket current_socket; // 0x14
		[CompilerGenerated] // 0x00147920-0x00147930
		private Socket <AcceptSocket>k__BackingField; // 0x18
		[CompilerGenerated] // 0x00147930-0x00147940
		private int <BytesTransferred>k__BackingField; // 0x1C
		[CompilerGenerated] // 0x00147940-0x00147950
		private SocketError <SocketError>k__BackingField; // 0x20
		[CompilerGenerated] // 0x00147950-0x00147960
		private EventHandler<SocketAsyncEventArgs> Completed; // 0x24
	
		// Properties
		public Socket AcceptSocket { [CompilerGenerated] /* 0x00147DA0-0x00147DB0 */ get; [CompilerGenerated] /* 0x00147DB0-0x00147DC0 */ set; } // 0x00589E9C-0x00589EA4 0x00589E84-0x00589E8C
		internal int BytesTransferred { [CompilerGenerated] /* 0x00147DC0-0x00147DD0 */ set; } // 0x0058B8AC-0x0058B8B4
		public SocketError SocketError { [CompilerGenerated] /* 0x00147DD0-0x00147DE0 */ set; } // 0x00589E94-0x00589E9C
	
		// Methods
		~SocketAsyncEventArgs(); // 0x0058D128-0x0058D138
		private void Dispose(bool disposing); // 0x0058D138-0x0058D14C
		public void Dispose(); // 0x0058D14C-0x0058D1DC
		internal void Complete(); // 0x00589EA4-0x00589EB8
		protected virtual void OnCompleted(SocketAsyncEventArgs e); // 0x0058D1DC-0x0058D2B4
	}

	internal sealed class SocketAsyncResult : IOAsyncResult // TypeDefIndex: 1685
	{
		// Fields
		public Socket socket; // 0x18
		public SocketOperation operation; // 0x1C
		private Exception DelayedException; // 0x20
		public EndPoint EndPoint; // 0x24
		public byte[] Buffer; // 0x28
		public int Offset; // 0x2C
		public int Size; // 0x30
		public SocketFlags SockFlags; // 0x34
		public Socket AcceptSocket; // 0x38
		public IPAddress[] Addresses; // 0x3C
		public int Port; // 0x40
		public IList<ArraySegment<byte>> Buffers; // 0x44
		public bool ReuseSocket; // 0x48
		public int CurrentAddress; // 0x4C
		public Socket AcceptedSocket; // 0x50
		public int Total; // 0x54
		internal int error; // 0x58
		public int EndCalled; // 0x5C
	
		// Properties
		public IntPtr Handle { get; } // 0x005874A8-0x0058750C 
		public SocketError ErrorCode { get; } // 0x005880AC-0x0058814C 
	
		// Nested types
		[Serializable]
		[CompilerGenerated] // 0x001473C4-0x001473D4
		private sealed class <>c // TypeDefIndex: 1686
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static WaitCallback <>9__27_0; // 0x04
	
			// Constructors
			static <>c(); // 0x0058D2B8-0x0058D32C
			public <>c(); // 0x0058D32C-0x0058D334
	
			// Methods
			internal void <Complete>b__27_0(object state); // 0x0058D334-0x0058D51C
		}
	
		// Constructors
		public SocketAsyncResult(Socket socket, AsyncCallback callback, object state, SocketOperation operation); // 0x00586A20-0x00586A50
	
		// Methods
		public void CheckIfThrowDelayedException(); // 0x00586478-0x00586568
		internal override void CompleteDisposed(); // 0x0058D2B4-0x0058D2B8
		public void Complete(); // 0x0058AB84-0x0058ADEC
		public void Complete(bool synch); // 0x00587488-0x005874A8
		public void Complete(int total); // 0x00588C78-0x00588C80
		public void Complete(Exception e, bool synch); // 0x00587240-0x00587268
		public void Complete(Exception e); // 0x00588C70-0x00588C78
		public void Complete(Socket s); // 0x0058A094-0x0058A09C
		public void Complete(Socket s, int total); // 0x0058A394-0x0058A3A0
	}

	internal enum SocketOperation // TypeDefIndex: 1687
	{
		Accept = 0,
		Connect = 1,
		Receive = 2,
		ReceiveFrom = 3,
		Send = 4,
		SendTo = 5,
		RecvJustCallback = 6,
		SendJustCallback = 7,
		Disconnect = 8,
		AcceptReceive = 9,
		ReceiveGeneric = 10,
		SendGeneric = 11
	}
}

namespace System.Net.Security
{
	public abstract class AuthenticatedStream : Stream // TypeDefIndex: 1688
	{
		// Fields
		private Stream _InnerStream; // 0x14
		private bool _LeaveStreamOpen; // 0x18
	
		// Properties
		protected Stream InnerStream { get; } // 0x0057D224-0x0057D22C 
		public abstract bool IsAuthenticated { get; }
	
		// Constructors
		protected AuthenticatedStream(Stream innerStream, bool leaveInnerStreamOpen); // 0x0057CFFC-0x0057D224
	
		// Methods
		protected override void Dispose(bool disposing); // 0x0057D22C-0x0057D300
	}

	public class SslStream : AuthenticatedStream // TypeDefIndex: 1689
	{
		// Fields
		private MonoTlsProvider provider; // 0x1C
		private IMonoSslStream impl; // 0x20
	
		// Properties
		internal IMonoSslStream Impl { get; } // 0x0057D300-0x0057D318 
		public override bool IsAuthenticated { get; } // 0x0057D4D8-0x0057D5B8 
		public override bool CanSeek { get; } // 0x0057D5B8-0x0057D5C0 
		public override bool CanRead { get; } // 0x0057D5C0-0x0057D698 
		public override bool CanWrite { get; } // 0x0057D698-0x0057D770 
		public override long Length { get; } // 0x0057D770-0x0057D850 
		public override long Position { get; set; } // 0x0057D850-0x0057D930 0x0057D930-0x0057D9D8
	
		// Constructors
		internal SslStream(Stream innerStream, bool leaveInnerStreamOpen, MonoTlsProvider provider, MonoTlsSettings settings); // 0x0057D3C4-0x0057D430
	
		// Methods
		internal static IMonoSslStream CreateMonoSslStream(Stream innerStream, bool leaveInnerStreamOpen, MonoTlsProvider provider, MonoTlsSettings settings); // 0x0057D430-0x0057D4D8
		public override long Seek(long offset, SeekOrigin origin); // 0x0057D9D8-0x0057DA80
		public override void Flush(); // 0x0057DA80-0x0057DAB4
		private void CheckDisposed(); // 0x0057D318-0x0057D3C4
		protected override void Dispose(bool disposing); // 0x0057DAB4-0x0057DBEC
		public override int Read(byte[] buffer, int offset, int count); // 0x0057DBEC-0x0057DCF0
		public override void Write(byte[] buffer, int offset, int count); // 0x0057DCF0-0x0057DDF4
		public override IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState); // 0x0057DDF4-0x0057DF18
		public override int EndRead(IAsyncResult asyncResult); // 0x0057DF18-0x0057E000
		public override IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState); // 0x0057E000-0x0057E124
		public override void EndWrite(IAsyncResult asyncResult); // 0x0057E124-0x0057E20C
	}
}

namespace System.Net.NetworkInformation
{
	public enum NetworkInterfaceComponent // TypeDefIndex: 1690
	{
		IPv4 = 0,
		IPv6 = 1
	}
}

namespace System.Net.Configuration
{
	internal sealed class SettingsSectionInternal // TypeDefIndex: 1691
	{
		// Fields
		private static readonly SettingsSectionInternal instance; // 0x00
		internal readonly bool HttpListenerUnescapeRequestUrl; // 0x08
		internal readonly IPProtectionLevel IPProtectionLevel; // 0x0C
	
		// Properties
		internal static SettingsSectionInternal Section { get; } // 0x00743E50-0x00743EDC 
		internal bool Ipv6Enabled { get; } // 0x00743EDC-0x00743EE4 
	
		// Constructors
		public SettingsSectionInternal(); // 0x00743EE4-0x00743EFC
		static SettingsSectionInternal(); // 0x00743EFC-0x00743F84
	}
}

namespace System.Collections.Generic
{
	internal sealed class ICollectionDebugView<T> // TypeDefIndex: 1692
	{
	}

	[Serializable]
	[DebuggerDisplay] // 0x001473D4-0x00147474
	[DebuggerTypeProxy] // 0x001473D4-0x00147474
	public class LinkedList<T> : ICollection<T>, ICollection, IReadOnlyCollection<T>, ISerializable, IDeserializationCallback // TypeDefIndex: 1693
	{
		// Fields
		internal LinkedListNode<T> head;
		internal int count;
		internal int version;
		private object _syncRoot;
		private SerializationInfo _siInfo;
	
		// Properties
		public int Count { get; }
		public LinkedListNode<T> First { get; }
		bool ICollection<T>.IsReadOnly { get; }
		bool ICollection.IsSynchronized { get; }
		object ICollection.SyncRoot { get; }
	
		// Nested types
		[Serializable]
		public struct Enumerator : IEnumerator<T>, ISerializable, IDeserializationCallback // TypeDefIndex: 1694
		{
			// Fields
			private LinkedList<T> _list;
			private LinkedListNode<T> _node;
			private int _version;
			private T _current;
			private int _index;
	
			// Properties
			public T Current { get; }
			object IEnumerator.Current { get; }
	
			// Constructors
			internal Enumerator(LinkedList<T> list);
			private Enumerator(SerializationInfo info, StreamingContext context);
	
			// Methods
			public bool MoveNext();
			void IEnumerator.Reset();
			public void Dispose();
			void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
			void IDeserializationCallback.OnDeserialization(object sender);
		}
	
		// Constructors
		public LinkedList();
		protected LinkedList(SerializationInfo info, StreamingContext context);
	
		// Methods
		void ICollection<T>.Add(T value);
		public LinkedListNode<T> AddFirst(T value);
		public void AddFirst(LinkedListNode<T> node);
		public LinkedListNode<T> AddLast(T value);
		public void Clear();
		public bool Contains(T value);
		public void CopyTo(T[] array, int index);
		public LinkedListNode<T> Find(T value);
		public Enumerator GetEnumerator();
		IEnumerator<T> IEnumerable<T>.GetEnumerator();
		public bool Remove(T value);
		public void Remove(LinkedListNode<T> node);
		public void RemoveLast();
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
		public virtual void OnDeserialization(object sender);
		private void InternalInsertNodeBefore(LinkedListNode<T> node, LinkedListNode<T> newNode);
		private void InternalInsertNodeToEmptyList(LinkedListNode<T> newNode);
		internal void InternalRemoveNode(LinkedListNode<T> node);
		internal void ValidateNewNode(LinkedListNode<T> node);
		internal void ValidateNode(LinkedListNode<T> node);
		void ICollection.CopyTo(Array array, int index);
		IEnumerator IEnumerable.GetEnumerator();
	}

	public sealed class LinkedListNode<T> // TypeDefIndex: 1695
	{
		// Fields
		internal LinkedList<T> list;
		internal LinkedListNode<T> next;
		internal LinkedListNode<T> prev;
		internal T item;
	
		// Properties
		public LinkedListNode<T> Next { get; }
		public T Value { get; }
	
		// Constructors
		internal LinkedListNode(LinkedList<T> list, T value);
	
		// Methods
		internal void Invalidate();
	}

	[Serializable]
	[DebuggerDisplay] // 0x00147474-0x00147514
	[DebuggerTypeProxy] // 0x00147474-0x00147514
	public class Queue<T> : ICollection, IReadOnlyCollection<T> // TypeDefIndex: 1696
	{
		// Fields
		private T[] _array;
		private int _head;
		private int _tail;
		private int _size;
		private int _version;
		[NonSerialized]
		private object _syncRoot;
	
		// Properties
		public int Count { get; }
		bool ICollection.IsSynchronized { get; }
		object ICollection.SyncRoot { get; }
	
		// Nested types
		[Serializable]
		public struct Enumerator : IEnumerator<T> // TypeDefIndex: 1697
		{
			// Fields
			private readonly Queue<T> _q;
			private readonly int _version;
			private int _index;
			private T _currentElement;
	
			// Properties
			public T Current { get; }
			object IEnumerator.Current { get; }
	
			// Constructors
			internal Enumerator(Queue<T> q);
	
			// Methods
			public void Dispose();
			public bool MoveNext();
			private void ThrowEnumerationNotStartedOrEnded();
			void IEnumerator.Reset();
		}
	
		// Constructors
		public Queue();
		public Queue(int capacity);
	
		// Methods
		public void Clear();
		void ICollection.CopyTo(Array array, int index);
		public void Enqueue(T item);
		IEnumerator<T> IEnumerable<T>.GetEnumerator();
		IEnumerator IEnumerable.GetEnumerator();
		public T Dequeue();
		private void SetCapacity(int capacity);
		private void MoveNext(ref int index);
		private void ThrowForEmptyQueue();
	}

	internal sealed class QueueDebugView<T> // TypeDefIndex: 1698
	{
	}

	[Serializable]
	[DebuggerDisplay] // 0x00147514-0x001475B4
	[DebuggerTypeProxy] // 0x00147514-0x001475B4
	public class Stack<T> : ICollection, IReadOnlyCollection<T> // TypeDefIndex: 1699
	{
		// Fields
		private T[] _array;
		private int _size;
		private int _version;
		[NonSerialized]
		private object _syncRoot;
		private const int DefaultCapacity = 4; // Metadata: 0x00219B85
	
		// Properties
		public int Count { get; }
		bool ICollection.IsSynchronized { get; }
		object ICollection.SyncRoot { get; }
	
		// Nested types
		[Serializable]
		public struct Enumerator : IEnumerator<T> // TypeDefIndex: 1700
		{
			// Fields
			private readonly Stack<T> _stack;
			private readonly int _version;
			private int _index;
			private T _currentElement;
	
			// Properties
			public T Current { get; }
			object IEnumerator.Current { get; }
	
			// Constructors
			internal Enumerator(Stack<T> stack);
	
			// Methods
			public void Dispose();
			public bool MoveNext();
			private void ThrowEnumerationNotStartedOrEnded();
			void IEnumerator.Reset();
		}
	
		// Constructors
		public Stack();
	
		// Methods
		public void Clear();
		void ICollection.CopyTo(Array array, int arrayIndex);
		IEnumerator<T> IEnumerable<T>.GetEnumerator();
		IEnumerator IEnumerable.GetEnumerator();
		public T Peek();
		public T Pop();
		public void Push(T item);
		private void ThrowForEmptyStack();
	}

	internal sealed class StackDebugView<T> // TypeDefIndex: 1701
	{
	}

	public interface ISet<T> : ICollection<T> // TypeDefIndex: 1702
	{
	}
}

[CompilerGenerated] // 0x001475B4-0x001475C4
internal sealed class <PrivateImplementationDetails> // TypeDefIndex: 1703
{
	// Fields
	internal static readonly long 03F4297FCC30D0FD5E420E5D26E7FA711167C7EF; // 0x00 // Starts with: 20 00 0d 00 0a 00 09 00 - Metadata: 0x00219B89
	internal static readonly __StaticArrayInitTypeSize=10 53437C3B2572EDB9B8640C3195DF3BC2729C5EA1; // 0x08 // Starts with: 3a 00 5c 00 2f 00 3f 00 - Metadata: 0x00219B91
	internal static readonly __StaticArrayInitTypeSize=32 59F5BD34B6C013DEACC784F69C67E95150033A84; // 0x12 // Starts with: 30 00 31 00 32 00 33 00 - Metadata: 0x00219B9B
	internal static readonly __StaticArrayInitTypeSize=44 8E0EF3D67A3EB1863224EE3CACB424BC2F8CFBA3; // 0x32 // Starts with: 28 00 29 00 3c 00 3e 00 - Metadata: 0x00219BBB
	internal static readonly __StaticArrayInitTypeSize=32 C02C28AFEBE998F767E4AF43E3BE8F5E9FA11536; // 0x5E // Starts with: 30 00 31 00 32 00 33 00 - Metadata: 0x00219BE7
	internal static readonly __StaticArrayInitTypeSize=128 CCEEADA43268372341F81AE0C9208C6856441C04; // 0x7E // Starts with: 00 00 00 00 00 00 00 00 - Metadata: 0x00219C07
	internal static readonly long E5BC1BAFADE1862DD6E0B9FB632BFAA6C3873A78; // 0x100 // Starts with: 20 00 0a 00 0d 00 09 00 - Metadata: 0x00219C87

	// Nested types
	private struct __StaticArrayInitTypeSize=10 // TypeDefIndex: 1704
	{
	}

	private struct __StaticArrayInitTypeSize=32 // TypeDefIndex: 1705
	{
	}

	private struct __StaticArrayInitTypeSize=44 // TypeDefIndex: 1706
	{
	}

	private struct __StaticArrayInitTypeSize=128 // TypeDefIndex: 1707
	{
	}

	// Methods
	internal static uint ComputeStringHash(string s); // 0x00726D88-0x00726E04
}

namespace System.Configuration
{
	public interface IConfigurationSectionHandler // TypeDefIndex: 1708
	{
	}
}

namespace System.Net.Configuration
{
	public sealed class BypassElement : ConfigurationElement // TypeDefIndex: 1709
	{
	}

	[ConfigurationCollection] // 0x001475C4-0x00147664
	[DefaultMember] // 0x001475C4-0x00147664
	public sealed class BypassElementCollection : ConfigurationElementCollection // TypeDefIndex: 1710
	{
		// Constructors
		public BypassElementCollection(); // 0x00743744-0x007437E8
	}

	public sealed class ConnectionManagementElement : ConfigurationElement // TypeDefIndex: 1711
	{
	}

	[ConfigurationCollection] // 0x00147664-0x00147704
	[DefaultMember] // 0x00147664-0x00147704
	public sealed class ConnectionManagementElementCollection : ConfigurationElementCollection // TypeDefIndex: 1712
	{
		// Constructors
		public ConnectionManagementElementCollection(); // 0x007437E8-0x0074388C
	}

	public sealed class ConnectionManagementSection : ConfigurationSection // TypeDefIndex: 1713
	{
		// Constructors
		public ConnectionManagementSection(); // 0x0074388C-0x00743930
	}

	public sealed class DefaultProxySection : ConfigurationSection // TypeDefIndex: 1714
	{
		// Constructors
		public DefaultProxySection(); // 0x00743930-0x007439D4
	}

	public sealed class ProxyElement : ConfigurationElement // TypeDefIndex: 1715
	{
		// Constructors
		public ProxyElement(); // 0x00743C64-0x00743D08
	}

	public sealed class HttpWebRequestElement : ConfigurationElement // TypeDefIndex: 1716
	{
		// Constructors
		public HttpWebRequestElement(); // 0x007439D4-0x00743A78
	}

	public sealed class Ipv6Element : ConfigurationElement // TypeDefIndex: 1717
	{
		// Constructors
		public Ipv6Element(); // 0x00743A78-0x00743B1C
	}

	public sealed class NetSectionGroup : ConfigurationSectionGroup // TypeDefIndex: 1718
	{
		// Constructors
		public NetSectionGroup(); // 0x00743B1C-0x00743BC0
	}

	public sealed class SettingsSection : ConfigurationSection // TypeDefIndex: 1719
	{
		// Constructors
		public SettingsSection(); // 0x00743DAC-0x00743E50
	}

	public sealed class PerformanceCountersElement : ConfigurationElement // TypeDefIndex: 1720
	{
		// Constructors
		public PerformanceCountersElement(); // 0x00743BC0-0x00743C64
	}

	public sealed class ServicePointManagerElement : ConfigurationElement // TypeDefIndex: 1721
	{
		// Constructors
		public ServicePointManagerElement(); // 0x00743D08-0x00743DAC
	}

	public sealed class SocketElement : ConfigurationElement // TypeDefIndex: 1722
	{
		// Constructors
		public SocketElement(); // 0x00743F84-0x00744028
	}

	public sealed class WebProxyScriptElement : ConfigurationElement // TypeDefIndex: 1723
	{
		// Constructors
		public WebProxyScriptElement(); // 0x00744028-0x007440CC
	}

	public sealed class WebRequestModulesSection : ConfigurationSection // TypeDefIndex: 1724
	{
		// Constructors
		public WebRequestModulesSection(); // 0x00578688-0x0057872C
	}

	[ConfigurationCollection] // 0x00147704-0x001477A4
	[DefaultMember] // 0x00147704-0x001477A4
	public sealed class WebRequestModuleElementCollection : ConfigurationElementCollection // TypeDefIndex: 1725
	{
		// Constructors
		public WebRequestModuleElementCollection(); // 0x005785E4-0x00578688
	}

	public sealed class WebRequestModuleElement : ConfigurationElement // TypeDefIndex: 1726
	{
	}
}

namespace System.Diagnostics
{
	[Obsolete] // 0x001477A4-0x001477D8
	public class DiagnosticsConfigurationHandler : IConfigurationSectionHandler // TypeDefIndex: 1727
	{
		// Constructors
		public DiagnosticsConfigurationHandler(); // 0x0073E0BC-0x0073E160
	
		// Methods
		public virtual object Create(object parent, object configContext, XmlNode section); // 0x0073E160-0x0073E208
	}
}

namespace Unity
{
	internal sealed class ThrowStub : ObjectDisposedException // TypeDefIndex: 1728
	{
		// Methods
		public static void ThrowNotSupportedException(); // 0x00B2164C-0x00B216D4
	}
}

namespace System.Configuration
{
	public abstract class ConfigurationSection : ConfigurationElement // TypeDefIndex: 1730
	{
	}

	[DefaultMember] // 0x0014815C-0x00148190
	public abstract class ConfigurationElement // TypeDefIndex: 1731
	{
	}

	[DebuggerDisplay] // 0x00148190-0x001481C4
	public abstract class ConfigurationElementCollection : ConfigurationElement, ICollection // TypeDefIndex: 1732
	{
		// Properties
		public int Count { get; } // 0x00B54C94-0x00B54D3C 
		public bool IsSynchronized { get; } // 0x00B54D3C-0x00B54DE4 
		public object SyncRoot { get; } // 0x00B54DE4-0x00B54E8C 
	
		// Methods
		public IEnumerator GetEnumerator(); // 0x00B54E8C-0x00B54F34
		void ICollection.CopyTo(Array arr, int index); // 0x00B54F34-0x00B54FD8
	}

	[AttributeUsage] // 0x001481C4-0x001481D8
	public sealed class ConfigurationCollectionAttribute : Attribute // TypeDefIndex: 1733
	{
		// Constructors
		public ConfigurationCollectionAttribute(Type itemType); // 0x00B54BF0-0x00B54C94
	}

	public class ConfigurationSectionGroup // TypeDefIndex: 1734
	{
	}

	public sealed class IgnoreSection : ConfigurationSection // TypeDefIndex: 1735
	{
		// Constructors
		public IgnoreSection(); // 0x00B54FD8-0x00B5507C
	}
}

namespace Unity
{
	internal sealed class ThrowStub : ObjectDisposedException // TypeDefIndex: 1736
	{
		// Methods
		public static void ThrowNotSupportedException(); // 0x00B5507C-0x00B55104
	}
}

namespace System.Xml
{
	internal sealed class XmlChildEnumerator : IEnumerator // TypeDefIndex: 1738
	{
		// Fields
		internal XmlNode container; // 0x08
		internal XmlNode child; // 0x0C
		internal bool isFirst; // 0x10
	
		// Properties
		object IEnumerator.Current { get; } // 0x00B55AF0-0x00B55AF4 
		internal XmlNode Current { get; } // 0x00B55AF4-0x00B55BAC 
	
		// Constructors
		internal XmlChildEnumerator(XmlNode container); // 0x00B559D4-0x00B55A24
	
		// Methods
		bool IEnumerator.MoveNext(); // 0x00B55A24-0x00B55A28
		internal bool MoveNext(); // 0x00B55A28-0x00B55AAC
		void IEnumerator.Reset(); // 0x00B55AAC-0x00B55AF0
	}

	public abstract class XmlLinkedNode : XmlNode // TypeDefIndex: 1739
	{
		// Fields
		internal XmlLinkedNode next; // 0x0C
	
		// Properties
		public override XmlNode NextSibling { get; } // 0x00B55BAC-0x00B55BFC 
	}

	[DebuggerDisplay] // 0x0014846C-0x001484DC
	[DefaultMember] // 0x0014846C-0x001484DC
	public abstract class XmlNode : ICloneable, IEnumerable, IXPathNavigable // TypeDefIndex: 1740
	{
		// Fields
		internal XmlNode parentNode; // 0x08
	
		// Properties
		public abstract XmlNodeType NodeType { get; }
		public virtual XmlNode ParentNode { get; } // 0x00B55BFC-0x00B55D24 
		public virtual XmlNode NextSibling { get; } // 0x00B55D24-0x00B55D2C 
		public virtual XmlNode FirstChild { get; } // 0x00B55D2C-0x00B55D54 
		internal virtual XmlLinkedNode LastNode { get; } // 0x00B55D54-0x00B55D5C 
	
		// Methods
		public abstract XmlNode CloneNode(bool deep);
		object ICloneable.Clone(); // 0x00B55D5C-0x00B55D70
		IEnumerator IEnumerable.GetEnumerator(); // 0x00B55D70-0x00B59C88
	}

	public enum XmlNodeType // TypeDefIndex: 1741
	{
		None = 0,
		Element = 1,
		Attribute = 2,
		Text = 3,
		CDATA = 4,
		EntityReference = 5,
		Entity = 6,
		ProcessingInstruction = 7,
		Comment = 8,
		Document = 9,
		DocumentType = 10,
		DocumentFragment = 11,
		Notation = 12,
		Whitespace = 13,
		SignificantWhitespace = 14,
		EndElement = 15,
		EndEntity = 16,
		XmlDeclaration = 17
	}

	internal static class Res // TypeDefIndex: 1742
	{
		// Methods
		public static string GetString(string name); // 0x00B559D0-0x00B559D4
	}
}

namespace System.Xml.XPath
{
	public interface IXPathNavigable // TypeDefIndex: 1743
	{
	}
}

namespace System.Linq
{
	internal static class Error // TypeDefIndex: 1745
	{
		// Methods
		internal static Exception ArgumentNull(string s); // 0x00B76D10-0x00B76D84
		internal static Exception MoreThanOneMatch(); // 0x00B76D84-0x00B76E04
		internal static Exception NoElements(); // 0x00B76E04-0x00B7B844
	}

	public static class Enumerable // TypeDefIndex: 1746
	{
		// Nested types
		private abstract class Iterator<TSource> : IEnumerable<TSource>, IEnumerator<TSource> // TypeDefIndex: 1747
		{
			// Fields
			private int threadId;
			internal int state;
			internal TSource current;
	
			// Properties
			public TSource Current { get; }
			object IEnumerator.Current { get; }
	
			// Constructors
			public Iterator();
	
			// Methods
			public abstract Iterator<TSource> Clone();
			public virtual void Dispose();
			public IEnumerator<TSource> GetEnumerator();
			public abstract bool MoveNext();
			public abstract IEnumerable<TResult> Select<TResult>(Func<TSource, TResult> selector);
			public abstract IEnumerable<TSource> Where(Func<TSource, bool> predicate);
			IEnumerator IEnumerable.GetEnumerator();
			void IEnumerator.Reset();
		}
	
		private class WhereEnumerableIterator<TSource> : Iterator<TSource> // TypeDefIndex: 1748
		{
			// Fields
			private IEnumerable<TSource> source;
			private Func<TSource, bool> predicate;
			private IEnumerator<TSource> enumerator;
	
			// Constructors
			public WhereEnumerableIterator(IEnumerable<TSource> source, Func<TSource, bool> predicate);
	
			// Methods
			public override Iterator<TSource> Clone();
			public override void Dispose();
			public override bool MoveNext();
			public override IEnumerable<TResult> Select<TResult>(Func<TSource, TResult> selector);
			public override IEnumerable<TSource> Where(Func<TSource, bool> predicate);
		}
	
		private class WhereArrayIterator<TSource> : Iterator<TSource> // TypeDefIndex: 1749
		{
			// Fields
			private TSource[] source;
			private Func<TSource, bool> predicate;
			private int index;
	
			// Constructors
			public WhereArrayIterator(TSource[] source, Func<TSource, bool> predicate);
	
			// Methods
			public override Iterator<TSource> Clone();
			public override bool MoveNext();
			public override IEnumerable<TResult> Select<TResult>(Func<TSource, TResult> selector);
			public override IEnumerable<TSource> Where(Func<TSource, bool> predicate);
		}
	
		private class WhereListIterator<TSource> : Iterator<TSource> // TypeDefIndex: 1750
		{
			// Fields
			private List<TSource> source;
			private Func<TSource, bool> predicate;
			private List<TSource> enumerator;
	
			// Constructors
			public WhereListIterator(List<TSource> source, Func<TSource, bool> predicate);
	
			// Methods
			public override Iterator<TSource> Clone();
			public override bool MoveNext();
			public override IEnumerable<TResult> Select<TResult>(Func<TSource, TResult> selector);
			public override IEnumerable<TSource> Where(Func<TSource, bool> predicate);
		}
	
		private class WhereSelectEnumerableIterator<TSource, TResult> : Iterator<TResult> // TypeDefIndex: 1751
		{
			// Fields
			private IEnumerable<TSource> source;
			private Func<TSource, bool> predicate;
			private Func<TSource, TResult> selector;
			private IEnumerator<TSource> enumerator;
	
			// Constructors
			public WhereSelectEnumerableIterator(IEnumerable<TSource> source, Func<TSource, bool> predicate, Func<TSource, TResult> selector);
	
			// Methods
			public override Iterator<TResult> Clone();
			public override void Dispose();
			public override bool MoveNext();
			public override IEnumerable<TResult2> Select<TResult2>(Func<TResult, TResult2> selector);
			public override IEnumerable<TResult> Where(Func<TResult, bool> predicate);
		}
	
		private class WhereSelectArrayIterator<TSource, TResult> : Iterator<TResult> // TypeDefIndex: 1752
		{
			// Fields
			private TSource[] source;
			private Func<TSource, bool> predicate;
			private Func<TSource, TResult> selector;
			private int index;
	
			// Constructors
			public WhereSelectArrayIterator(TSource[] source, Func<TSource, bool> predicate, Func<TSource, TResult> selector);
	
			// Methods
			public override Iterator<TResult> Clone();
			public override bool MoveNext();
			public override IEnumerable<TResult2> Select<TResult2>(Func<TResult, TResult2> selector);
			public override IEnumerable<TResult> Where(Func<TResult, bool> predicate);
		}
	
		private class WhereSelectListIterator<TSource, TResult> : Iterator<TResult> // TypeDefIndex: 1753
		{
			// Fields
			private List<TSource> source;
			private Func<TSource, bool> predicate;
			private Func<TSource, TResult> selector;
			private List<TSource> enumerator;
	
			// Constructors
			public WhereSelectListIterator(List<TSource> source, Func<TSource, bool> predicate, Func<TSource, TResult> selector);
	
			// Methods
			public override Iterator<TResult> Clone();
			public override bool MoveNext();
			public override IEnumerable<TResult2> Select<TResult2>(Func<TResult, TResult2> selector);
			public override IEnumerable<TResult> Where(Func<TResult, bool> predicate);
		}
	
		[CompilerGenerated] // 0x00148854-0x00148864
		private sealed class <SelectIterator>d__5<TSource, TResult> : IEnumerable<TResult>, IEnumerator<TResult> // TypeDefIndex: 1754
		{
			// Fields
			private int <>1__state;
			private TResult <>2__current;
			private int <>l__initialThreadId;
			private IEnumerable<TSource> source;
			public IEnumerable<TSource> <>3__source;
			private int <index>5__1;
			private Func<TSource, int, TResult> selector;
			public Func<TSource, int, TResult> <>3__selector;
			private IEnumerator<TSource> <>7__wrap1;
	
			// Properties
			TResult IEnumerator<TResult>.Current { [DebuggerHidden] /* 0x00148BBC-0x00148BCC */ get; }
			object IEnumerator.Current { [DebuggerHidden] /* 0x00148BDC-0x00148BEC */ get; }
	
			// Constructors
			[DebuggerHidden] // 0x00148B9C-0x00148BAC
			public <SelectIterator>d__5(int <>1__state);
	
			// Methods
			[DebuggerHidden] // 0x00148BAC-0x00148BBC
			void IDisposable.Dispose();
			private bool MoveNext();
			private void <>m__Finally1();
			[DebuggerHidden] // 0x00148BCC-0x00148BDC
			void IEnumerator.Reset();
			[DebuggerHidden] // 0x00148BEC-0x00148BFC
			IEnumerator<TResult> IEnumerable<TResult>.GetEnumerator();
			[DebuggerHidden] // 0x00148BFC-0x00148C0C
			IEnumerator IEnumerable.GetEnumerator();
		}
	
		[CompilerGenerated] // 0x00148864-0x00148874
		private sealed class <>c__DisplayClass6_0<TSource> // TypeDefIndex: 1755
		{
			// Fields
			public Func<TSource, bool> predicate1;
			public Func<TSource, bool> predicate2;
	
			// Constructors
			public <>c__DisplayClass6_0();
	
			// Methods
			internal bool <CombinePredicates>b__0(TSource x);
		}
	
		[CompilerGenerated] // 0x00148874-0x00148884
		private sealed class <>c__DisplayClass7_0<TSource, TMiddle, TResult> // TypeDefIndex: 1756
		{
			// Fields
			public Func<TMiddle, TResult> selector2;
			public Func<TSource, TMiddle> selector1;
	
			// Constructors
			public <>c__DisplayClass7_0();
	
			// Methods
			internal TResult <CombineSelectors>b__0(TSource x);
		}
	
		[CompilerGenerated] // 0x00148884-0x00148894
		private sealed class <OfTypeIterator>d__97<TResult> : IEnumerable<TResult>, IEnumerator<TResult> // TypeDefIndex: 1757
		{
			// Fields
			private int <>1__state;
			private TResult <>2__current;
			private int <>l__initialThreadId;
			private IEnumerable source;
			public IEnumerable <>3__source;
			private IEnumerator <>7__wrap1;
	
			// Properties
			TResult IEnumerator<TResult>.Current { [DebuggerHidden] /* 0x00148C2C-0x00148C3C */ get; }
			object IEnumerator.Current { [DebuggerHidden] /* 0x00148C4C-0x00148C5C */ get; }
	
			// Constructors
			[DebuggerHidden] // 0x00148C0C-0x00148C1C
			public <OfTypeIterator>d__97(int <>1__state);
	
			// Methods
			[DebuggerHidden] // 0x00148C1C-0x00148C2C
			void IDisposable.Dispose();
			private bool MoveNext();
			private void <>m__Finally1();
			[DebuggerHidden] // 0x00148C3C-0x00148C4C
			void IEnumerator.Reset();
			[DebuggerHidden] // 0x00148C5C-0x00148C6C
			IEnumerator<TResult> IEnumerable<TResult>.GetEnumerator();
			[DebuggerHidden] // 0x00148C6C-0x00148C7C
			IEnumerator IEnumerable.GetEnumerator();
		}
	
		[CompilerGenerated] // 0x00148894-0x001488A4
		private sealed class <CastIterator>d__99<TResult> : IEnumerable<TResult>, IEnumerator<TResult> // TypeDefIndex: 1758
		{
			// Fields
			private int <>1__state;
			private TResult <>2__current;
			private int <>l__initialThreadId;
			private IEnumerable source;
			public IEnumerable <>3__source;
			private IEnumerator <>7__wrap1;
	
			// Properties
			TResult IEnumerator<TResult>.Current { [DebuggerHidden] /* 0x00148C9C-0x00148CAC */ get; }
			object IEnumerator.Current { [DebuggerHidden] /* 0x00148CBC-0x00148CCC */ get; }
	
			// Constructors
			[DebuggerHidden] // 0x00148C7C-0x00148C8C
			public <CastIterator>d__99(int <>1__state);
	
			// Methods
			[DebuggerHidden] // 0x00148C8C-0x00148C9C
			void IDisposable.Dispose();
			private bool MoveNext();
			private void <>m__Finally1();
			[DebuggerHidden] // 0x00148CAC-0x00148CBC
			void IEnumerator.Reset();
			[DebuggerHidden] // 0x00148CCC-0x00148CDC
			IEnumerator<TResult> IEnumerable<TResult>.GetEnumerator();
			[DebuggerHidden] // 0x00148CDC-0x00148CEC
			IEnumerator IEnumerable.GetEnumerator();
		}
	
		// Methods
		[IteratorStateMachine] // 0x00148974-0x001489EC
		private static IEnumerable<TResult> SelectIterator<TSource, TResult>(IEnumerable<TSource> source, Func<TSource, int, TResult> selector);
		private static Func<TSource, bool> CombinePredicates<TSource>(Func<TSource, bool> predicate1, Func<TSource, bool> predicate2);
		private static Func<TSource, TResult> CombineSelectors<TSource, TMiddle, TResult>(Func<TSource, TMiddle> selector1, Func<TMiddle, TResult> selector2);
		[IteratorStateMachine] // 0x00148A1C-0x00148A94
		private static IEnumerable<TResult> OfTypeIterator<TResult>(IEnumerable source);
		[IteratorStateMachine] // 0x00148AA4-0x00148B1C
		private static IEnumerable<TResult> CastIterator<TResult>(IEnumerable source);
		public static IEnumerable<TResult> Empty<TResult>();
	
		// Extension methods
		public static IEnumerable<TSource> Where<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate);
		public static IEnumerable<TResult> Select<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult> selector);
		public static IEnumerable<TResult> Select<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, int, TResult> selector);
		public static TSource[] ToArray<TSource>(this IEnumerable<TSource> source);
		public static List<TSource> ToList<TSource>(this IEnumerable<TSource> source);
		public static IEnumerable<TResult> OfType<TResult>(this IEnumerable source);
		public static IEnumerable<TResult> Cast<TResult>(this IEnumerable source);
		public static TSource First<TSource>(this IEnumerable<TSource> source);
		public static TSource FirstOrDefault<TSource>(this IEnumerable<TSource> source);
		public static TSource FirstOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate);
		public static TSource SingleOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate);
		public static bool Any<TSource>(this IEnumerable<TSource> source);
		public static bool Any<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate);
		public static bool All<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate);
		public static int Count<TSource>(this IEnumerable<TSource> source);
	}

	internal class EmptyEnumerable<TElement> // TypeDefIndex: 1759
	{
		// Fields
		public static readonly TElement[] Instance;
	
		// Constructors
		static EmptyEnumerable();
	}

	internal struct Buffer<TElement> // TypeDefIndex: 1760
	{
		// Fields
		internal TElement[] items;
		internal int count;
	
		// Constructors
		internal Buffer(IEnumerable<TElement> source);
	
		// Methods
		internal TElement[] ToArray();
	}
}

namespace System.Collections.Generic
{
	[Serializable]
	[DebuggerDisplay] // 0x001488A4-0x00148944
	[DebuggerTypeProxy] // 0x001488A4-0x00148944
	public class HashSet<T> : ISet<T>, IReadOnlyCollection<T>, ISerializable, IDeserializationCallback // TypeDefIndex: 1761
	{
		// Fields
		private const int Lower31BitMask = 2147483647; // Metadata: 0x00219CD7
		private const int StackAllocThreshold = 100; // Metadata: 0x00219CDB
		private const int ShrinkThreshold = 3; // Metadata: 0x00219CDF
		private const string CapacityName = "Capacity"; // Metadata: 0x00219CE3
		private const string ElementsName = "Elements"; // Metadata: 0x00219CEF
		private const string ComparerName = "Comparer"; // Metadata: 0x00219CFB
		private const string VersionName = "Version"; // Metadata: 0x00219D07
		private int[] _buckets;
		private Slot[] _slots;
		private int _count;
		private int _lastIndex;
		private int _freeList;
		private IEqualityComparer<T> _comparer;
		private int _version;
		private SerializationInfo _siInfo;
	
		// Properties
		public int Count { get; }
		bool ICollection<T>.IsReadOnly { get; }
		public IEqualityComparer<T> Comparer { get; }
	
		// Nested types
		internal struct Slot // TypeDefIndex: 1762
		{
			// Fields
			internal int hashCode;
			internal int next;
			internal T value;
		}
	
		[Serializable]
		public struct Enumerator : IEnumerator<T> // TypeDefIndex: 1763
		{
			// Fields
			private HashSet<T> _set;
			private int _index;
			private int _version;
			private T _current;
	
			// Properties
			public T Current { get; }
			object IEnumerator.Current { get; }
	
			// Constructors
			internal Enumerator(HashSet<T> set);
	
			// Methods
			public void Dispose();
			public bool MoveNext();
			void IEnumerator.Reset();
		}
	
		// Constructors
		public HashSet();
		public HashSet(IEqualityComparer<T> comparer);
		public HashSet(IEnumerable<T> collection);
		public HashSet(IEnumerable<T> collection, IEqualityComparer<T> comparer);
		protected HashSet(SerializationInfo info, StreamingContext context);
	
		// Methods
		private void CopyFrom(HashSet<T> source);
		void ICollection<T>.Add(T item);
		public void Clear();
		public bool Contains(T item);
		public void CopyTo(T[] array, int arrayIndex);
		public bool Remove(T item);
		public Enumerator GetEnumerator();
		IEnumerator<T> IEnumerable<T>.GetEnumerator();
		IEnumerator IEnumerable.GetEnumerator();
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
		public virtual void OnDeserialization(object sender);
		public bool Add(T item);
		public void UnionWith(IEnumerable<T> other);
		public void CopyTo(T[] array);
		public void CopyTo(T[] array, int arrayIndex, int count);
		public void TrimExcess();
		private void Initialize(int capacity);
		private void IncreaseCapacity();
		private void SetCapacity(int newSize);
		private bool AddIfNotPresent(T value);
		private void AddValue(int index, int hashCode, T value);
		private static bool AreEqualityComparersEqual(HashSet<T> set1, HashSet<T> set2);
		private int InternalGetHashCode(T item);
	}

	internal sealed class ICollectionDebugView<T> // TypeDefIndex: 1764
	{
	}
}

namespace UnityEngine.Scripting
{
	[AttributeUsage] // 0x00148F44-0x00148F8C
	[VisibleToOtherModules] // 0x00148F44-0x00148F8C
	internal class UsedByNativeCodeAttribute : Attribute // TypeDefIndex: 1766
	{
		// Fields
		[CompilerGenerated] // 0x001494A8-0x001494DC
		[DebuggerBrowsable] // 0x001494A8-0x001494DC
		private string <Name>k__BackingField; // 0x08
	
		// Properties
		public string Name { [CompilerGenerated] /* 0x001499F0-0x00149A00 */ set; } // 0x00B39020-0x00B39028
	
		// Constructors
		public UsedByNativeCodeAttribute(); // 0x00B38FF8-0x00B39000
		public UsedByNativeCodeAttribute(string name); // 0x00B39000-0x00B39020
	}

	[AttributeUsage] // 0x00148F8C-0x00148FD4
	[VisibleToOtherModules] // 0x00148F8C-0x00148FD4
	internal class RequiredByNativeCodeAttribute : Attribute // TypeDefIndex: 1767
	{
		// Fields
		[CompilerGenerated] // 0x001494DC-0x00149510
		[DebuggerBrowsable] // 0x001494DC-0x00149510
		private string <Name>k__BackingField; // 0x08
		[CompilerGenerated] // 0x00149510-0x00149544
		[DebuggerBrowsable] // 0x00149510-0x00149544
		private bool <Optional>k__BackingField; // 0x0C
		[CompilerGenerated] // 0x00149544-0x00149578
		[DebuggerBrowsable] // 0x00149544-0x00149578
		private bool <GenerateProxy>k__BackingField; // 0x0D
	
		// Properties
		public string Name { [CompilerGenerated] /* 0x00149A00-0x00149A10 */ set; } // 0x00B38FE0-0x00B38FE8
		public bool Optional { [CompilerGenerated] /* 0x00149A10-0x00149A20 */ set; } // 0x00B38FE8-0x00B38FF0
		public bool GenerateProxy { [CompilerGenerated] /* 0x00149A20-0x00149A30 */ set; } // 0x00B38FF0-0x00B38FF8
	
		// Constructors
		public RequiredByNativeCodeAttribute(); // 0x00B38FB8-0x00B38FC0
		public RequiredByNativeCodeAttribute(string name); // 0x00B38FC0-0x00B38FE0
	}

	[VisibleToOtherModules] // 0x00148FD4-0x00148FE4
	internal class GeneratedByOldBindingsGeneratorAttribute : Attribute // TypeDefIndex: 1768
	{
		// Constructors
		public GeneratedByOldBindingsGeneratorAttribute(); // 0x00B38FB0-0x00B38FB8
	}
}

namespace UnityEngine
{
	[AttributeUsage] // 0x00148FE4-0x0014902C
	[VisibleToOtherModules] // 0x00148FE4-0x0014902C
	internal sealed class AssetFileNameExtensionAttribute : Attribute // TypeDefIndex: 1769
	{
		// Fields
		[CompilerGenerated] // 0x00149578-0x001495AC
		[DebuggerBrowsable] // 0x00149578-0x001495AC
		private readonly string <preferredExtension>k__BackingField; // 0x08
		[CompilerGenerated] // 0x001495AC-0x001495E0
		[DebuggerBrowsable] // 0x001495AC-0x001495E0
		private readonly IEnumerable<string> <otherExtensions>k__BackingField; // 0x0C
	
		// Constructors
		public AssetFileNameExtensionAttribute(string preferredExtension, params /* 0x00149B80-0x00149B90 */ string[] otherExtensions); // 0x00B386DC-0x00B38704
	}

	[VisibleToOtherModules] // 0x0014902C-0x0014903C
	internal class ThreadAndSerializationSafeAttribute : Attribute // TypeDefIndex: 1770
	{
		// Constructors
		public ThreadAndSerializationSafeAttribute(); // 0x00B39028-0x00B39030
	}

	[AttributeUsage] // 0x0014903C-0x00149084
	[VisibleToOtherModules] // 0x0014903C-0x00149084
	internal class WritableAttribute : Attribute // TypeDefIndex: 1771
	{
		// Constructors
		public WritableAttribute(); // 0x00B39040-0x00B3AAE4
	}

	[AttributeUsage] // 0x00149084-0x001490B8
	[VisibleToOtherModules] // 0x00149084-0x001490B8
	internal class UnityEngineModuleAssembly : Attribute // TypeDefIndex: 1772
	{
		// Constructors
		public UnityEngineModuleAssembly(); // 0x00B39030-0x00B39038
	}

	[AttributeUsage] // 0x001490B8-0x00149100
	[VisibleToOtherModules] // 0x001490B8-0x00149100
	internal sealed class NativeClassAttribute : Attribute // TypeDefIndex: 1773
	{
		// Fields
		[CompilerGenerated] // 0x001495E0-0x00149614
		[DebuggerBrowsable] // 0x001495E0-0x00149614
		private string <QualifiedNativeName>k__BackingField; // 0x08
		[CompilerGenerated] // 0x00149614-0x00149648
		[DebuggerBrowsable] // 0x00149614-0x00149648
		private string <Declaration>k__BackingField; // 0x0C
	
		// Properties
		private string QualifiedNativeName { [CompilerGenerated] /* 0x00149A30-0x00149A40 */ set; } // 0x00B38F78-0x00B38F80
		private string Declaration { [CompilerGenerated] /* 0x00149A40-0x00149A50 */ set; } // 0x00B38F80-0x00B38F88
	
		// Constructors
		public NativeClassAttribute(string qualifiedCppName); // 0x00B38EF8-0x00B38F78
		public NativeClassAttribute(string qualifiedCppName, string declaration); // 0x00B38F88-0x00B38FB0
	}
}

namespace UnityEngine.Bindings
{
	[AttributeUsage] // 0x00149100-0x00149148
	[VisibleToOtherModules] // 0x00149100-0x00149148
	internal class VisibleToOtherModulesAttribute : Attribute // TypeDefIndex: 1774
	{
		// Constructors
		public VisibleToOtherModulesAttribute(); // 0x00B38EE8-0x00B38EF0
		public VisibleToOtherModulesAttribute(params /* 0x00149B90-0x00149BA0 */ string[] modules); // 0x00B38EF0-0x00B38EF8
	}

	internal interface IBindingsAttribute // TypeDefIndex: 1775
	{
	}

	internal interface IBindingsNameProviderAttribute : IBindingsAttribute // TypeDefIndex: 1776
	{
	}

	internal interface IBindingsHeaderProviderAttribute : IBindingsAttribute // TypeDefIndex: 1777
	{
	}

	internal interface IBindingsIsThreadSafeProviderAttribute : IBindingsAttribute // TypeDefIndex: 1778
	{
	}

	internal interface IBindingsIsFreeFunctionProviderAttribute : IBindingsAttribute // TypeDefIndex: 1779
	{
	}

	internal interface IBindingsThrowsProviderAttribute : IBindingsAttribute // TypeDefIndex: 1780
	{
	}

	internal interface IBindingsGenerateMarshallingTypeAttribute : IBindingsAttribute // TypeDefIndex: 1781
	{
	}

	internal interface IBindingsWritableSelfProviderAttribute : IBindingsAttribute // TypeDefIndex: 1782
	{
	}

	[AttributeUsage] // 0x00149148-0x0014917C
	[VisibleToOtherModules] // 0x00149148-0x0014917C
	internal class NativeConditionalAttribute : Attribute, IBindingsAttribute // TypeDefIndex: 1783
	{
		// Fields
		[CompilerGenerated] // 0x00149648-0x0014967C
		[DebuggerBrowsable] // 0x00149648-0x0014967C
		private string <Condition>k__BackingField; // 0x08
		[CompilerGenerated] // 0x0014967C-0x001496B0
		[DebuggerBrowsable] // 0x0014967C-0x001496B0
		private bool <Enabled>k__BackingField; // 0x0C
	
		// Properties
		public string Condition { [CompilerGenerated] /* 0x00149A50-0x00149A60 */ set; } // 0x00B387F4-0x00B387FC
		public bool Enabled { [CompilerGenerated] /* 0x00149A60-0x00149A70 */ set; } // 0x00B387FC-0x00B38804
	
		// Constructors
		public NativeConditionalAttribute(string condition); // 0x00B387CC-0x00B387F4
		public NativeConditionalAttribute(string condition, bool enabled); // 0x00B38804-0x00B3882C
	}

	[AttributeUsage] // 0x0014917C-0x001491C4
	[VisibleToOtherModules] // 0x0014917C-0x001491C4
	internal class NativeHeaderAttribute : Attribute, IBindingsHeaderProviderAttribute // TypeDefIndex: 1784
	{
		// Fields
		[CompilerGenerated] // 0x001496B0-0x001496E4
		[DebuggerBrowsable] // 0x001496B0-0x001496E4
		private string <Header>k__BackingField; // 0x08
	
		// Properties
		public string Header { [CompilerGenerated] /* 0x00149A70-0x00149A80 */ set; } // 0x00B38960-0x00B38968
	
		// Constructors
		public NativeHeaderAttribute(string header); // 0x00B3882C-0x00B38960
	}

	[AttributeUsage] // 0x001491C4-0x001491F8
	[VisibleToOtherModules] // 0x001491C4-0x001491F8
	internal class NativeNameAttribute : Attribute, IBindingsNameProviderAttribute // TypeDefIndex: 1785
	{
		// Fields
		[CompilerGenerated] // 0x001496E4-0x00149718
		[DebuggerBrowsable] // 0x001496E4-0x00149718
		private string <Name>k__BackingField; // 0x08
	
		// Properties
		public string Name { [CompilerGenerated] /* 0x00149A80-0x00149A90 */ set; } // 0x00B38BF8-0x00B38C00
	
		// Constructors
		public NativeNameAttribute(); // 0x00B38ABC-0x00B38AC4
		public NativeNameAttribute(string name); // 0x00B38AC4-0x00B38BF8
	}

	[AttributeUsage] // 0x001491F8-0x0014922C
	[VisibleToOtherModules] // 0x001491F8-0x0014922C
	internal sealed class NativeWritableSelfAttribute : Attribute, IBindingsWritableSelfProviderAttribute // TypeDefIndex: 1786
	{
		// Fields
		[CompilerGenerated] // 0x00149718-0x0014974C
		[DebuggerBrowsable] // 0x00149718-0x0014974C
		private bool <WritableSelf>k__BackingField; // 0x08
	
		// Properties
		public bool WritableSelf { [CompilerGenerated] /* 0x00149A90-0x00149AA0 */ set; } // 0x00B38E58-0x00B38E60
	
		// Constructors
		public NativeWritableSelfAttribute(); // 0x00B38E38-0x00B38E58
	}

	[AttributeUsage] // 0x0014922C-0x00149260
	[VisibleToOtherModules] // 0x0014922C-0x00149260
	internal class NativeMethodAttribute : Attribute, IBindingsNameProviderAttribute, IBindingsIsThreadSafeProviderAttribute, IBindingsIsFreeFunctionProviderAttribute, IBindingsThrowsProviderAttribute // TypeDefIndex: 1787
	{
		// Fields
		[CompilerGenerated] // 0x0014974C-0x00149780
		[DebuggerBrowsable] // 0x0014974C-0x00149780
		private string <Name>k__BackingField; // 0x08
		[CompilerGenerated] // 0x00149780-0x001497B4
		[DebuggerBrowsable] // 0x00149780-0x001497B4
		private bool <IsThreadSafe>k__BackingField; // 0x0C
		[CompilerGenerated] // 0x001497B4-0x001497E8
		[DebuggerBrowsable] // 0x001497B4-0x001497E8
		private bool <IsFreeFunction>k__BackingField; // 0x0D
		[CompilerGenerated] // 0x001497E8-0x0014981C
		[DebuggerBrowsable] // 0x001497E8-0x0014981C
		private bool <ThrowsException>k__BackingField; // 0x0E
		[CompilerGenerated] // 0x0014981C-0x00149850
		[DebuggerBrowsable] // 0x0014981C-0x00149850
		private bool <HasExplicitThis>k__BackingField; // 0x0F
	
		// Properties
		public string Name { [CompilerGenerated] /* 0x00149AA0-0x00149AB0 */ set; } // 0x00B38A9C-0x00B38AA4
		public bool IsThreadSafe { [CompilerGenerated] /* 0x00149AB0-0x00149AC0 */ set; } // 0x00B38AA4-0x00B38AAC
		public bool IsFreeFunction { [CompilerGenerated] /* 0x00149AC0-0x00149AD0 */ set; } // 0x00B3872C-0x00B38734
		public bool ThrowsException { [CompilerGenerated] /* 0x00149AD0-0x00149AE0 */ set; } // 0x00B38AAC-0x00B38AB4
		public bool HasExplicitThis { [CompilerGenerated] /* 0x00149AE0-0x00149AF0 */ set; } // 0x00B38AB4-0x00B38ABC
	
		// Constructors
		public NativeMethodAttribute(); // 0x00B38724-0x00B3872C
		public NativeMethodAttribute(string name); // 0x00B38968-0x00B38A9C
		public NativeMethodAttribute(string name, bool isFreeFunction); // 0x00B38750-0x00B3876C
		public NativeMethodAttribute(string name, bool isFreeFunction, bool isThreadSafe); // 0x00B38790-0x00B387B4
	}

	[VisibleToOtherModules] // 0x00149260-0x00149270
	internal enum TargetType // TypeDefIndex: 1788
	{
		Function = 0,
		Field = 1
	}

	[AttributeUsage] // 0x00149270-0x001492A4
	[VisibleToOtherModules] // 0x00149270-0x001492A4
	internal class NativePropertyAttribute : NativeMethodAttribute // TypeDefIndex: 1789
	{
		// Fields
		[CompilerGenerated] // 0x00149850-0x00149884
		[DebuggerBrowsable] // 0x00149850-0x00149884
		private TargetType <TargetType>k__BackingField; // 0x10
	
		// Properties
		public TargetType TargetType { [CompilerGenerated] /* 0x00149AF0-0x00149B00 */ set; } // 0x00B38C28-0x00B38C30
	
		// Constructors
		public NativePropertyAttribute(); // 0x00B38C00-0x00B38C08
		public NativePropertyAttribute(string name); // 0x00B38C08-0x00B38C0C
		public NativePropertyAttribute(string name, TargetType targetType); // 0x00B38C0C-0x00B38C28
		public NativePropertyAttribute(string name, bool isFree, TargetType targetType); // 0x00B38C30-0x00B38C54
	}

	[VisibleToOtherModules] // 0x001492A4-0x001492B4
	internal enum CodegenOptions // TypeDefIndex: 1790
	{
		Auto = 0,
		Custom = 1,
		Force = 2
	}

	[AttributeUsage] // 0x001492B4-0x001492E8
	[VisibleToOtherModules] // 0x001492B4-0x001492E8
	internal class NativeAsStructAttribute : Attribute, IBindingsAttribute // TypeDefIndex: 1791
	{
		// Constructors
		public NativeAsStructAttribute(); // 0x00B387C4-0x00B387CC
	}

	[AttributeUsage] // 0x001492E8-0x0014931C
	[VisibleToOtherModules] // 0x001492E8-0x0014931C
	internal class NativeTypeAttribute : Attribute, IBindingsHeaderProviderAttribute, IBindingsGenerateMarshallingTypeAttribute // TypeDefIndex: 1792
	{
		// Fields
		[CompilerGenerated] // 0x00149884-0x001498B8
		[DebuggerBrowsable] // 0x00149884-0x001498B8
		private string <Header>k__BackingField; // 0x08
		[CompilerGenerated] // 0x001498B8-0x001498EC
		[DebuggerBrowsable] // 0x001498B8-0x001498EC
		private string <IntermediateScriptingStructName>k__BackingField; // 0x0C
		[CompilerGenerated] // 0x001498EC-0x00149920
		[DebuggerBrowsable] // 0x001498EC-0x00149920
		private CodegenOptions <CodegenOptions>k__BackingField; // 0x10
	
		// Properties
		public string Header { [CompilerGenerated] /* 0x00149B00-0x00149B10 */ set; } // 0x00B38E00-0x00B38E08
		public string IntermediateScriptingStructName { [CompilerGenerated] /* 0x00149B10-0x00149B20 */ set; } // 0x00B38E30-0x00B38E38
		public CodegenOptions CodegenOptions { [CompilerGenerated] /* 0x00149B20-0x00149B30 */ set; } // 0x00B38C9C-0x00B38CA4
	
		// Constructors
		public NativeTypeAttribute(); // 0x00B38C7C-0x00B38C9C
		public NativeTypeAttribute(CodegenOptions codegenOptions); // 0x00B38CA4-0x00B38CC4
		public NativeTypeAttribute(string header); // 0x00B38CC4-0x00B38E00
		public NativeTypeAttribute(CodegenOptions codegenOptions, string intermediateStructName); // 0x00B38E08-0x00B38E30
	}

	[AttributeUsage] // 0x0014931C-0x00149350
	[VisibleToOtherModules] // 0x0014931C-0x00149350
	internal class NotNullAttribute : Attribute, IBindingsAttribute // TypeDefIndex: 1793
	{
		// Constructors
		public NotNullAttribute(); // 0x00B38E60-0x00B38E68
	}

	[AttributeUsage] // 0x00149350-0x00149384
	[VisibleToOtherModules] // 0x00149350-0x00149384
	internal class UnmarshalledAttribute : Attribute, IBindingsAttribute // TypeDefIndex: 1794
	{
		// Constructors
		public UnmarshalledAttribute(); // 0x00B38EE0-0x00B38EE8
	}

	[AttributeUsage] // 0x00149384-0x001493B8
	[VisibleToOtherModules] // 0x00149384-0x001493B8
	internal class FreeFunctionAttribute : NativeMethodAttribute // TypeDefIndex: 1795
	{
		// Constructors
		public FreeFunctionAttribute(); // 0x00B38704-0x00B38724
		public FreeFunctionAttribute(string name); // 0x00B38734-0x00B38750
		public FreeFunctionAttribute(string name, bool isThreadSafe); // 0x00B3876C-0x00B38790
	}

	[AttributeUsage] // 0x001493B8-0x001493EC
	[VisibleToOtherModules] // 0x001493B8-0x001493EC
	internal class ThreadSafeAttribute : NativeMethodAttribute // TypeDefIndex: 1796
	{
		// Constructors
		public ThreadSafeAttribute(); // 0x00B38EC0-0x00B38EE0
	}

	[VisibleToOtherModules] // 0x001493EC-0x001493FC
	internal enum StaticAccessorType // TypeDefIndex: 1797
	{
		Dot = 0,
		Arrow = 1,
		DoubleColon = 2,
		ArrowWithDefaultReturnIfNull = 3
	}

	[AttributeUsage] // 0x001493FC-0x00149430
	[VisibleToOtherModules] // 0x001493FC-0x00149430
	internal class StaticAccessorAttribute : Attribute, IBindingsAttribute // TypeDefIndex: 1798
	{
		// Fields
		[CompilerGenerated] // 0x00149920-0x00149954
		[DebuggerBrowsable] // 0x00149920-0x00149954
		private string <Name>k__BackingField; // 0x08
		[CompilerGenerated] // 0x00149954-0x00149988
		[DebuggerBrowsable] // 0x00149954-0x00149988
		private StaticAccessorType <Type>k__BackingField; // 0x0C
	
		// Properties
		public string Name { [CompilerGenerated] /* 0x00149B40-0x00149B50 */ set; } // 0x00B38E88-0x00B38E90
		public StaticAccessorType Type { [CompilerGenerated] /* 0x00149B50-0x00149B60 */ set; } // 0x00B38EB8-0x00B38EC0
	
		// Constructors
		[VisibleToOtherModules] // 0x00149B30-0x00149B40
		internal StaticAccessorAttribute(string name); // 0x00B38E68-0x00B38E88
		public StaticAccessorAttribute(string name, StaticAccessorType type); // 0x00B38E90-0x00B38EB8
	}

	[AttributeUsage] // 0x00149430-0x00149464
	[VisibleToOtherModules] // 0x00149430-0x00149464
	internal class NativeThrowsAttribute : Attribute, IBindingsThrowsProviderAttribute // TypeDefIndex: 1799
	{
		// Fields
		[CompilerGenerated] // 0x00149988-0x001499BC
		[DebuggerBrowsable] // 0x00149988-0x001499BC
		private bool <ThrowsException>k__BackingField; // 0x08
	
		// Properties
		public bool ThrowsException { [CompilerGenerated] /* 0x00149B60-0x00149B70 */ set; } // 0x00B38C74-0x00B38C7C
	
		// Constructors
		public NativeThrowsAttribute(); // 0x00B38C54-0x00B38C74
	}

	[AttributeUsage] // 0x00149464-0x00149498
	[VisibleToOtherModules] // 0x00149464-0x00149498
	internal class IgnoreAttribute : Attribute, IBindingsAttribute // TypeDefIndex: 1800
	{
		// Fields
		[CompilerGenerated] // 0x001499BC-0x001499F0
		[DebuggerBrowsable] // 0x001499BC-0x001499F0
		private bool <DoesNotContributeToSize>k__BackingField; // 0x08
	
		// Properties
		public bool DoesNotContributeToSize { [CompilerGenerated] /* 0x00149B70-0x00149B80 */ set; } // 0x00B387BC-0x00B387C4
	
		// Constructors
		public IgnoreAttribute(); // 0x00B387B4-0x00B387BC
	}
}

namespace UnityEngine
{
	[VisibleToOtherModules] // 0x00149498-0x001494A8
	internal sealed class UnityString // TypeDefIndex: 1801
	{
		// Methods
		public static string Format(string fmt, params /* 0x00149BA0-0x00149BB0 */ object[] args); // 0x00B39038-0x00B39040
	}

	[NativeType] // 0x0014AE78-0x0014AEB8
	public struct jvalue // TypeDefIndex: 1803
	{
		// Fields
		public bool z; // 0x00
		public byte b; // 0x00
		public char c; // 0x00
		public short s; // 0x00
		public int i; // 0x00
		public long j; // 0x00
		public float f; // 0x00
		public double d; // 0x00
		public IntPtr l; // 0x00
	}

	[NativeHeader] // 0x0014AEB8-0x0014AF2C
	[StaticAccessor] // 0x0014AEB8-0x0014AF2C
	[UsedByNativeCode] // 0x0014AEB8-0x0014AF2C
	public class AndroidJNIHelper // TypeDefIndex: 1804
	{
		// Properties
		public static bool debug { get; set; } // 0x00809DBC-0x00809E4C 0x00809E4C-0x00809EEC
	
		// Constructors
		private AndroidJNIHelper(); // 0x00809DB4-0x00809DBC
	
		// Methods
		public static IntPtr GetConstructorID(IntPtr javaClass); // 0x00809EEC-0x00809F54
		public static IntPtr GetConstructorID(IntPtr javaClass, [UnityEngine.Internal.DefaultValue] /* 0x00158A90-0x00158AC4 */ string signature); // 0x00809F54-0x00809F5C
		public static IntPtr GetMethodID(IntPtr javaClass, string methodName); // 0x00809F5C-0x00809FDC
		public static IntPtr GetMethodID(IntPtr javaClass, string methodName, [UnityEngine.Internal.DefaultValue] /* 0x00158AC4-0x00158AF8 */ string signature); // 0x00809FFC-0x0080A020
		public static IntPtr GetMethodID(IntPtr javaClass, string methodName, [UnityEngine.Internal.DefaultValue] /* 0x00158AF8-0x00158B2C */ string signature, [UnityEngine.Internal.DefaultValue] /* 0x00158B2C-0x00158B60 */ bool isStatic); // 0x00809FDC-0x00809FFC
		public static IntPtr GetFieldID(IntPtr javaClass, string fieldName); // 0x0080A020-0x0080A0A0
		public static IntPtr GetFieldID(IntPtr javaClass, string fieldName, [UnityEngine.Internal.DefaultValue] /* 0x00158B60-0x00158B94 */ string signature); // 0x0080A0C0-0x0080A0E4
		public static IntPtr GetFieldID(IntPtr javaClass, string fieldName, [UnityEngine.Internal.DefaultValue] /* 0x00158B94-0x00158BC8 */ string signature, [UnityEngine.Internal.DefaultValue] /* 0x00158BC8-0x00158BFC */ bool isStatic); // 0x0080A0A0-0x0080A0C0
		public static IntPtr CreateJavaRunnable(AndroidJavaRunnable jrunnable); // 0x0080A0E4-0x0080A0EC
		[ThreadSafe] // 0x0015248C-0x0015249C
		public static IntPtr CreateJavaProxy(AndroidJavaProxy proxy); // 0x0080A0EC-0x0080A164
		public static IntPtr ConvertToJNIArray(Array array); // 0x0080A164-0x0080A16C
		public static jvalue[] CreateJNIArgArray(object[] args); // 0x0080A16C-0x0080A174
		public static void DeleteJNIArgArray(object[] args, jvalue[] jniArgs); // 0x0080A174-0x0080A17C
		public static IntPtr GetConstructorID(IntPtr jclass, object[] args); // 0x0080A17C-0x0080A184
		public static IntPtr GetMethodID(IntPtr jclass, string methodName, object[] args, bool isStatic); // 0x0080A184-0x0080A1A4
		public static string GetSignature(object obj); // 0x0080A1A4-0x0080A1AC
		public static string GetSignature(object[] args); // 0x0080A1AC-0x0080A1B4
		public static ArrayType ConvertFromJNIArray<ArrayType>(IntPtr array);
		public static IntPtr GetMethodID<ReturnType>(IntPtr jclass, string methodName, object[] args, bool isStatic);
		public static IntPtr GetFieldID<FieldType>(IntPtr jclass, string fieldName, bool isStatic);
		public static string GetSignature<ReturnType>(object[] args);
	}

	[NativeHeader] // 0x0014AF2C-0x0014AF90
	[StaticAccessor] // 0x0014AF2C-0x0014AF90
	public class AndroidJNI // TypeDefIndex: 1805
	{
		// Constructors
		private AndroidJNI(); // 0x00804DEC-0x00804DF4
	
		// Methods
		[ThreadSafe] // 0x0015249C-0x001524AC
		public static int AttachCurrentThread(); // 0x00804DF4-0x00804E88
		[ThreadSafe] // 0x001524AC-0x001524BC
		public static int DetachCurrentThread(); // 0x00804E88-0x00804F1C
		[ThreadSafe] // 0x001524BC-0x001524CC
		public static int GetVersion(); // 0x00804F1C-0x00804FA8
		[ThreadSafe] // 0x001524CC-0x001524DC
		public static IntPtr FindClass(string name); // 0x00804FA8-0x00805044
		[ThreadSafe] // 0x001524DC-0x001524EC
		public static IntPtr FromReflectedMethod(IntPtr refMethod); // 0x00805044-0x008050E8
		[ThreadSafe] // 0x001524EC-0x001524FC
		public static IntPtr FromReflectedField(IntPtr refField); // 0x008050E8-0x0080518C
		[ThreadSafe] // 0x001524FC-0x0015250C
		public static IntPtr ToReflectedMethod(IntPtr clazz, IntPtr methodID, bool isStatic); // 0x0080518C-0x00805214
		[ThreadSafe] // 0x0015250C-0x0015251C
		public static IntPtr ToReflectedField(IntPtr clazz, IntPtr fieldID, bool isStatic); // 0x00805214-0x0080529C
		[ThreadSafe] // 0x0015251C-0x0015252C
		public static IntPtr GetSuperclass(IntPtr clazz); // 0x0080529C-0x0080533C
		[ThreadSafe] // 0x0015252C-0x0015253C
		public static bool IsAssignableFrom(IntPtr clazz1, IntPtr clazz2); // 0x0080533C-0x008053BC
		[ThreadSafe] // 0x0015253C-0x0015254C
		public static int Throw(IntPtr obj); // 0x008053BC-0x00805454
		[ThreadSafe] // 0x0015254C-0x0015255C
		public static int ThrowNew(IntPtr clazz, string message); // 0x00805454-0x00805504
		[ThreadSafe] // 0x0015255C-0x0015256C
		public static IntPtr ExceptionOccurred(); // 0x00805504-0x00805594
		[ThreadSafe] // 0x0015256C-0x0015257C
		public static void ExceptionDescribe(); // 0x00805594-0x00805624
		[ThreadSafe] // 0x0015257C-0x0015258C
		public static void ExceptionClear(); // 0x00805624-0x008056B4
		[ThreadSafe] // 0x0015258C-0x0015259C
		public static void FatalError(string message); // 0x008056B4-0x00805750
		[ThreadSafe] // 0x0015259C-0x001525AC
		public static int PushLocalFrame(int capacity); // 0x00805750-0x008057F0
		[ThreadSafe] // 0x001525AC-0x001525BC
		public static IntPtr PopLocalFrame(IntPtr ptr); // 0x008057F0-0x00805890
		[ThreadSafe] // 0x001525BC-0x001525CC
		public static IntPtr NewGlobalRef(IntPtr obj); // 0x00805890-0x0080592C
		[ThreadSafe] // 0x001525CC-0x001525DC
		public static void DeleteGlobalRef(IntPtr obj); // 0x0080592C-0x008059CC
		[ThreadSafe] // 0x001525DC-0x001525EC
		public static IntPtr NewLocalRef(IntPtr obj); // 0x008059CC-0x00805A68
		[ThreadSafe] // 0x001525EC-0x001525FC
		public static void DeleteLocalRef(IntPtr obj); // 0x00805A68-0x00805B08
		[ThreadSafe] // 0x001525FC-0x0015260C
		public static bool IsSameObject(IntPtr obj1, IntPtr obj2); // 0x00805B08-0x00805B88
		[ThreadSafe] // 0x0015260C-0x0015261C
		public static int EnsureLocalCapacity(int capacity); // 0x00805B88-0x00805C2C
		[ThreadSafe] // 0x0015261C-0x0015262C
		public static IntPtr AllocObject(IntPtr clazz); // 0x00805C2C-0x00805CC8
		[ThreadSafe] // 0x0015262C-0x0015263C
		public static IntPtr NewObject(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x00805CC8-0x00805D50
		[ThreadSafe] // 0x0015263C-0x0015264C
		public static IntPtr GetObjectClass(IntPtr obj); // 0x00805D50-0x00805DF0
		[ThreadSafe] // 0x0015264C-0x0015265C
		public static bool IsInstanceOf(IntPtr obj, IntPtr clazz); // 0x00805DF0-0x00805E70
		[ThreadSafe] // 0x0015265C-0x0015266C
		public static IntPtr GetMethodID(IntPtr clazz, string name, string sig); // 0x00805E70-0x00805EF8
		[ThreadSafe] // 0x0015266C-0x0015267C
		public static IntPtr GetFieldID(IntPtr clazz, string name, string sig); // 0x00805EF8-0x00805F80
		[ThreadSafe] // 0x0015267C-0x0015268C
		public static IntPtr GetStaticMethodID(IntPtr clazz, string name, string sig); // 0x00805F80-0x00806008
		[ThreadSafe] // 0x0015268C-0x0015269C
		public static IntPtr GetStaticFieldID(IntPtr clazz, string name, string sig); // 0x00806008-0x00806090
		[ThreadSafe] // 0x0015269C-0x001526AC
		public static IntPtr NewStringUTF(string bytes); // 0x00806090-0x0080612C
		[ThreadSafe] // 0x001526AC-0x001526BC
		public static int GetStringUTFLength(IntPtr str); // 0x0080612C-0x008061D0
		[ThreadSafe] // 0x001526BC-0x001526CC
		public static string GetStringUTFChars(IntPtr str); // 0x008061D0-0x00806274
		[ThreadSafe] // 0x001526CC-0x001526DC
		public static string CallStringMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x00806274-0x008062FC
		[ThreadSafe] // 0x001526DC-0x001526EC
		public static IntPtr CallObjectMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x008062FC-0x00806384
		[ThreadSafe] // 0x001526EC-0x001526FC
		public static int CallIntMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x00806384-0x0080640C
		[ThreadSafe] // 0x001526FC-0x0015270C
		public static bool CallBooleanMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x0080640C-0x00806494
		[ThreadSafe] // 0x0015270C-0x0015271C
		public static short CallShortMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x00806494-0x0080651C
		[ThreadSafe] // 0x0015271C-0x0015272C
		public static byte CallByteMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x0080651C-0x008065A4
		[ThreadSafe] // 0x0015272C-0x0015273C
		public static char CallCharMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x008065A4-0x0080662C
		[ThreadSafe] // 0x0015273C-0x0015274C
		public static float CallFloatMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x0080662C-0x008066B4
		[ThreadSafe] // 0x0015274C-0x0015275C
		public static double CallDoubleMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x008066B4-0x0080673C
		[ThreadSafe] // 0x0015275C-0x0015276C
		public static long CallLongMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x0080673C-0x008067C4
		[ThreadSafe] // 0x0015276C-0x0015277C
		public static void CallVoidMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x008067C4-0x0080684C
		[ThreadSafe] // 0x0015277C-0x0015278C
		public static string GetStringField(IntPtr obj, IntPtr fieldID); // 0x0080684C-0x008068CC
		[ThreadSafe] // 0x0015278C-0x0015279C
		public static IntPtr GetObjectField(IntPtr obj, IntPtr fieldID); // 0x008068CC-0x0080694C
		[ThreadSafe] // 0x0015279C-0x001527AC
		public static bool GetBooleanField(IntPtr obj, IntPtr fieldID); // 0x0080694C-0x008069CC
		[ThreadSafe] // 0x001527AC-0x001527BC
		public static byte GetByteField(IntPtr obj, IntPtr fieldID); // 0x008069CC-0x00806A4C
		[ThreadSafe] // 0x001527BC-0x001527CC
		public static char GetCharField(IntPtr obj, IntPtr fieldID); // 0x00806A4C-0x00806ACC
		[ThreadSafe] // 0x001527CC-0x001527DC
		public static short GetShortField(IntPtr obj, IntPtr fieldID); // 0x00806ACC-0x00806B4C
		[ThreadSafe] // 0x001527DC-0x001527EC
		public static int GetIntField(IntPtr obj, IntPtr fieldID); // 0x00806B4C-0x00806BCC
		[ThreadSafe] // 0x001527EC-0x001527FC
		public static long GetLongField(IntPtr obj, IntPtr fieldID); // 0x00806BCC-0x00806C4C
		[ThreadSafe] // 0x001527FC-0x0015280C
		public static float GetFloatField(IntPtr obj, IntPtr fieldID); // 0x00806C4C-0x00806CCC
		[ThreadSafe] // 0x0015280C-0x0015281C
		public static double GetDoubleField(IntPtr obj, IntPtr fieldID); // 0x00806CCC-0x00806D4C
		[ThreadSafe] // 0x0015281C-0x0015282C
		public static void SetStringField(IntPtr obj, IntPtr fieldID, string val); // 0x00806D4C-0x00806DD4
		[ThreadSafe] // 0x0015282C-0x0015283C
		public static void SetObjectField(IntPtr obj, IntPtr fieldID, IntPtr val); // 0x00806DD4-0x00806E5C
		[ThreadSafe] // 0x0015283C-0x0015284C
		public static void SetBooleanField(IntPtr obj, IntPtr fieldID, bool val); // 0x00806E5C-0x00806EE4
		[ThreadSafe] // 0x0015284C-0x0015285C
		public static void SetByteField(IntPtr obj, IntPtr fieldID, byte val); // 0x00806EE4-0x00806F6C
		[ThreadSafe] // 0x0015285C-0x0015286C
		public static void SetCharField(IntPtr obj, IntPtr fieldID, char val); // 0x00806F6C-0x00806FF4
		[ThreadSafe] // 0x0015286C-0x0015287C
		public static void SetShortField(IntPtr obj, IntPtr fieldID, short val); // 0x00806FF4-0x0080707C
		[ThreadSafe] // 0x0015287C-0x0015288C
		public static void SetIntField(IntPtr obj, IntPtr fieldID, int val); // 0x0080707C-0x00807104
		[ThreadSafe] // 0x0015288C-0x0015289C
		public static void SetLongField(IntPtr obj, IntPtr fieldID, long val); // 0x00807104-0x00807194
		[ThreadSafe] // 0x0015289C-0x001528AC
		public static void SetFloatField(IntPtr obj, IntPtr fieldID, float val); // 0x00807194-0x0080721C
		[ThreadSafe] // 0x001528AC-0x001528BC
		public static void SetDoubleField(IntPtr obj, IntPtr fieldID, double val); // 0x0080721C-0x008072AC
		[ThreadSafe] // 0x001528BC-0x001528CC
		public static string CallStaticStringMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x008072AC-0x00807334
		[ThreadSafe] // 0x001528CC-0x001528DC
		public static IntPtr CallStaticObjectMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x00807334-0x008073BC
		[ThreadSafe] // 0x001528DC-0x001528EC
		public static int CallStaticIntMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x008073BC-0x00807444
		[ThreadSafe] // 0x001528EC-0x001528FC
		public static bool CallStaticBooleanMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x00807444-0x008074CC
		[ThreadSafe] // 0x001528FC-0x0015290C
		public static short CallStaticShortMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x008074CC-0x00807554
		[ThreadSafe] // 0x0015290C-0x0015291C
		public static byte CallStaticByteMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x00807554-0x008075DC
		[ThreadSafe] // 0x0015291C-0x0015292C
		public static char CallStaticCharMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x008075DC-0x00807664
		[ThreadSafe] // 0x0015292C-0x0015293C
		public static float CallStaticFloatMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x00807664-0x008076EC
		[ThreadSafe] // 0x0015293C-0x0015294C
		public static double CallStaticDoubleMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x008076EC-0x00807774
		[ThreadSafe] // 0x0015294C-0x0015295C
		public static long CallStaticLongMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x00807774-0x008077FC
		[ThreadSafe] // 0x0015295C-0x0015296C
		public static void CallStaticVoidMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x008077FC-0x00807884
		[ThreadSafe] // 0x0015296C-0x0015297C
		public static string GetStaticStringField(IntPtr clazz, IntPtr fieldID); // 0x00807884-0x00807904
		[ThreadSafe] // 0x0015297C-0x0015298C
		public static IntPtr GetStaticObjectField(IntPtr clazz, IntPtr fieldID); // 0x00807904-0x00807984
		[ThreadSafe] // 0x0015298C-0x0015299C
		public static bool GetStaticBooleanField(IntPtr clazz, IntPtr fieldID); // 0x00807984-0x00807A04
		[ThreadSafe] // 0x0015299C-0x001529AC
		public static byte GetStaticByteField(IntPtr clazz, IntPtr fieldID); // 0x00807A04-0x00807A84
		[ThreadSafe] // 0x001529AC-0x001529BC
		public static char GetStaticCharField(IntPtr clazz, IntPtr fieldID); // 0x00807A84-0x00807B04
		[ThreadSafe] // 0x001529BC-0x001529CC
		public static short GetStaticShortField(IntPtr clazz, IntPtr fieldID); // 0x00807B04-0x00807B84
		[ThreadSafe] // 0x001529CC-0x001529DC
		public static int GetStaticIntField(IntPtr clazz, IntPtr fieldID); // 0x00807B84-0x00807C04
		[ThreadSafe] // 0x001529DC-0x001529EC
		public static long GetStaticLongField(IntPtr clazz, IntPtr fieldID); // 0x00807C04-0x00807C84
		[ThreadSafe] // 0x001529EC-0x001529FC
		public static float GetStaticFloatField(IntPtr clazz, IntPtr fieldID); // 0x00807C84-0x00807D04
		[ThreadSafe] // 0x001529FC-0x00152A0C
		public static double GetStaticDoubleField(IntPtr clazz, IntPtr fieldID); // 0x00807D04-0x00807D84
		[ThreadSafe] // 0x00152A0C-0x00152A1C
		public static void SetStaticStringField(IntPtr clazz, IntPtr fieldID, string val); // 0x00807D84-0x00807E0C
		[ThreadSafe] // 0x00152A1C-0x00152A2C
		public static void SetStaticObjectField(IntPtr clazz, IntPtr fieldID, IntPtr val); // 0x00807E0C-0x00807E94
		[ThreadSafe] // 0x00152A2C-0x00152A3C
		public static void SetStaticBooleanField(IntPtr clazz, IntPtr fieldID, bool val); // 0x00807E94-0x00807F1C
		[ThreadSafe] // 0x00152A3C-0x00152A4C
		public static void SetStaticByteField(IntPtr clazz, IntPtr fieldID, byte val); // 0x00807F1C-0x00807FA4
		[ThreadSafe] // 0x00152A4C-0x00152A5C
		public static void SetStaticCharField(IntPtr clazz, IntPtr fieldID, char val); // 0x00807FA4-0x0080802C
		[ThreadSafe] // 0x00152A5C-0x00152A6C
		public static void SetStaticShortField(IntPtr clazz, IntPtr fieldID, short val); // 0x0080802C-0x008080B4
		[ThreadSafe] // 0x00152A6C-0x00152A7C
		public static void SetStaticIntField(IntPtr clazz, IntPtr fieldID, int val); // 0x008080B4-0x0080813C
		[ThreadSafe] // 0x00152A7C-0x00152A8C
		public static void SetStaticLongField(IntPtr clazz, IntPtr fieldID, long val); // 0x0080813C-0x008081CC
		[ThreadSafe] // 0x00152A8C-0x00152A9C
		public static void SetStaticFloatField(IntPtr clazz, IntPtr fieldID, float val); // 0x008081CC-0x00808254
		[ThreadSafe] // 0x00152A9C-0x00152AAC
		public static void SetStaticDoubleField(IntPtr clazz, IntPtr fieldID, double val); // 0x00808254-0x008082E4
		[ThreadSafe] // 0x00152AAC-0x00152ABC
		public static IntPtr ToBooleanArray(bool[] array); // 0x008082E4-0x00808388
		[ThreadSafe] // 0x00152ABC-0x00152ACC
		public static IntPtr ToByteArray(byte[] array); // 0x00808388-0x00808424
		[ThreadSafe] // 0x00152ACC-0x00152ADC
		public static IntPtr ToCharArray(char[] array); // 0x00808424-0x008084C0
		[ThreadSafe] // 0x00152ADC-0x00152AEC
		public static IntPtr ToShortArray(short[] array); // 0x008084C0-0x00808560
		[ThreadSafe] // 0x00152AEC-0x00152AFC
		public static IntPtr ToIntArray(int[] array); // 0x00808560-0x008085FC
		[ThreadSafe] // 0x00152AFC-0x00152B0C
		public static IntPtr ToLongArray(long[] array); // 0x008085FC-0x00808698
		[ThreadSafe] // 0x00152B0C-0x00152B1C
		public static IntPtr ToFloatArray(float[] array); // 0x00808698-0x00808738
		[ThreadSafe] // 0x00152B1C-0x00152B2C
		public static IntPtr ToDoubleArray(double[] array); // 0x00808738-0x008087D8
		[ThreadSafe] // 0x00152B2C-0x00152B3C
		public static IntPtr ToObjectArray(IntPtr[] array, IntPtr arrayClass); // 0x008087D8-0x00808858
		public static IntPtr ToObjectArray(IntPtr[] array); // 0x00808858-0x008088B0
		[ThreadSafe] // 0x00152B3C-0x00152B4C
		public static bool[] FromBooleanArray(IntPtr array); // 0x008088B0-0x00808950
		[ThreadSafe] // 0x00152B4C-0x00152B5C
		public static byte[] FromByteArray(IntPtr array); // 0x00808950-0x008089F0
		[ThreadSafe] // 0x00152B5C-0x00152B6C
		public static char[] FromCharArray(IntPtr array); // 0x008089F0-0x00808A90
		[ThreadSafe] // 0x00152B6C-0x00152B7C
		public static short[] FromShortArray(IntPtr array); // 0x00808A90-0x00808B30
		[ThreadSafe] // 0x00152B7C-0x00152B8C
		public static int[] FromIntArray(IntPtr array); // 0x00808B30-0x00808BCC
		[ThreadSafe] // 0x00152B8C-0x00152B9C
		public static long[] FromLongArray(IntPtr array); // 0x00808BCC-0x00808C6C
		[ThreadSafe] // 0x00152B9C-0x00152BAC
		public static float[] FromFloatArray(IntPtr array); // 0x00808C6C-0x00808D0C
		[ThreadSafe] // 0x00152BAC-0x00152BBC
		public static double[] FromDoubleArray(IntPtr array); // 0x00808D0C-0x00808DAC
		[ThreadSafe] // 0x00152BBC-0x00152BCC
		public static IntPtr[] FromObjectArray(IntPtr array); // 0x00808DAC-0x00808E4C
		[ThreadSafe] // 0x00152BCC-0x00152BDC
		public static int GetArrayLength(IntPtr array); // 0x00808E4C-0x00808EEC
		[ThreadSafe] // 0x00152BDC-0x00152BEC
		public static IntPtr NewBooleanArray(int size); // 0x00808EEC-0x00808F8C
		[ThreadSafe] // 0x00152BEC-0x00152BFC
		public static IntPtr NewByteArray(int size); // 0x00808F8C-0x00809028
		[ThreadSafe] // 0x00152BFC-0x00152C0C
		public static IntPtr NewCharArray(int size); // 0x00809028-0x008090C4
		[ThreadSafe] // 0x00152C0C-0x00152C1C
		public static IntPtr NewShortArray(int size); // 0x008090C4-0x00809160
		[ThreadSafe] // 0x00152C1C-0x00152C2C
		public static IntPtr NewIntArray(int size); // 0x00809160-0x008091FC
		[ThreadSafe] // 0x00152C2C-0x00152C3C
		public static IntPtr NewLongArray(int size); // 0x008091FC-0x00809298
		[ThreadSafe] // 0x00152C3C-0x00152C4C
		public static IntPtr NewFloatArray(int size); // 0x00809298-0x00809334
		[ThreadSafe] // 0x00152C4C-0x00152C5C
		public static IntPtr NewDoubleArray(int size); // 0x00809334-0x008093D4
		[ThreadSafe] // 0x00152C5C-0x00152C6C
		public static IntPtr NewObjectArray(int size, IntPtr clazz, IntPtr obj); // 0x008093D4-0x0080945C
		[ThreadSafe] // 0x00152C6C-0x00152C7C
		public static bool GetBooleanArrayElement(IntPtr array, int index); // 0x0080945C-0x008094DC
		[ThreadSafe] // 0x00152C7C-0x00152C8C
		public static byte GetByteArrayElement(IntPtr array, int index); // 0x008094DC-0x0080955C
		[ThreadSafe] // 0x00152C8C-0x00152C9C
		public static char GetCharArrayElement(IntPtr array, int index); // 0x0080955C-0x008095DC
		[ThreadSafe] // 0x00152C9C-0x00152CAC
		public static short GetShortArrayElement(IntPtr array, int index); // 0x008095DC-0x0080965C
		[ThreadSafe] // 0x00152CAC-0x00152CBC
		public static int GetIntArrayElement(IntPtr array, int index); // 0x0080965C-0x008096DC
		[ThreadSafe] // 0x00152CBC-0x00152CCC
		public static long GetLongArrayElement(IntPtr array, int index); // 0x008096DC-0x0080975C
		[ThreadSafe] // 0x00152CCC-0x00152CDC
		public static float GetFloatArrayElement(IntPtr array, int index); // 0x0080975C-0x008097DC
		[ThreadSafe] // 0x00152CDC-0x00152CEC
		public static double GetDoubleArrayElement(IntPtr array, int index); // 0x008097DC-0x0080985C
		[ThreadSafe] // 0x00152CEC-0x00152CFC
		public static IntPtr GetObjectArrayElement(IntPtr array, int index); // 0x0080985C-0x008098DC
		[ThreadSafe] // 0x00152CFC-0x00152D0C
		public static void SetBooleanArrayElement(IntPtr array, int index, byte val); // 0x008098DC-0x00809964
		[ThreadSafe] // 0x00152D0C-0x00152D1C
		public static void SetByteArrayElement(IntPtr array, int index, sbyte val); // 0x00809964-0x008099EC
		[ThreadSafe] // 0x00152D1C-0x00152D2C
		public static void SetCharArrayElement(IntPtr array, int index, char val); // 0x008099EC-0x00809A74
		[ThreadSafe] // 0x00152D2C-0x00152D3C
		public static void SetShortArrayElement(IntPtr array, int index, short val); // 0x00809A74-0x00809AFC
		[ThreadSafe] // 0x00152D3C-0x00152D4C
		public static void SetIntArrayElement(IntPtr array, int index, int val); // 0x00809AFC-0x00809B84
		[ThreadSafe] // 0x00152D4C-0x00152D5C
		public static void SetLongArrayElement(IntPtr array, int index, long val); // 0x00809B84-0x00809C14
		[ThreadSafe] // 0x00152D5C-0x00152D6C
		public static void SetFloatArrayElement(IntPtr array, int index, float val); // 0x00809C14-0x00809C9C
		[ThreadSafe] // 0x00152D6C-0x00152D7C
		public static void SetDoubleArrayElement(IntPtr array, int index, double val); // 0x00809C9C-0x00809D2C
		[ThreadSafe] // 0x00152D7C-0x00152D8C
		public static void SetObjectArrayElement(IntPtr array, int index, IntPtr obj); // 0x00809D2C-0x00809DB4
	}

	internal class AndroidJNISafe // TypeDefIndex: 1806
	{
		// Methods
		public static void CheckException(); // 0x0080A1B4-0x0080A3F0
		public static void DeleteGlobalRef(IntPtr globalref); // 0x0080A4F0-0x0080A55C
		public static void DeleteLocalRef(IntPtr localref); // 0x0080A484-0x0080A4F0
		public static IntPtr NewStringUTF(string bytes); // 0x0080A55C-0x0080A5B8
		public static string GetStringUTFChars(IntPtr str); // 0x0080A5B8-0x0080A614
		public static IntPtr GetObjectClass(IntPtr ptr); // 0x0080A614-0x0080A670
		public static IntPtr GetStaticMethodID(IntPtr clazz, string name, string sig); // 0x0080A670-0x0080A6CC
		public static IntPtr GetMethodID(IntPtr obj, string name, string sig); // 0x0080A6CC-0x0080A728
		public static IntPtr GetFieldID(IntPtr clazz, string name, string sig); // 0x0080A728-0x0080A784
		public static IntPtr GetStaticFieldID(IntPtr clazz, string name, string sig); // 0x0080A784-0x0080A7E0
		public static IntPtr FromReflectedMethod(IntPtr refMethod); // 0x0080A7E0-0x0080A83C
		public static IntPtr FromReflectedField(IntPtr refField); // 0x0080A83C-0x0080A898
		public static IntPtr FindClass(string name); // 0x0080A898-0x0080A8F4
		public static IntPtr NewObject(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x0080A8F4-0x0080A950
		public static void SetStaticObjectField(IntPtr clazz, IntPtr fieldID, IntPtr val); // 0x0080A950-0x0080A9A0
		public static void SetStaticStringField(IntPtr clazz, IntPtr fieldID, string val); // 0x0080A9A0-0x0080A9F0
		public static void SetStaticCharField(IntPtr clazz, IntPtr fieldID, char val); // 0x0080A9F0-0x0080AA40
		public static void SetStaticDoubleField(IntPtr clazz, IntPtr fieldID, double val); // 0x0080AA40-0x0080AAA0
		public static void SetStaticFloatField(IntPtr clazz, IntPtr fieldID, float val); // 0x0080AAA0-0x0080AAF0
		public static void SetStaticLongField(IntPtr clazz, IntPtr fieldID, long val); // 0x0080AAF0-0x0080AB50
		public static void SetStaticShortField(IntPtr clazz, IntPtr fieldID, short val); // 0x0080AB50-0x0080ABA0
		public static void SetStaticByteField(IntPtr clazz, IntPtr fieldID, byte val); // 0x0080ABA0-0x0080ABF0
		public static void SetStaticBooleanField(IntPtr clazz, IntPtr fieldID, bool val); // 0x0080ABF0-0x0080AC40
		public static void SetStaticIntField(IntPtr clazz, IntPtr fieldID, int val); // 0x0080AC40-0x0080AC90
		public static IntPtr GetStaticObjectField(IntPtr clazz, IntPtr fieldID); // 0x0080AC90-0x0080ACEC
		public static string GetStaticStringField(IntPtr clazz, IntPtr fieldID); // 0x0080ACEC-0x0080AD48
		public static char GetStaticCharField(IntPtr clazz, IntPtr fieldID); // 0x0080AD48-0x0080ADA4
		public static double GetStaticDoubleField(IntPtr clazz, IntPtr fieldID); // 0x0080ADA4-0x0080AE08
		public static float GetStaticFloatField(IntPtr clazz, IntPtr fieldID); // 0x0080AE08-0x0080AE70
		public static long GetStaticLongField(IntPtr clazz, IntPtr fieldID); // 0x0080AE70-0x0080AED8
		public static short GetStaticShortField(IntPtr clazz, IntPtr fieldID); // 0x0080AED8-0x0080AF34
		public static byte GetStaticByteField(IntPtr clazz, IntPtr fieldID); // 0x0080AF34-0x0080AF90
		public static bool GetStaticBooleanField(IntPtr clazz, IntPtr fieldID); // 0x0080AF90-0x0080AFEC
		public static int GetStaticIntField(IntPtr clazz, IntPtr fieldID); // 0x0080AFEC-0x0080B048
		public static void CallStaticVoidMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x0080B048-0x0080B098
		public static IntPtr CallStaticObjectMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x0080B098-0x0080B0F4
		public static string CallStaticStringMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x0080B0F4-0x0080B150
		public static char CallStaticCharMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x0080B150-0x0080B1AC
		public static double CallStaticDoubleMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x0080B1AC-0x0080B210
		public static float CallStaticFloatMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x0080B210-0x0080B278
		public static long CallStaticLongMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x0080B278-0x0080B2E0
		public static short CallStaticShortMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x0080B2E0-0x0080B33C
		public static byte CallStaticByteMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x0080B33C-0x0080B398
		public static bool CallStaticBooleanMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x0080B398-0x0080B3F4
		public static int CallStaticIntMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x0080B3F4-0x0080B450
		public static void SetObjectField(IntPtr obj, IntPtr fieldID, IntPtr val); // 0x0080B450-0x0080B4A0
		public static void SetStringField(IntPtr obj, IntPtr fieldID, string val); // 0x0080B4A0-0x0080B4F0
		public static void SetCharField(IntPtr obj, IntPtr fieldID, char val); // 0x0080B4F0-0x0080B540
		public static void SetDoubleField(IntPtr obj, IntPtr fieldID, double val); // 0x0080B540-0x0080B5A0
		public static void SetFloatField(IntPtr obj, IntPtr fieldID, float val); // 0x0080B5A0-0x0080B5F0
		public static void SetLongField(IntPtr obj, IntPtr fieldID, long val); // 0x0080B5F0-0x0080B650
		public static void SetShortField(IntPtr obj, IntPtr fieldID, short val); // 0x0080B650-0x0080B6A0
		public static void SetByteField(IntPtr obj, IntPtr fieldID, byte val); // 0x0080B6A0-0x0080B6F0
		public static void SetBooleanField(IntPtr obj, IntPtr fieldID, bool val); // 0x0080B6F0-0x0080B740
		public static void SetIntField(IntPtr obj, IntPtr fieldID, int val); // 0x0080B740-0x0080B790
		public static IntPtr GetObjectField(IntPtr obj, IntPtr fieldID); // 0x0080B790-0x0080B7EC
		public static string GetStringField(IntPtr obj, IntPtr fieldID); // 0x0080B7EC-0x0080B848
		public static char GetCharField(IntPtr obj, IntPtr fieldID); // 0x0080B848-0x0080B8A4
		public static double GetDoubleField(IntPtr obj, IntPtr fieldID); // 0x0080B8A4-0x0080B908
		public static float GetFloatField(IntPtr obj, IntPtr fieldID); // 0x0080B908-0x0080B970
		public static long GetLongField(IntPtr obj, IntPtr fieldID); // 0x0080B970-0x0080B9D8
		public static short GetShortField(IntPtr obj, IntPtr fieldID); // 0x0080B9D8-0x0080BA34
		public static byte GetByteField(IntPtr obj, IntPtr fieldID); // 0x0080BA34-0x0080BA90
		public static bool GetBooleanField(IntPtr obj, IntPtr fieldID); // 0x0080BA90-0x0080BAEC
		public static int GetIntField(IntPtr obj, IntPtr fieldID); // 0x0080BAEC-0x0080BB48
		public static void CallVoidMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x0080BB48-0x0080BB98
		public static IntPtr CallObjectMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x0080BB98-0x0080BBF4
		public static string CallStringMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x0080BBF4-0x0080BC50
		public static char CallCharMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x0080BC50-0x0080BCAC
		public static double CallDoubleMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x0080BCAC-0x0080BD10
		public static float CallFloatMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x0080BD10-0x0080BD78
		public static long CallLongMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x0080BD78-0x0080BDE0
		public static short CallShortMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x0080BDE0-0x0080BE3C
		public static byte CallByteMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x0080BE3C-0x0080BE98
		public static bool CallBooleanMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x0080BE98-0x0080BEF4
		public static int CallIntMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x0080BEF4-0x0080BF50
		public static char[] FromCharArray(IntPtr array); // 0x0080BF50-0x0080BFAC
		public static double[] FromDoubleArray(IntPtr array); // 0x0080BFAC-0x0080C008
		public static float[] FromFloatArray(IntPtr array); // 0x0080C008-0x0080C064
		public static long[] FromLongArray(IntPtr array); // 0x0080C064-0x0080C0C0
		public static short[] FromShortArray(IntPtr array); // 0x0080C0C0-0x0080C11C
		public static byte[] FromByteArray(IntPtr array); // 0x0080C11C-0x0080C178
		public static bool[] FromBooleanArray(IntPtr array); // 0x0080C178-0x0080C1D4
		public static int[] FromIntArray(IntPtr array); // 0x0080C1D4-0x0080C230
		public static IntPtr ToObjectArray(IntPtr[] array, IntPtr type); // 0x0080C230-0x0080C28C
		public static IntPtr ToCharArray(char[] array); // 0x0080C28C-0x0080C2E8
		public static IntPtr ToDoubleArray(double[] array); // 0x0080C2E8-0x0080C344
		public static IntPtr ToFloatArray(float[] array); // 0x0080C344-0x0080C3A0
		public static IntPtr ToLongArray(long[] array); // 0x0080C3A0-0x0080C3FC
		public static IntPtr ToShortArray(short[] array); // 0x0080C3FC-0x0080C458
		public static IntPtr ToByteArray(byte[] array); // 0x0080C458-0x0080C4B4
		public static IntPtr ToBooleanArray(bool[] array); // 0x0080C4B4-0x0080C510
		public static IntPtr ToIntArray(int[] array); // 0x0080C510-0x0080C56C
		public static IntPtr GetObjectArrayElement(IntPtr array, int index); // 0x0080C56C-0x0080C5C8
		public static int GetArrayLength(IntPtr array); // 0x0080C5C8-0x0080C624
	}

	public class AndroidJavaObject : IDisposable // TypeDefIndex: 1807
	{
		// Fields
		private static bool enableDebugPrints; // 0x00
		internal GlobalJavaObjectRef m_jobject; // 0x08
		internal GlobalJavaObjectRef m_jclass; // 0x0C
		private static AndroidJavaClass s_JavaLangClass; // 0x04
	
		// Properties
		protected static AndroidJavaClass JavaLangClass { get; } // 0x0080DC58-0x0080DD9C 
	
		// Constructors
		public AndroidJavaObject(string className, params /* 0x00158BFC-0x00158C0C */ object[] args); // 0x0080CC58-0x0080CC88
		internal AndroidJavaObject(IntPtr jobject); // 0x0080CFA8-0x0080D0CC
		internal AndroidJavaObject(); // 0x0080C6B8-0x0080C6C0
		static AndroidJavaObject(); // 0x0080DD9C-0x0080DE04
	
		// Methods
		public void Dispose(); // 0x0080D0CC-0x0080D0D0
		public void Call(string methodName, params /* 0x00158C0C-0x00158C1C */ object[] args); // 0x0080D16C-0x0080D170
		public void CallStatic(string methodName, params /* 0x00158C1C-0x00158C2C */ object[] args); // 0x0080D2A8-0x0080D2AC
		public FieldType Get<FieldType>(string fieldName);
		public void Set<FieldType>(string fieldName, FieldType val);
		public FieldType GetStatic<FieldType>(string fieldName);
		public void SetStatic<FieldType>(string fieldName, FieldType val);
		public IntPtr GetRawObject(); // 0x0080CC24-0x0080CC30
		public IntPtr GetRawClass(); // 0x0080D3F0-0x0080D3FC
		public ReturnType Call<ReturnType>(string methodName, params /* 0x00158C2C-0x00158C3C */ object[] args);
		public ReturnType CallStatic<ReturnType>(string methodName, params /* 0x00158C3C-0x00158C4C */ object[] args);
		protected void DebugPrint(string msg); // 0x0080C9F8-0x0080CAC4
		protected void DebugPrint(string call, string methodName, string signature, object[] args); // 0x0080D518-0x0080DA08
		private void _AndroidJavaObject(string className, params /* 0x00158C4C-0x00158C5C */ object[] args); // 0x0080CC88-0x0080CFA8
		~AndroidJavaObject(); // 0x0080DA08-0x0080DA80
		protected virtual void Dispose(bool disposing); // 0x0080DA80-0x0080DAD0
		protected void _Dispose(); // 0x0080D0D0-0x0080D16C
		protected void _Call(string methodName, params /* 0x00158C5C-0x00158C6C */ object[] args); // 0x0080D170-0x0080D2A8
		protected ReturnType _Call<ReturnType>(string methodName, params /* 0x00158C6C-0x00158C7C */ object[] args);
		protected FieldType _Get<FieldType>(string fieldName);
		protected void _Set<FieldType>(string fieldName, FieldType val);
		protected void _CallStatic(string methodName, params /* 0x00158C7C-0x00158C8C */ object[] args); // 0x0080D2AC-0x0080D3E4
		protected ReturnType _CallStatic<ReturnType>(string methodName, params /* 0x00158C8C-0x00158C9C */ object[] args);
		protected FieldType _GetStatic<FieldType>(string fieldName);
		protected void _SetStatic<FieldType>(string fieldName, FieldType val);
		internal static AndroidJavaObject AndroidJavaObjectDeleteLocalRef(IntPtr jobject); // 0x0080DAD0-0x0080DB94
		internal static AndroidJavaClass AndroidJavaClassDeleteLocalRef(IntPtr jclass); // 0x0080DB94-0x0080DC58
		protected IntPtr _GetRawObject(); // 0x0080D3E4-0x0080D3F0
		protected IntPtr _GetRawClass(); // 0x0080D3FC-0x0080D408
		protected static AndroidJavaObject FindClass(string name); // 0x0080CAC4-0x0080CC24
	}

	public class AndroidJavaClass : AndroidJavaObject // TypeDefIndex: 1808
	{
		// Constructors
		public AndroidJavaClass(string className); // 0x0080C624-0x0080C6B8
		internal AndroidJavaClass(IntPtr jclass); // 0x0080C8BC-0x0080C9F8
	
		// Methods
		private void _AndroidJavaClass(string className); // 0x0080C6C0-0x0080C8BC
	}

	public delegate void AndroidJavaRunnable(); // TypeDefIndex: 1809; 0x0080EC4C-0x0080F088

	public sealed class AndroidJavaException : Exception // TypeDefIndex: 1810
	{
		// Fields
		private string mJavaStackTrace; // 0x44
	
		// Properties
		public override string StackTrace { get; } // 0x0080CC30-0x0080CC58 
	
		// Constructors
		internal AndroidJavaException(string message, string javaStackTrace); // 0x0080A3F0-0x0080A484
	}

	internal class GlobalJavaObjectRef // TypeDefIndex: 1811
	{
		// Fields
		private bool m_disposed; // 0x08
		protected IntPtr m_jobject; // 0x0C
	
		// Constructors
		public GlobalJavaObjectRef(IntPtr jobject); // 0x00707F2C-0x00707FBC
	
		// Methods
		~GlobalJavaObjectRef(); // 0x00707FBC-0x00708020
		public static implicit operator IntPtr(GlobalJavaObjectRef obj); // 0x007080A8-0x007080E8
		public void Dispose(); // 0x00708020-0x007080A8
	}

	internal class AndroidJavaRunnableProxy : AndroidJavaProxy // TypeDefIndex: 1812
	{
		// Fields
		private AndroidJavaRunnable mRunnable; // 0x10
	
		// Constructors
		public AndroidJavaRunnableProxy(AndroidJavaRunnable runnable); // 0x0080F0C0-0x0080F158
	
		// Methods
		public void run(); // 0x0080F158-0x0080F180
	}

	public class AndroidJavaProxy // TypeDefIndex: 1813
	{
		// Fields
		public readonly AndroidJavaClass javaInterface; // 0x08
		internal AndroidJavaObject proxyObject; // 0x0C
		private static readonly GlobalJavaObjectRef s_JavaLangSystemClass; // 0x00
		private static readonly IntPtr s_HashCodeMethodID; // 0x04
	
		// Constructors
		public AndroidJavaProxy(string javaInterface); // 0x0080DE04-0x0080DE84
		public AndroidJavaProxy(AndroidJavaClass javaInterface); // 0x0080DE84-0x0080DEA4
		static AndroidJavaProxy(); // 0x0080EB38-0x0080EC38
	
		// Methods
		public virtual AndroidJavaObject Invoke(string methodName, object[] args); // 0x0080DEA4-0x0080E640
		public virtual AndroidJavaObject Invoke(string methodName, AndroidJavaObject[] javaArgs); // 0x0080E640-0x0080E854
		public virtual bool equals(AndroidJavaObject obj); // 0x0080E854-0x0080E8F4
		public virtual int hashCode(); // 0x0080E990-0x0080EAC0
		public virtual string toString(); // 0x0080EAC0-0x0080EB38
		internal AndroidJavaObject GetProxy(); // 0x0080E8F4-0x0080E990
	}

	internal class AndroidReflection // TypeDefIndex: 1814
	{
		// Fields
		private static readonly GlobalJavaObjectRef s_ReflectionHelperClass; // 0x00
		private static readonly IntPtr s_ReflectionHelperGetConstructorID; // 0x04
		private static readonly IntPtr s_ReflectionHelperGetMethodID; // 0x08
		private static readonly IntPtr s_ReflectionHelperGetFieldID; // 0x0C
		private static readonly IntPtr s_ReflectionHelperNewProxyInstance; // 0x10
	
		// Constructors
		static AndroidReflection(); // 0x0080FA04-0x0080FB8C
	
		// Methods
		public static bool IsPrimitive(Type t); // 0x0080F180-0x0080F1AC
		public static bool IsAssignableFrom(Type t, Type from); // 0x0080F1AC-0x0080F1E8
		private static IntPtr GetStaticMethodID(string clazz, string methodName, string signature); // 0x0080F1E8-0x0080F264
		public static IntPtr GetConstructorMember(IntPtr jclass, string signature); // 0x0080F264-0x0080F434
		public static IntPtr GetMethodMember(IntPtr jclass, string methodName, string signature, bool isStatic); // 0x0080F434-0x0080F688
		public static IntPtr GetFieldMember(IntPtr jclass, string fieldName, string signature, bool isStatic); // 0x0080F688-0x0080F8DC
		public static IntPtr NewProxyInstance(int delegateHandle, IntPtr interfaze); // 0x0080F8DC-0x0080FA04
	}

	[UsedByNativeCode] // 0x0014AF90-0x0014AFA0
	internal sealed class _AndroidJNIHelper // TypeDefIndex: 1815
	{
		// Constructors
		public _AndroidJNIHelper(); // 0x00AE41DC-0x00AE41E4
	
		// Methods
		[RequiredByNativeCode] // 0x00152D8C-0x00152D9C
		public static IntPtr CreateJavaProxy(int delegateHandle, AndroidJavaProxy proxy); // 0x00AE41E4-0x00AE42A4
		public static IntPtr CreateJavaRunnable(AndroidJavaRunnable jrunnable); // 0x00AE42A4-0x00AE4320
		[RequiredByNativeCode] // 0x00152D9C-0x00152DAC
		public static IntPtr InvokeJavaProxyMethod(AndroidJavaProxy proxy, IntPtr jmethodName, IntPtr jargs); // 0x00AE4320-0x00AE45F4
		public static jvalue[] CreateJNIArgArray(object[] args); // 0x00AE45F4-0x00AE5258
		public static object UnboxArray(AndroidJavaObject obj); // 0x00AE5F54-0x00AE661C
		public static object Unbox(AndroidJavaObject obj); // 0x00AE661C-0x00AE6E60
		public static AndroidJavaObject Box(object obj); // 0x00AE6E60-0x00AE7AB0
		public static void DeleteJNIArgArray(object[] args, jvalue[] jniArgs); // 0x00AE7AB0-0x00AE7C00
		public static IntPtr ConvertToJNIArray(Array array); // 0x00AE5258-0x00AE5F54
		public static ArrayType ConvertFromJNIArray<ArrayType>(IntPtr array);
		public static IntPtr GetConstructorID(IntPtr jclass, object[] args); // 0x00AE7C00-0x00AE7C28
		public static IntPtr GetMethodID(IntPtr jclass, string methodName, object[] args, bool isStatic); // 0x00AE7D8C-0x00AE7DD0
		public static IntPtr GetMethodID<ReturnType>(IntPtr jclass, string methodName, object[] args, bool isStatic);
		public static IntPtr GetFieldID<ReturnType>(IntPtr jclass, string fieldName, bool isStatic);
		public static IntPtr GetConstructorID(IntPtr jclass, string signature); // 0x00AE7DD0-0x00AE7FE0
		public static IntPtr GetMethodID(IntPtr jclass, string methodName, string signature, bool isStatic); // 0x00AE7FE0-0x00AE8200
		private static IntPtr GetMethodIDFallback(IntPtr jclass, string methodName, string signature, bool isStatic); // 0x00AE8200-0x00AE831C
		public static IntPtr GetFieldID(IntPtr jclass, string fieldName, string signature, bool isStatic); // 0x00AE831C-0x00AE8564
		public static string GetSignature(object obj); // 0x00AE8564-0x00AE93B8
		public static string GetSignature(object[] args); // 0x00AE7C28-0x00AE7D8C
		public static string GetSignature<ReturnType>(object[] args);
	}

	[RequiredByNativeCode] // 0x0014AFA0-0x0014AFB0
	public struct Keyframe // TypeDefIndex: 1816
	{
		// Fields
		private float m_Time; // 0x00
		private float m_Value; // 0x04
		private float m_InTangent; // 0x08
		private float m_OutTangent; // 0x0C
		private int m_WeightedMode; // 0x10
		private float m_InWeight; // 0x14
		private float m_OutWeight; // 0x18
	
		// Properties
		public float time { get; } // 0x00709944-0x0070994C 
	}

	[NativeHeader] // 0x0014AFB0-0x0014B050
	[RequiredByNativeCode] // 0x0014AFB0-0x0014B050
	[ThreadAndSerializationSafe] // 0x0014AFB0-0x0014B050
	public class AnimationCurve : IEquatable<AnimationCurve> // TypeDefIndex: 1817
	{
		// Fields
		internal IntPtr m_Ptr; // 0x08
	
		// Properties
		public Keyframe this[int index] { get => default; } // 0x0080FEAC-0x0080FF1C 
		public int length { [NativeMethod] /* 0x00152EFC-0x00152F44 */ get; } // 0x0080FF6C-0x00810000 
	
		// Constructors
		public AnimationCurve(params /* 0x00158C9C-0x00158CAC */ Keyframe[] keys); // 0x0080FB8C-0x0080FBB4
		[RequiredByNativeCode] // 0x00152DAC-0x00152DBC
		public AnimationCurve(); // 0x0080FC2C-0x0080FC50
	
		// Methods
		[FreeFunction] // 0x00152DBC-0x00152E24
		private static void Internal_Destroy(IntPtr ptr); // 0x0080FC50-0x0080FCF4
		[FreeFunction] // 0x00152E24-0x00152E88
		private static IntPtr Internal_Create(Keyframe[] keys); // 0x0080FBB4-0x0080FC2C
		[FreeFunction] // 0x00152E88-0x00152EEC
		private bool Internal_Equals(IntPtr other); // 0x0080FCF4-0x0080FDA0
		~AnimationCurve(); // 0x0080FDA0-0x0080FE08
		[ThreadSafe] // 0x00152EEC-0x00152EFC
		public float Evaluate(float time); // 0x0080FE08-0x0080FEAC
		[FreeFunction] // 0x00152F44-0x00152FC4
		[NativeThrows] // 0x00152F44-0x00152FC4
		private Keyframe GetKey(int index); // 0x0080FF1C-0x0080FF6C
		public override bool Equals(object o); // 0x00810088-0x008101C4
		public bool Equals(AnimationCurve other); // 0x008101C4-0x00810284
		public override int GetHashCode(); // 0x00810284-0x00810290
		private void GetKey_Injected(int index, out Keyframe ret); // 0x00810000-0x00810088
	}

	[NativeHeader] // 0x0014B050-0x0014B374
	[NativeHeader] // 0x0014B050-0x0014B374
	[NativeHeader] // 0x0014B050-0x0014B374
	[NativeHeader] // 0x0014B050-0x0014B374
	[NativeHeader] // 0x0014B050-0x0014B374
	[NativeHeader] // 0x0014B050-0x0014B374
	[NativeHeader] // 0x0014B050-0x0014B374
	[NativeHeader] // 0x0014B050-0x0014B374
	[NativeHeader] // 0x0014B050-0x0014B374
	[NativeHeader] // 0x0014B050-0x0014B374
	[NativeHeader] // 0x0014B050-0x0014B374
	[NativeHeader] // 0x0014B050-0x0014B374
	[NativeHeader] // 0x0014B050-0x0014B374
	[NativeHeader] // 0x0014B050-0x0014B374
	[NativeHeader] // 0x0014B050-0x0014B374
	[NativeHeader] // 0x0014B050-0x0014B374
	[NativeHeader] // 0x0014B050-0x0014B374
	public class Application // TypeDefIndex: 1818
	{
		// Fields
		[CompilerGenerated] // 0x00150324-0x00150358
		[DebuggerBrowsable] // 0x00150324-0x00150358
		private static LowMemoryCallback lowMemory; // 0x00
		private static LogCallback s_LogCallbackHandler; // 0x04
		private static LogCallback s_LogCallbackHandlerThreaded; // 0x08
		[CompilerGenerated] // 0x00150358-0x0015038C
		[DebuggerBrowsable] // 0x00150358-0x0015038C
		private static Func<bool> wantsToQuit; // 0x0C
		[CompilerGenerated] // 0x0015038C-0x001503C0
		[DebuggerBrowsable] // 0x0015038C-0x001503C0
		private static Action quitting; // 0x10
	
		// Properties
		public static bool isPlaying { [FreeFunction] /* 0x00153014-0x00153050 */ get; } // 0x0081032C-0x008103BC 
		public static RuntimePlatform platform { [FreeFunction] /* 0x00153050-0x001530AC */ get; } // 0x008103BC-0x00810448 
		public static bool runInBackground { [FreeFunction] /* 0x001530AC-0x001530FC */ set; } // 0x00810448-0x008104F0
		public static string streamingAssetsPath { [FreeFunction] /* 0x001530FC-0x00153150 */ get; } // 0x008104F0-0x00810588 
		[SecurityCritical] // 0x00159888-0x00159898
		public static string persistentDataPath { [FreeFunction] /* 0x00153150-0x001531A8 */ get; } // 0x00810588-0x00810620 
		public static string unityVersion { [FreeFunction] /* 0x001531A8-0x001531FC */ get; } // 0x00810620-0x008106B0 
		public static string productName { [FreeFunction] /* 0x001531FC-0x0015324C */ get; } // 0x008106B0-0x00810740 
		public static string cloudProjectId { [FreeFunction] /* 0x0015324C-0x001532A0 */ get; } // 0x00810740-0x008107D4 
		public static int targetFrameRate { [FreeFunction] /* 0x001532D4-0x00153314 */ set; } // 0x0081086C-0x00810910
		public static bool isEditor { get; } // 0x0081176C-0x00811774 
	
		// Events
		public static event UnityAction onBeforeRender {
			add; // 0x00811774-0x008117F4
			remove; // 0x00811D3C-0x00811DBC
		}
		public static event Action quitting {
			add; // 0x0081226C-0x0081239C
			remove; // 0x0081239C-0x008124CC
		}
	
		// Nested types
		public delegate void LowMemoryCallback(); // TypeDefIndex: 1819; 0x00810A6C-0x00810EA8
	
		public delegate void LogCallback(string condition, string stackTrace, LogType type); // TypeDefIndex: 1820; 0x00810F70-0x0081176C
	
		// Methods
		[FreeFunction] // 0x00152FC4-0x00153014
		public static void Quit(int exitCode); // 0x00810290-0x00810324
		public static void Quit(); // 0x00810324-0x0081032C
		[FreeFunction] // 0x001532A0-0x001532D4
		public static void OpenURL(string url); // 0x008107D4-0x0081086C
		[FreeFunction] // 0x00153314-0x00153370
		public static AsyncOperation RequestUserAuthorization(UserAuthorization mode); // 0x00810910-0x00810988
		[FreeFunction] // 0x00153370-0x001533C8
		public static bool HasUserAuthorization(UserAuthorization mode); // 0x00810988-0x00810A00
		[RequiredByNativeCode] // 0x001533C8-0x001533D8
		private static void CallLowMemory(); // 0x00810A00-0x00810A6C
		[RequiredByNativeCode] // 0x001533D8-0x001533E8
		private static void CallLogCallback(string logString, string stackTrace, LogType type, bool invokedOnMainThread); // 0x00810EA8-0x00810F70
		[RequiredByNativeCode] // 0x001533E8-0x001533F8
		private static bool Internal_ApplicationWantsToQuit(); // 0x008124CC-0x0081271C
		[RequiredByNativeCode] // 0x001533F8-0x00153408
		private static void Internal_ApplicationQuit(); // 0x0081282C-0x0081289C
		[RequiredByNativeCode] // 0x00153408-0x00153418
		internal static void InvokeOnBeforeRender(); // 0x0081289C-0x00812914
		[Obsolete] // 0x00153418-0x00153460
		public static void LoadLevel(string name); // 0x00812B2C-0x00812B8C
	}

	public enum UserAuthorization // TypeDefIndex: 1821
	{
		WebCam = 1,
		Microphone = 2
	}

	[NativeHeader] // 0x0014B374-0x0014B430
	[NativeHeader] // 0x0014B374-0x0014B430
	[RequiredByNativeCode] // 0x0014B374-0x0014B430
	[ThreadAndSerializationSafe] // 0x0014B374-0x0014B430
	public class AsyncOperation : YieldInstruction // TypeDefIndex: 1822
	{
		// Fields
		internal IntPtr m_Ptr; // 0x08
		private Action<AsyncOperation> m_completeCallback; // 0x0C
	
		// Properties
		public bool isDone { [NativeMethod] /* 0x001534D0-0x00153504 */ get; } // 0x008139F4-0x00813A88 
		public bool allowSceneActivation { [NativeMethod] /* 0x00153504-0x00153548 */ set; } // 0x00813A88-0x00813B08
	
		// Constructors
		public AsyncOperation(); // 0x00813948-0x00813950
	
		// Methods
		[NativeMethod] // 0x00153460-0x001534D0
		[StaticAccessor] // 0x00153460-0x001534D0
		private static void InternalDestroy(IntPtr ptr); // 0x00813950-0x008139F4
		~AsyncOperation(); // 0x00813B08-0x00813B70
		[RequiredByNativeCode] // 0x00153548-0x00153558
		internal void InvokeCompletionEvent(); // 0x00813B70-0x00813BE8
	}

	internal class AttributeHelperEngine // TypeDefIndex: 1823
	{
		// Fields
		public static DisallowMultipleComponent[] _disallowMultipleComponentArray; // 0x00
		public static ExecuteInEditMode[] _executeInEditModeArray; // 0x04
		public static RequireComponent[] _requireComponentArray; // 0x08
	
		// Constructors
		static AttributeHelperEngine(); // 0x00814514-0x008145D4
	
		// Methods
		[RequiredByNativeCode] // 0x00153558-0x00153568
		private static Type GetParentTypeDisallowingMultipleInclusion(Type type); // 0x00813BE8-0x00813D1C
		[RequiredByNativeCode] // 0x00153568-0x00153578
		private static Type[] GetRequiredComponents(Type klass); // 0x00813D1C-0x00814248
		private static int GetExecuteMode(Type klass); // 0x00814248-0x00814358
		[RequiredByNativeCode] // 0x00153578-0x00153588
		private static int CheckIsEditorScript(Type klass); // 0x00814358-0x00814470
		[RequiredByNativeCode] // 0x00153588-0x00153598
		private static int GetDefaultExecutionOrderFor(Type klass); // 0x00814470-0x0081450C
		private static T GetCustomAttributeOfType<T>(Type klass)
			where T : Attribute;
	}

	[AttributeUsage] // 0x0014B430-0x0014B464
	public sealed class DisallowMultipleComponent : Attribute // TypeDefIndex: 1824
	{
		// Constructors
		public DisallowMultipleComponent(); // 0x0081C8D4-0x0081C8DC
	}

	[AttributeUsage] // 0x0014B464-0x0014B498
	public sealed class RequireComponent : Attribute // TypeDefIndex: 1825
	{
		// Fields
		public Type m_Type0; // 0x08
		public Type m_Type1; // 0x0C
		public Type m_Type2; // 0x10
	
		// Constructors
		public RequireComponent(Type requiredComponent); // 0x00721FF0-0x00722208
	}

	public sealed class AddComponentMenu : Attribute // TypeDefIndex: 1826
	{
		// Fields
		private string m_AddComponentMenu; // 0x08
		private int m_Ordering; // 0x0C
	
		// Constructors
		public AddComponentMenu(string menuName); // 0x00804D9C-0x00804DC4
		public AddComponentMenu(string menuName, int order); // 0x00804DC4-0x00804DEC
	}

	[AttributeUsage] // 0x0014B498-0x0014B4E0
	[RequiredByNativeCode] // 0x0014B498-0x0014B4E0
	public sealed class ContextMenu : Attribute // TypeDefIndex: 1827
	{
	}

	[UsedByNativeCode] // 0x0014B4E0-0x0014B4F0
	public sealed class ExecuteInEditMode : Attribute // TypeDefIndex: 1828
	{
		// Constructors
		public ExecuteInEditMode(); // 0x00820448-0x008204B8
	}

	[UsedByNativeCode] // 0x0014B4F0-0x0014B500
	public sealed class ExecuteAlways : Attribute // TypeDefIndex: 1829
	{
		// Constructors
		public ExecuteAlways(); // 0x00820440-0x00820448
	}

	[UsedByNativeCode] // 0x0014B500-0x0014B510
	public sealed class HideInInspector : Attribute // TypeDefIndex: 1830
	{
		// Constructors
		public HideInInspector(); // 0x00708A30-0x00708A38
	}

	[AttributeUsage] // 0x0014B510-0x0014B544
	[UsedByNativeCode] // 0x0014B510-0x0014B544
	public class DefaultExecutionOrder : Attribute // TypeDefIndex: 1831
	{
		// Fields
		[CompilerGenerated] // 0x001503C0-0x001503F4
		[DebuggerBrowsable] // 0x001503C0-0x001503F4
		private int <order>k__BackingField; // 0x08
	
		// Properties
		public int order { [CompilerGenerated] /* 0x00153598-0x001535A8 */ get; } // 0x0081450C-0x00814514 
	}

	[AttributeUsage] // 0x0014B544-0x0014B578
	[RequiredByNativeCode] // 0x0014B544-0x0014B578
	public class AssemblyIsEditorAssembly : Attribute // TypeDefIndex: 1832
	{
	}

	[AttributeUsage] // 0x0014B578-0x0014B5C0
	[UsedByNativeCode] // 0x0014B578-0x0014B5C0
	public class ExcludeFromPresetAttribute : Attribute // TypeDefIndex: 1833
	{
		// Constructors
		public ExcludeFromPresetAttribute(); // 0x00820438-0x00820440
	}

	public enum SendMessageOptions // TypeDefIndex: 1834
	{
		RequireReceiver = 0,
		DontRequireReceiver = 1
	}

	public enum PrimitiveType // TypeDefIndex: 1835
	{
		Sphere = 0,
		Capsule = 1,
		Cylinder = 2,
		Cube = 3,
		Plane = 4,
		Quad = 5
	}

	public enum Space // TypeDefIndex: 1836
	{
		World = 0,
		Self = 1
	}

	public enum RuntimePlatform // TypeDefIndex: 1837
	{
		OSXEditor = 0,
		OSXPlayer = 1,
		WindowsPlayer = 2,
		OSXWebPlayer = 3,
		OSXDashboardPlayer = 4,
		WindowsWebPlayer = 5,
		WindowsEditor = 7,
		IPhonePlayer = 8,
		PS3 = 9,
		XBOX360 = 10,
		Android = 11,
		NaCl = 12,
		LinuxPlayer = 13,
		FlashPlayer = 15,
		LinuxEditor = 16,
		WebGLPlayer = 17,
		MetroPlayerX86 = 18,
		WSAPlayerX86 = 18,
		MetroPlayerX64 = 19,
		WSAPlayerX64 = 19,
		MetroPlayerARM = 20,
		WSAPlayerARM = 20,
		WP8Player = 21,
		BlackBerryPlayer = 22,
		TizenPlayer = 23,
		PSP2 = 24,
		PS4 = 25,
		PSM = 26,
		XboxOne = 27,
		SamsungTVPlayer = 28,
		WiiU = 30,
		tvOS = 31,
		Switch = 32,
		Lumin = 33
	}

	public enum LogType // TypeDefIndex: 1838
	{
		Error = 0,
		Assert = 1,
		Warning = 2,
		Log = 3,
		Exception = 4
	}

	[AttributeUsage] // 0x0014B5C0-0x0014B5D4
	public class BeforeRenderOrderAttribute : Attribute // TypeDefIndex: 1839
	{
		// Fields
		[CompilerGenerated] // 0x001509A8-0x001509DC
		[DebuggerBrowsable] // 0x001509A8-0x001509DC
		private int <order>k__BackingField; // 0x08
	
		// Properties
		public int order { [CompilerGenerated] /* 0x001535A8-0x001535B8 */ get; } // 0x00814718-0x00814720 
	}

	internal static class BeforeRenderHelper // TypeDefIndex: 1840
	{
		// Fields
		private static List<OrderBlock> s_OrderBlocks; // 0x00
	
		// Nested types
		private struct OrderBlock // TypeDefIndex: 1841
		{
			// Fields
			internal int order; // 0x00
			internal UnityAction callback; // 0x04
		}
	
		// Constructors
		static BeforeRenderHelper(); // 0x00814B5C-0x00814C88
	
		// Methods
		private static int GetUpdateOrder(UnityAction callback); // 0x008145D4-0x00814718
		public static void RegisterCallback(UnityAction callback); // 0x008117F4-0x00811D3C
		public static void UnregisterCallback(UnityAction callback); // 0x00811DBC-0x0081226C
		public static void Invoke(); // 0x00812914-0x00812B2C
	}

	[NativeHeader] // 0x0014B5D4-0x0014B61C
	[UsedByNativeCode] // 0x0014B5D4-0x0014B61C
	public class Behaviour : Component // TypeDefIndex: 1842
	{
		// Properties
		[NativeProperty] // 0x00159898-0x001598C8
		[RequiredByNativeCode] // 0x00159898-0x001598C8
		public bool enabled { get; set; } // 0x00814D10-0x00814DA0 0x00814DA0-0x00814E44
		[NativeProperty] // 0x001598C8-0x001598D8
		public bool isActiveAndEnabled { [NativeMethod] /* 0x001535B8-0x001535F8 */ get; } // 0x00814E44-0x00814EDC 
	
		// Constructors
		public Behaviour(); // 0x00814C88-0x00814C8C
	}

	[NativeHeader] // 0x0014B61C-0x0014B670
	internal class BootConfigData // TypeDefIndex: 1843
	{
		// Fields
		private IntPtr m_Ptr; // 0x08
	
		// Constructors
		private BootConfigData(IntPtr nativeHandle); // 0x00814EDC-0x00814FA8
	
		// Methods
		[RequiredByNativeCode] // 0x001535F8-0x00153608
		private static BootConfigData WrapBootConfigData(IntPtr nativeHandle); // 0x00814FA8-0x008150EC
	}

	[NativeClass] // 0x0014B670-0x0014B7F4
	[NativeHeader] // 0x0014B670-0x0014B7F4
	[NativeHeader] // 0x0014B670-0x0014B7F4
	[NativeHeader] // 0x0014B670-0x0014B7F4
	[NativeHeader] // 0x0014B670-0x0014B7F4
	[NativeType] // 0x0014B670-0x0014B7F4
	[RequiredByNativeCode] // 0x0014B670-0x0014B7F4
	[ThreadAndSerializationSafe] // 0x0014B670-0x0014B7F4
	public struct Bounds : IEquatable<Bounds> // TypeDefIndex: 1844
	{
		// Fields
		private Vector3 m_Center; // 0x00
		[NativeName] // 0x001509DC-0x00150A14
		private Vector3 m_Extents; // 0x0C
	
		// Properties
		public Vector3 center { get; set; } // 0x008152FC-0x00815318 0x00815318-0x00815400
		public Vector3 size { get; set; } // 0x00815400-0x008154D4 0x008154D4-0x008154F0
		public Vector3 extents { get; set; } // 0x008154F0-0x00815510 0x00815510-0x00815608
		public Vector3 min { get; } // 0x00815608-0x00815708 
		public Vector3 max { get; } // 0x00815708-0x0081571C 
	
		// Constructors
		public Bounds(Vector3 center, Vector3 size); // 0x008150EC-0x00815198
	
		// Methods
		public override int GetHashCode(); // 0x00815198-0x008152C4
		public override bool Equals(object other); // 0x008152C4-0x008152CC
		public bool Equals(Bounds other); // 0x008152CC-0x008152FC
		public static bool operator ==(Bounds lhs, Bounds rhs); // 0x0081571C-0x00815848
		public static bool operator !=(Bounds lhs, Bounds rhs); // 0x00815848-0x008159A8
		public void SetMinMax(Vector3 min, Vector3 max); // 0x008159A8-0x00815AE4
		public void Encapsulate(Vector3 point); // 0x00815AE4-0x00815C94
		public override string ToString(); // 0x00815C94-0x00815C9C
	}

	[NativeHeader] // 0x0014B7F4-0x0014B9C8
	[NativeHeader] // 0x0014B7F4-0x0014B9C8
	[NativeHeader] // 0x0014B7F4-0x0014B9C8
	[NativeHeader] // 0x0014B7F4-0x0014B9C8
	[NativeHeader] // 0x0014B7F4-0x0014B9C8
	[NativeHeader] // 0x0014B7F4-0x0014B9C8
	[NativeHeader] // 0x0014B7F4-0x0014B9C8
	[RequireComponent] // 0x0014B7F4-0x0014B9C8
	[UsedByNativeCode] // 0x0014B7F4-0x0014B9C8
	public sealed class Camera : Behaviour // TypeDefIndex: 1845
	{
		// Fields
		public static CameraCallback onPreCull; // 0x00
		public static CameraCallback onPreRender; // 0x04
		public static CameraCallback onPostRender; // 0x08
	
		// Properties
		[NativeProperty] // 0x001598D8-0x0015990C
		public float nearClipPlane { get; set; } // 0x00815CA0-0x00815D30 0x00815D30-0x00815DD8
		[NativeProperty] // 0x0015990C-0x0015993C
		public float farClipPlane { get; set; } // 0x00815DD8-0x00815E68 0x00815E68-0x00815F0C
		[NativeProperty] // 0x0015993C-0x0015996C
		public float fieldOfView { get; set; } // 0x00815F0C-0x00815F9C 0x00815F9C-0x00816040
		public float orthographicSize { get; set; } // 0x00816040-0x008160D4 0x008160D4-0x0081617C
		public bool orthographic { set; } // 0x0081617C-0x00816224
		public float depth { get; } // 0x00816224-0x008162AC 
		public float aspect { get; set; } // 0x008162AC-0x00816338 0x00816338-0x008163D8
		public int cullingMask { get; set; } // 0x008163D8-0x00816468 0x00816468-0x0081650C
		public int eventMask { get; } // 0x0081650C-0x00816598 
		public Color backgroundColor { get; set; } // 0x00816598-0x008165D0 0x00816650-0x00816674
		public CameraClearFlags clearFlags { get; set; } // 0x008166F4-0x00816784 0x00816784-0x00816804
		public DepthTextureMode depthTextureMode { get; set; } // 0x00816804-0x00816898 0x00816898-0x00816918
		[NativeProperty] // 0x0015996C-0x001599B0
		public Rect rect { get; set; } // 0x00816918-0x00816950 0x008169FC-0x00816A20
		[NativeProperty] // 0x001599B0-0x001599F0
		public Rect pixelRect { get; set; } // 0x00816ACC-0x00816B04 0x00816BB4-0x00816BD8
		public RenderTexture targetTexture { get; set; } // 0x00816C88-0x00816D18 0x00816D18-0x00816D98
		public int targetDisplay { get; } // 0x00816D98-0x00816E28 
		public Matrix4x4 worldToCameraMatrix { get; } // 0x00816E28-0x00816E88 
		public Matrix4x4 projectionMatrix { get; set; } // 0x00816F08-0x00816F68 0x00816FE8-0x00817060
		public static Camera main { [FreeFunction] /* 0x001536BC-0x001536F8 */ get; } // 0x00817AC4-0x00817B48 
		public static Camera current { [FreeFunction] /* 0x001536F8-0x00153738 */ get; } // 0x00817B48-0x00817BD0 
		public static int allCamerasCount { get; } // 0x00818088-0x0081808C 
		public static Camera[] allCameras { get; } // 0x0081808C-0x008180FC 
	
		// Nested types
		public enum StereoscopicEye // TypeDefIndex: 1846
		{
			Left = 0,
			Right = 1
		}
	
		public enum MonoOrStereoscopicEye // TypeDefIndex: 1847
		{
			Left = 0,
			Right = 1,
			Mono = 2
		}
	
		public delegate void CameraCallback(Camera cam); // TypeDefIndex: 1848; 0x008182EC-0x00818B14
	
		// Constructors
		public Camera(); // 0x00815C9C-0x00815CA0
	
		// Methods
		public Vector3 WorldToScreenPoint(Vector3 position, MonoOrStereoscopicEye eye); // 0x008170E0-0x00817144
		public Vector3 WorldToScreenPoint(Vector3 position); // 0x008171D4-0x0081724C
		public Vector3 ScreenToViewportPoint(Vector3 position); // 0x0081724C-0x008172A8
		public Vector3 ViewportToScreenPoint(Vector3 position); // 0x00817330-0x0081738C
		private Ray ViewportPointToRay(Vector2 pos, MonoOrStereoscopicEye eye); // 0x00817414-0x0081747C
		public Ray ViewportPointToRay(Vector3 pos, MonoOrStereoscopicEye eye); // 0x0081750C-0x0081763C
		public Ray ViewportPointToRay(Vector3 pos); // 0x0081763C-0x00817698
		private Ray ScreenPointToRay(Vector2 pos, MonoOrStereoscopicEye eye); // 0x00817698-0x00817700
		public Ray ScreenPointToRay(Vector3 pos, MonoOrStereoscopicEye eye); // 0x00817790-0x008178C0
		public Ray ScreenPointToRay(Vector3 pos); // 0x008178C0-0x0081791C
		[FreeFunction] // 0x00153608-0x00153660
		internal GameObject RaycastTry(Ray ray, float distance, int layerMask); // 0x0081791C-0x00817960
		[FreeFunction] // 0x00153660-0x001536BC
		internal GameObject RaycastTry2D(Ray ray, float distance, int layerMask); // 0x008179F0-0x00817A34
		public Matrix4x4 GetStereoViewMatrix(StereoscopicEye eye); // 0x00817BD0-0x00817C34
		public Matrix4x4 GetStereoProjectionMatrix(StereoscopicEye eye); // 0x00817CBC-0x00817D20
		public void SetStereoProjectionMatrix(StereoscopicEye eye, Matrix4x4 matrix); // 0x00817DA8-0x00817E30
		public void ResetStereoProjectionMatrices(); // 0x00817EB8-0x00817F54
		[FreeFunction] // 0x00153738-0x00153788
		private static int GetAllCamerasCount(); // 0x00817F54-0x00817FE4
		[FreeFunction] // 0x00153788-0x001537D4
		private static int GetAllCamerasImpl([NotNull] /* 0x00158CAC-0x00158CBC */ out Camera[] cam); // 0x00817FE4-0x00818088
		public static int GetAllCameras(Camera[] cameras); // 0x008180FC-0x008181F0
		[FreeFunction] // 0x001537D4-0x00153828
		public void Render(); // 0x008181F0-0x00818278
		[RequiredByNativeCode] // 0x00153828-0x00153838
		private static void FireOnPreCull(Camera cam); // 0x00818278-0x008182EC
		[RequiredByNativeCode] // 0x00153838-0x00153848
		private static void FireOnPreRender(Camera cam); // 0x00818B14-0x00818B88
		[RequiredByNativeCode] // 0x00153848-0x00153858
		private static void FireOnPostRender(Camera cam); // 0x00818B88-0x00818BFC
		private void get_backgroundColor_Injected(out Color ret); // 0x008165D0-0x00816650
		private void set_backgroundColor_Injected(ref Color value); // 0x00816674-0x008166F4
		private void get_rect_Injected(out Rect ret); // 0x00816950-0x008169FC
		private void set_rect_Injected(ref Rect value); // 0x00816A20-0x00816ACC
		private void get_pixelRect_Injected(out Rect ret); // 0x00816B04-0x00816BB4
		private void set_pixelRect_Injected(ref Rect value); // 0x00816BD8-0x00816C88
		private void get_worldToCameraMatrix_Injected(out Matrix4x4 ret); // 0x00816E88-0x00816F08
		private void get_projectionMatrix_Injected(out Matrix4x4 ret); // 0x00816F68-0x00816FE8
		private void set_projectionMatrix_Injected(ref Matrix4x4 value); // 0x00817060-0x008170E0
		private void WorldToScreenPoint_Injected(ref Vector3 position, MonoOrStereoscopicEye eye, out Vector3 ret); // 0x00817144-0x008171D4
		private void ScreenToViewportPoint_Injected(ref Vector3 position, out Vector3 ret); // 0x008172A8-0x00817330
		private void ViewportToScreenPoint_Injected(ref Vector3 position, out Vector3 ret); // 0x0081738C-0x00817414
		private void ViewportPointToRay_Injected(ref Vector2 pos, MonoOrStereoscopicEye eye, out Ray ret); // 0x0081747C-0x0081750C
		private void ScreenPointToRay_Injected(ref Vector2 pos, MonoOrStereoscopicEye eye, out Ray ret); // 0x00817700-0x00817790
		private GameObject RaycastTry_Injected(ref Ray ray, float distance, int layerMask); // 0x00817960-0x008179F0
		private GameObject RaycastTry2D_Injected(ref Ray ray, float distance, int layerMask); // 0x00817A34-0x00817AC4
		private void GetStereoViewMatrix_Injected(StereoscopicEye eye, out Matrix4x4 ret); // 0x00817C34-0x00817CBC
		private void GetStereoProjectionMatrix_Injected(StereoscopicEye eye, out Matrix4x4 ret); // 0x00817D20-0x00817DA8
		private void SetStereoProjectionMatrix_Injected(StereoscopicEye eye, ref Matrix4x4 matrix); // 0x00817E30-0x00817EB8
	}

	internal struct CastHelper<T> // TypeDefIndex: 1849
	{
		// Fields
		public T t;
		public IntPtr onePointerFurtherThanT;
	}

	internal static class ClassLibraryInitializer // TypeDefIndex: 1850
	{
		// Methods
		[RequiredByNativeCode] // 0x00153858-0x00153868
		private static void Init(); // 0x00818C48-0x00818C60
	}

	internal class LowerResBlitTexture : UnityEngine.Object // TypeDefIndex: 1851
	{
		// Methods
		[RequiredByNativeCode] // 0x00153868-0x00153878
		internal void LowerResBlitTextureDontStripMe(); // 0x0070A704-0x0070A708
	}

	internal class PreloadData : UnityEngine.Object // TypeDefIndex: 1852
	{
		// Methods
		[RequiredByNativeCode] // 0x00153878-0x00153888
		internal void PreloadDataDontStripMe(); // 0x00719618-0x0071961C
	}

	[NativeClass] // 0x0014B9C8-0x0014BA98
	[NativeHeader] // 0x0014B9C8-0x0014BA98
	[RequiredByNativeCode] // 0x0014B9C8-0x0014BA98
	public struct Color : IEquatable<Color> // TypeDefIndex: 1853
	{
		// Fields
		public float r; // 0x00
		public float g; // 0x04
		public float b; // 0x08
		public float a; // 0x0C
	
		// Properties
		public static Color red { get; } // 0x00819408-0x00819428 
		public static Color green { get; } // 0x00819428-0x00819448 
		public static Color blue { get; } // 0x00819448-0x00819468 
		public static Color white { get; } // 0x00819468-0x00819478 
		public static Color black { get; } // 0x00819478-0x00819498 
		public static Color yellow { get; } // 0x00819498-0x008194B8 
		public static Color magenta { get; } // 0x008194B8-0x008194D8 
		public static Color clear { get; } // 0x008194D8-0x008194E4 
		public float grayscale { get; } // 0x008194E4-0x008195E8 
		public Color linear { get; } // 0x008195E8-0x008196C0 
		public Color gamma { get; } // 0x008196C0-0x00819778 
		public float maxColorComponent { get; } // 0x00819778-0x00819780 
		public float this[int index] { get => default; set {} } // 0x00819874-0x0081996C 0x0081996C-0x00819974
	
		// Constructors
		public Color(float r, float g, float b, float a); // 0x00818C60-0x00818C80
		public Color(float r, float g, float b); // 0x00818C80-0x00818EFC
	
		// Methods
		public override string ToString(); // 0x00818EFC-0x00818F64
		public override int GetHashCode(); // 0x00818FB8-0x008190D8
		public override bool Equals(object other); // 0x008190D8-0x008190E0
		public bool Equals(Color other); // 0x008190E0-0x00819104
		public static Color operator +(Color a, Color b); // 0x00819104-0x00819148
		public static Color operator -(Color a, Color b); // 0x00819148-0x0081918C
		public static Color operator *(Color a, float b); // 0x0081918C-0x008191C4
		public static bool operator ==(Color lhs, Color rhs); // 0x008191C4-0x008192E8
		public static Color Lerp(Color a, Color b, float t); // 0x008192E8-0x00819408
		public static implicit operator Vector4(Color c); // 0x00818F64-0x00818FB8
		public static implicit operator Color(Vector4 v); // 0x00819780-0x00819874
		public static Color HSVToRGB(float H, float S, float V); // 0x00819974-0x008199B0
		public static Color HSVToRGB(float H, float S, float V, bool hdr); // 0x008199B0-0x00819C18
	}

	[UsedByNativeCode] // 0x0014BA98-0x0014BAA8
	public struct Color32 // TypeDefIndex: 1854
	{
		// Fields
		[Ignore] // 0x00150A14-0x00150A44
		private int rgba; // 0x00
		public byte r; // 0x00
		public byte g; // 0x01
		public byte b; // 0x02
		public byte a; // 0x03
	
		// Constructors
		public Color32(byte r, byte g, byte b, byte a); // 0x00819C18-0x00819C30
	
		// Methods
		public static implicit operator Color32(Color c); // 0x00819C30-0x00819D40
		public static implicit operator Color(Color32 c); // 0x00819D40-0x0081A008
		public override string ToString(); // 0x0081A008-0x0081A010
	}

	[NativeClass] // 0x0014BAA8-0x0014BB40
	[NativeHeader] // 0x0014BAA8-0x0014BB40
	[RequiredByNativeCode] // 0x0014BAA8-0x0014BB40
	public class Component : UnityEngine.Object // TypeDefIndex: 1855
	{
		// Properties
		public Transform transform { [FreeFunction] /* 0x00153888-0x001538E4 */ get; } // 0x0081A010-0x0081A0A0 
		public GameObject gameObject { [FreeFunction] /* 0x001538E4-0x00153930 */ get; } // 0x0081A0A0-0x0081A130 
		public string tag { get; } // 0x0081A4C0-0x0081A4EC 
	
		// Constructors
		public Component(); // 0x00814C8C-0x00814D10
	
		// Methods
		[TypeInferenceRule] // 0x00153930-0x00153944
		public Component GetComponent(Type type); // 0x0081A130-0x0081A164
		[FreeFunction] // 0x00153944-0x00153984
		internal void GetComponentFastPath(Type type, IntPtr oneFurtherThanResultValue); // 0x0081A208-0x0081A290
		public T GetComponent<T>();
		[TypeInferenceRule] // 0x00153984-0x00153998
		public Component GetComponentInChildren(Type t, bool includeInactive); // 0x0081A290-0x0081A2CC
		public T GetComponentInChildren<T>([UnityEngine.Internal.DefaultValue] /* 0x00158CBC-0x00158CF0 */ bool includeInactive);
		[ExcludeFromDocs] // 0x00153998-0x001539A8
		public T GetComponentInChildren<T>();
		public T[] GetComponentsInChildren<T>(bool includeInactive);
		public void GetComponentsInChildren<T>(bool includeInactive, List<T> result);
		public T[] GetComponentsInChildren<T>();
		public void GetComponentsInChildren<T>(List<T> results);
		[TypeInferenceRule] // 0x001539A8-0x001539BC
		public Component GetComponentInParent(Type t); // 0x0081A354-0x0081A388
		public T GetComponentInParent<T>();
		public void GetComponentsInParent<T>(bool includeInactive, List<T> results);
		[FreeFunction] // 0x001539BC-0x001539FC
		private void GetComponentsForListInternal(Type searchType, object resultList); // 0x0081A434-0x0081A4BC
		public void GetComponents(Type type, List<Component> results); // 0x0081A4BC-0x0081A4C0
		public void GetComponents<T>(List<T> results);
		public T[] GetComponents<T>();
		public bool CompareTag(string tag); // 0x0081A578-0x0081A5AC
	}

	[NativeHeader] // 0x0014BB40-0x0014BB9C
	[RequiredByNativeCode] // 0x0014BB40-0x0014BB9C
	public sealed class Coroutine : YieldInstruction // TypeDefIndex: 1856
	{
		// Fields
		internal IntPtr m_Ptr; // 0x08
	
		// Constructors
		private Coroutine(); // 0x0081A714-0x0081A71C
	
		// Methods
		~Coroutine(); // 0x0081A71C-0x0081A784
		[FreeFunction] // 0x001539FC-0x00153A4C
		private static void ReleaseCoroutine(IntPtr ptr); // 0x0081A784-0x0081A824
	}

	[RequiredByNativeCode] // 0x0014BB9C-0x0014BBAC
	internal class SetupCoroutine // TypeDefIndex: 1857
	{
		// Methods
		[RequiredByNativeCode] // 0x00153A4C-0x00153A5C
		public static void InvokeMoveNext(IEnumerator enumerator, IntPtr returnValueAddress); // 0x00725B54-0x00725CC0
		[RequiredByNativeCode] // 0x00153A5C-0x00153A6C
		public static object InvokeMember(object behaviour, string name, object variable); // 0x00725CC0-0x00725E0C
	}

	public struct CullingGroupEvent // TypeDefIndex: 1858
	{
		// Fields
		private int m_Index; // 0x00
		private byte m_PrevState; // 0x04
		private byte m_ThisState; // 0x05
	}

	[NativeHeader] // 0x0014BBAC-0x0014BC00
	public class CullingGroup : IDisposable // TypeDefIndex: 1859
	{
		// Fields
		internal IntPtr m_Ptr; // 0x08
		private StateChanged m_OnStateChanged; // 0x0C
	
		// Nested types
		public delegate void StateChanged(CullingGroupEvent sphere); // TypeDefIndex: 1860; 0x0081B264-0x0081B6FC
	
		// Methods
		~CullingGroup(); // 0x0081AF90-0x0081B050
		[FreeFunction] // 0x00153A6C-0x00153AC8
		private void DisposeInternal(); // 0x0081B0E8-0x0081B17C
		public void Dispose(); // 0x0081B17C-0x0081B1D8
		[RequiredByNativeCode] // 0x00153AC8-0x00153AD8
		private static void SendEvents(CullingGroup cullingGroup, IntPtr eventsPtr, int count); // 0x0081B1D8-0x0081B264
		[FreeFunction] // 0x00153AD8-0x00153B4C
		private void FinalizerFailure(); // 0x0081B050-0x0081B0E8
	}

	public enum CursorLockMode // TypeDefIndex: 1861
	{
		None = 0,
		Locked = 1,
		Confined = 2
	}

	[NativeHeader] // 0x0014BC00-0x0014BC50
	public class Cursor // TypeDefIndex: 1862
	{
		// Properties
		public static CursorLockMode lockState { get; } // 0x0081B7BC-0x0081B844 
	}

	public abstract class CustomYieldInstruction : IEnumerator // TypeDefIndex: 1863
	{
		// Properties
		public abstract bool keepWaiting { get; }
		public object Current { get; } // 0x0081B84C-0x0081B854 
	
		// Constructors
		protected CustomYieldInstruction(); // 0x0081B844-0x0081B84C
	
		// Methods
		public bool MoveNext(); // 0x0081B854-0x0081B864
		public void Reset(); // 0x0081B864-0x0081B868
	}

	[NativeHeader] // 0x0014BC50-0x0014BC84
	internal sealed class DebugLogHandler : ILogHandler // TypeDefIndex: 1864
	{
		// Constructors
		public DebugLogHandler(); // 0x0081C6D4-0x0081C6DC
	
		// Methods
		[ThreadAndSerializationSafe] // 0x00153B4C-0x00153B5C
		internal static void Internal_Log(LogType level, string msg, UnityEngine.Object obj); // 0x0081C6DC-0x0081C764
		[ThreadAndSerializationSafe] // 0x00153B5C-0x00153B6C
		internal static void Internal_LogException(Exception exception, UnityEngine.Object obj); // 0x0081C764-0x0081C7E4
		public void LogFormat(LogType logType, UnityEngine.Object context, string format, params /* 0x00158CF0-0x00158D00 */ object[] args); // 0x0081C7E4-0x0081C818
		public void LogException(Exception exception, UnityEngine.Object context); // 0x0081C818-0x0081C8D4
	}

	[NativeHeader] // 0x0014BC84-0x0014BCB8
	public class Debug // TypeDefIndex: 1865
	{
		// Fields
		internal static ILogger s_Logger; // 0x00
	
		// Properties
		public static ILogger unityLogger { get; } // 0x0081B868-0x0081B8F4 
		[NativeProperty] // 0x001599F0-0x00159A5C
		[StaticAccessor] // 0x001599F0-0x00159A5C
		public static bool isDebugBuild { get; } // 0x0081C5A4-0x0081C630 
	
		// Constructors
		static Debug(); // 0x0081C630-0x0081C6D4
	
		// Methods
		[FreeFunction] // 0x00153B6C-0x00153BA8
		public static void DrawLine(Vector3 start, Vector3 end, [UnityEngine.Internal.DefaultValue] /* 0x00158D00-0x00158D34 */ Color color, [UnityEngine.Internal.DefaultValue] /* 0x00158D34-0x00158D68 */ float duration, [UnityEngine.Internal.DefaultValue] /* 0x00158D68-0x00158D9C */ bool depthTest); // 0x0081B8F4-0x0081B9CC
		public static void Log(object message); // 0x0080D408-0x0080D518
		public static void LogFormat(string format, params /* 0x00158D9C-0x00158DAC */ object[] args); // 0x0081BA64-0x0081BB88
		public static void LogError(object message); // 0x0081BB88-0x0081BC98
		public static void LogError(object message, UnityEngine.Object context); // 0x0081BC98-0x0081BDBC
		public static void LogErrorFormat(string format, params /* 0x00158DAC-0x00158DBC */ object[] args); // 0x0081BDBC-0x0081BEE0
		public static void LogErrorFormat(UnityEngine.Object context, string format, params /* 0x00158DBC-0x00158DCC */ object[] args); // 0x0081BEE0-0x0081C00C
		public static void LogException(Exception exception); // 0x0081271C-0x0081282C
		public static void LogException(Exception exception, UnityEngine.Object context); // 0x0081C00C-0x0081C120
		public static void LogWarning(object message); // 0x0081C120-0x0081C230
		public static void LogWarning(object message, UnityEngine.Object context); // 0x0081C230-0x0081C354
		public static void LogWarningFormat(string format, params /* 0x00158DCC-0x00158DDC */ object[] args); // 0x0081C354-0x0081C478
		public static void LogWarningFormat(UnityEngine.Object context, string format, params /* 0x00158DDC-0x00158DEC */ object[] args); // 0x0081C478-0x0081C5A4
		[Conditional] // 0x00153BA8-0x00153BDC
		public static void LogAssertion(object message); // 0x00812F28-0x00813038
		private static void DrawLine_Injected(ref Vector3 start, ref Vector3 end, [UnityEngine.Internal.DefaultValue] /* 0x00158DEC-0x00158E20 */ ref Color color, [UnityEngine.Internal.DefaultValue] /* 0x00158E20-0x00158E54 */ float duration, [UnityEngine.Internal.DefaultValue] /* 0x00158E54-0x00158E88 */ bool depthTest); // 0x0081B9CC-0x0081BA64
	}

	[NativeHeader] // 0x0014BCB8-0x0014BD1C
	[UsedByNativeCode] // 0x0014BCB8-0x0014BD1C
	public class Display // TypeDefIndex: 1866
	{
		// Fields
		internal IntPtr nativeDisplay; // 0x08
		public static Display[] displays; // 0x00
		private static Display _mainDisplay; // 0x04
		[CompilerGenerated] // 0x00150A44-0x00150A78
		[DebuggerBrowsable] // 0x00150A44-0x00150A78
		private static DisplaysUpdatedDelegate onDisplaysUpdated; // 0x08
	
		// Properties
		public int renderingWidth { get; } // 0x0081C93C-0x0081C9E0 
		public int renderingHeight { get; } // 0x0081CA68-0x0081CB0C 
		public int systemWidth { get; } // 0x0081CB0C-0x0081CBB0 
		public int systemHeight { get; } // 0x0081CC38-0x0081CCDC 
		public RenderBuffer colorBuffer { get; } // 0x0081CCDC-0x0081CD94 
		public RenderBuffer depthBuffer { get; } // 0x0081CE1C-0x0081CED0 
		public static Display main { get; } // 0x0081D044-0x0081D0D0 
	
		// Nested types
		public delegate void DisplaysUpdatedDelegate(); // TypeDefIndex: 1867; 0x0081D434-0x0081D870
	
		// Constructors
		internal Display(); // 0x0081C8DC-0x0081C91C
		internal Display(IntPtr nativeDisplay); // 0x0081C91C-0x0081C93C
		static Display(); // 0x0081D870-0x0081DA00
	
		// Methods
		public static Vector3 RelativeMouseAt(Vector3 inputMouseCoordinates); // 0x0081CED0-0x0081CFB4
		[RequiredByNativeCode] // 0x00153BDC-0x00153BEC
		private static void RecreateDisplayList(IntPtr[] nativeDisplay); // 0x0081D0D0-0x0081D350
		[RequiredByNativeCode] // 0x00153BEC-0x00153BFC
		private static void FireDisplaysUpdated(); // 0x0081D350-0x0081D434
		[FreeFunction] // 0x00153BFC-0x00153C54
		private static void GetSystemExtImpl(IntPtr nativeDisplay, out int w, out int h); // 0x0081CBB0-0x0081CC38
		[FreeFunction] // 0x00153C54-0x00153CB0
		private static void GetRenderingExtImpl(IntPtr nativeDisplay, out int w, out int h); // 0x0081C9E0-0x0081CA68
		[FreeFunction] // 0x00153CB0-0x00153D0C
		private static void GetRenderingBuffersImpl(IntPtr nativeDisplay, out RenderBuffer color, out RenderBuffer depth); // 0x0081CD94-0x0081CE1C
		[FreeFunction] // 0x00153D0C-0x00153D5C
		private static int RelativeMouseAtImpl(int x, int y, out int rx, out int ry); // 0x0081CFB4-0x0081D044
	}

	[AttributeUsage] // 0x0014BD1C-0x0014BD50
	[UsedByNativeCode] // 0x0014BD1C-0x0014BD50
	public class ExcludeFromObjectFactoryAttribute : Attribute // TypeDefIndex: 1868
	{
		// Constructors
		public ExcludeFromObjectFactoryAttribute(); // 0x00820430-0x00820438
	}

	[ExcludeFromObjectFactory] // 0x0014BD50-0x0014BD94
	[NativeClass] // 0x0014BD50-0x0014BD94
	[RequiredByNativeCode] // 0x0014BD50-0x0014BD94
	internal class FailedToLoadScriptObject : UnityEngine.Object // TypeDefIndex: 1869
	{
	}

	[Serializable]
	[NativeHeader] // 0x0014BD94-0x0014BE38
	[NativeHeader] // 0x0014BD94-0x0014BE38
	[UsedByNativeCode] // 0x0014BD94-0x0014BE38
	public class RectOffset // TypeDefIndex: 1870
	{
		// Fields
		[NonSerialized]
		[VisibleToOtherModules] // 0x00150A78-0x00150B08
		internal IntPtr m_Ptr; // 0x08
		private readonly object m_SourceStyle; // 0x0C
	
		// Properties
		[NativeProperty] // 0x00159A5C-0x00159AA4
		public int left { get; set; } // 0x0071CC30-0x0071CCBC 0x0071C90C-0x0071C9AC
		[NativeProperty] // 0x00159AA4-0x00159AEC
		public int right { get; set; } // 0x0071CCBC-0x0071CD48 0x0071C9AC-0x0071CA4C
		[NativeProperty] // 0x00159AEC-0x00159B30
		public int top { get; set; } // 0x0071CD48-0x0071CDD4 0x0071CA4C-0x0071CAEC
		[NativeProperty] // 0x00159B30-0x00159B78
		public int bottom { get; set; } // 0x0071CDD4-0x0071CE64 0x0071CAEC-0x0071CB90
		public int horizontal { get; } // 0x0071CE64-0x0071CEF8 
		public int vertical { get; } // 0x0071CEF8-0x0071CF88 
	
		// Constructors
		public RectOffset(); // 0x0071C7D8-0x0071C7F8
		[VisibleToOtherModules] // 0x00153D5C-0x00153DEC
		internal RectOffset(object sourceStyle, IntPtr source); // 0x0071C888-0x0071C8B0
		public RectOffset(int left, int right, int top, int bottom); // 0x0071C8B0-0x0071C90C
	
		// Methods
		[ThreadAndSerializationSafe] // 0x00153DEC-0x00153DFC
		private static IntPtr InternalCreate(); // 0x0071C7F8-0x0071C888
		[ThreadAndSerializationSafe] // 0x00153DFC-0x00153E0C
		private static void InternalDestroy(IntPtr ptr); // 0x0071CB90-0x0071CC30
		public Rect Add(Rect rect); // 0x0071CF88-0x0071CFDC
		public Rect Remove(Rect rect); // 0x0071D064-0x0071D0B8
		~RectOffset(); // 0x0071D140-0x0071D1B4
		public override string ToString(); // 0x0071D260-0x0071D4EC
		private void Dispose(); // 0x0071D1B4-0x0071D260
		private void Add_Injected(ref Rect rect, out Rect ret); // 0x0071CFDC-0x0071D064
		private void Remove_Injected(ref Rect rect, out Rect ret); // 0x0071D0B8-0x0071D140
	}

	[RequireComponent] // 0x0014BE38-0x0014BEB0
	public class GUIElement : Behaviour // TypeDefIndex: 1871
	{
		// Constructors
		public GUIElement(); // 0x0082318C-0x00823190
	}

	[Obsolete] // 0x0014BEB0-0x0014BF50
	[RequireComponent] // 0x0014BEB0-0x0014BF50
	public class GUILayer : Behaviour // TypeDefIndex: 1872
	{
		// Methods
		public GUIElement HitTest(Vector3 screenPosition); // 0x00823190-0x008231D8
		private GUIElement HitTest(Vector2 screenPosition); // 0x008231D8-0x008231F4
		private GUIElement HitTest_Injected(ref Vector2 screenPosition); // 0x008231F4-0x008232A4
	}

	[ExcludeFromPreset] // 0x0014BF50-0x0014BFC8
	[NativeHeader] // 0x0014BF50-0x0014BFC8
	[UsedByNativeCode] // 0x0014BF50-0x0014BFC8
	public sealed class GameObject : UnityEngine.Object // TypeDefIndex: 1873
	{
		// Properties
		public Transform transform { [FreeFunction] /* 0x001541D4-0x00154234 */ get; } // 0x0082375C-0x008237EC 
		public int layer { get; set; } // 0x008237EC-0x00823878 0x00823878-0x00823918
		public bool activeSelf { [NativeMethod] /* 0x0015427C-0x001542C4 */ get; } // 0x008239BC-0x00823A50 
		public bool activeInHierarchy { [NativeMethod] /* 0x001542C4-0x00154308 */ get; } // 0x00823A50-0x00823AE8 
		public string tag { [FreeFunction] /* 0x00154308-0x00154370 */ get; [FreeFunction] /* 0x00154370-0x001543C8 */ set; } // 0x0081A4EC-0x0081A578 0x00823AE8-0x00823B88
		public Scene scene { [FreeFunction] /* 0x00154554-0x001545B0 */ get; } // 0x00823CAC-0x00823CD4 
		public GameObject gameObject { get; } // 0x00823D54-0x00823D58 
	
		// Constructors
		public GameObject(string name); // 0x008232A4-0x00823338
		public GameObject(); // 0x008233B8-0x00823448
		public GameObject(string name, params /* 0x00158E88-0x00158E98 */ Type[] components); // 0x00823448-0x00823530
	
		// Methods
		[FreeFunction] // 0x00153E0C-0x00153E5C
		public static GameObject CreatePrimitive(PrimitiveType type); // 0x00823534-0x008235AC
		public T GetComponent<T>();
		[FreeFunction] // 0x00153E5C-0x00153EF8
		[TypeInferenceRule] // 0x00153E5C-0x00153EF8
		public Component GetComponent(Type type); // 0x0081A164-0x0081A208
		[FreeFunction] // 0x00153EF8-0x00153F90
		[NativeWritableSelf] // 0x00153EF8-0x00153F90
		internal void GetComponentFastPath(Type type, IntPtr oneFurtherThanResultValue); // 0x008235AC-0x00823634
		[FreeFunction] // 0x00153F90-0x0015402C
		[TypeInferenceRule] // 0x00153F90-0x0015402C
		public Component GetComponentInChildren(Type type, bool includeInactive); // 0x0081A2CC-0x0081A354
		[ExcludeFromDocs] // 0x0015402C-0x0015403C
		public T GetComponentInChildren<T>();
		public T GetComponentInChildren<T>([UnityEngine.Internal.DefaultValue] /* 0x00158E98-0x00158ECC */ bool includeInactive);
		[FreeFunction] // 0x0015403C-0x001540D8
		[TypeInferenceRule] // 0x0015403C-0x001540D8
		public Component GetComponentInParent(Type type); // 0x0081A388-0x0081A434
		public T GetComponentInParent<T>();
		[FreeFunction] // 0x001540D8-0x0015415C
		private Array GetComponentsInternal(Type type, bool useSearchTypeAsArrayReturnType, bool recursive, bool includeInactive, bool reverse, object resultList); // 0x00823634-0x008236DC
		public T[] GetComponents<T>();
		public void GetComponents<T>(List<T> results);
		public T[] GetComponentsInChildren<T>(bool includeInactive);
		public void GetComponentsInChildren<T>(bool includeInactive, List<T> results);
		public T[] GetComponentsInChildren<T>();
		public void GetComponentsInParent<T>(bool includeInactive, List<T> results);
		[FreeFunction] // 0x0015415C-0x001541C0
		private Component Internal_AddComponentWithType(Type componentType); // 0x008236DC-0x0082375C
		[TypeInferenceRule] // 0x001541C0-0x001541D4
		public Component AddComponent(Type componentType); // 0x00823530-0x00823534
		public T AddComponent<T>()
			where T : Component;
		[NativeMethod] // 0x00154234-0x0015427C
		public void SetActive(bool value); // 0x00823918-0x008239BC
		[FreeFunction] // 0x001543C8-0x00154430
		public bool CompareTag(string tag); // 0x0081A5AC-0x0081A650
		[FreeFunction] // 0x00154430-0x00154498
		public void SendMessage(string methodName, [UnityEngine.Internal.DefaultValue] /* 0x00158ECC-0x00158F00 */ object value, [UnityEngine.Internal.DefaultValue] /* 0x00158F00-0x00158F50 */ SendMessageOptions options); // 0x00823B88-0x00823C18
		[FreeFunction] // 0x00154498-0x00154500
		private static void Internal_CreateGameObject([Writable] /* 0x00158F50-0x00158F60 */ GameObject self, string name); // 0x00823338-0x008233B8
		[FreeFunction] // 0x00154500-0x00154554
		public static GameObject Find(string name); // 0x00823C18-0x00823CAC
		private void get_scene_Injected(out Scene ret); // 0x00823CD4-0x00823D54
	}

	[NativeHeader] // 0x0014BFC8-0x0014C040
	[StaticAccessor] // 0x0014BFC8-0x0014C040
	public sealed class GeometryUtility // TypeDefIndex: 1874
	{
		// Methods
		public static Plane[] CalculateFrustumPlanes(Camera camera); // 0x007070A8-0x00707120
		public static void CalculateFrustumPlanes(Camera camera, Plane[] planes); // 0x00707120-0x007073D4
		public static void CalculateFrustumPlanes(Matrix4x4 worldToProjectionMatrix, Plane[] planes); // 0x007076B8-0x00707830
		public static bool TestPlanesAABB(Plane[] planes, Bounds bounds); // 0x007078A8-0x007078D8
		[NativeName] // 0x001545B0-0x001545EC
		private static void Internal_ExtractPlanes(out Plane[] planes, Matrix4x4 worldToProjectionMatrix); // 0x00707830-0x007078A8
		private static bool TestPlanesAABB_Injected(Plane[] planes, ref Bounds bounds); // 0x007078D8-0x00707958
		private static void Internal_ExtractPlanes_Injected(out Plane[] planes, ref Matrix4x4 worldToProjectionMatrix); // 0x00707958-0x007079D8
	}

	[NativeHeader] // 0x0014C040-0x0014C0C8
	[StaticAccessor] // 0x0014C040-0x0014C0C8
	public sealed class Gizmos // TypeDefIndex: 1875
	{
		// Properties
		public static Color color { set; } // 0x00707D54-0x00707D70
		public static Matrix4x4 matrix { set; } // 0x00707E14-0x00707E84
	
		// Methods
		[NativeThrows] // 0x001545EC-0x001545FC
		public static void DrawLine(Vector3 from, Vector3 to); // 0x007079D8-0x00707A14
		[NativeThrows] // 0x001545FC-0x0015460C
		public static void DrawWireSphere(Vector3 center, float radius); // 0x00707A94-0x00707AB8
		[NativeThrows] // 0x0015460C-0x0015461C
		public static void DrawSphere(Vector3 center, float radius); // 0x00707B38-0x00707B5C
		[NativeThrows] // 0x0015461C-0x0015462C
		public static void DrawWireCube(Vector3 center, Vector3 size); // 0x00707BDC-0x00707C18
		[NativeThrows] // 0x0015462C-0x0015463C
		public static void DrawCube(Vector3 center, Vector3 size); // 0x00707C98-0x00707CD4
		private static void DrawLine_Injected(ref Vector3 from, ref Vector3 to); // 0x00707A14-0x00707A94
		private static void DrawWireSphere_Injected(ref Vector3 center, float radius); // 0x00707AB8-0x00707B38
		private static void DrawSphere_Injected(ref Vector3 center, float radius); // 0x00707B5C-0x00707BDC
		private static void DrawWireCube_Injected(ref Vector3 center, ref Vector3 size); // 0x00707C18-0x00707C98
		private static void DrawCube_Injected(ref Vector3 center, ref Vector3 size); // 0x00707CD4-0x00707D54
		private static void set_color_Injected(ref Color value); // 0x00707D70-0x00707E14
		private static void set_matrix_Injected(ref Matrix4x4 value); // 0x00707E84-0x00707F2C
	}

	[NativeHeader] // 0x0014C0C8-0x0014C12C
	[RequiredByNativeCode] // 0x0014C0C8-0x0014C12C
	public class Gradient : IEquatable<Gradient> // TypeDefIndex: 1876
	{
		// Fields
		internal IntPtr m_Ptr; // 0x08
	
		// Constructors
		[RequiredByNativeCode] // 0x0015463C-0x0015464C
		public Gradient(); // 0x007080E8-0x00708108
	
		// Methods
		[FreeFunction] // 0x0015464C-0x001546AC
		private static IntPtr Init(); // 0x00708108-0x0070818C
		[FreeFunction] // 0x001546AC-0x00154720
		private void Cleanup(); // 0x0070818C-0x00708214
		[FreeFunction] // 0x00154720-0x00154790
		private bool Internal_Equals(IntPtr other); // 0x00708214-0x007082BC
		~Gradient(); // 0x007082BC-0x00708320
		public override bool Equals(object o); // 0x00708320-0x0070845C
		public bool Equals(Gradient other); // 0x0070845C-0x0070851C
		public override int GetHashCode(); // 0x0070851C-0x00708528
	}

	internal enum EnabledOrientation // TypeDefIndex: 1877
	{
		kAutorotateToPortrait = 1,
		kAutorotateToPortraitUpsideDown = 2,
		kAutorotateToLandscapeLeft = 4,
		kAutorotateToLandscapeRight = 8
	}

	[NativeHeader] // 0x0014C12C-0x0014C1E0
	[NativeHeader] // 0x0014C12C-0x0014C1E0
	[StaticAccessor] // 0x0014C12C-0x0014C1E0
	public sealed class Screen // TypeDefIndex: 1878
	{
		// Properties
		public static int width { [NativeMethod] /* 0x00154790-0x001547E4 */ get; } // 0x00723500-0x00723584 
		public static int height { [NativeMethod] /* 0x001547E4-0x00154838 */ get; } // 0x00723584-0x0072360C 
		public static float dpi { [NativeName] /* 0x00154838-0x0015486C */ get; } // 0x0072360C-0x00723690 
		public static ScreenOrientation orientation { get; set; } // 0x00723798-0x0072379C 0x0072379C-0x00723840
		[NativeProperty] // 0x00159B78-0x00159BB4
		public static int sleepTimeout { set; } // 0x00723840-0x007238DC
		public static bool autorotateToPortrait { get; set; } // 0x007239D4-0x007239DC 0x007239DC-0x007239E8
		public static bool autorotateToPortraitUpsideDown { get; set; } // 0x007239E8-0x007239F0 0x007239F0-0x007239FC
		public static bool autorotateToLandscapeLeft { get; set; } // 0x007239FC-0x00723A04 0x00723A04-0x00723A10
		public static bool autorotateToLandscapeRight { get; set; } // 0x00723A10-0x00723A18 0x00723A18-0x00723A40
	
		// Methods
		private static void RequestOrientation(ScreenOrientation orient); // 0x00723690-0x00723708
		private static ScreenOrientation GetScreenOrientation(); // 0x00723708-0x00723798
		[NativeName] // 0x0015486C-0x001548B0
		private static bool IsOrientationEnabled(EnabledOrientation orient); // 0x007238DC-0x00723954
		[NativeName] // 0x001548B0-0x001548F4
		private static void SetOrientationEnabled(EnabledOrientation orient, bool enabled); // 0x00723954-0x007239D4
	}

	[NativeHeader] // 0x0014C1E0-0x0014C214
	public struct RenderBuffer // TypeDefIndex: 1879
	{
		// Fields
		internal int m_RenderTextureInstanceID; // 0x00
		internal IntPtr m_BufferPtr; // 0x04
	
		// Methods
		[FreeFunction] // 0x001548F4-0x0015496C
		public IntPtr GetNativeRenderBufferPtr(); // 0x0071F69C-0x0071F6A4
		private static IntPtr GetNativeRenderBufferPtr_Injected(ref RenderBuffer _unity_self); // 0x0071F624-0x0071F69C
	}

	[NativeHeader] // 0x0014C214-0x0014C33C
	[NativeHeader] // 0x0014C214-0x0014C33C
	[NativeHeader] // 0x0014C214-0x0014C33C
	[NativeHeader] // 0x0014C214-0x0014C33C
	[NativeHeader] // 0x0014C214-0x0014C33C
	public class Graphics // TypeDefIndex: 1880
	{
		// Fields
		internal static readonly int kMaxDrawMeshInstanceCount; // 0x00
	
		// Constructors
		static Graphics(); // 0x007089A4-0x00708A08
	
		// Methods
		[FreeFunction] // 0x0015496C-0x001549C8
		private static int Internal_GetMaxDrawMeshInstanceCount(); // 0x00708528-0x007085CC
		[NativeMethod] // 0x001549C8-0x00154A40
		private static void Internal_SetRTSimple(RenderBuffer color, RenderBuffer depth, int mip, CubemapFace face, int depthSlice); // 0x007085CC-0x0070867C
		[NativeMethod] // 0x00154A40-0x00154AC0
		public static void ExecuteCommandBuffer([NotNull] /* 0x00158F60-0x00158F70 */ CommandBuffer buffer); // 0x0070870C-0x00708784
		internal static void SetRenderTargetImpl(RenderBuffer colorBuffer, RenderBuffer depthBuffer, int mipLevel, CubemapFace face, int depthSlice); // 0x00708784-0x0070883C
		public static void SetRenderTarget(RenderBuffer colorBuffer, RenderBuffer depthBuffer, [UnityEngine.Internal.DefaultValue] /* 0x00158F70-0x00158FA0 */ int mipLevel, [UnityEngine.Internal.DefaultValue] /* 0x00158FA0-0x00158FE0 */ CubemapFace face, [UnityEngine.Internal.DefaultValue] /* 0x00158FE0-0x00159010 */ int depthSlice); // 0x0070883C-0x007088F4
		[ExcludeFromDocs] // 0x00154AC0-0x00154AD0
		public static void SetRenderTarget(RenderBuffer colorBuffer, RenderBuffer depthBuffer); // 0x007088F4-0x007089A4
		private static void Internal_SetRTSimple_Injected(ref RenderBuffer color, ref RenderBuffer depth, int mip, CubemapFace face, int depthSlice); // 0x0070867C-0x0070870C
	}

	[NativeHeader] // 0x0014C33C-0x0014C44C
	[NativeHeader] // 0x0014C33C-0x0014C44C
	[NativeHeader] // 0x0014C33C-0x0014C44C
	[NativeHeader] // 0x0014C33C-0x0014C44C
	[StaticAccessor] // 0x0014C33C-0x0014C44C
	public sealed class GL // TypeDefIndex: 1881
	{
		// Methods
		[NativeName] // 0x00154AD0-0x00154B0C
		public static void Vertex3(float x, float y, float z); // 0x00822AAC-0x00822B34
		public static void Vertex(Vector3 v); // 0x00822B34-0x00822B38
		[NativeName] // 0x00154B0C-0x00154B48
		private static void ImmediateColor(float r, float g, float b, float a); // 0x00822B38-0x00822BC8
		public static void Color(Color c); // 0x00822BC8-0x00822BE0
		[NativeName] // 0x00154B48-0x00154B84
		public static void MultMatrix(Matrix4x4 m); // 0x00822BE0-0x00822C50
		[FreeFunction] // 0x00154B84-0x00154BC4
		public static void PushMatrix(); // 0x00822CF4-0x00822D78
		[FreeFunction] // 0x00154BC4-0x00154C04
		public static void PopMatrix(); // 0x00822D78-0x00822DF8
		[FreeFunction] // 0x00154C04-0x00154C14
		private static void GLIssuePluginEvent(IntPtr callback, int eventID); // 0x00822DF8-0x00822EA8
		public static void IssuePluginEvent(IntPtr callback, int eventID); // 0x00822EA8-0x00822F84
		[FreeFunction] // 0x00154C14-0x00154C58
		public static void Begin(int mode); // 0x00822F84-0x00823010
		[FreeFunction] // 0x00154C58-0x00154C8C
		public static void End(); // 0x00823010-0x0082308C
		[FreeFunction] // 0x00154C8C-0x00154C9C
		private static void GLClear(bool clearDepth, bool clearColor, Color backgroundColor, float depth); // 0x0082308C-0x008230C4
		public static void Clear(bool clearDepth, bool clearColor, Color backgroundColor); // 0x00823154-0x0082318C
		private static void MultMatrix_Injected(ref Matrix4x4 m); // 0x00822C50-0x00822CF4
		private static void GLClear_Injected(bool clearDepth, bool clearColor, ref Color backgroundColor, float depth); // 0x008230C4-0x00823154
	}

	[RequiredByNativeCode] // 0x0014C44C-0x0014C45C
	public struct Resolution // TypeDefIndex: 1882
	{
		// Fields
		private int m_Width; // 0x00
		private int m_Height; // 0x04
		private int m_RefreshRate; // 0x08
	
		// Methods
		public override string ToString(); // 0x00722208-0x0072226C
	}

	[NativeHeader] // 0x0014C45C-0x0014C514
	[NativeHeader] // 0x0014C45C-0x0014C514
	[StaticAccessor] // 0x0014C45C-0x0014C514
	public sealed class QualitySettings : UnityEngine.Object // TypeDefIndex: 1883
	{
		// Properties
		public static ColorSpace activeColorSpace { [NativeName] /* 0x00154C9C-0x00154D14 */ [StaticAccessor] /* 0x00154C9C-0x00154D14 */ get; } // 0x00719FB4-0x0071A05C 
	}

	[NativeHeader] // 0x0014C514-0x0014C590
	[NativeHeader] // 0x0014C514-0x0014C590
	public sealed class TrailRenderer : Renderer // TypeDefIndex: 1884
	{
		// Properties
		public float time { get; set; } // 0x00ADCE74-0x00ADCF04 0x00ADCF04-0x00ADCFA8
		public float startWidth { get; set; } // 0x00ADCFA8-0x00ADD03C 0x00ADD03C-0x00ADD0E8
		public float endWidth { get; set; } // 0x00ADD0E8-0x00ADD17C 0x00ADD17C-0x00ADD224
	}

	[NativeHeader] // 0x0014C590-0x0014C608
	[NativeHeader] // 0x0014C590-0x0014C608
	public sealed class LineRenderer : Renderer // TypeDefIndex: 1885
	{
		// Properties
		public Color startColor { set; } // 0x00709DC4-0x00709DE8
		public Color endColor { set; } // 0x00709DE8-0x00709E0C
	
		// Methods
		[Obsolete] // 0x00154D14-0x00154D78
		public void SetColors(Color start, Color end); // 0x00709D6C-0x00709DC4
		private void set_startColor_Injected(ref Color value); // 0x00709E0C-0x00709E8C
		private void set_endColor_Injected(ref Color value); // 0x00709E8C-0x00709F0C
	}

	[NativeHeader] // 0x0014C608-0x0014C6F4
	[NativeHeader] // 0x0014C608-0x0014C6F4
	[RequireComponent] // 0x0014C608-0x0014C6F4
	[UsedByNativeCode] // 0x0014C608-0x0014C6F4
	public class Renderer : Component // TypeDefIndex: 1886
	{
		// Properties
		public bool enabled { get; set; } // 0x007218D4-0x00721960 0x00721960-0x00721A04
		public int sortingLayerID { get; } // 0x00721A04-0x00721A98 
		public int sortingOrder { get; } // 0x00721A98-0x00721B2C 
		public Material[] materials { get; } // 0x00721B2C-0x00721B30 
		public Material material { get; set; } // 0x00721B30-0x00721B34 0x00721B34-0x00721B38
		public Material sharedMaterial { get; set; } // 0x00721B38-0x00721B3C 0x00721B3C-0x00721B40
		public Material[] sharedMaterials { set; } // 0x00721B40-0x00721B44
	
		// Methods
		[FreeFunction] // 0x00154D78-0x00154DE0
		private Material GetMaterial(); // 0x007215C8-0x00721654
		[FreeFunction] // 0x00154DE0-0x00154E50
		private Material GetSharedMaterial(); // 0x00721654-0x007216E8
		[FreeFunction] // 0x00154E50-0x00154EB8
		private void SetMaterial(Material m); // 0x007216E8-0x00721790
		[FreeFunction] // 0x00154EB8-0x00154F24
		private Material[] GetMaterialArray(); // 0x00721790-0x00721824
		[FreeFunction] // 0x00154F24-0x00154F90
		private void SetMaterialArray([NotNull] /* 0x00159010-0x00159020 */ Material[] m); // 0x00721824-0x007218D4
	}

	[NativeHeader] // 0x0014C6F4-0x0014C7EC
	[NativeHeader] // 0x0014C6F4-0x0014C7EC
	[NativeHeader] // 0x0014C6F4-0x0014C7EC
	[StaticAccessor] // 0x0014C6F4-0x0014C7EC
	public sealed class RenderSettings : UnityEngine.Object // TypeDefIndex: 1887
	{
		// Properties
		[NativeProperty] // 0x00159BB4-0x00159BE8
		public static bool fog { get; set; } // 0x0071F6A4-0x0071F730 0x0071F730-0x0071F7CC
		[NativeProperty] // 0x00159BE8-0x00159C24
		public static float fogStartDistance { get; set; } // 0x0071F7CC-0x0071F864 0x0071F864-0x0071F90C
		[NativeProperty] // 0x00159C24-0x00159C60
		public static float fogEndDistance { get; set; } // 0x0071F90C-0x0071F9A4 0x0071F9A4-0x0071FA4C
		public static FogMode fogMode { get; set; } // 0x0071FA4C-0x0071FADC 0x0071FADC-0x0071FB84
		public static Color fogColor { get; set; } // 0x0071FB84-0x0071FBB8 0x0071FC30-0x0071FC4C
		public static float fogDensity { get; set; } // 0x0071FCC4-0x0071FD58 0x0071FD58-0x0071FDFC
		[NativeProperty] // 0x00159C60-0x00159C9C
		public static Material skybox { get; set; } // 0x0071FDFC-0x0071FE8C 0x0071FE8C-0x0071FF34
	
		// Methods
		private static void get_fogColor_Injected(out Color ret); // 0x0071FBB8-0x0071FC30
		private static void set_fogColor_Injected(ref Color value); // 0x0071FC4C-0x0071FCC4
	}

	[NativeHeader] // 0x0014C7EC-0x0014C954
	[NativeHeader] // 0x0014C7EC-0x0014C954
	[NativeHeader] // 0x0014C7EC-0x0014C954
	[NativeHeader] // 0x0014C7EC-0x0014C954
	[NativeHeader] // 0x0014C7EC-0x0014C954
	[NativeHeader] // 0x0014C7EC-0x0014C954
	public sealed class Shader : UnityEngine.Object // TypeDefIndex: 1888
	{
		// Constructors
		private Shader(); // 0x00725E0C-0x00725E90
	
		// Methods
		[FreeFunction] // 0x00154F90-0x00154FDC
		public static Shader Find(string name); // 0x00725E90-0x00725F20
		[FreeFunction] // 0x00154FDC-0x00155028
		public static void DisableKeyword(string keyword); // 0x00725F20-0x00725FBC
		[FreeFunction] // 0x00155028-0x00155090
		public static int PropertyToID(string name); // 0x0070B660-0x0070B6F8
	}

	[NativeHeader] // 0x0014C954-0x0014C9C8
	[NativeHeader] // 0x0014C954-0x0014C9C8
	public class Material : UnityEngine.Object // TypeDefIndex: 1889
	{
		// Properties
		public Color color { get; set; } // 0x0070AF7C-0x0070B02C 0x0070B08C-0x0070B114
		public Texture mainTexture { get; set; } // 0x0070B164-0x0070B1D0 0x0070B1F4-0x0070B268
		public Vector2 mainTextureOffset { get; set; } // 0x0070B294-0x0070B318 0x0070B354-0x0070B3D8
		public Vector2 mainTextureScale { get; set; } // 0x0070B418-0x0070B49C 0x0070B4D8-0x0070B55C
	
		// Constructors
		public Material(Shader shader); // 0x0070AC18-0x0070ACAC
		[RequiredByNativeCode] // 0x00155090-0x001550A0
		public Material(Material source); // 0x0070AD34-0x0070ADC8
		[EditorBrowsable] // 0x001550A0-0x001550F0
		[Obsolete] // 0x001550A0-0x001550F0
		public Material(string contents); // 0x0070AE48-0x0070AED4
	
		// Methods
		[FreeFunction] // 0x001550F0-0x00155140
		private static void CreateWithShader([Writable] /* 0x00159020-0x00159030 */ Material self, [NotNull] /* 0x00159030-0x00159040 */ Shader shader); // 0x0070ACB4-0x0070AD34
		[FreeFunction] // 0x00155140-0x00155194
		private static void CreateWithMaterial([Writable] /* 0x00159040-0x00159050 */ Material self, [NotNull] /* 0x00159050-0x00159060 */ Material source); // 0x0070ADC8-0x0070AE48
		[FreeFunction] // 0x00155194-0x001551E4
		private static void CreateWithString([Writable] /* 0x00159060-0x00159070 */ Material self); // 0x0070AED4-0x0070AF7C
		[NativeName] // 0x001551E4-0x00155228
		public bool HasProperty(int nameID); // 0x0070B59C-0x0070B63C
		public bool HasProperty(string name); // 0x0070B63C-0x0070B660
		public void EnableKeyword(string keyword); // 0x0070B6F8-0x0070B79C
		public void DisableKeyword(string keyword); // 0x0070B79C-0x0070B840
		[FreeFunction] // 0x00155228-0x00155280
		public bool SetPass(int pass); // 0x0070B840-0x0070B8DC
		[NativeName] // 0x00155280-0x001552C0
		private void SetFloatImpl(int name, float value); // 0x0070B8DC-0x0070B994
		[NativeName] // 0x001552C0-0x00155300
		private void SetColorImpl(int name, Color value); // 0x0070B994-0x0070B9C0
		[NativeName] // 0x00155300-0x00155344
		private void SetTextureImpl(int name, Texture value); // 0x0070BA48-0x0070BAD0
		[NativeName] // 0x00155344-0x00155384
		private float GetFloatImpl(int name); // 0x0070BAD0-0x0070BB74
		[NativeName] // 0x00155384-0x001553C4
		private Color GetColorImpl(int name); // 0x0070BB74-0x0070BBB0
		[NativeName] // 0x001553C4-0x00155408
		private Texture GetTextureImpl(int name); // 0x0070BC38-0x0070BCDC
		[NativeName] // 0x00155408-0x00155458
		private Vector4 GetTextureScaleAndOffsetImpl(int name); // 0x0070BCDC-0x0070BD18
		[NativeName] // 0x00155458-0x001554A0
		private void SetTextureOffsetImpl(int name, Vector2 offset); // 0x0070BDA0-0x0070BDBC
		[NativeName] // 0x001554A0-0x001554E8
		private void SetTextureScaleImpl(int name, Vector2 scale); // 0x0070BE44-0x0070BE60
		public void SetFloat(string name, float value); // 0x0070BEE8-0x0070BF14
		public void SetInt(string name, int value); // 0x0070BF14-0x0070BF48
		public void SetColor(string name, Color value); // 0x0070B114-0x0070B164
		public void SetVector(string name, Vector4 value); // 0x0070BF48-0x0070BFB4
		public void SetTexture(string name, Texture value); // 0x0070B268-0x0070B294
		public float GetFloat(string name); // 0x0070BFB4-0x0070BFD8
		public Color GetColor(string name); // 0x0070B02C-0x0070B08C
		public Vector4 GetVector(string name); // 0x0070BFD8-0x0070C054
		public Texture GetTexture(string name); // 0x0070B1D0-0x0070B1F4
		public void SetTextureOffset(string name, Vector2 value); // 0x0070B3D8-0x0070B418
		public void SetTextureScale(string name, Vector2 value); // 0x0070B55C-0x0070B59C
		public Vector2 GetTextureOffset(string name); // 0x0070B318-0x0070B354
		public Vector2 GetTextureOffset(int nameID); // 0x0070C054-0x0070C0B0
		public Vector2 GetTextureScale(string name); // 0x0070B49C-0x0070B4D8
		public Vector2 GetTextureScale(int nameID); // 0x0070C0B0-0x0070C108
		private void SetColorImpl_Injected(int name, ref Color value); // 0x0070B9C0-0x0070BA48
		private void GetColorImpl_Injected(int name, out Color ret); // 0x0070BBB0-0x0070BC38
		private void GetTextureScaleAndOffsetImpl_Injected(int name, out Vector4 ret); // 0x0070BD18-0x0070BDA0
		private void SetTextureOffsetImpl_Injected(int name, ref Vector2 offset); // 0x0070BDBC-0x0070BE44
		private void SetTextureScaleImpl_Injected(int name, ref Vector2 scale); // 0x0070BE60-0x0070BEE8
	}

	[NativeHeader] // 0x0014C9C8-0x0014CAD8
	[NativeHeader] // 0x0014C9C8-0x0014CAD8
	[RequireComponent] // 0x0014C9C8-0x0014CAD8
	[RequireComponent] // 0x0014C9C8-0x0014CAD8
	public sealed class Light : Behaviour // TypeDefIndex: 1890
	{
		// Fields
		private int m_BakedIndex; // 0x0C
	
		// Properties
		public Color color { get; set; } // 0x00709954-0x0070998C 0x00709A38-0x00709A5C
		public float intensity { get; set; } // 0x00709B08-0x00709B94 0x00709B94-0x00709C34
		public float shadowStrength { get; [FreeFunction] /* 0x001554E8-0x00155548 */ set; } // 0x00709C34-0x00709CC4 0x00709CC4-0x00709D6C
	
		// Methods
		private void get_color_Injected(out Color ret); // 0x0070998C-0x00709A38
		private void set_color_Injected(ref Color value); // 0x00709A5C-0x00709B08
	}

	[NativeHeader] // 0x0014CAD8-0x0014CB94
	[RequireComponent] // 0x0014CAD8-0x0014CB94
	public sealed class MeshFilter : Component // TypeDefIndex: 1891
	{
		// Properties
		public Mesh sharedMesh { get; } // 0x00711410-0x007114A4 
		public Mesh mesh { [NativeName] /* 0x00155558-0x001555A4 */ get; [NativeName] /* 0x001555A4-0x001555E4 */ set; } // 0x007114A4-0x00711530 0x00711530-0x007115D4
	
		// Methods
		[RequiredByNativeCode] // 0x00155548-0x00155558
		private void DontStripMeshFilter(); // 0x0071140C-0x00711410
	}

	public enum FogMode // TypeDefIndex: 1892
	{
		Linear = 1,
		Exponential = 2,
		ExponentialSquared = 3
	}

	[Flags] // 0x0014CB94-0x0014CBA4
	public enum LightmapBakeType // TypeDefIndex: 1893
	{
		Mixed = 1,
		Baked = 2,
		Realtime = 4
	}

	public enum MixedLightingMode // TypeDefIndex: 1894
	{
		IndirectOnly = 0,
		Subtractive = 1,
		Shadowmask = 2
	}

	public enum CameraClearFlags // TypeDefIndex: 1895
	{
		Skybox = 1,
		Color = 2,
		SolidColor = 2,
		Depth = 3,
		Nothing = 4
	}

	[Flags] // 0x0014CBA4-0x0014CBB4
	public enum DepthTextureMode // TypeDefIndex: 1896
	{
		None = 0,
		Depth = 1,
		DepthNormals = 2,
		MotionVectors = 4
	}

	public enum MeshTopology // TypeDefIndex: 1897
	{
		Triangles = 0,
		Quads = 2,
		Lines = 3,
		LineStrip = 4,
		Points = 5
	}

	public enum ColorSpace // TypeDefIndex: 1898
	{
		Uninitialized = -1,
		Gamma = 0,
		Linear = 1
	}

	public enum ScreenOrientation // TypeDefIndex: 1899
	{
		Unknown = 0,
		Portrait = 1,
		PortraitUpsideDown = 2,
		LandscapeLeft = 3,
		Landscape = 3,
		LandscapeRight = 4,
		AutoRotation = 5
	}

	public enum FilterMode // TypeDefIndex: 1900
	{
		Point = 0,
		Bilinear = 1,
		Trilinear = 2
	}

	public enum TextureWrapMode // TypeDefIndex: 1901
	{
		Repeat = 0,
		Clamp = 1,
		Mirror = 2,
		MirrorOnce = 3
	}

	public enum TextureFormat // TypeDefIndex: 1902
	{
		Alpha8 = 1,
		ARGB4444 = 2,
		RGB24 = 3,
		RGBA32 = 4,
		ARGB32 = 5,
		RGB565 = 7,
		R16 = 9,
		DXT1 = 10,
		DXT5 = 12,
		RGBA4444 = 13,
		BGRA32 = 14,
		RHalf = 15,
		RGHalf = 16,
		RGBAHalf = 17,
		RFloat = 18,
		RGFloat = 19,
		RGBAFloat = 20,
		YUY2 = 21,
		RGB9e5Float = 22,
		BC6H = 24,
		BC7 = 25,
		BC4 = 26,
		BC5 = 27,
		DXT1Crunched = 28,
		DXT5Crunched = 29,
		PVRTC_RGB2 = 30,
		PVRTC_RGBA2 = 31,
		PVRTC_RGB4 = 32,
		PVRTC_RGBA4 = 33,
		ETC_RGB4 = 34,
		EAC_R = 41,
		EAC_R_SIGNED = 42,
		EAC_RG = 43,
		EAC_RG_SIGNED = 44,
		ETC2_RGB = 45,
		ETC2_RGBA1 = 46,
		ETC2_RGBA8 = 47,
		ASTC_RGB_4x4 = 48,
		ASTC_RGB_5x5 = 49,
		ASTC_RGB_6x6 = 50,
		ASTC_RGB_8x8 = 51,
		ASTC_RGB_10x10 = 52,
		ASTC_RGB_12x12 = 53,
		ASTC_RGBA_4x4 = 54,
		ASTC_RGBA_5x5 = 55,
		ASTC_RGBA_6x6 = 56,
		ASTC_RGBA_8x8 = 57,
		ASTC_RGBA_10x10 = 58,
		ASTC_RGBA_12x12 = 59,
		ETC_RGB4_3DS = 60,
		ETC_RGBA8_3DS = 61,
		RG16 = 62,
		R8 = 63,
		ETC_RGB4Crunched = 64,
		ETC2_RGBA8Crunched = 65
	}

	public enum CubemapFace // TypeDefIndex: 1903
	{
		Unknown = -1,
		PositiveX = 0,
		NegativeX = 1,
		PositiveY = 2,
		NegativeY = 3,
		PositiveZ = 4,
		NegativeZ = 5
	}

	public enum RenderTextureFormat // TypeDefIndex: 1904
	{
		ARGB32 = 0,
		Depth = 1,
		ARGBHalf = 2,
		Shadowmap = 3,
		RGB565 = 4,
		ARGB4444 = 5,
		ARGB1555 = 6,
		Default = 7,
		ARGB2101010 = 8,
		DefaultHDR = 9,
		ARGB64 = 10,
		ARGBFloat = 11,
		RGFloat = 12,
		RGHalf = 13,
		RFloat = 14,
		RHalf = 15,
		R8 = 16,
		ARGBInt = 17,
		RGInt = 18,
		RInt = 19,
		BGRA32 = 20,
		RGB111110Float = 22,
		RG32 = 23,
		RGBAUShort = 24,
		RG16 = 25,
		BGRA10101010_XR = 26,
		BGR101010_XR = 27,
		R16 = 28
	}

	public enum VRTextureUsage // TypeDefIndex: 1905
	{
		None = 0,
		OneEye = 1,
		TwoEyes = 2
	}

	[Flags] // 0x0014CBB4-0x0014CBC4
	public enum RenderTextureCreationFlags // TypeDefIndex: 1906
	{
		MipMap = 1,
		AutoGenerateMips = 2,
		SRGB = 4,
		EyeTexture = 8,
		EnableRandomWrite = 16,
		CreatedFromScript = 32,
		AllowVerticalFlip = 128,
		NoResolvedColorSurface = 256,
		DynamicallyScalable = 1024,
		BindMS = 2048
	}

	public enum RenderTextureReadWrite // TypeDefIndex: 1907
	{
		Default = 0,
		Linear = 1,
		sRGB = 2
	}

	[Flags] // 0x0014CBC4-0x0014CBD4
	public enum RenderTextureMemoryless // TypeDefIndex: 1908
	{
		None = 0,
		Color = 1,
		Depth = 2,
		MSAA = 4
	}
}

namespace UnityEngine.Experimental.Rendering
{
	[Flags] // 0x0014CBD4-0x0014CBE4
	public enum TextureCreationFlags // TypeDefIndex: 1909
	{
		None = 0,
		MipChain = 1,
		Crunch = 64
	}

	public enum FormatUsage // TypeDefIndex: 1910
	{
		Sample = 0,
		Linear = 1,
		Render = 3,
		Blend = 4,
		LoadStore = 8,
		MSAA2x = 9,
		MSAA4x = 10,
		MSAA8x = 11
	}

	public enum GraphicsFormat // TypeDefIndex: 1911
	{
		None = 0,
		R8_SRGB = 1,
		R8G8_SRGB = 2,
		R8G8B8_SRGB = 3,
		R8G8B8A8_SRGB = 4,
		R8_UNorm = 5,
		R8G8_UNorm = 6,
		R8G8B8_UNorm = 7,
		R8G8B8A8_UNorm = 8,
		R8_SNorm = 9,
		R8G8_SNorm = 10,
		R8G8B8_SNorm = 11,
		R8G8B8A8_SNorm = 12,
		R8_UInt = 13,
		R8G8_UInt = 14,
		R8G8B8_UInt = 15,
		R8G8B8A8_UInt = 16,
		R8_SInt = 17,
		R8G8_SInt = 18,
		R8G8B8_SInt = 19,
		R8G8B8A8_SInt = 20,
		R16_UNorm = 21,
		R16G16_UNorm = 22,
		R16G16B16_UNorm = 23,
		R16G16B16A16_UNorm = 24,
		R16_SNorm = 25,
		R16G16_SNorm = 26,
		R16G16B16_SNorm = 27,
		R16G16B16A16_SNorm = 28,
		R16_UInt = 29,
		R16G16_UInt = 30,
		R16G16B16_UInt = 31,
		R16G16B16A16_UInt = 32,
		R16_SInt = 33,
		R16G16_SInt = 34,
		R16G16B16_SInt = 35,
		R16G16B16A16_SInt = 36,
		R32_UInt = 37,
		R32G32_UInt = 38,
		R32G32B32_UInt = 39,
		R32G32B32A32_UInt = 40,
		R32_SInt = 41,
		R32G32_SInt = 42,
		R32G32B32_SInt = 43,
		R32G32B32A32_SInt = 44,
		R16_SFloat = 45,
		R16G16_SFloat = 46,
		R16G16B16_SFloat = 47,
		R16G16B16A16_SFloat = 48,
		R32_SFloat = 49,
		R32G32_SFloat = 50,
		R32G32B32_SFloat = 51,
		R32G32B32A32_SFloat = 52,
		B8G8R8_SRGB = 56,
		B8G8R8A8_SRGB = 57,
		B8G8R8_UNorm = 58,
		B8G8R8A8_UNorm = 59,
		B8G8R8_SNorm = 60,
		B8G8R8A8_SNorm = 61,
		B8G8R8_UInt = 62,
		B8G8R8A8_UInt = 63,
		B8G8R8_SInt = 64,
		B8G8R8A8_SInt = 65,
		R4G4B4A4_UNormPack16 = 66,
		B4G4R4A4_UNormPack16 = 67,
		R5G6B5_UNormPack16 = 68,
		B5G6R5_UNormPack16 = 69,
		R5G5B5A1_UNormPack16 = 70,
		B5G5R5A1_UNormPack16 = 71,
		A1R5G5B5_UNormPack16 = 72,
		E5B9G9R9_UFloatPack32 = 73,
		B10G11R11_UFloatPack32 = 74,
		A2B10G10R10_UNormPack32 = 75,
		A2B10G10R10_UIntPack32 = 76,
		A2B10G10R10_SIntPack32 = 77,
		A2R10G10B10_UNormPack32 = 78,
		A2R10G10B10_UIntPack32 = 79,
		A2R10G10B10_SIntPack32 = 80,
		A2R10G10B10_XRSRGBPack32 = 81,
		A2R10G10B10_XRUNormPack32 = 82,
		R10G10B10_XRSRGBPack32 = 83,
		R10G10B10_XRUNormPack32 = 84,
		A10R10G10B10_XRSRGBPack32 = 85,
		A10R10G10B10_XRUNormPack32 = 86,
		D16_UNorm = 90,
		D24_UNorm = 91,
		D24_UNorm_S8_UInt = 92,
		D32_SFloat = 93,
		D32_SFloat_S8_Uint = 94,
		S8_Uint = 95,
		RGB_DXT1_SRGB = 96,
		RGBA_DXT1_SRGB = 96,
		RGB_DXT1_UNorm = 97,
		RGBA_DXT1_UNorm = 97,
		RGBA_DXT3_SRGB = 98,
		RGBA_DXT3_UNorm = 99,
		RGBA_DXT5_SRGB = 100,
		RGBA_DXT5_UNorm = 101,
		R_BC4_UNorm = 102,
		R_BC4_SNorm = 103,
		RG_BC5_UNorm = 104,
		RG_BC5_SNorm = 105,
		RGB_BC6H_UFloat = 106,
		RGB_BC6H_SFloat = 107,
		RGBA_BC7_SRGB = 108,
		RGBA_BC7_UNorm = 109,
		RGB_PVRTC_2Bpp_SRGB = 110,
		RGB_PVRTC_2Bpp_UNorm = 111,
		RGB_PVRTC_4Bpp_SRGB = 112,
		RGB_PVRTC_4Bpp_UNorm = 113,
		RGBA_PVRTC_2Bpp_SRGB = 114,
		RGBA_PVRTC_2Bpp_UNorm = 115,
		RGBA_PVRTC_4Bpp_SRGB = 116,
		RGBA_PVRTC_4Bpp_UNorm = 117,
		RGB_ETC_UNorm = 118,
		RGB_ETC2_SRGB = 119,
		RGB_ETC2_UNorm = 120,
		RGB_A1_ETC2_SRGB = 121,
		RGB_A1_ETC2_UNorm = 122,
		RGBA_ETC2_SRGB = 123,
		RGBA_ETC2_UNorm = 124,
		R_EAC_UNorm = 125,
		R_EAC_SNorm = 126,
		RG_EAC_UNorm = 127,
		RG_EAC_SNorm = 128,
		RGBA_ASTC4X4_SRGB = 129,
		RGBA_ASTC4X4_UNorm = 130,
		RGBA_ASTC5X5_SRGB = 131,
		RGBA_ASTC5X5_UNorm = 132,
		RGBA_ASTC6X6_SRGB = 133,
		RGBA_ASTC6X6_UNorm = 134,
		RGBA_ASTC8X8_SRGB = 135,
		RGBA_ASTC8X8_UNorm = 136,
		RGBA_ASTC10X10_SRGB = 137,
		RGBA_ASTC10X10_UNorm = 138,
		RGBA_ASTC12X12_SRGB = 139,
		RGBA_ASTC12X12_UNorm = 140
	}
}

namespace UnityEngine
{
	[Flags] // 0x0014CBE4-0x0014CBF4
	public enum LightmapsMode // TypeDefIndex: 1912
	{
		NonDirectional = 0,
		CombinedDirectional = 1
	}
}

namespace UnityEngine.Rendering
{
	[MovedFrom] // 0x0014CBF4-0x0014CC44
	public enum VertexAttribute // TypeDefIndex: 1913
	{
		Position = 0,
		Normal = 1,
		Tangent = 2,
		Color = 3,
		TexCoord0 = 4,
		TexCoord1 = 5,
		TexCoord2 = 6,
		TexCoord3 = 7,
		TexCoord4 = 8,
		TexCoord5 = 9,
		TexCoord6 = 10,
		TexCoord7 = 11,
		BlendWeight = 12,
		BlendIndices = 13
	}

	public enum CompareFunction // TypeDefIndex: 1914
	{
		Disabled = 0,
		Never = 1,
		Less = 2,
		Equal = 3,
		LessEqual = 4,
		Greater = 5,
		NotEqual = 6,
		GreaterEqual = 7,
		Always = 8
	}

	[Flags] // 0x0014CC44-0x0014CC54
	public enum ColorWriteMask // TypeDefIndex: 1915
	{
		Alpha = 1,
		Blue = 2,
		Green = 4,
		Red = 8,
		All = 15
	}

	public enum StencilOp // TypeDefIndex: 1916
	{
		Keep = 0,
		Zero = 1,
		Replace = 2,
		IncrementSaturate = 3,
		DecrementSaturate = 4,
		Invert = 5,
		IncrementWrap = 6,
		DecrementWrap = 7
	}

	[UsedByNativeCode] // 0x0014CC54-0x0014CC64
	public enum GraphicsDeviceType // TypeDefIndex: 1917
	{
		OpenGL2 = 0,
		Direct3D9 = 1,
		Direct3D11 = 2,
		PlayStation3 = 3,
		Null = 4,
		Xbox360 = 6,
		OpenGLES2 = 8,
		OpenGLES3 = 11,
		PlayStationVita = 12,
		PlayStation4 = 13,
		XboxOne = 14,
		PlayStationMobile = 15,
		Metal = 16,
		OpenGLCore = 17,
		Direct3D12 = 18,
		N3DS = 19,
		Vulkan = 21,
		Switch = 22,
		XboxOneD3D12 = 23
	}

	public enum ShadowSamplingMode // TypeDefIndex: 1918
	{
		CompareDepths = 0,
		RawDepth = 1,
		None = 2
	}

	public enum TextureDimension // TypeDefIndex: 1919
	{
		Unknown = -1,
		None = 0,
		Any = 1,
		Tex2D = 2,
		Tex3D = 3,
		Cube = 4,
		Tex2DArray = 5,
		CubeArray = 6
	}
}

namespace UnityEngine.Experimental.Rendering
{
	[NativeHeader] // 0x0014CC64-0x0014CCE0
	[NativeHeader] // 0x0014CC64-0x0014CCE0
	public class GraphicsFormatUtility // TypeDefIndex: 1920
	{
		// Methods
		public static GraphicsFormat GetGraphicsFormat(TextureFormat format, bool isSRGB); // 0x0081AA24-0x0081AA28
		[FreeFunction] // 0x001555E4-0x001555F4
		private static GraphicsFormat GetGraphicsFormat_Native_TextureFormat(TextureFormat format, bool isSRGB); // 0x00820CE8-0x00820D68
		[FreeFunction] // 0x001555F4-0x00155604
		public static bool IsSRGBFormat(GraphicsFormat format); // 0x00820D68-0x00820DE0
		[FreeFunction] // 0x00155604-0x00155614
		public static RenderTextureFormat GetRenderTextureFormat(GraphicsFormat format); // 0x00820DE0-0x00820E58
		[FreeFunction] // 0x00155614-0x00155660
		internal static bool IsCompressedTextureFormat(TextureFormat format); // 0x00820E58-0x00820ED0
		public static bool IsCrunchFormat(TextureFormat format); // 0x0081AA28-0x0081AA4C
	}
}

namespace UnityEngine
{
	[NativeHeader] // 0x0014CCE0-0x0014CD38
	public class SkinnedMeshRenderer : Renderer // TypeDefIndex: 1921
	{
	}

	[NativeHeader] // 0x0014CD38-0x0014CD8C
	public class MeshRenderer : Renderer // TypeDefIndex: 1922
	{
		// Methods
		[RequiredByNativeCode] // 0x00155660-0x00155670
		private void DontStripMeshRenderer(); // 0x007115D4-0x007115D8
	}

	internal struct TouchScreenKeyboard_InternalConstructorHelperArguments // TypeDefIndex: 1923
	{
		// Fields
		public uint keyboardType; // 0x00
		public uint autocorrection; // 0x04
		public uint multiline; // 0x08
		public uint secure; // 0x0C
		public uint alert; // 0x10
		public int characterLimit; // 0x14
	}

	[NativeHeader] // 0x0014CD8C-0x0014CE24
	[NativeHeader] // 0x0014CD8C-0x0014CE24
	public class TouchScreenKeyboard // TypeDefIndex: 1924
	{
		// Fields
		[NonSerialized]
		internal IntPtr m_Ptr; // 0x08
		[CompilerGenerated] // 0x00150EFC-0x00150F30
		[DebuggerBrowsable] // 0x00150EFC-0x00150F30
		private readonly bool <canGetSelection>k__BackingField; // 0x0C
		[CompilerGenerated] // 0x00150F30-0x00150F64
		[DebuggerBrowsable] // 0x00150F30-0x00150F64
		private readonly bool <canSetSelection>k__BackingField; // 0x0D
		[CompilerGenerated] // 0x00150F64-0x00150F98
		[DebuggerBrowsable] // 0x00150F64-0x00150F98
		private readonly TouchScreenKeyboardType <type>k__BackingField; // 0x10
	
		// Properties
		public static bool isSupported { get; } // 0x00ADC4E4-0x00ADC540 
		public string text { [NativeName] /* 0x00155734-0x00155768 */ get; [NativeName] /* 0x00155768-0x0015579C */ set; } // 0x00ADC68C-0x00ADC720 0x00ADC720-0x00ADC7CC
		public static bool hideInput { [NativeName] /* 0x0015579C-0x001557D8 */ set; } // 0x00ADC7CC-0x00ADC874
		public bool active { [NativeName] /* 0x001557D8-0x00155810 */ get; [NativeName] /* 0x00155810-0x00155848 */ set; } // 0x00ADC874-0x00ADC90C 0x00ADC90C-0x00ADC9B8
		public Status status { [NativeName] /* 0x00155848-0x00155888 */ get; } // 0x00ADC9B8-0x00ADCA50 
		public int characterLimit { [NativeName] /* 0x00155888-0x001558C8 */ set; } // 0x00ADCA50-0x00ADCAD0
		public bool canGetSelection { [CompilerGenerated] /* 0x001558C8-0x00155918 */ [NativeName] /* 0x001558C8-0x00155918 */ get; } // 0x00ADCAD0-0x00ADCAD8 
		public bool canSetSelection { [CompilerGenerated] /* 0x00155918-0x00155968 */ [NativeName] /* 0x00155918-0x00155968 */ get; } // 0x00ADCAD8-0x00ADCAE0 
		public RangeInt selection { get; set; } // 0x00ADCAE0-0x00ADCB18 0x00ADCB98-0x00ADCCA0
	
		// Nested types
		public enum Status // TypeDefIndex: 1925
		{
			Visible = 0,
			Done = 1,
			Canceled = 2,
			LostFocus = 3
		}
	
		// Constructors
		public TouchScreenKeyboard(string text, TouchScreenKeyboardType keyboardType, bool autocorrection, bool multiline, bool secure, bool alert, string textPlaceholder, int characterLimit); // 0x00ADC190-0x00ADC2D4
	
		// Methods
		[FreeFunction] // 0x00155670-0x001556C8
		private static void Internal_Destroy(IntPtr ptr); // 0x00ADC35C-0x00ADC3D4
		private void Destroy(); // 0x00ADC3D4-0x00ADC480
		~TouchScreenKeyboard(); // 0x00ADC480-0x00ADC4E4
		[FreeFunction] // 0x001556C8-0x00155724
		private static IntPtr TouchScreenKeyboard_InternalConstructorHelper(ref TouchScreenKeyboard_InternalConstructorHelperArguments arguments, string text, string textPlaceholder); // 0x00ADC2D4-0x00ADC35C
		public static TouchScreenKeyboard Open(string text, [UnityEngine.Internal.DefaultValue] /* 0x00159070-0x001590BC */ TouchScreenKeyboardType keyboardType, [UnityEngine.Internal.DefaultValue] /* 0x001590BC-0x001590F0 */ bool autocorrection, [UnityEngine.Internal.DefaultValue] /* 0x001590F0-0x00159124 */ bool multiline, [UnityEngine.Internal.DefaultValue] /* 0x00159124-0x00159158 */ bool secure, [UnityEngine.Internal.DefaultValue] /* 0x00159158-0x0015918C */ bool alert, [UnityEngine.Internal.DefaultValue] /* 0x0015918C-0x001591BC */ string textPlaceholder, [UnityEngine.Internal.DefaultValue] /* 0x001591BC-0x001591EC */ int characterLimit); // 0x00ADC540-0x00ADC5F0
		[ExcludeFromDocs] // 0x00155724-0x00155734
		public static TouchScreenKeyboard Open(string text, TouchScreenKeyboardType keyboardType, bool autocorrection, bool multiline, bool secure); // 0x00ADC5F0-0x00ADC68C
		private static void GetSelection(out int start, out int length); // 0x00ADCB18-0x00ADCB98
		private static void SetSelection(int start, int length); // 0x00ADCCA0-0x00ADCD3C
	}

	public enum TouchPhase // TypeDefIndex: 1926
	{
		Began = 0,
		Moved = 1,
		Stationary = 2,
		Ended = 3,
		Canceled = 4
	}

	public enum IMECompositionMode // TypeDefIndex: 1927
	{
		Auto = 0,
		On = 1,
		Off = 2
	}

	public enum TouchType // TypeDefIndex: 1928
	{
		Direct = 0,
		Indirect = 1,
		Stylus = 2
	}

	[NativeHeader] // 0x0014CE24-0x0014CE58
	public struct Touch // TypeDefIndex: 1929
	{
		// Fields
		private int m_FingerId; // 0x00
		private Vector2 m_Position; // 0x04
		private Vector2 m_RawPosition; // 0x0C
		private Vector2 m_PositionDelta; // 0x14
		private float m_TimeDelta; // 0x1C
		private int m_TapCount; // 0x20
		private TouchPhase m_Phase; // 0x24
		private TouchType m_Type; // 0x28
		private float m_Pressure; // 0x2C
		private float m_maximumPossiblePressure; // 0x30
		private float m_Radius; // 0x34
		private float m_RadiusVariance; // 0x38
		private float m_AltitudeAngle; // 0x3C
		private float m_AzimuthAngle; // 0x40
	
		// Properties
		public int fingerId { get; } // 0x00ADC118-0x00ADC134 
		public Vector2 position { get; } // 0x00ADC134-0x00ADC15C 
		public Vector2 deltaPosition { get; } // 0x00ADC15C-0x00ADC178 
		public TouchPhase phase { get; } // 0x00ADC178-0x00ADC188 
		public TouchType type { get; } // 0x00ADC188-0x00ADC190 
	}

	[NativeHeader] // 0x0014CE58-0x0014CE8C
	public class Input // TypeDefIndex: 1930
	{
		// Properties
		public static Vector3 mousePosition { get; } // 0x0070910C-0x0070914C 
		public static Vector2 mouseScrollDelta { get; } // 0x007091C4-0x007091F8 
		public static IMECompositionMode imeCompositionMode { get; set; } // 0x00709270-0x00709300 0x00709300-0x00709378
		public static string compositionString { get; } // 0x00709378-0x00709408 
		public static Vector2 compositionCursorPos { get; set; } // 0x00709408-0x0070943C 0x007094B4-0x007094D0
		public static bool mousePresent { [FreeFunction] /* 0x00155A18-0x00155A54 */ get; } // 0x00709548-0x007095D4 
		public static int touchCount { [FreeFunction] /* 0x00155A54-0x00155A90 */ get; } // 0x007095D4-0x0070965C 
		public static bool touchSupported { [FreeFunction] /* 0x00155A90-0x00155AD0 */ get; } // 0x0070965C-0x007096E8 
		public static Touch[] touches { get; } // 0x007096E8-0x007097EC 
	
		// Methods
		[NativeThrows] // 0x00155968-0x00155978
		private static bool GetKeyInt(KeyCode key); // 0x00708A38-0x00708AD4
		[NativeThrows] // 0x00155978-0x00155988
		private static bool GetKeyUpInt(KeyCode key); // 0x00708AD4-0x00708B70
		[NativeThrows] // 0x00155988-0x00155998
		private static bool GetKeyDownInt(KeyCode key); // 0x00708B70-0x00708C10
		[NativeThrows] // 0x00155998-0x001559A8
		public static float GetAxis(string axisName); // 0x00708C10-0x00708CA4
		[NativeThrows] // 0x001559A8-0x001559B8
		public static float GetAxisRaw(string axisName); // 0x00708CA4-0x00708D3C
		[NativeThrows] // 0x001559B8-0x001559C8
		public static bool GetButton(string buttonName); // 0x00708D3C-0x00708DD0
		[NativeThrows] // 0x001559C8-0x001559D8
		public static bool GetButtonDown(string buttonName); // 0x00708DD0-0x00708E68
		[NativeThrows] // 0x001559D8-0x001559E8
		public static bool GetMouseButton(int button); // 0x00708E68-0x00708F00
		[NativeThrows] // 0x001559E8-0x001559F8
		public static bool GetMouseButtonDown(int button); // 0x00708F00-0x00708F9C
		[NativeThrows] // 0x001559F8-0x00155A08
		public static bool GetMouseButtonUp(int button); // 0x00708F9C-0x00709038
		[NativeThrows] // 0x00155A08-0x00155A18
		public static Touch GetTouch(int index); // 0x00709038-0x00709080
		public static bool GetKey(KeyCode key); // 0x00709100-0x00709104
		public static bool GetKeyUp(KeyCode key); // 0x00709104-0x00709108
		public static bool GetKeyDown(KeyCode key); // 0x00709108-0x0070910C
		private static void GetTouch_Injected(int index, out Touch ret); // 0x00709080-0x00709100
		private static void get_mousePosition_Injected(out Vector3 ret); // 0x0070914C-0x007091C4
		private static void get_mouseScrollDelta_Injected(out Vector2 ret); // 0x007091F8-0x00709270
		private static void get_compositionCursorPos_Injected(out Vector2 ret); // 0x0070943C-0x007094B4
		private static void set_compositionCursorPos_Injected(ref Vector2 value); // 0x007094D0-0x00709548
	}

	public enum KeyCode // TypeDefIndex: 1931
	{
		None = 0,
		Backspace = 8,
		Tab = 9,
		Clear = 12,
		Return = 13,
		Pause = 19,
		Escape = 27,
		Space = 32,
		Exclaim = 33,
		DoubleQuote = 34,
		Hash = 35,
		Dollar = 36,
		Percent = 37,
		Ampersand = 38,
		Quote = 39,
		LeftParen = 40,
		RightParen = 41,
		Asterisk = 42,
		Plus = 43,
		Comma = 44,
		Minus = 45,
		Period = 46,
		Slash = 47,
		Alpha0 = 48,
		Alpha1 = 49,
		Alpha2 = 50,
		Alpha3 = 51,
		Alpha4 = 52,
		Alpha5 = 53,
		Alpha6 = 54,
		Alpha7 = 55,
		Alpha8 = 56,
		Alpha9 = 57,
		Colon = 58,
		Semicolon = 59,
		Less = 60,
		Equals = 61,
		Greater = 62,
		Question = 63,
		At = 64,
		LeftBracket = 91,
		Backslash = 92,
		RightBracket = 93,
		Caret = 94,
		Underscore = 95,
		BackQuote = 96,
		A = 97,
		B = 98,
		C = 99,
		D = 100,
		E = 101,
		F = 102,
		G = 103,
		H = 104,
		I = 105,
		J = 106,
		K = 107,
		L = 108,
		M = 109,
		N = 110,
		O = 111,
		P = 112,
		Q = 113,
		R = 114,
		S = 115,
		T = 116,
		U = 117,
		V = 118,
		W = 119,
		X = 120,
		Y = 121,
		Z = 122,
		LeftCurlyBracket = 123,
		Pipe = 124,
		RightCurlyBracket = 125,
		Tilde = 126,
		Delete = 127,
		Keypad0 = 256,
		Keypad1 = 257,
		Keypad2 = 258,
		Keypad3 = 259,
		Keypad4 = 260,
		Keypad5 = 261,
		Keypad6 = 262,
		Keypad7 = 263,
		Keypad8 = 264,
		Keypad9 = 265,
		KeypadPeriod = 266,
		KeypadDivide = 267,
		KeypadMultiply = 268,
		KeypadMinus = 269,
		KeypadPlus = 270,
		KeypadEnter = 271,
		KeypadEquals = 272,
		UpArrow = 273,
		DownArrow = 274,
		RightArrow = 275,
		LeftArrow = 276,
		Insert = 277,
		Home = 278,
		End = 279,
		PageUp = 280,
		PageDown = 281,
		F1 = 282,
		F2 = 283,
		F3 = 284,
		F4 = 285,
		F5 = 286,
		F6 = 287,
		F7 = 288,
		F8 = 289,
		F9 = 290,
		F10 = 291,
		F11 = 292,
		F12 = 293,
		F13 = 294,
		F14 = 295,
		F15 = 296,
		Numlock = 300,
		CapsLock = 301,
		ScrollLock = 302,
		RightShift = 303,
		LeftShift = 304,
		RightControl = 305,
		LeftControl = 306,
		RightAlt = 307,
		LeftAlt = 308,
		RightCommand = 309,
		RightApple = 309,
		LeftCommand = 310,
		LeftApple = 310,
		LeftWindows = 311,
		RightWindows = 312,
		AltGr = 313,
		Help = 315,
		Print = 316,
		SysReq = 317,
		Break = 318,
		Menu = 319,
		Mouse0 = 323,
		Mouse1 = 324,
		Mouse2 = 325,
		Mouse3 = 326,
		Mouse4 = 327,
		Mouse5 = 328,
		Mouse6 = 329,
		JoystickButton0 = 330,
		JoystickButton1 = 331,
		JoystickButton2 = 332,
		JoystickButton3 = 333,
		JoystickButton4 = 334,
		JoystickButton5 = 335,
		JoystickButton6 = 336,
		JoystickButton7 = 337,
		JoystickButton8 = 338,
		JoystickButton9 = 339,
		JoystickButton10 = 340,
		JoystickButton11 = 341,
		JoystickButton12 = 342,
		JoystickButton13 = 343,
		JoystickButton14 = 344,
		JoystickButton15 = 345,
		JoystickButton16 = 346,
		JoystickButton17 = 347,
		JoystickButton18 = 348,
		JoystickButton19 = 349,
		Joystick1Button0 = 350,
		Joystick1Button1 = 351,
		Joystick1Button2 = 352,
		Joystick1Button3 = 353,
		Joystick1Button4 = 354,
		Joystick1Button5 = 355,
		Joystick1Button6 = 356,
		Joystick1Button7 = 357,
		Joystick1Button8 = 358,
		Joystick1Button9 = 359,
		Joystick1Button10 = 360,
		Joystick1Button11 = 361,
		Joystick1Button12 = 362,
		Joystick1Button13 = 363,
		Joystick1Button14 = 364,
		Joystick1Button15 = 365,
		Joystick1Button16 = 366,
		Joystick1Button17 = 367,
		Joystick1Button18 = 368,
		Joystick1Button19 = 369,
		Joystick2Button0 = 370,
		Joystick2Button1 = 371,
		Joystick2Button2 = 372,
		Joystick2Button3 = 373,
		Joystick2Button4 = 374,
		Joystick2Button5 = 375,
		Joystick2Button6 = 376,
		Joystick2Button7 = 377,
		Joystick2Button8 = 378,
		Joystick2Button9 = 379,
		Joystick2Button10 = 380,
		Joystick2Button11 = 381,
		Joystick2Button12 = 382,
		Joystick2Button13 = 383,
		Joystick2Button14 = 384,
		Joystick2Button15 = 385,
		Joystick2Button16 = 386,
		Joystick2Button17 = 387,
		Joystick2Button18 = 388,
		Joystick2Button19 = 389,
		Joystick3Button0 = 390,
		Joystick3Button1 = 391,
		Joystick3Button2 = 392,
		Joystick3Button3 = 393,
		Joystick3Button4 = 394,
		Joystick3Button5 = 395,
		Joystick3Button6 = 396,
		Joystick3Button7 = 397,
		Joystick3Button8 = 398,
		Joystick3Button9 = 399,
		Joystick3Button10 = 400,
		Joystick3Button11 = 401,
		Joystick3Button12 = 402,
		Joystick3Button13 = 403,
		Joystick3Button14 = 404,
		Joystick3Button15 = 405,
		Joystick3Button16 = 406,
		Joystick3Button17 = 407,
		Joystick3Button18 = 408,
		Joystick3Button19 = 409,
		Joystick4Button0 = 410,
		Joystick4Button1 = 411,
		Joystick4Button2 = 412,
		Joystick4Button3 = 413,
		Joystick4Button4 = 414,
		Joystick4Button5 = 415,
		Joystick4Button6 = 416,
		Joystick4Button7 = 417,
		Joystick4Button8 = 418,
		Joystick4Button9 = 419,
		Joystick4Button10 = 420,
		Joystick4Button11 = 421,
		Joystick4Button12 = 422,
		Joystick4Button13 = 423,
		Joystick4Button14 = 424,
		Joystick4Button15 = 425,
		Joystick4Button16 = 426,
		Joystick4Button17 = 427,
		Joystick4Button18 = 428,
		Joystick4Button19 = 429,
		Joystick5Button0 = 430,
		Joystick5Button1 = 431,
		Joystick5Button2 = 432,
		Joystick5Button3 = 433,
		Joystick5Button4 = 434,
		Joystick5Button5 = 435,
		Joystick5Button6 = 436,
		Joystick5Button7 = 437,
		Joystick5Button8 = 438,
		Joystick5Button9 = 439,
		Joystick5Button10 = 440,
		Joystick5Button11 = 441,
		Joystick5Button12 = 442,
		Joystick5Button13 = 443,
		Joystick5Button14 = 444,
		Joystick5Button15 = 445,
		Joystick5Button16 = 446,
		Joystick5Button17 = 447,
		Joystick5Button18 = 448,
		Joystick5Button19 = 449,
		Joystick6Button0 = 450,
		Joystick6Button1 = 451,
		Joystick6Button2 = 452,
		Joystick6Button3 = 453,
		Joystick6Button4 = 454,
		Joystick6Button5 = 455,
		Joystick6Button6 = 456,
		Joystick6Button7 = 457,
		Joystick6Button8 = 458,
		Joystick6Button9 = 459,
		Joystick6Button10 = 460,
		Joystick6Button11 = 461,
		Joystick6Button12 = 462,
		Joystick6Button13 = 463,
		Joystick6Button14 = 464,
		Joystick6Button15 = 465,
		Joystick6Button16 = 466,
		Joystick6Button17 = 467,
		Joystick6Button18 = 468,
		Joystick6Button19 = 469,
		Joystick7Button0 = 470,
		Joystick7Button1 = 471,
		Joystick7Button2 = 472,
		Joystick7Button3 = 473,
		Joystick7Button4 = 474,
		Joystick7Button5 = 475,
		Joystick7Button6 = 476,
		Joystick7Button7 = 477,
		Joystick7Button8 = 478,
		Joystick7Button9 = 479,
		Joystick7Button10 = 480,
		Joystick7Button11 = 481,
		Joystick7Button12 = 482,
		Joystick7Button13 = 483,
		Joystick7Button14 = 484,
		Joystick7Button15 = 485,
		Joystick7Button16 = 486,
		Joystick7Button17 = 487,
		Joystick7Button18 = 488,
		Joystick7Button19 = 489,
		Joystick8Button0 = 490,
		Joystick8Button1 = 491,
		Joystick8Button2 = 492,
		Joystick8Button3 = 493,
		Joystick8Button4 = 494,
		Joystick8Button5 = 495,
		Joystick8Button6 = 496,
		Joystick8Button7 = 497,
		Joystick8Button8 = 498,
		Joystick8Button9 = 499,
		Joystick8Button10 = 500,
		Joystick8Button11 = 501,
		Joystick8Button12 = 502,
		Joystick8Button13 = 503,
		Joystick8Button14 = 504,
		Joystick8Button15 = 505,
		Joystick8Button16 = 506,
		Joystick8Button17 = 507,
		Joystick8Button18 = 508,
		Joystick8Button19 = 509
	}

	[NativeClass] // 0x0014CE8C-0x0014CF88
	[NativeHeader] // 0x0014CE8C-0x0014CF88
	[NativeHeader] // 0x0014CE8C-0x0014CF88
	[RequiredByNativeCode] // 0x0014CE8C-0x0014CF88
	public struct LayerMask // TypeDefIndex: 1932
	{
		// Fields
		[NativeName] // 0x00150F98-0x00150FCC
		private int m_Mask; // 0x00
	
		// Methods
		public static implicit operator int(LayerMask mask); // 0x0070994C-0x00709950
		public static implicit operator LayerMask(int intVal); // 0x00709950-0x00709954
	}

	internal static class ManagedStreamHelpers // TypeDefIndex: 1933
	{
		// Methods
		internal static void ValidateLoadFromStream(Stream stream); // 0x0070A708-0x0070A8A0
		[RequiredByNativeCode] // 0x00155AD0-0x00155AE0
		internal static void ManagedStreamRead(byte[] buffer, int offset, int count, Stream stream, IntPtr returnValueAddress); // 0x0070A8A0-0x0070A9D4
		[RequiredByNativeCode] // 0x00155AE0-0x00155AF0
		internal static void ManagedStreamSeek(long offset, uint origin, Stream stream, IntPtr returnValueAddress); // 0x0070A9D4-0x0070AB08
		[RequiredByNativeCode] // 0x00155AF0-0x00155B00
		internal static void ManagedStreamLength(Stream stream, IntPtr returnValueAddress); // 0x0070AB08-0x0070AC18
	}

	[NativeClass] // 0x0014CF88-0x0014D0A0
	[NativeHeader] // 0x0014CF88-0x0014D0A0
	[NativeType] // 0x0014CF88-0x0014D0A0
	[RequiredByNativeCode] // 0x0014CF88-0x0014D0A0
	[ThreadAndSerializationSafe] // 0x0014CF88-0x0014D0A0
	public struct Matrix4x4 : IEquatable<Matrix4x4> // TypeDefIndex: 1934
	{
		// Fields
		[NativeName] // 0x00150FCC-0x00151004
		public float m00; // 0x00
		[NativeName] // 0x00151004-0x0015103C
		public float m10; // 0x04
		[NativeName] // 0x0015103C-0x00151074
		public float m20; // 0x08
		[NativeName] // 0x00151074-0x001510AC
		public float m30; // 0x0C
		[NativeName] // 0x001510AC-0x001510E4
		public float m01; // 0x10
		[NativeName] // 0x001510E4-0x0015111C
		public float m11; // 0x14
		[NativeName] // 0x0015111C-0x00151154
		public float m21; // 0x18
		[NativeName] // 0x00151154-0x0015118C
		public float m31; // 0x1C
		[NativeName] // 0x0015118C-0x001511C4
		public float m02; // 0x20
		[NativeName] // 0x001511C4-0x001511FC
		public float m12; // 0x24
		[NativeName] // 0x001511FC-0x00151234
		public float m22; // 0x28
		[NativeName] // 0x00151234-0x0015126C
		public float m32; // 0x2C
		[NativeName] // 0x0015126C-0x001512A4
		public float m03; // 0x30
		[NativeName] // 0x001512A4-0x001512DC
		public float m13; // 0x34
		[NativeName] // 0x001512DC-0x00151314
		public float m23; // 0x38
		[NativeName] // 0x00151314-0x0015134C
		public float m33; // 0x3C
		private static readonly Matrix4x4 zeroMatrix; // 0x00
		private static readonly Matrix4x4 identityMatrix; // 0x40
	
		// Properties
		public Quaternion rotation { get; } // 0x0070D9A8-0x0070D9E4 
		public bool isIdentity { get; } // 0x0070D9E4-0x0070D9EC 
		public Matrix4x4 inverse { get; } // 0x0070DFD4-0x0070E168 
		public float this[int row, int column] { get => default; set {} } // 0x0070E168-0x0070E300 0x0070E300-0x0070E310
		public float this[int index] { get => default; set {} } // 0x0070E310-0x0070E318 0x0070E318-0x0070E540
		public static Matrix4x4 zero { get; } // 0x0070F040-0x0070F0E4 
		public static Matrix4x4 identity { get; } // 0x0070F0E4-0x0070F968 
	
		// Constructors
		public Matrix4x4(Vector4 column0, Vector4 column1, Vector4 column2, Vector4 column3); // 0x0070D6C8-0x0070D7E0
		static Matrix4x4(); // 0x0070F970-0x0070FB78
	
		// Methods
		[ThreadSafe] // 0x00155B00-0x00155B10
		private Quaternion GetRotation(); // 0x0070D860-0x0070D8F4
		[ThreadSafe] // 0x00155B10-0x00155B20
		private bool IsIdentity(); // 0x0070D96C-0x0070D9A8
		[FreeFunction] // 0x00155B20-0x00155B74
		public static Matrix4x4 TRS(Vector3 pos, Quaternion q, Vector3 s); // 0x0070D9EC-0x0070DAF8
		public void SetTRS(Vector3 pos, Quaternion q, Vector3 s); // 0x0070DC90-0x0070DCE4
		[FreeFunction] // 0x00155B74-0x00155BCC
		public static Matrix4x4 Inverse(Matrix4x4 m); // 0x0070DCE4-0x0070DE14
		public override int GetHashCode(); // 0x0070E540-0x0070E810
		public override bool Equals(object other); // 0x0070E810-0x0070E818
		public bool Equals(Matrix4x4 other); // 0x0070E818-0x0070E88C
		public static Matrix4x4 operator *(Matrix4x4 lhs, Matrix4x4 rhs); // 0x007073D4-0x007076B8
		public static Vector4 operator *(Matrix4x4 lhs, Vector4 vector); // 0x0070E88C-0x0070E960
		public static bool operator ==(Matrix4x4 lhs, Matrix4x4 rhs); // 0x0070E960-0x0070ECC4
		public static bool operator !=(Matrix4x4 lhs, Matrix4x4 rhs); // 0x0070ECC4-0x0070EE80
		public Vector4 GetColumn(int index); // 0x0070EE80-0x0070EF64
		public Vector3 MultiplyPoint(Vector3 point); // 0x0070EF64-0x0070F01C
		public Vector3 MultiplyPoint3x4(Vector3 point); // 0x0070F01C-0x0070F040
		public override string ToString(); // 0x0070F968-0x0070F970
		private static void GetRotation_Injected(ref Matrix4x4 _unity_self, out Quaternion ret); // 0x0070D7E0-0x0070D860
		private static bool IsIdentity_Injected(ref Matrix4x4 _unity_self); // 0x0070D8F4-0x0070D96C
		private static void TRS_Injected(ref Vector3 pos, ref Quaternion q, ref Vector3 s, out Matrix4x4 ret); // 0x0070DAF8-0x0070DC90
		private static void Inverse_Injected(ref Matrix4x4 m, out Matrix4x4 ret); // 0x0070DE14-0x0070DFD4
	}

	[NativeClass] // 0x0014D0A0-0x0014D1D8
	[NativeHeader] // 0x0014D0A0-0x0014D1D8
	[NativeHeader] // 0x0014D0A0-0x0014D1D8
	[NativeType] // 0x0014D0A0-0x0014D1D8
	[RequiredByNativeCode] // 0x0014D0A0-0x0014D1D8
	[ThreadAndSerializationSafe] // 0x0014D0A0-0x0014D1D8
	public struct Vector3 : IEquatable<Vector3> // TypeDefIndex: 1935
	{
		// Fields
		public const float kEpsilon = 1E-05f; // Metadata: 0x0021A93E
		public const float kEpsilonNormalSqrt = 1E-15f; // Metadata: 0x0021A942
		public float x; // 0x00
		public float y; // 0x04
		public float z; // 0x08
		private static readonly Vector3 zeroVector; // 0x00
		private static readonly Vector3 oneVector; // 0x0C
		private static readonly Vector3 upVector; // 0x18
		private static readonly Vector3 downVector; // 0x24
		private static readonly Vector3 leftVector; // 0x30
		private static readonly Vector3 rightVector; // 0x3C
		private static readonly Vector3 forwardVector; // 0x48
		private static readonly Vector3 backVector; // 0x54
		private static readonly Vector3 positiveInfinityVector; // 0x60
		private static readonly Vector3 negativeInfinityVector; // 0x6C
	
		// Properties
		public float this[int index] { get => default; set {} } // 0x00AE1EA8-0x00AE1F88 0x00AE1F88-0x00AE1F98
		public Vector3 normalized { get; } // 0x00AE2678-0x00AE268C 
		public float magnitude { get; } // 0x00AE2B70-0x00AE2B78 
		public float sqrMagnitude { get; } // 0x00AE2BA0-0x00AE2BC8 
		public static Vector3 zero { get; } // 0x00AE23F0-0x00AE25C0 
		public static Vector3 one { get; } // 0x00AE2D80-0x00AE2E1C 
		public static Vector3 forward { get; } // 0x00ADDD04-0x00ADDDA0 
		public static Vector3 back { get; } // 0x00AE2E1C-0x00AE2EB8 
		public static Vector3 up { get; } // 0x00ADDB38-0x00ADDBD4 
		public static Vector3 down { get; } // 0x00AE2EB8-0x00AE2F54 
		public static Vector3 left { get; } // 0x00AE2F54-0x00AE2FF0 
		public static Vector3 right { get; } // 0x00ADD96C-0x00ADDA08 
	
		// Constructors
		public Vector3(float x, float y, float z); // 0x00AE1BAC-0x00AE1BC4
		public Vector3(float x, float y); // 0x00AE1BC4-0x00AE1BD4
		static Vector3(); // 0x00AE33C0-0x00AE34E4
	
		// Methods
		[FreeFunction] // 0x00155BCC-0x00155C28
		private static void OrthoNormalize2(ref Vector3 a, ref Vector3 b); // 0x00AE1BD4-0x00AE1C54
		public static void OrthoNormalize(ref Vector3 normal, ref Vector3 tangent); // 0x00AE1C54-0x00AE1CDC
		public static Vector3 Lerp(Vector3 a, Vector3 b, float t); // 0x00AE1CDC-0x00AE1EA8
		public void Set(float newX, float newY, float newZ); // 0x00AE1F98-0x00AE1FD8
		public void Scale(Vector3 scale); // 0x00AE1FD8-0x00AE200C
		public static Vector3 Cross(Vector3 lhs, Vector3 rhs); // 0x00AE200C-0x00AE2094
		public override int GetHashCode(); // 0x00AE2094-0x00AE2190
		public override bool Equals(object other); // 0x00AE2190-0x00AE2198
		public bool Equals(Vector3 other); // 0x00AE2198-0x00AE21B4
		public static Vector3 Normalize(Vector3 value); // 0x00AE21B4-0x00AE22F8
		public void Normalize(); // 0x00AE25C0-0x00AE2678
		public static float Dot(Vector3 lhs, Vector3 rhs); // 0x00AE268C-0x00AE26C0
		public static float Angle(Vector3 from, Vector3 to); // 0x00AE26C0-0x00AE289C
		public static float Distance(Vector3 a, Vector3 b); // 0x00AE289C-0x00AE298C
		public static Vector3 ClampMagnitude(Vector3 vector, float maxLength); // 0x00AE298C-0x00AE2A84
		public static float Magnitude(Vector3 vector); // 0x00AE22F8-0x00AE23C4
		public static float SqrMagnitude(Vector3 vector); // 0x00AE2B78-0x00AE2BA0
		public static Vector3 Min(Vector3 lhs, Vector3 rhs); // 0x00AE2BC8-0x00AE2CA4
		public static Vector3 Max(Vector3 lhs, Vector3 rhs); // 0x00AE2CA4-0x00AE2D80
		public static Vector3 operator +(Vector3 a, Vector3 b); // 0x00ADE71C-0x00ADE750
		public static Vector3 operator -(Vector3 a, Vector3 b); // 0x00ADED88-0x00ADEDBC
		public static Vector3 operator -(Vector3 a); // 0x00AE2FF0-0x00AE3004
		public static Vector3 operator *(Vector3 a, float d); // 0x00AE2A84-0x00AE2B70
		public static Vector3 operator *(float d, Vector3 a); // 0x00AE3004-0x00AE3030
		public static Vector3 operator /(Vector3 a, float d); // 0x00AE23C4-0x00AE23F0
		public static bool operator ==(Vector3 lhs, Vector3 rhs); // 0x00AE3030-0x00AE310C
		public static bool operator !=(Vector3 lhs, Vector3 rhs); // 0x00AE310C-0x00AE33B8
		public override string ToString(); // 0x00AE33B8-0x00AE33C0
	}

	[DefaultMember] // 0x0014D1D8-0x0014D2A0
	[NativeHeader] // 0x0014D1D8-0x0014D2A0
	[NativeType] // 0x0014D1D8-0x0014D2A0
	[ThreadAndSerializationSafe] // 0x0014D1D8-0x0014D2A0
	[UsedByNativeCode] // 0x0014D1D8-0x0014D2A0
	public struct Quaternion : IEquatable<Quaternion> // TypeDefIndex: 1936
	{
		// Fields
		public float x; // 0x00
		public float y; // 0x04
		public float z; // 0x08
		public float w; // 0x0C
		private static readonly Quaternion identityQuaternion; // 0x00
		public const float kEpsilon = 1E-06f; // Metadata: 0x0021A946
	
		// Properties
		public static Quaternion identity { get; } // 0x00719584-0x00719618 
		public Vector3 eulerAngles { get; set; } // 0x0071AED8-0x0071AFE8 0x0071AFE8-0x0071B004
	
		// Constructors
		public Quaternion(float x, float y, float z, float w); // 0x0071A05C-0x0071A070
		static Quaternion(); // 0x0071B380-0x0071B400
	
		// Methods
		[FreeFunction] // 0x00155C28-0x00155C58
		public static Quaternion Inverse(Quaternion rotation); // 0x0071A070-0x0071A124
		[FreeFunction] // 0x00155C58-0x00155CB0
		public static Quaternion Slerp(Quaternion a, Quaternion b, float t); // 0x0071A1A4-0x0071A288
		[FreeFunction] // 0x00155CB0-0x00155D00
		private static Quaternion Internal_FromEulerRad(Vector3 euler); // 0x0071A318-0x0071A3C4
		[FreeFunction] // 0x00155D00-0x00155D5C
		private static Vector3 Internal_ToEulerRad(Quaternion rotation); // 0x0071A444-0x0071A504
		[FreeFunction] // 0x00155D5C-0x00155DB8
		public static Quaternion AngleAxis(float angle, Vector3 axis); // 0x0071A584-0x0071A63C
		[FreeFunction] // 0x00155DB8-0x00155E18
		public static Quaternion LookRotation(Vector3 forward, [UnityEngine.Internal.DefaultValue] /* 0x001591EC-0x00159220 */ Vector3 upwards); // 0x0071A6C4-0x0071A78C
		[ExcludeFromDocs] // 0x00155E18-0x00155E28
		public static Quaternion LookRotation(Vector3 forward); // 0x0071A814-0x0071A90C
		public static Quaternion operator *(Quaternion lhs, Quaternion rhs); // 0x0071A90C-0x0071A9B0
		public static Vector3 operator *(Quaternion rotation, Vector3 point); // 0x0071A9B0-0x0071AA7C
		private static bool IsEqualUsingDot(float dot); // 0x0071AA7C-0x0071AA9C
		public static bool operator ==(Quaternion lhs, Quaternion rhs); // 0x007192F0-0x007193E4
		public static bool operator !=(Quaternion lhs, Quaternion rhs); // 0x0071AAE0-0x0071ABA4
		public static float Dot(Quaternion a, Quaternion b); // 0x0071AA9C-0x0071AAE0
		public static float Angle(Quaternion a, Quaternion b); // 0x0071ABA4-0x0071AD08
		private static Vector3 Internal_MakePositive(Vector3 euler); // 0x0071AD08-0x0071AED8
		public static Quaternion Euler(float x, float y, float z); // 0x0071B004-0x0071B124
		public static Quaternion Euler(Vector3 euler); // 0x0071B124-0x0071B228
		public override int GetHashCode(); // 0x0071B228-0x0071B348
		public override bool Equals(object other); // 0x0071B348-0x0071B350
		public bool Equals(Quaternion other); // 0x0071B350-0x0071B374
		public override string ToString(); // 0x0071B374-0x0071B380
		private static void Inverse_Injected(ref Quaternion rotation, out Quaternion ret); // 0x0071A124-0x0071A1A4
		private static void Slerp_Injected(ref Quaternion a, ref Quaternion b, float t, out Quaternion ret); // 0x0071A288-0x0071A318
		private static void Internal_FromEulerRad_Injected(ref Vector3 euler, out Quaternion ret); // 0x0071A3C4-0x0071A444
		private static void Internal_ToEulerRad_Injected(ref Quaternion rotation, out Vector3 ret); // 0x0071A504-0x0071A584
		private static void AngleAxis_Injected(float angle, ref Vector3 axis, out Quaternion ret); // 0x0071A63C-0x0071A6C4
		private static void LookRotation_Injected(ref Vector3 forward, [UnityEngine.Internal.DefaultValue] /* 0x00159220-0x00159254 */ ref Vector3 upwards, out Quaternion ret); // 0x0071A78C-0x0071A814
	}

	[NativeHeader] // 0x0014D2A0-0x0014D3C0
	[NativeHeader] // 0x0014D2A0-0x0014D3C0
	[NativeHeader] // 0x0014D2A0-0x0014D3C0
	[NativeHeader] // 0x0014D2A0-0x0014D3C0
	[ThreadAndSerializationSafe] // 0x0014D2A0-0x0014D3C0
	public struct Mathf // TypeDefIndex: 1937
	{
		// Fields
		public static readonly float Epsilon; // 0x00
	
		// Constructors
		static Mathf(); // 0x0070D524-0x0070D6C8
	
		// Methods
		[FreeFunction] // 0x00155E28-0x00155E58
		public static float GammaToLinearSpace(float value); // 0x0070C108-0x0070C1A8
		[FreeFunction] // 0x00155E58-0x00155E88
		public static float LinearToGammaSpace(float value); // 0x0070C1A8-0x0070C248
		public static float Sin(float f); // 0x0070C248-0x0070C2E4
		public static float Cos(float f); // 0x0070C2E4-0x0070C380
		public static float Tan(float f); // 0x0070C380-0x0070C41C
		public static float Acos(float f); // 0x0070C41C-0x0070C4B8
		public static float Atan(float f); // 0x0070C4B8-0x0070C554
		public static float Atan2(float y, float x); // 0x0070C554-0x0070C600
		public static float Sqrt(float f); // 0x0070C600-0x0070C6A4
		public static float Abs(float f); // 0x0070C6A4-0x0070C720
		public static float Min(float a, float b); // 0x0070C720-0x0070C73C
		public static float Min(params /* 0x00159254-0x00159264 */ float[] values); // 0x0070C73C-0x0070C800
		public static int Min(int a, int b); // 0x0070C800-0x0070C80C
		public static float Max(float a, float b); // 0x0070C80C-0x0070C828
		public static float Max(params /* 0x00159264-0x00159274 */ float[] values); // 0x0070C828-0x0070C8EC
		public static int Max(int a, int b); // 0x0070C8EC-0x0070C8F8
		public static float Pow(float f, float p); // 0x0070C8F8-0x0070C9A4
		public static float Log(float f, float p); // 0x0070C9A4-0x0070CA60
		public static float Ceil(float f); // 0x0070CA60-0x0070CAE0
		public static float Floor(float f); // 0x0070CAE0-0x0070CB60
		public static float Round(float f); // 0x0070CB60-0x0070CC80
		public static int CeilToInt(float f); // 0x0070CC80-0x0070CD0C
		public static int FloorToInt(float f); // 0x0070CD0C-0x0070CD98
		public static int RoundToInt(float f); // 0x0070CD98-0x0070CEB8
		public static float Sign(float f); // 0x0070CEB8-0x0070CED8
		public static float Clamp(float value, float min, float max); // 0x0070CED8-0x0070CF08
		public static int Clamp(int value, int min, int max); // 0x0070CF08-0x0070CF20
		public static float Clamp01(float value); // 0x0070CF20-0x0070CF44
		public static float Lerp(float a, float b, float t); // 0x0070CF44-0x0070D004
		public static float LerpAngle(float a, float b, float t); // 0x0070D004-0x0070D124
		public static bool Approximately(float a, float b); // 0x0070D1EC-0x0070D2DC
		public static float SmoothDamp(float current, float target, ref float currentVelocity, float smoothTime, [UnityEngine.Internal.DefaultValue] /* 0x00159274-0x001592A8 */ float maxSpeed, [UnityEngine.Internal.DefaultValue] /* 0x001592A8-0x001592E4 */ float deltaTime); // 0x0070D2DC-0x0070D460
		public static float Repeat(float t, float length); // 0x0070D124-0x0070D1EC
		public static float InverseLerp(float a, float b, float value); // 0x0070D460-0x0070D524
	}
}

namespace UnityEngineInternal
{
	public struct MathfInternal // TypeDefIndex: 1938
	{
		// Fields
		public static float FloatMinNormal; // 0x00
		public static float FloatMinDenormal; // 0x04
		public static bool IsFlushToZeroEnabled; // 0x08
	
		// Constructors
		static MathfInternal(); // 0x00AE93C0-0x00AE9484
	}
}

namespace UnityEngine
{
	[NativeHeader] // 0x0014D3C0-0x0014D42C
	[RequiredByNativeCode] // 0x0014D3C0-0x0014D42C
	public sealed class Mesh : UnityEngine.Object // TypeDefIndex: 1939
	{
		// Properties
		internal bool canAccess { [NativeMethod] /* 0x001561BC-0x001561FC */ get; } // 0x007100D8-0x00710164 
		public int subMeshCount { [NativeMethod] /* 0x001561FC-0x00156244 */ get; } // 0x00710164-0x007101F4 
		public Vector3[] vertices { get; set; } // 0x007105C0-0x00710628 0x00710628-0x00710698
		public Vector3[] normals { get; set; } // 0x00710698-0x00710700 0x00710700-0x00710770
		public Vector4[] tangents { get; } // 0x00710770-0x007107D8 
		public Vector2[] uv { get; set; } // 0x007107D8-0x00710840 0x00710840-0x007108B0
		public Vector2[] uv2 { get; } // 0x007108B0-0x00710918 
		public Vector2[] uv3 { get; } // 0x00710918-0x00710980 
		public Vector2[] uv4 { get; } // 0x00710980-0x007109E8 
		public Color32[] colors32 { get; } // 0x007109E8-0x00710A64 
		public int[] triangles { get; set; } // 0x00710F08-0x00710F98 0x00710F98-0x00711008
	
		// Nested types
		internal enum InternalVertexChannelType // TypeDefIndex: 1940
		{
			Float = 0,
			Color = 2
		}
	
		// Constructors
		[RequiredByNativeCode] // 0x00155E88-0x00155E98
		public Mesh(); // 0x0070FB78-0x0070FC04
	
		// Methods
		[FreeFunction] // 0x00155E98-0x00155EE0
		private static void Internal_Create([Writable] /* 0x001592E4-0x001592F4 */ Mesh mono); // 0x0070FC04-0x0070FCA0
		[FreeFunction] // 0x00155EE0-0x00155F44
		private int[] GetTrianglesImpl(int submesh, bool applyBaseVertex); // 0x0070FCA0-0x0070FD58
		[FreeFunction] // 0x00155F44-0x00155FA8
		private int[] GetIndicesImpl(int submesh, bool applyBaseVertex); // 0x0070FD58-0x0070FE10
		[FreeFunction] // 0x00155FA8-0x0015600C
		private void SetIndicesImpl(int submesh, MeshTopology topology, Array indices, int arraySize, bool calculateBounds, int baseVertex); // 0x0070FE10-0x0070FEB8
		[FreeFunction] // 0x0015600C-0x00156080
		private void PrintErrorCantAccessChannel(VertexAttribute ch); // 0x0070FEB8-0x0070FF38
		[FreeFunction] // 0x00156080-0x001560E4
		internal bool HasChannel(VertexAttribute ch); // 0x0070FF38-0x0070FFB8
		[FreeFunction] // 0x001560E4-0x00156150
		private void SetArrayForChannelImpl(VertexAttribute channel, InternalVertexChannelType format, int dim, Array values, int arraySize); // 0x0070FFB8-0x00710048
		[FreeFunction] // 0x00156150-0x001561BC
		private Array GetAllocArrayFromChannelImpl(VertexAttribute channel, InternalVertexChannelType format, int dim); // 0x00710048-0x007100D8
		[NativeMethod] // 0x00156244-0x00156278
		private void ClearImpl(bool keepVertexLayout); // 0x007101F4-0x00710290
		[NativeMethod] // 0x00156278-0x001562B8
		private void RecalculateBoundsImpl(); // 0x00710290-0x00710324
		[NativeMethod] // 0x001562B8-0x001562F8
		private void RecalculateNormalsImpl(); // 0x00710324-0x007103B8
		internal VertexAttribute GetUVChannel(int uvIndex); // 0x007103B8-0x00710474
		internal static int DefaultDimensionForChannel(VertexAttribute channel); // 0x00710474-0x00710558
		private T[] GetAllocArrayFromChannel<T>(VertexAttribute channel, InternalVertexChannelType format, int dim);
		private T[] GetAllocArrayFromChannel<T>(VertexAttribute channel);
		private void SetSizedArrayForChannel(VertexAttribute channel, InternalVertexChannelType format, int dim, Array values, int valuesCount); // 0x00710558-0x007105C0
		private void SetArrayForChannel<T>(VertexAttribute channel, T[] values);
		private void SetListForChannel<T>(VertexAttribute channel, InternalVertexChannelType format, int dim, List<T> values);
		private void SetListForChannel<T>(VertexAttribute channel, List<T> values);
		public void SetVertices(List<Vector3> inVertices); // 0x00710A64-0x00710AD4
		public void SetNormals(List<Vector3> inNormals); // 0x00710AD4-0x00710B44
		public void SetTangents(List<Vector4> inTangents); // 0x00710B44-0x00710BB4
		public void SetColors(List<Color32> inColors); // 0x00710BB4-0x00710C38
		private void SetUvsImpl<T>(int uvIndex, int dim, List<T> uvs);
		public void SetUVs(int channel, List<Vector2> uvs); // 0x00710C38-0x00710CBC
		private void PrintErrorCantAccessIndices(); // 0x00710CBC-0x00710D68
		private bool CheckCanAccessSubmesh(int submesh, bool errorAboutTriangles); // 0x00710DE8-0x00710EF8
		private bool CheckCanAccessSubmeshTriangles(int submesh); // 0x00710EF8-0x00710F00
		private bool CheckCanAccessSubmeshIndices(int submesh); // 0x00710F00-0x00710F08
		public int[] GetIndices(int submesh); // 0x00711050-0x00711058
		public int[] GetIndices(int submesh, [UnityEngine.Internal.DefaultValue] /* 0x001592F4-0x00159328 */ bool applyBaseVertex); // 0x00711058-0x007110F0
		private void SetTrianglesImpl(int submesh, Array triangles, int arraySize, bool calculateBounds, int baseVertex); // 0x0071101C-0x00711050
		public void SetTriangles(List<int> triangles, int submesh); // 0x007110F0-0x00711114
		public void SetTriangles(List<int> triangles, int submesh, [UnityEngine.Internal.DefaultValue] /* 0x00159328-0x0015935C */ bool calculateBounds, [UnityEngine.Internal.DefaultValue] /* 0x0015935C-0x0015938C */ int baseVertex); // 0x00711114-0x007111CC
		public void Clear(); // 0x00711274-0x0071127C
		public void RecalculateBounds(); // 0x0071127C-0x00711344
		public void RecalculateNormals(); // 0x00711344-0x0071140C
	}
}

namespace UnityEngineInternal
{
	public class ScriptingUtils // TypeDefIndex: 1941
	{
		// Methods
		public static Delegate CreateDelegate(Type type, MethodInfo methodInfo); // 0x00AE94C8-0x00AE94D0
	}
}

namespace UnityEngine
{
	[ExtensionOfNativeClass] // 0x0014D42C-0x0014D4CC
	[NativeHeader] // 0x0014D42C-0x0014D4CC
	[NativeHeader] // 0x0014D42C-0x0014D4CC
	[RequiredByNativeCode] // 0x0014D42C-0x0014D4CC
	public class MonoBehaviour : Behaviour // TypeDefIndex: 1942
	{
		// Properties
		public bool useGUILayout { get; set; } // 0x007122F4-0x0071238C 0x0071238C-0x00712438
	
		// Constructors
		public MonoBehaviour(); // 0x00711728-0x00711730
	
		// Methods
		public bool IsInvoking(); // 0x00711730-0x00711734
		public void CancelInvoke(); // 0x007117AC-0x007117B0
		public void Invoke(string methodName, float time); // 0x00711828-0x00711844
		public void InvokeRepeating(string methodName, float time, float repeatRate); // 0x007118D4-0x007119CC
		public void CancelInvoke(string methodName); // 0x007119CC-0x007119D0
		public bool IsInvoking(string methodName); // 0x00711A50-0x00711A54
		[ExcludeFromDocs] // 0x001562F8-0x00156308
		public Coroutine StartCoroutine(string methodName); // 0x00711AD4-0x00711ADC
		public Coroutine StartCoroutine(string methodName, [UnityEngine.Internal.DefaultValue] /* 0x0015938C-0x001593C0 */ object value); // 0x00711ADC-0x00711C00
		public Coroutine StartCoroutine(IEnumerator routine); // 0x00711D00-0x00711E10
		[Obsolete] // 0x00156308-0x00156340
		public Coroutine StartCoroutine_Auto(IEnumerator routine); // 0x00711E90-0x00711E94
		public void StopCoroutine(IEnumerator routine); // 0x00711E94-0x00711FA4
		public void StopCoroutine(Coroutine routine); // 0x00712024-0x00712134
		public void StopCoroutine(string methodName); // 0x007121B4-0x0071225C
		public void StopAllCoroutines(); // 0x0071225C-0x007122F4
		public static void print(object message); // 0x00712438-0x007124BC
		[FreeFunction] // 0x00156340-0x0015637C
		private static void Internal_CancelInvokeAll(MonoBehaviour self); // 0x007117B0-0x00711828
		[FreeFunction] // 0x0015637C-0x001563B4
		private static bool Internal_IsInvokingAll(MonoBehaviour self); // 0x00711734-0x007117AC
		[FreeFunction] // 0x001563B4-0x001563C4
		private static void InvokeDelayed(MonoBehaviour self, string methodName, float time, float repeatRate); // 0x00711844-0x007118D4
		[FreeFunction] // 0x001563C4-0x001563D4
		private static void CancelInvoke(MonoBehaviour self, string methodName); // 0x007119D0-0x00711A50
		[FreeFunction] // 0x001563D4-0x001563E4
		private static bool IsInvoking(MonoBehaviour self, string methodName); // 0x00711A54-0x00711AD4
		[FreeFunction] // 0x001563E4-0x001563F4
		private static bool IsObjectMonoBehaviour(UnityEngine.Object obj); // 0x00711C00-0x00711C78
		private Coroutine StartCoroutineManaged(string methodName, object value); // 0x00711C78-0x00711D00
		private Coroutine StartCoroutineManaged2(IEnumerator enumerator); // 0x00711E10-0x00711E90
		private void StopCoroutineManaged(Coroutine routine); // 0x00712134-0x007121B4
		private void StopCoroutineFromEnumeratorManaged(IEnumerator routine); // 0x00711FA4-0x00712024
		internal string GetScriptClassName(); // 0x007124BC-0x00712554
	}

	internal class SendMouseEvents // TypeDefIndex: 1943
	{
		// Fields
		private static bool s_MouseUsed; // 0x00
		private static readonly HitInfo[] m_LastHit; // 0x04
		private static readonly HitInfo[] m_MouseDownHit; // 0x08
		private static readonly HitInfo[] m_CurrentHit; // 0x0C
		private static Camera[] m_Cameras; // 0x10
	
		// Nested types
		private struct HitInfo // TypeDefIndex: 1944
		{
			// Fields
			public GameObject target; // 0x00
			public Camera camera; // 0x04
	
			// Methods
			public void SendMessage(string name); // 0x00725B24-0x00725B2C
			public static implicit operator bool(HitInfo exists); // 0x00725650-0x00725764
			public static bool Compare(HitInfo lhs, HitInfo rhs); // 0x00725764-0x0072583C
		}
	
		// Constructors
		static SendMouseEvents(); // 0x0072583C-0x00725B24
	
		// Methods
		[RequiredByNativeCode] // 0x001563F4-0x00156404
		private static void SetMouseMoved(); // 0x00723B9C-0x00723C2C
		private static void HitTestLegacyGUI(Camera camera, Vector3 mousePosition, ref HitInfo hitInfo); // 0x00723C2C-0x00723D94
		[RequiredByNativeCode] // 0x00156404-0x00156414
		private static void DoSendMouseEvents(int skipRTCameras); // 0x00723D94-0x00724EB0
		private static void SendEvents(int i, HitInfo hit); // 0x00724EB0-0x00725650
	}

	[NativeHeader] // 0x0014D4CC-0x0014D524
	internal sealed class NoAllocHelpers // TypeDefIndex: 1945
	{
		// Methods
		public static int SafeLength(Array values); // 0x00711008-0x0071101C
		public static int SafeLength<T>(List<T> values);
		[FreeFunction] // 0x00156414-0x00156470
		public static Array ExtractArrayFromList(object list); // 0x007111CC-0x00711274
	}

	[UsedByNativeCode] // 0x0014D524-0x0014D534
	public struct Plane // TypeDefIndex: 1946
	{
		// Fields
		private Vector3 m_Normal; // 0x00
		private float m_Distance; // 0x0C
	
		// Properties
		public Vector3 normal { get; } // 0x00716358-0x00716374 
		public float distance { get; } // 0x00716374-0x007164AC 
	
		// Constructors
		public Plane(Vector3 inNormal, Vector3 inPoint); // 0x00716314-0x00716358
	
		// Methods
		public void Set3Points(Vector3 a, Vector3 b, Vector3 c); // 0x007164AC-0x00716690
		public bool Raycast(Ray ray, out float enter); // 0x00716690-0x00716938
		public override string ToString(); // 0x00716938-0x00716940
	}

	internal interface IPlayerEditorConnectionNative // TypeDefIndex: 1947
	{
		// Methods
		void Initialize();
		void DisconnectAll();
		void SendMessage(Guid messageId, byte[] data, int playerId);
		void Poll();
		void RegisterInternal(Guid messageId);
		void UnregisterInternal(Guid messageId);
		bool IsConnected();
	}

	[NativeHeader] // 0x0014D534-0x0014D594
	internal class PlayerConnectionInternal : IPlayerEditorConnectionNative // TypeDefIndex: 1948
	{
		// Constructors
		public PlayerConnectionInternal(); // 0x00712C48-0x00712C50
	
		// Methods
		void IPlayerEditorConnectionNative.SendMessage(Guid messageId, byte[] data, int playerId); // 0x00717F1C-0x00718088
		void IPlayerEditorConnectionNative.Poll(); // 0x00718110-0x00718114
		void IPlayerEditorConnectionNative.RegisterInternal(Guid messageId); // 0x007181B0-0x00718230
		void IPlayerEditorConnectionNative.UnregisterInternal(Guid messageId); // 0x007182A8-0x00718328
		void IPlayerEditorConnectionNative.Initialize(); // 0x007183A0-0x007183A4
		bool IPlayerEditorConnectionNative.IsConnected(); // 0x0071843C-0x00718440
		void IPlayerEditorConnectionNative.DisconnectAll(); // 0x007184D8-0x007184DC
		[FreeFunction] // 0x00156470-0x001564C4
		private static bool IsConnected(); // 0x00718440-0x007184D8
		[FreeFunction] // 0x001564C4-0x00156518
		private static void Initialize(); // 0x007183A4-0x0071843C
		[FreeFunction] // 0x00156518-0x00156570
		private static void RegisterInternal(string messageId); // 0x00718230-0x007182A8
		[FreeFunction] // 0x00156570-0x001565CC
		private static void UnregisterInternal(string messageId); // 0x00718328-0x007183A0
		[FreeFunction] // 0x001565CC-0x00156620
		private static void SendMessage(string messageId, byte[] data, int playerId); // 0x00718088-0x00718110
		[FreeFunction] // 0x00156620-0x00156674
		private static void PollInternal(); // 0x00718114-0x007181B0
		[FreeFunction] // 0x00156674-0x001566CC
		private static void DisconnectAll(); // 0x007184DC-0x00718578
	}
}

namespace UnityEngine.Experimental.PlayerLoop
{
	[RequiredByNativeCode] // 0x0014D594-0x0014D5A4
	public struct Initialization // TypeDefIndex: 1949
	{
		// Nested types
		[RequiredByNativeCode] // 0x0014D5A4-0x0014D5B4
		public struct PlayerUpdateTime // TypeDefIndex: 1950
		{
		}
	
		[RequiredByNativeCode] // 0x0014D5B4-0x0014D5C4
		public struct AsyncUploadTimeSlicedUpdate // TypeDefIndex: 1951
		{
		}
	
		[RequiredByNativeCode] // 0x0014D5C4-0x0014D5D4
		public struct SynchronizeState // TypeDefIndex: 1952
		{
		}
	
		[RequiredByNativeCode] // 0x0014D5D4-0x0014D5E4
		public struct SynchronizeInputs // TypeDefIndex: 1953
		{
		}
	
		[RequiredByNativeCode] // 0x0014D5E4-0x0014D5F4
		public struct XREarlyUpdate // TypeDefIndex: 1954
		{
		}
	}

	[RequiredByNativeCode] // 0x0014D5F4-0x0014D604
	public struct EarlyUpdate // TypeDefIndex: 1955
	{
		// Nested types
		[RequiredByNativeCode] // 0x0014D604-0x0014D614
		public struct PollPlayerConnection // TypeDefIndex: 1956
		{
		}
	
		[RequiredByNativeCode] // 0x0014D614-0x0014D624
		public struct ProfilerStartFrame // TypeDefIndex: 1957
		{
		}
	
		[RequiredByNativeCode] // 0x0014D624-0x0014D634
		public struct PollHtcsPlayerConnection // TypeDefIndex: 1958
		{
		}
	
		[RequiredByNativeCode] // 0x0014D634-0x0014D644
		public struct GpuTimestamp // TypeDefIndex: 1959
		{
		}
	
		[RequiredByNativeCode] // 0x0014D644-0x0014D654
		public struct AnalyticsCoreStatsUpdate // TypeDefIndex: 1960
		{
		}
	
		[RequiredByNativeCode] // 0x0014D654-0x0014D664
		public struct UnityWebRequestUpdate // TypeDefIndex: 1961
		{
		}
	
		[RequiredByNativeCode] // 0x0014D664-0x0014D674
		public struct UpdateStreamingManager // TypeDefIndex: 1962
		{
		}
	
		[RequiredByNativeCode] // 0x0014D674-0x0014D684
		public struct ExecuteMainThreadJobs // TypeDefIndex: 1963
		{
		}
	
		[RequiredByNativeCode] // 0x0014D684-0x0014D694
		public struct ProcessMouseInWindow // TypeDefIndex: 1964
		{
		}
	
		[RequiredByNativeCode] // 0x0014D694-0x0014D6A4
		public struct ClearIntermediateRenderers // TypeDefIndex: 1965
		{
		}
	
		[RequiredByNativeCode] // 0x0014D6A4-0x0014D6B4
		public struct ClearLines // TypeDefIndex: 1966
		{
		}
	
		[RequiredByNativeCode] // 0x0014D6B4-0x0014D6C4
		public struct PresentBeforeUpdate // TypeDefIndex: 1967
		{
		}
	
		[RequiredByNativeCode] // 0x0014D6C4-0x0014D6D4
		public struct ResetFrameStatsAfterPresent // TypeDefIndex: 1968
		{
		}
	
		[RequiredByNativeCode] // 0x0014D6D4-0x0014D6E4
		public struct UpdateAllUnityWebStreams // TypeDefIndex: 1969
		{
		}
	
		[RequiredByNativeCode] // 0x0014D6E4-0x0014D6F4
		public struct UpdateAsyncReadbackManager // TypeDefIndex: 1970
		{
		}
	
		[RequiredByNativeCode] // 0x0014D6F4-0x0014D704
		public struct UpdateTextureStreamingManager // TypeDefIndex: 1971
		{
		}
	
		[RequiredByNativeCode] // 0x0014D704-0x0014D714
		public struct UpdatePreloading // TypeDefIndex: 1972
		{
		}
	
		[RequiredByNativeCode] // 0x0014D714-0x0014D724
		public struct RendererNotifyInvisible // TypeDefIndex: 1973
		{
		}
	
		[RequiredByNativeCode] // 0x0014D724-0x0014D734
		public struct PlayerCleanupCachedData // TypeDefIndex: 1974
		{
		}
	
		[RequiredByNativeCode] // 0x0014D734-0x0014D744
		public struct UpdateMainGameViewRect // TypeDefIndex: 1975
		{
		}
	
		[RequiredByNativeCode] // 0x0014D744-0x0014D754
		public struct UpdateCanvasRectTransform // TypeDefIndex: 1976
		{
		}
	
		[RequiredByNativeCode] // 0x0014D754-0x0014D764
		public struct UpdateInputManager // TypeDefIndex: 1977
		{
		}
	
		[RequiredByNativeCode] // 0x0014D764-0x0014D774
		public struct ProcessRemoteInput // TypeDefIndex: 1978
		{
		}
	
		[RequiredByNativeCode] // 0x0014D774-0x0014D784
		public struct XRUpdate // TypeDefIndex: 1979
		{
		}
	
		[RequiredByNativeCode] // 0x0014D784-0x0014D794
		public struct ScriptRunDelayedStartupFrame // TypeDefIndex: 1980
		{
		}
	
		[RequiredByNativeCode] // 0x0014D794-0x0014D7A4
		public struct UpdateKinect // TypeDefIndex: 1981
		{
		}
	
		[RequiredByNativeCode] // 0x0014D7A4-0x0014D7B4
		public struct DeliverIosPlatformEvents // TypeDefIndex: 1982
		{
		}
	
		[RequiredByNativeCode] // 0x0014D7B4-0x0014D7C4
		public struct DispatchEventQueueEvents // TypeDefIndex: 1983
		{
		}
	
		[RequiredByNativeCode] // 0x0014D7C4-0x0014D7D4
		public struct DirectorSampleTime // TypeDefIndex: 1984
		{
		}
	
		[RequiredByNativeCode] // 0x0014D7D4-0x0014D7E4
		public struct PhysicsResetInterpolatedTransformPosition // TypeDefIndex: 1985
		{
		}
	
		[RequiredByNativeCode] // 0x0014D7E4-0x0014D7F4
		public struct SpriteAtlasManagerUpdate // TypeDefIndex: 1986
		{
		}
	
		[RequiredByNativeCode] // 0x0014D7F4-0x0014D804
		public struct TangoUpdate // TypeDefIndex: 1987
		{
		}
	
		[RequiredByNativeCode] // 0x0014D804-0x0014D814
		public struct PerformanceAnalyticsUpdate // TypeDefIndex: 1988
		{
		}
	}

	[RequiredByNativeCode] // 0x0014D814-0x0014D824
	public struct FixedUpdate // TypeDefIndex: 1989
	{
		// Nested types
		[RequiredByNativeCode] // 0x0014D824-0x0014D834
		public struct ClearLines // TypeDefIndex: 1990
		{
		}
	
		[RequiredByNativeCode] // 0x0014D834-0x0014D844
		public struct DirectorFixedSampleTime // TypeDefIndex: 1991
		{
		}
	
		[RequiredByNativeCode] // 0x0014D844-0x0014D854
		public struct AudioFixedUpdate // TypeDefIndex: 1992
		{
		}
	
		[RequiredByNativeCode] // 0x0014D854-0x0014D864
		public struct ScriptRunBehaviourFixedUpdate // TypeDefIndex: 1993
		{
		}
	
		[RequiredByNativeCode] // 0x0014D864-0x0014D874
		public struct DirectorFixedUpdate // TypeDefIndex: 1994
		{
		}
	
		[RequiredByNativeCode] // 0x0014D874-0x0014D884
		public struct LegacyFixedAnimationUpdate // TypeDefIndex: 1995
		{
		}
	
		[RequiredByNativeCode] // 0x0014D884-0x0014D894
		public struct XRFixedUpdate // TypeDefIndex: 1996
		{
		}
	
		[RequiredByNativeCode] // 0x0014D894-0x0014D8A4
		public struct PhysicsFixedUpdate // TypeDefIndex: 1997
		{
		}
	
		[RequiredByNativeCode] // 0x0014D8A4-0x0014D8B4
		public struct Physics2DFixedUpdate // TypeDefIndex: 1998
		{
		}
	
		[RequiredByNativeCode] // 0x0014D8B4-0x0014D8C4
		public struct DirectorFixedUpdatePostPhysics // TypeDefIndex: 1999
		{
		}
	
		[RequiredByNativeCode] // 0x0014D8C4-0x0014D8D4
		public struct ScriptRunDelayedFixedFrameRate // TypeDefIndex: 2000
		{
		}
	
		[RequiredByNativeCode] // 0x0014D8D4-0x0014D8E4
		public struct NewInputFixedUpdate // TypeDefIndex: 2001
		{
		}
	}

	[RequiredByNativeCode] // 0x0014D8E4-0x0014D8F4
	public struct PreUpdate // TypeDefIndex: 2002
	{
		// Nested types
		[RequiredByNativeCode] // 0x0014D8F4-0x0014D904
		public struct PhysicsUpdate // TypeDefIndex: 2003
		{
		}
	
		[RequiredByNativeCode] // 0x0014D904-0x0014D914
		public struct Physics2DUpdate // TypeDefIndex: 2004
		{
		}
	
		[RequiredByNativeCode] // 0x0014D914-0x0014D924
		public struct CheckTexFieldInput // TypeDefIndex: 2005
		{
		}
	
		[RequiredByNativeCode] // 0x0014D924-0x0014D934
		public struct IMGUISendQueuedEvents // TypeDefIndex: 2006
		{
		}
	
		[RequiredByNativeCode] // 0x0014D934-0x0014D944
		public struct SendMouseEvents // TypeDefIndex: 2007
		{
		}
	
		[RequiredByNativeCode] // 0x0014D944-0x0014D954
		public struct AIUpdate // TypeDefIndex: 2008
		{
		}
	
		[RequiredByNativeCode] // 0x0014D954-0x0014D964
		public struct WindUpdate // TypeDefIndex: 2009
		{
		}
	
		[RequiredByNativeCode] // 0x0014D964-0x0014D974
		public struct UpdateVideo // TypeDefIndex: 2010
		{
		}
	
		[RequiredByNativeCode] // 0x0014D974-0x0014D984
		public struct NewInputUpdate // TypeDefIndex: 2011
		{
		}
	}

	[RequiredByNativeCode] // 0x0014D984-0x0014D994
	public struct Update // TypeDefIndex: 2012
	{
		// Nested types
		[RequiredByNativeCode] // 0x0014D994-0x0014D9A4
		public struct ScriptRunBehaviourUpdate // TypeDefIndex: 2013
		{
		}
	
		[RequiredByNativeCode] // 0x0014D9A4-0x0014D9B4
		public struct DirectorUpdate // TypeDefIndex: 2014
		{
		}
	
		[RequiredByNativeCode] // 0x0014D9B4-0x0014D9C4
		public struct ScriptRunDelayedDynamicFrameRate // TypeDefIndex: 2015
		{
		}
	
		[RequiredByNativeCode] // 0x0014D9C4-0x0014D9D4
		public struct ScriptRunDelayedTasks // TypeDefIndex: 2016
		{
		}
	}

	[RequiredByNativeCode] // 0x0014D9D4-0x0014D9E4
	public struct PreLateUpdate // TypeDefIndex: 2017
	{
		// Nested types
		[RequiredByNativeCode] // 0x0014D9E4-0x0014D9F4
		public struct AIUpdatePostScript // TypeDefIndex: 2018
		{
		}
	
		[RequiredByNativeCode] // 0x0014D9F4-0x0014DA04
		public struct DirectorUpdateAnimationBegin // TypeDefIndex: 2019
		{
		}
	
		[RequiredByNativeCode] // 0x0014DA04-0x0014DA14
		public struct LegacyAnimationUpdate // TypeDefIndex: 2020
		{
		}
	
		[RequiredByNativeCode] // 0x0014DA14-0x0014DA24
		public struct DirectorUpdateAnimationEnd // TypeDefIndex: 2021
		{
		}
	
		[RequiredByNativeCode] // 0x0014DA24-0x0014DA34
		public struct DirectorDeferredEvaluate // TypeDefIndex: 2022
		{
		}
	
		[RequiredByNativeCode] // 0x0014DA34-0x0014DA44
		public struct UpdateNetworkManager // TypeDefIndex: 2023
		{
		}
	
		[RequiredByNativeCode] // 0x0014DA44-0x0014DA54
		public struct UpdateMasterServerInterface // TypeDefIndex: 2024
		{
		}
	
		[RequiredByNativeCode] // 0x0014DA54-0x0014DA64
		public struct UNetUpdate // TypeDefIndex: 2025
		{
		}
	
		[RequiredByNativeCode] // 0x0014DA64-0x0014DA74
		public struct EndGraphicsJobsAfterScriptUpdate // TypeDefIndex: 2026
		{
		}
	
		[RequiredByNativeCode] // 0x0014DA74-0x0014DA84
		public struct ParticleSystemBeginUpdateAll // TypeDefIndex: 2027
		{
		}
	
		[RequiredByNativeCode] // 0x0014DA84-0x0014DA94
		public struct ScriptRunBehaviourLateUpdate // TypeDefIndex: 2028
		{
		}
	
		[RequiredByNativeCode] // 0x0014DA94-0x0014DAA4
		public struct ConstraintManagerUpdate // TypeDefIndex: 2029
		{
		}
	}

	[RequiredByNativeCode] // 0x0014DAA4-0x0014DAB4
	public struct PostLateUpdate // TypeDefIndex: 2030
	{
		// Nested types
		[RequiredByNativeCode] // 0x0014DAB4-0x0014DAC4
		public struct PlayerSendFrameStarted // TypeDefIndex: 2031
		{
		}
	
		[RequiredByNativeCode] // 0x0014DAC4-0x0014DAD4
		public struct UpdateRectTransform // TypeDefIndex: 2032
		{
		}
	
		[RequiredByNativeCode] // 0x0014DAD4-0x0014DAE4
		public struct UpdateCanvasRectTransform // TypeDefIndex: 2033
		{
		}
	
		[RequiredByNativeCode] // 0x0014DAE4-0x0014DAF4
		public struct PlayerUpdateCanvases // TypeDefIndex: 2034
		{
		}
	
		[RequiredByNativeCode] // 0x0014DAF4-0x0014DB04
		public struct UpdateAudio // TypeDefIndex: 2035
		{
		}
	
		[RequiredByNativeCode] // 0x0014DB04-0x0014DB14
		public struct UpdateVideo // TypeDefIndex: 2036
		{
		}
	
		[RequiredByNativeCode] // 0x0014DB14-0x0014DB24
		public struct DirectorLateUpdate // TypeDefIndex: 2037
		{
		}
	
		[RequiredByNativeCode] // 0x0014DB24-0x0014DB34
		public struct ScriptRunDelayedDynamicFrameRate // TypeDefIndex: 2038
		{
		}
	
		[RequiredByNativeCode] // 0x0014DB34-0x0014DB44
		public struct VFXUpdate // TypeDefIndex: 2039
		{
		}
	
		[RequiredByNativeCode] // 0x0014DB44-0x0014DB54
		public struct ParticleSystemEndUpdateAll // TypeDefIndex: 2040
		{
		}
	
		[RequiredByNativeCode] // 0x0014DB54-0x0014DB64
		public struct EndGraphicsJobsAfterScriptLateUpdate // TypeDefIndex: 2041
		{
		}
	
		[RequiredByNativeCode] // 0x0014DB64-0x0014DB74
		public struct UpdateSubstance // TypeDefIndex: 2042
		{
		}
	
		[RequiredByNativeCode] // 0x0014DB74-0x0014DB84
		public struct UpdateCustomRenderTextures // TypeDefIndex: 2043
		{
		}
	
		[RequiredByNativeCode] // 0x0014DB84-0x0014DB94
		public struct UpdateAllRenderers // TypeDefIndex: 2044
		{
		}
	
		[RequiredByNativeCode] // 0x0014DB94-0x0014DBA4
		public struct EnlightenRuntimeUpdate // TypeDefIndex: 2045
		{
		}
	
		[RequiredByNativeCode] // 0x0014DBA4-0x0014DBB4
		public struct UpdateAllSkinnedMeshes // TypeDefIndex: 2046
		{
		}
	
		[RequiredByNativeCode] // 0x0014DBB4-0x0014DBC4
		public struct ProcessWebSendMessages // TypeDefIndex: 2047
		{
		}
	
		[RequiredByNativeCode] // 0x0014DBC4-0x0014DBD4
		public struct SortingGroupsUpdate // TypeDefIndex: 2048
		{
		}
	
		[RequiredByNativeCode] // 0x0014DBD4-0x0014DBE4
		public struct UpdateVideoTextures // TypeDefIndex: 2049
		{
		}
	
		[RequiredByNativeCode] // 0x0014DBE4-0x0014DBF4
		public struct DirectorRenderImage // TypeDefIndex: 2050
		{
		}
	
		[RequiredByNativeCode] // 0x0014DBF4-0x0014DC04
		public struct PlayerEmitCanvasGeometry // TypeDefIndex: 2051
		{
		}
	
		[RequiredByNativeCode] // 0x0014DC04-0x0014DC14
		public struct FinishFrameRendering // TypeDefIndex: 2052
		{
		}
	
		[RequiredByNativeCode] // 0x0014DC14-0x0014DC24
		public struct BatchModeUpdate // TypeDefIndex: 2053
		{
		}
	
		[RequiredByNativeCode] // 0x0014DC24-0x0014DC34
		public struct PlayerSendFrameComplete // TypeDefIndex: 2054
		{
		}
	
		[RequiredByNativeCode] // 0x0014DC34-0x0014DC44
		public struct UpdateCaptureScreenshot // TypeDefIndex: 2055
		{
		}
	
		[RequiredByNativeCode] // 0x0014DC44-0x0014DC54
		public struct PresentAfterDraw // TypeDefIndex: 2056
		{
		}
	
		[RequiredByNativeCode] // 0x0014DC54-0x0014DC64
		public struct ClearImmediateRenderers // TypeDefIndex: 2057
		{
		}
	
		[RequiredByNativeCode] // 0x0014DC64-0x0014DC74
		public struct XRPostPresent // TypeDefIndex: 2058
		{
		}
	
		[RequiredByNativeCode] // 0x0014DC74-0x0014DC84
		public struct UpdateResolution // TypeDefIndex: 2059
		{
		}
	
		[RequiredByNativeCode] // 0x0014DC84-0x0014DC94
		public struct InputEndFrame // TypeDefIndex: 2060
		{
		}
	
		[RequiredByNativeCode] // 0x0014DC94-0x0014DCA4
		public struct GUIClearEvents // TypeDefIndex: 2061
		{
		}
	
		[RequiredByNativeCode] // 0x0014DCA4-0x0014DCB4
		public struct ShaderHandleErrors // TypeDefIndex: 2062
		{
		}
	
		[RequiredByNativeCode] // 0x0014DCB4-0x0014DCC4
		public struct ResetInputAxis // TypeDefIndex: 2063
		{
		}
	
		[RequiredByNativeCode] // 0x0014DCC4-0x0014DCD4
		public struct ThreadedLoadingDebug // TypeDefIndex: 2064
		{
		}
	
		[RequiredByNativeCode] // 0x0014DCD4-0x0014DCE4
		public struct ProfilerSynchronizeStats // TypeDefIndex: 2065
		{
		}
	
		[RequiredByNativeCode] // 0x0014DCE4-0x0014DCF4
		public struct MemoryFrameMaintenance // TypeDefIndex: 2066
		{
		}
	
		[RequiredByNativeCode] // 0x0014DCF4-0x0014DD04
		public struct ExecuteGameCenterCallbacks // TypeDefIndex: 2067
		{
		}
	
		[RequiredByNativeCode] // 0x0014DD04-0x0014DD14
		public struct ProfilerEndFrame // TypeDefIndex: 2068
		{
		}
	
		[RequiredByNativeCode] // 0x0014DD14-0x0014DD24
		public struct PlayerSendFramePostPresent // TypeDefIndex: 2069
		{
		}
	
		[RequiredByNativeCode] // 0x0014DD24-0x0014DD34
		public struct PhysicsSkinnedClothBeginUpdate // TypeDefIndex: 2070
		{
		}
	
		[RequiredByNativeCode] // 0x0014DD34-0x0014DD44
		public struct PhysicsSkinnedClothFinishUpdate // TypeDefIndex: 2071
		{
		}
	
		[RequiredByNativeCode] // 0x0014DD44-0x0014DD54
		public struct TriggerEndOfFrameCallbacks // TypeDefIndex: 2072
		{
		}
	}
}

namespace UnityEngine.Experimental.LowLevel
{
	[NativeType] // 0x0014DD54-0x0014DDBC
	[RequiredByNativeCode] // 0x0014DD54-0x0014DDBC
	internal struct PlayerLoopSystemInternal // TypeDefIndex: 2073
	{
		// Fields
		public Type type; // 0x00
		public PlayerLoopSystem.UpdateFunction updateDelegate; // 0x04
		public IntPtr updateFunction; // 0x08
		public IntPtr loopConditionFunction; // 0x0C
		public int numSubSystems; // 0x10
	}

	public struct PlayerLoopSystem // TypeDefIndex: 2074
	{
		// Fields
		public Type type; // 0x00
		public PlayerLoopSystem[] subSystemList; // 0x04
		public UpdateFunction updateDelegate; // 0x08
		public IntPtr updateFunction; // 0x0C
		public IntPtr loopConditionFunction; // 0x10
	
		// Nested types
		public delegate void UpdateFunction(); // TypeDefIndex: 2075; 0x008204CC-0x00820908
	}
}

namespace UnityEngine
{
	public class PlayerPrefsException : Exception // TypeDefIndex: 2076
	{
		// Constructors
		public PlayerPrefsException(string error); // 0x007187DC-0x00718868
	}

	[NativeHeader] // 0x0014DDBC-0x0014DE08
	public class PlayerPrefs // TypeDefIndex: 2077
	{
		// Methods
		[NativeMethod] // 0x001566CC-0x00156700
		private static bool TrySetInt(string key, int value); // 0x00718578-0x00718628
		[NativeMethod] // 0x00156700-0x00156738
		private static bool TrySetFloat(string key, float value); // 0x00718628-0x007186A8
		[NativeMethod] // 0x00156738-0x00156770
		private static bool TrySetSetString(string key, string value); // 0x007186A8-0x00718728
		public static void SetInt(string key, int value); // 0x00718728-0x007187DC
		public static int GetInt(string key, int defaultValue); // 0x00718868-0x00718914
		public static int GetInt(string key); // 0x00718914-0x0071891C
		public static void SetFloat(string key, float value); // 0x0071891C-0x007189D0
		public static void SetString(string key, string value); // 0x007189D0-0x00718A84
		public static string GetString(string key, string defaultValue); // 0x00718A84-0x00718B34
		public static string GetString(string key); // 0x00718B34-0x00718B98
		public static bool HasKey(string key); // 0x00718B98-0x00718C30
		public static void DeleteKey(string key); // 0x00718C30-0x00718CCC
		[NativeMethod] // 0x00156770-0x001567B4
		public static void DeleteAll(); // 0x00718CCC-0x00718D58
		[NativeMethod] // 0x001567B4-0x001567E8
		public static void Save(); // 0x00718D58-0x00718DDC
	}

	[Serializable]
	public struct Pose : IEquatable<Pose> // TypeDefIndex: 2078
	{
		// Fields
		public Vector3 position; // 0x00
		public Quaternion rotation; // 0x0C
		private static readonly Pose k_Identity; // 0x00
	
		// Constructors
		public Pose(Vector3 position, Quaternion rotation); // 0x00718DDC-0x00719104
		static Pose(); // 0x00719498-0x00719584
	
		// Methods
		public override string ToString(); // 0x00719104-0x007192E8
		public override bool Equals(object obj); // 0x007192E8-0x007192F0
		public bool Equals(Pose other); // 0x007193E4-0x0071946C
		public override int GetHashCode(); // 0x0071946C-0x00719498
	}

	[AttributeUsage] // 0x0014DE08-0x0014DE4C
	public abstract class PropertyAttribute : Attribute // TypeDefIndex: 2079
	{
		// Constructors
		protected PropertyAttribute(); // 0x00708A28-0x00708A30
	}

	[AttributeUsage] // 0x0014DE4C-0x0014DE90
	public class TooltipAttribute : PropertyAttribute // TypeDefIndex: 2080
	{
		// Fields
		public readonly string tooltip; // 0x08
	
		// Constructors
		public TooltipAttribute(string tooltip); // 0x00ADC0F0-0x00ADC118
	}

	[AttributeUsage] // 0x0014DE90-0x0014DED4
	public class SpaceAttribute : PropertyAttribute // TypeDefIndex: 2081
	{
		// Fields
		public readonly float height; // 0x08
	
		// Constructors
		public SpaceAttribute(); // 0x00726060-0x00726080
		public SpaceAttribute(float height); // 0x00726080-0x007260A0
	}

	[AttributeUsage] // 0x0014DED4-0x0014DF18
	public class HeaderAttribute : PropertyAttribute // TypeDefIndex: 2082
	{
		// Fields
		public readonly string header; // 0x08
	
		// Constructors
		public HeaderAttribute(string header); // 0x00708A08-0x00708A28
	}

	[AttributeUsage] // 0x0014DF18-0x0014DF5C
	public sealed class RangeAttribute : PropertyAttribute // TypeDefIndex: 2083
	{
		// Fields
		public readonly float min; // 0x08
		public readonly float max; // 0x0C
	
		// Constructors
		public RangeAttribute(float min, float max); // 0x0071B55C-0x0071B58C
	}

	[AttributeUsage] // 0x0014DF5C-0x0014DFA0
	public sealed class TextAreaAttribute : PropertyAttribute // TypeDefIndex: 2084
	{
		// Fields
		public readonly int minLines; // 0x08
		public readonly int maxLines; // 0x0C
	
		// Constructors
		public TextAreaAttribute(int minLines, int maxLines); // 0x00AD9410-0x00AD9438
	}

	[NativeHeader] // 0x0014DFA0-0x0014DFF0
	internal class PropertyNameUtils // TypeDefIndex: 2085
	{
		// Methods
		[FreeFunction] // 0x001567E8-0x001567F8
		public static PropertyName PropertyNameFromString([Unmarshalled] /* 0x001593C0-0x001593D0 */ string name); // 0x00719D34-0x00719D5C
		private static void PropertyNameFromString_Injected(string name, out PropertyName ret); // 0x00719F34-0x00719FB4
	}

	[UsedByNativeCode] // 0x0014DFF0-0x0014E000
	public struct PropertyName : IEquatable<PropertyName> // TypeDefIndex: 2086
	{
		// Fields
		internal int id; // 0x00
	
		// Constructors
		public PropertyName(string name); // 0x00719D5C-0x00719D94
		public PropertyName(PropertyName other); // 0x00719D94-0x00719D9C
		public PropertyName(int id); // 0x00719D9C-0x00719DA4
	
		// Methods
		public static bool operator ==(PropertyName lhs, PropertyName rhs); // 0x00719DA4-0x00719DB8
		public override int GetHashCode(); // 0x00719DB8-0x00719E54
		public override bool Equals(object other); // 0x00719E54-0x00719E5C
		public bool Equals(PropertyName other); // 0x00719E5C-0x00719E70
		public static implicit operator PropertyName(string name); // 0x00719E70-0x00719E98
		public static implicit operator PropertyName(int id); // 0x00719E98-0x00719F2C
		public override string ToString(); // 0x00719F2C-0x00719F34
	}

	[NativeHeader] // 0x0014E000-0x0014E050
	public sealed class Random // TypeDefIndex: 2087
	{
		// Methods
		[FreeFunction] // 0x001567F8-0x00156808
		public static float Range(float min, float max); // 0x0071B400-0x0071B4A8
		public static int Range(int min, int max); // 0x0071B4A8-0x0071B4AC
		[FreeFunction] // 0x00156808-0x00156818
		private static int RandomRangeInt(int min, int max); // 0x0071B4AC-0x0071B55C
	}

	public struct RangeInt // TypeDefIndex: 2088
	{
		// Fields
		public int start; // 0x00
		public int length; // 0x04
	
		// Properties
		public int end { get; } // 0x0071B5A8-0x0071B608 
	
		// Constructors
		public RangeInt(int start, int length); // 0x0071B58C-0x0071B5A8
	}

	public struct Ray // TypeDefIndex: 2089
	{
		// Fields
		private Vector3 m_Origin; // 0x00
		private Vector3 m_Direction; // 0x0C
	
		// Properties
		public Vector3 origin { get; } // 0x0071B638-0x0071B64C 
		public Vector3 direction { get; } // 0x0071B64C-0x0071B780 
	
		// Constructors
		public Ray(Vector3 origin, Vector3 direction); // 0x0071B608-0x0071B638
	
		// Methods
		public Vector3 GetPoint(float distance); // 0x0071B780-0x0071B928
		public override string ToString(); // 0x0071B928-0x0071B940
	}

	[NativeClass] // 0x0014E050-0x0014E140
	[NativeHeader] // 0x0014E050-0x0014E140
	[RequiredByNativeCode] // 0x0014E050-0x0014E140
	public struct Rect : IEquatable<Rect> // TypeDefIndex: 2090
	{
		// Fields
		[NativeName] // 0x0015134C-0x0015137C
		private float m_XMin; // 0x00
		[NativeName] // 0x0015137C-0x001513AC
		private float m_YMin; // 0x04
		[NativeName] // 0x001513AC-0x001513E0
		private float m_Width; // 0x08
		[NativeName] // 0x001513E0-0x00151414
		private float m_Height; // 0x0C
	
		// Properties
		public static Rect zero { [CompilerGenerated] /* 0x00156818-0x00156828 */ get; } // 0x0071B970-0x0071B97C 
		public float x { get; set; } // 0x0071B9AC-0x0071B9BC 0x0071B9BC-0x0071B9CC
		public float y { get; set; } // 0x0071B9CC-0x0071B9DC 0x0071B9DC-0x0071BA28
		public Vector2 position { get; } // 0x0071BA28-0x0071BAD0 
		public Vector2 center { get; } // 0x0071BAD0-0x0071BB88 
		public Vector2 min { get; } // 0x0071BB88-0x0071BC4C 
		public Vector2 max { get; } // 0x0071BC4C-0x0071BCAC 
		public float width { get; set; } // 0x0071BCAC-0x0071BCBC 0x0071BCBC-0x0071BCCC
		public float height { get; set; } // 0x0071BCCC-0x0071BCDC 0x0071BCDC-0x0071BD28
		public Vector2 size { get; } // 0x0071BD28-0x0071BD6C 
		public float xMin { get; set; } // 0x0071BD6C-0x0071BD74 0x0071BD74-0x0071BD94
		public float yMin { get; set; } // 0x0071BD94-0x0071BD9C 0x0071BD9C-0x0071BDBC
		public float xMax { get; set; } // 0x0071BDBC-0x0071BDD0 0x0071BDD0-0x0071BDE4
		public float yMax { get; set; } // 0x0071BDE4-0x0071BDF8 0x0071BDF8-0x0071BE6C
	
		// Constructors
		public Rect(float x, float y, float width, float height); // 0x0071B940-0x0071B960
		public Rect(Rect source); // 0x0071B960-0x0071B970
	
		// Methods
		public static Rect MinMaxRect(float xmin, float ymin, float xmax, float ymax); // 0x0071B97C-0x0071B9AC
		public bool Contains(Vector2 point); // 0x0071BE6C-0x0071BECC
		public bool Contains(Vector3 point); // 0x0071BECC-0x0071BF2C
		private static Rect OrderMinMax(Rect rect); // 0x0071BF2C-0x0071BFEC
		public bool Overlaps(Rect other); // 0x0071BFEC-0x0071C120
		public bool Overlaps(Rect other, bool allowInverse); // 0x0071C120-0x0071C148
		public static bool operator !=(Rect lhs, Rect rhs); // 0x0071C148-0x0071C1B4
		public static bool operator ==(Rect lhs, Rect rhs); // 0x0071C1B4-0x0071C29C
		public override int GetHashCode(); // 0x0071C29C-0x0071C3FC
		public override bool Equals(object other); // 0x0071C3FC-0x0071C404
		public bool Equals(Rect other); // 0x0071C404-0x0071C694
		public override string ToString(); // 0x0071C694-0x0071C7D8
	}

	[NativeHeader] // 0x0014E140-0x0014E174
	public sealed class ReflectionProbe : Behaviour // TypeDefIndex: 2091
	{
		// Fields
		[CompilerGenerated] // 0x00151414-0x00151448
		[DebuggerBrowsable] // 0x00151414-0x00151448
		private static Action<ReflectionProbe, ReflectionProbeEvent> reflectionProbeChanged; // 0x00
		[CompilerGenerated] // 0x00151448-0x0015147C
		[DebuggerBrowsable] // 0x00151448-0x0015147C
		private static Action<Cubemap> defaultReflectionSet; // 0x04
	
		// Nested types
		public enum ReflectionProbeEvent // TypeDefIndex: 2092
		{
			ReflectionProbeAdded = 0,
			ReflectionProbeRemoved = 1
		}
	
		// Methods
		[RequiredByNativeCode] // 0x00156828-0x00156838
		private static void CallReflectionProbeEvent(ReflectionProbe probe, ReflectionProbeEvent probeEvent); // 0x0071F510-0x0071F59C
		[RequiredByNativeCode] // 0x00156838-0x00156848
		private static void CallSetDefaultReflection(Cubemap defaultReflectionCubemap); // 0x0071F59C-0x0071F624
	}
}

namespace UnityEngine.Rendering
{
	[NativeHeader] // 0x0014E174-0x0014E238
	[NativeHeader] // 0x0014E174-0x0014E238
	[NativeType] // 0x0014E174-0x0014E238
	[UsedByNativeCode] // 0x0014E174-0x0014E238
	public class CommandBuffer : IDisposable // TypeDefIndex: 2093
	{
		// Fields
		internal IntPtr m_Ptr; // 0x08
	
		// Properties
		public string name { set; } // 0x00721C9C-0x00721D4C
	
		// Constructors
		public CommandBuffer(); // 0x00721B44-0x00721B64
	
		// Methods
		[FreeFunction] // 0x00156848-0x001568A0
		private static IntPtr InitBuffer(); // 0x00721B64-0x00721BFC
		[FreeFunction] // 0x001568A0-0x0015691C
		private void ReleaseBuffer(); // 0x00721BFC-0x00721C9C
		[NativeMethod] // 0x0015691C-0x00156958
		public void Clear(); // 0x00721D4C-0x00721DE4
		[FreeFunction] // 0x00156958-0x0015699C
		private void IssuePluginCustomTextureUpdateInternal(IntPtr callback, Texture targetTexture, uint userData, bool useNewUnityRenderingExtTextureUpdateParamsV2); // 0x00721DE4-0x00721E7C
		~CommandBuffer(); // 0x00721E7C-0x00721EE4
		public void Dispose(); // 0x00721F40-0x00721FD0
		private void Dispose(bool disposing); // 0x00721EE4-0x00721F40
		[Obsolete] // 0x0015699C-0x001569D4
		public void IssuePluginCustomTextureUpdate(IntPtr callback, Texture targetTexture, uint userData); // 0x00721FD0-0x00721FF0
	}
}

namespace UnityEngine
{
	[RequiredByNativeCode] // 0x0014E238-0x0014E248
	public class ResourceRequest : AsyncOperation // TypeDefIndex: 2094
	{
		// Fields
		internal string m_Path; // 0x10
		internal Type m_Type; // 0x14
	}

	[NativeHeader] // 0x0014E248-0x0014E2E4
	[NativeHeader] // 0x0014E248-0x0014E2E4
	public sealed class Resources // TypeDefIndex: 2095
	{
		// Methods
		internal static T[] ConvertObjects<T>(UnityEngine.Object[] rawObjects)
			where T : UnityEngine.Object;
		[FreeFunction] // 0x001569D4-0x00156A44
		[TypeInferenceRule] // 0x001569D4-0x00156A44
		public static UnityEngine.Object[] FindObjectsOfTypeAll(Type type); // 0x0072226C-0x00722310
		public static T[] FindObjectsOfTypeAll<T>()
			where T : UnityEngine.Object;
		public static UnityEngine.Object Load(string path); // 0x00722310-0x007223B0
		public static T Load<T>(string path)
			where T : UnityEngine.Object;
		[FreeFunction] // 0x00156A44-0x00156AB4
		[NativeThrows] // 0x00156A44-0x00156AB4
		[TypeInferenceRule] // 0x00156A44-0x00156AB4
		public static UnityEngine.Object Load(string path, [NotNull] /* 0x001593D0-0x001593E0 */ Type systemTypeInstance); // 0x007223B0-0x00722458
		[FreeFunction] // 0x00156AB4-0x00156B14
		[TypeInferenceRule] // 0x00156AB4-0x00156B14
		public static UnityEngine.Object GetBuiltinResource([NotNull] /* 0x001593E0-0x001593F0 */ Type type, string path); // 0x00722458-0x007224D8
		public static T GetBuiltinResource<T>(string path)
			where T : UnityEngine.Object;
	}

	public enum RuntimeInitializeLoadType // TypeDefIndex: 2096
	{
		AfterSceneLoad = 0,
		BeforeSceneLoad = 1
	}

	[AttributeUsage] // 0x0014E2E4-0x0014E318
	public class RuntimeInitializeOnLoadMethodAttribute : PreserveAttribute // TypeDefIndex: 2097
	{
		// Fields
		[CompilerGenerated] // 0x0015147C-0x001514B0
		[DebuggerBrowsable] // 0x0015147C-0x001514B0
		private RuntimeInitializeLoadType <loadType>k__BackingField; // 0x08
	
		// Properties
		private RuntimeInitializeLoadType loadType { [CompilerGenerated] /* 0x00156B14-0x00156B24 */ set; } // 0x00722500-0x00722508
	
		// Constructors
		public RuntimeInitializeOnLoadMethodAttribute(RuntimeInitializeLoadType loadType); // 0x007224D8-0x007224F8
	}

	[ExtensionOfNativeClass] // 0x0014E318-0x0014E384
	[NativeClass] // 0x0014E318-0x0014E384
	[NativeHeader] // 0x0014E318-0x0014E384
	[RequiredByNativeCode] // 0x0014E318-0x0014E384
	public class ScriptableObject : UnityEngine.Object // TypeDefIndex: 2098
	{
		// Constructors
		public ScriptableObject(); // 0x007126C4-0x00712750
	
		// Methods
		public static ScriptableObject CreateInstance(Type type); // 0x00723AB8-0x00723ABC
		public static T CreateInstance<T>()
			where T : ScriptableObject;
		[NativeMethod] // 0x00156B24-0x00156B54
		private static void CreateScriptableObject([Writable] /* 0x001593F0-0x00159400 */ ScriptableObject self); // 0x00723A40-0x00723AB8
		[FreeFunction] // 0x00156B54-0x00156BAC
		private static ScriptableObject CreateScriptableObjectInstanceFromType(Type type); // 0x00723ABC-0x00723B34
	}
}

namespace UnityEngine.Experimental.Rendering
{
	[NativeHeader] // 0x0014E384-0x0014E480
	[NativeHeader] // 0x0014E384-0x0014E480
	[NativeHeader] // 0x0014E384-0x0014E480
	[NativeType] // 0x0014E384-0x0014E480
	public struct ScriptableRenderContext // TypeDefIndex: 2099
	{
		// Fields
		private IntPtr m_Ptr; // 0x00
	
		// Constructors
		internal ScriptableRenderContext(IntPtr ptr); // 0x00821B98-0x00821BA0
	}
}

namespace UnityEngine
{
	[AttributeUsage] // 0x0014E480-0x0014E4C4
	public class SelectionBaseAttribute : Attribute // TypeDefIndex: 2100
	{
		// Constructors
		public SelectionBaseAttribute(); // 0x00723B94-0x00723B9C
	}

	[Obsolete] // 0x0014E4C4-0x0014E50C
	[RequiredByNativeCode] // 0x0014E4C4-0x0014E50C
	public sealed class SerializePrivateVariables : Attribute // TypeDefIndex: 2101
	{
	}

	[RequiredByNativeCode] // 0x0014E50C-0x0014E51C
	public sealed class SerializeField : Attribute // TypeDefIndex: 2102
	{
		// Constructors
		public SerializeField(); // 0x00725B4C-0x00725B54
	}

	[AttributeUsage] // 0x0014E51C-0x0014E550
	[RequiredByNativeCode] // 0x0014E51C-0x0014E550
	public sealed class PreferBinarySerialization : Attribute // TypeDefIndex: 2103
	{
	}

	[RequiredByNativeCode] // 0x0014E550-0x0014E560
	public interface ISerializationCallbackReceiver // TypeDefIndex: 2104
	{
		// Methods
		[RequiredByNativeCode] // 0x00156BAC-0x00156BBC
		void OnBeforeSerialize();
		[RequiredByNativeCode] // 0x00156BBC-0x00156BCC
		void OnAfterDeserialize();
	}

	[NativeHeader] // 0x0014E560-0x0014E5A8
	[UsedByNativeCode] // 0x0014E560-0x0014E5A8
	public sealed class ComputeShader : UnityEngine.Object // TypeDefIndex: 2105
	{
		// Methods
		[NativeMethod] // 0x00156BCC-0x00156C6C
		[RequiredByNativeCode] // 0x00156BCC-0x00156C6C
		public int FindKernel(string name); // 0x0081A650-0x0081A714
	}

	[NativeHeader] // 0x0014E5A8-0x0014E5DC
	public struct SortingLayer // TypeDefIndex: 2106
	{
		// Fields
		private int m_Id; // 0x00
	
		// Methods
		[FreeFunction] // 0x00156C6C-0x00156CCC
		public static int GetLayerValueFromID(int id); // 0x00725FBC-0x00726060
	}

	public static class StackTraceUtility // TypeDefIndex: 2107
	{
		// Fields
		private static string projectFolder; // 0x00
	
		// Constructors
		static StackTraceUtility(); // 0x00AD8CC4-0x00AD8D38
	
		// Methods
		[RequiredByNativeCode] // 0x00156CCC-0x00156CDC
		internal static void SetProjectFolder(string folder); // 0x00AD7064-0x00AD71B4
		[RequiredByNativeCode] // 0x00156CDC-0x00156CEC
		public static string ExtractStackTrace(); // 0x00AD71B4-0x00AD7280
		private static bool IsSystemStacktraceType(object name); // 0x00AD7CC8-0x00AD7E9C
		[RequiredByNativeCode] // 0x00156CEC-0x00156CFC
		internal static void ExtractStringFromExceptionInternal(object exceptiono, out string message, out string stackTrace); // 0x00AD7E9C-0x00AD8348
		[RequiredByNativeCode] // 0x00156CFC-0x00156D0C
		internal static string PostprocessStacktrace(string oldString, bool stripEngineInternalInformation); // 0x00AD8348-0x00AD8CC4
		internal static string ExtractFormattedStackTrace(StackTrace stackTrace); // 0x00AD7280-0x00AD7CC8
	}

	[Serializable]
	[RequiredByNativeCode] // 0x0014E5DC-0x0014E5EC
	public class UnityException : Exception // TypeDefIndex: 2108
	{
		// Constructors
		public UnityException(); // 0x00AE0050-0x00AE00F8
		public UnityException(string message); // 0x00ADA09C-0x00ADA13C
		protected UnityException(SerializationInfo info, StreamingContext context); // 0x00AE00F8-0x00AE01A0
	}

	[Serializable]
	public class MissingReferenceException : Exception // TypeDefIndex: 2109
	{
		// Constructors
		public MissingReferenceException(); // 0x007115D8-0x00711680
		protected MissingReferenceException(SerializationInfo info, StreamingContext context); // 0x00711680-0x00711728
	}

	[VisibleToOtherModules] // 0x0014E5EC-0x0014E5FC
	internal class SystemClock // TypeDefIndex: 2110
	{
		// Fields
		private static readonly DateTime s_Epoch; // 0x00
	
		// Properties
		public static DateTime now { get; } // 0x00AD8D38-0x00AD8DCC 
	
		// Constructors
		static SystemClock(); // 0x00AD8DCC-0x00AD8E70
	}

	public enum OperatingSystemFamily // TypeDefIndex: 2111
	{
		Other = 0,
		MacOSX = 1,
		Windows = 2,
		Linux = 3
	}

	[NativeHeader] // 0x0014E5FC-0x0014E728
	[NativeHeader] // 0x0014E5FC-0x0014E728
	[NativeHeader] // 0x0014E5FC-0x0014E728
	[NativeHeader] // 0x0014E5FC-0x0014E728
	[NativeHeader] // 0x0014E5FC-0x0014E728
	public sealed class SystemInfo // TypeDefIndex: 2112
	{
		// Properties
		public static OperatingSystemFamily operatingSystemFamily { get; } // 0x00AD8E70-0x00AD8E74 
		public static string deviceUniqueIdentifier { get; } // 0x00AD8F0C-0x00AD8F10 
		public static GraphicsDeviceType graphicsDeviceType { get; } // 0x00AD8FA8-0x00AD8FAC 
	
		// Methods
		private static bool IsValidEnumValue(Enum value); // 0x00AD9040-0x00AD90E8
		public static bool SupportsRenderTextureFormat(RenderTextureFormat format); // 0x00AD90E8-0x00AD91C4
		public static bool SupportsTextureFormat(TextureFormat format); // 0x00AD923C-0x00AD9318
		[FreeFunction] // 0x00156D0C-0x00156D60
		private static OperatingSystemFamily GetOperatingSystemFamily(); // 0x00AD8E74-0x00AD8F0C
		[FreeFunction] // 0x00156D60-0x00156DB4
		private static string GetDeviceUniqueIdentifier(); // 0x00AD8F10-0x00AD8FA8
		[FreeFunction] // 0x00156DB4-0x00156E10
		private static GraphicsDeviceType GetGraphicsDeviceType(); // 0x00AD8FAC-0x00AD9040
		[FreeFunction] // 0x00156E10-0x00156E64
		private static bool HasRenderTextureNative(RenderTextureFormat format); // 0x00AD91C4-0x00AD923C
		[FreeFunction] // 0x00156E64-0x00156EC0
		private static bool SupportsTextureFormatNative(TextureFormat format); // 0x00AD9318-0x00AD9390
		[FreeFunction] // 0x00156EC0-0x00156F18
		public static bool IsFormatSupported(GraphicsFormat format, FormatUsage usage); // 0x00AD9390-0x00AD9410
	}

	[NativeHeader] // 0x0014E728-0x0014E7D0
	[NativeHeader] // 0x0014E728-0x0014E7D0
	[UsedByNativeCode] // 0x0014E728-0x0014E7D0
	public class Texture : UnityEngine.Object // TypeDefIndex: 2113
	{
		// Properties
		public virtual int width { get; set; } // 0x00AD95D8-0x00AD95DC 0x00AD95DC-0x00AD9664
		public virtual int height { get; set; } // 0x00AD9664-0x00AD9668 0x00AD9668-0x00AD96F0
		public virtual bool isReadable { get; } // 0x00AD96F0-0x00AD9780 
		public TextureWrapMode wrapMode { [NativeName] /* 0x00156F18-0x00156F54 */ get; set; } // 0x00AD9780-0x00AD980C 0x00AD980C-0x00AD98BC
		public FilterMode filterMode { set; } // 0x00AD98BC-0x00AD9968
		public int anisoLevel { set; } // 0x00AD9968-0x00AD9A0C
		public Vector2 texelSize { [NativeName] /* 0x00156F54-0x00156F94 */ get; } // 0x00AD9A0C-0x00AD9A48 
	
		// Constructors
		protected Texture(); // 0x00AD9438-0x00AD94BC
	
		// Methods
		private int GetDataWidth(); // 0x00AD94BC-0x00AD9548
		private int GetDataHeight(); // 0x00AD9548-0x00AD95D8
		public IntPtr GetNativeTexturePtr(); // 0x00AD9AC8-0x00AD9B5C
		internal bool ValidateFormat(RenderTextureFormat format); // 0x00AD9B5C-0x00AD9C94
		internal bool ValidateFormat(TextureFormat format); // 0x00AD9C94-0x00AD9E44
		internal bool ValidateFormat(GraphicsFormat format, FormatUsage usage); // 0x00AD9E44-0x00AD9FF0
		internal UnityException CreateNonReadableException(Texture t); // 0x00AD9FF0-0x00ADA09C
		private void get_texelSize_Injected(out Vector2 ret); // 0x00AD9A48-0x00AD9AC8
	}

	[NativeHeader] // 0x0014E7D0-0x0014E878
	[NativeHeader] // 0x0014E7D0-0x0014E878
	[UsedByNativeCode] // 0x0014E7D0-0x0014E878
	public sealed class Texture2D : Texture // TypeDefIndex: 2114
	{
		// Properties
		public TextureFormat format { [NativeName] /* 0x00156F94-0x00156FD4 */ get; } // 0x00ADA434-0x00ADA4C0 
		[StaticAccessor] // 0x00159C9C-0x00159CD8
		public static Texture2D whiteTexture { get; } // 0x00ADA4C0-0x00ADA550 
		public override bool isReadable { get; } // 0x00ADA5E0-0x00ADA670 
	
		// Constructors
		internal Texture2D(int width, int height, TextureFormat textureFormat, bool mipChain, bool linear, IntPtr nativeTex); // 0x00ADA13C-0x00ADA1C0
		public Texture2D(int width, int height, [UnityEngine.Internal.DefaultValue] /* 0x00159400-0x00159444 */ TextureFormat textureFormat, [UnityEngine.Internal.DefaultValue] /* 0x00159444-0x00159478 */ bool mipChain, [UnityEngine.Internal.DefaultValue] /* 0x00159478-0x001594AC */ bool linear); // 0x00ADA29C-0x00ADA328
		public Texture2D(int width, int height, TextureFormat textureFormat, bool mipChain); // 0x00ADA328-0x00ADA3B0
		public Texture2D(int width, int height); // 0x00ADA3B0-0x00ADA434
	
		// Methods
		[FreeFunction] // 0x00156FD4-0x0015701C
		private static bool Internal_CreateImpl([Writable] /* 0x001594AC-0x001594BC */ Texture2D mono, int w, int h, GraphicsFormat format, TextureCreationFlags flags, IntPtr nativeTex); // 0x00ADA550-0x00ADA5E0
		private static void Internal_Create([Writable] /* 0x001594BC-0x001594CC */ Texture2D mono, int w, int h, GraphicsFormat format, TextureCreationFlags flags, IntPtr nativeTex); // 0x00ADA1C0-0x00ADA29C
		[NativeName] // 0x0015701C-0x00157050
		private void ApplyImpl(bool updateMipmaps, bool makeNoLongerReadable); // 0x00ADA670-0x00ADA728
		[NativeName] // 0x00157050-0x00157088
		private void SetPixelImpl(int image, int x, int y, Color color); // 0x00ADA728-0x00ADA768
		[NativeName] // 0x00157088-0x001570C8
		private Color GetPixelBilinearImpl(int image, float x, float y); // 0x00ADA7F8-0x00ADA840
		[FreeFunction] // 0x001570C8-0x00157138
		private bool ResizeWithFormatImpl(int width, int height, TextureFormat format, bool hasMipMap); // 0x00ADA8D0-0x00ADA968
		[FreeFunction] // 0x00157138-0x001571A0
		private void ReadPixelsImpl(Rect source, int destX, int destY, bool recalculateMipMaps); // 0x00ADA968-0x00ADA9AC
		[FreeFunction] // 0x001571A0-0x00157208
		private void SetPixelsImpl(int x, int y, int w, int h, Color[] pixel, int miplevel, int frame); // 0x00ADAA44-0x00ADAAD4
		[FreeFunction] // 0x00157208-0x00157270
		private bool LoadRawTextureDataImplArray(byte[] data); // 0x00ADAAD4-0x00ADAB54
		[FreeFunction] // 0x00157270-0x001572D4
		public byte[] GetRawTextureData(); // 0x00ADAB54-0x00ADABE8
		[FreeFunction] // 0x001572D4-0x00157340
		public Color[] GetPixels(int x, int y, int blockWidth, int blockHeight, int miplevel); // 0x00ADABE8-0x00ADAC78
		[FreeFunction] // 0x00157340-0x001573AC
		public Color32[] GetPixels32(int miplevel); // 0x00ADAC78-0x00ADAD1C
		public Color32[] GetPixels32(); // 0x00ADAD1C-0x00ADAD24
		public static Texture2D CreateExternalTexture(int width, int height, TextureFormat format, bool mipChain, bool linear, IntPtr nativeTex); // 0x00ADAD24-0x00ADAE30
		public void SetPixel(int x, int y, Color color); // 0x00ADAE30-0x00ADAF0C
		public void SetPixels(int x, int y, int blockWidth, int blockHeight, Color[] colors, [UnityEngine.Internal.DefaultValue] /* 0x001594CC-0x001594FC */ int miplevel); // 0x00ADAF0C-0x00ADAFE4
		public void SetPixels(Color[] colors); // 0x00ADAFE4-0x00ADB04C
		public Color GetPixelBilinear(float x, float y); // 0x00ADB04C-0x00ADB134
		public void LoadRawTextureData(byte[] data); // 0x00ADB134-0x00ADB27C
		public void Apply([UnityEngine.Internal.DefaultValue] /* 0x001594FC-0x00159530 */ bool updateMipmaps, [UnityEngine.Internal.DefaultValue] /* 0x00159530-0x00159564 */ bool makeNoLongerReadable); // 0x00ADB27C-0x00ADB324
		public void Apply(); // 0x00ADB324-0x00ADB330
		public bool Resize(int width, int height, TextureFormat format, bool hasMipMap); // 0x00ADB330-0x00ADB3F0
		public void ReadPixels(Rect source, int destX, int destY, [UnityEngine.Internal.DefaultValue] /* 0x00159564-0x00159598 */ bool recalculateMipMaps); // 0x00ADB3F0-0x00ADB4C0
		[ExcludeFromDocs] // 0x001573AC-0x001573BC
		public void ReadPixels(Rect source, int destX, int destY); // 0x00ADB4C0-0x00ADB4F4
		public Color[] GetPixels(int miplevel); // 0x00ADB4F4-0x00ADB574
		public Color[] GetPixels(); // 0x00ADB574-0x00ADB57C
		private void SetPixelImpl_Injected(int image, int x, int y, ref Color color); // 0x00ADA768-0x00ADA7F8
		private void GetPixelBilinearImpl_Injected(int image, float x, float y, out Color ret); // 0x00ADA840-0x00ADA8D0
		private void ReadPixelsImpl_Injected(ref Rect source, int destX, int destY, bool recalculateMipMaps); // 0x00ADA9AC-0x00ADAA44
	}

	[ExcludeFromPreset] // 0x0014E878-0x0014E8DC
	[NativeHeader] // 0x0014E878-0x0014E8DC
	public sealed class Cubemap : Texture // TypeDefIndex: 2115
	{
		// Properties
		public override bool isReadable { get; } // 0x0081AB58-0x0081ABE8 
	
		// Constructors
		[RequiredByNativeCode] // 0x001573BC-0x001573CC
		public Cubemap(int width, GraphicsFormat format, TextureCreationFlags flags); // 0x0081A824-0x0081A8C8
		internal Cubemap(int width, TextureFormat textureFormat, bool mipChain, IntPtr nativeTex); // 0x0081A9A0-0x0081AA24
		public Cubemap(int width, TextureFormat textureFormat, bool mipChain); // 0x0081AA4C-0x0081AAC8
	
		// Methods
		[FreeFunction] // 0x001573CC-0x00157414
		private static bool Internal_CreateImpl([Writable] /* 0x00159598-0x001595A8 */ Cubemap mono, int ext, GraphicsFormat format, TextureCreationFlags flags, IntPtr nativeTex); // 0x0081AAC8-0x0081AB58
		private static void Internal_Create([Writable] /* 0x001595A8-0x001595B8 */ Cubemap mono, int ext, GraphicsFormat format, TextureCreationFlags flags, IntPtr nativeTex); // 0x0081A8C8-0x0081A9A0
	}

	[ExcludeFromPreset] // 0x0014E8DC-0x0014E93C
	[NativeHeader] // 0x0014E8DC-0x0014E93C
	public sealed class Texture3D : Texture // TypeDefIndex: 2116
	{
		// Properties
		public override bool isReadable { get; } // 0x00ADBA54-0x00ADBAE4 
	
		// Constructors
		[RequiredByNativeCode] // 0x00157414-0x00157424
		public Texture3D(int width, int height, int depth, GraphicsFormat format, TextureCreationFlags flags); // 0x00ADB894-0x00ADB8F8
		public Texture3D(int width, int height, int depth, TextureFormat textureFormat, bool mipChain); // 0x00ADB9D4-0x00ADBA54
	
		// Methods
		[FreeFunction] // 0x00157424-0x0015746C
		private static bool Internal_CreateImpl([Writable] /* 0x001595B8-0x001595C8 */ Texture3D mono, int w, int h, int d, GraphicsFormat format, TextureCreationFlags flags); // 0x00ADBAE4-0x00ADBB74
		private static void Internal_Create([Writable] /* 0x001595C8-0x001595D8 */ Texture3D mono, int w, int h, int d, GraphicsFormat format, TextureCreationFlags flags); // 0x00ADB8F8-0x00ADB9D4
	}

	[NativeHeader] // 0x0014E93C-0x0014E98C
	public sealed class Texture2DArray : Texture // TypeDefIndex: 2117
	{
		// Properties
		public override bool isReadable { get; } // 0x00ADB76C-0x00ADB804 
	
		// Constructors
		[RequiredByNativeCode] // 0x0015746C-0x0015747C
		public Texture2DArray(int width, int height, int depth, GraphicsFormat format, TextureCreationFlags flags); // 0x00ADB57C-0x00ADB5E0
		public Texture2DArray(int width, int height, int depth, TextureFormat textureFormat, bool mipChain, [UnityEngine.Internal.DefaultValue] /* 0x001595D8-0x0015960C */ bool linear); // 0x00ADB6BC-0x00ADB740
		public Texture2DArray(int width, int height, int depth, TextureFormat textureFormat, bool mipChain); // 0x00ADB740-0x00ADB76C
	
		// Methods
		[FreeFunction] // 0x0015747C-0x001574C8
		private static bool Internal_CreateImpl([Writable] /* 0x0015960C-0x0015961C */ Texture2DArray mono, int w, int h, int d, GraphicsFormat format, TextureCreationFlags flags); // 0x00ADB804-0x00ADB894
		private static void Internal_Create([Writable] /* 0x0015961C-0x0015962C */ Texture2DArray mono, int w, int h, int d, GraphicsFormat format, TextureCreationFlags flags); // 0x00ADB5E0-0x00ADB6BC
	}

	[NativeHeader] // 0x0014E98C-0x0014E9E0
	public sealed class CubemapArray : Texture // TypeDefIndex: 2118
	{
		// Properties
		public override bool isReadable { get; } // 0x0081ADD0-0x0081AE64 
	
		// Constructors
		[RequiredByNativeCode] // 0x001574C8-0x001574D8
		public CubemapArray(int width, int cubemapCount, GraphicsFormat format, TextureCreationFlags flags); // 0x0081ABE8-0x0081AC4C
		public CubemapArray(int width, int cubemapCount, TextureFormat textureFormat, bool mipChain, [UnityEngine.Internal.DefaultValue] /* 0x0015962C-0x00159660 */ bool linear); // 0x0081AD24-0x0081ADAC
		public CubemapArray(int width, int cubemapCount, TextureFormat textureFormat, bool mipChain); // 0x0081ADAC-0x0081ADD0
	
		// Methods
		[FreeFunction] // 0x001574D8-0x00157524
		private static bool Internal_CreateImpl([Writable] /* 0x00159660-0x00159670 */ CubemapArray mono, int ext, int count, GraphicsFormat format, TextureCreationFlags flags); // 0x0081AE64-0x0081AF90
		private static void Internal_Create([Writable] /* 0x00159670-0x00159680 */ CubemapArray mono, int ext, int count, GraphicsFormat format, TextureCreationFlags flags); // 0x0081AC4C-0x0081AD24
	}

	[NativeHeader] // 0x0014E9E0-0x0014EAC0
	[NativeHeader] // 0x0014E9E0-0x0014EAC0
	[NativeHeader] // 0x0014E9E0-0x0014EAC0
	[NativeHeader] // 0x0014E9E0-0x0014EAC0
	[UsedByNativeCode] // 0x0014E9E0-0x0014EAC0
	public class RenderTexture : Texture // TypeDefIndex: 2119
	{
		// Properties
		public override int width { get; set; } // 0x007209AC-0x00720A3C 0x00720A3C-0x00720AE0
		public override int height { get; set; } // 0x00720AE0-0x00720B70 0x00720B70-0x00720C14
		[NativeProperty] // 0x00159CD8-0x00159D10
		public RenderTextureFormat format { set; } // 0x00720750-0x007207D0
		public static RenderTexture active { set; } // 0x00720CBC-0x00720CC0
		public RenderBuffer colorBuffer { get; } // 0x00720E38-0x00720E74 
		public RenderBuffer depthBuffer { get; } // 0x00720E74-0x00720EB0 
		public int depth { [FreeFunction] /* 0x0015782C-0x0015788C */ set; } // 0x007206AC-0x00720750
		public RenderTextureDescriptor descriptor { get; } // 0x00720578-0x007205F4 
	
		// Constructors
		[RequiredByNativeCode] // 0x00157524-0x00157534
		protected internal RenderTexture(); // 0x0071FF34-0x0071FF3C
		public RenderTexture(RenderTextureDescriptor desc); // 0x0071FF3C-0x0071FFFC
		public RenderTexture(RenderTexture textureToCopy); // 0x00720380-0x00720578
		public RenderTexture(int width, int height, int depth, GraphicsFormat format); // 0x007205F4-0x007206AC
		public RenderTexture(int width, int height, int depth, [UnityEngine.Internal.DefaultValue] /* 0x00159680-0x001596C8 */ RenderTextureFormat format, [UnityEngine.Internal.DefaultValue] /* 0x001596C8-0x00159714 */ RenderTextureReadWrite readWrite); // 0x0072087C-0x00720960
		[ExcludeFromDocs] // 0x00157534-0x00157544
		public RenderTexture(int width, int height, int depth, RenderTextureFormat format); // 0x00720960-0x00720984
		[ExcludeFromDocs] // 0x00157544-0x00157554
		public RenderTexture(int width, int height, int depth); // 0x00720984-0x007209AC
	
		// Methods
		[FreeFunction] // 0x00157554-0x001575A4
		private static void SetActive(RenderTexture rt); // 0x00720C14-0x00720CBC
		[FreeFunction] // 0x001575A4-0x00157614
		private RenderBuffer GetColorBuffer(); // 0x00720CC0-0x00720CFC
		[FreeFunction] // 0x00157614-0x00157684
		private RenderBuffer GetDepthBuffer(); // 0x00720D7C-0x00720DB8
		internal void SetSRGBReadWrite(bool srgb); // 0x007207D0-0x0072087C
		[FreeFunction] // 0x00157684-0x001576D0
		private static void Internal_Create([Writable] /* 0x00159714-0x00159724 */ RenderTexture rt); // 0x007202B8-0x00720330
		[NativeName] // 0x001576D0-0x0015771C
		private void SetRenderTextureDescriptor(RenderTextureDescriptor desc); // 0x00720330-0x00720380
		[NativeName] // 0x0015771C-0x00157760
		private RenderTextureDescriptor GetDescriptor(); // 0x00720F30-0x00720F80
		[FreeFunction] // 0x00157760-0x001577C4
		private static RenderTexture GetTemporary_Internal(RenderTextureDescriptor desc); // 0x00721000-0x00721040
		[FreeFunction] // 0x001577C4-0x0015782C
		public static void ReleaseTemporary(RenderTexture temp); // 0x007210B8-0x007211F8
		private static void ValidateRenderTextureDesc(RenderTextureDescriptor desc); // 0x0071FFFC-0x007202B8
		public static RenderTexture GetTemporary(RenderTextureDescriptor desc); // 0x007211F8-0x007212AC
		private static RenderTexture GetTemporaryImpl(int width, int height, int depthBuffer = 0 /* Metadata: 0x0021A972 */, RenderTextureFormat format = RenderTextureFormat.Default /* Metadata: 0x0021A976 */, RenderTextureReadWrite readWrite = RenderTextureReadWrite.Default /* Metadata: 0x0021A97A */, int antiAliasing = 1 /* Metadata: 0x0021A97E */, RenderTextureMemoryless memorylessMode = RenderTextureMemoryless.None /* Metadata: 0x0021A982 */, VRTextureUsage vrUsage = VRTextureUsage.None /* Metadata: 0x0021A986 */, bool useDynamicScale = false /* Metadata: 0x0021A98A */); // 0x007212AC-0x0072136C
		[ExcludeFromDocs] // 0x0015788C-0x0015789C
		public static RenderTexture GetTemporary(int width, int height, int depthBuffer); // 0x0072136C-0x007213A0
		private void GetColorBuffer_Injected(out RenderBuffer ret); // 0x00720CFC-0x00720D7C
		private void GetDepthBuffer_Injected(out RenderBuffer ret); // 0x00720DB8-0x00720E38
		private void SetRenderTextureDescriptor_Injected(ref RenderTextureDescriptor desc); // 0x00720EB0-0x00720F30
		private void GetDescriptor_Injected(out RenderTextureDescriptor ret); // 0x00720F80-0x00721000
		private static RenderTexture GetTemporary_Internal_Injected(ref RenderTextureDescriptor desc); // 0x00721040-0x007210B8
	}

	public struct RenderTextureDescriptor // TypeDefIndex: 2120
	{
		// Fields
		[CompilerGenerated] // 0x001514B0-0x001514E4
		[DebuggerBrowsable] // 0x001514B0-0x001514E4
		private int <width>k__BackingField; // 0x00
		[CompilerGenerated] // 0x001514E4-0x00151518
		[DebuggerBrowsable] // 0x001514E4-0x00151518
		private int <height>k__BackingField; // 0x04
		[CompilerGenerated] // 0x00151518-0x0015154C
		[DebuggerBrowsable] // 0x00151518-0x0015154C
		private int <msaaSamples>k__BackingField; // 0x08
		[CompilerGenerated] // 0x0015154C-0x00151580
		[DebuggerBrowsable] // 0x0015154C-0x00151580
		private int <volumeDepth>k__BackingField; // 0x0C
		[CompilerGenerated] // 0x00151580-0x001515B4
		[DebuggerBrowsable] // 0x00151580-0x001515B4
		private RenderTextureFormat <colorFormat>k__BackingField; // 0x10
		private int _depthBufferBits; // 0x14
		private static int[] depthFormatBits; // 0x00
		[CompilerGenerated] // 0x001515B4-0x001515E8
		[DebuggerBrowsable] // 0x001515B4-0x001515E8
		private TextureDimension <dimension>k__BackingField; // 0x18
		[CompilerGenerated] // 0x001515E8-0x0015161C
		[DebuggerBrowsable] // 0x001515E8-0x0015161C
		private ShadowSamplingMode <shadowSamplingMode>k__BackingField; // 0x1C
		[CompilerGenerated] // 0x0015161C-0x00151650
		[DebuggerBrowsable] // 0x0015161C-0x00151650
		private VRTextureUsage <vrUsage>k__BackingField; // 0x20
		private RenderTextureCreationFlags _flags; // 0x24
		[CompilerGenerated] // 0x00151650-0x00151684
		[DebuggerBrowsable] // 0x00151650-0x00151684
		private RenderTextureMemoryless <memoryless>k__BackingField; // 0x28
	
		// Properties
		public int width { [CompilerGenerated] /* 0x0015789C-0x001578AC */ get; [CompilerGenerated] /* 0x001578AC-0x001578BC */ set; } // 0x00721408-0x00721410 0x00721410-0x00721418
		public int height { [CompilerGenerated] /* 0x001578BC-0x001578CC */ get; [CompilerGenerated] /* 0x001578CC-0x001578DC */ set; } // 0x00721418-0x00721420 0x00721420-0x00721428
		public int msaaSamples { [CompilerGenerated] /* 0x001578DC-0x001578EC */ get; [CompilerGenerated] /* 0x001578EC-0x001578FC */ set; } // 0x00721428-0x00721430 0x00721430-0x00721438
		public int volumeDepth { [CompilerGenerated] /* 0x001578FC-0x0015790C */ get; [CompilerGenerated] /* 0x0015790C-0x0015791C */ set; } // 0x00721438-0x00721440 0x00721440-0x00721448
		public RenderTextureFormat colorFormat { [CompilerGenerated] /* 0x0015791C-0x0015792C */ set; } // 0x00721448-0x00721450
		public int depthBufferBits { get; set; } // 0x00721450-0x00721458 0x00721458-0x00721474
		public TextureDimension dimension { [CompilerGenerated] /* 0x0015792C-0x0015793C */ set; } // 0x00721474-0x0072147C
		public ShadowSamplingMode shadowSamplingMode { [CompilerGenerated] /* 0x0015793C-0x0015794C */ set; } // 0x0072147C-0x00721484
		public VRTextureUsage vrUsage { [CompilerGenerated] /* 0x0015794C-0x0015795C */ set; } // 0x00721484-0x0072148C
		public RenderTextureMemoryless memoryless { [CompilerGenerated] /* 0x0015795C-0x0015796C */ set; } // 0x0072148C-0x00721494
		public bool sRGB { set; } // 0x007214AC-0x007214C4
		internal bool createdFromScript { set; } // 0x007214C4-0x007214DC
		internal bool useDynamicScale { set; } // 0x007214DC-0x007214F4
	
		// Constructors
		public RenderTextureDescriptor(int width, int height, RenderTextureFormat colorFormat, int depthBufferBits); // 0x007213A0-0x00721408
		static RenderTextureDescriptor(); // 0x007214F4-0x007215C8
	
		// Methods
		private void SetOrClearRenderTextureCreationFlag(bool value, RenderTextureCreationFlags flag); // 0x00721494-0x007214AC
	}

	[NativeHeader] // 0x0014EAC0-0x0014EB44
	[StaticAccessor] // 0x0014EAC0-0x0014EB44
	public class Time // TypeDefIndex: 2121
	{
		// Properties
		[NativeProperty] // 0x00159D10-0x00159D44
		public static float time { get; } // 0x00ADBB74-0x00ADBBF8 
		public static float deltaTime { get; } // 0x00ADBBF8-0x00ADBC80 
		public static float unscaledTime { get; } // 0x00ADBC80-0x00ADBD0C 
		public static float unscaledDeltaTime { get; } // 0x00ADBD0C-0x00ADBD9C 
		public static float fixedDeltaTime { get; } // 0x00ADBD9C-0x00ADBE28 
		public static float smoothDeltaTime { get; } // 0x00ADBE28-0x00ADBEB4 
		public static float timeScale { get; set; } // 0x00ADBEB4-0x00ADBF3C 0x00ADBF3C-0x00ADBFD4
		public static int frameCount { get; } // 0x00ADBFD4-0x00ADC05C 
		[NativeProperty] // 0x00159D44-0x00159D7C
		public static float realtimeSinceStartup { get; } // 0x00ADC05C-0x00ADC0F0 
	}

	public enum TouchScreenKeyboardType // TypeDefIndex: 2122
	{
		Default = 0,
		ASCIICapable = 1,
		NumbersAndPunctuation = 2,
		URL = 3,
		NumberPad = 4,
		PhonePad = 5,
		NamePhonePad = 6,
		EmailAddress = 7,
		NintendoNetworkAccount = 8,
		Social = 9,
		Search = 10
	}

	[UsedByNativeCode] // 0x0014EB44-0x0014EB54
	public class TrackedReference // TypeDefIndex: 2123
	{
		// Fields
		internal IntPtr m_Ptr; // 0x08
	
		// Methods
		public static bool operator ==(TrackedReference x, TrackedReference y); // 0x00ADCD3C-0x00ADCDC8
		public override bool Equals(object o); // 0x00ADCDC8-0x00ADCE68
		public override int GetHashCode(); // 0x00ADCE68-0x00ADCE74
	}

	[NativeHeader] // 0x0014EB54-0x0014EBB4
	internal sealed class UnhandledExceptionHandler // TypeDefIndex: 2124
	{
		// Fields
		[CompilerGenerated] // 0x001516E4-0x001516F4
		private static UnhandledExceptionEventHandler <>f__am$cache0; // 0x00
	
		// Methods
		[RequiredByNativeCode] // 0x0015796C-0x0015797C
		private static void RegisterUECatcher(); // 0x00ADFE54-0x00ADFF44
		[CompilerGenerated] // 0x0015797C-0x0015798C
		private static void <RegisterUECatcher>m__0(object sender, UnhandledExceptionEventArgs e); // 0x00ADFF44-0x00AE0030
	}

	[AttributeUsage] // 0x0014EBB4-0x0014EBE8
	public class UnityAPICompatibilityVersionAttribute : Attribute // TypeDefIndex: 2125
	{
		// Fields
		private string _version; // 0x08
	
		// Constructors
		public UnityAPICompatibilityVersionAttribute(string version); // 0x00AE0030-0x00AE0050
	}

	[Flags] // 0x0014EBE8-0x0014EBF8
	public enum HideFlags // TypeDefIndex: 2126
	{
		None = 0,
		HideInHierarchy = 1,
		HideInInspector = 2,
		DontSaveInEditor = 4,
		NotEditable = 8,
		DontSaveInBuild = 16,
		DontUnloadUnusedAsset = 32,
		DontSave = 52,
		HideAndDontSave = 61
	}

	[NativeHeader] // 0x0014EBF8-0x0014ECE0
	[NativeHeader] // 0x0014EBF8-0x0014ECE0
	[NativeHeader] // 0x0014EBF8-0x0014ECE0
	[RequiredByNativeCode] // 0x0014EBF8-0x0014ECE0
	public class Object // TypeDefIndex: 2127
	{
		// Fields
		private IntPtr m_CachedPtr; // 0x08
		internal static int OffsetOfInstanceIDInCPlusPlusObject; // 0x00
		private const string objectIsNullMessage = "The Object you want to instantiate is null."; // Metadata: 0x0021A9DB
		private const string cloneDestroyedMessage = "Instantiate failed because the clone was destroyed during creation. This can happen if DestroyImmediate is called in MonoBehaviour.Awake."; // Metadata: 0x0021AA0A
	
		// Properties
		public string name { get; set; } // 0x00710D68-0x00710DE8 0x00715220-0x007152A8
		public HideFlags hideFlags { get; set; } // 0x00715DD0-0x00715E5C 0x00712AAC-0x00712B58
	
		// Constructors
		public Object(); // 0x0070ACAC-0x0070ACB4
		static Object(); // 0x007161D4-0x00716314
	
		// Methods
		public int GetInstanceID(); // 0x00714C44-0x00714DC0
		public override int GetHashCode(); // 0x00714E64-0x00714E6C
		public override bool Equals(object other); // 0x00714E6C-0x00714FA4
		public static implicit operator bool(Object exists); // 0x0071508C-0x00715114
		private static bool CompareBaseObjects(Object lhs, Object rhs); // 0x00714FA4-0x0071508C
		private static bool IsNativeObjectAlive(Object o); // 0x00715114-0x00715180
		private IntPtr GetCachedPtr(); // 0x00715180-0x00715188
		[TypeInferenceRule] // 0x0015798C-0x001579A0
		public static Object Instantiate(Object original, Vector3 position, Quaternion rotation); // 0x00715358-0x0071554C
		[TypeInferenceRule] // 0x001579A0-0x001579B4
		public static Object Instantiate(Object original); // 0x007156A4-0x007157A8
		[TypeInferenceRule] // 0x001579B4-0x001579C8
		public static Object Instantiate(Object original, Transform parent, bool instantiateInWorldSpace); // 0x00715850-0x007159D0
		public static T Instantiate<T>(T original)
			where T : Object;
		public static T Instantiate<T>(T original, Vector3 position, Quaternion rotation)
			where T : Object;
		public static T Instantiate<T>(T original, Transform parent)
			where T : Object;
		public static T Instantiate<T>(T original, Transform parent, bool worldPositionStays)
			where T : Object;
		[NativeMethod] // 0x001579C8-0x00157A48
		public static void Destroy(Object obj, [UnityEngine.Internal.DefaultValue] /* 0x00159724-0x00159758 */ float t); // 0x00715A58-0x00715B08
		[ExcludeFromDocs] // 0x00157A48-0x00157A58
		public static void Destroy(Object obj); // 0x00715B08-0x00715B8C
		[NativeMethod] // 0x00157A58-0x00157AE0
		public static void DestroyImmediate(Object obj, [UnityEngine.Internal.DefaultValue] /* 0x00159758-0x0015978C */ bool allowDestroyingAssets); // 0x00715B8C-0x00715C0C
		[ExcludeFromDocs] // 0x00157AE0-0x00157AF0
		public static void DestroyImmediate(Object obj); // 0x00715C0C-0x00715C90
		[FreeFunction] // 0x00157AF0-0x00157B64
		[TypeInferenceRule] // 0x00157AF0-0x00157B64
		public static Object[] FindObjectsOfType(Type type); // 0x00715C90-0x00715D2C
		[FreeFunction] // 0x00157B64-0x00157BB4
		public static void DontDestroyOnLoad(Object target); // 0x00715D2C-0x00715DD0
		public static T[] FindObjectsOfType<T>()
			where T : Object;
		public static T FindObjectOfType<T>()
			where T : Object;
		private static void CheckNullArgument(object arg, string message); // 0x0071554C-0x007155E8
		[TypeInferenceRule] // 0x00157BB4-0x00157BC8
		public static Object FindObjectOfType(Type type); // 0x00715E5C-0x00715F00
		public override string ToString(); // 0x00715F00-0x00715F80
		public static bool operator ==(Object x, Object y); // 0x00712810-0x00712898
		public static bool operator !=(Object x, Object y); // 0x0071601C-0x007160A8
		[NativeMethod] // 0x00157BC8-0x00157C44
		private static int GetOffsetOfInstanceIDInCPlusPlusObject(); // 0x00714DC0-0x00714E64
		[FreeFunction] // 0x00157C44-0x00157C78
		private static Object Internal_CloneSingle(Object data); // 0x007157A8-0x00715850
		[FreeFunction] // 0x00157C78-0x00157CAC
		private static Object Internal_CloneSingleWithParent(Object data, Transform parent, bool worldPositionStays); // 0x007159D0-0x00715A58
		[FreeFunction] // 0x00157CAC-0x00157CEC
		private static Object Internal_InstantiateSingle(Object data, Vector3 pos, Quaternion rot); // 0x007155E8-0x007156A4
		[FreeFunction] // 0x00157CEC-0x00157D3C
		private static string ToString(Object obj); // 0x00715F80-0x0071601C
		[FreeFunction] // 0x00157D3C-0x00157D8C
		private static string GetName(Object obj); // 0x00715188-0x00715220
		[FreeFunction] // 0x00157D8C-0x00157DDC
		private static void SetName(Object obj, string name); // 0x007152A8-0x00715358
		[FreeFunction] // 0x00157DDC-0x00157E50
		[VisibleToOtherModules] // 0x00157DDC-0x00157E50
		internal static Object FindObjectFromInstanceID(int instanceID); // 0x00716130-0x007161D4
		private static Object Internal_InstantiateSingle_Injected(Object data, ref Vector3 pos, ref Quaternion rot); // 0x007160A8-0x00716130
	}
}

namespace UnityEngine.Events
{
	[Serializable]
	public enum PersistentListenerMode // TypeDefIndex: 2128
	{
		EventDefined = 0,
		Void = 1,
		Object = 2,
		Int = 3,
		Float = 4,
		String = 5,
		Bool = 6
	}

	[Serializable]
	internal class ArgumentCache : ISerializationCallbackReceiver // TypeDefIndex: 2129
	{
		// Fields
		[FormerlySerializedAs] // 0x001516F4-0x00151744
		[SerializeField] // 0x001516F4-0x00151744
		private UnityEngine.Object m_ObjectArgument; // 0x08
		[FormerlySerializedAs] // 0x00151744-0x001517A4
		[SerializeField] // 0x00151744-0x001517A4
		private string m_ObjectArgumentAssemblyTypeName; // 0x0C
		[FormerlySerializedAs] // 0x001517A4-0x001517F0
		[SerializeField] // 0x001517A4-0x001517F0
		private int m_IntArgument; // 0x10
		[FormerlySerializedAs] // 0x001517F0-0x00151840
		[SerializeField] // 0x001517F0-0x00151840
		private float m_FloatArgument; // 0x14
		[FormerlySerializedAs] // 0x00151840-0x00151890
		[SerializeField] // 0x00151840-0x00151890
		private string m_StringArgument; // 0x18
		[SerializeField] // 0x00151890-0x001518A0
		private bool m_BoolArgument; // 0x1C
	
		// Properties
		public UnityEngine.Object unityObjectArgument { get; } // 0x0081DA64-0x0081DA6C 
		public string unityObjectArgumentAssemblyTypeName { get; } // 0x0081DA6C-0x0081DA74 
		public int intArgument { get; } // 0x0081DA74-0x0081DA7C 
		public float floatArgument { get; } // 0x0081DA7C-0x0081DA84 
		public string stringArgument { get; } // 0x0081DA84-0x0081DA8C 
		public bool boolArgument { get; } // 0x0081DA8C-0x0081DA94 
	
		// Constructors
		public ArgumentCache(); // 0x0081DA5C-0x0081DA64
	
		// Methods
		private void TidyAssemblyTypeName(); // 0x0081DA94-0x0081DD5C
		public void OnBeforeSerialize(); // 0x0081DD5C-0x0081DD60
		public void OnAfterDeserialize(); // 0x0081DD60-0x0081DD64
	}

	internal abstract class BaseInvokableCall // TypeDefIndex: 2130
	{
		// Constructors
		protected BaseInvokableCall(); // 0x0081DD64-0x0081DD6C
		protected BaseInvokableCall(object target, MethodInfo function); // 0x0081DD6C-0x0081DE74
	
		// Methods
		public abstract void Invoke(object[] args);
		protected static void ThrowOnInvalidArg<T>(object arg);
		protected static bool AllowInvoke(Delegate @delegate); // 0x0081DE74-0x0081DF58
		public abstract bool Find(object targetObj, MethodInfo method);
	}

	internal class InvokableCall : BaseInvokableCall // TypeDefIndex: 2131
	{
		// Fields
		[CompilerGenerated] // 0x001518A0-0x001518D4
		[DebuggerBrowsable] // 0x001518A0-0x001518D4
		private UnityAction Delegate; // 0x08
	
		// Events
		private event UnityAction Delegate {
			add; // 0x0081E0AC-0x0081E1B8
			remove; // 0x0081E1E0-0x0081E2EC
		}
	
		// Constructors
		public InvokableCall(object target, MethodInfo theFunction); // 0x0081DF58-0x0081E0AC
		public InvokableCall(UnityAction action); // 0x0081E1B8-0x0081E1E0
	
		// Methods
		public override void Invoke(object[] args); // 0x0081E2EC-0x0081E328
		public void Invoke(); // 0x0081E328-0x0081E364
		public override bool Find(object targetObj, MethodInfo method); // 0x0081E364-0x0081E3E0
	}

	internal class InvokableCall<T1> : BaseInvokableCall // TypeDefIndex: 2132
	{
		// Fields
		[CompilerGenerated] // 0x001518D4-0x00151908
		[DebuggerBrowsable] // 0x001518D4-0x00151908
		private UnityAction<T1> Delegate;
	
		// Events
		protected event UnityAction<T1> Delegate {
			add; // 0x00000000-0x00000000
			remove; // 0x00000000-0x00000000
		}
	
		// Constructors
		public InvokableCall(object target, MethodInfo theFunction);
		public InvokableCall(UnityAction<T1> action);
	
		// Methods
		public override void Invoke(object[] args);
		public virtual void Invoke(T1 args0);
		public override bool Find(object targetObj, MethodInfo method);
	}

	internal class InvokableCall<T1, T2> : BaseInvokableCall // TypeDefIndex: 2133
	{
		// Fields
		[CompilerGenerated] // 0x00151908-0x0015193C
		[DebuggerBrowsable] // 0x00151908-0x0015193C
		private UnityAction<T1, T2> Delegate;
	
		// Constructors
		public InvokableCall(object target, MethodInfo theFunction);
	
		// Methods
		public override void Invoke(object[] args);
		public override bool Find(object targetObj, MethodInfo method);
	}

	internal class InvokableCall<T1, T2, T3> : BaseInvokableCall // TypeDefIndex: 2134
	{
		// Fields
		[CompilerGenerated] // 0x0015193C-0x00151970
		[DebuggerBrowsable] // 0x0015193C-0x00151970
		private UnityAction<T1, T2, T3> Delegate;
	
		// Constructors
		public InvokableCall(object target, MethodInfo theFunction);
	
		// Methods
		public override void Invoke(object[] args);
		public override bool Find(object targetObj, MethodInfo method);
	}

	internal class InvokableCall<T1, T2, T3, T4> : BaseInvokableCall // TypeDefIndex: 2135
	{
		// Fields
		[CompilerGenerated] // 0x00151970-0x001519A4
		[DebuggerBrowsable] // 0x00151970-0x001519A4
		private UnityAction<T1, T2, T3, T4> Delegate;
	
		// Constructors
		public InvokableCall(object target, MethodInfo theFunction);
	
		// Methods
		public override void Invoke(object[] args);
		public override bool Find(object targetObj, MethodInfo method);
	}

	internal class CachedInvokableCall<T> : InvokableCall<T> // TypeDefIndex: 2136
	{
		// Fields
		private readonly T m_Arg1;
	
		// Constructors
		public CachedInvokableCall(UnityEngine.Object target, MethodInfo theFunction, T argument);
	
		// Methods
		public override void Invoke(object[] args);
		public override void Invoke(T arg0);
	}

	public enum UnityEventCallState // TypeDefIndex: 2137
	{
		Off = 0,
		EditorAndRuntime = 1,
		RuntimeOnly = 2
	}

	[Serializable]
	internal class PersistentCall // TypeDefIndex: 2138
	{
		// Fields
		[FormerlySerializedAs] // 0x001519A4-0x001519F0
		[SerializeField] // 0x001519A4-0x001519F0
		private UnityEngine.Object m_Target; // 0x08
		[FormerlySerializedAs] // 0x001519F0-0x00151A3C
		[SerializeField] // 0x001519F0-0x00151A3C
		private string m_MethodName; // 0x0C
		[FormerlySerializedAs] // 0x00151A3C-0x00151A84
		[SerializeField] // 0x00151A3C-0x00151A84
		private PersistentListenerMode m_Mode; // 0x10
		[FormerlySerializedAs] // 0x00151A84-0x00151AD0
		[SerializeField] // 0x00151A84-0x00151AD0
		private ArgumentCache m_Arguments; // 0x14
		[FormerlySerializedAs] // 0x00151AD0-0x00151B44
		[FormerlySerializedAs] // 0x00151AD0-0x00151B44
		[SerializeField] // 0x00151AD0-0x00151B44
		private UnityEventCallState m_CallState; // 0x18
	
		// Properties
		public UnityEngine.Object target { get; } // 0x0081EA54-0x0081EA5C 
		public string methodName { get; } // 0x0081EA5C-0x0081EA64 
		public PersistentListenerMode mode { get; } // 0x0081EA64-0x0081EA6C 
		public ArgumentCache arguments { get; } // 0x0081EA6C-0x0081EA74 
	
		// Constructors
		public PersistentCall(); // 0x0081E9C8-0x0081EA54
	
		// Methods
		public bool IsValid(); // 0x0081EA74-0x0081EB20
		public BaseInvokableCall GetRuntimeCall(UnityEventBase theEvent); // 0x0081EB20-0x0081EDC4
		private static BaseInvokableCall GetObjectCall(UnityEngine.Object target, MethodInfo method, ArgumentCache arguments); // 0x0081EF90-0x0081F5AC
	}

	[Serializable]
	internal class PersistentCallGroup // TypeDefIndex: 2139
	{
		// Fields
		[FormerlySerializedAs] // 0x00151B44-0x00151B90
		[SerializeField] // 0x00151B44-0x00151B90
		private List<PersistentCall> m_Calls; // 0x08
	
		// Constructors
		public PersistentCallGroup(); // 0x0081F5AC-0x0081F638
	
		// Methods
		public void Initialize(InvokableCallList invokableList, UnityEventBase unityEventBase); // 0x0081F638-0x0081F7F8
	}

	internal class InvokableCallList // TypeDefIndex: 2140
	{
		// Fields
		private readonly List<BaseInvokableCall> m_PersistentCalls; // 0x08
		private readonly List<BaseInvokableCall> m_RuntimeCalls; // 0x0C
		private readonly List<BaseInvokableCall> m_ExecutingCalls; // 0x10
		private bool m_NeedsUpdate; // 0x14
	
		// Constructors
		public InvokableCallList(); // 0x0081E3E0-0x0081E4A4
	
		// Methods
		public void AddPersistentInvokableCall(BaseInvokableCall call); // 0x0081E4A4-0x0081E52C
		public void AddListener(BaseInvokableCall call); // 0x0081E52C-0x0081E5B4
		public void RemoveListener(object targetObj, MethodInfo method); // 0x0081E5B4-0x0081E7D0
		public void Clear(); // 0x0081E7D0-0x0081E850
		public void ClearPersistent(); // 0x0081E850-0x0081E8D0
		public List<BaseInvokableCall> PrepareInvoke(); // 0x0081E8D0-0x0081E9C8
	}

	[Serializable]
	[UsedByNativeCode] // 0x0014ECE0-0x0014ECF0
	public abstract class UnityEventBase : ISerializationCallbackReceiver // TypeDefIndex: 2141
	{
		// Fields
		private InvokableCallList m_Calls; // 0x08
		[FormerlySerializedAs] // 0x00151B90-0x00151BE8
		[SerializeField] // 0x00151B90-0x00151BE8
		private PersistentCallGroup m_PersistentCalls; // 0x0C
		[SerializeField] // 0x00151BE8-0x00151BF8
		private string m_TypeName; // 0x10
		private bool m_CallsDirty; // 0x14
	
		// Constructors
		protected UnityEventBase(); // 0x0081F850-0x0081F8F0
	
		// Methods
		void ISerializationCallbackReceiver.OnBeforeSerialize(); // 0x0081FF50-0x0081FF54
		void ISerializationCallbackReceiver.OnAfterDeserialize(); // 0x0081FF54-0x0081FF58
		protected abstract MethodInfo FindMethod_Impl(string name, object targetObj);
		internal abstract BaseInvokableCall GetDelegate(object target, MethodInfo theFunction);
		internal MethodInfo FindMethod(PersistentCall call); // 0x0081EDC4-0x0081EF90
		internal MethodInfo FindMethod(string name, object listener, PersistentListenerMode mode, Type argumentType); // 0x0081FF8C-0x008202D4
		private void DirtyPersistentCalls(); // 0x0081FF58-0x0081FF8C
		private void RebuildPersistentCallsIfNeeded(); // 0x008202D4-0x00820320
		internal void AddCall(BaseInvokableCall call); // 0x0081F990-0x0081F9C0
		protected void RemoveListener(object targetObj, MethodInfo method); // 0x00820320-0x00820358
		public void RemoveAllListeners(); // 0x00820358-0x00820380
		internal List<BaseInvokableCall> PrepareInvoke(); // 0x0081FF20-0x0081FF50
		public override string ToString(); // 0x00820380-0x00820430
		public static MethodInfo GetValidMethodInfo(object obj, string functionName, Type[] argumentTypes); // 0x0081FA38-0x0081FC80
	}

	public delegate void UnityAction(); // TypeDefIndex: 2142; 0x00814720-0x00814B5C

	[Serializable]
	public class UnityEvent : UnityEventBase // TypeDefIndex: 2143
	{
		// Fields
		private object[] m_InvokeArray; // 0x18
	
		// Constructors
		[RequiredByNativeCode] // 0x00157E50-0x00157E60
		public UnityEvent(); // 0x0081F844-0x0081F850
	
		// Methods
		public void AddListener(UnityAction call); // 0x0081F8F0-0x0081F914
		protected override MethodInfo FindMethod_Impl(string name, object targetObj); // 0x0081F9C0-0x0081FA38
		internal override BaseInvokableCall GetDelegate(object target, MethodInfo theFunction); // 0x0081FC80-0x0081FCF8
		private static BaseInvokableCall GetDelegate(UnityAction action); // 0x0081F914-0x0081F990
		public void Invoke(); // 0x0081FCF8-0x0081FF20
	}

	public delegate void UnityAction<T0>(T0 arg0); // TypeDefIndex: 2144; 0x00000000-0x00000000

	[Serializable]
	public abstract class UnityEvent<T0> : UnityEventBase // TypeDefIndex: 2145
	{
		// Fields
		private object[] m_InvokeArray;
	
		// Constructors
		[RequiredByNativeCode] // 0x00157E60-0x00157E70
		public UnityEvent();
	
		// Methods
		public void AddListener(UnityAction<T0> call);
		public void RemoveListener(UnityAction<T0> call);
		protected override MethodInfo FindMethod_Impl(string name, object targetObj);
		internal override BaseInvokableCall GetDelegate(object target, MethodInfo theFunction);
		private static BaseInvokableCall GetDelegate(UnityAction<T0> action);
		public void Invoke(T0 arg0);
	}

	public delegate void UnityAction<T0, T1>(T0 arg0, T1 arg1); // TypeDefIndex: 2146; 0x00000000-0x00000000

	[Serializable]
	public abstract class UnityEvent<T0, T1> : UnityEventBase // TypeDefIndex: 2147
	{
		// Fields
		private object[] m_InvokeArray;
	
		// Constructors
		[RequiredByNativeCode] // 0x00157E70-0x00157E80
		public UnityEvent();
	
		// Methods
		protected override MethodInfo FindMethod_Impl(string name, object targetObj);
		internal override BaseInvokableCall GetDelegate(object target, MethodInfo theFunction);
	}

	public delegate void UnityAction<T0, T1, T2>(T0 arg0, T1 arg1, T2 arg2); // TypeDefIndex: 2148; 0x00000000-0x00000000

	[Serializable]
	public abstract class UnityEvent<T0, T1, T2> : UnityEventBase // TypeDefIndex: 2149
	{
		// Fields
		private object[] m_InvokeArray;
	
		// Constructors
		[RequiredByNativeCode] // 0x00157E80-0x00157E90
		public UnityEvent();
	
		// Methods
		protected override MethodInfo FindMethod_Impl(string name, object targetObj);
		internal override BaseInvokableCall GetDelegate(object target, MethodInfo theFunction);
	}

	public delegate void UnityAction<T0, T1, T2, T3>(T0 arg0, T1 arg1, T2 arg2, T3 arg3); // TypeDefIndex: 2150; 0x00000000-0x00000000

	[Serializable]
	public abstract class UnityEvent<T0, T1, T2, T3> : UnityEventBase // TypeDefIndex: 2151
	{
		// Fields
		private object[] m_InvokeArray;
	
		// Constructors
		[RequiredByNativeCode] // 0x00157E90-0x00157EA0
		public UnityEvent();
	
		// Methods
		protected override MethodInfo FindMethod_Impl(string name, object targetObj);
		internal override BaseInvokableCall GetDelegate(object target, MethodInfo theFunction);
	}
}

namespace UnityEngine
{
	[NativeHeader] // 0x0014ECF0-0x0014ED48
	internal class UnityLogWriter : TextWriter // TypeDefIndex: 2152
	{
		// Constructors
		public UnityLogWriter(); // 0x00AE01A0-0x00AE0224
	
		// Methods
		[ThreadAndSerializationSafe] // 0x00157EA0-0x00157EB0
		public static void WriteStringToUnityLog(string s); // 0x00AE0224-0x00AE0230
		[FreeFunction] // 0x00157EB0-0x00157EE0
		private static void WriteStringToUnityLogImpl(string s); // 0x00AE0230-0x00AE02A8
		public static void Init(); // 0x00AE02A8-0x00AE0344
		public override void Write(char value); // 0x00AE0344-0x00AE0370
		public override void Write(string s); // 0x00AE0370-0x00AE0380
		public override void Write(char[] buffer, int index, int count); // 0x00AE0380-0x00AE03A8
	}

	internal sealed class UnitySynchronizationContext : SynchronizationContext // TypeDefIndex: 2153
	{
		// Fields
		private readonly Queue<WorkRequest> m_AsyncWorkQueue; // 0x08
		private readonly int m_MainThreadID; // 0x0C
	
		// Nested types
		private struct WorkRequest // TypeDefIndex: 2154
		{
			// Fields
			private readonly SendOrPostCallback m_DelagateCallback; // 0x00
			private readonly object m_DelagateState; // 0x04
			private readonly ManualResetEvent m_WaitHandle; // 0x08
	
			// Constructors
			public WorkRequest(SendOrPostCallback callback, object state, ManualResetEvent waitHandle = null); // 0x00AE0BC4-0x00AE0BD0
	
			// Methods
			public void Invoke(); // 0x00AE0BD0-0x00AE0BE0
		}
	
		// Constructors
		private UnitySynchronizationContext(int mainThreadID); // 0x00AE03A8-0x00AE0440
		private UnitySynchronizationContext(Queue<WorkRequest> queue, int mainThreadID); // 0x00AE0440-0x00AE0468
	
		// Methods
		public override void Send(SendOrPostCallback callback, object state); // 0x00AE0468-0x00AE06F0
		public override void Post(SendOrPostCallback callback, object state); // 0x00AE06F0-0x00AE07F4
		public override SynchronizationContext CreateCopy(); // 0x00AE07F4-0x00AE0874
		private void Exec(); // 0x00AE0874-0x00AE0A20
		[RequiredByNativeCode] // 0x00157EE0-0x00157EF0
		private static void InitializeSynchronizationContext(); // 0x00AE0A20-0x00AE0AD0
		[RequiredByNativeCode] // 0x00157EF0-0x00157F00
		private static void ExecuteTasks(); // 0x00AE0AD0-0x00AE0BC4
	}

	[NativeClass] // 0x0014ED48-0x0014EDE0
	[RequiredByNativeCode] // 0x0014ED48-0x0014EDE0
	public struct Vector2 : IEquatable<Vector2> // TypeDefIndex: 2155
	{
		// Fields
		public float x; // 0x00
		public float y; // 0x04
		private static readonly Vector2 zeroVector; // 0x00
		private static readonly Vector2 oneVector; // 0x08
		private static readonly Vector2 upVector; // 0x10
		private static readonly Vector2 downVector; // 0x18
		private static readonly Vector2 leftVector; // 0x20
		private static readonly Vector2 rightVector; // 0x28
		private static readonly Vector2 positiveInfinityVector; // 0x30
		private static readonly Vector2 negativeInfinityVector; // 0x38
		public const float kEpsilon = 1E-05f; // Metadata: 0x0021AABF
		public const float kEpsilonNormalSqrt = 1E-15f; // Metadata: 0x0021AAC3
	
		// Properties
		public float this[int index] { get => default; set {} } // 0x00AE0CAC-0x00AE0D7C 0x00AE0D7C-0x00AE0D84
		public Vector2 normalized { get; } // 0x00AE1118-0x00AE12D0 
		public float magnitude { get; } // 0x00AE1430-0x00AE1454 
		public float sqrMagnitude { get; } // 0x00AE1454-0x00AE1470 
		public static Vector2 zero { get; } // 0x00AE1044-0x00AE10E0 
		public static Vector2 one { get; } // 0x00AE1904-0x00AE19A0 
		public static Vector2 up { get; } // 0x00AE19A0-0x00AE1A3C 
		public static Vector2 right { get; } // 0x00AE1A3C-0x00AE1AD8 
	
		// Constructors
		public Vector2(float x, float y); // 0x00AE0BE0-0x00AE0CAC
		static Vector2(); // 0x00AE1AD8-0x00AE1BAC
	
		// Methods
		public static Vector2 Lerp(Vector2 a, Vector2 b, float t); // 0x00AE0D84-0x00AE0E58
		public static Vector2 Scale(Vector2 a, Vector2 b); // 0x00AE0E58-0x00AE1024
		public void Normalize(); // 0x00AE10E0-0x00AE1118
		public override string ToString(); // 0x00AE12D0-0x00AE1304
		public override int GetHashCode(); // 0x00AE1304-0x00AE13FC
		public override bool Equals(object other); // 0x00AE13FC-0x00AE1404
		public bool Equals(Vector2 other); // 0x00AE1404-0x00AE140C
		public static float Dot(Vector2 lhs, Vector2 rhs); // 0x00AE140C-0x00AE1430
		public static float Angle(Vector2 from, Vector2 to); // 0x00AE1470-0x00AE15FC
		public static float Distance(Vector2 a, Vector2 b); // 0x00AE15FC-0x00AE16BC
		public static Vector2 operator +(Vector2 a, Vector2 b); // 0x00AE16E0-0x00AE1704
		public static Vector2 operator -(Vector2 a, Vector2 b); // 0x00AE16BC-0x00AE16E0
		public static Vector2 operator *(Vector2 a, Vector2 b); // 0x00AE1704-0x00AE1728
		public static Vector2 operator /(Vector2 a, Vector2 b); // 0x00AE1728-0x00AE174C
		public static Vector2 operator *(Vector2 a, float d); // 0x00AE174C-0x00AE176C
		public static Vector2 operator *(float d, Vector2 a); // 0x00AE176C-0x00AE178C
		public static Vector2 operator /(Vector2 a, float d); // 0x00AE1024-0x00AE1044
		public static bool operator ==(Vector2 lhs, Vector2 rhs); // 0x00AE178C-0x00AE184C
		public static bool operator !=(Vector2 lhs, Vector2 rhs); // 0x00AE184C-0x00AE18F0
		public static implicit operator Vector2(Vector3 v); // 0x00AE18F0-0x00AE18F8
		public static implicit operator Vector3(Vector2 v); // 0x00AE18F8-0x00AE1904
	}

	[NativeClass] // 0x0014EDE0-0x0014EEB0
	[NativeHeader] // 0x0014EDE0-0x0014EEB0
	[RequiredByNativeCode] // 0x0014EDE0-0x0014EEB0
	public struct Vector4 : IEquatable<Vector4> // TypeDefIndex: 2156
	{
		// Fields
		public float x; // 0x00
		public float y; // 0x04
		public float z; // 0x08
		public float w; // 0x0C
		private static readonly Vector4 zeroVector; // 0x00
		private static readonly Vector4 oneVector; // 0x10
		private static readonly Vector4 positiveInfinityVector; // 0x20
		private static readonly Vector4 negativeInfinityVector; // 0x30
	
		// Properties
		public float this[int index] { get => default; set {} } // 0x00AE35E0-0x00AE36D8 0x00AE36D8-0x00AE372C
		public float magnitude { get; } // 0x00AE39B4-0x00AE3A64 
		public float sqrMagnitude { get; } // 0x00AE3A64-0x00AE3A6C 
		public static Vector4 zero { get; } // 0x00AE3A6C-0x00AE3B00 
	
		// Constructors
		public Vector4(float x, float y, float z, float w); // 0x00AE34E4-0x00AE35E0
		static Vector4(); // 0x00AE4028-0x00AE40E0
	
		// Methods
		public override int GetHashCode(); // 0x00AE372C-0x00AE384C
		public override bool Equals(object other); // 0x00AE384C-0x00AE3854
		public bool Equals(Vector4 other); // 0x00AE3854-0x00AE3878
		public static float Dot(Vector4 a, Vector4 b); // 0x00AE3878-0x00AE39B4
		public static Vector4 operator +(Vector4 a, Vector4 b); // 0x00AE3B00-0x00AE3B44
		public static Vector4 operator -(Vector4 a, Vector4 b); // 0x00AE3B44-0x00AE3B88
		public static Vector4 operator *(Vector4 a, float d); // 0x00AE3B88-0x00AE3BC0
		public static Vector4 operator /(Vector4 a, float d); // 0x00AE3BC0-0x00AE3BF8
		public static bool operator ==(Vector4 lhs, Vector4 rhs); // 0x00AE3BF8-0x00AE3CF8
		public static implicit operator Vector3(Vector4 v); // 0x00AE3DAC-0x00AE4020
		public override string ToString(); // 0x00AE4020-0x00AE4028
		public static float SqrMagnitude(Vector4 a); // 0x00AE3CF8-0x00AE3DAC
	}

	[RequiredByNativeCode] // 0x0014EEB0-0x0014EEC0
	public sealed class WaitForEndOfFrame : YieldInstruction // TypeDefIndex: 2157
	{
		// Constructors
		public WaitForEndOfFrame(); // 0x00AE40E0-0x00AE40E8
	}

	[RequiredByNativeCode] // 0x0014EEC0-0x0014EED0
	public sealed class WaitForFixedUpdate : YieldInstruction // TypeDefIndex: 2158
	{
	}

	[RequiredByNativeCode] // 0x0014EED0-0x0014EEE0
	public sealed class WaitForSeconds : YieldInstruction // TypeDefIndex: 2159
	{
		// Fields
		internal float m_Seconds; // 0x08
	
		// Constructors
		public WaitForSeconds(float seconds); // 0x00AE410C-0x00AE412C
	}

	public class WaitForSecondsRealtime : CustomYieldInstruction // TypeDefIndex: 2160
	{
		// Fields
		[CompilerGenerated] // 0x00151BF8-0x00151C2C
		[DebuggerBrowsable] // 0x00151BF8-0x00151C2C
		private float <waitTime>k__BackingField; // 0x08
		private float m_WaitUntilTime; // 0x0C
	
		// Properties
		public float waitTime { [CompilerGenerated] /* 0x00157F00-0x00157F10 */ get; [CompilerGenerated] /* 0x00157F10-0x00157F20 */ set; } // 0x00AE4164-0x00AE416C 0x00AE415C-0x00AE4164
		public override bool keepWaiting { get; } // 0x00AE416C-0x00AE41DC 
	
		// Constructors
		public WaitForSecondsRealtime(float time); // 0x00AE412C-0x00AE415C
	}

	[UsedByNativeCode] // 0x0014EEE0-0x0014EEF0
	public class YieldInstruction // TypeDefIndex: 2161
	{
		// Constructors
		public YieldInstruction(); // 0x00AE40E8-0x00AE410C
	}
}

namespace UnityEngine.Assertions
{
	[DebuggerStepThrough] // 0x0014EEF0-0x0014EF00
	public static class Assert // TypeDefIndex: 2162
	{
		// Fields
		public static bool raiseExceptions; // 0x00
	
		// Constructors
		static Assert(); // 0x00813444-0x008134AC
	
		// Methods
		private static void Fail(string message, string userMessage); // 0x00812CAC-0x00812E94
		[Conditional] // 0x00157F20-0x00157F54
		public static void AreEqual<T>(T expected, T actual, string message);
		[Conditional] // 0x00157F54-0x00157F88
		public static void AreEqual<T>(T expected, T actual, string message, IEqualityComparer<T> comparer);
		[Conditional] // 0x00157F88-0x00157FBC
		public static void AreEqual(UnityEngine.Object expected, UnityEngine.Object actual, string message); // 0x00813038-0x0081311C
		[Conditional] // 0x00157FBC-0x00157FF0
		public static void AreEqual(int expected, int actual); // 0x008133A0-0x00813444
	}

	public class AssertionException : Exception // TypeDefIndex: 2163
	{
		// Fields
		private string m_UserMessage; // 0x44
	
		// Properties
		public override string Message { get; } // 0x008134AC-0x00813558 
	
		// Constructors
		public AssertionException(string message, string userMessage); // 0x00812E94-0x00812F28
	}

	internal class AssertionMessageUtil // TypeDefIndex: 2164
	{
		// Methods
		public static string GetMessage(string failureMessage); // 0x00813558-0x008136A8
		public static string GetMessage(string failureMessage, string expected); // 0x008136A8-0x00813948
		public static string GetEqualityMessage(object actual, object expected, bool expectEqual); // 0x0081311C-0x008133A0
	}
}

namespace UnityEngine.Experimental.Rendering
{
	[NativeHeader] // 0x0014EF00-0x0014EF34
	internal class BuiltinRuntimeReflectionSystem : IScriptableRuntimeReflectionSystem // TypeDefIndex: 2165
	{
		// Constructors
		public BuiltinRuntimeReflectionSystem(); // 0x00820BF4-0x00820BFC
	
		// Methods
		public bool TickRealtimeProbes(); // 0x00820BFC-0x00820C00
		public void Dispose(); // 0x00820C74-0x00820C78
		private void Dispose(bool disposing); // 0x00820C78-0x00820C7C
		[StaticAccessor] // 0x00157FF0-0x00158044
		private static bool BuiltinUpdate(); // 0x00820C00-0x00820C74
		[RequiredByNativeCode] // 0x00158044-0x00158054
		private static BuiltinRuntimeReflectionSystem Internal_BuiltinRuntimeReflectionSystem_New(); // 0x00820C7C-0x00820CE8
	}

	public interface IScriptableRuntimeReflectionSystem : IDisposable // TypeDefIndex: 2166
	{
		// Methods
		bool TickRealtimeProbes();
	}

	[NativeHeader] // 0x0014EF34-0x0014EFA8
	[RequiredByNativeCode] // 0x0014EF34-0x0014EFA8
	public static class ScriptableRuntimeReflectionSystemSettings // TypeDefIndex: 2167
	{
		// Fields
		private static ScriptableRuntimeReflectionSystemWrapper s_Instance; // 0x00
	
		// Properties
		private static IScriptableRuntimeReflectionSystem Internal_ScriptableRuntimeReflectionSystemSettings_system { [RequiredByNativeCode] /* 0x00158054-0x00158064 */ set; } // 0x00821BA0-0x00821DE4
		private static ScriptableRuntimeReflectionSystemWrapper Internal_ScriptableRuntimeReflectionSystemSettings_instance { [RequiredByNativeCode] /* 0x00158064-0x00158074 */ get; } // 0x00821DF4-0x00821E80 
	
		// Constructors
		static ScriptableRuntimeReflectionSystemSettings(); // 0x00821EF4-0x00821F74
	
		// Methods
		[RuntimeInitializeOnLoadMethod] // 0x00158074-0x001580E0
		[StaticAccessor] // 0x00158074-0x001580E0
		private static void ScriptingDirtyReflectionSystemInstance(); // 0x00821E80-0x00821EF4
	}

	[RequiredByNativeCode] // 0x0014EFA8-0x0014EFB8
	internal class ScriptableRuntimeReflectionSystemWrapper // TypeDefIndex: 2168
	{
		// Fields
		[CompilerGenerated] // 0x00151C2C-0x00151C60
		[DebuggerBrowsable] // 0x00151C2C-0x00151C60
		private IScriptableRuntimeReflectionSystem <implementation>k__BackingField; // 0x08
	
		// Properties
		internal IScriptableRuntimeReflectionSystem implementation { [CompilerGenerated] /* 0x001580E0-0x001580F0 */ get; [CompilerGenerated] /* 0x001580F0-0x00158100 */ set; } // 0x00821DE4-0x00821DEC 0x00821DEC-0x00821DF4
	
		// Constructors
		public ScriptableRuntimeReflectionSystemWrapper(); // 0x00821F74-0x00821F7C
	
		// Methods
		[RequiredByNativeCode] // 0x00158100-0x00158110
		private bool Internal_ScriptableRuntimeReflectionSystemWrapper_TickRealtimeProbes(); // 0x00821F7C-0x00822058
	}
}

namespace Unity.Collections
{
	[AttributeUsage] // 0x0014EFB8-0x0014EFEC
	[RequiredByNativeCode] // 0x0014EFB8-0x0014EFEC
	public sealed class ReadOnlyAttribute : Attribute // TypeDefIndex: 2169
	{
	}

	[AttributeUsage] // 0x0014EFEC-0x0014F020
	[RequiredByNativeCode] // 0x0014EFEC-0x0014F020
	public sealed class WriteOnlyAttribute : Attribute // TypeDefIndex: 2170
	{
	}

	[AttributeUsage] // 0x0014F020-0x0014F054
	[RequiredByNativeCode] // 0x0014F020-0x0014F054
	public sealed class DeallocateOnJobCompletionAttribute : Attribute // TypeDefIndex: 2171
	{
	}

	[AttributeUsage] // 0x0014F054-0x0014F088
	[RequiredByNativeCode] // 0x0014F054-0x0014F088
	public sealed class NativeFixedLengthAttribute : Attribute // TypeDefIndex: 2172
	{
	}

	[AttributeUsage] // 0x0014F088-0x0014F0BC
	[RequiredByNativeCode] // 0x0014F088-0x0014F0BC
	public sealed class NativeMatchesParallelForLengthAttribute : Attribute // TypeDefIndex: 2173
	{
	}

	[AttributeUsage] // 0x0014F0BC-0x0014F0F0
	[RequiredByNativeCode] // 0x0014F0BC-0x0014F0F0
	public sealed class NativeDisableParallelForRestrictionAttribute : Attribute // TypeDefIndex: 2174
	{
	}
}

namespace Unity.Collections.LowLevel.Unsafe
{
	[AttributeUsage] // 0x0014F0F0-0x0014F124
	[RequiredByNativeCode] // 0x0014F0F0-0x0014F124
	public sealed class NativeContainerAttribute : Attribute // TypeDefIndex: 2175
	{
	}

	[AttributeUsage] // 0x0014F124-0x0014F158
	[RequiredByNativeCode] // 0x0014F124-0x0014F158
	public sealed class NativeContainerIsReadOnlyAttribute : Attribute // TypeDefIndex: 2176
	{
	}

	[AttributeUsage] // 0x0014F158-0x0014F18C
	[RequiredByNativeCode] // 0x0014F158-0x0014F18C
	public sealed class NativeContainerIsAtomicWriteOnlyAttribute : Attribute // TypeDefIndex: 2177
	{
	}

	[AttributeUsage] // 0x0014F18C-0x0014F1C0
	[RequiredByNativeCode] // 0x0014F18C-0x0014F1C0
	public sealed class NativeContainerSupportsMinMaxWriteRestrictionAttribute : Attribute // TypeDefIndex: 2178
	{
	}

	[AttributeUsage] // 0x0014F1C0-0x0014F1F4
	[RequiredByNativeCode] // 0x0014F1C0-0x0014F1F4
	public sealed class NativeContainerSupportsDeallocateOnJobCompletionAttribute : Attribute // TypeDefIndex: 2179
	{
	}

	[AttributeUsage] // 0x0014F1F4-0x0014F228
	[RequiredByNativeCode] // 0x0014F1F4-0x0014F228
	public sealed class NativeContainerSupportsDeferredConvertListToArray : Attribute // TypeDefIndex: 2180
	{
	}

	[AttributeUsage] // 0x0014F228-0x0014F25C
	[RequiredByNativeCode] // 0x0014F228-0x0014F25C
	public sealed class NativeSetThreadIndexAttribute : Attribute // TypeDefIndex: 2181
	{
	}

	[AttributeUsage] // 0x0014F25C-0x0014F2DC
	[Obsolete] // 0x0014F25C-0x0014F2DC
	[RequiredByNativeCode] // 0x0014F25C-0x0014F2DC
	public sealed class NativeContainerNeedsThreadIndexAttribute : Attribute // TypeDefIndex: 2182
	{
	}

	[AttributeUsage] // 0x0014F2DC-0x0014F310
	[RequiredByNativeCode] // 0x0014F2DC-0x0014F310
	public sealed class NativeDisableUnsafePtrRestrictionAttribute : Attribute // TypeDefIndex: 2183
	{
	}

	[AttributeUsage] // 0x0014F310-0x0014F344
	[RequiredByNativeCode] // 0x0014F310-0x0014F344
	public sealed class NativeDisableContainerSafetyRestrictionAttribute : Attribute // TypeDefIndex: 2184
	{
	}

	[AttributeUsage] // 0x0014F344-0x0014F378
	[RequiredByNativeCode] // 0x0014F344-0x0014F378
	public sealed class NativeSetClassTypeToNullOnScheduleAttribute : Attribute // TypeDefIndex: 2185
	{
	}
}

namespace UnityEngine.Experimental.Playables
{
	[NativeHeader] // 0x0014F378-0x0014F49C
	[NativeHeader] // 0x0014F378-0x0014F49C
	[NativeHeader] // 0x0014F378-0x0014F49C
	[RequiredByNativeCode] // 0x0014F378-0x0014F49C
	[StaticAccessor] // 0x0014F378-0x0014F49C
	public struct CameraPlayable : IPlayable, IEquatable<CameraPlayable> // TypeDefIndex: 2186
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
	
		// Methods
		public PlayableHandle GetHandle(); // 0x0082099C-0x00820A5C
		public bool Equals(CameraPlayable other); // 0x00820A5C-0x00820A64
	}
}

namespace UnityEngine.Playables
{
	[RequiredByNativeCode] // 0x0014F49C-0x0014F4AC
	public interface INotificationReceiver // TypeDefIndex: 2187
	{
	}

	public interface IPlayable // TypeDefIndex: 2188
	{
	}

	public interface IPlayableBehaviour // TypeDefIndex: 2189
	{
	}

	public interface IPlayableOutput // TypeDefIndex: 2190
	{
	}
}

namespace UnityEngine.Experimental.Playables
{
	[NativeHeader] // 0x0014F4AC-0x0014F5D0
	[NativeHeader] // 0x0014F4AC-0x0014F5D0
	[NativeHeader] // 0x0014F4AC-0x0014F5D0
	[RequiredByNativeCode] // 0x0014F4AC-0x0014F5D0
	[StaticAccessor] // 0x0014F4AC-0x0014F5D0
	public struct MaterialEffectPlayable : IPlayable, IEquatable<MaterialEffectPlayable> // TypeDefIndex: 2191
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
	
		// Methods
		public PlayableHandle GetHandle(); // 0x00820A64-0x00820B24
		public bool Equals(MaterialEffectPlayable other); // 0x00820B24-0x00820B2C
	}
}

namespace UnityEngine.Playables
{
	[RequiredByNativeCode] // 0x0014F5D0-0x0014F5E0
	public struct Playable : IPlayable, IEquatable<Playable> // TypeDefIndex: 2192
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
		private static readonly Playable m_NullPlayable; // 0x00
	
		// Properties
		public static Playable Null { get; } // 0x0071694C-0x007169E8 
	
		// Constructors
		[VisibleToOtherModules] // 0x00158110-0x00158120
		internal Playable(PlayableHandle handle); // 0x00716940-0x0071694C
		static Playable(); // 0x00716B4C-0x00716BEC
	
		// Methods
		public PlayableHandle GetHandle(); // 0x007169E8-0x00716AA0
		public bool Equals(Playable other); // 0x00716B44-0x00716B4C
	}

	public interface IPlayableAsset // TypeDefIndex: 2193
	{
	}

	[Serializable]
	[AssetFileNameExtension] // 0x0014F5E0-0x0014F688
	[RequiredByNativeCode] // 0x0014F5E0-0x0014F688
	public abstract class PlayableAsset : ScriptableObject, IPlayableAsset // TypeDefIndex: 2194
	{
		// Properties
		public virtual double duration { get; } // 0x00716C8C-0x00716D1C 
		public virtual IEnumerable<PlayableBinding> outputs { get; } // 0x00716D1C-0x00716DA8 
	
		// Constructors
		protected PlayableAsset(); // 0x00716C88-0x00716C8C
	
		// Methods
		public abstract Playable CreatePlayable(PlayableGraph graph, GameObject owner);
		[RequiredByNativeCode] // 0x00158120-0x00158130
		internal static void Internal_CreatePlayable(PlayableAsset asset, PlayableGraph graph, GameObject go, IntPtr ptr); // 0x00716DA8-0x00716ED8
		[RequiredByNativeCode] // 0x00158130-0x00158140
		internal static void Internal_GetPlayableAssetDuration(PlayableAsset asset, IntPtr ptrToDouble); // 0x00716ED8-0x00716F30
	}

	[Serializable]
	[RequiredByNativeCode] // 0x0014F688-0x0014F698
	public abstract class PlayableBehaviour : IPlayableBehaviour, ICloneable // TypeDefIndex: 2195
	{
		// Constructors
		public PlayableBehaviour(); // 0x00716F30-0x00716F38
	
		// Methods
		public virtual object Clone(); // 0x00716F38-0x00716F9C
	}

	public struct PlayableBinding // TypeDefIndex: 2196
	{
		// Fields
		private string m_StreamName; // 0x00
		private UnityEngine.Object m_SourceObject; // 0x04
		private Type m_SourceBindingType; // 0x08
		private CreateOutputMethod m_CreateOutputMethod; // 0x0C
		public static readonly PlayableBinding[] None; // 0x00
		public static readonly double DefaultDuration; // 0x08
	
		// Nested types
		[VisibleToOtherModules] // 0x0014F698-0x0014F6A8
		internal delegate PlayableOutput CreateOutputMethod(PlayableGraph graph, string name); // TypeDefIndex: 2197; 0x00717088-0x00717570
	
		// Constructors
		static PlayableBinding(); // 0x00716F9C-0x00717074
	}

	[NativeHeader] // 0x0014F6A8-0x0014F794
	[NativeHeader] // 0x0014F6A8-0x0014F794
	[NativeHeader] // 0x0014F6A8-0x0014F794
	[NativeHeader] // 0x0014F6A8-0x0014F794
	[UsedByNativeCode] // 0x0014F6A8-0x0014F794
	public struct PlayableGraph // TypeDefIndex: 2198
	{
		// Fields
		internal IntPtr m_Handle; // 0x00
		internal uint m_Version; // 0x04
	}

	[NativeHeader] // 0x0014F794-0x0014F858
	[NativeHeader] // 0x0014F794-0x0014F858
	[NativeHeader] // 0x0014F794-0x0014F858
	[UsedByNativeCode] // 0x0014F794-0x0014F858
	public struct PlayableHandle : IEquatable<PlayableHandle> // TypeDefIndex: 2199
	{
		// Fields
		internal IntPtr m_Handle; // 0x00
		internal uint m_Version; // 0x04
		private static readonly PlayableHandle m_Null; // 0x00
	
		// Properties
		public static PlayableHandle Null { get; } // 0x00716BEC-0x00716C88 
	
		// Constructors
		static PlayableHandle(); // 0x007179F8-0x00717A64
	
		// Methods
		[VisibleToOtherModules] // 0x00158140-0x00158150
		internal bool IsPlayableOfType<T>();
		public static bool operator ==(PlayableHandle x, PlayableHandle y); // 0x00716AA0-0x00716B44
		public override bool Equals(object p); // 0x007177B8-0x007177C0
		public bool Equals(PlayableHandle other); // 0x007177C0-0x007177C8
		public override int GetHashCode(); // 0x007177C8-0x00717878
		internal static bool CompareVersion(PlayableHandle lhs, PlayableHandle rhs); // 0x00717658-0x007177B8
		[VisibleToOtherModules] // 0x00158150-0x00158160
		internal bool IsValid(); // 0x007178F0-0x00717978
		[FreeFunction] // 0x00158160-0x001581E8
		[VisibleToOtherModules] // 0x00158160-0x001581E8
		internal Type GetPlayableType(); // 0x007179F0-0x007179F8
		private static bool IsValid_Injected(ref PlayableHandle _unity_self); // 0x00717878-0x007178F0
		private static Type GetPlayableType_Injected(ref PlayableHandle _unity_self); // 0x00717978-0x007179F0
	}

	[RequiredByNativeCode] // 0x0014F858-0x0014F868
	public struct PlayableOutput : IPlayableOutput, IEquatable<PlayableOutput> // TypeDefIndex: 2200
	{
		// Fields
		private PlayableOutputHandle m_Handle; // 0x00
		private static readonly PlayableOutput m_NullPlayableOutput; // 0x00
	
		// Constructors
		[VisibleToOtherModules] // 0x001581E8-0x001581F8
		internal PlayableOutput(PlayableOutputHandle handle); // 0x00717A64-0x00717A70
		static PlayableOutput(); // 0x00717BD4-0x00717C74
	
		// Methods
		public PlayableOutputHandle GetHandle(); // 0x00717A70-0x00717B28
		public bool Equals(PlayableOutput other); // 0x00717BCC-0x00717BD4
	}

	[NativeHeader] // 0x0014F868-0x0014F930
	[NativeHeader] // 0x0014F868-0x0014F930
	[NativeHeader] // 0x0014F868-0x0014F930
	[UsedByNativeCode] // 0x0014F868-0x0014F930
	public struct PlayableOutputHandle : IEquatable<PlayableOutputHandle> // TypeDefIndex: 2201
	{
		// Fields
		internal IntPtr m_Handle; // 0x00
		internal uint m_Version; // 0x04
		private static readonly PlayableOutputHandle m_Null; // 0x00
	
		// Properties
		public static PlayableOutputHandle Null { get; } // 0x00717C74-0x00717D10 
	
		// Constructors
		static PlayableOutputHandle(); // 0x00717EB0-0x00717F1C
	
		// Methods
		public override int GetHashCode(); // 0x00717D10-0x00717D40
		public static bool operator ==(PlayableOutputHandle lhs, PlayableOutputHandle rhs); // 0x00717B28-0x00717BCC
		public override bool Equals(object p); // 0x00717EA0-0x00717EA8
		public bool Equals(PlayableOutputHandle other); // 0x00717EA8-0x00717EB0
		internal static bool CompareVersion(PlayableOutputHandle lhs, PlayableOutputHandle rhs); // 0x00717D40-0x00717EA0
	}

	[RequiredByNativeCode] // 0x0014F930-0x0014F940
	public struct ScriptPlayableOutput : IPlayableOutput // TypeDefIndex: 2202
	{
		// Fields
		private PlayableOutputHandle m_Handle; // 0x00
	}
}

namespace UnityEngine.Experimental.Playables
{
	[NativeHeader] // 0x0014F940-0x0014FA48
	[NativeHeader] // 0x0014F940-0x0014FA48
	[NativeHeader] // 0x0014F940-0x0014FA48
	[RequiredByNativeCode] // 0x0014F940-0x0014FA48
	[StaticAccessor] // 0x0014F940-0x0014FA48
	public struct TextureMixerPlayable : IPlayable, IEquatable<TextureMixerPlayable> // TypeDefIndex: 2203
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
	
		// Methods
		public PlayableHandle GetHandle(); // 0x00820B2C-0x00820BEC
		public bool Equals(TextureMixerPlayable other); // 0x00820BEC-0x00820BF4
	}

	[NativeHeader] // 0x0014FA48-0x0014FB58
	[NativeHeader] // 0x0014FA48-0x0014FB58
	[NativeHeader] // 0x0014FA48-0x0014FB58
	[RequiredByNativeCode] // 0x0014FA48-0x0014FB58
	[StaticAccessor] // 0x0014FA48-0x0014FB58
	public struct TexturePlayableOutput : IPlayableOutput // TypeDefIndex: 2204
	{
		// Fields
		private PlayableOutputHandle m_Handle; // 0x00
	}
}

namespace UnityEngine.Internal
{
	[Serializable]
	[AttributeUsage] // 0x0014FB58-0x0014FB6C
	public class DefaultValueAttribute : Attribute // TypeDefIndex: 2205
	{
		// Fields
		private object DefaultValue; // 0x08
	
		// Properties
		public object Value { get; } // 0x0070980C-0x00709814 
	
		// Constructors
		public DefaultValueAttribute(string value); // 0x007097EC-0x0070980C
	
		// Methods
		public override bool Equals(object obj); // 0x00709814-0x00709908
		public override int GetHashCode(); // 0x00709908-0x00709934
	}

	[Serializable]
	public class ExcludeFromDocsAttribute : Attribute // TypeDefIndex: 2206
	{
		// Constructors
		public ExcludeFromDocsAttribute(); // 0x00709934-0x00709944
	}
}

namespace UnityEngine
{
	public interface ILogHandler // TypeDefIndex: 2207
	{
		// Methods
		void LogFormat(LogType logType, UnityEngine.Object context, string format, params /* 0x0015978C-0x0015979C */ object[] args);
		void LogException(Exception exception, UnityEngine.Object context);
	}

	public interface ILogger : ILogHandler // TypeDefIndex: 2208
	{
		// Methods
		void Log(LogType logType, object message);
		void Log(LogType logType, object message, UnityEngine.Object context);
		void LogFormat(LogType logType, string format, params /* 0x0015979C-0x001597AC */ object[] args);
	}

	public class Logger : ILogger // TypeDefIndex: 2209
	{
		// Fields
		[CompilerGenerated] // 0x00151C60-0x00151C94
		[DebuggerBrowsable] // 0x00151C60-0x00151C94
		private ILogHandler <logHandler>k__BackingField; // 0x08
		[CompilerGenerated] // 0x00151C94-0x00151CC8
		[DebuggerBrowsable] // 0x00151C94-0x00151CC8
		private bool <logEnabled>k__BackingField; // 0x0C
		[CompilerGenerated] // 0x00151CC8-0x00151CFC
		[DebuggerBrowsable] // 0x00151CC8-0x00151CFC
		private LogType <filterLogType>k__BackingField; // 0x10
	
		// Properties
		public ILogHandler logHandler { [CompilerGenerated] /* 0x001581F8-0x00158208 */ get; [CompilerGenerated] /* 0x00158208-0x00158218 */ set; } // 0x00709F54-0x00709F5C 0x00709F3C-0x00709F44
		public bool logEnabled { [CompilerGenerated] /* 0x00158218-0x00158228 */ get; [CompilerGenerated] /* 0x00158228-0x00158238 */ set; } // 0x00709F5C-0x00709F64 0x00709F44-0x00709F4C
		public LogType filterLogType { [CompilerGenerated] /* 0x00158238-0x00158248 */ get; [CompilerGenerated] /* 0x00158248-0x00158258 */ set; } // 0x00709F64-0x00709F6C 0x00709F4C-0x00709F54
	
		// Constructors
		public Logger(ILogHandler logHandler); // 0x00709F0C-0x00709F3C
	
		// Methods
		public bool IsLogTypeAllowed(LogType logType); // 0x00709F6C-0x00709FB4
		private static string GetString(object message); // 0x00709FB4-0x0070A030
		public void Log(LogType logType, object message); // 0x0070A030-0x0070A1EC
		public void Log(LogType logType, object message, UnityEngine.Object context); // 0x0070A1EC-0x0070A3B0
		public void LogFormat(LogType logType, string format, params /* 0x001597AC-0x001597BC */ object[] args); // 0x0070A3B0-0x0070A4D8
		public void LogFormat(LogType logType, UnityEngine.Object context, string format, params /* 0x001597BC-0x001597CC */ object[] args); // 0x0070A4D8-0x0070A60C
		public void LogException(Exception exception, UnityEngine.Object context); // 0x0070A60C-0x0070A704
	}
}

namespace UnityEngine.Networking.PlayerConnection
{
	[Serializable]
	public class MessageEventArgs // TypeDefIndex: 2210
	{
		// Fields
		public int playerId; // 0x08
		public byte[] data; // 0x0C
	
		// Constructors
		public MessageEventArgs(); // 0x00712554-0x0071255C
	}

	public interface IEditorPlayerConnection // TypeDefIndex: 2211
	{
	}

	[Serializable]
	public class PlayerConnection : ScriptableObject, IEditorPlayerConnection // TypeDefIndex: 2212
	{
		// Fields
		internal static IPlayerEditorConnectionNative connectionNative; // 0x00
		[SerializeField] // 0x00151CFC-0x00151D0C
		private PlayerEditorConnectionEvents m_PlayerEditorConnectionEvents; // 0x0C
		[SerializeField] // 0x00151D0C-0x00151D1C
		private List<int> m_connectedPlayers; // 0x10
		private bool m_IsInitilized; // 0x14
		private static PlayerConnection s_Instance; // 0x04
	
		// Properties
		public static PlayerConnection instance { get; } // 0x00712750-0x00712810 
		public bool isConnected { get; } // 0x00712948-0x00712A20 
	
		// Nested types
		[CompilerGenerated] // 0x0014FB6C-0x0014FB7C
		private sealed class <Register>c__AnonStorey0 // TypeDefIndex: 2213
		{
			// Fields
			internal Guid messageId; // 0x08
	
			// Constructors
			public <Register>c__AnonStorey0(); // 0x00712FAC-0x00712FB4
	
			// Methods
			internal bool <>m__0(PlayerEditorConnectionEvents.MessageTypeSubscribers x); // 0x00714584-0x00714678
		}
	
		[CompilerGenerated] // 0x0014FB7C-0x0014FB8C
		private sealed class <Unregister>c__AnonStorey1 // TypeDefIndex: 2214
		{
			// Fields
			internal Guid messageId; // 0x08
	
			// Constructors
			public <Unregister>c__AnonStorey1(); // 0x007133C0-0x007133C8
	
			// Methods
			internal bool <>m__0(PlayerEditorConnectionEvents.MessageTypeSubscribers x); // 0x007146C4-0x007147B8
		}
	
		[CompilerGenerated] // 0x0014FB8C-0x0014FB9C
		private sealed class <BlockUntilRecvMsg>c__AnonStorey2 // TypeDefIndex: 2215
		{
			// Fields
			internal bool msgReceived; // 0x08
	
			// Constructors
			public <BlockUntilRecvMsg>c__AnonStorey2(); // 0x00713C7C-0x00713C84
	
			// Methods
			internal void <>m__0(MessageEventArgs args); // 0x00714578-0x00714584
		}
	
		// Constructors
		public PlayerConnection(); // 0x0071255C-0x00712604
	
		// Methods
		private static PlayerConnection CreateInstance(); // 0x00712898-0x00712948
		public void OnEnable(); // 0x00712B58-0x00712C48
		private IPlayerEditorConnectionNative GetConnectionNativeApi(); // 0x00712A20-0x00712AAC
		public void Register(Guid messageId, UnityAction<MessageEventArgs> callback); // 0x00712C50-0x00712FAC
		public void Unregister(Guid messageId, UnityAction<MessageEventArgs> callback); // 0x0071318C-0x007133C0
		public void RegisterConnection(UnityAction<int> callback); // 0x00713550-0x0071370C
		public void RegisterDisconnection(UnityAction<int> callback); // 0x0071370C-0x007137A0
		public void Send(Guid messageId, byte[] data); // 0x007137A0-0x00713998
		public bool BlockUntilRecvMsg(Guid messageId, int timeout); // 0x00713998-0x00713C7C
		public void DisconnectAll(); // 0x00713C84-0x00713D5C
		[RequiredByNativeCode] // 0x00158258-0x00158268
		private static void MessageCallbackInternal(IntPtr data, ulong size, ulong guid, string messageId); // 0x00713D5C-0x00713EC0
		[RequiredByNativeCode] // 0x00158268-0x00158278
		private static void ConnectedCallbackInternal(int playerId); // 0x00714398-0x00714488
		[RequiredByNativeCode] // 0x00158278-0x00158288
		private static void DisconnectedCallback(int playerId); // 0x00714488-0x00714578
	}

	[Serializable]
	internal class PlayerEditorConnectionEvents // TypeDefIndex: 2216
	{
		// Fields
		[SerializeField] // 0x00151D1C-0x00151D2C
		public List<MessageTypeSubscribers> messageTypeSubscribers; // 0x08
		[SerializeField] // 0x00151D2C-0x00151D3C
		public ConnectionChangeEvent connectionEvent; // 0x0C
		[SerializeField] // 0x00151D3C-0x00151D4C
		public ConnectionChangeEvent disconnectionEvent; // 0x10
	
		// Nested types
		[Serializable]
		public class MessageEvent : UnityEvent<MessageEventArgs> // TypeDefIndex: 2217
		{
			// Constructors
			public MessageEvent(); // 0x007148E0-0x00714944
		}
	
		[Serializable]
		public class ConnectionChangeEvent : UnityEvent<int> // TypeDefIndex: 2218
		{
			// Constructors
			public ConnectionChangeEvent(); // 0x007147B8-0x0071481C
		}
	
		[Serializable]
		public class MessageTypeSubscribers // TypeDefIndex: 2219
		{
			// Fields
			[SerializeField] // 0x00151D4C-0x00151D5C
			private string m_messageTypeId; // 0x08
			public int subscriberCount; // 0x0C
			public MessageEvent messageCallback; // 0x10
	
			// Properties
			public Guid MessageTypeId { get; set; } // 0x00714678-0x007146C4 0x007148AC-0x007148E0
	
			// Constructors
			public MessageTypeSubscribers(); // 0x0071482C-0x007148AC
		}
	
		[CompilerGenerated] // 0x0014FB9C-0x0014FBAC
		private sealed class <InvokeMessageIdSubscribers>c__AnonStorey0 // TypeDefIndex: 2220
		{
			// Fields
			internal Guid messageId; // 0x08
	
			// Constructors
			public <InvokeMessageIdSubscribers>c__AnonStorey0(); // 0x0071481C-0x00714824
	
			// Methods
			internal bool <>m__0(MessageTypeSubscribers x); // 0x00714A40-0x00714B34
		}
	
		[CompilerGenerated] // 0x0014FBAC-0x0014FBBC
		private sealed class <AddAndCreate>c__AnonStorey1 // TypeDefIndex: 2221
		{
			// Fields
			internal Guid messageId; // 0x08
	
			// Constructors
			public <AddAndCreate>c__AnonStorey1(); // 0x00714824-0x0071482C
	
			// Methods
			internal bool <>m__0(MessageTypeSubscribers x); // 0x0071494C-0x00714A40
		}
	
		[CompilerGenerated] // 0x0014FBBC-0x0014FBCC
		private sealed class <UnregisterManagedCallback>c__AnonStorey2 // TypeDefIndex: 2222
		{
			// Fields
			internal Guid messageId; // 0x08
	
			// Constructors
			public <UnregisterManagedCallback>c__AnonStorey2(); // 0x00714944-0x0071494C
	
			// Methods
			internal bool <>m__0(MessageTypeSubscribers x); // 0x00714B34-0x00714C44
		}
	
		// Constructors
		public PlayerEditorConnectionEvents(); // 0x00712604-0x007126C4
	
		// Methods
		public void InvokeMessageIdSubscribers(Guid messageId, byte[] data, int playerId); // 0x00713EC0-0x00714398
		public UnityEvent<MessageEventArgs> AddAndCreate(Guid messageId); // 0x00712FB4-0x0071318C
		public void UnregisterManagedCallback(Guid messageId, UnityAction<MessageEventArgs> callback); // 0x007133C8-0x00713550
	}
}

namespace UnityEngine.Experimental.Rendering
{
	public interface IRenderPipeline : IDisposable // TypeDefIndex: 2223
	{
		// Properties
		bool disposed { get; }
	
		// Methods
		void Render(ScriptableRenderContext renderContext, Camera[] cameras);
	}

	public interface IRenderPipelineAsset // TypeDefIndex: 2224
	{
		// Methods
		void DestroyCreatedInstances();
		IRenderPipeline CreatePipeline();
	}

	public abstract class RenderPipeline : IRenderPipeline // TypeDefIndex: 2225
	{
		// Fields
		[CompilerGenerated] // 0x00151D5C-0x00151D90
		[DebuggerBrowsable] // 0x00151D5C-0x00151D90
		private static Action<Camera[]> beginFrameRendering; // 0x00
		[CompilerGenerated] // 0x00151D90-0x00151DC4
		[DebuggerBrowsable] // 0x00151D90-0x00151DC4
		private static Action<Camera> beginCameraRendering; // 0x04
		[CompilerGenerated] // 0x00151DC4-0x00151DF8
		[DebuggerBrowsable] // 0x00151DC4-0x00151DF8
		private bool <disposed>k__BackingField; // 0x08
	
		// Properties
		public bool disposed { [CompilerGenerated] /* 0x00158288-0x00158298 */ get; [CompilerGenerated] /* 0x00158298-0x001582A8 */ private set; } // 0x0082144C-0x00821454 0x00821454-0x0082145C
	
		// Events
		public static event Action<Camera[]> beginFrameRendering {
			add; // 0x00820ED0-0x00821000
			remove; // 0x00821000-0x00821130
		}
		public static event Action<Camera> beginCameraRendering {
			add; // 0x00821130-0x00821260
			remove; // 0x00821260-0x00821390
		}
	
		// Methods
		public virtual void Render(ScriptableRenderContext renderContext, Camera[] cameras); // 0x00821390-0x0082144C
		public virtual void Dispose(); // 0x0082145C-0x00821468
	}

	public static class RenderPipelineManager // TypeDefIndex: 2226
	{
		// Fields
		private static IRenderPipelineAsset s_CurrentPipelineAsset; // 0x00
		[CompilerGenerated] // 0x00151DF8-0x00151E2C
		[DebuggerBrowsable] // 0x00151DF8-0x00151E2C
		private static IRenderPipeline <currentPipeline>k__BackingField; // 0x04
	
		// Properties
		public static IRenderPipeline currentPipeline { [CompilerGenerated] /* 0x001582A8-0x001582B8 */ get; [CompilerGenerated] /* 0x001582B8-0x001582C8 */ private set; } // 0x00821468-0x008214CC 0x008214CC-0x00821530
	
		// Methods
		[RequiredByNativeCode] // 0x001582C8-0x001582D8
		internal static void CleanupRenderPipeline(); // 0x00821530-0x00821708
		[RequiredByNativeCode] // 0x001582D8-0x001582E8
		private static void DoRenderLoop_Internal(IRenderPipelineAsset pipe, Camera[] cameras, IntPtr loopPtr); // 0x008217D8-0x00821914
		private static void PrepareRenderPipeline(IRenderPipelineAsset pipe); // 0x00821914-0x00821B98
	}

	public class SupportedRenderingFeatures // TypeDefIndex: 2227
	{
		// Fields
		private static SupportedRenderingFeatures s_Active; // 0x00
		[CompilerGenerated] // 0x00151E2C-0x00151E60
		[DebuggerBrowsable] // 0x00151E2C-0x00151E60
		private ReflectionProbeSupportFlags <reflectionProbeSupportFlags>k__BackingField; // 0x08
		[CompilerGenerated] // 0x00151E60-0x00151E94
		[DebuggerBrowsable] // 0x00151E60-0x00151E94
		private LightmapMixedBakeMode <defaultMixedLightingMode>k__BackingField; // 0x0C
		[CompilerGenerated] // 0x00151E94-0x00151EC8
		[DebuggerBrowsable] // 0x00151E94-0x00151EC8
		private LightmapMixedBakeMode <supportedMixedLightingModes>k__BackingField; // 0x10
		[CompilerGenerated] // 0x00151EC8-0x00151EFC
		[DebuggerBrowsable] // 0x00151EC8-0x00151EFC
		private LightmapBakeType <supportedLightmapBakeTypes>k__BackingField; // 0x14
		[CompilerGenerated] // 0x00151EFC-0x00151F30
		[DebuggerBrowsable] // 0x00151EFC-0x00151F30
		private LightmapsMode <supportedLightmapsModes>k__BackingField; // 0x18
		[CompilerGenerated] // 0x00151F30-0x00151F64
		[DebuggerBrowsable] // 0x00151F30-0x00151F64
		private bool <rendererSupportsLightProbeProxyVolumes>k__BackingField; // 0x1C
		[CompilerGenerated] // 0x00151F64-0x00151F98
		[DebuggerBrowsable] // 0x00151F64-0x00151F98
		private bool <rendererSupportsMotionVectors>k__BackingField; // 0x1D
		[CompilerGenerated] // 0x00151F98-0x00151FCC
		[DebuggerBrowsable] // 0x00151F98-0x00151FCC
		private bool <rendererSupportsReceiveShadows>k__BackingField; // 0x1E
		[CompilerGenerated] // 0x00151FCC-0x00152000
		[DebuggerBrowsable] // 0x00151FCC-0x00152000
		private bool <rendererSupportsReflectionProbes>k__BackingField; // 0x1F
		[CompilerGenerated] // 0x00152000-0x00152034
		[DebuggerBrowsable] // 0x00152000-0x00152034
		private bool <rendererSupportsRendererPriority>k__BackingField; // 0x20
		[CompilerGenerated] // 0x00152034-0x00152068
		[DebuggerBrowsable] // 0x00152034-0x00152068
		private bool <rendererOverridesEnvironmentLighting>k__BackingField; // 0x21
		[CompilerGenerated] // 0x00152068-0x0015209C
		[DebuggerBrowsable] // 0x00152068-0x0015209C
		private bool <rendererOverridesFog>k__BackingField; // 0x22
		[CompilerGenerated] // 0x0015209C-0x001520D0
		[DebuggerBrowsable] // 0x0015209C-0x001520D0
		private bool <rendererOverridesOtherLightingSettings>k__BackingField; // 0x23
	
		// Properties
		public static SupportedRenderingFeatures active { get; set; } // 0x00822058-0x008221C4 0x00821748-0x008217D8
		public LightmapMixedBakeMode defaultMixedLightingMode { [CompilerGenerated] /* 0x001582E8-0x001582F8 */ get; } // 0x008221C4-0x008221CC 
		public LightmapMixedBakeMode supportedMixedLightingModes { [CompilerGenerated] /* 0x001582F8-0x00158308 */ get; } // 0x008221CC-0x008221D4 
		public LightmapBakeType supportedLightmapBakeTypes { [CompilerGenerated] /* 0x00158308-0x00158318 */ get; } // 0x008221D4-0x008221DC 
		public LightmapsMode supportedLightmapsModes { [CompilerGenerated] /* 0x00158318-0x00158328 */ get; } // 0x008221DC-0x008221E4 
	
		// Nested types
		[Flags] // 0x0014FBCC-0x0014FBDC
		public enum ReflectionProbeSupportFlags // TypeDefIndex: 2228
		{
			None = 0,
			Rotation = 1
		}
	
		[Flags] // 0x0014FBDC-0x0014FBEC
		public enum LightmapMixedBakeMode // TypeDefIndex: 2229
		{
			None = 0,
			IndirectOnly = 1,
			Subtractive = 2,
			Shadowmask = 4
		}
	
		// Constructors
		public SupportedRenderingFeatures(); // 0x00821708-0x00821748
		static SupportedRenderingFeatures(); // 0x00822920-0x00822A88
	
		// Methods
		[RequiredByNativeCode] // 0x00158328-0x00158338
		internal static void FallbackMixedLightingModeByRef(IntPtr fallbackModePtr); // 0x008221E4-0x008223F8
		internal static bool IsMixedLightingModeSupported(MixedLightingMode mixedMode); // 0x008223F8-0x008224A4
		[RequiredByNativeCode] // 0x00158338-0x00158348
		internal static void IsMixedLightingModeSupportedByRef(MixedLightingMode mixedMode, IntPtr isSupportedPtr); // 0x008224A4-0x00822660
		internal static bool IsLightmapBakeTypeSupported(LightmapBakeType bakeType); // 0x00822660-0x0082270C
		[RequiredByNativeCode] // 0x00158348-0x00158358
		internal static void IsLightmapBakeTypeSupportedByRef(LightmapBakeType bakeType, IntPtr isSupportedPtr); // 0x0082270C-0x00822860
		[RequiredByNativeCode] // 0x00158358-0x00158368
		internal static void IsLightmapsModeSupportedByRef(LightmapsMode mode, IntPtr isSupportedPtr); // 0x00822860-0x00822920
	}
}

namespace UnityEngine.SceneManagement
{
	[Serializable]
	[NativeHeader] // 0x0014FBEC-0x0014FC48
	public struct Scene // TypeDefIndex: 2230
	{
		// Fields
		[SerializeField] // 0x001520D0-0x001520E0
		private int m_Handle; // 0x00
	
		// Properties
		public int handle { get; } // 0x00722778-0x00722780 
		public string name { get; } // 0x00722790-0x00722798 
		public bool isLoaded { get; } // 0x00722798-0x007227A0 
		public int rootCount { get; } // 0x007227A0-0x00722A3C 
	
		// Methods
		[StaticAccessor] // 0x00158368-0x001583A0
		private static bool IsValidInternal(int sceneHandle); // 0x00722518-0x00722590
		[StaticAccessor] // 0x001583A0-0x001583D8
		private static string GetNameInternal(int sceneHandle); // 0x00722590-0x00722608
		[StaticAccessor] // 0x001583D8-0x00158410
		private static bool GetIsLoadedInternal(int sceneHandle); // 0x00722608-0x00722680
		[StaticAccessor] // 0x00158410-0x00158448
		private static int GetRootCountInternal(int sceneHandle); // 0x00722680-0x007226F8
		[StaticAccessor] // 0x00158448-0x00158480
		private static void GetRootGameObjectsInternal(int sceneHandle, object resultRootList); // 0x007226F8-0x00722778
		public bool IsValid(); // 0x00722780-0x00722790
		public GameObject[] GetRootGameObjects(); // 0x00722A3C-0x00722A44
		public void GetRootGameObjects(List<GameObject> rootGameObjects); // 0x00722A44-0x00722A4C
		public override int GetHashCode(); // 0x00722A4C-0x00722AE8
		public override bool Equals(object other); // 0x00722AE8-0x00722AF0
	}

	[NativeHeader] // 0x0014FC48-0x0014FCBC
	[RequiredByNativeCode] // 0x0014FC48-0x0014FCBC
	public class SceneManager // TypeDefIndex: 2231
	{
		// Fields
		[CompilerGenerated] // 0x001520E0-0x00152114
		[DebuggerBrowsable] // 0x001520E0-0x00152114
		private static UnityAction<Scene, LoadSceneMode> sceneLoaded; // 0x00
		[CompilerGenerated] // 0x00152114-0x00152148
		[DebuggerBrowsable] // 0x00152114-0x00152148
		private static UnityAction<Scene> sceneUnloaded; // 0x04
		[CompilerGenerated] // 0x00152148-0x0015217C
		[DebuggerBrowsable] // 0x00152148-0x0015217C
		private static UnityAction<Scene, Scene> activeSceneChanged; // 0x08
	
		// Properties
		public static int sceneCount { [NativeHeader] /* 0x00158480-0x00158520 */ [StaticAccessor] /* 0x00158480-0x00158520 */ [NativeMethod] /* 0x00158480-0x00158520 */ get; } // 0x00722AF0-0x00722B90 
	
		// Events
		public static event UnityAction<Scene, LoadSceneMode> sceneLoaded {
			add; // 0x00722D98-0x00722EC8
			remove; // 0x00722EC8-0x00722FF8
		}
		public static event UnityAction<Scene, Scene> activeSceneChanged {
			add; // 0x00722FF8-0x00723128
			remove; // 0x00723128-0x00723258
		}
	
		// Methods
		[StaticAccessor] // 0x00158520-0x00158558
		public static Scene GetActiveScene(); // 0x00722B90-0x00722BB8
		[NativeThrows] // 0x00158558-0x001585A4
		[StaticAccessor] // 0x00158558-0x001585A4
		public static Scene GetSceneAt(int index); // 0x00722C30-0x00722C58
		[NativeThrows] // 0x001585A4-0x001585F0
		[StaticAccessor] // 0x001585A4-0x001585F0
		private static AsyncOperation LoadSceneAsyncNameIndexInternal(string sceneName, int sceneBuildIndex, LoadSceneParameters parameters, bool mustCompleteNextFrame); // 0x00722CD8-0x00722D08
		public static void LoadScene(string sceneName, [UnityEngine.Internal.DefaultValue] /* 0x001597CC-0x00159810 */ LoadSceneMode mode); // 0x00723258-0x00723260
		[ExcludeFromDocs] // 0x001585F0-0x00158600
		public static void LoadScene(string sceneName); // 0x007232A4-0x007232B0
		public static Scene LoadScene(string sceneName, LoadSceneParameters parameters); // 0x00723260-0x007232A4
		[ExcludeFromDocs] // 0x00158600-0x00158610
		public static void LoadScene(int sceneBuildIndex); // 0x007232B0-0x007232BC
		public static Scene LoadScene(int sceneBuildIndex, LoadSceneParameters parameters); // 0x007232BC-0x00723308
		[ExcludeFromDocs] // 0x00158610-0x00158620
		public static AsyncOperation LoadSceneAsync(string sceneName); // 0x00723308-0x00723338
		public static AsyncOperation LoadSceneAsync(string sceneName, LoadSceneParameters parameters); // 0x00723338-0x00723364
		[RequiredByNativeCode] // 0x00158620-0x00158630
		private static void Internal_SceneLoaded(Scene scene, LoadSceneMode mode); // 0x00723364-0x007233F0
		[RequiredByNativeCode] // 0x00158630-0x00158640
		private static void Internal_SceneUnloaded(Scene scene); // 0x007233F0-0x00723474
		[RequiredByNativeCode] // 0x00158640-0x00158650
		private static void Internal_ActiveSceneChanged(Scene previousActiveScene, Scene newActiveScene); // 0x00723474-0x00723500
		private static void GetActiveScene_Injected(out Scene ret); // 0x00722BB8-0x00722C30
		private static void GetSceneAt_Injected(int index, out Scene ret); // 0x00722C58-0x00722CD8
		private static AsyncOperation LoadSceneAsyncNameIndexInternal_Injected(string sceneName, int sceneBuildIndex, ref LoadSceneParameters parameters, bool mustCompleteNextFrame); // 0x00722D08-0x00722D98
	}

	public enum LoadSceneMode // TypeDefIndex: 2232
	{
		Single = 0,
		Additive = 1
	}

	[Flags] // 0x0014FCBC-0x0014FCCC
	public enum LocalPhysicsMode // TypeDefIndex: 2233
	{
		None = 0,
		Physics2D = 1,
		Physics3D = 2
	}

	[Serializable]
	public struct LoadSceneParameters // TypeDefIndex: 2234
	{
		// Fields
		[SerializeField] // 0x0015217C-0x0015218C
		private LoadSceneMode m_LoadSceneMode; // 0x00
		[SerializeField] // 0x0015218C-0x0015219C
		private LocalPhysicsMode m_LocalPhysicsMode; // 0x04
	
		// Constructors
		public LoadSceneParameters(LoadSceneMode mode); // 0x00722508-0x00722518
	}
}

namespace UnityEngine
{
	[AttributeUsage] // 0x0014FCCC-0x0014FD14
	[RequiredByNativeCode] // 0x0014FCCC-0x0014FD14
	internal sealed class ExtensionOfNativeClassAttribute : Attribute // TypeDefIndex: 2235
	{
		// Constructors
		public ExtensionOfNativeClassAttribute(); // 0x00822A88-0x00822AAC
	}
}

namespace UnityEngine.Scripting
{
	[AttributeUsage] // 0x0014FD14-0x0014FD48
	public class PreserveAttribute : Attribute // TypeDefIndex: 2236
	{
		// Constructors
		public PreserveAttribute(); // 0x007224F8-0x00722500
	}
}

namespace UnityEngine.Scripting.APIUpdating
{
	[AttributeUsage] // 0x0014FD48-0x0014FD5C
	public class MovedFromAttribute : Attribute // TypeDefIndex: 2237
	{
		// Fields
		[CompilerGenerated] // 0x0015219C-0x001521D0
		[DebuggerBrowsable] // 0x0015219C-0x001521D0
		private string <Namespace>k__BackingField; // 0x08
		[CompilerGenerated] // 0x001521D0-0x00152204
		[DebuggerBrowsable] // 0x001521D0-0x00152204
		private bool <IsInDifferentAssembly>k__BackingField; // 0x0C
	
		// Properties
		private string Namespace { [CompilerGenerated] /* 0x00158650-0x00158660 */ set; } // 0x00723B84-0x00723B8C
		private bool IsInDifferentAssembly { [CompilerGenerated] /* 0x00158660-0x00158670 */ set; } // 0x00723B8C-0x00723B94
	
		// Constructors
		public MovedFromAttribute(string sourceNamespace); // 0x00723B34-0x00723B5C
		public MovedFromAttribute(string sourceNamespace, bool isInDifferentAssembly); // 0x00723B5C-0x00723B84
	}
}

namespace UnityEngine.Serialization
{
	[AttributeUsage] // 0x0014FD5C-0x0014FDB4
	[RequiredByNativeCode] // 0x0014FD5C-0x0014FDB4
	public class FormerlySerializedAsAttribute : Attribute // TypeDefIndex: 2238
	{
		// Fields
		private string m_oldName; // 0x08
	
		// Constructors
		public FormerlySerializedAsAttribute(string oldName); // 0x00725B2C-0x00725B4C
	}
}

namespace UnityEngineInternal
{
	public enum TypeInferenceRules // TypeDefIndex: 2239
	{
		TypeReferencedByFirstArgument = 0,
		TypeReferencedBySecondArgument = 1,
		ArrayOfTypeReferencedByFirstArgument = 2,
		TypeOfFirstArgument = 3
	}

	[Serializable]
	[AttributeUsage] // 0x0014FDB4-0x0014FDC8
	public class TypeInferenceRuleAttribute : Attribute // TypeDefIndex: 2240
	{
		// Fields
		private readonly string _rule; // 0x08
	
		// Constructors
		public TypeInferenceRuleAttribute(TypeInferenceRules rule); // 0x00AE94D0-0x00AE959C
		public TypeInferenceRuleAttribute(string rule); // 0x00AE959C-0x00AE95BC
	
		// Methods
		public override string ToString(); // 0x00AE95BC-0x00AE95C4
	}

	public class GenericStack : Stack // TypeDefIndex: 2241
	{
		// Constructors
		public GenericStack(); // 0x00AE93B8-0x00AE93C0
	}

	internal static class NetFxCoreExtensions // TypeDefIndex: 2242
	{
		// Extension methods
		public static Delegate CreateDelegate(this MethodInfo self, Type delegateType, object target); // 0x00AE9484-0x00AE949C
		public static MethodInfo GetMethodInfo(this Delegate self); // 0x00AE949C-0x00AE94C8
	}
}

namespace UnityEngine.Profiling.Memory.Experimental
{
	public class MetaData // TypeDefIndex: 2243
	{
		// Fields
		public string content; // 0x08
		public string platform; // 0x0C
		public Texture2D screenshot; // 0x10
	
		// Constructors
		public MetaData(); // 0x00719AB8-0x00719AC0
	}

	[NativeHeader] // 0x0014FDD8-0x0014FE34
	public sealed class MemoryProfiler // TypeDefIndex: 2244
	{
		// Fields
		[CompilerGenerated] // 0x00152204-0x00152238
		[DebuggerBrowsable] // 0x00152204-0x00152238
		private static Action<string, bool> snapshotFinished; // 0x00
		[CompilerGenerated] // 0x00152238-0x0015226C
		[DebuggerBrowsable] // 0x00152238-0x0015226C
		private static Action<MetaData> createMetaData; // 0x04
	
		// Methods
		[RequiredByNativeCode] // 0x00158690-0x001586A0
		private static byte[] PrepareMetadata(); // 0x0071961C-0x00719AB8
		internal static int WriteIntToByteArray(byte[] array, int offset, int value); // 0x00719AC0-0x00719BA4
		internal static int WriteStringToByteArray(byte[] array, int offset, string value); // 0x00719BA4-0x00719CA0
		[RequiredByNativeCode] // 0x001586A0-0x001586B0
		private static void FinalizeSnapshot(string path, bool result); // 0x00719CA0-0x00719D34
	}
}

namespace UnityEngine
{
	[Flags] // 0x0014FE34-0x0014FE44
	public enum DrivenTransformProperties // TypeDefIndex: 2245
	{
		All = -1,
		None = 0,
		AnchoredPositionX = 2,
		AnchoredPositionY = 4,
		AnchoredPosition = 6,
		AnchoredPositionZ = 8,
		AnchoredPosition3D = 14,
		Rotation = 16,
		ScaleX = 32,
		ScaleY = 64,
		ScaleZ = 128,
		Scale = 224,
		AnchorMinX = 256,
		AnchorMinY = 512,
		AnchorMin = 768,
		AnchorMaxX = 1024,
		AnchorMaxY = 2048,
		AnchorMax = 3072,
		Anchors = 3840,
		SizeDeltaX = 4096,
		SizeDeltaY = 8192,
		SizeDelta = 12288,
		PivotX = 16384,
		PivotY = 32768,
		Pivot = 49152
	}

	public struct DrivenRectTransformTracker // TypeDefIndex: 2246
	{
		// Methods
		public void Add(UnityEngine.Object driver, RectTransform rectTransform, DrivenTransformProperties drivenProperties); // 0x0081DA50-0x0081DA58
		public void Clear(); // 0x0081DA58-0x0081DA5C
	}

	[NativeClass] // 0x0014FE44-0x0014FEB0
	[NativeHeader] // 0x0014FE44-0x0014FEB0
	public sealed class RectTransform : Transform // TypeDefIndex: 2247
	{
		// Fields
		[CompilerGenerated] // 0x0015226C-0x001522A0
		[DebuggerBrowsable] // 0x0015226C-0x001522A0
		private static ReapplyDrivenProperties reapplyDrivenProperties; // 0x00
	
		// Properties
		public Rect rect { get; } // 0x0071D74C-0x0071D784 
		public Vector2 anchorMin { get; set; } // 0x0071D834-0x0071D870 0x0071D8F0-0x0071D90C
		public Vector2 anchorMax { get; set; } // 0x0071D98C-0x0071D9C8 0x0071DA48-0x0071DA64
		public Vector2 anchoredPosition { get; set; } // 0x0071DAE4-0x0071DB20 0x0071DBA0-0x0071DBBC
		public Vector2 sizeDelta { get; set; } // 0x0071DC3C-0x0071DC78 0x0071DCF8-0x0071DD14
		public Vector2 pivot { get; set; } // 0x0071DD94-0x0071DDD0 0x0071DE50-0x0071DE6C
		public Vector2 offsetMin { set; } // 0x0071DEEC-0x0071E11C
		public Vector2 offsetMax { set; } // 0x0071E11C-0x0071E340
	
		// Events
		public static event ReapplyDrivenProperties reapplyDrivenProperties {
			add; // 0x0071D4EC-0x0071D61C
			remove; // 0x0071D61C-0x0071D74C
		}
	
		// Nested types
		public enum Edge // TypeDefIndex: 2248
		{
			Left = 0,
			Right = 1,
			Top = 2,
			Bottom = 3
		}
	
		public enum Axis // TypeDefIndex: 2249
		{
			Horizontal = 0,
			Vertical = 1
		}
	
		public delegate void ReapplyDrivenProperties(RectTransform driven); // TypeDefIndex: 2250; 0x0071EC9C-0x0071F4C4
	
		// Methods
		public void GetLocalCorners(Vector3[] fourCornersArray); // 0x0071E340-0x0071E588
		public void GetWorldCorners(Vector3[] fourCornersArray); // 0x0071E588-0x0071E740
		public void SetInsetAndSizeFromParentEdge(Edge edge, float inset, float size); // 0x0071E740-0x0071E9A4
		public void SetSizeWithCurrentAnchors(Axis axis, float size); // 0x0071E9A4-0x0071EAD0
		[RequiredByNativeCode] // 0x001586B0-0x001586C0
		internal static void SendReapplyDrivenProperties(RectTransform driven); // 0x0071EC28-0x0071EC9C
		private Vector2 GetParentSize(); // 0x0071EAD0-0x0071EC28
		private void get_rect_Injected(out Rect ret); // 0x0071D784-0x0071D834
		private void get_anchorMin_Injected(out Vector2 ret); // 0x0071D870-0x0071D8F0
		private void set_anchorMin_Injected(ref Vector2 value); // 0x0071D90C-0x0071D98C
		private void get_anchorMax_Injected(out Vector2 ret); // 0x0071D9C8-0x0071DA48
		private void set_anchorMax_Injected(ref Vector2 value); // 0x0071DA64-0x0071DAE4
		private void get_anchoredPosition_Injected(out Vector2 ret); // 0x0071DB20-0x0071DBA0
		private void set_anchoredPosition_Injected(ref Vector2 value); // 0x0071DBBC-0x0071DC3C
		private void get_sizeDelta_Injected(out Vector2 ret); // 0x0071DC78-0x0071DCF8
		private void set_sizeDelta_Injected(ref Vector2 value); // 0x0071DD14-0x0071DD94
		private void get_pivot_Injected(out Vector2 ret); // 0x0071DDD0-0x0071DE50
		private void set_pivot_Injected(ref Vector2 value); // 0x0071DE6C-0x0071DEEC
	}

	[NativeHeader] // 0x0014FEB0-0x0014FFAC
	[NativeHeader] // 0x0014FEB0-0x0014FFAC
	[NativeHeader] // 0x0014FEB0-0x0014FFAC
	[RequiredByNativeCode] // 0x0014FEB0-0x0014FFAC
	public class Transform : Component, IEnumerable // TypeDefIndex: 2251
	{
		// Properties
		public Vector3 position { get; set; } // 0x00ADD22C-0x00ADD274 0x00ADD2F4-0x00ADD314
		public Vector3 localPosition { get; set; } // 0x00ADD394-0x00ADD3DC 0x00ADD45C-0x00ADD47C
		public Vector3 eulerAngles { get; set; } // 0x00ADD4FC-0x00ADD57C 0x00ADD5B4-0x00ADD678
		public Vector3 localEulerAngles { get; set; } // 0x00ADD69C-0x00ADD71C 0x00ADD754-0x00ADD818
		public Vector3 right { get; } // 0x00ADD83C-0x00ADD96C 
		public Vector3 up { get; } // 0x00ADDA08-0x00ADDB38 
		public Vector3 forward { get; set; } // 0x00ADDBD4-0x00ADDD04 0x00ADDDA0-0x00ADDE64
		public Quaternion rotation { get; set; } // 0x00ADD57C-0x00ADD5B4 0x00ADD678-0x00ADD69C
		public Quaternion localRotation { get; set; } // 0x00ADD71C-0x00ADD754 0x00ADD818-0x00ADD83C
		public Vector3 localScale { get; set; } // 0x00ADE064-0x00ADE0AC 0x00ADE12C-0x00ADE14C
		public Transform parent { get; set; } // 0x00ADE1CC-0x00ADE1D0 0x00ADE1D4-0x00ADE2A0
		internal Transform parentInternal { get; set; } // 0x00ADE1D0-0x00ADE1D4 0x00ADE2A0-0x00ADE2A8
		public Matrix4x4 worldToLocalMatrix { get; } // 0x00ADE3C4-0x00ADE424 
		public Matrix4x4 localToWorldMatrix { get; } // 0x00ADE4A4-0x00ADE504 
		public Transform root { get; } // 0x00ADF168-0x00ADF16C 
		public int childCount { [NativeMethod] /* 0x00158744-0x00158784 */ get; } // 0x00ADF1F8-0x00ADF288 
		public Vector3 lossyScale { [NativeMethod] /* 0x00158784-0x001587C4 */ get; } // 0x00ADF3B0-0x00ADF3F8 
	
		// Nested types
		private class Enumerator : IEnumerator // TypeDefIndex: 2252
		{
			// Fields
			private Transform outer; // 0x08
			private int currentIndex; // 0x0C
	
			// Properties
			public object Current { get; } // 0x00ADF66C-0x00ADF69C 
	
			// Constructors
			internal Enumerator(Transform outer); // 0x00ADF5A0-0x00ADF5CC
	
			// Methods
			public bool MoveNext(); // 0x00ADF69C-0x00ADF6E4
			public void Reset(); // 0x00ADF6E4-0x00ADF6F0
		}
	
		// Constructors
		protected Transform(); // 0x00ADD224-0x00ADD22C
	
		// Methods
		private Transform GetParent(); // 0x00ADE2A8-0x00ADE334
		public void SetParent(Transform p); // 0x00ADE334-0x00ADE33C
		[FreeFunction] // 0x001586C0-0x00158708
		public void SetParent(Transform parent, bool worldPositionStays); // 0x00ADE33C-0x00ADE3C4
		public void Translate(Vector3 translation, [UnityEngine.Internal.DefaultValue] /* 0x00159810-0x00159844 */ Space relativeTo); // 0x00ADE584-0x00ADE71C
		public void Translate(Vector3 translation); // 0x00ADE7AC-0x00ADE7CC
		public void Translate(float x, float y, float z); // 0x00ADE7CC-0x00ADE7F4
		public void Rotate(Vector3 eulers, [UnityEngine.Internal.DefaultValue] /* 0x00159844-0x00159878 */ Space relativeTo); // 0x00ADE7F4-0x00ADEAE8
		public void Rotate(Vector3 eulers); // 0x00ADEAE8-0x00ADEB08
		[NativeMethod] // 0x00158708-0x00158744
		internal void RotateAroundInternal(Vector3 axis, float angle); // 0x00ADEB08-0x00ADEB30
		public void RotateAround(Vector3 point, Vector3 axis, float angle); // 0x00ADEBB8-0x00ADED88
		public Vector3 TransformDirection(Vector3 direction); // 0x00ADE750-0x00ADE7AC
		public Vector3 TransformVector(Vector3 vector); // 0x00ADEE44-0x00ADEEA0
		public Vector3 TransformVector(float x, float y, float z); // 0x00ADEF28-0x00ADEFA0
		public Vector3 TransformPoint(Vector3 position); // 0x00ADEFA0-0x00ADEFFC
		public Vector3 InverseTransformPoint(Vector3 position); // 0x00ADF084-0x00ADF0E0
		private Transform GetRoot(); // 0x00ADF16C-0x00ADF1F8
		public void SetAsFirstSibling(); // 0x00ADF288-0x00ADF31C
		public int GetSiblingIndex(); // 0x00ADF31C-0x00ADF3B0
		[FreeFunction] // 0x001587C4-0x00158820
		public bool IsChildOf([NotNull] /* 0x00159878-0x00159888 */ Transform parent); // 0x00ADF478-0x00ADF520
		public IEnumerator GetEnumerator(); // 0x00ADF520-0x00ADF5A0
		[FreeFunction] // 0x00158820-0x0015887C
		[NativeThrows] // 0x00158820-0x0015887C
		public Transform GetChild(int index); // 0x00ADF5CC-0x00ADF66C
		private void get_position_Injected(out Vector3 ret); // 0x00ADD274-0x00ADD2F4
		private void set_position_Injected(ref Vector3 value); // 0x00ADD314-0x00ADD394
		private void get_localPosition_Injected(out Vector3 ret); // 0x00ADD3DC-0x00ADD45C
		private void set_localPosition_Injected(ref Vector3 value); // 0x00ADD47C-0x00ADD4FC
		private void get_rotation_Injected(out Quaternion ret); // 0x00ADDE64-0x00ADDEE4
		private void set_rotation_Injected(ref Quaternion value); // 0x00ADDEE4-0x00ADDF64
		private void get_localRotation_Injected(out Quaternion ret); // 0x00ADDF64-0x00ADDFE4
		private void set_localRotation_Injected(ref Quaternion value); // 0x00ADDFE4-0x00ADE064
		private void get_localScale_Injected(out Vector3 ret); // 0x00ADE0AC-0x00ADE12C
		private void set_localScale_Injected(ref Vector3 value); // 0x00ADE14C-0x00ADE1CC
		private void get_worldToLocalMatrix_Injected(out Matrix4x4 ret); // 0x00ADE424-0x00ADE4A4
		private void get_localToWorldMatrix_Injected(out Matrix4x4 ret); // 0x00ADE504-0x00ADE584
		private void RotateAroundInternal_Injected(ref Vector3 axis, float angle); // 0x00ADEB30-0x00ADEBB8
		private void TransformDirection_Injected(ref Vector3 direction, out Vector3 ret); // 0x00ADEDBC-0x00ADEE44
		private void TransformVector_Injected(ref Vector3 vector, out Vector3 ret); // 0x00ADEEA0-0x00ADEF28
		private void TransformPoint_Injected(ref Vector3 position, out Vector3 ret); // 0x00ADEFFC-0x00ADF084
		private void InverseTransformPoint_Injected(ref Vector3 position, out Vector3 ret); // 0x00ADF0E0-0x00ADF168
		private void get_lossyScale_Injected(out Vector3 ret); // 0x00ADF3F8-0x00ADF478
	}
}

namespace UnityEngine.Experimental.U2D
{
	[Serializable]
	[NativeHeader] // 0x0014FFAC-0x0015002C
	[NativeType] // 0x0014FFAC-0x0015002C
	[RequiredByNativeCode] // 0x0014FFAC-0x0015002C
	public struct SpriteBone // TypeDefIndex: 2253
	{
		// Fields
		[NativeName] // 0x001522A0-0x001522E8
		[SerializeField] // 0x001522A0-0x001522E8
		private string m_Name; // 0x00
		[NativeName] // 0x001522E8-0x00152334
		[SerializeField] // 0x001522E8-0x00152334
		private Vector3 m_Position; // 0x04
		[NativeName] // 0x00152334-0x00152380
		[SerializeField] // 0x00152334-0x00152380
		private Quaternion m_Rotation; // 0x10
		[NativeName] // 0x00152380-0x001523C8
		[SerializeField] // 0x00152380-0x001523C8
		private float m_Length; // 0x20
		[NativeName] // 0x001523C8-0x00152414
		[SerializeField] // 0x001523C8-0x00152414
		private int m_ParentId; // 0x24
	}
}

namespace UnityEngine.Sprites
{
	public sealed class DataUtility // TypeDefIndex: 2254
	{
		// Methods
		public static Vector4 GetInnerUV(Sprite sprite); // 0x00AD6E88-0x00AD6EE4
		public static Vector4 GetOuterUV(Sprite sprite); // 0x00AD6EE4-0x00AD6F40
		public static Vector4 GetPadding(Sprite sprite); // 0x00AD6F40-0x00AD6F9C
		public static Vector2 GetMinSize(Sprite sprite); // 0x00AD6F9C-0x00AD7064
	}
}

namespace UnityEngine
{
	[NativeType] // 0x0015002C-0x001500EC
	[RequireComponent] // 0x0015002C-0x001500EC
	public sealed class SpriteRenderer : Renderer // TypeDefIndex: 2255
	{
	}

	public enum SpritePackingMode // TypeDefIndex: 2256
	{
		Tight = 0,
		Rectangle = 1
	}

	[ExcludeFromPreset] // 0x001500EC-0x001501F8
	[NativeHeader] // 0x001500EC-0x001501F8
	[NativeHeader] // 0x001500EC-0x001501F8
	[NativeHeader] // 0x001500EC-0x001501F8
	[NativeType] // 0x001500EC-0x001501F8
	public sealed class Sprite : UnityEngine.Object // TypeDefIndex: 2257
	{
		// Properties
		public Bounds bounds { get; } // 0x007265DC-0x0072662C 
		public Rect rect { get; } // 0x007266DC-0x00726714 
		public Vector4 border { get; } // 0x007267C0-0x007267F8 
		public Texture2D texture { get; } // 0x007268A8-0x00726934 
		public float pixelsPerUnit { [NativeMethod] /* 0x0015888C-0x001588CC */ get; } // 0x00726934-0x007269C4 
		public Texture2D associatedAlphaSplitTexture { [NativeMethod] /* 0x001588CC-0x00158908 */ get; } // 0x007269C4-0x00726A64 
		public Vector2 pivot { [NativeMethod] /* 0x00158908-0x00158948 */ get; } // 0x00726A64-0x00726AA0 
		public bool packed { get; } // 0x00726B50-0x00726B68 
		public SpritePackingMode packingMode { get; } // 0x00726B68-0x00726B6C 
		public Rect textureRect { get; } // 0x00726B6C-0x00726BE8 
		public Vector2[] vertices { [FreeFunction] /* 0x00158948-0x001589AC */ get; } // 0x00726BE8-0x00726C74 
		public ushort[] triangles { [FreeFunction] /* 0x001589AC-0x00158A10 */ get; } // 0x00726C74-0x00726D00 
		public Vector2[] uv { [FreeFunction] /* 0x00158A10-0x00158A70 */ get; } // 0x00726D00-0x00726D88 
	
		// Constructors
		[RequiredByNativeCode] // 0x0015887C-0x0015888C
		private Sprite(); // 0x007260A0-0x00726124
	
		// Methods
		internal int GetPackingMode(); // 0x00726124-0x007261B4
		internal int GetPacked(); // 0x007261B4-0x0072623C
		internal Rect GetTextureRect(); // 0x0072623C-0x00726274
		internal Vector4 GetInnerUVs(); // 0x00726324-0x0072635C
		internal Vector4 GetOuterUVs(); // 0x0072640C-0x00726444
		internal Vector4 GetPadding(); // 0x007264F4-0x0072652C
		private void GetTextureRect_Injected(out Rect ret); // 0x00726274-0x00726324
		private void GetInnerUVs_Injected(out Vector4 ret); // 0x0072635C-0x0072640C
		private void GetOuterUVs_Injected(out Vector4 ret); // 0x00726444-0x007264F4
		private void GetPadding_Injected(out Vector4 ret); // 0x0072652C-0x007265DC
		private void get_bounds_Injected(out Bounds ret); // 0x0072662C-0x007266DC
		private void get_rect_Injected(out Rect ret); // 0x00726714-0x007267C0
		private void get_border_Injected(out Vector4 ret); // 0x007267F8-0x007268A8
		private void get_pivot_Injected(out Vector2 ret); // 0x00726AA0-0x00726B50
	}
}

namespace UnityEngine.U2D
{
	[NativeHeader] // 0x001501F8-0x001502B8
	[NativeHeader] // 0x001501F8-0x001502B8
	[StaticAccessor] // 0x001501F8-0x001502B8
	public class SpriteAtlasManager // TypeDefIndex: 2258
	{
		// Fields
		[CompilerGenerated] // 0x00152414-0x00152448
		[DebuggerBrowsable] // 0x00152414-0x00152448
		private static Action<string, Action<SpriteAtlas>> atlasRequested; // 0x00
		[CompilerGenerated] // 0x00152448-0x0015247C
		[DebuggerBrowsable] // 0x00152448-0x0015247C
		private static Action<SpriteAtlas> atlasRegistered; // 0x04
		[CompilerGenerated] // 0x0015247C-0x0015248C
		private static Action<SpriteAtlas> <>f__mg$cache0; // 0x08
	
		// Events
		public static event Action<SpriteAtlas> atlasRegistered {
			add; // 0x00ADF96C-0x00ADFAEC
			remove; // 0x00ADFAEC-0x00ADFC6C
		}
	
		// Constructors
		static SpriteAtlasManager(); // 0x00ADFDE0-0x00ADFE54
	
		// Methods
		[RequiredByNativeCode] // 0x00158A70-0x00158A80
		private static bool RequestAtlas(string tag); // 0x00ADF79C-0x00ADF96C
		[RequiredByNativeCode] // 0x00158A80-0x00158A90
		private static void PostRegisteredAtlas(SpriteAtlas spriteAtlas); // 0x00ADFC6C-0x00ADFD68
		internal static void Register(SpriteAtlas spriteAtlas); // 0x00ADFD68-0x00ADFDE0
	}

	[NativeHeader] // 0x001502B8-0x00150324
	[NativeType] // 0x001502B8-0x00150324
	public class SpriteAtlas : UnityEngine.Object // TypeDefIndex: 2259
	{
		// Methods
		public bool CanBindTo(Sprite sprite); // 0x00ADF6F0-0x00ADF79C
	}
}

namespace UnityEngine
{
	[RequiredByNativeCode] // 0x0015B17C-0x0015B18C
	public class ControllerColliderHit // TypeDefIndex: 2261
	{
		// Fields
		internal CharacterController m_Controller; // 0x08
		internal Collider m_Collider; // 0x0C
		internal Vector3 m_Point; // 0x10
		internal Vector3 m_Normal; // 0x1C
		internal Vector3 m_MoveDirection; // 0x28
		internal float m_MoveLength; // 0x34
		internal int m_Push; // 0x38
	
		// Properties
		public Vector3 point { get; } // 0x00B2C5AC-0x00B2C5C0 
	}

	[RequiredByNativeCode] // 0x0015B18C-0x0015B19C
	public class Collision // TypeDefIndex: 2262
	{
		// Fields
		internal Vector3 m_Impulse; // 0x08
		internal Vector3 m_RelativeVelocity; // 0x14
		internal Rigidbody m_Rigidbody; // 0x20
		internal Collider m_Collider; // 0x24
		internal int m_ContactCount; // 0x28
		internal ContactPoint[] m_RecycledContacts; // 0x2C
		internal ContactPoint[] m_LegacyContacts; // 0x30
	
		// Properties
		public GameObject gameObject { get; } // 0x00B2C49C-0x00B2C5AC 
	}

	public enum CollisionFlags // TypeDefIndex: 2263
	{
		None = 0,
		Sides = 1,
		CollidedSides = 1,
		Above = 2,
		CollidedAbove = 2,
		Below = 4,
		CollidedBelow = 4
	}

	public enum QueryTriggerInteraction // TypeDefIndex: 2264
	{
		UseGlobal = 0,
		Ignore = 1,
		Collide = 2
	}

	[NativeHeader] // 0x0015B19C-0x0015B278
	[NativeHeader] // 0x0015B19C-0x0015B278
	[NativeHeader] // 0x0015B19C-0x0015B278
	[UsedByNativeCode] // 0x0015B19C-0x0015B278
	public struct RaycastHit // TypeDefIndex: 2265
	{
		// Fields
		[NativeName] // 0x0015B760-0x0015B794
		internal Vector3 m_Point; // 0x00
		[NativeName] // 0x0015B794-0x0015B7C8
		internal Vector3 m_Normal; // 0x0C
		[NativeName] // 0x0015B7C8-0x0015B7FC
		internal uint m_FaceID; // 0x18
		[NativeName] // 0x0015B7FC-0x0015B830
		internal float m_Distance; // 0x1C
		[NativeName] // 0x0015B830-0x0015B860
		internal Vector2 m_UV; // 0x20
		[NativeName] // 0x0015B860-0x0015B894
		internal int m_Collider; // 0x28
	
		// Properties
		public Collider collider { get; } // 0x00B2DEBC-0x00B2DED8 
		public Vector3 point { get; } // 0x00B2DED8-0x00B2DF00 
		public Vector3 normal { get; } // 0x00B2DF00-0x00B2DF1C 
		public float distance { get; } // 0x00B2DF1C-0x00B2E100 
		public Transform transform { get; } // 0x00B2E100-0x00B2E108 
		public Rigidbody rigidbody { get; } // 0x00B2E108-0x00B2E110 
	}

	[NativeHeader] // 0x0015B278-0x0015B330
	[RequireComponent] // 0x0015B278-0x0015B330
	public class Rigidbody : Component // TypeDefIndex: 2266
	{
		// Properties
		public Vector3 velocity { get; set; } // 0x00B2E118-0x00B2E160 0x00B2E1E0-0x00B2E200
		public Vector3 angularVelocity { get; set; } // 0x00B2E280-0x00B2E2C8 0x00B2E348-0x00B2E368
		public bool freezeRotation { set; } // 0x00B2E3E8-0x00B2E494
		public Vector3 position { get; set; } // 0x00B2E494-0x00B2E4DC 0x00B2E55C-0x00B2E57C
		public Quaternion rotation { get; set; } // 0x00B2E5FC-0x00B2E634 0x00B2E6B4-0x00B2E6D8
	
		// Constructors
		public Rigidbody(); // 0x00B2E110-0x00B2E118
	
		// Methods
		public void MovePosition(Vector3 position); // 0x00B2E758-0x00B2E778
		public void MoveRotation(Quaternion rot); // 0x00B2E7F8-0x00B2E81C
		private void get_velocity_Injected(out Vector3 ret); // 0x00B2E160-0x00B2E1E0
		private void set_velocity_Injected(ref Vector3 value); // 0x00B2E200-0x00B2E280
		private void get_angularVelocity_Injected(out Vector3 ret); // 0x00B2E2C8-0x00B2E348
		private void set_angularVelocity_Injected(ref Vector3 value); // 0x00B2E368-0x00B2E3E8
		private void get_position_Injected(out Vector3 ret); // 0x00B2E4DC-0x00B2E55C
		private void set_position_Injected(ref Vector3 value); // 0x00B2E57C-0x00B2E5FC
		private void get_rotation_Injected(out Quaternion ret); // 0x00B2E634-0x00B2E6B4
		private void set_rotation_Injected(ref Quaternion value); // 0x00B2E6D8-0x00B2E758
		private void MovePosition_Injected(ref Vector3 position); // 0x00B2E778-0x00B2E7F8
		private void MoveRotation_Injected(ref Quaternion rot); // 0x00B2E81C-0x00B2E89C
	}

	[NativeHeader] // 0x0015B330-0x0015B3F4
	[RequireComponent] // 0x0015B330-0x0015B3F4
	[RequiredByNativeCode] // 0x0015B330-0x0015B3F4
	public class Collider : Component // TypeDefIndex: 2267
	{
		// Properties
		public bool enabled { set; } // 0x00B2C074-0x00B2C118
		public Rigidbody attachedRigidbody { [NativeMethod] /* 0x0015B894-0x0015B8D0 */ get; } // 0x00B2C118-0x00B2C1B0 
		public Bounds bounds { get; } // 0x00B2C1B0-0x00B2C200 
	
		// Constructors
		public Collider(); // 0x00B2C06C-0x00B2C074
	
		// Methods
		private RaycastHit Raycast(Ray ray, float maxDistance, ref bool hasHit); // 0x00B2C2B0-0x00B2C33C
		public bool Raycast(Ray ray, out RaycastHit hitInfo, float maxDistance); // 0x00B2C3CC-0x00B2C49C
		private void get_bounds_Injected(out Bounds ret); // 0x00B2C200-0x00B2C2B0
		private void Raycast_Injected(ref Ray ray, float maxDistance, ref bool hasHit, out RaycastHit ret); // 0x00B2C33C-0x00B2C3CC
	}

	[NativeHeader] // 0x0015B3F4-0x0015B448
	public class CharacterController : Collider // TypeDefIndex: 2268
	{
		// Properties
		public Vector3 velocity { get; } // 0x00B2BDD8-0x00B2BE20 
		public float radius { get; } // 0x00B2BEA0-0x00B2BF38 
		public float height { get; } // 0x00B2BF38-0x00B2BFD0 
		public float slopeLimit { get; } // 0x00B2BFD0-0x00B2C06C 
	
		// Methods
		public CollisionFlags Move(Vector3 motion); // 0x00B2BD38-0x00B2BD58
		private CollisionFlags Move_Injected(ref Vector3 motion); // 0x00B2BD58-0x00B2BDD8
		private void get_velocity_Injected(out Vector3 ret); // 0x00B2BE20-0x00B2BEA0
	}

	[NativeHeader] // 0x0015B448-0x0015B4E8
	[NativeHeader] // 0x0015B448-0x0015B4E8
	[RequiredByNativeCode] // 0x0015B448-0x0015B4E8
	public class MeshCollider : Collider // TypeDefIndex: 2269
	{
	}

	[NativeHeader] // 0x0015B4E8-0x0015B54C
	[RequiredByNativeCode] // 0x0015B4E8-0x0015B54C
	public class CapsuleCollider : Collider // TypeDefIndex: 2270
	{
	}

	[NativeHeader] // 0x0015B54C-0x0015B5AC
	[RequiredByNativeCode] // 0x0015B54C-0x0015B5AC
	public class BoxCollider : Collider // TypeDefIndex: 2271
	{
		// Properties
		public Vector3 size { set; } // 0x00B2BC98-0x00B2BCB8
	
		// Methods
		private void set_size_Injected(ref Vector3 value); // 0x00B2BCB8-0x00B2BD38
	}

	[NativeHeader] // 0x0015B5AC-0x0015B610
	[RequiredByNativeCode] // 0x0015B5AC-0x0015B610
	public class SphereCollider : Collider // TypeDefIndex: 2272
	{
	}

	[NativeHeader] // 0x0015B610-0x0015B678
	[UsedByNativeCode] // 0x0015B610-0x0015B678
	public struct ContactPoint // TypeDefIndex: 2273
	{
		// Fields
		internal Vector3 m_Point; // 0x00
		internal Vector3 m_Normal; // 0x0C
		internal int m_ThisColliderInstanceID; // 0x18
		internal int m_OtherColliderInstanceID; // 0x1C
		internal float m_Separation; // 0x20
	}

	[NativeHeader] // 0x0015B678-0x0015B6D4
	public struct PhysicsScene : IEquatable<PhysicsScene> // TypeDefIndex: 2274
	{
		// Fields
		private int m_Handle; // 0x00
	
		// Methods
		public override string ToString(); // 0x00B2DAC0-0x00B2DAC8
		public override int GetHashCode(); // 0x00B2DAC8-0x00B2DB64
		public override bool Equals(object other); // 0x00B2DB64-0x00B2DB6C
		public bool Equals(PhysicsScene other); // 0x00B2DB6C-0x00B2DB80
		public bool Raycast(Vector3 origin, Vector3 direction, [UnityEngine.Internal.DefaultValue] /* 0x0015BBF0-0x0015BC24 */ float maxDistance = 1F / 0F /* Metadata: 0x0021ABAF */, [UnityEngine.Internal.DefaultValue] /* 0x0015BC24-0x0015BC58 */ int layerMask = -5 /* Metadata: 0x0021ABB3 */, [UnityEngine.Internal.DefaultValue] /* 0x0015BC58-0x0015BC8C */ QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal /* Metadata: 0x0021ABB7 */); // 0x00B2DBD8-0x00B2DC20
		[NativeName] // 0x0015B8D0-0x0015B938
		[StaticAccessor] // 0x0015B8D0-0x0015B938
		private static bool Internal_RaycastTest(PhysicsScene physicsScene, Ray ray, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction); // 0x00B2DB80-0x00B2DBD8
		public bool Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo, [UnityEngine.Internal.DefaultValue] /* 0x0015BC8C-0x0015BCC0 */ float maxDistance = 1F / 0F /* Metadata: 0x0021ABBB */, [UnityEngine.Internal.DefaultValue] /* 0x0015BCC0-0x0015BCF4 */ int layerMask = -5 /* Metadata: 0x0021ABBF */, [UnityEngine.Internal.DefaultValue] /* 0x0015BCF4-0x0015BD28 */ QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal /* Metadata: 0x0021ABC3 */); // 0x00B2DD08-0x00B2DD58
		[NativeName] // 0x0015B938-0x0015B99C
		[StaticAccessor] // 0x0015B938-0x0015B99C
		private static bool Internal_Raycast(PhysicsScene physicsScene, Ray ray, float maxDistance, ref RaycastHit hit, int layerMask, QueryTriggerInteraction queryTriggerInteraction); // 0x00B2DCB0-0x00B2DD08
		private static bool Internal_RaycastTest_Injected(ref PhysicsScene physicsScene, ref Ray ray, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction); // 0x00B2DC20-0x00B2DCB0
		private static bool Internal_Raycast_Injected(ref PhysicsScene physicsScene, ref Ray ray, float maxDistance, ref RaycastHit hit, int layerMask, QueryTriggerInteraction queryTriggerInteraction); // 0x00B2DD58-0x00B2DEBC
	}

	[NativeHeader] // 0x0015B6D4-0x0015B760
	[StaticAccessor] // 0x0015B6D4-0x0015B760
	public class Physics // TypeDefIndex: 2275
	{
		// Properties
		public static Vector3 gravity { [ThreadSafe] /* 0x0015B99C-0x0015B9AC */ get; } // 0x00B2C5C0-0x00B2C600 
		[NativeProperty] // 0x0015C0A0-0x0015C0D4
		public static PhysicsScene defaultPhysicsScene { get; } // 0x00B2C6A8-0x00B2C6D0 
	
		// Methods
		public static bool Raycast(Vector3 origin, Vector3 direction, [UnityEngine.Internal.DefaultValue] /* 0x0015BD28-0x0015BD5C */ float maxDistance, [UnityEngine.Internal.DefaultValue] /* 0x0015BD5C-0x0015BD90 */ int layerMask, [UnityEngine.Internal.DefaultValue] /* 0x0015BD90-0x0015BDC4 */ QueryTriggerInteraction queryTriggerInteraction); // 0x00B2C748-0x00B2C944
		[ExcludeFromDocs] // 0x0015B9AC-0x0015B9BC
		public static bool Raycast(Vector3 origin, Vector3 direction, float maxDistance, int layerMask); // 0x00B2C944-0x00B2C9BC
		[ExcludeFromDocs] // 0x0015B9BC-0x0015B9CC
		public static bool Raycast(Vector3 origin, Vector3 direction, float maxDistance); // 0x00B2C9BC-0x00B2CA34
		[ExcludeFromDocs] // 0x0015B9CC-0x0015B9DC
		public static bool Raycast(Vector3 origin, Vector3 direction); // 0x00B2CA34-0x00B2CAA8
		public static bool Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction); // 0x00B2CAA8-0x00B2CCD0
		[ExcludeFromDocs] // 0x0015B9DC-0x0015BA0C
		[RequiredByNativeCode] // 0x0015B9DC-0x0015BA0C
		public static bool Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo, float maxDistance, int layerMask); // 0x00B2CCD0-0x00B2CD50
		[ExcludeFromDocs] // 0x0015BA0C-0x0015BA1C
		public static bool Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo, float maxDistance); // 0x00B2CD50-0x00B2CDD0
		[ExcludeFromDocs] // 0x0015BA1C-0x0015BA2C
		public static bool Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo); // 0x00B2CDD0-0x00B2CE50
		public static bool Raycast(Ray ray, [UnityEngine.Internal.DefaultValue] /* 0x0015BDC4-0x0015BDF8 */ float maxDistance, [UnityEngine.Internal.DefaultValue] /* 0x0015BDF8-0x0015BE2C */ int layerMask, [UnityEngine.Internal.DefaultValue] /* 0x0015BE2C-0x0015BE60 */ QueryTriggerInteraction queryTriggerInteraction); // 0x00B2CE50-0x00B2CEF0
		[ExcludeFromDocs] // 0x0015BA2C-0x0015BA3C
		public static bool Raycast(Ray ray, float maxDistance, int layerMask); // 0x00B2CEF0-0x00B2CF84
		[ExcludeFromDocs] // 0x0015BA3C-0x0015BA4C
		public static bool Raycast(Ray ray, float maxDistance); // 0x00B2CF84-0x00B2D018
		[ExcludeFromDocs] // 0x0015BA4C-0x0015BA5C
		public static bool Raycast(Ray ray); // 0x00B2D018-0x00B2D0AC
		public static bool Raycast(Ray ray, out RaycastHit hitInfo, [UnityEngine.Internal.DefaultValue] /* 0x0015BE60-0x0015BE94 */ float maxDistance, [UnityEngine.Internal.DefaultValue] /* 0x0015BE94-0x0015BEC8 */ int layerMask, [UnityEngine.Internal.DefaultValue] /* 0x0015BEC8-0x0015BEFC */ QueryTriggerInteraction queryTriggerInteraction); // 0x00B2D0AC-0x00B2D150
		[ExcludeFromDocs] // 0x0015BA5C-0x0015BA6C
		public static bool Raycast(Ray ray, out RaycastHit hitInfo, float maxDistance, int layerMask); // 0x00B2D150-0x00B2D1EC
		[ExcludeFromDocs] // 0x0015BA6C-0x0015BA7C
		public static bool Raycast(Ray ray, out RaycastHit hitInfo, float maxDistance); // 0x00B2D1EC-0x00B2D288
		[ExcludeFromDocs] // 0x0015BA7C-0x0015BA8C
		public static bool Raycast(Ray ray, out RaycastHit hitInfo); // 0x00B2D288-0x00B2D320
		[NativeName] // 0x0015BA8C-0x0015BAF4
		[StaticAccessor] // 0x0015BA8C-0x0015BAF4
		private static RaycastHit[] Internal_RaycastAll(PhysicsScene physicsScene, Ray ray, float maxDistance, int mask, QueryTriggerInteraction queryTriggerInteraction); // 0x00B2D320-0x00B2D378
		public static RaycastHit[] RaycastAll(Vector3 origin, Vector3 direction, [UnityEngine.Internal.DefaultValue] /* 0x0015BEFC-0x0015BF30 */ float maxDistance, [UnityEngine.Internal.DefaultValue] /* 0x0015BF30-0x0015BF64 */ int layerMask, [UnityEngine.Internal.DefaultValue] /* 0x0015BF64-0x0015BF98 */ QueryTriggerInteraction queryTriggerInteraction); // 0x00B2D408-0x00B2D5A0
		[ExcludeFromDocs] // 0x0015BAF4-0x0015BB04
		public static RaycastHit[] RaycastAll(Vector3 origin, Vector3 direction, float maxDistance, int layerMask); // 0x00B2D5A0-0x00B2D5E0
		[ExcludeFromDocs] // 0x0015BB04-0x0015BB14
		public static RaycastHit[] RaycastAll(Vector3 origin, Vector3 direction, float maxDistance); // 0x00B2D5E0-0x00B2D61C
		[ExcludeFromDocs] // 0x0015BB14-0x0015BB24
		public static RaycastHit[] RaycastAll(Vector3 origin, Vector3 direction); // 0x00B2D61C-0x00B2D65C
		public static RaycastHit[] RaycastAll(Ray ray, [UnityEngine.Internal.DefaultValue] /* 0x0015BF98-0x0015BFCC */ float maxDistance, [UnityEngine.Internal.DefaultValue] /* 0x0015BFCC-0x0015C000 */ int layerMask, [UnityEngine.Internal.DefaultValue] /* 0x0015C000-0x0015C034 */ QueryTriggerInteraction queryTriggerInteraction); // 0x00B2D65C-0x00B2D6D8
		[ExcludeFromDocs] // 0x0015BB24-0x0015BB54
		[RequiredByNativeCode] // 0x0015BB24-0x0015BB54
		public static RaycastHit[] RaycastAll(Ray ray, float maxDistance, int layerMask); // 0x00B2D6D8-0x00B2D754
		[ExcludeFromDocs] // 0x0015BB54-0x0015BB64
		public static RaycastHit[] RaycastAll(Ray ray, float maxDistance); // 0x00B2D754-0x00B2D7D0
		[ExcludeFromDocs] // 0x0015BB64-0x0015BB74
		public static RaycastHit[] RaycastAll(Ray ray); // 0x00B2D7D0-0x00B2D84C
		[NativeName] // 0x0015BB74-0x0015BBE0
		[StaticAccessor] // 0x0015BB74-0x0015BBE0
		private static Collider[] OverlapSphere_Internal(PhysicsScene physicsScene, Vector3 position, float radius, int layerMask, QueryTriggerInteraction queryTriggerInteraction); // 0x00B2D84C-0x00B2D894
		public static Collider[] OverlapSphere(Vector3 position, float radius, [UnityEngine.Internal.DefaultValue] /* 0x0015C034-0x0015C06C */ int layerMask, [UnityEngine.Internal.DefaultValue] /* 0x0015C06C-0x0015C0A0 */ QueryTriggerInteraction queryTriggerInteraction); // 0x00B2D924-0x00B2D988
		[ExcludeFromDocs] // 0x0015BBE0-0x0015BBF0
		public static Collider[] OverlapSphere(Vector3 position, float radius); // 0x00B2D988-0x00B2DAC0
		private static void get_gravity_Injected(out Vector3 ret); // 0x00B2C600-0x00B2C6A8
		private static void get_defaultPhysicsScene_Injected(out PhysicsScene ret); // 0x00B2C6D0-0x00B2C748
		private static RaycastHit[] Internal_RaycastAll_Injected(ref PhysicsScene physicsScene, ref Ray ray, float maxDistance, int mask, QueryTriggerInteraction queryTriggerInteraction); // 0x00B2D378-0x00B2D408
		private static Collider[] OverlapSphere_Internal_Injected(ref PhysicsScene physicsScene, ref Vector3 position, float radius, int layerMask, QueryTriggerInteraction queryTriggerInteraction); // 0x00B2D894-0x00B2D924
	}
}

namespace UnityEngine.Analytics
{
	[NativeHeader] // 0x0015D3AC-0x0015D448
	[NativeHeader] // 0x0015D3AC-0x0015D448
	[RequiredByNativeCode] // 0x0015D3AC-0x0015D448
	internal class ContinuousEvent // TypeDefIndex: 2277
	{
	}

	[RequiredByNativeCode] // 0x0015D448-0x0015D458
	public enum AnalyticsSessionState // TypeDefIndex: 2278
	{
		kSessionStopped = 0,
		kSessionStarted = 1,
		kSessionPaused = 2,
		kSessionResumed = 3
	}

	[NativeHeader] // 0x0015D458-0x0015D4C8
	[NativeHeader] // 0x0015D458-0x0015D4C8
	[RequiredByNativeCode] // 0x0015D458-0x0015D4C8
	public static class AnalyticsSessionInfo // TypeDefIndex: 2279
	{
		// Fields
		[CompilerGenerated] // 0x0015D650-0x0015D684
		[DebuggerBrowsable] // 0x0015D650-0x0015D684
		private static SessionStateChanged sessionStateChanged; // 0x00
	
		// Nested types
		public delegate void SessionStateChanged(AnalyticsSessionState sessionState, long sessionId, long sessionElapsedTime, bool sessionChanged); // TypeDefIndex: 2280; 0x00B3B074-0x00B3B5A8
	
		// Methods
		[RequiredByNativeCode] // 0x0015D754-0x0015D764
		internal static void CallSessionStateChanged(AnalyticsSessionState sessionState, long sessionId, long sessionElapsedTime, bool sessionChanged); // 0x00B3AFD4-0x00B3B074
	}

	[NativeHeader] // 0x0015D4C8-0x0015D580
	[NativeHeader] // 0x0015D4C8-0x0015D580
	public static class Analytics // TypeDefIndex: 2281
	{
		// Methods
		[ThreadSafe] // 0x0015D764-0x0015D774
		private static bool IsInitialized(); // 0x00B3AAE4-0x00B3AB7C
		[StaticAccessor] // 0x0015D774-0x0015D7AC
		internal static AnalyticsResult RegisterEventWithLimit(string eventName, int maxEventPerHour, int maxItems, string vendorKey, int ver, string prefix, string assemblyInfo, bool notifyServer); // 0x00B3AB7C-0x00B3AC34
		[StaticAccessor] // 0x0015D7AC-0x0015D7F8
		[ThreadSafe] // 0x0015D7AC-0x0015D7F8
		internal static AnalyticsResult SendEventWithLimit(string eventName, object parameters, int ver, string prefix); // 0x00B3AC34-0x00B3ACC4
		public static AnalyticsResult RegisterEvent(string eventName, int maxEventPerHour, int maxItems, string vendorKey = "" /* Metadata: 0x0021ABD7 */, string prefix = "" /* Metadata: 0x0021ABDB */); // 0x00B3ACC4-0x00B3AD78
		private static AnalyticsResult RegisterEvent(string eventName, int maxEventPerHour, int maxItems, string vendorKey, int ver, string prefix, string assemblyInfo); // 0x00B3AD78-0x00B3AE90
		public static AnalyticsResult SendEvent(string eventName, object parameters, int ver = 1 /* Metadata: 0x0021ABDF */, string prefix = "" /* Metadata: 0x0021ABE3 */); // 0x00B3AE90-0x00B3AFD4
	}

	public enum AnalyticsResult // TypeDefIndex: 2282
	{
		Ok = 0,
		NotInitialized = 1,
		AnalyticsDisabled = 2,
		TooManyItems = 3,
		SizeLimitReached = 4,
		TooManyRequests = 5,
		InvalidData = 6,
		UnsupportedPlatform = 7
	}
}

namespace UnityEngine
{
	[NativeHeader] // 0x0015D580-0x0015D5E0
	[NativeHeader] // 0x0015D580-0x0015D5E0
	public static class RemoteSettings // TypeDefIndex: 2283
	{
		// Fields
		[CompilerGenerated] // 0x0015D684-0x0015D6B8
		[DebuggerBrowsable] // 0x0015D684-0x0015D6B8
		private static UpdatedEventHandler Updated; // 0x00
		[CompilerGenerated] // 0x0015D6B8-0x0015D6EC
		[DebuggerBrowsable] // 0x0015D6B8-0x0015D6EC
		private static Action BeforeFetchFromServer; // 0x04
		[CompilerGenerated] // 0x0015D6EC-0x0015D720
		[DebuggerBrowsable] // 0x0015D6EC-0x0015D720
		private static Action<bool, bool, int> Completed; // 0x08
	
		// Nested types
		public delegate void UpdatedEventHandler(); // TypeDefIndex: 2284; 0x00B3BA38-0x00B3BE74
	
		// Methods
		[RequiredByNativeCode] // 0x0015D7F8-0x0015D808
		internal static void RemoteSettingsUpdated(bool wasLastUpdatedFromServer); // 0x00B3B9CC-0x00B3BA38
		[RequiredByNativeCode] // 0x0015D808-0x0015D818
		internal static void RemoteSettingsBeforeFetchFromServer(); // 0x00B3BE74-0x00B3BEE4
		[RequiredByNativeCode] // 0x0015D818-0x0015D828
		internal static void RemoteSettingsUpdateCompleted(bool wasLastUpdatedFromServer, bool settingsChanged, int response); // 0x00B3BEE4-0x00B3BF90
	}

	[ExcludeFromDocs] // 0x0015D5E0-0x0015D650
	[NativeHeader] // 0x0015D5E0-0x0015D650
	[NativeHeader] // 0x0015D5E0-0x0015D650
	public class RemoteConfigSettings : IDisposable // TypeDefIndex: 2285
	{
		// Fields
		[NonSerialized]
		internal IntPtr m_Ptr; // 0x08
		[CompilerGenerated] // 0x0015D720-0x0015D754
		[DebuggerBrowsable] // 0x0015D720-0x0015D754
		private Action<bool> Updated; // 0x0C
	
		// Methods
		~RemoteConfigSettings(); // 0x00B3B76C-0x00B3B7D0
		private void Destroy(); // 0x00B3B7D0-0x00B3B844
		public void Dispose(); // 0x00B3B8BC-0x00B3B948
		[ThreadSafe] // 0x0015D828-0x0015D838
		internal static void Internal_Destroy(IntPtr ptr); // 0x00B3B844-0x00B3B8BC
		[RequiredByNativeCode] // 0x0015D838-0x0015D848
		internal static void RemoteConfigSettingsUpdated(RemoteConfigSettings rcs, bool wasLastUpdatedFromServer); // 0x00B3B948-0x00B3B9CC
	}

	internal class AudioExtensionDefinition // TypeDefIndex: 2287
	{
		// Fields
		private string assemblyName; // 0x08
		private string extensionNamespace; // 0x0C
		private string extensionTypeName; // 0x10
		private Type extensionType; // 0x14
	
		// Methods
		public Type GetExtensionType(); // 0x00B157E4-0x00B15AAC
	}

	internal class AudioSpatializerExtensionDefinition // TypeDefIndex: 2288
	{
		// Fields
		public PropertyName spatializerName; // 0x08
		public AudioExtensionDefinition definition; // 0x0C
	}

	internal class AudioAmbisonicExtensionDefinition // TypeDefIndex: 2289
	{
		// Fields
		public PropertyName ambisonicPluginName; // 0x08
		public AudioExtensionDefinition definition; // 0x0C
	}

	internal class AudioListenerExtension : ScriptableObject // TypeDefIndex: 2290
	{
		// Fields
		[SerializeField] // 0x0015F020-0x0015F030
		private AudioListener m_audioListener; // 0x0C
	
		// Properties
		public AudioListener audioListener { get; set; } // 0x00B171A4-0x00B171AC 0x00B16EE8-0x00B16EF0
	
		// Constructors
		public AudioListenerExtension(); // 0x00B18354-0x00B1835C
	
		// Methods
		public virtual float ReadExtensionProperty(PropertyName propertyName); // 0x00B1835C-0x00B18364
		public virtual void WriteExtensionProperty(PropertyName propertyName, float propertyValue); // 0x00B18364-0x00B18368
		public virtual void ExtensionUpdate(); // 0x00B18368-0x00B1836C
	}

	internal class AudioSourceExtension : ScriptableObject // TypeDefIndex: 2291
	{
		// Fields
		[SerializeField] // 0x0015F030-0x0015F040
		private AudioSource m_audioSource; // 0x0C
		internal int m_ExtensionManagerUpdateIndex; // 0x10
	
		// Properties
		public AudioSource audioSource { get; set; } // 0x00B16888-0x00B16890 0x00B16118-0x00B16120
	
		// Constructors
		public AudioSourceExtension(); // 0x00B1942C-0x00B1943C
	
		// Methods
		public virtual float ReadExtensionProperty(PropertyName propertyName); // 0x00B1943C-0x00B19444
		public virtual void WriteExtensionProperty(PropertyName propertyName, float propertyValue); // 0x00B19444-0x00B19448
		public virtual void Play(); // 0x00B19448-0x00B1944C
		public virtual void Stop(); // 0x00B1944C-0x00B19450
		public virtual void ExtensionUpdate(); // 0x00B19450-0x00B19454
		public void OnDestroy(); // 0x00B19454-0x00B19620
	}

	internal sealed class AudioExtensionManager // TypeDefIndex: 2292
	{
		// Fields
		private static List<AudioSpatializerExtensionDefinition> m_ListenerSpatializerExtensionDefinitions; // 0x00
		private static List<AudioSpatializerExtensionDefinition> m_SourceSpatializerExtensionDefinitions; // 0x04
		private static List<AudioAmbisonicExtensionDefinition> m_SourceAmbisonicDecoderExtensionDefinitions; // 0x08
		private static List<AudioSourceExtension> m_SourceExtensionsToUpdate; // 0x0C
		private static int m_NextStopIndex; // 0x10
		private static bool m_BuiltinDefinitionsRegistered; // 0x14
		private static PropertyName m_SpatializerName; // 0x18
		private static PropertyName m_SpatializerExtensionName; // 0x1C
		private static PropertyName m_ListenerSpatializerExtensionName; // 0x20
	
		// Constructors
		static AudioExtensionManager(); // 0x00B18040-0x00B181C4
	
		// Methods
		internal static AudioSourceExtension AddSpatializerExtension(AudioSource source); // 0x00B15AAC-0x00B15E74
		internal static AudioSourceExtension AddAmbisonicDecoderExtension(AudioSource source); // 0x00B163D4-0x00B166EC
		internal static void WriteExtensionProperties(AudioSourceExtension extension, string extensionName); // 0x00B16120-0x00B163D4
		internal static AudioListenerExtension AddSpatializerExtension(AudioListener listener); // 0x00B16A20-0x00B16DEC
		internal static void WriteExtensionProperties(AudioListenerExtension extension, string extensionName); // 0x00B16EF0-0x00B171A4
		internal static void AddExtensionToManager(AudioSourceExtension extension); // 0x00B1733C-0x00B1748C
		internal static void RemoveExtensionFromManager(AudioSourceExtension extension); // 0x00B1748C-0x00B17718
		internal static void Update(); // 0x00B17718-0x00B17E28
		internal static void GetReadyToPlay(AudioSourceExtension extension); // 0x00B17F58-0x00B18040
		private static void RegisterBuiltinDefinitions(); // 0x00B15E78-0x00B15F80
		[GeneratedByOldBindingsGenerator] // 0x0015F248-0x0015F258
		internal static UnityEngine.Object GetAudioListener(); // 0x00B17E28-0x00B17EC4
	}
}

namespace UnityEngine.Audio
{
	[NativeHeader] // 0x0015EB10-0x0015EC30
	[NativeHeader] // 0x0015EB10-0x0015EC30
	[NativeHeader] // 0x0015EB10-0x0015EC30
	[RequiredByNativeCode] // 0x0015EB10-0x0015EC30
	[StaticAccessor] // 0x0015EB10-0x0015EC30
	public struct AudioPlayableOutput : IPlayableOutput // TypeDefIndex: 2293
	{
		// Fields
		private PlayableOutputHandle m_Handle; // 0x00
	}

	[NativeHeader] // 0x0015EC30-0x0015ED34
	[NativeHeader] // 0x0015EC30-0x0015ED34
	[NativeHeader] // 0x0015EC30-0x0015ED34
	[RequiredByNativeCode] // 0x0015EC30-0x0015ED34
	[StaticAccessor] // 0x0015EC30-0x0015ED34
	public struct AudioClipPlayable : IPlayable, IEquatable<AudioClipPlayable> // TypeDefIndex: 2294
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
	
		// Methods
		public PlayableHandle GetHandle(); // 0x00B14758-0x00B14818
		public bool Equals(AudioClipPlayable other); // 0x00B14818-0x00B14820
	}

	[NativeHeader] // 0x0015ED34-0x0015EE38
	[NativeHeader] // 0x0015ED34-0x0015EE38
	[NativeHeader] // 0x0015ED34-0x0015EE38
	[RequiredByNativeCode] // 0x0015ED34-0x0015EE38
	[StaticAccessor] // 0x0015ED34-0x0015EE38
	public struct AudioMixerPlayable : IPlayable, IEquatable<AudioMixerPlayable> // TypeDefIndex: 2295
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
	
		// Methods
		public PlayableHandle GetHandle(); // 0x00B14820-0x00B148E0
		public bool Equals(AudioMixerPlayable other); // 0x00B148E0-0x00B148E8
	}
}

namespace UnityEngine.Experimental.Audio
{
	[NativeType] // 0x0015EE38-0x0015EEBC
	[StaticAccessor] // 0x0015EE38-0x0015EEBC
	public class AudioSampleProvider : IDisposable // TypeDefIndex: 2296
	{
		// Fields
		private ConsumeSampleFramesNativeFunction m_ConsumeSampleFramesNativeFunction; // 0x08
		[CompilerGenerated] // 0x0015F040-0x0015F074
		[DebuggerBrowsable] // 0x0015F040-0x0015F074
		private uint <id>k__BackingField; // 0x0C
		[CompilerGenerated] // 0x0015F074-0x0015F0A8
		[DebuggerBrowsable] // 0x0015F074-0x0015F0A8
		private ushort <trackIndex>k__BackingField; // 0x10
		[CompilerGenerated] // 0x0015F0A8-0x0015F0DC
		[DebuggerBrowsable] // 0x0015F0A8-0x0015F0DC
		private UnityEngine.Object <owner>k__BackingField; // 0x14
		[CompilerGenerated] // 0x0015F0DC-0x0015F110
		[DebuggerBrowsable] // 0x0015F0DC-0x0015F110
		private ushort <channelCount>k__BackingField; // 0x18
		[CompilerGenerated] // 0x0015F110-0x0015F144
		[DebuggerBrowsable] // 0x0015F110-0x0015F144
		private uint <sampleRate>k__BackingField; // 0x1C
		[CompilerGenerated] // 0x0015F144-0x0015F178
		[DebuggerBrowsable] // 0x0015F144-0x0015F178
		private SampleFramesHandler sampleFramesAvailable; // 0x20
		[CompilerGenerated] // 0x0015F178-0x0015F1AC
		[DebuggerBrowsable] // 0x0015F178-0x0015F1AC
		private SampleFramesHandler sampleFramesOverflow; // 0x24
	
		// Properties
		public uint id { [CompilerGenerated] /* 0x0015F258-0x0015F268 */ get; [CompilerGenerated] /* 0x0015F268-0x0015F278 */ private set; } // 0x00B19730-0x00B19738 0x00B197B8-0x00B197C0
	
		// Nested types
		[UnmanagedFunctionPointer] // 0x0015EEBC-0x0015EED0
		public delegate uint ConsumeSampleFramesNativeFunction(uint providerId, IntPtr interleavedSampleFrames, uint sampleFrameCount); // TypeDefIndex: 2297; 0x00B1A0A4-0x00B1A5B8
	
		public delegate void SampleFramesHandler(AudioSampleProvider provider, uint sampleFrameCount); // TypeDefIndex: 2298; 0x00B197D8-0x00B1A060
	
		// Methods
		~AudioSampleProvider(); // 0x00B19620-0x00B19690
		public void Dispose(); // 0x00B19690-0x00B19730
		[RequiredByNativeCode] // 0x0015F278-0x0015F288
		private void InvokeSampleFramesAvailable(int sampleFrameCount); // 0x00B197C0-0x00B197D8
		[RequiredByNativeCode] // 0x0015F288-0x0015F298
		private void InvokeSampleFramesOverflow(int droppedSampleFrameCount); // 0x00B1A060-0x00B1A090
		[NativeMethod] // 0x0015F298-0x0015F2C8
		private static void InternalSetScriptingPtr(uint providerId, AudioSampleProvider provider); // 0x00B19738-0x00B197B8
	}
}

namespace UnityEngine
{
	public enum WebCamKind // TypeDefIndex: 2299
	{
		WideAngle = 1,
		Telephoto = 2,
		ColorAndDepth = 3
	}

	[UsedByNativeCode] // 0x0015EED0-0x0015EEE0
	public struct WebCamDevice // TypeDefIndex: 2300
	{
		// Fields
		internal string m_Name; // 0x00
		internal string m_DepthCameraName; // 0x04
		internal int m_Flags; // 0x08
		internal WebCamKind m_Kind; // 0x0C
		internal Resolution[] m_Resolutions; // 0x10
	
		// Properties
		public string name { get; } // 0x00B1A9A0-0x00B1A9A8 
	}

	[NativeHeader] // 0x0015EEE0-0x0015EF30
	public sealed class WebCamTexture : Texture // TypeDefIndex: 2301
	{
		// Properties
		public bool isPlaying { [GeneratedByOldBindingsGenerator] /* 0x0015F2F8-0x0015F308 */ get; } // 0x00B1ABB8-0x00B1AC4C 
		public string deviceName { [GeneratedByOldBindingsGenerator] /* 0x0015F308-0x0015F318 */ set; } // 0x00B1AC4C-0x00B1ACF8
		public float requestedFPS { [GeneratedByOldBindingsGenerator] /* 0x0015F318-0x0015F328 */ set; } // 0x00B1ACF8-0x00B1ADA4
		public int requestedWidth { [GeneratedByOldBindingsGenerator] /* 0x0015F328-0x0015F338 */ set; } // 0x00B1ADA4-0x00B1AE50
		public int requestedHeight { [GeneratedByOldBindingsGenerator] /* 0x0015F338-0x0015F348 */ set; } // 0x00B1AE50-0x00B1AF00
		public static WebCamDevice[] devices { [GeneratedByOldBindingsGenerator] /* 0x0015F348-0x0015F358 */ get; } // 0x00B1AF00-0x00B1AF90 
		public bool didUpdateThisFrame { [GeneratedByOldBindingsGenerator] /* 0x0015F358-0x0015F368 */ get; } // 0x00B1AF90-0x00B1B088 
	
		// Constructors
		public WebCamTexture(); // 0x00B1A9A8-0x00B1AA30
	
		// Methods
		[GeneratedByOldBindingsGenerator] // 0x0015F2C8-0x0015F2D8
		private static void Internal_CreateWebCamTexture([Writable] /* 0x0015F558-0x0015F568 */ WebCamTexture self, string scriptingDevice, int requestedWidth, int requestedHeight, int maxFramerate); // 0x00B1AA30-0x00B1AAC0
		public void Play(); // 0x00B1AAC0-0x00B1AAC4
		[GeneratedByOldBindingsGenerator] // 0x0015F2D8-0x0015F2E8
		private static void INTERNAL_CALL_Play(WebCamTexture self); // 0x00B1AAC4-0x00B1AB3C
		public void Stop(); // 0x00B1AB3C-0x00B1AB40
		[GeneratedByOldBindingsGenerator] // 0x0015F2E8-0x0015F2F8
		private static void INTERNAL_CALL_Stop(WebCamTexture self); // 0x00B1AB40-0x00B1ABB8
	}

	public sealed class AudioSettings // TypeDefIndex: 2302
	{
		// Fields
		[CompilerGenerated] // 0x0015F1AC-0x0015F1E0
		[DebuggerBrowsable] // 0x0015F1AC-0x0015F1E0
		private static AudioConfigurationChangeHandler OnAudioConfigurationChanged; // 0x00
	
		// Nested types
		public delegate void AudioConfigurationChangeHandler(bool deviceWasChanged); // TypeDefIndex: 2303; 0x00B183E0-0x00B18844
	
		// Methods
		[GeneratedByOldBindingsGenerator] // 0x0015F368-0x0015F378
		public static string GetSpatializerPluginName(); // 0x00B15F80-0x00B1601C
		[RequiredByNativeCode] // 0x0015F378-0x0015F388
		internal static void InvokeOnAudioConfigurationChanged(bool deviceWasChanged); // 0x00B1836C-0x00B183E0
		[RequiredByNativeCode] // 0x0015F388-0x0015F398
		internal static void InvokeOnAudioManagerUpdate(); // 0x00B18844-0x00B188BC
		[RequiredByNativeCode] // 0x0015F398-0x0015F3A8
		internal static void InvokeOnAudioSourcePlay(AudioSource source); // 0x00B188BC-0x00B18B08
		[GeneratedByOldBindingsGenerator] // 0x0015F3A8-0x0015F3B8
		internal static string GetAmbisonicDecoderPluginName(); // 0x00B166EC-0x00B1678C
	}

	public sealed class AudioClip : UnityEngine.Object // TypeDefIndex: 2304
	{
		// Fields
		[CompilerGenerated] // 0x0015F1E0-0x0015F214
		[DebuggerBrowsable] // 0x0015F1E0-0x0015F214
		private PCMReaderCallback m_PCMReaderCallback; // 0x0C
		[CompilerGenerated] // 0x0015F214-0x0015F248
		[DebuggerBrowsable] // 0x0015F214-0x0015F248
		private PCMSetPositionCallback m_PCMSetPositionCallback; // 0x10
	
		// Properties
		public bool ambisonic { [GeneratedByOldBindingsGenerator] /* 0x0015F3B8-0x0015F3C8 */ get; } // 0x00B14978-0x00B14A08 
	
		// Nested types
		public delegate void PCMReaderCallback(float[] data); // TypeDefIndex: 2305; 0x00B14A18-0x00B15240
	
		public delegate void PCMSetPositionCallback(int position); // TypeDefIndex: 2306; 0x00B15250-0x00B156CC
	
		// Constructors
		private AudioClip(); // 0x00B148E8-0x00B14978
	
		// Methods
		[RequiredByNativeCode] // 0x0015F3C8-0x0015F3D8
		private void InvokePCMReaderCallback_Internal(float[] data); // 0x00B14A08-0x00B14A18
		[RequiredByNativeCode] // 0x0015F3D8-0x0015F3E8
		private void InvokePCMSetPositionCallback_Internal(int position); // 0x00B15240-0x00B15250
	}

	public class AudioBehaviour : Behaviour // TypeDefIndex: 2307
	{
	}

	[RequireComponent] // 0x0015EF30-0x0015EFA8
	public sealed class AudioListener : AudioBehaviour // TypeDefIndex: 2308
	{
		// Fields
		internal AudioListenerExtension spatializerExtension; // 0x0C
	
		// Methods
		[GeneratedByOldBindingsGenerator] // 0x0015F3E8-0x0015F3F8
		internal int GetNumExtensionProperties(); // 0x00B1727C-0x00B1731C
		internal PropertyName ReadExtensionName(int listenerIndex); // 0x00B171AC-0x00B171D4
		[GeneratedByOldBindingsGenerator] // 0x0015F3F8-0x0015F408
		private static void INTERNAL_CALL_ReadExtensionName(AudioListener self, int listenerIndex, out PropertyName value); // 0x00B181C4-0x00B1824C
		internal PropertyName ReadExtensionPropertyName(int listenerIndex); // 0x00B171D4-0x00B171FC
		[GeneratedByOldBindingsGenerator] // 0x0015F408-0x0015F418
		private static void INTERNAL_CALL_ReadExtensionPropertyName(AudioListener self, int listenerIndex, out PropertyName value); // 0x00B1824C-0x00B182D4
		[GeneratedByOldBindingsGenerator] // 0x0015F418-0x0015F428
		internal float ReadExtensionPropertyValue(int listenerIndex); // 0x00B171FC-0x00B1727C
		internal void ClearExtensionProperties(PropertyName extensionName); // 0x00B1731C-0x00B1733C
		[GeneratedByOldBindingsGenerator] // 0x0015F428-0x0015F438
		private static void INTERNAL_CALL_ClearExtensionProperties(AudioListener self, ref PropertyName extensionName); // 0x00B182D4-0x00B18354
		internal AudioListenerExtension AddExtension(Type extensionType); // 0x00B16DEC-0x00B16EE8
	}

	[RequireComponent] // 0x0015EFA8-0x0015F020
	public sealed class AudioSource : AudioBehaviour // TypeDefIndex: 2309
	{
		// Fields
		internal AudioSourceExtension spatializerExtension; // 0x0C
		internal AudioSourceExtension ambisonicExtension; // 0x10
	
		// Properties
		public float volume { [GeneratedByOldBindingsGenerator] /* 0x0015F438-0x0015F448 */ get; [GeneratedByOldBindingsGenerator] /* 0x0015F448-0x0015F458 */ set; } // 0x00B18C60-0x00B18CF0 0x00B18CF0-0x00B18D94
		public float pitch { [GeneratedByOldBindingsGenerator] /* 0x0015F458-0x0015F468 */ get; [GeneratedByOldBindingsGenerator] /* 0x0015F468-0x0015F478 */ set; } // 0x00B18D94-0x00B18E24 0x00B18E24-0x00B18EC8
		[ThreadAndSerializationSafe] // 0x0015F598-0x0015F5A8
		public int timeSamples { [GeneratedByOldBindingsGenerator] /* 0x0015F478-0x0015F488 */ get; [GeneratedByOldBindingsGenerator] /* 0x0015F488-0x0015F498 */ set; } // 0x00B18EC8-0x00B18F5C 0x00B18F5C-0x00B19004
		[ThreadAndSerializationSafe] // 0x0015F5A8-0x0015F5B8
		public AudioClip clip { [GeneratedByOldBindingsGenerator] /* 0x0015F498-0x0015F4A8 */ get; [GeneratedByOldBindingsGenerator] /* 0x0015F4A8-0x0015F4B8 */ set; } // 0x00B18B08-0x00B18BA4 0x00B19004-0x00B190B0
		public bool isPlaying { [GeneratedByOldBindingsGenerator] /* 0x0015F4E8-0x0015F4F8 */ get; } // 0x00B17EC4-0x00B17F58 
		internal bool spatializeInternal { [GeneratedByOldBindingsGenerator] /* 0x0015F4F8-0x0015F508 */ get; } // 0x00B19200-0x00B1929C 
		public bool spatialize { get; } // 0x00B15E74-0x00B15E78 
	
		// Methods
		[GeneratedByOldBindingsGenerator] // 0x0015F4B8-0x0015F4C8
		public void Play([UnityEngine.Internal.DefaultValue] /* 0x0015F568-0x0015F598 */ ulong delay); // 0x00B190B0-0x00B19158
		[ExcludeFromDocs] // 0x0015F4C8-0x0015F4D8
		public void Play(); // 0x00B19158-0x00B19178
		[GeneratedByOldBindingsGenerator] // 0x0015F4D8-0x0015F4E8
		public void Stop(); // 0x00B19178-0x00B19200
		[GeneratedByOldBindingsGenerator] // 0x0015F508-0x0015F518
		internal int GetNumExtensionProperties(); // 0x00B16960-0x00B16A00
		internal PropertyName ReadExtensionName(int sourceIndex); // 0x00B16890-0x00B168B8
		[GeneratedByOldBindingsGenerator] // 0x0015F518-0x0015F528
		private static void INTERNAL_CALL_ReadExtensionName(AudioSource self, int sourceIndex, out PropertyName value); // 0x00B1929C-0x00B19324
		internal PropertyName ReadExtensionPropertyName(int sourceIndex); // 0x00B168B8-0x00B168E0
		[GeneratedByOldBindingsGenerator] // 0x0015F528-0x0015F538
		private static void INTERNAL_CALL_ReadExtensionPropertyName(AudioSource self, int sourceIndex, out PropertyName value); // 0x00B19324-0x00B193AC
		[GeneratedByOldBindingsGenerator] // 0x0015F538-0x0015F548
		internal float ReadExtensionPropertyValue(int sourceIndex); // 0x00B168E0-0x00B16960
		internal void ClearExtensionProperties(PropertyName extensionName); // 0x00B16A00-0x00B16A20
		[GeneratedByOldBindingsGenerator] // 0x0015F548-0x0015F558
		private static void INTERNAL_CALL_ClearExtensionProperties(AudioSource self, ref PropertyName extensionName); // 0x00B193AC-0x00B1942C
		internal AudioSourceExtension AddSpatializerExtension(Type extensionType); // 0x00B1601C-0x00B16118
		internal AudioSourceExtension AddAmbisonicExtension(Type extensionType); // 0x00B1678C-0x00B16888
	}

	[NativeHeader] // 0x001608A4-0x001608EC
	public static class ImageConversion // TypeDefIndex: 2311
	{
		// Extension methods
		[NativeMethod] // 0x001608EC-0x00160980
		public static byte[] EncodeToPNG(this Texture2D tex); // 0x00B8014C-0x00B801F4
		[NativeMethod] // 0x00160980-0x00160A14
		public static byte[] EncodeToJPG(this Texture2D tex, int quality); // 0x00B801F4-0x00B80274
		public static byte[] EncodeToJPG(this Texture2D tex); // 0x00B80274-0x00B8027C
		[NativeMethod] // 0x00160A24-0x00160AA4
		public static bool LoadImage([NotNull] /* 0x00160AA4-0x00160AB4 */ this Texture2D tex, byte[] data, bool markNonReadable); // 0x00B8027C-0x00B833FC
	}

	[NativeHeader] // 0x00161D8C-0x00161DEC
	public static class JsonUtility // TypeDefIndex: 2313
	{
		// Methods
		[FreeFunction] // 0x00161DEC-0x00161E54
		[ThreadSafe] // 0x00161DEC-0x00161E54
		private static object FromJsonInternal(string json, object objectToOverwrite, Type type); // 0x00B547D0-0x00B54858
		public static T FromJson<T>(string json);
		public static object FromJson(string json, Type type); // 0x00B54858-0x00B54A3C
		public static void FromJsonOverwrite(string json, object objectToOverwrite); // 0x00B54A3C-0x00B54BF0
	}

	public enum FontStyle // TypeDefIndex: 2315
	{
		Normal = 0,
		Bold = 1,
		Italic = 2,
		BoldAndItalic = 3
	}

	[Flags] // 0x0016311C-0x0016312C
	internal enum TextGenerationError // TypeDefIndex: 2316
	{
		None = 0,
		CustomSizeOnNonDynamicFont = 1,
		CustomStyleOnNonDynamicFont = 2,
		NoFont = 4
	}

	public struct TextGenerationSettings // TypeDefIndex: 2317
	{
		// Fields
		public Font font; // 0x00
		public Color color; // 0x04
		public int fontSize; // 0x14
		public float lineSpacing; // 0x18
		public bool richText; // 0x1C
		public float scaleFactor; // 0x20
		public FontStyle fontStyle; // 0x24
		public TextAnchor textAnchor; // 0x28
		public bool alignByGeometry; // 0x2C
		public bool resizeTextForBestFit; // 0x2D
		public int resizeTextMinSize; // 0x30
		public int resizeTextMaxSize; // 0x34
		public bool updateBounds; // 0x38
		public VerticalWrapMode verticalOverflow; // 0x3C
		public HorizontalWrapMode horizontalOverflow; // 0x40
		public Vector2 generationExtents; // 0x44
		public Vector2 pivot; // 0x4C
		public bool generateOutOfBounds; // 0x54
	
		// Methods
		private bool CompareColors(Color left, Color right); // 0x00B264B0-0x00B265CC
		private bool CompareVector2(Vector2 left, Vector2 right); // 0x00B265CC-0x00B268C4
		public bool Equals(TextGenerationSettings other); // 0x00B268C4-0x00B26978
	}

	[NativeHeader] // 0x0016312C-0x00163194
	[UsedByNativeCode] // 0x0016312C-0x00163194
	public sealed class TextGenerator : IDisposable // TypeDefIndex: 2318
	{
		// Fields
		internal IntPtr m_Ptr; // 0x08
		private string m_LastString; // 0x0C
		private TextGenerationSettings m_LastSettings; // 0x10
		private bool m_HasGenerated; // 0x68
		private TextGenerationError m_LastValid; // 0x6C
		private readonly List<UIVertex> m_Verts; // 0x70
		private readonly List<UICharInfo> m_Characters; // 0x74
		private readonly List<UILineInfo> m_Lines; // 0x78
		private bool m_CachedVerts; // 0x7C
		private bool m_CachedCharacters; // 0x7D
		private bool m_CachedLines; // 0x7E
	
		// Properties
		public int characterCountVisible { [CompilerGenerated] /* 0x00163338-0x00163348 */ get; } // 0x00B26D50-0x00B26D64 
		public IList<UIVertex> verts { get; } // 0x00B27C28-0x00B27C5C 
		public IList<UICharInfo> characters { get; } // 0x00B27C5C-0x00B27C90 
		public IList<UILineInfo> lines { get; } // 0x00B27C90-0x00B27CC4 
		public Rect rectExtents { get; } // 0x00B274B8-0x00B274F0 
		public int characterCount { get; } // 0x00B26D64-0x00B26DFC 
		public int lineCount { get; } // 0x00B27D44-0x00B27DD8 
	
		// Constructors
		public TextGenerator(); // 0x00B26978-0x00B26980
		public TextGenerator(int initialCapacity); // 0x00B26980-0x00B26A90
	
		// Methods
		~TextGenerator(); // 0x00B26B24-0x00B26C38
		void IDisposable.Dispose(); // 0x00B26C38-0x00B26CAC
		private TextGenerationSettings ValidatedSettings(TextGenerationSettings settings); // 0x00B26DFC-0x00B27188
		public void Invalidate(); // 0x00B27188-0x00B27194
		public void GetCharacters(List<UICharInfo> characters); // 0x00B27194-0x00B27198
		public void GetLines(List<UILineInfo> lines); // 0x00B27248-0x00B2724C
		public void GetVertices(List<UIVertex> vertices); // 0x00B272F8-0x00B272FC
		public float GetPreferredWidth(string str, TextGenerationSettings settings); // 0x00B273AC-0x00B27454
		public float GetPreferredHeight(string str, TextGenerationSettings settings); // 0x00B274F0-0x00B27594
		public bool PopulateWithErrors(string str, TextGenerationSettings settings, GameObject context); // 0x00B27594-0x00B27804
		public bool Populate(string str, TextGenerationSettings settings); // 0x00B27454-0x00B274B8
		private TextGenerationError PopulateWithError(string str, TextGenerationSettings settings); // 0x00B27804-0x00B278C8
		private TextGenerationError PopulateAlways(string str, TextGenerationSettings settings); // 0x00B278C8-0x00B27A9C
		[NativeMethod] // 0x00163348-0x00163378
		private static IntPtr Internal_Create(); // 0x00B26A90-0x00B26B24
		[NativeMethod] // 0x00163378-0x001633A8
		private static void Internal_Destroy(IntPtr ptr); // 0x00B26CAC-0x00B26D50
		internal bool Populate_Internal(string str, Font font, Color color, int fontSize, float scaleFactor, float lineSpacing, FontStyle style, bool richText, bool resizeTextForBestFit, int resizeTextMinSize, int resizeTextMaxSize, int verticalOverFlow, int horizontalOverflow, bool updateBounds, TextAnchor anchor, float extentsX, float extentsY, float pivotX, float pivotY, bool generateOutOfBounds, bool alignByGeometry, out uint error); // 0x00B27DD8-0x00B27EA4
		internal bool Populate_Internal(string str, Font font, Color color, int fontSize, float scaleFactor, float lineSpacing, FontStyle style, bool richText, bool resizeTextForBestFit, int resizeTextMinSize, int resizeTextMaxSize, VerticalWrapMode verticalOverFlow, HorizontalWrapMode horizontalOverflow, bool updateBounds, TextAnchor anchor, Vector2 extents, Vector2 pivot, bool generateOutOfBounds, bool alignByGeometry, out TextGenerationError error); // 0x00B27A9C-0x00B27C28
		[NativeThrows] // 0x001633A8-0x001633B8
		private void GetVerticesInternal(object vertices); // 0x00B272FC-0x00B273AC
		[NativeThrows] // 0x001633B8-0x001633C8
		private void GetCharactersInternal(object characters); // 0x00B27198-0x00B27248
		[NativeThrows] // 0x001633C8-0x001633D8
		private void GetLinesInternal(object lines); // 0x00B2724C-0x00B272F8
		private void get_rectExtents_Injected(out Rect ret); // 0x00B27CC4-0x00B27D44
		private bool Populate_Internal_Injected(string str, Font font, ref Color color, int fontSize, float scaleFactor, float lineSpacing, FontStyle style, bool richText, bool resizeTextForBestFit, int resizeTextMinSize, int resizeTextMaxSize, int verticalOverFlow, int horizontalOverflow, bool updateBounds, TextAnchor anchor, float extentsX, float extentsY, float pivotX, float pivotY, bool generateOutOfBounds, bool alignByGeometry, out uint error); // 0x00B27EA4-0x00B28014
	}

	public enum TextAnchor // TypeDefIndex: 2319
	{
		UpperLeft = 0,
		UpperCenter = 1,
		UpperRight = 2,
		MiddleLeft = 3,
		MiddleCenter = 4,
		MiddleRight = 5,
		LowerLeft = 6,
		LowerCenter = 7,
		LowerRight = 8
	}

	public enum HorizontalWrapMode // TypeDefIndex: 2320
	{
		Wrap = 0,
		Overflow = 1
	}

	public enum VerticalWrapMode // TypeDefIndex: 2321
	{
		Truncate = 0,
		Overflow = 1
	}

	[UsedByNativeCode] // 0x00163194-0x001631A4
	public struct UICharInfo // TypeDefIndex: 2322
	{
		// Fields
		public Vector2 cursorPos; // 0x00
		public float charWidth; // 0x08
	}

	[UsedByNativeCode] // 0x001631A4-0x001631B4
	public struct UILineInfo // TypeDefIndex: 2323
	{
		// Fields
		public int startCharIdx; // 0x00
		public int height; // 0x04
		public float topY; // 0x08
		public float leading; // 0x0C
	}

	[UsedByNativeCode] // 0x001631B4-0x001631C4
	public struct UIVertex // TypeDefIndex: 2324
	{
		// Fields
		public Vector3 position; // 0x00
		public Vector3 normal; // 0x0C
		public Vector4 tangent; // 0x18
		public Color32 color; // 0x28
		public Vector2 uv0; // 0x2C
		public Vector2 uv1; // 0x34
		public Vector2 uv2; // 0x3C
		public Vector2 uv3; // 0x44
		private static readonly Color32 s_DefaultColor; // 0x00
		private static readonly Vector4 s_DefaultTangent; // 0x04
		public static UIVertex simpleVert; // 0x14
	
		// Constructors
		static UIVertex(); // 0x00B28014-0x00B2826C
	}

	[NativeClass] // 0x001631C4-0x001632D0
	[NativeHeader] // 0x001631C4-0x001632D0
	[NativeHeader] // 0x001631C4-0x001632D0
	[StaticAccessor] // 0x001631C4-0x001632D0
	public sealed class Font : UnityEngine.Object // TypeDefIndex: 2325
	{
		// Fields
		[CompilerGenerated] // 0x001632D0-0x00163304
		[DebuggerBrowsable] // 0x001632D0-0x00163304
		private static Action<Font> textureRebuilt; // 0x00
		[CompilerGenerated] // 0x00163304-0x00163338
		[DebuggerBrowsable] // 0x00163304-0x00163338
		private FontTextureRebuildCallback m_FontTextureRebuildCallback; // 0x0C
	
		// Properties
		public Material material { get; } // 0x00B25B50-0x00B25BDC 
		public bool dynamic { get; } // 0x00B25BDC-0x00B25C64 
		public int fontSize { get; } // 0x00B25C64-0x00B25CF0 
	
		// Events
		public static event Action<Font> textureRebuilt {
			add; // 0x00B258F0-0x00B25A20
			remove; // 0x00B25A20-0x00B25B50
		}
	
		// Nested types
		public delegate void FontTextureRebuildCallback(); // TypeDefIndex: 2326; 0x00B25D94-0x00B261D0
	
		// Constructors
		public Font(); // 0x00B257E0-0x00B25870
	
		// Methods
		[RequiredByNativeCode] // 0x001633D8-0x001633E8
		internal static void InvokeTextureRebuilt_Internal(Font font); // 0x00B25CF0-0x00B25D94
		public bool HasCharacter(char c); // 0x00B261D0-0x00B261D4
		private bool HasCharacter(int c); // 0x00B261D4-0x00B26280
		private static void Internal_CreateFont([Writable] /* 0x001633E8-0x001633F8 */ Font self, string name); // 0x00B25870-0x00B258F0
	}
}

namespace UnityEngine.Networking
{
	[NativeHeader] // 0x001646C0-0x00164784
	[NativeHeader] // 0x001646C0-0x00164784
	[UsedByNativeCode] // 0x001646C0-0x00164784
	public class UnityWebRequestAsyncOperation : AsyncOperation // TypeDefIndex: 2328
	{
		// Fields
		[CompilerGenerated] // 0x001649E8-0x00164A1C
		[DebuggerBrowsable] // 0x001649E8-0x00164A1C
		private UnityWebRequest <webRequest>k__BackingField; // 0x10
	
		// Properties
		internal UnityWebRequest webRequest { [CompilerGenerated] /* 0x00164AC8-0x00164AD8 */ set; } // 0x00B03A90-0x00B03A98
	
		// Constructors
		public UnityWebRequestAsyncOperation(); // 0x00B06DA4-0x00B06DC8
	}

	[NativeHeader] // 0x00164784-0x001647E4
	public class UnityWebRequest : IDisposable // TypeDefIndex: 2329
	{
		// Fields
		[NonSerialized]
		internal IntPtr m_Ptr; // 0x08
		[NonSerialized]
		internal DownloadHandler m_DownloadHandler; // 0x0C
		[NonSerialized]
		internal UploadHandler m_UploadHandler; // 0x10
		[NonSerialized]
		internal CertificateHandler m_CertificateHandler; // 0x14
		[NonSerialized]
		internal Uri m_Uri; // 0x18
		[CompilerGenerated] // 0x00164A1C-0x00164A50
		[DebuggerBrowsable] // 0x00164A1C-0x00164A50
		private bool <disposeCertificateHandlerOnDispose>k__BackingField; // 0x1C
		[CompilerGenerated] // 0x00164A50-0x00164A84
		[DebuggerBrowsable] // 0x00164A50-0x00164A84
		private bool <disposeDownloadHandlerOnDispose>k__BackingField; // 0x1D
		[CompilerGenerated] // 0x00164A84-0x00164AB8
		[DebuggerBrowsable] // 0x00164A84-0x00164AB8
		private bool <disposeUploadHandlerOnDispose>k__BackingField; // 0x1E
	
		// Properties
		public bool disposeCertificateHandlerOnDispose { [CompilerGenerated] /* 0x00164B54-0x00164B64 */ get; [CompilerGenerated] /* 0x00164B64-0x00164B74 */ set; } // 0x00B035EC-0x00B035F4 0x00B035F4-0x00B035FC
		public bool disposeDownloadHandlerOnDispose { [CompilerGenerated] /* 0x00164B74-0x00164B84 */ get; [CompilerGenerated] /* 0x00164B84-0x00164B94 */ set; } // 0x00B035FC-0x00B03604 0x00B03604-0x00B0360C
		public bool disposeUploadHandlerOnDispose { [CompilerGenerated] /* 0x00164B94-0x00164BA4 */ get; [CompilerGenerated] /* 0x00164BA4-0x00164BB4 */ set; } // 0x00B0360C-0x00B03614 0x00B03614-0x00B0361C
		public string method { set; } // 0x00B0308C-0x00B03268
		public string error { get; } // 0x00B03EF0-0x00B03FE8 
		public string url { get; set; } // 0x00B041D8-0x00B041DC 0x00B02FE8-0x00B0308C
		public long responseCode { get; } // 0x00B04134-0x00B041D8 
		public bool isModifiable { [NativeMethod] /* 0x00164C5C-0x00164C98 */ get; } // 0x00B03C24-0x00B03CC8 
		public bool isDone { [NativeMethod] /* 0x00164C98-0x00164CCC */ get; } // 0x00B048A8-0x00B04948 
		public bool isNetworkError { [NativeMethod] /* 0x00164CCC-0x00164D08 */ get; } // 0x00B03FE8-0x00B04090 
		public bool isHttpError { [NativeMethod] /* 0x00164D08-0x00164D40 */ get; } // 0x00B04090-0x00B04134 
		public bool chunkedTransfer { set; } // 0x00B049C8-0x00B04AD4
		public UploadHandler uploadHandler { get; set; } // 0x00B03930-0x00B03938 0x00B033E4-0x00B034F4
		public DownloadHandler downloadHandler { get; set; } // 0x00B03928-0x00B03930 0x00B032D4-0x00B033E4
		public CertificateHandler certificateHandler { get; } // 0x00B039AC-0x00B039B4 
	
		// Nested types
		internal enum UnityWebRequestMethod // TypeDefIndex: 2330
		{
			Get = 0,
			Post = 1,
			Put = 2,
			Head = 3,
			Custom = 4
		}
	
		internal enum UnityWebRequestError // TypeDefIndex: 2331
		{
			OK = 0,
			Unknown = 1,
			SDKError = 2,
			UnsupportedProtocol = 3,
			MalformattedUrl = 4,
			CannotResolveProxy = 5,
			CannotResolveHost = 6,
			CannotConnectToHost = 7,
			AccessDenied = 8,
			GenericHttpError = 9,
			WriteError = 10,
			ReadError = 11,
			OutOfMemory = 12,
			Timeout = 13,
			HTTPPostError = 14,
			SSLCannotConnect = 15,
			Aborted = 16,
			TooManyRedirects = 17,
			ReceivedNoData = 18,
			SSLNotSupported = 19,
			FailedToSendData = 20,
			FailedToReceiveData = 21,
			SSLCertificateError = 22,
			SSLCipherNotAvailable = 23,
			SSLCACertError = 24,
			UnrecognizedContentEncoding = 25,
			LoginFailed = 26,
			SSLShutdownFailed = 27,
			NoInternetConnection = 28
		}
	
		// Constructors
		public UnityWebRequest(string url, string method); // 0x00B02EEC-0x00B02F3C
		public UnityWebRequest(string url, string method, DownloadHandler downloadHandler, UploadHandler uploadHandler); // 0x00B03268-0x00B032D4
	
		// Methods
		[NativeConditional] // 0x00164AD8-0x00164B44
		[NativeMethod] // 0x00164AD8-0x00164B44
		private static string GetWebErrorString(UnityWebRequestError err); // 0x00B034F4-0x00B0356C
		[VisibleToOtherModules] // 0x00164B44-0x00164B54
		internal static string GetHTTPStatusString(long responseCode); // 0x00B0356C-0x00B035EC
		internal static IntPtr Create(); // 0x00B02F3C-0x00B02FD4
		[NativeMethod] // 0x00164BB4-0x00164BE4
		private void Release(); // 0x00B0361C-0x00B036B8
		internal void InternalDestroy(); // 0x00B036B8-0x00B03734
		private void InternalSetDefaults(); // 0x00B02FD4-0x00B02FE8
		~UnityWebRequest(); // 0x00B037CC-0x00B03838
		public void Dispose(); // 0x00B03894-0x00B03928
		private void DisposeHandlers(); // 0x00B03838-0x00B03894
		[NativeThrows] // 0x00164BE4-0x00164BF4
		internal UnityWebRequestAsyncOperation BeginWebRequest(); // 0x00B039B4-0x00B03A58
		[Obsolete] // 0x00164BF4-0x00164C2C
		public AsyncOperation Send(); // 0x00B03A58-0x00B03A74
		public UnityWebRequestAsyncOperation SendWebRequest(); // 0x00B03A74-0x00B03A90
		[NativeMethod] // 0x00164C2C-0x00164C5C
		public void Abort(); // 0x00B03734-0x00B037CC
		private UnityWebRequestError SetMethod(UnityWebRequestMethod methodType); // 0x00B03A98-0x00B03B18
		internal void InternalSetMethod(UnityWebRequestMethod methodType); // 0x00B03B18-0x00B03C24
		private UnityWebRequestError SetCustomMethod(string customMethodName); // 0x00B03CC8-0x00B03D48
		internal void InternalSetCustomMethod(string customMethodName); // 0x00B03D48-0x00B03E54
		private UnityWebRequestError GetError(); // 0x00B03E54-0x00B03EF0
		private string GetUrl(); // 0x00B041DC-0x00B04278
		private UnityWebRequestError SetUrl(string url); // 0x00B047F8-0x00B048A8
		private void InternalSetUrl(string url); // 0x00B046EC-0x00B047F8
		private UnityWebRequestError SetChunked(bool chunked); // 0x00B04948-0x00B049C8
		[NativeMethod] // 0x00164D40-0x00164D80
		internal UnityWebRequestError InternalSetRequestHeader(string name, string value); // 0x00B04AD4-0x00B04B5C
		public void SetRequestHeader(string name, string value); // 0x00B04B5C-0x00B04D14
		private UnityWebRequestError SetUploadHandler(UploadHandler uh); // 0x00B04D14-0x00B04D94
		private UnityWebRequestError SetDownloadHandler(DownloadHandler dh); // 0x00B04D94-0x00B04E14
		public static UnityWebRequest Get(string uri); // 0x00B04E14-0x00B04ED8
		public static UnityWebRequest Post(string uri, string postData); // 0x00B04ED8-0x00B04F6C
		private static void SetupPost(UnityWebRequest request, string postData); // 0x00B04F6C-0x00B05118
		public static UnityWebRequest Post(string uri, WWWForm formData); // 0x00B05334-0x00B053C8
		private static void SetupPost(UnityWebRequest request, WWWForm formData); // 0x00B053C8-0x00B05668
	}
}

namespace UnityEngine
{
	public class WWWForm // TypeDefIndex: 2332
	{
		// Fields
		private List<byte[]> formData; // 0x08
		private List<string> fieldNames; // 0x0C
		private List<string> fileNames; // 0x10
		private List<string> types; // 0x14
		private byte[] boundary; // 0x18
		private bool containsFiles; // 0x1C
	
		// Properties
		internal static Encoding DefaultEncoding { get; } // 0x00B07174-0x00B0717C 
		public Dictionary<string, string> headers { get; } // 0x00B06BAC-0x00B06DA4 
		public byte[] data { get; } // 0x00B05668-0x00B06BAC 
	
		// Constructors
		public WWWForm(); // 0x00B06FF0-0x00B07174
	
		// Methods
		public void AddField(string fieldName, string value); // 0x00B0717C-0x00B071B8
		public void AddField(string fieldName, string value, Encoding e); // 0x00B071B8-0x00B07340
		public void AddField(string fieldName, int i); // 0x00B07340-0x00B0738C
		[ExcludeFromDocs] // 0x00164D80-0x00164D90
		public void AddBinaryData(string fieldName, byte[] contents, string fileName); // 0x00B0738C-0x00B073AC
		public void AddBinaryData(string fieldName, byte[] contents, [UnityEngine.Internal.DefaultValue] /* 0x00164EBC-0x00164EF0 */ string fileName, [UnityEngine.Internal.DefaultValue] /* 0x00164EF0-0x00164F24 */ string mimeType); // 0x00B073AC-0x00B07680
	}

	[VisibleToOtherModules] // 0x001647E4-0x00164874
	internal class WWWTranscoder // TypeDefIndex: 2333
	{
		// Fields
		private static byte[] ucHexChars; // 0x00
		private static byte[] lcHexChars; // 0x04
		private static byte urlEscapeChar; // 0x08
		private static byte[] urlSpace; // 0x0C
		private static byte[] dataSpace; // 0x10
		private static byte[] urlForbidden; // 0x14
		private static byte qpEscapeChar; // 0x18
		private static byte[] qpSpace; // 0x1C
		private static byte[] qpForbidden; // 0x20
	
		// Constructors
		static WWWTranscoder(); // 0x00B0858C-0x00B08874
	
		// Methods
		private static byte Hex2Byte(byte[] b, int offset); // 0x00B07914-0x00B079E0
		private static byte[] Byte2Hex(byte b, byte[] hexChars); // 0x00B079E0-0x00B07B00
		public static string DataEncode(string toEncode, Encoding e); // 0x00B05118-0x00B0524C
		public static byte[] DataEncode(byte[] toEncode); // 0x00B07864-0x00B07914
		public static string QPEncode(string toEncode, Encoding e); // 0x00B07730-0x00B07864
		public static byte[] Encode(byte[] input, byte escapeChar, byte[] space, byte[] forbidden, bool uppercase); // 0x00B07B00-0x00B07F90
		private static bool ByteArrayContains(byte[] array, byte b); // 0x00B07F90-0x00B08010
		public static byte[] URLDecode(byte[] toEncode); // 0x00B08010-0x00B080AC
		private static bool ByteSubArrayEquals(byte[] array, int index, byte[] comperand); // 0x00B0841C-0x00B084F8
		public static byte[] Decode(byte[] input, byte escapeChar, byte[] space); // 0x00B080AC-0x00B0841C
		public static bool SevenBitClean(string s, Encoding e); // 0x00B07680-0x00B07730
		public static bool SevenBitClean(byte[] input); // 0x00B084F8-0x00B0858C
	}
}

namespace UnityEngineInternal
{
	internal static class WebRequestUtils // TypeDefIndex: 2334
	{
		// Fields
		private static Regex domainRegex; // 0x00
	
		// Constructors
		static WebRequestUtils(); // 0x00B08F70-0x00B09004
	
		// Methods
		[RequiredByNativeCode] // 0x00164D90-0x00164DA0
		internal static string RedirectTo(string baseUri, string redirectUri); // 0x00B08874-0x00B089B8
		internal static string MakeInitialUrl(string targetUrl, string localUrl); // 0x00B04278-0x00B046EC
		internal static string MakeUriString(Uri targetUri, string targetUrl, bool prependProtocol); // 0x00B089B8-0x00B08E80
		private static string URLDecode(string encoded); // 0x00B08E80-0x00B08F70
	}
}

namespace UnityEngine.Networking
{
	[NativeHeader] // 0x00164874-0x001648A8
	public class CertificateHandler : IDisposable // TypeDefIndex: 2335
	{
		// Fields
		[NonSerialized]
		internal IntPtr m_Ptr; // 0x08
	
		// Methods
		[NativeMethod] // 0x00164DA0-0x00164DD0
		private void Release(); // 0x00B02534-0x00B025D4
		~CertificateHandler(); // 0x00B025D4-0x00B02638
		protected virtual bool ValidateCertificate(byte[] certificateData); // 0x00B026AC-0x00B026B4
		[RequiredByNativeCode] // 0x00164DD0-0x00164DE0
		internal bool ValidateCertificateNative(byte[] certificateData); // 0x00B026B4-0x00B026E0
		public void Dispose(); // 0x00B02638-0x00B026AC
	}

	[NativeHeader] // 0x001648A8-0x001648DC
	public class DownloadHandler : IDisposable // TypeDefIndex: 2336
	{
		// Fields
		[NonSerialized]
		[VisibleToOtherModules] // 0x00164AB8-0x00164AC8
		internal IntPtr m_Ptr; // 0x08
	
		// Properties
		public byte[] data { get; } // 0x00B0285C-0x00B0286C 
		public string text { get; } // 0x00B0286C-0x00B0287C 
	
		// Constructors
		[VisibleToOtherModules] // 0x00164DE0-0x00164DF0
		internal DownloadHandler(); // 0x00B026E0-0x00B026E8
	
		// Methods
		[NativeMethod] // 0x00164DF0-0x00164E20
		private void Release(); // 0x00B026E8-0x00B02784
		~DownloadHandler(); // 0x00B02784-0x00B027E8
		public void Dispose(); // 0x00B027E8-0x00B0285C
		protected virtual byte[] GetData(); // 0x00B0287C-0x00B02884
		protected virtual string GetText(); // 0x00B02884-0x00B0295C
		private Encoding GetTextEncoder(); // 0x00B0295C-0x00B02C9C
		private string GetContentType(); // 0x00B02C9C-0x00B02D40
		[NativeThrows] // 0x00164E20-0x00164E50
		[VisibleToOtherModules] // 0x00164E20-0x00164E50
		internal static byte[] InternalGetByteArray(DownloadHandler dh); // 0x00B02D40-0x00B02DD4
	}

	[NativeHeader] // 0x001648DC-0x00164910
	public sealed class DownloadHandlerBuffer : DownloadHandler // TypeDefIndex: 2337
	{
		// Constructors
		public DownloadHandlerBuffer(); // 0x00B02DD4-0x00B02DF8
	
		// Methods
		private static IntPtr Create(DownloadHandlerBuffer obj); // 0x00B02E10-0x00B02E88
		private void InternalCreateBuffer(); // 0x00B02DF8-0x00B02E10
		protected override byte[] GetData(); // 0x00B02E88-0x00B02E8C
		private byte[] InternalGetData(); // 0x00B02E8C-0x00B02EEC
	}

	[NativeHeader] // 0x00164910-0x0016497C
	public class UploadHandler : IDisposable // TypeDefIndex: 2338
	{
		// Fields
		[NonSerialized]
		internal IntPtr m_Ptr; // 0x08
	
		// Properties
		public string contentType { set; } // 0x00B05324-0x00B05334
	
		// Constructors
		internal UploadHandler(); // 0x00B06DC8-0x00B06DD0
	
		// Methods
		[NativeMethod] // 0x00164E50-0x00164E80
		private void Release(); // 0x00B06DD0-0x00B06E68
		~UploadHandler(); // 0x00B06E68-0x00B06ECC
		public void Dispose(); // 0x00B03938-0x00B039AC
		internal virtual void SetContentType(string newContentType); // 0x00B06ECC-0x00B06EEC
	}

	[NativeHeader] // 0x0016497C-0x001649E8
	public sealed class UploadHandlerRaw : UploadHandler // TypeDefIndex: 2339
	{
		// Constructors
		public UploadHandlerRaw(byte[] data); // 0x00B0524C-0x00B05324
	
		// Methods
		private static IntPtr Create(UploadHandlerRaw self, byte[] data); // 0x00B06EEC-0x00B06F6C
		[NativeMethod] // 0x00164E80-0x00164EBC
		private void InternalSetContentType(string newContentType); // 0x00B06F6C-0x00B06FEC
		internal override void SetContentType(string newContentType); // 0x00B06FEC-0x00B06FF0
	}
}

namespace UnityEngine.Experimental.XR
{
	[NativeHeader] // 0x0016627C-0x001662DC
	[UsedByNativeCode] // 0x0016627C-0x001662DC
	public struct TrackableId : IEquatable<TrackableId> // TypeDefIndex: 2341
	{
		// Fields
		private static TrackableId s_InvalidId; // 0x00
		private ulong m_SubId1; // 0x00
		private ulong m_SubId2; // 0x08
	
		// Constructors
		static TrackableId(); // 0x00B1CCE8-0x00B1CD50
	
		// Methods
		public override string ToString(); // 0x00B1CBA4-0x00B1CBAC
		public override int GetHashCode(); // 0x00B1CBAC-0x00B1CC94
		public override bool Equals(object obj); // 0x00B1CC94-0x00B1CC9C
		public bool Equals(TrackableId other); // 0x00B1CC9C-0x00B1CCE8
	}
}

namespace UnityEngine.Experimental
{
	public interface ISubsystemDescriptor // TypeDefIndex: 2342
	{
	}

	internal interface ISubsystemDescriptorImpl // TypeDefIndex: 2343
	{
		// Properties
		IntPtr ptr { set; }
	}

	[UsedByNativeCode] // 0x001662DC-0x00166324
	public class IntegratedSubsystemDescriptor : ISubsystemDescriptor, ISubsystemDescriptorImpl // TypeDefIndex: 2344
	{
		// Fields
		internal IntPtr m_Ptr; // 0x08
	
		// Properties
		IntPtr ISubsystemDescriptorImpl.ptr { set; } // 0x00B1B124-0x00B1B12C
	}

	public abstract class SubsystemDescriptor : ISubsystemDescriptor // TypeDefIndex: 2345
	{
		// Fields
		[CompilerGenerated] // 0x001670F8-0x0016712C
		[DebuggerBrowsable] // 0x001670F8-0x0016712C
		private string <id>k__BackingField; // 0x08
	
		// Properties
		public string id { [CompilerGenerated] /* 0x00167848-0x00167858 */ get; } // 0x00B1B458-0x00B1B460 
	}

	[NativeType] // 0x00166324-0x001663BC
	[UsedByNativeCode] // 0x00166324-0x001663BC
	public class IntegratedSubsystemDescriptor<TSubsystem> : IntegratedSubsystemDescriptor // TypeDefIndex: 2346
		where TSubsystem : IntegratedSubsystem
	{
	}

	internal static class Internal_SubsystemInstances // TypeDefIndex: 2347
	{
		// Fields
		internal static List<ISubsystem> s_IntegratedSubsystemInstances; // 0x00
		internal static List<ISubsystem> s_StandaloneSubsystemInstances; // 0x04
	
		// Constructors
		static Internal_SubsystemInstances(); // 0x00B1C230-0x00B1C33C
	
		// Methods
		[RequiredByNativeCode] // 0x00167858-0x00167868
		internal static void Internal_InitializeManagedInstance(IntPtr ptr, IntegratedSubsystem inst); // 0x00B1B95C-0x00B1BA50
		[RequiredByNativeCode] // 0x00167868-0x00167878
		internal static void Internal_ClearManagedInstances(); // 0x00B1BA50-0x00B1BDAC
		[RequiredByNativeCode] // 0x00167878-0x00167888
		internal static void Internal_RemoveInstanceByPtr(IntPtr ptr); // 0x00B1BDAC-0x00B1C230
	}

	internal static class Internal_SubsystemDescriptors // TypeDefIndex: 2348
	{
		// Fields
		private static bool analyticsEventRegistered; // 0x00
		internal static List<ISubsystemDescriptorImpl> s_IntegratedSubsystemDescriptors; // 0x04
		internal static List<ISubsystemDescriptor> s_StandaloneSubsystemDescriptors; // 0x08
	
		// Nested types
		[Serializable]
		private struct SubsystemInfo // TypeDefIndex: 2349
		{
			// Fields
			internal string id; // 0x00
		}
	
		// Constructors
		static Internal_SubsystemDescriptors(); // 0x00B1B828-0x00B1B95C
	
		// Methods
		[RequiredByNativeCode] // 0x00167888-0x00167898
		internal static bool Internal_AddDescriptor(SubsystemDescriptor descriptor); // 0x00B1B12C-0x00B1B458
		[RequiredByNativeCode] // 0x00167898-0x001678A8
		internal static void Internal_InitializeManagedDescriptor(IntPtr ptr, ISubsystemDescriptorImpl desc); // 0x00B1B460-0x00B1B5AC
		[RequiredByNativeCode] // 0x001678A8-0x001678B8
		internal static void Internal_ClearManagedDescriptors(); // 0x00B1B5AC-0x00B1B828
	}

	public interface ISubsystem // TypeDefIndex: 2350
	{
	}

	[NativeType] // 0x001663BC-0x00166424
	[UsedByNativeCode] // 0x001663BC-0x00166424
	public class IntegratedSubsystem : ISubsystem // TypeDefIndex: 2351
	{
		// Fields
		internal IntPtr m_Ptr; // 0x08
		internal ISubsystemDescriptor m_subsystemDescriptor; // 0x0C
	
		// Methods
		internal void SetHandle(IntegratedSubsystem inst); // 0x00B1B088-0x00B1B124
	}

	[UsedByNativeCode] // 0x00166424-0x00166474
	public class IntegratedSubsystem<TSubsystemDescriptor> : IntegratedSubsystem // TypeDefIndex: 2352
		where TSubsystemDescriptor : ISubsystemDescriptor
	{
	}
}

namespace UnityEngine.XR
{
	[NativeConditional] // 0x00166474-0x0016655C
	[NativeHeader] // 0x00166474-0x0016655C
	[RequiredByNativeCode] // 0x00166474-0x0016655C
	[StaticAccessor] // 0x00166474-0x0016655C
	public static class InputTracking // TypeDefIndex: 2353
	{
		// Fields
		[CompilerGenerated] // 0x0016712C-0x00167160
		[DebuggerBrowsable] // 0x0016712C-0x00167160
		private static Action<XRNodeState> trackingAcquired; // 0x00
		[CompilerGenerated] // 0x00167160-0x00167194
		[DebuggerBrowsable] // 0x00167160-0x00167194
		private static Action<XRNodeState> trackingLost; // 0x04
		[CompilerGenerated] // 0x00167194-0x001671C8
		[DebuggerBrowsable] // 0x00167194-0x001671C8
		private static Action<XRNodeState> nodeAdded; // 0x08
		[CompilerGenerated] // 0x001671C8-0x001671FC
		[DebuggerBrowsable] // 0x001671C8-0x001671FC
		private static Action<XRNodeState> nodeRemoved; // 0x0C
	
		// Nested types
		private enum TrackingStateEventType // TypeDefIndex: 2354
		{
			NodeAdded = 0,
			NodeRemoved = 1,
			TrackingAcquired = 2,
			TrackingLost = 3
		}
	
		// Constructors
		static InputTracking(); // 0x00B1D610-0x00B1D694
	
		// Methods
		[RequiredByNativeCode] // 0x001678B8-0x001678C8
		private static void InvokeTrackingEvent(TrackingStateEventType eventType, XRNode nodeType, long uniqueID, bool tracked); // 0x00B1D370-0x00B1D610
	}

	public enum XRNode // TypeDefIndex: 2355
	{
		LeftEye = 0,
		RightEye = 1,
		CenterEye = 2,
		Head = 3,
		LeftHand = 4,
		RightHand = 5,
		GameController = 6,
		TrackingReference = 7,
		HardwareTracker = 8
	}

	[Flags] // 0x0016655C-0x0016656C
	internal enum AvailableTrackingData // TypeDefIndex: 2356
	{
		None = 0,
		PositionAvailable = 1,
		RotationAvailable = 2,
		VelocityAvailable = 4,
		AngularVelocityAvailable = 8,
		AccelerationAvailable = 16,
		AngularAccelerationAvailable = 32
	}

	[UsedByNativeCode] // 0x0016656C-0x0016657C
	public struct XRNodeState // TypeDefIndex: 2357
	{
		// Fields
		private XRNode m_Type; // 0x00
		private AvailableTrackingData m_AvailableFields; // 0x04
		private Vector3 m_Position; // 0x08
		private Quaternion m_Rotation; // 0x14
		private Vector3 m_Velocity; // 0x24
		private Vector3 m_AngularVelocity; // 0x30
		private Vector3 m_Acceleration; // 0x3C
		private Vector3 m_AngularAcceleration; // 0x48
		private int m_Tracked; // 0x54
		private ulong m_UniqueID; // 0x58
	
		// Properties
		public ulong uniqueID { set; } // 0x00B1D694-0x00B1D6A4
		public XRNode nodeType { set; } // 0x00B1D6A4-0x00B1D6AC
		public bool tracked { set; } // 0x00B1D6AC-0x00B1D6B4
	}
}

namespace UnityEngine.Experimental.XR
{
	public struct FrameReceivedEventArgs // TypeDefIndex: 2358
	{
		// Fields
		internal XRCameraSubsystem m_CameraSubsystem; // 0x00
	}

	[NativeConditional] // 0x0016657C-0x0016664C
	[NativeHeader] // 0x0016657C-0x0016664C
	[NativeType] // 0x0016657C-0x0016664C
	[UsedByNativeCode] // 0x0016657C-0x0016664C
	public class XRCameraSubsystem : IntegratedSubsystem<XRCameraSubsystemDescriptor> // TypeDefIndex: 2359
	{
		// Fields
		[CompilerGenerated] // 0x001671FC-0x00167230
		[DebuggerBrowsable] // 0x001671FC-0x00167230
		private Action<FrameReceivedEventArgs> FrameReceived; // 0x10
	
		// Methods
		[RequiredByNativeCode] // 0x001678C8-0x001678D8
		private void InvokeFrameReceivedEvent(); // 0x00B1CD50-0x00B1CDC0
	}

	[NativeConditional] // 0x0016664C-0x00166724
	[NativeHeader] // 0x0016664C-0x00166724
	[NativeType] // 0x0016664C-0x00166724
	[UsedByNativeCode] // 0x0016664C-0x00166724
	public class XRCameraSubsystemDescriptor : IntegratedSubsystemDescriptor<XRCameraSubsystem> // TypeDefIndex: 2360
	{
	}

	public struct PointCloudUpdatedEventArgs // TypeDefIndex: 2361
	{
		// Fields
		internal XRDepthSubsystem m_DepthSubsystem; // 0x00
	}

	[NativeConditional] // 0x00166724-0x001667E4
	[NativeHeader] // 0x00166724-0x001667E4
	[NativeHeader] // 0x00166724-0x001667E4
	[UsedByNativeCode] // 0x00166724-0x001667E4
	public class XRDepthSubsystem : IntegratedSubsystem<XRDepthSubsystemDescriptor> // TypeDefIndex: 2362
	{
		// Fields
		[CompilerGenerated] // 0x00167230-0x00167264
		[DebuggerBrowsable] // 0x00167230-0x00167264
		private Action<PointCloudUpdatedEventArgs> PointCloudUpdated; // 0x10
	
		// Methods
		[RequiredByNativeCode] // 0x001678D8-0x001678E8
		private void InvokePointCloudUpdatedEvent(); // 0x00B1CDC0-0x00B1CE30
	}

	[NativeConditional] // 0x001667E4-0x001668BC
	[NativeHeader] // 0x001667E4-0x001668BC
	[NativeType] // 0x001667E4-0x001668BC
	[UsedByNativeCode] // 0x001667E4-0x001668BC
	public class XRDepthSubsystemDescriptor : IntegratedSubsystemDescriptor<XRDepthSubsystem> // TypeDefIndex: 2363
	{
	}

	[NativeHeader] // 0x001668BC-0x00166904
	[RequiredByNativeCode] // 0x001668BC-0x00166904
	public enum MeshGenerationStatus // TypeDefIndex: 2364
	{
		Success = 0,
		InvalidMeshId = 1,
		GenerationAlreadyInProgress = 2,
		Canceled = 3,
		UnknownError = 4
	}

	internal static class HashCodeHelper // TypeDefIndex: 2365
	{
		// Methods
		public static int Combine(int hash1, int hash2); // 0x00B1C33C-0x00B1C3A8
	}

	[NativeHeader] // 0x00166904-0x0016694C
	[RequiredByNativeCode] // 0x00166904-0x0016694C
	public struct MeshGenerationResult : IEquatable<MeshGenerationResult> // TypeDefIndex: 2366
	{
		// Fields
		[CompilerGenerated] // 0x00167264-0x00167298
		[DebuggerBrowsable] // 0x00167264-0x00167298
		private readonly TrackableId <MeshId>k__BackingField; // 0x00
		[CompilerGenerated] // 0x00167298-0x001672CC
		[DebuggerBrowsable] // 0x00167298-0x001672CC
		private readonly Mesh <Mesh>k__BackingField; // 0x10
		[CompilerGenerated] // 0x001672CC-0x00167300
		[DebuggerBrowsable] // 0x001672CC-0x00167300
		private readonly MeshCollider <MeshCollider>k__BackingField; // 0x14
		[CompilerGenerated] // 0x00167300-0x00167334
		[DebuggerBrowsable] // 0x00167300-0x00167334
		private readonly MeshGenerationStatus <Status>k__BackingField; // 0x18
		[CompilerGenerated] // 0x00167334-0x00167368
		[DebuggerBrowsable] // 0x00167334-0x00167368
		private readonly MeshVertexAttributes <Attributes>k__BackingField; // 0x1C
	
		// Properties
		public TrackableId MeshId { [CompilerGenerated] /* 0x001678E8-0x001678F8 */ get; } // 0x00B1C3A8-0x00B1C3B8 
		public Mesh Mesh { [CompilerGenerated] /* 0x001678F8-0x00167908 */ get; } // 0x00B1C3B8-0x00B1C3C0 
		public MeshCollider MeshCollider { [CompilerGenerated] /* 0x00167908-0x00167918 */ get; } // 0x00B1C3C0-0x00B1C3C8 
		public MeshGenerationStatus Status { [CompilerGenerated] /* 0x00167918-0x00167928 */ get; } // 0x00B1C3C8-0x00B1C3D0 
		public MeshVertexAttributes Attributes { [CompilerGenerated] /* 0x00167928-0x00167938 */ get; } // 0x00B1C3D0-0x00B1C6B0 
	
		// Methods
		public override bool Equals(object obj); // 0x00B1C6B0-0x00B1C6B8
		public bool Equals(MeshGenerationResult other); // 0x00B1C6B8-0x00B1C7E4
		public override int GetHashCode(); // 0x00B1C7E4-0x00B1C848
	}

	[Flags] // 0x0016694C-0x001669A4
	[NativeHeader] // 0x0016694C-0x001669A4
	[UsedByNativeCode] // 0x0016694C-0x001669A4
	public enum MeshVertexAttributes // TypeDefIndex: 2367
	{
		None = 0,
		Normals = 1,
		Tangents = 2,
		UVs = 4,
		Colors = 8
	}

	[NativeConditional] // 0x001669A4-0x00166A64
	[NativeHeader] // 0x001669A4-0x00166A64
	[NativeHeader] // 0x001669A4-0x00166A64
	[UsedByNativeCode] // 0x001669A4-0x00166A64
	public class XRMeshSubsystem : IntegratedSubsystem<XRMeshSubsystemDescriptor> // TypeDefIndex: 2368
	{
		// Methods
		[RequiredByNativeCode] // 0x00167938-0x00167948
		private void InvokeMeshReadyDelegate(MeshGenerationResult result, Action<MeshGenerationResult> onMeshGenerationComplete); // 0x00B1CE30-0x00B1CEE4
	}

	[NativeHeader] // 0x00166A64-0x00166B14
	[NativeType] // 0x00166A64-0x00166B14
	[UsedByNativeCode] // 0x00166A64-0x00166B14
	public class XRMeshSubsystemDescriptor : IntegratedSubsystemDescriptor<XRMeshSubsystem> // TypeDefIndex: 2369
	{
	}

	[Flags] // 0x00166B14-0x00166B44
	[UsedByNativeCode] // 0x00166B14-0x00166B44
	public enum PlaneAlignment // TypeDefIndex: 2370
	{
		Horizontal = 1,
		Vertical = 2,
		NonAxis = 4
	}

	[NativeConditional] // 0x00166B44-0x00166C3C
	[NativeHeader] // 0x00166B44-0x00166C3C
	[NativeHeader] // 0x00166B44-0x00166C3C
	[NativeHeader] // 0x00166B44-0x00166C3C
	[UsedByNativeCode] // 0x00166B44-0x00166C3C
	public struct BoundedPlane // TypeDefIndex: 2371
	{
		// Fields
		private uint m_InstanceId; // 0x00
		[CompilerGenerated] // 0x00167368-0x0016739C
		[DebuggerBrowsable] // 0x00167368-0x0016739C
		private TrackableId <Id>k__BackingField; // 0x08
		[CompilerGenerated] // 0x0016739C-0x001673D0
		[DebuggerBrowsable] // 0x0016739C-0x001673D0
		private TrackableId <SubsumedById>k__BackingField; // 0x18
		[CompilerGenerated] // 0x001673D0-0x00167404
		[DebuggerBrowsable] // 0x001673D0-0x00167404
		private Pose <Pose>k__BackingField; // 0x28
		[CompilerGenerated] // 0x00167404-0x00167438
		[DebuggerBrowsable] // 0x00167404-0x00167438
		private Vector3 <Center>k__BackingField; // 0x44
		[CompilerGenerated] // 0x00167438-0x0016746C
		[DebuggerBrowsable] // 0x00167438-0x0016746C
		private Vector2 <Size>k__BackingField; // 0x50
		[CompilerGenerated] // 0x0016746C-0x001674A0
		[DebuggerBrowsable] // 0x0016746C-0x001674A0
		private PlaneAlignment <Alignment>k__BackingField; // 0x58
	}

	public struct PlaneAddedEventArgs // TypeDefIndex: 2372
	{
		// Fields
		[CompilerGenerated] // 0x001674A0-0x001674D4
		[DebuggerBrowsable] // 0x001674A0-0x001674D4
		private XRPlaneSubsystem <PlaneSubsystem>k__BackingField; // 0x00
		[CompilerGenerated] // 0x001674D4-0x00167508
		[DebuggerBrowsable] // 0x001674D4-0x00167508
		private BoundedPlane <Plane>k__BackingField; // 0x08
	
		// Properties
		internal XRPlaneSubsystem PlaneSubsystem { [CompilerGenerated] /* 0x00167948-0x00167958 */ set; } // 0x00B1C848-0x00B1C850
		internal BoundedPlane Plane { [CompilerGenerated] /* 0x00167958-0x00167968 */ set; } // 0x00B1C850-0x00B1C8DC
	}

	public struct PlaneUpdatedEventArgs // TypeDefIndex: 2373
	{
		// Fields
		[CompilerGenerated] // 0x00167508-0x0016753C
		[DebuggerBrowsable] // 0x00167508-0x0016753C
		private XRPlaneSubsystem <PlaneSubsystem>k__BackingField; // 0x00
		[CompilerGenerated] // 0x0016753C-0x00167570
		[DebuggerBrowsable] // 0x0016753C-0x00167570
		private BoundedPlane <Plane>k__BackingField; // 0x08
	
		// Properties
		internal XRPlaneSubsystem PlaneSubsystem { [CompilerGenerated] /* 0x00167968-0x00167978 */ set; } // 0x00B1C970-0x00B1C978
		internal BoundedPlane Plane { [CompilerGenerated] /* 0x00167978-0x00167988 */ set; } // 0x00B1C978-0x00B1CA04
	}

	public struct PlaneRemovedEventArgs // TypeDefIndex: 2374
	{
		// Fields
		[CompilerGenerated] // 0x00167570-0x001675A4
		[DebuggerBrowsable] // 0x00167570-0x001675A4
		private XRPlaneSubsystem <PlaneSubsystem>k__BackingField; // 0x00
		[CompilerGenerated] // 0x001675A4-0x001675D8
		[DebuggerBrowsable] // 0x001675A4-0x001675D8
		private BoundedPlane <Plane>k__BackingField; // 0x08
	
		// Properties
		internal XRPlaneSubsystem PlaneSubsystem { [CompilerGenerated] /* 0x00167988-0x00167998 */ set; } // 0x00B1C8DC-0x00B1C8E4
		internal BoundedPlane Plane { [CompilerGenerated] /* 0x00167998-0x001679A8 */ set; } // 0x00B1C8E4-0x00B1C970
	}

	[NativeConditional] // 0x00166C3C-0x00166CFC
	[NativeHeader] // 0x00166C3C-0x00166CFC
	[NativeHeader] // 0x00166C3C-0x00166CFC
	[UsedByNativeCode] // 0x00166C3C-0x00166CFC
	public class XRPlaneSubsystem : IntegratedSubsystem<XRPlaneSubsystemDescriptor> // TypeDefIndex: 2375
	{
		// Fields
		[CompilerGenerated] // 0x001675D8-0x0016760C
		[DebuggerBrowsable] // 0x001675D8-0x0016760C
		private Action<PlaneAddedEventArgs> PlaneAdded; // 0x10
		[CompilerGenerated] // 0x0016760C-0x00167640
		[DebuggerBrowsable] // 0x0016760C-0x00167640
		private Action<PlaneUpdatedEventArgs> PlaneUpdated; // 0x14
		[CompilerGenerated] // 0x00167640-0x00167674
		[DebuggerBrowsable] // 0x00167640-0x00167674
		private Action<PlaneRemovedEventArgs> PlaneRemoved; // 0x18
	
		// Methods
		[RequiredByNativeCode] // 0x001679A8-0x001679B8
		private void InvokePlaneAddedEvent(BoundedPlane plane); // 0x00B1CEE4-0x00B1CFD8
		[RequiredByNativeCode] // 0x001679B8-0x001679C8
		private void InvokePlaneUpdatedEvent(BoundedPlane plane); // 0x00B1CFD8-0x00B1D0CC
		[RequiredByNativeCode] // 0x001679C8-0x001679D8
		private void InvokePlaneRemovedEvent(BoundedPlane removedPlane); // 0x00B1D0CC-0x00B1D1C0
	}

	[NativeHeader] // 0x00166CFC-0x00166DAC
	[NativeType] // 0x00166CFC-0x00166DAC
	[UsedByNativeCode] // 0x00166CFC-0x00166DAC
	public class XRPlaneSubsystemDescriptor : IntegratedSubsystemDescriptor<XRPlaneSubsystem> // TypeDefIndex: 2376
	{
	}

	[NativeHeader] // 0x00166DAC-0x00166E54
	[NativeHeader] // 0x00166DAC-0x00166E54
	[UsedByNativeCode] // 0x00166DAC-0x00166E54
	public struct ReferencePoint // TypeDefIndex: 2377
	{
		// Fields
		[CompilerGenerated] // 0x00167674-0x001676A8
		[DebuggerBrowsable] // 0x00167674-0x001676A8
		private TrackableId <Id>k__BackingField; // 0x00
		[CompilerGenerated] // 0x001676A8-0x001676DC
		[DebuggerBrowsable] // 0x001676A8-0x001676DC
		private TrackingState <TrackingState>k__BackingField; // 0x10
		[CompilerGenerated] // 0x001676DC-0x00167710
		[DebuggerBrowsable] // 0x001676DC-0x00167710
		private Pose <Pose>k__BackingField; // 0x14
	}

	[NativeHeader] // 0x00166E54-0x00166E88
	public struct ReferencePointUpdatedEventArgs // TypeDefIndex: 2378
	{
		// Fields
		[CompilerGenerated] // 0x00167710-0x00167744
		[DebuggerBrowsable] // 0x00167710-0x00167744
		private ReferencePoint <ReferencePoint>k__BackingField; // 0x00
		[CompilerGenerated] // 0x00167744-0x00167778
		[DebuggerBrowsable] // 0x00167744-0x00167778
		private TrackingState <PreviousTrackingState>k__BackingField; // 0x30
		[CompilerGenerated] // 0x00167778-0x001677AC
		[DebuggerBrowsable] // 0x00167778-0x001677AC
		private Pose <PreviousPose>k__BackingField; // 0x34
	
		// Properties
		internal ReferencePoint ReferencePoint { [CompilerGenerated] /* 0x001679D8-0x001679E8 */ set; } // 0x00B1CA04-0x00B1CA64
		internal TrackingState PreviousTrackingState { [CompilerGenerated] /* 0x001679E8-0x001679F8 */ set; } // 0x00B1CA64-0x00B1CA6C
		internal Pose PreviousPose { [CompilerGenerated] /* 0x001679F8-0x00167A08 */ set; } // 0x00B1CA6C-0x00B1CB00
	}

	[NativeConditional] // 0x00166E88-0x00166F20
	[NativeHeader] // 0x00166E88-0x00166F20
	[NativeHeader] // 0x00166E88-0x00166F20
	[UsedByNativeCode] // 0x00166E88-0x00166F20
	public class XRReferencePointSubsystem : IntegratedSubsystem<XRReferencePointSubsystemDescriptor> // TypeDefIndex: 2379
	{
		// Fields
		[CompilerGenerated] // 0x001677AC-0x001677E0
		[DebuggerBrowsable] // 0x001677AC-0x001677E0
		private Action<ReferencePointUpdatedEventArgs> ReferencePointUpdated; // 0x10
	
		// Methods
		[RequiredByNativeCode] // 0x00167A08-0x00167A18
		private void InvokeReferencePointUpdatedEvent(ReferencePoint updatedReferencePoint, TrackingState previousTrackingState, Pose previousPose); // 0x00B1D1C0-0x00B1D2F8
	}

	[NativeHeader] // 0x00166F20-0x00166F9C
	[NativeType] // 0x00166F20-0x00166F9C
	[UsedByNativeCode] // 0x00166F20-0x00166F9C
	public class XRReferencePointSubsystemDescriptor : IntegratedSubsystemDescriptor<XRReferencePointSubsystem> // TypeDefIndex: 2380
	{
	}

	[UsedByNativeCode] // 0x00166F9C-0x00166FAC
	public enum TrackingState // TypeDefIndex: 2381
	{
		Unknown = 0,
		Tracking = 1,
		Unavailable = 2
	}

	public struct SessionTrackingStateChangedEventArgs // TypeDefIndex: 2382
	{
		// Fields
		internal XRSessionSubsystem m_Session; // 0x00
		[CompilerGenerated] // 0x001677E0-0x00167814
		[DebuggerBrowsable] // 0x001677E0-0x00167814
		private TrackingState <NewState>k__BackingField; // 0x04
	
		// Properties
		public TrackingState NewState { [CompilerGenerated] /* 0x00167A18-0x00167A28 */ set; } // 0x00B1CB00-0x00B1CBA4
	}

	[NativeConditional] // 0x00166FAC-0x00167044
	[NativeHeader] // 0x00166FAC-0x00167044
	[NativeHeader] // 0x00166FAC-0x00167044
	[UsedByNativeCode] // 0x00166FAC-0x00167044
	public class XRSessionSubsystem : IntegratedSubsystem<XRSessionSubsystemDescriptor> // TypeDefIndex: 2383
	{
		// Fields
		[CompilerGenerated] // 0x00167814-0x00167848
		[DebuggerBrowsable] // 0x00167814-0x00167848
		private Action<SessionTrackingStateChangedEventArgs> TrackingStateChanged; // 0x10
	
		// Methods
		[RequiredByNativeCode] // 0x00167A28-0x00167A38
		private void InvokeTrackingStateChangedEvent(TrackingState newState); // 0x00B1D2F8-0x00B1D370
	}

	[NativeHeader] // 0x00167044-0x001670F8
	[NativeType] // 0x00167044-0x001670F8
	[UsedByNativeCode] // 0x00167044-0x001670F8
	public class XRSessionSubsystemDescriptor : IntegratedSubsystemDescriptor<XRSessionSubsystem> // TypeDefIndex: 2384
	{
	}
}

namespace UnityEngine.Experimental.Animations
{
	public interface IAnimationJobPlayable : IPlayable // TypeDefIndex: 2386
	{
	}
}

namespace UnityEngine
{
	[AttributeUsage] // 0x00168D00-0x00168D48
	[RequiredByNativeCode] // 0x00168D00-0x00168D48
	public sealed class SharedBetweenAnimatorsAttribute : Attribute // TypeDefIndex: 2387
	{
	}

	[RequiredByNativeCode] // 0x00168D48-0x00168D58
	public abstract class StateMachineBehaviour : ScriptableObject // TypeDefIndex: 2388
	{
		// Constructors
		protected StateMachineBehaviour(); // 0x00B257A0-0x00B257A8
	
		// Methods
		public virtual void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex); // 0x00B257A8-0x00B257AC
		public virtual void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex); // 0x00B257AC-0x00B257B0
		public virtual void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex); // 0x00B257B0-0x00B257B4
		public virtual void OnStateMove(Animator animator, AnimatorStateInfo stateInfo, int layerIndex); // 0x00B257B4-0x00B257B8
		public virtual void OnStateIK(Animator animator, AnimatorStateInfo stateInfo, int layerIndex); // 0x00B257B8-0x00B257BC
		public virtual void OnStateMachineEnter(Animator animator, int stateMachinePathHash); // 0x00B257BC-0x00B257C0
		public virtual void OnStateMachineExit(Animator animator, int stateMachinePathHash); // 0x00B257C0-0x00B257C4
		public virtual void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller); // 0x00B257C4-0x00B257C8
		public virtual void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller); // 0x00B257C8-0x00B257CC
		public virtual void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller); // 0x00B257CC-0x00B257D0
		public virtual void OnStateMove(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller); // 0x00B257D0-0x00B257D4
		public virtual void OnStateIK(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller); // 0x00B257D4-0x00B257D8
		public virtual void OnStateMachineEnter(Animator animator, int stateMachinePathHash, AnimatorControllerPlayable controller); // 0x00B257D8-0x00B257DC
		public virtual void OnStateMachineExit(Animator animator, int stateMachinePathHash, AnimatorControllerPlayable controller); // 0x00B257DC-0x00B257E0
	}
}

namespace UnityEngine.Animations
{
	[NativeHeader] // 0x00168D58-0x00168E38
	[NativeHeader] // 0x00168D58-0x00168E38
	[RequiredByNativeCode] // 0x00168D58-0x00168E38
	[StaticAccessor] // 0x00168D58-0x00168E38
	public struct AnimationClipPlayable : IPlayable, IEquatable<AnimationClipPlayable> // TypeDefIndex: 2389
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
	
		// Methods
		public PlayableHandle GetHandle(); // 0x00B22A48-0x00B22B08
		public bool Equals(AnimationClipPlayable other); // 0x00B22B08-0x00B22C00
	}
}

namespace UnityEngine.Experimental.Animations
{
	[NativeHeader] // 0x00168E38-0x00168ED4
	[NativeHeader] // 0x00168E38-0x00168ED4
	[RequiredByNativeCode] // 0x00168E38-0x00168ED4
	public struct AnimationHumanStream // TypeDefIndex: 2390
	{
		// Fields
		private IntPtr stream; // 0x00
	}
}

namespace UnityEngine.Animations
{
	[NativeHeader] // 0x00168ED4-0x00168FE8
	[NativeHeader] // 0x00168ED4-0x00168FE8
	[NativeHeader] // 0x00168ED4-0x00168FE8
	[RequiredByNativeCode] // 0x00168ED4-0x00168FE8
	[StaticAccessor] // 0x00168ED4-0x00168FE8
	public struct AnimationLayerMixerPlayable : IPlayable, IEquatable<AnimationLayerMixerPlayable> // TypeDefIndex: 2391
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
		private static readonly AnimationLayerMixerPlayable m_NullPlayable; // 0x00
	
		// Constructors
		internal AnimationLayerMixerPlayable(PlayableHandle handle); // 0x00B22C00-0x00B22C08
		static AnimationLayerMixerPlayable(); // 0x00B22CD0-0x00B22E80
	
		// Methods
		public PlayableHandle GetHandle(); // 0x00B22C08-0x00B22CC8
		public bool Equals(AnimationLayerMixerPlayable other); // 0x00B22CC8-0x00B22CD0
	}

	[NativeHeader] // 0x00168FE8-0x001690F0
	[NativeHeader] // 0x00168FE8-0x001690F0
	[NativeHeader] // 0x00168FE8-0x001690F0
	[RequiredByNativeCode] // 0x00168FE8-0x001690F0
	[StaticAccessor] // 0x00168FE8-0x001690F0
	public struct AnimationMixerPlayable : IPlayable, IEquatable<AnimationMixerPlayable> // TypeDefIndex: 2392
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
		private static readonly AnimationMixerPlayable m_NullPlayable; // 0x00
	
		// Constructors
		internal AnimationMixerPlayable(PlayableHandle handle); // 0x00B22E80-0x00B22E88
		static AnimationMixerPlayable(); // 0x00B22F50-0x00B23100
	
		// Methods
		public PlayableHandle GetHandle(); // 0x00B22E88-0x00B22F48
		public bool Equals(AnimationMixerPlayable other); // 0x00B22F48-0x00B22F50
	}

	[NativeHeader] // 0x001690F0-0x00169184
	[RequiredByNativeCode] // 0x001690F0-0x00169184
	[StaticAccessor] // 0x001690F0-0x00169184
	internal struct AnimationMotionXToDeltaPlayable : IPlayable, IEquatable<AnimationMotionXToDeltaPlayable> // TypeDefIndex: 2393
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
		private static readonly AnimationMotionXToDeltaPlayable m_NullPlayable; // 0x00
	
		// Constructors
		private AnimationMotionXToDeltaPlayable(PlayableHandle handle); // 0x00B23100-0x00B23108
		static AnimationMotionXToDeltaPlayable(); // 0x00B231D0-0x00B23380
	
		// Methods
		public PlayableHandle GetHandle(); // 0x00B23108-0x00B231C8
		public bool Equals(AnimationMotionXToDeltaPlayable other); // 0x00B231C8-0x00B231D0
	}

	[NativeHeader] // 0x00169184-0x00169290
	[NativeHeader] // 0x00169184-0x00169290
	[NativeHeader] // 0x00169184-0x00169290
	[RequiredByNativeCode] // 0x00169184-0x00169290
	[StaticAccessor] // 0x00169184-0x00169290
	internal struct AnimationOffsetPlayable : IPlayable, IEquatable<AnimationOffsetPlayable> // TypeDefIndex: 2394
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
		private static readonly AnimationOffsetPlayable m_NullPlayable; // 0x00
	
		// Constructors
		internal AnimationOffsetPlayable(PlayableHandle handle); // 0x00B23380-0x00B23388
		static AnimationOffsetPlayable(); // 0x00B23498-0x00B23648
	
		// Methods
		public PlayableHandle GetHandle(); // 0x00B23388-0x00B23490
		public bool Equals(AnimationOffsetPlayable other); // 0x00B23490-0x00B23498
	}

	[NativeHeader] // 0x00169290-0x001693EC
	[NativeHeader] // 0x00169290-0x001693EC
	[NativeHeader] // 0x00169290-0x001693EC
	[NativeHeader] // 0x00169290-0x001693EC
	[NativeHeader] // 0x00169290-0x001693EC
	[RequiredByNativeCode] // 0x00169290-0x001693EC
	[StaticAccessor] // 0x00169290-0x001693EC
	public struct AnimationPlayableOutput : IPlayableOutput // TypeDefIndex: 2395
	{
		// Fields
		private PlayableOutputHandle m_Handle; // 0x00
	}

	[NativeHeader] // 0x001693EC-0x001694F4
	[NativeHeader] // 0x001693EC-0x001694F4
	[NativeHeader] // 0x001693EC-0x001694F4
	[RequiredByNativeCode] // 0x001693EC-0x001694F4
	[StaticAccessor] // 0x001693EC-0x001694F4
	internal struct AnimationPosePlayable : IPlayable, IEquatable<AnimationPosePlayable> // TypeDefIndex: 2396
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
		private static readonly AnimationPosePlayable m_NullPlayable; // 0x00
	
		// Constructors
		internal AnimationPosePlayable(PlayableHandle handle); // 0x00B23648-0x00B23650
		static AnimationPosePlayable(); // 0x00B23760-0x00B23910
	
		// Methods
		public PlayableHandle GetHandle(); // 0x00B23650-0x00B23758
		public bool Equals(AnimationPosePlayable other); // 0x00B23758-0x00B23760
	}

	[NativeHeader] // 0x001694F4-0x0016960C
	[NativeHeader] // 0x001694F4-0x0016960C
	[NativeHeader] // 0x001694F4-0x0016960C
	[RequiredByNativeCode] // 0x001694F4-0x0016960C
	[StaticAccessor] // 0x001694F4-0x0016960C
	internal struct AnimationRemoveScalePlayable : IPlayable, IEquatable<AnimationRemoveScalePlayable> // TypeDefIndex: 2397
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
		private static readonly AnimationRemoveScalePlayable m_NullPlayable; // 0x00
	
		// Constructors
		internal AnimationRemoveScalePlayable(PlayableHandle handle); // 0x00B23910-0x00B23918
		static AnimationRemoveScalePlayable(); // 0x00B23A28-0x00B23CDC
	
		// Methods
		public PlayableHandle GetHandle(); // 0x00B23918-0x00B23A20
		public bool Equals(AnimationRemoveScalePlayable other); // 0x00B23A20-0x00B23A28
	}
}

namespace UnityEngine.Experimental.Animations
{
	[NativeHeader] // 0x0016960C-0x001696E8
	[NativeHeader] // 0x0016960C-0x001696E8
	[NativeHeader] // 0x0016960C-0x001696E8
	[RequiredByNativeCode] // 0x0016960C-0x001696E8
	[StaticAccessor] // 0x0016960C-0x001696E8
	public struct AnimationScriptPlayable : IAnimationJobPlayable, IEquatable<AnimationScriptPlayable> // TypeDefIndex: 2398
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
		private static readonly AnimationScriptPlayable m_NullPlayable; // 0x00
	
		// Constructors
		internal AnimationScriptPlayable(PlayableHandle handle); // 0x00B25468-0x00B25470
		static AnimationScriptPlayable(); // 0x00B25538-0x00B257A0
	
		// Methods
		public PlayableHandle GetHandle(); // 0x00B25470-0x00B25530
		public bool Equals(AnimationScriptPlayable other); // 0x00B25530-0x00B25538
	}

	[NativeHeader] // 0x001696E8-0x001697B4
	[NativeHeader] // 0x001696E8-0x001697B4
	[RequiredByNativeCode] // 0x001696E8-0x001697B4
	public struct AnimationStream // TypeDefIndex: 2399
	{
		// Fields
		private uint m_AnimatorBindingsVersion; // 0x00
		private IntPtr constant; // 0x04
		private IntPtr input; // 0x08
		private IntPtr output; // 0x0C
		private IntPtr workspace; // 0x10
		private IntPtr inputStreamAccessor; // 0x14
		private IntPtr animationHandleBinder; // 0x18
	}
}

namespace UnityEngine
{
	public enum AnimatorControllerParameterType // TypeDefIndex: 2400
	{
		Float = 1,
		Int = 3,
		Bool = 4,
		Trigger = 9
	}

	internal enum StateInfoIndex // TypeDefIndex: 2401
	{
		CurrentState = 0,
		NextState = 1,
		ExitState = 2,
		InterruptedState = 3
	}

	[NativeHeader] // 0x001697B4-0x00169824
	[NativeHeader] // 0x001697B4-0x00169824
	[UsedByNativeCode] // 0x001697B4-0x00169824
	public struct AnimatorClipInfo // TypeDefIndex: 2402
	{
		// Fields
		private int m_ClipInstanceID; // 0x00
		private float m_Weight; // 0x04
	}

	[NativeHeader] // 0x00169824-0x0016986C
	[RequiredByNativeCode] // 0x00169824-0x0016986C
	public struct AnimatorStateInfo // TypeDefIndex: 2403
	{
		// Fields
		private int m_Name; // 0x00
		private int m_Path; // 0x04
		private int m_FullPath; // 0x08
		private float m_NormalizedTime; // 0x0C
		private float m_Length; // 0x10
		private float m_Speed; // 0x14
		private float m_SpeedMultiplier; // 0x18
		private int m_Tag; // 0x1C
		private int m_Loop; // 0x20
	
		// Properties
		public int fullPathHash { get; } // 0x00B252B4-0x00B252C4 
		public float normalizedTime { get; } // 0x00B252C4-0x00B25370 
	}

	[NativeHeader] // 0x0016986C-0x001698B4
	[RequiredByNativeCode] // 0x0016986C-0x001698B4
	public struct AnimatorTransitionInfo // TypeDefIndex: 2404
	{
		// Fields
		[NativeName] // 0x00169E94-0x00169ED0
		private int m_FullPath; // 0x00
		[NativeName] // 0x00169ED0-0x00169F0C
		private int m_UserName; // 0x04
		[NativeName] // 0x00169F0C-0x00169F44
		private int m_Name; // 0x08
		[NativeName] // 0x00169F44-0x00169F84
		private bool m_HasFixedDuration; // 0x0C
		[NativeName] // 0x00169F84-0x00169FBC
		private float m_Duration; // 0x10
		[NativeName] // 0x00169FBC-0x00169FF8
		private float m_NormalizedTime; // 0x14
		[NativeName] // 0x00169FF8-0x0016A030
		private bool m_AnyState; // 0x18
		[NativeName] // 0x0016A030-0x0016A06C
		private int m_TransitionType; // 0x1C
	
		// Properties
		public int fullPathHash { get; } // 0x00B25370-0x00B25468 
	}

	[NativeHeader] // 0x001698B4-0x0016994C
	[NativeHeader] // 0x001698B4-0x0016994C
	[NativeHeader] // 0x001698B4-0x0016994C
	[UsedByNativeCode] // 0x001698B4-0x0016994C
	public class Animator : Behaviour // TypeDefIndex: 2405
	{
		// Properties
		public AnimatorControllerParameter[] parameters { [FreeFunction] /* 0x0016A1B4-0x0016A21C */ get; } // 0x00B248F4-0x00B24984 
		public bool hasBoundPlayables { [NativeMethod] /* 0x0016A27C-0x0016A2BC */ get; } // 0x00B24AEC-0x00B24C2C 
	
		// Methods
		public float GetFloat(int id); // 0x00B23E74-0x00B23E78
		public void SetFloat(string name, float value); // 0x00B23F18-0x00B23F1C
		public void SetFloat(int id, float value); // 0x00B23FA4-0x00B23FA8
		public bool GetBool(int id); // 0x00B24060-0x00B24064
		public void SetBool(string name, bool value); // 0x00B24104-0x00B24108
		public void SetBool(int id, bool value); // 0x00B24190-0x00B24194
		public int GetInteger(int id); // 0x00B2424C-0x00B24250
		public void SetInteger(string name, int value); // 0x00B242F4-0x00B242F8
		public void SetInteger(int id, int value); // 0x00B24380-0x00B24384
		public void SetTrigger(string name); // 0x00B2443C-0x00B24440
		public void SetTrigger(int id); // 0x00B244E8-0x00B244EC
		public void ResetTrigger(string name); // 0x00B24590-0x00B24594
		private void GetAnimatorStateInfo(int layerIndex, StateInfoIndex stateInfoIndex, out AnimatorStateInfo info); // 0x00B2463C-0x00B246CC
		public AnimatorStateInfo GetCurrentAnimatorStateInfo(int layerIndex); // 0x00B246CC-0x00B24724
		public AnimatorStateInfo GetNextAnimatorStateInfo(int layerIndex); // 0x00B24724-0x00B2477C
		private void GetAnimatorTransitionInfo(int layerIndex, out AnimatorTransitionInfo info); // 0x00B2477C-0x00B24804
		public AnimatorTransitionInfo GetAnimatorTransitionInfo(int layerIndex); // 0x00B24804-0x00B24850
		public bool IsInTransition(int layerIndex); // 0x00B24850-0x00B248F4
		public void Play(string stateName, [UnityEngine.Internal.DefaultValue] /* 0x0016A858-0x0016A888 */ int layer, [UnityEngine.Internal.DefaultValue] /* 0x0016A888-0x0016A8BC */ float normalizedTime); // 0x00B24984-0x00B249C0
		[FreeFunction] // 0x0016A21C-0x0016A27C
		public void Play(int stateNameHash, [UnityEngine.Internal.DefaultValue] /* 0x0016A8BC-0x0016A8EC */ int layer, [UnityEngine.Internal.DefaultValue] /* 0x0016A8EC-0x0016A920 */ float normalizedTime); // 0x00B24A5C-0x00B24AEC
		[NativeMethod] // 0x0016A2BC-0x0016A31C
		public static int StringToHash(string name); // 0x00B249C0-0x00B24A5C
		[FreeFunction] // 0x0016A31C-0x0016A388
		private void SetFloatString(string name, float value); // 0x00B23F1C-0x00B23FA4
		[FreeFunction] // 0x0016A388-0x0016A3F0
		private void SetFloatID(int id, float value); // 0x00B23FA8-0x00B24060
		[FreeFunction] // 0x0016A3F0-0x0016A458
		private float GetFloatID(int id); // 0x00B23E78-0x00B23F18
		[FreeFunction] // 0x0016A458-0x0016A4C0
		private void SetBoolString(string name, bool value); // 0x00B24108-0x00B24190
		[FreeFunction] // 0x0016A4C0-0x0016A524
		private void SetBoolID(int id, bool value); // 0x00B24194-0x00B2424C
		[FreeFunction] // 0x0016A524-0x0016A588
		private bool GetBoolID(int id); // 0x00B24064-0x00B24104
		[FreeFunction] // 0x0016A588-0x0016A5F4
		private void SetIntegerString(string name, int value); // 0x00B242F8-0x00B24380
		[FreeFunction] // 0x0016A5F4-0x0016A65C
		private void SetIntegerID(int id, int value); // 0x00B24384-0x00B2443C
		[FreeFunction] // 0x0016A65C-0x0016A6C4
		private int GetIntegerID(int id); // 0x00B24250-0x00B242F4
		[FreeFunction] // 0x0016A6C4-0x0016A730
		private void SetTriggerString(string name); // 0x00B24440-0x00B244E8
		[FreeFunction] // 0x0016A730-0x0016A798
		private void SetTriggerID(int id); // 0x00B244EC-0x00B24590
		[FreeFunction] // 0x0016A798-0x0016A808
		private void ResetTriggerString(string name); // 0x00B24594-0x00B2463C
	}

	[NativeAsStruct] // 0x0016994C-0x00169A38
	[NativeHeader] // 0x0016994C-0x00169A38
	[NativeHeader] // 0x0016994C-0x00169A38
	[NativeType] // 0x0016994C-0x00169A38
	[UsedByNativeCode] // 0x0016994C-0x00169A38
	public class AnimatorControllerParameter // TypeDefIndex: 2406
	{
		// Fields
		internal string m_Name; // 0x08
		internal AnimatorControllerParameterType m_Type; // 0x0C
		internal float m_DefaultFloat; // 0x10
		internal int m_DefaultInt; // 0x14
		internal bool m_DefaultBool; // 0x18
	
		// Properties
		public string name { get; } // 0x00B24C98-0x00B24CA0 
		public int nameHash { get; } // 0x00B24CA0-0x00B24CA8 
		public AnimatorControllerParameterType type { get; } // 0x00B24CA8-0x00B24CB0 
	
		// Constructors
		public AnimatorControllerParameter(); // 0x00B24C2C-0x00B24C98
	
		// Methods
		public override bool Equals(object o); // 0x00B24CB0-0x00B24DB4
		public override int GetHashCode(); // 0x00B24DB4-0x00B24DE8
	}
}

namespace UnityEngine.Animations
{
	[NativeHeader] // 0x00169A38-0x00169B98
	[NativeHeader] // 0x00169A38-0x00169B98
	[NativeHeader] // 0x00169A38-0x00169B98
	[NativeHeader] // 0x00169A38-0x00169B98
	[NativeHeader] // 0x00169A38-0x00169B98
	[RequiredByNativeCode] // 0x00169A38-0x00169B98
	[StaticAccessor] // 0x00169A38-0x00169B98
	public struct AnimatorControllerPlayable : IPlayable, IEquatable<AnimatorControllerPlayable> // TypeDefIndex: 2407
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
		private static readonly AnimatorControllerPlayable m_NullPlayable; // 0x00
	
		// Constructors
		internal AnimatorControllerPlayable(PlayableHandle handle); // 0x00B23CDC-0x00B23CE4
		static AnimatorControllerPlayable(); // 0x00B23DB4-0x00B23E74
	
		// Methods
		public PlayableHandle GetHandle(); // 0x00B23CE4-0x00B23CF8
		public void SetHandle(PlayableHandle handle); // 0x00B23CF8-0x00B23DAC
		public bool Equals(AnimatorControllerPlayable other); // 0x00B23DAC-0x00B23DB4
	}
}

namespace UnityEngine
{
	[DefaultMember] // 0x00169B98-0x00169C58
	[NativeHeader] // 0x00169B98-0x00169C58
	[NativeHeader] // 0x00169B98-0x00169C58
	[UsedByNativeCode] // 0x00169B98-0x00169C58
	public class AnimatorOverrideController : RuntimeAnimatorController // TypeDefIndex: 2408
	{
		// Fields
		internal OnOverrideControllerDirtyCallback OnOverrideControllerDirty; // 0x0C
	
		// Nested types
		internal delegate void OnOverrideControllerDirtyCallback(); // TypeDefIndex: 2409; 0x00B24E18-0x00B25260
	
		// Methods
		[NativeConditional] // 0x0016A808-0x0016A858
		[RequiredByNativeCode] // 0x0016A808-0x0016A858
		internal static void OnInvalidateOverrideController(AnimatorOverrideController controller); // 0x00B24DE8-0x00B24E18
	}

	[NativeHeader] // 0x00169C58-0x00169CD8
	[NativeType] // 0x00169C58-0x00169CD8
	[RequiredByNativeCode] // 0x00169C58-0x00169CD8
	public struct SkeletonBone // TypeDefIndex: 2410
	{
		// Fields
		[NativeName] // 0x0016A06C-0x0016A0A0
		public string name; // 0x00
		[NativeName] // 0x0016A0A0-0x0016A0DC
		internal string parentName; // 0x04
		[NativeName] // 0x0016A0DC-0x0016A114
		public Vector3 position; // 0x08
		[NativeName] // 0x0016A114-0x0016A14C
		public Quaternion rotation; // 0x14
		[NativeName] // 0x0016A14C-0x0016A180
		public Vector3 scale; // 0x24
	}

	[NativeHeader] // 0x00169CD8-0x00169DA0
	[NativeHeader] // 0x00169CD8-0x00169DA0
	[NativeType] // 0x00169CD8-0x00169DA0
	public struct HumanLimit // TypeDefIndex: 2411
	{
		// Fields
		private Vector3 m_Min; // 0x00
		private Vector3 m_Max; // 0x0C
		private Vector3 m_Center; // 0x18
		private float m_AxisLength; // 0x24
		private int m_UseDefaultValues; // 0x28
	}

	[NativeHeader] // 0x00169DA0-0x00169E1C
	[NativeType] // 0x00169DA0-0x00169E1C
	[RequiredByNativeCode] // 0x00169DA0-0x00169E1C
	public struct HumanBone // TypeDefIndex: 2412
	{
		// Fields
		private string m_BoneName; // 0x00
		private string m_HumanName; // 0x04
		[NativeName] // 0x0016A180-0x0016A1B4
		public HumanLimit limit; // 0x08
	}

	[ExcludeFromObjectFactory] // 0x00169E1C-0x00169E74
	[NativeHeader] // 0x00169E1C-0x00169E74
	[UsedByNativeCode] // 0x00169E1C-0x00169E74
	public class RuntimeAnimatorController : UnityEngine.Object // TypeDefIndex: 2413
	{
	}

	internal enum AnimationEventSource // TypeDefIndex: 2414
	{
		NoSource = 0,
		Legacy = 1,
		Animator = 2
	}

	[Serializable]
	[RequiredByNativeCode] // 0x00169E74-0x00169E84
	public sealed class AnimationEvent // TypeDefIndex: 2415
	{
		// Fields
		internal float m_Time; // 0x08
		internal string m_FunctionName; // 0x0C
		internal string m_StringParameter; // 0x10
		internal UnityEngine.Object m_ObjectReferenceParameter; // 0x14
		internal float m_FloatParameter; // 0x18
		internal int m_IntParameter; // 0x1C
		internal int m_MessageOptions; // 0x20
		internal AnimationEventSource m_Source; // 0x24
		internal AnimationState m_StateSender; // 0x28
		internal AnimatorStateInfo m_AnimatorStateInfo; // 0x2C
		internal AnimatorClipInfo m_AnimatorClipInfo; // 0x50
	
		// Constructors
		public AnimationEvent(); // 0x00B229BC-0x00B22A48
	}

	[UsedByNativeCode] // 0x00169E84-0x00169E94
	public sealed class AnimationState : TrackedReference // TypeDefIndex: 2416
	{
	}

	[NativeHeader] // 0x0016BBF8-0x0016BC78
	[StaticAccessor] // 0x0016BBF8-0x0016BC78
	public sealed class Event // TypeDefIndex: 2418
	{
		// Fields
		[NonSerialized]
		internal IntPtr m_Ptr; // 0x08
		private static Event s_Current; // 0x00
		private static Event s_MasterEvent; // 0x04
		[CompilerGenerated] // 0x0016C378-0x0016C388
		private static Dictionary<string, int> <>f__switch$map0; // 0x08
	
		// Properties
		[NativeProperty] // 0x0016E7E0-0x0016E828
		public EventType rawType { get; } // 0x00784588-0x00784614 
		[NativeProperty] // 0x0016E828-0x0016E878
		public Vector2 mousePosition { get; } // 0x00784614-0x00784650 
		[NativeProperty] // 0x0016E878-0x0016E8C0
		public Vector2 delta { get; } // 0x007846D0-0x0078470C 
		[NativeProperty] // 0x0016E8C0-0x0016E90C
		public EventModifiers modifiers { get; set; } // 0x007847B8-0x00784844 0x00784844-0x007848F4
		[NativeProperty] // 0x0016E90C-0x0016E958
		public int clickCount { get; } // 0x007848F4-0x00784980 
		[NativeProperty] // 0x0016E958-0x0016E9A4
		public char character { get; set; } // 0x00784980-0x00784A0C 0x00784A0C-0x00784AAC
		[NativeProperty] // 0x0016E9A4-0x0016E9EC
		public KeyCode keyCode { get; set; } // 0x00784AAC-0x00784B38 0x00784B38-0x00784BDC
		[NativeProperty] // 0x0016E9EC-0x0016EA3C
		public int displayIndex { set; } // 0x00784BDC-0x00784C80
		public EventType type { [FreeFunction] /* 0x0016D1B8-0x0016D208 */ get; [FreeFunction] /* 0x0016D208-0x0016D258 */ set; } // 0x00784C80-0x00784D08 0x00784D08-0x00784DAC
		public string commandName { [FreeFunction] /* 0x0016D258-0x0016D2B0 */ get; } // 0x00784DAC-0x00784E3C 
		public bool shift { get; } // 0x00785314-0x00785328 
		public bool alt { get; } // 0x00785328-0x0078533C 
		public static Event current { get; } // 0x0078533C-0x007853A0 
		public bool isKey { get; } // 0x007853A0-0x007853C0 
		public bool isMouse { get; } // 0x007853C0-0x007853F0 
	
		// Constructors
		public Event(); // 0x007844A0-0x007844C4
		public Event(int displayIndex); // 0x00784560-0x00784588
	
		// Methods
		[NativeMethod] // 0x0016D2B0-0x0016D2E0
		private void Internal_Use(); // 0x00784E3C-0x00784EC8
		[FreeFunction] // 0x0016D2E0-0x0016D338
		private static IntPtr Internal_Create(int displayIndex); // 0x007844C4-0x00784560
		[FreeFunction] // 0x0016D338-0x0016D390
		private static void Internal_Destroy(IntPtr ptr); // 0x00784EC8-0x00784F64
		[FreeFunction] // 0x0016D390-0x0016D3E8
		public EventType GetTypeForControl(int controlID); // 0x00784F64-0x00785008
		public static bool PopEvent(Event outEvent); // 0x00785008-0x007850A0
		private static void Internal_SetNativeEvent(IntPtr ptr); // 0x007850A0-0x00785144
		[RequiredByNativeCode] // 0x0016D3E8-0x0016D3F8
		internal static void Internal_MakeMasterEventCurrent(int displayIndex); // 0x00785144-0x0078524C
		~Event(); // 0x0078524C-0x00785314
		public static Event KeyboardEvent(string key); // 0x007853F0-0x00787424
		public override int GetHashCode(); // 0x00787424-0x007874D8
		public override bool Equals(object obj); // 0x007874D8-0x0078775C
		public override string ToString(); // 0x0078775C-0x007880C4
		public void Use(); // 0x007880C4-0x00788240
		private void get_mousePosition_Injected(out Vector2 ret); // 0x00784650-0x007846D0
		private void get_delta_Injected(out Vector2 ret); // 0x0078470C-0x007847B8
	}

	public enum EventType // TypeDefIndex: 2419
	{
		MouseDown = 0,
		mouseDown = 0,
		MouseUp = 1,
		mouseUp = 1,
		MouseMove = 2,
		mouseMove = 2,
		MouseDrag = 3,
		mouseDrag = 3,
		KeyDown = 4,
		keyDown = 4,
		KeyUp = 5,
		keyUp = 5,
		ScrollWheel = 6,
		scrollWheel = 6,
		Repaint = 7,
		repaint = 7,
		Layout = 8,
		layout = 8,
		DragUpdated = 9,
		dragUpdated = 9,
		DragPerform = 10,
		dragPerform = 10,
		Ignore = 11,
		ignore = 11,
		Used = 12,
		used = 12,
		ValidateCommand = 13,
		ExecuteCommand = 14,
		DragExited = 15,
		ContextClick = 16,
		MouseEnterWindow = 20,
		MouseLeaveWindow = 21
	}

	[Flags] // 0x0016BC78-0x0016BC88
	public enum EventModifiers // TypeDefIndex: 2420
	{
		None = 0,
		Shift = 1,
		Control = 2,
		Alt = 4,
		Command = 8,
		Numeric = 16,
		CapsLock = 32,
		FunctionKey = 64
	}

	[NativeHeader] // 0x0016BC88-0x0016BD00
	[NativeHeader] // 0x0016BC88-0x0016BD00
	public class GUI // TypeDefIndex: 2421
	{
		// Fields
		private static int s_ScrollControlId; // 0x00
		private static int s_HotTextField; // 0x04
		private static readonly int s_BoxHash; // 0x08
		private static readonly int s_ButonHash; // 0x0C
		private static readonly int s_RepeatButtonHash; // 0x10
		private static readonly int s_ToggleHash; // 0x14
		private static readonly int s_ButtonGridHash; // 0x18
		private static readonly int s_SliderHash; // 0x1C
		private static readonly int s_BeginGroupHash; // 0x20
		private static readonly int s_ScrollviewHash; // 0x24
		[CompilerGenerated] // 0x0016C9E4-0x0016CA18
		[DebuggerBrowsable] // 0x0016C9E4-0x0016CA18
		private static int <scrollTroughSide>k__BackingField; // 0x28
		[CompilerGenerated] // 0x0016CA18-0x0016CA4C
		[DebuggerBrowsable] // 0x0016CA18-0x0016CA4C
		private static DateTime <nextScrollStepTime>k__BackingField; // 0x30
		private static GUISkin s_Skin; // 0x38
		private static readonly GenericStack s_ScrollViewStates; // 0x3C
	
		// Properties
		public static bool changed { set; } // 0x0078866C-0x00788704
		public static bool enabled { get; set; } // 0x00788704-0x00788788 0x00788788-0x00788820
		internal static bool usePageScrollbars { get; } // 0x00788820-0x007888B0 
		internal static int scrollTroughSide { [CompilerGenerated] /* 0x0016D448-0x0016D458 */ get; [CompilerGenerated] /* 0x0016D458-0x0016D468 */ set; } // 0x00788EC4-0x00788F50 0x00788F50-0x00788FE0
		internal static DateTime nextScrollStepTime { [CompilerGenerated] /* 0x0016D468-0x0016D478 */ get; [CompilerGenerated] /* 0x0016D478-0x0016D488 */ set; } // 0x00788FE0-0x00789074 0x007885D8-0x0078866C
		public static GUISkin skin { get; set; } // 0x00789290-0x00789320 0x00789074-0x007890F8
	
		// Nested types
		public enum ToolbarButtonSize // TypeDefIndex: 2422
		{
			Fixed = 0,
			FitToContents = 1
		}
	
		public delegate void WindowFunction(int id); // TypeDefIndex: 2423; 0x00793C94-0x007940F8
	
		// Constructors
		static GUI(); // 0x00788240-0x007885D8
	
		// Methods
		private static void GrabMouseControl(int id); // 0x007888B0-0x00788948
		private static bool HasMouseControl(int id); // 0x00788948-0x007889E0
		private static void ReleaseMouseControl(); // 0x007889E0-0x00788A6C
		[FreeFunction] // 0x0016D3F8-0x0016D448
		public static void SetNextControlName(string name); // 0x00788A6C-0x00788B08
		internal static void InternalRepaintEditorWindow(); // 0x00788B08-0x00788B9C
		private static Rect Internal_DoModalWindow(int id, int instanceID, Rect clientRect, WindowFunction func, GUIContent content, GUIStyle style, object skin); // 0x00788B9C-0x00788C80
		private static Rect Internal_DoWindow(int id, int instanceID, Rect clientRect, WindowFunction func, GUIContent title, GUIStyle style, object skin, bool forceRectOnLayout); // 0x00788D10-0x00788E04
		internal static void DoSetSkin(GUISkin newSkin); // 0x007891A0-0x00789290
		public static void Label(Rect position, string text); // 0x0078946C-0x0078957C
		public static void Label(Rect position, string text, GUIStyle style); // 0x00789738-0x0078981C
		public static void Label(Rect position, GUIContent content, GUIStyle style); // 0x00789684-0x00789738
		public static void Box(Rect position, string text); // 0x00789A74-0x00789B84
		public static void Box(Rect position, GUIContent content, GUIStyle style); // 0x00789B8C-0x00789D00
		public static bool Button(Rect position, string text); // 0x00789D88-0x00789E98
		public static bool Button(Rect position, GUIContent content); // 0x00789F88-0x0078A060
		public static bool Button(Rect position, string text, GUIStyle style); // 0x0078A060-0x0078A144
		public static bool Button(Rect position, GUIContent content, GUIStyle style); // 0x00789EA0-0x00789F88
		private static bool DoRepeatButton(Rect position, GUIContent content, GUIStyle style, FocusType focusType); // 0x0078A22C-0x0078A66C
		public static string TextField(Rect position, string text); // 0x0078A674-0x0078A7C0
		internal static string PasswordFieldGetStrToShow(string password, char maskChar); // 0x0078A8D8-0x0078AA74
		internal static void DoTextField(Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style); // 0x0078A7FC-0x0078A8D0
		internal static void DoTextField(Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style, string secureText); // 0x0078AA74-0x0078AB68
		internal static void DoTextField(Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style, string secureText, char maskChar); // 0x0078AB68-0x0078AEFC
		private static void HandleTextFieldEventForTouchscreen(Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style, string secureText, char maskChar, TextEditor editor); // 0x0078B0E4-0x0078B69C
		private static void HandleTextFieldEventForDesktop(Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style, TextEditor editor); // 0x0078B69C-0x0078C06C
		public static int Toolbar(Rect position, int selected, GUIContent[] contents, GUIStyle style, ToolbarButtonSize buttonSize); // 0x0078D1F8-0x0078D2C0
		internal static int Toolbar(Rect position, int selected, GUIContent[] contents, string[] controlNames, GUIStyle style, ToolbarButtonSize buttonSize); // 0x0078D2C0-0x0078D40C
		internal static void FindStyles(ref GUIStyle style, out GUIStyle firstStyle, out GUIStyle midStyle, out GUIStyle lastStyle, string first, string mid, string last); // 0x0078D40C-0x0078D640
		internal static int CalcTotalHorizSpacing(int xCount, GUIStyle style, GUIStyle firstStyle, GUIStyle midStyle, GUIStyle lastStyle); // 0x0078E4F4-0x0078E7E4
		private static bool DoControl(Rect position, int id, bool on, GUIContent content, GUIStyle style); // 0x0078E87C-0x0078EC18
		private static void DoLabel(Rect position, GUIContent content, GUIStyle style); // 0x0078981C-0x00789A74
		internal static bool DoButton(Rect position, int id, GUIContent content, GUIStyle style); // 0x0078A170-0x0078A22C
		private static int DoButtonGrid(Rect position, int selected, GUIContent[] contents, string[] controlNames, int xCount, GUIStyle style, GUIStyle firstStyle, GUIStyle midStyle, GUIStyle lastStyle, ToolbarButtonSize buttonSize); // 0x0078D640-0x0078E31C
		private static Rect[] CalcMouseRects(Rect position, GUIContent[] contents, int xCount, float elemWidth, float elemHeight, GUIStyle style, GUIStyle firstStyle, GUIStyle midStyle, GUIStyle lastStyle, bool addBorders, ToolbarButtonSize buttonSize); // 0x0078EE64-0x0078F630
		public static float Slider(Rect position, float value, float size, float start, float end, GUIStyle slider, GUIStyle thumb, bool horiz, int id); // 0x0078F710-0x0078F8FC
		public static float HorizontalScrollbar(Rect position, float value, float size, float leftValue, float rightValue, GUIStyle style); // 0x0078F8FC-0x0078FAF4
		internal static bool ScrollerRepeatButton(int scrollerID, Rect rect, GUIStyle style); // 0x00790688-0x00790A40
		public static float VerticalScrollbar(Rect position, float value, float size, float topValue, float bottomValue, GUIStyle style); // 0x00790A40-0x00790C30
		internal static float Scroller(Rect position, float value, float size, float leftValue, float rightValue, GUIStyle slider, GUIStyle thumb, GUIStyle leftButton, GUIStyle rightButton, bool horiz); // 0x0078FF04-0x00790688
		public static void BeginGroup(Rect position, GUIContent content, GUIStyle style); // 0x00790C30-0x00790D28
		internal static void BeginGroup(Rect position, GUIContent content, GUIStyle style, Vector2 scrollOffset); // 0x00790D28-0x00791048
		public static void EndGroup(); // 0x0079116C-0x00791180
		internal static Vector2 BeginScrollView(Rect position, Vector2 scrollPosition, Rect viewRect, bool alwaysShowHorizontal, bool alwaysShowVertical, GUIStyle horizontalScrollbar, GUIStyle verticalScrollbar, GUIStyle background); // 0x00791208-0x007924F0
		public static void EndScrollView(bool handleScrollWheel); // 0x007925E8-0x00792B2C
		public static Rect Window(int id, Rect clientRect, WindowFunction func, string text); // 0x00792B30-0x00792C70
		public static Rect ModalWindow(int id, Rect clientRect, WindowFunction func, string text, GUIStyle style); // 0x00792DA0-0x00792EC0
		private static Rect DoWindow(int id, Rect clientRect, WindowFunction func, GUIContent title, GUIStyle style, GUISkin skin, bool forceRectOnLayout); // 0x00792C78-0x00792DA0
		private static Rect DoModalWindow(int id, Rect clientRect, WindowFunction func, GUIContent content, GUIStyle style, GUISkin skin); // 0x00792EC0-0x00792FDC
		[RequiredByNativeCode] // 0x0016D488-0x0016D498
		internal static void CallWindowDelegate(WindowFunction func, int id, int instanceID, GUISkin _skin, int forceRect, float width, float height, GUIStyle style); // 0x00792FDC-0x00793428
		private static void Internal_DoModalWindow_Injected(int id, int instanceID, ref Rect clientRect, WindowFunction func, GUIContent content, GUIStyle style, object skin, out Rect ret); // 0x00788C80-0x00788D10
		private static void Internal_DoWindow_Injected(int id, int instanceID, ref Rect clientRect, WindowFunction func, GUIContent title, GUIStyle style, object skin, bool forceRectOnLayout, out Rect ret); // 0x00788E04-0x00788EC4
	}

	[NativeHeader] // 0x0016BD00-0x0016BE04
	[NativeHeader] // 0x0016BD00-0x0016BE04
	[VisibleToOtherModules] // 0x0016BD00-0x0016BE04
	internal sealed class GUIClip // TypeDefIndex: 2424
	{
		// Properties
		internal static Rect visibleRect { [FreeFunction] /* 0x0016D498-0x0016D504 */ get; } // 0x0078EC74-0x0078ECA8 
	
		// Methods
		[VisibleToOtherModules] // 0x0016D504-0x0016D594
		internal static void Internal_Push(Rect screenRect, Vector2 scrollOffset, Vector2 renderOffset, bool resetOffset); // 0x00794620-0x00794674
		[VisibleToOtherModules] // 0x0016D594-0x0016D624
		internal static void Internal_Pop(); // 0x00791180-0x00791208
		internal static void Push(Rect screenRect, Vector2 scrollOffset, Vector2 renderOffset, bool resetOffset); // 0x00791130-0x0079116C
		internal static void Pop(); // 0x00792B2C-0x00792B30
		private static void get_visibleRect_Injected(out Rect ret); // 0x007945A8-0x00794620
		private static void Internal_Push_Injected(ref Rect screenRect, ref Vector2 scrollOffset, ref Vector2 renderOffset, bool resetOffset); // 0x00794674-0x00794760
	}

	[Serializable]
	[NativeHeader] // 0x0016BE04-0x0016BE84
	[RequiredByNativeCode] // 0x0016BE04-0x0016BE84
	public class GUIContent // TypeDefIndex: 2425
	{
		// Fields
		[SerializeField] // 0x0016CA4C-0x0016CA5C
		private string m_Text; // 0x08
		[SerializeField] // 0x0016CA5C-0x0016CA6C
		private Texture m_Image; // 0x0C
		[SerializeField] // 0x0016CA6C-0x0016CA7C
		private string m_Tooltip; // 0x10
		private static readonly GUIContent s_Text; // 0x00
		private static readonly GUIContent s_Image; // 0x04
		private static readonly GUIContent s_TextImage; // 0x08
		public static GUIContent none; // 0x0C
	
		// Properties
		public string text { get; set; } // 0x0078A8D0-0x0078A8D8 0x0078AEFC-0x0078AF04
		public Texture image { set; } // 0x007948F8-0x00794900
		public string tooltip { get; set; } // 0x0078EC6C-0x0078EC74 0x00794900-0x00794908
	
		// Constructors
		public GUIContent(); // 0x00794760-0x007947E0
		public GUIContent(string text); // 0x007947E0-0x00794860
		public GUIContent(string text, Texture image, string tooltip); // 0x00794860-0x007948F8
		public GUIContent(GUIContent src); // 0x00794908-0x007949E0
		static GUIContent(); // 0x00794DE8-0x00794EB8
	
		// Methods
		internal static GUIContent Temp(string t); // 0x0078957C-0x0078967C
		internal static GUIContent Temp(Texture i); // 0x007949E0-0x00794AE0
		[VisibleToOtherModules] // 0x0016D624-0x0016D6B4
		internal static void ClearStaticCache(); // 0x00794AE0-0x00794C98
		internal static GUIContent[] Temp(string[] texts); // 0x00794C98-0x00794DE8
	}

	public enum FocusType // TypeDefIndex: 2426
	{
		Native = 0,
		Keyboard = 1,
		Passive = 2
	}

	public class GUILayout // TypeDefIndex: 2427
	{
		// Methods
		public static void Label(string text, params /* 0x0016E690-0x0016E6A0 */ GUILayoutOption[] options); // 0x00794EB8-0x00794F94
		public static void Label(GUIContent content, params /* 0x0016E6A0-0x0016E6B0 */ GUILayoutOption[] options); // 0x00795070-0x00795114
		public static void Label(string text, GUIStyle style, params /* 0x0016E6B0-0x0016E6C0 */ GUILayoutOption[] options); // 0x00795114-0x007951A8
		private static void DoLabel(GUIContent content, GUIStyle style, GUILayoutOption[] options); // 0x00794F94-0x00795070
		public static void Box(Texture image, params /* 0x0016E6C0-0x0016E6D0 */ GUILayoutOption[] options); // 0x0079525C-0x00795338
		public static void Box(string text, GUIStyle style, params /* 0x0016E6D0-0x0016E6E0 */ GUILayoutOption[] options); // 0x00795414-0x007954A8
		private static void DoBox(GUIContent content, GUIStyle style, GUILayoutOption[] options); // 0x00795338-0x00795414
		public static bool Button(string text, params /* 0x0016E6E0-0x0016E6F0 */ GUILayoutOption[] options); // 0x007954A8-0x00795584
		public static bool Button(string text, GUIStyle style, params /* 0x0016E6F0-0x0016E700 */ GUILayoutOption[] options); // 0x00795660-0x007956F4
		private static bool DoButton(GUIContent content, GUIStyle style, GUILayoutOption[] options); // 0x00795584-0x00795660
		public static string TextField(string text, int maxLength, params /* 0x0016E700-0x0016E710 */ GUILayoutOption[] options); // 0x007956F4-0x007957AC
		public static string TextField(string text, GUIStyle style, params /* 0x0016E710-0x0016E720 */ GUILayoutOption[] options); // 0x007959FC-0x00795A24
		public static string TextArea(string text, GUIStyle style, params /* 0x0016E720-0x0016E730 */ GUILayoutOption[] options); // 0x00795A24-0x00795A4C
		private static string DoTextField(string text, int maxLength, bool multiline, GUIStyle style, GUILayoutOption[] options); // 0x007957AC-0x007959FC
		public static int Toolbar(int selected, string[] texts, GUIStyle style, params /* 0x0016E730-0x0016E740 */ GUILayoutOption[] options); // 0x00795A58-0x00795B04
		public static int Toolbar(int selected, GUIContent[] contents, GUIStyle style, params /* 0x0016E740-0x0016E750 */ GUILayoutOption[] options); // 0x00795B04-0x00795B24
		public static int Toolbar(int selected, GUIContent[] contents, GUIStyle style, GUI.ToolbarButtonSize buttonSize, params /* 0x0016E750-0x0016E760 */ GUILayoutOption[] options); // 0x00795B24-0x00795F00
		public static void Space(float pixels); // 0x00795FCC-0x007963C0
		public static void FlexibleSpace(); // 0x0079651C-0x00796888
		public static void BeginHorizontal(params /* 0x0016E760-0x0016E770 */ GUILayoutOption[] options); // 0x007969D0-0x00796AA0
		public static void BeginHorizontal(GUIContent content, GUIStyle style, params /* 0x0016E770-0x0016E780 */ GUILayoutOption[] options); // 0x00796AA0-0x00796C78
		public static void EndHorizontal(); // 0x00797054-0x007970CC
		public static void BeginVertical(params /* 0x0016E780-0x0016E790 */ GUILayoutOption[] options); // 0x00797444-0x00797514
		public static void BeginVertical(GUIContent content, GUIStyle style, params /* 0x0016E790-0x0016E7A0 */ GUILayoutOption[] options); // 0x00797514-0x007976EC
		public static void EndVertical(); // 0x007976EC-0x00797764
		public static void BeginArea(Rect screenRect); // 0x00797764-0x00797854
		public static void BeginArea(Rect screenRect, GUIContent content, GUIStyle style); // 0x00797854-0x00797B8C
		public static void EndArea(); // 0x00797F18-0x00798180
		public static Vector2 BeginScrollView(Vector2 scrollPosition, params /* 0x0016E7A0-0x0016E7B0 */ GUILayoutOption[] options); // 0x00798180-0x00798290
		public static Vector2 BeginScrollView(Vector2 scrollPosition, bool alwaysShowHorizontal, bool alwaysShowVertical, GUIStyle horizontalScrollbar, GUIStyle verticalScrollbar, GUIStyle background, params /* 0x0016E7B0-0x0016E7C0 */ GUILayoutOption[] options); // 0x007982A8-0x007986B0
		public static void EndScrollView(); // 0x007986B0-0x007986B8
		internal static void EndScrollView(bool handleScrollWheel); // 0x007986B8-0x00798768
		public static GUILayoutOption Width(float width); // 0x00793690-0x0079373C
		public static GUILayoutOption MinWidth(float minWidth); // 0x00798790-0x0079883C
		public static GUILayoutOption MaxWidth(float maxWidth); // 0x0079883C-0x007988E8
		public static GUILayoutOption Height(float height); // 0x0079373C-0x007937E8
		public static GUILayoutOption MinHeight(float minHeight); // 0x007988E8-0x00798994
		public static GUILayoutOption ExpandWidth(bool expand); // 0x0079692C-0x007969D0
		public static GUILayoutOption ExpandHeight(bool expand); // 0x00796888-0x0079692C
	}

	public sealed class GUILayoutOption // TypeDefIndex: 2428
	{
		// Fields
		internal Type type; // 0x08
		internal object value; // 0x0C
	
		// Nested types
		internal enum Type // TypeDefIndex: 2429
		{
			fixedWidth = 0,
			fixedHeight = 1,
			minWidth = 2,
			maxWidth = 3,
			minHeight = 4,
			maxHeight = 5,
			stretchWidth = 6,
			stretchHeight = 7,
			alignStart = 8,
			alignMiddle = 9,
			alignEnd = 10,
			alignJustify = 11,
			equalSize = 12,
			spacing = 13
		}
	
		// Constructors
		internal GUILayoutOption(Type type, object value); // 0x00798768-0x00798790
	}

	[NativeHeader] // 0x0016BE84-0x0016BEDC
	public class GUILayoutUtility // TypeDefIndex: 2430
	{
		// Fields
		private static readonly Dictionary<int, LayoutCache> s_StoredLayouts; // 0x00
		private static readonly Dictionary<int, LayoutCache> s_StoredWindows; // 0x04
		internal static LayoutCache current; // 0x08
		internal static readonly Rect kDummyRect; // 0x0C
		private static GUIStyle s_SpaceStyle; // 0x1C
	
		// Properties
		internal static GUIStyle spaceStyle { get; } // 0x007963C0-0x0079651C 
	
		// Nested types
		[VisibleToOtherModules] // 0x0016BEDC-0x0016BF6C
		internal sealed class LayoutCache // TypeDefIndex: 2431
		{
			// Fields
			[VisibleToOtherModules] // 0x0016CAB4-0x0016CB44
			internal GUILayoutGroup topLevel; // 0x08
			internal GenericStack layoutGroups; // 0x0C
			internal GUILayoutGroup windows; // 0x10
	
			// Constructors
			[VisibleToOtherModules] // 0x0016D744-0x0016D7D4
			internal LayoutCache(); // 0x0079DC18-0x0079DCF8
		}
	
		// Constructors
		static GUILayoutUtility(); // 0x0079F694-0x0079F7BC
	
		// Methods
		private static Rect Internal_GetWindowRect(int windowID); // 0x0079D9D8-0x0079DA7C
		private static void Internal_MoveWindow(int windowID, Rect r); // 0x0079DAFC-0x0079DB98
		[VisibleToOtherModules] // 0x0016D6B4-0x0016D744
		internal static LayoutCache SelectIDList(int instanceID, bool isWindow); // 0x00793428-0x00793690
		internal static void Begin(int instanceID); // 0x0079DCF8-0x0079E050
		internal static void BeginWindow(int windowID, GUIStyle style, GUILayoutOption[] options); // 0x007937E8-0x00793C94
		internal static void Layout(); // 0x007940F8-0x007944EC
		internal static void LayoutFromEditorWindow(); // 0x0079E720-0x0079EA08
		internal static void LayoutFreeGroup(GUILayoutGroup toplevel); // 0x0079E0E4-0x0079E330
		private static void LayoutSingleGroup(GUILayoutGroup i); // 0x0079E330-0x0079E720
		private static GUILayoutGroup CreateGUILayoutGroupInstanceOfType(Type LayoutType); // 0x0079EA08-0x0079EBD8
		internal static GUILayoutGroup BeginLayoutGroup(GUIStyle style, GUILayoutOption[] options, Type layoutType); // 0x00796C78-0x00797054
		internal static void EndLayoutGroup(); // 0x007970CC-0x00797444
		internal static GUILayoutGroup BeginLayoutArea(GUIStyle style, Type layoutType); // 0x00797B8C-0x00797F18
		public static Rect GetRect(GUIContent content, GUIStyle style); // 0x0079EBD8-0x0079EC88
		public static Rect GetRect(GUIContent content, GUIStyle style, params /* 0x0016E7C0-0x0016E7D0 */ GUILayoutOption[] options); // 0x007951A8-0x0079525C
		private static Rect DoGetRect(GUIContent content, GUIStyle style, GUILayoutOption[] options); // 0x0079EC88-0x0079F120
		public static Rect GetRect(float width, float height, GUIStyle style, params /* 0x0016E7D0-0x0016E7E0 */ GUILayoutOption[] options); // 0x00795F00-0x00795FCC
		private static Rect DoGetRect(float minWidth, float maxWidth, float minHeight, float maxHeight, GUIStyle style, GUILayoutOption[] options); // 0x0079F2B8-0x0079F55C
		private static void Internal_GetWindowRect_Injected(int windowID, out Rect ret); // 0x0079DA7C-0x0079DAFC
		private static void Internal_MoveWindow_Injected(int windowID, ref Rect r); // 0x0079DB98-0x0079DC18
	}

	[Serializable]
	[NativeHeader] // 0x0016BF6C-0x0016BFA0
	public sealed class GUISettings // TypeDefIndex: 2432
	{
		// Fields
		[SerializeField] // 0x0016CB44-0x0016CB54
		private bool m_DoubleClickSelectsWord; // 0x08
		[SerializeField] // 0x0016CB54-0x0016CB64
		private bool m_TripleClickSelectsLine; // 0x09
		[SerializeField] // 0x0016CB64-0x0016CB74
		private Color m_CursorColor; // 0x0C
		[SerializeField] // 0x0016CB74-0x0016CB84
		private float m_CursorFlashSpeed; // 0x1C
		[SerializeField] // 0x0016CB84-0x0016CB94
		private Color m_SelectionColor; // 0x20
	
		// Properties
		public bool doubleClickSelectsWord { get; } // 0x0078C1C4-0x0078C1CC 
		public bool tripleClickSelectsLine { get; } // 0x0078C280-0x0078C288 
		public Color cursorColor { get; } // 0x0079FE54-0x0079FE64 
		public float cursorFlashSpeed { get; } // 0x0079FE64-0x0079FE7C 
		public Color selectionColor { get; } // 0x0079FE7C-0x0079FE8C 
	
		// Constructors
		public GUISettings(); // 0x0079FD2C-0x0079FDB8
	
		// Methods
		private static float Internal_GetCursorFlashSpeed(); // 0x0079FDB8-0x0079FE54
	}

	[Serializable]
	[AssetFileNameExtension] // 0x0016BFA0-0x0016C054
	[ExecuteInEditMode] // 0x0016BFA0-0x0016C054
	[RequiredByNativeCode] // 0x0016BFA0-0x0016C054
	public sealed class GUISkin : ScriptableObject // TypeDefIndex: 2433
	{
		// Fields
		[SerializeField] // 0x0016CB94-0x0016CBA4
		private Font m_Font; // 0x0C
		[SerializeField] // 0x0016CBA4-0x0016CBB4
		private GUIStyle m_box; // 0x10
		[SerializeField] // 0x0016CBB4-0x0016CBC4
		private GUIStyle m_button; // 0x14
		[SerializeField] // 0x0016CBC4-0x0016CBD4
		private GUIStyle m_toggle; // 0x18
		[SerializeField] // 0x0016CBD4-0x0016CBE4
		private GUIStyle m_label; // 0x1C
		[SerializeField] // 0x0016CBE4-0x0016CBF4
		private GUIStyle m_textField; // 0x20
		[SerializeField] // 0x0016CBF4-0x0016CC04
		private GUIStyle m_textArea; // 0x24
		[SerializeField] // 0x0016CC04-0x0016CC14
		private GUIStyle m_window; // 0x28
		[SerializeField] // 0x0016CC14-0x0016CC24
		private GUIStyle m_horizontalSlider; // 0x2C
		[SerializeField] // 0x0016CC24-0x0016CC34
		private GUIStyle m_horizontalSliderThumb; // 0x30
		[SerializeField] // 0x0016CC34-0x0016CC44
		private GUIStyle m_verticalSlider; // 0x34
		[SerializeField] // 0x0016CC44-0x0016CC54
		private GUIStyle m_verticalSliderThumb; // 0x38
		[SerializeField] // 0x0016CC54-0x0016CC64
		private GUIStyle m_horizontalScrollbar; // 0x3C
		[SerializeField] // 0x0016CC64-0x0016CC74
		private GUIStyle m_horizontalScrollbarThumb; // 0x40
		[SerializeField] // 0x0016CC74-0x0016CC84
		private GUIStyle m_horizontalScrollbarLeftButton; // 0x44
		[SerializeField] // 0x0016CC84-0x0016CC94
		private GUIStyle m_horizontalScrollbarRightButton; // 0x48
		[SerializeField] // 0x0016CC94-0x0016CCA4
		private GUIStyle m_verticalScrollbar; // 0x4C
		[SerializeField] // 0x0016CCA4-0x0016CCB4
		private GUIStyle m_verticalScrollbarThumb; // 0x50
		[SerializeField] // 0x0016CCB4-0x0016CCC4
		private GUIStyle m_verticalScrollbarUpButton; // 0x54
		[SerializeField] // 0x0016CCC4-0x0016CCD4
		private GUIStyle m_verticalScrollbarDownButton; // 0x58
		[SerializeField] // 0x0016CCD4-0x0016CCE4
		private GUIStyle m_ScrollView; // 0x5C
		[SerializeField] // 0x0016CCE4-0x0016CCF4
		internal GUIStyle[] m_CustomStyles; // 0x60
		[SerializeField] // 0x0016CCF4-0x0016CD04
		private GUISettings m_Settings; // 0x64
		internal static GUIStyle ms_Error; // 0x00
		private Dictionary<string, GUIStyle> m_Styles; // 0x68
		internal static SkinChangedDelegate m_SkinChanged; // 0x04
		internal static GUISkin current; // 0x08
	
		// Properties
		public Font font { get; set; } // 0x0078CA1C-0x0078CA24 0x007A0040-0x007A0130
		public GUIStyle box { get; set; } // 0x00789B84-0x00789B8C 0x007A01D0-0x007A01D8
		public GUIStyle label { get; set; } // 0x0078967C-0x00789684 0x007A01D8-0x007A01E0
		public GUIStyle textField { get; set; } // 0x0078A7F4-0x0078A7FC 0x007A01E0-0x007A01E8
		public GUIStyle textArea { get; set; } // 0x007A01E8-0x007A01F0 0x007A01F0-0x007A01F8
		public GUIStyle button { get; set; } // 0x00789E98-0x00789EA0 0x007A01F8-0x007A0200
		public GUIStyle toggle { get; set; } // 0x007A0200-0x007A0208 0x007A0208-0x007A0210
		public GUIStyle window { get; set; } // 0x00792C70-0x00792C78 0x007A0210-0x007A0218
		public GUIStyle horizontalSlider { get; set; } // 0x007A0218-0x007A0220 0x007A0220-0x007A0228
		public GUIStyle horizontalSliderThumb { get; set; } // 0x007A0228-0x007A0230 0x007A0230-0x007A0238
		public GUIStyle verticalSlider { get; set; } // 0x007A0238-0x007A0240 0x007A0240-0x007A0248
		public GUIStyle verticalSliderThumb { get; set; } // 0x007A0248-0x007A0250 0x007A0250-0x007A0258
		public GUIStyle horizontalScrollbar { get; set; } // 0x00798290-0x00798298 0x007A0258-0x007A0260
		public GUIStyle horizontalScrollbarThumb { get; set; } // 0x007A0260-0x007A0268 0x007A0268-0x007A0270
		public GUIStyle horizontalScrollbarLeftButton { get; set; } // 0x007A0270-0x007A0278 0x007A0278-0x007A0280
		public GUIStyle horizontalScrollbarRightButton { get; set; } // 0x007A0280-0x007A0288 0x007A0288-0x007A0290
		public GUIStyle verticalScrollbar { get; set; } // 0x00798298-0x007982A0 0x007A0290-0x007A0298
		public GUIStyle verticalScrollbarThumb { get; set; } // 0x007A0298-0x007A02A0 0x007A02A0-0x007A02A8
		public GUIStyle verticalScrollbarUpButton { get; set; } // 0x007A02A8-0x007A02B0 0x007A02B0-0x007A02B8
		public GUIStyle verticalScrollbarDownButton { get; set; } // 0x007A02B8-0x007A02C0 0x007A02C0-0x007A02C8
		public GUIStyle scrollView { get; set; } // 0x007982A0-0x007982A8 0x007A02C8-0x007A02D0
		public GUIStyle[] customStyles { get; set; } // 0x007A02D0-0x007A02D8 0x007A02D8-0x007A02E0
		public GUISettings settings { get; } // 0x0078C1BC-0x0078C1C4 
		internal static GUIStyle error { get; } // 0x007A02E0-0x007A03C8 
	
		// Nested types
		internal delegate void SkinChangedDelegate(); // TypeDefIndex: 2434; 0x007A140C-0x007A1848
	
		// Constructors
		public GUISkin(); // 0x0079FE8C-0x0079FF28
	
		// Methods
		internal void OnEnable(); // 0x0079FF28-0x0079FF2C
		internal static void CleanupRoots(); // 0x0079FFD0-0x007A0040
		internal void Apply(); // 0x0079FF2C-0x0079FFD0
		private void BuildStyleCache(); // 0x007A0468-0x007A1308
		public GUIStyle GetStyle(string styleName); // 0x0078FAF4-0x0078FF04
		public GUIStyle FindStyle(string styleName); // 0x0078E3A8-0x0078E4F4
		internal void MakeCurrent(); // 0x007893AC-0x0078946C
		public IEnumerator GetEnumerator(); // 0x007A1848-0x007A1940
	}

	internal class GUIStateObjects // TypeDefIndex: 2435
	{
		// Fields
		private static Dictionary<int, object> s_StateCache; // 0x00
	
		// Constructors
		static GUIStateObjects(); // 0x007A1B20-0x007A1C0C
	
		// Methods
		internal static object GetStateObject(Type t, int controlID); // 0x007A198C-0x007A1B20
	}

	[Serializable]
	[NativeHeader] // 0x0016C054-0x0016C088
	public sealed class GUIStyleState // TypeDefIndex: 2436
	{
		// Fields
		[NonSerialized]
		internal IntPtr m_Ptr; // 0x08
		private readonly GUIStyle m_SourceStyle; // 0x0C
	
		// Properties
		[NativeProperty] // 0x0016EA3C-0x0016EA88
		public Texture2D background { set; } // 0x007A406C-0x007A40EC
		[NativeProperty] // 0x0016EA88-0x0016EAD4
		public Color textColor { set; } // 0x007A13E8-0x007A140C
	
		// Constructors
		public GUIStyleState(); // 0x007A3F9C-0x007A3FBC
		private GUIStyleState(GUIStyle sourceStyle, IntPtr source); // 0x007A4044-0x007A406C
	
		// Methods
		[FreeFunction] // 0x0016D7D4-0x0016D83C
		private static IntPtr Init(); // 0x007A3FBC-0x007A4044
		[FreeFunction] // 0x0016D83C-0x0016D8B4
		private void Cleanup(); // 0x007A416C-0x007A41FC
		internal static GUIStyleState GetGUIStyleState(GUIStyle sourceStyle, IntPtr source); // 0x007A3240-0x007A32BC
		~GUIStyleState(); // 0x007A41FC-0x007A42B4
		private void set_textColor_Injected(ref Color value); // 0x007A40EC-0x007A416C
	}

	[Serializable]
	[NativeHeader] // 0x0016C088-0x0016C108
	[NativeHeader] // 0x0016C088-0x0016C108
	[RequiredByNativeCode] // 0x0016C088-0x0016C108
	public sealed class GUIStyle // TypeDefIndex: 2437
	{
		// Fields
		[NonSerialized]
		internal IntPtr m_Ptr; // 0x08
		[NonSerialized]
		private GUIStyleState m_Normal; // 0x0C
		[NonSerialized]
		private GUIStyleState m_Hover; // 0x10
		[NonSerialized]
		private GUIStyleState m_Active; // 0x14
		[NonSerialized]
		private GUIStyleState m_Focused; // 0x18
		[NonSerialized]
		private GUIStyleState m_OnNormal; // 0x1C
		[NonSerialized]
		private GUIStyleState m_OnHover; // 0x20
		[NonSerialized]
		private GUIStyleState m_OnActive; // 0x24
		[NonSerialized]
		private GUIStyleState m_OnFocused; // 0x28
		[NonSerialized]
		private RectOffset m_Border; // 0x2C
		[NonSerialized]
		private RectOffset m_Padding; // 0x30
		[NonSerialized]
		private RectOffset m_Margin; // 0x34
		[NonSerialized]
		private RectOffset m_Overflow; // 0x38
		internal static bool showKeyboardFocus; // 0x00
		private static GUIStyle s_None; // 0x04
	
		// Properties
		[NativeProperty] // 0x0016EAD4-0x0016EB1C
		public string name { get; set; } // 0x0078E31C-0x0078E3A8 0x007A03C8-0x007A0468
		[NativeProperty] // 0x0016EB1C-0x0016EB64
		public Font font { get; set; } // 0x0078C990-0x0078CA1C 0x007A1E1C-0x007A1EC0
		[NativeProperty] // 0x0016EB64-0x0016EBB4
		public ImagePosition imagePosition { get; } // 0x007A1EC0-0x007A1F54 
		[NativeProperty] // 0x0016EBB4-0x0016EC00
		public TextAnchor alignment { set; } // 0x007A1F54-0x007A2000
		[NativeProperty] // 0x0016EC00-0x0016EC4C
		public bool wordWrap { get; set; } // 0x007A2000-0x007A2090 0x007A2090-0x007A2134
		[NativeProperty] // 0x0016EC4C-0x0016EC9C
		public Vector2 contentOffset { get; set; } // 0x007A2134-0x007A2170 0x007A21F0-0x007A220C
		[NativeProperty] // 0x0016EC9C-0x0016ECEC
		public float fixedWidth { get; } // 0x0078ED44-0x0078EDD4 
		[NativeProperty] // 0x0016ECEC-0x0016ED3C
		public float fixedHeight { get; } // 0x0078EDD4-0x0078EE64 
		[NativeProperty] // 0x0016ED3C-0x0016ED8C
		public bool stretchWidth { get; set; } // 0x00798DC8-0x00798E5C 0x0079F5EC-0x0079F694
		[NativeProperty] // 0x0016ED8C-0x0016EDDC
		public bool stretchHeight { get; set; } // 0x00798E5C-0x00798EF0 0x007A1308-0x007A13B0
		[NativeProperty] // 0x0016EDDC-0x0016EE28
		public int fontSize { set; } // 0x007A228C-0x007A2330
		[NativeProperty] // 0x0016EE28-0x0016EE78
		internal Vector2 Internal_clipOffset { set; } // 0x007A2330-0x007A234C
		public GUIStyleState normal { get; } // 0x007A13B0-0x007A13E8 
		public RectOffset margin { get; } // 0x0078E7E4-0x0078E87C 
		public RectOffset padding { get; set; } // 0x0079ADB0-0x0079AE48 0x007A32BC-0x007A32F0
		public float lineHeight { [CompilerGenerated] /* 0x0016E158-0x0016E168 */ get; } // 0x007A32F0-0x007A3454 
		public static GUIStyle none { [CompilerGenerated] /* 0x0016E168-0x0016E178 */ get; } // 0x00791048-0x00791130 
		public bool isHeightDependantOnWidth { [CompilerGenerated] /* 0x0016E178-0x0016E188 */ get; } // 0x0079F120-0x0079F170 
	
		// Constructors
		public GUIStyle(); // 0x0079F55C-0x0079F5EC
		public GUIStyle(GUIStyle other); // 0x007A1CB0-0x007A1D9C
		static GUIStyle(); // 0x007A3ED8-0x007A3F9C
	
		// Methods
		[FreeFunction] // 0x0016D8B4-0x0016D920
		private static IntPtr Internal_Create(GUIStyle self); // 0x007A1C0C-0x007A1CB0
		[FreeFunction] // 0x0016D920-0x0016D98C
		private static IntPtr Internal_Copy(GUIStyle self, GUIStyle other); // 0x007A1D9C-0x007A1E1C
		[FreeFunction] // 0x0016D98C-0x0016D9F8
		private static void Internal_Destroy(IntPtr self); // 0x007A23CC-0x007A246C
		[FreeFunction] // 0x0016D9F8-0x0016DA74
		private IntPtr GetStyleStatePtr(int idx); // 0x007A246C-0x007A2514
		[FreeFunction] // 0x0016DA74-0x0016DAE0
		private IntPtr GetRectOffsetPtr(int idx); // 0x007A2514-0x007A25BC
		[FreeFunction] // 0x0016DAE0-0x0016DB4C
		private void AssignRectOffset(int idx, IntPtr srcRectOffset); // 0x007A25BC-0x007A2644
		[FreeFunction] // 0x0016DB4C-0x0016DBB0
		private static float Internal_GetLineHeight(IntPtr target); // 0x007A2644-0x007A26E8
		[FreeFunction] // 0x0016DBB0-0x0016DC1C
		private void Internal_Draw(Rect screenRect, GUIContent content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus); // 0x007A26E8-0x007A273C
		[FreeFunction] // 0x0016DC1C-0x0016DC88
		private void Internal_Draw2(Rect position, GUIContent content, int controlID, bool on); // 0x007A27E4-0x007A2828
		[FreeFunction] // 0x0016DC88-0x0016DCF8
		private void Internal_DrawCursor(Rect position, GUIContent content, int pos, Color cursorColor); // 0x007A28C0-0x007A291C
		[FreeFunction] // 0x0016DCF8-0x0016DD74
		private void Internal_DrawWithTextSelection(Rect screenRect, GUIContent content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus, bool drawSelectionAsComposition, int cursorFirst, int cursorLast, Color cursorColor, Color selectionColor); // 0x007A29AC-0x007A2A60
		[FreeFunction] // 0x0016DD74-0x0016DDF0
		internal Vector2 Internal_GetCursorPixelPosition(Rect position, GUIContent content, int cursorStringIndex); // 0x007A2B58-0x007A2BC4
		[FreeFunction] // 0x0016DDF0-0x0016DE6C
		internal int Internal_GetCursorStringIndex(Rect position, GUIContent content, Vector2 cursorPixelPosition); // 0x007A2C54-0x007A2CA0
		[FreeFunction] // 0x0016DE6C-0x0016DEDC
		internal Vector2 Internal_CalcSize(GUIContent content); // 0x007A2D30-0x007A2D70
		[FreeFunction] // 0x0016DEDC-0x0016DF58
		internal Vector2 Internal_CalcSizeWithConstraints(GUIContent content, Vector2 maxSize); // 0x007A2DF8-0x007A2E4C
		[FreeFunction] // 0x0016DF58-0x0016DFC8
		private float Internal_CalcHeight(GUIContent content, float width); // 0x007A2EDC-0x007A2F64
		[FreeFunction] // 0x0016DFC8-0x0016E03C
		private Vector2 Internal_CalcMinMaxWidth(GUIContent content); // 0x007A2F64-0x007A2FA4
		[FreeFunction] // 0x0016E03C-0x0016E098
		internal static void SetMouseTooltip(string tooltip, Rect screenRect); // 0x0078ECA8-0x0078ED44
		[FreeFunction] // 0x0016E098-0x0016E104
		private static float Internal_GetCursorFlashOffset(); // 0x007A30AC-0x007A3148
		[FreeFunction] // 0x0016E104-0x0016E158
		internal static void SetDefaultFont(Font font); // 0x007A0130-0x007A01D0
		~GUIStyle(); // 0x007A3148-0x007A3240
		public void Draw(Rect position, bool isHover, bool isActive, bool on, bool hasKeyboardFocus); // 0x007924F0-0x007925E8
		public void Draw(Rect position, GUIContent content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus); // 0x0078EC18-0x0078EC6C
		public void Draw(Rect position, GUIContent content, int controlID); // 0x00789D48-0x00789D88
		public void Draw(Rect position, GUIContent content, int controlID, bool on); // 0x0078C0D4-0x0078C11C
		private void Draw(Rect position, GUIContent content, int controlId, bool isHover, bool isActive, bool on, bool hasKeyboardFocus); // 0x007A3454-0x007A34D8
		public void DrawCursor(Rect position, GUIContent content, int controlID, int character); // 0x007A34D8-0x007A3774
		internal void DrawWithTextSelection(Rect position, GUIContent content, bool isActive, bool hasKeyboardFocus, int firstSelectedCharacter, int lastSelectedCharacter, bool drawSelectionAsComposition, Color selectionColor); // 0x007A3774-0x007A3A84
		internal void DrawWithTextSelection(Rect position, GUIContent content, bool isActive, bool hasKeyboardFocus, int firstSelectedCharacter, int lastSelectedCharacter, bool drawSelectionAsComposition); // 0x007A3A84-0x007A3B88
		internal void DrawWithTextSelection(Rect position, GUIContent content, int controlID, int firstSelectedCharacter, int lastSelectedCharacter, bool drawSelectionAsComposition); // 0x007A3B88-0x007A3CB0
		public void DrawWithTextSelection(Rect position, GUIContent content, int controlID, int firstSelectedCharacter, int lastSelectedCharacter); // 0x007A3CB0-0x007A3CF0
		public Vector2 GetCursorPixelPosition(Rect position, GUIContent content, int cursorStringIndex); // 0x007A3CF0-0x007A3D5C
		public int GetCursorStringIndex(Rect position, GUIContent content, Vector2 cursorPixelPosition); // 0x007A3D5C-0x007A3DA8
		public Vector2 CalcSize(GUIContent content); // 0x0078F6D0-0x0078F710
		internal Vector2 CalcSizeWithConstraints(GUIContent content, Vector2 constraints); // 0x0079F264-0x0079F2B8
		public float CalcHeight(GUIContent content, float width); // 0x007A3DA8-0x007A3DAC
		public void CalcMinMaxWidth(GUIContent content, out float minWidth, out float maxWidth); // 0x007A3DAC-0x007A3DE8
		public override string ToString(); // 0x007A3DE8-0x007A3ED8
		private void get_contentOffset_Injected(out Vector2 ret); // 0x007A2170-0x007A21F0
		private void set_contentOffset_Injected(ref Vector2 value); // 0x007A220C-0x007A228C
		private void set_Internal_clipOffset_Injected(ref Vector2 value); // 0x007A234C-0x007A23CC
		private void Internal_Draw_Injected(ref Rect screenRect, GUIContent content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus); // 0x007A273C-0x007A27E4
		private void Internal_Draw2_Injected(ref Rect position, GUIContent content, int controlID, bool on); // 0x007A2828-0x007A28C0
		private void Internal_DrawCursor_Injected(ref Rect position, GUIContent content, int pos, ref Color cursorColor); // 0x007A291C-0x007A29AC
		private void Internal_DrawWithTextSelection_Injected(ref Rect screenRect, GUIContent content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus, bool drawSelectionAsComposition, int cursorFirst, int cursorLast, ref Color cursorColor, ref Color selectionColor); // 0x007A2A60-0x007A2B58
		private void Internal_GetCursorPixelPosition_Injected(ref Rect position, GUIContent content, int cursorStringIndex, out Vector2 ret); // 0x007A2BC4-0x007A2C54
		private int Internal_GetCursorStringIndex_Injected(ref Rect position, GUIContent content, ref Vector2 cursorPixelPosition); // 0x007A2CA0-0x007A2D30
		private void Internal_CalcSize_Injected(GUIContent content, out Vector2 ret); // 0x007A2D70-0x007A2DF8
		private void Internal_CalcSizeWithConstraints_Injected(GUIContent content, ref Vector2 maxSize, out Vector2 ret); // 0x007A2E4C-0x007A2EDC
		private void Internal_CalcMinMaxWidth_Injected(GUIContent content, out Vector2 ret); // 0x007A2FA4-0x007A302C
		private static void SetMouseTooltip_Injected(string tooltip, ref Rect screenRect); // 0x007A302C-0x007A30AC
	}

	public enum ImagePosition // TypeDefIndex: 2438
	{
		ImageLeft = 0,
		ImageAbove = 1,
		ImageOnly = 2,
		TextOnly = 3
	}

	[AttributeUsage] // 0x0016C108-0x0016C11C
	public class GUITargetAttribute : Attribute // TypeDefIndex: 2439
	{
		// Fields
		internal int displayMask; // 0x08
	
		// Methods
		[RequiredByNativeCode] // 0x0016E188-0x0016E198
		private static int GetGUITargetAttrValue(Type klass, string methodName); // 0x007A42B4-0x007A4488
	}

	[NativeHeader] // 0x0016C11C-0x0016C258
	[NativeHeader] // 0x0016C11C-0x0016C258
	[NativeHeader] // 0x0016C11C-0x0016C258
	[NativeHeader] // 0x0016C11C-0x0016C258
	[NativeHeader] // 0x0016C11C-0x0016C258
	public class GUIUtility // TypeDefIndex: 2440
	{
		// Fields
		[VisibleToOtherModules] // 0x0016CD04-0x0016CD94
		internal static int s_SkinMode; // 0x00
		[VisibleToOtherModules] // 0x0016CD94-0x0016CE24
		internal static int s_OriginalID; // 0x04
		[VisibleToOtherModules] // 0x0016CE24-0x0016CEB4
		internal static Action takeCapture; // 0x08
		[VisibleToOtherModules] // 0x0016CEB4-0x0016CF44
		internal static Action releaseCapture; // 0x0C
		[VisibleToOtherModules] // 0x0016CF44-0x0016CFD4
		internal static Func<int, IntPtr, bool> processEvent; // 0x10
		[VisibleToOtherModules] // 0x0016CFD4-0x0016D064
		internal static Func<Exception, bool> endContainerGUIFromException; // 0x14
		[VisibleToOtherModules] // 0x0016D064-0x0016D0F4
		internal static Action enabledStateChanged; // 0x18
		[CompilerGenerated] // 0x0016D0F4-0x0016D128
		[DebuggerBrowsable] // 0x0016D0F4-0x0016D128
		private static bool <guiIsExiting>k__BackingField; // 0x1C
	
		// Properties
		[NativeProperty] // 0x0016EE78-0x0016EED8
		internal static float pixelsPerPoint { [VisibleToOtherModules] /* 0x0016E198-0x0016E228 */ get; } // 0x0079E050-0x0079E0E4 
		[NativeProperty] // 0x0016EED8-0x0016EF34
		internal static int guiDepth { [VisibleToOtherModules] /* 0x0016E228-0x0016E2B8 */ get; } // 0x007A4488-0x007A4514 
		[NativeProperty] // 0x0016EF34-0x0016EFA4
		internal static bool mouseUsed { set; } // 0x0078F630-0x0078F6D0
		[StaticAccessor] // 0x0016EFA4-0x0016EFE8
		internal static bool textFieldInput { set; } // 0x0078D154-0x0078D1F8
		public static string systemCopyBuffer { [FreeFunction] /* 0x0016E2B8-0x0016E2F4 */ get; [FreeFunction] /* 0x0016E2F4-0x0016E330 */ set; } // 0x007A4514-0x007A45A8 0x007A45A8-0x007A464C
		internal static bool guiIsExiting { [CompilerGenerated] /* 0x0016E380-0x0016E390 */ set; } // 0x007A4AD0-0x007A4B34
		public static int hotControl { get; set; } // 0x0078A670-0x0078A674 0x0078A66C-0x0078A670
		public static int keyboardControl { get; set; } // 0x0078C0CC-0x0078C0D0 0x0078C0D0-0x0078C0D4
	
		// Methods
		[StaticAccessor] // 0x0016E330-0x0016E370
		public static int GetControlID(int hint, FocusType focusType, Rect rect); // 0x0078A144-0x0078A170
		private static int Internal_GetHotControl(); // 0x007A46D4-0x007A476C
		private static int Internal_GetKeyboardControl(); // 0x007A476C-0x007A4808
		private static void Internal_SetHotControl(int value); // 0x007A4808-0x007A48B0
		private static void Internal_SetKeyboardControl(int value); // 0x007A48B0-0x007A4928
		private static object Internal_GetDefaultSkin(int skinMode); // 0x007A4928-0x007A49D0
		private static void Internal_ExitGUI(); // 0x007A49D0-0x007A4A60
		[RequiredByNativeCode] // 0x0016E370-0x0016E380
		private static void MarkGUIChanged(); // 0x007A4A60-0x007A4AD0
		public static int GetControlID(FocusType focus); // 0x00795A4C-0x00795A58
		public static int GetControlID(FocusType focus, Rect position); // 0x0078A7C0-0x0078A7F4
		public static int GetControlID(int hint, FocusType focus); // 0x00789D00-0x00789D48
		public static object GetStateObject(Type t, int controlID); // 0x0078AF04-0x0078AF8C
		[RequiredByNativeCode] // 0x0016E390-0x0016E3A0
		internal static void TakeCapture(); // 0x007A4B34-0x007A4BA4
		[RequiredByNativeCode] // 0x0016E3A0-0x0016E3B0
		internal static void RemoveCapture(); // 0x007A4BA4-0x007A4C14
		internal static GUISkin GetDefaultSkin(); // 0x00789320-0x007893AC
		[RequiredByNativeCode] // 0x0016E3B0-0x0016E3C0
		internal static bool ProcessEvent(int instanceID, IntPtr nativeEventPtr); // 0x007A4C14-0x007A4CA8
		[RequiredByNativeCode] // 0x0016E3C0-0x0016E3D0
		internal static void BeginGUI(int skinMode, int instanceID, int useGUILayout); // 0x007A4CA8-0x007A4D60
		[RequiredByNativeCode] // 0x0016E3D0-0x0016E3E0
		internal static void EndGUI(int layoutType); // 0x007A4E3C-0x007A5040
		[RequiredByNativeCode] // 0x0016E3E0-0x0016E3F0
		internal static bool EndGUIFromException(Exception exception); // 0x007A5040-0x007A505C
		[RequiredByNativeCode] // 0x0016E3F0-0x0016E400
		internal static bool EndContainerGUIFromException(Exception exception); // 0x007A5060-0x007A50EC
		[VisibleToOtherModules] // 0x0016E400-0x0016E490
		internal static void ResetGlobalState(); // 0x007A4D60-0x007A4E3C
		[VisibleToOtherModules] // 0x0016E490-0x0016E520
		internal static bool IsExitGUIException(Exception exception); // 0x007A50EC-0x007A51BC
		[VisibleToOtherModules] // 0x0016E520-0x0016E5B0
		internal static bool ShouldRethrowException(Exception exception); // 0x007A505C-0x007A5060
		internal static void CheckOnGUI(); // 0x007890F8-0x007891A0
		private static int GetControlID_Injected(int hint, FocusType focusType, ref Rect rect); // 0x007A464C-0x007A46D4
	}

	public sealed class ExitGUIException : Exception // TypeDefIndex: 2441
	{
	}

	[VisibleToOtherModules] // 0x0016C258-0x0016C2E8
	internal class GUILayoutEntry // TypeDefIndex: 2442
	{
		// Fields
		public float minWidth; // 0x08
		public float maxWidth; // 0x0C
		public float minHeight; // 0x10
		public float maxHeight; // 0x14
		public Rect rect; // 0x18
		public int stretchWidth; // 0x28
		public int stretchHeight; // 0x2C
		public bool consideredForMargin; // 0x30
		private GUIStyle m_Style; // 0x34
		internal static Rect kDummyRect; // 0x00
		protected static int indent; // 0x10
	
		// Properties
		public GUIStyle style { get; set; } // 0x00798C58-0x00798C60 0x00798AFC-0x00798B10
		public virtual RectOffset margin { get; } // 0x00798C60-0x00798C88 
	
		// Constructors
		public GUILayoutEntry(float _minWidth, float _maxWidth, float _minHeight, float _maxHeight, GUIStyle _style); // 0x00798994-0x00798AFC
		public GUILayoutEntry(float _minWidth, float _maxWidth, float _minHeight, float _maxHeight, GUIStyle _style, GUILayoutOption[] options); // 0x00798B10-0x00798C58
		static GUILayoutEntry(); // 0x00799B0C-0x00799BB8
	
		// Methods
		public virtual void CalcWidth(); // 0x00798C88-0x00798C8C
		public virtual void CalcHeight(); // 0x00798C8C-0x00798C90
		public virtual void SetHorizontal(float x, float width); // 0x00798C90-0x00798CC0
		public virtual void SetVertical(float y, float height); // 0x00798CC0-0x00798CF0
		protected virtual void ApplyStyleSettings(GUIStyle style); // 0x00798CF0-0x00798DC8
		public virtual void ApplyOptions(GUILayoutOption[] options); // 0x00798EF0-0x007991C4
		public override string ToString(); // 0x007991C4-0x00799B0C
	}

	internal sealed class GUIWordWrapSizer : GUILayoutEntry // TypeDefIndex: 2443
	{
		// Fields
		private readonly GUIContent m_Content; // 0x38
		private readonly float m_ForcedMinHeight; // 0x3C
		private readonly float m_ForcedMaxHeight; // 0x40
	
		// Constructors
		public GUIWordWrapSizer(GUIStyle style, GUIContent content, GUILayoutOption[] options); // 0x0079F170-0x0079F264
	
		// Methods
		public override void CalcWidth(); // 0x007A51BC-0x007A52DC
		public override void CalcHeight(); // 0x007A52DC-0x007A5370
	}

	[VisibleToOtherModules] // 0x0016C2E8-0x0016C378
	internal class GUILayoutGroup : GUILayoutEntry // TypeDefIndex: 2444
	{
		// Fields
		public List<GUILayoutEntry> entries; // 0x38
		public bool isVertical; // 0x3C
		public bool resetCoords; // 0x3D
		public float spacing; // 0x40
		public bool sameSize; // 0x44
		public bool isWindow; // 0x45
		public int windowID; // 0x48
		private int m_Cursor; // 0x4C
		protected int m_StretchableCountX; // 0x50
		protected int m_StretchableCountY; // 0x54
		protected bool m_UserSpecifiedWidth; // 0x58
		protected bool m_UserSpecifiedHeight; // 0x59
		protected float m_ChildMinWidth; // 0x5C
		protected float m_ChildMaxWidth; // 0x60
		protected float m_ChildMinHeight; // 0x64
		protected float m_ChildMaxHeight; // 0x68
		private readonly RectOffset m_Margin; // 0x6C
	
		// Properties
		public override RectOffset margin { get; } // 0x00799D38-0x00799D40 
	
		// Constructors
		public GUILayoutGroup(); // 0x00799BB8-0x00799D38
	
		// Methods
		public override void ApplyOptions(GUILayoutOption[] options); // 0x00799D40-0x00799E68
		protected override void ApplyStyleSettings(GUIStyle style); // 0x00799E68-0x00799FAC
		public void ResetCursor(); // 0x00799FAC-0x00799FB8
		public GUILayoutEntry GetNext(); // 0x00799FB8-0x0079A2DC
		public void Add(GUILayoutEntry e); // 0x0079A2DC-0x0079A35C
		public override void CalcWidth(); // 0x0079A35C-0x0079ADB0
		public override void SetHorizontal(float x, float width); // 0x0079AE48-0x0079BC88
		public override void CalcHeight(); // 0x0079BC88-0x0079C660
		public override void SetVertical(float y, float height); // 0x0079C660-0x0079D4C8
		public override string ToString(); // 0x0079D4C8-0x0079D9D8
	}

	internal sealed class GUIScrollGroup : GUILayoutGroup // TypeDefIndex: 2445
	{
		// Fields
		public float calcMinWidth; // 0x70
		public float calcMaxWidth; // 0x74
		public float calcMinHeight; // 0x78
		public float calcMaxHeight; // 0x7C
		public float clientWidth; // 0x80
		public float clientHeight; // 0x84
		public bool allowHorizontalScroll; // 0x88
		public bool allowVerticalScroll; // 0x89
		public bool needsHorizontalScrollbar; // 0x8A
		public bool needsVerticalScrollbar; // 0x8B
		public GUIStyle horizontalScrollbar; // 0x8C
		public GUIStyle verticalScrollbar; // 0x90
	
		// Constructors
		[RequiredByNativeCode] // 0x0016E5B0-0x0016E5C0
		public GUIScrollGroup(); // 0x0079F7BC-0x0079F7C8
	
		// Methods
		public override void CalcWidth(); // 0x0079F7C8-0x0079F868
		public override void SetHorizontal(float x, float width); // 0x0079F868-0x0079F9A4
		public override void CalcHeight(); // 0x0079F9A4-0x0079FAD8
		public override void SetVertical(float y, float height); // 0x0079FAD8-0x0079FD2C
	}

	internal class ScrollViewState // TypeDefIndex: 2446
	{
		// Fields
		public Rect position; // 0x08
		public Rect visibleRect; // 0x18
		public Rect viewRect; // 0x28
		public Vector2 scrollPosition; // 0x38
		public bool apply; // 0x40
	
		// Constructors
		[RequiredByNativeCode] // 0x0016E5C0-0x0016E5D0
		public ScrollViewState(); // 0x007A5370-0x007A53D4
	}

	internal class SliderState // TypeDefIndex: 2447
	{
		// Fields
		public float dragStartPos; // 0x08
		public float dragStartValue; // 0x0C
		public bool isDragging; // 0x10
	
		// Constructors
		[RequiredByNativeCode] // 0x0016E5D0-0x0016E5E0
		public SliderState(); // 0x007A7464-0x007A746C
	}

	internal struct SliderHandler // TypeDefIndex: 2448
	{
		// Fields
		private readonly Rect position; // 0x00
		private readonly float currentValue; // 0x10
		private readonly float size; // 0x14
		private readonly float start; // 0x18
		private readonly float end; // 0x1C
		private readonly GUIStyle slider; // 0x20
		private readonly GUIStyle thumb; // 0x24
		private readonly bool horiz; // 0x28
		private readonly int id; // 0x2C
	
		// Constructors
		public SliderHandler(Rect position, float currentValue, float size, float start, float end, GUIStyle slider, GUIStyle thumb, bool horiz, int id); // 0x007A53D4-0x007A60AC
	
		// Methods
		public float Handle(); // 0x007A60AC-0x007A6624
		private float OnMouseDown(); // 0x007A6624-0x007A6860
		private float OnMouseDrag(); // 0x007A6860-0x007A6868
		private float OnMouseUp(); // 0x007A6868-0x007A69FC
		private float OnRepaint(); // 0x007A69FC-0x007A6A04
		private EventType CurrentEventType(); // 0x007A6A04-0x007A6A0C
		private int CurrentScrollTroughSide(); // 0x007A6A0C-0x007A6A14
		private bool IsEmptySlider(); // 0x007A6A14-0x007A6A30
		private bool SupportsPageMovements(); // 0x007A6A30-0x007A6B00
		private float PageMovementValue(); // 0x007A6B00-0x007A6B08
		private float PageUpMovementBound(); // 0x007A6B08-0x007A6B10
		private Event CurrentEvent(); // 0x007A6B10-0x007A6B74
		private float ValueForCurrentMousePosition(); // 0x007A6B74-0x007A6B7C
		private float Clamp(float value); // 0x007A6B7C-0x007A6B84
		private Rect ThumbSelectionRect(); // 0x007A6B84-0x007A6BBC
		private void StartDraggingWithValue(float dragStartValue); // 0x007A6BBC-0x007A6BC4
		private SliderState SliderState(); // 0x007A6BC4-0x007A72F0
		private Rect ThumbRect(); // 0x007A72F0-0x007A7408
		private Rect VerticalThumbRect(); // 0x007A7408-0x007A741C
		private Rect HorizontalThumbRect(); // 0x007A741C-0x007A7430
		private float ClampedCurrentValue(); // 0x007A7430-0x007A743C
		private float MousePosition(); // 0x007A743C-0x007A7444
		private float ValuesPerPixel(); // 0x007A7444-0x007A744C
		private float ThumbSize(); // 0x007A744C-0x007A7454
		private float MaxValue(); // 0x007A7454-0x007A745C
		private float MinValue(); // 0x007A745C-0x007A7464
	}

	public class TextEditor // TypeDefIndex: 2449
	{
		// Fields
		public TouchScreenKeyboard keyboardOnScreen; // 0x08
		public int controlID; // 0x0C
		public GUIStyle style; // 0x10
		public bool multiline; // 0x14
		public bool hasHorizontalCursorPos; // 0x15
		public bool isPasswordField; // 0x16
		[VisibleToOtherModules] // 0x0016D128-0x0016D1B8
		internal bool m_HasFocus; // 0x17
		public Vector2 scrollOffset; // 0x18
		private GUIContent m_Content; // 0x20
		private Rect m_Position; // 0x24
		private int m_CursorIndex; // 0x34
		private int m_SelectIndex; // 0x38
		private bool m_RevealCursor; // 0x3C
		public Vector2 graphicalCursorPos; // 0x40
		public Vector2 graphicalSelectCursorPos; // 0x48
		private bool m_MouseDragSelectsWholeWords; // 0x50
		private int m_DblClickInitPos; // 0x54
		private DblClickSnapping m_DblClickSnap; // 0x58
		private bool m_bJustSelected; // 0x59
		private int m_iAltCursorPos; // 0x5C
		private string oldText; // 0x60
		private int oldPos; // 0x64
		private int oldSelectPos; // 0x68
		private static Dictionary<Event, TextEditOp> s_Keyactions; // 0x00
	
		// Properties
		public string text { get; set; } // 0x0078C96C-0x0078C990 0x0078AF8C-0x0078B02C
		public Rect position { get; set; } // 0x007A75DC-0x007A75EC 0x0078B064-0x0078B0D4
		internal virtual Rect localPosition { [VisibleToOtherModules] /* 0x0016E5F0-0x0016E680 */ get; } // 0x007A7CF8-0x007A7D08 
		public int cursorIndex { get; set; } // 0x007A7D08-0x007A7D10 0x007A7D10-0x007A7D5C
		public int selectIndex { get; set; } // 0x007A7D5C-0x007A7D64 0x007A7D64-0x007A7DA8
		public bool hasSelection { get; } // 0x007A8D20-0x007A8D38 
	
		// Nested types
		public enum DblClickSnapping : byte // TypeDefIndex: 2450
		{
			WORDS = 0,
			PARAGRAPHS = 1
		}
	
		private enum CharacterType // TypeDefIndex: 2451
		{
			LetterLike = 0,
			Symbol = 1,
			Symbol2 = 2,
			WhiteSpace = 3
		}
	
		private enum Direction // TypeDefIndex: 2452
		{
			Forward = 0,
			Backward = 1
		}
	
		private enum TextEditOp // TypeDefIndex: 2453
		{
			MoveLeft = 0,
			MoveRight = 1,
			MoveUp = 2,
			MoveDown = 3,
			MoveLineStart = 4,
			MoveLineEnd = 5,
			MoveTextStart = 6,
			MoveTextEnd = 7,
			MovePageUp = 8,
			MovePageDown = 9,
			MoveGraphicalLineStart = 10,
			MoveGraphicalLineEnd = 11,
			MoveWordLeft = 12,
			MoveWordRight = 13,
			MoveParagraphForward = 14,
			MoveParagraphBackward = 15,
			MoveToStartOfNextWord = 16,
			MoveToEndOfPreviousWord = 17,
			SelectLeft = 18,
			SelectRight = 19,
			SelectUp = 20,
			SelectDown = 21,
			SelectTextStart = 22,
			SelectTextEnd = 23,
			SelectPageUp = 24,
			SelectPageDown = 25,
			ExpandSelectGraphicalLineStart = 26,
			ExpandSelectGraphicalLineEnd = 27,
			SelectGraphicalLineStart = 28,
			SelectGraphicalLineEnd = 29,
			SelectWordLeft = 30,
			SelectWordRight = 31,
			SelectToEndOfPreviousWord = 32,
			SelectToStartOfNextWord = 33,
			SelectParagraphBackward = 34,
			SelectParagraphForward = 35,
			Delete = 36,
			Backspace = 37,
			DeleteWordBack = 38,
			DeleteWordForward = 39,
			DeleteLineBack = 40,
			Cut = 41,
			Copy = 42,
			Paste = 43,
			SelectAll = 44,
			SelectNone = 45,
			ScrollStart = 46,
			ScrollEnd = 47,
			ScrollPageUp = 48,
			ScrollPageDown = 49
		}
	
		// Constructors
		[RequiredByNativeCode] // 0x0016E5E0-0x0016E5F0
		public TextEditor(); // 0x007A746C-0x007A75A0
	
		// Methods
		private void ClearCursorPos(); // 0x007A7DA8-0x007A7DBC
		public void OnFocus(); // 0x007A7DBC-0x007A7E04
		public void OnLostFocus(); // 0x007A7E6C-0x007A7F0C
		private void GrabGraphicalCursorPos(); // 0x007A7F0C-0x007A8028
		public bool HandleKeyEvent(Event e); // 0x0078C7D8-0x0078C96C
		public bool DeleteLineBack(); // 0x007A8C18-0x007A8D20
		public bool DeleteWordBack(); // 0x007A8F30-0x007A8FD8
		public bool DeleteWordForward(); // 0x007A90AC-0x007A9174
		public bool Delete(); // 0x007A93AC-0x007A9478
		public bool Backspace(); // 0x007A95C8-0x007A9680
		public void SelectAll(); // 0x007A7E04-0x007A7E6C
		public void SelectNone(); // 0x007A9768-0x007A9790
		public bool DeleteSelection(); // 0x007A8D38-0x007A8F30
		public void ReplaceSelection(string replace); // 0x0078CA58-0x0078CB00
		public void Insert(char c); // 0x0078CA24-0x0078CA58
		public void MoveRight(); // 0x007A9790-0x007A9810
		public void MoveLeft(); // 0x007A9810-0x007A9874
		public void MoveUp(); // 0x007A9874-0x007A9960
		public void MoveDown(); // 0x007A9960-0x007A9AAC
		public void MoveLineStart(); // 0x007A9AAC-0x007A9B54
		public void MoveLineEnd(); // 0x007A9B54-0x007A9C30
		public void MoveGraphicalLineStart(); // 0x007A9C30-0x007A9C98
		public void MoveGraphicalLineEnd(); // 0x007A9D7C-0x007A9DE4
		public void MoveTextStart(); // 0x007A9EE0-0x007A9F04
		public void MoveTextEnd(); // 0x007A9F04-0x007A9F64
		private int IndexOfEndOfLine(int startIndex); // 0x007A9F64-0x007A9FF0
		public void MoveParagraphForward(); // 0x007A9FF0-0x007AA098
		public void MoveParagraphBackward(); // 0x007AA098-0x007AA158
		public void MoveCursorToPosition(Vector2 cursorPosition); // 0x0078C11C-0x0078C1BC
		protected internal void MoveCursorToPosition_Internal(Vector2 cursorPosition, bool shift); // 0x007AA158-0x007AA2A8
		public void SelectToPosition(Vector2 cursorPosition); // 0x0078C354-0x0078C7D8
		public void SelectLeft(); // 0x007AA46C-0x007AA4CC
		public void SelectRight(); // 0x007AA4CC-0x007AA52C
		public void SelectUp(); // 0x007AA52C-0x007AA5C8
		public void SelectDown(); // 0x007AA5C8-0x007AA694
		public void SelectTextEnd(); // 0x007AA694-0x007AA6E4
		public void SelectTextStart(); // 0x007AA6E4-0x007AA6EC
		public void MouseDragSelectsWholeWords(bool on); // 0x0078C270-0x0078C280
		public void DblClickSnap(DblClickSnapping snapping); // 0x0078C268-0x0078C270
		private int GetGraphicalLineStart(int p); // 0x007A9C98-0x007A9D7C
		private int GetGraphicalLineEnd(int p); // 0x007A9DE4-0x007A9EE0
		private int FindNextSeperator(int startPos); // 0x007AA6EC-0x007AA7A0
		private int FindPrevSeperator(int startPos); // 0x007AA900-0x007AA9A4
		public void MoveWordRight(); // 0x007AA9A4-0x007AAA18
		public void MoveToStartOfNextWord(); // 0x007AAA18-0x007AAA78
		public void MoveToEndOfPreviousWord(); // 0x007AAA78-0x007AAAD8
		public void SelectToStartOfNextWord(); // 0x007AAAD8-0x007AAB10
		public void SelectToEndOfPreviousWord(); // 0x007AAB10-0x007AAB48
		private CharacterType ClassifyChar(int index); // 0x007AA7A0-0x007AA900
		public int FindStartOfNextWord(int p); // 0x007A9174-0x007A93AC
		private int FindEndOfPreviousWord(int p); // 0x007A8FD8-0x007A90AC
		public void MoveWordLeft(); // 0x007AAB48-0x007AABA8
		public void SelectWordRight(); // 0x007AABA8-0x007AAC10
		public void SelectWordLeft(); // 0x007AAC10-0x007AAC78
		public void ExpandSelectGraphicalLineStart(); // 0x007AAC78-0x007AACE0
		public void ExpandSelectGraphicalLineEnd(); // 0x007AACE0-0x007AAD48
		public void SelectGraphicalLineStart(); // 0x007AAD48-0x007AAD80
		public void SelectGraphicalLineEnd(); // 0x007AAD80-0x007AADB8
		public void SelectParagraphForward(); // 0x007AADB8-0x007AAE5C
		public void SelectParagraphBackward(); // 0x007AAE5C-0x007AAF1C
		public void SelectCurrentWord(); // 0x0078C1CC-0x0078C268
		private int FindEndOfClassification(int p, Direction dir); // 0x007AA2A8-0x007AA46C
		public void SelectCurrentParagraph(); // 0x0078C288-0x0078C354
		public void UpdateScrollOffsetIfNeeded(Event evt); // 0x0078C06C-0x0078C0CC
		[VisibleToOtherModules] // 0x0016E680-0x0016E690
		internal void UpdateScrollOffset(); // 0x007A75EC-0x007A7CF8
		public void DrawCursor(string newText); // 0x0078CB00-0x0078D154
		private bool PerformOperation(TextEditOp operation); // 0x007A87DC-0x007A8C18
		public void SaveBackup(); // 0x0078B02C-0x0078B064
		public bool Cut(); // 0x007AAF1C-0x007AAF4C
		public void Copy(); // 0x007AAF4C-0x007AAFEC
		private static string ReplaceNewlinesWithSpaces(string value); // 0x007AB094-0x007AB16C
		public bool Paste(); // 0x007AAFEC-0x007AB094
		private static void MapKey(string key, TextEditOp action); // 0x007AB16C-0x007AB210
		private void InitKeyActions(); // 0x007A8028-0x007A87DC
		public void DetectFocusChange(); // 0x0078B0D4-0x0078B0E4
		internal virtual void OnDetectFocusChange(); // 0x007AB210-0x007AB268
		internal virtual void OnCursorIndexChange(); // 0x007AB268-0x007AB26C
		internal virtual void OnSelectIndexChange(); // 0x007AB26C-0x007AB270
		private void ClampTextIndex(ref int index); // 0x007AB270-0x007AB340
		private void EnsureValidCodePointIndex(ref int index); // 0x007A75A0-0x007A75DC
		private bool IsValidCodePointIndex(int index); // 0x007AB340-0x007AB4B0
		private int PreviousCodePointIndex(int index); // 0x007A9680-0x007A9768
		private int NextCodePointIndex(int index); // 0x007A9478-0x007A95C8
	}
}

namespace UnityEngineInternal.Input
{
	[Flags] // 0x001702D4-0x001702E4
	public enum NativeInputUpdateType // TypeDefIndex: 2455
	{
		IgnoreFocus = -2147483648,
		Dynamic = 1,
		Fixed = 2,
		BeforeRender = 4,
		Editor = 8
	}

	[NativeConditional] // 0x001702E4-0x001703C0
	[NativeHeader] // 0x001702E4-0x001703C0
	[NativeHeader] // 0x001702E4-0x001703C0
	public class NativeInputSystem // TypeDefIndex: 2456
	{
		// Fields
		public static Action<NativeInputUpdateType, int, IntPtr> onUpdate; // 0x00
		public static Action<NativeInputUpdateType> onBeforeUpdate; // 0x04
		private static Action<int, string> s_OnDeviceDiscoveredCallback; // 0x08
	
		// Properties
		internal static bool hasDeviceDiscoveredCallback { set; } // 0x00B59C90-0x00B59D08
	
		// Constructors
		static NativeInputSystem(); // 0x00B59C88-0x00B59C90
	
		// Methods
		[RequiredByNativeCode] // 0x001703C0-0x001703D0
		internal static void NotifyBeforeUpdate(NativeInputUpdateType updateType); // 0x00B59D08-0x00B59DB8
		[RequiredByNativeCode] // 0x001703D0-0x001703E0
		internal static void NotifyUpdate(NativeInputUpdateType updateType, int eventCount, IntPtr eventData); // 0x00B59DB8-0x00B59E84
		[RequiredByNativeCode] // 0x001703E0-0x001703F0
		internal static void NotifyDeviceDiscovered(int deviceId, string deviceDescriptor); // 0x00B59E84-0x00B5EE68
	}
}

namespace UnityEngine
{
	[NativeHeader] // 0x001716B8-0x0017184C
	[NativeHeader] // 0x001716B8-0x0017184C
	[NativeHeader] // 0x001716B8-0x0017184C
	[NativeHeader] // 0x001716B8-0x0017184C
	[RequireComponent] // 0x001716B8-0x0017184C
	[RequireComponent] // 0x001716B8-0x0017184C
	[UsedByNativeCode] // 0x001716B8-0x0017184C
	public sealed class ParticleSystem : Component // TypeDefIndex: 2458
	{
		// Properties
		[Obsolete] // 0x00171FFC-0x00172060
		public bool loop { get; } // 0x00B37B34-0x00B37B38 
		[Obsolete] // 0x00172060-0x00172098
		public bool enableEmission { set; } // 0x00B37B3C-0x00B37B40
		[Obsolete] // 0x00172098-0x00172108
		public Color startColor { set; } // 0x00B37B44-0x00B37BA4
		public MainModule main { get; } // 0x00B37B38-0x00B37B3C 
		public EmissionModule emission { get; } // 0x00B37B40-0x00B37B44 
	
		// Nested types
		public struct MainModule // TypeDefIndex: 2459
		{
			// Fields
			private ParticleSystem m_ParticleSystem; // 0x00
	
			// Properties
			public bool loop { get; } // 0x00B382C8-0x00B382D0 
			public MinMaxGradient startColor { set; } // 0x00B38350-0x00B38550
	
			// Constructors
			internal MainModule(ParticleSystem particleSystem); // 0x00B38248-0x00B38250
	
			// Methods
			[GeneratedByOldBindingsGenerator] // 0x00171F9C-0x00171FAC
			private static bool GetLoop(ParticleSystem system); // 0x00B38250-0x00B382C8
			[GeneratedByOldBindingsGenerator] // 0x00171FAC-0x00171FBC
			private static void SetStartColor(ParticleSystem system, ref MinMaxGradient gradient); // 0x00B382D0-0x00B38350
		}
	
		public struct EmissionModule // TypeDefIndex: 2460
		{
			// Fields
			private ParticleSystem m_ParticleSystem; // 0x00
	
			// Properties
			public bool enabled { set; } // 0x00B380A8-0x00B38248
	
			// Constructors
			internal EmissionModule(ParticleSystem particleSystem); // 0x00B38020-0x00B38028
	
			// Methods
			[GeneratedByOldBindingsGenerator] // 0x00171FBC-0x00171FCC
			private static void SetEnabled(ParticleSystem system, bool value); // 0x00B38028-0x00B380A8
		}
	
		[RequiredByNativeCode] // 0x0017184C-0x001718A0
		public struct Particle // TypeDefIndex: 2461
		{
			// Fields
			private Vector3 m_Position; // 0x00
			private Vector3 m_Velocity; // 0x0C
			private Vector3 m_AnimatedVelocity; // 0x18
			private Vector3 m_InitialVelocity; // 0x24
			private Vector3 m_AxisOfRotation; // 0x30
			private Vector3 m_Rotation; // 0x3C
			private Vector3 m_AngularVelocity; // 0x48
			private Vector3 m_StartSize; // 0x54
			private Color32 m_StartColor; // 0x60
			private uint m_RandomSeed; // 0x64
			private float m_Lifetime; // 0x68
			private float m_StartLifetime; // 0x6C
			private float m_EmitAccumulator0; // 0x70
			private float m_EmitAccumulator1; // 0x74
			private uint m_Flags; // 0x78
	
			// Properties
			[Obsolete] // 0x00172108-0x00172140
			public float lifetime { set; } // 0x00B38574-0x00B3857C
			public Vector3 position { set; } // 0x00B3857C-0x00B38588
			public Vector3 velocity { set; } // 0x00B38588-0x00B38594
			public float remainingLifetime { set; } // 0x00B38594-0x00B3859C
			public float startLifetime { set; } // 0x00B3859C-0x00B385A4
			public Color32 startColor { set; } // 0x00B385A4-0x00B385AC
			public uint randomSeed { set; } // 0x00B385AC-0x00B385B4
			public float startSize { set; } // 0x00B385B4-0x00B38600
			public Vector3 rotation3D { set; } // 0x00B38600-0x00B3861C
			public Vector3 angularVelocity3D { set; } // 0x00B3861C-0x00B38638
		}
	
		[Serializable]
		public struct MinMaxGradient // TypeDefIndex: 2462
		{
			// Fields
			[SerializeField] // 0x001719B0-0x001719C0
			private ParticleSystemGradientMode m_Mode; // 0x00
			[SerializeField] // 0x001719C0-0x001719D0
			private Gradient m_GradientMin; // 0x04
			[SerializeField] // 0x001719D0-0x001719E0
			private Gradient m_GradientMax; // 0x08
			[SerializeField] // 0x001719E0-0x001719F0
			private Color m_ColorMin; // 0x0C
			[SerializeField] // 0x001719F0-0x00171A00
			private Color m_ColorMax; // 0x1C
	
			// Constructors
			public MinMaxGradient(Color color); // 0x00B38550-0x00B38574
	
			// Methods
			public static implicit operator MinMaxGradient(Color color); // 0x00B37BA4-0x00B37C6C
		}
	
		public struct EmitParams // TypeDefIndex: 2463
		{
			// Fields
			[NativeName] // 0x00171A00-0x00171A44
			private Particle m_Particle; // 0x00
			[NativeName] // 0x00171A44-0x00171A88
			private bool m_PositionSet; // 0x7C
			[NativeName] // 0x00171A88-0x00171ACC
			private bool m_VelocitySet; // 0x7D
			[NativeName] // 0x00171ACC-0x00171B18
			private bool m_AxisOfRotationSet; // 0x7E
			[NativeName] // 0x00171B18-0x00171B5C
			private bool m_RotationSet; // 0x7F
			[NativeName] // 0x00171B5C-0x00171BA8
			private bool m_AngularVelocitySet; // 0x80
			[NativeName] // 0x00171BA8-0x00171BF0
			private bool m_StartSizeSet; // 0x81
			[NativeName] // 0x00171BF0-0x00171C38
			private bool m_StartColorSet; // 0x82
			[NativeName] // 0x00171C38-0x00171C80
			private bool m_RandomSeedSet; // 0x83
			[NativeName] // 0x00171C80-0x00171CCC
			private bool m_StartLifetimeSet; // 0x84
			[NativeName] // 0x00171CCC-0x00171D1C
			private bool m_ApplyShapeToPosition; // 0x85
		}
	
		// Methods
		[Obsolete] // 0x00171D1C-0x00171D54
		public void Emit(Vector3 position, Vector3 velocity, float size, float lifetime, Color32 color); // 0x00B37778-0x00B37A84
		[Obsolete] // 0x00171D54-0x00171D8C
		public void Emit(Particle particle); // 0x00B37B04-0x00B37B34
		[FreeFunction] // 0x00171D8C-0x00171DF8
		public void Play(bool withChildren); // 0x00B37C6C-0x00B37D10
		public void Play(); // 0x00B37D10-0x00B37D18
		[FreeFunction] // 0x00171DF8-0x00171E64
		public void Stop(bool withChildren, ParticleSystemStopBehavior stopBehavior); // 0x00B37D18-0x00B37DA0
		public void Stop(bool withChildren); // 0x00B37DA0-0x00B37DA8
		public void Stop(); // 0x00B37DA8-0x00B37DB4
		[FreeFunction] // 0x00171E64-0x00171ED4
		public bool IsAlive(bool withChildren); // 0x00B37DB4-0x00B37E58
		[RequiredByNativeCode] // 0x00171ED4-0x00171EE4
		public void Emit(int count); // 0x00B37E58-0x00B37E5C
		[NativeName] // 0x00171EE4-0x00171F30
		private void Emit_Internal(int count); // 0x00B37E5C-0x00B37F04
		[NativeName] // 0x00171F30-0x00171F8C
		public void Emit(EmitParams emitParams, int count); // 0x00B37F04-0x00B37F3C
		[GeneratedByOldBindingsGenerator] // 0x00171F8C-0x00171F9C
		private void Internal_EmitOld(ref Particle particle); // 0x00B37A84-0x00B37B04
		private void Emit_Injected(ref EmitParams emitParams, int count); // 0x00B37F3C-0x00B38020
	}

	[NativeHeader] // 0x001718A0-0x001719B0
	[NativeHeader] // 0x001718A0-0x001719B0
	[RequireComponent] // 0x001718A0-0x001719B0
	[RequireComponent] // 0x001718A0-0x001719B0
	public sealed class ParticleSystemRenderer : Renderer // TypeDefIndex: 2464
	{
		// Methods
		[GeneratedByOldBindingsGenerator] // 0x00171FCC-0x00171FFC
		[RequiredByNativeCode] // 0x00171FCC-0x00171FFC
		private int Internal_GetMeshCount(); // 0x00B38638-0x00B386DC
	}

	public enum ParticleSystemGradientMode // TypeDefIndex: 2465
	{
		Color = 0,
		Gradient = 1,
		TwoColors = 2,
		TwoGradients = 3,
		RandomColor = 4
	}

	public enum ParticleSystemStopBehavior // TypeDefIndex: 2466
	{
		StopEmittingAndClear = 0,
		StopEmitting = 1
	}

	[NativeHeader] // 0x00173418-0x00173474
	public struct PhysicsScene2D : IEquatable<PhysicsScene2D> // TypeDefIndex: 2468
	{
		// Fields
		private int m_Handle; // 0x00
	
		// Methods
		public override string ToString(); // 0x00B32274-0x00B3227C
		public override int GetHashCode(); // 0x00B3227C-0x00B32318
		public override bool Equals(object other); // 0x00B32318-0x00B32320
		public bool Equals(PhysicsScene2D other); // 0x00B32320-0x00B32334
		public RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, [UnityEngine.Internal.DefaultValue] /* 0x00173F8C-0x00173FC0 */ int layerMask = -5 /* Metadata: 0x0021AFB9 */); // 0x00B323D8-0x00B32414
		public RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter); // 0x00B32414-0x00B324AC
		[NativeMethod] // 0x00173C58-0x00173CC4
		[StaticAccessor] // 0x00173C58-0x00173CC4
		private static RaycastHit2D Raycast_Internal(PhysicsScene2D physicsScene, Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter); // 0x00B32334-0x00B323D8
		public int Raycast(Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter, RaycastHit2D[] results); // 0x00B325BC-0x00B32620
		[NativeMethod] // 0x00173CC4-0x00173D38
		[StaticAccessor] // 0x00173CC4-0x00173D38
		private static int RaycastNonAlloc_Internal(PhysicsScene2D physicsScene, Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter, out RaycastHit2D[] results); // 0x00B3253C-0x00B325BC
		public int GetRayIntersection(Ray ray, float distance, RaycastHit2D[] results, [UnityEngine.Internal.DefaultValue] /* 0x00173FC0-0x00173FF4 */ int layerMask = -5 /* Metadata: 0x0021AFBD */); // 0x00B32708-0x00B32750
		[NativeMethod] // 0x00173D38-0x00173DB8
		[StaticAccessor] // 0x00173D38-0x00173DB8
		private static int GetRayIntersectionNonAlloc_Internal(PhysicsScene2D physicsScene, Vector3 origin, Vector3 direction, float distance, int layerMask, out RaycastHit2D[] results); // 0x00B326B0-0x00B32708
		private static void Raycast_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector2 origin, ref Vector2 direction, float distance, ref ContactFilter2D contactFilter, out RaycastHit2D ret); // 0x00B324AC-0x00B3253C
		private static int RaycastNonAlloc_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector2 origin, ref Vector2 direction, float distance, ref ContactFilter2D contactFilter, out RaycastHit2D[] results); // 0x00B32620-0x00B326B0
		private static int GetRayIntersectionNonAlloc_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector3 origin, ref Vector3 direction, float distance, int layerMask, out RaycastHit2D[] results); // 0x00B32750-0x00B327F4
	}

	[NativeHeader] // 0x00173474-0x00173558
	[NativeHeader] // 0x00173474-0x00173558
	[NativeHeader] // 0x00173474-0x00173558
	[StaticAccessor] // 0x00173474-0x00173558
	public class Physics2D // TypeDefIndex: 2469
	{
		// Fields
		private static List<Rigidbody2D> m_LastDisabledRigidbody2D; // 0x00
	
		// Properties
		[NativeProperty] // 0x001741D0-0x00174234
		[StaticAccessor] // 0x001741D0-0x00174234
		public static PhysicsScene2D defaultPhysicsScene { get; } // 0x00B30CC4-0x00B30D54 
		[StaticAccessor] // 0x00174234-0x00174278
		public static bool queriesHitTriggers { get; } // 0x00B30C30-0x00B30CC4 
	
		// Constructors
		static Physics2D(); // 0x00B320D4-0x00B32274
	
		// Methods
		[ExcludeFromDocs] // 0x00173DB8-0x00173DC8
		public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction); // 0x00B30DCC-0x00B30F90
		[ExcludeFromDocs] // 0x00173DC8-0x00173DD8
		public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance); // 0x00B30F90-0x00B31088
		[ExcludeFromDocs] // 0x00173DD8-0x00173E08
		[RequiredByNativeCode] // 0x00173DD8-0x00173E08
		public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, int layerMask); // 0x00B31088-0x00B31220
		[ExcludeFromDocs] // 0x00173E08-0x00173E18
		public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, int layerMask, float minDepth); // 0x00B31220-0x00B313B0
		public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction, [UnityEngine.Internal.DefaultValue] /* 0x00173FF4-0x00174028 */ float distance, [UnityEngine.Internal.DefaultValue] /* 0x00174028-0x0017405C */ int layerMask, [UnityEngine.Internal.DefaultValue] /* 0x0017405C-0x00174098 */ float minDepth, [UnityEngine.Internal.DefaultValue] /* 0x00174098-0x001740CC */ float maxDepth); // 0x00B313B0-0x00B31540
		[ExcludeFromDocs] // 0x00173E18-0x00173E28
		public static int Raycast(Vector2 origin, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results); // 0x00B31540-0x00B31628
		public static int Raycast(Vector2 origin, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results, [UnityEngine.Internal.DefaultValue] /* 0x001740CC-0x00174100 */ float distance); // 0x00B31628-0x00B31724
		[ExcludeFromDocs] // 0x00173E28-0x00173E38
		public static RaycastHit2D[] GetRayIntersectionAll(Ray ray); // 0x00B31724-0x00B31820
		[ExcludeFromDocs] // 0x00173E38-0x00173E48
		public static RaycastHit2D[] GetRayIntersectionAll(Ray ray, float distance); // 0x00B318EC-0x00B319EC
		[RequiredByNativeCode] // 0x00173E48-0x00173E58
		public static RaycastHit2D[] GetRayIntersectionAll(Ray ray, [UnityEngine.Internal.DefaultValue] /* 0x00174100-0x00174134 */ float distance, [UnityEngine.Internal.DefaultValue] /* 0x00174134-0x00174168 */ int layerMask); // 0x00B319EC-0x00B31AE0
		[NativeMethod] // 0x00173E58-0x00173ED4
		[StaticAccessor] // 0x00173E58-0x00173ED4
		private static RaycastHit2D[] GetRayIntersectionAll_Internal(PhysicsScene2D physicsScene, Vector3 origin, Vector3 direction, float distance, int layerMask); // 0x00B31820-0x00B318EC
		[ExcludeFromDocs] // 0x00173ED4-0x00173EE4
		public static int GetRayIntersectionNonAlloc(Ray ray, RaycastHit2D[] results); // 0x00B31B70-0x00B31CDC
		[ExcludeFromDocs] // 0x00173EE4-0x00173EF4
		public static int GetRayIntersectionNonAlloc(Ray ray, RaycastHit2D[] results, float distance); // 0x00B31CDC-0x00B31DC4
		[RequiredByNativeCode] // 0x00173EF4-0x00173F04
		public static int GetRayIntersectionNonAlloc(Ray ray, RaycastHit2D[] results, [UnityEngine.Internal.DefaultValue] /* 0x00174168-0x0017419C */ float distance, [UnityEngine.Internal.DefaultValue] /* 0x0017419C-0x001741D0 */ int layerMask); // 0x00B31DC4-0x00B31EAC
		[ExcludeFromDocs] // 0x00173F04-0x00173F14
		public static Collider2D[] OverlapCircleAll(Vector2 point, float radius); // 0x00B31EAC-0x00B31F78
		[NativeMethod] // 0x00173F14-0x00173F8C
		[StaticAccessor] // 0x00173F14-0x00173F8C
		private static Collider2D[] OverlapCircleAll_Internal(PhysicsScene2D physicsScene, Vector2 point, float radius, ContactFilter2D contactFilter); // 0x00B31F78-0x00B32044
		private static void get_defaultPhysicsScene_Injected(out PhysicsScene2D ret); // 0x00B30D54-0x00B30DCC
		private static RaycastHit2D[] GetRayIntersectionAll_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector3 origin, ref Vector3 direction, float distance, int layerMask); // 0x00B31AE0-0x00B31B70
		private static Collider2D[] OverlapCircleAll_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector2 point, float radius, ref ContactFilter2D contactFilter); // 0x00B32044-0x00B320D4
	}

	[Serializable]
	[NativeClass] // 0x00173558-0x0017361C
	[NativeHeader] // 0x00173558-0x0017361C
	[RequiredByNativeCode] // 0x00173558-0x0017361C
	public struct ContactFilter2D // TypeDefIndex: 2470
	{
		// Fields
		[NativeName] // 0x0017387C-0x001738B8
		public bool useTriggers; // 0x00
		[NativeName] // 0x001738B8-0x001738F4
		public bool useLayerMask; // 0x01
		[NativeName] // 0x001738F4-0x0017392C
		public bool useDepth; // 0x02
		[NativeName] // 0x0017392C-0x0017396C
		public bool useOutsideDepth; // 0x03
		[NativeName] // 0x0017396C-0x001739AC
		public bool useNormalAngle; // 0x04
		[NativeName] // 0x001739AC-0x001739F0
		public bool useOutsideNormalAngle; // 0x05
		[NativeName] // 0x001739F0-0x00173A28
		public LayerMask layerMask; // 0x08
		[NativeName] // 0x00173A28-0x00173A60
		public float minDepth; // 0x0C
		[NativeName] // 0x00173A60-0x00173A98
		public float maxDepth; // 0x10
		[NativeName] // 0x00173A98-0x00173AD8
		public float minNormalAngle; // 0x14
		[NativeName] // 0x00173AD8-0x00173B18
		public float maxNormalAngle; // 0x18
	
		// Methods
		private void CheckConsistency(); // 0x00B30B0C-0x00B30B14
		public void SetLayerMask(LayerMask layerMask); // 0x00B30B14-0x00B30B24
		public void SetDepth(float minDepth, float maxDepth); // 0x00B30B24-0x00B30B3C
		internal static ContactFilter2D CreateLegacyFilter(int layerMask, float minDepth, float maxDepth); // 0x00B30B3C-0x00B30C30
	}

	[NativeClass] // 0x0017361C-0x001736F8
	[NativeHeader] // 0x0017361C-0x001736F8
	[RequiredByNativeCode] // 0x0017361C-0x001736F8
	public struct RaycastHit2D // TypeDefIndex: 2471
	{
		// Fields
		[NativeName] // 0x00173B18-0x00173B50
		private Vector2 m_Centroid; // 0x00
		[NativeName] // 0x00173B50-0x00173B84
		private Vector2 m_Point; // 0x08
		[NativeName] // 0x00173B84-0x00173BB8
		private Vector2 m_Normal; // 0x10
		[NativeName] // 0x00173BB8-0x00173BEC
		private float m_Distance; // 0x18
		[NativeName] // 0x00173BEC-0x00173C24
		private float m_Fraction; // 0x1C
		[NativeName] // 0x00173C24-0x00173C58
		private int m_Collider; // 0x20
	
		// Properties
		public Vector2 point { get; } // 0x00B327F4-0x00B3281C 
		public Vector2 normal { get; } // 0x00B3281C-0x00B32838 
		public float distance { get; } // 0x00B32838-0x00B32914 
		public Collider2D collider { get; } // 0x00B32914-0x00B3291C 
	}

	[NativeHeader] // 0x001736F8-0x001737B8
	[RequireComponent] // 0x001736F8-0x001737B8
	public sealed class Rigidbody2D : Component // TypeDefIndex: 2472
	{
		// Properties
		public Vector2 position { get; set; } // 0x00B3291C-0x00B32958 0x00B329D8-0x00B329F4
		public float rotation { get; set; } // 0x00B32A74-0x00B32B04 0x00B32B04-0x00B32BAC
		public Vector2 velocity { get; set; } // 0x00B32C54-0x00B32C90 0x00B32D10-0x00B32D2C
		public float angularVelocity { get; set; } // 0x00B32DAC-0x00B32E44 0x00B32E44-0x00B32EF0
	
		// Methods
		public void MoveRotation(float angle); // 0x00B32BAC-0x00B32C54
		private void get_position_Injected(out Vector2 ret); // 0x00B32958-0x00B329D8
		private void set_position_Injected(ref Vector2 value); // 0x00B329F4-0x00B32A74
		private void get_velocity_Injected(out Vector2 ret); // 0x00B32C90-0x00B32D10
		private void set_velocity_Injected(ref Vector2 value); // 0x00B32D2C-0x00B32DAC
	}

	[NativeHeader] // 0x001737B8-0x0017387C
	[RequireComponent] // 0x001737B8-0x0017387C
	[RequiredByNativeCode] // 0x001737B8-0x0017387C
	public class Collider2D : Behaviour // TypeDefIndex: 2473
	{
		// Constructors
		public Collider2D(); // 0x00B30838-0x00B30B0C
	}

	[NativeHeader] // 0x00175550-0x001755B0
	public static class ScreenCapture // TypeDefIndex: 2475
	{
		// Nested types
		public enum StereoScreenCaptureMode // TypeDefIndex: 2476
		{
			LeftEye = 1,
			RightEye = 2,
			BothEyes = 3
		}
	
		// Methods
		public static void CaptureScreenshot(string filename); // 0x00B8C6FC-0x00B8C708
		private static void CaptureScreenshot(string filename, [UnityEngine.Internal.DefaultValue] /* 0x001755B0-0x001755E0 */ int superSize, [UnityEngine.Internal.DefaultValue] /* 0x001755E0-0x00175610 */ StereoScreenCaptureMode CaptureMode); // 0x00B8C708-0x00B9C138
	}

	public enum RenderMode // TypeDefIndex: 2478
	{
		ScreenSpaceOverlay = 0,
		ScreenSpaceCamera = 1,
		WorldSpace = 2
	}

	[NativeClass] // 0x001768D8-0x001769DC
	[NativeHeader] // 0x001768D8-0x001769DC
	[NativeHeader] // 0x001768D8-0x001769DC
	[RequireComponent] // 0x001768D8-0x001769DC
	public sealed class Canvas : Behaviour // TypeDefIndex: 2479
	{
		// Fields
		[CompilerGenerated] // 0x00176C3C-0x00176C70
		[DebuggerBrowsable] // 0x00176C3C-0x00176C70
		private static WillRenderCanvases willRenderCanvases; // 0x00
	
		// Properties
		public RenderMode renderMode { get; } // 0x00B284D4-0x00B28564 
		public bool isRootCanvas { get; } // 0x00B28564-0x00B285F4 
		public float scaleFactor { get; set; } // 0x00B285F4-0x00B28684 0x00B28684-0x00B28728
		public float referencePixelsPerUnit { get; set; } // 0x00B28728-0x00B287C4 0x00B287C4-0x00B28874
		public bool pixelPerfect { get; } // 0x00B28874-0x00B28904 
		public int renderOrder { get; } // 0x00B28904-0x00B28994 
		public bool overrideSorting { get; set; } // 0x00B28994-0x00B28A28 0x00B28A28-0x00B28AD0
		public int sortingOrder { get; set; } // 0x00B28AD0-0x00B28B60 0x00B28B60-0x00B28C04
		public int targetDisplay { get; } // 0x00B28C04-0x00B28C94 
		public int sortingLayerID { get; set; } // 0x00B28C94-0x00B28D28 0x00B28D28-0x00B28DD0
		public Canvas rootCanvas { get; } // 0x00B28DD0-0x00B28E60 
		[NativeProperty] // 0x00176DE8-0x00176E30
		public Camera worldCamera { get; } // 0x00B28E60-0x00B28EF0 
	
		// Events
		public static event WillRenderCanvases willRenderCanvases {
			add; // 0x00B28274-0x00B283A4
			remove; // 0x00B283A4-0x00B284D4
		}
	
		// Nested types
		public delegate void WillRenderCanvases(); // TypeDefIndex: 2480; 0x00B29090-0x00B294D8
	
		// Constructors
		public Canvas(); // 0x00B2826C-0x00B28274
	
		// Methods
		[FreeFunction] // 0x00176CA4-0x00176CEC
		public static Material GetDefaultCanvasMaterial(); // 0x00B28EF0-0x00B28F84
		[FreeFunction] // 0x00176CEC-0x00176D3C
		public static Material GetETC1SupportedCanvasMaterial(); // 0x00B28F84-0x00B29020
		public static void ForceUpdateCanvases(); // 0x00B29020-0x00B29024
		[RequiredByNativeCode] // 0x00176D3C-0x00176D4C
		private static void SendWillRenderCanvases(); // 0x00B29024-0x00B29090
	}

	[NativeHeader] // 0x001769DC-0x00176A50
	[StaticAccessor] // 0x001769DC-0x00176A50
	public static class UISystemProfilerApi // TypeDefIndex: 2481
	{
		// Nested types
		public enum SampleType // TypeDefIndex: 2482
		{
			Layout = 0,
			Render = 1
		}
	
		// Methods
		public static void BeginSample(SampleType type); // 0x00B2BB28-0x00B2BBA0
		public static void EndSample(SampleType type); // 0x00B2BBA0-0x00B2BC18
		public static void AddMarker(string name, UnityEngine.Object obj); // 0x00B2BC18-0x00B2BC98
	}

	public interface ICanvasRaycastFilter // TypeDefIndex: 2483
	{
		// Methods
		bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera);
	}

	[NativeClass] // 0x00176A50-0x00176ACC
	[NativeHeader] // 0x00176A50-0x00176ACC
	public sealed class CanvasGroup : Behaviour, ICanvasRaycastFilter // TypeDefIndex: 2484
	{
		// Properties
		[NativeProperty] // 0x00176E30-0x00176E78
		public float alpha { get; set; } // 0x00B29524-0x00B295B4 0x00B295B4-0x00B29658
		[NativeProperty] // 0x00176E78-0x00176EC8
		public bool interactable { get; set; } // 0x00B29658-0x00B296EC 0x00B296EC-0x00B29798
		[NativeProperty] // 0x00176EC8-0x00176F18
		public bool blocksRaycasts { get; } // 0x00B29798-0x00B29830 
		[NativeProperty] // 0x00176F18-0x00176F6C
		public bool ignoreParentGroups { get; } // 0x00B29830-0x00B298CC 
	
		// Methods
		public bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera); // 0x00B298CC-0x00B298D0
	}

	[NativeClass] // 0x00176ACC-0x00176B4C
	[NativeHeader] // 0x00176ACC-0x00176B4C
	public sealed class CanvasRenderer : Component // TypeDefIndex: 2485
	{
		// Fields
		[CompilerGenerated] // 0x00176C70-0x00176CA4
		[DebuggerBrowsable] // 0x00176C70-0x00176CA4
		private bool <isMask>k__BackingField; // 0x0C
	
		// Properties
		public bool hasPopInstruction { set; } // 0x00B298D0-0x00B29950
		public int materialCount { get; set; } // 0x00B29950-0x00B299E8 0x00B299E8-0x00B29A94
		public int popMaterialCount { set; } // 0x00B29A94-0x00B29B44
		public int absoluteDepth { get; } // 0x00B29B44-0x00B29BDC 
		public bool hasMoved { get; } // 0x00B29BDC-0x00B29C70 
		[NativeProperty] // 0x00176F6C-0x00176FB8
		public bool cull { get; set; } // 0x00B29C70-0x00B29D00 0x00B29D00-0x00B29DA8
	
		// Methods
		public void SetColor(Color color); // 0x00B29DA8-0x00B29DCC
		public Color GetColor(); // 0x00B29E4C-0x00B29E84
		public void EnableRectClipping(Rect rect); // 0x00B29F04-0x00B29F28
		public void DisableRectClipping(); // 0x00B29FA8-0x00B2A044
		public void SetMaterial(Material material, int index); // 0x00B2A044-0x00B2A0CC
		public void SetPopMaterial(Material material, int index); // 0x00B2A0CC-0x00B2A154
		public void SetTexture(Texture texture); // 0x00B2A154-0x00B2A200
		public void SetAlphaTexture(Texture texture); // 0x00B2A200-0x00B2A280
		public void SetMesh(Mesh mesh); // 0x00B2A280-0x00B2A328
		public void Clear(); // 0x00B2A328-0x00B2A3B4
		public void SetMaterial(Material material, Texture texture); // 0x00B2A3B4-0x00B2A478
		public static void SplitUIVertexStreams(List<UIVertex> verts, List<Vector3> positions, List<Color32> colors, List<Vector2> uv0S, List<Vector2> uv1S, List<Vector2> uv2S, List<Vector2> uv3S, List<Vector3> normals, List<Vector4> tangents, List<int> indices); // 0x00B2A478-0x00B2A4C8
		public static void CreateUIVertexStream(List<UIVertex> verts, List<Vector3> positions, List<Color32> colors, List<Vector2> uv0S, List<Vector2> uv1S, List<Vector2> uv2S, List<Vector2> uv3S, List<Vector3> normals, List<Vector4> tangents, List<int> indices); // 0x00B2A5D8-0x00B2A61C
		public static void AddUIVertexStream(List<UIVertex> verts, List<Vector3> positions, List<Color32> colors, List<Vector2> uv0S, List<Vector2> uv1S, List<Vector2> uv2S, List<Vector2> uv3S, List<Vector3> normals, List<Vector4> tangents); // 0x00B2A6AC-0x00B2A6E8
		[StaticAccessor] // 0x00176D4C-0x00176D80
		private static void SplitIndicesStreamsInternal(object verts, object indices); // 0x00B2A558-0x00B2A5D8
		[StaticAccessor] // 0x00176D80-0x00176DB4
		private static void SplitUIVertexStreamsInternal(object verts, object positions, object colors, object uv0S, object uv1S, object uv2S, object uv3S, object normals, object tangents); // 0x00B2A4C8-0x00B2A558
		[StaticAccessor] // 0x00176DB4-0x00176DE8
		private static void CreateUIVertexStreamInternal(object verts, object positions, object colors, object uv0S, object uv1S, object uv2S, object uv3S, object normals, object tangents, object indices); // 0x00B2A61C-0x00B2A6AC
		private void SetColor_Injected(ref Color color); // 0x00B29DCC-0x00B29E4C
		private void GetColor_Injected(out Color ret); // 0x00B29E84-0x00B29F04
		private void EnableRectClipping_Injected(ref Rect rect); // 0x00B29F28-0x00B29FA8
	}

	[NativeHeader] // 0x00176B4C-0x00176C3C
	[NativeHeader] // 0x00176B4C-0x00176C3C
	[NativeHeader] // 0x00176B4C-0x00176C3C
	[NativeHeader] // 0x00176B4C-0x00176C3C
	[StaticAccessor] // 0x00176B4C-0x00176C3C
	public sealed class RectTransformUtility // TypeDefIndex: 2486
	{
		// Fields
		private static readonly Vector3[] s_Corners; // 0x00
	
		// Constructors
		static RectTransformUtility(); // 0x00B2BAB0-0x00B2BB28
	
		// Methods
		public static bool RectangleContainsScreenPoint(RectTransform rect, Vector2 screenPoint); // 0x00B2A6E8-0x00B2A784
		public static bool RectangleContainsScreenPoint(RectTransform rect, Vector2 screenPoint, Camera cam); // 0x00B2A784-0x00B2A824
		public static bool ScreenPointToWorldPointInRectangle(RectTransform rect, Vector2 screenPoint, Camera cam, out Vector3 worldPoint); // 0x00B2A8C0-0x00B2AB50
		public static bool ScreenPointToLocalPointInRectangle(RectTransform rect, Vector2 screenPoint, Camera cam, out Vector2 localPoint); // 0x00B2AD78-0x00B2AF0C
		public static Ray ScreenPointToRay(Camera cam, Vector2 screenPos); // 0x00B2AB50-0x00B2AD78
		public static void FlipLayoutOnAxis(RectTransform rect, int axis, bool keepPositioning, bool recursive); // 0x00B2AF0C-0x00B2B308
		public static void FlipLayoutAxes(RectTransform rect, bool keepPositioning, bool recursive); // 0x00B2B308-0x00B2B764
		private static Vector2 GetTransposed(Vector2 input); // 0x00B2B764-0x00B2B7A8
		public static Vector2 PixelAdjustPoint(Vector2 point, Transform elementTransform, Canvas canvas); // 0x00B2B7A8-0x00B2B864
		public static Rect PixelAdjustRect(RectTransform rectTransform, Canvas canvas); // 0x00B2B8F4-0x00B2B9A0
		private static bool PointInRectangle(Vector2 screenPoint, RectTransform rect, Camera cam); // 0x00B2A824-0x00B2A8C0
		private static void PixelAdjustPoint_Injected(ref Vector2 point, Transform elementTransform, Canvas canvas, out Vector2 ret); // 0x00B2B864-0x00B2B8F4
		private static void PixelAdjustRect_Injected(RectTransform rectTransform, Canvas canvas, out Rect ret); // 0x00B2B9A0-0x00B2BA28
		private static bool PointInRectangle_Injected(ref Vector2 screenPoint, RectTransform rect, Camera cam); // 0x00B2BA28-0x00B2BAB0
	}
}

namespace UnityEngine.Networking.Match
{
	internal abstract class Request // TypeDefIndex: 2488
	{
		// Fields
		public static readonly int currentVersion; // 0x00
		[CompilerGenerated] // 0x001789C4-0x001789F8
		[DebuggerBrowsable] // 0x001789C4-0x001789F8
		private SourceID <sourceId>k__BackingField; // 0x08
		[CompilerGenerated] // 0x001789F8-0x00178A2C
		[DebuggerBrowsable] // 0x001789F8-0x00178A2C
		private string <projectId>k__BackingField; // 0x10
		[CompilerGenerated] // 0x00178A2C-0x00178A60
		[DebuggerBrowsable] // 0x00178A2C-0x00178A60
		private string <accessTokenString>k__BackingField; // 0x14
		[CompilerGenerated] // 0x00178A60-0x00178A94
		[DebuggerBrowsable] // 0x00178A60-0x00178A94
		private int <domain>k__BackingField; // 0x18
	
		// Properties
		public SourceID sourceId { [CompilerGenerated] /* 0x001796FC-0x0017970C */ get; } // 0x00AF4B4C-0x00AF4B54 
		public string projectId { [CompilerGenerated] /* 0x0017970C-0x0017971C */ get; } // 0x00AF4B54-0x00AF4B5C 
		public string accessTokenString { [CompilerGenerated] /* 0x0017971C-0x0017972C */ get; } // 0x00AF4B5C-0x00AF4B64 
		public int domain { [CompilerGenerated] /* 0x0017972C-0x0017973C */ get; [CompilerGenerated] /* 0x0017973C-0x0017974C */ set; } // 0x00AF1898-0x00AF18A0 0x00AF11E4-0x00AF11EC
	
		// Constructors
		protected Request(); // 0x00AED6DC-0x00AED6E4
		static Request(); // 0x00AF4B64-0x00AF4BCC
	
		// Methods
		public override string ToString(); // 0x00AEDBC8-0x00AEDF00
	}

	internal interface IResponse // TypeDefIndex: 2489
	{
	}

	[Serializable]
	internal abstract class Response : IResponse // TypeDefIndex: 2490
	{
		// Fields
		public bool success; // 0x08
		public string extendedInfo; // 0x0C
	
		// Constructors
		protected Response(); // 0x00AED650-0x00AED658
	
		// Methods
		public void SetFailure(string info); // 0x00AF4BCC-0x00AF4BF4
		public override string ToString(); // 0x00AEE310-0x00AEE4D4
	}

	internal class BasicResponse : Response // TypeDefIndex: 2491
	{
		// Constructors
		public BasicResponse(); // 0x00AED648-0x00AED650
	}

	internal class CreateMatchRequest : Request // TypeDefIndex: 2492
	{
		// Fields
		[CompilerGenerated] // 0x00178A94-0x00178AC8
		[DebuggerBrowsable] // 0x00178A94-0x00178AC8
		private string <name>k__BackingField; // 0x1C
		[CompilerGenerated] // 0x00178AC8-0x00178AFC
		[DebuggerBrowsable] // 0x00178AC8-0x00178AFC
		private uint <size>k__BackingField; // 0x20
		[CompilerGenerated] // 0x00178AFC-0x00178B30
		[DebuggerBrowsable] // 0x00178AFC-0x00178B30
		private string <publicAddress>k__BackingField; // 0x24
		[CompilerGenerated] // 0x00178B30-0x00178B64
		[DebuggerBrowsable] // 0x00178B30-0x00178B64
		private string <privateAddress>k__BackingField; // 0x28
		[CompilerGenerated] // 0x00178B64-0x00178B98
		[DebuggerBrowsable] // 0x00178B64-0x00178B98
		private int <eloScore>k__BackingField; // 0x2C
		[CompilerGenerated] // 0x00178B98-0x00178BCC
		[DebuggerBrowsable] // 0x00178B98-0x00178BCC
		private bool <advertise>k__BackingField; // 0x30
		[CompilerGenerated] // 0x00178BCC-0x00178C00
		[DebuggerBrowsable] // 0x00178BCC-0x00178C00
		private string <password>k__BackingField; // 0x34
		[CompilerGenerated] // 0x00178C00-0x00178C34
		[DebuggerBrowsable] // 0x00178C00-0x00178C34
		private Dictionary<string, long> <matchAttributes>k__BackingField; // 0x38
	
		// Properties
		public string name { [CompilerGenerated] /* 0x0017974C-0x0017975C */ get; [CompilerGenerated] /* 0x0017975C-0x0017976C */ set; } // 0x00AED6E4-0x00AED6EC 0x00AED6EC-0x00AED6F4
		public uint size { [CompilerGenerated] /* 0x0017976C-0x0017977C */ get; [CompilerGenerated] /* 0x0017977C-0x0017978C */ set; } // 0x00AED6F4-0x00AED6FC 0x00AED6FC-0x00AED704
		public string publicAddress { [CompilerGenerated] /* 0x0017978C-0x0017979C */ get; [CompilerGenerated] /* 0x0017979C-0x001797AC */ set; } // 0x00AED704-0x00AED70C 0x00AED70C-0x00AED714
		public string privateAddress { [CompilerGenerated] /* 0x001797AC-0x001797BC */ get; [CompilerGenerated] /* 0x001797BC-0x001797CC */ set; } // 0x00AED714-0x00AED71C 0x00AED71C-0x00AED724
		public int eloScore { [CompilerGenerated] /* 0x001797CC-0x001797DC */ get; [CompilerGenerated] /* 0x001797DC-0x001797EC */ set; } // 0x00AED724-0x00AED72C 0x00AED72C-0x00AED734
		public bool advertise { [CompilerGenerated] /* 0x001797EC-0x001797FC */ get; [CompilerGenerated] /* 0x001797FC-0x0017980C */ set; } // 0x00AED734-0x00AED73C 0x00AED73C-0x00AED744
		public string password { [CompilerGenerated] /* 0x0017980C-0x0017981C */ get; [CompilerGenerated] /* 0x0017981C-0x0017982C */ set; } // 0x00AED744-0x00AED74C 0x00AED74C-0x00AED754
		public Dictionary<string, long> matchAttributes { [CompilerGenerated] /* 0x0017982C-0x0017983C */ get; } // 0x00AED754-0x00AED75C 
	
		// Constructors
		public CreateMatchRequest(); // 0x00AED658-0x00AED6DC
	
		// Methods
		public override string ToString(); // 0x00AED75C-0x00AEDBC8
	}

	internal class CreateMatchResponse : BasicResponse // TypeDefIndex: 2493
	{
		// Fields
		public string address; // 0x10
		public int port; // 0x14
		public int domain; // 0x18
		public ulong networkId; // 0x20
		public string accessTokenString; // 0x28
		public NodeID nodeId; // 0x2C
		public bool usingRelay; // 0x2E
	
		// Constructors
		public CreateMatchResponse(); // 0x00AEDF00-0x00AEDF10
	
		// Methods
		public override string ToString(); // 0x00AEDF10-0x00AEE310
	}

	internal class JoinMatchRequest : Request // TypeDefIndex: 2494
	{
		// Fields
		[CompilerGenerated] // 0x00178C34-0x00178C68
		[DebuggerBrowsable] // 0x00178C34-0x00178C68
		private NetworkID <networkId>k__BackingField; // 0x20
		[CompilerGenerated] // 0x00178C68-0x00178C9C
		[DebuggerBrowsable] // 0x00178C68-0x00178C9C
		private string <publicAddress>k__BackingField; // 0x28
		[CompilerGenerated] // 0x00178C9C-0x00178CD0
		[DebuggerBrowsable] // 0x00178C9C-0x00178CD0
		private string <privateAddress>k__BackingField; // 0x2C
		[CompilerGenerated] // 0x00178CD0-0x00178D04
		[DebuggerBrowsable] // 0x00178CD0-0x00178D04
		private int <eloScore>k__BackingField; // 0x30
		[CompilerGenerated] // 0x00178D04-0x00178D38
		[DebuggerBrowsable] // 0x00178D04-0x00178D38
		private string <password>k__BackingField; // 0x34
	
		// Properties
		public NetworkID networkId { [CompilerGenerated] /* 0x0017983C-0x0017984C */ get; [CompilerGenerated] /* 0x0017984C-0x0017985C */ set; } // 0x00AEECBC-0x00AEECC4 0x00AEECC4-0x00AEECD4
		public string publicAddress { [CompilerGenerated] /* 0x0017985C-0x0017986C */ get; [CompilerGenerated] /* 0x0017986C-0x0017987C */ set; } // 0x00AEECD4-0x00AEECDC 0x00AEECDC-0x00AEECE4
		public string privateAddress { [CompilerGenerated] /* 0x0017987C-0x0017988C */ get; [CompilerGenerated] /* 0x0017988C-0x0017989C */ set; } // 0x00AEECE4-0x00AEECEC 0x00AEECEC-0x00AEECF4
		public int eloScore { [CompilerGenerated] /* 0x0017989C-0x001798AC */ get; [CompilerGenerated] /* 0x001798AC-0x001798BC */ set; } // 0x00AEECF4-0x00AEECFC 0x00AEECFC-0x00AEED04
		public string password { [CompilerGenerated] /* 0x001798BC-0x001798CC */ get; [CompilerGenerated] /* 0x001798CC-0x001798DC */ set; } // 0x00AEED04-0x00AEED0C 0x00AEED0C-0x00AEED14
	
		// Constructors
		public JoinMatchRequest(); // 0x00AEEC38-0x00AEECBC
	
		// Methods
		public override string ToString(); // 0x00AEED14-0x00AEF09C
	}

	[Serializable]
	internal class JoinMatchResponse : BasicResponse // TypeDefIndex: 2495
	{
		// Fields
		public string address; // 0x10
		public int port; // 0x14
		public int domain; // 0x18
		public ulong networkId; // 0x20
		public string accessTokenString; // 0x28
		public NodeID nodeId; // 0x2C
		public bool usingRelay; // 0x2E
	
		// Constructors
		public JoinMatchResponse(); // 0x00AEF09C-0x00AEF0AC
	
		// Methods
		public override string ToString(); // 0x00AEF0AC-0x00AEF4AC
	}

	internal class DestroyMatchRequest : Request // TypeDefIndex: 2496
	{
		// Fields
		[CompilerGenerated] // 0x00178D38-0x00178D6C
		[DebuggerBrowsable] // 0x00178D38-0x00178D6C
		private NetworkID <networkId>k__BackingField; // 0x20
	
		// Properties
		public NetworkID networkId { [CompilerGenerated] /* 0x001798DC-0x001798EC */ get; [CompilerGenerated] /* 0x001798EC-0x001798FC */ set; } // 0x00AEE558-0x00AEE560 0x00AEE560-0x00AEE570
	
		// Constructors
		public DestroyMatchRequest(); // 0x00AEE4D4-0x00AEE558
	
		// Methods
		public override string ToString(); // 0x00AEE570-0x00AEE754
	}

	internal class DropConnectionRequest : Request // TypeDefIndex: 2497
	{
		// Fields
		[CompilerGenerated] // 0x00178D6C-0x00178DA0
		[DebuggerBrowsable] // 0x00178D6C-0x00178DA0
		private NetworkID <networkId>k__BackingField; // 0x20
		[CompilerGenerated] // 0x00178DA0-0x00178DD4
		[DebuggerBrowsable] // 0x00178DA0-0x00178DD4
		private NodeID <nodeId>k__BackingField; // 0x28
	
		// Properties
		public NetworkID networkId { [CompilerGenerated] /* 0x001798FC-0x0017990C */ get; [CompilerGenerated] /* 0x0017990C-0x0017991C */ set; } // 0x00AEE7D8-0x00AEE7E0 0x00AEE7E0-0x00AEE7F0
		public NodeID nodeId { [CompilerGenerated] /* 0x0017991C-0x0017992C */ get; [CompilerGenerated] /* 0x0017992C-0x0017993C */ set; } // 0x00AEE7F0-0x00AEE7F8 0x00AEE7F8-0x00AEE800
	
		// Constructors
		public DropConnectionRequest(); // 0x00AEE754-0x00AEE7D8
	
		// Methods
		public override string ToString(); // 0x00AEE800-0x00AEEAD0
	}

	[Serializable]
	internal class DropConnectionResponse : Response // TypeDefIndex: 2498
	{
		// Fields
		public ulong networkId; // 0x10
	
		// Constructors
		public DropConnectionResponse(); // 0x00AEEAD0-0x00AEEAD8
	
		// Methods
		public override string ToString(); // 0x00AEEAD8-0x00AEEC38
	}

	internal class ListMatchRequest : Request // TypeDefIndex: 2499
	{
		// Fields
		[CompilerGenerated] // 0x00178DD4-0x00178E08
		[DebuggerBrowsable] // 0x00178DD4-0x00178E08
		private int <pageSize>k__BackingField; // 0x1C
		[CompilerGenerated] // 0x00178E08-0x00178E3C
		[DebuggerBrowsable] // 0x00178E08-0x00178E3C
		private int <pageNum>k__BackingField; // 0x20
		[CompilerGenerated] // 0x00178E3C-0x00178E70
		[DebuggerBrowsable] // 0x00178E3C-0x00178E70
		private string <nameFilter>k__BackingField; // 0x24
		[CompilerGenerated] // 0x00178E70-0x00178EA4
		[DebuggerBrowsable] // 0x00178E70-0x00178EA4
		private bool <filterOutPrivateMatches>k__BackingField; // 0x28
		[CompilerGenerated] // 0x00178EA4-0x00178ED8
		[DebuggerBrowsable] // 0x00178EA4-0x00178ED8
		private int <eloScore>k__BackingField; // 0x2C
		[CompilerGenerated] // 0x00178ED8-0x00178F0C
		[DebuggerBrowsable] // 0x00178ED8-0x00178F0C
		private Dictionary<string, long> <matchAttributeFilterLessThan>k__BackingField; // 0x30
		[CompilerGenerated] // 0x00178F0C-0x00178F40
		[DebuggerBrowsable] // 0x00178F0C-0x00178F40
		private Dictionary<string, long> <matchAttributeFilterEqualTo>k__BackingField; // 0x34
		[CompilerGenerated] // 0x00178F40-0x00178F74
		[DebuggerBrowsable] // 0x00178F40-0x00178F74
		private Dictionary<string, long> <matchAttributeFilterGreaterThan>k__BackingField; // 0x38
	
		// Properties
		public int pageSize { [CompilerGenerated] /* 0x0017993C-0x0017994C */ get; [CompilerGenerated] /* 0x0017994C-0x0017995C */ set; } // 0x00AEF530-0x00AEF538 0x00AEF538-0x00AEF540
		public int pageNum { [CompilerGenerated] /* 0x0017995C-0x0017996C */ get; [CompilerGenerated] /* 0x0017996C-0x0017997C */ set; } // 0x00AEF540-0x00AEF548 0x00AEF548-0x00AEF550
		public string nameFilter { [CompilerGenerated] /* 0x0017997C-0x0017998C */ get; [CompilerGenerated] /* 0x0017998C-0x0017999C */ set; } // 0x00AEF550-0x00AEF558 0x00AEF558-0x00AEF560
		public bool filterOutPrivateMatches { [CompilerGenerated] /* 0x0017999C-0x001799AC */ get; [CompilerGenerated] /* 0x001799AC-0x001799BC */ set; } // 0x00AEF560-0x00AEF568 0x00AEF568-0x00AEF570
		public int eloScore { [CompilerGenerated] /* 0x001799BC-0x001799CC */ get; [CompilerGenerated] /* 0x001799CC-0x001799DC */ set; } // 0x00AEF570-0x00AEF578 0x00AEF578-0x00AEF580
		public Dictionary<string, long> matchAttributeFilterLessThan { [CompilerGenerated] /* 0x001799DC-0x001799EC */ get; } // 0x00AEF580-0x00AEF588 
		public Dictionary<string, long> matchAttributeFilterEqualTo { [CompilerGenerated] /* 0x001799EC-0x001799FC */ get; } // 0x00AEF588-0x00AEF590 
		public Dictionary<string, long> matchAttributeFilterGreaterThan { [CompilerGenerated] /* 0x001799FC-0x00179A0C */ get; } // 0x00AEF590-0x00AEF598 
	
		// Constructors
		public ListMatchRequest(); // 0x00AEF4AC-0x00AEF530
	
		// Methods
		public override string ToString(); // 0x00AEF598-0x00AEFA8C
	}

	[Serializable]
	internal class MatchDirectConnectInfo // TypeDefIndex: 2500
	{
		// Fields
		public NodeID nodeId; // 0x08
		public string publicAddress; // 0x0C
		public string privateAddress; // 0x10
		public HostPriority hostPriority; // 0x14
	
		// Constructors
		public MatchDirectConnectInfo(); // 0x00AF01FC-0x00AF0204
	
		// Methods
		public override string ToString(); // 0x00AF0204-0x00AF0490
	}

	[Serializable]
	internal class MatchDesc // TypeDefIndex: 2501
	{
		// Fields
		public ulong networkId; // 0x08
		public string name; // 0x10
		public int averageEloScore; // 0x14
		public int maxSize; // 0x18
		public int currentSize; // 0x1C
		public bool isPrivate; // 0x20
		public Dictionary<string, long> matchAttributes; // 0x24
		public NodeID hostNodeId; // 0x28
		public List<MatchDirectConnectInfo> directConnectInfos; // 0x2C
	
		// Constructors
		public MatchDesc(); // 0x00AEFCB0-0x00AEFCB8
	
		// Methods
		public override string ToString(); // 0x00AEFCB8-0x00AF01FC
	}

	[Serializable]
	internal class ListMatchResponse : BasicResponse // TypeDefIndex: 2502
	{
		// Fields
		public List<MatchDesc> matches; // 0x10
	
		// Constructors
		public ListMatchResponse(); // 0x00AEFA8C-0x00AEFB18
	
		// Methods
		public override string ToString(); // 0x00AEFB18-0x00AEFCB0
	}

	internal class SetMatchAttributesRequest : Request // TypeDefIndex: 2503
	{
		// Fields
		[CompilerGenerated] // 0x00178F74-0x00178FA8
		[DebuggerBrowsable] // 0x00178F74-0x00178FA8
		private NetworkID <networkId>k__BackingField; // 0x20
		[CompilerGenerated] // 0x00178FA8-0x00178FDC
		[DebuggerBrowsable] // 0x00178FA8-0x00178FDC
		private bool <isListed>k__BackingField; // 0x28
	
		// Properties
		public NetworkID networkId { [CompilerGenerated] /* 0x00179A0C-0x00179A1C */ get; [CompilerGenerated] /* 0x00179A1C-0x00179A2C */ set; } // 0x00AF49E0-0x00AF49E8 0x00AF43FC-0x00AF440C
		public bool isListed { [CompilerGenerated] /* 0x00179A2C-0x00179A3C */ get; [CompilerGenerated] /* 0x00179A3C-0x00179A4C */ set; } // 0x00AF49E8-0x00AF49F0 0x00AF440C-0x00AF4414
	
		// Constructors
		public SetMatchAttributesRequest(); // 0x00AF4378-0x00AF43FC
	
		// Methods
		public override string ToString(); // 0x00AF4BF4-0x00AF4E54
	}
}

namespace UnityEngine.Networking.Types
{
	[System.ComponentModel.DefaultValue] // 0x00178280-0x00178310
	public enum AppID : ulong // TypeDefIndex: 2504
	{
		Invalid = 18446744073709551615
	}

	[System.ComponentModel.DefaultValue] // 0x00178310-0x001783A0
	public enum SourceID : ulong // TypeDefIndex: 2505
	{
		Invalid = 18446744073709551615
	}

	[System.ComponentModel.DefaultValue] // 0x001783A0-0x00178430
	public enum NetworkID : ulong // TypeDefIndex: 2506
	{
		Invalid = 18446744073709551615
	}

	[System.ComponentModel.DefaultValue] // 0x00178430-0x001784BC
	public enum NodeID : ushort // TypeDefIndex: 2507
	{
		Invalid = 0
	}

	[System.ComponentModel.DefaultValue] // 0x001784BC-0x00178548
	public enum HostPriority // TypeDefIndex: 2508
	{
		Invalid = 2147483647
	}

	public class NetworkAccessToken // TypeDefIndex: 2509
	{
		// Fields
		public byte[] array; // 0x08
	
		// Constructors
		public NetworkAccessToken(); // 0x00AF803C-0x00AF80B0
		public NetworkAccessToken(string strArray); // 0x00AF0600-0x00AF0738
	
		// Methods
		public string GetByteString(); // 0x00AF2BF4-0x00AF2C7C
	}
}

namespace UnityEngine.Networking
{
	public class Utility // TypeDefIndex: 2510
	{
		// Fields
		private static Dictionary<NetworkID, NetworkAccessToken> s_dictTokens; // 0x00
	
		// Constructors
		static Utility(); // 0x00AF80B0-0x00AFBD88
	
		// Methods
		public static SourceID GetSourceID(); // 0x00AF1858-0x00AF1898
		public static void SetAccessTokenForNetwork(NetworkID netId, NetworkAccessToken accessToken); // 0x00AF19EC-0x00AF1BBC
		public static NetworkAccessToken GetAccessTokenForNetwork(NetworkID netId); // 0x00AF2AE0-0x00AF2BF4
	}
}

namespace UnityEngine.Networking.Match
{
	[Obsolete] // 0x00178548-0x0017857C
	public class MatchInfo // TypeDefIndex: 2511
	{
		// Fields
		[CompilerGenerated] // 0x00178FDC-0x00179010
		[DebuggerBrowsable] // 0x00178FDC-0x00179010
		private string <address>k__BackingField; // 0x08
		[CompilerGenerated] // 0x00179010-0x00179044
		[DebuggerBrowsable] // 0x00179010-0x00179044
		private int <port>k__BackingField; // 0x0C
		[CompilerGenerated] // 0x00179044-0x00179078
		[DebuggerBrowsable] // 0x00179044-0x00179078
		private int <domain>k__BackingField; // 0x10
		[CompilerGenerated] // 0x00179078-0x001790AC
		[DebuggerBrowsable] // 0x00179078-0x001790AC
		private NetworkID <networkId>k__BackingField; // 0x18
		[CompilerGenerated] // 0x001790AC-0x001790E0
		[DebuggerBrowsable] // 0x001790AC-0x001790E0
		private NetworkAccessToken <accessToken>k__BackingField; // 0x20
		[CompilerGenerated] // 0x001790E0-0x00179114
		[DebuggerBrowsable] // 0x001790E0-0x00179114
		private NodeID <nodeId>k__BackingField; // 0x24
		[CompilerGenerated] // 0x00179114-0x00179148
		[DebuggerBrowsable] // 0x00179114-0x00179148
		private bool <usingRelay>k__BackingField; // 0x26
	
		// Properties
		public string address { [CompilerGenerated] /* 0x00179A4C-0x00179A5C */ get; [CompilerGenerated] /* 0x00179A5C-0x00179A6C */ private set; } // 0x00AF0898-0x00AF08A0 0x00AF05D8-0x00AF05E0
		public int port { [CompilerGenerated] /* 0x00179A6C-0x00179A7C */ get; [CompilerGenerated] /* 0x00179A7C-0x00179A8C */ private set; } // 0x00AF08A0-0x00AF08A8 0x00AF05E0-0x00AF05E8
		public int domain { [CompilerGenerated] /* 0x00179A8C-0x00179A9C */ get; [CompilerGenerated] /* 0x00179A9C-0x00179AAC */ private set; } // 0x00AF08A8-0x00AF08B0 0x00AF05E8-0x00AF05F0
		public NetworkID networkId { [CompilerGenerated] /* 0x00179AAC-0x00179ABC */ get; [CompilerGenerated] /* 0x00179ABC-0x00179ACC */ private set; } // 0x00AF08B0-0x00AF08B8 0x00AF05F0-0x00AF0600
		private NetworkAccessToken accessToken { [CompilerGenerated] /* 0x00179ACC-0x00179ADC */ set; } // 0x00AF0738-0x00AF0740
		public NodeID nodeId { [CompilerGenerated] /* 0x00179ADC-0x00179AEC */ get; [CompilerGenerated] /* 0x00179AEC-0x00179AFC */ private set; } // 0x00AF08B8-0x00AF08C0 0x00AF0740-0x00AF0748
		public bool usingRelay { [CompilerGenerated] /* 0x00179AFC-0x00179B0C */ get; [CompilerGenerated] /* 0x00179B0C-0x00179B1C */ private set; } // 0x00AF08C0-0x00AF08C8 0x00AF0748-0x00AF0750
	
		// Constructors
		internal MatchInfo(CreateMatchResponse matchResponse); // 0x00AF0490-0x00AF05D8
		internal MatchInfo(JoinMatchResponse matchResponse); // 0x00AF0750-0x00AF0898
	
		// Methods
		public override string ToString(); // 0x00AF08C8-0x00AF0B8C
	}

	[Obsolete] // 0x0017857C-0x001785B0
	public class MatchInfoSnapshot // TypeDefIndex: 2512
	{
		// Fields
		[CompilerGenerated] // 0x00179148-0x0017917C
		[DebuggerBrowsable] // 0x00179148-0x0017917C
		private NetworkID <networkId>k__BackingField; // 0x08
		[CompilerGenerated] // 0x0017917C-0x001791B0
		[DebuggerBrowsable] // 0x0017917C-0x001791B0
		private NodeID <hostNodeId>k__BackingField; // 0x10
		[CompilerGenerated] // 0x001791B0-0x001791E4
		[DebuggerBrowsable] // 0x001791B0-0x001791E4
		private string <name>k__BackingField; // 0x14
		[CompilerGenerated] // 0x001791E4-0x00179218
		[DebuggerBrowsable] // 0x001791E4-0x00179218
		private int <averageEloScore>k__BackingField; // 0x18
		[CompilerGenerated] // 0x00179218-0x0017924C
		[DebuggerBrowsable] // 0x00179218-0x0017924C
		private int <maxSize>k__BackingField; // 0x1C
		[CompilerGenerated] // 0x0017924C-0x00179280
		[DebuggerBrowsable] // 0x0017924C-0x00179280
		private int <currentSize>k__BackingField; // 0x20
		[CompilerGenerated] // 0x00179280-0x001792B4
		[DebuggerBrowsable] // 0x00179280-0x001792B4
		private bool <isPrivate>k__BackingField; // 0x24
		[CompilerGenerated] // 0x001792B4-0x001792E8
		[DebuggerBrowsable] // 0x001792B4-0x001792E8
		private Dictionary<string, long> <matchAttributes>k__BackingField; // 0x28
		[CompilerGenerated] // 0x001792E8-0x0017931C
		[DebuggerBrowsable] // 0x001792E8-0x0017931C
		private List<MatchInfoDirectConnectSnapshot> <directConnectInfos>k__BackingField; // 0x2C
	
		// Properties
		public NetworkID networkId { [CompilerGenerated] /* 0x00179B1C-0x00179B2C */ get; [CompilerGenerated] /* 0x00179B2C-0x00179B3C */ private set; } // 0x00AF0F50-0x00AF0F58 0x00AF0E6C-0x00AF0E7C
		private NodeID hostNodeId { [CompilerGenerated] /* 0x00179B3C-0x00179B4C */ set; } // 0x00AF0E7C-0x00AF0E84
		public string name { [CompilerGenerated] /* 0x00179B4C-0x00179B5C */ get; [CompilerGenerated] /* 0x00179B5C-0x00179B6C */ private set; } // 0x00AF0F58-0x00AF0F60 0x00AF0E84-0x00AF0E8C
		private int averageEloScore { [CompilerGenerated] /* 0x00179B6C-0x00179B7C */ set; } // 0x00AF0E8C-0x00AF0E94
		private int maxSize { [CompilerGenerated] /* 0x00179B7C-0x00179B8C */ set; } // 0x00AF0E94-0x00AF0E9C
		private int currentSize { [CompilerGenerated] /* 0x00179B8C-0x00179B9C */ set; } // 0x00AF0E9C-0x00AF0EA4
		private bool isPrivate { [CompilerGenerated] /* 0x00179B9C-0x00179BAC */ set; } // 0x00AF0EA4-0x00AF0EAC
		private Dictionary<string, long> matchAttributes { [CompilerGenerated] /* 0x00179BAC-0x00179BBC */ set; } // 0x00AF0EAC-0x00AF0EB4
		public List<MatchInfoDirectConnectSnapshot> directConnectInfos { [CompilerGenerated] /* 0x00179BBC-0x00179BCC */ get; [CompilerGenerated] /* 0x00179BCC-0x00179BDC */ private set; } // 0x00AF0EBC-0x00AF0EC4 0x00AF0EB4-0x00AF0EBC
	
		// Nested types
		public class MatchInfoDirectConnectSnapshot // TypeDefIndex: 2513
		{
			// Fields
			[CompilerGenerated] // 0x0017931C-0x00179350
			[DebuggerBrowsable] // 0x0017931C-0x00179350
			private NodeID <nodeId>k__BackingField; // 0x08
			[CompilerGenerated] // 0x00179350-0x00179384
			[DebuggerBrowsable] // 0x00179350-0x00179384
			private string <publicAddress>k__BackingField; // 0x0C
			[CompilerGenerated] // 0x00179384-0x001793B8
			[DebuggerBrowsable] // 0x00179384-0x001793B8
			private string <privateAddress>k__BackingField; // 0x10
			[CompilerGenerated] // 0x001793B8-0x001793EC
			[DebuggerBrowsable] // 0x001793B8-0x001793EC
			private HostPriority <hostPriority>k__BackingField; // 0x14
	
			// Properties
			private NodeID nodeId { [CompilerGenerated] /* 0x00179BDC-0x00179BEC */ set; } // 0x00AF0F60-0x00AF0F68
			private string publicAddress { [CompilerGenerated] /* 0x00179BEC-0x00179BFC */ set; } // 0x00AF0F68-0x00AF0F70
			private string privateAddress { [CompilerGenerated] /* 0x00179BFC-0x00179C0C */ set; } // 0x00AF0F70-0x00AF0F78
			private HostPriority hostPriority { [CompilerGenerated] /* 0x00179C0C-0x00179C1C */ set; } // 0x00AF0F78-0x00AF0F80
	
			// Constructors
			internal MatchInfoDirectConnectSnapshot(MatchDirectConnectInfo matchDirectConnectInfo); // 0x00AF0EC4-0x00AF0F50
		}
	
		// Constructors
		internal MatchInfoSnapshot(MatchDesc matchDesc); // 0x00AF0B8C-0x00AF0E6C
	}

	[Obsolete] // 0x001785B0-0x001785E4
	public class NetworkMatch : MonoBehaviour // TypeDefIndex: 2514
	{
		// Fields
		private Uri m_BaseUri; // 0x0C
	
		// Properties
		public Uri baseUri { get; set; } // 0x00AF1010-0x00AF1018 0x00AF1018-0x00AF1020
	
		// Nested types
		public delegate void BasicResponseDelegate(bool success, string extendedInfo); // TypeDefIndex: 2515; 0x00AF2CE4-0x00AF3168
	
		public delegate void DataResponseDelegate<T>(bool success, string extendedInfo, T responseData); // TypeDefIndex: 2516; 0x00000000-0x00000000
	
		private delegate void InternalResponseDelegate<T, U>(T response, U userCallback); // TypeDefIndex: 2517; 0x00000000-0x00000000
	
		[CompilerGenerated] // 0x001785E4-0x001785F4
		private sealed class <ProcessMatchResponse>c__Iterator0<JSONRESPONSE, USERRESPONSEDELEGATETYPE> : IEnumerator<object> // TypeDefIndex: 2518
			where JSONRESPONSE : Response, new()
		{
			// Fields
			internal UnityWebRequest client;
			internal JSONRESPONSE <jsonInterface>__0;
			internal InternalResponseDelegate<JSONRESPONSE, USERRESPONSEDELEGATETYPE> internalCallback;
			internal USERRESPONSEDELEGATETYPE userCallback;
			internal object $current;
			internal bool $disposing;
			internal int $PC;
	
			// Properties
			object IEnumerator<object>.Current { [DebuggerHidden] /* 0x00179C8C-0x00179C9C */ get; }
			object IEnumerator.Current { [DebuggerHidden] /* 0x00179C9C-0x00179CAC */ get; }
	
			// Constructors
			[DebuggerHidden] // 0x00179C7C-0x00179C8C
			public <ProcessMatchResponse>c__Iterator0();
	
			// Methods
			public bool MoveNext();
			[DebuggerHidden] // 0x00179CAC-0x00179CBC
			public void Dispose();
			[DebuggerHidden] // 0x00179CBC-0x00179CCC
			public void Reset();
		}
	
		// Constructors
		public NetworkMatch(); // 0x00AF0F80-0x00AF1010
	
		// Methods
		[EditorBrowsable] // 0x00179C1C-0x00179C6C
		[Obsolete] // 0x00179C1C-0x00179C6C
		public void SetProgramAppID(AppID programAppID); // 0x00AF1020-0x00AF1024
		public Coroutine CreateMatch(string matchName, uint matchSize, bool matchAdvertise, string matchPassword, string publicClientAddress, string privateClientAddress, int eloScoreForMatch, int requestDomain, DataResponseDelegate<MatchInfo> callback); // 0x00AF1024-0x00AF11E4
		internal Coroutine CreateMatch(CreateMatchRequest req, DataResponseDelegate<MatchInfo> callback); // 0x00AF11EC-0x00AF1858
		internal virtual void OnMatchCreate(CreateMatchResponse response, DataResponseDelegate<MatchInfo> userCallback); // 0x00AF18A0-0x00AF19EC
		public Coroutine JoinMatch(NetworkID netId, string matchPassword, string publicClientAddress, string privateClientAddress, int eloScoreForClient, int requestDomain, DataResponseDelegate<MatchInfo> callback); // 0x00AF1BBC-0x00AF1CF0
		internal Coroutine JoinMatch(JoinMatchRequest req, DataResponseDelegate<MatchInfo> callback); // 0x00AF1CF0-0x00AF2344
		internal void OnMatchJoined(JoinMatchResponse response, DataResponseDelegate<MatchInfo> userCallback); // 0x00AF2344-0x00AF2490
		public Coroutine DestroyMatch(NetworkID netId, int requestDomain, BasicResponseDelegate callback); // 0x00AF2490-0x00AF254C
		internal Coroutine DestroyMatch(DestroyMatchRequest req, BasicResponseDelegate callback); // 0x00AF254C-0x00AF2AE0
		internal void OnMatchDestroyed(BasicResponse response, BasicResponseDelegate userCallback); // 0x00AF2C7C-0x00AF2CE4
		public Coroutine DropConnection(NetworkID netId, NodeID dropNodeId, int requestDomain, BasicResponseDelegate callback); // 0x00AF3168-0x00AF3244
		internal Coroutine DropConnection(DropConnectionRequest req, BasicResponseDelegate callback); // 0x00AF3244-0x00AF3864
		internal void OnDropConnection(DropConnectionResponse response, BasicResponseDelegate userCallback); // 0x00AF3864-0x00AF38CC
		public Coroutine ListMatches(int startPageNumber, int resultPageSize, string matchNameFilter, bool filterOutPrivateMatchesFromResults, int eloScoreTarget, int requestDomain, DataResponseDelegate<List<MatchInfoSnapshot>> callback); // 0x00AF38CC-0x00AF3A4C
		internal Coroutine ListMatches(ListMatchRequest req, DataResponseDelegate<List<MatchInfoSnapshot>> callback); // 0x00AF3A4C-0x00AF4040
		internal void OnMatchList(ListMatchResponse response, DataResponseDelegate<List<MatchInfoSnapshot>> userCallback); // 0x00AF4040-0x00AF429C
		public Coroutine SetMatchAttributes(NetworkID networkId, bool isListed, int requestDomain, BasicResponseDelegate callback); // 0x00AF429C-0x00AF4378
		internal Coroutine SetMatchAttributes(SetMatchAttributesRequest req, BasicResponseDelegate callback); // 0x00AF4414-0x00AF49E0
		internal void OnSetMatchAttributes(BasicResponse response, BasicResponseDelegate userCallback); // 0x00AF49F0-0x00AF4A90
		[DebuggerHidden] // 0x00179C6C-0x00179C7C
		private IEnumerator ProcessMatchResponse<JSONRESPONSE, USERRESPONSEDELEGATETYPE>(UnityWebRequest client, InternalResponseDelegate<JSONRESPONSE, USERRESPONSEDELEGATETYPE> internalCallback, USERRESPONSEDELEGATETYPE userCallback)
			where JSONRESPONSE : Response, new();
	}
}

namespace UnityEngine.Networking
{
	[NativeConditional] // 0x001785F4-0x001786D0
	[NativeHeader] // 0x001785F4-0x001786D0
	[NativeHeader] // 0x001785F4-0x001786D0
	[NativeHeader] // 0x001785F4-0x001786D0
	[Obsolete] // 0x001785F4-0x001786D0
	public sealed class NetworkTransport // TypeDefIndex: 2519
	{
		// Fields
		private static int s_nextSceneId; // 0x00
	
		// Properties
		public static bool IsStarted { get; } // 0x00AF71D4-0x00AF724C 
	
		// Constructors
		static NetworkTransport(); // 0x00AF7FD4-0x00AF803C
	
		// Methods
		internal static bool DoesEndPointUsePlatformProtocols(EndPoint endPoint); // 0x00AF4E54-0x00AF4F8C
		public static int ConnectEndPoint(int hostId, EndPoint endPoint, int exceptionConnectionId, out byte error); // 0x00AF4F8C-0x00AF59D0
		public static void Init(); // 0x00AF5A60-0x00AF5AD8
		public static void Init(GlobalConfig config); // 0x00AF5B78-0x00AF5CA8
		[FreeFunction] // 0x00179CCC-0x00179D18
		private static void InitializeClass(); // 0x00AF5AD8-0x00AF5B78
		[FreeFunction] // 0x00179D18-0x00179D6C
		private static void InitializeClassWithConfig(GlobalConfigInternal config); // 0x00AF5D98-0x00AF5E10
		public static int AddHostWithSimulator(HostTopology topology, int minTimeout, int maxTimeout, int port, string ip); // 0x00AF5E10-0x00AF5F40
		public static int AddHostWithSimulator(HostTopology topology, int minTimeout, int maxTimeout, int port); // 0x00AF6228-0x00AF62D0
		public static int AddHost(HostTopology topology, int port, string ip); // 0x00AF62D0-0x00AF6370
		[FreeFunction] // 0x00179D6C-0x00179DB4
		private static int AddHostInternal(HostTopologyInternal topologyInt, string ip, int port, int minTimeout, int maxTimeout); // 0x00AF6198-0x00AF6228
		public static int AddWebsocketHost(HostTopology topology, int port, string ip); // 0x00AF6370-0x00AF6560
		[FreeFunction] // 0x00179DB4-0x00179E00
		private static int AddWsHostInternal(HostTopologyInternal topologyInt, string ip, int port); // 0x00AF68F0-0x00AF6978
		private static bool IsPortOpen(string ip, int port); // 0x00AF6560-0x00AF68F0
		public static void ConnectAsNetworkHost(int hostId, string address, int port, NetworkID network, SourceID source, NodeID node, out byte error); // 0x00AF6978-0x00AF6A44
		[FreeFunction] // 0x00179E00-0x00179E58
		private static void ConnectAsNetworkHostInternal(int hostId, string address, int port, ulong network, ulong source, ushort node, out byte error); // 0x00AF6A44-0x00AF6B08
		public static NetworkEventType ReceiveRelayEventFromHost(int hostId, out byte error); // 0x00AF6B08-0x00AF6B90
		[FreeFunction] // 0x00179E58-0x00179EAC
		private static int ReceiveRelayEventFromHostInternal(int hostId, out byte error); // 0x00AF6B90-0x00AF6C10
		public static int ConnectToNetworkPeer(int hostId, string address, int port, int exceptionConnectionId, int relaySlotId, NetworkID network, SourceID source, NodeID node, int bytesPerSec, float bucketSizeFactor, out byte error); // 0x00AF6C10-0x00AF6D30
		public static int ConnectToNetworkPeer(int hostId, string address, int port, int exceptionConnectionId, int relaySlotId, NetworkID network, SourceID source, NodeID node, out byte error); // 0x00AF6E44-0x00AF6F50
		[FreeFunction] // 0x00179EAC-0x00179F04
		private static int ConnectToNetworkPeerInternal(int hostId, string address, int port, int exceptionConnectionId, int relaySlotId, ulong network, ulong source, ushort node, int bytesPerSec, float bucketSizeFactor, out byte error); // 0x00AF6D30-0x00AF6E44
		[FreeFunction] // 0x00179F04-0x00179F58
		public static string GetConnectionInfo(int hostId, int connectionId, out int port, out ulong network, out ushort dstNode, out byte error); // 0x00AF6F50-0x00AF6FE0
		public static void GetConnectionInfo(int hostId, int connectionId, out string address, out int port, out NetworkID network, out NodeID dstNode, out byte error); // 0x00AF6FE0-0x00AF70BC
		[FreeFunction] // 0x00179F58-0x00179FAC
		private static int GetMaxPacketSize(); // 0x00AF70BC-0x00AF715C
		[FreeFunction] // 0x00179FAC-0x00179FF8
		public static bool RemoveHost(int hostId); // 0x00AF715C-0x00AF71D4
		[FreeFunction] // 0x00179FF8-0x0017A03C
		private static bool IsStartedInternal(); // 0x00AF724C-0x00AF72F0
		[FreeFunction] // 0x0017A03C-0x0017A084
		public static int Connect(int hostId, string address, int port, int exeptionConnectionId, out byte error); // 0x00AF72F0-0x00AF7380
		[FreeFunction] // 0x0017A084-0x0017A0DC
		private static int ConnectWithSimulatorInternal(int hostId, string address, int port, int exeptionConnectionId, out byte error, ConnectionSimulatorConfigInternal conf); // 0x00AF7380-0x00AF7410
		public static int ConnectWithSimulator(int hostId, string address, int port, int exeptionConnectionId, out byte error, ConnectionSimulatorConfig conf); // 0x00AF7410-0x00AF74E0
		[FreeFunction] // 0x0017A0DC-0x0017A128
		public static bool Disconnect(int hostId, int connectionId, out byte error); // 0x00AF74E0-0x00AF7568
		[FreeFunction] // 0x0017A128-0x0017A178
		private static int Internal_ConnectEndPoint(int hostId, out byte[] sockAddrStorage, int sockAddrStorageLen, int exceptionConnectionId, out byte error); // 0x00AF59D0-0x00AF5A60
		public static bool Send(int hostId, int connectionId, int channelId, byte[] buffer, int size, out byte error); // 0x00AF7568-0x00AF7678
		[FreeFunction] // 0x0017A178-0x0017A1C0
		private static bool SendWrapper(int hostId, int connectionId, int channelId, out byte[] buffer, int size, out byte error); // 0x00AF7678-0x00AF7708
		public static NetworkEventType ReceiveFromHost(int hostId, out int connectionId, out int channelId, byte[] buffer, int bufferSize, out int receivedSize, out byte error); // 0x00AF7708-0x00AF77C0
		[FreeFunction] // 0x0017A1C0-0x0017A210
		private static int PopDataFromHost(int hostId, out int connectionId, out int channelId, out byte[] buffer, int bufferSize, out int receivedSize, out byte error); // 0x00AF77C0-0x00AF7850
		[FreeFunction] // 0x0017A210-0x0017A280
		[NativeThrows] // 0x0017A210-0x0017A280
		private static void SetNetworkEventAvailableCallback(Action<int> callback); // 0x00AF5CA8-0x00AF5D20
		[FreeFunction] // 0x0017A280-0x0017A2F0
		[NativeThrows] // 0x0017A280-0x0017A2F0
		private static void SetConnectionReadyForSendCallback(Action<int, int> callback); // 0x00AF5D20-0x00AF5D98
		[FreeFunction] // 0x0017A2F0-0x0017A350
		private static bool StartBroadcastDiscoveryWithData(int hostId, int broadcastPort, int key, int version, int subversion, out byte[] buffer, int size, int timeout, out byte error); // 0x00AF7850-0x00AF78E0
		[FreeFunction] // 0x0017A350-0x0017A3B4
		private static bool StartBroadcastDiscoveryWithoutData(int hostId, int broadcastPort, int key, int version, int subversion, int timeout, out byte error); // 0x00AF78E0-0x00AF7970
		public static bool StartBroadcastDiscovery(int hostId, int broadcastPort, int key, int version, int subversion, byte[] buffer, int size, int timeout, out byte error); // 0x00AF7970-0x00AF7C78
		[FreeFunction] // 0x0017A3B4-0x0017A40C
		public static void StopBroadcastDiscovery(); // 0x00AF7C78-0x00AF7CEC
		[FreeFunction] // 0x0017A40C-0x0017A464
		public static void SetBroadcastCredentials(int hostId, int key, int version, int subversion, out byte error); // 0x00AF7CEC-0x00AF7D7C
		[FreeFunction] // 0x0017A464-0x0017A4C8
		public static string GetBroadcastConnectionInfo(int hostId, out int port, out byte error); // 0x00AF7D7C-0x00AF7E04
		public static void GetBroadcastConnectionInfo(int hostId, out string address, out int port, out byte error); // 0x00AF7E04-0x00AF7E9C
		public static void GetBroadcastConnectionMessage(int hostId, byte[] buffer, int bufferSize, out int receivedSize, out byte error); // 0x00AF7E9C-0x00AF7F44
		[FreeFunction] // 0x0017A4C8-0x0017A528
		private static void GetBroadcastConnectionMessageInternal(int hostId, out byte[] buffer, int bufferSize, out int receivedSize, out byte error); // 0x00AF7F44-0x00AF7FD4
		private static void CheckTopology(HostTopology topology); // 0x00AF5F40-0x00AF6198
	}

	public enum NetworkEventType // TypeDefIndex: 2520
	{
		DataEvent = 0,
		ConnectEvent = 1,
		DisconnectEvent = 2,
		Nothing = 3,
		BroadcastEvent = 4
	}

	public enum QosType // TypeDefIndex: 2521
	{
		Unreliable = 0,
		UnreliableFragmented = 1,
		UnreliableSequenced = 2,
		Reliable = 3,
		ReliableFragmented = 4,
		ReliableSequenced = 5,
		StateUpdate = 6,
		ReliableStateUpdate = 7,
		AllCostDelivery = 8,
		UnreliableFragmentedSequenced = 9,
		ReliableFragmentedSequenced = 10
	}

	public enum NetworkError // TypeDefIndex: 2522
	{
		Ok = 0,
		WrongHost = 1,
		WrongConnection = 2,
		WrongChannel = 3,
		NoResources = 4,
		BadMessage = 5,
		Timeout = 6,
		MessageToLong = 7,
		WrongOperation = 8,
		VersionMismatch = 9,
		CRCMismatch = 10,
		DNSFailure = 11,
		UsageError = 12
	}

	public enum ReactorModel // TypeDefIndex: 2523
	{
		SelectReactor = 0,
		FixRateReactor = 1
	}

	public enum ConnectionAcksType // TypeDefIndex: 2524
	{
		Acks32 = 1,
		Acks64 = 2,
		Acks96 = 3,
		Acks128 = 4
	}

	[Serializable]
	[Obsolete] // 0x001786D0-0x00178704
	public class ChannelQOS // TypeDefIndex: 2525
	{
		// Fields
		[SerializeField] // 0x001793EC-0x001793FC
		internal QosType m_Type; // 0x08
		[SerializeField] // 0x001793FC-0x0017940C
		internal bool m_BelongsSharedOrderChannel; // 0x0C
	
		// Properties
		public QosType QOS { get; } // 0x00AE96D8-0x00AE96E0 
	
		// Constructors
		public ChannelQOS(QosType value); // 0x00AE95C4-0x00AE95EC
		public ChannelQOS(); // 0x00AE95EC-0x00AE9610
		public ChannelQOS(ChannelQOS channel); // 0x00AE9610-0x00AE96D8
	}

	[Serializable]
	[Obsolete] // 0x00178704-0x00178738
	public class ConnectionConfig // TypeDefIndex: 2526
	{
		// Fields
		private const int g_MinPacketSize = 128; // Metadata: 0x0021B08B
		[SerializeField] // 0x0017940C-0x0017941C
		private ushort m_PacketSize; // 0x08
		[SerializeField] // 0x0017941C-0x0017942C
		private ushort m_FragmentSize; // 0x0A
		[SerializeField] // 0x0017942C-0x0017943C
		private uint m_ResendTimeout; // 0x0C
		[SerializeField] // 0x0017943C-0x0017944C
		private uint m_DisconnectTimeout; // 0x10
		[SerializeField] // 0x0017944C-0x0017945C
		private uint m_ConnectTimeout; // 0x14
		[SerializeField] // 0x0017945C-0x0017946C
		private uint m_MinUpdateTimeout; // 0x18
		[SerializeField] // 0x0017946C-0x0017947C
		private uint m_PingTimeout; // 0x1C
		[SerializeField] // 0x0017947C-0x0017948C
		private uint m_ReducedPingTimeout; // 0x20
		[SerializeField] // 0x0017948C-0x0017949C
		private uint m_AllCostTimeout; // 0x24
		[SerializeField] // 0x0017949C-0x001794AC
		private byte m_NetworkDropThreshold; // 0x28
		[SerializeField] // 0x001794AC-0x001794BC
		private byte m_OverflowDropThreshold; // 0x29
		[SerializeField] // 0x001794BC-0x001794CC
		private byte m_MaxConnectionAttempt; // 0x2A
		[SerializeField] // 0x001794CC-0x001794DC
		private uint m_AckDelay; // 0x2C
		[SerializeField] // 0x001794DC-0x001794EC
		private uint m_SendDelay; // 0x30
		[SerializeField] // 0x001794EC-0x001794FC
		private ushort m_MaxCombinedReliableMessageSize; // 0x34
		[SerializeField] // 0x001794FC-0x0017950C
		private ushort m_MaxCombinedReliableMessageCount; // 0x36
		[SerializeField] // 0x0017950C-0x0017951C
		private ushort m_MaxSentMessageQueueSize; // 0x38
		[SerializeField] // 0x0017951C-0x0017952C
		private ConnectionAcksType m_AcksType; // 0x3C
		[SerializeField] // 0x0017952C-0x0017953C
		private bool m_UsePlatformSpecificProtocols; // 0x40
		[SerializeField] // 0x0017953C-0x0017954C
		private uint m_InitialBandwidth; // 0x44
		[SerializeField] // 0x0017954C-0x0017955C
		private float m_BandwidthPeakFactor; // 0x48
		[SerializeField] // 0x0017955C-0x0017956C
		private ushort m_WebSocketReceiveBufferMaxSize; // 0x4C
		[SerializeField] // 0x0017956C-0x0017957C
		private uint m_UdpSocketReceiveBufferMaxSize; // 0x50
		[SerializeField] // 0x0017957C-0x0017958C
		private string m_SSLCertFilePath; // 0x54
		[SerializeField] // 0x0017958C-0x0017959C
		private string m_SSLPrivateKeyFilePath; // 0x58
		[SerializeField] // 0x0017959C-0x001795AC
		private string m_SSLCAFilePath; // 0x5C
		[SerializeField] // 0x001795AC-0x001795BC
		internal List<ChannelQOS> m_Channels; // 0x60
		[SerializeField] // 0x001795BC-0x001795CC
		internal List<List<byte>> m_SharedOrderChannels; // 0x64
	
		// Properties
		public ushort PacketSize { get; } // 0x00AE9ED4-0x00AE9EDC 
		public ushort FragmentSize { get; } // 0x00AE9EDC-0x00AE9EE4 
		public uint ResendTimeout { get; } // 0x00AE9EE4-0x00AE9EEC 
		public uint DisconnectTimeout { get; } // 0x00AE9EEC-0x00AE9EF4 
		public uint ConnectTimeout { get; } // 0x00AE9EF4-0x00AE9EFC 
		public uint MinUpdateTimeout { get; set; } // 0x00AE9EFC-0x00AE9F04 0x00AE9F04-0x00AE9FB4
		public uint PingTimeout { get; } // 0x00AE9FB4-0x00AE9FBC 
		public uint ReducedPingTimeout { get; } // 0x00AE9FBC-0x00AE9FC4 
		public uint AllCostTimeout { get; } // 0x00AE9FC4-0x00AE9FCC 
		public byte NetworkDropThreshold { get; } // 0x00AE9FCC-0x00AE9FD4 
		public byte OverflowDropThreshold { get; } // 0x00AE9FD4-0x00AE9FDC 
		public byte MaxConnectionAttempt { get; } // 0x00AE9FDC-0x00AE9FE4 
		public uint AckDelay { get; } // 0x00AE9FE4-0x00AE9FEC 
		public uint SendDelay { get; } // 0x00AE9FEC-0x00AE9FF4 
		public ushort MaxCombinedReliableMessageSize { get; } // 0x00AE9CE0-0x00AE9CE8 
		public ushort MaxCombinedReliableMessageCount { get; } // 0x00AE9FF4-0x00AE9FFC 
		public ushort MaxSentMessageQueueSize { get; } // 0x00AE9FFC-0x00AEA004 
		public ConnectionAcksType AcksType { get; } // 0x00AEA004-0x00AEA00C 
		public bool UsePlatformSpecificProtocols { get; set; } // 0x00AEA00C-0x00AEA014 0x00AEA014-0x00AEA0D8
		public uint InitialBandwidth { get; } // 0x00AEA0D8-0x00AEA0E0 
		public float BandwidthPeakFactor { get; } // 0x00AEA0E0-0x00AEA0E8 
		public ushort WebSocketReceiveBufferMaxSize { get; } // 0x00AEA0E8-0x00AEA0F0 
		public uint UdpSocketReceiveBufferMaxSize { get; } // 0x00AEA0F0-0x00AEA0F8 
		public string SSLCertFilePath { get; } // 0x00AEA0F8-0x00AEA100 
		public string SSLPrivateKeyFilePath { get; } // 0x00AEA100-0x00AEA108 
		public string SSLCAFilePath { get; } // 0x00AEA108-0x00AEA110 
		public int ChannelCount { get; } // 0x00AEA110-0x00AEA188 
		public int SharedOrderChannelCount { get; } // 0x00AEA188-0x00AEA200 
		public List<ChannelQOS> Channels { get; } // 0x00AEA6F8-0x00AEA71C 
	
		// Constructors
		public ConnectionConfig(); // 0x00AE96E0-0x00AE983C
		public ConnectionConfig(ConnectionConfig config); // 0x00AE983C-0x00AE9CE0
	
		// Methods
		public static void Validate(ConnectionConfig config); // 0x00AE9CE8-0x00AE9ED4
		public byte AddChannel(QosType value); // 0x00AEA200-0x00AEA49C
		public QosType GetChannel(byte idx); // 0x00AEA49C-0x00AEA5C0
		public IList<byte> GetSharedOrderChannels(byte idx); // 0x00AEA5C0-0x00AEA6F8
	}

	[Serializable]
	[Obsolete] // 0x00178738-0x0017876C
	public class HostTopology // TypeDefIndex: 2527
	{
		// Fields
		[SerializeField] // 0x001795CC-0x001795DC
		private ConnectionConfig m_DefConfig; // 0x08
		[SerializeField] // 0x001795DC-0x001795EC
		private int m_MaxDefConnections; // 0x0C
		[SerializeField] // 0x001795EC-0x001795FC
		private List<ConnectionConfig> m_SpecialConnections; // 0x10
		[SerializeField] // 0x001795FC-0x0017960C
		private ushort m_ReceivedMessagePoolSize; // 0x14
		[SerializeField] // 0x0017960C-0x0017961C
		private ushort m_SentMessagePoolSize; // 0x16
		[SerializeField] // 0x0017961C-0x0017962C
		private float m_MessagePoolSizeGrowthFactor; // 0x18
	
		// Properties
		public ConnectionConfig DefaultConfig { get; } // 0x00AECEC0-0x00AECEC8 
		public int MaxDefaultConnections { get; } // 0x00AECEC8-0x00AECED0 
		public int SpecialConnectionConfigsCount { get; } // 0x00AECED0-0x00AECF48 
		public List<ConnectionConfig> SpecialConnectionConfigs { get; } // 0x00AECF48-0x00AECF50 
		public ushort ReceivedMessagePoolSize { get; } // 0x00AED064-0x00AED06C 
		public ushort SentMessagePoolSize { get; } // 0x00AED06C-0x00AED074 
		public float MessagePoolSizeGrowthFactor { get; } // 0x00AED074-0x00AED07C 
	
		// Constructors
		public HostTopology(ConnectionConfig defaultConfig, int maxDefaultConnections); // 0x00AECC14-0x00AECE14
		private HostTopology(); // 0x00AECE14-0x00AECEC0
	
		// Methods
		public ConnectionConfig GetSpecialConnectionConfig(int i); // 0x00AECF50-0x00AED064
	}

	[Serializable]
	[Obsolete] // 0x0017876C-0x001787A0
	public class GlobalConfig // TypeDefIndex: 2528
	{
		// Fields
		private const uint g_MaxTimerTimeout = 12000; // Metadata: 0x0021B08F
		private const uint g_MaxNetSimulatorTimeout = 12000; // Metadata: 0x0021B093
		private const ushort g_MaxHosts = 128; // Metadata: 0x0021B097
		[SerializeField] // 0x0017962C-0x0017963C
		private uint m_ThreadAwakeTimeout; // 0x08
		[SerializeField] // 0x0017963C-0x0017964C
		private ReactorModel m_ReactorModel; // 0x0C
		[SerializeField] // 0x0017964C-0x0017965C
		private ushort m_ReactorMaximumReceivedMessages; // 0x10
		[SerializeField] // 0x0017965C-0x0017966C
		private ushort m_ReactorMaximumSentMessages; // 0x12
		[SerializeField] // 0x0017966C-0x0017967C
		private ushort m_MaxPacketSize; // 0x14
		[SerializeField] // 0x0017967C-0x0017968C
		private ushort m_MaxHosts; // 0x16
		[SerializeField] // 0x0017968C-0x0017969C
		private byte m_ThreadPoolSize; // 0x18
		[SerializeField] // 0x0017969C-0x001796AC
		private uint m_MinTimerTimeout; // 0x1C
		[SerializeField] // 0x001796AC-0x001796BC
		private uint m_MaxTimerTimeout; // 0x20
		[SerializeField] // 0x001796BC-0x001796CC
		private uint m_MinNetSimulatorTimeout; // 0x24
		[SerializeField] // 0x001796CC-0x001796DC
		private uint m_MaxNetSimulatorTimeout; // 0x28
		[SerializeField] // 0x001796DC-0x001796EC
		private Action<int, int> m_ConnectionReadyForSend; // 0x2C
		[SerializeField] // 0x001796EC-0x001796FC
		private Action<int> m_NetworkEventAvailable; // 0x30
	
		// Properties
		public uint ThreadAwakeTimeout { get; set; } // 0x00AEC118-0x00AEC120 0x00AEC120-0x00AEC1D0
		public ReactorModel ReactorModel { get; } // 0x00AEC1D0-0x00AEC1D8 
		public ushort ReactorMaximumReceivedMessages { get; } // 0x00AEC1D8-0x00AEC1E0 
		public ushort ReactorMaximumSentMessages { get; } // 0x00AEC1E0-0x00AEC1E8 
		public ushort MaxPacketSize { get; } // 0x00AEC1E8-0x00AEC1F0 
		public ushort MaxHosts { get; } // 0x00AEC1F0-0x00AEC1F8 
		public byte ThreadPoolSize { get; } // 0x00AEC1F8-0x00AEC200 
		public uint MinTimerTimeout { get; } // 0x00AEC200-0x00AEC208 
		public uint MaxTimerTimeout { get; } // 0x00AEC208-0x00AEC210 
		public uint MinNetSimulatorTimeout { get; } // 0x00AEC210-0x00AEC218 
		public uint MaxNetSimulatorTimeout { get; } // 0x00AEC218-0x00AEC220 
		public Action<int> NetworkEventAvailable { get; } // 0x00AEC220-0x00AEC228 
		public Action<int, int> ConnectionReadyForSend { get; } // 0x00AEC228-0x00AEC230 
	
		// Constructors
		public GlobalConfig(); // 0x00AEC0A8-0x00AEC118
	}

	[Obsolete] // 0x001787A0-0x001787D4
	public class ConnectionSimulatorConfig : IDisposable // TypeDefIndex: 2529
	{
		// Fields
		internal int m_OutMinDelay; // 0x08
		internal int m_OutAvgDelay; // 0x0C
		internal int m_InMinDelay; // 0x10
		internal int m_InAvgDelay; // 0x14
		internal float m_PacketLossPercentage; // 0x18
	
		// Constructors
		public ConnectionSimulatorConfig(int outMinDelay, int outAvgDelay, int inMinDelay, int inAvgDelay, float packetLossPercentage); // 0x00AEBD14-0x00AEBD54
	
		// Methods
		[ThreadAndSerializationSafe] // 0x0017A528-0x0017A538
		public void Dispose(); // 0x00AEBD54-0x00AEBD58
		~ConnectionSimulatorConfig(); // 0x00AEBD58-0x00AEBD60
	}

	[NativeConditional] // 0x001787D4-0x00178888
	[NativeHeader] // 0x001787D4-0x00178888
	[NativeHeader] // 0x001787D4-0x00178888
	[NativeHeader] // 0x001787D4-0x00178888
	internal class ConnectionConfigInternal : IDisposable // TypeDefIndex: 2530
	{
		// Fields
		public IntPtr m_Ptr; // 0x08
	
		// Properties
		[NativeProperty] // 0x0017A704-0x0017A758
		private ushort FragmentSize { set; } // 0x00AEADBC-0x00AEAE3C
		[NativeProperty] // 0x0017A758-0x0017A7AC
		private uint ResendTimeout { set; } // 0x00AEAE3C-0x00AEAEBC
		[NativeProperty] // 0x0017A7AC-0x0017A804
		private uint DisconnectTimeout { set; } // 0x00AEAEBC-0x00AEAF3C
		[NativeProperty] // 0x0017A804-0x0017A858
		private uint ConnectTimeout { set; } // 0x00AEAF3C-0x00AEAFBC
		[NativeProperty] // 0x0017A858-0x0017A8B0
		private uint MinUpdateTimeout { set; } // 0x00AEAFBC-0x00AEB03C
		[NativeProperty] // 0x0017A8B0-0x0017A904
		private uint PingTimeout { set; } // 0x00AEB03C-0x00AEB0BC
		[NativeProperty] // 0x0017A904-0x0017A95C
		private uint ReducedPingTimeout { set; } // 0x00AEB0BC-0x00AEB13C
		[NativeProperty] // 0x0017A95C-0x0017A9B0
		private uint AllCostTimeout { set; } // 0x00AEB13C-0x00AEB1BC
		[NativeProperty] // 0x0017A9B0-0x0017AA0C
		private byte NetworkDropThreshold { set; } // 0x00AEB1BC-0x00AEB23C
		[NativeProperty] // 0x0017AA0C-0x0017AA68
		private byte OverflowDropThreshold { set; } // 0x00AEB23C-0x00AEB2BC
		[NativeProperty] // 0x0017AA68-0x0017AAC4
		private byte MaxConnectionAttempt { set; } // 0x00AEB2BC-0x00AEB33C
		[NativeProperty] // 0x0017AAC4-0x0017AB14
		private uint AckDelay { set; } // 0x00AEB33C-0x00AEB3BC
		[NativeProperty] // 0x0017AB14-0x0017AB64
		private uint SendDelay { set; } // 0x00AEB3BC-0x00AEB43C
		[NativeProperty] // 0x0017AB64-0x0017ABC8
		private ushort MaxCombinedReliableMessageSize { set; } // 0x00AEB43C-0x00AEB4BC
		[NativeProperty] // 0x0017ABC8-0x0017AC30
		private ushort MaxCombinedReliableMessageCount { set; } // 0x00AEB4BC-0x00AEB53C
		[NativeProperty] // 0x0017AC30-0x0017AC90
		private ushort MaxSentMessageQueueSize { set; } // 0x00AEB53C-0x00AEB5BC
		[NativeProperty] // 0x0017AC90-0x0017ACE0
		private byte AcksType { set; } // 0x00AEB5BC-0x00AEB63C
		[NativeProperty] // 0x0017ACE0-0x0017AD44
		private bool UsePlatformSpecificProtocols { set; } // 0x00AEB63C-0x00AEB6BC
		[NativeProperty] // 0x0017AD44-0x0017AD9C
		private uint InitialBandwidth { set; } // 0x00AEB6BC-0x00AEB73C
		[NativeProperty] // 0x0017AD9C-0x0017ADF8
		private float BandwidthPeakFactor { set; } // 0x00AEB73C-0x00AEB7BC
		[NativeProperty] // 0x0017ADF8-0x0017AE5C
		private ushort WebSocketReceiveBufferMaxSize { set; } // 0x00AEB7BC-0x00AEB83C
		[NativeProperty] // 0x0017AE5C-0x0017AEC0
		private uint UdpSocketReceiveBufferMaxSize { set; } // 0x00AEB83C-0x00AEB8BC
	
		// Constructors
		public ConnectionConfigInternal(ConnectionConfig config); // 0x00AEA71C-0x00AEACC8
	
		// Methods
		protected virtual void Dispose(bool disposing); // 0x00AEBB3C-0x00AEBBB0
		~ConnectionConfigInternal(); // 0x00AEBC28-0x00AEBCA0
		public void Dispose(); // 0x00AEBCA0-0x00AEBD14
		private static IntPtr InternalCreate(); // 0x00AEACC8-0x00AEAD3C
		[NativeMethod] // 0x0017A538-0x0017A568
		private static void InternalDestroy(IntPtr ptr); // 0x00AEBBB0-0x00AEBC28
		public byte AddChannel(int value); // 0x00AEBA3C-0x00AEBABC
		public bool SetPacketSize(ushort value); // 0x00AEAD3C-0x00AEADBC
		[NativeMethod] // 0x0017A568-0x0017A5A8
		public int SetSSLCertFilePath(string value); // 0x00AEB8BC-0x00AEB93C
		[NativeMethod] // 0x0017A5A8-0x0017A5F0
		public int SetSSLPrivateKeyFilePath(string value); // 0x00AEB93C-0x00AEB9BC
		[NativeMethod] // 0x0017A5F0-0x0017A630
		public int SetSSLCAFilePath(string value); // 0x00AEB9BC-0x00AEBA3C
		[NativeMethod] // 0x0017A630-0x0017A674
		private bool MakeChannelsSharedOrder(byte[] values); // 0x00AEBABC-0x00AEBB3C
	}

	[NativeConditional] // 0x00178888-0x001788EC
	[NativeHeader] // 0x00178888-0x001788EC
	internal class HostTopologyInternal : IDisposable // TypeDefIndex: 2531
	{
		// Fields
		public IntPtr m_Ptr; // 0x08
	
		// Properties
		[NativeProperty] // 0x0017AEC0-0x0017AF0C
		private ushort ReceivedMessagePoolSize { set; } // 0x00AED2F0-0x00AED370
		[NativeProperty] // 0x0017AF0C-0x0017AF54
		private ushort SentMessagePoolSize { set; } // 0x00AED370-0x00AED3F0
		[NativeProperty] // 0x0017AF54-0x0017AFA4
		private float MessagePoolSizeGrowthFactor { set; } // 0x00AED3F0-0x00AED470
	
		// Constructors
		public HostTopologyInternal(HostTopology topology); // 0x00AED07C-0x00AED1F0
	
		// Methods
		protected virtual void Dispose(bool disposing); // 0x00AED470-0x00AED4E4
		~HostTopologyInternal(); // 0x00AED55C-0x00AED5D4
		public void Dispose(); // 0x00AED5D4-0x00AED648
		private static IntPtr InternalCreate(ConnectionConfigInternal config, int maxDefaultConnections); // 0x00AED1F0-0x00AED270
		[NativeMethod] // 0x0017A674-0x0017A6A4
		private static void InternalDestroy(IntPtr ptr); // 0x00AED4E4-0x00AED55C
		public ushort AddSpecialConnectionConfig(ConnectionConfigInternal config); // 0x00AED270-0x00AED2F0
	}

	[NativeConditional] // 0x001788EC-0x00178950
	[NativeHeader] // 0x001788EC-0x00178950
	internal class ConnectionSimulatorConfigInternal : IDisposable // TypeDefIndex: 2532
	{
		// Fields
		public IntPtr m_Ptr; // 0x08
	
		// Constructors
		public ConnectionSimulatorConfigInternal(ConnectionSimulatorConfig config); // 0x00AEBD60-0x00AEBE08
	
		// Methods
		protected virtual void Dispose(bool disposing); // 0x00AEBE98-0x00AEBF44
		~ConnectionSimulatorConfigInternal(); // 0x00AEBFBC-0x00AEC034
		public void Dispose(); // 0x00AEC034-0x00AEC0A8
		private static IntPtr InternalCreate(int outMinDelay, int outAvgDelay, int inMinDelay, int inAvgDelay, float packetLossPercentage); // 0x00AEBE08-0x00AEBE98
		[NativeMethod] // 0x0017A6A4-0x0017A6D4
		private static void InternalDestroy(IntPtr ptr); // 0x00AEBF44-0x00AEBFBC
	}

	[NativeConditional] // 0x00178950-0x001789B4
	[NativeHeader] // 0x00178950-0x001789B4
	internal class GlobalConfigInternal : IDisposable // TypeDefIndex: 2533
	{
		// Fields
		public IntPtr m_Ptr; // 0x08
	
		// Properties
		[NativeProperty] // 0x0017AFA4-0x0017AFEC
		private uint ThreadAwakeTimeout { set; } // 0x00AEC4BC-0x00AEC53C
		[NativeProperty] // 0x0017AFEC-0x0017B02C
		private byte ReactorModel { set; } // 0x00AEC53C-0x00AEC5BC
		[NativeProperty] // 0x0017B02C-0x0017B080
		private ushort ReactorMaximumReceivedMessages { set; } // 0x00AEC5BC-0x00AEC63C
		[NativeProperty] // 0x0017B080-0x0017B0D0
		private ushort ReactorMaximumSentMessages { set; } // 0x00AEC63C-0x00AEC6BC
		[NativeProperty] // 0x0017B0D0-0x0017B110
		private ushort MaxPacketSize { set; } // 0x00AEC6BC-0x00AEC73C
		[NativeProperty] // 0x0017B110-0x0017B14C
		private ushort MaxHosts { set; } // 0x00AEC73C-0x00AEC7BC
		[NativeProperty] // 0x0017B14C-0x0017B190
		private byte ThreadPoolSize { set; } // 0x00AEC7BC-0x00AEC83C
		[NativeProperty] // 0x0017B190-0x0017B1D4
		private uint MinTimerTimeout { set; } // 0x00AEC83C-0x00AEC8BC
		[NativeProperty] // 0x0017B1D4-0x0017B218
		private uint MaxTimerTimeout { set; } // 0x00AEC8BC-0x00AEC93C
		[NativeProperty] // 0x0017B218-0x0017B264
		private uint MinNetSimulatorTimeout { set; } // 0x00AEC93C-0x00AEC9BC
		[NativeProperty] // 0x0017B264-0x0017B2B0
		private uint MaxNetSimulatorTimeout { set; } // 0x00AEC9BC-0x00AECA3C
	
		// Constructors
		public GlobalConfigInternal(GlobalConfig config); // 0x00AEC230-0x00AEC418
	
		// Methods
		protected virtual void Dispose(bool disposing); // 0x00AECA3C-0x00AECAB0
		~GlobalConfigInternal(); // 0x00AECB28-0x00AECBA0
		public void Dispose(); // 0x00AECBA0-0x00AECC14
		private static IntPtr InternalCreate(); // 0x00AEC418-0x00AEC4BC
		[NativeMethod] // 0x0017A6D4-0x0017A704
		private static void InternalDestroy(IntPtr ptr); // 0x00AECAB0-0x00AECB28
	}
}

[CompilerGenerated] // 0x001789B4-0x001789C4
internal static class <PrivateImplementationDetails> // TypeDefIndex: 2534
{
	// Fields
	internal static readonly $ArrayType=4 $field-95D7E9C7483D5AF10DF20044FCD3E580073E1D4B; // 0x00 // Starts with: 5f 24 13 f6 10 00 00 00 - Metadata: 0x0021B099

	// Nested types
	private struct $ArrayType=4 // TypeDefIndex: 2535
	{
	}
}

namespace UnityEngine
{
	[Obsolete] // 0x0017C578-0x0017C5AC
	public class WWW : CustomYieldInstruction, IDisposable // TypeDefIndex: 2537
	{
		// Fields
		private UnityWebRequest _uwr; // 0x08
	
		// Properties
		public string error { get; } // 0x00B3C398-0x00B3C51C 
		public string text { get; } // 0x00B3C51C-0x00B3C604 
		public Texture2D texture { get; } // 0x00B3C86C-0x00B3C874 
		public string url { get; } // 0x00B3C874-0x00B3C8A0 
		public override bool keepWaiting { get; } // 0x00B3C8A0-0x00B3C8D0 
	
		// Constructors
		public WWW(string url, WWWForm form); // 0x00B3BFDC-0x00B3C054
		public WWW(string url, byte[] postData, Dictionary<string, string> headers); // 0x00B3C054-0x00B3C398
	
		// Methods
		private Texture2D CreateTextureFromDownloadedData(bool markNonReadable); // 0x00B3C738-0x00B3C86C
		public void Dispose(); // 0x00B3C8D0-0x00B3C8FC
		private bool WaitUntilDoneIfPossible(); // 0x00B3C604-0x00B3C738
	}
}

namespace UnityEngine.XR
{
	[NativeConditional] // 0x0017D884-0x0017D9A4
	[NativeHeader] // 0x0017D884-0x0017D9A4
	[NativeHeader] // 0x0017D884-0x0017D9A4
	[NativeHeader] // 0x0017D884-0x0017D9A4
	[NativeHeader] // 0x0017D884-0x0017D9A4
	public static class XRSettings // TypeDefIndex: 2539
	{
		// Properties
		public static bool enabled { [StaticAccessor] /* 0x0017DA0C-0x0017DA44 */ get; [NativeMethod] /* 0x0017DA44-0x0017DA98 */ set; } // 0x00B60C0C-0x00B60C9C 0x00B60C9C-0x00B76D10
	}

	[NativeConditional] // 0x0017D9A4-0x0017D9D8
	public static class XRDevice // TypeDefIndex: 2540
	{
		// Fields
		[CompilerGenerated] // 0x0017D9D8-0x0017DA0C
		[DebuggerBrowsable] // 0x0017D9D8-0x0017DA0C
		private static Action<string> deviceLoaded; // 0x00
	
		// Constructors
		static XRDevice(); // 0x00B60BA4-0x00B60C0C
	
		// Methods
		[NativeName] // 0x0017DA98-0x0017DB10
		[StaticAccessor] // 0x0017DA98-0x0017DB10
		public static void DisableAutoXRCameraTracking([NotNull] /* 0x0017DB20-0x0017DB30 */ Camera camera, bool disabled); // 0x00B60A28-0x00B60AA8
		[RequiredByNativeCode] // 0x0017DB10-0x0017DB20
		private static void InvokeDeviceLoaded(string loadedDeviceName); // 0x00B60AA8-0x00B60BA4
	}
}

namespace ImaginationOverflow.UniversalDeepLinking
{
	public delegate void LinkActivationHandler(LinkActivation s); // TypeDefIndex: 2543; 0x00B55170-0x00B55998

	public interface ILinkProvider // TypeDefIndex: 2544
	{
		// Events
		event Action<string> LinkReceived {
			add; // 0x00000000-0x00000000
			remove; // 0x00000000-0x00000000
		}
	
		// Methods
		bool Initialize();
		void PollInfoAfterPause();
	}

	public class LinkActivation // TypeDefIndex: 2545
	{
		// Fields
		[CompilerGenerated] // 0x0017EE40-0x0017EE50
		private string <Uri>k__BackingField; // 0x08
		[CompilerGenerated] // 0x0017EE50-0x0017EE60
		private string <RawQueryString>k__BackingField; // 0x0C
		[CompilerGenerated] // 0x0017EE60-0x0017EE70
		private Dictionary<string, string> <QueryString>k__BackingField; // 0x10
	
		// Properties
		public string Uri { [CompilerGenerated] /* 0x0017EE90-0x0017EEA0 */ get; [CompilerGenerated] /* 0x0017EEA0-0x0017EEB0 */ private set; } // 0x00B55104-0x00B5510C 0x00B5510C-0x00B55114
		private string RawQueryString { [CompilerGenerated] /* 0x0017EEB0-0x0017EEC0 */ set; } // 0x00B55114-0x00B5511C
		private Dictionary<string, string> QueryString { [CompilerGenerated] /* 0x0017EEC0-0x0017EED0 */ set; } // 0x00B5511C-0x00B55124
	
		// Constructors
		public LinkActivation(string uri, string rawQueryString, Dictionary<string, string> queryStringParams); // 0x00B55124-0x00B55154
	
		// Methods
		public override string ToString(); // 0x00B55154-0x00B5515C
	}

	public class LinkProviderFactory // TypeDefIndex: 2547
	{
		// Constructors
		public LinkProviderFactory(); // 0x00B3C970-0x00B3C978
	
		// Methods
		public ILinkProvider GetProvider(bool isSteamBuild); // 0x00B3C8FC-0x00B3C968
	}
}

namespace ImaginationOverflow.UniversalDeepLinking.Providers
{
	public class AndroidLinkProvider : ILinkProvider // TypeDefIndex: 2548
	{
		// Fields
		private AndroidJavaClass _unityPlayer; // 0x08
		private AndroidJavaObject _currentActivity; // 0x0C
		private AndroidJavaObject _deepLinkIntent; // 0x10
		private string _deepLink; // 0x14
		[CompilerGenerated] // 0x0017F0C4-0x0017F0D4
		private Action<string> _linkReceived; // 0x18
	
		// Events
		private event Action<string> _linkReceived {
			add; // 0x00B3CE3C-0x00B3CF48
			remove; // 0x00B3CF48-0x00B3D054
		}
		public event Action<string> LinkReceived {
			add; // 0x00B3D054-0x00B3D090
			remove; // 0x00B3D090-0x00B3D094
		}
	
		// Constructors
		public AndroidLinkProvider(); // 0x00B3C968-0x00B3C970
	
		// Methods
		public bool Initialize(); // 0x00B3C978-0x00B3CA4C
		private void VerifyIfHasOpenByLink(); // 0x00B3CA4C-0x00B3CC14
		public static string safeCallStringMethod(AndroidJavaObject javaObject, string methodName, params /* 0x0017F0F4-0x0017F104 */ object[] args); // 0x00B3CC14-0x00B3CDC8
		public void PollInfoAfterPause(); // 0x00B3D094-0x00B547D0
		private void OnLinkReceived(string lastLink); // 0x00B3CDC8-0x00B3CE3C
	}
}

namespace Facebook.Unity.Settings
{
	public class FacebookSettings : ScriptableObject // TypeDefIndex: 2552
	{
		// Fields
		public const string FacebookSettingsAssetName = "FacebookSettings"; // Metadata: 0x0021B09D
		public const string FacebookSettingsPath = "FacebookSDK/SDK/Resources"; // Metadata: 0x0021B0B1
		public const string FacebookSettingsAssetExtension = ".asset"; // Metadata: 0x0021B0CE
		private static List<OnChangeCallback> onChangeCallbacks; // 0x00
		private static FacebookSettings instance; // 0x04
		[SerializeField] // 0x0017F674-0x0017F684
		private int selectedAppIndex; // 0x0C
		[SerializeField] // 0x0017F684-0x0017F694
		private List<string> clientTokens; // 0x10
		[SerializeField] // 0x0017F694-0x0017F6A4
		private List<string> appIds; // 0x14
		[SerializeField] // 0x0017F6A4-0x0017F6B4
		private List<string> appLabels; // 0x18
		[SerializeField] // 0x0017F6B4-0x0017F6C4
		private bool cookie; // 0x1C
		[SerializeField] // 0x0017F6C4-0x0017F6D4
		private bool logging; // 0x1D
		[SerializeField] // 0x0017F6D4-0x0017F6E4
		private bool status; // 0x1E
		[SerializeField] // 0x0017F6E4-0x0017F6F4
		private bool xfbml; // 0x1F
		[SerializeField] // 0x0017F6F4-0x0017F704
		private bool frictionlessRequests; // 0x20
		[SerializeField] // 0x0017F704-0x0017F714
		private string iosURLSuffix; // 0x24
		[SerializeField] // 0x0017F714-0x0017F724
		private List<UrlSchemes> appLinkSchemes; // 0x28
		[SerializeField] // 0x0017F724-0x0017F734
		private string uploadAccessToken; // 0x2C
		[SerializeField] // 0x0017F734-0x0017F744
		private bool autoLogAppEventsEnabled; // 0x30
		[SerializeField] // 0x0017F744-0x0017F754
		private bool advertiserIDCollectionEnabled; // 0x31
	
		// Properties
		public static int SelectedAppIndex { get; set; } // 0x00B3501C-0x00B350AC 0x00B3522C-0x00B35314
		public static List<string> AppIds { get; set; } // 0x00B354A8-0x00B35538 0x00B35538-0x00B35620
		public static List<string> AppLabels { get; set; } // 0x00B35620-0x00B356B0 0x00B356B0-0x00B35798
		public static List<string> ClientTokens { get; set; } // 0x00B35798-0x00B35828 0x00B35828-0x00B35910
		public static string AppId { get; } // 0x00B35910-0x00B359E0 
		public static string ClientToken { get; } // 0x00B359E0-0x00B35AB0 
		public static bool IsValidAppId { get; } // 0x00B35AB0-0x00B35BFC 
		public static bool Cookie { get; set; } // 0x00B35BFC-0x00B35C8C 0x00B35C8C-0x00B35D7C
		public static bool Logging { get; set; } // 0x00B35D7C-0x00B35E0C 0x00B35E0C-0x00B35EFC
		public static bool Status { get; set; } // 0x00B35EFC-0x00B35F8C 0x00B35F8C-0x00B3607C
		public static bool Xfbml { get; set; } // 0x00B3607C-0x00B3610C 0x00B3610C-0x00B361FC
		public static string IosURLSuffix { get; set; } // 0x00B361FC-0x00B3628C 0x00B3628C-0x00B36380
		public static string ChannelUrl { get; } // 0x00B36380-0x00B363DC 
		public static bool FrictionlessRequests { get; set; } // 0x00B363DC-0x00B3646C 0x00B3646C-0x00B3655C
		public static List<UrlSchemes> AppLinkSchemes { get; set; } // 0x00B3655C-0x00B365EC 0x00B365EC-0x00B366D4
		public static string UploadAccessToken { get; set; } // 0x00B366D4-0x00B36764 0x00B36764-0x00B36858
		public static bool AutoLogAppEventsEnabled { get; set; } // 0x00B36858-0x00B368E8 0x00B368E8-0x00B369D8
		public static bool AdvertiserIDCollectionEnabled { get; set; } // 0x00B369D8-0x00B36A68 0x00B36A68-0x00B36B58
		public static FacebookSettings Instance { get; } // 0x00B350AC-0x00B3522C 
		public static FacebookSettings NullableInstance { get; } // 0x00B36B58-0x00B36D08 
	
		// Nested types
		public delegate void OnChangeCallback(); // TypeDefIndex: 2553; 0x00B372D4-0x00B3771C
	
		[Serializable]
		public class UrlSchemes // TypeDefIndex: 2554
		{
			// Fields
			[SerializeField] // 0x0017F754-0x0017F764
			private List<string> list; // 0x08
	
			// Properties
			public List<string> Schemes { get; set; } // 0x00B37768-0x00B37770 0x00B37770-0x00B37778
	
			// Constructors
			public UrlSchemes(List<string> schemes = null); // 0x00B370F8-0x00B371A0
		}
	
		[Serializable]
		[CompilerGenerated] // 0x0017F664-0x0017F674
		private sealed class <>c // TypeDefIndex: 2555
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static Action<OnChangeCallback> <>9__76_0; // 0x04
	
			// Constructors
			static <>c(); // 0x00B37230-0x00B372A4
			public <>c(); // 0x00B372A4-0x00B372AC
	
			// Methods
			internal void <SettingsChanged>b__76_0(OnChangeCallback callback); // 0x00B372AC-0x00B372D4
		}
	
		// Constructors
		public FacebookSettings(); // 0x00B36E80-0x00B370F8
		static FacebookSettings(); // 0x00B371A0-0x00B37230
	
		// Methods
		public static void RegisterChangeEventCallback(OnChangeCallback callback); // 0x00B36D08-0x00B36DC4
		public static void UnregisterChangeEventCallback(OnChangeCallback callback); // 0x00B36DC4-0x00B36E80
		private static void SettingsChanged(); // 0x00B35314-0x00B354A8
	}
}

namespace ImaginationOverflow.UniversalDeepLinking
{
	public sealed class DeepLinkManager // TypeDefIndex: 2557
	{
		// Fields
		[CompilerGenerated] // 0x0017F7D0-0x0017F7E0
		private static DeepLinkManager <Instance>k__BackingField; // 0x00
		[CompilerGenerated] // 0x0017F7E0-0x0017F7F0
		private bool <IsSteamBuild>k__BackingField; // 0x08
		[CompilerGenerated] // 0x0017F7F0-0x0017F800
		private LinkActivationHandler _activated; // 0x0C
		private ILinkProvider _currProvider; // 0x10
		private GameObject _go; // 0x14
		private string _storedActivation; // 0x18
	
		// Properties
		public static DeepLinkManager Instance { [CompilerGenerated] /* 0x0017F830-0x0017F840 */ get; [CompilerGenerated] /* 0x0017F840-0x0017F850 */ private set; } // 0x00B2E89C-0x00B2E928 0x00B2E928-0x00B2E9B8
		public bool IsSteamBuild { [CompilerGenerated] /* 0x0017F850-0x0017F860 */ get; } // 0x00B2E9B8-0x00B2E9C0 
	
		// Events
		public event LinkActivationHandler LinkActivated {
			add; // 0x00B2EA38-0x00B2EA54
			remove; // 0x00B2EFA4-0x00B2EFA8
		}
		private event LinkActivationHandler _activated {
			add; // 0x00B2EA54-0x00B2EB60
			remove; // 0x00B2EFA8-0x00B2F0B4
		}
	
		// Nested types
		private class UrlEncodingParser : Dictionary<string, string> // TypeDefIndex: 2558
		{
			// Fields
			[CompilerGenerated] // 0x0017F800-0x0017F810
			private string <Url>k__BackingField; // 0x30
			[CompilerGenerated] // 0x0017F810-0x0017F820
			private string <Query>k__BackingField; // 0x34
	
			// Properties
			private string Url { [CompilerGenerated] /* 0x0017F880-0x0017F890 */ get; [CompilerGenerated] /* 0x0017F890-0x0017F8A0 */ set; } // 0x00B2F88C-0x00B2F894 0x00B2F894-0x00B2F89C
			public string Query { [CompilerGenerated] /* 0x0017F8A0-0x0017F8B0 */ get; [CompilerGenerated] /* 0x0017F8B0-0x0017F8C0 */ private set; } // 0x00B2F7B4-0x00B2F7BC 0x00B2F89C-0x00B2F8A4
	
			// Constructors
			public UrlEncodingParser(string queryStringOrUrl = null); // 0x00B2F710-0x00B2F7B4
	
			// Methods
			public Dictionary<string, string> Parse(string query); // 0x00B2F8A4-0x00B2FC08
			public override string ToString(); // 0x00B2FC08-0x00B30194
		}
	
		// Constructors
		static DeepLinkManager(); // 0x00B2E9C0-0x00B2EA30
		private DeepLinkManager(); // 0x00B2EA30-0x00B2EA38
	
		// Methods
		private void RegisterIfNecessary(); // 0x00B2EB60-0x00B2EFA4
		private void CreatePauseGameObject(); // 0x00B2F144-0x00B2F3D8
		private void _currProvider_LinkReceived(string s); // 0x00B2F0B4-0x00B2F0D4
		private void StoreActivation(string s); // 0x00B2F560-0x00B2F568
		private bool OnActivated(string s); // 0x00B2F3D8-0x00B2F560
		private LinkActivation CreateLinkActivation(string s); // 0x00B2F568-0x00B2F710
		internal void GameCameFromPause(); // 0x00B2F7BC-0x00B2F88C
	}

	public class UniversalDeeplinkingRuntimeScript : MonoBehaviour // TypeDefIndex: 2559
	{
		// Fields
		private bool _onJob; // 0x0C
	
		// Nested types
		[CompilerGenerated] // 0x0017F7C0-0x0017F7D0
		private sealed class <CallDeepLinkManagerAfterDelay>d__4 : IEnumerator<object> // TypeDefIndex: 2560
		{
			// Fields
			private int <>1__state; // 0x08
			private object <>2__current; // 0x0C
			public UniversalDeeplinkingRuntimeScript <>4__this; // 0x10
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0017F8E0-0x0017F8F0 */ get; } // 0x00B307A0-0x00B307A8 
			object IEnumerator.Current { [DebuggerHidden] /* 0x0017F900-0x0017F910 */ get; } // 0x00B30830-0x00B30838 
	
			// Constructors
			[DebuggerHidden] // 0x0017F8C0-0x0017F8D0
			public <CallDeepLinkManagerAfterDelay>d__4(int <>1__state); // 0x00B30538-0x00B30558
	
			// Methods
			[DebuggerHidden] // 0x0017F8D0-0x0017F8E0
			void IDisposable.Dispose(); // 0x00B30560-0x00B30564
			private bool MoveNext(); // 0x00B30564-0x00B307A0
			[DebuggerHidden] // 0x0017F8F0-0x0017F900
			void IEnumerator.Reset(); // 0x00B307A8-0x00B30830
		}
	
		// Constructors
		public UniversalDeeplinkingRuntimeScript(); // 0x00B30558-0x00B30560
	
		// Methods
		private void Start(); // 0x00B303B8-0x00B3044C
		private void OnApplicationPause(bool pauseStatus); // 0x00B3044C-0x00B3047C
		private void OnApplicationFocus(bool focus); // 0x00B30508-0x00B30538
		public IEnumerator CallDeepLinkManagerAfterDelay(); // 0x00B3047C-0x00B30508
	}
}

namespace ImaginationOverflow.UniversalDeepLinking.Providers
{
	public class EditorLinkProvider : ILinkProvider // TypeDefIndex: 2561
	{
		// Fields
		private static EditorLinkProvider _instance; // 0x00
		[CompilerGenerated] // 0x0017F820-0x0017F830
		private Action<string> LinkReceived; // 0x08
	
		// Events
		public event Action<string> LinkReceived {
			add; // 0x00B3019C-0x00B302A8
			remove; // 0x00B302A8-0x00B303B4
		}
	
		// Constructors
		public EditorLinkProvider(); // 0x00B2F0D4-0x00B2F144
	
		// Methods
		public bool Initialize(); // 0x00B30194-0x00B3019C
		public void PollInfoAfterPause(); // 0x00B303B4-0x00B303B8
	}
}

namespace UnityEngine.EventSystems
{
	[Flags] // 0x0017FB20-0x0017FB30
	public enum EventHandle // TypeDefIndex: 2563
	{
		Unused = 0,
		Used = 1
	}

	public interface IEventSystemHandler // TypeDefIndex: 2564
	{
	}

	public interface IPointerEnterHandler : IEventSystemHandler // TypeDefIndex: 2565
	{
		// Methods
		void OnPointerEnter(PointerEventData eventData);
	}

	public interface IPointerExitHandler : IEventSystemHandler // TypeDefIndex: 2566
	{
		// Methods
		void OnPointerExit(PointerEventData eventData);
	}

	public interface IPointerDownHandler : IEventSystemHandler // TypeDefIndex: 2567
	{
		// Methods
		void OnPointerDown(PointerEventData eventData);
	}

	public interface IPointerUpHandler : IEventSystemHandler // TypeDefIndex: 2568
	{
		// Methods
		void OnPointerUp(PointerEventData eventData);
	}

	public interface IPointerClickHandler : IEventSystemHandler // TypeDefIndex: 2569
	{
		// Methods
		void OnPointerClick(PointerEventData eventData);
	}

	public interface IBeginDragHandler : IEventSystemHandler // TypeDefIndex: 2570
	{
		// Methods
		void OnBeginDrag(PointerEventData eventData);
	}

	public interface IInitializePotentialDragHandler : IEventSystemHandler // TypeDefIndex: 2571
	{
		// Methods
		void OnInitializePotentialDrag(PointerEventData eventData);
	}

	public interface IDragHandler : IEventSystemHandler // TypeDefIndex: 2572
	{
		// Methods
		void OnDrag(PointerEventData eventData);
	}

	public interface IEndDragHandler : IEventSystemHandler // TypeDefIndex: 2573
	{
		// Methods
		void OnEndDrag(PointerEventData eventData);
	}

	public interface IDropHandler : IEventSystemHandler // TypeDefIndex: 2574
	{
		// Methods
		void OnDrop(PointerEventData eventData);
	}

	public interface IScrollHandler : IEventSystemHandler // TypeDefIndex: 2575
	{
		// Methods
		void OnScroll(PointerEventData eventData);
	}

	public interface IUpdateSelectedHandler : IEventSystemHandler // TypeDefIndex: 2576
	{
		// Methods
		void OnUpdateSelected(BaseEventData eventData);
	}

	public interface ISelectHandler : IEventSystemHandler // TypeDefIndex: 2577
	{
		// Methods
		void OnSelect(BaseEventData eventData);
	}

	public interface IDeselectHandler : IEventSystemHandler // TypeDefIndex: 2578
	{
		// Methods
		void OnDeselect(BaseEventData eventData);
	}

	public interface IMoveHandler : IEventSystemHandler // TypeDefIndex: 2579
	{
		// Methods
		void OnMove(AxisEventData eventData);
	}

	public interface ISubmitHandler : IEventSystemHandler // TypeDefIndex: 2580
	{
		// Methods
		void OnSubmit(BaseEventData eventData);
	}

	public interface ICancelHandler : IEventSystemHandler // TypeDefIndex: 2581
	{
		// Methods
		void OnCancel(BaseEventData eventData);
	}

	[AddComponentMenu] // 0x0017FB30-0x0017FB70
	public class EventSystem : UIBehaviour // TypeDefIndex: 2582
	{
		// Fields
		private List<BaseInputModule> m_SystemInputModules; // 0x0C
		private BaseInputModule m_CurrentInputModule; // 0x10
		private static List<EventSystem> m_EventSystems; // 0x00
		[FormerlySerializedAs] // 0x00180EB8-0x00180F04
		[SerializeField] // 0x00180EB8-0x00180F04
		private GameObject m_FirstSelected; // 0x14
		[SerializeField] // 0x00180F04-0x00180F14
		private bool m_sendNavigationEvents; // 0x18
		[SerializeField] // 0x00180F14-0x00180F24
		private int m_DragThreshold; // 0x1C
		private GameObject m_CurrentSelected; // 0x20
		private bool m_HasFocus; // 0x24
		private bool m_SelectionGuard; // 0x25
		private BaseEventData m_DummyData; // 0x28
		private static readonly Comparison<RaycastResult> s_RaycastComparer; // 0x04
		[CompilerGenerated] // 0x00180F24-0x00180F34
		private static Comparison<RaycastResult> <>f__mg$cache0; // 0x08
	
		// Properties
		public static EventSystem current { get; set; } // 0x00488AB0-0x00488BE4 0x00488BE4-0x00488D64
		public bool sendNavigationEvents { get; set; } // 0x00488D64-0x00488D6C 0x00488D6C-0x00488D74
		public int pixelDragThreshold { get; set; } // 0x00488D74-0x00488D7C 0x00488D7C-0x00488D84
		public BaseInputModule currentInputModule { get; } // 0x00486890-0x00486898 
		public GameObject firstSelectedGameObject { get; set; } // 0x00488D84-0x00488D8C 0x00488D8C-0x00488D94
		public GameObject currentSelectedGameObject { get; } // 0x004868BC-0x004868C4 
		[Obsolete] // 0x00183F28-0x00183F84
		public GameObject lastSelectedGameObject { get; } // 0x00488D94-0x00488D9C 
		public bool isFocused { get; } // 0x00488D9C-0x00488DA4 
		public bool alreadySelecting { get; } // 0x00488DA4-0x00488DAC 
		private BaseEventData baseEventDataCache { get; } // 0x00488EC4-0x00488F48 
	
		// Constructors
		protected EventSystem(); // 0x00488A10-0x00488AB0
		static EventSystem(); // 0x0048A220-0x0048A32C
	
		// Methods
		public void UpdateModules(); // 0x00487084-0x0048723C
		public void SetSelectedGameObject(GameObject selected, BaseEventData pointer); // 0x004868FC-0x00486AA8
		public void SetSelectedGameObject(GameObject selected); // 0x00488F48-0x00488F70
		private static int RaycastComparer(RaycastResult lhs, RaycastResult rhs); // 0x00488F70-0x00489488
		public void RaycastAll(PointerEventData eventData, List<RaycastResult> raycastResults); // 0x00489488-0x004896B0
		public bool IsPointerOverGameObject(); // 0x0048973C-0x00489744
		public bool IsPointerOverGameObject(int pointerId); // 0x00489744-0x00489810
		protected override void OnEnable(); // 0x00489810-0x004898CC
		protected override void OnDisable(); // 0x004898CC-0x00489A00
		private void TickModules(); // 0x00489A00-0x00489B64
		protected virtual void OnApplicationFocus(bool hasFocus); // 0x00489B64-0x00489B6C
		protected virtual void Update(); // 0x00489B6C-0x00489EE0
		private void ChangeEventModule(BaseInputModule module); // 0x00489EE0-0x0048A054
		public override string ToString(); // 0x0048A054-0x0048A220
	}

	[AddComponentMenu] // 0x0017FB70-0x0017FBB0
	public class EventTrigger : MonoBehaviour, IPointerEnterHandler, IPointerExitHandler, IPointerDownHandler, IPointerUpHandler, IPointerClickHandler, IInitializePotentialDragHandler, IBeginDragHandler, IDragHandler, IEndDragHandler, IDropHandler, IScrollHandler, IUpdateSelectedHandler, ISelectHandler, IDeselectHandler, IMoveHandler, ISubmitHandler, ICancelHandler // TypeDefIndex: 2583
	{
		// Fields
		[FormerlySerializedAs] // 0x00180F34-0x00180F80
		[SerializeField] // 0x00180F34-0x00180F80
		private List<Entry> m_Delegates; // 0x0C
		[EditorBrowsable] // 0x00180F80-0x00181004
		[Obsolete] // 0x00180F80-0x00181004
		public List<Entry> delegates; // 0x10
	
		// Properties
		public List<Entry> triggers { get; set; } // 0x0048A334-0x0048A3C4 0x0048A3C4-0x0048A3CC
	
		// Nested types
		[Serializable]
		public class TriggerEvent : UnityEvent<BaseEventData> // TypeDefIndex: 2584
		{
			// Constructors
			public TriggerEvent(); // 0x0048A63C-0x0048A6A0
		}
	
		[Serializable]
		public class Entry // TypeDefIndex: 2585
		{
			// Fields
			public EventTriggerType eventID; // 0x08
			public TriggerEvent callback; // 0x0C
	
			// Constructors
			public Entry(); // 0x0048A5BC-0x0048A63C
		}
	
		// Constructors
		protected EventTrigger(); // 0x0048A32C-0x0048A334
	
		// Methods
		private void Execute(EventTriggerType id, BaseEventData eventData); // 0x0048A3CC-0x0048A4F0
		public virtual void OnPointerEnter(PointerEventData eventData); // 0x0048A4F0-0x0048A4FC
		public virtual void OnPointerExit(PointerEventData eventData); // 0x0048A4FC-0x0048A508
		public virtual void OnDrag(PointerEventData eventData); // 0x0048A508-0x0048A514
		public virtual void OnDrop(PointerEventData eventData); // 0x0048A514-0x0048A520
		public virtual void OnPointerDown(PointerEventData eventData); // 0x0048A520-0x0048A52C
		public virtual void OnPointerUp(PointerEventData eventData); // 0x0048A52C-0x0048A538
		public virtual void OnPointerClick(PointerEventData eventData); // 0x0048A538-0x0048A544
		public virtual void OnSelect(BaseEventData eventData); // 0x0048A544-0x0048A550
		public virtual void OnDeselect(BaseEventData eventData); // 0x0048A550-0x0048A55C
		public virtual void OnScroll(PointerEventData eventData); // 0x0048A55C-0x0048A568
		public virtual void OnMove(AxisEventData eventData); // 0x0048A568-0x0048A574
		public virtual void OnUpdateSelected(BaseEventData eventData); // 0x0048A574-0x0048A580
		public virtual void OnInitializePotentialDrag(PointerEventData eventData); // 0x0048A580-0x0048A58C
		public virtual void OnBeginDrag(PointerEventData eventData); // 0x0048A58C-0x0048A598
		public virtual void OnEndDrag(PointerEventData eventData); // 0x0048A598-0x0048A5A4
		public virtual void OnSubmit(BaseEventData eventData); // 0x0048A5A4-0x0048A5B0
		public virtual void OnCancel(BaseEventData eventData); // 0x0048A5B0-0x0048A5BC
	}

	public enum EventTriggerType // TypeDefIndex: 2586
	{
		PointerEnter = 0,
		PointerExit = 1,
		PointerDown = 2,
		PointerUp = 3,
		PointerClick = 4,
		Drag = 5,
		Drop = 6,
		Scroll = 7,
		UpdateSelected = 8,
		Select = 9,
		Deselect = 10,
		Move = 11,
		InitializePotentialDrag = 12,
		BeginDrag = 13,
		EndDrag = 14,
		Submit = 15,
		Cancel = 16
	}

	public static class ExecuteEvents // TypeDefIndex: 2587
	{
		// Fields
		private static readonly EventFunction<IPointerEnterHandler> s_PointerEnterHandler; // 0x00
		private static readonly EventFunction<IPointerExitHandler> s_PointerExitHandler; // 0x04
		private static readonly EventFunction<IPointerDownHandler> s_PointerDownHandler; // 0x08
		private static readonly EventFunction<IPointerUpHandler> s_PointerUpHandler; // 0x0C
		private static readonly EventFunction<IPointerClickHandler> s_PointerClickHandler; // 0x10
		private static readonly EventFunction<IInitializePotentialDragHandler> s_InitializePotentialDragHandler; // 0x14
		private static readonly EventFunction<IBeginDragHandler> s_BeginDragHandler; // 0x18
		private static readonly EventFunction<IDragHandler> s_DragHandler; // 0x1C
		private static readonly EventFunction<IEndDragHandler> s_EndDragHandler; // 0x20
		private static readonly EventFunction<IDropHandler> s_DropHandler; // 0x24
		private static readonly EventFunction<IScrollHandler> s_ScrollHandler; // 0x28
		private static readonly EventFunction<IUpdateSelectedHandler> s_UpdateSelectedHandler; // 0x2C
		private static readonly EventFunction<ISelectHandler> s_SelectHandler; // 0x30
		private static readonly EventFunction<IDeselectHandler> s_DeselectHandler; // 0x34
		private static readonly EventFunction<IMoveHandler> s_MoveHandler; // 0x38
		private static readonly EventFunction<ISubmitHandler> s_SubmitHandler; // 0x3C
		private static readonly EventFunction<ICancelHandler> s_CancelHandler; // 0x40
		private static readonly ObjectPool<List<IEventSystemHandler>> s_HandlerListPool; // 0x44
		private static readonly List<Transform> s_InternalTransformList; // 0x48
		[CompilerGenerated] // 0x00181004-0x00181014
		private static EventFunction<IPointerEnterHandler> <>f__mg$cache0; // 0x4C
		[CompilerGenerated] // 0x00181014-0x00181024
		private static EventFunction<IPointerExitHandler> <>f__mg$cache1; // 0x50
		[CompilerGenerated] // 0x00181024-0x00181034
		private static EventFunction<IPointerDownHandler> <>f__mg$cache2; // 0x54
		[CompilerGenerated] // 0x00181034-0x00181044
		private static EventFunction<IPointerUpHandler> <>f__mg$cache3; // 0x58
		[CompilerGenerated] // 0x00181044-0x00181054
		private static EventFunction<IPointerClickHandler> <>f__mg$cache4; // 0x5C
		[CompilerGenerated] // 0x00181054-0x00181064
		private static EventFunction<IInitializePotentialDragHandler> <>f__mg$cache5; // 0x60
		[CompilerGenerated] // 0x00181064-0x00181074
		private static EventFunction<IBeginDragHandler> <>f__mg$cache6; // 0x64
		[CompilerGenerated] // 0x00181074-0x00181084
		private static EventFunction<IDragHandler> <>f__mg$cache7; // 0x68
		[CompilerGenerated] // 0x00181084-0x00181094
		private static EventFunction<IEndDragHandler> <>f__mg$cache8; // 0x6C
		[CompilerGenerated] // 0x00181094-0x001810A4
		private static EventFunction<IDropHandler> <>f__mg$cache9; // 0x70
		[CompilerGenerated] // 0x001810A4-0x001810B4
		private static EventFunction<IScrollHandler> <>f__mg$cacheA; // 0x74
		[CompilerGenerated] // 0x001810B4-0x001810C4
		private static EventFunction<IUpdateSelectedHandler> <>f__mg$cacheB; // 0x78
		[CompilerGenerated] // 0x001810C4-0x001810D4
		private static EventFunction<ISelectHandler> <>f__mg$cacheC; // 0x7C
		[CompilerGenerated] // 0x001810D4-0x001810E4
		private static EventFunction<IDeselectHandler> <>f__mg$cacheD; // 0x80
		[CompilerGenerated] // 0x001810E4-0x001810F4
		private static EventFunction<IMoveHandler> <>f__mg$cacheE; // 0x84
		[CompilerGenerated] // 0x001810F4-0x00181104
		private static EventFunction<ISubmitHandler> <>f__mg$cacheF; // 0x88
		[CompilerGenerated] // 0x00181104-0x00181114
		private static EventFunction<ICancelHandler> <>f__mg$cache10; // 0x8C
	
		// Properties
		public static EventFunction<IPointerEnterHandler> pointerEnterHandler { get; } // 0x00487FA0-0x0048802C 
		public static EventFunction<IPointerExitHandler> pointerExitHandler { get; } // 0x00487F0C-0x00487F98 
		public static EventFunction<IPointerDownHandler> pointerDownHandler { get; } // 0x0048B89C-0x0048B928 
		public static EventFunction<IPointerUpHandler> pointerUpHandler { get; } // 0x0048B928-0x0048B9B4 
		public static EventFunction<IPointerClickHandler> pointerClickHandler { get; } // 0x0048B9B4-0x0048BA40 
		public static EventFunction<IInitializePotentialDragHandler> initializePotentialDrag { get; } // 0x0048BA40-0x0048BACC 
		public static EventFunction<IBeginDragHandler> beginDragHandler { get; } // 0x0048BACC-0x0048BB58 
		public static EventFunction<IDragHandler> dragHandler { get; } // 0x0048BB58-0x0048BBE4 
		public static EventFunction<IEndDragHandler> endDragHandler { get; } // 0x0048BBE4-0x0048BC70 
		public static EventFunction<IDropHandler> dropHandler { get; } // 0x0048BC70-0x0048BCFC 
		public static EventFunction<IScrollHandler> scrollHandler { get; } // 0x0048BCFC-0x0048BD88 
		public static EventFunction<IUpdateSelectedHandler> updateSelectedHandler { get; } // 0x0048BD88-0x0048BE14 
		public static EventFunction<ISelectHandler> selectHandler { get; } // 0x00488E38-0x00488EC4 
		public static EventFunction<IDeselectHandler> deselectHandler { get; } // 0x00488DAC-0x00488E38 
		public static EventFunction<IMoveHandler> moveHandler { get; } // 0x0048BE14-0x0048BEA0 
		public static EventFunction<ISubmitHandler> submitHandler { get; } // 0x0048BEA0-0x0048BF2C 
		public static EventFunction<ICancelHandler> cancelHandler { get; } // 0x0048BF2C-0x0048BFB8 
	
		// Nested types
		public delegate void EventFunction<T1>(T1 handler, BaseEventData eventData); // TypeDefIndex: 2588; 0x00000000-0x00000000
	
		// Constructors
		static ExecuteEvents(); // 0x0048C1F0-0x0048CB24
	
		// Methods
		public static T ValidateEventData<T>(BaseEventData data)
			where T : class;
		private static void Execute(IPointerEnterHandler handler, BaseEventData eventData); // 0x0048A6A0-0x0048A7C4
		private static void Execute(IPointerExitHandler handler, BaseEventData eventData); // 0x0048A7C4-0x0048A8E8
		private static void Execute(IPointerDownHandler handler, BaseEventData eventData); // 0x0048A8E8-0x0048AA0C
		private static void Execute(IPointerUpHandler handler, BaseEventData eventData); // 0x0048AA0C-0x0048AB30
		private static void Execute(IPointerClickHandler handler, BaseEventData eventData); // 0x0048AB30-0x0048AC54
		private static void Execute(IInitializePotentialDragHandler handler, BaseEventData eventData); // 0x0048AC54-0x0048AD78
		private static void Execute(IBeginDragHandler handler, BaseEventData eventData); // 0x0048AD78-0x0048AE9C
		private static void Execute(IDragHandler handler, BaseEventData eventData); // 0x0048AE9C-0x0048AFC0
		private static void Execute(IEndDragHandler handler, BaseEventData eventData); // 0x0048AFC0-0x0048B0E4
		private static void Execute(IDropHandler handler, BaseEventData eventData); // 0x0048B0E4-0x0048B208
		private static void Execute(IScrollHandler handler, BaseEventData eventData); // 0x0048B208-0x0048B32C
		private static void Execute(IUpdateSelectedHandler handler, BaseEventData eventData); // 0x0048B32C-0x0048B408
		private static void Execute(ISelectHandler handler, BaseEventData eventData); // 0x0048B408-0x0048B4E4
		private static void Execute(IDeselectHandler handler, BaseEventData eventData); // 0x0048B4E4-0x0048B5C0
		private static void Execute(IMoveHandler handler, BaseEventData eventData); // 0x0048B5C0-0x0048B6E4
		private static void Execute(ISubmitHandler handler, BaseEventData eventData); // 0x0048B6E4-0x0048B7C0
		private static void Execute(ICancelHandler handler, BaseEventData eventData); // 0x0048B7C0-0x0048B89C
		private static void GetEventChain(GameObject root, IList<Transform> eventChain); // 0x0048BFB8-0x0048C1F0
		public static bool Execute<T>(GameObject target, BaseEventData eventData, EventFunction<T> functor)
			where T : IEventSystemHandler;
		public static GameObject ExecuteHierarchy<T>(GameObject root, BaseEventData eventData, EventFunction<T> callbackFunction)
			where T : IEventSystemHandler;
		private static bool ShouldSendToComponent<T>(Component component)
			where T : IEventSystemHandler;
		private static void GetEventList<T>(GameObject go, IList<IEventSystemHandler> results)
			where T : IEventSystemHandler;
		public static bool CanHandleEvent<T>(GameObject go)
			where T : IEventSystemHandler;
		public static GameObject GetEventHandler<T>(GameObject root)
			where T : IEventSystemHandler;
		[CompilerGenerated] // 0x0018343C-0x0018344C
		private static void <s_HandlerListPool>m__0(List<IEventSystemHandler> l); // 0x0048CB24-0x0048CB98
	}

	public enum MoveDirection // TypeDefIndex: 2589
	{
		Left = 0,
		Up = 1,
		Right = 2,
		Down = 3,
		None = 4
	}

	internal static class RaycasterManager // TypeDefIndex: 2590
	{
		// Fields
		private static readonly List<BaseRaycaster> s_Raycasters; // 0x00
	
		// Constructors
		static RaycasterManager(); // 0x004918FC-0x0049198C
	
		// Methods
		public static void AddRaycaster(BaseRaycaster baseRaycaster); // 0x00488728-0x0048885C
		public static List<BaseRaycaster> GetRaycasters(); // 0x004896B0-0x0048973C
		public static void RemoveRaycasters(BaseRaycaster baseRaycaster); // 0x004888DC-0x00488A10
	}

	public struct RaycastResult // TypeDefIndex: 2591
	{
		// Fields
		private GameObject m_GameObject; // 0x00
		public BaseRaycaster module; // 0x04
		public float distance; // 0x08
		public float index; // 0x0C
		public int depth; // 0x10
		public int sortingLayer; // 0x14
		public int sortingOrder; // 0x18
		public Vector3 worldPosition; // 0x1C
		public Vector3 worldNormal; // 0x28
		public Vector2 screenPosition; // 0x34
	
		// Properties
		public GameObject gameObject { get; set; } // 0x004916F0-0x004916F8 0x004916F8-0x004917D8
		public bool isValid { get; } // 0x004917D8-0x004918EC 
	
		// Methods
		public void Clear(); // 0x004918EC-0x004918F4
		public override string ToString(); // 0x004918F4-0x004918FC
	}

	public abstract class UIBehaviour : MonoBehaviour // TypeDefIndex: 2592
	{
		// Constructors
		protected UIBehaviour(); // 0x00486AB0-0x00486AB8
	
		// Methods
		protected virtual void Awake(); // 0x004950BC-0x004950C0
		protected virtual void OnEnable(); // 0x00487080-0x00487084
		protected virtual void Start(); // 0x004950C0-0x004950C4
		protected virtual void OnDisable(); // 0x00487264-0x00487268
		protected virtual void OnDestroy(); // 0x004950C4-0x004950C8
		public virtual bool IsActive(); // 0x004950C8-0x004950D0
		protected virtual void OnRectTransformDimensionsChange(); // 0x004950D0-0x004950D4
		protected virtual void OnBeforeTransformParentChanged(); // 0x004950D4-0x004950D8
		protected virtual void OnTransformParentChanged(); // 0x004950D8-0x004950DC
		protected virtual void OnDidApplyAnimationProperties(); // 0x004950DC-0x004950E0
		protected virtual void OnCanvasGroupChanged(); // 0x004950E0-0x004950E4
		protected virtual void OnCanvasHierarchyChanged(); // 0x004950E4-0x004950E8
		public bool IsDestroyed(); // 0x004950E8-0x00495170
	}

	public class AxisEventData : BaseEventData // TypeDefIndex: 2593
	{
		// Fields
		[CompilerGenerated] // 0x00181114-0x00181148
		[DebuggerBrowsable] // 0x00181114-0x00181148
		private Vector2 <moveVector>k__BackingField; // 0x10
		[CompilerGenerated] // 0x00181148-0x0018117C
		[DebuggerBrowsable] // 0x00181148-0x0018117C
		private MoveDirection <moveDir>k__BackingField; // 0x18
	
		// Properties
		public Vector2 moveVector { [CompilerGenerated] /* 0x0018344C-0x0018345C */ get; [CompilerGenerated] /* 0x0018345C-0x0018346C */ set; } // 0x00486850-0x00486864 0x0048683C-0x00486848
		public MoveDirection moveDir { [CompilerGenerated] /* 0x0018346C-0x0018347C */ get; [CompilerGenerated] /* 0x0018347C-0x0018348C */ set; } // 0x00486864-0x0048686C 0x00486848-0x00486850
	
		// Constructors
		public AxisEventData(EventSystem eventSystem); // 0x0048676C-0x0048681C
	}

	public abstract class AbstractEventData // TypeDefIndex: 2594
	{
		// Fields
		protected bool m_Used; // 0x08
	
		// Properties
		public virtual bool used { get; } // 0x00486764-0x0048676C 
	
		// Constructors
		protected AbstractEventData(); // 0x00486744-0x0048674C
	
		// Methods
		public virtual void Reset(); // 0x0048674C-0x00486758
		public virtual void Use(); // 0x00486758-0x00486764
	}

	public class BaseEventData : AbstractEventData // TypeDefIndex: 2595
	{
		// Fields
		private readonly EventSystem m_EventSystem; // 0x0C
	
		// Properties
		public BaseInputModule currentInputModule { get; } // 0x0048686C-0x00486890 
		public GameObject selectedObject { get; set; } // 0x00486898-0x004868BC 0x004868C4-0x004868FC
	
		// Constructors
		public BaseEventData(EventSystem eventSystem); // 0x0048681C-0x0048683C
	}

	public class PointerEventData : BaseEventData // TypeDefIndex: 2596
	{
		// Fields
		[CompilerGenerated] // 0x0018117C-0x001811B0
		[DebuggerBrowsable] // 0x0018117C-0x001811B0
		private GameObject <pointerEnter>k__BackingField; // 0x10
		private GameObject m_PointerPress; // 0x14
		[CompilerGenerated] // 0x001811B0-0x001811E4
		[DebuggerBrowsable] // 0x001811B0-0x001811E4
		private GameObject <lastPress>k__BackingField; // 0x18
		[CompilerGenerated] // 0x001811E4-0x00181218
		[DebuggerBrowsable] // 0x001811E4-0x00181218
		private GameObject <rawPointerPress>k__BackingField; // 0x1C
		[CompilerGenerated] // 0x00181218-0x0018124C
		[DebuggerBrowsable] // 0x00181218-0x0018124C
		private GameObject <pointerDrag>k__BackingField; // 0x20
		[CompilerGenerated] // 0x0018124C-0x00181280
		[DebuggerBrowsable] // 0x0018124C-0x00181280
		private RaycastResult <pointerCurrentRaycast>k__BackingField; // 0x24
		[CompilerGenerated] // 0x00181280-0x001812B4
		[DebuggerBrowsable] // 0x00181280-0x001812B4
		private RaycastResult <pointerPressRaycast>k__BackingField; // 0x60
		public List<GameObject> hovered; // 0x9C
		[CompilerGenerated] // 0x001812B4-0x001812E8
		[DebuggerBrowsable] // 0x001812B4-0x001812E8
		private bool <eligibleForClick>k__BackingField; // 0xA0
		[CompilerGenerated] // 0x001812E8-0x0018131C
		[DebuggerBrowsable] // 0x001812E8-0x0018131C
		private int <pointerId>k__BackingField; // 0xA4
		[CompilerGenerated] // 0x0018131C-0x00181350
		[DebuggerBrowsable] // 0x0018131C-0x00181350
		private Vector2 <position>k__BackingField; // 0xA8
		[CompilerGenerated] // 0x00181350-0x00181384
		[DebuggerBrowsable] // 0x00181350-0x00181384
		private Vector2 <delta>k__BackingField; // 0xB0
		[CompilerGenerated] // 0x00181384-0x001813B8
		[DebuggerBrowsable] // 0x00181384-0x001813B8
		private Vector2 <pressPosition>k__BackingField; // 0xB8
		[CompilerGenerated] // 0x001813B8-0x001813EC
		[DebuggerBrowsable] // 0x001813B8-0x001813EC
		private Vector3 <worldPosition>k__BackingField; // 0xC0
		[CompilerGenerated] // 0x001813EC-0x00181420
		[DebuggerBrowsable] // 0x001813EC-0x00181420
		private Vector3 <worldNormal>k__BackingField; // 0xCC
		[CompilerGenerated] // 0x00181420-0x00181454
		[DebuggerBrowsable] // 0x00181420-0x00181454
		private float <clickTime>k__BackingField; // 0xD8
		[CompilerGenerated] // 0x00181454-0x00181488
		[DebuggerBrowsable] // 0x00181454-0x00181488
		private int <clickCount>k__BackingField; // 0xDC
		[CompilerGenerated] // 0x00181488-0x001814BC
		[DebuggerBrowsable] // 0x00181488-0x001814BC
		private Vector2 <scrollDelta>k__BackingField; // 0xE0
		[CompilerGenerated] // 0x001814BC-0x001814F0
		[DebuggerBrowsable] // 0x001814BC-0x001814F0
		private bool <useDragThreshold>k__BackingField; // 0xE8
		[CompilerGenerated] // 0x001814F0-0x00181524
		[DebuggerBrowsable] // 0x001814F0-0x00181524
		private bool <dragging>k__BackingField; // 0xE9
		[CompilerGenerated] // 0x00181524-0x00181558
		[DebuggerBrowsable] // 0x00181524-0x00181558
		private InputButton <button>k__BackingField; // 0xEC
	
		// Properties
		public GameObject pointerEnter { [CompilerGenerated] /* 0x0018348C-0x0018349C */ get; [CompilerGenerated] /* 0x0018349C-0x001834AC */ set; } // 0x00487F04-0x00487F0C 0x00487F98-0x00487FA0
		public GameObject lastPress { [CompilerGenerated] /* 0x001834AC-0x001834BC */ get; [CompilerGenerated] /* 0x001834BC-0x001834CC */ private set; } // 0x0048E350-0x0048E358 0x0048E358-0x0048E360
		public GameObject rawPointerPress { [CompilerGenerated] /* 0x001834CC-0x001834DC */ get; [CompilerGenerated] /* 0x001834DC-0x001834EC */ set; } // 0x0048E360-0x0048E368 0x0048E368-0x0048E370
		public GameObject pointerDrag { [CompilerGenerated] /* 0x001834EC-0x001834FC */ get; [CompilerGenerated] /* 0x001834FC-0x0018350C */ set; } // 0x0048E370-0x0048E378 0x0048E378-0x0048E380
		public RaycastResult pointerCurrentRaycast { [CompilerGenerated] /* 0x0018350C-0x0018351C */ get; [CompilerGenerated] /* 0x0018351C-0x0018352C */ set; } // 0x0048E380-0x0048E3A8 0x0048E3A8-0x0048E41C
		public RaycastResult pointerPressRaycast { [CompilerGenerated] /* 0x0018352C-0x0018353C */ get; [CompilerGenerated] /* 0x0018353C-0x0018354C */ set; } // 0x0048E41C-0x0048E444 0x0048E444-0x0048E4B8
		public bool eligibleForClick { [CompilerGenerated] /* 0x0018354C-0x0018355C */ get; [CompilerGenerated] /* 0x0018355C-0x0018356C */ set; } // 0x0048E4B8-0x0048E4C0 0x0048E2E8-0x0048E2F0
		public int pointerId { [CompilerGenerated] /* 0x0018356C-0x0018357C */ get; [CompilerGenerated] /* 0x0018357C-0x0018358C */ set; } // 0x0048E4C0-0x0048E4C8 0x0048E2F0-0x0048E2F8
		public Vector2 position { [CompilerGenerated] /* 0x0018358C-0x0018359C */ get; [CompilerGenerated] /* 0x0018359C-0x001835AC */ set; } // 0x0048D7DC-0x0048D7F0 0x0048E2F8-0x0048E304
		public Vector2 delta { [CompilerGenerated] /* 0x001835AC-0x001835BC */ get; [CompilerGenerated] /* 0x001835BC-0x001835CC */ set; } // 0x0048E4C8-0x0048E4DC 0x0048E304-0x0048E310
		public Vector2 pressPosition { [CompilerGenerated] /* 0x001835CC-0x001835DC */ get; [CompilerGenerated] /* 0x001835DC-0x001835EC */ set; } // 0x0048E4DC-0x0048E4F0 0x0048E310-0x0048E31C
		[Obsolete] // 0x00183F84-0x00183FB8
		public Vector3 worldPosition { [CompilerGenerated] /* 0x001835EC-0x001835FC */ get; [CompilerGenerated] /* 0x001835FC-0x0018360C */ set; } // 0x0048E4F0-0x0048E504 0x0048E504-0x0048E510
		[Obsolete] // 0x00183FB8-0x00183FEC
		public Vector3 worldNormal { [CompilerGenerated] /* 0x0018360C-0x0018361C */ get; [CompilerGenerated] /* 0x0018361C-0x0018362C */ set; } // 0x0048E510-0x0048E524 0x0048E524-0x0048E530
		public float clickTime { [CompilerGenerated] /* 0x0018362C-0x0018363C */ get; [CompilerGenerated] /* 0x0018363C-0x0018364C */ set; } // 0x0048E530-0x0048E538 0x0048E31C-0x0048E324
		public int clickCount { [CompilerGenerated] /* 0x0018364C-0x0018365C */ get; [CompilerGenerated] /* 0x0018365C-0x0018366C */ set; } // 0x0048E538-0x0048E540 0x0048E324-0x0048E32C
		public Vector2 scrollDelta { [CompilerGenerated] /* 0x0018366C-0x0018367C */ get; [CompilerGenerated] /* 0x0018367C-0x0018368C */ set; } // 0x0048E540-0x0048E554 0x0048E32C-0x0048E338
		public bool useDragThreshold { [CompilerGenerated] /* 0x0018368C-0x0018369C */ get; [CompilerGenerated] /* 0x0018369C-0x001836AC */ set; } // 0x0048E554-0x0048E55C 0x0048E338-0x0048E340
		public bool dragging { [CompilerGenerated] /* 0x001836AC-0x001836BC */ get; [CompilerGenerated] /* 0x001836BC-0x001836CC */ set; } // 0x0048E55C-0x0048E564 0x0048E340-0x0048E348
		public InputButton button { [CompilerGenerated] /* 0x001836CC-0x001836DC */ get; [CompilerGenerated] /* 0x001836DC-0x001836EC */ set; } // 0x0048E564-0x0048E56C 0x0048E348-0x0048E350
		public Camera enterEventCamera { get; } // 0x0048E5FC-0x0048E6BC 
		public Camera pressEventCamera { get; } // 0x0048E6BC-0x0048E77C 
		public GameObject pointerPress { get; set; } // 0x0048E77C-0x0048E784 0x0048E784-0x0048E824
	
		// Nested types
		public enum InputButton // TypeDefIndex: 2597
		{
			Left = 0,
			Right = 1,
			Middle = 2
		}
	
		public enum FramePressState // TypeDefIndex: 2598
		{
			Pressed = 0,
			Released = 1,
			PressedAndReleased = 2,
			NotChanged = 3
		}
	
		// Constructors
		public PointerEventData(EventSystem eventSystem); // 0x0048E190-0x0048E2E8
	
		// Methods
		public bool IsPointerMoving(); // 0x0048E56C-0x0048E5B4
		public bool IsScrolling(); // 0x0048E5B4-0x0048E5FC
		public override string ToString(); // 0x0048E824-0x0048F7FC
	}

	public class BaseInput : UIBehaviour // TypeDefIndex: 2599
	{
		// Properties
		public virtual string compositionString { get; } // 0x00486AB8-0x00486AC0 
		public virtual IMECompositionMode imeCompositionMode { get; set; } // 0x00486AC0-0x00486AC8 0x00486AC8-0x00486AD4
		public virtual Vector2 compositionCursorPos { get; set; } // 0x00486AD4-0x00486B00 0x00486B00-0x00486B10
		public virtual bool mousePresent { get; } // 0x00486B10-0x00486B18 
		public virtual Vector2 mousePosition { get; } // 0x00486B3C-0x00486BEC 
		public virtual Vector2 mouseScrollDelta { get; } // 0x00486BEC-0x00486C18 
		public virtual bool touchSupported { get; } // 0x00486C18-0x00486C20 
		public virtual int touchCount { get; } // 0x00486C20-0x00486C28 
	
		// Constructors
		public BaseInput(); // 0x00486AA8-0x00486AB0
	
		// Methods
		public virtual bool GetMouseButtonDown(int button); // 0x00486B18-0x00486B24
		public virtual bool GetMouseButtonUp(int button); // 0x00486B24-0x00486B30
		public virtual bool GetMouseButton(int button); // 0x00486B30-0x00486B3C
		public virtual Touch GetTouch(int index); // 0x00486C28-0x00486C88
		public virtual float GetAxisRaw(string axisName); // 0x00486C88-0x00486C94
		public virtual bool GetButtonDown(string buttonName); // 0x00486C94-0x00486CA0
	}

	[RequireComponent] // 0x0017FBB0-0x0017FC28
	public abstract class BaseInputModule : UIBehaviour // TypeDefIndex: 2600
	{
		// Fields
		[NonSerialized]
		protected List<RaycastResult> m_RaycastResultCache; // 0x0C
		private AxisEventData m_AxisEventData; // 0x10
		private EventSystem m_EventSystem; // 0x14
		private BaseEventData m_BaseEventData; // 0x18
		protected BaseInput m_InputOverride; // 0x1C
		private BaseInput m_DefaultInput; // 0x20
	
		// Properties
		public BaseInput input { get; } // 0x00486D2C-0x00486FE4 
		public BaseInput inputOverride { get; set; } // 0x00486FE4-0x00486FEC 0x00486FEC-0x00486FF4
		protected EventSystem eventSystem { get; } // 0x00486FF4-0x00486FFC 
	
		// Constructors
		protected BaseInputModule(); // 0x00486CA0-0x00486D2C
	
		// Methods
		protected override void OnEnable(); // 0x00486FFC-0x00487080
		protected override void OnDisable(); // 0x0048723C-0x00487264
		public abstract void Process();
		protected static RaycastResult FindFirstRaycast(List<RaycastResult> candidates); // 0x00487268-0x00487434
		protected static MoveDirection DetermineMoveDirection(float x, float y); // 0x00487434-0x00487440
		protected static MoveDirection DetermineMoveDirection(float x, float y, float deadZone); // 0x00487440-0x00487558
		protected static GameObject FindCommonRoot(GameObject g1, GameObject g2); // 0x00487558-0x004877A8
		protected void HandlePointerExitAndEnter(PointerEventData currentPointerData, GameObject newEnterTarget); // 0x004877A8-0x00487F04
		protected virtual AxisEventData GetAxisEventData(float x, float y, float moveDeadZone); // 0x0048802C-0x00488158
		protected virtual BaseEventData GetBaseEventData(); // 0x00488158-0x00488208
		public virtual bool IsPointerOverGameObject(int pointerId); // 0x00488208-0x00488210
		public virtual bool ShouldActivateModule(); // 0x00488210-0x00488260
		public virtual void DeactivateModule(); // 0x00488260-0x00488264
		public virtual void ActivateModule(); // 0x00488264-0x00488268
		public virtual void UpdateModule(); // 0x00488268-0x0048826C
		public virtual bool IsModuleSupported(); // 0x0048826C-0x00488274
	}

	public abstract class PointerInputModule : BaseInputModule // TypeDefIndex: 2601
	{
		// Fields
		public const int kMouseLeftId = -1; // Metadata: 0x0021B154
		public const int kMouseRightId = -2; // Metadata: 0x0021B158
		public const int kMouseMiddleId = -3; // Metadata: 0x0021B15C
		public const int kFakeTouchesId = -4; // Metadata: 0x0021B160
		protected Dictionary<int, PointerEventData> m_PointerData; // 0x24
		private readonly MouseState m_MouseState; // 0x28
	
		// Nested types
		protected class ButtonState // TypeDefIndex: 2602
		{
			// Fields
			private PointerEventData.InputButton m_Button; // 0x08
			private MouseButtonEventData m_EventData; // 0x0C
	
			// Properties
			public MouseButtonEventData eventData { get; set; } // 0x0049127C-0x00491284 0x00491284-0x0049128C
			public PointerEventData.InputButton button { get; set; } // 0x0049128C-0x00491294 0x00491294-0x0049129C
	
			// Constructors
			public ButtonState(); // 0x0049126C-0x0049127C
		}
	
		protected class MouseState // TypeDefIndex: 2603
		{
			// Fields
			private List<ButtonState> m_TrackedButtons; // 0x08
	
			// Constructors
			public MouseState(); // 0x0048F8A4-0x0048F930
	
			// Methods
			public bool AnyPressesThisFrame(); // 0x004912D4-0x004913D0
			public bool AnyReleasesThisFrame(); // 0x004913D0-0x004914CC
			public ButtonState GetButtonState(PointerEventData.InputButton button); // 0x004914CC-0x004916F0
			public void SetButtonState(PointerEventData.InputButton button, PointerEventData.FramePressState stateForMouseButton, PointerEventData data); // 0x004906D0-0x0049072C
		}
	
		public class MouseButtonEventData // TypeDefIndex: 2604
		{
			// Fields
			public PointerEventData.FramePressState buttonState; // 0x08
			public PointerEventData buttonData; // 0x0C
	
			// Constructors
			public MouseButtonEventData(); // 0x0049129C-0x004912A4
	
			// Methods
			public bool PressedThisFrame(); // 0x004912A4-0x004912BC
			public bool ReleasedThisFrame(); // 0x004912BC-0x004912D4
		}
	
		// Constructors
		protected PointerInputModule(); // 0x0048F7FC-0x0048F8A4
	
		// Methods
		protected bool GetPointerData(int id, out PointerEventData data, bool create); // 0x0048F930-0x0048FA44
		protected void RemovePointerData(PointerEventData data); // 0x0048FA44-0x0048FAD8
		protected PointerEventData GetTouchPointerEventData(Touch input, out bool pressed, out bool released); // 0x0048FAD8-0x0048FF48
		protected void CopyFromTo(PointerEventData from, PointerEventData to); // 0x0048FF48-0x004900B0
		protected PointerEventData.FramePressState StateForMouseButton(int buttonId); // 0x004900B0-0x00490150
		protected virtual MouseState GetMousePointerEventData(); // 0x00490150-0x00490164
		protected virtual MouseState GetMousePointerEventData(int id); // 0x00490164-0x004906D0
		protected PointerEventData GetLastPointerEventData(int id); // 0x0049072C-0x00490758
		private static bool ShouldStartDrag(Vector2 pressPos, Vector2 currentPos, float threshold, bool useDragThreshold); // 0x00490758-0x00490854
		protected virtual void ProcessMove(PointerEventData pointerEvent); // 0x00490854-0x00490898
		protected virtual void ProcessDrag(PointerEventData pointerEvent); // 0x00490898-0x00490B5C
		public override bool IsPointerOverGameObject(int pointerId); // 0x00490B5C-0x00490C24
		protected void ClearSelection(); // 0x00490C24-0x00490E00
		public override string ToString(); // 0x00490E00-0x00491150
		protected void DeselectIfSelectionChanged(GameObject currentOverGo, BaseEventData pointerEvent); // 0x00491150-0x0049126C
	}

	[AddComponentMenu] // 0x0017FC28-0x0017FC74
	public class StandaloneInputModule : PointerInputModule // TypeDefIndex: 2605
	{
		// Fields
		private float m_PrevActionTime; // 0x2C
		private Vector2 m_LastMoveVector; // 0x30
		private int m_ConsecutiveMoveCount; // 0x38
		private Vector2 m_LastMousePosition; // 0x3C
		private Vector2 m_MousePosition; // 0x44
		private GameObject m_CurrentFocusedGameObject; // 0x4C
		private PointerEventData m_InputPointerEvent; // 0x50
		[SerializeField] // 0x00181558-0x00181568
		private string m_HorizontalAxis; // 0x54
		[SerializeField] // 0x00181568-0x00181578
		private string m_VerticalAxis; // 0x58
		[SerializeField] // 0x00181578-0x00181588
		private string m_SubmitButton; // 0x5C
		[SerializeField] // 0x00181588-0x00181598
		private string m_CancelButton; // 0x60
		[SerializeField] // 0x00181598-0x001815A8
		private float m_InputActionsPerSecond; // 0x64
		[SerializeField] // 0x001815A8-0x001815B8
		private float m_RepeatDelay; // 0x68
		[FormerlySerializedAs] // 0x001815B8-0x00181618
		[SerializeField] // 0x001815B8-0x00181618
		private bool m_ForceModuleActive; // 0x6C
	
		// Properties
		[Obsolete] // 0x00183FEC-0x00184024
		public InputMode inputMode { get; } // 0x00491A4C-0x00491A54 
		[Obsolete] // 0x00184024-0x00184058
		public bool allowActivationOnMobileDevice { get; set; } // 0x00491A54-0x00491A5C 0x00491A5C-0x00491A64
		public bool forceModuleActive { get; set; } // 0x00491A64-0x00491A6C 0x00491A6C-0x00491A74
		public float inputActionsPerSecond { get; set; } // 0x00491A74-0x00491A7C 0x00491A7C-0x00491A84
		public float repeatDelay { get; set; } // 0x00491A84-0x00491A8C 0x00491A8C-0x00491A94
		public string horizontalAxis { get; set; } // 0x00491A94-0x00491A9C 0x00491A9C-0x00491AA4
		public string verticalAxis { get; set; } // 0x00491AA4-0x00491AAC 0x00491AAC-0x00491AB4
		public string submitButton { get; set; } // 0x00491AB4-0x00491ABC 0x00491ABC-0x00491AC4
		public string cancelButton { get; set; } // 0x00491AC4-0x00491ACC 0x00491ACC-0x00491AD4
	
		// Nested types
		[Obsolete] // 0x0017FC74-0x0017FCAC
		public enum InputMode // TypeDefIndex: 2606
		{
			Mouse = 0,
			Buttons = 1
		}
	
		// Constructors
		protected StandaloneInputModule(); // 0x0049198C-0x00491A4C
	
		// Methods
		private bool ShouldIgnoreEventsOnNoFocus(); // 0x00491AD4-0x00491AFC
		public override void UpdateModule(); // 0x00491AFC-0x00491CC4
		public override bool IsModuleSupported(); // 0x00491CC4-0x00491D50
		public override bool ShouldActivateModule(); // 0x00491D50-0x00492014
		public override void ActivateModule(); // 0x00492014-0x004921D0
		public override void DeactivateModule(); // 0x004921D0-0x004921D4
		public override void Process(); // 0x004921D4-0x004922BC
		private bool ProcessTouchEvents(); // 0x0049299C-0x00492B94
		protected void ProcessTouchPress(PointerEventData pointerEvent, bool pressed, bool released); // 0x00492B9C-0x004932F4
		protected bool SendSubmitEventToSelectedObject(); // 0x00492760-0x0049299C
		private Vector2 GetRawMoveVector(); // 0x004932F4-0x004934CC
		protected bool SendMoveEventToSelectedObject(); // 0x0049240C-0x00492760
		protected void ProcessMouseEvent(); // 0x00492B94-0x00492B9C
		[Obsolete] // 0x001836EC-0x00183720
		protected virtual bool ForceAutoSelect(); // 0x00493814-0x0049381C
		protected void ProcessMouseEvent(int id); // 0x004934CC-0x00493814
		protected bool SendUpdateEventToSelectedObject(); // 0x004922BC-0x0049240C
		protected void ProcessMousePress(MouseButtonEventData data); // 0x0049381C-0x00493F34
		protected GameObject GetCurrentFocusedGameObject(); // 0x00493F34-0x00493F3C
	}

	[AddComponentMenu] // 0x0017FCAC-0x0017FD20
	[Obsolete] // 0x0017FCAC-0x0017FD20
	public class TouchInputModule : PointerInputModule // TypeDefIndex: 2607
	{
		// Fields
		private Vector2 m_LastMousePosition; // 0x2C
		private Vector2 m_MousePosition; // 0x34
		private PointerEventData m_InputPointerEvent; // 0x3C
		[FormerlySerializedAs] // 0x00181618-0x00181678
		[SerializeField] // 0x00181618-0x00181678
		private bool m_ForceModuleActive; // 0x40
	
		// Properties
		[Obsolete] // 0x00184058-0x0018408C
		public bool allowActivationOnStandalone { get; set; } // 0x00493F40-0x00493F48 0x00493F48-0x00493F50
		public bool forceModuleActive { get; set; } // 0x00493F50-0x00493F58 0x00493F58-0x00493F60
	
		// Constructors
		protected TouchInputModule(); // 0x00493F3C-0x00493F40
	
		// Methods
		public override void UpdateModule(); // 0x00493F60-0x00494110
		public override bool IsModuleSupported(); // 0x00494110-0x00494158
		public override bool ShouldActivateModule(); // 0x00494158-0x004942C4
		private bool UseFakeInput(); // 0x004942C4-0x00494300
		public override void Process(); // 0x00494300-0x00494330
		private void FakeTouches(); // 0x00494330-0x004944EC
		private void ProcessTouchEvents(); // 0x004944EC-0x004946BC
		protected void ProcessTouchPress(PointerEventData pointerEvent, bool pressed, bool released); // 0x004946BC-0x00494E14
		public override void DeactivateModule(); // 0x00494E14-0x00494E18
		public override string ToString(); // 0x00494E18-0x004950BC
	}

	public abstract class BaseRaycaster : UIBehaviour // TypeDefIndex: 2608
	{
		// Properties
		public abstract Camera eventCamera { get; }
		[Obsolete] // 0x0018408C-0x001840F4
		public virtual int priority { get; } // 0x0048827C-0x00488284 
		public virtual int sortOrderPriority { get; } // 0x00488284-0x0048828C 
		public virtual int renderOrderPriority { get; } // 0x0048828C-0x00488294 
	
		// Constructors
		protected BaseRaycaster(); // 0x00488274-0x0048827C
	
		// Methods
		public abstract void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList);
		public override string ToString(); // 0x00488294-0x004886A8
		protected override void OnEnable(); // 0x004886A8-0x00488728
		protected override void OnDisable(); // 0x0048885C-0x004888DC
	}

	[AddComponentMenu] // 0x0017FD20-0x0017FDD4
	[RequireComponent] // 0x0017FD20-0x0017FDD4
	public class Physics2DRaycaster : PhysicsRaycaster // TypeDefIndex: 2609
	{
		// Fields
		private RaycastHit2D[] m_Hits; // 0x20
	
		// Constructors
		protected Physics2DRaycaster(); // 0x0048CB98-0x0048CBD0
	
		// Methods
		public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList); // 0x0048CC08-0x0048D494
	}

	[AddComponentMenu] // 0x0017FDD4-0x0017FE84
	[RequireComponent] // 0x0017FDD4-0x0017FE84
	public class PhysicsRaycaster : BaseRaycaster // TypeDefIndex: 2610
	{
		// Fields
		protected const int kNoEventMaskSet = -1; // Metadata: 0x0021B16C
		protected Camera m_EventCamera; // 0x0C
		[SerializeField] // 0x00181678-0x00181688
		protected LayerMask m_EventMask; // 0x10
		[SerializeField] // 0x00181688-0x00181698
		protected int m_MaxRayIntersections; // 0x14
		protected int m_LastMaxRayIntersections; // 0x18
		private RaycastHit[] m_Hits; // 0x1C
		[CompilerGenerated] // 0x00181698-0x001816A8
		private static Comparison<RaycastHit> <>f__am$cache0; // 0x00
	
		// Properties
		public override Camera eventCamera { get; } // 0x0048D7F0-0x0048D8B8 
		public virtual int depth { get; } // 0x0048D8B8-0x0048D9A8 
		public int finalEventMask { get; } // 0x0048D6DC-0x0048D7DC 
		public LayerMask eventMask { get; set; } // 0x0048D9A8-0x0048D9B0 0x0048D9B0-0x0048D9B8
		public int maxRayIntersections { get; set; } // 0x0048D6D4-0x0048D6DC 0x0048D9B8-0x0048D9C0
	
		// Constructors
		protected PhysicsRaycaster(); // 0x0048CBD0-0x0048CC08
	
		// Methods
		protected void ComputeRayAndDistance(PointerEventData eventData, out Ray ray, out float distanceToClipPlane); // 0x0048D494-0x0048D6D4
		public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList); // 0x0048D9C0-0x0048E0C4
		[CompilerGenerated] // 0x00183720-0x00183730
		private static int <Raycast>m__0(RaycastHit r1, RaycastHit r2); // 0x0048E0C4-0x0048E190
	}
}

namespace UnityEngine.UI.CoroutineTween
{
	internal interface ITweenValue // TypeDefIndex: 2611
	{
		// Properties
		bool ignoreTimeScale { get; }
		float duration { get; }
	
		// Methods
		void TweenValue(float floatPercentage);
		bool ValidTarget();
	}

	internal struct ColorTween : ITweenValue // TypeDefIndex: 2612
	{
		// Fields
		private ColorTweenCallback m_Target; // 0x00
		private Color m_StartColor; // 0x04
		private Color m_TargetColor; // 0x14
		private ColorTweenMode m_TweenMode; // 0x24
		private float m_Duration; // 0x28
		private bool m_IgnoreTimeScale; // 0x2C
	
		// Properties
		public Color startColor { get; set; } // 0x0049A404-0x0049A420 0x0049A420-0x0049A430
		public Color targetColor { get; set; } // 0x0049A430-0x0049A450 0x0049A450-0x0049A460
		public ColorTweenMode tweenMode { get; set; } // 0x0049A460-0x0049A470 0x0049A470-0x0049A480
		public float duration { get; set; } // 0x0049A480-0x0049A490 0x0049A490-0x0049A4A0
		public bool ignoreTimeScale { get; set; } // 0x0049A4A0-0x0049A4B0 0x0049A4B0-0x0049A5D4
	
		// Nested types
		public enum ColorTweenMode // TypeDefIndex: 2613
		{
			All = 0,
			RGB = 1,
			Alpha = 2
		}
	
		public class ColorTweenCallback : UnityEvent<Color> // TypeDefIndex: 2614
		{
			// Constructors
			public ColorTweenCallback(); // 0x0049A688-0x0049A6EC
		}
	
		// Methods
		public void TweenValue(float floatPercentage); // 0x0049A5D4-0x0049A688
		public void AddOnChangedCallback(UnityAction<Color> callback); // 0x0049A6EC-0x0049A6F4
		public bool GetIgnoreTimescale(); // 0x0049A6F4-0x0049A6FC
		public float GetDuration(); // 0x0049A6FC-0x0049A704
		public bool ValidTarget(); // 0x0049A704-0x0049A770
	}

	internal struct FloatTween : ITweenValue // TypeDefIndex: 2615
	{
		// Fields
		private FloatTweenCallback m_Target; // 0x00
		private float m_StartValue; // 0x04
		private float m_TargetValue; // 0x08
		private float m_Duration; // 0x0C
		private bool m_IgnoreTimeScale; // 0x10
	
		// Properties
		public float startValue { get; set; } // 0x0049A770-0x0049A778 0x0049A778-0x0049A780
		public float targetValue { get; set; } // 0x0049A780-0x0049A788 0x0049A788-0x0049A798
		public float duration { get; set; } // 0x0049A798-0x0049A7A0 0x0049A7A0-0x0049A7B0
		public bool ignoreTimeScale { get; set; } // 0x0049A7B0-0x0049A7B8 0x0049A7B8-0x0049A8B8
	
		// Nested types
		public class FloatTweenCallback : UnityEvent<float> // TypeDefIndex: 2616
		{
			// Constructors
			public FloatTweenCallback(); // 0x0049A96C-0x0049A9D0
		}
	
		// Methods
		public void TweenValue(float floatPercentage); // 0x0049A8B8-0x0049A96C
		public void AddOnChangedCallback(UnityAction<float> callback); // 0x0049A9D0-0x0049A9D8
		public bool GetIgnoreTimescale(); // 0x0049A9D8-0x0049A9E0
		public float GetDuration(); // 0x0049A9E0-0x0049A9E8
		public bool ValidTarget(); // 0x0049A9E8-0x0049A9F8
	}

	internal class TweenRunner<T> // TypeDefIndex: 2617
		where T : struct, ITweenValue
	{
		// Fields
		protected MonoBehaviour m_CoroutineContainer;
		protected IEnumerator m_Tween;
	
		// Nested types
		[CompilerGenerated] // 0x00180E28-0x00180E38
		private sealed class <Start>c__Iterator0 : IEnumerator<object> // TypeDefIndex: 2618
		{
			// Fields
			internal T tweenInfo;
			internal float <elapsedTime>__0;
			internal float <percentage>__1;
			internal object $current;
			internal bool $disposing;
			internal int $PC;
	
			// Properties
			object IEnumerator<object>.Current { [DebuggerHidden] /* 0x00183CF8-0x00183D08 */ get; }
			object IEnumerator.Current { [DebuggerHidden] /* 0x00183D08-0x00183D18 */ get; }
	
			// Constructors
			[DebuggerHidden] // 0x00183CE8-0x00183CF8
			public <Start>c__Iterator0();
	
			// Methods
			public bool MoveNext();
			[DebuggerHidden] // 0x00183D18-0x00183D28
			public void Dispose();
			[DebuggerHidden] // 0x00183D28-0x00183D38
			public void Reset();
		}
	
		// Constructors
		public TweenRunner();
	
		// Methods
		[DebuggerHidden] // 0x00183730-0x00183740
		private static IEnumerator Start(T tweenInfo);
		public void Init(MonoBehaviour coroutineContainer);
		public void StartTween(T info);
		public void StopTween();
	}
}

namespace UnityEngine.UI
{
	[Serializable]
	public class AnimationTriggers // TypeDefIndex: 2619
	{
		// Fields
		private const string kDefaultNormalAnimName = "Normal"; // Metadata: 0x0021B17C
		private const string kDefaultSelectedAnimName = "Highlighted"; // Metadata: 0x0021B186
		private const string kDefaultPressedAnimName = "Pressed"; // Metadata: 0x0021B195
		private const string kDefaultDisabledAnimName = "Disabled"; // Metadata: 0x0021B1A0
		[FormerlySerializedAs] // 0x001816A8-0x001816F8
		[SerializeField] // 0x001816A8-0x001816F8
		private string m_NormalTrigger; // 0x08
		[FormerlySerializedAs] // 0x001816F8-0x00181780
		[FormerlySerializedAs] // 0x001816F8-0x00181780
		[SerializeField] // 0x001816F8-0x00181780
		private string m_HighlightedTrigger; // 0x0C
		[FormerlySerializedAs] // 0x00181780-0x001817D0
		[SerializeField] // 0x00181780-0x001817D0
		private string m_PressedTrigger; // 0x10
		[FormerlySerializedAs] // 0x001817D0-0x00181820
		[SerializeField] // 0x001817D0-0x00181820
		private string m_DisabledTrigger; // 0x14
	
		// Properties
		public string normalTrigger { get; set; } // 0x00495218-0x00495220 0x00495220-0x00495228
		public string highlightedTrigger { get; set; } // 0x00495228-0x00495230 0x00495230-0x00495238
		public string pressedTrigger { get; set; } // 0x00495238-0x00495240 0x00495240-0x00495248
		public string disabledTrigger { get; set; } // 0x00495248-0x00495250 0x00495250-0x00495258
	
		// Constructors
		public AnimationTriggers(); // 0x00495170-0x00495218
	}

	[AddComponentMenu] // 0x0017FE84-0x0017FEC0
	public class Button : Selectable, IPointerClickHandler, ISubmitHandler // TypeDefIndex: 2620
	{
		// Fields
		[FormerlySerializedAs] // 0x00181820-0x00181868
		[SerializeField] // 0x00181820-0x00181868
		private ButtonClickedEvent m_OnClick; // 0x94
	
		// Properties
		public ButtonClickedEvent onClick { get; set; } // 0x00496090-0x00496098 0x00496098-0x004960A0
	
		// Nested types
		[Serializable]
		public class ButtonClickedEvent : UnityEvent // TypeDefIndex: 2621
		{
			// Constructors
			public ButtonClickedEvent(); // 0x00496088-0x00496090
		}
	
		[CompilerGenerated] // 0x00180E38-0x00180E48
		private sealed class <OnFinishSubmit>c__Iterator0 : IEnumerator<object> // TypeDefIndex: 2622
		{
			// Fields
			internal float <fadeTime>__0; // 0x08
			internal float <elapsedTime>__0; // 0x0C
			internal Button $this; // 0x10
			internal object $current; // 0x14
			internal bool $disposing; // 0x18
			internal int $PC; // 0x1C
	
			// Properties
			object IEnumerator<object>.Current { [DebuggerHidden] /* 0x00183D48-0x00183D58 */ get; } // 0x00496400-0x00496408 
			object IEnumerator.Current { [DebuggerHidden] /* 0x00183D58-0x00183D68 */ get; } // 0x00496408-0x00496410 
	
			// Constructors
			[DebuggerHidden] // 0x00183D38-0x00183D48
			public <OnFinishSubmit>c__Iterator0(); // 0x004962A4-0x004962AC
	
			// Methods
			public bool MoveNext(); // 0x004962AC-0x00496400
			[DebuggerHidden] // 0x00183D68-0x00183D78
			public void Dispose(); // 0x00496410-0x00496424
			[DebuggerHidden] // 0x00183D78-0x00183D88
			public void Reset(); // 0x00496424-0x004964AC
		}
	
		// Constructors
		protected Button(); // 0x00495FE0-0x00496088
	
		// Methods
		private void Press(); // 0x004960A0-0x00496164
		public virtual void OnPointerClick(PointerEventData eventData); // 0x00496164-0x0049619C
		public virtual void OnSubmit(BaseEventData eventData); // 0x0049619C-0x00496220
		[DebuggerHidden] // 0x00183740-0x00183750
		private IEnumerator OnFinishSubmit(); // 0x00496220-0x004962A4
	}

	public enum CanvasUpdate // TypeDefIndex: 2623
	{
		Prelayout = 0,
		Layout = 1,
		PostLayout = 2,
		PreRender = 3,
		LatePreRender = 4,
		MaxUpdateValue = 5
	}

	public interface ICanvasElement // TypeDefIndex: 2624
	{
		// Properties
		Transform transform { get; }
	
		// Methods
		void Rebuild(CanvasUpdate executing);
		void LayoutComplete();
		void GraphicUpdateComplete();
		bool IsDestroyed();
	}

	public class CanvasUpdateRegistry // TypeDefIndex: 2625
	{
		// Fields
		private static CanvasUpdateRegistry s_Instance; // 0x00
		private bool m_PerformingLayoutUpdate; // 0x08
		private bool m_PerformingGraphicUpdate; // 0x09
		private readonly IndexedSet<ICanvasElement> m_LayoutRebuildQueue; // 0x0C
		private readonly IndexedSet<ICanvasElement> m_GraphicRebuildQueue; // 0x10
		private static readonly Comparison<ICanvasElement> s_SortLayoutFunction; // 0x04
		[CompilerGenerated] // 0x00181868-0x00181878
		private static Comparison<ICanvasElement> <>f__mg$cache0; // 0x08
	
		// Properties
		public static CanvasUpdateRegistry instance { get; } // 0x00497000-0x00497128 
	
		// Constructors
		protected CanvasUpdateRegistry(); // 0x00496F18-0x00497000
		static CanvasUpdateRegistry(); // 0x00498FBC-0x0049908C
	
		// Methods
		private bool ObjectValidForUpdate(ICanvasElement element); // 0x00497128-0x00497230
		private void CleanInvalidItems(); // 0x00497230-0x0049767C
		private void PerformUpdate(); // 0x0049767C-0x00498190
		private static int ParentCount(Transform child); // 0x0049838C-0x004984AC
		private static int SortLayoutList(ICanvasElement x, ICanvasElement y); // 0x004984AC-0x00498658
		public static void RegisterCanvasElementForLayoutRebuild(ICanvasElement element); // 0x00498658-0x004986F4
		public static bool TryRegisterCanvasElementForLayoutRebuild(ICanvasElement element); // 0x004987B4-0x00498850
		private bool InternalRegisterCanvasElementForLayoutRebuild(ICanvasElement element); // 0x004986F4-0x004987B4
		public static void RegisterCanvasElementForGraphicRebuild(ICanvasElement element); // 0x00498850-0x004988EC
		public static bool TryRegisterCanvasElementForGraphicRebuild(ICanvasElement element); // 0x004989D8-0x00498A74
		private bool InternalRegisterCanvasElementForGraphicRebuild(ICanvasElement element); // 0x004988EC-0x004989D8
		public static void UnRegisterCanvasElementForRebuild(ICanvasElement element); // 0x00498A74-0x00498B34
		private void InternalUnRegisterCanvasElementForLayoutRebuild(ICanvasElement element); // 0x00498B34-0x00498CE8
		private void InternalUnRegisterCanvasElementForGraphicRebuild(ICanvasElement element); // 0x00498CE8-0x00498E9C
		public static bool IsRebuildingLayout(); // 0x00498E9C-0x00498F2C
		public static bool IsRebuildingGraphics(); // 0x00498F2C-0x00498FBC
	}

	[Serializable]
	public struct ColorBlock : IEquatable<ColorBlock> // TypeDefIndex: 2626
	{
		// Fields
		[FormerlySerializedAs] // 0x00181878-0x001818C4
		[SerializeField] // 0x00181878-0x001818C4
		private Color m_NormalColor; // 0x00
		[FormerlySerializedAs] // 0x001818C4-0x00181948
		[FormerlySerializedAs] // 0x001818C4-0x00181948
		[SerializeField] // 0x001818C4-0x00181948
		private Color m_HighlightedColor; // 0x10
		[FormerlySerializedAs] // 0x00181948-0x00181998
		[SerializeField] // 0x00181948-0x00181998
		private Color m_PressedColor; // 0x20
		[FormerlySerializedAs] // 0x00181998-0x001819E8
		[SerializeField] // 0x00181998-0x001819E8
		private Color m_DisabledColor; // 0x30
		[Range] // 0x001819E8-0x00181A24
		[SerializeField] // 0x001819E8-0x00181A24
		private float m_ColorMultiplier; // 0x40
		[FormerlySerializedAs] // 0x00181A24-0x00181A74
		[SerializeField] // 0x00181A24-0x00181A74
		private float m_FadeDuration; // 0x44
	
		// Properties
		public Color normalColor { get; set; } // 0x00499840-0x00499850 0x00499850-0x00499870
		public Color highlightedColor { get; set; } // 0x00499870-0x00499880 0x00499880-0x004998A0
		public Color pressedColor { get; set; } // 0x004998A0-0x004998B0 0x004998B0-0x004998D0
		public Color disabledColor { get; set; } // 0x004998D0-0x004998E0 0x004998E0-0x004998F8
		public float colorMultiplier { get; set; } // 0x004998F8-0x00499900 0x00499900-0x00499908
		public float fadeDuration { get; set; } // 0x00499908-0x00499910 0x00499910-0x00499918
		public static ColorBlock defaultColorBlock { get; } // 0x00499918-0x00499CA4 
	
		// Methods
		public override bool Equals(object obj); // 0x00499CA4-0x00499CAC
		public bool Equals(ColorBlock other); // 0x00499CAC-0x00499D68
		public static bool operator ==(ColorBlock point1, ColorBlock point2); // 0x00499D68-0x00499E24
		public static bool operator !=(ColorBlock point1, ColorBlock point2); // 0x00499E24-0x00499F84
		public override int GetHashCode(); // 0x00499F84-0x00499F8C
	}

	public static class DefaultControls // TypeDefIndex: 2627
	{
		// Fields
		private const float kWidth = 160f; // Metadata: 0x0021B1C4
		private const float kThickHeight = 30f; // Metadata: 0x0021B1C8
		private const float kThinHeight = 20f; // Metadata: 0x0021B1CC
		private static Vector2 s_ThickElementSize; // 0x00
		private static Vector2 s_ThinElementSize; // 0x08
		private static Vector2 s_ImageElementSize; // 0x10
		private static Color s_DefaultSelectableColor; // 0x18
		private static Color s_PanelColor; // 0x28
		private static Color s_TextColor; // 0x38
	
		// Nested types
		public struct Resources // TypeDefIndex: 2628
		{
			// Fields
			public Sprite standard; // 0x00
			public Sprite background; // 0x04
			public Sprite inputField; // 0x08
			public Sprite knob; // 0x0C
			public Sprite checkmark; // 0x10
			public Sprite dropdown; // 0x14
			public Sprite mask; // 0x18
		}
	
		// Constructors
		static DefaultControls(); // 0x0049FAD8-0x0049FD04
	
		// Methods
		private static GameObject CreateUIElementRoot(string name, Vector2 size); // 0x0049A9F8-0x0049AAC4
		private static GameObject CreateUIObject(string name, GameObject parent); // 0x0049AAC4-0x0049AB9C
		private static void SetDefaultTextValues(Text lbl); // 0x0049ACEC-0x0049ADE4
		private static void SetDefaultColorTransitionValues(Selectable slider); // 0x0049ADE4-0x0049AE8C
		private static void SetParentAndAlign(GameObject child, GameObject parent); // 0x0049AB9C-0x0049ACEC
		private static void SetLayerRecursively(GameObject go, int layer); // 0x0049AE8C-0x0049AFD4
		public static GameObject CreatePanel(Resources resources); // 0x0049AFD4-0x0049B274
		public static GameObject CreateButton(Resources resources); // 0x0049B274-0x0049B5FC
		public static GameObject CreateText(Resources resources); // 0x0049B5FC-0x0049B70C
		public static GameObject CreateImage(Resources resources); // 0x0049B70C-0x0049B7E0
		public static GameObject CreateRawImage(Resources resources); // 0x0049B7E0-0x0049B8B4
		public static GameObject CreateSlider(Resources resources); // 0x0049B8B4-0x0049C1B8
		public static GameObject CreateScrollbar(Resources resources); // 0x0049C1B8-0x0049C658
		public static GameObject CreateToggle(Resources resources); // 0x0049C658-0x0049CD74
		public static GameObject CreateInputField(Resources resources); // 0x0049CD74-0x0049D428
		public static GameObject CreateDropdown(Resources resources); // 0x0049D428-0x0049ECC0
		public static GameObject CreateScrollView(Resources resources); // 0x0049F07C-0x0049FAD8
	}

	[AddComponentMenu] // 0x0017FEC0-0x0017FF68
	[RequireComponent] // 0x0017FEC0-0x0017FF68
	public class Dropdown : Selectable, IPointerClickHandler, ISubmitHandler, ICancelHandler // TypeDefIndex: 2629
	{
		// Fields
		[SerializeField] // 0x00181A74-0x00181A84
		private RectTransform m_Template; // 0x94
		[SerializeField] // 0x00181A84-0x00181A94
		private Text m_CaptionText; // 0x98
		[SerializeField] // 0x00181A94-0x00181AA4
		private UnityEngine.UI.Image m_CaptionImage; // 0x9C
		[SerializeField] // 0x00181AA4-0x00181AD4
		[Space] // 0x00181AA4-0x00181AD4
		private Text m_ItemText; // 0xA0
		[SerializeField] // 0x00181AD4-0x00181AE4
		private UnityEngine.UI.Image m_ItemImage; // 0xA4
		[SerializeField] // 0x00181AE4-0x00181B14
		[Space] // 0x00181AE4-0x00181B14
		private int m_Value; // 0xA8
		[SerializeField] // 0x00181B14-0x00181B44
		[Space] // 0x00181B14-0x00181B44
		private OptionDataList m_Options; // 0xAC
		[SerializeField] // 0x00181B44-0x00181B74
		[Space] // 0x00181B44-0x00181B74
		private DropdownEvent m_OnValueChanged; // 0xB0
		private GameObject m_Dropdown; // 0xB4
		private GameObject m_Blocker; // 0xB8
		private List<DropdownItem> m_Items; // 0xBC
		private TweenRunner<FloatTween> m_AlphaTweenRunner; // 0xC0
		private bool validTemplate; // 0xC4
		private static OptionData s_NoOptionData; // 0x00
	
		// Properties
		public RectTransform template { get; set; } // 0x0049FE0C-0x0049FE14 0x0049ECC0-0x0049ECC8
		public Text captionText { get; set; } // 0x0049FE14-0x0049FE1C 0x0049ECC8-0x0049ECD0
		public UnityEngine.UI.Image captionImage { get; set; } // 0x0049FE1C-0x0049FE24 0x0049FE24-0x0049FE2C
		public Text itemText { get; set; } // 0x0049FE2C-0x0049FE34 0x0049ECD0-0x0049ECD8
		public UnityEngine.UI.Image itemImage { get; set; } // 0x0049FE34-0x0049FE3C 0x0049FE3C-0x0049FE44
		public List<OptionData> options { get; set; } // 0x0049ECD8-0x0049ED04 0x0049FE44-0x0049FE84
		public DropdownEvent onValueChanged { get; set; } // 0x0049FE84-0x0049FE8C 0x0049FE8C-0x0049FE94
		public int value { get; set; } // 0x0049FE94-0x0049FE9C 0x0049FE9C-0x004A001C
	
		// Nested types
		protected internal class DropdownItem : MonoBehaviour, IPointerEnterHandler, ICancelHandler // TypeDefIndex: 2630
		{
			// Fields
			[SerializeField] // 0x00181B74-0x00181B84
			private Text m_Text; // 0x0C
			[SerializeField] // 0x00181B84-0x00181B94
			private UnityEngine.UI.Image m_Image; // 0x10
			[SerializeField] // 0x00181B94-0x00181BA4
			private RectTransform m_RectTransform; // 0x14
			[SerializeField] // 0x00181BA4-0x00181BB4
			private Toggle m_Toggle; // 0x18
	
			// Properties
			public Text text { get; set; } // 0x005DD580-0x005DD588 0x005DD588-0x005DD590
			public UnityEngine.UI.Image image { get; set; } // 0x005DD590-0x005DD598 0x005DD598-0x005DD5A0
			public RectTransform rectTransform { get; set; } // 0x005DD5A0-0x005DD5A8 0x005DD5A8-0x005DD5B0
			public Toggle toggle { get; set; } // 0x005DD50C-0x005DD514 0x005DD5B0-0x005DD5B8
	
			// Constructors
			public DropdownItem(); // 0x005DD578-0x005DD580
	
			// Methods
			public virtual void OnPointerEnter(PointerEventData eventData); // 0x005DD5B8-0x005DD66C
			public virtual void OnCancel(BaseEventData eventData); // 0x005DD66C-0x005DD730
		}
	
		[Serializable]
		public class OptionData // TypeDefIndex: 2631
		{
			// Fields
			[SerializeField] // 0x00181BB4-0x00181BC4
			private string m_Text; // 0x08
			[SerializeField] // 0x00181BC4-0x00181BD4
			private Sprite m_Image; // 0x0C
	
			// Properties
			public string text { get; set; } // 0x005DD7B0-0x005DD7B8 0x005DD758-0x005DD760
			public Sprite image { get; set; } // 0x005DD7B8-0x005DD7C0 0x005DD780-0x005DD788
	
			// Constructors
			public OptionData(); // 0x005DD730-0x005DD738
			public OptionData(string text); // 0x005DD738-0x005DD758
			public OptionData(Sprite image); // 0x005DD760-0x005DD780
			public OptionData(string text, Sprite image); // 0x005DD788-0x005DD7B0
		}
	
		[Serializable]
		public class OptionDataList // TypeDefIndex: 2632
		{
			// Fields
			[SerializeField] // 0x00181BD4-0x00181BE4
			private List<OptionData> m_Options; // 0x08
	
			// Properties
			public List<OptionData> options { get; set; } // 0x005DD854-0x005DD85C 0x005DD84C-0x005DD854
	
			// Constructors
			public OptionDataList(); // 0x005DD7C0-0x005DD84C
		}
	
		[Serializable]
		public class DropdownEvent : UnityEvent<int> // TypeDefIndex: 2633
		{
			// Constructors
			public DropdownEvent(); // 0x005DD514-0x005DD578
		}
	
		[CompilerGenerated] // 0x00180E48-0x00180E58
		private sealed class <Show>c__AnonStorey1 // TypeDefIndex: 2634
		{
			// Fields
			internal DropdownItem item; // 0x08
			internal Dropdown $this; // 0x0C
	
			// Constructors
			public <Show>c__AnonStorey1(); // 0x005DD4BC-0x005DD4C4
	
			// Methods
			internal void <>m__0(bool x); // 0x005DD4C4-0x005DD50C
		}
	
		[CompilerGenerated] // 0x00180E58-0x00180E68
		private sealed class <DelayedDestroyDropdownList>c__Iterator0 : IEnumerator<object> // TypeDefIndex: 2635
		{
			// Fields
			internal float delay; // 0x08
			internal Dropdown $this; // 0x0C
			internal object $current; // 0x10
			internal bool $disposing; // 0x14
			internal int $PC; // 0x18
	
			// Properties
			object IEnumerator<object>.Current { [DebuggerHidden] /* 0x00183D98-0x00183DA8 */ get; } // 0x005DD410-0x005DD418 
			object IEnumerator.Current { [DebuggerHidden] /* 0x00183DA8-0x00183DB8 */ get; } // 0x005DD418-0x005DD420 
	
			// Constructors
			[DebuggerHidden] // 0x00183D88-0x00183D98
			public <DelayedDestroyDropdownList>c__Iterator0(); // 0x005DD118-0x005DD120
	
			// Methods
			public bool MoveNext(); // 0x005DD120-0x005DD410
			[DebuggerHidden] // 0x00183DB8-0x00183DC8
			public void Dispose(); // 0x005DD420-0x005DD434
			[DebuggerHidden] // 0x00183DC8-0x00183DD8
			public void Reset(); // 0x005DD434-0x005DD4BC
		}
	
		// Constructors
		protected Dropdown(); // 0x0049FD04-0x0049FE0C
		static Dropdown(); // 0x004A3544-0x004A35C4
	
		// Methods
		protected override void Awake(); // 0x004A001C-0x004A0218
		protected override void Start(); // 0x004A0218-0x004A021C
		public void RefreshShownValue(); // 0x0049ED04-0x0049F07C
		public void AddOptions(List<OptionData> options); // 0x004A021C-0x004A02AC
		public void AddOptions(List<string> options); // 0x004A02AC-0x004A03E4
		public void AddOptions(List<Sprite> options); // 0x004A03E4-0x004A051C
		public void ClearOptions(); // 0x004A051C-0x004A05A4
		private void SetupTemplate(); // 0x004A05A4-0x004A0D54
		private static T GetOrAddComponent<T>(GameObject go)
			where T : Component;
		public virtual void OnPointerClick(PointerEventData eventData); // 0x004A0D54-0x004A0D58
		public virtual void OnSubmit(BaseEventData eventData); // 0x004A2284-0x004A2288
		public virtual void OnCancel(BaseEventData eventData); // 0x004A2288-0x004A228C
		public void Show(); // 0x004A0D58-0x004A2284
		protected virtual GameObject CreateBlocker(Canvas rootCanvas); // 0x004A2AD8-0x004A2F2C
		protected virtual void DestroyBlocker(GameObject blocker); // 0x004A2F2C-0x004A2FB0
		protected virtual GameObject CreateDropdownList(GameObject template); // 0x004A2FB0-0x004A3040
		protected virtual void DestroyDropdownList(GameObject dropdownList); // 0x004A3040-0x004A30C4
		protected virtual DropdownItem CreateItem(DropdownItem itemTemplate); // 0x004A30C4-0x004A3154
		protected virtual void DestroyItem(DropdownItem item); // 0x004A3154-0x004A3158
		private DropdownItem AddItem(OptionData data, bool selected, DropdownItem itemTemplate, List<DropdownItem> items); // 0x004A23EC-0x004A2978
		private void AlphaFadeList(float duration, float alpha); // 0x004A3158-0x004A3214
		private void AlphaFadeList(float duration, float start, float end); // 0x004A2978-0x004A2AD8
		private void SetAlpha(float alpha); // 0x004A3214-0x004A32F8
		public void Hide(); // 0x004A228C-0x004A23EC
		[DebuggerHidden] // 0x00183750-0x00183760
		private IEnumerator DelayedDestroyDropdownList(float delay); // 0x004A32F8-0x004A33A4
		private void OnSelectItem(Toggle toggle); // 0x004A33A4-0x004A3544
	}

	[Serializable]
	public class FontData : ISerializationCallbackReceiver // TypeDefIndex: 2636
	{
		// Fields
		[FormerlySerializedAs] // 0x00181BE4-0x00181C2C
		[SerializeField] // 0x00181BE4-0x00181C2C
		private Font m_Font; // 0x08
		[FormerlySerializedAs] // 0x00181C2C-0x00181C78
		[SerializeField] // 0x00181C2C-0x00181C78
		private int m_FontSize; // 0x0C
		[FormerlySerializedAs] // 0x00181C78-0x00181CC4
		[SerializeField] // 0x00181C78-0x00181CC4
		private FontStyle m_FontStyle; // 0x10
		[SerializeField] // 0x00181CC4-0x00181CD4
		private bool m_BestFit; // 0x14
		[SerializeField] // 0x00181CD4-0x00181CE4
		private int m_MinSize; // 0x18
		[SerializeField] // 0x00181CE4-0x00181CF4
		private int m_MaxSize; // 0x1C
		[FormerlySerializedAs] // 0x00181CF4-0x00181D40
		[SerializeField] // 0x00181CF4-0x00181D40
		private TextAnchor m_Alignment; // 0x20
		[SerializeField] // 0x00181D40-0x00181D50
		private bool m_AlignByGeometry; // 0x24
		[FormerlySerializedAs] // 0x00181D50-0x00181D9C
		[SerializeField] // 0x00181D50-0x00181D9C
		private bool m_RichText; // 0x25
		[SerializeField] // 0x00181D9C-0x00181DAC
		private HorizontalWrapMode m_HorizontalOverflow; // 0x28
		[SerializeField] // 0x00181DAC-0x00181DBC
		private VerticalWrapMode m_VerticalOverflow; // 0x2C
		[SerializeField] // 0x00181DBC-0x00181DCC
		private float m_LineSpacing; // 0x30
	
		// Properties
		public static FontData defaultFontData { get; } // 0x005DD864-0x005DD9D8 
		public Font font { get; set; } // 0x005DD9D8-0x005DD9E0 0x005DD9E0-0x005DD9E8
		public int fontSize { get; set; } // 0x005DD9E8-0x005DD9F0 0x005DD9F0-0x005DD9F8
		public FontStyle fontStyle { get; set; } // 0x005DD9F8-0x005DDA00 0x005DDA00-0x005DDA08
		public bool bestFit { get; set; } // 0x005DDA08-0x005DDA10 0x005DDA10-0x005DDA18
		public int minSize { get; set; } // 0x005DDA18-0x005DDA20 0x005DDA20-0x005DDA28
		public int maxSize { get; set; } // 0x005DDA28-0x005DDA30 0x005DDA30-0x005DDA38
		public TextAnchor alignment { get; set; } // 0x005DDA38-0x005DDA40 0x005DDA40-0x005DDA48
		public bool alignByGeometry { get; set; } // 0x005DDA48-0x005DDA50 0x005DDA50-0x005DDA58
		public bool richText { get; set; } // 0x005DDA58-0x005DDA60 0x005DDA60-0x005DDA68
		public HorizontalWrapMode horizontalOverflow { get; set; } // 0x005DDA68-0x005DDA70 0x005DDA70-0x005DDA78
		public VerticalWrapMode verticalOverflow { get; set; } // 0x005DDA78-0x005DDA80 0x005DDA80-0x005DDA88
		public float lineSpacing { get; set; } // 0x005DDA88-0x005DDA90 0x005DDA90-0x005DDA98
	
		// Constructors
		public FontData(); // 0x005DD85C-0x005DD864
	
		// Methods
		void ISerializationCallbackReceiver.OnBeforeSerialize(); // 0x005DDA98-0x005DDA9C
		void ISerializationCallbackReceiver.OnAfterDeserialize(); // 0x005DDA9C-0x005DDB64
	}

	public static class FontUpdateTracker // TypeDefIndex: 2637
	{
		// Fields
		private static Dictionary<Font, HashSet<Text>> m_Tracked; // 0x00
		[CompilerGenerated] // 0x00181DCC-0x00181DDC
		private static Action<Font> <>f__mg$cache0; // 0x04
		[CompilerGenerated] // 0x00181DDC-0x00181DEC
		private static Action<Font> <>f__mg$cache1; // 0x08
	
		// Constructors
		static FontUpdateTracker(); // 0x005DE4E0-0x005DE570
	
		// Methods
		public static void TrackText(Text t); // 0x005DDB64-0x005DDF80
		private static void RebuildForFont(Font f); // 0x005DDF80-0x005DE14C
		public static void UntrackText(Text t); // 0x005DE14C-0x005DE4E0
	}

	[DisallowMultipleComponent] // 0x0017FF68-0x0018002C
	[ExecuteAlways] // 0x0017FF68-0x0018002C
	[RequireComponent] // 0x0017FF68-0x0018002C
	[RequireComponent] // 0x0017FF68-0x0018002C
	public abstract class Graphic : UIBehaviour, ICanvasElement // TypeDefIndex: 2638
	{
		// Fields
		protected static Material s_DefaultUI; // 0x00
		protected static Texture2D s_WhiteTexture; // 0x04
		[FormerlySerializedAs] // 0x00181DEC-0x00181E34
		[SerializeField] // 0x00181DEC-0x00181E34
		protected Material m_Material; // 0x0C
		[SerializeField] // 0x00181E34-0x00181E44
		private Color m_Color; // 0x10
		[SerializeField] // 0x00181E44-0x00181E54
		private bool m_RaycastTarget; // 0x20
		[NonSerialized]
		private RectTransform m_RectTransform; // 0x24
		[NonSerialized]
		private CanvasRenderer m_CanvasRenderer; // 0x28
		[NonSerialized]
		private Canvas m_Canvas; // 0x2C
		[NonSerialized]
		private bool m_VertsDirty; // 0x30
		[NonSerialized]
		private bool m_MaterialDirty; // 0x31
		[NonSerialized]
		protected UnityAction m_OnDirtyLayoutCallback; // 0x34
		[NonSerialized]
		protected UnityAction m_OnDirtyVertsCallback; // 0x38
		[NonSerialized]
		protected UnityAction m_OnDirtyMaterialCallback; // 0x3C
		[NonSerialized]
		protected static Mesh s_Mesh; // 0x08
		[NonSerialized]
		private static readonly VertexHelper s_VertexHelper; // 0x0C
		[NonSerialized]
		private readonly TweenRunner<ColorTween> m_ColorTweenRunner; // 0x40
		[CompilerGenerated] // 0x00181E54-0x00181E88
		[DebuggerBrowsable] // 0x00181E54-0x00181E88
		private bool <useLegacyMeshGeneration>k__BackingField; // 0x44
	
		// Properties
		public static Material defaultGraphicMaterial { get; } // 0x005DE674-0x005DE7D8 
		public virtual Color color { get; set; } // 0x005DE7D8-0x005DE7E8 0x005DE7E8-0x005DE834
		public virtual bool raycastTarget { get; set; } // 0x005DE834-0x005DE83C 0x005DE83C-0x005DE844
		protected bool useLegacyMeshGeneration { [CompilerGenerated] /* 0x00183760-0x00183770 */ get; [CompilerGenerated] /* 0x00183770-0x00183780 */ set; } // 0x005DE844-0x005DE84C 0x005DE66C-0x005DE674
		public int depth { get; } // 0x005DF4B4-0x005DF4E4 
		public RectTransform rectTransform { get; } // 0x005DE95C-0x005DE9D0 
		public Canvas canvas { get; } // 0x005DED10-0x005DEDAC 
		public CanvasRenderer canvasRenderer { get; } // 0x005DF4E4-0x005DF558 
		public virtual Material defaultMaterial { get; } // 0x005DF558-0x005DF5D0 
		public virtual Material material { get; set; } // 0x005DF5D0-0x005DF67C 0x005DF67C-0x005DF72C
		public virtual Material materialForRendering { get; } // 0x005DF72C-0x005DF9C8 
		public virtual Texture mainTexture { get; } // 0x005DF9C8-0x005DFA54 
		protected static Mesh workerMesh { get; } // 0x005E0CF8-0x005E0EDC 
		Transform ICanvasElement.transform { get; } // 0x005E2748-0x005E2750 
	
		// Constructors
		protected Graphic(); // 0x005DE570-0x005DE66C
		static Graphic(); // 0x005E26AC-0x005E2748
	
		// Methods
		public virtual void SetAllDirty(); // 0x005DE84C-0x005DE898
		public virtual void SetLayoutDirty(); // 0x005DE898-0x005DE95C
		public virtual void SetVerticesDirty(); // 0x005DE9D0-0x005DEA90
		public virtual void SetMaterialDirty(); // 0x005DEA90-0x005DEB50
		protected override void OnRectTransformDimensionsChange(); // 0x005DEB50-0x005DEC3C
		protected override void OnBeforeTransformParentChanged(); // 0x005DEC3C-0x005DED10
		protected override void OnTransformParentChanged(); // 0x005DEFA8-0x005DF084
		private void CacheCanvas(); // 0x005DF084-0x005DF294
		protected override void OnEnable(); // 0x005DFA54-0x005DFBE4
		protected override void OnDisable(); // 0x005DFBE4-0x005DFD74
		protected override void OnCanvasHierarchyChanged(); // 0x005DFD74-0x005DFED4
		public virtual void OnCullingChanged(); // 0x005DFED4-0x005DFFA0
		public virtual void Rebuild(CanvasUpdate update); // 0x005DFFA0-0x005E0034
		public virtual void LayoutComplete(); // 0x005E0034-0x005E0038
		public virtual void GraphicUpdateComplete(); // 0x005E0038-0x005E003C
		protected virtual void UpdateMaterial(); // 0x005E003C-0x005E0120
		protected virtual void UpdateGeometry(); // 0x005E0120-0x005E0134
		private void DoMeshGeneration(); // 0x005E06D4-0x005E0CF8
		private void DoLegacyMeshGeneration(); // 0x005E0134-0x005E06D4
		[EditorBrowsable] // 0x00183780-0x001837E4
		[Obsolete] // 0x00183780-0x001837E4
		protected virtual void OnFillVBO(List<UIVertex> vbo); // 0x005E0EDC-0x005E0EE0
		[Obsolete] // 0x001837E4-0x00183844
		protected virtual void OnPopulateMesh(Mesh m); // 0x005E0EE0-0x005E0FC0
		protected virtual void OnPopulateMesh(VertexHelper vh); // 0x005E0FC0-0x005E1318
		protected override void OnDidApplyAnimationProperties(); // 0x005E1500-0x005E1510
		public virtual void SetNativeSize(); // 0x005E1510-0x005E1514
		public virtual bool Raycast(Vector2 sp, Camera eventCamera); // 0x005E1514-0x005E1A54
		public Vector2 PixelAdjustPoint(Vector2 point); // 0x005E1A54-0x005E1C08
		public Rect GetPixelAdjustedRect(); // 0x005E1318-0x005E1500
		public virtual void CrossFadeColor(Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha); // 0x005E1C08-0x005E1C58
		public virtual void CrossFadeColor(Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha, bool useRGB); // 0x005E1C58-0x005E1FE4
		private static Color CreateColorFromAlpha(float alpha); // 0x005E1FE4-0x005E2040
		public virtual void CrossFadeAlpha(float alpha, float duration, bool ignoreTimeScale); // 0x005E2040-0x005E2124
		public void RegisterDirtyLayoutCallback(UnityAction action); // 0x005E2124-0x005E2210
		public void UnregisterDirtyLayoutCallback(UnityAction action); // 0x005E2210-0x005E22FC
		public void RegisterDirtyVerticesCallback(UnityAction action); // 0x005E22FC-0x005E23E8
		public void UnregisterDirtyVerticesCallback(UnityAction action); // 0x005E23E8-0x005E24D4
		public void RegisterDirtyMaterialCallback(UnityAction action); // 0x005E24D4-0x005E25C0
		public void UnregisterDirtyMaterialCallback(UnityAction action); // 0x005E25C0-0x005E26AC
	}

	[AddComponentMenu] // 0x0018002C-0x001800DC
	[RequireComponent] // 0x0018002C-0x001800DC
	public class GraphicRaycaster : BaseRaycaster // TypeDefIndex: 2639
	{
		// Fields
		protected const int kNoEventMaskSet = -1; // Metadata: 0x0021B1D0
		[FormerlySerializedAs] // 0x00181E88-0x00181EE0
		[SerializeField] // 0x00181E88-0x00181EE0
		private bool m_IgnoreReversedGraphics; // 0x0C
		[FormerlySerializedAs] // 0x00181EE0-0x00181F30
		[SerializeField] // 0x00181EE0-0x00181F30
		private BlockingObjects m_BlockingObjects; // 0x10
		[SerializeField] // 0x00181F30-0x00181F40
		protected LayerMask m_BlockingMask; // 0x14
		private Canvas m_Canvas; // 0x18
		[NonSerialized]
		private List<Graphic> m_RaycastResults; // 0x1C
		[NonSerialized]
		private static readonly List<Graphic> s_SortedGraphics; // 0x00
		[CompilerGenerated] // 0x00181F40-0x00181F50
		private static Comparison<Graphic> <>f__am$cache0; // 0x04
	
		// Properties
		public override int sortOrderPriority { get; } // 0x005E27FC-0x005E2870 
		public override int renderOrderPriority { get; } // 0x005E2924-0x005E29B8 
		public bool ignoreReversedGraphics { get; set; } // 0x005E29B8-0x005E29C0 0x005E29C0-0x005E29C8
		public BlockingObjects blockingObjects { get; set; } // 0x005E29C8-0x005E29D0 0x005E29D0-0x005E29D8
		private Canvas canvas { get; } // 0x005E2870-0x005E2924 
		public override Camera eventCamera { get; } // 0x005E46E0-0x005E48A8 
	
		// Nested types
		public enum BlockingObjects // TypeDefIndex: 2640
		{
			None = 0,
			TwoD = 1,
			ThreeD = 2,
			All = 3
		}
	
		// Constructors
		protected GraphicRaycaster(); // 0x005E2750-0x005E27FC
		static GraphicRaycaster(); // 0x005E48A8-0x005E4938
	
		// Methods
		public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList); // 0x005E29D8-0x005E3ED4
		private static void Raycast(Canvas canvas, Camera eventCamera, Vector2 pointerPosition, IList<Graphic> foundGraphics, List<Graphic> results); // 0x005E3FFC-0x005E46E0
		[CompilerGenerated] // 0x00183844-0x00183854
		private static int <Raycast>m__0(Graphic g1, Graphic g2); // 0x005E4938-0x005E49A0
	}

	public class GraphicRegistry // TypeDefIndex: 2641
	{
		// Fields
		private static GraphicRegistry s_Instance; // 0x00
		private readonly Dictionary<Canvas, IndexedSet<Graphic>> m_Graphics; // 0x08
		private static readonly List<Graphic> s_EmptyList; // 0x04
	
		// Properties
		public static GraphicRegistry instance { get; } // 0x005E4B0C-0x005E4C34 
	
		// Constructors
		protected GraphicRegistry(); // 0x005E49A0-0x005E4B0C
		static GraphicRegistry(); // 0x005E4C34-0x005E4CC4
	
		// Methods
		public static void RegisterGraphicForCanvas(Canvas c, Graphic graphic); // 0x005DF294-0x005DF4B4
		public static void UnregisterGraphicForCanvas(Canvas c, Graphic graphic); // 0x005DEDAC-0x005DEFA8
		public static IList<Graphic> GetGraphicsForCanvas(Canvas canvas); // 0x005E3ED4-0x005E3FFC
	}

	[Obsolete] // 0x001800DC-0x00180120
	internal interface IGraphicEnabledDisabled // TypeDefIndex: 2642
	{
		// Methods
		void OnSiblingGraphicEnabledDisabled();
	}

	[AddComponentMenu] // 0x00180120-0x0018015C
	public class Image : MaskableGraphic, ISerializationCallbackReceiver, ILayoutElement, ICanvasRaycastFilter // TypeDefIndex: 2643
	{
		// Fields
		protected static Material s_ETC1DefaultUI; // 0x00
		[FormerlySerializedAs] // 0x00181F50-0x00181F98
		[SerializeField] // 0x00181F50-0x00181F98
		private Sprite m_Sprite; // 0x64
		[NonSerialized]
		private Sprite m_OverrideSprite; // 0x68
		[SerializeField] // 0x00181F98-0x00181FA8
		private Type m_Type; // 0x6C
		[SerializeField] // 0x00181FA8-0x00181FB8
		private bool m_PreserveAspect; // 0x70
		[SerializeField] // 0x00181FB8-0x00181FC8
		private bool m_FillCenter; // 0x71
		[SerializeField] // 0x00181FC8-0x00181FD8
		private FillMethod m_FillMethod; // 0x74
		[Range] // 0x00181FD8-0x00182010
		[SerializeField] // 0x00181FD8-0x00182010
		private float m_FillAmount; // 0x78
		[SerializeField] // 0x00182010-0x00182020
		private bool m_FillClockwise; // 0x7C
		[SerializeField] // 0x00182020-0x00182030
		private int m_FillOrigin; // 0x80
		private float m_AlphaHitTestMinimumThreshold; // 0x84
		private bool m_Tracked; // 0x88
		[SerializeField] // 0x00182030-0x00182040
		private bool m_UseSpriteMesh; // 0x89
		private static readonly Vector2[] s_VertScratch; // 0x04
		private static readonly Vector2[] s_UVScratch; // 0x08
		private static readonly Vector3[] s_Xy; // 0x0C
		private static readonly Vector3[] s_Uv; // 0x10
		private static List<Image> m_TrackedTexturelessImages; // 0x14
		private static bool s_Initialized; // 0x18
		[CompilerGenerated] // 0x00182040-0x00182050
		private static Action<SpriteAtlas> <>f__mg$cache0; // 0x1C
	
		// Properties
		public Sprite sprite { get; set; } // 0x005E7B28-0x005E7B30 0x005E7B30-0x005E7BC0
		public Sprite overrideSprite { get; set; } // 0x005E7D08-0x005E7D0C 0x005E7DA8-0x005E7E38
		private Sprite activeSprite { get; } // 0x005E7D0C-0x005E7DA8 
		public Type type { get; set; } // 0x005E7E38-0x005E7E40 0x005E7E40-0x005E7EC8
		public bool preserveAspect { get; set; } // 0x005E7EC8-0x005E7ED0 0x005E7ED0-0x005E7F58
		public bool fillCenter { get; set; } // 0x005E7F58-0x005E7F60 0x005E7F60-0x005E7FE8
		public FillMethod fillMethod { get; set; } // 0x005E7FE8-0x005E7FF0 0x005E7FF0-0x005E8080
		public float fillAmount { get; set; } // 0x005E8080-0x005E8088 0x005E8088-0x005E814C
		public bool fillClockwise { get; set; } // 0x005E814C-0x005E8154 0x005E8154-0x005E81DC
		public int fillOrigin { get; set; } // 0x005E81DC-0x005E81E4 0x005E81E4-0x005E826C
		[Obsolete] // 0x001840F4-0x00184128
		public float eventAlphaThreshold { get; set; } // 0x005E826C-0x005E8280 0x005E8288-0x005E829C
		public float alphaHitTestMinimumThreshold { get; set; } // 0x005E8280-0x005E8288 0x005E829C-0x005E82A4
		public bool useSpriteMesh { get; set; } // 0x005E82A4-0x005E82AC 0x005E82AC-0x005E8334
		public static Material defaultETC1GraphicMaterial { get; } // 0x005E8334-0x005E8498 
		public override Texture mainTexture { get; } // 0x005E8498-0x005E86B4 
		public bool hasBorder { get; } // 0x005E86B4-0x005E87C4 
		public float pixelsPerUnit { get; } // 0x005E87C4-0x005E8924 
		public override Material material { get; set; } // 0x005E8924-0x005E8AC0 0x005E8AC0-0x005E8AC4
		public virtual float minWidth { get; } // 0x005EFEB0-0x005EFEB8 
		public virtual float preferredWidth { get; } // 0x005EFEB8-0x005F0004 
		public virtual float flexibleWidth { get; } // 0x005F0004-0x005F0010 
		public virtual float minHeight { get; } // 0x005F0010-0x005F0018 
		public virtual float preferredHeight { get; } // 0x005F0018-0x005F0164 
		public virtual float flexibleHeight { get; } // 0x005F0164-0x005F0170 
		public virtual int layoutPriority { get; } // 0x005F0170-0x005F0178 
	
		// Nested types
		public enum Type // TypeDefIndex: 2644
		{
			Simple = 0,
			Sliced = 1,
			Tiled = 2,
			Filled = 3
		}
	
		public enum FillMethod // TypeDefIndex: 2645
		{
			Horizontal = 0,
			Vertical = 1,
			Radial90 = 2,
			Radial180 = 3,
			Radial360 = 4
		}
	
		public enum OriginHorizontal // TypeDefIndex: 2646
		{
			Left = 0,
			Right = 1
		}
	
		public enum OriginVertical // TypeDefIndex: 2647
		{
			Bottom = 0,
			Top = 1
		}
	
		public enum Origin90 // TypeDefIndex: 2648
		{
			BottomLeft = 0,
			TopLeft = 1,
			TopRight = 2,
			BottomRight = 3
		}
	
		public enum Origin180 // TypeDefIndex: 2649
		{
			Bottom = 0,
			Left = 1,
			Top = 2,
			Right = 3
		}
	
		public enum Origin360 // TypeDefIndex: 2650
		{
			Bottom = 0,
			Right = 1,
			Top = 2,
			Left = 3
		}
	
		// Constructors
		protected Image(); // 0x005E7AD8-0x005E7B28
		static Image(); // 0x005F1090-0x005F11A8
	
		// Methods
		public virtual void OnBeforeSerialize(); // 0x005E8AC4-0x005E8AC8
		public virtual void OnAfterDeserialize(); // 0x005E8AC8-0x005E8BA8
		private void PreserveSpriteAspectRatio(ref Rect rect, Vector2 spriteSize); // 0x005E8BA8-0x005E8D5C
		private Vector4 GetDrawingDimensions(bool shouldPreserveAspect); // 0x005E8D5C-0x005E91C8
		public override void SetNativeSize(); // 0x005E91C8-0x005E93FC
		protected override void OnPopulateMesh(VertexHelper toFill); // 0x005E93FC-0x005E954C
		private void TrackSprite(); // 0x005E7BC0-0x005E7D08
		protected override void OnEnable(); // 0x005EE92C-0x005EE94C
		protected override void OnDisable(); // 0x005EE94C-0x005EE9E4
		protected override void UpdateMaterial(); // 0x005EEAA0-0x005EEC08
		private void GenerateSimpleSprite(VertexHelper vh, bool lPreserveAspect); // 0x005E954C-0x005E99A4
		private void GenerateSprite(VertexHelper vh, bool lPreserveAspect); // 0x005E99A4-0x005EA060
		private void GenerateSlicedSprite(VertexHelper toFill); // 0x005EA060-0x005EAD50
		private void GenerateTiledSprite(VertexHelper toFill); // 0x005EAD50-0x005EC858
		private static void AddQuad(VertexHelper vertexHelper, Vector3[] quadPositions, Color32 color, Vector3[] quadUVs); // 0x005EF1E4-0x005EF3E4
		private static void AddQuad(VertexHelper vertexHelper, Vector2 posMin, Vector2 posMax, Color32 color, Vector2 uvMin, Vector2 uvMax); // 0x005EEF2C-0x005EF1E4
		private Vector4 GetAdjustedBorders(Vector4 border, Rect adjustedRect); // 0x005EEC08-0x005EEF2C
		private void GenerateFilledSprite(VertexHelper toFill, bool preserveAspect); // 0x005EC858-0x005EE6E8
		private static bool RadialCut(Vector3[] xy, Vector3[] uv, float fill, bool invert, int corner); // 0x005EF3E4-0x005EF59C
		private static void RadialCut(Vector3[] xy, float cos, float sin, bool invert, int corner); // 0x005EF59C-0x005EFEA8
		public virtual void CalculateLayoutInputHorizontal(); // 0x005EFEA8-0x005EFEAC
		public virtual void CalculateLayoutInputVertical(); // 0x005EFEAC-0x005EFEB0
		public virtual bool IsRaycastLocationValid(Vector2 screenPoint, Camera eventCamera); // 0x005F0178-0x005F0760
		private Vector2 MapCoordinate(Vector2 local, Rect rect); // 0x005F0760-0x005F0E54
		private static void RebuildImage(SpriteAtlas spriteAtlas); // 0x005F0E54-0x005F1090
		private static void TrackImage(Image g); // 0x005EE6E8-0x005EE92C
		private static void UnTrackImage(Image g); // 0x005EE9E4-0x005EEAA0
	}

	[EditorBrowsable] // 0x0018015C-0x001801BC
	[Obsolete] // 0x0018015C-0x001801BC
	public interface IMask // TypeDefIndex: 2651
	{
		// Properties
		RectTransform rectTransform { get; }
	
		// Methods
		bool Enabled();
	}

	public interface IMaskable // TypeDefIndex: 2652
	{
		// Methods
		void RecalculateMasking();
	}

	[AddComponentMenu] // 0x001801BC-0x001801FC
	public class InputField : Selectable, IUpdateSelectedHandler, IBeginDragHandler, IDragHandler, IEndDragHandler, IPointerClickHandler, ISubmitHandler, ICanvasElement, ILayoutElement // TypeDefIndex: 2653
	{
		// Fields
		protected TouchScreenKeyboard m_Keyboard; // 0x94
		private static readonly char[] kSeparators; // 0x00
		[FormerlySerializedAs] // 0x00182050-0x00182098
		[SerializeField] // 0x00182050-0x00182098
		protected Text m_TextComponent; // 0x98
		[SerializeField] // 0x00182098-0x001820A8
		protected Graphic m_Placeholder; // 0x9C
		[SerializeField] // 0x001820A8-0x001820B8
		private ContentType m_ContentType; // 0xA0
		[FormerlySerializedAs] // 0x001820B8-0x00182104
		[SerializeField] // 0x001820B8-0x00182104
		private InputType m_InputType; // 0xA4
		[FormerlySerializedAs] // 0x00182104-0x00182154
		[SerializeField] // 0x00182104-0x00182154
		private char m_AsteriskChar; // 0xA8
		[FormerlySerializedAs] // 0x00182154-0x001821A4
		[SerializeField] // 0x00182154-0x001821A4
		private TouchScreenKeyboardType m_KeyboardType; // 0xAC
		[SerializeField] // 0x001821A4-0x001821B4
		private LineType m_LineType; // 0xB0
		[FormerlySerializedAs] // 0x001821B4-0x00182204
		[SerializeField] // 0x001821B4-0x00182204
		private bool m_HideMobileInput; // 0xB4
		[FormerlySerializedAs] // 0x00182204-0x00182250
		[SerializeField] // 0x00182204-0x00182250
		private CharacterValidation m_CharacterValidation; // 0xB8
		[FormerlySerializedAs] // 0x00182250-0x001822A0
		[SerializeField] // 0x00182250-0x001822A0
		private int m_CharacterLimit; // 0xBC
		[FormerlySerializedAs] // 0x001822A0-0x00182344
		[FormerlySerializedAs] // 0x001822A0-0x00182344
		[FormerlySerializedAs] // 0x001822A0-0x00182344
		[SerializeField] // 0x001822A0-0x00182344
		private SubmitEvent m_OnEndEdit; // 0xC0
		[FormerlySerializedAs] // 0x00182344-0x001823C4
		[FormerlySerializedAs] // 0x00182344-0x001823C4
		[SerializeField] // 0x00182344-0x001823C4
		private OnChangeEvent m_OnValueChanged; // 0xC4
		[FormerlySerializedAs] // 0x001823C4-0x00182414
		[SerializeField] // 0x001823C4-0x00182414
		private OnValidateInput m_OnValidateInput; // 0xC8
		[FormerlySerializedAs] // 0x00182414-0x00182464
		[SerializeField] // 0x00182414-0x00182464
		private Color m_CaretColor; // 0xCC
		[SerializeField] // 0x00182464-0x00182474
		private bool m_CustomCaretColor; // 0xDC
		[SerializeField] // 0x00182474-0x00182484
		private Color m_SelectionColor; // 0xE0
		[FormerlySerializedAs] // 0x00182484-0x001824CC
		[SerializeField] // 0x00182484-0x001824CC
		protected string m_Text; // 0xF0
		[Range] // 0x001824CC-0x00182508
		[SerializeField] // 0x001824CC-0x00182508
		private float m_CaretBlinkRate; // 0xF4
		[Range] // 0x00182508-0x00182544
		[SerializeField] // 0x00182508-0x00182544
		private int m_CaretWidth; // 0xF8
		[SerializeField] // 0x00182544-0x00182554
		private bool m_ReadOnly; // 0xFC
		protected int m_CaretPosition; // 0x100
		protected int m_CaretSelectPosition; // 0x104
		private RectTransform caretRectTrans; // 0x108
		protected UIVertex[] m_CursorVerts; // 0x10C
		private TextGenerator m_InputTextCache; // 0x110
		private CanvasRenderer m_CachedInputRenderer; // 0x114
		private bool m_PreventFontCallback; // 0x118
		[NonSerialized]
		protected Mesh m_Mesh; // 0x11C
		private bool m_AllowInput; // 0x120
		private bool m_ShouldActivateNextUpdate; // 0x121
		private bool m_UpdateDrag; // 0x122
		private bool m_DragPositionOutOfBounds; // 0x123
		private const float kHScrollSpeed = 0.05f; // Metadata: 0x0021B248
		private const float kVScrollSpeed = 0.1f; // Metadata: 0x0021B24C
		protected bool m_CaretVisible; // 0x124
		private Coroutine m_BlinkCoroutine; // 0x128
		private float m_BlinkStartTime; // 0x12C
		protected int m_DrawStart; // 0x130
		protected int m_DrawEnd; // 0x134
		private Coroutine m_DragCoroutine; // 0x138
		private string m_OriginalText; // 0x13C
		private bool m_WasCanceled; // 0x140
		private bool m_HasDoneFocusTransition; // 0x141
		private WaitForSecondsRealtime m_WaitForSecondsRealtime; // 0x144
		private const string kEmailSpecialCharacters = "!#$%&\'*+-/=?^_`{|}~"; // Metadata: 0x0021B250
		private Event m_ProcessingEvent; // 0x148
		private const int k_MaxTextLength = 16382; // Metadata: 0x0021B267
	
		// Properties
		private BaseInput input { get; } // 0x005F1548-0x005F171C 
		private string compositionString { get; } // 0x005F171C-0x005F17E8 
		protected Mesh mesh { get; } // 0x005F17E8-0x005F18AC 
		protected TextGenerator cachedInputTextGenerator { get; } // 0x005F18AC-0x005F192C 
		public bool shouldHideMobileInput { get; set; } // 0x005F1998-0x005F19E0 0x005F192C-0x005F1998
		private bool shouldActivateOnSelect { get; } // 0x005F19E0-0x005F1A04 
		public string text { get; set; } // 0x005F1A04-0x005F1A0C 0x005F1A0C-0x005F1EA4
		public bool isFocused { get; } // 0x005F27E0-0x005F27E8 
		public float caretBlinkRate { get; set; } // 0x005F27E8-0x005F27F0 0x005F27F0-0x005F287C
		public int caretWidth { get; set; } // 0x005F28DC-0x005F28E4 0x005F28E4-0x005F2960
		public Text textComponent { get; set; } // 0x005F29E4-0x005F29EC 0x005F29EC-0x005F2D10
		public Graphic placeholder { get; set; } // 0x005F2D10-0x005F2D18 0x005F2D18-0x005F2D84
		public Color caretColor { get; set; } // 0x005F2D84-0x005F2E00 0x005F2E08-0x005F2E48
		public bool customCaretColor { get; set; } // 0x005F2E00-0x005F2E08 0x005F2E48-0x005F2E64
		public Color selectionColor { get; set; } // 0x005F2E64-0x005F2E74 0x005F2E74-0x005F2EB4
		public SubmitEvent onEndEdit { get; set; } // 0x005F2EB4-0x005F2EBC 0x005F2EBC-0x005F2F28
		[Obsolete] // 0x00184128-0x00184188
		public OnChangeEvent onValueChange { get; set; } // 0x005F2F28-0x005F2F30 0x005F2F38-0x005F2F3C
		public OnChangeEvent onValueChanged { get; set; } // 0x005F2F30-0x005F2F38 0x005F2F3C-0x005F2FA8
		public OnValidateInput onValidateInput { get; set; } // 0x005F1EA4-0x005F1EAC 0x005F2FA8-0x005F3014
		public int characterLimit { get; set; } // 0x005F1EC8-0x005F1ED0 0x005F3014-0x005F30EC
		public ContentType contentType { get; set; } // 0x005F3628-0x005F3630 0x005F3630-0x005F36AC
		public LineType lineType { get; set; } // 0x005F37B0-0x005F37B8 0x005F37B8-0x005F3890
		public InputType inputType { get; set; } // 0x005F3910-0x005F3918 0x005F3918-0x005F39A8
		public TouchScreenKeyboard touchScreenKeyboard { get; } // 0x005F39BC-0x005F39C4 
		public TouchScreenKeyboardType keyboardType { get; set; } // 0x005F39C4-0x005F39CC 0x005F39CC-0x005F3A5C
		public CharacterValidation characterValidation { get; set; } // 0x005F1EAC-0x005F1EB4 0x005F3A5C-0x005F3AEC
		public bool readOnly { get; set; } // 0x005F3AEC-0x005F3AF4 0x005F3AF4-0x005F3AFC
		public bool multiLine { get; } // 0x005F3AFC-0x005F3B14 
		public char asteriskChar { get; set; } // 0x005F3B14-0x005F3B1C 0x005F3B1C-0x005F3B98
		public bool wasCanceled { get; } // 0x005F3B98-0x005F3BA0 
		protected int caretPositionInternal { get; set; } // 0x005F3C14-0x005F3C4C 0x005F3C4C-0x005F3C5C
		protected int caretSelectPositionInternal { get; set; } // 0x005F3C5C-0x005F3C94 0x005F3C94-0x005F3CA4
		private new bool hasSelection { get; } // 0x005F3CA4-0x005F3CD4 
		public int caretPosition { get; set; } // 0x005F3CD4-0x005F3D0C 0x005F3D0C-0x005F3D30
		public int selectionAnchorPosition { get; set; } // 0x005F3DD0-0x005F3E08 0x005F3D30-0x005F3D80
		public int selectionFocusPosition { get; set; } // 0x005F3E08-0x005F3E40 0x005F3D80-0x005F3DD0
		private static string clipboard { get; set; } // 0x005F4940-0x005F4948 0x005F4948-0x005F4950
		public virtual float minWidth { get; } // 0x005FD5C8-0x005FD5D0 
		public virtual float preferredWidth { get; } // 0x005FD5D0-0x005FD7BC 
		public virtual float flexibleWidth { get; } // 0x005FD7BC-0x005FD7C8 
		public virtual float minHeight { get; } // 0x005FD7C8-0x005FD7D0 
		public virtual float preferredHeight { get; } // 0x005FD7D0-0x005FDA04 
		public virtual float flexibleHeight { get; } // 0x005FDA04-0x005FDA10 
		public virtual int layoutPriority { get; } // 0x005FDA10-0x005FDA18 
		Transform ICanvasElement.transform { get; } // 0x005FDAB0-0x005FDAB8 
	
		// Nested types
		public enum ContentType // TypeDefIndex: 2654
		{
			Standard = 0,
			Autocorrected = 1,
			IntegerNumber = 2,
			DecimalNumber = 3,
			Alphanumeric = 4,
			Name = 5,
			EmailAddress = 6,
			Password = 7,
			Pin = 8,
			Custom = 9
		}
	
		public enum InputType // TypeDefIndex: 2655
		{
			Standard = 0,
			AutoCorrect = 1,
			Password = 2
		}
	
		public enum CharacterValidation // TypeDefIndex: 2656
		{
			None = 0,
			Integer = 1,
			Decimal = 2,
			Alphanumeric = 3,
			Name = 4,
			EmailAddress = 5
		}
	
		public enum LineType // TypeDefIndex: 2657
		{
			SingleLine = 0,
			MultiLineSubmit = 1,
			MultiLineNewline = 2
		}
	
		public delegate char OnValidateInput(string text, int charIndex, char addedChar); // TypeDefIndex: 2658; 0x005F1ED0-0x005F27C4
	
		[Serializable]
		public class SubmitEvent : UnityEvent<string> // TypeDefIndex: 2659
		{
			// Constructors
			public SubmitEvent(); // 0x005F13B8-0x005F141C
		}
	
		[Serializable]
		public class OnChangeEvent : UnityEvent<string> // TypeDefIndex: 2660
		{
			// Constructors
			public OnChangeEvent(); // 0x005F141C-0x005F1480
		}
	
		protected enum EditState // TypeDefIndex: 2661
		{
			Continue = 0,
			Finish = 1
		}
	
		[CompilerGenerated] // 0x00180E68-0x00180E78
		private sealed class <CaretBlink>c__Iterator0 : IEnumerator<object> // TypeDefIndex: 2662
		{
			// Fields
			internal float <blinkPeriod>__1; // 0x08
			internal bool <blinkState>__1; // 0x0C
			internal InputField $this; // 0x10
			internal object $current; // 0x14
			internal bool $disposing; // 0x18
			internal int $PC; // 0x1C
	
			// Properties
			object IEnumerator<object>.Current { [DebuggerHidden] /* 0x00183DE8-0x00183DF8 */ get; } // 0x005FDCD0-0x005FDCD8 
			object IEnumerator.Current { [DebuggerHidden] /* 0x00183DF8-0x00183E08 */ get; } // 0x005FDCD8-0x005FDCE0 
	
			// Constructors
			[DebuggerHidden] // 0x00183DD8-0x00183DE8
			public <CaretBlink>c__Iterator0(); // 0x005F4664-0x005F466C
	
			// Methods
			public bool MoveNext(); // 0x005FDAB8-0x005FDCD0
			[DebuggerHidden] // 0x00183E08-0x00183E18
			public void Dispose(); // 0x005FDCE0-0x005FDCF4
			[DebuggerHidden] // 0x00183E18-0x00183E28
			public void Reset(); // 0x005FDCF4-0x005FDD7C
		}
	
		[CompilerGenerated] // 0x00180E78-0x00180E88
		private sealed class <MouseDragOutsideRect>c__Iterator1 : IEnumerator<object> // TypeDefIndex: 2663
		{
			// Fields
			internal PointerEventData eventData; // 0x08
			internal Vector2 <localMousePos>__1; // 0x0C
			internal Rect <rect>__1; // 0x14
			internal float <delay>__1; // 0x24
			internal InputField $this; // 0x28
			internal object $current; // 0x2C
			internal bool $disposing; // 0x30
			internal int $PC; // 0x34
	
			// Properties
			object IEnumerator<object>.Current { [DebuggerHidden] /* 0x00183E38-0x00183E48 */ get; } // 0x005FE1EC-0x005FE1F4 
			object IEnumerator.Current { [DebuggerHidden] /* 0x00183E48-0x00183E58 */ get; } // 0x005FE1F4-0x005FE1FC 
	
			// Constructors
			[DebuggerHidden] // 0x00183E28-0x00183E38
			public <MouseDragOutsideRect>c__Iterator1(); // 0x005F7708-0x005F7710
	
			// Methods
			public bool MoveNext(); // 0x005FDD7C-0x005FE1EC
			[DebuggerHidden] // 0x00183E58-0x00183E68
			public void Dispose(); // 0x005FE1FC-0x005FE210
			[DebuggerHidden] // 0x00183E68-0x00183E78
			public void Reset(); // 0x005FE210-0x005FE2DC
		}
	
		// Constructors
		protected InputField(); // 0x005F11A8-0x005F13B8
		static InputField(); // 0x005FDA18-0x005FDAB0
	
		// Methods
		protected void ClampPos(ref int pos); // 0x005F3BA0-0x005F3C14
		protected override void OnEnable(); // 0x005F3E40-0x005F4138
		protected override void OnDisable(); // 0x005F4138-0x005F441C
		[DebuggerHidden] // 0x00183854-0x00183864
		private IEnumerator CaretBlink(); // 0x005F45E0-0x005F4664
		private void SetCaretVisible(); // 0x005F466C-0x005F46A4
		private void SetCaretActive(); // 0x005F287C-0x005F28DC
		private void UpdateCaretMaterial(); // 0x005F46A4-0x005F481C
		protected void OnFocus(); // 0x005F481C-0x005F4820
		protected void SelectAll(); // 0x005F4820-0x005F4874
		public void MoveTextEnd(bool shift); // 0x005F4874-0x005F48E8
		public void MoveTextStart(bool shift); // 0x005F48E8-0x005F4940
		private bool InPlaceEditing(); // 0x005F4950-0x005F4968
		private void UpdateCaretFromKeyboard(); // 0x005F4968-0x005F4A34
		protected virtual void LateUpdate(); // 0x005F4A34-0x005F4FD8
		[Obsolete] // 0x00183864-0x00183898
		public Vector2 ScreenToLocal(Vector2 screen); // 0x005F657C-0x005F6A18
		private int GetUnclampedCharacterLineFromPosition(Vector2 pos, TextGenerator generator); // 0x005F6A18-0x005F6CD8
		protected int GetCharacterIndexFromPosition(Vector2 pos); // 0x005F6CD8-0x005F70D0
		private bool MayDrag(PointerEventData eventData); // 0x005F72E4-0x005F7408
		public virtual void OnBeginDrag(PointerEventData eventData); // 0x005F7408-0x005F7428
		public virtual void OnDrag(PointerEventData eventData); // 0x005F7428-0x005F7668
		[DebuggerHidden] // 0x00183898-0x001838A8
		private IEnumerator MouseDragOutsideRect(PointerEventData eventData); // 0x005F7668-0x005F7708
		public virtual void OnEndDrag(PointerEventData eventData); // 0x005F7710-0x005F7730
		public override void OnPointerDown(PointerEventData eventData); // 0x005F7730-0x005F7994
		protected EditState KeyPressed(Event evt); // 0x005F7994-0x005F7E24
		private bool IsValidChar(char c); // 0x005F84D8-0x005F8550
		public void ProcessEvent(Event e); // 0x005F8550-0x005F8554
		public virtual void OnUpdateSelected(BaseEventData eventData); // 0x005F8554-0x005F86E0
		private string GetSelectedString(); // 0x005F7FB4-0x005F8080
		private int FindtNextWordBegin(); // 0x005F86E0-0x005F8820
		private void MoveRight(bool shift, bool ctrl); // 0x005F8394-0x005F84C8
		private int FindtPrevWordBegin(); // 0x005F8820-0x005F8904
		private void MoveLeft(bool shift, bool ctrl); // 0x005F8260-0x005F8394
		private int DetermineCharacterLine(int charPos, TextGenerator generator); // 0x005F8904-0x005F8A80
		private int LineUpCharacterPosition(int originalPos, bool goToFirstChar); // 0x005F8A80-0x005F8F1C
		private int LineDownCharacterPosition(int originalPos, bool goToLastChar); // 0x005F8F1C-0x005F9320
		private void MoveDown(bool shift); // 0x005F84D0-0x005F84D8
		private void MoveDown(bool shift, bool goToLastChar); // 0x005F9320-0x005F9488
		private void MoveUp(bool shift); // 0x005F84C8-0x005F84D0
		private void MoveUp(bool shift, bool goToFirstChar); // 0x005F9488-0x005F95D0
		private void Delete(); // 0x005F8080-0x005F8260
		private void ForwardSpace(); // 0x005F7EF0-0x005F7FB4
		private void Backspace(); // 0x005F7E24-0x005F7EF0
		private void Insert(char c); // 0x005F95D0-0x005F96D0
		private void SendOnValueChangedAndUpdateLabel(); // 0x005F27C4-0x005F27E0
		private void SendOnValueChanged(); // 0x005F96D0-0x005F975C
		protected void SendOnSubmit(); // 0x005F975C-0x005F97E8
		protected virtual void Append(string input); // 0x005F97E8-0x005F98A8
		protected virtual void Append(char input); // 0x005F98A8-0x005F9A34
		protected void UpdateLabel(); // 0x005F30EC-0x005F3628
		private bool IsSelectionVisible(); // 0x005FAA7C-0x005FAAE8
		private static int GetLineStartPosition(TextGenerator gen, int line); // 0x005FAAE8-0x005FACE4
		private static int GetLineEndPosition(TextGenerator gen, int line); // 0x005F70D0-0x005F72E4
		private void SetDrawRangeToContainCaretPosition(int caretPos); // 0x005F9A34-0x005FAA7C
		public void ForceLabelUpdate(); // 0x005FACE4-0x005FACE8
		private void MarkGeometryAsDirty(); // 0x005F2960-0x005F29E4
		public virtual void Rebuild(CanvasUpdate update); // 0x005FACE8-0x005FACF4
		public virtual void LayoutComplete(); // 0x005FB2C8-0x005FB2CC
		public virtual void GraphicUpdateComplete(); // 0x005FB2CC-0x005FB2D0
		private void UpdateGeometry(); // 0x005FACF4-0x005FB2C8
		private void AssignPositioningIfNeeded(); // 0x005F5338-0x005F5D30
		private void OnFillVBO(Mesh vbo); // 0x005FB2D0-0x005FB528
		private void GenerateCaret(VertexHelper vbo, Vector2 roundingOffset); // 0x005FB528-0x005FBF50
		private void CreateCursorVerts(); // 0x005FD130-0x005FD2F4
		private void GenerateHightlight(VertexHelper vbo, Vector2 roundingOffset); // 0x005FBF50-0x005FD130
		protected char Validate(string text, int pos, char ch); // 0x005F5D30-0x005F657C
		public void ActivateInputField(); // 0x005FD2F4-0x005FD4A0
		private void ActivateInputFieldInternal(); // 0x005F4FD8-0x005F5338
		public override void OnSelect(BaseEventData eventData); // 0x005FD4A0-0x005FD4D0
		public virtual void OnPointerClick(PointerEventData eventData); // 0x005FD4D0-0x005FD510
		public void DeactivateInputField(); // 0x005F441C-0x005F45E0
		public override void OnDeselect(BaseEventData eventData); // 0x005FD510-0x005FD538
		public virtual void OnSubmit(BaseEventData eventData); // 0x005FD538-0x005FD590
		private void EnforceContentType(); // 0x005F36AC-0x005F37B0
		private void EnforceTextHOverflow(); // 0x005F1480-0x005F1548
		private void SetToCustomIfContentTypeIsNot(params /* 0x00183F18-0x00183F28 */ ContentType[] allowedContentTypes); // 0x005F3890-0x005F3910
		private void SetToCustom(); // 0x005F39A8-0x005F39BC
		protected override void DoStateTransition(SelectionState state, bool instant); // 0x005FD590-0x005FD5C0
		public virtual void CalculateLayoutInputHorizontal(); // 0x005FD5C0-0x005FD5C4
		public virtual void CalculateLayoutInputVertical(); // 0x005FD5C4-0x005FD5C8
	}

	[AddComponentMenu] // 0x001801FC-0x001802C0
	[DisallowMultipleComponent] // 0x001801FC-0x001802C0
	[ExecuteAlways] // 0x001801FC-0x001802C0
	[RequireComponent] // 0x001801FC-0x001802C0
	public class Mask : UIBehaviour, ICanvasRaycastFilter, IMaterialModifier // TypeDefIndex: 2664
	{
		// Fields
		[NonSerialized]
		private RectTransform m_RectTransform; // 0x0C
		[SerializeField] // 0x00182554-0x00182564
		private bool m_ShowMaskGraphic; // 0x10
		[NonSerialized]
		private Graphic m_Graphic; // 0x14
		[NonSerialized]
		private Material m_MaskMaterial; // 0x18
		[NonSerialized]
		private Material m_UnmaskMaterial; // 0x1C
	
		// Properties
		public RectTransform rectTransform { get; } // 0x005BF148-0x005BF1BC 
		public bool showMaskGraphic { get; set; } // 0x005BF1BC-0x005BF1C4 0x005BF1C4-0x005BF2B0
		public Graphic graphic { get; } // 0x005BF2B0-0x005BF324 
	
		// Constructors
		protected Mask(); // 0x005BF138-0x005BF148
	
		// Methods
		public virtual bool MaskEnabled(); // 0x005BF324-0x005BF3D8
		[Obsolete] // 0x001838A8-0x001838DC
		public virtual void OnSiblingGraphicEnabledDisabled(); // 0x005BF3D8-0x005BF3DC
		protected override void OnEnable(); // 0x005BF3DC-0x005BF508
		protected override void OnDisable(); // 0x005BF870-0x005BFA34
		public virtual bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera); // 0x005BFCCC-0x005BFDA0
		public virtual Material GetModifiedMaterial(Material baseMaterial); // 0x005BFDA0-0x005C00BC
	}

	public abstract class MaskableGraphic : Graphic, IClippable, IMaskable, IMaterialModifier // TypeDefIndex: 2665
	{
		// Fields
		[NonSerialized]
		protected bool m_ShouldRecalculateStencil; // 0x45
		[NonSerialized]
		protected Material m_MaskMaterial; // 0x48
		[NonSerialized]
		private RectMask2D m_ParentMask; // 0x4C
		[NonSerialized]
		private bool m_Maskable; // 0x50
		[NonSerialized]
		[EditorBrowsable] // 0x00182564-0x001825B4
		[Obsolete] // 0x00182564-0x001825B4
		protected bool m_IncludeForMasking; // 0x51
		[SerializeField] // 0x001825B4-0x001825C4
		private CullStateChangedEvent m_OnCullStateChanged; // 0x54
		[NonSerialized]
		[EditorBrowsable] // 0x001825C4-0x00182620
		[Obsolete] // 0x001825C4-0x00182620
		protected bool m_ShouldRecalculate; // 0x58
		[NonSerialized]
		protected int m_StencilValue; // 0x5C
		private readonly Vector3[] m_Corners; // 0x60
	
		// Properties
		public CullStateChangedEvent onCullStateChanged { get; set; } // 0x005C2798-0x005C27A0 0x005C27A0-0x005C27A8
		public bool maskable { get; set; } // 0x005C27A8-0x005C27B0 0x005C27B0-0x005C27E0
		private Rect rootCanvasRect { get; } // 0x005C2A18-0x005C2E08 
		GameObject IClippable.gameObject { get; } // 0x005C36E8-0x005C36F0 
	
		// Nested types
		[Serializable]
		public class CullStateChangedEvent : UnityEvent<bool> // TypeDefIndex: 2666
		{
			// Constructors
			public CullStateChangedEvent(); // 0x005C2734-0x005C2798
		}
	
		// Constructors
		protected MaskableGraphic(); // 0x005C265C-0x005C2734
	
		// Methods
		public virtual Material GetModifiedMaterial(Material baseMaterial); // 0x005C27E0-0x005C29A4
		public virtual void Cull(Rect clipRect, bool validRect); // 0x005C29A4-0x005C2A18
		private void UpdateCull(bool cull); // 0x005C2E08-0x005C2F20
		public virtual void SetClipRect(Rect clipRect, bool validRect); // 0x005C2F20-0x005C2FA0
		protected override void OnEnable(); // 0x005C2FA0-0x005C3084
		protected override void OnDisable(); // 0x005C3270-0x005C3394
		protected override void OnTransformParentChanged(); // 0x005C3394-0x005C33E4
		[EditorBrowsable] // 0x001838DC-0x0018392C
		[Obsolete] // 0x001838DC-0x0018392C
		public virtual void ParentMaskStateChanged(); // 0x005C33E4-0x005C33E8
		protected override void OnCanvasHierarchyChanged(); // 0x005C33E8-0x005C3438
		private void UpdateClipParent(); // 0x005C3084-0x005C3270
		public virtual void RecalculateClipping(); // 0x005C363C-0x005C3640
		public virtual void RecalculateMasking(); // 0x005C3640-0x005C36E8
	}

	public class MaskUtilities // TypeDefIndex: 2667
	{
		// Constructors
		public MaskUtilities(); // 0x005C15F4-0x005C15FC
	
		// Methods
		public static void Notify2DMaskStateChanged(Component mask); // 0x005C15FC-0x005C1964
		public static void NotifyStencilStateChanged(Component mask); // 0x005BF508-0x005BF870
		public static Transform FindRootSortOverrideCanvas(Transform start); // 0x005C00BC-0x005C02B8
		public static int GetStencilDepth(Transform transform, Transform stopAfter); // 0x005C02B8-0x005C06A4
		public static bool IsDescendantOrSelf(Transform father, Transform child); // 0x005C1964-0x005C1B84
		public static RectMask2D GetRectMaskForClippable(IClippable clippable); // 0x005C1B84-0x005C2180
		public static void GetRectMasksForClip(RectMask2D clipper, List<RectMask2D> masks); // 0x005C2180-0x005C265C
	}

	internal static class Misc // TypeDefIndex: 2668
	{
		// Methods
		public static void Destroy(UnityEngine.Object obj); // 0x005C36F0-0x005C3858
		public static void DestroyImmediate(UnityEngine.Object obj); // 0x005C3858-0x005C39BC
	}

	[Serializable]
	public struct Navigation : IEquatable<Navigation> // TypeDefIndex: 2669
	{
		// Fields
		[SerializeField] // 0x00182620-0x00182630
		private Mode m_Mode; // 0x00
		[SerializeField] // 0x00182630-0x00182640
		private Selectable m_SelectOnUp; // 0x04
		[SerializeField] // 0x00182640-0x00182650
		private Selectable m_SelectOnDown; // 0x08
		[SerializeField] // 0x00182650-0x00182660
		private Selectable m_SelectOnLeft; // 0x0C
		[SerializeField] // 0x00182660-0x00182670
		private Selectable m_SelectOnRight; // 0x10
	
		// Properties
		public Mode mode { get; set; } // 0x005C39BC-0x005C39CC 0x005C39CC-0x005C39D4
		public Selectable selectOnUp { get; set; } // 0x005C39D4-0x005C39E4 0x005C39E4-0x005C39EC
		public Selectable selectOnDown { get; set; } // 0x005C39EC-0x005C39FC 0x005C39FC-0x005C3A04
		public Selectable selectOnLeft { get; set; } // 0x005C3A04-0x005C3A14 0x005C3A14-0x005C3A1C
		public Selectable selectOnRight { get; set; } // 0x005C3A1C-0x005C3A2C 0x005C3A2C-0x005C3A34
		public static Navigation defaultNavigation { get; } // 0x005C3A34-0x005C3BD4 
	
		// Nested types
		[Flags] // 0x001802C0-0x001802D0
		public enum Mode // TypeDefIndex: 2670
		{
			None = 0,
			Horizontal = 1,
			Vertical = 2,
			Automatic = 3,
			Explicit = 4
		}
	
		// Methods
		public bool Equals(Navigation other); // 0x005C3BD4-0x005C3BFC
	}

	[AddComponentMenu] // 0x001802D0-0x00180310
	public class RawImage : MaskableGraphic // TypeDefIndex: 2671
	{
		// Fields
		[FormerlySerializedAs] // 0x00182670-0x001826B8
		[SerializeField] // 0x00182670-0x001826B8
		private Texture m_Texture; // 0x64
		[SerializeField] // 0x001826B8-0x001826C8
		private Rect m_UVRect; // 0x68
	
		// Properties
		public override Texture mainTexture { get; } // 0x005C4FC4-0x005C51B0 
		public Texture texture { get; set; } // 0x005C51B0-0x005C51B8 0x005C51B8-0x005C527C
		public Rect uvRect { get; set; } // 0x005C527C-0x005C528C 0x005C528C-0x005C5308
	
		// Constructors
		protected RawImage(); // 0x005C4F54-0x005C4FC4
	
		// Methods
		public override void SetNativeSize(); // 0x005C5308-0x005C5574
		protected override void OnPopulateMesh(VertexHelper vh); // 0x005C5574-0x005C5B20
	}

	[AddComponentMenu] // 0x00180310-0x001803DC
	[DisallowMultipleComponent] // 0x00180310-0x001803DC
	[ExecuteAlways] // 0x00180310-0x001803DC
	[RequireComponent] // 0x00180310-0x001803DC
	public class RectMask2D : UIBehaviour, IClipper, ICanvasRaycastFilter // TypeDefIndex: 2672
	{
		// Fields
		[NonSerialized]
		private readonly RectangularVertexClipper m_VertexClipper; // 0x0C
		[NonSerialized]
		private RectTransform m_RectTransform; // 0x10
		[NonSerialized]
		private HashSet<IClippable> m_ClipTargets; // 0x14
		[NonSerialized]
		private bool m_ShouldRecalculateClipRects; // 0x18
		[NonSerialized]
		private List<RectMask2D> m_Clippers; // 0x1C
		[NonSerialized]
		private Rect m_LastClipRectCanvasSpace; // 0x20
		[NonSerialized]
		private bool m_ForceClip; // 0x30
		[NonSerialized]
		private Canvas m_Canvas; // 0x34
		private Vector3[] m_Corners; // 0x38
	
		// Properties
		private Canvas Canvas { get; } // 0x005C5EB4-0x005C60C0 
		public Rect canvasRect { get; } // 0x005C60C0-0x005C6130 
		public RectTransform rectTransform { get; } // 0x005C6130-0x005C61A4 
		private Rect rootCanvasRect { get; } // 0x005C66C0-0x005C69CC 
	
		// Constructors
		protected RectMask2D(); // 0x005C5D34-0x005C5E30
	
		// Methods
		protected override void OnEnable(); // 0x005C64F4-0x005C6528
		protected override void OnDisable(); // 0x005C6528-0x005C65EC
		public virtual bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera); // 0x005C65EC-0x005C66C0
		public virtual void PerformClipping(); // 0x005C69CC-0x005C6F60
		public void AddClippable(IClippable clippable); // 0x005C356C-0x005C363C
		public void RemoveClippable(IClippable clippable); // 0x005C3438-0x005C356C
		protected override void OnTransformParentChanged(); // 0x005C6F60-0x005C6F80
		protected override void OnCanvasHierarchyChanged(); // 0x005C6F80-0x005C6FAC
	}

	[AddComponentMenu] // 0x001803DC-0x00180488
	[RequireComponent] // 0x001803DC-0x00180488
	public class Scrollbar : Selectable, IBeginDragHandler, IDragHandler, IInitializePotentialDragHandler, ICanvasElement // TypeDefIndex: 2673
	{
		// Fields
		[SerializeField] // 0x001826C8-0x001826D8
		private RectTransform m_HandleRect; // 0x94
		[SerializeField] // 0x001826D8-0x001826E8
		private Direction m_Direction; // 0x98
		[Range] // 0x001826E8-0x00182720
		[SerializeField] // 0x001826E8-0x00182720
		private float m_Value; // 0x9C
		[Range] // 0x00182720-0x00182758
		[SerializeField] // 0x00182720-0x00182758
		private float m_Size; // 0xA0
		[Range] // 0x00182758-0x00182794
		[SerializeField] // 0x00182758-0x00182794
		private int m_NumberOfSteps; // 0xA4
		[SerializeField] // 0x00182794-0x001827CC
		[Space] // 0x00182794-0x001827CC
		private ScrollEvent m_OnValueChanged; // 0xA8
		private RectTransform m_ContainerRect; // 0xAC
		private Vector2 m_Offset; // 0xB0
		private DrivenRectTransformTracker m_Tracker; // 0xB8
		private Coroutine m_PointerDownRepeat; // 0xBC
		private bool isPointerDownAndNotDragging; // 0xC0
	
		// Properties
		public RectTransform handleRect { get; set; } // 0x005D111C-0x005D1124 0x005D1124-0x005D11A8
		public Direction direction { get; set; } // 0x005D1514-0x005D151C 0x005D151C-0x005D1598
		public float value { get; set; } // 0x005D1598-0x005D16F0 0x005CEF18-0x005CEF20
		public float size { get; set; } // 0x005D16F8-0x005D1700 0x005CED60-0x005CEE18
		public int numberOfSteps { get; set; } // 0x005D1700-0x005D1708 0x005D1708-0x005D1794
		public ScrollEvent onValueChanged { get; set; } // 0x005CBA48-0x005CBA50 0x005D1794-0x005D179C
		private float stepSize { get; } // 0x005D179C-0x005D17D0 
		private Axis axis { get; } // 0x005D1B4C-0x005D1B68 
		private bool reverseValue { get; } // 0x005D1B68-0x005D1B80 
		Transform ICanvasElement.transform { get; } // 0x005D31C4-0x005D31CC 
	
		// Nested types
		public enum Direction // TypeDefIndex: 2674
		{
			LeftToRight = 0,
			RightToLeft = 1,
			BottomToTop = 2,
			TopToBottom = 3
		}
	
		[Serializable]
		public class ScrollEvent : UnityEvent<float> // TypeDefIndex: 2675
		{
			// Constructors
			public ScrollEvent(); // 0x005D0FBC-0x005D1020
		}
	
		private enum Axis // TypeDefIndex: 2676
		{
			Horizontal = 0,
			Vertical = 1
		}
	
		[CompilerGenerated] // 0x00180E98-0x00180EA8
		private sealed class <ClickRepeat>c__Iterator0 : IEnumerator<object> // TypeDefIndex: 2677
		{
			// Fields
			internal PointerEventData eventData; // 0x08
			internal Scrollbar $this; // 0x0C
			internal object $current; // 0x10
			internal bool $disposing; // 0x14
			internal int $PC; // 0x18
	
			// Properties
			object IEnumerator<object>.Current { [DebuggerHidden] /* 0x00183E88-0x00183E98 */ get; } // 0x005D34E8-0x005D34F0 
			object IEnumerator.Current { [DebuggerHidden] /* 0x00183E98-0x00183EA8 */ get; } // 0x005D34F0-0x005D34F8 
	
			// Constructors
			[DebuggerHidden] // 0x00183E78-0x00183E88
			public <ClickRepeat>c__Iterator0(); // 0x005D2658-0x005D2660
	
			// Methods
			public bool MoveNext(); // 0x005D31CC-0x005D34E8
			[DebuggerHidden] // 0x00183EA8-0x00183EB8
			public void Dispose(); // 0x005D34F8-0x005D350C
			[DebuggerHidden] // 0x00183EB8-0x00183EC8
			public void Reset(); // 0x005D350C-0x005D3594
		}
	
		// Constructors
		protected Scrollbar(); // 0x005D0EB4-0x005D0FBC
	
		// Methods
		public virtual void Rebuild(CanvasUpdate executing); // 0x005D17D0-0x005D17D4
		public virtual void LayoutComplete(); // 0x005D17D4-0x005D17D8
		public virtual void GraphicUpdateComplete(); // 0x005D17D8-0x005D17DC
		protected override void OnEnable(); // 0x005D17DC-0x005D1810
		protected override void OnDisable(); // 0x005D1A10-0x005D1A34
		private void UpdateCachedReferences(); // 0x005D11A8-0x005D12FC
		private void Set(float input); // 0x005D16F0-0x005D16F8
		private void Set(float input, bool sendCallback); // 0x005D18EC-0x005D1A10
		protected override void OnRectTransformDimensionsChange(); // 0x005D1B10-0x005D1B4C
		private void UpdateVisuals(); // 0x005D12FC-0x005D1514
		private void UpdateDrag(PointerEventData eventData); // 0x005D1B80-0x005D1F94
		private bool MayDrag(PointerEventData eventData); // 0x005D1F94-0x005D2010
		public virtual void OnBeginDrag(PointerEventData eventData); // 0x005D2010-0x005D2310
		public virtual void OnDrag(PointerEventData eventData); // 0x005D2310-0x005D23CC
		public override void OnPointerDown(PointerEventData eventData); // 0x005D23CC-0x005D2420
		[DebuggerHidden] // 0x0018392C-0x0018393C
		protected IEnumerator ClickRepeat(PointerEventData eventData); // 0x005D25B8-0x005D2658
		public override void OnPointerUp(PointerEventData eventData); // 0x005D2660-0x005D267C
		public override void OnMove(AxisEventData eventData); // 0x005D26C8-0x005D2990
		public override Selectable FindSelectableOnLeft(); // 0x005D2A38-0x005D2A58
		public override Selectable FindSelectableOnRight(); // 0x005D2BAC-0x005D2BCC
		public override Selectable FindSelectableOnUp(); // 0x005D2D08-0x005D2D28
		public override Selectable FindSelectableOnDown(); // 0x005D2E64-0x005D2E84
		public virtual void OnInitializePotentialDrag(PointerEventData eventData); // 0x005D2FC0-0x005D2FF0
		public void SetDirection(Direction direction, bool includeRectLayouts); // 0x005D2FF0-0x005D31C4
	}

	[AddComponentMenu] // 0x00180488-0x00180564
	[DisallowMultipleComponent] // 0x00180488-0x00180564
	[ExecuteAlways] // 0x00180488-0x00180564
	[RequireComponent] // 0x00180488-0x00180564
	[SelectionBase] // 0x00180488-0x00180564
	public class ScrollRect : UIBehaviour, IInitializePotentialDragHandler, IBeginDragHandler, IEndDragHandler, IDragHandler, IScrollHandler, ICanvasElement, ILayoutElement, ILayoutGroup // TypeDefIndex: 2678
	{
		// Fields
		[SerializeField] // 0x001827CC-0x001827DC
		private RectTransform m_Content; // 0x0C
		[SerializeField] // 0x001827DC-0x001827EC
		private bool m_Horizontal; // 0x10
		[SerializeField] // 0x001827EC-0x001827FC
		private bool m_Vertical; // 0x11
		[SerializeField] // 0x001827FC-0x0018280C
		private MovementType m_MovementType; // 0x14
		[SerializeField] // 0x0018280C-0x0018281C
		private float m_Elasticity; // 0x18
		[SerializeField] // 0x0018281C-0x0018282C
		private bool m_Inertia; // 0x1C
		[SerializeField] // 0x0018282C-0x0018283C
		private float m_DecelerationRate; // 0x20
		[SerializeField] // 0x0018283C-0x0018284C
		private float m_ScrollSensitivity; // 0x24
		[SerializeField] // 0x0018284C-0x0018285C
		private RectTransform m_Viewport; // 0x28
		[SerializeField] // 0x0018285C-0x0018286C
		private Scrollbar m_HorizontalScrollbar; // 0x2C
		[SerializeField] // 0x0018286C-0x0018287C
		private Scrollbar m_VerticalScrollbar; // 0x30
		[SerializeField] // 0x0018287C-0x0018288C
		private ScrollbarVisibility m_HorizontalScrollbarVisibility; // 0x34
		[SerializeField] // 0x0018288C-0x0018289C
		private ScrollbarVisibility m_VerticalScrollbarVisibility; // 0x38
		[SerializeField] // 0x0018289C-0x001828AC
		private float m_HorizontalScrollbarSpacing; // 0x3C
		[SerializeField] // 0x001828AC-0x001828BC
		private float m_VerticalScrollbarSpacing; // 0x40
		[SerializeField] // 0x001828BC-0x001828CC
		private ScrollRectEvent m_OnValueChanged; // 0x44
		private Vector2 m_PointerStartLocalCursor; // 0x48
		protected Vector2 m_ContentStartPosition; // 0x50
		private RectTransform m_ViewRect; // 0x58
		protected Bounds m_ContentBounds; // 0x5C
		private Bounds m_ViewBounds; // 0x74
		private Vector2 m_Velocity; // 0x8C
		private bool m_Dragging; // 0x94
		private Vector2 m_PrevPosition; // 0x98
		private Bounds m_PrevContentBounds; // 0xA0
		private Bounds m_PrevViewBounds; // 0xB8
		[NonSerialized]
		private bool m_HasRebuiltLayout; // 0xD0
		private bool m_HSliderExpand; // 0xD1
		private bool m_VSliderExpand; // 0xD2
		private float m_HSliderHeight; // 0xD4
		private float m_VSliderWidth; // 0xD8
		[NonSerialized]
		private RectTransform m_Rect; // 0xDC
		private RectTransform m_HorizontalScrollbarRect; // 0xE0
		private RectTransform m_VerticalScrollbarRect; // 0xE4
		private DrivenRectTransformTracker m_Tracker; // 0xE8
		private readonly Vector3[] m_Corners; // 0xEC
	
		// Properties
		public RectTransform content { get; set; } // 0x005CB6E0-0x005CB6E8 0x005CB6E8-0x005CB6F0
		public bool horizontal { get; set; } // 0x005CB6F0-0x005CB6F8 0x005CB6F8-0x005CB700
		public bool vertical { get; set; } // 0x005CB700-0x005CB708 0x005CB708-0x005CB710
		public MovementType movementType { get; set; } // 0x005CB710-0x005CB718 0x005CB718-0x005CB720
		public float elasticity { get; set; } // 0x005CB720-0x005CB728 0x005CB728-0x005CB730
		public bool inertia { get; set; } // 0x005CB730-0x005CB738 0x005CB738-0x005CB740
		public float decelerationRate { get; set; } // 0x005CB740-0x005CB748 0x005CB748-0x005CB750
		public float scrollSensitivity { get; set; } // 0x005CB750-0x005CB758 0x005CB758-0x005CB760
		public RectTransform viewport { get; set; } // 0x005CB760-0x005CB768 0x005CB768-0x005CB770
		public Scrollbar horizontalScrollbar { get; set; } // 0x005CB850-0x005CB858 0x005CB858-0x005CBA48
		public Scrollbar verticalScrollbar { get; set; } // 0x005CBA50-0x005CBA58 0x005CBA58-0x005CBC48
		public ScrollbarVisibility horizontalScrollbarVisibility { get; set; } // 0x005CBC48-0x005CBC50 0x005CBC50-0x005CBC58
		public ScrollbarVisibility verticalScrollbarVisibility { get; set; } // 0x005CBC58-0x005CBC60 0x005CBC60-0x005CBC68
		public float horizontalScrollbarSpacing { get; set; } // 0x005CBC68-0x005CBC70 0x005CBC70-0x005CBC78
		public float verticalScrollbarSpacing { get; set; } // 0x005CBD20-0x005CBD28 0x005CBD28-0x005CBD30
		public ScrollRectEvent onValueChanged { get; set; } // 0x005CBD30-0x005CBD38 0x005CBD38-0x005CBD40
		protected RectTransform viewRect { get; } // 0x005CBD40-0x005CBEC4 
		public Vector2 velocity { get; set; } // 0x005CBEC4-0x005CBED8 0x005CBED8-0x005CBEE4
		private RectTransform rectTransform { get; } // 0x005CBEE4-0x005CBF98 
		public Vector2 normalizedPosition { get; set; } // 0x005CECC4-0x005CED1C 0x005CF020-0x005CF068
		public float horizontalNormalizedPosition { get; set; } // 0x005CEE18-0x005CEF18 0x005CF068-0x005CF07C
		public float verticalNormalizedPosition { get; set; } // 0x005CEF20-0x005CF020 0x005CF07C-0x005CF090
		private bool hScrollingNeeded { get; } // 0x005CF3C4-0x005CF444 
		private bool vScrollingNeeded { get; } // 0x005CF444-0x005CF4C4 
		public virtual float minWidth { get; } // 0x005CF4CC-0x005CF4D8 
		public virtual float preferredWidth { get; } // 0x005CF4D8-0x005CF4E4 
		public virtual float flexibleWidth { get; } // 0x005CF4E4-0x005CF4F0 
		public virtual float minHeight { get; } // 0x005CF4F0-0x005CF4FC 
		public virtual float preferredHeight { get; } // 0x005CF4FC-0x005CF508 
		public virtual float flexibleHeight { get; } // 0x005CF508-0x005CF514 
		public virtual int layoutPriority { get; } // 0x005CF514-0x005CF51C 
		Transform ICanvasElement.transform { get; } // 0x005D0EAC-0x005D0EB4 
	
		// Nested types
		public enum MovementType // TypeDefIndex: 2679
		{
			Unrestricted = 0,
			Elastic = 1,
			Clamped = 2
		}
	
		public enum ScrollbarVisibility // TypeDefIndex: 2680
		{
			Permanent = 0,
			AutoHide = 1,
			AutoHideAndExpandViewport = 2
		}
	
		[Serializable]
		public class ScrollRectEvent : UnityEvent<Vector2> // TypeDefIndex: 2681
		{
			// Constructors
			public ScrollRectEvent(); // 0x005CB67C-0x005CB6E0
		}
	
		// Constructors
		protected ScrollRect(); // 0x005CB528-0x005CB67C
	
		// Methods
		public virtual void Rebuild(CanvasUpdate executing); // 0x005CBF98-0x005CC06C
		public virtual void LayoutComplete(); // 0x005CD17C-0x005CD180
		public virtual void GraphicUpdateComplete(); // 0x005CD180-0x005CD184
		private void UpdateCachedData(); // 0x005CC06C-0x005CC5BC
		protected override void OnEnable(); // 0x005CD184-0x005CD3B4
		protected override void OnDisable(); // 0x005CD3B4-0x005CD67C
		public override bool IsActive(); // 0x005CD67C-0x005CD720
		private void EnsureLayoutHasRebuilt(); // 0x005CD720-0x005CD7C0
		public virtual void StopMovement(); // 0x005CD7C0-0x005CD858
		public virtual void OnScroll(PointerEventData data); // 0x005CD858-0x005CDB68
		public virtual void OnInitializePotentialDrag(PointerEventData eventData); // 0x005CDBBC-0x005CDC7C
		public virtual void OnBeginDrag(PointerEventData eventData); // 0x005CDC7C-0x005CDE44
		public virtual void OnEndDrag(PointerEventData eventData); // 0x005CDE44-0x005CDE80
		public virtual void OnDrag(PointerEventData eventData); // 0x005CDE80-0x005CE170
		protected virtual void SetContentAnchoredPosition(Vector2 position); // 0x005CE23C-0x005CE3A4
		protected virtual void LateUpdate(); // 0x005CE3A4-0x005CECC4
		protected void UpdatePrevData(); // 0x005CD040-0x005CD17C
		private void UpdateScrollbars(Vector2 offset); // 0x005CCD4C-0x005CD040
		private void SetHorizontalNormalizedPosition(float value); // 0x005CF090-0x005CF0A4
		private void SetVerticalNormalizedPosition(float value); // 0x005CF0A4-0x005CF0B8
		protected virtual void SetNormalizedPosition(float value, int axis); // 0x005CF0B8-0x005CF3C0
		private static float RubberDelta(float overStretching, float viewSize); // 0x005CE170-0x005CE23C
		protected override void OnRectTransformDimensionsChange(); // 0x005CF3C0-0x005CF3C4
		public virtual void CalculateLayoutInputHorizontal(); // 0x005CF4C4-0x005CF4C8
		public virtual void CalculateLayoutInputVertical(); // 0x005CF4C8-0x005CF4CC
		public virtual void SetLayoutHorizontal(); // 0x005CF51C-0x005CFE3C
		public virtual void SetLayoutVertical(); // 0x005CFFD0-0x005D01B0
		private void UpdateScrollbarVisibility(); // 0x005CED1C-0x005CED60
		private static void UpdateOneScrollbarVisibility(bool xScrollingNeeded, bool xAxisEnabled, ScrollbarVisibility scrollbarVisibility, Scrollbar scrollbar); // 0x005D06CC-0x005D0840
		private void UpdateScrollbarLayout(); // 0x005D01B0-0x005D06CC
		protected void UpdateBounds(); // 0x005CC5BC-0x005CCD4C
		internal static void AdjustBounds(ref Bounds viewBounds, ref Vector2 contentPivot, ref Vector3 contentSize, ref Vector3 contentPos); // 0x005D0840-0x005D099C
		private Bounds GetBounds(); // 0x005CFE3C-0x005CFFD0
		internal static Bounds InternalGetBounds(Vector3[] corners, ref Matrix4x4 viewWorldToLocalMatrix); // 0x005D099C-0x005D0C10
		private Vector2 CalculateOffset(Vector2 delta); // 0x005CDB68-0x005CDBBC
		internal static Vector2 InternalCalculateOffset(ref Bounds viewBounds, ref Bounds contentBounds, bool horizontal, bool vertical, MovementType movementType, ref Vector2 delta); // 0x005D0C10-0x005D0EAC
		protected void SetDirty(); // 0x005CBC78-0x005CBD20
		protected void SetDirtyCaching(); // 0x005CB770-0x005CB850
	}

	[AddComponentMenu] // 0x00180564-0x001805D8
	[DisallowMultipleComponent] // 0x00180564-0x001805D8
	[ExecuteAlways] // 0x00180564-0x001805D8
	[SelectionBase] // 0x00180564-0x001805D8
	public class Selectable : UIBehaviour, IMoveHandler, IPointerDownHandler, IPointerUpHandler, IPointerEnterHandler, IPointerExitHandler, ISelectHandler, IDeselectHandler // TypeDefIndex: 2682
	{
		// Fields
		private static List<Selectable> s_List; // 0x00
		[FormerlySerializedAs] // 0x001828CC-0x00182918
		[SerializeField] // 0x001828CC-0x00182918
		private Navigation m_Navigation; // 0x0C
		[FormerlySerializedAs] // 0x00182918-0x00182964
		[SerializeField] // 0x00182918-0x00182964
		private Transition m_Transition; // 0x20
		[FormerlySerializedAs] // 0x00182964-0x001829AC
		[SerializeField] // 0x00182964-0x001829AC
		private ColorBlock m_Colors; // 0x24
		[FormerlySerializedAs] // 0x001829AC-0x001829F8
		[SerializeField] // 0x001829AC-0x001829F8
		private SpriteState m_SpriteState; // 0x6C
		[FormerlySerializedAs] // 0x001829F8-0x00182A4C
		[SerializeField] // 0x001829F8-0x00182A4C
		private AnimationTriggers m_AnimationTriggers; // 0x78
		[SerializeField] // 0x00182A4C-0x00182AB4
		[Tooltip] // 0x00182A4C-0x00182AB4
		private bool m_Interactable; // 0x7C
		[FormerlySerializedAs] // 0x00182AB4-0x00182B3C
		[FormerlySerializedAs] // 0x00182AB4-0x00182B3C
		[SerializeField] // 0x00182AB4-0x00182B3C
		private Graphic m_TargetGraphic; // 0x80
		private bool m_GroupsAllowInteraction; // 0x84
		private SelectionState m_CurrentSelectionState; // 0x88
		[CompilerGenerated] // 0x00182B3C-0x00182B70
		[DebuggerBrowsable] // 0x00182B3C-0x00182B70
		private bool <isPointerInside>k__BackingField; // 0x8C
		[CompilerGenerated] // 0x00182B70-0x00182BA4
		[DebuggerBrowsable] // 0x00182B70-0x00182BA4
		private bool <isPointerDown>k__BackingField; // 0x8D
		[CompilerGenerated] // 0x00182BA4-0x00182BD8
		[DebuggerBrowsable] // 0x00182BA4-0x00182BD8
		private bool <hasSelection>k__BackingField; // 0x8E
		private readonly List<CanvasGroup> m_CanvasGroupCache; // 0x90
	
		// Properties
		public static List<Selectable> allSelectables { get; } // 0x005D3594-0x005D3620 
		public Navigation navigation { get; set; } // 0x005D2A58-0x005D2A70 0x005D3620-0x005D36D4
		public Transition transition { get; set; } // 0x005D36DC-0x005D36E4 0x005D36E4-0x005D3764
		public ColorBlock colors { get; set; } // 0x005D3764-0x005D377C 0x005D377C-0x005D389C
		public SpriteState spriteState { get; set; } // 0x005D389C-0x005D38B0 0x005D38B0-0x005D3950
		public AnimationTriggers animationTriggers { get; set; } // 0x005D3950-0x005D3958 0x005D3958-0x005D39D8
		public Graphic targetGraphic { get; set; } // 0x005D39D8-0x005D39E0 0x005D39E0-0x005D3A60
		public bool interactable { get; set; } // 0x005D3A60-0x005D3A68 0x005D3A68-0x005D3C90
		private bool isPointerInside { [CompilerGenerated] /* 0x0018393C-0x0018394C */ get; [CompilerGenerated] /* 0x0018394C-0x0018395C */ set; } // 0x005D3CE8-0x005D3CF0 0x005D3CF0-0x005D3CF8
		private bool isPointerDown { [CompilerGenerated] /* 0x0018395C-0x0018396C */ get; [CompilerGenerated] /* 0x0018396C-0x0018397C */ set; } // 0x005D3CF8-0x005D3D00 0x005D3D00-0x005D3D08
		private bool hasSelection { [CompilerGenerated] /* 0x0018397C-0x0018398C */ get; [CompilerGenerated] /* 0x0018398C-0x0018399C */ set; } // 0x005D3D08-0x005D3D10 0x005D3D10-0x005D3D18
		public UnityEngine.UI.Image image { get; set; } // 0x005D3D18-0x005D3DB0 0x005D3DB0-0x005D3DB8
		public Animator animator { get; } // 0x005D3DB8-0x005D3E1C 
		protected SelectionState currentSelectionState { get; } // 0x005D41C4-0x005D41CC 
	
		// Nested types
		public enum Transition // TypeDefIndex: 2683
		{
			None = 0,
			ColorTint = 1,
			SpriteSwap = 2,
			Animation = 3
		}
	
		protected enum SelectionState // TypeDefIndex: 2684
		{
			Normal = 0,
			Highlighted = 1,
			Pressed = 2,
			Disabled = 3
		}
	
		// Constructors
		protected Selectable(); // 0x005D1020-0x005D111C
		static Selectable(); // 0x005D5A0C-0x005D5A9C
	
		// Methods
		protected override void Awake(); // 0x005D3E1C-0x005D3ECC
		protected override void OnCanvasGroupChanged(); // 0x005D3ECC-0x005D4130
		public virtual bool IsInteractable(); // 0x005D4130-0x005D4150
		protected override void OnDidApplyAnimationProperties(); // 0x005D4150-0x005D4158
		protected override void OnEnable(); // 0x005D1810-0x005D18EC
		private void OnSetProperty(); // 0x005D36D4-0x005D36DC
		protected override void OnDisable(); // 0x005D1A34-0x005D1B10
		protected virtual void InstantClearState(); // 0x005D41CC-0x005D427C
		protected virtual void DoStateTransition(SelectionState state, bool instant); // 0x005D4700-0x005D4978
		public Selectable FindSelectable(Vector3 dir); // 0x005D4978-0x005D5080
		private static Vector3 GetPointOnRectEdge(RectTransform rect, Vector2 dir); // 0x005D5080-0x005D53B8
		private void Navigate(AxisEventData eventData, Selectable sel); // 0x005D53B8-0x005D54AC
		public virtual Selectable FindSelectableOnLeft(); // 0x005D2A70-0x005D2BAC
		public virtual Selectable FindSelectableOnRight(); // 0x005D2BCC-0x005D2D08
		public virtual Selectable FindSelectableOnUp(); // 0x005D2D28-0x005D2E64
		public virtual Selectable FindSelectableOnDown(); // 0x005D2E84-0x005D2FC0
		public virtual void OnMove(AxisEventData eventData); // 0x005D2990-0x005D2A38
		private void StartColorTween(Color targetColor, bool instant); // 0x005D427C-0x005D43A4
		private void DoSpriteSwap(Sprite newSprite); // 0x005D43A4-0x005D4470
		private void TriggerAnimation(string triggername); // 0x005D4470-0x005D4700
		protected bool IsHighlighted(BaseEventData eventData); // 0x005D54AC-0x005D574C
		[Obsolete] // 0x0018399C-0x001839F4
		protected bool IsPressed(BaseEventData eventData); // 0x005D5798-0x005D57E4
		protected bool IsPressed(); // 0x005D574C-0x005D5798
		protected void UpdateSelectionState(BaseEventData eventData); // 0x005D3C90-0x005D3CE8
		private void EvaluateAndTransitionToSelectionState(BaseEventData eventData); // 0x005D57E4-0x005D584C
		private void InternalEvaluateAndTransitionToSelectionState(bool instant); // 0x005D4158-0x005D41C4
		public virtual void OnPointerDown(PointerEventData eventData); // 0x005D2420-0x005D25B8
		public virtual void OnPointerUp(PointerEventData eventData); // 0x005D267C-0x005D26C8
		public virtual void OnPointerEnter(PointerEventData eventData); // 0x005D584C-0x005D5858
		public virtual void OnPointerExit(PointerEventData eventData); // 0x005D5858-0x005D5864
		public virtual void OnSelect(BaseEventData eventData); // 0x005D5864-0x005D5870
		public virtual void OnDeselect(BaseEventData eventData); // 0x005D5870-0x005D587C
		public virtual void Select(); // 0x005D587C-0x005D5A0C
	}

	internal static class SetPropertyUtility // TypeDefIndex: 2685
	{
		// Methods
		public static bool SetColor(ref Color currentValue, Color newValue); // 0x005D5A9C-0x005D5B00
		public static bool SetStruct<T>(ref T currentValue, T newValue)
			where T : struct;
		public static bool SetClass<T>(ref T currentValue, T newValue)
			where T : class;
	}

	[AddComponentMenu] // 0x001805D8-0x00180680
	[RequireComponent] // 0x001805D8-0x00180680
	public class Slider : Selectable, IDragHandler, IInitializePotentialDragHandler, ICanvasElement // TypeDefIndex: 2686
	{
		// Fields
		[SerializeField] // 0x00182BD8-0x00182BE8
		private RectTransform m_FillRect; // 0x94
		[SerializeField] // 0x00182BE8-0x00182BF8
		private RectTransform m_HandleRect; // 0x98
		[SerializeField] // 0x00182BF8-0x00182C28
		[Space] // 0x00182BF8-0x00182C28
		private Direction m_Direction; // 0x9C
		[SerializeField] // 0x00182C28-0x00182C38
		private float m_MinValue; // 0xA0
		[SerializeField] // 0x00182C38-0x00182C48
		private float m_MaxValue; // 0xA4
		[SerializeField] // 0x00182C48-0x00182C58
		private bool m_WholeNumbers; // 0xA8
		[SerializeField] // 0x00182C58-0x00182C68
		protected float m_Value; // 0xAC
		[SerializeField] // 0x00182C68-0x00182C98
		[Space] // 0x00182C68-0x00182C98
		private SliderEvent m_OnValueChanged; // 0xB0
		private UnityEngine.UI.Image m_FillImage; // 0xB4
		private Transform m_FillTransform; // 0xB8
		private RectTransform m_FillContainerRect; // 0xBC
		private Transform m_HandleTransform; // 0xC0
		private RectTransform m_HandleContainerRect; // 0xC4
		private Vector2 m_Offset; // 0xC8
		private DrivenRectTransformTracker m_Tracker; // 0xD0
	
		// Properties
		public RectTransform fillRect { get; set; } // 0x005D61A8-0x005D61B0 0x005D61B0-0x005D6234
		public RectTransform handleRect { get; set; } // 0x005D6ABC-0x005D6AC4 0x005D6AC4-0x005D6B48
		public Direction direction { get; set; } // 0x005D6B48-0x005D6B50 0x005D6B50-0x005D6BCC
		public float minValue { get; set; } // 0x005D6BCC-0x005D6BD4 0x005D6BD4-0x005D6C6C
		public float maxValue { get; set; } // 0x005D6C80-0x005D6C88 0x005D6C88-0x005D6D20
		public bool wholeNumbers { get; set; } // 0x005D6D20-0x005D6D28 0x005D6D28-0x005D6DC0
		public virtual float value { get; set; } // 0x005D6DC0-0x005D6EF4 0x005D6EF4-0x005D6F08
		public float normalizedValue { get; set; } // 0x005D6F08-0x005D7014 0x005D7014-0x005D70CC
		public SliderEvent onValueChanged { get; set; } // 0x005D70CC-0x005D70D4 0x005D70D4-0x005D70DC
		private float stepSize { get; } // 0x005D70DC-0x005D7110 
		private Axis axis { get; } // 0x005D762C-0x005D7648 
		private bool reverseValue { get; } // 0x005D7614-0x005D762C 
		Transform ICanvasElement.transform { get; } // 0x005D83B0-0x005D8414 
	
		// Nested types
		public enum Direction // TypeDefIndex: 2687
		{
			LeftToRight = 0,
			RightToLeft = 1,
			BottomToTop = 2,
			TopToBottom = 3
		}
	
		[Serializable]
		public class SliderEvent : UnityEvent<float> // TypeDefIndex: 2688
		{
			// Constructors
			public SliderEvent(); // 0x005D6144-0x005D61A8
		}
	
		private enum Axis // TypeDefIndex: 2689
		{
			Horizontal = 0,
			Vertical = 1
		}
	
		// Constructors
		protected Slider(); // 0x005D6040-0x005D6144
	
		// Methods
		public virtual void Rebuild(CanvasUpdate executing); // 0x005D7110-0x005D7114
		public virtual void LayoutComplete(); // 0x005D7114-0x005D7118
		public virtual void GraphicUpdateComplete(); // 0x005D7118-0x005D711C
		protected override void OnEnable(); // 0x005D711C-0x005D715C
		protected override void OnDisable(); // 0x005D715C-0x005D7180
		protected override void OnDidApplyAnimationProperties(); // 0x005D7180-0x005D7494
		private void UpdateCachedReferences(); // 0x005D6234-0x005D66C4
		private float ClampValue(float input); // 0x005D7494-0x005D7614
		private void Set(float input); // 0x005D6C6C-0x005D6C80
		protected virtual void Set(float input, bool sendCallback); // 0x005D7648-0x005D7724
		protected override void OnRectTransformDimensionsChange(); // 0x005D7724-0x005D7760
		private void UpdateVisuals(); // 0x005D66C4-0x005D6ABC
		private void UpdateDrag(PointerEventData eventData, Camera cam); // 0x005D7760-0x005D7AE0
		private bool MayDrag(PointerEventData eventData); // 0x005D7AE0-0x005D7B5C
		public override void OnPointerDown(PointerEventData eventData); // 0x005D7B5C-0x005D7DF4
		public virtual void OnDrag(PointerEventData eventData); // 0x005D7DF4-0x005D7E40
		public override void OnMove(AxisEventData eventData); // 0x005D7E40-0x005D812C
		public override Selectable FindSelectableOnLeft(); // 0x005D812C-0x005D814C
		public override Selectable FindSelectableOnRight(); // 0x005D814C-0x005D816C
		public override Selectable FindSelectableOnUp(); // 0x005D816C-0x005D818C
		public override Selectable FindSelectableOnDown(); // 0x005D818C-0x005D81AC
		public virtual void OnInitializePotentialDrag(PointerEventData eventData); // 0x005D81AC-0x005D81DC
		public void SetDirection(Direction direction, bool includeRectLayouts); // 0x005D81DC-0x005D83B0
	}

	[Serializable]
	public struct SpriteState : IEquatable<SpriteState> // TypeDefIndex: 2690
	{
		// Fields
		[SerializeField] // 0x00182C98-0x00182CA8
		private Sprite m_HighlightedSprite; // 0x00
		[SerializeField] // 0x00182CA8-0x00182CB8
		private Sprite m_PressedSprite; // 0x04
		[SerializeField] // 0x00182CB8-0x00182CC8
		private Sprite m_DisabledSprite; // 0x08
	
		// Properties
		public Sprite highlightedSprite { get; set; } // 0x005D8414-0x005D841C 0x005D841C-0x005D8424
		public Sprite pressedSprite { get; set; } // 0x005D8424-0x005D842C 0x005D842C-0x005D8434
		public Sprite disabledSprite { get; set; } // 0x005D8434-0x005D843C 0x005D843C-0x005D8574
	
		// Methods
		public bool Equals(SpriteState other); // 0x005D8574-0x005D8590
	}

	public static class StencilMaterial // TypeDefIndex: 2691
	{
		// Fields
		private static List<MatEntry> m_List; // 0x00
	
		// Nested types
		private class MatEntry // TypeDefIndex: 2692
		{
			// Fields
			public Material baseMat; // 0x08
			public Material customMat; // 0x0C
			public int count; // 0x10
			public int stencilId; // 0x14
			public StencilOp operation; // 0x18
			public CompareFunction compareFunction; // 0x1C
			public int readMask; // 0x20
			public int writeMask; // 0x24
			public bool useAlphaClip; // 0x28
			public ColorWriteMask colorMask; // 0x2C
	
			// Constructors
			public MatEntry(); // 0x005D8598-0x005D85B0
		}
	
		// Constructors
		static StencilMaterial(); // 0x005D879C-0x005D882C
	
		// Methods
		[EditorBrowsable] // 0x001839F4-0x00183A58
		[Obsolete] // 0x001839F4-0x00183A58
		public static Material Add(Material baseMat, int stencilID); // 0x005D8590-0x005D8598
		public static Material Add(Material baseMat, int stencilID, StencilOp operation, CompareFunction compareFunction, ColorWriteMask colorWriteMask); // 0x005C06A4-0x005C0758
		public static Material Add(Material baseMat, int stencilID, StencilOp operation, CompareFunction compareFunction, ColorWriteMask colorWriteMask, int readMask, int writeMask); // 0x005C0758-0x005C15F4
		public static void Remove(Material customMat); // 0x005BFA34-0x005BFCCC
		public static void ClearAll(); // 0x005D85B0-0x005D879C
	}

	[AddComponentMenu] // 0x00180680-0x001806B8
	public class Text : MaskableGraphic, ILayoutElement // TypeDefIndex: 2693
	{
		// Fields
		[SerializeField] // 0x00182CC8-0x00182CD8
		private FontData m_FontData; // 0x64
		[SerializeField] // 0x00182CD8-0x00182D10
		[TextArea] // 0x00182CD8-0x00182D10
		protected string m_Text; // 0x68
		private TextGenerator m_TextCache; // 0x6C
		private TextGenerator m_TextCacheForLayout; // 0x70
		protected static Material s_DefaultText; // 0x00
		[NonSerialized]
		protected bool m_DisableFontTextureRebuiltCallback; // 0x74
		private readonly UIVertex[] m_TempVerts; // 0x78
	
		// Properties
		public TextGenerator cachedTextGenerator { get; } // 0x005D88DC-0x005D89D0 
		public TextGenerator cachedTextGeneratorForLayout { get; } // 0x005D89D0-0x005D8A50 
		public override Texture mainTexture { get; } // 0x005D8A50-0x005D8C94 
		public Font font { get; set; } // 0x005D8C94-0x005D8CC0 0x005D8E38-0x005D8F6C
		public virtual string text { get; set; } // 0x005D8F6C-0x005D8F74 0x005D8F74-0x005D9058
		public bool supportRichText { get; set; } // 0x005D9058-0x005D9084 0x005D9084-0x005D9110
		public bool resizeTextForBestFit { get; set; } // 0x005D9110-0x005D913C 0x005D913C-0x005D91C8
		public int resizeTextMinSize { get; set; } // 0x005D91C8-0x005D91F4 0x005D91F4-0x005D927C
		public int resizeTextMaxSize { get; set; } // 0x005D927C-0x005D92A8 0x005D92A8-0x005D9330
		public TextAnchor alignment { get; set; } // 0x005D9330-0x005D935C 0x005D935C-0x005D93E4
		public bool alignByGeometry { get; set; } // 0x005D93E4-0x005D9410 0x005D9410-0x005D9488
		public int fontSize { get; set; } // 0x005D9488-0x005D94B4 0x005D94B4-0x005D953C
		public HorizontalWrapMode horizontalOverflow { get; set; } // 0x005D953C-0x005D9568 0x005D9568-0x005D95F0
		public VerticalWrapMode verticalOverflow { get; set; } // 0x005D95F0-0x005D961C 0x005D961C-0x005D96A4
		public float lineSpacing { get; set; } // 0x005D96A4-0x005D96D0 0x005D96D0-0x005D9770
		public FontStyle fontStyle { get; set; } // 0x005D9770-0x005D979C 0x005D979C-0x005D9824
		public float pixelsPerUnit { get; } // 0x005D9824-0x005D9A28 
		public virtual float minWidth { get; } // 0x005DAD3C-0x005DAD44 
		public virtual float preferredWidth { get; } // 0x005DAD44-0x005DAE80 
		public virtual float flexibleWidth { get; } // 0x005DAE80-0x005DAE8C 
		public virtual float minHeight { get; } // 0x005DAE8C-0x005DAE94 
		public virtual float preferredHeight { get; } // 0x005DAE94-0x005DAFB8 
		public virtual float flexibleHeight { get; } // 0x005DAFB8-0x005DAFC4 
		public virtual int layoutPriority { get; } // 0x005DAFC4-0x005DAFCC 
	
		// Constructors
		protected Text(); // 0x005D882C-0x005D88DC
		static Text(); // 0x005DAFCC-0x005DB034
	
		// Methods
		public void FontTextureChanged(); // 0x005D8CC0-0x005D8E38
		protected override void OnEnable(); // 0x005D9A28-0x005D9ADC
		protected override void OnDisable(); // 0x005D9ADC-0x005D9B68
		protected override void UpdateGeometry(); // 0x005D9B68-0x005D9C10
		internal void AssignDefaultFont(); // 0x005D9C10-0x005D9C8C
		public TextGenerationSettings GetGenerationSettings(Vector2 extents); // 0x005D9C8C-0x005DA060
		public static Vector2 GetTextAnchorPivot(TextAnchor anchor); // 0x005DA060-0x005DA1D8
		protected override void OnPopulateMesh(VertexHelper toFill); // 0x005DA1D8-0x005DAB64
		public virtual void CalculateLayoutInputHorizontal(); // 0x005DAD34-0x005DAD38
		public virtual void CalculateLayoutInputVertical(); // 0x005DAD38-0x005DAD3C
	}

	[AddComponentMenu] // 0x001806B8-0x00180760
	[RequireComponent] // 0x001806B8-0x00180760
	public class Toggle : Selectable, IPointerClickHandler, ISubmitHandler, ICanvasElement // TypeDefIndex: 2694
	{
		// Fields
		public ToggleTransition toggleTransition; // 0x94
		public Graphic graphic; // 0x98
		[SerializeField] // 0x00182D10-0x00182D20
		private ToggleGroup m_Group; // 0x9C
		public ToggleEvent onValueChanged; // 0xA0
		[SerializeField] // 0x00182D20-0x00182D84
		[Tooltip] // 0x00182D20-0x00182D84
		private bool m_IsOn; // 0xA4
	
		// Properties
		public ToggleGroup group { get; set; } // 0x005DB140-0x005DB148 0x005DB148-0x005DB170
		public bool isOn { get; set; } // 0x005DB7C0-0x005DB7C8 0x005DB940-0x005DB948
		Transform ICanvasElement.transform { get; } // 0x005DBD14-0x005DBD1C 
	
		// Nested types
		public enum ToggleTransition // TypeDefIndex: 2695
		{
			None = 0,
			Fade = 1
		}
	
		[Serializable]
		public class ToggleEvent : UnityEvent<bool> // TypeDefIndex: 2696
		{
			// Constructors
			public ToggleEvent(); // 0x005DB0DC-0x005DB140
		}
	
		// Constructors
		protected Toggle(); // 0x005DB034-0x005DB0DC
	
		// Methods
		public virtual void Rebuild(CanvasUpdate executing); // 0x005DB488-0x005DB48C
		public virtual void LayoutComplete(); // 0x005DB48C-0x005DB490
		public virtual void GraphicUpdateComplete(); // 0x005DB490-0x005DB494
		protected override void OnEnable(); // 0x005DB494-0x005DB4C4
		protected override void OnDisable(); // 0x005DB4C4-0x005DB4E8
		protected override void OnDidApplyAnimationProperties(); // 0x005DB4E8-0x005DB648
		private void SetToggleGroup(ToggleGroup newGroup, bool setMemberValue); // 0x005DB170-0x005DB380
		private void Set(bool value); // 0x005DB648-0x005DB650
		private void Set(bool value, bool sendCallback); // 0x005DB948-0x005DBB14
		private void PlayEffect(bool instant); // 0x005DB380-0x005DB488
		protected override void Start(); // 0x005DBC60-0x005DBC68
		private void InternalToggle(); // 0x005DBC68-0x005DBCD0
		public virtual void OnPointerClick(PointerEventData eventData); // 0x005DBCD0-0x005DBD10
		public virtual void OnSubmit(BaseEventData eventData); // 0x005DBD10-0x005DBD14
	}

	[AddComponentMenu] // 0x00180760-0x001807B4
	[DisallowMultipleComponent] // 0x00180760-0x001807B4
	public class ToggleGroup : UIBehaviour // TypeDefIndex: 2697
	{
		// Fields
		[SerializeField] // 0x00182D84-0x00182D94
		private bool m_AllowSwitchOff; // 0x0C
		private List<Toggle> m_Toggles; // 0x10
		[CompilerGenerated] // 0x00182D94-0x00182DA4
		private static Predicate<Toggle> <>f__am$cache0; // 0x00
		[CompilerGenerated] // 0x00182DA4-0x00182DB4
		private static Func<Toggle, bool> <>f__am$cache1; // 0x04
	
		// Properties
		public bool allowSwitchOff { get; set; } // 0x005DBC58-0x005DBC60 0x005DBDB0-0x005DBDB8
	
		// Constructors
		protected ToggleGroup(); // 0x005DBD1C-0x005DBDB0
	
		// Methods
		private void ValidateToggleIsInGroup(Toggle toggle); // 0x005DBDB8-0x005DBF50
		public void NotifyToggleOn(Toggle toggle); // 0x005DB7C8-0x005DB940
		public void UnregisterToggle(Toggle toggle); // 0x005DB650-0x005DB708
		public void RegisterToggle(Toggle toggle); // 0x005DB708-0x005DB7C0
		public bool AnyTogglesOn(); // 0x005DBB14-0x005DBC58
		public IEnumerable<Toggle> ActiveToggles(); // 0x005DBF50-0x005DC03C
		public void SetAllTogglesOff(); // 0x005DC03C-0x005DC12C
		[CompilerGenerated] // 0x00183A58-0x00183A68
		private static bool <AnyTogglesOn>m__0(Toggle x); // 0x005DC12C-0x005DC150
		[CompilerGenerated] // 0x00183A68-0x00183A78
		private static bool <ActiveToggles>m__1(Toggle x); // 0x005DC150-0x005DC174
	}

	public class ClipperRegistry // TypeDefIndex: 2698
	{
		// Fields
		private static ClipperRegistry s_Instance; // 0x00
		private readonly IndexedSet<IClipper> m_Clippers; // 0x08
	
		// Properties
		public static ClipperRegistry instance { get; } // 0x00498190-0x0049822C 
	
		// Constructors
		protected ClipperRegistry(); // 0x0049908C-0x00499118
	
		// Methods
		public void Cull(); // 0x0049822C-0x0049838C
		public static void Register(IClipper c); // 0x00499118-0x004991B4
		public static void Unregister(IClipper c); // 0x004991B4-0x00499248
	}

	public static class Clipping // TypeDefIndex: 2699
	{
		// Methods
		public static Rect FindCullAndClipWorldRect(List<RectMask2D> rectMaskParents, out bool validRect); // 0x00499248-0x004995B4
		private static Rect RectIntersect(Rect a, Rect b); // 0x004995B4-0x00499840
	}

	public interface IClipper // TypeDefIndex: 2700
	{
		// Methods
		void PerformClipping();
	}

	public interface IClippable // TypeDefIndex: 2701
	{
		// Properties
		GameObject gameObject { get; }
		RectTransform rectTransform { get; }
	
		// Methods
		void RecalculateClipping();
		void Cull(Rect clipRect, bool validRect);
		void SetClipRect(Rect value, bool validRect);
	}

	internal class RectangularVertexClipper // TypeDefIndex: 2702
	{
		// Fields
		private readonly Vector3[] m_WorldCorners; // 0x08
		private readonly Vector3[] m_CanvasCorners; // 0x0C
	
		// Constructors
		public RectangularVertexClipper(); // 0x005C5E30-0x005C5EB4
	
		// Methods
		public Rect GetCanvasRect(RectTransform t, Canvas c); // 0x005C61A4-0x005C64F4
	}

	[AddComponentMenu] // 0x001807B4-0x0018088C
	[DisallowMultipleComponent] // 0x001807B4-0x0018088C
	[ExecuteAlways] // 0x001807B4-0x0018088C
	[RequireComponent] // 0x001807B4-0x0018088C
	public class AspectRatioFitter : UIBehaviour, ILayoutSelfController // TypeDefIndex: 2703
	{
		// Fields
		[SerializeField] // 0x00182DB4-0x00182DC4
		private AspectMode m_AspectMode; // 0x0C
		[SerializeField] // 0x00182DC4-0x00182DD4
		private float m_AspectRatio; // 0x10
		[NonSerialized]
		private RectTransform m_Rect; // 0x14
		private bool m_DelayedSetDirty; // 0x18
		private DrivenRectTransformTracker m_Tracker; // 0x19
	
		// Properties
		public AspectMode aspectMode { get; set; } // 0x00495274-0x0049527C 0x0049527C-0x004952F8
		public float aspectRatio { get; set; } // 0x004952FC-0x00495304 0x00495304-0x00495380
		private RectTransform rectTransform { get; } // 0x00495380-0x00495434 
	
		// Nested types
		public enum AspectMode // TypeDefIndex: 2704
		{
			None = 0,
			WidthControlsHeight = 1,
			HeightControlsWidth = 2,
			FitInParent = 3,
			EnvelopeParent = 4
		}
	
		// Constructors
		protected AspectRatioFitter(); // 0x00495258-0x00495274
	
		// Methods
		protected override void OnEnable(); // 0x00495434-0x00495438
		protected override void OnDisable(); // 0x00495438-0x004954D4
		protected virtual void Update(); // 0x004954D4-0x004954EC
		protected override void OnRectTransformDimensionsChange(); // 0x004954EC-0x004954F0
		private void UpdateRect(); // 0x004954F0-0x004958AC
		private float GetSizeDeltaToProduceSize(float size, int axis); // 0x00495A2C-0x00495B34
		private Vector2 GetParentSize(); // 0x004958AC-0x00495A2C
		public virtual void SetLayoutHorizontal(); // 0x00495B34-0x00495B38
		public virtual void SetLayoutVertical(); // 0x00495B38-0x00495B3C
		protected void SetDirty(); // 0x004952F8-0x004952FC
	}

	[AddComponentMenu] // 0x0018088C-0x00180950
	[ExecuteAlways] // 0x0018088C-0x00180950
	[RequireComponent] // 0x0018088C-0x00180950
	public class CanvasScaler : UIBehaviour // TypeDefIndex: 2705
	{
		// Fields
		[SerializeField] // 0x00182DD4-0x00182E4C
		[Tooltip] // 0x00182DD4-0x00182E4C
		private ScaleMode m_UiScaleMode; // 0x0C
		[SerializeField] // 0x00182E4C-0x00182E94
		[Tooltip] // 0x00182E4C-0x00182E94
		protected float m_ReferencePixelsPerUnit; // 0x10
		[SerializeField] // 0x00182E94-0x00182F0C
		[Tooltip] // 0x00182E94-0x00182F0C
		protected float m_ScaleFactor; // 0x14
		[SerializeField] // 0x00182F0C-0x00182F54
		[Tooltip] // 0x00182F0C-0x00182F54
		protected Vector2 m_ReferenceResolution; // 0x18
		[SerializeField] // 0x00182F54-0x00182F9C
		[Tooltip] // 0x00182F54-0x00182F9C
		protected ScreenMatchMode m_ScreenMatchMode; // 0x20
		[Range] // 0x00182F9C-0x00182FFC
		[SerializeField] // 0x00182F9C-0x00182FFC
		[Tooltip] // 0x00182F9C-0x00182FFC
		protected float m_MatchWidthOrHeight; // 0x24
		private const float kLogBase = 2f; // Metadata: 0x0021B363
		[SerializeField] // 0x00182FFC-0x00183074
		[Tooltip] // 0x00182FFC-0x00183074
		protected Unit m_PhysicalUnit; // 0x28
		[SerializeField] // 0x00183074-0x001830E8
		[Tooltip] // 0x00183074-0x001830E8
		protected float m_FallbackScreenDPI; // 0x2C
		[SerializeField] // 0x001830E8-0x00183130
		[Tooltip] // 0x001830E8-0x00183130
		protected float m_DefaultSpriteDPI; // 0x30
		[SerializeField] // 0x00183130-0x00183178
		[Tooltip] // 0x00183130-0x00183178
		protected float m_DynamicPixelsPerUnit; // 0x34
		private Canvas m_Canvas; // 0x38
		[NonSerialized]
		private float m_PrevReferencePixelsPerUnit; // 0x3C
	
		// Properties
		public ScaleMode uiScaleMode { get; set; } // 0x00496540-0x00496548 0x00496548-0x00496550
		public float referencePixelsPerUnit { get; set; } // 0x00496550-0x00496558 0x00496558-0x00496560
		public float scaleFactor { get; set; } // 0x00496560-0x00496568 0x00496568-0x004965FC
		public Vector2 referenceResolution { get; set; } // 0x004965FC-0x00496610 0x00496610-0x0049674C
		public ScreenMatchMode screenMatchMode { get; set; } // 0x0049674C-0x00496754 0x00496754-0x0049675C
		public float matchWidthOrHeight { get; set; } // 0x0049675C-0x00496764 0x00496764-0x0049676C
		public Unit physicalUnit { get; set; } // 0x0049676C-0x00496774 0x00496774-0x0049677C
		public float fallbackScreenDPI { get; set; } // 0x0049677C-0x00496784 0x00496784-0x0049678C
		public float defaultSpriteDPI { get; set; } // 0x0049678C-0x00496794 0x00496794-0x00496824
		public float dynamicPixelsPerUnit { get; set; } // 0x00496824-0x0049682C 0x0049682C-0x00496834
	
		// Nested types
		public enum ScaleMode // TypeDefIndex: 2706
		{
			ConstantPixelSize = 0,
			ScaleWithScreenSize = 1,
			ConstantPhysicalSize = 2
		}
	
		public enum ScreenMatchMode // TypeDefIndex: 2707
		{
			MatchWidthOrHeight = 0,
			Expand = 1,
			Shrink = 2
		}
	
		public enum Unit // TypeDefIndex: 2708
		{
			Centimeters = 0,
			Millimeters = 1,
			Inches = 2,
			Points = 3,
			Picas = 4
		}
	
		// Constructors
		protected CanvasScaler(); // 0x004964AC-0x00496540
	
		// Methods
		protected override void OnEnable(); // 0x00496834-0x004968B0
		protected override void OnDisable(); // 0x004968B0-0x004968D8
		protected virtual void Update(); // 0x00496964-0x00496974
		protected virtual void Handle(); // 0x00496974-0x00496ABC
		protected virtual void HandleWorldCanvas(); // 0x00496ABC-0x00496AE0
		protected virtual void HandleConstantPixelSize(); // 0x00496AE0-0x00496B04
		protected virtual void HandleScaleWithScreenSize(); // 0x00496B04-0x00496E88
		protected virtual void HandleConstantPhysicalSize(); // 0x00496E88-0x00496F18
		protected void SetScaleFactor(float scaleFactor); // 0x004968D8-0x0049690C
		protected void SetReferencePixelsPerUnit(float referencePixelsPerUnit); // 0x0049690C-0x00496964
	}

	[AddComponentMenu] // 0x00180950-0x00180A18
	[ExecuteAlways] // 0x00180950-0x00180A18
	[RequireComponent] // 0x00180950-0x00180A18
	public class ContentSizeFitter : UIBehaviour, ILayoutSelfController // TypeDefIndex: 2709
	{
		// Fields
		[SerializeField] // 0x00183178-0x00183188
		protected FitMode m_HorizontalFit; // 0x0C
		[SerializeField] // 0x00183188-0x00183198
		protected FitMode m_VerticalFit; // 0x10
		[NonSerialized]
		private RectTransform m_Rect; // 0x14
		private DrivenRectTransformTracker m_Tracker; // 0x18
	
		// Properties
		public FitMode horizontalFit { get; set; } // 0x00499FA0-0x00499FA8 0x00499FA8-0x0049A024
		public FitMode verticalFit { get; set; } // 0x0049A0D0-0x0049A0D8 0x0049A0D8-0x0049A154
		private RectTransform rectTransform { get; } // 0x0049A154-0x0049A208 
	
		// Nested types
		public enum FitMode // TypeDefIndex: 2710
		{
			Unconstrained = 0,
			MinSize = 1,
			PreferredSize = 2
		}
	
		// Constructors
		protected ContentSizeFitter(); // 0x00499F8C-0x00499FA0
	
		// Methods
		protected override void OnEnable(); // 0x0049A208-0x0049A20C
		protected override void OnDisable(); // 0x0049A20C-0x0049A2A8
		protected override void OnRectTransformDimensionsChange(); // 0x0049A2A8-0x0049A2AC
		private void HandleSelfFittingAlongAxis(int axis); // 0x0049A2AC-0x0049A378
		public virtual void SetLayoutHorizontal(); // 0x0049A378-0x0049A3A0
		public virtual void SetLayoutVertical(); // 0x0049A3A0-0x0049A404
		protected void SetDirty(); // 0x0049A024-0x0049A0D0
	}

	[AddComponentMenu] // 0x00180A18-0x00180A64
	public class GridLayoutGroup : LayoutGroup // TypeDefIndex: 2711
	{
		// Fields
		[SerializeField] // 0x00183198-0x001831A8
		protected Corner m_StartCorner; // 0x38
		[SerializeField] // 0x001831A8-0x001831B8
		protected Axis m_StartAxis; // 0x3C
		[SerializeField] // 0x001831B8-0x001831C8
		protected Vector2 m_CellSize; // 0x40
		[SerializeField] // 0x001831C8-0x001831D8
		protected Vector2 m_Spacing; // 0x48
		[SerializeField] // 0x001831D8-0x001831E8
		protected Constraint m_Constraint; // 0x50
		[SerializeField] // 0x001831E8-0x001831F8
		protected int m_ConstraintCount; // 0x54
	
		// Properties
		public Corner startCorner { get; set; } // 0x005E4F14-0x005E4F1C 0x005E4F1C-0x005E4F8C
		public Axis startAxis { get; set; } // 0x005E4F8C-0x005E4F94 0x005E4F94-0x005E5004
		public Vector2 cellSize { get; set; } // 0x005E5004-0x005E5018 0x005E5018-0x005E509C
		public Vector2 spacing { get; set; } // 0x005E509C-0x005E50B0 0x005E50B0-0x005E5134
		public Constraint constraint { get; set; } // 0x005E5134-0x005E513C 0x005E513C-0x005E51AC
		public int constraintCount { get; set; } // 0x005E51AC-0x005E51B4 0x005E51B4-0x005E5264
	
		// Nested types
		public enum Corner // TypeDefIndex: 2712
		{
			UpperLeft = 0,
			UpperRight = 1,
			LowerLeft = 2,
			LowerRight = 3
		}
	
		public enum Axis // TypeDefIndex: 2713
		{
			Horizontal = 0,
			Vertical = 1
		}
	
		public enum Constraint // TypeDefIndex: 2714
		{
			Flexible = 0,
			FixedColumnCount = 1,
			FixedRowCount = 2
		}
	
		// Constructors
		protected GridLayoutGroup(); // 0x005E4CC4-0x005E4DA8
	
		// Methods
		public override void CalculateLayoutInputHorizontal(); // 0x005E5264-0x005E54A8
		public override void CalculateLayoutInputVertical(); // 0x005E5A40-0x005E5CE8
		public override void SetLayoutHorizontal(); // 0x005E5D9C-0x005E5DA4
		public override void SetLayoutVertical(); // 0x005E67CC-0x005E67D4
		private void SetCellsAlongAxis(int axis); // 0x005E5DA4-0x005E67CC
	}

	[AddComponentMenu] // 0x00180A64-0x00180AB4
	public class HorizontalLayoutGroup : HorizontalOrVerticalLayoutGroup // TypeDefIndex: 2715
	{
		// Constructors
		protected HorizontalLayoutGroup(); // 0x005E6A44-0x005E6A5C
	
		// Methods
		public override void CalculateLayoutInputHorizontal(); // 0x005E6A74-0x005E6A98
		public override void CalculateLayoutInputVertical(); // 0x005E6DA4-0x005E6DB0
		public override void SetLayoutHorizontal(); // 0x005E6DB0-0x005E6DBC
		public override void SetLayoutVertical(); // 0x005E755C-0x005E7568
	}

	public abstract class HorizontalOrVerticalLayoutGroup : LayoutGroup // TypeDefIndex: 2716
	{
		// Fields
		[SerializeField] // 0x001831F8-0x00183208
		protected float m_Spacing; // 0x38
		[SerializeField] // 0x00183208-0x00183218
		protected bool m_ChildForceExpandWidth; // 0x3C
		[SerializeField] // 0x00183218-0x00183228
		protected bool m_ChildForceExpandHeight; // 0x3D
		[SerializeField] // 0x00183228-0x00183238
		protected bool m_ChildControlWidth; // 0x3E
		[SerializeField] // 0x00183238-0x00183248
		protected bool m_ChildControlHeight; // 0x3F
	
		// Properties
		public float spacing { get; set; } // 0x005E7568-0x005E7570 0x005E7570-0x005E75E0
		public bool childForceExpandWidth { get; set; } // 0x005E75E0-0x005E75E8 0x005E75E8-0x005E7658
		public bool childForceExpandHeight { get; set; } // 0x005E7658-0x005E7660 0x005E7660-0x005E76D0
		public bool childControlWidth { get; set; } // 0x005E76D0-0x005E76D8 0x005E76D8-0x005E7748
		public bool childControlHeight { get; set; } // 0x005E7748-0x005E7750 0x005E7750-0x005E77C0
	
		// Constructors
		protected HorizontalOrVerticalLayoutGroup(); // 0x005E6A5C-0x005E6A74
	
		// Methods
		protected void CalcAlongAxis(int axis, bool isVertical); // 0x005E6A98-0x005E6DA4
		protected void SetChildrenAlongAxis(int axis, bool isVertical); // 0x005E6DBC-0x005E755C
		private void GetChildSizes(RectTransform child, int axis, bool controlSize, bool childForceExpand, out float min, out float preferred, out float flexible); // 0x005E77C0-0x005E7920
	}

	public interface ILayoutElement // TypeDefIndex: 2717
	{
		// Properties
		float minWidth { get; }
		float preferredWidth { get; }
		float flexibleWidth { get; }
		float minHeight { get; }
		float preferredHeight { get; }
		float flexibleHeight { get; }
		int layoutPriority { get; }
	
		// Methods
		void CalculateLayoutInputHorizontal();
		void CalculateLayoutInputVertical();
	}

	public interface ILayoutController // TypeDefIndex: 2718
	{
		// Methods
		void SetLayoutHorizontal();
		void SetLayoutVertical();
	}

	public interface ILayoutGroup : ILayoutController // TypeDefIndex: 2719
	{
	}

	public interface ILayoutSelfController : ILayoutController // TypeDefIndex: 2720
	{
	}

	public interface ILayoutIgnorer // TypeDefIndex: 2721
	{
		// Properties
		bool ignoreLayout { get; }
	}

	[AddComponentMenu] // 0x00180AB4-0x00180B78
	[ExecuteAlways] // 0x00180AB4-0x00180B78
	[RequireComponent] // 0x00180AB4-0x00180B78
	public class LayoutElement : UIBehaviour, ILayoutElement, ILayoutIgnorer // TypeDefIndex: 2722
	{
		// Fields
		[SerializeField] // 0x00183248-0x00183258
		private bool m_IgnoreLayout; // 0x0C
		[SerializeField] // 0x00183258-0x00183268
		private float m_MinWidth; // 0x10
		[SerializeField] // 0x00183268-0x00183278
		private float m_MinHeight; // 0x14
		[SerializeField] // 0x00183278-0x00183288
		private float m_PreferredWidth; // 0x18
		[SerializeField] // 0x00183288-0x00183298
		private float m_PreferredHeight; // 0x1C
		[SerializeField] // 0x00183298-0x001832A8
		private float m_FlexibleWidth; // 0x20
		[SerializeField] // 0x001832A8-0x001832B8
		private float m_FlexibleHeight; // 0x24
		[SerializeField] // 0x001832B8-0x001832C8
		private int m_LayoutPriority; // 0x28
	
		// Properties
		public virtual bool ignoreLayout { get; set; } // 0x005FE40C-0x005FE414 0x005FE414-0x005FE490
		public virtual float minWidth { get; set; } // 0x005FE574-0x005FE57C 0x005FE57C-0x005FE5F8
		public virtual float minHeight { get; set; } // 0x005FE5F8-0x005FE600 0x005FE600-0x005FE67C
		public virtual float preferredWidth { get; set; } // 0x005FE67C-0x005FE684 0x005FE684-0x005FE700
		public virtual float preferredHeight { get; set; } // 0x005FE700-0x005FE708 0x005FE708-0x005FE784
		public virtual float flexibleWidth { get; set; } // 0x005FE784-0x005FE78C 0x005FE78C-0x005FE808
		public virtual float flexibleHeight { get; set; } // 0x005FE808-0x005FE810 0x005FE810-0x005FE88C
		public virtual int layoutPriority { get; set; } // 0x005FE88C-0x005FE894 0x005FE894-0x005FE910
	
		// Constructors
		protected LayoutElement(); // 0x005FE3D8-0x005FE40C
	
		// Methods
		public virtual void CalculateLayoutInputHorizontal(); // 0x005FE56C-0x005FE570
		public virtual void CalculateLayoutInputVertical(); // 0x005FE570-0x005FE574
		protected override void OnEnable(); // 0x005FE910-0x005FE930
		protected override void OnTransformParentChanged(); // 0x005FE930-0x005FE934
		protected override void OnDisable(); // 0x005FE934-0x005FE954
		protected override void OnDidApplyAnimationProperties(); // 0x005FE954-0x005FE958
		protected override void OnBeforeTransformParentChanged(); // 0x005FE958-0x005FE95C
		protected void SetDirty(); // 0x005FE490-0x005FE56C
	}

	[DisallowMultipleComponent] // 0x00180B78-0x00180C10
	[ExecuteAlways] // 0x00180B78-0x00180C10
	[RequireComponent] // 0x00180B78-0x00180C10
	public abstract class LayoutGroup : UIBehaviour, ILayoutElement, ILayoutGroup // TypeDefIndex: 2723
	{
		// Fields
		[SerializeField] // 0x001832C8-0x001832D8
		protected RectOffset m_Padding; // 0x0C
		[SerializeField] // 0x001832D8-0x001832E8
		protected TextAnchor m_ChildAlignment; // 0x10
		[NonSerialized]
		private RectTransform m_Rect; // 0x14
		protected DrivenRectTransformTracker m_Tracker; // 0x18
		private Vector2 m_TotalMinSize; // 0x1C
		private Vector2 m_TotalPreferredSize; // 0x24
		private Vector2 m_TotalFlexibleSize; // 0x2C
		[NonSerialized]
		private List<RectTransform> m_RectChildren; // 0x34
	
		// Properties
		public RectOffset padding { get; set; } // 0x005E59E0-0x005E59E8 0x005FE95C-0x005FE9CC
		public TextAnchor childAlignment { get; set; } // 0x005FE9CC-0x005FE9D4 0x005FE9D4-0x005FEA44
		protected RectTransform rectTransform { get; } // 0x005E5CE8-0x005E5D9C 
		protected List<RectTransform> rectChildren { get; } // 0x005E59D8-0x005E59E0 
		public virtual float minWidth { get; } // 0x005FEA44-0x005FEA54 
		public virtual float preferredWidth { get; } // 0x005FEA54-0x005FEA64 
		public virtual float flexibleWidth { get; } // 0x005FEA64-0x005FEA74 
		public virtual float minHeight { get; } // 0x005FEA74-0x005FEA84 
		public virtual float preferredHeight { get; } // 0x005FEA84-0x005FEA94 
		public virtual float flexibleHeight { get; } // 0x005FEA94-0x005FEAA4 
		public virtual int layoutPriority { get; } // 0x005FEAA4-0x005FEAAC 
		private bool isRootLayoutGroup { get; } // 0x005FEC80-0x005FEE20 
	
		// Nested types
		[CompilerGenerated] // 0x00180EA8-0x00180EB8
		private sealed class <DelayedSetDirty>c__Iterator0 : IEnumerator<object> // TypeDefIndex: 2724
		{
			// Fields
			internal RectTransform rectTransform; // 0x08
			internal object $current; // 0x0C
			internal bool $disposing; // 0x10
			internal int $PC; // 0x14
	
			// Properties
			object IEnumerator<object>.Current { [DebuggerHidden] /* 0x00183ED8-0x00183EE8 */ get; } // 0x005BC164-0x005BC16C 
			object IEnumerator.Current { [DebuggerHidden] /* 0x00183EE8-0x00183EF8 */ get; } // 0x005BC16C-0x005BC174 
	
			// Constructors
			[DebuggerHidden] // 0x00183EC8-0x00183ED8
			public <DelayedSetDirty>c__Iterator0(); // 0x005BBB28-0x005BBB30
	
			// Methods
			public bool MoveNext(); // 0x005BBB30-0x005BBC14
			[DebuggerHidden] // 0x00183EF8-0x00183F08
			public void Dispose(); // 0x005BC174-0x005BC188
			[DebuggerHidden] // 0x00183F08-0x00183F18
			public void Reset(); // 0x005BC188-0x005BC210
		}
	
		// Constructors
		protected LayoutGroup(); // 0x005E4DA8-0x005E4F14
	
		// Methods
		public virtual void CalculateLayoutInputHorizontal(); // 0x005E54A8-0x005E59D8
		public abstract void CalculateLayoutInputVertical();
		public abstract void SetLayoutHorizontal();
		public abstract void SetLayoutVertical();
		protected override void OnEnable(); // 0x005FEAAC-0x005FEACC
		protected override void OnDisable(); // 0x005FEBD4-0x005FEC7C
		protected override void OnDidApplyAnimationProperties(); // 0x005FEC7C-0x005FEC80
		protected float GetTotalMinSize(int axis); // 0x005E7ACC-0x005E7AD8
		protected float GetTotalPreferredSize(int axis); // 0x005E7AC0-0x005E7ACC
		protected float GetTotalFlexibleSize(int axis); // 0x005E7AB4-0x005E7AC0
		protected float GetStartOffset(int axis, float requiredSpaceWithoutPadding); // 0x005E67D4-0x005E693C
		protected float GetAlignmentOnAxis(int axis); // 0x005E7920-0x005E7970
		protected void SetLayoutInputForAxis(float totalMin, float totalPreferred, float totalFlexible, int axis); // 0x005E59E8-0x005E5A40
		protected void SetChildAlongAxis(RectTransform rect, int axis, float pos); // 0x005E7970-0x005E7AB4
		protected void SetChildAlongAxis(RectTransform rect, int axis, float pos, float size); // 0x005E693C-0x005E6A44
		protected override void OnRectTransformDimensionsChange(); // 0x005FEE20-0x005FEE50
		protected virtual void OnTransformChildrenChanged(); // 0x005FEE50-0x005FEE54
		protected void SetProperty<T>(ref T currentValue, T newValue);
		protected void SetDirty(); // 0x005FEACC-0x005FEBD4
		[DebuggerHidden] // 0x00183A78-0x00183A88
		private IEnumerator DelayedSetDirty(RectTransform rectTransform); // 0x005FEE54-0x005FEED8
	}

	public class LayoutRebuilder : ICanvasElement // TypeDefIndex: 2725
	{
		// Fields
		private RectTransform m_ToRebuild; // 0x08
		private int m_CachedHashFromTransform; // 0x0C
		private static ObjectPool<LayoutRebuilder> s_Rebuilders; // 0x00
		[CompilerGenerated] // 0x001832E8-0x001832F8
		private static RectTransform.ReapplyDrivenProperties <>f__mg$cache0; // 0x04
		[CompilerGenerated] // 0x001832F8-0x00183308
		private static Predicate<Component> <>f__am$cache0; // 0x08
		[CompilerGenerated] // 0x00183308-0x00183318
		private static UnityAction<Component> <>f__am$cache1; // 0x0C
		[CompilerGenerated] // 0x00183318-0x00183328
		private static UnityAction<Component> <>f__am$cache2; // 0x10
		[CompilerGenerated] // 0x00183328-0x00183338
		private static UnityAction<Component> <>f__am$cache3; // 0x14
		[CompilerGenerated] // 0x00183338-0x00183348
		private static UnityAction<Component> <>f__am$cache4; // 0x18
	
		// Properties
		public Transform transform { get; } // 0x005BC438-0x005BC440 
	
		// Constructors
		static LayoutRebuilder(); // 0x005BC210-0x005BC360
		public LayoutRebuilder(); // 0x005BC360-0x005BC368
	
		// Methods
		private void Initialize(RectTransform controller); // 0x005BC368-0x005BC3A8
		private void Clear(); // 0x005BC3A8-0x005BC3B8
		private static void ReapplyDrivenProperties(RectTransform driven); // 0x005BC3B8-0x005BC438
		public bool IsDestroyed(); // 0x005BC440-0x005BC4CC
		private static void StripDisabledBehavioursFromList(List<Component> components); // 0x005BC4CC-0x005BC64C
		public static void ForceRebuildLayoutImmediate(RectTransform layoutRoot); // 0x005BC64C-0x005BC794
		public void Rebuild(CanvasUpdate executing); // 0x005BC794-0x005BCBC8
		private void PerformLayoutControl(RectTransform rect, UnityAction<Component> action); // 0x005BCFA4-0x005BD440
		private void PerformLayoutCalculation(RectTransform rect, UnityAction<Component> action); // 0x005BCBC8-0x005BCFA4
		public static void MarkLayoutForRebuild(RectTransform rect); // 0x005BBC14-0x005BC164
		private static bool ValidController(RectTransform layoutRoot, List<Component> comps); // 0x005BD440-0x005BD6CC
		private static void MarkLayoutRootForRebuild(RectTransform controller); // 0x005BD6CC-0x005BD8BC
		public void LayoutComplete(); // 0x005BD8BC-0x005BD978
		public void GraphicUpdateComplete(); // 0x005BD978-0x005BD97C
		public override int GetHashCode(); // 0x005BD97C-0x005BD984
		public override bool Equals(object obj); // 0x005BD984-0x005BD9E4
		public override string ToString(); // 0x005BD9E4-0x005BDA4C
		[CompilerGenerated] // 0x00183A88-0x00183A98
		private static void <s_Rebuilders>m__0(LayoutRebuilder x); // 0x005BDA4C-0x005BDA78
		[CompilerGenerated] // 0x00183A98-0x00183AA8
		private static bool <StripDisabledBehavioursFromList>m__1(Component e); // 0x005BDA78-0x005BDB18
		[CompilerGenerated] // 0x00183AA8-0x00183AB8
		private static void <Rebuild>m__2(Component e); // 0x005BDB18-0x005BDC18
		[CompilerGenerated] // 0x00183AB8-0x00183AC8
		private static void <Rebuild>m__3(Component e); // 0x005BDC18-0x005BDD18
		[CompilerGenerated] // 0x00183AC8-0x00183AD8
		private static void <Rebuild>m__4(Component e); // 0x005BDD18-0x005BDE18
		[CompilerGenerated] // 0x00183AD8-0x00183AE8
		private static void <Rebuild>m__5(Component e); // 0x005BDE18-0x005BDF18
	}

	public static class LayoutUtility // TypeDefIndex: 2726
	{
		// Fields
		[CompilerGenerated] // 0x00183348-0x00183358
		private static Func<ILayoutElement, float> <>f__am$cache0; // 0x00
		[CompilerGenerated] // 0x00183358-0x00183368
		private static Func<ILayoutElement, float> <>f__am$cache1; // 0x04
		[CompilerGenerated] // 0x00183368-0x00183378
		private static Func<ILayoutElement, float> <>f__am$cache2; // 0x08
		[CompilerGenerated] // 0x00183378-0x00183388
		private static Func<ILayoutElement, float> <>f__am$cache3; // 0x0C
		[CompilerGenerated] // 0x00183388-0x00183398
		private static Func<ILayoutElement, float> <>f__am$cache4; // 0x10
		[CompilerGenerated] // 0x00183398-0x001833A8
		private static Func<ILayoutElement, float> <>f__am$cache5; // 0x14
		[CompilerGenerated] // 0x001833A8-0x001833B8
		private static Func<ILayoutElement, float> <>f__am$cache6; // 0x18
		[CompilerGenerated] // 0x001833B8-0x001833C8
		private static Func<ILayoutElement, float> <>f__am$cache7; // 0x1C
	
		// Methods
		public static float GetMinSize(RectTransform rect, int axis); // 0x005BDF18-0x005BDF28
		public static float GetPreferredSize(RectTransform rect, int axis); // 0x005BE10C-0x005BE11C
		public static float GetFlexibleSize(RectTransform rect, int axis); // 0x005BE4B4-0x005BE4C4
		public static float GetMinWidth(RectTransform rect); // 0x005BDF28-0x005BE01C
		public static float GetPreferredWidth(RectTransform rect); // 0x005BE11C-0x005BE2E8
		public static float GetFlexibleWidth(RectTransform rect); // 0x005BE4C4-0x005BE5B4
		public static float GetMinHeight(RectTransform rect); // 0x005BE01C-0x005BE10C
		public static float GetPreferredHeight(RectTransform rect); // 0x005BE2E8-0x005BE4B4
		public static float GetFlexibleHeight(RectTransform rect); // 0x005BE5B4-0x005BE6A4
		public static float GetLayoutProperty(RectTransform rect, Func<ILayoutElement, float> property, float defaultValue); // 0x005BE6A4-0x005BE6C8
		public static float GetLayoutProperty(RectTransform rect, Func<ILayoutElement, float> property, float defaultValue, out ILayoutElement source); // 0x005BE6C8-0x005BEA98
		[CompilerGenerated] // 0x00183AE8-0x00183AF8
		private static float <GetMinWidth>m__0(ILayoutElement e); // 0x005BEA98-0x005BEB6C
		[CompilerGenerated] // 0x00183AF8-0x00183B08
		private static float <GetPreferredWidth>m__1(ILayoutElement e); // 0x005BEB6C-0x005BEC40
		[CompilerGenerated] // 0x00183B08-0x00183B18
		private static float <GetPreferredWidth>m__2(ILayoutElement e); // 0x005BEC40-0x005BED14
		[CompilerGenerated] // 0x00183B18-0x00183B28
		private static float <GetFlexibleWidth>m__3(ILayoutElement e); // 0x005BED14-0x005BEDE8
		[CompilerGenerated] // 0x00183B28-0x00183B38
		private static float <GetMinHeight>m__4(ILayoutElement e); // 0x005BEDE8-0x005BEEBC
		[CompilerGenerated] // 0x00183B38-0x00183B48
		private static float <GetPreferredHeight>m__5(ILayoutElement e); // 0x005BEEBC-0x005BEF90
		[CompilerGenerated] // 0x00183B48-0x00183B58
		private static float <GetPreferredHeight>m__6(ILayoutElement e); // 0x005BEF90-0x005BF064
		[CompilerGenerated] // 0x00183B58-0x00183B68
		private static float <GetFlexibleHeight>m__7(ILayoutElement e); // 0x005BF064-0x005BF138
	}

	[AddComponentMenu] // 0x00180C10-0x00180C60
	public class VerticalLayoutGroup : HorizontalOrVerticalLayoutGroup // TypeDefIndex: 2727
	{
		// Constructors
		protected VerticalLayoutGroup(); // 0x00B5EE68-0x00B5EE70
	
		// Methods
		public override void CalculateLayoutInputHorizontal(); // 0x00B5EE70-0x00B5EE9C
		public override void CalculateLayoutInputVertical(); // 0x00B5EE9C-0x00B5EEAC
		public override void SetLayoutHorizontal(); // 0x00B5EEAC-0x00B5EEBC
		public override void SetLayoutVertical(); // 0x00B5EEBC-0x00B60A28
	}

	public interface IMaterialModifier // TypeDefIndex: 2728
	{
		// Methods
		Material GetModifiedMaterial(Material baseMaterial);
	}
}

namespace UnityEngine.UI.Collections
{
	internal class IndexedSet<T> : IList<T> // TypeDefIndex: 2729
	{
		// Fields
		private readonly List<T> m_List;
		private Dictionary<T, int> m_Dictionary;
	
		// Properties
		public int Count { get; }
		public bool IsReadOnly { get; }
		public T this[int index] { get => default; set {} }
	
		// Constructors
		public IndexedSet();
	
		// Methods
		public void Add(T item);
		public bool AddUnique(T item);
		public bool Remove(T item);
		public IEnumerator<T> GetEnumerator();
		IEnumerator IEnumerable.GetEnumerator();
		public void Clear();
		public bool Contains(T item);
		public void CopyTo(T[] array, int arrayIndex);
		public int IndexOf(T item);
		public void Insert(int index, T item);
		public void RemoveAt(int index);
		public void RemoveAll(Predicate<T> match);
		public void Sort(Comparison<T> sortLayoutFunction);
	}
}

namespace UnityEngine.UI
{
	internal static class ListPool<T> // TypeDefIndex: 2730
	{
		// Fields
		private static readonly ObjectPool<List<T>> s_ListPool;
		[CompilerGenerated] // 0x001833C8-0x001833D8
		private static UnityAction<List<T>> <>f__mg$cache0;
	
		// Constructors
		static ListPool();
	
		// Methods
		private static void Clear(List<T> l);
		public static List<T> Get();
		public static void Release(List<T> toRelease);
	}

	internal class ObjectPool<T> // TypeDefIndex: 2731
		where T : new()
	{
		// Fields
		private readonly Stack<T> m_Stack;
		private readonly UnityAction<T> m_ActionOnGet;
		private readonly UnityAction<T> m_ActionOnRelease;
		[CompilerGenerated] // 0x001833D8-0x0018340C
		[DebuggerBrowsable] // 0x001833D8-0x0018340C
		private int <countAll>k__BackingField;
	
		// Properties
		public int countAll { [CompilerGenerated] /* 0x00183B68-0x00183B78 */ get; [CompilerGenerated] /* 0x00183B78-0x00183B88 */ private set; }
		public int countActive { get; }
		public int countInactive { get; }
	
		// Constructors
		public ObjectPool(UnityAction<T> actionOnGet, UnityAction<T> actionOnRelease);
	
		// Methods
		public T Get();
		public void Release(T element);
	}

	internal class ReflectionMethodsCache // TypeDefIndex: 2732
	{
		// Fields
		public Raycast3DCallback raycast3D; // 0x08
		public RaycastAllCallback raycast3DAll; // 0x0C
		public Raycast2DCallback raycast2D; // 0x10
		public GetRayIntersectionAllCallback getRayIntersectionAll; // 0x14
		public GetRayIntersectionAllNonAllocCallback getRayIntersectionAllNonAlloc; // 0x18
		public GetRaycastNonAllocCallback getRaycastNonAlloc; // 0x1C
		private static ReflectionMethodsCache s_ReflectionMethodsCache; // 0x00
	
		// Properties
		public static ReflectionMethodsCache Singleton { get; } // 0x005C82B4-0x005C83DC 
	
		// Nested types
		public delegate bool Raycast3DCallback(Ray r, out RaycastHit hit, float f, int i); // TypeDefIndex: 2733; 0x005CA49C-0x005CAAF8
	
		public delegate RaycastHit2D Raycast2DCallback(Vector2 p1, Vector2 p2, float f, int i); // TypeDefIndex: 2734; 0x005C9D70-0x005CA2E4
	
		public delegate RaycastHit[] RaycastAllCallback(Ray r, float f, int i); // TypeDefIndex: 2735; 0x005CAD8C-0x005CB424
	
		public delegate RaycastHit2D[] GetRayIntersectionAllCallback(Ray r, float f, int i); // TypeDefIndex: 2736; 0x005C8570-0x005C8C08
	
		public delegate int GetRayIntersectionAllNonAllocCallback(Ray r, RaycastHit2D[] results, float f, int i); // TypeDefIndex: 2737; 0x005C8D80-0x005C93DC
	
		public delegate int GetRaycastNonAllocCallback(Ray r, RaycastHit[] results, float f, int i); // TypeDefIndex: 2738; 0x005C9584-0x005C9BE0
	
		// Constructors
		public ReflectionMethodsCache(); // 0x005C6FAC-0x005C82B4
		static ReflectionMethodsCache(); // 0x005C83DC-0x005C855C
	}

	public class VertexHelper : IDisposable // TypeDefIndex: 2739
	{
		// Fields
		private List<Vector3> m_Positions; // 0x08
		private List<Color32> m_Colors; // 0x0C
		private List<Vector2> m_Uv0S; // 0x10
		private List<Vector2> m_Uv1S; // 0x14
		private List<Vector2> m_Uv2S; // 0x18
		private List<Vector2> m_Uv3S; // 0x1C
		private List<Vector3> m_Normals; // 0x20
		private List<Vector4> m_Tangents; // 0x24
		private List<int> m_Indices; // 0x28
		private static readonly Vector4 s_DefaultTangent; // 0x00
		private static readonly Vector3 s_DefaultNormal; // 0x10
		private bool m_ListsInitalized; // 0x2C
	
		// Properties
		public int currentVertCount { get; } // 0x005C4EE0-0x005C4F54 
		public int currentIndexCount { get; } // 0x005DC8CC-0x005DC940 
	
		// Constructors
		public VertexHelper(); // 0x005DC174-0x005DC184
		public VertexHelper(Mesh m); // 0x005DC184-0x005DC4C4
		static VertexHelper(); // 0x005DD018-0x005DD118
	
		// Methods
		private void InitializeListIfRequired(); // 0x005DC4C4-0x005DC6B4
		public void Dispose(); // 0x005DC6B4-0x005DC8CC
		public void Clear(); // 0x005C460C-0x005C47F0
		public void PopulateUIVertex(ref UIVertex vertex, int i); // 0x005C49C4-0x005C4C38
		public void SetUIVertex(UIVertex vertex, int i); // 0x005C4C38-0x005C4EE0
		public void FillMesh(Mesh mesh); // 0x005DC940-0x005DCC18
		public void AddVert(Vector3 position, Color32 color, Vector2 uv0, Vector2 uv1, Vector3 normal, Vector4 tangent); // 0x005DCC18-0x005DCEA4
		public void AddVert(Vector3 position, Color32 color, Vector2 uv0); // 0x005C5B20-0x005C5C44
		public void AddVert(UIVertex v); // 0x005DCEA4-0x005DCF48
		public void AddTriangle(int idx0, int idx1, int idx2); // 0x005C5C44-0x005C5D34
		public void AddUIVertexQuad(UIVertex[] verts); // 0x005DAB64-0x005DAD34
		public void AddUIVertexStream(List<UIVertex> verts, List<int> indices); // 0x005DCF48-0x005DD018
		public void AddUIVertexTriangleStream(List<UIVertex> verts); // 0x005C47F0-0x005C4858
		public void GetUIVertexStream(List<UIVertex> stream); // 0x005C40D0-0x005C4138
	}

	[Obsolete] // 0x00180C94-0x00180CE0
	public abstract class BaseVertexEffect // TypeDefIndex: 2740
	{
		// Constructors
		protected BaseVertexEffect(); // 0x00495FD8-0x00495FE0
	
		// Methods
		[EditorBrowsable] // 0x00183B88-0x00183BF8
		[Obsolete] // 0x00183B88-0x00183BF8
		public abstract void ModifyVertices(List<UIVertex> vertices);
	}

	[ExecuteAlways] // 0x00180CE0-0x00180CF0
	public abstract class BaseMeshEffect : UIBehaviour, IMeshModifier // TypeDefIndex: 2741
	{
		// Fields
		[NonSerialized]
		private Graphic m_Graphic; // 0x0C
	
		// Properties
		protected Graphic graphic { get; } // 0x00495B44-0x00495BF8 
	
		// Constructors
		protected BaseMeshEffect(); // 0x00495B3C-0x00495B44
	
		// Methods
		protected override void OnEnable(); // 0x00495BF8-0x00495CC4
		protected override void OnDisable(); // 0x00495CC4-0x00495D90
		protected override void OnDidApplyAnimationProperties(); // 0x00495D90-0x00495E5C
		public virtual void ModifyMesh(Mesh mesh); // 0x00495E5C-0x00495FD8
		public abstract void ModifyMesh(VertexHelper vh);
	}

	[EditorBrowsable] // 0x00180CF0-0x00180D54
	[Obsolete] // 0x00180CF0-0x00180D54
	public interface IVertexModifier // TypeDefIndex: 2742
	{
		// Methods
		[EditorBrowsable] // 0x00183BF8-0x00183C7C
		[Obsolete] // 0x00183BF8-0x00183C7C
		void ModifyVertices(List<UIVertex> verts);
	}

	public interface IMeshModifier // TypeDefIndex: 2743
	{
		// Methods
		[Obsolete] // 0x00183C7C-0x00183CE8
		void ModifyMesh(Mesh mesh);
		void ModifyMesh(VertexHelper verts);
	}

	[AddComponentMenu] // 0x00180D54-0x00180D98
	public class Outline : Shadow // TypeDefIndex: 2744
	{
		// Constructors
		protected Outline(); // 0x005C3BFC-0x005C3C00
	
		// Methods
		public override void ModifyMesh(VertexHelper vh); // 0x005C3C98-0x005C40D0
	}

	[AddComponentMenu] // 0x00180D98-0x00180DE4
	public class PositionAsUV1 : BaseMeshEffect // TypeDefIndex: 2745
	{
		// Constructors
		protected PositionAsUV1(); // 0x005C4858-0x005C4860
	
		// Methods
		public override void ModifyMesh(VertexHelper vh); // 0x005C4860-0x005C49C4
	}

	[AddComponentMenu] // 0x00180DE4-0x00180E28
	public class Shadow : BaseMeshEffect // TypeDefIndex: 2746
	{
		// Fields
		[SerializeField] // 0x0018340C-0x0018341C
		private Color m_EffectColor; // 0x10
		[SerializeField] // 0x0018341C-0x0018342C
		private Vector2 m_EffectDistance; // 0x20
		[SerializeField] // 0x0018342C-0x0018343C
		private bool m_UseGraphicAlpha; // 0x28
		private const float kMaxEffectDistance = 600f; // Metadata: 0x0021B3C3
	
		// Properties
		public Color effectColor { get; set; } // 0x005C4138-0x005C4148 0x005D5B00-0x005D5BF4
		public Vector2 effectDistance { get; set; } // 0x005C4148-0x005C415C 0x005D5BF4-0x005D5DA4
		public bool useGraphicAlpha { get; set; } // 0x005D5DA4-0x005D5DAC 0x005D5DAC-0x005D5E88
	
		// Constructors
		protected Shadow(); // 0x005C3C00-0x005C3C98
	
		// Methods
		protected void ApplyShadowZeroAlloc(List<UIVertex> verts, Color32 color, int start, int end, float x, float y); // 0x005C415C-0x005C460C
		protected void ApplyShadow(List<UIVertex> verts, Color32 color, int start, int end, float x, float y); // 0x005D5E88-0x005D5EB8
		public override void ModifyMesh(VertexHelper vh); // 0x005D5EB8-0x005D6040
	}
}

[CompilerGenerated] // 0x00180E88-0x00180E98
internal static class <PrivateImplementationDetails> // TypeDefIndex: 2747
{
	// Fields
	internal static readonly $ArrayType=12 $field-7BBE37982E6C057ED87163CAFC7FD6E5E42EEA46; // 0x00 // Starts with: 20 00 2e 00 2c 00 09 00 - Metadata: 0x0021B3C7

	// Nested types
	private struct $ArrayType=12 // TypeDefIndex: 2748
	{
	}
}

namespace DG.Tweening
{
	public enum AutoPlay // TypeDefIndex: 2751
	{
		None = 0,
		AutoPlaySequences = 1,
		AutoPlayTweeners = 2,
		All = 3
	}

	[Flags] // 0x00184568-0x00184578
	public enum AxisConstraint // TypeDefIndex: 2752
	{
		None = 0,
		X = 2,
		Y = 4,
		Z = 8,
		W = 16
	}

	public struct Color2 // TypeDefIndex: 2753
	{
		// Fields
		public Color ca; // 0x00
		public Color cb; // 0x10
	
		// Constructors
		public Color2(Color ca, Color cb); // 0x007CAAA0-0x007CAAD4
	
		// Methods
		public static Color2 operator +(Color2 c1, Color2 c2); // 0x007CAAD4-0x007CAB78
		public static Color2 operator -(Color2 c1, Color2 c2); // 0x007CAB78-0x007CAC1C
		public static Color2 operator *(Color2 c1, float f); // 0x007CAC1C-0x007CAC98
	}

	public delegate void TweenCallback(); // TypeDefIndex: 2754; 0x006E50A8-0x006E54F0

	public delegate void TweenCallback<in T>(T value); // TypeDefIndex: 2755; 0x00000000-0x00000000

	public delegate float EaseFunction(float time, float duration, float overshootOrAmplitude, float period); // TypeDefIndex: 2756; 0x007CEA70-0x007CEF1C

	public class DOTween // TypeDefIndex: 2757
	{
		// Fields
		public static readonly string Version; // 0x00
		public static bool useSafeMode; // 0x04
		public static bool showUnityEditorReport; // 0x05
		public static float timeScale; // 0x08
		public static bool useSmoothDeltaTime; // 0x0C
		public static float maxSmoothUnscaledTime; // 0x10
		private static LogBehaviour _logBehaviour; // 0x14
		public static bool drawGizmos; // 0x18
		public static UpdateType defaultUpdateType; // 0x1C
		public static bool defaultTimeScaleIndependent; // 0x20
		public static AutoPlay defaultAutoPlay; // 0x24
		public static bool defaultAutoKill; // 0x28
		public static LoopType defaultLoopType; // 0x2C
		public static bool defaultRecyclable; // 0x30
		public static Ease defaultEaseType; // 0x34
		public static float defaultEaseOvershootOrAmplitude; // 0x38
		public static float defaultEasePeriod; // 0x3C
		internal static DOTweenComponent instance; // 0x40
		internal static bool isUnityEditor; // 0x44
		internal static bool isDebugBuild; // 0x45
		internal static int maxActiveTweenersReached; // 0x48
		internal static int maxActiveSequencesReached; // 0x4C
		internal static readonly List<TweenCallback> GizmosDelegates; // 0x50
		internal static bool initialized; // 0x54
		internal static bool isQuitting; // 0x55
	
		// Properties
		public static LogBehaviour logBehaviour { get; set; } // 0x007D82A4-0x007D8330 0x007D8330-0x007D83CC
	
		// Nested types
		[CompilerGenerated] // 0x0018460C-0x0018461C
		private sealed class <>c__DisplayClass54_0 // TypeDefIndex: 2758
		{
			// Fields
			public float v; // 0x08
			public DOSetter<float> setter; // 0x0C
	
			// Constructors
			public <>c__DisplayClass54_0(); // 0x007DA600-0x007DA608
	
			// Methods
			internal float <To>b__0(); // 0x007DD3A0-0x007DD3A8
			internal void <To>b__1(float x); // 0x007DD3A8-0x007DD438
		}
	
		// Constructors
		static DOTween(); // 0x007D83CC-0x007D8528
		public DOTween(); // 0x007DD398-0x007DD3A0
	
		// Methods
		public static IDOTweenInit Init(bool? recycleAllByDefault = default, bool? useSafeMode = default, LogBehaviour? logBehaviour = default); // 0x007D8528-0x007D8720
		private static void AutoInit(); // 0x007D9078-0x007D9174
		private static IDOTweenInit Init(DOTweenSettings settings, bool? recycleAllByDefault, bool? useSafeMode, LogBehaviour? logBehaviour); // 0x007D8720-0x007D9078
		public static void SetTweensCapacity(int tweenersCapacity, int sequencesCapacity); // 0x007D9174-0x007D91FC
		public static void Clear(bool destroy = false /* Metadata: 0x0021B3F7 */); // 0x007D91FC-0x007D9380
		public static void ClearCachedTweens(); // 0x007D947C-0x007D94F4
		public static int Validate(); // 0x007D94F4-0x007D956C
		public static void ManualUpdate(float deltaTime, float unscaledDeltaTime); // 0x007D956C-0x007D9620
		public static TweenerCore<float, float, FloatOptions> To(DOGetter<float> getter, DOSetter<float> setter, float endValue, float duration); // 0x007D9734-0x007D97F0
		public static TweenerCore<double, double, NoOptions> To(DOGetter<double> getter, DOSetter<double> setter, double endValue, float duration); // 0x007D97F0-0x007D98BC
		public static Tweener To(DOGetter<int> getter, DOSetter<int> setter, int endValue, float duration); // 0x007D98BC-0x007D9978
		public static Tweener To(DOGetter<uint> getter, DOSetter<uint> setter, uint endValue, float duration); // 0x007D9978-0x007D9A34
		public static Tweener To(DOGetter<long> getter, DOSetter<long> setter, long endValue, float duration); // 0x007D9A34-0x007D9B00
		public static Tweener To(DOGetter<ulong> getter, DOSetter<ulong> setter, ulong endValue, float duration); // 0x007D9B00-0x007D9BCC
		public static TweenerCore<string, string, StringOptions> To(DOGetter<string> getter, DOSetter<string> setter, string endValue, float duration); // 0x007D9BCC-0x007D9C88
		public static TweenerCore<Vector2, Vector2, VectorOptions> To(DOGetter<Vector2> getter, DOSetter<Vector2> setter, Vector2 endValue, float duration); // 0x007D9C88-0x007D9D54
		public static TweenerCore<Vector3, Vector3, VectorOptions> To(DOGetter<Vector3> getter, DOSetter<Vector3> setter, Vector3 endValue, float duration); // 0x007D9D54-0x007D9E28
		public static TweenerCore<Vector4, Vector4, VectorOptions> To(DOGetter<Vector4> getter, DOSetter<Vector4> setter, Vector4 endValue, float duration); // 0x007D9E28-0x007D9F04
		public static TweenerCore<Quaternion, Vector3, QuaternionOptions> To(DOGetter<Quaternion> getter, DOSetter<Quaternion> setter, Vector3 endValue, float duration); // 0x007D9F04-0x007D9FD8
		public static TweenerCore<Color, Color, ColorOptions> To(DOGetter<Color> getter, DOSetter<Color> setter, Color endValue, float duration); // 0x007D9FD8-0x007DA0B4
		public static TweenerCore<Rect, Rect, RectOptions> To(DOGetter<Rect> getter, DOSetter<Rect> setter, Rect endValue, float duration); // 0x007DA0B4-0x007DA190
		public static Tweener To(DOGetter<RectOffset> getter, DOSetter<RectOffset> setter, RectOffset endValue, float duration); // 0x007DA190-0x007DA24C
		public static TweenerCore<T1, T2, TPlugOptions> To<T1, T2, TPlugOptions>(ABSTweenPlugin<T1, T2, TPlugOptions> plugin, DOGetter<T1> getter, DOSetter<T1> setter, T2 endValue, float duration)
			where TPlugOptions : struct, IPlugOptions;
		public static TweenerCore<Vector3, Vector3, VectorOptions> ToAxis(DOGetter<Vector3> getter, DOSetter<Vector3> setter, float endValue, float duration, AxisConstraint axisConstraint = AxisConstraint.None | AxisConstraint.X /* Metadata: 0x0021B3F8 */); // 0x007DA24C-0x007DA364
		public static Tweener ToAlpha(DOGetter<Color> getter, DOSetter<Color> setter, float endValue, float duration); // 0x007DA364-0x007DA46C
		public static Tweener To(DOSetter<float> setter, float startValue, float endValue, float duration); // 0x007DA46C-0x007DA600
		public static TweenerCore<Vector3, Vector3[], Vector3ArrayOptions> Punch(DOGetter<Vector3> getter, DOSetter<Vector3> setter, Vector3 direction, float duration, int vibrato = 10 /* Metadata: 0x0021B3FC */, float elasticity = 1f /* Metadata: 0x0021B400 */); // 0x007DA608-0x007DAAF8
		public static TweenerCore<Vector3, Vector3[], Vector3ArrayOptions> Shake(DOGetter<Vector3> getter, DOSetter<Vector3> setter, float duration, float strength = 3f /* Metadata: 0x0021B404 */, int vibrato = 10 /* Metadata: 0x0021B408 */, float randomness = 90f /* Metadata: 0x0021B40C */, bool ignoreZAxis = true /* Metadata: 0x0021B410 */, bool fadeOut = true /* Metadata: 0x0021B411 */); // 0x007DADE8-0x007DAEF0
		public static TweenerCore<Vector3, Vector3[], Vector3ArrayOptions> Shake(DOGetter<Vector3> getter, DOSetter<Vector3> setter, float duration, Vector3 strength, int vibrato = 10 /* Metadata: 0x0021B412 */, float randomness = 90f /* Metadata: 0x0021B416 */, bool fadeOut = true /* Metadata: 0x0021B41A */); // 0x007DB638-0x007DB720
		private static TweenerCore<Vector3, Vector3[], Vector3ArrayOptions> Shake(DOGetter<Vector3> getter, DOSetter<Vector3> setter, float duration, Vector3 strength, int vibrato, float randomness, bool ignoreZAxis, bool vectorBased, bool fadeOut); // 0x007DAEF0-0x007DB638
		public static TweenerCore<Vector3, Vector3[], Vector3ArrayOptions> ToArray(DOGetter<Vector3> getter, DOSetter<Vector3> setter, Vector3[] endValues, float[] durations); // 0x007DAAF8-0x007DADE8
		internal static TweenerCore<Color2, Color2, ColorOptions> To(DOGetter<Color2> getter, DOSetter<Color2> setter, Color2 endValue, float duration); // 0x007DB720-0x007DB830
		public static Sequence Sequence(); // 0x007DB830-0x007DB8E8
		public static int CompleteAll(bool withCallbacks = false /* Metadata: 0x0021B41B */); // 0x007DB8E8-0x007DB9A8
		public static int Complete(object targetOrId, bool withCallbacks = false /* Metadata: 0x0021B41C */); // 0x007DB9A8-0x007DBA7C
		internal static int CompleteAndReturnKilledTot(); // 0x007DBA7C-0x007DBB1C
		internal static int CompleteAndReturnKilledTot(object targetOrId); // 0x007DBB1C-0x007DBBD4
		internal static int CompleteAndReturnKilledTotExceptFor(params /* 0x00185B6C-0x00185B7C */ object[] excludeTargetsOrIds); // 0x007DBBD4-0x007DBC74
		public static int FlipAll(); // 0x007DBC74-0x007DBD14
		public static int Flip(object targetOrId); // 0x007DBD14-0x007DBDCC
		public static int GotoAll(float to, bool andPlay = false /* Metadata: 0x0021B41D */); // 0x007DBDCC-0x007DBE80
		public static int Goto(object targetOrId, float to, bool andPlay = false /* Metadata: 0x0021B41E */); // 0x007DBE80-0x007DBF48
		public static int KillAll(bool complete = false /* Metadata: 0x0021B41F */); // 0x007DBF48-0x007DC008
		public static int KillAll(bool complete, params /* 0x00185B7C-0x00185B8C */ object[] idsOrTargetsToExclude); // 0x007DC008-0x007DC174
		public static int Kill(object targetOrId, bool complete = false /* Metadata: 0x0021B420 */); // 0x007DC174-0x007DC274
		public static int PauseAll(); // 0x007DC274-0x007DC314
		public static int Pause(object targetOrId); // 0x007DC314-0x007DC3CC
		public static int PlayAll(); // 0x007DC3CC-0x007DC46C
		public static int Play(object targetOrId); // 0x007DC46C-0x007DC524
		public static int Play(object target, object id); // 0x007DC524-0x007DC5E0
		public static int PlayBackwardsAll(); // 0x007DC5E0-0x007DC680
		public static int PlayBackwards(object targetOrId); // 0x007DC680-0x007DC738
		public static int PlayBackwards(object target, object id); // 0x007DC738-0x007DC7F4
		public static int PlayForwardAll(); // 0x007DC7F4-0x007DC894
		public static int PlayForward(object targetOrId); // 0x007DC894-0x007DC94C
		public static int PlayForward(object target, object id); // 0x007DC94C-0x007DCA08
		public static int RestartAll(bool includeDelay = true /* Metadata: 0x0021B421 */); // 0x007DCA08-0x007DCAAC
		public static int Restart(object targetOrId, bool includeDelay = true /* Metadata: 0x0021B422 */, float changeDelayTo = -1f /* Metadata: 0x0021B423 */); // 0x007DCAAC-0x007DCB74
		public static int Restart(object target, object id, bool includeDelay = true /* Metadata: 0x0021B427 */, float changeDelayTo = -1f /* Metadata: 0x0021B428 */); // 0x007DCB74-0x007DCC44
		public static int RewindAll(bool includeDelay = true /* Metadata: 0x0021B42C */); // 0x007DCC44-0x007DCCE8
		public static int Rewind(object targetOrId, bool includeDelay = true /* Metadata: 0x0021B42D */); // 0x007DCCE8-0x007DCDA4
		public static int SmoothRewindAll(); // 0x007DCDA4-0x007DCE44
		public static int SmoothRewind(object targetOrId); // 0x007DCE44-0x007DCEFC
		public static int TogglePauseAll(); // 0x007DCEFC-0x007DCF9C
		public static int TogglePause(object targetOrId); // 0x007DCF9C-0x007DD054
		public static bool IsTweening(object targetOrId, bool alsoCheckIfIsPlaying = false /* Metadata: 0x0021B42E */); // 0x007DD054-0x007DD108
		public static int TotalPlayingTweens(); // 0x007DD108-0x007DD180
		public static List<Tween> PlayingTweens(); // 0x007DD180-0x007DD1FC
		public static List<Tween> PausedTweens(); // 0x007DD1FC-0x007DD278
		public static List<Tween> TweensById(object id, bool playingOnly = false /* Metadata: 0x0021B42F */); // 0x007DD278-0x007DD310
		public static List<Tween> TweensByTarget(object target, bool playingOnly = false /* Metadata: 0x0021B430 */); // 0x007DD310-0x007DD398
		private static void InitCheck(); // 0x007D9620-0x007D9734
		private static TweenerCore<T1, T2, TPlugOptions> ApplyTo<T1, T2, TPlugOptions>(DOGetter<T1> getter, DOSetter<T1> setter, T2 endValue, float duration, ABSTweenPlugin<T1, T2, TPlugOptions> plugin = null)
			where TPlugOptions : struct, IPlugOptions;
	}

	public static class DOVirtual // TypeDefIndex: 2759
	{
		// Nested types
		[CompilerGenerated] // 0x0018461C-0x0018462C
		private sealed class <>c__DisplayClass0_0 // TypeDefIndex: 2760
		{
			// Fields
			public float val; // 0x08
			public TweenCallback<float> onVirtualUpdate; // 0x0C
	
			// Constructors
			public <>c__DisplayClass0_0(); // 0x007DD610-0x007DD618
	
			// Methods
			internal float <Float>b__0(); // 0x007DDA60-0x007DDA68
			internal void <Float>b__1(float x); // 0x007DDA68-0x007DDA70
			internal void <Float>b__2(); // 0x007DDA70-0x007DDAF8
		}
	
		// Methods
		public static Tweener Float(float from, float to, float duration, TweenCallback<float> onVirtualUpdate); // 0x007DD438-0x007DD610
		public static float EasedValue(float from, float to, float lifetimePercentage, Ease easeType); // 0x007DD618-0x007DD700
		public static float EasedValue(float from, float to, float lifetimePercentage, Ease easeType, float overshoot); // 0x007DD700-0x007DD7E8
		public static float EasedValue(float from, float to, float lifetimePercentage, Ease easeType, float amplitude, float period); // 0x007DD7E8-0x007DD840
		public static float EasedValue(float from, float to, float lifetimePercentage, AnimationCurve easeCurve); // 0x007DD840-0x007DD984
		public static Tween DelayedCall(float delay, TweenCallback callback, bool ignoreTimeScale = true /* Metadata: 0x0021B431 */); // 0x007DD984-0x007DDA60
	}

	public enum Ease // TypeDefIndex: 2761
	{
		Unset = 0,
		Linear = 1,
		InSine = 2,
		OutSine = 3,
		InOutSine = 4,
		InQuad = 5,
		OutQuad = 6,
		InOutQuad = 7,
		InCubic = 8,
		OutCubic = 9,
		InOutCubic = 10,
		InQuart = 11,
		OutQuart = 12,
		InOutQuart = 13,
		InQuint = 14,
		OutQuint = 15,
		InOutQuint = 16,
		InExpo = 17,
		OutExpo = 18,
		InOutExpo = 19,
		InCirc = 20,
		OutCirc = 21,
		InOutCirc = 22,
		InElastic = 23,
		OutElastic = 24,
		InOutElastic = 25,
		InBack = 26,
		OutBack = 27,
		InOutBack = 28,
		InBounce = 29,
		OutBounce = 30,
		InOutBounce = 31,
		Flash = 32,
		InFlash = 33,
		OutFlash = 34,
		InOutFlash = 35,
		INTERNAL_Zero = 36,
		INTERNAL_Custom = 37
	}

	public class EaseFactory // TypeDefIndex: 2762
	{
		// Nested types
		[CompilerGenerated] // 0x0018462C-0x0018463C
		private sealed class <>c__DisplayClass2_0 // TypeDefIndex: 2763
		{
			// Fields
			public float motionDelay; // 0x08
			public EaseFunction customEase; // 0x0C
	
			// Constructors
			public <>c__DisplayClass2_0(); // 0x007DDD78-0x007DDD80
	
			// Methods
			internal float <StopMotion>b__0(float time, float duration, float overshootOrAmplitude, float period); // 0x007DDD88-0x007DDE3C
		}
	
		// Constructors
		public EaseFactory(); // 0x007DDD80-0x007DDD88
	
		// Methods
		public static EaseFunction StopMotion(int motionFps, Ease? ease = default); // 0x007DDAF8-0x007DDBE4
		public static EaseFunction StopMotion(int motionFps, AnimationCurve animCurve); // 0x007DDCC4-0x007DDD78
		public static EaseFunction StopMotion(int motionFps, EaseFunction customEase); // 0x007DDBE4-0x007DDCC4
	}

	public interface IDOTweenInit // TypeDefIndex: 2764
	{
		// Methods
		IDOTweenInit SetCapacity(int tweenersCapacity, int sequencesCapacity);
	}

	public enum PathMode // TypeDefIndex: 2765
	{
		Ignore = 0,
		Full3D = 1,
		TopDown2D = 2,
		Sidescroller2D = 3
	}

	public enum PathType // TypeDefIndex: 2766
	{
		Linear = 0,
		CatmullRom = 1
	}

	public enum RotateMode // TypeDefIndex: 2767
	{
		Fast = 0,
		FastBeyond360 = 1,
		WorldAxisAdd = 2,
		LocalAxisAdd = 3
	}

	public enum ScrambleMode // TypeDefIndex: 2768
	{
		None = 0,
		All = 1,
		Uppercase = 2,
		Lowercase = 3,
		Numerals = 4,
		Custom = 5
	}

	public static class TweenExtensions // TypeDefIndex: 2769
	{
		// Extension methods
		public static void Complete(this Tween t); // 0x006E5528-0x006E5530
		public static void Complete(this Tween t, bool withCallbacks); // 0x006E5530-0x006E5674
		public static void Flip(this Tween t); // 0x006E5674-0x006E57A8
		public static void ForceInit(this Tween t); // 0x006E57A8-0x006E58E4
		public static void Goto(this Tween t, float to, bool andPlay = false /* Metadata: 0x0021B50A */); // 0x006E4B4C-0x006E4CD0
		public static void Kill(this Tween t, bool complete = false /* Metadata: 0x0021B50B */); // 0x006E58E4-0x006E5AC8
		public static T Pause<T>(this T t)
			where T : Tween;
		public static T Play<T>(this T t)
			where T : Tween;
		public static void PlayBackwards(this Tween t); // 0x006E5AC8-0x006E5BFC
		public static void PlayForward(this Tween t); // 0x006E5BFC-0x006E5D30
		public static void Restart(this Tween t, bool includeDelay = true /* Metadata: 0x0021B50C */, float changeDelayTo = -1f /* Metadata: 0x0021B50D */); // 0x006E5D30-0x006E5E74
		public static void Rewind(this Tween t, bool includeDelay = true /* Metadata: 0x0021B511 */); // 0x006E5E74-0x006E5FB0
		public static void SmoothRewind(this Tween t); // 0x006E5FB0-0x006E60E4
		public static void TogglePause(this Tween t); // 0x006E60E4-0x006E6218
		public static void GotoWaypoint(this Tween t, int waypointIndex, bool andPlay = false /* Metadata: 0x0021B512 */); // 0x006E6218-0x006E65A4
		public static YieldInstruction WaitForCompletion(this Tween t); // 0x006E65A4-0x006E66E0
		public static YieldInstruction WaitForRewind(this Tween t); // 0x006E66E0-0x006E681C
		public static YieldInstruction WaitForKill(this Tween t); // 0x006E681C-0x006E6958
		public static YieldInstruction WaitForElapsedLoops(this Tween t, int elapsedLoops); // 0x006E6958-0x006E6AA0
		public static YieldInstruction WaitForPosition(this Tween t, float position); // 0x006E6AA0-0x006E6BE8
		public static Coroutine WaitForStart(this Tween t); // 0x006E6BE8-0x006E6D1C
		public static int CompletedLoops(this Tween t); // 0x006E6D1C-0x006E6DC0
		public static float Delay(this Tween t); // 0x006E6DC0-0x006E6E70
		public static float Duration(this Tween t, bool includeLoops = true /* Metadata: 0x0021B513 */); // 0x006E6E70-0x006E6F58
		public static float Elapsed(this Tween t, bool includeLoops = true /* Metadata: 0x0021B514 */); // 0x006E4A64-0x006E4B44
		public static float ElapsedPercentage(this Tween t, bool includeLoops = true /* Metadata: 0x0021B515 */); // 0x006E6F58-0x006E7040
		public static float ElapsedDirectionalPercentage(this Tween t); // 0x006E1DEC-0x006E1EE8
		public static bool IsActive(this Tween t); // 0x006E7040-0x006E7064
		public static bool IsBackwards(this Tween t); // 0x006E7064-0x006E7110
		public static bool IsComplete(this Tween t); // 0x006E7110-0x006E71BC
		public static bool IsInitialized(this Tween t); // 0x006E71BC-0x006E7268
		public static bool IsPlaying(this Tween t); // 0x006E7268-0x006E7314
		public static int Loops(this Tween t); // 0x006E7314-0x006E73B8
		public static Vector3 PathGetPoint(this Tween t, float pathPercentage); // 0x006E73B8-0x006E764C
		public static Vector3[] PathGetDrawPoints(this Tween t, int subdivisionsXSegment = 10 /* Metadata: 0x0021B516 */); // 0x006E764C-0x006E7824
		public static float PathLength(this Tween t); // 0x006E7824-0x006E7A1C
	}

	public enum LoopType // TypeDefIndex: 2770
	{
		Restart = 0,
		Yoyo = 1,
		Incremental = 2
	}

	public sealed class Sequence : Tween // TypeDefIndex: 2771
	{
		// Fields
		internal readonly List<Tween> sequencedTweens; // 0xB8
		private readonly List<ABSSequentiable> _sequencedObjs; // 0xBC
		internal float lastTweenInsertTime; // 0xC0
	
		// Constructors
		internal Sequence(); // 0x006D342C-0x006D3518
	
		// Methods
		internal static Sequence DoPrepend(Sequence inSequence, Tween t); // 0x006D3534-0x006D36F4
		internal static Sequence DoInsert(Sequence inSequence, Tween t, float atPosition); // 0x006D36F4-0x006D387C
		internal static Sequence DoAppendInterval(Sequence inSequence, float interval); // 0x006D387C-0x006D38F4
		internal static Sequence DoPrependInterval(Sequence inSequence, float interval); // 0x006D38F4-0x006D3A88
		internal static Sequence DoInsertCallback(Sequence inSequence, TweenCallback callback, float atPosition); // 0x006D3A88-0x006D3B94
		internal override void Reset(); // 0x006D3B94-0x006D3CC8
		internal override bool Validate(); // 0x006D3D54-0x006D3E58
		internal override bool Startup(); // 0x006D3E58-0x006D3E5C
		internal override bool ApplyTween(float prevPosition, int prevCompletedLoops, int newCompletedSteps, bool useInversePosition, UpdateMode updateMode, UpdateNotice updateNotice); // 0x006D4110-0x006D4134
		internal static void Setup(Sequence s); // 0x006D44C8-0x006D4654
		internal static bool DoStartup(Sequence s); // 0x006D3E5C-0x006D4110
		internal static bool DoApplyTween(Sequence s, float prevPosition, int prevCompletedLoops, int newCompletedSteps, bool useInversePosition, UpdateMode updateMode); // 0x006D4134-0x006D44C8
		private static bool ApplyInternalCycle(Sequence s, float fromPos, float toPos, UpdateMode updateMode, bool useInverse, bool prevPosIsInverse, bool multiCycleStep = false /* Metadata: 0x0021B526 */); // 0x006D4654-0x006D4D5C
		private static int SortSequencedObjs(ABSSequentiable a, ABSSequentiable b); // 0x006D5124-0x006D5194
	}

	public static class ShortcutExtensions // TypeDefIndex: 2772
	{
		// Nested types
		[CompilerGenerated] // 0x0018463C-0x0018464C
		private sealed class <>c__DisplayClass0_0 // TypeDefIndex: 2773
		{
			// Fields
			public AudioSource target; // 0x08
	
			// Constructors
			public <>c__DisplayClass0_0(); // 0x006D5340-0x006D5348
	
			// Methods
			internal float <DOFade>b__0(); // 0x006E0F24-0x006E0F50
			internal void <DOFade>b__1(float x); // 0x006E0F50-0x006E0F84
		}
	
		[CompilerGenerated] // 0x0018464C-0x0018465C
		private sealed class <>c__DisplayClass1_0 // TypeDefIndex: 2774
		{
			// Fields
			public AudioSource target; // 0x08
	
			// Constructors
			public <>c__DisplayClass1_0(); // 0x006D54C0-0x006D54C8
	
			// Methods
			internal float <DOPitch>b__0(); // 0x006E16AC-0x006E16D8
			internal void <DOPitch>b__1(float x); // 0x006E16D8-0x006E170C
		}
	
		[CompilerGenerated] // 0x0018465C-0x0018466C
		private sealed class <>c__DisplayClass2_0 // TypeDefIndex: 2775
		{
			// Fields
			public Camera target; // 0x08
	
			// Constructors
			public <>c__DisplayClass2_0(); // 0x006D5640-0x006D5648
	
			// Methods
			internal float <DOAspect>b__0(); // 0x006E1B98-0x006E1BC4
			internal void <DOAspect>b__1(float x); // 0x006E1BC4-0x006E1BF8
		}
	
		[CompilerGenerated] // 0x0018466C-0x0018467C
		private sealed class <>c__DisplayClass3_0 // TypeDefIndex: 2776
		{
			// Fields
			public Camera target; // 0x08
	
			// Constructors
			public <>c__DisplayClass3_0(); // 0x006D57E8-0x006D57F0
	
			// Methods
			internal Color <DOColor>b__0(); // 0x006E23A8-0x006E23DC
			internal void <DOColor>b__1(Color x); // 0x006E23DC-0x006E2434
		}
	
		[CompilerGenerated] // 0x0018467C-0x0018468C
		private sealed class <>c__DisplayClass4_0 // TypeDefIndex: 2777
		{
			// Fields
			public Camera target; // 0x08
	
			// Constructors
			public <>c__DisplayClass4_0(); // 0x006D5968-0x006D5970
	
			// Methods
			internal float <DOFarClipPlane>b__0(); // 0x006E2940-0x006E296C
			internal void <DOFarClipPlane>b__1(float x); // 0x006E296C-0x006E29A0
		}
	
		[CompilerGenerated] // 0x0018468C-0x0018469C
		private sealed class <>c__DisplayClass5_0 // TypeDefIndex: 2778
		{
			// Fields
			public Camera target; // 0x08
	
			// Constructors
			public <>c__DisplayClass5_0(); // 0x006D5AE8-0x006D5AF0
	
			// Methods
			internal float <DOFieldOfView>b__0(); // 0x006E2EE8-0x006E2F14
			internal void <DOFieldOfView>b__1(float x); // 0x006E2F14-0x006E2F48
		}
	
		[CompilerGenerated] // 0x0018469C-0x001846AC
		private sealed class <>c__DisplayClass6_0 // TypeDefIndex: 2779
		{
			// Fields
			public Camera target; // 0x08
	
			// Constructors
			public <>c__DisplayClass6_0(); // 0x006D5C68-0x006D5C70
	
			// Methods
			internal float <DONearClipPlane>b__0(); // 0x006E39EC-0x006E3A18
			internal void <DONearClipPlane>b__1(float x); // 0x006E3A18-0x006E3A4C
		}
	
		[CompilerGenerated] // 0x001846AC-0x001846BC
		private sealed class <>c__DisplayClass7_0 // TypeDefIndex: 2780
		{
			// Fields
			public Camera target; // 0x08
	
			// Constructors
			public <>c__DisplayClass7_0(); // 0x006D5DE8-0x006D5DF0
	
			// Methods
			internal float <DOOrthoSize>b__0(); // 0x006E4294-0x006E42C0
			internal void <DOOrthoSize>b__1(float x); // 0x006E42C0-0x006E42F4
		}
	
		[CompilerGenerated] // 0x001846BC-0x001846CC
		private sealed class <>c__DisplayClass8_0 // TypeDefIndex: 2781
		{
			// Fields
			public Camera target; // 0x08
	
			// Constructors
			public <>c__DisplayClass8_0(); // 0x006D5F90-0x006D5F98
	
			// Methods
			internal Rect <DOPixelRect>b__0(); // 0x006E4944-0x006E4978
			internal void <DOPixelRect>b__1(Rect x); // 0x006E4978-0x006E49D0
		}
	
		[CompilerGenerated] // 0x001846CC-0x001846DC
		private sealed class <>c__DisplayClass9_0 // TypeDefIndex: 2782
		{
			// Fields
			public Camera target; // 0x08
	
			// Constructors
			public <>c__DisplayClass9_0(); // 0x006D6138-0x006D6140
	
			// Methods
			internal Rect <DORect>b__0(); // 0x006E49D0-0x006E4A04
			internal void <DORect>b__1(Rect x); // 0x006E4A04-0x006E4A5C
		}
	
		[CompilerGenerated] // 0x001846DC-0x001846EC
		private sealed class <>c__DisplayClass10_0 // TypeDefIndex: 2783
		{
			// Fields
			public Camera target; // 0x08
	
			// Constructors
			public <>c__DisplayClass10_0(); // 0x006D638C-0x006D6394
	
			// Methods
			internal Vector3 <DOShakePosition>b__0(); // 0x006E0F84-0x006E0FD8
			internal void <DOShakePosition>b__1(Vector3 x); // 0x006E0FD8-0x006E1048
		}
	
		[CompilerGenerated] // 0x001846EC-0x001846FC
		private sealed class <>c__DisplayClass11_0 // TypeDefIndex: 2784
		{
			// Fields
			public Camera target; // 0x08
	
			// Constructors
			public <>c__DisplayClass11_0(); // 0x006D65E8-0x006D65F0
	
			// Methods
			internal Vector3 <DOShakePosition>b__0(); // 0x006E1048-0x006E109C
			internal void <DOShakePosition>b__1(Vector3 x); // 0x006E109C-0x006E110C
		}
	
		[CompilerGenerated] // 0x001846FC-0x0018470C
		private sealed class <>c__DisplayClass12_0 // TypeDefIndex: 2785
		{
			// Fields
			public Camera target; // 0x08
	
			// Constructors
			public <>c__DisplayClass12_0(); // 0x006D6838-0x006D6840
	
			// Methods
			internal Vector3 <DOShakeRotation>b__0(); // 0x006E110C-0x006E1160
			internal void <DOShakeRotation>b__1(Vector3 x); // 0x006E1160-0x006E1258
		}
	
		[CompilerGenerated] // 0x0018470C-0x0018471C
		private sealed class <>c__DisplayClass13_0 // TypeDefIndex: 2786
		{
			// Fields
			public Camera target; // 0x08
	
			// Constructors
			public <>c__DisplayClass13_0(); // 0x006D6A94-0x006D6A9C
	
			// Methods
			internal Vector3 <DOShakeRotation>b__0(); // 0x006E1258-0x006E12AC
			internal void <DOShakeRotation>b__1(Vector3 x); // 0x006E12AC-0x006E13A4
		}
	
		[CompilerGenerated] // 0x0018471C-0x0018472C
		private sealed class <>c__DisplayClass14_0 // TypeDefIndex: 2787
		{
			// Fields
			public Light target; // 0x08
	
			// Constructors
			public <>c__DisplayClass14_0(); // 0x006D6C3C-0x006D6C44
	
			// Methods
			internal Color <DOColor>b__0(); // 0x006E13A4-0x006E13D8
			internal void <DOColor>b__1(Color x); // 0x006E13D8-0x006E1430
		}
	
		[CompilerGenerated] // 0x0018472C-0x0018473C
		private sealed class <>c__DisplayClass15_0 // TypeDefIndex: 2788
		{
			// Fields
			public Light target; // 0x08
	
			// Constructors
			public <>c__DisplayClass15_0(); // 0x006D6DBC-0x006D6DC4
	
			// Methods
			internal float <DOIntensity>b__0(); // 0x006E1430-0x006E145C
			internal void <DOIntensity>b__1(float x); // 0x006E145C-0x006E1490
		}
	
		[CompilerGenerated] // 0x0018473C-0x0018474C
		private sealed class <>c__DisplayClass16_0 // TypeDefIndex: 2789
		{
			// Fields
			public Light target; // 0x08
	
			// Constructors
			public <>c__DisplayClass16_0(); // 0x006D6F3C-0x006D6F44
	
			// Methods
			internal float <DOShadowStrength>b__0(); // 0x006E1490-0x006E14BC
			internal void <DOShadowStrength>b__1(float x); // 0x006E14BC-0x006E14F0
		}
	
		[CompilerGenerated] // 0x0018474C-0x0018475C
		private sealed class <>c__DisplayClass17_0 // TypeDefIndex: 2790
		{
			// Fields
			public Color2 startValue; // 0x08
			public LineRenderer target; // 0x28
	
			// Constructors
			public <>c__DisplayClass17_0(); // 0x006D7198-0x006D71A0
	
			// Methods
			internal Color2 <DOColor>b__0(); // 0x006E14F0-0x006E150C
			internal void <DOColor>b__1(Color2 x); // 0x006E150C-0x006E1588
		}
	
		[CompilerGenerated] // 0x0018475C-0x0018476C
		private sealed class <>c__DisplayClass18_0 // TypeDefIndex: 2791
		{
			// Fields
			public Material target; // 0x08
	
			// Constructors
			public <>c__DisplayClass18_0(); // 0x006D7340-0x006D7348
	
			// Methods
			internal Color <DOColor>b__0(); // 0x006E1588-0x006E15BC
			internal void <DOColor>b__1(Color x); // 0x006E15BC-0x006E1614
		}
	
		[CompilerGenerated] // 0x0018476C-0x0018477C
		private sealed class <>c__DisplayClass19_0 // TypeDefIndex: 2792
		{
			// Fields
			public Material target; // 0x08
			public string property; // 0x0C
	
			// Constructors
			public <>c__DisplayClass19_0(); // 0x006D75C4-0x006D75CC
	
			// Methods
			internal Color <DOColor>b__0(); // 0x006E1614-0x006E1650
			internal void <DOColor>b__1(Color x); // 0x006E1650-0x006E16AC
		}
	
		[CompilerGenerated] // 0x0018477C-0x0018478C
		private sealed class <>c__DisplayClass20_0 // TypeDefIndex: 2793
		{
			// Fields
			public Material target; // 0x08
	
			// Constructors
			public <>c__DisplayClass20_0(); // 0x006D7744-0x006D774C
	
			// Methods
			internal Color <DOFade>b__0(); // 0x006E170C-0x006E1740
			internal void <DOFade>b__1(Color x); // 0x006E1740-0x006E1798
		}
	
		[CompilerGenerated] // 0x0018478C-0x0018479C
		private sealed class <>c__DisplayClass21_0 // TypeDefIndex: 2794
		{
			// Fields
			public Material target; // 0x08
			public string property; // 0x0C
	
			// Constructors
			public <>c__DisplayClass21_0(); // 0x006D799C-0x006D79A4
	
			// Methods
			internal Color <DOFade>b__0(); // 0x006E1798-0x006E17D4
			internal void <DOFade>b__1(Color x); // 0x006E17D4-0x006E1830
		}
	
		[CompilerGenerated] // 0x0018479C-0x001847AC
		private sealed class <>c__DisplayClass22_0 // TypeDefIndex: 2795
		{
			// Fields
			public Material target; // 0x08
			public string property; // 0x0C
	
			// Constructors
			public <>c__DisplayClass22_0(); // 0x006D7BF4-0x006D7BFC
	
			// Methods
			internal float <DOFloat>b__0(); // 0x006E1830-0x006E1864
			internal void <DOFloat>b__1(float x); // 0x006E1864-0x006E18A0
		}
	
		[CompilerGenerated] // 0x001847AC-0x001847BC
		private sealed class <>c__DisplayClass23_0 // TypeDefIndex: 2796
		{
			// Fields
			public Material target; // 0x08
	
			// Constructors
			public <>c__DisplayClass23_0(); // 0x006D7D88-0x006D7D90
	
			// Methods
			internal Vector2 <DOOffset>b__0(); // 0x006E18A0-0x006E18D4
			internal void <DOOffset>b__1(Vector2 x); // 0x006E18D4-0x006E1910
		}
	
		[CompilerGenerated] // 0x001847BC-0x001847CC
		private sealed class <>c__DisplayClass24_0 // TypeDefIndex: 2797
		{
			// Fields
			public Material target; // 0x08
			public string property; // 0x0C
	
			// Constructors
			public <>c__DisplayClass24_0(); // 0x006D7FF8-0x006D8000
	
			// Methods
			internal Vector2 <DOOffset>b__0(); // 0x006E1910-0x006E194C
			internal void <DOOffset>b__1(Vector2 x); // 0x006E194C-0x006E199C
		}
	
		[CompilerGenerated] // 0x001847CC-0x001847DC
		private sealed class <>c__DisplayClass25_0 // TypeDefIndex: 2798
		{
			// Fields
			public Material target; // 0x08
	
			// Constructors
			public <>c__DisplayClass25_0(); // 0x006D818C-0x006D8194
	
			// Methods
			internal Vector2 <DOTiling>b__0(); // 0x006E199C-0x006E19D0
			internal void <DOTiling>b__1(Vector2 x); // 0x006E19D0-0x006E1A0C
		}
	
		[CompilerGenerated] // 0x001847DC-0x001847EC
		private sealed class <>c__DisplayClass26_0 // TypeDefIndex: 2799
		{
			// Fields
			public Material target; // 0x08
			public string property; // 0x0C
	
			// Constructors
			public <>c__DisplayClass26_0(); // 0x006D83FC-0x006D8404
	
			// Methods
			internal Vector2 <DOTiling>b__0(); // 0x006E1A0C-0x006E1A48
			internal void <DOTiling>b__1(Vector2 x); // 0x006E1A48-0x006E1A98
		}
	
		[CompilerGenerated] // 0x001847EC-0x001847FC
		private sealed class <>c__DisplayClass27_0 // TypeDefIndex: 2800
		{
			// Fields
			public Material target; // 0x08
			public string property; // 0x0C
	
			// Constructors
			public <>c__DisplayClass27_0(); // 0x006D8680-0x006D8688
	
			// Methods
			internal Vector4 <DOVector>b__0(); // 0x006E1A98-0x006E1AD4
			internal void <DOVector>b__1(Vector4 x); // 0x006E1AD4-0x006E1B30
		}
	
		[CompilerGenerated] // 0x001847FC-0x0018480C
		private sealed class <>c__DisplayClass28_0 // TypeDefIndex: 2801
		{
			// Fields
			public Rigidbody target; // 0x08
	
			// Constructors
			public <>c__DisplayClass28_0(); // 0x006D8848-0x006D8850
	
			// Methods
			internal Vector3 <DOMove>b__0(); // 0x006E1B30-0x006E1B64
		}
	
		[CompilerGenerated] // 0x0018480C-0x0018481C
		private sealed class <>c__DisplayClass29_0 // TypeDefIndex: 2802
		{
			// Fields
			public Rigidbody target; // 0x08
	
			// Constructors
			public <>c__DisplayClass29_0(); // 0x006D8A2C-0x006D8A34
	
			// Methods
			internal Vector3 <DOMoveX>b__0(); // 0x006E1B64-0x006E1B98
		}
	
		[CompilerGenerated] // 0x0018481C-0x0018482C
		private sealed class <>c__DisplayClass30_0 // TypeDefIndex: 2803
		{
			// Fields
			public Rigidbody target; // 0x08
	
			// Constructors
			public <>c__DisplayClass30_0(); // 0x006D8C10-0x006D8C18
	
			// Methods
			internal Vector3 <DOMoveY>b__0(); // 0x006E1BF8-0x006E1C2C
		}
	
		[CompilerGenerated] // 0x0018482C-0x0018483C
		private sealed class <>c__DisplayClass31_0 // TypeDefIndex: 2804
		{
			// Fields
			public Rigidbody target; // 0x08
	
			// Constructors
			public <>c__DisplayClass31_0(); // 0x006D8DF4-0x006D8DFC
	
			// Methods
			internal Vector3 <DOMoveZ>b__0(); // 0x006E1C2C-0x006E1C60
		}
	
		[CompilerGenerated] // 0x0018483C-0x0018484C
		private sealed class <>c__DisplayClass32_0 // TypeDefIndex: 2805
		{
			// Fields
			public Rigidbody target; // 0x08
	
			// Constructors
			public <>c__DisplayClass32_0(); // 0x006D8FCC-0x006D8FD4
	
			// Methods
			internal Quaternion <DORotate>b__0(); // 0x006E1C60-0x006E1C94
		}
	
		[CompilerGenerated] // 0x0018484C-0x0018485C
		private sealed class <>c__DisplayClass33_0 // TypeDefIndex: 2806
		{
			// Fields
			public Rigidbody target; // 0x08
	
			// Constructors
			public <>c__DisplayClass33_0(); // 0x006D9274-0x006D927C
	
			// Methods
			internal Quaternion <DOLookAt>b__0(); // 0x006E1C94-0x006E1CC8
		}
	
		[CompilerGenerated] // 0x0018485C-0x0018486C
		private sealed class <>c__DisplayClass34_0 // TypeDefIndex: 2807
		{
			// Fields
			public Rigidbody target; // 0x08
			public bool offsetYSet; // 0x0C
			public float offsetY; // 0x10
			public Sequence s; // 0x14
			public Vector3 endValue; // 0x18
			public float startPosY; // 0x24
	
			// Constructors
			public <>c__DisplayClass34_0(); // 0x006D97E4-0x006D97EC
	
			// Methods
			internal Vector3 <DOJump>b__0(); // 0x006E1CC8-0x006E1CFC
			internal void <DOJump>b__1(); // 0x006E1CFC-0x006E1DEC
			internal Vector3 <DOJump>b__2(); // 0x006E1EE8-0x006E1F1C
			internal Vector3 <DOJump>b__3(); // 0x006E1F1C-0x006E1F50
		}
	
		[CompilerGenerated] // 0x0018486C-0x0018487C
		private sealed class <>c__DisplayClass35_0 // TypeDefIndex: 2808
		{
			// Fields
			public Rigidbody target; // 0x08
	
			// Constructors
			public <>c__DisplayClass35_0(); // 0x006D9A80-0x006D9A88
	
			// Methods
			internal Vector3 <DOPath>b__0(); // 0x006E1F50-0x006E1F84
		}
	
		[CompilerGenerated] // 0x0018487C-0x0018488C
		private sealed class <>c__DisplayClass36_0 // TypeDefIndex: 2809
		{
			// Fields
			public Transform trans; // 0x08
			public Rigidbody target; // 0x0C
	
			// Constructors
			public <>c__DisplayClass36_0(); // 0x006D9D64-0x006D9D6C
	
			// Methods
			internal Vector3 <DOLocalPath>b__0(); // 0x006E1F84-0x006E1FB8
			internal void <DOLocalPath>b__1(Vector3 x); // 0x006E1FB8-0x006E2110
		}
	
		[CompilerGenerated] // 0x0018488C-0x0018489C
		private sealed class <>c__DisplayClass37_0 // TypeDefIndex: 2810
		{
			// Fields
			public Rigidbody target; // 0x08
	
			// Constructors
			public <>c__DisplayClass37_0(); // 0x006D9F68-0x006D9F70
	
			// Methods
			internal Vector3 <DOPath>b__0(); // 0x006E2110-0x006E2144
		}
	
		[CompilerGenerated] // 0x0018489C-0x001848AC
		private sealed class <>c__DisplayClass38_0 // TypeDefIndex: 2811
		{
			// Fields
			public Transform trans; // 0x08
			public Rigidbody target; // 0x0C
	
			// Constructors
			public <>c__DisplayClass38_0(); // 0x006DA1C0-0x006DA1C8
	
			// Methods
			internal Vector3 <DOLocalPath>b__0(); // 0x006E2144-0x006E2178
			internal void <DOLocalPath>b__1(Vector3 x); // 0x006E2178-0x006E22D0
		}
	
		[CompilerGenerated] // 0x001848AC-0x001848BC
		private sealed class <>c__DisplayClass39_0 // TypeDefIndex: 2812
		{
			// Fields
			public TrailRenderer target; // 0x08
	
			// Constructors
			public <>c__DisplayClass39_0(); // 0x006DA374-0x006DA37C
	
			// Methods
			internal Vector2 <DOResize>b__0(); // 0x006E22D0-0x006E2348
			internal void <DOResize>b__1(Vector2 x); // 0x006E2348-0x006E23A8
		}
	
		[CompilerGenerated] // 0x001848BC-0x001848CC
		private sealed class <>c__DisplayClass40_0 // TypeDefIndex: 2813
		{
			// Fields
			public TrailRenderer target; // 0x08
	
			// Constructors
			public <>c__DisplayClass40_0(); // 0x006DA4F4-0x006DA4FC
	
			// Methods
			internal float <DOTime>b__0(); // 0x006E2434-0x006E2460
			internal void <DOTime>b__1(float x); // 0x006E2460-0x006E2494
		}
	
		[CompilerGenerated] // 0x001848CC-0x001848DC
		private sealed class <>c__DisplayClass41_0 // TypeDefIndex: 2814
		{
			// Fields
			public Transform target; // 0x08
	
			// Constructors
			public <>c__DisplayClass41_0(); // 0x006DA6A4-0x006DA6AC
	
			// Methods
			internal Vector3 <DOMove>b__0(); // 0x006E2494-0x006E24C8
			internal void <DOMove>b__1(Vector3 x); // 0x006E24C8-0x006E2518
		}
	
		[CompilerGenerated] // 0x001848DC-0x001848EC
		private sealed class <>c__DisplayClass42_0 // TypeDefIndex: 2815
		{
			// Fields
			public Transform target; // 0x08
	
			// Constructors
			public <>c__DisplayClass42_0(); // 0x006DA878-0x006DA880
	
			// Methods
			internal Vector3 <DOMoveX>b__0(); // 0x006E2518-0x006E254C
			internal void <DOMoveX>b__1(Vector3 x); // 0x006E254C-0x006E259C
		}
	
		[CompilerGenerated] // 0x001848EC-0x001848FC
		private sealed class <>c__DisplayClass43_0 // TypeDefIndex: 2816
		{
			// Fields
			public Transform target; // 0x08
	
			// Constructors
			public <>c__DisplayClass43_0(); // 0x006DAA4C-0x006DAA54
	
			// Methods
			internal Vector3 <DOMoveY>b__0(); // 0x006E259C-0x006E25D0
			internal void <DOMoveY>b__1(Vector3 x); // 0x006E25D0-0x006E2620
		}
	
		[CompilerGenerated] // 0x001848FC-0x0018490C
		private sealed class <>c__DisplayClass44_0 // TypeDefIndex: 2817
		{
			// Fields
			public Transform target; // 0x08
	
			// Constructors
			public <>c__DisplayClass44_0(); // 0x006DAC20-0x006DAC28
	
			// Methods
			internal Vector3 <DOMoveZ>b__0(); // 0x006E2620-0x006E2654
			internal void <DOMoveZ>b__1(Vector3 x); // 0x006E2654-0x006E26A4
		}
	
		[CompilerGenerated] // 0x0018490C-0x0018491C
		private sealed class <>c__DisplayClass45_0 // TypeDefIndex: 2818
		{
			// Fields
			public Transform target; // 0x08
	
			// Constructors
			public <>c__DisplayClass45_0(); // 0x006DADD0-0x006DADD8
	
			// Methods
			internal Vector3 <DOLocalMove>b__0(); // 0x006E26A4-0x006E26D8
			internal void <DOLocalMove>b__1(Vector3 x); // 0x006E26D8-0x006E2728
		}
	
		[CompilerGenerated] // 0x0018491C-0x0018492C
		private sealed class <>c__DisplayClass46_0 // TypeDefIndex: 2819
		{
			// Fields
			public Transform target; // 0x08
	
			// Constructors
			public <>c__DisplayClass46_0(); // 0x006DAFA4-0x006DAFAC
	
			// Methods
			internal Vector3 <DOLocalMoveX>b__0(); // 0x006E2728-0x006E275C
			internal void <DOLocalMoveX>b__1(Vector3 x); // 0x006E275C-0x006E27AC
		}
	
		[CompilerGenerated] // 0x0018492C-0x0018493C
		private sealed class <>c__DisplayClass47_0 // TypeDefIndex: 2820
		{
			// Fields
			public Transform target; // 0x08
	
			// Constructors
			public <>c__DisplayClass47_0(); // 0x006DB178-0x006DB180
	
			// Methods
			internal Vector3 <DOLocalMoveY>b__0(); // 0x006E27AC-0x006E27E0
			internal void <DOLocalMoveY>b__1(Vector3 x); // 0x006E27E0-0x006E2830
		}
	
		[CompilerGenerated] // 0x0018493C-0x0018494C
		private sealed class <>c__DisplayClass48_0 // TypeDefIndex: 2821
		{
			// Fields
			public Transform target; // 0x08
	
			// Constructors
			public <>c__DisplayClass48_0(); // 0x006DB34C-0x006DB354
	
			// Methods
			internal Vector3 <DOLocalMoveZ>b__0(); // 0x006E2830-0x006E2864
			internal void <DOLocalMoveZ>b__1(Vector3 x); // 0x006E2864-0x006E28B4
		}
	
		[CompilerGenerated] // 0x0018494C-0x0018495C
		private sealed class <>c__DisplayClass49_0 // TypeDefIndex: 2822
		{
			// Fields
			public Transform target; // 0x08
	
			// Constructors
			public <>c__DisplayClass49_0(); // 0x006DB510-0x006DB518
	
			// Methods
			internal Quaternion <DORotate>b__0(); // 0x006E28B4-0x006E28E8
			internal void <DORotate>b__1(Quaternion x); // 0x006E28E8-0x006E2940
		}
	
		[CompilerGenerated] // 0x0018495C-0x0018496C
		private sealed class <>c__DisplayClass50_0 // TypeDefIndex: 2823
		{
			// Fields
			public Transform target; // 0x08
	
			// Constructors
			public <>c__DisplayClass50_0(); // 0x006DB6E0-0x006DB6E8
	
			// Methods
			internal Quaternion <DORotateQuaternion>b__0(); // 0x006E29A0-0x006E29D4
			internal void <DORotateQuaternion>b__1(Quaternion x); // 0x006E29D4-0x006E2A2C
		}
	
		[CompilerGenerated] // 0x0018496C-0x0018497C
		private sealed class <>c__DisplayClass51_0 // TypeDefIndex: 2824
		{
			// Fields
			public Transform target; // 0x08
	
			// Constructors
			public <>c__DisplayClass51_0(); // 0x006DB8A4-0x006DB8AC
	
			// Methods
			internal Quaternion <DOLocalRotate>b__0(); // 0x006E2A2C-0x006E2A60
			internal void <DOLocalRotate>b__1(Quaternion x); // 0x006E2A60-0x006E2AB8
		}
	
		[CompilerGenerated] // 0x0018497C-0x0018498C
		private sealed class <>c__DisplayClass52_0 // TypeDefIndex: 2825
		{
			// Fields
			public Transform target; // 0x08
	
			// Constructors
			public <>c__DisplayClass52_0(); // 0x006DBA74-0x006DBA7C
	
			// Methods
			internal Quaternion <DOLocalRotateQuaternion>b__0(); // 0x006E2AB8-0x006E2AEC
			internal void <DOLocalRotateQuaternion>b__1(Quaternion x); // 0x006E2AEC-0x006E2B44
		}
	
		[CompilerGenerated] // 0x0018498C-0x0018499C
		private sealed class <>c__DisplayClass53_0 // TypeDefIndex: 2826
		{
			// Fields
			public Transform target; // 0x08
	
			// Constructors
			public <>c__DisplayClass53_0(); // 0x006DBC0C-0x006DBC14
	
			// Methods
			internal Vector3 <DOScale>b__0(); // 0x006E2B44-0x006E2B78
			internal void <DOScale>b__1(Vector3 x); // 0x006E2B78-0x006E2BC8
		}
	
		[CompilerGenerated] // 0x0018499C-0x001849AC
		private sealed class <>c__DisplayClass54_0 // TypeDefIndex: 2827
		{
			// Fields
			public Transform target; // 0x08
	
			// Constructors
			public <>c__DisplayClass54_0(); // 0x006DBDD4-0x006DBDDC
	
			// Methods
			internal Vector3 <DOScale>b__0(); // 0x006E2BC8-0x006E2BFC
			internal void <DOScale>b__1(Vector3 x); // 0x006E2BFC-0x006E2C4C
		}
	
		[CompilerGenerated] // 0x001849AC-0x001849BC
		private sealed class <>c__DisplayClass55_0 // TypeDefIndex: 2828
		{
			// Fields
			public Transform target; // 0x08
	
			// Constructors
			public <>c__DisplayClass55_0(); // 0x006DBFA4-0x006DBFAC
	
			// Methods
			internal Vector3 <DOScaleX>b__0(); // 0x006E2C4C-0x006E2C80
			internal void <DOScaleX>b__1(Vector3 x); // 0x006E2C80-0x006E2CD0
		}
	
		[CompilerGenerated] // 0x001849BC-0x001849CC
		private sealed class <>c__DisplayClass56_0 // TypeDefIndex: 2829
		{
			// Fields
			public Transform target; // 0x08
	
			// Constructors
			public <>c__DisplayClass56_0(); // 0x006DC174-0x006DC17C
	
			// Methods
			internal Vector3 <DOScaleY>b__0(); // 0x006E2CD0-0x006E2D04
			internal void <DOScaleY>b__1(Vector3 x); // 0x006E2D04-0x006E2D54
		}
	
		[CompilerGenerated] // 0x001849CC-0x001849DC
		private sealed class <>c__DisplayClass57_0 // TypeDefIndex: 2830
		{
			// Fields
			public Transform target; // 0x08
	
			// Constructors
			public <>c__DisplayClass57_0(); // 0x006DC344-0x006DC34C
	
			// Methods
			internal Vector3 <DOScaleZ>b__0(); // 0x006E2D54-0x006E2D88
			internal void <DOScaleZ>b__1(Vector3 x); // 0x006E2D88-0x006E2DD8
		}
	
		[CompilerGenerated] // 0x001849DC-0x001849EC
		private sealed class <>c__DisplayClass58_0 // TypeDefIndex: 2831
		{
			// Fields
			public Transform target; // 0x08
	
			// Constructors
			public <>c__DisplayClass58_0(); // 0x006DC5D8-0x006DC5E0
	
			// Methods
			internal Quaternion <DOLookAt>b__0(); // 0x006E2DD8-0x006E2E0C
			internal void <DOLookAt>b__1(Quaternion x); // 0x006E2E0C-0x006E2E64
		}
	
		[CompilerGenerated] // 0x001849EC-0x001849FC
		private sealed class <>c__DisplayClass59_0 // TypeDefIndex: 2832
		{
			// Fields
			public Transform target; // 0x08
	
			// Constructors
			public <>c__DisplayClass59_0(); // 0x006DC820-0x006DC828
	
			// Methods
			internal Vector3 <DOPunchPosition>b__0(); // 0x006E2E64-0x006E2E98
			internal void <DOPunchPosition>b__1(Vector3 x); // 0x006E2E98-0x006E2EE8
		}
	
		[CompilerGenerated] // 0x001849FC-0x00184A0C
		private sealed class <>c__DisplayClass60_0 // TypeDefIndex: 2833
		{
			// Fields
			public Transform target; // 0x08
	
			// Constructors
			public <>c__DisplayClass60_0(); // 0x006DCA58-0x006DCA60
	
			// Methods
			internal Vector3 <DOPunchScale>b__0(); // 0x006E2F48-0x006E2F7C
			internal void <DOPunchScale>b__1(Vector3 x); // 0x006E2F7C-0x006E2FCC
		}
	
		[CompilerGenerated] // 0x00184A0C-0x00184A1C
		private sealed class <>c__DisplayClass61_0 // TypeDefIndex: 2834
		{
			// Fields
			public Transform target; // 0x08
	
			// Constructors
			public <>c__DisplayClass61_0(); // 0x006DCC90-0x006DCC98
	
			// Methods
			internal Vector3 <DOPunchRotation>b__0(); // 0x006E2FCC-0x006E3000
			internal void <DOPunchRotation>b__1(Vector3 x); // 0x006E3000-0x006E30D4
		}
	
		[CompilerGenerated] // 0x00184A1C-0x00184A2C
		private sealed class <>c__DisplayClass62_0 // TypeDefIndex: 2835
		{
			// Fields
			public Transform target; // 0x08
	
			// Constructors
			public <>c__DisplayClass62_0(); // 0x006DCEF0-0x006DCEF8
	
			// Methods
			internal Vector3 <DOShakePosition>b__0(); // 0x006E30D4-0x006E3108
			internal void <DOShakePosition>b__1(Vector3 x); // 0x006E3108-0x006E3158
		}
	
		[CompilerGenerated] // 0x00184A2C-0x00184A3C
		private sealed class <>c__DisplayClass63_0 // TypeDefIndex: 2836
		{
			// Fields
			public Transform target; // 0x08
	
			// Constructors
			public <>c__DisplayClass63_0(); // 0x006DD158-0x006DD160
	
			// Methods
			internal Vector3 <DOShakePosition>b__0(); // 0x006E3158-0x006E318C
			internal void <DOShakePosition>b__1(Vector3 x); // 0x006E318C-0x006E31DC
		}
	
		[CompilerGenerated] // 0x00184A3C-0x00184A4C
		private sealed class <>c__DisplayClass64_0 // TypeDefIndex: 2837
		{
			// Fields
			public Transform target; // 0x08
	
			// Constructors
			public <>c__DisplayClass64_0(); // 0x006DD3A8-0x006DD3B0
	
			// Methods
			internal Vector3 <DOShakeRotation>b__0(); // 0x006E31DC-0x006E3210
			internal void <DOShakeRotation>b__1(Vector3 x); // 0x006E3210-0x006E32E4
		}
	
		[CompilerGenerated] // 0x00184A4C-0x00184A5C
		private sealed class <>c__DisplayClass65_0 // TypeDefIndex: 2838
		{
			// Fields
			public Transform target; // 0x08
	
			// Constructors
			public <>c__DisplayClass65_0(); // 0x006DD604-0x006DD60C
	
			// Methods
			internal Vector3 <DOShakeRotation>b__0(); // 0x006E32E4-0x006E3318
			internal void <DOShakeRotation>b__1(Vector3 x); // 0x006E3318-0x006E33EC
		}
	
		[CompilerGenerated] // 0x00184A5C-0x00184A6C
		private sealed class <>c__DisplayClass66_0 // TypeDefIndex: 2839
		{
			// Fields
			public Transform target; // 0x08
	
			// Constructors
			public <>c__DisplayClass66_0(); // 0x006DD8C0-0x006DD8C8
	
			// Methods
			internal Vector3 <DOShakeScale>b__0(); // 0x006E33EC-0x006E3420
			internal void <DOShakeScale>b__1(Vector3 x); // 0x006E3420-0x006E3470
		}
	
		[CompilerGenerated] // 0x00184A6C-0x00184A7C
		private sealed class <>c__DisplayClass67_0 // TypeDefIndex: 2840
		{
			// Fields
			public Transform target; // 0x08
	
			// Constructors
			public <>c__DisplayClass67_0(); // 0x006DDB1C-0x006DDB24
	
			// Methods
			internal Vector3 <DOShakeScale>b__0(); // 0x006E3470-0x006E34A4
			internal void <DOShakeScale>b__1(Vector3 x); // 0x006E34A4-0x006E34F4
		}
	
		[CompilerGenerated] // 0x00184A7C-0x00184A8C
		private sealed class <>c__DisplayClass68_0 // TypeDefIndex: 2841
		{
			// Fields
			public Transform target; // 0x08
			public bool offsetYSet; // 0x0C
			public float offsetY; // 0x10
			public Sequence s; // 0x14
			public Vector3 endValue; // 0x18
			public float startPosY; // 0x24
	
			// Constructors
			public <>c__DisplayClass68_0(); // 0x006DE084-0x006DE08C
	
			// Methods
			internal Vector3 <DOJump>b__0(); // 0x006E34F4-0x006E3528
			internal void <DOJump>b__1(Vector3 x); // 0x006E3528-0x006E3578
			internal void <DOJump>b__2(); // 0x006E3578-0x006E3668
			internal Vector3 <DOJump>b__3(); // 0x006E3668-0x006E369C
			internal void <DOJump>b__4(Vector3 x); // 0x006E369C-0x006E36EC
			internal Vector3 <DOJump>b__5(); // 0x006E36EC-0x006E3720
			internal void <DOJump>b__6(Vector3 x); // 0x006E3720-0x006E3770
		}
	
		[CompilerGenerated] // 0x00184A8C-0x00184A9C
		private sealed class <>c__DisplayClass69_0 // TypeDefIndex: 2842
		{
			// Fields
			public Transform target; // 0x08
			public bool offsetYSet; // 0x0C
			public float offsetY; // 0x10
			public Sequence s; // 0x14
			public Vector3 endValue; // 0x18
			public float startPosY; // 0x24
	
			// Constructors
			public <>c__DisplayClass69_0(); // 0x006DE5EC-0x006DE5F4
	
			// Methods
			internal Vector3 <DOLocalJump>b__0(); // 0x006E3770-0x006E37A4
			internal void <DOLocalJump>b__1(Vector3 x); // 0x006E37A4-0x006E37F4
			internal void <DOLocalJump>b__2(); // 0x006E37F4-0x006E38E4
			internal Vector3 <DOLocalJump>b__3(); // 0x006E38E4-0x006E3918
			internal void <DOLocalJump>b__4(Vector3 x); // 0x006E3918-0x006E3968
			internal Vector3 <DOLocalJump>b__5(); // 0x006E3968-0x006E399C
			internal void <DOLocalJump>b__6(Vector3 x); // 0x006E399C-0x006E39EC
		}
	
		[CompilerGenerated] // 0x00184A9C-0x00184AAC
		private sealed class <>c__DisplayClass70_0 // TypeDefIndex: 2843
		{
			// Fields
			public Transform target; // 0x08
	
			// Constructors
			public <>c__DisplayClass70_0(); // 0x006DE828-0x006DE830
	
			// Methods
			internal Vector3 <DOPath>b__0(); // 0x006E3A4C-0x006E3A80
			internal void <DOPath>b__1(Vector3 x); // 0x006E3A80-0x006E3AD0
		}
	
		[CompilerGenerated] // 0x00184AAC-0x00184ABC
		private sealed class <>c__DisplayClass71_0 // TypeDefIndex: 2844
		{
			// Fields
			public Transform target; // 0x08
	
			// Constructors
			public <>c__DisplayClass71_0(); // 0x006DEA80-0x006DEA88
	
			// Methods
			internal Vector3 <DOLocalPath>b__0(); // 0x006E3AD0-0x006E3B04
			internal void <DOLocalPath>b__1(Vector3 x); // 0x006E3B04-0x006E3B54
		}
	
		[CompilerGenerated] // 0x00184ABC-0x00184ACC
		private sealed class <>c__DisplayClass72_0 // TypeDefIndex: 2845
		{
			// Fields
			public Transform target; // 0x08
	
			// Constructors
			public <>c__DisplayClass72_0(); // 0x006DEC48-0x006DEC50
	
			// Methods
			internal Vector3 <DOPath>b__0(); // 0x006E3B54-0x006E3B88
			internal void <DOPath>b__1(Vector3 x); // 0x006E3B88-0x006E3BD8
		}
	
		[CompilerGenerated] // 0x00184ACC-0x00184ADC
		private sealed class <>c__DisplayClass73_0 // TypeDefIndex: 2846
		{
			// Fields
			public Transform target; // 0x08
	
			// Constructors
			public <>c__DisplayClass73_0(); // 0x006DEE2C-0x006DEE34
	
			// Methods
			internal Vector3 <DOLocalPath>b__0(); // 0x006E3BD8-0x006E3C0C
			internal void <DOLocalPath>b__1(Vector3 x); // 0x006E3C0C-0x006E3C5C
		}
	
		[CompilerGenerated] // 0x00184ADC-0x00184AEC
		private sealed class <>c__DisplayClass74_0 // TypeDefIndex: 2847
		{
			// Fields
			public Tween target; // 0x08
	
			// Constructors
			public <>c__DisplayClass74_0(); // 0x006DEFAC-0x006DEFB4
	
			// Methods
			internal float <DOTimeScale>b__0(); // 0x006E3C5C-0x006E3C80
			internal void <DOTimeScale>b__1(float x); // 0x006E3C80-0x006E3CB0
		}
	
		[CompilerGenerated] // 0x00184AEC-0x00184AFC
		private sealed class <>c__DisplayClass75_0 // TypeDefIndex: 2848
		{
			// Fields
			public Color to; // 0x08
			public Light target; // 0x18
	
			// Constructors
			public <>c__DisplayClass75_0(); // 0x006DF22C-0x006DF234
	
			// Methods
			internal Color <DOBlendableColor>b__0(); // 0x006E3CB0-0x006E3CC0
			internal void <DOBlendableColor>b__1(Color x); // 0x006E3CC0-0x006E3DC0
		}
	
		[CompilerGenerated] // 0x00184AFC-0x00184B0C
		private sealed class <>c__DisplayClass76_0 // TypeDefIndex: 2849
		{
			// Fields
			public Color to; // 0x08
			public Material target; // 0x18
	
			// Constructors
			public <>c__DisplayClass76_0(); // 0x006DF4AC-0x006DF4B4
	
			// Methods
			internal Color <DOBlendableColor>b__0(); // 0x006E3DC0-0x006E3DD0
			internal void <DOBlendableColor>b__1(Color x); // 0x006E3DD0-0x006E3ED0
		}
	
		[CompilerGenerated] // 0x00184B0C-0x00184B1C
		private sealed class <>c__DisplayClass77_0 // TypeDefIndex: 2850
		{
			// Fields
			public Color to; // 0x08
			public Material target; // 0x18
			public string property; // 0x1C
	
			// Constructors
			public <>c__DisplayClass77_0(); // 0x006DF800-0x006DF808
	
			// Methods
			internal Color <DOBlendableColor>b__0(); // 0x006E3ED0-0x006E3EE0
			internal void <DOBlendableColor>b__1(Color x); // 0x006E3EE0-0x006E3FF4
		}
	
		[CompilerGenerated] // 0x00184B1C-0x00184B2C
		private sealed class <>c__DisplayClass78_0 // TypeDefIndex: 2851
		{
			// Fields
			public Vector3 to; // 0x08
			public Transform target; // 0x14
	
			// Constructors
			public <>c__DisplayClass78_0(); // 0x006DFA08-0x006DFA10
	
			// Methods
			internal Vector3 <DOBlendableMoveBy>b__0(); // 0x006E3FF4-0x006E4008
			internal void <DOBlendableMoveBy>b__1(Vector3 x); // 0x006E4008-0x006E4144
		}
	
		[CompilerGenerated] // 0x00184B2C-0x00184B3C
		private sealed class <>c__DisplayClass79_0 // TypeDefIndex: 2852
		{
			// Fields
			public Vector3 to; // 0x08
			public Transform target; // 0x14
	
			// Constructors
			public <>c__DisplayClass79_0(); // 0x006DFC10-0x006DFC18
	
			// Methods
			internal Vector3 <DOBlendableLocalMoveBy>b__0(); // 0x006E4144-0x006E4158
			internal void <DOBlendableLocalMoveBy>b__1(Vector3 x); // 0x006E4158-0x006E4294
		}
	
		[CompilerGenerated] // 0x00184B3C-0x00184B4C
		private sealed class <>c__DisplayClass80_0 // TypeDefIndex: 2853
		{
			// Fields
			public Quaternion to; // 0x08
			public Transform target; // 0x18
	
			// Constructors
			public <>c__DisplayClass80_0(); // 0x006DFE30-0x006DFE38
	
			// Methods
			internal Quaternion <DOBlendableRotateBy>b__0(); // 0x006E42F4-0x006E4304
			internal void <DOBlendableRotateBy>b__1(Quaternion x); // 0x006E4304-0x006E4574
		}
	
		[CompilerGenerated] // 0x00184B4C-0x00184B5C
		private sealed class <>c__DisplayClass81_0 // TypeDefIndex: 2854
		{
			// Fields
			public Quaternion to; // 0x08
			public Transform target; // 0x18
	
			// Constructors
			public <>c__DisplayClass81_0(); // 0x006E0050-0x006E0058
	
			// Methods
			internal Quaternion <DOBlendableLocalRotateBy>b__0(); // 0x006E4574-0x006E4584
			internal void <DOBlendableLocalRotateBy>b__1(Quaternion x); // 0x006E4584-0x006E47F4
		}
	
		[CompilerGenerated] // 0x00184B5C-0x00184B6C
		private sealed class <>c__DisplayClass82_0 // TypeDefIndex: 2855
		{
			// Fields
			public Vector3 to; // 0x08
			public Transform target; // 0x14
	
			// Constructors
			public <>c__DisplayClass82_0(); // 0x006E024C-0x006E0254
	
			// Methods
			internal Vector3 <DOBlendableScaleBy>b__0(); // 0x006E47F4-0x006E4808
			internal void <DOBlendableScaleBy>b__1(Vector3 x); // 0x006E4808-0x006E4944
		}
	
		// Extension methods
		public static Tweener DOFade(this AudioSource target, float endValue, float duration); // 0x006D5194-0x006D5340
		public static Tweener DOPitch(this AudioSource target, float endValue, float duration); // 0x006D5348-0x006D54C0
		public static Tweener DOAspect(this Camera target, float endValue, float duration); // 0x006D54C8-0x006D5640
		public static Tweener DOColor(this Camera target, Color endValue, float duration); // 0x006D5648-0x006D57E8
		public static Tweener DOFarClipPlane(this Camera target, float endValue, float duration); // 0x006D57F0-0x006D5968
		public static Tweener DOFieldOfView(this Camera target, float endValue, float duration); // 0x006D5970-0x006D5AE8
		public static Tweener DONearClipPlane(this Camera target, float endValue, float duration); // 0x006D5AF0-0x006D5C68
		public static Tweener DOOrthoSize(this Camera target, float endValue, float duration); // 0x006D5C70-0x006D5DE8
		public static Tweener DOPixelRect(this Camera target, Rect endValue, float duration); // 0x006D5DF0-0x006D5F90
		public static Tweener DORect(this Camera target, Rect endValue, float duration); // 0x006D5F98-0x006D6138
		public static Tweener DOShakePosition(this Camera target, float duration, float strength = 3f /* Metadata: 0x0021B527 */, int vibrato = 10 /* Metadata: 0x0021B52B */, float randomness = 90f /* Metadata: 0x0021B52F */, bool fadeOut = true /* Metadata: 0x0021B533 */); // 0x006D6140-0x006D638C
		public static Tweener DOShakePosition(this Camera target, float duration, Vector3 strength, int vibrato = 10 /* Metadata: 0x0021B534 */, float randomness = 90f /* Metadata: 0x0021B538 */, bool fadeOut = true /* Metadata: 0x0021B53C */); // 0x006D6394-0x006D65E8
		public static Tweener DOShakeRotation(this Camera target, float duration, float strength = 90f /* Metadata: 0x0021B53D */, int vibrato = 10 /* Metadata: 0x0021B541 */, float randomness = 90f /* Metadata: 0x0021B545 */, bool fadeOut = true /* Metadata: 0x0021B549 */); // 0x006D65F0-0x006D6838
		public static Tweener DOShakeRotation(this Camera target, float duration, Vector3 strength, int vibrato = 10 /* Metadata: 0x0021B54A */, float randomness = 90f /* Metadata: 0x0021B54E */, bool fadeOut = true /* Metadata: 0x0021B552 */); // 0x006D6840-0x006D6A94
		public static Tweener DOColor(this Light target, Color endValue, float duration); // 0x006D6A9C-0x006D6C3C
		public static Tweener DOIntensity(this Light target, float endValue, float duration); // 0x006D6C44-0x006D6DBC
		public static Tweener DOShadowStrength(this Light target, float endValue, float duration); // 0x006D6DC4-0x006D6F3C
		public static Tweener DOColor(this LineRenderer target, Color2 startValue, Color2 endValue, float duration); // 0x006D6F44-0x006D7198
		public static Tweener DOColor(this Material target, Color endValue, float duration); // 0x006D71A0-0x006D7340
		public static Tweener DOColor(this Material target, Color endValue, string property, float duration); // 0x006D7348-0x006D75C4
		public static Tweener DOFade(this Material target, float endValue, float duration); // 0x006D75CC-0x006D7744
		public static Tweener DOFade(this Material target, float endValue, string property, float duration); // 0x006D774C-0x006D799C
		public static Tweener DOFloat(this Material target, float endValue, string property, float duration); // 0x006D79A4-0x006D7BF4
		public static Tweener DOOffset(this Material target, Vector2 endValue, float duration); // 0x006D7BFC-0x006D7D88
		public static Tweener DOOffset(this Material target, Vector2 endValue, string property, float duration); // 0x006D7D90-0x006D7FF8
		public static Tweener DOTiling(this Material target, Vector2 endValue, float duration); // 0x006D8000-0x006D818C
		public static Tweener DOTiling(this Material target, Vector2 endValue, string property, float duration); // 0x006D8194-0x006D83FC
		public static Tweener DOVector(this Material target, Vector4 endValue, string property, float duration); // 0x006D8404-0x006D8680
		public static Tweener DOMove(this Rigidbody target, Vector3 endValue, float duration, bool snapping = false /* Metadata: 0x0021B553 */); // 0x006D8688-0x006D8848
		public static Tweener DOMoveX(this Rigidbody target, float endValue, float duration, bool snapping = false /* Metadata: 0x0021B554 */); // 0x006D8850-0x006D8A2C
		public static Tweener DOMoveY(this Rigidbody target, float endValue, float duration, bool snapping = false /* Metadata: 0x0021B555 */); // 0x006D8A34-0x006D8C10
		public static Tweener DOMoveZ(this Rigidbody target, float endValue, float duration, bool snapping = false /* Metadata: 0x0021B556 */); // 0x006D8C18-0x006D8DF4
		public static Tweener DORotate(this Rigidbody target, Vector3 endValue, float duration, RotateMode mode = RotateMode.Fast /* Metadata: 0x0021B557 */); // 0x006D8DFC-0x006D8FCC
		public static Tweener DOLookAt(this Rigidbody target, Vector3 towards, float duration, AxisConstraint axisConstraint = AxisConstraint.None /* Metadata: 0x0021B55B */, Vector3? up = default); // 0x006D8FD4-0x006D9274
		public static Sequence DOJump(this Rigidbody target, Vector3 endValue, float jumpPower, int numJumps, float duration, bool snapping = false /* Metadata: 0x0021B55F */); // 0x006D927C-0x006D97E4
		public static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOPath(this Rigidbody target, Vector3[] path, float duration, PathType pathType = PathType.Linear /* Metadata: 0x0021B560 */, PathMode pathMode = PathMode.Full3D /* Metadata: 0x0021B564 */, int resolution = 10 /* Metadata: 0x0021B568 */, Color? gizmoColor = default); // 0x006D9800-0x006D9A80
		public static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOLocalPath(this Rigidbody target, Vector3[] path, float duration, PathType pathType = PathType.Linear /* Metadata: 0x0021B56C */, PathMode pathMode = PathMode.Full3D /* Metadata: 0x0021B570 */, int resolution = 10 /* Metadata: 0x0021B574 */, Color? gizmoColor = default); // 0x006D9A88-0x006D9D64
		internal static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOPath(this Rigidbody target, DG.Tweening.Plugins.Core.PathCore.Path path, float duration, PathMode pathMode = PathMode.Full3D /* Metadata: 0x0021B578 */); // 0x006D9D6C-0x006D9F68
		internal static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOLocalPath(this Rigidbody target, DG.Tweening.Plugins.Core.PathCore.Path path, float duration, PathMode pathMode = PathMode.Full3D /* Metadata: 0x0021B57C */); // 0x006D9F70-0x006DA1C0
		public static Tweener DOResize(this TrailRenderer target, float toStartWidth, float toEndWidth, float duration); // 0x006DA1C8-0x006DA374
		public static Tweener DOTime(this TrailRenderer target, float endValue, float duration); // 0x006DA37C-0x006DA4F4
		public static Tweener DOMove(this Transform target, Vector3 endValue, float duration, bool snapping = false /* Metadata: 0x0021B580 */); // 0x006DA4FC-0x006DA6A4
		public static Tweener DOMoveX(this Transform target, float endValue, float duration, bool snapping = false /* Metadata: 0x0021B581 */); // 0x006DA6AC-0x006DA878
		public static Tweener DOMoveY(this Transform target, float endValue, float duration, bool snapping = false /* Metadata: 0x0021B582 */); // 0x006DA880-0x006DAA4C
		public static Tweener DOMoveZ(this Transform target, float endValue, float duration, bool snapping = false /* Metadata: 0x0021B583 */); // 0x006DAA54-0x006DAC20
		public static Tweener DOLocalMove(this Transform target, Vector3 endValue, float duration, bool snapping = false /* Metadata: 0x0021B584 */); // 0x006DAC28-0x006DADD0
		public static Tweener DOLocalMoveX(this Transform target, float endValue, float duration, bool snapping = false /* Metadata: 0x0021B585 */); // 0x006DADD8-0x006DAFA4
		public static Tweener DOLocalMoveY(this Transform target, float endValue, float duration, bool snapping = false /* Metadata: 0x0021B586 */); // 0x006DAFAC-0x006DB178
		public static Tweener DOLocalMoveZ(this Transform target, float endValue, float duration, bool snapping = false /* Metadata: 0x0021B587 */); // 0x006DB180-0x006DB34C
		public static Tweener DORotate(this Transform target, Vector3 endValue, float duration, RotateMode mode = RotateMode.Fast /* Metadata: 0x0021B588 */); // 0x006DB354-0x006DB510
		public static Tweener DORotateQuaternion(this Transform target, Quaternion endValue, float duration); // 0x006DB518-0x006DB6E0
		public static Tweener DOLocalRotate(this Transform target, Vector3 endValue, float duration, RotateMode mode = RotateMode.Fast /* Metadata: 0x0021B58C */); // 0x006DB6E8-0x006DB8A4
		public static Tweener DOLocalRotateQuaternion(this Transform target, Quaternion endValue, float duration); // 0x006DB8AC-0x006DBA74
		public static Tweener DOScale(this Transform target, Vector3 endValue, float duration); // 0x006DBA7C-0x006DBC0C
		public static Tweener DOScale(this Transform target, float endValue, float duration); // 0x006DBC14-0x006DBDD4
		public static Tweener DOScaleX(this Transform target, float endValue, float duration); // 0x006DBDDC-0x006DBFA4
		public static Tweener DOScaleY(this Transform target, float endValue, float duration); // 0x006DBFAC-0x006DC174
		public static Tweener DOScaleZ(this Transform target, float endValue, float duration); // 0x006DC17C-0x006DC344
		public static Tweener DOLookAt(this Transform target, Vector3 towards, float duration, AxisConstraint axisConstraint = AxisConstraint.None /* Metadata: 0x0021B590 */, Vector3? up = default); // 0x006DC34C-0x006DC5D8
		public static Tweener DOPunchPosition(this Transform target, Vector3 punch, float duration, int vibrato = 10 /* Metadata: 0x0021B594 */, float elasticity = 1f /* Metadata: 0x0021B598 */, bool snapping = false /* Metadata: 0x0021B59C */); // 0x006DC5E0-0x006DC820
		public static Tweener DOPunchScale(this Transform target, Vector3 punch, float duration, int vibrato = 10 /* Metadata: 0x0021B59D */, float elasticity = 1f /* Metadata: 0x0021B5A1 */); // 0x006DC828-0x006DCA58
		public static Tweener DOPunchRotation(this Transform target, Vector3 punch, float duration, int vibrato = 10 /* Metadata: 0x0021B5A5 */, float elasticity = 1f /* Metadata: 0x0021B5A9 */); // 0x006DCA60-0x006DCC90
		public static Tweener DOShakePosition(this Transform target, float duration, float strength = 1f /* Metadata: 0x0021B5AD */, int vibrato = 10 /* Metadata: 0x0021B5B1 */, float randomness = 90f /* Metadata: 0x0021B5B5 */, bool snapping = false /* Metadata: 0x0021B5B9 */, bool fadeOut = true /* Metadata: 0x0021B5BA */); // 0x006DCC98-0x006DCEF0
		public static Tweener DOShakePosition(this Transform target, float duration, Vector3 strength, int vibrato = 10 /* Metadata: 0x0021B5BB */, float randomness = 90f /* Metadata: 0x0021B5BF */, bool snapping = false /* Metadata: 0x0021B5C3 */, bool fadeOut = true /* Metadata: 0x0021B5C4 */); // 0x006DCEF8-0x006DD158
		public static Tweener DOShakeRotation(this Transform target, float duration, float strength = 90f /* Metadata: 0x0021B5C5 */, int vibrato = 10 /* Metadata: 0x0021B5C9 */, float randomness = 90f /* Metadata: 0x0021B5CD */, bool fadeOut = true /* Metadata: 0x0021B5D1 */); // 0x006DD160-0x006DD3A8
		public static Tweener DOShakeRotation(this Transform target, float duration, Vector3 strength, int vibrato = 10 /* Metadata: 0x0021B5D2 */, float randomness = 90f /* Metadata: 0x0021B5D6 */, bool fadeOut = true /* Metadata: 0x0021B5DA */); // 0x006DD3B0-0x006DD604
		public static Tweener DOShakeScale(this Transform target, float duration, float strength = 1f /* Metadata: 0x0021B5DB */, int vibrato = 10 /* Metadata: 0x0021B5DF */, float randomness = 90f /* Metadata: 0x0021B5E3 */, bool fadeOut = true /* Metadata: 0x0021B5E7 */); // 0x006DD60C-0x006DD8C0
		public static Tweener DOShakeScale(this Transform target, float duration, Vector3 strength, int vibrato = 10 /* Metadata: 0x0021B5E8 */, float randomness = 90f /* Metadata: 0x0021B5EC */, bool fadeOut = true /* Metadata: 0x0021B5F0 */); // 0x006DD8C8-0x006DDB1C
		public static Sequence DOJump(this Transform target, Vector3 endValue, float jumpPower, int numJumps, float duration, bool snapping = false /* Metadata: 0x0021B5F1 */); // 0x006DDB24-0x006DE084
		public static Sequence DOLocalJump(this Transform target, Vector3 endValue, float jumpPower, int numJumps, float duration, bool snapping = false /* Metadata: 0x0021B5F2 */); // 0x006DE08C-0x006DE5EC
		public static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOPath(this Transform target, Vector3[] path, float duration, PathType pathType = PathType.Linear /* Metadata: 0x0021B5F3 */, PathMode pathMode = PathMode.Full3D /* Metadata: 0x0021B5F7 */, int resolution = 10 /* Metadata: 0x0021B5FB */, Color? gizmoColor = default); // 0x006DE5F4-0x006DE828
		public static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOLocalPath(this Transform target, Vector3[] path, float duration, PathType pathType = PathType.Linear /* Metadata: 0x0021B5FF */, PathMode pathMode = PathMode.Full3D /* Metadata: 0x0021B603 */, int resolution = 10 /* Metadata: 0x0021B607 */, Color? gizmoColor = default); // 0x006DE830-0x006DEA80
		internal static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOPath(this Transform target, DG.Tweening.Plugins.Core.PathCore.Path path, float duration, PathMode pathMode = PathMode.Full3D /* Metadata: 0x0021B60B */); // 0x006DEA88-0x006DEC48
		internal static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOLocalPath(this Transform target, DG.Tweening.Plugins.Core.PathCore.Path path, float duration, PathMode pathMode = PathMode.Full3D /* Metadata: 0x0021B60F */); // 0x006DEC50-0x006DEE2C
		public static Tweener DOTimeScale(this Tween target, float endValue, float duration); // 0x006DEE34-0x006DEFAC
		public static Tweener DOBlendableColor(this Light target, Color endValue, float duration); // 0x006DEFB4-0x006DF22C
		public static Tweener DOBlendableColor(this Material target, Color endValue, float duration); // 0x006DF234-0x006DF4AC
		public static Tweener DOBlendableColor(this Material target, Color endValue, string property, float duration); // 0x006DF4B4-0x006DF800
		public static Tweener DOBlendableMoveBy(this Transform target, Vector3 byValue, float duration, bool snapping = false /* Metadata: 0x0021B613 */); // 0x006DF808-0x006DFA08
		public static Tweener DOBlendableLocalMoveBy(this Transform target, Vector3 byValue, float duration, bool snapping = false /* Metadata: 0x0021B614 */); // 0x006DFA10-0x006DFC10
		public static Tweener DOBlendableRotateBy(this Transform target, Vector3 byValue, float duration, RotateMode mode = RotateMode.Fast /* Metadata: 0x0021B615 */); // 0x006DFC18-0x006DFE30
		public static Tweener DOBlendableLocalRotateBy(this Transform target, Vector3 byValue, float duration, RotateMode mode = RotateMode.Fast /* Metadata: 0x0021B619 */); // 0x006DFE38-0x006E0050
		public static Tweener DOBlendableScaleBy(this Transform target, Vector3 byValue, float duration); // 0x006E0058-0x006E024C
		public static int DOComplete(this Component target, bool withCallbacks = false /* Metadata: 0x0021B61D */); // 0x006E0254-0x006E02E0
		public static int DOComplete(this Material target, bool withCallbacks = false /* Metadata: 0x0021B61E */); // 0x006E02E0-0x006E036C
		public static int DOKill(this Component target, bool complete = false /* Metadata: 0x0021B61F */); // 0x006E036C-0x006E03F8
		public static int DOKill(this Material target, bool complete = false /* Metadata: 0x0021B620 */); // 0x006E03F8-0x006E0484
		public static int DOFlip(this Component target); // 0x006E0484-0x006E0508
		public static int DOFlip(this Material target); // 0x006E0508-0x006E058C
		public static int DOGoto(this Component target, float to, bool andPlay = false /* Metadata: 0x0021B621 */); // 0x006E058C-0x006E0620
		public static int DOGoto(this Material target, float to, bool andPlay = false /* Metadata: 0x0021B622 */); // 0x006E0620-0x006E06B4
		public static int DOPause(this Component target); // 0x006E06B4-0x006E0738
		public static int DOPause(this Material target); // 0x006E0738-0x006E07BC
		public static int DOPlay(this Component target); // 0x006E07BC-0x006E0840
		public static int DOPlay(this Material target); // 0x006E0840-0x006E08C4
		public static int DOPlayBackwards(this Component target); // 0x006E08C4-0x006E0948
		public static int DOPlayBackwards(this Material target); // 0x006E0948-0x006E09CC
		public static int DOPlayForward(this Component target); // 0x006E09CC-0x006E0A50
		public static int DOPlayForward(this Material target); // 0x006E0A50-0x006E0AD4
		public static int DORestart(this Component target, bool includeDelay = true /* Metadata: 0x0021B623 */); // 0x006E0AD4-0x006E0B68
		public static int DORestart(this Material target, bool includeDelay = true /* Metadata: 0x0021B624 */); // 0x006E0B68-0x006E0BFC
		public static int DORewind(this Component target, bool includeDelay = true /* Metadata: 0x0021B625 */); // 0x006E0BFC-0x006E0C88
		public static int DORewind(this Material target, bool includeDelay = true /* Metadata: 0x0021B626 */); // 0x006E0C88-0x006E0D14
		public static int DOSmoothRewind(this Component target); // 0x006E0D14-0x006E0D98
		public static int DOSmoothRewind(this Material target); // 0x006E0D98-0x006E0E1C
		public static int DOTogglePause(this Component target); // 0x006E0E1C-0x006E0EA0
		public static int DOTogglePause(this Material target); // 0x006E0EA0-0x006E0F24
	}

	public class TweenParams // TypeDefIndex: 2856
	{
		// Fields
		public static readonly TweenParams Params; // 0x00
		internal object id; // 0x08
		internal object target; // 0x0C
		internal UpdateType updateType; // 0x10
		internal bool isIndependentUpdate; // 0x14
		internal TweenCallback onStart; // 0x18
		internal TweenCallback onPlay; // 0x1C
		internal TweenCallback onRewind; // 0x20
		internal TweenCallback onUpdate; // 0x24
		internal TweenCallback onStepComplete; // 0x28
		internal TweenCallback onComplete; // 0x2C
		internal TweenCallback onKill; // 0x30
		internal TweenCallback<int> onWaypointChange; // 0x34
		internal bool isRecyclable; // 0x38
		internal bool isSpeedBased; // 0x39
		internal bool autoKill; // 0x3A
		internal int loops; // 0x3C
		internal LoopType loopType; // 0x40
		internal float delay; // 0x44
		internal bool isRelative; // 0x48
		internal Ease easeType; // 0x4C
		internal EaseFunction customEase; // 0x50
		internal float easeOvershootOrAmplitude; // 0x54
		internal float easePeriod; // 0x58
	
		// Constructors
		public TweenParams(); // 0x00B216D4-0x00B216F4
		static TweenParams(); // 0x00B21C44-0x00B21CC0
	
		// Methods
		public TweenParams Clear(); // 0x00B216F4-0x00B21810
		public TweenParams SetAutoKill(bool autoKillOnCompletion = true /* Metadata: 0x0021B627 */); // 0x00B21810-0x00B21818
		public TweenParams SetId(object id); // 0x00B21818-0x00B21820
		public TweenParams SetTarget(object target); // 0x00B21820-0x00B21828
		public TweenParams SetLoops(int loops, LoopType? loopType = default); // 0x00B21828-0x00B218E0
		public TweenParams SetEase(Ease ease, float? overshootOrAmplitude = default, float? period = default); // 0x00B218E0-0x00B21A6C
		public TweenParams SetEase(AnimationCurve animCurve); // 0x00B21A6C-0x00B21B28
		public TweenParams SetEase(EaseFunction customEase); // 0x00B21B28-0x00B21B38
		public TweenParams SetRecyclable(bool recyclable = true /* Metadata: 0x0021B628 */); // 0x00B21B38-0x00B21B40
		public TweenParams SetUpdate(bool isIndependentUpdate); // 0x00B21B40-0x00B21BE0
		public TweenParams SetUpdate(UpdateType updateType, bool isIndependentUpdate = false /* Metadata: 0x0021B629 */); // 0x00B21BE0-0x00B21BEC
		public TweenParams OnStart(TweenCallback action); // 0x00B21BEC-0x00B21BF4
		public TweenParams OnPlay(TweenCallback action); // 0x00B21BF4-0x00B21BFC
		public TweenParams OnRewind(TweenCallback action); // 0x00B21BFC-0x00B21C04
		public TweenParams OnUpdate(TweenCallback action); // 0x00B21C04-0x00B21C0C
		public TweenParams OnStepComplete(TweenCallback action); // 0x00B21C0C-0x00B21C14
		public TweenParams OnComplete(TweenCallback action); // 0x00B21C14-0x00B21C1C
		public TweenParams OnKill(TweenCallback action); // 0x00B21C1C-0x00B21C24
		public TweenParams OnWaypointChange(TweenCallback<int> action); // 0x00B21C24-0x00B21C2C
		public TweenParams SetDelay(float delay); // 0x00B21C2C-0x00B21C34
		public TweenParams SetRelative(bool isRelative = true /* Metadata: 0x0021B62A */); // 0x00B21C34-0x00B21C3C
		public TweenParams SetSpeedBased(bool isSpeedBased = true /* Metadata: 0x0021B62B */); // 0x00B21C3C-0x00B21C44
	}

	public static class TweenSettingsExtensions // TypeDefIndex: 2857
	{
		// Extension methods
		public static T SetAutoKill<T>(this T t)
			where T : Tween;
		public static T SetAutoKill<T>(this T t, bool autoKillOnCompletion)
			where T : Tween;
		public static T SetId<T>(this T t, object id)
			where T : Tween;
		public static T SetTarget<T>(this T t, object target)
			where T : Tween;
		public static T SetLoops<T>(this T t, int loops)
			where T : Tween;
		public static T SetLoops<T>(this T t, int loops, LoopType loopType)
			where T : Tween;
		public static T SetEase<T>(this T t, Ease ease)
			where T : Tween;
		public static T SetEase<T>(this T t, Ease ease, float overshoot)
			where T : Tween;
		public static T SetEase<T>(this T t, Ease ease, float amplitude, float period)
			where T : Tween;
		public static T SetEase<T>(this T t, AnimationCurve animCurve)
			where T : Tween;
		public static T SetEase<T>(this T t, EaseFunction customEase)
			where T : Tween;
		public static T SetRecyclable<T>(this T t)
			where T : Tween;
		public static T SetRecyclable<T>(this T t, bool recyclable)
			where T : Tween;
		public static T SetUpdate<T>(this T t, bool isIndependentUpdate)
			where T : Tween;
		public static T SetUpdate<T>(this T t, UpdateType updateType)
			where T : Tween;
		public static T SetUpdate<T>(this T t, UpdateType updateType, bool isIndependentUpdate)
			where T : Tween;
		public static T OnStart<T>(this T t, TweenCallback action)
			where T : Tween;
		public static T OnPlay<T>(this T t, TweenCallback action)
			where T : Tween;
		public static T OnPause<T>(this T t, TweenCallback action)
			where T : Tween;
		public static T OnRewind<T>(this T t, TweenCallback action)
			where T : Tween;
		public static T OnUpdate<T>(this T t, TweenCallback action)
			where T : Tween;
		public static T OnStepComplete<T>(this T t, TweenCallback action)
			where T : Tween;
		public static T OnComplete<T>(this T t, TweenCallback action)
			where T : Tween;
		public static T OnKill<T>(this T t, TweenCallback action)
			where T : Tween;
		public static T OnWaypointChange<T>(this T t, TweenCallback<int> action)
			where T : Tween;
		public static T SetAs<T>(this T t, Tween asTween)
			where T : Tween;
		public static T SetAs<T>(this T t, TweenParams tweenParams)
			where T : Tween;
		public static Sequence Append(this Sequence s, Tween t); // 0x00B21CC0-0x00B21D20
		public static Sequence Prepend(this Sequence s, Tween t); // 0x00B21D20-0x00B21D7C
		public static Sequence Join(this Sequence s, Tween t); // 0x00B21D7C-0x00B21DDC
		public static Sequence Insert(this Sequence s, float atPosition, Tween t); // 0x00B21DDC-0x00B21E44
		public static Sequence AppendInterval(this Sequence s, float interval); // 0x00B21E44-0x00B21E80
		public static Sequence PrependInterval(this Sequence s, float interval); // 0x00B21E80-0x00B21EBC
		public static Sequence AppendCallback(this Sequence s, TweenCallback callback); // 0x00B21EBC-0x00B21F04
		public static Sequence PrependCallback(this Sequence s, TweenCallback callback); // 0x00B21F04-0x00B21F4C
		public static Sequence InsertCallback(this Sequence s, float atPosition, TweenCallback callback); // 0x00B21F4C-0x00B21F9C
		public static T From<T>(this T t)
			where T : Tweener;
		public static T From<T>(this T t, bool isRelative)
			where T : Tweener;
		public static T SetDelay<T>(this T t, float delay)
			where T : Tween;
		public static T SetRelative<T>(this T t)
			where T : Tween;
		public static T SetRelative<T>(this T t, bool isRelative)
			where T : Tween;
		public static T SetSpeedBased<T>(this T t)
			where T : Tween;
		public static T SetSpeedBased<T>(this T t, bool isSpeedBased)
			where T : Tween;
		public static Tweener SetOptions(this TweenerCore<float, float, FloatOptions> t, bool snapping); // 0x00B21F9C-0x00B21FB4
		public static Tweener SetOptions(this TweenerCore<Vector2, Vector2, VectorOptions> t, bool snapping); // 0x00B21FB4-0x00B21FCC
		public static Tweener SetOptions(this TweenerCore<Vector2, Vector2, VectorOptions> t, AxisConstraint axisConstraint, bool snapping = false /* Metadata: 0x0021B62C */); // 0x00B21FCC-0x00B21FE8
		public static Tweener SetOptions(this TweenerCore<Vector3, Vector3, VectorOptions> t, bool snapping); // 0x00B21FE8-0x00B22000
		public static Tweener SetOptions(this TweenerCore<Vector3, Vector3, VectorOptions> t, AxisConstraint axisConstraint, bool snapping = false /* Metadata: 0x0021B62D */); // 0x00B22000-0x00B2201C
		public static Tweener SetOptions(this TweenerCore<Vector4, Vector4, VectorOptions> t, bool snapping); // 0x00B2201C-0x00B22034
		public static Tweener SetOptions(this TweenerCore<Vector4, Vector4, VectorOptions> t, AxisConstraint axisConstraint, bool snapping = false /* Metadata: 0x0021B62E */); // 0x00B22034-0x00B22050
		public static Tweener SetOptions(this TweenerCore<Quaternion, Vector3, QuaternionOptions> t, bool useShortest360Route = true /* Metadata: 0x0021B62F */); // 0x00B22050-0x00B2206C
		public static Tweener SetOptions(this TweenerCore<Color, Color, ColorOptions> t, bool alphaOnly); // 0x00B2206C-0x00B22084
		public static Tweener SetOptions(this TweenerCore<Rect, Rect, RectOptions> t, bool snapping); // 0x00B22084-0x00B2209C
		public static Tweener SetOptions(this TweenerCore<string, string, StringOptions> t, bool richTextEnabled, ScrambleMode scrambleMode = ScrambleMode.None /* Metadata: 0x0021B630 */, string scrambleChars = null); // 0x00B2209C-0x00B221B8
		public static Tweener SetOptions(this TweenerCore<Vector3, Vector3[], Vector3ArrayOptions> t, bool snapping); // 0x00B221B8-0x00B221D0
		public static Tweener SetOptions(this TweenerCore<Vector3, Vector3[], Vector3ArrayOptions> t, AxisConstraint axisConstraint, bool snapping = false /* Metadata: 0x0021B634 */); // 0x00B221D0-0x00B221EC
		public static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> SetOptions(this TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> t, AxisConstraint lockPosition, AxisConstraint lockRotation = AxisConstraint.None /* Metadata: 0x0021B635 */); // 0x00B221EC-0x00B22210
		public static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> SetOptions(this TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> t, bool closePath, AxisConstraint lockPosition = AxisConstraint.None /* Metadata: 0x0021B639 */, AxisConstraint lockRotation = AxisConstraint.None /* Metadata: 0x0021B63D */); // 0x00B22210-0x00B22230
		public static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> SetLookAt(this TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> t, Vector3 lookAtPosition, Vector3? forwardDirection = default, Vector3? up = default); // 0x00B22230-0x00B222B0
		public static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> SetLookAt(this TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> t, Transform lookAtTransform, Vector3? forwardDirection = default, Vector3? up = default); // 0x00B22850-0x00B228C8
		public static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> SetLookAt(this TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> t, float lookAhead, Vector3? forwardDirection = default, Vector3? up = default); // 0x00B228C8-0x00B22950
		private static void SetPathForwardDirection(this TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> t, Vector3? forwardDirection = default, Vector3? up = default); // 0x00B222B0-0x00B22850
	}

	public enum LogBehaviour // TypeDefIndex: 2858
	{
		Default = 0,
		Verbose = 1,
		ErrorsOnly = 2
	}

	public abstract class Tween : ABSSequentiable // TypeDefIndex: 2859
	{
		// Fields
		public float timeScale; // 0x18
		public bool isBackwards; // 0x1C
		public object id; // 0x20
		public object target; // 0x24
		internal UpdateType updateType; // 0x28
		internal bool isIndependentUpdate; // 0x2C
		public TweenCallback onPlay; // 0x30
		public TweenCallback onPause; // 0x34
		public TweenCallback onRewind; // 0x38
		public TweenCallback onUpdate; // 0x3C
		public TweenCallback onStepComplete; // 0x40
		public TweenCallback onComplete; // 0x44
		public TweenCallback onKill; // 0x48
		public TweenCallback<int> onWaypointChange; // 0x4C
		internal bool isFrom; // 0x50
		internal bool isBlendable; // 0x51
		internal bool isRecyclable; // 0x52
		internal bool isSpeedBased; // 0x53
		internal bool autoKill; // 0x54
		internal float duration; // 0x58
		internal int loops; // 0x5C
		internal LoopType loopType; // 0x60
		internal float delay; // 0x64
		internal bool isRelative; // 0x68
		internal Ease easeType; // 0x6C
		internal EaseFunction customEase; // 0x70
		public float easeOvershootOrAmplitude; // 0x74
		public float easePeriod; // 0x78
		internal Type typeofT1; // 0x7C
		internal Type typeofT2; // 0x80
		internal Type typeofTPlugOptions; // 0x84
		internal bool active; // 0x88
		internal bool isSequenced; // 0x89
		internal Sequence sequenceParent; // 0x8C
		internal int activeId; // 0x90
		internal SpecialStartupMode specialStartupMode; // 0x94
		internal bool creationLocked; // 0x98
		internal bool startupDone; // 0x99
		internal bool playedOnce; // 0x9A
		internal float position; // 0x9C
		internal float fullDuration; // 0xA0
		internal int completedLoops; // 0xA4
		internal bool isPlaying; // 0xA8
		internal bool isComplete; // 0xA9
		internal float elapsedDelay; // 0xAC
		internal bool delayComplete; // 0xB0
		internal int miscInt; // 0xB4
	
		// Properties
		public float fullPosition { get; set; } // 0x006E4A5C-0x006E4A64 0x006E4B44-0x006E4B4C
	
		// Constructors
		protected Tween(); // 0x006D3518-0x006D3534
	
		// Methods
		internal virtual void Reset(); // 0x006D3CC8-0x006D3D54
		internal abstract bool Validate();
		internal virtual float UpdateDelay(float elapsed); // 0x006E4CD0-0x006E4CD8
		internal abstract bool Startup();
		internal abstract bool ApplyTween(float prevPosition, int prevCompletedLoops, int newCompletedSteps, bool useInversePosition, UpdateMode updateMode, UpdateNotice updateNotice);
		internal static bool DoGoto(Tween t, float toPosition, int toCompletedLoops, UpdateMode updateMode); // 0x006E4CD8-0x006E50A8
		internal static bool OnTweenCallback(TweenCallback callback); // 0x006D4D5C-0x006D5124
		internal static bool OnTweenCallback<T>(TweenCallback<T> callback, T param);
	}

	public abstract class Tweener : Tween // TypeDefIndex: 2860
	{
		// Fields
		internal bool hasManuallySetStartValue; // 0xB8
		internal bool isFromAllowed; // 0xB9
	
		// Constructors
		internal Tweener(); // 0x00B22950-0x00B229BC
	
		// Methods
		public abstract Tweener ChangeStartValue(object newStartValue, float newDuration = -1f /* Metadata: 0x0021B64D */);
		public abstract Tweener ChangeEndValue(object newEndValue, float newDuration = -1f /* Metadata: 0x0021B651 */, bool snapStartValue = false /* Metadata: 0x0021B655 */);
		public abstract Tweener ChangeEndValue(object newEndValue, bool snapStartValue);
		public abstract Tweener ChangeValues(object newStartValue, object newEndValue, float newDuration = -1f /* Metadata: 0x0021B656 */);
		internal abstract Tweener SetFrom(bool relative);
		internal static bool Setup<T1, T2, TPlugOptions>(TweenerCore<T1, T2, TPlugOptions> t, DOGetter<T1> getter, DOSetter<T1> setter, T2 endValue, float duration, ABSTweenPlugin<T1, T2, TPlugOptions> plugin = null)
			where TPlugOptions : struct, IPlugOptions;
		internal static float DoUpdateDelay<T1, T2, TPlugOptions>(TweenerCore<T1, T2, TPlugOptions> t, float elapsed)
			where TPlugOptions : struct, IPlugOptions;
		internal static bool DoStartup<T1, T2, TPlugOptions>(TweenerCore<T1, T2, TPlugOptions> t)
			where TPlugOptions : struct, IPlugOptions;
		internal static Tweener DoChangeStartValue<T1, T2, TPlugOptions>(TweenerCore<T1, T2, TPlugOptions> t, T2 newStartValue, float newDuration)
			where TPlugOptions : struct, IPlugOptions;
		internal static Tweener DoChangeEndValue<T1, T2, TPlugOptions>(TweenerCore<T1, T2, TPlugOptions> t, T2 newEndValue, float newDuration, bool snapStartValue)
			where TPlugOptions : struct, IPlugOptions;
		internal static Tweener DoChangeValues<T1, T2, TPlugOptions>(TweenerCore<T1, T2, TPlugOptions> t, T2 newStartValue, T2 newEndValue, float newDuration)
			where TPlugOptions : struct, IPlugOptions;
		private static bool DOStartupSpecials<T1, T2, TPlugOptions>(TweenerCore<T1, T2, TPlugOptions> t)
			where TPlugOptions : struct, IPlugOptions;
		private static void DOStartupDurationBased<T1, T2, TPlugOptions>(TweenerCore<T1, T2, TPlugOptions> t)
			where TPlugOptions : struct, IPlugOptions;
	}

	public enum TweenType // TypeDefIndex: 2861
	{
		Tweener = 0,
		Sequence = 1,
		Callback = 2
	}

	public enum UpdateType // TypeDefIndex: 2862
	{
		Normal = 0,
		Late = 1,
		Fixed = 2,
		Manual = 3
	}
}

namespace DG.Tweening.Plugins
{
	internal class Color2Plugin : ABSTweenPlugin<Color2, Color2, ColorOptions> // TypeDefIndex: 2863
	{
		// Constructors
		public Color2Plugin(); // 0x007DEA24-0x007DEA88
	
		// Methods
		public override void Reset(TweenerCore<Color2, Color2, ColorOptions> t); // 0x007DDF50-0x007DDF54
		public override void SetFrom(TweenerCore<Color2, Color2, ColorOptions> t, bool isRelative); // 0x007DDF54-0x007DE220
		public override Color2 ConvertToStartValue(TweenerCore<Color2, Color2, ColorOptions> t, Color2 value); // 0x007DE220-0x007DE25C
		public override void SetRelativeEndValue(TweenerCore<Color2, Color2, ColorOptions> t); // 0x007DE25C-0x007DE35C
		public override void SetChangeValue(TweenerCore<Color2, Color2, ColorOptions> t); // 0x007DE35C-0x007DE44C
		public override float GetSpeedBasedDuration(ColorOptions options, float unitsXSecond, Color2 changeValue); // 0x007DE44C-0x007DE460
		public override void EvaluateAndApply(ColorOptions options, Tween t, bool isRelative, DOGetter<Color2> getter, DOSetter<Color2> setter, float elapsed, Color2 startValue, Color2 changeValue, float duration, bool usingInversePosition, UpdateNotice updateNotice); // 0x007DE460-0x007DEA24
	}

	public class DoublePlugin : ABSTweenPlugin<double, double, NoOptions> // TypeDefIndex: 2864
	{
		// Constructors
		public DoublePlugin(); // 0x007E32A0-0x007E3304
	
		// Methods
		public override void Reset(TweenerCore<double, double, NoOptions> t); // 0x007E2F00-0x007E2F04
		public override void SetFrom(TweenerCore<double, double, NoOptions> t, bool isRelative); // 0x007E2F04-0x007E3008
		public override double ConvertToStartValue(TweenerCore<double, double, NoOptions> t, double value); // 0x007E3008-0x007E3014
		public override void SetRelativeEndValue(TweenerCore<double, double, NoOptions> t); // 0x007E3014-0x007E3070
		public override void SetChangeValue(TweenerCore<double, double, NoOptions> t); // 0x007E3070-0x007E30CC
		public override float GetSpeedBasedDuration(NoOptions options, float unitsXSecond, double changeValue); // 0x007E30CC-0x007E30F4
		public override void EvaluateAndApply(NoOptions options, Tween t, bool isRelative, DOGetter<double> getter, DOSetter<double> setter, float elapsed, double startValue, double changeValue, float duration, bool usingInversePosition, UpdateNotice updateNotice); // 0x007E30F4-0x007E32A0
	}

	public class LongPlugin : ABSTweenPlugin<long, long, NoOptions> // TypeDefIndex: 2865
	{
		// Constructors
		public LongPlugin(); // 0x007E4208-0x007E429C
	
		// Methods
		public override void Reset(TweenerCore<long, long, NoOptions> t); // 0x007E3D00-0x007E3D04
		public override void SetFrom(TweenerCore<long, long, NoOptions> t, bool isRelative); // 0x007E3D04-0x007E3E18
		public override long ConvertToStartValue(TweenerCore<long, long, NoOptions> t, long value); // 0x007E3E18-0x007E3E24
		public override void SetRelativeEndValue(TweenerCore<long, long, NoOptions> t); // 0x007E3E24-0x007E3E94
		public override void SetChangeValue(TweenerCore<long, long, NoOptions> t); // 0x007E3E94-0x007E3F04
		public override float GetSpeedBasedDuration(NoOptions options, float unitsXSecond, long changeValue); // 0x007E3F04-0x007E3F40
		public override void EvaluateAndApply(NoOptions options, Tween t, bool isRelative, DOGetter<long> getter, DOSetter<long> setter, float elapsed, long startValue, long changeValue, float duration, bool usingInversePosition, UpdateNotice updateNotice); // 0x007E3F40-0x007E4208
	}

	public class UlongPlugin : ABSTweenPlugin<ulong, ulong, NoOptions> // TypeDefIndex: 2866
	{
		// Constructors
		public UlongPlugin(); // 0x006CEB00-0x006CEB64
	
		// Methods
		public override void Reset(TweenerCore<ulong, ulong, NoOptions> t); // 0x006CE610-0x006CE614
		public override void SetFrom(TweenerCore<ulong, ulong, NoOptions> t, bool isRelative); // 0x006CE614-0x006CE728
		public override ulong ConvertToStartValue(TweenerCore<ulong, ulong, NoOptions> t, ulong value); // 0x006CE728-0x006CE734
		public override void SetRelativeEndValue(TweenerCore<ulong, ulong, NoOptions> t); // 0x006CE734-0x006CE7A4
		public override void SetChangeValue(TweenerCore<ulong, ulong, NoOptions> t); // 0x006CE7A4-0x006CE814
		public override float GetSpeedBasedDuration(NoOptions options, float unitsXSecond, ulong changeValue); // 0x006CE814-0x006CE854
		public override void EvaluateAndApply(NoOptions options, Tween t, bool isRelative, DOGetter<ulong> getter, DOSetter<ulong> setter, float elapsed, ulong startValue, ulong changeValue, float duration, bool usingInversePosition, UpdateNotice updateNotice); // 0x006CE854-0x006CEB00
	}

	public class Vector3ArrayPlugin : ABSTweenPlugin<Vector3, Vector3[], Vector3ArrayOptions> // TypeDefIndex: 2867
	{
		// Constructors
		public Vector3ArrayPlugin(); // 0x006D0E30-0x006D0E94
	
		// Methods
		public override void Reset(TweenerCore<Vector3, Vector3[], Vector3ArrayOptions> t); // 0x006CF82C-0x006CF888
		public override void SetFrom(TweenerCore<Vector3, Vector3[], Vector3ArrayOptions> t, bool isRelative); // 0x006CF888-0x006CF88C
		public override Vector3[] ConvertToStartValue(TweenerCore<Vector3, Vector3[], Vector3ArrayOptions> t, Vector3 value); // 0x006CF88C-0x006CFA38
		public override void SetRelativeEndValue(TweenerCore<Vector3, Vector3[], Vector3ArrayOptions> t); // 0x006CFA38-0x006CFC80
		public override void SetChangeValue(TweenerCore<Vector3, Vector3[], Vector3ArrayOptions> t); // 0x006CFC80-0x006CFE6C
		public override float GetSpeedBasedDuration(Vector3ArrayOptions options, float unitsXSecond, Vector3[] changeValue); // 0x006CFE6C-0x006CFF68
		public override void EvaluateAndApply(Vector3ArrayOptions options, Tween t, bool isRelative, DOGetter<Vector3> getter, DOSetter<Vector3> setter, float elapsed, Vector3[] startValue, Vector3[] changeValue, float duration, bool usingInversePosition, UpdateNotice updateNotice); // 0x006CFF68-0x006D0E30
	}

	public class PathPlugin : ABSTweenPlugin<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> // TypeDefIndex: 2868
	{
		// Fields
		public const float MinLookAhead = 0.0001f; // Metadata: 0x0021B676
	
		// Constructors
		public PathPlugin(); // 0x007E6808-0x007E686C
	
		// Methods
		public override void Reset(TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> t); // 0x007E49B0-0x007E49FC
		public override void SetFrom(TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> t, bool isRelative); // 0x007E49FC-0x007E4A00
		public static ABSTweenPlugin<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> Get(); // 0x007E4A00-0x007E4A5C
		public override DG.Tweening.Plugins.Core.PathCore.Path ConvertToStartValue(TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> t, Vector3 value); // 0x007E4A5C-0x007E4A80
		public override void SetRelativeEndValue(TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> t); // 0x007E4A80-0x007E4C48
		public override void SetChangeValue(TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> t); // 0x007E4C48-0x007E52C4
		public override float GetSpeedBasedDuration(PathOptions options, float unitsXSecond, DG.Tweening.Plugins.Core.PathCore.Path changeValue); // 0x007E52C4-0x007E5318
		public override void EvaluateAndApply(PathOptions options, Tween t, bool isRelative, DOGetter<Vector3> getter, DOSetter<Vector3> setter, float elapsed, DG.Tweening.Plugins.Core.PathCore.Path startValue, DG.Tweening.Plugins.Core.PathCore.Path changeValue, float duration, bool usingInversePosition, UpdateNotice updateNotice); // 0x007E5318-0x007E5638
		public void SetOrientation(PathOptions options, Tween t, DG.Tweening.Plugins.Core.PathCore.Path path, float pathPerc, Vector3 tPos, UpdateNotice updateNotice); // 0x007E5638-0x007E6808
	}

	public class ColorPlugin : ABSTweenPlugin<Color, Color, ColorOptions> // TypeDefIndex: 2869
	{
		// Constructors
		public ColorPlugin(); // 0x007DF13C-0x007DF1A0
	
		// Methods
		public override void Reset(TweenerCore<Color, Color, ColorOptions> t); // 0x007DEA88-0x007DEA8C
		public override void SetFrom(TweenerCore<Color, Color, ColorOptions> t, bool isRelative); // 0x007DEA8C-0x007DEC3C
		public override Color ConvertToStartValue(TweenerCore<Color, Color, ColorOptions> t, Color value); // 0x007DEC3C-0x007DEC54
		public override void SetRelativeEndValue(TweenerCore<Color, Color, ColorOptions> t); // 0x007DEC54-0x007DECE8
		public override void SetChangeValue(TweenerCore<Color, Color, ColorOptions> t); // 0x007DECE8-0x007DED7C
		public override float GetSpeedBasedDuration(ColorOptions options, float unitsXSecond, Color changeValue); // 0x007DED7C-0x007DED90
		public override void EvaluateAndApply(ColorOptions options, Tween t, bool isRelative, DOGetter<Color> getter, DOSetter<Color> setter, float elapsed, Color startValue, Color changeValue, float duration, bool usingInversePosition, UpdateNotice updateNotice); // 0x007DED90-0x007DF13C
	}

	public class IntPlugin : ABSTweenPlugin<int, int, NoOptions> // TypeDefIndex: 2870
	{
		// Constructors
		public IntPlugin(); // 0x007E3C9C-0x007E3D00
	
		// Methods
		public override void Reset(TweenerCore<int, int, NoOptions> t); // 0x007E3888-0x007E388C
		public override void SetFrom(TweenerCore<int, int, NoOptions> t, bool isRelative); // 0x007E388C-0x007E3974
		public override int ConvertToStartValue(TweenerCore<int, int, NoOptions> t, int value); // 0x007E3974-0x007E397C
		public override void SetRelativeEndValue(TweenerCore<int, int, NoOptions> t); // 0x007E397C-0x007E39D0
		public override void SetChangeValue(TweenerCore<int, int, NoOptions> t); // 0x007E39D0-0x007E3A24
		public override float GetSpeedBasedDuration(NoOptions options, float unitsXSecond, int changeValue); // 0x007E3A24-0x007E3A4C
		public override void EvaluateAndApply(NoOptions options, Tween t, bool isRelative, DOGetter<int> getter, DOSetter<int> setter, float elapsed, int startValue, int changeValue, float duration, bool usingInversePosition, UpdateNotice updateNotice); // 0x007E3A4C-0x007E3C9C
	}

	public class QuaternionPlugin : ABSTweenPlugin<Quaternion, Vector3, QuaternionOptions> // TypeDefIndex: 2871
	{
		// Constructors
		public QuaternionPlugin(); // 0x007E77CC-0x007E7830
	
		// Methods
		public override void Reset(TweenerCore<Quaternion, Vector3, QuaternionOptions> t); // 0x007E686C-0x007E6870
		public override void SetFrom(TweenerCore<Quaternion, Vector3, QuaternionOptions> t, bool isRelative); // 0x007E6870-0x007E6D5C
		public override Vector3 ConvertToStartValue(TweenerCore<Quaternion, Vector3, QuaternionOptions> t, Quaternion value); // 0x007E6D5C-0x007E6D8C
		public override void SetRelativeEndValue(TweenerCore<Quaternion, Vector3, QuaternionOptions> t); // 0x007E6D8C-0x007E6EAC
		public override void SetChangeValue(TweenerCore<Quaternion, Vector3, QuaternionOptions> t); // 0x007E6EAC-0x007E7180
		public override float GetSpeedBasedDuration(QuaternionOptions options, float unitsXSecond, Vector3 changeValue); // 0x007E7180-0x007E71C8
		public override void EvaluateAndApply(QuaternionOptions options, Tween t, bool isRelative, DOGetter<Quaternion> getter, DOSetter<Quaternion> setter, float elapsed, Vector3 startValue, Vector3 changeValue, float duration, bool usingInversePosition, UpdateNotice updateNotice); // 0x007E71C8-0x007E77CC
	}

	public class RectOffsetPlugin : ABSTweenPlugin<RectOffset, RectOffset, NoOptions> // TypeDefIndex: 2872
	{
		// Fields
		private static RectOffset _r; // 0x00
	
		// Constructors
		public RectOffsetPlugin(); // 0x007E8C88-0x007E8CEC
		static RectOffsetPlugin(); // 0x007E8CEC-0x007E8D6C
	
		// Methods
		public override void Reset(TweenerCore<RectOffset, RectOffset, NoOptions> t); // 0x007E7830-0x007E788C
		public override void SetFrom(TweenerCore<RectOffset, RectOffset, NoOptions> t, bool isRelative); // 0x007E788C-0x007E7B14
		public override RectOffset ConvertToStartValue(TweenerCore<RectOffset, RectOffset, NoOptions> t, RectOffset value); // 0x007E7B14-0x007E7C38
		public override void SetRelativeEndValue(TweenerCore<RectOffset, RectOffset, NoOptions> t); // 0x007E7C38-0x007E7DF8
		public override void SetChangeValue(TweenerCore<RectOffset, RectOffset, NoOptions> t); // 0x007E7DF8-0x007E7FC8
		public override float GetSpeedBasedDuration(NoOptions options, float unitsXSecond, RectOffset changeValue); // 0x007E7FC8-0x007E80E4
		public override void EvaluateAndApply(NoOptions options, Tween t, bool isRelative, DOGetter<RectOffset> getter, DOSetter<RectOffset> setter, float elapsed, RectOffset startValue, RectOffset changeValue, float duration, bool usingInversePosition, UpdateNotice updateNotice); // 0x007E80E4-0x007E8C88
	}

	public class RectPlugin : ABSTweenPlugin<Rect, Rect, RectOptions> // TypeDefIndex: 2873
	{
		// Constructors
		public RectPlugin(); // 0x006CC070-0x006CC0D4
	
		// Methods
		public override void Reset(TweenerCore<Rect, Rect, RectOptions> t); // 0x006CAED4-0x006CAED8
		public override void SetFrom(TweenerCore<Rect, Rect, RectOptions> t, bool isRelative); // 0x006CAED8-0x006CB3EC
		public override Rect ConvertToStartValue(TweenerCore<Rect, Rect, RectOptions> t, Rect value); // 0x006CB3EC-0x006CB404
		public override void SetRelativeEndValue(TweenerCore<Rect, Rect, RectOptions> t); // 0x006CB404-0x006CB5B8
		public override void SetChangeValue(TweenerCore<Rect, Rect, RectOptions> t); // 0x006CB5B8-0x006CB7A8
		public override float GetSpeedBasedDuration(RectOptions options, float unitsXSecond, Rect changeValue); // 0x006CB7A8-0x006CB8A8
		public override void EvaluateAndApply(RectOptions options, Tween t, bool isRelative, DOGetter<Rect> getter, DOSetter<Rect> setter, float elapsed, Rect startValue, Rect changeValue, float duration, bool usingInversePosition, UpdateNotice updateNotice); // 0x006CB8A8-0x006CC070
	}

	public class UintPlugin : ABSTweenPlugin<uint, uint, UintOptions> // TypeDefIndex: 2874
	{
		// Constructors
		public UintPlugin(); // 0x006CE5AC-0x006CE610
	
		// Methods
		public override void Reset(TweenerCore<uint, uint, UintOptions> t); // 0x006CE0A8-0x006CE0AC
		public override void SetFrom(TweenerCore<uint, uint, UintOptions> t, bool isRelative); // 0x006CE0AC-0x006CE194
		public override uint ConvertToStartValue(TweenerCore<uint, uint, UintOptions> t, uint value); // 0x006CE194-0x006CE19C
		public override void SetRelativeEndValue(TweenerCore<uint, uint, UintOptions> t); // 0x006CE19C-0x006CE1F0
		public override void SetChangeValue(TweenerCore<uint, uint, UintOptions> t); // 0x006CE1F0-0x006CE2CC
		public override float GetSpeedBasedDuration(UintOptions options, float unitsXSecond, uint changeValue); // 0x006CE2CC-0x006CE2F8
		public override void EvaluateAndApply(UintOptions options, Tween t, bool isRelative, DOGetter<uint> getter, DOSetter<uint> setter, float elapsed, uint startValue, uint changeValue, float duration, bool usingInversePosition, UpdateNotice updateNotice); // 0x006CE2F8-0x006CE5AC
	}

	public class Vector2Plugin : ABSTweenPlugin<Vector2, Vector2, VectorOptions> // TypeDefIndex: 2875
	{
		// Constructors
		public Vector2Plugin(); // 0x006CF7C8-0x006CF82C
	
		// Methods
		public override void Reset(TweenerCore<Vector2, Vector2, VectorOptions> t); // 0x006CEB64-0x006CEB68
		public override void SetFrom(TweenerCore<Vector2, Vector2, VectorOptions> t, bool isRelative); // 0x006CEB68-0x006CEE70
		public override Vector2 ConvertToStartValue(TweenerCore<Vector2, Vector2, VectorOptions> t, Vector2 value); // 0x006CEE70-0x006CEE80
		public override void SetRelativeEndValue(TweenerCore<Vector2, Vector2, VectorOptions> t); // 0x006CEE80-0x006CEF70
		public override void SetChangeValue(TweenerCore<Vector2, Vector2, VectorOptions> t); // 0x006CEF70-0x006CF0A8
		public override float GetSpeedBasedDuration(VectorOptions options, float unitsXSecond, Vector2 changeValue); // 0x006CF0A8-0x006CF0EC
		public override void EvaluateAndApply(VectorOptions options, Tween t, bool isRelative, DOGetter<Vector2> getter, DOSetter<Vector2> setter, float elapsed, Vector2 startValue, Vector2 changeValue, float duration, bool usingInversePosition, UpdateNotice updateNotice); // 0x006CF0EC-0x006CF7C8
	}

	public class Vector4Plugin : ABSTweenPlugin<Vector4, Vector4, VectorOptions> // TypeDefIndex: 2876
	{
		// Constructors
		public Vector4Plugin(); // 0x006D33C8-0x006D342C
	
		// Methods
		public override void Reset(TweenerCore<Vector4, Vector4, VectorOptions> t); // 0x006D1FD8-0x006D1FDC
		public override void SetFrom(TweenerCore<Vector4, Vector4, VectorOptions> t, bool isRelative); // 0x006D1FDC-0x006D24A0
		public override Vector4 ConvertToStartValue(TweenerCore<Vector4, Vector4, VectorOptions> t, Vector4 value); // 0x006D24A0-0x006D24B8
		public override void SetRelativeEndValue(TweenerCore<Vector4, Vector4, VectorOptions> t); // 0x006D24B8-0x006D25C0
		public override void SetChangeValue(TweenerCore<Vector4, Vector4, VectorOptions> t); // 0x006D25C0-0x006D27A8
		public override float GetSpeedBasedDuration(VectorOptions options, float unitsXSecond, Vector4 changeValue); // 0x006D27A8-0x006D27F0
		public override void EvaluateAndApply(VectorOptions options, Tween t, bool isRelative, DOGetter<Vector4> getter, DOSetter<Vector4> setter, float elapsed, Vector4 startValue, Vector4 changeValue, float duration, bool usingInversePosition, UpdateNotice updateNotice); // 0x006D27F0-0x006D33C8
	}

	public class StringPlugin : ABSTweenPlugin<string, string, StringOptions> // TypeDefIndex: 2877
	{
		// Fields
		private static readonly StringBuilder _Buffer; // 0x00
		private static readonly List<char> _OpenedTags; // 0x04
	
		// Constructors
		public StringPlugin(); // 0x006CDD0C-0x006CDD70
		static StringPlugin(); // 0x006CDD70-0x006CDE2C
	
		// Methods
		public override void SetFrom(TweenerCore<string, string, StringOptions> t, bool isRelative); // 0x006CC0D4-0x006CC1B0
		public override void Reset(TweenerCore<string, string, StringOptions> t); // 0x006CC1B0-0x006CC20C
		public override string ConvertToStartValue(TweenerCore<string, string, StringOptions> t, string value); // 0x006CC20C-0x006CC214
		public override void SetRelativeEndValue(TweenerCore<string, string, StringOptions> t); // 0x006CC214-0x006CC218
		public override void SetChangeValue(TweenerCore<string, string, StringOptions> t); // 0x006CC218-0x006CC37C
		public override float GetSpeedBasedDuration(StringOptions options, float unitsXSecond, string changeValue); // 0x006CC37C-0x006CC3E4
		public override void EvaluateAndApply(StringOptions options, Tween t, bool isRelative, DOGetter<string> getter, DOSetter<string> setter, float elapsed, string startValue, string changeValue, float duration, bool usingInversePosition, UpdateNotice updateNotice); // 0x006CC3E4-0x006CCCAC
		private StringBuilder Append(string value, int startIndex, int length, bool richTextEnabled); // 0x006CCCAC-0x006CD9AC
		private char[] ScrambledCharsToUse(StringOptions options); // 0x006CD9AC-0x006CDB48
	}

	internal static class StringPluginExtensions // TypeDefIndex: 2878
	{
		// Fields
		public static readonly char[] ScrambledCharsAll; // 0x00
		public static readonly char[] ScrambledCharsUppercase; // 0x04
		public static readonly char[] ScrambledCharsLowercase; // 0x08
		public static readonly char[] ScrambledCharsNumerals; // 0x0C
		private static int _lastRndSeed; // 0x10
	
		// Constructors
		static StringPluginExtensions(); // 0x006CDE2C-0x006CDFA8
	
		// Extension methods
		internal static void ScrambleChars(this char[] chars); // 0x006CDFA8-0x006CE0A8
		internal static StringBuilder AppendScrambledChars(this StringBuilder buffer, int length, char[] chars); // 0x006CDB48-0x006CDD0C
	}

	public class FloatPlugin : ABSTweenPlugin<float, float, FloatOptions> // TypeDefIndex: 2879
	{
		// Constructors
		public FloatPlugin(); // 0x007E3824-0x007E3888
	
		// Methods
		public override void Reset(TweenerCore<float, float, FloatOptions> t); // 0x007E3304-0x007E3308
		public override void SetFrom(TweenerCore<float, float, FloatOptions> t, bool isRelative); // 0x007E3308-0x007E34D0
		public override float ConvertToStartValue(TweenerCore<float, float, FloatOptions> t, float value); // 0x007E34D0-0x007E34D8
		public override void SetRelativeEndValue(TweenerCore<float, float, FloatOptions> t); // 0x007E34D8-0x007E3534
		public override void SetChangeValue(TweenerCore<float, float, FloatOptions> t); // 0x007E3534-0x007E3590
		public override float GetSpeedBasedDuration(FloatOptions options, float unitsXSecond, float changeValue); // 0x007E3590-0x007E35B4
		public override void EvaluateAndApply(FloatOptions options, Tween t, bool isRelative, DOGetter<float> getter, DOSetter<float> setter, float elapsed, float startValue, float changeValue, float duration, bool usingInversePosition, UpdateNotice updateNotice); // 0x007E35B4-0x007E3824
	}

	public class Vector3Plugin : ABSTweenPlugin<Vector3, Vector3, VectorOptions> // TypeDefIndex: 2880
	{
		// Constructors
		public Vector3Plugin(); // 0x006D1F74-0x006D1FD8
	
		// Methods
		public override void Reset(TweenerCore<Vector3, Vector3, VectorOptions> t); // 0x006D0E94-0x006D0E98
		public override void SetFrom(TweenerCore<Vector3, Vector3, VectorOptions> t, bool isRelative); // 0x006D0E98-0x006D12C4
		public override Vector3 ConvertToStartValue(TweenerCore<Vector3, Vector3, VectorOptions> t, Vector3 value); // 0x006D12C4-0x006D12DC
		public override void SetRelativeEndValue(TweenerCore<Vector3, Vector3, VectorOptions> t); // 0x006D12DC-0x006D13FC
		public override void SetChangeValue(TweenerCore<Vector3, Vector3, VectorOptions> t); // 0x006D13FC-0x006D1584
		public override float GetSpeedBasedDuration(VectorOptions options, float unitsXSecond, Vector3 changeValue); // 0x006D1584-0x006D15D0
		public override void EvaluateAndApply(VectorOptions options, Tween t, bool isRelative, DOGetter<Vector3> getter, DOSetter<Vector3> setter, float elapsed, Vector3 startValue, Vector3 changeValue, float duration, bool usingInversePosition, UpdateNotice updateNotice); // 0x006D15D0-0x006D1F74
	}
}

namespace DG.Tweening.Plugins.Options
{
	public interface IPlugOptions // TypeDefIndex: 2881
	{
		// Methods
		void Reset();
	}

	public enum OrientType // TypeDefIndex: 2882
	{
		None = 0,
		ToPath = 1,
		LookAtTransform = 2,
		LookAtPosition = 3
	}

	public struct PathOptions : IPlugOptions // TypeDefIndex: 2883
	{
		// Fields
		public PathMode mode; // 0x00
		public OrientType orientType; // 0x04
		public AxisConstraint lockPositionAxis; // 0x08
		public AxisConstraint lockRotationAxis; // 0x0C
		public bool isClosedPath; // 0x10
		public Vector3 lookAtPosition; // 0x14
		public Transform lookAtTransform; // 0x20
		public float lookAhead; // 0x24
		public bool hasCustomForwardDirection; // 0x28
		public Quaternion forward; // 0x2C
		public bool useLocalPosition; // 0x3C
		public Transform parent; // 0x40
		public bool isRigidbody; // 0x44
		internal Quaternion startupRot; // 0x48
		internal float startupZRot; // 0x58
	
		// Methods
		public void Reset(); // 0x007E4478-0x007E4524
	}

	public struct QuaternionOptions : IPlugOptions // TypeDefIndex: 2884
	{
		// Fields
		internal RotateMode rotateMode; // 0x00
		internal AxisConstraint axisConstraint; // 0x04
		internal Vector3 up; // 0x08
	
		// Methods
		public void Reset(); // 0x007E4524-0x007E455C
	}

	public struct UintOptions : IPlugOptions // TypeDefIndex: 2885
	{
		// Fields
		public bool isNegativeChangeValue; // 0x00
	
		// Methods
		public void Reset(); // 0x007E4784-0x007E4948
	}

	public struct Vector3ArrayOptions : IPlugOptions // TypeDefIndex: 2886
	{
		// Fields
		public AxisConstraint axisConstraint; // 0x00
		public bool snapping; // 0x04
		internal float[] durations; // 0x08
	
		// Methods
		public void Reset(); // 0x007E4948-0x007E49A0
	}

	public struct NoOptions : IPlugOptions // TypeDefIndex: 2887
	{
		// Methods
		public void Reset(); // 0x007E42E8-0x007E4478
	}

	public struct ColorOptions : IPlugOptions // TypeDefIndex: 2888
	{
		// Fields
		public bool alphaOnly; // 0x00
	
		// Methods
		public void Reset(); // 0x007E429C-0x007E42D8
	}

	public struct FloatOptions : IPlugOptions // TypeDefIndex: 2889
	{
		// Fields
		public bool snapping; // 0x00
	
		// Methods
		public void Reset(); // 0x007E42D8-0x007E42E8
	}

	public struct RectOptions : IPlugOptions // TypeDefIndex: 2890
	{
		// Fields
		public bool snapping; // 0x00
	
		// Methods
		public void Reset(); // 0x007E455C-0x007E473C
	}

	public struct StringOptions : IPlugOptions // TypeDefIndex: 2891
	{
		// Fields
		public bool richTextEnabled; // 0x00
		public ScrambleMode scrambleMode; // 0x04
		public char[] scrambledChars; // 0x08
		internal int startValueStrippedLength; // 0x0C
		internal int changeValueStrippedLength; // 0x10
	
		// Methods
		public void Reset(); // 0x007E473C-0x007E4784
	}

	public struct VectorOptions : IPlugOptions // TypeDefIndex: 2892
	{
		// Fields
		public AxisConstraint axisConstraint; // 0x00
		public bool snapping; // 0x04
	
		// Methods
		public void Reset(); // 0x007E49A0-0x007E49B0
	}
}

namespace DG.Tweening.Plugins.Core
{
	public interface ITPlugin<T1, out T2, out TPlugOptions, TPlugin> // TypeDefIndex: 2893
	{
	}

	internal static class SpecialPluginsUtils // TypeDefIndex: 2894
	{
		// Methods
		internal static bool SetLookAt(TweenerCore<Quaternion, Vector3, QuaternionOptions> t); // 0x007E26E0-0x007E28E8
		internal static bool SetPunch(TweenerCore<Vector3, Vector3[], Vector3ArrayOptions> t); // 0x007E28E8-0x007E2B64
		internal static bool SetShake(TweenerCore<Vector3, Vector3[], Vector3ArrayOptions> t); // 0x007E2B64-0x007E2BA0
		internal static bool SetCameraShakePosition(TweenerCore<Vector3, Vector3[], Vector3ArrayOptions> t); // 0x007E2BA0-0x007E2F00
	}

	public interface IPlugSetter<T1, out T2, TPlugin, out TPlugOptions> // TypeDefIndex: 2895
	{
		// Methods
		DOGetter<T1> Getter();
		DOSetter<T1> Setter();
		T2 EndValue();
		TPlugOptions GetOptions();
	}

	public interface ITweenPlugin // TypeDefIndex: 2896
	{
	}

	public abstract class ABSTweenPlugin<T1, T2, TPlugOptions> : ITweenPlugin // TypeDefIndex: 2897
		where TPlugOptions : struct, IPlugOptions
	{
		// Constructors
		protected ABSTweenPlugin();
	
		// Methods
		public abstract void Reset(TweenerCore<T1, T2, TPlugOptions> t);
		public abstract void SetFrom(TweenerCore<T1, T2, TPlugOptions> t, bool isRelative);
		public abstract T2 ConvertToStartValue(TweenerCore<T1, T2, TPlugOptions> t, T1 value);
		public abstract void SetRelativeEndValue(TweenerCore<T1, T2, TPlugOptions> t);
		public abstract void SetChangeValue(TweenerCore<T1, T2, TPlugOptions> t);
		public abstract float GetSpeedBasedDuration(TPlugOptions options, float unitsXSecond, T2 changeValue);
		public abstract void EvaluateAndApply(TPlugOptions options, Tween t, bool isRelative, DOGetter<T1> getter, DOSetter<T1> setter, float elapsed, T2 startValue, T2 changeValue, float duration, bool usingInversePosition, UpdateNotice updateNotice);
	}

	internal static class PluginsManager // TypeDefIndex: 2898
	{
		// Fields
		private static ITweenPlugin _floatPlugin; // 0x00
		private static ITweenPlugin _doublePlugin; // 0x04
		private static ITweenPlugin _intPlugin; // 0x08
		private static ITweenPlugin _uintPlugin; // 0x0C
		private static ITweenPlugin _longPlugin; // 0x10
		private static ITweenPlugin _ulongPlugin; // 0x14
		private static ITweenPlugin _vector2Plugin; // 0x18
		private static ITweenPlugin _vector3Plugin; // 0x1C
		private static ITweenPlugin _vector4Plugin; // 0x20
		private static ITweenPlugin _quaternionPlugin; // 0x24
		private static ITweenPlugin _colorPlugin; // 0x28
		private static ITweenPlugin _rectPlugin; // 0x2C
		private static ITweenPlugin _rectOffsetPlugin; // 0x30
		private static ITweenPlugin _stringPlugin; // 0x34
		private static ITweenPlugin _vector3ArrayPlugin; // 0x38
		private static ITweenPlugin _color2Plugin; // 0x3C
		private const int _MaxCustomPlugins = 20; // Metadata: 0x0021B68A
		private static Dictionary<Type, ITweenPlugin> _customPlugins; // 0x40
	
		// Methods
		internal static ABSTweenPlugin<T1, T2, TPlugOptions> GetDefaultPlugin<T1, T2, TPlugOptions>()
			where TPlugOptions : struct, IPlugOptions;
		public static ABSTweenPlugin<T1, T2, TPlugOptions> GetCustomPlugin<TPlugin, T1, T2, TPlugOptions>()
			where TPlugin : ITweenPlugin, new()
			where TPlugOptions : struct, IPlugOptions;
		internal static void PurgeAll(); // 0x007D9380-0x007D947C
	}
}

namespace DG.Tweening.Plugins.Core.PathCore
{
	[Serializable]
	public struct ControlPoint // TypeDefIndex: 2899
	{
		// Fields
		public Vector3 a; // 0x00
		public Vector3 b; // 0x0C
	
		// Constructors
		public ControlPoint(Vector3 a, Vector3 b); // 0x007E0418-0x007E043C
	
		// Methods
		public static ControlPoint operator +(ControlPoint cp, Vector3 v); // 0x007E043C-0x007E0544
	}

	internal abstract class ABSPathDecoder // TypeDefIndex: 2900
	{
		// Constructors
		protected ABSPathDecoder(); // 0x007DF1A0-0x007DF1A8
	
		// Methods
		internal abstract void FinalizePath(DG.Tweening.Plugins.Core.PathCore.Path p, Vector3[] wps, bool isClosedPath);
		internal abstract Vector3 GetPoint(float perc, Vector3[] wps, DG.Tweening.Plugins.Core.PathCore.Path p, ControlPoint[] controlPoints);
	}

	internal class CatmullRomDecoder : ABSPathDecoder // TypeDefIndex: 2901
	{
		// Constructors
		public CatmullRomDecoder(); // 0x007E0410-0x007E0418
	
		// Methods
		internal override void FinalizePath(DG.Tweening.Plugins.Core.PathCore.Path p, Vector3[] wps, bool isClosedPath); // 0x007DF1A8-0x007DF5C0
		internal override Vector3 GetPoint(float perc, Vector3[] wps, DG.Tweening.Plugins.Core.PathCore.Path p, ControlPoint[] controlPoints); // 0x007DFE68-0x007E0410
		internal void SetTimeToLengthTables(DG.Tweening.Plugins.Core.PathCore.Path p, int subdivisions); // 0x007DF5C0-0x007DF87C
		internal void SetWaypointsLengths(DG.Tweening.Plugins.Core.PathCore.Path p, int subdivisions); // 0x007DF87C-0x007DFE68
	}

	internal class LinearDecoder : ABSPathDecoder // TypeDefIndex: 2902
	{
		// Constructors
		public LinearDecoder(); // 0x007E0B8C-0x007E0B94
	
		// Methods
		internal override void FinalizePath(DG.Tweening.Plugins.Core.PathCore.Path p, Vector3[] wps, bool isClosedPath); // 0x007E0544-0x007E0598
		internal override Vector3 GetPoint(float perc, Vector3[] wps, DG.Tweening.Plugins.Core.PathCore.Path p, ControlPoint[] controlPoints); // 0x007E08C8-0x007E0B88
		internal void SetTimeToLengthTables(DG.Tweening.Plugins.Core.PathCore.Path p, int subdivisions); // 0x007E0598-0x007E08C8
		internal void SetWaypointsLengths(DG.Tweening.Plugins.Core.PathCore.Path p, int subdivisions); // 0x007E0B88-0x007E0B8C
	}

	[Serializable]
	public class Path // TypeDefIndex: 2903
	{
		// Fields
		private static CatmullRomDecoder _catmullRomDecoder; // 0x00
		private static LinearDecoder _linearDecoder; // 0x04
		public float[] wpLengths; // 0x08
		[SerializeField] // 0x00184BDC-0x00184BEC
		internal PathType type; // 0x0C
		[SerializeField] // 0x00184BEC-0x00184BFC
		internal int subdivisionsXSegment; // 0x10
		[SerializeField] // 0x00184BFC-0x00184C0C
		internal int subdivisions; // 0x14
		[SerializeField] // 0x00184C0C-0x00184C1C
		internal Vector3[] wps; // 0x18
		[SerializeField] // 0x00184C1C-0x00184C2C
		internal ControlPoint[] controlPoints; // 0x1C
		[SerializeField] // 0x00184C2C-0x00184C3C
		internal float length; // 0x20
		[SerializeField] // 0x00184C3C-0x00184C4C
		internal bool isFinalized; // 0x24
		[SerializeField] // 0x00184C4C-0x00184C5C
		internal float[] timesTable; // 0x28
		[SerializeField] // 0x00184C5C-0x00184C6C
		internal float[] lengthsTable; // 0x2C
		internal int linearWPIndex; // 0x30
		private Path _incrementalClone; // 0x34
		private int _incrementalIndex; // 0x38
		private ABSPathDecoder _decoder; // 0x3C
		private bool _changed; // 0x40
		internal Vector3[] nonLinearDrawWps; // 0x44
		internal Vector3 targetPosition; // 0x48
		internal Vector3? lookAtPosition; // 0x54
		internal Color gizmoColor; // 0x64
	
		// Constructors
		public Path(PathType type, Vector3[] waypoints, int subdivisionsXSegment, Color? gizmoColor = default); // 0x007E0B94-0x007E0DB8
		internal Path(); // 0x007E1008-0x007E1078
	
		// Methods
		internal void FinalizePath(bool isClosedPath, AxisConstraint lockPositionAxes, Vector3 currTargetVal); // 0x007E1078-0x007E122C
		internal Vector3 GetPoint(float perc, bool convertToConstantPerc = false /* Metadata: 0x0021B68E */); // 0x007E122C-0x007E12A8
		internal float ConvertToConstantPathPerc(float perc); // 0x007E12A8-0x007E14AC
		internal int GetWaypointIndexFromPerc(float perc, bool isMovingForward); // 0x007E14AC-0x007E15D4
		internal static Vector3[] GetDrawPoints(Path p, int drawSubdivisionsXSegment); // 0x007E15D4-0x007E1738
		internal static void RefreshNonLinearDrawWps(Path p); // 0x007E1738-0x007E18AC
		internal void Destroy(); // 0x007E18AC-0x007E19F8
		internal Path CloneIncremental(int loopIncrement); // 0x007E19F8-0x007E2280
		internal void AssignWaypoints(Vector3[] newWps, bool cloneWps = false /* Metadata: 0x0021B68F */); // 0x007E0DB8-0x007E0EF4
		internal void AssignDecoder(PathType pathType); // 0x007E0EF4-0x007E1008
		internal void Draw(); // 0x007E2280-0x007E2284
		private static void Draw(Path p); // 0x007E2284-0x007E26E0
	}
}

namespace DG.Tweening.CustomPlugins
{
	public class PureQuaternionPlugin : ABSTweenPlugin<Quaternion, Quaternion, NoOptions> // TypeDefIndex: 2904
	{
		// Fields
		private static PureQuaternionPlugin _plug; // 0x00
	
		// Constructors
		public PureQuaternionPlugin(); // 0x007D7C5C-0x007D7CC0
	
		// Methods
		public static PureQuaternionPlugin Plug(); // 0x007D7BC0-0x007D7C5C
		public override void Reset(TweenerCore<Quaternion, Quaternion, NoOptions> t); // 0x007D7CC0-0x007D7CC4
		public override void SetFrom(TweenerCore<Quaternion, Quaternion, NoOptions> t, bool isRelative); // 0x007D7CC4-0x007D7E5C
		public override Quaternion ConvertToStartValue(TweenerCore<Quaternion, Quaternion, NoOptions> t, Quaternion value); // 0x007D7E5C-0x007D7E74
		public override void SetRelativeEndValue(TweenerCore<Quaternion, Quaternion, NoOptions> t); // 0x007D7E74-0x007D7F7C
		public override void SetChangeValue(TweenerCore<Quaternion, Quaternion, NoOptions> t); // 0x007D7F7C-0x007D809C
		public override float GetSpeedBasedDuration(NoOptions options, float unitsXSecond, Quaternion changeValue); // 0x007D809C-0x007D8114
		public override void EvaluateAndApply(NoOptions options, Tween t, bool isRelative, DOGetter<Quaternion> getter, DOSetter<Quaternion> setter, float elapsed, Quaternion startValue, Quaternion changeValue, float duration, bool usingInversePosition, UpdateNotice updateNotice); // 0x007D8114-0x007D82A4
	}
}

namespace DG.Tweening.Core
{
	public abstract class ABSSequentiable // TypeDefIndex: 2905
	{
		// Fields
		internal TweenType tweenType; // 0x08
		internal float sequencedPosition; // 0x0C
		internal float sequencedEndPosition; // 0x10
		internal TweenCallback onStart; // 0x14
	
		// Constructors
		protected ABSSequentiable(); // 0x007CAC98-0x007CACA0
	}

	public delegate T DOGetter<out T>(); // TypeDefIndex: 2906; 0x00000000-0x00000000

	public delegate void DOSetter<in T>(T pNewValue); // TypeDefIndex: 2907; 0x00000000-0x00000000

	public static class Debugger // TypeDefIndex: 2908
	{
		// Fields
		public static int logPriority; // 0x00
	
		// Methods
		public static void Log(object message); // 0x007CD5E8-0x007CD68C
		public static void LogWarning(object message); // 0x007CD68C-0x007CD730
		public static void LogError(object message); // 0x007CD730-0x007CD7D4
		public static void LogReport(object message); // 0x007CC3EC-0x007CC4A0
		public static void LogInvalidTween(Tween t); // 0x007CD7D4-0x007CD830
		public static void LogNestedTween(Tween t); // 0x007CD830-0x007CD88C
		public static void LogNullTween(Tween t); // 0x007CD88C-0x007CD8E8
		public static void LogNonPathTween(Tween t); // 0x007CD8E8-0x007CD944
		public static void LogMissingMaterialProperty(string propertyName); // 0x007CD944-0x007CD9B0
		public static void LogRemoveActiveTweenError(string propertyName); // 0x007CD9B0-0x007CDA1C
		public static void SetLogPriority(LogBehaviour logBehaviour); // 0x007CDA1C-0x007CDAA8
	}

	[AddComponentMenu] // 0x001845B8-0x001845EC
	public class DOTweenComponent : MonoBehaviour, IDOTweenInit // TypeDefIndex: 2909
	{
		// Fields
		public int inspectorUpdater; // 0x0C
		private float _unscaledTime; // 0x10
		private float _unscaledDeltaTime; // 0x14
		private bool _duplicateToDestroy; // 0x18
	
		// Nested types
		[CompilerGenerated] // 0x00184B6C-0x00184B7C
		private sealed class <WaitForCompletion>d__14 : IEnumerator<object> // TypeDefIndex: 2910
		{
			// Fields
			private int <>1__state; // 0x08
			private object <>2__current; // 0x0C
			public Tween t; // 0x10
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x001859AC-0x001859BC */ get; } // 0x007CCF24-0x007CCF2C 
			object IEnumerator.Current { [DebuggerHidden] /* 0x001859CC-0x001859DC */ get; } // 0x007CCFB4-0x007CCFBC 
	
			// Constructors
			[DebuggerHidden] // 0x0018598C-0x0018599C
			public <WaitForCompletion>d__14(int <>1__state); // 0x007CC77C-0x007CC79C
	
			// Methods
			[DebuggerHidden] // 0x0018599C-0x001859AC
			void IDisposable.Dispose(); // 0x007CCEA4-0x007CCEA8
			private bool MoveNext(); // 0x007CCEA8-0x007CCF24
			[DebuggerHidden] // 0x001859BC-0x001859CC
			void IEnumerator.Reset(); // 0x007CCF2C-0x007CCFB4
		}
	
		[CompilerGenerated] // 0x00184B7C-0x00184B8C
		private sealed class <WaitForRewind>d__15 : IEnumerator<object> // TypeDefIndex: 2911
		{
			// Fields
			private int <>1__state; // 0x08
			private object <>2__current; // 0x0C
			public Tween t; // 0x10
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x001859FC-0x00185A0C */ get; } // 0x007CD3E8-0x007CD3F0 
			object IEnumerator.Current { [DebuggerHidden] /* 0x00185A1C-0x00185A2C */ get; } // 0x007CD478-0x007CD480 
	
			// Constructors
			[DebuggerHidden] // 0x001859DC-0x001859EC
			public <WaitForRewind>d__15(int <>1__state); // 0x007CC828-0x007CC848
	
			// Methods
			[DebuggerHidden] // 0x001859EC-0x001859FC
			void IDisposable.Dispose(); // 0x007CD314-0x007CD318
			private bool MoveNext(); // 0x007CD318-0x007CD3E8
			[DebuggerHidden] // 0x00185A0C-0x00185A1C
			void IEnumerator.Reset(); // 0x007CD3F0-0x007CD478
		}
	
		[CompilerGenerated] // 0x00184B8C-0x00184B9C
		private sealed class <WaitForKill>d__16 : IEnumerator<object> // TypeDefIndex: 2912
		{
			// Fields
			private int <>1__state; // 0x08
			private object <>2__current; // 0x0C
			public Tween t; // 0x10
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00185A4C-0x00185A5C */ get; } // 0x007CD130-0x007CD138 
			object IEnumerator.Current { [DebuggerHidden] /* 0x00185A6C-0x00185A7C */ get; } // 0x007CD1C0-0x007CD1C8 
	
			// Constructors
			[DebuggerHidden] // 0x00185A2C-0x00185A3C
			public <WaitForKill>d__16(int <>1__state); // 0x007CC8D4-0x007CC8F4
	
			// Methods
			[DebuggerHidden] // 0x00185A3C-0x00185A4C
			void IDisposable.Dispose(); // 0x007CD0D4-0x007CD0D8
			private bool MoveNext(); // 0x007CD0D8-0x007CD130
			[DebuggerHidden] // 0x00185A5C-0x00185A6C
			void IEnumerator.Reset(); // 0x007CD138-0x007CD1C0
		}
	
		[CompilerGenerated] // 0x00184B9C-0x00184BAC
		private sealed class <WaitForElapsedLoops>d__17 : IEnumerator<object> // TypeDefIndex: 2913
		{
			// Fields
			private int <>1__state; // 0x08
			private object <>2__current; // 0x0C
			public Tween t; // 0x10
			public int elapsedLoops; // 0x14
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00185A9C-0x00185AAC */ get; } // 0x007CD03C-0x007CD044 
			object IEnumerator.Current { [DebuggerHidden] /* 0x00185ABC-0x00185ACC */ get; } // 0x007CD0CC-0x007CD0D4 
	
			// Constructors
			[DebuggerHidden] // 0x00185A7C-0x00185A8C
			public <WaitForElapsedLoops>d__17(int <>1__state); // 0x007CC99C-0x007CC9BC
	
			// Methods
			[DebuggerHidden] // 0x00185A8C-0x00185A9C
			void IDisposable.Dispose(); // 0x007CCFBC-0x007CCFC0
			private bool MoveNext(); // 0x007CCFC0-0x007CD03C
			[DebuggerHidden] // 0x00185AAC-0x00185ABC
			void IEnumerator.Reset(); // 0x007CD044-0x007CD0CC
		}
	
		[CompilerGenerated] // 0x00184BAC-0x00184BBC
		private sealed class <WaitForPosition>d__18 : IEnumerator<object> // TypeDefIndex: 2914
		{
			// Fields
			private int <>1__state; // 0x08
			private object <>2__current; // 0x0C
			public Tween t; // 0x10
			public float position; // 0x14
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00185AEC-0x00185AFC */ get; } // 0x007CD27C-0x007CD284 
			object IEnumerator.Current { [DebuggerHidden] /* 0x00185B0C-0x00185B1C */ get; } // 0x007CD30C-0x007CD314 
	
			// Constructors
			[DebuggerHidden] // 0x00185ACC-0x00185ADC
			public <WaitForPosition>d__18(int <>1__state); // 0x007CCA70-0x007CCA90
	
			// Methods
			[DebuggerHidden] // 0x00185ADC-0x00185AEC
			void IDisposable.Dispose(); // 0x007CD1C8-0x007CD1CC
			private bool MoveNext(); // 0x007CD1CC-0x007CD27C
			[DebuggerHidden] // 0x00185AFC-0x00185B0C
			void IEnumerator.Reset(); // 0x007CD284-0x007CD30C
		}
	
		[CompilerGenerated] // 0x00184BBC-0x00184BCC
		private sealed class <WaitForStart>d__19 : IEnumerator<object> // TypeDefIndex: 2915
		{
			// Fields
			private int <>1__state; // 0x08
			private object <>2__current; // 0x0C
			public Tween t; // 0x10
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00185B3C-0x00185B4C */ get; } // 0x007CD500-0x007CD508 
			object IEnumerator.Current { [DebuggerHidden] /* 0x00185B5C-0x00185B6C */ get; } // 0x007CD590-0x007CD598 
	
			// Constructors
			[DebuggerHidden] // 0x00185B1C-0x00185B2C
			public <WaitForStart>d__19(int <>1__state); // 0x007CCB1C-0x007CCB3C
	
			// Methods
			[DebuggerHidden] // 0x00185B2C-0x00185B3C
			void IDisposable.Dispose(); // 0x007CD480-0x007CD484
			private bool MoveNext(); // 0x007CD484-0x007CD500
			[DebuggerHidden] // 0x00185B4C-0x00185B5C
			void IEnumerator.Reset(); // 0x007CD508-0x007CD590
		}
	
		// Constructors
		public DOTweenComponent(); // 0x007CCE9C-0x007CCEA4
	
		// Methods
		private void Awake(); // 0x007CACA0-0x007CACC4
		private void Start(); // 0x007CACC4-0x007CADE8
		private void Update(); // 0x007CADE8-0x007CB370
		private void LateUpdate(); // 0x007CB94C-0x007CBAE4
		private void FixedUpdate(); // 0x007CBAE4-0x007CBD08
		internal void ManualUpdate(float deltaTime, float unscaledDeltaTime); // 0x007CBD08-0x007CBE48
		private void OnDrawGizmos(); // 0x007CBE48-0x007CC020
		private void OnDestroy(); // 0x007CC020-0x007CC3EC
		private void OnApplicationQuit(); // 0x007CC4A0-0x007CC530
		public IDOTweenInit SetCapacity(int tweenersCapacity, int sequencesCapacity); // 0x007CC530-0x007CC5C0
		internal IEnumerator WaitForCompletion(Tween t); // 0x007CC6F0-0x007CC77C
		internal IEnumerator WaitForRewind(Tween t); // 0x007CC79C-0x007CC828
		internal IEnumerator WaitForKill(Tween t); // 0x007CC848-0x007CC8D4
		internal IEnumerator WaitForElapsedLoops(Tween t, int elapsedLoops); // 0x007CC8F4-0x007CC99C
		internal IEnumerator WaitForPosition(Tween t, float position); // 0x007CC9BC-0x007CCA70
		internal IEnumerator WaitForStart(Tween t); // 0x007CCA90-0x007CCB1C
		internal static void Create(); // 0x007CCB3C-0x007CCCE8
		internal static void DestroyInstance(); // 0x007CCCE8-0x007CCE9C
	}

	public class DOTweenSettings : ScriptableObject // TypeDefIndex: 2916
	{
		// Fields
		public const string AssetName = "DOTweenSettings"; // Metadata: 0x0021B690
		public bool useSafeMode; // 0x0C
		public float timeScale; // 0x10
		public bool useSmoothDeltaTime; // 0x14
		public float maxSmoothUnscaledTime; // 0x18
		public bool showUnityEditorReport; // 0x1C
		public LogBehaviour logBehaviour; // 0x20
		public bool drawGizmos; // 0x24
		public bool defaultRecyclable; // 0x25
		public AutoPlay defaultAutoPlay; // 0x28
		public UpdateType defaultUpdateType; // 0x2C
		public bool defaultTimeScaleIndependent; // 0x30
		public Ease defaultEaseType; // 0x34
		public float defaultEaseOvershootOrAmplitude; // 0x38
		public float defaultEasePeriod; // 0x3C
		public bool defaultAutoKill; // 0x40
		public LoopType defaultLoopType; // 0x44
		public SettingsLocation storeSettingsLocation; // 0x48
	
		// Nested types
		public enum SettingsLocation // TypeDefIndex: 2917
		{
			AssetsDirectory = 0,
			DOTweenDirectory = 1,
			DemigiantDirectory = 2
		}
	
		// Constructors
		public DOTweenSettings(); // 0x007CD598-0x007CD5E8
	}

	public static class Extensions // TypeDefIndex: 2918
	{
		// Extension methods
		internal static T SetSpecialStartupMode<T>(this T t, SpecialStartupMode mode)
			where T : Tween;
		internal static TweenerCore<T1, T2, TPlugOptions> NoFrom<T1, T2, TPlugOptions>(this TweenerCore<T1, T2, TPlugOptions> t)
			where TPlugOptions : struct, IPlugOptions;
		internal static TweenerCore<T1, T2, TPlugOptions> Blendable<T1, T2, TPlugOptions>(this TweenerCore<T1, T2, TPlugOptions> t)
			where TPlugOptions : struct, IPlugOptions;
	}

	internal class SequenceCallback : ABSSequentiable // TypeDefIndex: 2919
	{
		// Constructors
		public SequenceCallback(float sequencedPosition, TweenCallback callback); // 0x007D2730-0x007D2760
	}

	internal static class TweenManager // TypeDefIndex: 2920
	{
		// Fields
		private const int _DefaultMaxTweeners = 200; // Metadata: 0x0021B6C1
		private const int _DefaultMaxSequences = 50; // Metadata: 0x0021B6C5
		private const string _MaxTweensReached = "Max Tweens reached: capacity has automatically been increased from #0 to #1. Use DOTween.SetTweensCapacity to set it manually at startup"; // Metadata: 0x0021B6C9
		internal static int maxActive; // 0x00
		internal static int maxTweeners; // 0x04
		internal static int maxSequences; // 0x08
		internal static bool hasActiveTweens; // 0x0C
		internal static bool hasActiveDefaultTweens; // 0x0D
		internal static bool hasActiveLateTweens; // 0x0E
		internal static bool hasActiveFixedTweens; // 0x0F
		internal static bool hasActiveManualTweens; // 0x10
		internal static int totActiveTweens; // 0x14
		internal static int totActiveDefaultTweens; // 0x18
		internal static int totActiveLateTweens; // 0x1C
		internal static int totActiveFixedTweens; // 0x20
		internal static int totActiveManualTweens; // 0x24
		internal static int totActiveTweeners; // 0x28
		internal static int totActiveSequences; // 0x2C
		internal static int totPooledTweeners; // 0x30
		internal static int totPooledSequences; // 0x34
		internal static int totTweeners; // 0x38
		internal static int totSequences; // 0x3C
		internal static bool isUpdateLoop; // 0x40
		internal static Tween[] _activeTweens; // 0x44
		private static Tween[] _pooledTweeners; // 0x48
		private static readonly Stack<Tween> _PooledSequences; // 0x4C
		private static readonly List<Tween> _KillList; // 0x50
		private static int _maxActiveLookupId; // 0x54
		private static bool _requiresActiveReorganization; // 0x58
		private static int _reorganizeFromId; // 0x5C
		private static int _minPooledTweenerId; // 0x60
		private static int _maxPooledTweenerId; // 0x64
		private static bool _despawnAllCalledFromUpdateLoopCallback; // 0x68
	
		// Nested types
		internal enum CapacityIncreaseMode // TypeDefIndex: 2921
		{
			TweenersAndSequences = 0,
			TweenersOnly = 1,
			SequencesOnly = 2
		}
	
		// Constructors
		static TweenManager(); // 0x007D76BC-0x007D7818
	
		// Methods
		internal static TweenerCore<T1, T2, TPlugOptions> GetTweener<T1, T2, TPlugOptions>()
			where TPlugOptions : struct, IPlugOptions;
		internal static Sequence GetSequence(); // 0x007D2760-0x007D2BA8
		internal static void SetUpdateType(Tween t, UpdateType updateType, bool isIndependentUpdate); // 0x007D33A0-0x007D3724
		internal static void AddActiveTweenToSequence(Tween t); // 0x007D3724-0x007D37A4
		internal static int DespawnAll(); // 0x007D3EF8-0x007D41A4
		internal static void Despawn(Tween t, bool modifyActiveLists = true /* Metadata: 0x0021B6AF */); // 0x007D41A4-0x007D4AC4
		internal static void PurgeAll(); // 0x007D4B30-0x007D4D3C
		internal static void PurgePools(); // 0x007D4D3C-0x007D4E6C
		internal static void ResetCapacities(); // 0x007D4E6C-0x007D4EEC
		internal static void SetCapacities(int tweenersCapacity, int sequencesCapacity); // 0x007CC5C0-0x007CC6F0
		internal static int Validate(); // 0x007D4EEC-0x007D5158
		internal static void Update(UpdateType updateType, float deltaTime, float independentTime); // 0x007CB370-0x007CB94C
		internal static int FilteredOperation(OperationType operationType, FilterType filterType, object id, bool optionalBool, float optionalFloat, object optionalObj = null, object[] optionalArray = null); // 0x007D56F8-0x007D619C
		internal static bool Complete(Tween t, bool modifyActiveLists = true /* Metadata: 0x0021B6B0 */, UpdateMode updateMode = UpdateMode.Goto /* Metadata: 0x0021B6B1 */); // 0x007D619C-0x007D62D8
		internal static bool Flip(Tween t); // 0x007D62D8-0x007D631C
		internal static void ForceInit(Tween t, bool isSequenced = false /* Metadata: 0x0021B6B5 */); // 0x007D6B58-0x007D6C60
		internal static bool Goto(Tween t, float to, bool andPlay = false /* Metadata: 0x0021B6B6 */, UpdateMode updateMode = UpdateMode.Goto /* Metadata: 0x0021B6B7 */); // 0x007D631C-0x007D64D8
		internal static bool Pause(Tween t); // 0x007D64D8-0x007D6530
		internal static bool Play(Tween t); // 0x007D6530-0x007D65D0
		internal static bool PlayBackwards(Tween t); // 0x007D65D0-0x007D66B0
		internal static bool PlayForward(Tween t); // 0x007D66B0-0x007D6790
		internal static bool Restart(Tween t, bool includeDelay = true /* Metadata: 0x0021B6BB */, float changeDelayTo = -1f /* Metadata: 0x0021B6BC */); // 0x007D6790-0x007D68A0
		internal static bool Rewind(Tween t, bool includeDelay = true /* Metadata: 0x0021B6C0 */); // 0x007D68A0-0x007D69CC
		internal static bool SmoothRewind(Tween t); // 0x007D69CC-0x007D6A94
		internal static bool TogglePause(Tween t); // 0x007D6A94-0x007D6B58
		internal static int TotalPooledTweens(); // 0x007D6C60-0x007D6CF4
		internal static int TotalPlayingTweens(); // 0x007D6CF4-0x007D6EC4
		internal static List<Tween> GetActiveTweens(bool playing); // 0x007D6EC4-0x007D7160
		internal static List<Tween> GetTweensById(object id, bool playingOnly); // 0x007D7160-0x007D7410
		internal static List<Tween> GetTweensByTarget(object target, bool playingOnly); // 0x007D7410-0x007D76BC
		private static void MarkForKilling(Tween t); // 0x007D5530-0x007D5604
		private static void AddActiveTween(Tween t); // 0x007D2BA8-0x007D3000
		private static void ReorganizeActiveTweens(); // 0x007D5158-0x007D5530
		private static void DespawnActiveTweens(List<Tween> tweens); // 0x007D5604-0x007D56F8
		private static void RemoveActiveTween(Tween t); // 0x007D37A4-0x007D3EF8
		private static void ClearTweenArray(Tween[] tweens); // 0x007D4AC4-0x007D4B30
		private static void IncreaseCapacities(CapacityIncreaseMode increaseMode); // 0x007D3000-0x007D33A0
	}

	internal static class Utils // TypeDefIndex: 2922
	{
		// Methods
		internal static Vector3 Vector3FromAngle(float degrees, float magnitude); // 0x007D7818-0x007D7904
		internal static float Angle2D(Vector3 from, Vector3 to); // 0x007D7904-0x007D7A94
		internal static bool Vector3AreApproximatelyEqual(Vector3 a, Vector3 b); // 0x007D7A94-0x007D7BC0
	}

	public class TweenerCore<T1, T2, TPlugOptions> : Tweener // TypeDefIndex: 2923
		where TPlugOptions : struct, IPlugOptions
	{
		// Fields
		public T2 startValue;
		public T2 endValue;
		public T2 changeValue;
		public TPlugOptions plugOptions;
		public DOGetter<T1> getter;
		public DOSetter<T1> setter;
		internal ABSTweenPlugin<T1, T2, TPlugOptions> tweenPlugin;
		private const string _TxtCantChangeSequencedValues = "You cannot change the values of a tween contained inside a Sequence"; // Metadata: 0x0021B76E
	
		// Constructors
		internal TweenerCore();
	
		// Methods
		public override Tweener ChangeStartValue(object newStartValue, float newDuration = -1f /* Metadata: 0x0021B761 */);
		public override Tweener ChangeEndValue(object newEndValue, bool snapStartValue);
		public override Tweener ChangeEndValue(object newEndValue, float newDuration = -1f /* Metadata: 0x0021B765 */, bool snapStartValue = false /* Metadata: 0x0021B769 */);
		public override Tweener ChangeValues(object newStartValue, object newEndValue, float newDuration = -1f /* Metadata: 0x0021B76A */);
		internal override Tweener SetFrom(bool relative);
		internal sealed override void Reset();
		internal override bool Validate();
		internal override float UpdateDelay(float elapsed);
		internal override bool Startup();
		internal override bool ApplyTween(float prevPosition, int prevCompletedLoops, int newCompletedSteps, bool useInversePosition, UpdateMode updateMode, UpdateNotice updateNotice);
	}
}

namespace DG.Tweening.Core.Enums
{
	internal enum FilterType // TypeDefIndex: 2924
	{
		All = 0,
		TargetOrId = 1,
		TargetAndId = 2,
		AllExceptTargetsOrIds = 3,
		DOGetter = 4
	}

	internal enum OperationType // TypeDefIndex: 2925
	{
		Complete = 0,
		Despawn = 1,
		Flip = 2,
		Goto = 3,
		Pause = 4,
		Play = 5,
		PlayForward = 6,
		PlayBackwards = 7,
		Rewind = 8,
		SmoothRewind = 9,
		Restart = 10,
		TogglePause = 11,
		IsTweening = 12
	}

	internal enum SpecialStartupMode // TypeDefIndex: 2926
	{
		None = 0,
		SetLookAt = 1,
		SetShake = 2,
		SetPunch = 3,
		SetCameraShakePosition = 4
	}

	public enum UpdateNotice // TypeDefIndex: 2927
	{
		None = 0,
		RewindStep = 1
	}

	internal enum UpdateMode // TypeDefIndex: 2928
	{
		Update = 0,
		Goto = 1,
		IgnoreOnUpdate = 2
	}
}

namespace DG.Tweening.Core.Easing
{
	public static class Bounce // TypeDefIndex: 2929
	{
		// Methods
		public static float EaseIn(float time, float duration, float unusedOvershootOrAmplitude, float unusedPeriod); // 0x007CDAA8-0x007CDAE0
		public static float EaseOut(float time, float duration, float unusedOvershootOrAmplitude, float unusedPeriod); // 0x007CDAE0-0x007CDB9C
		public static float EaseInOut(float time, float duration, float unusedOvershootOrAmplitude, float unusedPeriod); // 0x007CDB9C-0x007CDC14
	}

	public static class EaseManager // TypeDefIndex: 2930
	{
		// Fields
		private const float _PiOver2 = 1.5707964f; // Metadata: 0x0021B825
		private const float _TwoPi = 6.2831855f; // Metadata: 0x0021B829
	
		// Nested types
		[Serializable]
		[CompilerGenerated] // 0x00184BCC-0x00184BDC
		private sealed class <>c // TypeDefIndex: 2931
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static EaseFunction <>9__4_0; // 0x04
			public static EaseFunction <>9__4_1; // 0x08
			public static EaseFunction <>9__4_2; // 0x0C
			public static EaseFunction <>9__4_3; // 0x10
			public static EaseFunction <>9__4_4; // 0x14
			public static EaseFunction <>9__4_5; // 0x18
			public static EaseFunction <>9__4_6; // 0x1C
			public static EaseFunction <>9__4_7; // 0x20
			public static EaseFunction <>9__4_8; // 0x24
			public static EaseFunction <>9__4_9; // 0x28
			public static EaseFunction <>9__4_10; // 0x2C
			public static EaseFunction <>9__4_11; // 0x30
			public static EaseFunction <>9__4_12; // 0x34
			public static EaseFunction <>9__4_13; // 0x38
			public static EaseFunction <>9__4_14; // 0x3C
			public static EaseFunction <>9__4_15; // 0x40
			public static EaseFunction <>9__4_16; // 0x44
			public static EaseFunction <>9__4_17; // 0x48
			public static EaseFunction <>9__4_18; // 0x4C
			public static EaseFunction <>9__4_19; // 0x50
			public static EaseFunction <>9__4_20; // 0x54
			public static EaseFunction <>9__4_21; // 0x58
			public static EaseFunction <>9__4_22; // 0x5C
			public static EaseFunction <>9__4_23; // 0x60
			public static EaseFunction <>9__4_24; // 0x64
			public static EaseFunction <>9__4_25; // 0x68
			public static EaseFunction <>9__4_26; // 0x6C
			public static EaseFunction <>9__4_27; // 0x70
			public static EaseFunction <>9__4_28; // 0x74
			public static EaseFunction <>9__4_29; // 0x78
			public static EaseFunction <>9__4_30; // 0x7C
			public static EaseFunction <>9__4_31; // 0x80
			public static EaseFunction <>9__4_32; // 0x84
			public static EaseFunction <>9__4_33; // 0x88
			public static EaseFunction <>9__4_34; // 0x8C
			public static EaseFunction <>9__4_35; // 0x90
	
			// Constructors
			static <>c(); // 0x007D12F8-0x007D136C
			public <>c(); // 0x007D136C-0x007D1374
	
			// Methods
			internal float <ToEaseFunction>b__4_0(float time, float duration, float overshootOrAmplitude, float period); // 0x007D1374-0x007D1388
			internal float <ToEaseFunction>b__4_1(float time, float duration, float overshootOrAmplitude, float period); // 0x007D1388-0x007D1444
			internal float <ToEaseFunction>b__4_2(float time, float duration, float overshootOrAmplitude, float period); // 0x007D1444-0x007D14F8
			internal float <ToEaseFunction>b__4_3(float time, float duration, float overshootOrAmplitude, float period); // 0x007D14F8-0x007D15BC
			internal float <ToEaseFunction>b__4_4(float time, float duration, float overshootOrAmplitude, float period); // 0x007D15BC-0x007D15D4
			internal float <ToEaseFunction>b__4_5(float time, float duration, float overshootOrAmplitude, float period); // 0x007D15D4-0x007D15F8
			internal float <ToEaseFunction>b__4_6(float time, float duration, float overshootOrAmplitude, float period); // 0x007D15F8-0x007D1650
			internal float <ToEaseFunction>b__4_7(float time, float duration, float overshootOrAmplitude, float period); // 0x007D1650-0x007D166C
			internal float <ToEaseFunction>b__4_8(float time, float duration, float overshootOrAmplitude, float period); // 0x007D166C-0x007D1698
			internal float <ToEaseFunction>b__4_9(float time, float duration, float overshootOrAmplitude, float period); // 0x007D1698-0x007D16EC
			internal float <ToEaseFunction>b__4_10(float time, float duration, float overshootOrAmplitude, float period); // 0x007D16EC-0x007D170C
			internal float <ToEaseFunction>b__4_11(float time, float duration, float overshootOrAmplitude, float period); // 0x007D170C-0x007D173C
			internal float <ToEaseFunction>b__4_12(float time, float duration, float overshootOrAmplitude, float period); // 0x007D173C-0x007D179C
			internal float <ToEaseFunction>b__4_13(float time, float duration, float overshootOrAmplitude, float period); // 0x007D179C-0x007D17C0
			internal float <ToEaseFunction>b__4_14(float time, float duration, float overshootOrAmplitude, float period); // 0x007D17C0-0x007D17F4
			internal float <ToEaseFunction>b__4_15(float time, float duration, float overshootOrAmplitude, float period); // 0x007D17F4-0x007D1858
			internal float <ToEaseFunction>b__4_16(float time, float duration, float overshootOrAmplitude, float period); // 0x007D1858-0x007D1924
			internal float <ToEaseFunction>b__4_17(float time, float duration, float overshootOrAmplitude, float period); // 0x007D1924-0x007D19E8
			internal float <ToEaseFunction>b__4_18(float time, float duration, float overshootOrAmplitude, float period); // 0x007D19E8-0x007D1B40
			internal float <ToEaseFunction>b__4_19(float time, float duration, float overshootOrAmplitude, float period); // 0x007D1B40-0x007D1C00
			internal float <ToEaseFunction>b__4_20(float time, float duration, float overshootOrAmplitude, float period); // 0x007D1C00-0x007D1CBC
			internal float <ToEaseFunction>b__4_21(float time, float duration, float overshootOrAmplitude, float period); // 0x007D1CBC-0x007D1DD4
			internal float <ToEaseFunction>b__4_22(float time, float duration, float overshootOrAmplitude, float period); // 0x007D1DD4-0x007D1F80
			internal float <ToEaseFunction>b__4_23(float time, float duration, float overshootOrAmplitude, float period); // 0x007D1F80-0x007D2128
			internal float <ToEaseFunction>b__4_24(float time, float duration, float overshootOrAmplitude, float period); // 0x007D2128-0x007D2374
			internal float <ToEaseFunction>b__4_25(float time, float duration, float overshootOrAmplitude, float period); // 0x007D2374-0x007D23A4
			internal float <ToEaseFunction>b__4_26(float time, float duration, float overshootOrAmplitude, float period); // 0x007D23A4-0x007D23E0
			internal float <ToEaseFunction>b__4_27(float time, float duration, float overshootOrAmplitude, float period); // 0x007D23E0-0x007D2460
			internal float <ToEaseFunction>b__4_28(float time, float duration, float overshootOrAmplitude, float period); // 0x007D2460-0x007D249C
			internal float <ToEaseFunction>b__4_29(float time, float duration, float overshootOrAmplitude, float period); // 0x007D249C-0x007D24BC
			internal float <ToEaseFunction>b__4_30(float time, float duration, float overshootOrAmplitude, float period); // 0x007D24BC-0x007D24DC
			internal float <ToEaseFunction>b__4_31(float time, float duration, float overshootOrAmplitude, float period); // 0x007D24DC-0x007D2508
			internal float <ToEaseFunction>b__4_32(float time, float duration, float overshootOrAmplitude, float period); // 0x007D2508-0x007D2534
			internal float <ToEaseFunction>b__4_33(float time, float duration, float overshootOrAmplitude, float period); // 0x007D2534-0x007D2560
			internal float <ToEaseFunction>b__4_34(float time, float duration, float overshootOrAmplitude, float period); // 0x007D2560-0x007D258C
			internal float <ToEaseFunction>b__4_35(float time, float duration, float overshootOrAmplitude, float period); // 0x007D258C-0x007D25B0
		}
	
		// Methods
		public static float Evaluate(Tween t, float time, float duration, float overshootOrAmplitude, float period); // 0x007CDD18-0x007CDD8C
		public static float Evaluate(Ease easeType, EaseFunction customEase, float time, float duration, float overshootOrAmplitude, float period); // 0x007CDD8C-0x007CEA70
		public static EaseFunction ToEaseFunction(Ease ease); // 0x007CF37C-0x007D12D0
		internal static bool IsFlashEase(Ease ease); // 0x007D12E4-0x007D12F8
	}

	public class EaseCurve // TypeDefIndex: 2932
	{
		// Fields
		private readonly AnimationCurve _animCurve; // 0x08
	
		// Constructors
		public EaseCurve(AnimationCurve animCurve); // 0x007CDC14-0x007CDC34
	
		// Methods
		public float Evaluate(float time, float duration, float unusedOvershoot, float unusedPeriod); // 0x007CDC34-0x007CDD18
	}

	public static class Flash // TypeDefIndex: 2933
	{
		// Methods
		public static float Ease(float time, float duration, float overshootOrAmplitude, float period); // 0x007CEF1C-0x007CF020
		public static float EaseIn(float time, float duration, float overshootOrAmplitude, float period); // 0x007CF020-0x007CF128
		public static float EaseOut(float time, float duration, float overshootOrAmplitude, float period); // 0x007CF128-0x007CF238
		public static float EaseInOut(float time, float duration, float overshootOrAmplitude, float period); // 0x007CF238-0x007CF37C
		private static float WeightedEase(float overshootOrAmplitude, float period, int stepIndex, float stepDuration, float dir, float res); // 0x007D25B0-0x007D2730
	}
}

[CompilerGenerated] // 0x001845FC-0x0018460C
internal sealed class <PrivateImplementationDetails> // TypeDefIndex: 2934
{
	// Fields
	internal static readonly __StaticArrayInitTypeSize=50 6F98278EFCD257898AD01BE39D1D0AEFB78FC551; // 0x00 // Starts with: 41 00 42 00 43 00 44 00 - Metadata: 0x0021B82D
	internal static readonly __StaticArrayInitTypeSize=20 8C4C6C4E493EC2BEEF5F6F6A9C4472C13BED42E8; // 0x32 // Starts with: 31 00 32 00 33 00 34 00 - Metadata: 0x0021B85F
	internal static readonly __StaticArrayInitTypeSize=120 9DC5F4D0A1418B4EC71B22D21E93D134922FA735; // 0x46 // Starts with: 41 00 42 00 43 00 44 00 - Metadata: 0x0021B873
	internal static readonly __StaticArrayInitTypeSize=50 FD0BD55CDDDFD0B323012A45F83437763AF58952; // 0xBE // Starts with: 61 00 62 00 63 00 64 00 - Metadata: 0x0021B8EB

	// Nested types
	private struct __StaticArrayInitTypeSize=20 // TypeDefIndex: 2935
	{
	}

	private struct __StaticArrayInitTypeSize=50 // TypeDefIndex: 2936
	{
	}

	private struct __StaticArrayInitTypeSize=120 // TypeDefIndex: 2937
	{
	}
}

namespace Facebook.MiniJSON
{
	public static class Json // TypeDefIndex: 2939
	{
		// Fields
		private static NumberFormatInfo numberFormat; // 0x00
	
		// Nested types
		private sealed class Parser : IDisposable // TypeDefIndex: 2940
		{
			// Fields
			private StringReader json; // 0x08
	
			// Properties
			private char PeekChar { get; } // 0x004A3944-0x004A39F4 
			private char NextChar { get; } // 0x004A39F4-0x004A3AA4 
			private string NextWord { get; } // 0x004A3AA4-0x004A3BE0 
			private TOKEN NextToken { get; } // 0x004A3BE0-0x004A3E5C 
	
			// Nested types
			private enum TOKEN // TypeDefIndex: 2941
			{
				NONE = 0,
				CURLY_OPEN = 1,
				CURLY_CLOSE = 2,
				SQUARED_OPEN = 3,
				SQUARED_CLOSE = 4,
				COLON = 5,
				COMMA = 6,
				STRING = 7,
				NUMBER = 8,
				TRUE = 9,
				FALSE = 10,
				NULL = 11
			}
	
			// Constructors
			private Parser(string jsonString); // 0x004A38C0-0x004A3944
	
			// Methods
			public static object Parse(string jsonString); // 0x004A35D4-0x004A3740
			public void Dispose(); // 0x004A3F74-0x004A3FAC
			private Dictionary<string, object> ParseObject(); // 0x004A3FAC-0x004A4110
			private List<object> ParseArray(); // 0x004A445C-0x004A4568
			private object ParseValue(); // 0x004A3F54-0x004A3F74
			private object ParseByToken(TOKEN token); // 0x004A4568-0x004A4678
			private string ParseString(); // 0x004A4110-0x004A445C
			private object ParseNumber(); // 0x004A4678-0x004A47F8
			private void EatWhitespace(); // 0x004A3E5C-0x004A3F54
		}
	
		private sealed class Serializer // TypeDefIndex: 2942
		{
			// Fields
			private StringBuilder builder; // 0x08
	
			// Constructors
			private Serializer(); // 0x004A47F8-0x004A4874
	
			// Methods
			public static string Serialize(object obj); // 0x004A3744-0x004A3808
			private void SerializeValue(object value); // 0x004A4874-0x004A4A40
			private void SerializeObject(IDictionary obj); // 0x004A5184-0x004A56A4
			private void SerializeArray(IList array); // 0x004A4DFC-0x004A5184
			private void SerializeString(string str); // 0x004A4A40-0x004A4DFC
			private void SerializeOther(object value); // 0x004A56A4-0x004A5858
		}
	
		// Constructors
		static Json(); // 0x004A3808-0x004A38C0
	
		// Methods
		public static object Deserialize(string json); // 0x004A35C4-0x004A35D4
		public static string Serialize(object obj); // 0x004A3740-0x004A3744
	}
}

namespace Facebook.Unity
{
	public class AccessToken // TypeDefIndex: 2943
	{
		// Fields
		[CompilerGenerated] // 0x00185F34-0x00185F44
		private static AccessToken <CurrentAccessToken>k__BackingField; // 0x00
		[CompilerGenerated] // 0x00185F44-0x00185F54
		private string <TokenString>k__BackingField; // 0x08
		[CompilerGenerated] // 0x00185F54-0x00185F64
		private DateTime <ExpirationTime>k__BackingField; // 0x10
		[CompilerGenerated] // 0x00185F64-0x00185F74
		private IEnumerable<string> <Permissions>k__BackingField; // 0x18
		[CompilerGenerated] // 0x00185F74-0x00185F84
		private string <UserId>k__BackingField; // 0x1C
		[CompilerGenerated] // 0x00185F84-0x00185F94
		private DateTime? <LastRefresh>k__BackingField; // 0x20
	
		// Properties
		public static AccessToken CurrentAccessToken { [CompilerGenerated] /* 0x00186324-0x00186334 */ get; [CompilerGenerated] /* 0x00186334-0x00186344 */ internal set; } // 0x004A5AEC-0x004A5B50 0x004A5B50-0x004A5BB4
		public string TokenString { [CompilerGenerated] /* 0x00186344-0x00186354 */ get; [CompilerGenerated] /* 0x00186354-0x00186364 */ private set; } // 0x004A5BB4-0x004A5BBC 0x004A5AAC-0x004A5AB4
		public DateTime ExpirationTime { [CompilerGenerated] /* 0x00186364-0x00186374 */ get; [CompilerGenerated] /* 0x00186374-0x00186384 */ private set; } // 0x004A5BBC-0x004A5BC8 0x004A5AB4-0x004A5AC4
		public IEnumerable<string> Permissions { [CompilerGenerated] /* 0x00186384-0x00186394 */ get; [CompilerGenerated] /* 0x00186394-0x001863A4 */ private set; } // 0x004A5BC8-0x004A5BD0 0x004A5AC4-0x004A5ACC
		public string UserId { [CompilerGenerated] /* 0x001863A4-0x001863B4 */ get; [CompilerGenerated] /* 0x001863B4-0x001863C4 */ private set; } // 0x004A5BD0-0x004A5BD8 0x004A5ACC-0x004A5AD4
		public DateTime? LastRefresh { [CompilerGenerated] /* 0x001863C4-0x001863D4 */ get; [CompilerGenerated] /* 0x001863D4-0x001863E4 */ private set; } // 0x004A5BD8-0x004A5BE8 0x004A5AD4-0x004A5AEC
	
		// Constructors
		internal AccessToken(string tokenString, string userId, DateTime expirationTime, IEnumerable<string> permissions, DateTime? lastRefresh); // 0x004A5858-0x004A5AAC
	
		// Methods
		public override string ToString(); // 0x004A5BE8-0x004A5E14
		internal string ToJson(); // 0x004A64B0-0x004A67E0
	}

	internal class CallbackManager // TypeDefIndex: 2944
	{
		// Fields
		private IDictionary<string, object> facebookDelegates; // 0x08
		private int nextAsyncId; // 0x0C
	
		// Constructors
		public CallbackManager(); // 0x004A91F4-0x004A9280
	
		// Methods
		public string AddFacebookDelegate<T>(FacebookDelegate<T> callback)
			where T : IResult;
		public void OnFacebookResponse(IInternalResult result); // 0x004A8C9C-0x004A8FB4
		private static void CallCallback(object callback, IResult result); // 0x004A8FB4-0x004A91F4
		private static bool TryCallCallback<T>(object callback, IResult result)
			where T : IResult;
	}

	internal class ComponentFactory // TypeDefIndex: 2945
	{
		// Fields
		private static GameObject facebookGameObject; // 0x00
	
		// Properties
		private static GameObject FacebookGameObject { get; } // 0x004B374C-0x004B3854 
	
		// Nested types
		internal enum IfNotExist // TypeDefIndex: 2946
		{
			AddNew = 0,
			ReturnNull = 1
		}
	
		// Methods
		public static T GetComponent<T>(IfNotExist ifNotExist = IfNotExist.AddNew /* Metadata: 0x0021B94D */)
			where T : MonoBehaviour;
		public static T AddComponent<T>()
			where T : MonoBehaviour;
	}

	internal static class Constants // TypeDefIndex: 2947
	{
		// Fields
		private static FacebookUnityPlatform? currentPlatform; // 0x00
	
		// Properties
		public static Uri GraphUrl { get; } // 0x004B3854-0x004B3A28 
		public static string GraphApiUserAgent { get; } // 0x004A882C-0x004A8A60 
		public static bool IsMobile { get; } // 0x004B3C80-0x004B3CB4 
		public static bool IsEditor { get; } // 0x004B3CB4-0x004B3CBC 
		public static bool IsWeb { get; } // 0x004B3CBC-0x004B3CDC 
		public static bool IsGameroom { get; } // 0x004B3CDC-0x004B3CFC 
		public static string UnitySDKUserAgentSuffixLegacy { get; } // 0x004B3CFC-0x004B3E64 
		public static string UnitySDKUserAgent { get; } // 0x004B3BD8-0x004B3C80 
		public static bool DebugMode { get; } // 0x004B3E64-0x004B3EE0 
		public static FacebookUnityPlatform CurrentPlatform { get; } // 0x004A8704-0x004A882C 
	
		// Methods
		private static FacebookUnityPlatform GetCurrentPlatform(); // 0x004B3EE0-0x004B3F34
	}

	public sealed class FB : ScriptableObject // TypeDefIndex: 2948
	{
		// Fields
		private const string DefaultJSSDKLocale = "en_US"; // Metadata: 0x0021B99B
		private static IFacebook facebook; // 0x00
		private static bool isInitCalled; // 0x04
		private static string facebookDomain; // 0x08
		private static string graphApiVersion; // 0x0C
		[CompilerGenerated] // 0x00185F94-0x00185FA4
		private static string <AppId>k__BackingField; // 0x10
		[CompilerGenerated] // 0x00185FA4-0x00185FB4
		private static string <ClientToken>k__BackingField; // 0x14
		[CompilerGenerated] // 0x00185FB4-0x00185FC4
		private static OnDLLLoaded <OnDLLLoadedDelegate>k__BackingField; // 0x18
	
		// Properties
		public static string AppId { [CompilerGenerated] /* 0x001863E4-0x001863F4 */ get; [CompilerGenerated] /* 0x001863F4-0x00186404 */ private set; } // 0x004B439C-0x004B4428 0x004B868C-0x004B871C
		public static string ClientToken { [CompilerGenerated] /* 0x00186404-0x00186414 */ get; [CompilerGenerated] /* 0x00186414-0x00186424 */ private set; } // 0x004B871C-0x004B87A8 0x004B87A8-0x004B8838
		public static string GraphApiVersion { get; set; } // 0x004AA2D8-0x004AA364 0x004B8838-0x004B88C8
		public static bool IsLoggedIn { get; } // 0x004B5874-0x004B59BC 
		public static bool IsInitialized { get; } // 0x004B88C8-0x004B8A2C 
		public static bool LimitAppEventUsage { get; set; } // 0x004B8A2C-0x004B8B90 0x004B8B90-0x004B8CF8
		internal static IFacebook FacebookImpl { get; set; } // 0x004B3AB4-0x004B3BD8 0x004B8CF8-0x004B8D88
		internal static string FacebookDomain { get; set; } // 0x004B3A28-0x004B3AB4 0x004B8D88-0x004B8E18
		private static OnDLLLoaded OnDLLLoadedDelegate { [CompilerGenerated] /* 0x00186424-0x00186434 */ get; [CompilerGenerated] /* 0x00186434-0x00186444 */ set; } // 0x004B8E18-0x004B8EA4 0x004B8EA4-0x004B8F34
	
		// Nested types
		private delegate void OnDLLLoaded(); // TypeDefIndex: 2949; 0x004BBBD0-0x004BC00C
	
		public sealed class Canvas // TypeDefIndex: 2950
		{
			// Properties
			private static IPayFacebook FacebookPayImpl { get; } // 0x004BB884-0x004BB96C 
	
			// Methods
			public static void Pay(string product, string action = "purchaseitem" /* Metadata: 0x0021B9A4 */, int quantity = 1 /* Metadata: 0x0021B9B4 */, int? quantityMin = default, int? quantityMax = default, string requestId = null, string pricepointId = null, string testCurrency = null, FacebookDelegate<IPayResult> callback = null); // 0x004BB96C-0x004BBAB8
		}
	
		public sealed class Mobile // TypeDefIndex: 2951
		{
			// Properties
			public static ShareDialogMode ShareDialogMode { set; } // 0x004BC00C-0x004BC0EC
			private static IMobileFacebook MobileFacebookImpl { get; } // 0x004BC0EC-0x004BC1D4 
	
			// Methods
			public static void FetchDeferredAppLinkData(FacebookDelegate<IAppLinkResult> callback = null); // 0x004BC1D4-0x004BC2C0
			public static void RefreshCurrentAccessToken(FacebookDelegate<IAccessTokenRefreshResult> callback = null); // 0x004BC2C0-0x004BC3AC
			public static bool IsImplicitPurchaseLoggingEnabled(); // 0x004B1EBC-0x004B1F94
		}
	
		internal abstract class CompiledFacebookLoader : MonoBehaviour // TypeDefIndex: 2952
		{
			// Properties
			protected abstract FacebookGameObject FBGameObject { get; }
	
			// Constructors
			protected CompiledFacebookLoader(); // 0x004AEE80-0x004AEE88
	
			// Methods
			public void Start(); // 0x004BBAB8-0x004BBBD0
		}
	
		[CompilerGenerated] // 0x00185E84-0x00185E94
		private sealed class <>c__DisplayClass35_0 // TypeDefIndex: 2953
		{
			// Fields
			public InitDelegate onInitComplete; // 0x08
			public string appId; // 0x0C
			public bool cookie; // 0x10
			public bool logging; // 0x11
			public bool status; // 0x12
			public bool xfbml; // 0x13
			public string authResponse; // 0x14
			public bool frictionlessRequests; // 0x18
			public string javascriptSDKLocale; // 0x1C
			public HideUnityDelegate onHideUnity; // 0x20
	
			// Constructors
			public <>c__DisplayClass35_0(); // 0x004B9714-0x004B971C
	
			// Methods
			internal void <Init>b__0(); // 0x004BAB68-0x004BAD28
			internal void <Init>b__1(); // 0x004BAD28-0x004BAF98
			internal void <Init>b__2(); // 0x004BAF98-0x004BB1B8
			internal void <Init>b__3(); // 0x004BB2C8-0x004BB464
			internal void <Init>b__4(); // 0x004BB5BC-0x004BB758
		}
	
		// Constructors
		public FB(); // 0x004BAAC8-0x004BAAD0
		static FB(); // 0x004BAAD0-0x004BAB68
	
		// Methods
		public static void Init(InitDelegate onInitComplete = null, HideUnityDelegate onHideUnity = null, string authResponse = null); // 0x004B8F34-0x004B9080
		public static void Init(string appId, string clientToken = null, bool cookie = true /* Metadata: 0x0021B959 */, bool logging = true /* Metadata: 0x0021B95A */, bool status = true /* Metadata: 0x0021B95B */, bool xfbml = false /* Metadata: 0x0021B95C */, bool frictionlessRequests = true /* Metadata: 0x0021B95D */, string authResponse = null, string javascriptSDKLocale = "en_US" /* Metadata: 0x0021B95E */, HideUnityDelegate onHideUnity = null, InitDelegate onInitComplete = null); // 0x004B9080-0x004B9714
		public static void LogInWithPublishPermissions(IEnumerable<string> permissions = null, FacebookDelegate<ILoginResult> callback = null); // 0x004B9730-0x004B9844
		public static void LogInWithReadPermissions(IEnumerable<string> permissions = null, FacebookDelegate<ILoginResult> callback = null); // 0x004B9844-0x004B9958
		public static void LogOut(); // 0x004B9958-0x004B9A5C
		public static void AppRequest(string message, OGActionType actionType, string objectId, IEnumerable<string> to, string data = "" /* Metadata: 0x0021B967 */, string title = "" /* Metadata: 0x0021B96B */, FacebookDelegate<IAppRequestResult> callback = null); // 0x004B9A5C-0x004B9C00
		public static void AppRequest(string message, OGActionType actionType, string objectId, IEnumerable<object> filters = null, IEnumerable<string> excludeIds = null, int? maxRecipients = default, string data = "" /* Metadata: 0x0021B96F */, string title = "" /* Metadata: 0x0021B973 */, FacebookDelegate<IAppRequestResult> callback = null); // 0x004B9C00-0x004B9DB0
		public static void AppRequest(string message, IEnumerable<string> to = null, IEnumerable<object> filters = null, IEnumerable<string> excludeIds = null, int? maxRecipients = default, string data = "" /* Metadata: 0x0021B977 */, string title = "" /* Metadata: 0x0021B97B */, FacebookDelegate<IAppRequestResult> callback = null); // 0x004B9DB0-0x004B9F1C
		public static void ShareLink(Uri contentURL = null, string contentTitle = "" /* Metadata: 0x0021B97F */, string contentDescription = "" /* Metadata: 0x0021B983 */, Uri photoURL = null, FacebookDelegate<IShareResult> callback = null); // 0x004B9F1C-0x004BA058
		public static void FeedShare(string toId = "" /* Metadata: 0x0021B987 */, Uri link = null, string linkName = "" /* Metadata: 0x0021B98B */, string linkCaption = "" /* Metadata: 0x0021B98F */, string linkDescription = "" /* Metadata: 0x0021B993 */, Uri picture = null, string mediaSource = "" /* Metadata: 0x0021B997 */, FacebookDelegate<IShareResult> callback = null); // 0x004BA058-0x004BA1B8
		public static void API(string query, HttpMethod method, FacebookDelegate<IGraphResult> callback = null, IDictionary<string, string> formData = null); // 0x004AD85C-0x004ADA0C
		public static void API(string query, HttpMethod method, FacebookDelegate<IGraphResult> callback, WWWForm formData); // 0x004BA1B8-0x004BA368
		public static void ActivateApp(); // 0x004BA368-0x004BA478
		public static void GetAppLink(FacebookDelegate<IAppLinkResult> callback); // 0x004BA478-0x004BA590
		public static void ClearAppLink(); // 0x004BA590-0x004BA594
		public static void LogAppEvent(string logEvent, float? valueToSum = default, Dictionary<string, object> parameters = null); // 0x004B2010-0x004B2140
		public static void LogPurchase(decimal logPurchase, string currency = null, Dictionary<string, object> parameters = null); // 0x004BA594-0x004BA648
		public static void LogPurchase(float logPurchase, string currency = null, Dictionary<string, object> parameters = null); // 0x004BA648-0x004BA798
		private static void LogVersion(); // 0x004BA798-0x004BA9BC
	}

	internal abstract class FacebookBase : IFacebookImplementation // TypeDefIndex: 2954
	{
		// Fields
		private InitDelegate onInitCompleteDelegate; // 0x08
		[CompilerGenerated] // 0x00185FC4-0x00185FD4
		private bool <Initialized>k__BackingField; // 0x0C
		[CompilerGenerated] // 0x00185FD4-0x00185FE4
		private CallbackManager <CallbackManager>k__BackingField; // 0x10
	
		// Properties
		public abstract bool LimitEventUsage { get; set; }
		public abstract string SDKName { get; }
		public abstract string SDKVersion { get; }
		public virtual string SDKUserAgent { get; } // 0x004A9A90-0x004A9AD8 
		public bool LoggedIn { get; } // 0x004BDB68-0x004BDC74 
		public bool Initialized { [CompilerGenerated] /* 0x00186444-0x00186454 */ get; [CompilerGenerated] /* 0x00186454-0x00186464 */ private set; } // 0x004BDC74-0x004BDC7C 0x004BDC7C-0x004BDC84
		protected CallbackManager CallbackManager { [CompilerGenerated] /* 0x00186464-0x00186474 */ get; [CompilerGenerated] /* 0x00186474-0x00186484 */ private set; } // 0x004AA598-0x004AA5A0 0x004BDB60-0x004BDB68
	
		// Nested types
		[Serializable]
		[CompilerGenerated] // 0x00185E94-0x00185EA4
		private sealed class <>c // TypeDefIndex: 2955
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static Func<string, bool> <>9__41_0; // 0x04
	
			// Constructors
			static <>c(); // 0x004BEE98-0x004BEF0C
			public <>c(); // 0x004BEF0C-0x004BEF14
	
			// Methods
			internal bool <ValidateAppRequestArgs>b__41_0(string toWhom); // 0x004BEF14-0x004BEF20
		}
	
		// Constructors
		protected FacebookBase(CallbackManager callbackManager); // 0x004A9468-0x004A9488
	
		// Methods
		public virtual void Init(InitDelegate onInitComplete); // 0x004AA14C-0x004AA154
		public abstract void LogInWithPublishPermissions(IEnumerable<string> scope, FacebookDelegate<ILoginResult> callback);
		public abstract void LogInWithReadPermissions(IEnumerable<string> scope, FacebookDelegate<ILoginResult> callback);
		public virtual void LogOut(); // 0x004AA880-0x004AA8E8
		public abstract void AppRequest(string message, OGActionType? actionType, string objectId, IEnumerable<string> to, IEnumerable<object> filters, IEnumerable<string> excludeIds, int? maxRecipients, string data, string title, FacebookDelegate<IAppRequestResult> callback);
		public abstract void ShareLink(Uri contentURL, string contentTitle, string contentDescription, Uri photoURL, FacebookDelegate<IShareResult> callback);
		public abstract void FeedShare(string toId, Uri link, string linkName, string linkCaption, string linkDescription, Uri picture, string mediaSource, FacebookDelegate<IShareResult> callback);
		public void API(string query, HttpMethod method, IDictionary<string, string> formData, FacebookDelegate<IGraphResult> callback); // 0x004BDC84-0x004BE010
		public void API(string query, HttpMethod method, WWWForm formData, FacebookDelegate<IGraphResult> callback); // 0x004BE5B0-0x004BE79C
		public abstract void ActivateApp(string appId = null);
		public abstract void GetAppLink(FacebookDelegate<IAppLinkResult> callback);
		public abstract void AppEventsLogEvent(string logEvent, float? valueToSum, Dictionary<string, object> parameters);
		public abstract void AppEventsLogPurchase(float logPurchase, string currency, Dictionary<string, object> parameters);
		public virtual void OnInitComplete(ResultContainer resultContainer); // 0x004BE79C-0x004BE940
		public abstract void OnLoginComplete(ResultContainer resultContainer);
		public void OnLogoutComplete(ResultContainer resultContainer); // 0x004BE940-0x004BE9A8
		public abstract void OnGetAppLinkComplete(ResultContainer resultContainer);
		public abstract void OnAppRequestsComplete(ResultContainer resultContainer);
		public abstract void OnShareLinkComplete(ResultContainer resultContainer);
		protected void ValidateAppRequestArgs(string message, OGActionType? actionType, string objectId, IEnumerable<string> to = null, IEnumerable<object> filters = null, IEnumerable<string> excludeIds = null, int? maxRecipients = default, string data = "" /* Metadata: 0x0021B9B8 */, string title = "" /* Metadata: 0x0021B9BC */, FacebookDelegate<IAppRequestResult> callback = null); // 0x004AAD28-0x004AB0F8
		protected virtual void OnAuthResponse(LoginResult result); // 0x004BE9A8-0x004BEA4C
		private IDictionary<string, string> CopyByValue(IDictionary<string, string> data); // 0x004BE010-0x004BE4C4
		private Uri GetGraphUrl(string query); // 0x004BE4C4-0x004BE5B0
		[CompilerGenerated] // 0x00186484-0x00186494
		private void <OnInitComplete>b__35_0(ILoginResult result); // 0x004BEA4C-0x004BEA5C
	}

	public delegate void InitDelegate(); // TypeDefIndex: 2956; 0x004BEA5C-0x004BEE98

	public delegate void FacebookDelegate<T>(T result); // TypeDefIndex: 2957; 0x00000000-0x00000000

	public delegate void HideUnityDelegate(bool isUnityShown); // TypeDefIndex: 2958; 0x004AD3E8-0x004AD84C

	internal abstract class FacebookGameObject : MonoBehaviour, IFacebookCallbackHandler // TypeDefIndex: 2959
	{
		// Fields
		[CompilerGenerated] // 0x00185FE4-0x00185FF4
		private IFacebookImplementation <Facebook>k__BackingField; // 0x0C
	
		// Properties
		public IFacebookImplementation Facebook { [CompilerGenerated] /* 0x00186494-0x001864A4 */ get; [CompilerGenerated] /* 0x001864A4-0x001864B4 */ set; } // 0x004AE754-0x004AE75C 0x004AEE70-0x004AEE78
	
		// Constructors
		protected FacebookGameObject(); // 0x004AEDC4-0x004AEDCC
	
		// Methods
		public void Awake(); // 0x004BEF20-0x004BF010
		public void OnInitComplete(string message); // 0x004BF010-0x004BF110
		public void OnLoginComplete(string message); // 0x004BF110-0x004BF210
		public void OnLogoutComplete(string message); // 0x004BF210-0x004BF310
		public void OnGetAppLinkComplete(string message); // 0x004BF310-0x004BF410
		public void OnAppRequestsComplete(string message); // 0x004BF410-0x004BF510
		public void OnShareLinkComplete(string message); // 0x004BF510-0x004BF610
		protected virtual void OnAwake(); // 0x004BF610-0x004BF614
	}

	public class FacebookSdkVersion // TypeDefIndex: 2960
	{
		// Properties
		public static string Build { get; } // 0x004A9AD8-0x004A9B34 
	}

	internal enum FacebookUnityPlatform // TypeDefIndex: 2961
	{
		Unknown = 0,
		Android = 1,
		IOS = 2,
		WebGL = 3,
		Gameroom = 4
	}

	internal interface IFacebook // TypeDefIndex: 2962
	{
		// Properties
		bool LoggedIn { get; }
		bool LimitEventUsage { get; set; }
		string SDKUserAgent { get; }
		bool Initialized { get; }
	
		// Methods
		void LogInWithPublishPermissions(IEnumerable<string> permissions, FacebookDelegate<ILoginResult> callback);
		void LogInWithReadPermissions(IEnumerable<string> permissions, FacebookDelegate<ILoginResult> callback);
		void LogOut();
		void AppRequest(string message, OGActionType? actionType, string objectId, IEnumerable<string> to, IEnumerable<object> filters, IEnumerable<string> excludeIds, int? maxRecipients, string data, string title, FacebookDelegate<IAppRequestResult> callback);
		void ShareLink(Uri contentURL, string contentTitle, string contentDescription, Uri photoURL, FacebookDelegate<IShareResult> callback);
		void FeedShare(string toId, Uri link, string linkName, string linkCaption, string linkDescription, Uri picture, string mediaSource, FacebookDelegate<IShareResult> callback);
		void API(string query, HttpMethod method, IDictionary<string, string> formData, FacebookDelegate<IGraphResult> callback);
		void API(string query, HttpMethod method, WWWForm formData, FacebookDelegate<IGraphResult> callback);
		void ActivateApp(string appId = null);
		void GetAppLink(FacebookDelegate<IAppLinkResult> callback);
		void AppEventsLogEvent(string logEvent, float? valueToSum, Dictionary<string, object> parameters);
		void AppEventsLogPurchase(float logPurchase, string currency, Dictionary<string, object> parameters);
	}

	internal interface IFacebookCallbackHandler // TypeDefIndex: 2963
	{
		// Methods
		void OnInitComplete(string message);
		void OnLoginComplete(string message);
		void OnAppRequestsComplete(string message);
		void OnShareLinkComplete(string message);
	}

	internal interface IFacebookImplementation : IFacebook, IFacebookResultHandler // TypeDefIndex: 2964
	{
	}

	internal interface IFacebookResultHandler // TypeDefIndex: 2965
	{
		// Methods
		void OnInitComplete(ResultContainer resultContainer);
		void OnLoginComplete(ResultContainer resultContainer);
		void OnLogoutComplete(ResultContainer resultContainer);
		void OnGetAppLinkComplete(ResultContainer resultContainer);
		void OnAppRequestsComplete(ResultContainer resultContainer);
		void OnShareLinkComplete(ResultContainer resultContainer);
	}

	internal interface IPayFacebook // TypeDefIndex: 2966
	{
		// Methods
		void Pay(string product, string action, int quantity, int? quantityMin, int? quantityMax, string requestId, string pricepointId, string testCurrency, FacebookDelegate<IPayResult> callback);
	}

	internal class MethodArguments // TypeDefIndex: 2967
	{
		// Fields
		private IDictionary<string, object> arguments; // 0x08
	
		// Constructors
		public MethodArguments(); // 0x004AA154-0x004AA1DC
		public MethodArguments(MethodArguments methodArgs); // 0x004C2B38-0x004C2B68
		private MethodArguments(IDictionary<string, object> arguments); // 0x004C2AA4-0x004C2B38
	
		// Methods
		public void AddPrimative<T>(string argumentName, T value)
			where T : struct;
		public void AddNullablePrimitive<T>(string argumentName, T? nullable)
			where T : struct;
		public void AddString(string argumentName, string value); // 0x004AA1DC-0x004AA2D8
		public void AddCommaSeparatedList(string argumentName, IEnumerable<string> value); // 0x004AB0F8-0x004AB1F8
		public void AddDictionary(string argumentName, IDictionary<string, object> dict); // 0x004C2B68-0x004C2C68
		public void AddList<T>(string argumentName, IEnumerable<T> list);
		public void AddUri(string argumentName, Uri uri); // 0x004AB508-0x004AB68C
		public string ToJsonString(); // 0x004AA364-0x004AA3E8
		private static Dictionary<string, string> ToStringDict(IDictionary<string, object> dict); // 0x004C2C68-0x004C3048
	}

	internal abstract class MethodCall<T> // TypeDefIndex: 2968
		where T : IResult
	{
		// Fields
		[CompilerGenerated] // 0x00185FF4-0x00186004
		private string <MethodName>k__BackingField;
		[CompilerGenerated] // 0x00186004-0x00186014
		private FacebookDelegate<T> <Callback>k__BackingField;
		[CompilerGenerated] // 0x00186014-0x00186024
		private FacebookBase <FacebookImpl>k__BackingField;
		[CompilerGenerated] // 0x00186024-0x00186034
		private MethodArguments <Parameters>k__BackingField;
	
		// Properties
		public string MethodName { [CompilerGenerated] /* 0x001864B4-0x001864C4 */ get; [CompilerGenerated] /* 0x001864C4-0x001864D4 */ private set; }
		public FacebookDelegate<T> Callback { [CompilerGenerated] /* 0x001864D4-0x001864E4 */ protected get; [CompilerGenerated] /* 0x001864E4-0x001864F4 */ set; }
		protected FacebookBase FacebookImpl { [CompilerGenerated] /* 0x001864F4-0x00186504 */ set; }
		protected MethodArguments Parameters { [CompilerGenerated] /* 0x00186504-0x00186514 */ set; }
	
		// Constructors
		public MethodCall(FacebookBase facebookImpl, string methodName);
	
		// Methods
		public abstract void Call(MethodArguments args = null);
	}

	public enum ShareDialogMode // TypeDefIndex: 2969
	{
		AUTOMATIC = 0,
		NATIVE = 1,
		WEB = 2,
		FEED = 3
	}

	public enum OGActionType // TypeDefIndex: 2970
	{
		SEND = 0,
		ASKFOR = 1,
		TURN = 2
	}

	internal class AccessTokenRefreshResult : ResultBase, IAccessTokenRefreshResult // TypeDefIndex: 2971
	{
		// Fields
		[CompilerGenerated] // 0x00186034-0x00186044
		private AccessToken <AccessToken>k__BackingField; // 0x30
	
		// Properties
		public AccessToken AccessToken { [CompilerGenerated] /* 0x00186514-0x00186524 */ get; [CompilerGenerated] /* 0x00186524-0x00186534 */ private set; } // 0x004A6B70-0x004A6B78 0x004A6B68-0x004A6B70
	
		// Constructors
		public AccessTokenRefreshResult(ResultContainer resultContainer); // 0x004A67E0-0x004A6964
	
		// Methods
		public override string ToString(); // 0x004A6B78-0x004A6C90
	}

	internal class AppLinkResult : ResultBase, IAppLinkResult // TypeDefIndex: 2972
	{
		// Fields
		[CompilerGenerated] // 0x00186044-0x00186054
		private string <Url>k__BackingField; // 0x30
		[CompilerGenerated] // 0x00186054-0x00186064
		private string <TargetUrl>k__BackingField; // 0x34
		[CompilerGenerated] // 0x00186064-0x00186074
		private string <Ref>k__BackingField; // 0x38
		[CompilerGenerated] // 0x00186074-0x00186084
		private IDictionary<string, object> <Extras>k__BackingField; // 0x3C
	
		// Properties
		public string Url { [CompilerGenerated] /* 0x00186534-0x00186544 */ get; [CompilerGenerated] /* 0x00186544-0x00186554 */ private set; } // 0x004A7054-0x004A705C 0x004A7034-0x004A703C
		public string TargetUrl { [CompilerGenerated] /* 0x00186554-0x00186564 */ get; [CompilerGenerated] /* 0x00186564-0x00186574 */ private set; } // 0x004A705C-0x004A7064 0x004A703C-0x004A7044
		public string Ref { [CompilerGenerated] /* 0x00186574-0x00186584 */ get; [CompilerGenerated] /* 0x00186584-0x00186594 */ private set; } // 0x004A7064-0x004A706C 0x004A7044-0x004A704C
		public IDictionary<string, object> Extras { [CompilerGenerated] /* 0x00186594-0x001865A4 */ get; [CompilerGenerated] /* 0x001865A4-0x001865B4 */ private set; } // 0x004A706C-0x004A7074 0x004A704C-0x004A7054
	
		// Constructors
		public AppLinkResult(ResultContainer resultContainer); // 0x004A6E80-0x004A7034
	
		// Methods
		public override string ToString(); // 0x004A7074-0x004A724C
	}

	internal class AppRequestResult : ResultBase, IAppRequestResult // TypeDefIndex: 2973
	{
		// Fields
		[CompilerGenerated] // 0x00186084-0x00186094
		private string <RequestID>k__BackingField; // 0x30
		[CompilerGenerated] // 0x00186094-0x001860A4
		private IEnumerable<string> <To>k__BackingField; // 0x34
	
		// Properties
		public string RequestID { [CompilerGenerated] /* 0x001865B4-0x001865C4 */ get; [CompilerGenerated] /* 0x001865C4-0x001865D4 */ private set; } // 0x004A77CC-0x004A77D4 0x004A77BC-0x004A77C4
		public IEnumerable<string> To { [CompilerGenerated] /* 0x001865D4-0x001865E4 */ get; [CompilerGenerated] /* 0x001865E4-0x001865F4 */ private set; } // 0x004A77D4-0x004A77DC 0x004A77C4-0x004A77CC
	
		// Constructors
		public AppRequestResult(ResultContainer resultContainer); // 0x004A72CC-0x004A77BC
	
		// Methods
		public override string ToString(); // 0x004A77DC-0x004A7948
	}

	internal class GraphResult : ResultBase, IGraphResult // TypeDefIndex: 2974
	{
		// Fields
		[CompilerGenerated] // 0x001860A4-0x001860B4
		private IList<object> <ResultList>k__BackingField; // 0x30
		[CompilerGenerated] // 0x001860B4-0x001860C4
		private Texture2D <Texture>k__BackingField; // 0x34
	
		// Properties
		private IList<object> ResultList { [CompilerGenerated] /* 0x001865F4-0x00186604 */ set; } // 0x004C273C-0x004C2744
		public Texture2D Texture { [CompilerGenerated] /* 0x00186604-0x00186614 */ get; [CompilerGenerated] /* 0x00186614-0x00186624 */ private set; } // 0x004C2744-0x004C275C 0x004C2734-0x004C273C
	
		// Constructors
		internal GraphResult(WWW result); // 0x004A8A60-0x004A8BA4
	
		// Methods
		private void Init(string rawResult); // 0x004C2614-0x004C2734
	}

	public interface IAccessTokenRefreshResult : IResult // TypeDefIndex: 2975
	{
	}

	public interface IAppLinkResult : IResult // TypeDefIndex: 2976
	{
	}

	public interface IAppRequestResult : IResult // TypeDefIndex: 2977
	{
	}

	public interface IGraphResult : IResult // TypeDefIndex: 2978
	{
		// Properties
		Texture2D Texture { get; }
	}

	public interface IGroupCreateResult : IResult // TypeDefIndex: 2979
	{
	}

	public interface IGroupJoinResult : IResult // TypeDefIndex: 2980
	{
	}

	internal interface IInternalResult : IResult // TypeDefIndex: 2981
	{
		// Properties
		string CallbackId { get; }
	}

	public interface ILoginResult : IResult // TypeDefIndex: 2982
	{
	}

	public interface IPayResult : IResult // TypeDefIndex: 2983
	{
	}

	public interface IResult // TypeDefIndex: 2984
	{
		// Properties
		string Error { get; }
		IDictionary<string, object> ResultDictionary { get; }
		string RawResult { get; }
		bool Cancelled { get; }
	}

	public interface IShareResult : IResult // TypeDefIndex: 2985
	{
	}

	internal class LoginResult : ResultBase, ILoginResult // TypeDefIndex: 2986
	{
		// Fields
		public static readonly string UserIdKey; // 0x00
		public static readonly string ExpirationTimestampKey; // 0x04
		public static readonly string PermissionsKey; // 0x08
		public static readonly string AccessTokenKey; // 0x0C
		[CompilerGenerated] // 0x001860C4-0x001860D4
		private AccessToken <AccessToken>k__BackingField; // 0x30
	
		// Properties
		public AccessToken AccessToken { [CompilerGenerated] /* 0x00186624-0x00186634 */ get; [CompilerGenerated] /* 0x00186634-0x00186644 */ private set; } // 0x004ADD68-0x004ADD70 0x004C2870-0x004C2878
	
		// Constructors
		internal LoginResult(ResultContainer resultContainer); // 0x004ADA94-0x004ADC18
		static LoginResult(); // 0x004C2990-0x004C2AA4
	
		// Methods
		public override string ToString(); // 0x004C2878-0x004C2990
	}

	internal class PayResult : ResultBase, IPayResult // TypeDefIndex: 2987
	{
		// Properties
		public long ErrorCode { get; } // 0x004C744C-0x004C74C4 
	
		// Constructors
		internal PayResult(ResultContainer resultContainer); // 0x004AD0B0-0x004AD198
	
		// Methods
		public override string ToString(); // 0x004C74C4-0x004C7600
	}

	internal abstract class ResultBase : IInternalResult // TypeDefIndex: 2988
	{
		// Fields
		[CompilerGenerated] // 0x001860D4-0x001860E4
		private string <Error>k__BackingField; // 0x08
		[CompilerGenerated] // 0x001860E4-0x001860F4
		private IDictionary<string, object> <ResultDictionary>k__BackingField; // 0x0C
		[CompilerGenerated] // 0x001860F4-0x00186104
		private string <RawResult>k__BackingField; // 0x10
		[CompilerGenerated] // 0x00186104-0x00186114
		private bool <Cancelled>k__BackingField; // 0x14
		[CompilerGenerated] // 0x00186114-0x00186124
		private string <CallbackId>k__BackingField; // 0x18
		[CompilerGenerated] // 0x00186124-0x00186134
		private long? <CanvasErrorCode>k__BackingField; // 0x20
	
		// Properties
		public virtual string Error { [CompilerGenerated] /* 0x00186644-0x00186654 */ get; [CompilerGenerated] /* 0x00186654-0x00186664 */ protected set; } // 0x004C7CF0-0x004C7CF8 0x004C7CF8-0x004C7D00
		public virtual IDictionary<string, object> ResultDictionary { [CompilerGenerated] /* 0x00186664-0x00186674 */ get; [CompilerGenerated] /* 0x00186674-0x00186684 */ protected set; } // 0x004C7D00-0x004C7D08 0x004C7D08-0x004C7D10
		public virtual string RawResult { [CompilerGenerated] /* 0x00186684-0x00186694 */ get; [CompilerGenerated] /* 0x00186694-0x001866A4 */ protected set; } // 0x004C7D10-0x004C7D18 0x004C7D18-0x004C7D20
		public virtual bool Cancelled { [CompilerGenerated] /* 0x001866A4-0x001866B4 */ get; [CompilerGenerated] /* 0x001866B4-0x001866C4 */ protected set; } // 0x004C7D20-0x004C7D28 0x004C7D28-0x004C7D30
		public virtual string CallbackId { [CompilerGenerated] /* 0x001866C4-0x001866D4 */ get; [CompilerGenerated] /* 0x001866D4-0x001866E4 */ protected set; } // 0x004C7D30-0x004C7D38 0x004C7D38-0x004C7D40
		protected long? CanvasErrorCode { [CompilerGenerated] /* 0x001866E4-0x001866F4 */ get; [CompilerGenerated] /* 0x001866F4-0x00186704 */ private set; } // 0x004C743C-0x004C744C 0x004C7D40-0x004C7D58
	
		// Constructors
		internal ResultBase(ResultContainer result); // 0x004A6964-0x004A6A04
		internal ResultBase(ResultContainer result, string error, bool cancelled); // 0x004C25CC-0x004C2614
	
		// Methods
		public override string ToString(); // 0x004A6C90-0x004A6E80
		protected void Init(ResultContainer result, string error, bool cancelled, string callbackId); // 0x004C7ABC-0x004C7CF0
		private static string GetErrorValue(IDictionary<string, object> result); // 0x004C7600-0x004C76A0
		private static bool GetCancelledValue(IDictionary<string, object> result); // 0x004C76A0-0x004C7A1C
		private static string GetCallbackId(IDictionary<string, object> result); // 0x004C7A1C-0x004C7ABC
	}

	internal class ResultContainer // TypeDefIndex: 2989
	{
		// Fields
		private const string CanvasResponseKey = "response"; // Metadata: 0x0021B9F0
		[CompilerGenerated] // 0x00186134-0x00186144
		private string <RawResult>k__BackingField; // 0x08
		[CompilerGenerated] // 0x00186144-0x00186154
		private IDictionary<string, object> <ResultDictionary>k__BackingField; // 0x0C
	
		// Properties
		public string RawResult { [CompilerGenerated] /* 0x00186704-0x00186714 */ get; [CompilerGenerated] /* 0x00186714-0x00186724 */ private set; } // 0x004C7D58-0x004C7D60 0x004C7D60-0x004C7D68
		public IDictionary<string, object> ResultDictionary { [CompilerGenerated] /* 0x00186724-0x00186734 */ get; [CompilerGenerated] /* 0x00186734-0x00186744 */ set; } // 0x004AD854-0x004AD85C 0x004C7D68-0x004C7D70
	
		// Constructors
		public ResultContainer(IDictionary<string, object> dictionary); // 0x004ABFA0-0x004ABFE4
		public ResultContainer(string result); // 0x004AE864-0x004AE9B8
	
		// Methods
		private IDictionary<string, object> GetWebFormattedResponseDictionary(IDictionary<string, object> resultDictionary); // 0x004C7D70-0x004C7F5C
	}

	internal class ShareResult : ResultBase, IShareResult // TypeDefIndex: 2990
	{
		// Fields
		[CompilerGenerated] // 0x00186154-0x00186164
		private string <PostId>k__BackingField; // 0x30
	
		// Properties
		public string PostId { [CompilerGenerated] /* 0x00186744-0x00186754 */ get; [CompilerGenerated] /* 0x00186754-0x00186764 */ private set; } // 0x004C7FD0-0x004C7FD8 0x004C7FC8-0x004C7FD0
		internal static string PostIDKey { get; } // 0x004C7F5C-0x004C7FC8 
	
		// Constructors
		internal ShareResult(ResultContainer resultContainer); // 0x004AD2B8-0x004AD3D0
	
		// Methods
		public override string ToString(); // 0x004C7FD8-0x004C80E8
	}

	internal class AsyncRequestString : MonoBehaviour // TypeDefIndex: 2991
	{
		// Fields
		private Uri url; // 0x0C
		private HttpMethod method; // 0x10
		private IDictionary<string, string> formData; // 0x14
		private WWWForm query; // 0x18
		private FacebookDelegate<IGraphResult> callback; // 0x1C
	
		// Nested types
		[CompilerGenerated] // 0x00185EA4-0x00185EB4
		private sealed class <Start>d__9 : IEnumerator<object> // TypeDefIndex: 2992
		{
			// Fields
			private int <>1__state; // 0x08
			private object <>2__current; // 0x0C
			public AsyncRequestString <>4__this; // 0x10
			private WWW <www>5__2; // 0x14
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00186784-0x00186794 */ get; } // 0x004A8BA4-0x004A8BAC 
			object IEnumerator.Current { [DebuggerHidden] /* 0x001867A4-0x001867B4 */ get; } // 0x004A8C34-0x004A8C3C 
	
			// Constructors
			[DebuggerHidden] // 0x00186764-0x00186774
			public <Start>d__9(int <>1__state); // 0x004A7BCC-0x004A7BEC
	
			// Methods
			[DebuggerHidden] // 0x00186774-0x00186784
			void IDisposable.Dispose(); // 0x004A7BF4-0x004A7BF8
			private bool MoveNext(); // 0x004A7BF8-0x004A8704
			[DebuggerHidden] // 0x00186794-0x001867A4
			void IEnumerator.Reset(); // 0x004A8BAC-0x004A8C34
		}
	
		// Constructors
		public AsyncRequestString(); // 0x004A7BEC-0x004A7BF4
	
		// Methods
		internal static void Post(Uri url, Dictionary<string, string> formData = null, FacebookDelegate<IGraphResult> callback = null); // 0x004A7948-0x004A796C
		internal static void Get(Uri url, Dictionary<string, string> formData = null, FacebookDelegate<IGraphResult> callback = null); // 0x004A7A30-0x004A7A54
		internal static void Request(Uri url, HttpMethod method, WWWForm query = null, FacebookDelegate<IGraphResult> callback = null); // 0x004A7A54-0x004A7B18
		internal static void Request(Uri url, HttpMethod method, IDictionary<string, string> formData = null, FacebookDelegate<IGraphResult> callback = null); // 0x004A796C-0x004A7A30
		internal IEnumerator Start(); // 0x004A7B40-0x004A7BCC
		internal AsyncRequestString SetUrl(Uri url); // 0x004A7B18-0x004A7B20
		internal AsyncRequestString SetMethod(HttpMethod method); // 0x004A7B20-0x004A7B28
		internal AsyncRequestString SetFormData(IDictionary<string, string> formData); // 0x004A7B38-0x004A7B40
		internal AsyncRequestString SetQuery(WWWForm query); // 0x004A7B28-0x004A7B30
		internal AsyncRequestString SetCallback(FacebookDelegate<IGraphResult> callback); // 0x004A7B30-0x004A7B38
	}

	internal static class FacebookLogger // TypeDefIndex: 2993
	{
		// Fields
		[CompilerGenerated] // 0x00186164-0x00186174
		private static IFacebookLogger <Instance>k__BackingField; // 0x00
	
		// Properties
		internal static IFacebookLogger Instance { [CompilerGenerated] /* 0x001867B4-0x001867C4 */ private get; [CompilerGenerated] /* 0x001867C4-0x001867D4 */ set; } // 0x004BF71C-0x004BF7A8 0x004BF68C-0x004BF71C
	
		// Nested types
		private class DebugLogger : IFacebookLogger // TypeDefIndex: 2994
		{
			// Constructors
			public DebugLogger(); // 0x004BF684-0x004BF68C
	
			// Methods
			public void Log(string msg); // 0x004BF840-0x004BF900
			public void Info(string msg); // 0x004BF900-0x004BF984
			public void Warn(string msg); // 0x004BF984-0x004BFA08
		}
	
		// Constructors
		static FacebookLogger(); // 0x004BF614-0x004BF684
	
		// Methods
		public static void Log(string msg); // 0x004B2140-0x004B224C
		public static void Info(string msg); // 0x004BA9BC-0x004BAAC8
		public static void Warn(string msg); // 0x004A9984-0x004A9A90
		public static void Warn(string format, params /* 0x00186C24-0x00186C34 */ string[] args); // 0x004BF7A8-0x004BF840
	}

	public enum HttpMethod // TypeDefIndex: 2995
	{
		GET = 0,
		POST = 1,
		DELETE = 2
	}

	internal interface IFacebookLogger // TypeDefIndex: 2996
	{
		// Methods
		void Log(string msg);
		void Info(string msg);
		void Warn(string msg);
	}

	internal static class Utilities // TypeDefIndex: 2997
	{
		// Nested types
		public delegate void Callback<T>(T obj); // TypeDefIndex: 2998; 0x00000000-0x00000000
	
		[Serializable]
		[CompilerGenerated] // 0x00185EC4-0x00185ED4
		private sealed class <>c // TypeDefIndex: 2999
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static Func<object, string> <>9__18_0; // 0x04
	
			// Constructors
			static <>c(); // 0x004C88BC-0x004C8930
			public <>c(); // 0x004C8930-0x004C8938
	
			// Methods
			internal string <ParsePermissionFromResult>b__18_0(object permission); // 0x004C8938-0x004C896C
		}
	
		// Methods
		public static string GetUserAgent(string productName, string productVersion); // 0x004A9B34-0x004A9CA8
		public static AccessToken ParseAccessTokenFromResult(IDictionary<string, object> resultDictionary); // 0x004A6A04-0x004A6B68
		public static string FormatToString(string baseString, string className, IDictionary<string, string> propertiesAndValues); // 0x004A6034-0x004A64B0
		private static DateTime ParseExpirationDateFromResult(IDictionary<string, object> resultDictionary); // 0x004C80E8-0x004C8380
		private static DateTime? ParseLastRefreshFromResult(IDictionary<string, object> resultDictionary); // 0x004C8754-0x004C8840
		private static ICollection<string> ParsePermissionFromResult(IDictionary<string, object> resultDictionary); // 0x004C8380-0x004C8754
		private static DateTime FromTimestamp(int timestamp); // 0x004C8840-0x004C88BC
	
		// Extension methods
		public static bool TryGetValue<T>(this IDictionary<string, object> dictionary, string key, out T value);
		public static long TotalSeconds(this DateTime dateTime); // 0x004A5E14-0x004A5F14
		public static T GetValueOrDefault<T>(this IDictionary<string, object> dictionary, string key, bool logWarning = true /* Metadata: 0x0021BA08 */);
		public static string ToCommaSeparateList(this IEnumerable<string> list); // 0x004A5F14-0x004A5FB8
		public static string AbsoluteUrlOrEmptyString(this Uri uri); // 0x004C5C44-0x004C5D0C
		public static string ToJson(this IDictionary<string, object> dictionary); // 0x004A724C-0x004A72CC
		public static void AddAllKVPFrom<T1, T2>(this IDictionary<T1, T2> dest, IDictionary<T1, T2> source);
		public static string ToStringNullOk(this object obj); // 0x004A5FB8-0x004A6034
	}

	internal static class FBUnityUtility // TypeDefIndex: 3000
	{
		// Fields
		private static IAsyncRequestStringWrapper asyncRequestStringWrapper; // 0x00
	
		// Properties
		public static IAsyncRequestStringWrapper AsyncRequestStringWrapper { get; } // 0x004BDAB4-0x004BDB60 
	}

	internal class AsyncRequestStringWrapper : IAsyncRequestStringWrapper // TypeDefIndex: 3001
	{
		// Constructors
		public AsyncRequestStringWrapper(); // 0x004A8C94-0x004A8C9C
	
		// Methods
		public void Request(Uri url, HttpMethod method, WWWForm query = null, FacebookDelegate<IGraphResult> callback = null); // 0x004A8C3C-0x004A8C68
		public void Request(Uri url, HttpMethod method, IDictionary<string, string> formData = null, FacebookDelegate<IGraphResult> callback = null); // 0x004A8C68-0x004A8C94
	}

	internal interface IAsyncRequestStringWrapper // TypeDefIndex: 3002
	{
		// Methods
		void Request(Uri url, HttpMethod method, WWWForm query = null, FacebookDelegate<IGraphResult> callback = null);
		void Request(Uri url, HttpMethod method, IDictionary<string, string> formData = null, FacebookDelegate<IGraphResult> callback = null);
	}

	internal class FacebookScheduler : MonoBehaviour, IFacebookScheduler // TypeDefIndex: 3003
	{
		// Nested types
		[CompilerGenerated] // 0x00185ED4-0x00185EE4
		private sealed class <DelayEvent>d__1 : IEnumerator<object> // TypeDefIndex: 3004
		{
			// Fields
			private int <>1__state; // 0x08
			private object <>2__current; // 0x0C
			public long delay; // 0x10
			public Action action; // 0x18
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00186874-0x00186884 */ get; } // 0x004BFBF4-0x004BFBFC 
			object IEnumerator.Current { [DebuggerHidden] /* 0x00186894-0x001868A4 */ get; } // 0x004BFC84-0x004BFC8C 
	
			// Constructors
			[DebuggerHidden] // 0x00186854-0x00186864
			public <DelayEvent>d__1(int <>1__state); // 0x004BFAE4-0x004BFB04
	
			// Methods
			[DebuggerHidden] // 0x00186864-0x00186874
			void IDisposable.Dispose(); // 0x004BFB0C-0x004BFB10
			private bool MoveNext(); // 0x004BFB10-0x004BFBF4
			[DebuggerHidden] // 0x00186884-0x00186894
			void IEnumerator.Reset(); // 0x004BFBFC-0x004BFC84
		}
	
		// Constructors
		public FacebookScheduler(); // 0x004BFB04-0x004BFB0C
	
		// Methods
		public void Schedule(Action action, long delay); // 0x004BFA08-0x004BFA34
		public IEnumerator DelayEvent(Action action, long delay); // 0x004BFA34-0x004BFAE4
	}

	internal interface IFacebookScheduler // TypeDefIndex: 3005
	{
	}

	public interface IHasLicenseResult : IResult // TypeDefIndex: 3006
	{
	}

	internal class CodelessIAPAutoLog // TypeDefIndex: 3007
	{
		// Methods
		internal static void handlePurchaseCompleted(object data); // 0x004B19E8-0x004B1EBC
		internal static void addListenerToIAPButtons(object listenerObject); // 0x004B224C-0x004B2310
		internal static void addListenerToGameObject(UnityEngine.Object gameObject, object listenerObject); // 0x004B23B8-0x004B2870
		private static Type FindTypeInAssemblies(string typeName, string nameSpace); // 0x004B2870-0x004B2A38
		private static UnityEngine.Object[] FindObjectsOfTypeByName(string typeName, string nameSpace); // 0x004B2310-0x004B23B8
		private static object GetField(object inObj, string fieldName); // 0x004B2A38-0x004B2AB0
		private static object GetProperty(object inObj, string propertyName); // 0x004B1F94-0x004B2010
	}

	public class CodelessCrawler : MonoBehaviour // TypeDefIndex: 3008
	{
		// Fields
		private static bool isGeneratingSnapshot; // 0x00
		private static Camera mainCamera; // 0x04
	
		// Nested types
		[CompilerGenerated] // 0x00185EE4-0x00185EF4
		private sealed class <GenSnapshot>d__4 : IEnumerator<object> // TypeDefIndex: 3009
		{
			// Fields
			private int <>1__state; // 0x08
			private object <>2__current; // 0x0C
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x001868C4-0x001868D4 */ get; } // 0x004B1950-0x004B1958 
			object IEnumerator.Current { [DebuggerHidden] /* 0x001868E4-0x001868F4 */ get; } // 0x004B19E0-0x004B19E8 
	
			// Constructors
			[DebuggerHidden] // 0x001868A4-0x001868B4
			public <GenSnapshot>d__4(int <>1__state); // 0x004AF940-0x004AF960
	
			// Methods
			[DebuggerHidden] // 0x001868B4-0x001868C4
			void IDisposable.Dispose(); // 0x004B1634-0x004B1638
			private bool MoveNext(); // 0x004B1638-0x004B1950
			[DebuggerHidden] // 0x001868D4-0x001868E4
			void IEnumerator.Reset(); // 0x004B1958-0x004B19E0
		}
	
		// Constructors
		public CodelessCrawler(); // 0x004B1628-0x004B1630
		static CodelessCrawler(); // 0x004B1630-0x004B1634
	
		// Methods
		public void Awake(); // 0x004AF618-0x004AF6B4
		public void CaptureViewHierarchy(string message); // 0x004AF6B4-0x004AF834
		private IEnumerator GenSnapshot(); // 0x004AF8CC-0x004AF940
		private static void SendAndroid(string json); // 0x004AF960-0x004AFB5C
		private static void SendIos(string json); // 0x004AFB5C-0x004AFB60
		private static string GenBase64Screenshot(); // 0x004AFB60-0x004AFD10
		private static string GenViewJson(); // 0x004AFD10-0x004B0354
		private static void GenChild(GameObject curObj, StringBuilder builder); // 0x004B0354-0x004B12C0
		private void onActiveSceneChanged(Scene arg0, Scene arg1); // 0x004B15B0-0x004B1628
		private static void updateMainCamera(); // 0x004AF834-0x004AF8CC
		private static Vector2 getScreenCoordinate(Vector3 position, RenderMode renderMode); // 0x004B12C0-0x004B14AC
		private static string getClasstypeBitmaskButton(); // 0x004B14AC-0x004B1528
		private static string getVisibility(GameObject gameObj); // 0x004B1528-0x004B15B0
	}

	public class CodelessUIInteractEvent : MonoBehaviour // TypeDefIndex: 3010
	{
		// Fields
		[CompilerGenerated] // 0x00186174-0x00186184
		private FBSDKEventBindingManager <eventBindingManager>k__BackingField; // 0x0C
	
		// Properties
		private FBSDKEventBindingManager eventBindingManager { [CompilerGenerated] /* 0x001868F4-0x00186904 */ get; [CompilerGenerated] /* 0x00186904-0x00186914 */ set; } // 0x004B2AB0-0x004B2AB8 0x004B2AB8-0x004B2AC0
	
		// Constructors
		public CodelessUIInteractEvent(); // 0x004B3744-0x004B374C
	
		// Methods
		private void Awake(); // 0x004B2AC0-0x004B2C3C
		private static void SetLoggerInitAndroid(); // 0x004B2C3C-0x004B2D90
		private static void SetLoggerInitIos(); // 0x004B2D90-0x004B2D94
		private void Update(); // 0x004B2D94-0x004B3384
		public void OnReceiveMapping(string message); // 0x004B33BC-0x004B34B4
	}

	public class FBSDKViewHiearchy // TypeDefIndex: 3011
	{
		// Methods
		public static bool CheckGameObjectMatchPath(GameObject go, List<FBSDKCodelessPathComponent> path); // 0x004B3394-0x004B33B4
		public static bool CheckPathMatchPath(List<FBSDKCodelessPathComponent> goPath, List<FBSDKCodelessPathComponent> path); // 0x004BD27C-0x004BD4C4
		public static List<FBSDKCodelessPathComponent> GetPath(GameObject go); // 0x004BD274-0x004BD27C
		public static List<FBSDKCodelessPathComponent> GetPath(GameObject go, int limit); // 0x004BD4C4-0x004BD738
		public static GameObject GetParent(GameObject go); // 0x004BD738-0x004BD828
		public static Dictionary<string, object> GetAttribute(GameObject obj, GameObject parent); // 0x004BD828-0x004BDAB4
	}

	public class FBSDKCodelessPathComponent // TypeDefIndex: 3012
	{
		// Fields
		[CompilerGenerated] // 0x00186184-0x00186194
		private string <className>k__BackingField; // 0x08
		[CompilerGenerated] // 0x00186194-0x001861A4
		private string <text>k__BackingField; // 0x0C
		[CompilerGenerated] // 0x001861A4-0x001861B4
		private string <hint>k__BackingField; // 0x10
		[CompilerGenerated] // 0x001861B4-0x001861C4
		private string <desc>k__BackingField; // 0x14
		[CompilerGenerated] // 0x001861C4-0x001861D4
		private string <tag>k__BackingField; // 0x18
		[CompilerGenerated] // 0x001861D4-0x001861E4
		private long <index>k__BackingField; // 0x20
		[CompilerGenerated] // 0x001861E4-0x001861F4
		private long <section>k__BackingField; // 0x28
		[CompilerGenerated] // 0x001861F4-0x00186204
		private long <row>k__BackingField; // 0x30
		[CompilerGenerated] // 0x00186204-0x00186214
		private long <matchBitmask>k__BackingField; // 0x38
	
		// Properties
		public string className { [CompilerGenerated] /* 0x00186914-0x00186924 */ get; [CompilerGenerated] /* 0x00186924-0x00186934 */ set; } // 0x004BCB28-0x004BCB30 0x004BCB20-0x004BCB28
		public string text { [CompilerGenerated] /* 0x00186934-0x00186944 */ set; } // 0x004BCB30-0x004BCB38
		public string hint { [CompilerGenerated] /* 0x00186944-0x00186954 */ set; } // 0x004BCB38-0x004BCB40
		public string desc { [CompilerGenerated] /* 0x00186954-0x00186964 */ set; } // 0x004BCB40-0x004BCB48
		public string tag { [CompilerGenerated] /* 0x00186964-0x00186974 */ set; } // 0x004BCB58-0x004BCB60
		public long index { [CompilerGenerated] /* 0x00186974-0x00186984 */ set; } // 0x004BCB48-0x004BCB58
		public long section { [CompilerGenerated] /* 0x00186984-0x00186994 */ set; } // 0x004BCB60-0x004BCB70
		public long row { [CompilerGenerated] /* 0x00186994-0x001869A4 */ set; } // 0x004BCB70-0x004BCB80
		public long matchBitmask { [CompilerGenerated] /* 0x001869A4-0x001869B4 */ set; } // 0x004BCB80-0x004BCB90
	
		// Constructors
		public FBSDKCodelessPathComponent(Dictionary<string, object> dict); // 0x004BC3E4-0x004BCB20
	}

	public class FBSDKEventBinding // TypeDefIndex: 3013
	{
		// Fields
		[CompilerGenerated] // 0x00186214-0x00186224
		private string <eventName>k__BackingField; // 0x08
		[CompilerGenerated] // 0x00186224-0x00186234
		private string <eventType>k__BackingField; // 0x0C
		[CompilerGenerated] // 0x00186234-0x00186244
		private string <appVersion>k__BackingField; // 0x10
		[CompilerGenerated] // 0x00186244-0x00186254
		private List<FBSDKCodelessPathComponent> <path>k__BackingField; // 0x14
	
		// Properties
		public string eventName { [CompilerGenerated] /* 0x001869B4-0x001869C4 */ get; [CompilerGenerated] /* 0x001869C4-0x001869D4 */ set; } // 0x004B33B4-0x004B33BC 0x004BD23C-0x004BD244
		public string eventType { [CompilerGenerated] /* 0x001869D4-0x001869E4 */ get; [CompilerGenerated] /* 0x001869E4-0x001869F4 */ set; } // 0x004BD24C-0x004BD254 0x004BD244-0x004BD24C
		public string appVersion { [CompilerGenerated] /* 0x001869F4-0x00186A04 */ get; [CompilerGenerated] /* 0x00186A04-0x00186A14 */ set; } // 0x004BD25C-0x004BD264 0x004BD254-0x004BD25C
		public List<FBSDKCodelessPathComponent> path { [CompilerGenerated] /* 0x00186A14-0x00186A24 */ get; [CompilerGenerated] /* 0x00186A24-0x00186A34 */ set; } // 0x004B338C-0x004B3394 0x004BD264-0x004BD26C
	
		// Constructors
		public FBSDKEventBinding(Dictionary<string, object> dict); // 0x004BCB90-0x004BD23C
	}

	public class FBSDKEventBindingManager // TypeDefIndex: 3014
	{
		// Fields
		[CompilerGenerated] // 0x00186254-0x00186264
		private List<FBSDKEventBinding> <eventBindings>k__BackingField; // 0x08
	
		// Properties
		public List<FBSDKEventBinding> eventBindings { [CompilerGenerated] /* 0x00186A34-0x00186A44 */ get; [CompilerGenerated] /* 0x00186A44-0x00186A54 */ set; } // 0x004B3384-0x004B338C 0x004BD26C-0x004BD274
	
		// Constructors
		public FBSDKEventBindingManager(List<object> listDict); // 0x004B34B4-0x004B3744
	}
}

namespace Facebook.Unity.Gameroom
{
	internal sealed class GameroomFacebook : FacebookBase, IGameroomFacebookImplementation // TypeDefIndex: 3015
	{
		// Fields
		private string appId; // 0x14
		private IGameroomWrapper gameroomWrapper; // 0x18
		[CompilerGenerated] // 0x00186264-0x00186274
		private bool <LimitEventUsage>k__BackingField; // 0x1C
	
		// Properties
		public override bool LimitEventUsage { [CompilerGenerated] /* 0x00186A54-0x00186A64 */ get; [CompilerGenerated] /* 0x00186A64-0x00186A74 */ set; } // 0x004BFE74-0x004BFE7C 0x004BFE7C-0x004BFE84
		public override string SDKName { get; } // 0x004BFE84-0x004BFEE0 
		public override string SDKVersion { get; } // 0x004BFEE0-0x004BFF3C 
	
		// Nested types
		public delegate void OnComplete(ResultContainer resultContainer); // TypeDefIndex: 3016; 0x004C17FC-0x004C2024
	
		// Constructors
		public GameroomFacebook(); // 0x004BFC8C-0x004BFD10
		public GameroomFacebook(IGameroomWrapper gameroomWrapper, CallbackManager callbackManager); // 0x004BFE4C-0x004BFE74
	
		// Methods
		public void Init(string appId, HideUnityDelegate hideUnityDelegate, InitDelegate onInitComplete); // 0x004BB758-0x004BB884
		public override void ActivateApp(string appId = null); // 0x004BFF50-0x004C0008
		public override void AppEventsLogEvent(string logEvent, float? valueToSum, Dictionary<string, object> parameters); // 0x004C0008-0x004C03B0
		public override void AppEventsLogPurchase(float logPurchase, string currency, Dictionary<string, object> parameters); // 0x004C03B0-0x004C04E4
		public override void AppRequest(string message, OGActionType? actionType, string objectId, IEnumerable<string> to, IEnumerable<object> filters, IEnumerable<string> excludeIds, int? maxRecipients, string data, string title, FacebookDelegate<IAppRequestResult> callback); // 0x004C04E4-0x004C0A30
		public override void FeedShare(string toId, Uri link, string linkName, string linkCaption, string linkDescription, Uri picture, string mediaSource, FacebookDelegate<IShareResult> callback); // 0x004C0A30-0x004C0CBC
		public override void ShareLink(Uri contentURL, string contentTitle, string contentDescription, Uri photoURL, FacebookDelegate<IShareResult> callback); // 0x004C0CBC-0x004C0D10
		public void Pay(string product, string action, int quantity, int? quantityMin, int? quantityMax, string requestId, string pricepointId, string testCurrency, FacebookDelegate<IPayResult> callback); // 0x004C0D10-0x004C0D7C
		public override void GetAppLink(FacebookDelegate<IAppLinkResult> callback); // 0x004C1038-0x004C10C0
		public override void LogInWithPublishPermissions(IEnumerable<string> scope, FacebookDelegate<ILoginResult> callback); // 0x004C10C0-0x004C10C4
		public override void LogInWithReadPermissions(IEnumerable<string> scope, FacebookDelegate<ILoginResult> callback); // 0x004C1238-0x004C123C
		public override void OnAppRequestsComplete(ResultContainer resultContainer); // 0x004C123C-0x004C12CC
		public override void OnGetAppLinkComplete(ResultContainer resultContainer); // 0x004C12CC-0x004C1354
		public override void OnLoginComplete(ResultContainer resultContainer); // 0x004C1354-0x004C13DC
		public override void OnShareLinkComplete(ResultContainer resultContainer); // 0x004C13DC-0x004C146C
		public void OnPayComplete(ResultContainer resultContainer); // 0x004C146C-0x004C14FC
		public bool HaveReceivedPipeResponse(); // 0x004C14FC-0x004C15DC
		public string GetPipeResponse(string callbackId); // 0x004C15DC-0x004C17FC
		private static IGameroomWrapper GetGameroomWrapper(); // 0x004BFD10-0x004BFE4C
		private void PayImpl(string product, string productId, string action, int quantity, int? quantityMin, int? quantityMax, string requestId, string pricepointId, string testCurrency, string developerPayload, FacebookDelegate<IPayResult> callback); // 0x004C0D7C-0x004C1038
		private void LoginWithPermissions(IEnumerable<string> scope, FacebookDelegate<ILoginResult> callback); // 0x004C10C4-0x004C1238
	}

	internal class GameroomFacebookGameObject : FacebookGameObject, IFacebookCallbackHandler // TypeDefIndex: 3017
	{
		// Properties
		protected IGameroomFacebookImplementation GameroomFacebookImpl { get; } // 0x004C205C-0x004C2148 
	
		// Nested types
		[CompilerGenerated] // 0x00185EF4-0x00185F04
		private sealed class <WaitForPipeResponse>d__4 : IEnumerator<object> // TypeDefIndex: 3018
		{
			// Fields
			private int <>1__state; // 0x08
			private object <>2__current; // 0x0C
			public GameroomFacebookGameObject <>4__this; // 0x10
			public GameroomFacebook.OnComplete onCompleteDelegate; // 0x14
			public string callbackId; // 0x18
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00186A94-0x00186AA4 */ get; } // 0x004C2488-0x004C2490 
			object IEnumerator.Current { [DebuggerHidden] /* 0x00186AB4-0x00186AC4 */ get; } // 0x004C2518-0x004C2520 
	
			// Constructors
			[DebuggerHidden] // 0x00186A74-0x00186A84
			public <WaitForPipeResponse>d__4(int <>1__state); // 0x004C2230-0x004C2250
	
			// Methods
			[DebuggerHidden] // 0x00186A84-0x00186A94
			void IDisposable.Dispose(); // 0x004C2258-0x004C225C
			private bool MoveNext(); // 0x004C225C-0x004C2488
			[DebuggerHidden] // 0x00186AA4-0x00186AB4
			void IEnumerator.Reset(); // 0x004C2490-0x004C2518
		}
	
		// Constructors
		public GameroomFacebookGameObject(); // 0x004C2250-0x004C2258
	
		// Methods
		public void WaitForResponse(GameroomFacebook.OnComplete onCompleteDelegate, string callbackId); // 0x004C2148-0x004C216C
		protected override void OnAwake(); // 0x004C222C-0x004C2230
		private IEnumerator WaitForPipeResponse(GameroomFacebook.OnComplete onCompleteDelegate, string callbackId); // 0x004C216C-0x004C222C
	}

	internal class GameroomFacebookLoader : FB.CompiledFacebookLoader // TypeDefIndex: 3019
	{
		// Properties
		protected override FacebookGameObject FBGameObject { get; } // 0x004C2520-0x004C25C4 
	
		// Constructors
		public GameroomFacebookLoader(); // 0x004C25C4-0x004C25CC
	}

	internal interface IGameroomFacebook : IPayFacebook, IFacebook // TypeDefIndex: 3020
	{
	}

	internal interface IGameroomFacebookImplementation : IGameroomFacebook, IGameroomFacebookResultHandler // TypeDefIndex: 3021
	{
		// Methods
		bool HaveReceivedPipeResponse();
		string GetPipeResponse(string callbackId);
	}

	internal interface IGameroomFacebookResultHandler : IFacebookResultHandler // TypeDefIndex: 3022
	{
	}

	internal interface IGameroomWrapper // TypeDefIndex: 3023
	{
		// Properties
		IDictionary<string, object> PipeResponse { get; set; }
	
		// Methods
		void Init(GameroomFacebook.OnComplete completeDelegate);
		void DoLoginRequest(string appID, string permissions, string callbackID, GameroomFacebook.OnComplete completeDelegate);
		void DoPayRequest(string appId, string method, string action, string product, string productId, string quantity, string quantityMin, string quantityMax, string requestId, string pricepointId, string testCurrency, string developerPayload, string callbackID, GameroomFacebook.OnComplete completeDelegate);
		void DoFeedShareRequest(string appId, string toId, string link, string linkName, string linkCaption, string linkDescription, string pictureLink, string mediaSource, string callbackID, GameroomFacebook.OnComplete completeDelegate);
		void DoAppRequestRequest(string appId, string message, string actionType, string objectId, string to, string filters, string excludeIDs, string maxRecipients, string data, string title, string callbackID, GameroomFacebook.OnComplete completeDelegate);
	}
}

namespace Facebook.Unity.Editor
{
	internal class EditorFacebook : FacebookBase, IMobileFacebookImplementation, ICanvasFacebookImplementation // TypeDefIndex: 3024
	{
		// Fields
		private IEditorWrapper editorWrapper; // 0x14
		[CompilerGenerated] // 0x00186274-0x00186284
		private bool <LimitEventUsage>k__BackingField; // 0x18
		[CompilerGenerated] // 0x00186284-0x00186294
		private ShareDialogMode <ShareDialogMode>k__BackingField; // 0x1C
	
		// Properties
		public override bool LimitEventUsage { [CompilerGenerated] /* 0x00186AC4-0x00186AD4 */ get; [CompilerGenerated] /* 0x00186AD4-0x00186AE4 */ set; } // 0x004B5DFC-0x004B5E04 0x004B5E04-0x004B5E0C
		public ShareDialogMode ShareDialogMode { [CompilerGenerated] /* 0x00186AE4-0x00186AF4 */ set; } // 0x004B5E0C-0x004B5E14
		public override string SDKName { get; } // 0x004B5E14-0x004B5E70 
		public override string SDKVersion { get; } // 0x004B5E70-0x004B5ECC 
		private static IFacebookCallbackHandler EditorGameObject { get; } // 0x004B5D7C-0x004B5DDC 
	
		// Constructors
		public EditorFacebook(IEditorWrapper wrapper, CallbackManager callbackManager); // 0x004B5CAC-0x004B5CD4
		public EditorFacebook(); // 0x004B5CD4-0x004B5D7C
	
		// Methods
		public override void Init(InitDelegate onInitComplete); // 0x004B5ECC-0x004B5FEC
		public override void LogInWithReadPermissions(IEnumerable<string> permissions, FacebookDelegate<ILoginResult> callback); // 0x004B5FEC-0x004B5FFC
		public override void LogInWithPublishPermissions(IEnumerable<string> permissions, FacebookDelegate<ILoginResult> callback); // 0x004B5FFC-0x004B6180
		public override void AppRequest(string message, OGActionType? actionType, string objectId, IEnumerable<string> to, IEnumerable<object> filters, IEnumerable<string> excludeIds, int? maxRecipients, string data, string title, FacebookDelegate<IAppRequestResult> callback); // 0x004B6180-0x004B62E4
		public override void ShareLink(Uri contentURL, string contentTitle, string contentDescription, Uri photoURL, FacebookDelegate<IShareResult> callback); // 0x004B62E4-0x004B6468
		public override void FeedShare(string toId, Uri link, string linkName, string linkCaption, string linkDescription, Uri picture, string mediaSource, FacebookDelegate<IShareResult> callback); // 0x004B6468-0x004B65EC
		public override void ActivateApp(string appId); // 0x004B65EC-0x004B6674
		public override void GetAppLink(FacebookDelegate<IAppLinkResult> callback); // 0x004B6674-0x004B67E4
		public override void AppEventsLogEvent(string logEvent, float? valueToSum, Dictionary<string, object> parameters); // 0x004B67E4-0x004B686C
		public override void AppEventsLogPurchase(float logPurchase, string currency, Dictionary<string, object> parameters); // 0x004B686C-0x004B68F4
		public bool IsImplicitPurchaseLoggingEnabled(); // 0x004B68F4-0x004B68FC
		public void FetchDeferredAppLink(FacebookDelegate<IAppLinkResult> callback); // 0x004B68FC-0x004B6C00
		public void Pay(string product, string action, int quantity, int? quantityMin, int? quantityMax, string requestId, string pricepointId, string testCurrency, FacebookDelegate<IPayResult> callback); // 0x004B6C90-0x004B6DF4
		public void RefreshCurrentAccessToken(FacebookDelegate<IAccessTokenRefreshResult> callback); // 0x004B6DF4-0x004B70B8
		public override void OnAppRequestsComplete(ResultContainer resultContainer); // 0x004B7148-0x004B71D8
		public override void OnGetAppLinkComplete(ResultContainer resultContainer); // 0x004B71D8-0x004B7268
		public override void OnLoginComplete(ResultContainer resultContainer); // 0x004B7268-0x004B72F0
		public override void OnShareLinkComplete(ResultContainer resultContainer); // 0x004B72F0-0x004B7380
		public void OnFetchDeferredAppLinkComplete(ResultContainer resultContainer); // 0x004B6C00-0x004B6C90
		public void OnPayComplete(ResultContainer resultContainer); // 0x004B7380-0x004B7410
		public void OnRefreshCurrentAccessTokenComplete(ResultContainer resultContainer); // 0x004B70B8-0x004B7148
		public void OnFacebookAuthResponseChange(ResultContainer resultContainer); // 0x004B7410-0x004B7498
		public void OnUrlResponse(string message); // 0x004B7498-0x004B7520
		public void OnHideUnity(bool hidden); // 0x004B7520-0x004B75A8
	}

	internal class EditorFacebookGameObject : FacebookGameObject // TypeDefIndex: 3025
	{
		// Constructors
		public EditorFacebookGameObject(); // 0x004B76F0-0x004B76F8
	
		// Methods
		protected override void OnAwake(); // 0x004B75A8-0x004B75AC
		private void OnEnable(); // 0x004B75AC-0x004B7648
		private void OnSceneLoaded(Scene scene, LoadSceneMode mode); // 0x004B7648-0x004B764C
		private void OnDisable(); // 0x004B764C-0x004B76E8
		public void onPurchaseCompleteHandler(object data); // 0x004B76E8-0x004B76F0
	}

	internal class EditorFacebookLoader : FB.CompiledFacebookLoader // TypeDefIndex: 3026
	{
		// Properties
		protected override FacebookGameObject FBGameObject { get; } // 0x004B76F8-0x004B7790 
	
		// Constructors
		public EditorFacebookLoader(); // 0x004B7790-0x004B7798
	}

	internal abstract class EditorFacebookMockDialog : MonoBehaviour // TypeDefIndex: 3027
	{
		// Fields
		private Rect modalRect; // 0x0C
		private GUIStyle modalStyle; // 0x1C
		[CompilerGenerated] // 0x00186294-0x001862A4
		private Utilities.Callback<ResultContainer> <Callback>k__BackingField; // 0x20
		[CompilerGenerated] // 0x001862A4-0x001862B4
		private string <CallbackID>k__BackingField; // 0x24
	
		// Properties
		public Utilities.Callback<ResultContainer> Callback { [CompilerGenerated] /* 0x00186AF4-0x00186B04 */ protected get; [CompilerGenerated] /* 0x00186B04-0x00186B14 */ set; } // 0x004B40D8-0x004B40E0 0x004B7798-0x004B77A0
		public string CallbackID { [CompilerGenerated] /* 0x00186B14-0x00186B24 */ protected get; [CompilerGenerated] /* 0x00186B24-0x00186B34 */ set; } // 0x004B40D0-0x004B40D8 0x004B77A0-0x004B77A8
		protected abstract string DialogTitle { get; }
	
		// Constructors
		protected EditorFacebookMockDialog(); // 0x004B40E8-0x004B40F0
	
		// Methods
		public void Start(); // 0x004B77A8-0x004B796C
		public void OnGUI(); // 0x004B796C-0x004B7A90
		protected abstract void DoGui();
		protected abstract void SendSuccessResult();
		protected virtual void SendCancelResult(); // 0x004B7A90-0x004B7C24
		protected virtual void SendErrorResult(string errorMessage); // 0x004B7C24-0x004B7D90
		private void OnGUIDialog(int windowId); // 0x004B7D90-0x004B82B8
	}

	internal class EditorWrapper : IEditorWrapper // TypeDefIndex: 3028
	{
		// Fields
		private IFacebookCallbackHandler callbackHandler; // 0x08
	
		// Constructors
		public EditorWrapper(IFacebookCallbackHandler callbackHandler); // 0x004B5DDC-0x004B5DFC
	
		// Methods
		public void Init(); // 0x004B82B8-0x004B83AC
		public void ShowLoginMockDialog(Utilities.Callback<ResultContainer> callback, string callbackId, string permsisions); // 0x004B83AC-0x004B8444
		public void ShowAppRequestMockDialog(Utilities.Callback<ResultContainer> callback, string callbackId); // 0x004B8444-0x004B84B8
		public void ShowPayMockDialog(Utilities.Callback<ResultContainer> callback, string callbackId); // 0x004B8568-0x004B85DC
		public void ShowMockShareDialog(Utilities.Callback<ResultContainer> callback, string subTitle, string callbackId); // 0x004B85DC-0x004B868C
		private void ShowEmptyMockDialog(Utilities.Callback<ResultContainer> callback, string callbackId, string title); // 0x004B84B8-0x004B8568
	}

	internal interface IEditorWrapper // TypeDefIndex: 3029
	{
		// Methods
		void Init();
		void ShowLoginMockDialog(Utilities.Callback<ResultContainer> callback, string callbackId, string permissions);
		void ShowAppRequestMockDialog(Utilities.Callback<ResultContainer> callback, string callbackId);
		void ShowPayMockDialog(Utilities.Callback<ResultContainer> callback, string callbackId);
		void ShowMockShareDialog(Utilities.Callback<ResultContainer> callback, string subTitle, string callbackId);
	}
}

namespace Facebook.Unity.Editor.Dialogs
{
	internal class EmptyMockDialog : EditorFacebookMockDialog // TypeDefIndex: 3030
	{
		// Fields
		[CompilerGenerated] // 0x001862B4-0x001862C4
		private string <EmptyDialogTitle>k__BackingField; // 0x28
	
		// Properties
		public string EmptyDialogTitle { [CompilerGenerated] /* 0x00186B34-0x00186B44 */ get; [CompilerGenerated] /* 0x00186B44-0x00186B54 */ set; } // 0x004B3F34-0x004B3F3C 0x004B3F3C-0x004B3F44
		protected override string DialogTitle { get; } // 0x004B3F44-0x004B3F4C 
	
		// Constructors
		public EmptyMockDialog(); // 0x004B40E0-0x004B40E8
	
		// Methods
		protected override void DoGui(); // 0x004B3F4C-0x004B3F50
		protected override void SendSuccessResult(); // 0x004B3F50-0x004B40D0
	}

	internal class MockLoginDialog : EditorFacebookMockDialog // TypeDefIndex: 3031
	{
		// Fields
		private string accessToken; // 0x28
	
		// Properties
		protected override string DialogTitle { get; } // 0x004B40F0-0x004B414C 
	
		// Nested types
		[CompilerGenerated] // 0x00185F04-0x00185F14
		private sealed class <>c__DisplayClass4_0 // TypeDefIndex: 3032
		{
			// Fields
			public string facebookID; // 0x08
			public MockLoginDialog <>4__this; // 0x0C
	
			// Constructors
			public <>c__DisplayClass4_0(); // 0x004B49A8-0x004B49B0
	
			// Methods
			internal void <SendSuccessResult>b__1(IGraphResult permResult); // 0x004B49B0-0x004B55FC
		}
	
		// Constructors
		public MockLoginDialog(); // 0x004B4560-0x004B45D4
	
		// Methods
		protected override void DoGui(); // 0x004B414C-0x004B439C
		protected override void SendSuccessResult(); // 0x004B4428-0x004B4560
		[CompilerGenerated] // 0x00186B54-0x00186B64
		private void <SendSuccessResult>b__4_0(IGraphResult graphResult); // 0x004B45D4-0x004B49A8
	}

	internal class MockShareDialog : EditorFacebookMockDialog // TypeDefIndex: 3033
	{
		// Fields
		[CompilerGenerated] // 0x001862C4-0x001862D4
		private string <SubTitle>k__BackingField; // 0x28
	
		// Properties
		public string SubTitle { [CompilerGenerated] /* 0x00186B64-0x00186B74 */ private get; [CompilerGenerated] /* 0x00186B74-0x00186B84 */ set; } // 0x004B55FC-0x004B5604 0x004B5604-0x004B560C
		protected override string DialogTitle { get; } // 0x004B560C-0x004B5684 
	
		// Constructors
		public MockShareDialog(); // 0x004B5CA4-0x004B5CAC
	
		// Methods
		protected override void DoGui(); // 0x004B5684-0x004B5688
		protected override void SendSuccessResult(); // 0x004B5688-0x004B5874
		protected override void SendCancelResult(); // 0x004B5B3C-0x004B5CA4
		private string GenerateFakePostID(); // 0x004B59BC-0x004B5B3C
	}
}

namespace Facebook.Unity.Mobile
{
	internal interface IMobileFacebook : IFacebook // TypeDefIndex: 3034
	{
		// Properties
		ShareDialogMode ShareDialogMode { set; }
	
		// Methods
		void FetchDeferredAppLink(FacebookDelegate<IAppLinkResult> callback);
		void RefreshCurrentAccessToken(FacebookDelegate<IAccessTokenRefreshResult> callback);
		bool IsImplicitPurchaseLoggingEnabled();
	}

	internal interface IMobileFacebookCallbackHandler : IFacebookCallbackHandler // TypeDefIndex: 3035
	{
	}

	internal interface IMobileFacebookImplementation : IMobileFacebook, IMobileFacebookResultHandler // TypeDefIndex: 3036
	{
	}

	internal interface IMobileFacebookResultHandler : IFacebookResultHandler // TypeDefIndex: 3037
	{
		// Methods
		void OnFetchDeferredAppLinkComplete(ResultContainer resultContainer);
		void OnRefreshCurrentAccessTokenComplete(ResultContainer resultContainer);
	}

	internal abstract class MobileFacebook : FacebookBase, IMobileFacebookImplementation // TypeDefIndex: 3038
	{
		// Fields
		private ShareDialogMode shareDialogMode; // 0x14
	
		// Properties
		public ShareDialogMode ShareDialogMode { set; } // 0x004C6D64-0x004C6D78
	
		// Constructors
		protected MobileFacebook(CallbackManager callbackManager); // 0x004C3344-0x004C3364
	
		// Methods
		public abstract void FetchDeferredAppLink(FacebookDelegate<IAppLinkResult> callback);
		public abstract void RefreshCurrentAccessToken(FacebookDelegate<IAccessTokenRefreshResult> callback);
		public abstract bool IsImplicitPurchaseLoggingEnabled();
		public override void OnLoginComplete(ResultContainer resultContainer); // 0x004C6D78-0x004C6E00
		public override void OnGetAppLinkComplete(ResultContainer resultContainer); // 0x004C6E00-0x004C6E90
		public override void OnAppRequestsComplete(ResultContainer resultContainer); // 0x004C6E90-0x004C6F20
		public void OnFetchDeferredAppLinkComplete(ResultContainer resultContainer); // 0x004C6F20-0x004C6FB0
		public override void OnShareLinkComplete(ResultContainer resultContainer); // 0x004C6FB0-0x004C7040
		public void OnRefreshCurrentAccessTokenComplete(ResultContainer resultContainer); // 0x004C7040-0x004C7140
		protected abstract void SetShareDialogMode(ShareDialogMode mode);
	}

	internal abstract class MobileFacebookGameObject : FacebookGameObject, IMobileFacebookCallbackHandler // TypeDefIndex: 3039
	{
		// Properties
		private IMobileFacebookImplementation MobileFacebook { get; } // 0x004C7140-0x004C722C 
	
		// Constructors
		protected MobileFacebookGameObject(); // 0x004C4E5C-0x004C4E64
	
		// Methods
		public void OnFetchDeferredAppLinkComplete(string message); // 0x004C722C-0x004C7334
		public void OnRefreshCurrentAccessTokenComplete(string message); // 0x004C7334-0x004C743C
	}
}

namespace Facebook.Unity.Mobile.IOS
{
	internal interface IIOSWrapper // TypeDefIndex: 3040
	{
		// Methods
		void Init(string appId, bool frictionlessRequests, string urlSuffix, string unityUserAgentSuffix);
		void LogInWithReadPermissions(int requestId, string scope);
		void LogInWithPublishPermissions(int requestId, string scope);
		void LogOut();
		void SetShareDialogMode(int mode);
		void ShareLink(int requestId, string contentURL, string contentTitle, string contentDescription, string photoURL);
		void FeedShare(int requestId, string toId, string link, string linkName, string linkCaption, string linkDescription, string picture, string mediaSource);
		void AppRequest(int requestId, string message, string actionType, string objectId, string[] to = null, int toLength = 0 /* Metadata: 0x0021BA09 */, string filters = "" /* Metadata: 0x0021BA0D */, string[] excludeIds = null, int excludeIdsLength = 0 /* Metadata: 0x0021BA11 */, bool hasMaxRecipients = false /* Metadata: 0x0021BA15 */, int maxRecipients = 0 /* Metadata: 0x0021BA16 */, string data = "" /* Metadata: 0x0021BA1A */, string title = "" /* Metadata: 0x0021BA1E */);
		void FBAppEventsActivateApp();
		void LogAppEvent(string logEvent, double valueToSum, int numParams, string[] paramKeys, string[] paramVals);
		void LogPurchaseAppEvent(double logPurchase, string currency, int numParams, string[] paramKeys, string[] paramVals);
		void FBAppEventsSetLimitEventUsage(bool limitEventUsage);
		void GetAppLink(int requestId);
		void RefreshCurrentAccessToken(int requestId);
		string FBSdkVersion();
		string FBGetUserID();
		void FetchDeferredAppLink(int requestId);
	}

	internal class IOSFacebook : MobileFacebook // TypeDefIndex: 3041
	{
		// Fields
		private bool limitEventUsage; // 0x18
		private IIOSWrapper iosWrapper; // 0x1C
		private string userID; // 0x20
	
		// Properties
		public override bool LimitEventUsage { get; set; } // 0x004C51C0-0x004C51C8 0x004C51C8-0x004C52AC
		public override string SDKName { get; } // 0x004C52AC-0x004C5308 
		public override string SDKVersion { get; } // 0x004C5308-0x004C53E0 
	
		// Nested types
		private class NativeDict // TypeDefIndex: 3042
		{
			// Fields
			[CompilerGenerated] // 0x001862D4-0x001862E4
			private int <NumEntries>k__BackingField; // 0x08
			[CompilerGenerated] // 0x001862E4-0x001862F4
			private string[] <Keys>k__BackingField; // 0x0C
			[CompilerGenerated] // 0x001862F4-0x00186304
			private string[] <Values>k__BackingField; // 0x10
	
			// Properties
			public int NumEntries { [CompilerGenerated] /* 0x00186B84-0x00186B94 */ get; [CompilerGenerated] /* 0x00186B94-0x00186BA4 */ set; } // 0x004C6590-0x004C6598 0x004C6CA8-0x004C6CB0
			public string[] Keys { [CompilerGenerated] /* 0x00186BA4-0x00186BB4 */ get; [CompilerGenerated] /* 0x00186BB4-0x00186BC4 */ set; } // 0x004C6598-0x004C65A0 0x004C6C98-0x004C6CA0
			public string[] Values { [CompilerGenerated] /* 0x00186BC4-0x00186BD4 */ get; [CompilerGenerated] /* 0x00186BD4-0x00186BE4 */ set; } // 0x004C65A0-0x004C65A8 0x004C6CA0-0x004C6CA8
	
			// Constructors
			public NativeDict(); // 0x004C6C70-0x004C6C98
		}
	
		// Constructors
		public IOSFacebook(); // 0x004C4F10-0x004C4F90
		public IOSFacebook(IIOSWrapper iosWrapper, CallbackManager callbackManager); // 0x004C50CC-0x004C51C0
	
		// Methods
		public void Init(string appId, bool frictionlessRequests, string iosURLSuffix, HideUnityDelegate hideUnityDelegate, InitDelegate onInitComplete); // 0x004BB1B8-0x004BB2C8
		public override void LogInWithReadPermissions(IEnumerable<string> permissions, FacebookDelegate<ILoginResult> callback); // 0x004C53E0-0x004C54F4
		public override void LogInWithPublishPermissions(IEnumerable<string> permissions, FacebookDelegate<ILoginResult> callback); // 0x004C54F4-0x004C5608
		public override void LogOut(); // 0x004C5608-0x004C5738
		public override void AppRequest(string message, OGActionType? actionType, string objectId, IEnumerable<string> to, IEnumerable<object> filters, IEnumerable<string> excludeIds, int? maxRecipients, string data, string title, FacebookDelegate<IAppRequestResult> callback); // 0x004C5738-0x004C5B00
		public override void ShareLink(Uri contentURL, string contentTitle, string contentDescription, Uri photoURL, FacebookDelegate<IShareResult> callback); // 0x004C5B00-0x004C5C44
		public override void FeedShare(string toId, Uri link, string linkName, string linkCaption, string linkDescription, Uri picture, string mediaSource, FacebookDelegate<IShareResult> callback); // 0x004C5D0C-0x004C5F6C
		public override void AppEventsLogEvent(string logEvent, float? valueToSum, Dictionary<string, object> parameters); // 0x004C5F6C-0x004C61D8
		public override void AppEventsLogPurchase(float logPurchase, string currency, Dictionary<string, object> parameters); // 0x004C65A8-0x004C6710
		public override bool IsImplicitPurchaseLoggingEnabled(); // 0x004C6710-0x004C6718
		public override void ActivateApp(string appId); // 0x004C6718-0x004C67F0
		public override void FetchDeferredAppLink(FacebookDelegate<IAppLinkResult> callback); // 0x004C67F0-0x004C68F0
		public override void GetAppLink(FacebookDelegate<IAppLinkResult> callback); // 0x004C68F0-0x004C6A40
		public override void RefreshCurrentAccessToken(FacebookDelegate<IAccessTokenRefreshResult> callback); // 0x004C6A40-0x004C6B90
		protected override void SetShareDialogMode(ShareDialogMode mode); // 0x004C6B90-0x004C6C70
		private static IIOSWrapper GetIOSWrapper(); // 0x004C4F90-0x004C50CC
		private static NativeDict MarshallDict(Dictionary<string, object> dict); // 0x004C61D8-0x004C6590
		private int AddCallback<T>(FacebookDelegate<T> callback)
			where T : IResult;
	}

	internal class IOSFacebookGameObject : MobileFacebookGameObject // TypeDefIndex: 3043
	{
		// Constructors
		public IOSFacebookGameObject(); // 0x004C6CB0-0x004C6CB8
	}

	internal class IOSFacebookLoader : FB.CompiledFacebookLoader // TypeDefIndex: 3044
	{
		// Properties
		protected override FacebookGameObject FBGameObject { get; } // 0x004C6CB8-0x004C6D5C 
	
		// Constructors
		public IOSFacebookLoader(); // 0x004C6D5C-0x004C6D64
	}
}

namespace Facebook.Unity.Mobile.Android
{
	internal sealed class AndroidFacebook : MobileFacebook // TypeDefIndex: 3045
	{
		// Fields
		private bool limitEventUsage; // 0x18
		private IAndroidWrapper androidWrapper; // 0x1C
		private string userID; // 0x20
		[CompilerGenerated] // 0x00186304-0x00186314
		private string <KeyHash>k__BackingField; // 0x24
	
		// Properties
		private string KeyHash { [CompilerGenerated] /* 0x00186BE4-0x00186BF4 */ set; } // 0x004C3364-0x004C336C
		public override bool LimitEventUsage { get; set; } // 0x004C336C-0x004C3374 0x004C3374-0x004C33FC
		public override string SDKName { get; } // 0x004C3560-0x004C35BC 
		public override string SDKVersion { get; } // 0x004C35BC-0x004C36BC 
	
		// Nested types
		private class JavaMethodCall<T> : MethodCall<T> // TypeDefIndex: 3046
			where T : IResult
		{
			// Fields
			private AndroidFacebook androidImpl;
	
			// Constructors
			public JavaMethodCall(AndroidFacebook androidImpl, string methodName);
	
			// Methods
			public override void Call(MethodArguments args = null);
		}
	
		// Constructors
		public AndroidFacebook(); // 0x004C3048-0x004C30C8
		public AndroidFacebook(IAndroidWrapper androidWrapper, CallbackManager callbackManager); // 0x004C3204-0x004C3344
	
		// Methods
		public void Init(string appId, HideUnityDelegate hideUnityDelegate, InitDelegate onInitComplete); // 0x004BB464-0x004BB5BC
		public override void LogInWithReadPermissions(IEnumerable<string> permissions, FacebookDelegate<ILoginResult> callback); // 0x004C36BC-0x004C3808
		public override void LogInWithPublishPermissions(IEnumerable<string> permissions, FacebookDelegate<ILoginResult> callback); // 0x004C3808-0x004C3954
		public override void LogOut(); // 0x004C3954-0x004C3A0C
		public override void AppRequest(string message, OGActionType? actionType, string objectId, IEnumerable<string> to, IEnumerable<object> filters, IEnumerable<string> excludeIds, int? maxRecipients, string data, string title, FacebookDelegate<IAppRequestResult> callback); // 0x004C3A0C-0x004C3E18
		public override void ShareLink(Uri contentURL, string contentTitle, string contentDescription, Uri photoURL, FacebookDelegate<IShareResult> callback); // 0x004C3E18-0x004C403C
		public override void FeedShare(string toId, Uri link, string linkName, string linkCaption, string linkDescription, Uri picture, string mediaSource, FacebookDelegate<IShareResult> callback); // 0x004C403C-0x004C4334
		public override void GetAppLink(FacebookDelegate<IAppLinkResult> callback); // 0x004C4334-0x004C4434
		public override void AppEventsLogEvent(string logEvent, float? valueToSum, Dictionary<string, object> parameters); // 0x004C4434-0x004C4644
		public override void AppEventsLogPurchase(float logPurchase, string currency, Dictionary<string, object> parameters); // 0x004C4644-0x004C4824
		public override bool IsImplicitPurchaseLoggingEnabled(); // 0x004C4824-0x004C4924
		public override void ActivateApp(string appId); // 0x004C4924-0x004C498C
		public override void FetchDeferredAppLink(FacebookDelegate<IAppLinkResult> callback); // 0x004C498C-0x004C4AA8
		public override void RefreshCurrentAccessToken(FacebookDelegate<IAccessTokenRefreshResult> callback); // 0x004C4AA8-0x004C4BA8
		protected override void SetShareDialogMode(ShareDialogMode mode); // 0x004C4BA8-0x004C4C80
		private static IAndroidWrapper GetAndroidWrapper(); // 0x004C30C8-0x004C3204
		private void CallFB(string method, string args); // 0x004C33FC-0x004C3560
	}

	internal class AndroidFacebookGameObject : MobileFacebookGameObject // TypeDefIndex: 3047
	{
		// Constructors
		public AndroidFacebookGameObject(); // 0x004C4E54-0x004C4E5C
	
		// Methods
		protected override void OnAwake(); // 0x004C4C80-0x004C4D10
		private void OnEnable(); // 0x004C4D10-0x004C4DAC
		private void OnSceneLoaded(Scene scene, LoadSceneMode mode); // 0x004C4DAC-0x004C4DB0
		private void OnDisable(); // 0x004C4DB0-0x004C4E4C
		public void onPurchaseCompleteHandler(object data); // 0x004C4E4C-0x004C4E54
	}

	internal class AndroidFacebookLoader : FB.CompiledFacebookLoader // TypeDefIndex: 3048
	{
		// Properties
		protected override FacebookGameObject FBGameObject { get; } // 0x004C4E64-0x004C4F08 
	
		// Constructors
		public AndroidFacebookLoader(); // 0x004C4F08-0x004C4F10
	}

	internal interface IAndroidWrapper // TypeDefIndex: 3049
	{
		// Methods
		T CallStatic<T>(string methodName);
		void CallStatic(string methodName, params /* 0x00186C34-0x00186C44 */ object[] args);
	}
}

namespace Facebook.Unity.Canvas
{
	internal sealed class CanvasFacebook : FacebookBase, ICanvasFacebookImplementation // TypeDefIndex: 3050
	{
		// Fields
		private string appId; // 0x14
		private string appLinkUrl; // 0x18
		private ICanvasJSWrapper canvasJSWrapper; // 0x1C
		private HideUnityDelegate onHideUnityDelegate; // 0x20
		[CompilerGenerated] // 0x00186314-0x00186324
		private bool <LimitEventUsage>k__BackingField; // 0x24
	
		// Properties
		public override bool LimitEventUsage { [CompilerGenerated] /* 0x00186BF4-0x00186C04 */ get; [CompilerGenerated] /* 0x00186C04-0x00186C14 */ set; } // 0x004A9488-0x004A9490 0x004A9490-0x004A9498
		public override string SDKName { get; } // 0x004A9498-0x004A94F4 
		public override string SDKVersion { get; } // 0x004A94F4-0x004A95CC 
		public override string SDKUserAgent { get; } // 0x004A95CC-0x004A9984 
	
		// Nested types
		private class CanvasUIMethodCall<T> : MethodCall<T> // TypeDefIndex: 3051
			where T : IResult
		{
			// Fields
			private CanvasFacebook canvasImpl;
			private string callbackMethod;
	
			// Constructors
			public CanvasUIMethodCall(CanvasFacebook canvasImpl, string methodName, string callbackMethod);
	
			// Methods
			public override void Call(MethodArguments args);
			private void UI(string method, MethodArguments args, FacebookDelegate<T> callback = null);
		}
	
		[Serializable]
		[CompilerGenerated] // 0x00185F14-0x00185F24
		private sealed class <>c // TypeDefIndex: 3052
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static Utilities.Callback<ResultContainer> <>9__40_0; // 0x04
	
			// Constructors
			static <>c(); // 0x004ADC18-0x004ADC8C
			public <>c(); // 0x004ADC8C-0x004ADC94
	
			// Methods
			internal void <OnFacebookAuthResponseChange>b__40_0(ResultContainer formattedResponse); // 0x004ADC94-0x004ADD68
		}
	
		[CompilerGenerated] // 0x00185F24-0x00185F34
		private sealed class <>c__DisplayClass47_0 // TypeDefIndex: 3053
		{
			// Fields
			public ResultContainer result; // 0x08
			public Utilities.Callback<ResultContainer> callback; // 0x0C
	
			// Constructors
			public <>c__DisplayClass47_0(); // 0x004AD84C-0x004AD854
	
			// Methods
			internal void <FormatAuthResponse>b__0(IGraphResult r); // 0x004ADD70-0x004AE668
		}
	
		// Constructors
		public CanvasFacebook(); // 0x004A9280-0x004A9304
		public CanvasFacebook(ICanvasJSWrapper canvasJSWrapper, CallbackManager callbackManager); // 0x004A9440-0x004A9468
	
		// Methods
		private static ICanvasJSWrapper GetCanvasJSWrapper(); // 0x004A9304-0x004A9440
		public void Init(string appId, bool cookie, bool logging, bool status, bool xfbml, string channelUrl, string authResponse, bool frictionlessRequests, string javascriptSDKLocale, bool loadDebugJSSDK, HideUnityDelegate hideUnityDelegate, InitDelegate onInitComplete); // 0x004A9CA8-0x004AA14C
		public override void LogInWithPublishPermissions(IEnumerable<string> permissions, FacebookDelegate<ILoginResult> callback); // 0x004AA3E8-0x004AA598
		public override void LogInWithReadPermissions(IEnumerable<string> permissions, FacebookDelegate<ILoginResult> callback); // 0x004AA5A0-0x004AA750
		public override void LogOut(); // 0x004AA750-0x004AA880
		public override void AppRequest(string message, OGActionType? actionType, string objectId, IEnumerable<string> to, IEnumerable<object> filters, IEnumerable<string> excludeIds, int? maxRecipients, string data, string title, FacebookDelegate<IAppRequestResult> callback); // 0x004AA8E8-0x004AAD28
		public override void ActivateApp(string appId); // 0x004AB1F8-0x004AB2D0
		public override void ShareLink(Uri contentURL, string contentTitle, string contentDescription, Uri photoURL, FacebookDelegate<IShareResult> callback); // 0x004AB2D0-0x004AB508
		public override void FeedShare(string toId, Uri link, string linkName, string linkCaption, string linkDescription, Uri picture, string mediaSource, FacebookDelegate<IShareResult> callback); // 0x004AB68C-0x004AB998
		public void Pay(string product, string action, int quantity, int? quantityMin, int? quantityMax, string requestId, string pricepointId, string testCurrency, FacebookDelegate<IPayResult> callback); // 0x004AB998-0x004ABA04
		public override void GetAppLink(FacebookDelegate<IAppLinkResult> callback); // 0x004ABE58-0x004ABFA0
		public override void AppEventsLogEvent(string logEvent, float? valueToSum, Dictionary<string, object> parameters); // 0x004ABFE4-0x004AC120
		public override void AppEventsLogPurchase(float purchaseAmount, string currency, Dictionary<string, object> parameters); // 0x004AC120-0x004AC254
		public override void OnLoginComplete(ResultContainer result); // 0x004AC254-0x004AC2F4
		public override void OnGetAppLinkComplete(ResultContainer message); // 0x004ACE64-0x004ACEEC
		public void OnFacebookAuthResponseChange(ResultContainer resultContainer); // 0x004ACEEC-0x004AD020
		public void OnPayComplete(ResultContainer resultContainer); // 0x004AD020-0x004AD0B0
		public override void OnAppRequestsComplete(ResultContainer resultContainer); // 0x004AD198-0x004AD228
		public override void OnShareLinkComplete(ResultContainer resultContainer); // 0x004AD228-0x004AD2B8
		public void OnUrlResponse(string url); // 0x004AD3D0-0x004AD3D8
		public void OnHideUnity(bool isGameShown); // 0x004AD3D8-0x004AD3E8
		private static void FormatAuthResponse(ResultContainer result, Utilities.Callback<ResultContainer> callback); // 0x004AC2F4-0x004ACE64
		private void PayImpl(string product, string productId, string action, int quantity, int? quantityMin, int? quantityMax, string requestId, string pricepointId, string testCurrency, string developerPayload, FacebookDelegate<IPayResult> callback); // 0x004ABA04-0x004ABE58
		[CompilerGenerated] // 0x00186C14-0x00186C24
		private void <OnLoginComplete>b__37_0(ResultContainer formattedResponse); // 0x004ADA0C-0x004ADA94
	}

	internal class CanvasFacebookGameObject : FacebookGameObject, ICanvasFacebookCallbackHandler // TypeDefIndex: 3054
	{
		// Properties
		protected ICanvasFacebookImplementation CanvasFacebookImpl { get; } // 0x004AE668-0x004AE754 
	
		// Constructors
		public CanvasFacebookGameObject(); // 0x004AEDBC-0x004AEDC4
	
		// Methods
		public void OnPayComplete(string result); // 0x004AE75C-0x004AE864
		public void OnFacebookAuthResponseChange(string message); // 0x004AE9B8-0x004AEAC0
		public void OnUrlResponse(string message); // 0x004AEAC0-0x004AEBA8
		public void OnHideUnity(bool hide); // 0x004AEBA8-0x004AEC90
		protected override void OnAwake(); // 0x004AEC90-0x004AEDBC
	}

	internal class CanvasFacebookLoader : FB.CompiledFacebookLoader // TypeDefIndex: 3055
	{
		// Properties
		protected override FacebookGameObject FBGameObject { get; } // 0x004AEDCC-0x004AEE70 
	
		// Constructors
		public CanvasFacebookLoader(); // 0x004AEE78-0x004AEE80
	}

	internal interface ICanvasFacebook : IPayFacebook, IFacebook // TypeDefIndex: 3056
	{
	}

	internal interface ICanvasFacebookCallbackHandler : IFacebookCallbackHandler // TypeDefIndex: 3057
	{
		// Methods
		void OnPayComplete(string message);
		void OnFacebookAuthResponseChange(string message);
		void OnUrlResponse(string message);
		void OnHideUnity(bool hide);
	}

	internal interface ICanvasFacebookImplementation : ICanvasFacebook, ICanvasFacebookResultHandler // TypeDefIndex: 3058
	{
	}

	internal interface ICanvasFacebookResultHandler : IFacebookResultHandler // TypeDefIndex: 3059
	{
		// Methods
		void OnPayComplete(ResultContainer resultContainer);
		void OnFacebookAuthResponseChange(ResultContainer resultContainer);
		void OnUrlResponse(string message);
		void OnHideUnity(bool hide);
	}

	internal interface ICanvasJSWrapper // TypeDefIndex: 3060
	{
		// Methods
		string GetSDKVersion();
		void DisableFullScreen();
		void Init(string connectFacebookUrl, string locale, int debug, string initParams, int status);
		void Login(IEnumerable<string> scope, string callback_id);
		void Logout();
		void ActivateApp();
		void LogAppEvent(string eventName, float? valueToSum, string parameters);
		void LogPurchase(float purchaseAmount, string currency, string parameters);
		void Ui(string x, string uid, string callbackMethodName);
		void InitScreenPosition();
	}

	internal class JsBridge : MonoBehaviour // TypeDefIndex: 3061
	{
		// Fields
		private ICanvasFacebookCallbackHandler facebook; // 0x0C
	
		// Constructors
		public JsBridge(); // 0x004AF610-0x004AF618
	
		// Methods
		public void Start(); // 0x004AEE88-0x004AEEF0
		public void OnLoginComplete(string responseJsonData = "" /* Metadata: 0x0021BA22 */); // 0x004AEEF0-0x004AEFD0
		public void OnFacebookAuthResponseChange(string responseJsonData = "" /* Metadata: 0x0021BA26 */); // 0x004AEFD0-0x004AF0B0
		public void OnPayComplete(string responseJsonData = "" /* Metadata: 0x0021BA2A */); // 0x004AF0B0-0x004AF190
		public void OnAppRequestsComplete(string responseJsonData = "" /* Metadata: 0x0021BA2E */); // 0x004AF190-0x004AF270
		public void OnShareLinkComplete(string responseJsonData = "" /* Metadata: 0x0021BA32 */); // 0x004AF270-0x004AF350
		public void OnFacebookFocus(string state); // 0x004AF350-0x004AF450
		public void OnInitComplete(string responseJsonData = "" /* Metadata: 0x0021BA36 */); // 0x004AF450-0x004AF530
		public void OnUrlResponse(string url = "" /* Metadata: 0x0021BA3A */); // 0x004AF530-0x004AF610
	}
}

namespace UnityEngine.Networking
{
	internal class ChannelBuffer : IDisposable // TypeDefIndex: 3063
	{
		// Fields
		private NetworkConnection m_Connection; // 0x08
		private ChannelPacket m_CurrentPacket; // 0x0C
		private float m_LastFlushTime; // 0x18
		private byte m_ChannelId; // 0x1C
		private int m_MaxPacketSize; // 0x20
		private bool m_IsReliable; // 0x24
		private bool m_AllowFragmentation; // 0x25
		private bool m_IsBroken; // 0x26
		private int m_MaxPendingPacketCount; // 0x28
		private Queue<ChannelPacket> m_PendingPackets; // 0x2C
		private static List<ChannelPacket> s_FreePackets; // 0x00
		internal static int pendingPacketCount; // 0x04
		public float maxDelay; // 0x30
		private float m_LastBufferedMessageCountTimer; // 0x34
		[CompilerGenerated] // 0x00187EBC-0x00187EF0
		[DebuggerBrowsable] // 0x00187EBC-0x00187EF0
		private int <numBufferedPerSecond>k__BackingField; // 0x38
		[CompilerGenerated] // 0x00187EF0-0x00187F24
		[DebuggerBrowsable] // 0x00187EF0-0x00187F24
		private int <lastBufferedPerSecond>k__BackingField; // 0x3C
		private static NetworkWriter s_SendWriter; // 0x08
		private static NetworkWriter s_FragmentWriter; // 0x0C
		private bool m_Disposed; // 0x40
		internal NetBuffer fragmentBuffer; // 0x44
		private bool readingFragment; // 0x48
	
		// Properties
		public int numBufferedPerSecond { [CompilerGenerated] /* 0x001888AC-0x001888BC */ get; [CompilerGenerated] /* 0x001888BC-0x001888CC */ private set; } // 0x0039F574-0x0039F57C 0x0039F57C-0x0039F584
		private int lastBufferedPerSecond { [CompilerGenerated] /* 0x001888CC-0x001888DC */ set; } // 0x0039F584-0x0039F58C
	
		// Constructors
		public ChannelBuffer(NetworkConnection conn, int bufferSize, byte cid, bool isReliable, bool isSequenced); // 0x0039F27C-0x0039F484
		static ChannelBuffer(); // 0x003A1CC0-0x003A1F04
	
		// Methods
		public void Dispose(); // 0x0039F58C-0x0039F628
		protected virtual void Dispose(bool disposing); // 0x0039F628-0x0039F88C
		public bool SetOption(ChannelOption option, int value); // 0x0039F88C-0x0039FDBC
		public void CheckInternalBuffer(); // 0x0039FE54-0x0039FEE8
		public bool SendWriter(NetworkWriter writer); // 0x003A01C8-0x003A02E0
		internal bool HandleFragment(NetworkReader reader); // 0x003A0B10-0x003A0BDC
		internal bool SendFragmentBytes(byte[] bytes, int bytesToSend); // 0x003A0D70-0x003A1788
		internal bool SendBytes(byte[] bytes, int bytesToSend); // 0x003A02E0-0x003A0B10
		private void QueuePacket(); // 0x003A1788-0x003A1888
		private ChannelPacket AllocPacket(); // 0x003A1888-0x003A1ADC
		private static void FreePacket(ChannelPacket packet); // 0x003A1ADC-0x003A1C28
		public bool SendInternalBuffer(); // 0x0039FEE8-0x003A01C8
	}

	internal struct ChannelPacket // TypeDefIndex: 3064
	{
		// Fields
		private int m_Position; // 0x00
		private byte[] m_Buffer; // 0x04
		private bool m_IsReliable; // 0x08
	
		// Constructors
		public ChannelPacket(int packetSize, bool isReliable); // 0x003A1F04-0x003A1F0C
	
		// Methods
		public void Reset(); // 0x003A1F0C-0x003A1F18
		public bool IsEmpty(); // 0x003A1F18-0x003A1F2C
		public void Write(byte[] bytes, int numBytes); // 0x003A1F2C-0x003A1F74
		public bool HasSpace(int numBytes); // 0x003A1F74-0x003A1FB0
		public bool SendToTransport(NetworkConnection conn, int channelId); // 0x003A1FB0-0x003A1FB8
	}

	[Obsolete] // 0x00186E1C-0x00186E50
	public class ClientScene // TypeDefIndex: 3065
	{
		// Fields
		private static List<UnityEngine.Networking.PlayerController> s_LocalPlayers; // 0x00
		private static NetworkConnection s_ReadyConnection; // 0x04
		private static Dictionary<NetworkSceneId, NetworkIdentity> s_SpawnableObjects; // 0x08
		private static bool s_IsReady; // 0x0C
		private static bool s_IsSpawnFinished; // 0x0D
		private static NetworkScene s_NetworkScene; // 0x10
		private static ObjectSpawnSceneMessage s_ObjectSpawnSceneMessage; // 0x14
		private static ObjectSpawnFinishedMessage s_ObjectSpawnFinishedMessage; // 0x18
		private static ObjectDestroyMessage s_ObjectDestroyMessage; // 0x1C
		private static ObjectSpawnMessage s_ObjectSpawnMessage; // 0x20
		private static OwnerMessage s_OwnerMessage; // 0x24
		private static ClientAuthorityMessage s_ClientAuthorityMessage; // 0x28
		private static int s_ReconnectId; // 0x2C
		private static PeerInfoMessage[] s_Peers; // 0x30
		private static List<PendingOwner> s_PendingOwnerIds; // 0x34
		[CompilerGenerated] // 0x00187F24-0x00187F34
		private static NetworkMessageDelegate <>f__mg$cache0; // 0x38
		[CompilerGenerated] // 0x00187F34-0x00187F44
		private static NetworkMessageDelegate <>f__mg$cache1; // 0x3C
		[CompilerGenerated] // 0x00187F44-0x00187F54
		private static NetworkMessageDelegate <>f__mg$cache2; // 0x40
		[CompilerGenerated] // 0x00187F54-0x00187F64
		private static NetworkMessageDelegate <>f__mg$cache3; // 0x44
		[CompilerGenerated] // 0x00187F64-0x00187F74
		private static NetworkMessageDelegate <>f__mg$cache4; // 0x48
		[CompilerGenerated] // 0x00187F74-0x00187F84
		private static NetworkMessageDelegate <>f__mg$cache5; // 0x4C
		[CompilerGenerated] // 0x00187F84-0x00187F94
		private static NetworkMessageDelegate <>f__mg$cache6; // 0x50
		[CompilerGenerated] // 0x00187F94-0x00187FA4
		private static NetworkMessageDelegate <>f__mg$cache7; // 0x54
		[CompilerGenerated] // 0x00187FA4-0x00187FB4
		private static NetworkMessageDelegate <>f__mg$cache8; // 0x58
		[CompilerGenerated] // 0x00187FB4-0x00187FC4
		private static NetworkMessageDelegate <>f__mg$cache9; // 0x5C
		[CompilerGenerated] // 0x00187FC4-0x00187FD4
		private static NetworkMessageDelegate <>f__mg$cacheA; // 0x60
		[CompilerGenerated] // 0x00187FD4-0x00187FE4
		private static NetworkMessageDelegate <>f__mg$cacheB; // 0x64
		[CompilerGenerated] // 0x00187FE4-0x00187FF4
		private static NetworkMessageDelegate <>f__mg$cacheC; // 0x68
		[CompilerGenerated] // 0x00187FF4-0x00188004
		private static NetworkMessageDelegate <>f__mg$cacheD; // 0x6C
		[CompilerGenerated] // 0x00188004-0x00188014
		private static NetworkMessageDelegate <>f__mg$cacheE; // 0x70
		[CompilerGenerated] // 0x00188014-0x00188024
		private static NetworkMessageDelegate <>f__mg$cacheF; // 0x74
		[CompilerGenerated] // 0x00188024-0x00188034
		private static NetworkMessageDelegate <>f__mg$cache10; // 0x78
		[CompilerGenerated] // 0x00188034-0x00188044
		private static NetworkMessageDelegate <>f__mg$cache11; // 0x7C
		[CompilerGenerated] // 0x00188044-0x00188054
		private static NetworkMessageDelegate <>f__mg$cache12; // 0x80
	
		// Properties
		public static List<UnityEngine.Networking.PlayerController> localPlayers { get; } // 0x003A22D8-0x003A2364 
		public static bool ready { get; } // 0x003A2364-0x003A23F0 
		public static NetworkConnection readyConnection { get; } // 0x003A23F0-0x003A247C 
		public static Dictionary<NetworkInstanceId, NetworkIdentity> objects { get; } // 0x003A247C-0x003A2524 
	
		// Nested types
		private struct PendingOwner // TypeDefIndex: 3066
		{
			// Fields
			public NetworkInstanceId netId; // 0x00
			public short playerControllerId; // 0x04
		}
	
		// Constructors
		static ClientScene(); // 0x003AF97C-0x003AFB88
	
		// Methods
		private static bool hasMigrationPending(); // 0x003A1FC8-0x003A2060
		public static void SetReconnectId(int newReconnectId, PeerInfoMessage[] peers); // 0x003A2060-0x003A21B0
		internal static void SetNotReady(); // 0x003A2248-0x003A22D8
		internal static void InternalAddPlayer(NetworkIdentity view, short playerControllerId); // 0x003A2524-0x003A2A38
		public static bool AddPlayer(short playerControllerId); // 0x003A2B58-0x003A2BDC
		public static bool AddPlayer(NetworkConnection readyConn, short playerControllerId); // 0x003A2BDC-0x003A2C68
		public static bool AddPlayer(NetworkConnection readyConn, short playerControllerId, MessageBase extraMessage); // 0x003A2C68-0x003A38E8
		public static bool SendReconnectMessage(MessageBase extraMessage); // 0x003A3AB8-0x003A413C
		public static bool RemovePlayer(short playerControllerId); // 0x003A413C-0x003A4748
		public static bool Ready(NetworkConnection conn); // 0x003A495C-0x003A4C40
		public static NetworkClient ConnectLocalServer(); // 0x003A4C40-0x003A4D18
		internal static NetworkClient ReconnectLocalServer(); // 0x003A4FF4-0x003A50CC
		internal static void ClearLocalPlayers(); // 0x003A50CC-0x003A5180
		internal static void HandleClientDisconnect(NetworkConnection conn); // 0x003A5180-0x003A5298
		internal static void PrepareToSpawnSceneObjects(); // 0x003A5298-0x003A561C
		internal static NetworkIdentity SpawnSceneObject(NetworkSceneId sceneId); // 0x003A5624-0x003A57A8
		internal static void RegisterSystemHandlers(NetworkClient client, bool localClient); // 0x003A57A8-0x003A6A28
		public static void RegisterPrefab(GameObject prefab); // 0x003A6A64-0x003A6AE8
		public static void DestroyAllClientObjects(); // 0x003A6AE8-0x003A6B90
		public static void SetLocalObject(NetworkInstanceId netId, GameObject obj); // 0x003A6B90-0x003A6C68
		public static GameObject FindLocalObject(NetworkInstanceId netId); // 0x003A6C68-0x003A6D18
		private static void ApplySpawnPayload(NetworkIdentity uv, Vector3 position, byte[] payload, NetworkInstanceId netId, GameObject newGameObject, NetworkMessage netMsg); // 0x003A6D18-0x003A6FDC
		private static void OnObjectSpawn(NetworkMessage netMsg); // 0x003A7B48-0x003A9600
		private static void OnObjectSpawnScene(NetworkMessage netMsg); // 0x003A98C8-0x003AA59C
		private static void OnObjectSpawnFinished(NetworkMessage netMsg); // 0x003AA59C-0x003AA9DC
		private static void OnObjectDestroy(NetworkMessage netMsg); // 0x003AA9E4-0x003AAFE0
		private static void OnLocalClientObjectDestroy(NetworkMessage netMsg); // 0x003AB084-0x003AB2C8
		private static void OnLocalClientObjectHide(NetworkMessage netMsg); // 0x003AB2C8-0x003AB540
		private static void OnLocalClientObjectSpawn(NetworkMessage netMsg); // 0x003AB77C-0x003AB8C4
		private static void OnLocalClientObjectSpawnScene(NetworkMessage netMsg); // 0x003AB8C4-0x003ABA0C
		private static void OnUpdateVarsMessage(NetworkMessage netMsg); // 0x003ABA0C-0x003ABE50
		private static void OnRPCMessage(NetworkMessage netMsg); // 0x003ABEE8-0x003AC440
		private static void OnSyncEventMessage(NetworkMessage netMsg); // 0x003AD0AC-0x003AD354
		private static void OnSyncListMessage(NetworkMessage netMsg); // 0x003ADE00-0x003AE0A8
		private static void OnClientAuthority(NetworkMessage netMsg); // 0x003AEB54-0x003AF00C
		private static void OnOwnerMessage(NetworkMessage netMsg); // 0x003AF124-0x003AF7B8
		private static void CheckForOwner(NetworkIdentity uv); // 0x003A7704-0x003A7B48
	}

	[AttributeUsage] // 0x00186E50-0x00186E9C
	[Obsolete] // 0x00186E50-0x00186E9C
	public class CommandAttribute : Attribute // TypeDefIndex: 3067
	{
		// Fields
		public int channel; // 0x08
	
		// Constructors
		public CommandAttribute(); // 0x003AFB88-0x003AFB98
	}

	[AttributeUsage] // 0x00186E9C-0x00186EE8
	[Obsolete] // 0x00186E9C-0x00186EE8
	public class ClientAttribute : Attribute // TypeDefIndex: 3068
	{
		// Constructors
		public ClientAttribute(); // 0x003A1FB8-0x003A1FC0
	}

	[AttributeUsage] // 0x00186EE8-0x00186F34
	[Obsolete] // 0x00186EE8-0x00186F34
	public class ClientCallbackAttribute : Attribute // TypeDefIndex: 3069
	{
		// Constructors
		public ClientCallbackAttribute(); // 0x003A1FC0-0x003A1FC8
	}

	[Obsolete] // 0x00186F34-0x00186F68
	internal class DefaultNetworkTransport : INetworkTransport // TypeDefIndex: 3070
	{
		// Properties
		public bool IsStarted { get; } // 0x003AFBA0-0x003AFC1C 
	
		// Constructors
		public DefaultNetworkTransport(); // 0x003AFB98-0x003AFBA0
	
		// Methods
		public int AddHost(HostTopology topology, int port, string ip); // 0x003AFC1C-0x003AFCB0
		public int AddHostWithSimulator(HostTopology topology, int minTimeout, int maxTimeout, int port); // 0x003AFCB0-0x003AFD58
		public int AddWebsocketHost(HostTopology topology, int port, string ip); // 0x003AFD58-0x003AFDEC
		public int Connect(int hostId, string address, int port, int specialConnectionId, out byte error); // 0x003AFDEC-0x003AFE9C
		public void ConnectAsNetworkHost(int hostId, string address, int port, NetworkID network, SourceID source, NodeID node, out byte error); // 0x003AFE9C-0x003AFF70
		public int ConnectEndPoint(int hostId, EndPoint endPoint, int specialConnectionId, out byte error); // 0x003AFF70-0x003B0018
		public int ConnectToNetworkPeer(int hostId, string address, int port, int specialConnectionId, int relaySlotId, NetworkID network, SourceID source, NodeID node, out byte error); // 0x003B0018-0x003B0100
		public int ConnectWithSimulator(int hostId, string address, int port, int specialConnectionId, out byte error, ConnectionSimulatorConfig conf); // 0x003B0100-0x003B01B4
		public bool Disconnect(int hostId, int connectionId, out byte error); // 0x003B01B4-0x003B0248
		public bool DoesEndPointUsePlatformProtocols(EndPoint endPoint); // 0x003B0248-0x003B02CC
		public void GetBroadcastConnectionInfo(int hostId, out string address, out int port, out byte error); // 0x003B02CC-0x003B0374
		public void GetBroadcastConnectionMessage(int hostId, byte[] buffer, int bufferSize, out int receivedSize, out byte error); // 0x003B0374-0x003B0424
		public void GetConnectionInfo(int hostId, int connectionId, out string address, out int port, out NetworkID network, out NodeID dstNode, out byte error); // 0x003B0424-0x003B04E0
		public void Init(); // 0x003B04E0-0x003B055C
		public void Init(GlobalConfig config); // 0x003B055C-0x003B05E0
		public NetworkEventType ReceiveFromHost(int hostId, out int connectionId, out int channelId, byte[] buffer, int bufferSize, out int receivedSize, out byte error); // 0x003B05E0-0x003B069C
		public NetworkEventType ReceiveRelayEventFromHost(int hostId, out byte error); // 0x003B069C-0x003B0728
		public bool RemoveHost(int hostId); // 0x003B0728-0x003B07AC
		public bool Send(int hostId, int connectionId, int channelId, byte[] buffer, int size, out byte error); // 0x003B07AC-0x003B0860
		public void SetBroadcastCredentials(int hostId, int key, int version, int subversion, out byte error); // 0x003B0860-0x003B0910
		public bool StartBroadcastDiscovery(int hostId, int broadcastPort, int key, int version, int subversion, byte[] buffer, int size, int timeout, out byte error); // 0x003B0910-0x003B09E4
		public void StopBroadcastDiscovery(); // 0x003B09E4-0x003B0A60
	}

	internal static class DotNetCompatibility // TypeDefIndex: 3071
	{
		// Extension methods
		internal static string GetMethodName(this Delegate func); // 0x003B0A60-0x003B0AB4
		internal static string GetErrorCode(this SocketException e); // 0x003B0AB4-0x003B0B08
	}

	[Obsolete] // 0x00186F78-0x00186FAC
	public interface INetworkTransport // TypeDefIndex: 3072
	{
		// Properties
		bool IsStarted { get; }
	
		// Methods
		void Init();
		void Init(GlobalConfig config);
		int AddHost(HostTopology topology, int port, string ip);
		int AddWebsocketHost(HostTopology topology, int port, string ip);
		int ConnectWithSimulator(int hostId, string address, int port, int specialConnectionId, out byte error, ConnectionSimulatorConfig conf);
		int Connect(int hostId, string address, int port, int specialConnectionId, out byte error);
		void ConnectAsNetworkHost(int hostId, string address, int port, NetworkID network, SourceID source, NodeID node, out byte error);
		int ConnectToNetworkPeer(int hostId, string address, int port, int specialConnectionId, int relaySlotId, NetworkID network, SourceID source, NodeID node, out byte error);
		int ConnectEndPoint(int hostId, EndPoint endPoint, int specialConnectionId, out byte error);
		bool DoesEndPointUsePlatformProtocols(EndPoint endPoint);
		int AddHostWithSimulator(HostTopology topology, int minTimeout, int maxTimeout, int port);
		bool RemoveHost(int hostId);
		bool Send(int hostId, int connectionId, int channelId, byte[] buffer, int size, out byte error);
		NetworkEventType ReceiveFromHost(int hostId, out int connectionId, out int channelId, byte[] buffer, int bufferSize, out int receivedSize, out byte error);
		NetworkEventType ReceiveRelayEventFromHost(int hostId, out byte error);
		void GetConnectionInfo(int hostId, int connectionId, out string address, out int port, out NetworkID network, out NodeID dstNode, out byte error);
		bool Disconnect(int hostId, int connectionId, out byte error);
		void SetBroadcastCredentials(int hostId, int key, int version, int subversion, out byte error);
		bool StartBroadcastDiscovery(int hostId, int broadcastPort, int key, int version, int subversion, byte[] buffer, int size, int timeout, out byte error);
		void GetBroadcastConnectionInfo(int hostId, out string address, out int port, out byte error);
		void GetBroadcastConnectionMessage(int hostId, byte[] buffer, int bufferSize, out int receivedSize, out byte error);
		void StopBroadcastDiscovery();
	}

	internal sealed class LocalClient : NetworkClient // TypeDefIndex: 3073
	{
		// Fields
		private List<InternalMsg> m_InternalMsgs; // 0x50
		private List<InternalMsg> m_InternalMsgs2; // 0x54
		private Stack<InternalMsg> m_FreeMessages; // 0x58
		private NetworkServer m_LocalServer; // 0x5C
		private bool m_Connected; // 0x60
		private NetworkMessage s_InternalMessage; // 0x64
	
		// Nested types
		private struct InternalMsg // TypeDefIndex: 3074
		{
			// Fields
			internal byte[] buffer; // 0x00
			internal int channelId; // 0x04
		}
	
		// Constructors
		public LocalClient(); // 0x003A4D18-0x003A4E08
	
		// Methods
		public override void Disconnect(); // 0x003B0D38-0x003B0E0C
		internal void InternalConnectLocalServer(bool generateConnectMsg); // 0x003A4E08-0x003A4FF4
		internal override void Update(); // 0x003B12B4-0x003B12B8
		internal void AddLocalPlayer(UnityEngine.Networking.PlayerController localPlayer); // 0x003B16AC-0x003B1AC4
		private void PostInternalMessage(byte[] buffer, int channelId); // 0x003B1AC4-0x003B1BB8
		private void PostInternalMessage(short msgType); // 0x003B0E0C-0x003B0EF4
		private void ProcessInternalMessages(); // 0x003B12B8-0x003B16AC
		internal void InvokeHandlerOnClient(short msgType, MessageBase msg, int channelId); // 0x003B1CC0-0x003B1DD0
		internal void InvokeBytesOnClient(byte[] buffer, int channelId); // 0x003B1DD0-0x003B1F60
	}

	internal class ULocalConnectionToClient : NetworkConnection // TypeDefIndex: 3075
	{
		// Fields
		private LocalClient m_LocalClient; // 0x50
	
		// Properties
		public LocalClient localClient { get; } // 0x00AD61E0-0x00AD61E8 
	
		// Constructors
		public ULocalConnectionToClient(LocalClient localClient); // 0x00AD616C-0x00AD61E0
	
		// Methods
		public override bool Send(short msgType, MessageBase msg); // 0x00AD61E8-0x00AD6238
		public override bool SendByChannel(short msgType, MessageBase msg, int channelId); // 0x00AD6238-0x00AD628C
		public override bool SendBytes(byte[] bytes, int numBytes, int channelId); // 0x00AD628C-0x00AD62CC
		public override bool SendWriter(NetworkWriter writer, int channelId); // 0x00AD62CC-0x00AD6328
	}

	internal class ULocalConnectionToServer : NetworkConnection // TypeDefIndex: 3076
	{
		// Fields
		private NetworkServer m_LocalServer; // 0x50
	
		// Constructors
		public ULocalConnectionToServer(NetworkServer localServer); // 0x00AD6328-0x00AD639C
	
		// Methods
		public override bool Send(short msgType, MessageBase msg); // 0x00AD639C-0x00AD63F0
		public override bool SendByChannel(short msgType, MessageBase msg, int channelId); // 0x00AD63F0-0x00AD6448
		public override bool SendBytes(byte[] bytes, int numBytes, int channelId); // 0x00AD6448-0x00AD6570
		public override bool SendWriter(NetworkWriter writer, int channelId); // 0x00AD6570-0x00AD6614
	}

	[Obsolete] // 0x00186FAC-0x00186FE0
	public class LogFilter // TypeDefIndex: 3077
	{
		// Fields
		[Obsolete] // 0x00188054-0x001880A8
		public static FilterLevel current; // 0x00
		private static int s_CurrentLogLevel; // 0x04
	
		// Properties
		public static int currentLogLevel { set; } // 0x003B1F60-0x003B1FF0
		internal static bool logDev { get; } // 0x003ABE50-0x003ABEE8 
		public static bool logDebug { get; } // 0x003A21B0-0x003A2248 
		public static bool logInfo { get; } // 0x003B1FF0-0x003B2088 
		public static bool logWarn { get; } // 0x003A1C28-0x003A1CC0 
		public static bool logError { get; } // 0x0039FDBC-0x0039FE54 
	
		// Nested types
		public enum FilterLevel // TypeDefIndex: 3078
		{
			SetInScripting = -1,
			Developer = 0,
			Debug = 1,
			Info = 2,
			Warn = 3,
			Error = 4,
			Fatal = 5
		}
	
		// Constructors
		static LogFilter(); // 0x003B2088-0x003B20FC
	}

	[Obsolete] // 0x00186FE0-0x00187014
	public abstract class MessageBase // TypeDefIndex: 3079
	{
		// Constructors
		protected MessageBase(); // 0x003B20FC-0x003B2104
	
		// Methods
		public virtual void Deserialize(NetworkReader reader); // 0x003B2104-0x003B2108
		public virtual void Serialize(NetworkWriter writer); // 0x003B2108-0x003B210C
	}
}

namespace UnityEngine.Networking.NetworkSystem
{
	[Obsolete] // 0x00187014-0x00187048
	public class StringMessage : MessageBase // TypeDefIndex: 3080
	{
		// Fields
		public string value; // 0x08
	
		// Constructors
		public StringMessage(string v); // 0x00ACB478-0x00ACB498
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00ACB498-0x00ACB4CC
		public override void Serialize(NetworkWriter writer); // 0x00ACB4CC-0x00ACB500
	}

	[Obsolete] // 0x00187048-0x0018707C
	public class IntegerMessage : MessageBase // TypeDefIndex: 3081
	{
		// Fields
		public int value; // 0x08
	
		// Constructors
		public IntegerMessage(); // 0x00AC9B98-0x00AC9BA0
		public IntegerMessage(int v); // 0x00AC9BA0-0x00AC9BC0
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00AC9BC0-0x00AC9BF4
		public override void Serialize(NetworkWriter writer); // 0x00AC9BF4-0x00AC9C24
	}

	[Obsolete] // 0x0018707C-0x001870B0
	public class EmptyMessage : MessageBase // TypeDefIndex: 3082
	{
		// Constructors
		public EmptyMessage(); // 0x00AC9B1C-0x00AC9B24
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00AC9B24-0x00AC9B28
		public override void Serialize(NetworkWriter writer); // 0x00AC9B28-0x00AC9B2C
	}

	[Obsolete] // 0x001870B0-0x001870E4
	public class ErrorMessage : MessageBase // TypeDefIndex: 3083
	{
		// Fields
		public int errorCode; // 0x08
	
		// Constructors
		public ErrorMessage(); // 0x00AC9B2C-0x00AC9B34
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00AC9B34-0x00AC9B68
		public override void Serialize(NetworkWriter writer); // 0x00AC9B68-0x00AC9B98
	}

	[Obsolete] // 0x001870E4-0x00187118
	public class ReadyMessage : EmptyMessage // TypeDefIndex: 3084
	{
		// Constructors
		public ReadyMessage(); // 0x00ACB274-0x00ACB27C
	}

	[Obsolete] // 0x00187118-0x0018714C
	public class NotReadyMessage : EmptyMessage // TypeDefIndex: 3085
	{
		// Constructors
		public NotReadyMessage(); // 0x00AC9CE8-0x00AC9CF0
	}

	[Obsolete] // 0x0018714C-0x00187180
	public class AddPlayerMessage : MessageBase // TypeDefIndex: 3086
	{
		// Fields
		public short playerControllerId; // 0x08
		public int msgSize; // 0x0C
		public byte[] msgData; // 0x10
	
		// Constructors
		public AddPlayerMessage(); // 0x00AC8D0C-0x00AC8D14
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00AC8D14-0x00AC8D84
		public override void Serialize(NetworkWriter writer); // 0x00AC8D84-0x00AC8DE0
	}

	[Obsolete] // 0x00187180-0x001871B4
	public class RemovePlayerMessage : MessageBase // TypeDefIndex: 3087
	{
		// Fields
		public short playerControllerId; // 0x08
	
		// Constructors
		public RemovePlayerMessage(); // 0x00ACB40C-0x00ACB414
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00ACB414-0x00ACB448
		public override void Serialize(NetworkWriter writer); // 0x00ACB448-0x00ACB478
	}

	[Obsolete] // 0x001871B4-0x001871E8
	public class PeerAuthorityMessage : MessageBase // TypeDefIndex: 3088
	{
		// Fields
		public int connectionId; // 0x08
		public NetworkInstanceId netId; // 0x0C
		public bool authorityState; // 0x10
	
		// Constructors
		public PeerAuthorityMessage(); // 0x00ACA5AC-0x00ACA5B4
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00ACA5B4-0x00ACA63C
		public override void Serialize(NetworkWriter writer); // 0x00ACA63C-0x00ACA6DC
	}

	[Obsolete] // 0x001871E8-0x0018721C
	public struct PeerInfoPlayer // TypeDefIndex: 3089
	{
		// Fields
		public NetworkInstanceId netId; // 0x00
		public short playerControllerId; // 0x04
	}

	[Obsolete] // 0x0018721C-0x00187250
	public class PeerInfoMessage : MessageBase // TypeDefIndex: 3090
	{
		// Fields
		public int connectionId; // 0x08
		public string address; // 0x0C
		public int port; // 0x10
		public bool isHost; // 0x14
		public bool isYou; // 0x15
		public PeerInfoPlayer[] playerIds; // 0x18
	
		// Constructors
		public PeerInfoMessage(); // 0x00ACA6DC-0x00ACA6E4
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00ACA6E4-0x00ACA90C
		public override void Serialize(NetworkWriter writer); // 0x00ACA90C-0x00ACAB24
		public override string ToString(); // 0x00ACAB24-0x00ACAFF0
	}

	[Obsolete] // 0x00187250-0x00187284
	public class PeerListMessage : MessageBase // TypeDefIndex: 3091
	{
		// Fields
		public PeerInfoMessage[] peers; // 0x08
		public int oldServerConnectionId; // 0x0C
	
		// Constructors
		public PeerListMessage(); // 0x00ACAFF0-0x00ACAFF8
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00ACAFF8-0x00ACB184
		public override void Serialize(NetworkWriter writer); // 0x00ACB184-0x00ACB274
	}

	[Obsolete] // 0x00187284-0x001872B8
	public class ReconnectMessage : MessageBase // TypeDefIndex: 3092
	{
		// Fields
		public int oldConnectionId; // 0x08
		public short playerControllerId; // 0x0C
		public NetworkInstanceId netId; // 0x10
		public int msgSize; // 0x14
		public byte[] msgData; // 0x18
	
		// Constructors
		public ReconnectMessage(); // 0x00ACB27C-0x00ACB284
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00ACB284-0x00ACB34C
		public override void Serialize(NetworkWriter writer); // 0x00ACB34C-0x00ACB40C
	}

	internal class ObjectSpawnMessage : MessageBase // TypeDefIndex: 3093
	{
		// Fields
		public NetworkInstanceId netId; // 0x08
		public NetworkHash128 assetId; // 0x0C
		public Vector3 position; // 0x1C
		public byte[] payload; // 0x28
		public Quaternion rotation; // 0x2C
	
		// Constructors
		public ObjectSpawnMessage(); // 0x00AC9DE0-0x00AC9DE8
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00AC9DE8-0x00AC9F44
		public override void Serialize(NetworkWriter writer); // 0x00AC9F44-0x00ACA048
	}

	internal class ObjectSpawnSceneMessage : MessageBase // TypeDefIndex: 3094
	{
		// Fields
		public NetworkInstanceId netId; // 0x08
		public NetworkSceneId sceneId; // 0x0C
		public Vector3 position; // 0x10
		public byte[] payload; // 0x1C
	
		// Constructors
		public ObjectSpawnSceneMessage(); // 0x00ACA318-0x00ACA320
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00ACA320-0x00ACA3DC
		public override void Serialize(NetworkWriter writer); // 0x00ACA3DC-0x00ACA4A4
	}

	internal class ObjectSpawnFinishedMessage : MessageBase // TypeDefIndex: 3095
	{
		// Fields
		public uint state; // 0x08
	
		// Constructors
		public ObjectSpawnFinishedMessage(); // 0x00AC9D74-0x00AC9D7C
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00AC9D7C-0x00AC9DB0
		public override void Serialize(NetworkWriter writer); // 0x00AC9DB0-0x00AC9DE0
	}

	internal class ObjectDestroyMessage : MessageBase // TypeDefIndex: 3096
	{
		// Fields
		public NetworkInstanceId netId; // 0x08
	
		// Constructors
		public ObjectDestroyMessage(); // 0x00AC9CF0-0x00AC9CF8
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00AC9CF8-0x00AC9D2C
		public override void Serialize(NetworkWriter writer); // 0x00AC9D2C-0x00AC9D74
	}

	internal class OwnerMessage : MessageBase // TypeDefIndex: 3097
	{
		// Fields
		public NetworkInstanceId netId; // 0x08
		public short playerControllerId; // 0x0C
	
		// Constructors
		public OwnerMessage(); // 0x00ACA4D8-0x00ACA4E0
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00ACA4E0-0x00ACA540
		public override void Serialize(NetworkWriter writer); // 0x00ACA540-0x00ACA5AC
	}

	internal class ClientAuthorityMessage : MessageBase // TypeDefIndex: 3098
	{
		// Fields
		public NetworkInstanceId netId; // 0x08
		public bool authority; // 0x0C
	
		// Constructors
		public ClientAuthorityMessage(); // 0x00AC9A04-0x00AC9A0C
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00AC9A0C-0x00AC9A6C
		public override void Serialize(NetworkWriter writer); // 0x00AC9A6C-0x00AC9AE0
	}

	internal class AnimationMessage : MessageBase // TypeDefIndex: 3099
	{
		// Fields
		public NetworkInstanceId netId; // 0x08
		public int stateHash; // 0x0C
		public float normalizedTime; // 0x10
		public byte[] parameters; // 0x14
	
		// Constructors
		public AnimationMessage(); // 0x00AC8F9C-0x00AC8FA4
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00AC8FA4-0x00AC9054
		public override void Serialize(NetworkWriter writer); // 0x00AC9054-0x00AC9140
	}

	internal class AnimationParametersMessage : MessageBase // TypeDefIndex: 3100
	{
		// Fields
		public NetworkInstanceId netId; // 0x08
		public byte[] parameters; // 0x0C
	
		// Constructors
		public AnimationParametersMessage(); // 0x00AC92D8-0x00AC92E0
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00AC92E0-0x00AC9340
		public override void Serialize(NetworkWriter writer); // 0x00AC9340-0x00AC93D8
	}

	internal class AnimationTriggerMessage : MessageBase // TypeDefIndex: 3101
	{
		// Fields
		public NetworkInstanceId netId; // 0x08
		public int hash; // 0x0C
	
		// Constructors
		public AnimationTriggerMessage(); // 0x00AC93D8-0x00AC93E0
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00AC93E0-0x00AC9440
		public override void Serialize(NetworkWriter writer); // 0x00AC9440-0x00AC94AC
	}

	internal class LobbyReadyToBeginMessage : MessageBase // TypeDefIndex: 3102
	{
		// Fields
		public byte slotId; // 0x08
		public bool readyState; // 0x09
	
		// Constructors
		public LobbyReadyToBeginMessage(); // 0x00AC9C24-0x00AC9C2C
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00AC9C2C-0x00AC9C8C
		public override void Serialize(NetworkWriter writer); // 0x00AC9C8C-0x00AC9CE8
	}

	internal struct CRCMessageEntry // TypeDefIndex: 3103
	{
		// Fields
		public string name; // 0x00
		public byte channel; // 0x04
	}

	internal class CRCMessage : MessageBase // TypeDefIndex: 3104
	{
		// Fields
		public CRCMessageEntry[] scripts; // 0x08
	
		// Constructors
		public CRCMessage(); // 0x00AC94AC-0x00AC94B4
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00AC94B4-0x00AC9610
		public override void Serialize(NetworkWriter writer); // 0x00AC9610-0x00AC9728
	}
}

namespace UnityEngine.Networking
{
	[AddComponentMenu] // 0x001872B8-0x001873CC
	[DisallowMultipleComponent] // 0x001872B8-0x001873CC
	[Obsolete] // 0x001872B8-0x001873CC
	[RequireComponent] // 0x001872B8-0x001873CC
	[RequireComponent] // 0x001872B8-0x001873CC
	public class NetworkAnimator : NetworkBehaviour // TypeDefIndex: 3105
	{
		// Fields
		[SerializeField] // 0x001880A8-0x001880B8
		private Animator m_Animator; // 0x1C
		[SerializeField] // 0x001880B8-0x001880C8
		private uint m_ParameterSendBits; // 0x20
		private static AnimationMessage s_AnimationMessage; // 0x00
		private static AnimationParametersMessage s_AnimationParametersMessage; // 0x04
		private static AnimationTriggerMessage s_AnimationTriggerMessage; // 0x08
		private int m_AnimationHash; // 0x24
		private int m_TransitionHash; // 0x28
		private NetworkWriter m_ParameterWriter; // 0x2C
		private float m_SendTimer; // 0x30
		public string param0; // 0x34
		public string param1; // 0x38
		public string param2; // 0x3C
		public string param3; // 0x40
		public string param4; // 0x44
		public string param5; // 0x48
	
		// Properties
		public Animator animator { get; set; } // 0x003B4280-0x003B4288 0x003B4288-0x003B4290
		private bool sendMessagesAllowed { get; } // 0x003B436C-0x003B4460 
	
		// Constructors
		public NetworkAnimator(); // 0x003B41F4-0x003B4278
		static NetworkAnimator(); // 0x003B74D4-0x003B75AC
	
		// Methods
		public void SetParameterAutoSend(int index, bool value); // 0x003B4328-0x003B4350
		public bool GetParameterAutoSend(int index); // 0x003B4350-0x003B436C
		internal void ResetParameterOptions(); // 0x003B4290-0x003B4328
		private void FixedUpdate(); // 0x003B44E8-0x003B4690
		private bool CheckAnimStateChanged(out int stateHash, out float normalizedTime); // 0x003B4810-0x003B49AC
		private void CheckSendRate(); // 0x003B4690-0x003B4810
		private void SendMessage(short type, MessageBase msg); // 0x003B4F24-0x003B5074
		private void SetSendTrackingParam(string p, int i); // 0x003B5074-0x003B5144
		private void SetRecvTrackingParam(string p, int i); // 0x003B5144-0x003B5214
		internal void HandleAnimMsg(AnimationMessage msg, NetworkReader reader); // 0x003B5214-0x003B52B4
		internal void HandleAnimParamsMsg(AnimationParametersMessage msg, NetworkReader reader); // 0x003B5714-0x003B5744
		internal void HandleAnimTriggerMsg(int hash); // 0x003B5744-0x003B5778
		private void WriteParameters(NetworkWriter writer, bool autoSend); // 0x003B49D4-0x003B4F24
		private void ReadParameters(NetworkReader reader, bool autoSend); // 0x003B52B4-0x003B5714
		public override bool OnSerialize(NetworkWriter writer, bool forceAll); // 0x003B5778-0x003B5914
		public override void OnDeserialize(NetworkReader reader, bool initialState); // 0x003B5914-0x003B59C4
		public void SetTrigger(string triggerName); // 0x003B59C4-0x003B59EC
		public void SetTrigger(int hash); // 0x003B59EC-0x003B5BDC
		internal static void OnAnimationServerMessage(NetworkMessage netMsg); // 0x003B5C68-0x003B6230
		internal static void OnAnimationParametersServerMessage(NetworkMessage netMsg); // 0x003B6230-0x003B67F0
		internal static void OnAnimationTriggerServerMessage(NetworkMessage netMsg); // 0x003B67F0-0x003B6D78
		internal static void OnAnimationClientMessage(NetworkMessage netMsg); // 0x003B6D78-0x003B7004
		internal static void OnAnimationParametersClientMessage(NetworkMessage netMsg); // 0x003B7004-0x003B7288
		internal static void OnAnimationTriggerClientMessage(NetworkMessage netMsg); // 0x003B7288-0x003B74D4
	}

	[AddComponentMenu] // 0x001873CC-0x00187494
	[Obsolete] // 0x001873CC-0x00187494
	[RequireComponent] // 0x001873CC-0x00187494
	public class NetworkBehaviour : MonoBehaviour // TypeDefIndex: 3106
	{
		// Fields
		private uint m_SyncVarDirtyBits; // 0x0C
		private float m_LastSendTime; // 0x10
		private bool m_SyncVarGuard; // 0x14
		private const float k_DefaultSendInterval = 0.1f; // Metadata: 0x0021BA5A
		private NetworkIdentity m_MyView; // 0x18
		private static Dictionary<int, Invoker> s_CmdHandlerDelegates; // 0x00
	
		// Properties
		public bool localPlayerAuthority { get; } // 0x003B448C-0x003B44B4 
		public bool isServer { get; } // 0x003B4460-0x003B448C 
		public bool isClient { get; } // 0x003B77C0-0x003B77E8 
		public bool isLocalPlayer { get; } // 0x003B77E8-0x003B7810 
		public bool hasAuthority { get; } // 0x003B44C0-0x003B44E8 
		public NetworkInstanceId netId { get; } // 0x003B49AC-0x003B49D4 
		public NetworkConnection connectionToServer { get; } // 0x003B7820-0x003B7848 
		public NetworkConnection connectionToClient { get; } // 0x003B7850-0x003B7878 
		public short playerControllerId { get; } // 0x003B7880-0x003B78A8 
		protected uint syncVarDirtyBits { get; } // 0x003B78B0-0x003B78B8 
		protected bool syncVarHookGuard { get; set; } // 0x003B78B8-0x003B78C0 0x003B78C0-0x003B78C8
		internal NetworkIdentity netIdentity { get; } // 0x003B44B4-0x003B44B8 
		private NetworkIdentity myView { get; } // 0x003B75AC-0x003B7724 
	
		// Nested types
		public delegate void CmdDelegate(NetworkBehaviour obj, NetworkReader reader); // TypeDefIndex: 3107; 0x003BA810-0x003BB098
	
		protected enum UNetInvokeType // TypeDefIndex: 3108
		{
			Command = 0,
			ClientRpc = 1,
			SyncEvent = 2,
			SyncList = 3
		}
	
		protected class Invoker // TypeDefIndex: 3109
		{
			// Fields
			public UNetInvokeType invokeType; // 0x08
			public Type invokeClass; // 0x0C
			public CmdDelegate invokeFunction; // 0x10
	
			// Constructors
			public Invoker(); // 0x003B8A34-0x003B8A3C
	
			// Methods
			public string DebugString(); // 0x003B9790-0x003B9A18
		}
	
		// Constructors
		public NetworkBehaviour(); // 0x003B4278-0x003B4280
		static NetworkBehaviour(); // 0x003BBD50-0x003BBDE0
	
		// Methods
		[EditorBrowsable] // 0x001888FC-0x00188910
		protected void SendCommandInternal(NetworkWriter writer, int channelId, string cmdName); // 0x003B78C8-0x003B7B20
		[EditorBrowsable] // 0x00188910-0x00188924
		public virtual bool InvokeCommand(int cmdHash, NetworkReader reader); // 0x003B7B20-0x003B7B24
		[EditorBrowsable] // 0x00188924-0x00188938
		protected void SendRPCInternal(NetworkWriter writer, int channelId, string rpcName); // 0x003B7D10-0x003B7E60
		[EditorBrowsable] // 0x00188938-0x0018894C
		protected void SendTargetRPCInternal(NetworkConnection conn, NetworkWriter writer, int channelId, string rpcName); // 0x003B7E60-0x003B7F90
		[EditorBrowsable] // 0x0018894C-0x00188960
		public virtual bool InvokeRPC(int cmdHash, NetworkReader reader); // 0x003B7F90-0x003B7F94
		[EditorBrowsable] // 0x00188960-0x00188974
		protected void SendEventInternal(NetworkWriter writer, int channelId, string eventName); // 0x003B8180-0x003B82FC
		[EditorBrowsable] // 0x00188974-0x00188988
		public virtual bool InvokeSyncEvent(int cmdHash, NetworkReader reader); // 0x003B82FC-0x003B8300
		[EditorBrowsable] // 0x00188988-0x0018899C
		public virtual bool InvokeSyncList(int cmdHash, NetworkReader reader); // 0x003B848C-0x003B8490
		[EditorBrowsable] // 0x0018899C-0x001889B0
		protected static void RegisterCommandDelegate(Type invokeClass, int cmdHash, CmdDelegate func); // 0x003B8638-0x003B8A34
		[EditorBrowsable] // 0x001889B0-0x001889C4
		protected static void RegisterRpcDelegate(Type invokeClass, int cmdHash, CmdDelegate func); // 0x003B8A3C-0x003B8E3C
		[EditorBrowsable] // 0x001889C4-0x001889D8
		protected static void RegisterEventDelegate(Type invokeClass, int cmdHash, CmdDelegate func); // 0x003B8E3C-0x003B923C
		[EditorBrowsable] // 0x001889D8-0x001889EC
		protected static void RegisterSyncListDelegate(Type invokeClass, int cmdHash, CmdDelegate func); // 0x003B923C-0x003B963C
		internal static string GetInvoker(int cmdHash); // 0x003B963C-0x003B9790
		internal static bool GetInvokerForHashCommand(int cmdHash, out Type invokeClass, out CmdDelegate invokeFunction); // 0x003B9A18-0x003B9AB4
		internal static bool GetInvokerForHashClientRpc(int cmdHash, out Type invokeClass, out CmdDelegate invokeFunction); // 0x003B9DE4-0x003B9E80
		internal static bool GetInvokerForHashSyncList(int cmdHash, out Type invokeClass, out CmdDelegate invokeFunction); // 0x003B9E80-0x003B9F1C
		internal static bool GetInvokerForHashSyncEvent(int cmdHash, out Type invokeClass, out CmdDelegate invokeFunction); // 0x003B9F1C-0x003B9FB8
		private static bool GetInvokerForHash(int cmdHash, UNetInvokeType invokeType, out Type invokeClass, out CmdDelegate invokeFunction); // 0x003B9AB4-0x003B9DE4
		internal static void DumpInvokers(); // 0x003B9FB8-0x003BA754
		internal bool ContainsCommandDelegate(int cmdHash); // 0x003BA754-0x003BA810
		internal bool InvokeCommandDelegate(int cmdHash, NetworkReader reader); // 0x003B7B24-0x003B7D10
		internal bool InvokeRpcDelegate(int cmdHash, NetworkReader reader); // 0x003B7F94-0x003B8180
		internal bool InvokeSyncEventDelegate(int cmdHash, NetworkReader reader); // 0x003B8300-0x003B848C
		internal bool InvokeSyncListDelegate(int cmdHash, NetworkReader reader); // 0x003B8490-0x003B8638
		internal static string GetCmdHashHandlerName(int cmdHash); // 0x003ACEEC-0x003AD0AC
		private static string GetCmdHashPrefixName(int cmdHash, string prefix); // 0x003BB098-0x003BB280
		internal static string GetCmdHashCmdName(int cmdHash); // 0x003BB280-0x003BB310
		internal static string GetCmdHashRpcName(int cmdHash); // 0x003BB310-0x003BB3A0
		internal static string GetCmdHashEventName(int cmdHash); // 0x003BB3A0-0x003BB430
		internal static string GetCmdHashListName(int cmdHash); // 0x003BB430-0x003BB4C0
		[EditorBrowsable] // 0x001889EC-0x00188A00
		protected void SetSyncVarGameObject(GameObject newGameObject, ref GameObject gameObjectField, uint dirtyBit, ref NetworkInstanceId netIdField); // 0x003BB4C0-0x003BBBE8
		[EditorBrowsable] // 0x00188A00-0x00188A14
		protected void SetSyncVar<T>(T value, ref T fieldValue, uint dirtyBit);
		public void SetDirtyBit(uint dirtyBit); // 0x003BBBE8-0x003BBBF8
		public void ClearAllDirtyBits(); // 0x003BBBF8-0x003BBC1C
		internal int GetDirtyChannel(); // 0x003BBC1C-0x003BBC9C
		public virtual bool OnSerialize(NetworkWriter writer, bool initialState); // 0x003BBC9C-0x003BBCD8
		public virtual void OnDeserialize(NetworkReader reader, bool initialState); // 0x003BBCD8-0x003BBD0C
		[EditorBrowsable] // 0x00188A14-0x00188A28
		public virtual void PreStartClient(); // 0x003BBD0C-0x003BBD10
		public virtual void OnNetworkDestroy(); // 0x003BBD10-0x003BBD14
		public virtual void OnStartServer(); // 0x003BBD14-0x003BBD18
		public virtual void OnStartClient(); // 0x003BBD18-0x003BBD1C
		public virtual void OnStartLocalPlayer(); // 0x003BBD1C-0x003BBD20
		public virtual void OnStartAuthority(); // 0x003BBD20-0x003BBD24
		public virtual void OnStopAuthority(); // 0x003BBD24-0x003BBD28
		public virtual bool OnRebuildObservers(HashSet<NetworkConnection> observers, bool initialize); // 0x003BBD28-0x003BBD30
		public virtual void OnSetLocalVisibility(bool vis); // 0x003BBD30-0x003BBD34
		public virtual bool OnCheckObserver(NetworkConnection conn); // 0x003BBD34-0x003BBD3C
		public virtual int GetNetworkChannel(); // 0x003BBD3C-0x003BBD44
		public virtual float GetNetworkSendInterval(); // 0x003BBD44-0x003BBD50
	}

	internal class NetBuffer // TypeDefIndex: 3110
	{
		// Fields
		private byte[] m_Buffer; // 0x08
		private uint m_Pos; // 0x0C
	
		// Properties
		public uint Position { get; } // 0x003B3754-0x003B375C 
		public int Length { get; } // 0x003B375C-0x003B3780 
	
		// Constructors
		public NetBuffer(); // 0x0039F484-0x0039F574
		public NetBuffer(byte[] buffer); // 0x003B3734-0x003B3754
	
		// Methods
		public byte ReadByte(); // 0x003B3780-0x003B38B8
		public void ReadBytes(byte[] buffer, uint count); // 0x003B38B8-0x003B3B40
		internal ArraySegment<byte> AsArraySegment(); // 0x003B3B40-0x003B3BFC
		public void WriteByte(byte value); // 0x003B3BFC-0x003B3C60
		public void WriteByte2(byte value0, byte value1); // 0x003B3EBC-0x003B3F64
		public void WriteByte4(byte value0, byte value1, byte value2, byte value3); // 0x003B3F64-0x003B4094
		public void WriteBytes(byte[] buffer, ushort count); // 0x003A0BE8-0x003A0D70
		private void WriteCheckForSpace(ushort count); // 0x003B3C60-0x003B3EBC
		public void FinishMessage(); // 0x003B4094-0x003B4118
		public void SeekZero(); // 0x003A0BDC-0x003A0BE8
		public void Replace(byte[] buffer); // 0x003B4118-0x003B4128
		public override string ToString(); // 0x003B4128-0x003B41F4
	}

	internal struct UIntFloat // TypeDefIndex: 3111
	{
		// Fields
		public float floatValue; // 0x00
		public uint intValue; // 0x00
		public double doubleValue; // 0x00
		public ulong longValue; // 0x00
	}

	internal class FloatConversion // TypeDefIndex: 3112
	{
		// Methods
		public static float ToSingle(uint value); // 0x003B0B08-0x003B0B0C
	}

	[Obsolete] // 0x00187494-0x001874C8
	public class NetworkClient // TypeDefIndex: 3113
	{
		// Fields
		private Type m_NetworkConnectionClass; // 0x08
		private const int k_MaxEventsPerFrame = 500; // Metadata: 0x0021BA6E
		private static List<NetworkClient> s_Clients; // 0x00
		private static bool s_IsActive; // 0x04
		private HostTopology m_HostTopology; // 0x0C
		private int m_HostPort; // 0x10
		private bool m_UseSimulator; // 0x14
		private int m_SimulatedLatency; // 0x18
		private float m_PacketLoss; // 0x1C
		private string m_ServerIp; // 0x20
		private int m_ServerPort; // 0x24
		private int m_ClientId; // 0x28
		private int m_ClientConnectionId; // 0x2C
		private int m_StatResetTime; // 0x30
		private EndPoint m_RemoteEndPoint; // 0x34
		private static CRCMessage s_CRCMessage; // 0x08
		private NetworkMessageHandlers m_MessageHandlers; // 0x38
		protected NetworkConnection m_Connection; // 0x3C
		private byte[] m_MsgBuffer; // 0x40
		private NetworkReader m_MsgReader; // 0x44
		protected ConnectState m_AsyncConnect; // 0x48
		private string m_RequestedServerHost; // 0x4C
		[CompilerGenerated] // 0x001880C8-0x001880D8
		private static AsyncCallback <>f__mg$cache0; // 0x0C
		[CompilerGenerated] // 0x001880D8-0x001880E8
		private static NetworkMessageDelegate <>f__mg$cache1; // 0x10
	
		// Properties
		public static List<NetworkClient> allClients { get; } // 0x003B5BDC-0x003B5C68 
		public static bool active { get; } // 0x003BD390-0x003BD41C 
		public NetworkConnection connection { get; } // 0x003B1BB8-0x003B1BC0 
		internal int hostId { get; } // 0x003BD454-0x003BD45C 
		public int numChannels { get; } // 0x003BD45C-0x003BD4A8 
		public int hostPort { set; } // 0x003BD4A8-0x003BD5A4
		public bool isConnected { get; } // 0x003BD5A4-0x003BD5B8 
	
		// Nested types
		protected enum ConnectState // TypeDefIndex: 3114
		{
			None = 0,
			Resolving = 1,
			Resolved = 2,
			Connecting = 3,
			Connected = 4,
			Disconnected = 5,
			Failed = 6
		}
	
		// Constructors
		public NetworkClient(); // 0x003B0B0C-0x003B0D38
		static NetworkClient(); // 0x003C2244-0x003C2300
	
		// Methods
		internal void SetHandlers(NetworkConnection conn); // 0x003B0EF4-0x003B0F24
		public bool Configure(ConnectionConfig config, int maxConnections); // 0x003BD5B8-0x003BD63C
		public bool Configure(HostTopology topology); // 0x003BD63C-0x003BD648
		public void Connect(MatchInfo matchInfo); // 0x003BD648-0x003BD670
		public bool ReconnectToNewHost(string serverIp, int serverPort); // 0x003BDA9C-0x003BE184
		public void ConnectWithSimulator(string serverIp, int serverPort, int latency, float packetLoss); // 0x003BE318-0x003BE330
		private static bool IsValidIpV6(string address); // 0x003BE8D0-0x003BE96C
		public void Connect(string serverIp, int serverPort); // 0x003BE330-0x003BE8D0
		public void Connect(EndPoint secureTunnelEndPoint); // 0x003BE96C-0x003BF220
		private void PrepareForConnect(); // 0x003BD670-0x003BD678
		private void PrepareForConnect(bool usePlatformSpecificProtocols); // 0x003BF220-0x003BF7E4
		internal static void GetHostAddressesCallback(IAsyncResult ar); // 0x003BF7E4-0x003C00E4
		internal void ContinueConnect(); // 0x003C00E4-0x003C0734
		private void ConnectWithRelay(MatchInfo info); // 0x003BD678-0x003BDA9C
		public virtual void Disconnect(); // 0x003C0734-0x003C08D0
		public bool Send(short msgType, MessageBase msg); // 0x003C096C-0x003C0AE8
		public void Shutdown(); // 0x003C0AE8-0x003C0D78
		internal virtual void Update(); // 0x003C0E34-0x003C1890
		private void GenerateConnectError(int error); // 0x003C1890-0x003C19A0
		private void GenerateDataError(int error); // 0x003C19CC-0x003C1ADC
		private void GenerateDisconnectError(int error); // 0x003C1ADC-0x003C1BEC
		private void GenerateError(int error); // 0x003C1C84-0x003C1E90
		internal void RegisterSystemHandlers(bool localClient); // 0x003B10C8-0x003B12B4
		private void OnCRC(NetworkMessage netMsg); // 0x003C1E90-0x003C1F90
		public void RegisterHandler(short msgType, NetworkMessageDelegate handler); // 0x003C1F90-0x003C1FCC
		public void RegisterHandlerSafe(short msgType, NetworkMessageDelegate handler); // 0x003A6A28-0x003A6A64
		internal static void AddClient(NetworkClient client); // 0x003BD2D4-0x003BD390
		internal static bool RemoveClient(NetworkClient client); // 0x003C0D78-0x003C0E34
		internal static void UpdateClients(); // 0x003C1FCC-0x003C2244
		internal static void SetActive(bool state); // 0x003B0F24-0x003B10C8
	}

	[Obsolete] // 0x001874C8-0x001874FC
	public class NetworkConnection : IDisposable // TypeDefIndex: 3115
	{
		// Fields
		private ChannelBuffer[] m_Channels; // 0x08
		private List<UnityEngine.Networking.PlayerController> m_PlayerControllers; // 0x0C
		private NetworkMessage m_NetMsg; // 0x10
		private HashSet<NetworkIdentity> m_VisList; // 0x14
		private NetworkWriter m_Writer; // 0x18
		private Dictionary<short, NetworkMessageDelegate> m_MessageHandlersDict; // 0x1C
		private NetworkMessageHandlers m_MessageHandlers; // 0x20
		private HashSet<NetworkInstanceId> m_ClientOwnedObjects; // 0x24
		private NetworkMessage m_MessageInfo; // 0x28
		private const int k_MaxMessageLogSize = 150; // Metadata: 0x0021BA8E
		private NetworkError error; // 0x2C
		public int hostId; // 0x30
		public int connectionId; // 0x34
		public bool isReady; // 0x38
		public string address; // 0x3C
		public float lastMessageTime; // 0x40
		public bool logNetworkMessages; // 0x44
		private Dictionary<short, PacketStat> m_PacketStats; // 0x48
		private bool m_Disposed; // 0x4C
	
		// Properties
		public List<UnityEngine.Networking.PlayerController> playerControllers { get; } // 0x003C2468-0x003C2470 
		public HashSet<NetworkInstanceId> clientOwnedObjects { get; } // 0x003C2470-0x003C2478 
		public NetworkError lastError { get; internal set; } // 0x003C2478-0x003C2480 0x003C19A4-0x003C19AC
	
		// Nested types
		public class PacketStat // TypeDefIndex: 3116
		{
			// Fields
			public short msgType; // 0x08
			public int count; // 0x0C
			public int bytes; // 0x10
	
			// Methods
			public override string ToString(); // 0x003C4FD8-0x003C52B0
		}
	
		// Constructors
		public NetworkConnection(); // 0x003C2300-0x003C2468
	
		// Methods
		public virtual void Initialize(string networkAddress, int networkHostId, int networkConnectionId, HostTopology hostTopology); // 0x003C2480-0x003C289C
		~NetworkConnection(); // 0x003C28E0-0x003C2958
		public void Dispose(); // 0x003C08D0-0x003C096C
		protected virtual void Dispose(bool disposing); // 0x003C2958-0x003C2C18
		private static bool IsSequencedQoS(QosType qos); // 0x003C28C0-0x003C28E0
		private static bool IsReliableQoS(QosType qos); // 0x003C289C-0x003C28C0
		public bool SetChannelOption(int channelId, ChannelOption option, int value); // 0x003C2C24-0x003C2CA0
		public void Disconnect(); // 0x003BE184-0x003BE318
		internal void SetHandlers(NetworkMessageHandlers handlers); // 0x003BD41C-0x003BD454
		public bool InvokeHandlerNoData(short msgType); // 0x003C19AC-0x003C19CC
		public bool InvokeHandler(short msgType, NetworkReader reader, int channelId); // 0x003C2E28-0x003C3024
		public bool InvokeHandler(NetworkMessage netMsg); // 0x003B1BC0-0x003B1CC0
		internal void HandleFragment(NetworkReader reader, int channelId); // 0x003C3024-0x003C31E8
		internal void SetPlayerController(UnityEngine.Networking.PlayerController player); // 0x003A2A38-0x003A2B58
		internal void RemovePlayerController(short playerControllerId); // 0x003A4748-0x003A495C
		internal bool GetPlayerController(short playerControllerId, out UnityEngine.Networking.PlayerController playerController); // 0x003A38E8-0x003A3AB8
		public void FlushChannels(); // 0x003C1BEC-0x003C1C84
		public void SetMaxDelay(float seconds); // 0x003C31E8-0x003C3288
		public virtual bool Send(short msgType, MessageBase msg); // 0x003C3288-0x003C32B4
		public virtual bool SendByChannel(short msgType, MessageBase msg, int channelId); // 0x003C32B4-0x003C335C
		public virtual bool SendBytes(byte[] bytes, int numBytes, int channelId); // 0x003C335C-0x003C3400
		public virtual bool SendWriter(NetworkWriter writer, int channelId); // 0x003C3D34-0x003C3DF0
		private void LogSend(byte[] bytes); // 0x003C3400-0x003C397C
		private bool CheckChannel(int channelId); // 0x003C397C-0x003C3D34
		public void ResetStats(); // 0x003C19A0-0x003C19A4
		protected void HandleBytes(byte[] buffer, int receivedSize, int channelId); // 0x003C3DF0-0x003C3E88
		protected void HandleReader(NetworkReader reader, int receivedSize, int channelId); // 0x003C3E88-0x003C47F0
		public override string ToString(); // 0x003C47F0-0x003C4A6C
		internal void AddToVisList(NetworkIdentity uv); // 0x003C4A6C-0x003C4B28
		internal void RemoveFromVisList(NetworkIdentity uv, bool isDestroyed); // 0x003C4B28-0x003C4BF0
		internal void RemoveObservers(); // 0x003C2CA0-0x003C2E28
		public virtual void TransportReceive(byte[] bytes, int numBytes, int channelId); // 0x003C4CA8-0x003C4CC0
		public virtual bool TransportSend(byte[] bytes, int numBytes, int channelId, out byte error); // 0x003C4CC0-0x003C4E10
		internal void AddOwnedObject(NetworkIdentity obj); // 0x003C4E10-0x003C4EE0
		internal void RemoveOwnedObject(NetworkIdentity obj); // 0x003C4EE0-0x003C4F68
		internal static void OnFragment(NetworkMessage netMsg); // 0x003C4F68-0x003C4FD8
	}

	[Obsolete] // 0x001874FC-0x00187530
	public class NetworkCRC // TypeDefIndex: 3117
	{
		// Fields
		internal static NetworkCRC s_Singleton; // 0x00
		private Dictionary<string, int> m_Scripts; // 0x08
		private bool m_ScriptCRCCheck; // 0x0C
	
		// Properties
		internal static NetworkCRC singleton { get; } // 0x003BC064-0x003BC100 
		public Dictionary<string, int> scripts { get; } // 0x003BC100-0x003BC108 
		public static bool scriptCRCCheck { get; set; } // 0x003BC108-0x003BC130 0x003BC130-0x003BC15C
	
		// Constructors
		public NetworkCRC(); // 0x003BBFD8-0x003BC064
	
		// Methods
		public static void RegisterBehaviour(string name, int channel); // 0x003BC15C-0x003BC1F8
		internal static bool Validate(CRCMessageEntry[] scripts, int numChannels); // 0x003BC1F8-0x003BC234
		private bool ValidateInternal(CRCMessageEntry[] remoteScripts, int numChannels); // 0x003BC234-0x003BCC28
		private void Dump(CRCMessageEntry[] remoteScripts); // 0x003BCC28-0x003BD2D4
	}

	[Obsolete] // 0x00187530-0x00187564
	public struct NetworkBroadcastResult // TypeDefIndex: 3118
	{
		// Fields
		public string serverAddress; // 0x00
		public byte[] broadcastData; // 0x04
	}

	[AddComponentMenu] // 0x00187564-0x001875E8
	[DisallowMultipleComponent] // 0x00187564-0x001875E8
	[Obsolete] // 0x00187564-0x001875E8
	public class NetworkDiscovery : MonoBehaviour // TypeDefIndex: 3119
	{
		// Fields
		private const int k_MaxBroadcastMsgSize = 1024; // Metadata: 0x0021BA92
		[SerializeField] // 0x001880E8-0x001880F8
		private int m_BroadcastPort; // 0x0C
		[SerializeField] // 0x001880F8-0x00188108
		private int m_BroadcastKey; // 0x10
		[SerializeField] // 0x00188108-0x00188118
		private int m_BroadcastVersion; // 0x14
		[SerializeField] // 0x00188118-0x00188128
		private int m_BroadcastSubVersion; // 0x18
		[SerializeField] // 0x00188128-0x00188138
		private int m_BroadcastInterval; // 0x1C
		[SerializeField] // 0x00188138-0x00188148
		private bool m_UseNetworkManager; // 0x20
		[SerializeField] // 0x00188148-0x00188158
		private string m_BroadcastData; // 0x24
		[SerializeField] // 0x00188158-0x00188168
		private bool m_ShowGUI; // 0x28
		[SerializeField] // 0x00188168-0x00188178
		private int m_OffsetX; // 0x2C
		[SerializeField] // 0x00188178-0x00188188
		private int m_OffsetY; // 0x30
		private int m_HostId; // 0x34
		private bool m_Running; // 0x38
		private bool m_IsServer; // 0x39
		private bool m_IsClient; // 0x3A
		private byte[] m_MsgOutBuffer; // 0x3C
		private byte[] m_MsgInBuffer; // 0x40
		private HostTopology m_DefaultTopology; // 0x44
		private Dictionary<string, NetworkBroadcastResult> m_BroadcastsReceived; // 0x48
	
		// Properties
		public int broadcastPort { get; set; } // 0x003C5360-0x003C5368 0x003C5368-0x003C5370
		public int broadcastKey { get; set; } // 0x003C5370-0x003C5378 0x003C5378-0x003C5380
		public int broadcastVersion { get; set; } // 0x003C5380-0x003C5388 0x003C5388-0x003C5390
		public int broadcastSubVersion { get; set; } // 0x003C5390-0x003C5398 0x003C5398-0x003C53A0
		public int broadcastInterval { get; set; } // 0x003C53A0-0x003C53A8 0x003C53A8-0x003C53B0
		public bool useNetworkManager { get; set; } // 0x003C53B0-0x003C53B8 0x003C53B8-0x003C53C0
		public string broadcastData { get; set; } // 0x003C53C0-0x003C53C8 0x003C53C8-0x003C54B4
		public bool showGUI { get; set; } // 0x003C5598-0x003C55A0 0x003C55A0-0x003C55A8
		public int offsetX { get; set; } // 0x003C55A8-0x003C55B0 0x003C55B0-0x003C55B8
		public int offsetY { get; set; } // 0x003C55B8-0x003C55C0 0x003C55C0-0x003C55C8
		public int hostId { get; set; } // 0x003C55C8-0x003C55D0 0x003C55D0-0x003C55D8
		public bool running { get; set; } // 0x003C55D8-0x003C55E0 0x003C55E0-0x003C55E8
		public bool isServer { get; set; } // 0x003C55E8-0x003C55F0 0x003C55F0-0x003C55F8
		public bool isClient { get; set; } // 0x003C55F8-0x003C5600 0x003C5600-0x003C5608
		public Dictionary<string, NetworkBroadcastResult> broadcastsReceived { get; } // 0x003C5608-0x003C5610 
	
		// Constructors
		public NetworkDiscovery(); // 0x003C52B0-0x003C5360
	
		// Methods
		private static byte[] StringToBytes(string str); // 0x003C54B4-0x003C5598
		private static string BytesToString(byte[] bytes); // 0x003C5610-0x003C56D8
		public bool Initialize(); // 0x003C56D8-0x003C5E1C
		public bool StartAsClient(); // 0x003C6388-0x003C67F0
		public bool StartAsServer(); // 0x003C5E1C-0x003C6388
		public void StopBroadcast(); // 0x003C67F0-0x003C6B4C
		private void Update(); // 0x003C6B4C-0x003C6F58
		private void OnDestroy(); // 0x003C6F58-0x003C7208
		public virtual void OnReceivedBroadcast(string fromAddress, string data); // 0x003C7208-0x003C720C
		private void OnGUI(); // 0x003C720C-0x003C7C74
	}

	[Serializable]
	[Obsolete] // 0x001875E8-0x0018761C
	public struct NetworkHash128 // TypeDefIndex: 3120
	{
		// Fields
		public byte i0; // 0x00
		public byte i1; // 0x01
		public byte i2; // 0x02
		public byte i3; // 0x03
		public byte i4; // 0x04
		public byte i5; // 0x05
		public byte i6; // 0x06
		public byte i7; // 0x07
		public byte i8; // 0x08
		public byte i9; // 0x09
		public byte i10; // 0x0A
		public byte i11; // 0x0B
		public byte i12; // 0x0C
		public byte i13; // 0x0D
		public byte i14; // 0x0E
		public byte i15; // 0x0F
	
		// Methods
		public bool IsValid(); // 0x003C7C74-0x003C8458
		public override string ToString(); // 0x003C8458-0x003C8460
	}

	[AddComponentMenu] // 0x0018761C-0x001876AC
	[DisallowMultipleComponent] // 0x0018761C-0x001876AC
	[ExecuteInEditMode] // 0x0018761C-0x001876AC
	[Obsolete] // 0x0018761C-0x001876AC
	public sealed class NetworkIdentity : MonoBehaviour // TypeDefIndex: 3121
	{
		// Fields
		[SerializeField] // 0x00188188-0x00188198
		private NetworkSceneId m_SceneId; // 0x0C
		[SerializeField] // 0x00188198-0x001881A8
		private NetworkHash128 m_AssetId; // 0x10
		[SerializeField] // 0x001881A8-0x001881B8
		private bool m_ServerOnly; // 0x20
		[SerializeField] // 0x001881B8-0x001881C8
		private bool m_LocalPlayerAuthority; // 0x21
		private bool m_IsClient; // 0x22
		private bool m_IsServer; // 0x23
		private bool m_HasAuthority; // 0x24
		private NetworkInstanceId m_NetId; // 0x28
		private bool m_IsLocalPlayer; // 0x2C
		private NetworkConnection m_ConnectionToServer; // 0x30
		private NetworkConnection m_ConnectionToClient; // 0x34
		private short m_PlayerId; // 0x38
		private NetworkBehaviour[] m_NetworkBehaviours; // 0x3C
		private HashSet<int> m_ObserverConnections; // 0x40
		private List<NetworkConnection> m_Observers; // 0x44
		private NetworkConnection m_ClientAuthorityOwner; // 0x48
		private bool m_Reset; // 0x4C
		private static uint s_NextNetworkId; // 0x00
		private static NetworkWriter s_UpdateWriter; // 0x04
		public static ClientAuthorityCallback clientAuthorityCallback; // 0x08
	
		// Properties
		public bool isClient { get; } // 0x003AA9DC-0x003AA9E4 
		public bool isServer { get; } // 0x003B772C-0x003B77C0 
		public bool hasAuthority { get; } // 0x003B7818-0x003B7820 
		public NetworkInstanceId netId { get; } // 0x003AF974-0x003AF97C 
		public NetworkSceneId sceneId { get; } // 0x003A561C-0x003A5624 
		public bool serverOnly { get; set; } // 0x003C8478-0x003C8480 0x003C8480-0x003C8488
		public bool localPlayerAuthority { get; set; } // 0x003B7724-0x003B772C 0x003C8488-0x003C8490
		public NetworkConnection clientAuthorityOwner { get; } // 0x003B44B8-0x003B44C0 
		public NetworkHash128 assetId { get; } // 0x003AB068-0x003AB078 
		public bool isLocalPlayer { get; } // 0x003B7810-0x003B7818 
		public short playerControllerId { get; } // 0x003B78A8-0x003B78B0 
		public NetworkConnection connectionToServer { get; } // 0x003B7848-0x003B7850 
		public NetworkConnection connectionToClient { get; } // 0x003B7878-0x003B7880 
		public ReadOnlyCollection<NetworkConnection> observers { get; } // 0x003C8A08-0x003C8AA0 
	
		// Nested types
		public delegate void ClientAuthorityCallback(NetworkConnection conn, NetworkIdentity uv, bool authorityState); // TypeDefIndex: 3122; 0x0043C7B4-0x0043CFB0
	
		// Constructors
		public NetworkIdentity(); // 0x003C8460-0x003C8478
		static NetworkIdentity(); // 0x003CD5B0-0x003CD640
	
		// Methods
		internal void SetDynamicAssetId(NetworkHash128 newAssetId); // 0x003A96D4-0x003A98C8
		internal void SetClientOwner(NetworkConnection conn); // 0x003C8490-0x003C8588
		internal void ClearClientOwner(); // 0x003C2C18-0x003C2C24
		internal void ForceAuthority(bool authority); // 0x003C8588-0x003C85B0
		internal static NetworkInstanceId GetNextNetworkId(); // 0x003C8AA0-0x003C8B54
		private void CacheBehaviours(); // 0x003C8B54-0x003C8BC8
		internal static void AddNetworkId(uint id); // 0x003C8BC8-0x003C8C98
		internal void SetNetworkInstanceId(NetworkInstanceId newNetId); // 0x003A7138-0x003A7170
		public void ForceSceneId(int newSceneId); // 0x003C8C98-0x003C8CCC
		internal void UpdateClientServer(bool isClientFlag, bool isServerFlag); // 0x003C8CCC-0x003C8CF8
		internal void SetNotLocalPlayer(); // 0x003AF7B8-0x003AF890
		internal void RemoveObserverInternal(NetworkConnection conn); // 0x003C4BF0-0x003C4CA8
		private void OnDestroy(); // 0x003C8CF8-0x003C8DD8
		internal void OnStartServer(bool allowNonZeroNetId); // 0x003C8DD8-0x003C96FC
		internal void OnStartClient(); // 0x003A7170-0x003A7704
		internal void OnStartAuthority(); // 0x003C85B0-0x003C87DC
		internal void OnStopAuthority(); // 0x003C87DC-0x003C8A08
		internal void OnSetLocalVisibility(bool vis); // 0x003AB540-0x003AB77C
		internal bool OnCheckObserver(NetworkConnection conn); // 0x003C96FC-0x003C994C
		internal void UNetSerializeAllVars(NetworkWriter writer); // 0x003C994C-0x003C99F0
		internal void HandleClientAuthority(bool authority); // 0x003AF00C-0x003AF124
		private bool GetInvokeComponent(int cmdHash, Type invokeClass, out NetworkBehaviour invokeComponent); // 0x003C99F0-0x003C9F44
		internal void HandleSyncEvent(int cmdHash, NetworkReader reader); // 0x003AD354-0x003ADE00
		internal void HandleSyncList(int cmdHash, NetworkReader reader); // 0x003AE0A8-0x003AEB54
		internal void HandleCommand(int cmdHash, NetworkReader reader); // 0x003C9F44-0x003CA9F0
		internal void HandleRPC(int cmdHash, NetworkReader reader); // 0x003AC440-0x003ACEEC
		internal void UNetUpdate(); // 0x003CA9F0-0x003CB3D4
		internal void OnUpdateVars(NetworkReader reader, bool initialState, NetworkMessage netMsg); // 0x003A6FDC-0x003A7138
		internal void SetLocalPlayer(short localPlayerControllerId); // 0x003AF898-0x003AF974
		internal void SetConnectionToServer(NetworkConnection conn); // 0x003AF890-0x003AF898
		internal void SetConnectionToClient(NetworkConnection conn, short newPlayerControllerId); // 0x003CB3D4-0x003CB3E0
		internal void OnNetworkDestroy(); // 0x003AAFE0-0x003AB068
		internal void ClearObservers(); // 0x003CB3E0-0x003CB500
		internal void AddObserver(NetworkConnection conn); // 0x003CB500-0x003CBB34
		internal void RemoveObserver(NetworkConnection conn); // 0x003CBB34-0x003CBBFC
		public void RebuildObservers(bool initialize); // 0x003CBBFC-0x003CCC88
		public bool RemoveClientAuthority(NetworkConnection conn); // 0x003CCC88-0x003CD0B4
		public bool AssignClientAuthority(NetworkConnection conn); // 0x003CD0B4-0x003CD4D0
		internal void MarkForReset(); // 0x003AB078-0x003AB084
		internal void Reset(); // 0x003A9600-0x003A96D4
		internal static void UNetStaticUpdate(); // 0x003CD4D0-0x003CD5B0
	}

	[Serializable]
	[Obsolete] // 0x001876AC-0x001876E0
	public struct NetworkInstanceId : IEquatable<NetworkInstanceId> // TypeDefIndex: 3123
	{
		// Fields
		[SerializeField] // 0x001881C8-0x001881D8
		private readonly uint m_Value; // 0x00
		public static NetworkInstanceId Invalid; // 0x00
		internal static NetworkInstanceId Zero; // 0x04
	
		// Properties
		public uint Value { get; } // 0x0043D258-0x0043D260 
	
		// Constructors
		public NetworkInstanceId(uint value); // 0x0043D06C-0x0043D088
		static NetworkInstanceId(); // 0x0043D260-0x0043D2D8
	
		// Methods
		public bool IsEmpty(); // 0x0043D088-0x0043D0A4
		public override int GetHashCode(); // 0x0043D0A4-0x0043D1C8
		public override bool Equals(object obj); // 0x0043D1C8-0x0043D1D0
		public bool Equals(NetworkInstanceId other); // 0x0043D1E4-0x0043D1EC
		public static bool operator ==(NetworkInstanceId c1, NetworkInstanceId c2); // 0x0043D1D0-0x0043D1E4
		public static bool operator !=(NetworkInstanceId c1, NetworkInstanceId c2); // 0x0043D1EC-0x0043D228
		public override string ToString(); // 0x0043D228-0x0043D258
	}

	[AddComponentMenu] // 0x001876E0-0x00187754
	[Obsolete] // 0x001876E0-0x00187754
	public class NetworkLobbyManager : NetworkManager // TypeDefIndex: 3124
	{
		// Fields
		[SerializeField] // 0x001881D8-0x001881E8
		private bool m_ShowLobbyGUI; // 0x94
		[SerializeField] // 0x001881E8-0x001881F8
		private int m_MaxPlayers; // 0x98
		[SerializeField] // 0x001881F8-0x00188208
		private int m_MaxPlayersPerConnection; // 0x9C
		[SerializeField] // 0x00188208-0x00188218
		private int m_MinPlayers; // 0xA0
		[SerializeField] // 0x00188218-0x00188228
		private NetworkLobbyPlayer m_LobbyPlayerPrefab; // 0xA4
		[SerializeField] // 0x00188228-0x00188238
		private GameObject m_GamePlayerPrefab; // 0xA8
		[SerializeField] // 0x00188238-0x00188248
		private string m_LobbyScene; // 0xAC
		[SerializeField] // 0x00188248-0x00188258
		private string m_PlayScene; // 0xB0
		private List<PendingPlayer> m_PendingPlayers; // 0xB4
		public NetworkLobbyPlayer[] lobbySlots; // 0xB8
		private static LobbyReadyToBeginMessage s_ReadyToBeginMessage; // 0x00
		private static IntegerMessage s_SceneLoadedMessage; // 0x04
		private static LobbyReadyToBeginMessage s_LobbyReadyToBeginMessage; // 0x08
	
		// Properties
		public bool showLobbyGUI { get; set; } // 0x0043D524-0x0043D52C 0x0043D52C-0x0043D534
		public int maxPlayers { get; set; } // 0x0043D534-0x0043D53C 0x0043D53C-0x0043D544
		public int maxPlayersPerConnection { get; set; } // 0x0043D544-0x0043D54C 0x0043D54C-0x0043D554
		public int minPlayers { get; set; } // 0x0043D554-0x0043D55C 0x0043D55C-0x0043D564
		public NetworkLobbyPlayer lobbyPlayerPrefab { get; set; } // 0x0043D564-0x0043D56C 0x0043D56C-0x0043D574
		public GameObject gamePlayerPrefab { get; set; } // 0x0043D574-0x0043D57C 0x0043D57C-0x0043D584
		public string lobbyScene { get; set; } // 0x0043D584-0x0043D58C 0x0043D58C-0x0043D598
		public string playScene { get; set; } // 0x0043D5A0-0x0043D5A8 0x0043D5A8-0x0043D5B0
	
		// Nested types
		private struct PendingPlayer // TypeDefIndex: 3125
		{
			// Fields
			public NetworkConnection conn; // 0x00
			public GameObject lobbyPlayer; // 0x04
		}
	
		// Constructors
		public NetworkLobbyManager(); // 0x0043D2D8-0x0043D3B8
		static NetworkLobbyManager(); // 0x004431CC-0x004432F4
	
		// Methods
		private new void OnValidate(); // 0x0043D5B0-0x0043D850
		private byte FindSlot(); // 0x0043D850-0x0043D948
		private void SceneLoadedForPlayer(NetworkConnection conn, GameObject lobbyPlayerGameObject); // 0x0043D948-0x0043DFA8
		private static int CheckConnectionIsReadyToBegin(NetworkConnection conn); // 0x0043E60C-0x0043E790
		public void CheckReadyToBegin(); // 0x0043E798-0x0043E9C0
		public void ServerReturnToLobby(); // 0x0043EA6C-0x0043EB50
		private void CallOnClientEnterLobby(); // 0x0043EBDC-0x0043ED24
		private void CallOnClientExitLobby(); // 0x0043ED2C-0x0043EE58
		public bool SendReturnToLobby(); // 0x0043EE58-0x0043EF14
		public override void OnServerConnect(NetworkConnection conn); // 0x0043EF14-0x0043F204
		public override void OnServerDisconnect(NetworkConnection conn); // 0x0043F408-0x0043F5E0
		public override void OnServerAddPlayer(NetworkConnection conn, short playerControllerId); // 0x0043F7DC-0x0043FD0C
		public override void OnServerRemovePlayer(NetworkConnection conn, UnityEngine.Networking.PlayerController player); // 0x0043FDC8-0x004400F8
		public override void ServerChangeScene(string sceneName); // 0x004405C8-0x00440924
		public override void OnServerSceneChanged(string sceneName); // 0x00440BA0-0x00440CD4
		private void OnServerReadyToBeginMessage(NetworkMessage netMsg); // 0x00440CD4-0x00441120
		private void OnServerSceneLoadedMessage(NetworkMessage netMsg); // 0x00441120-0x00441428
		private void OnServerReturnToLobbyMessage(NetworkMessage netMsg); // 0x00441428-0x004414FC
		public override void OnStartServer(); // 0x004414FC-0x004417A4
		public override void OnStartHost(); // 0x00441874-0x00441884
		public override void OnStopHost(); // 0x00441884-0x00441894
		public override void OnStartClient(NetworkClient lobbyClient); // 0x00441894-0x00441C88
		public override void OnClientConnect(NetworkConnection conn); // 0x00441C88-0x00441CC4
		public override void OnClientDisconnect(NetworkConnection conn); // 0x00441DA0-0x00441DD4
		public override void OnStopClient(); // 0x00441F28-0x00441F54
		public override void OnClientSceneChanged(NetworkConnection conn); // 0x00441F54-0x00442000
		private void OnClientReadyToBegin(NetworkMessage netMsg); // 0x00442274-0x0044275C
		private void OnClientAddPlayerFailedMessage(NetworkMessage netMsg); // 0x0044275C-0x0044283C
		public virtual void OnLobbyStartHost(); // 0x0044283C-0x00442840
		public virtual void OnLobbyStopHost(); // 0x00442840-0x00442844
		public virtual void OnLobbyStartServer(); // 0x00442844-0x00442848
		public virtual void OnLobbyServerConnect(NetworkConnection conn); // 0x00442848-0x0044284C
		public virtual void OnLobbyServerDisconnect(NetworkConnection conn); // 0x0044284C-0x00442850
		public virtual void OnLobbyServerSceneChanged(string sceneName); // 0x00442850-0x00442854
		public virtual GameObject OnLobbyServerCreateLobbyPlayer(NetworkConnection conn, short playerControllerId); // 0x00442854-0x0044285C
		public virtual GameObject OnLobbyServerCreateGamePlayer(NetworkConnection conn, short playerControllerId); // 0x0044285C-0x00442864
		public virtual void OnLobbyServerPlayerRemoved(NetworkConnection conn, short playerControllerId); // 0x00442864-0x00442868
		public virtual bool OnLobbyServerSceneLoadedForPlayer(GameObject lobbyPlayer, GameObject gamePlayer); // 0x00442868-0x00442870
		public virtual void OnLobbyServerPlayersReady(); // 0x00442870-0x00442884
		public virtual void OnLobbyClientEnter(); // 0x00442884-0x00442888
		public virtual void OnLobbyClientExit(); // 0x00442888-0x0044288C
		public virtual void OnLobbyClientConnect(NetworkConnection conn); // 0x0044288C-0x00442890
		public virtual void OnLobbyClientDisconnect(NetworkConnection conn); // 0x00442890-0x00442894
		public virtual void OnLobbyStartClient(NetworkClient lobbyClient); // 0x00442894-0x00442898
		public virtual void OnLobbyStopClient(); // 0x00442898-0x0044289C
		public virtual void OnLobbyClientSceneChanged(NetworkConnection conn); // 0x0044289C-0x004428A0
		public virtual void OnLobbyClientAddPlayerFailed(); // 0x004428A0-0x004428A4
		private void OnGUI(); // 0x004428A4-0x00442AB8
		public void TryToAddPlayer(); // 0x00442AB8-0x004431CC
	}

	[AddComponentMenu] // 0x00187754-0x001877D8
	[DisallowMultipleComponent] // 0x00187754-0x001877D8
	[Obsolete] // 0x00187754-0x001877D8
	public class NetworkLobbyPlayer : NetworkBehaviour // TypeDefIndex: 3126
	{
		// Fields
		[SerializeField] // 0x00188258-0x001882D0
		[Tooltip] // 0x00188258-0x001882D0
		public bool ShowLobbyGUI; // 0x1C
		private byte m_Slot; // 0x1D
		private bool m_ReadyToBegin; // 0x1E
	
		// Properties
		public byte slot { get; set; } // 0x004400F8-0x00440100 0x0043FD0C-0x0043FD14
		public bool readyToBegin { get; set; } // 0x0043E790-0x0043E798 0x0043ED24-0x0043ED2C
	
		// Constructors
		public NetworkLobbyPlayer(); // 0x004432F4-0x00443380
	
		// Methods
		private void Start(); // 0x00443380-0x00443414
		private void OnEnable(); // 0x00443414-0x004434B0
		private void OnDisable(); // 0x004434B0-0x0044354C
		public override void OnStartClient(); // 0x0044354C-0x004436B8
		public void SendReadyToBeginMessage(); // 0x0044378C-0x00443938
		public void SendNotReadyToBeginMessage(); // 0x00443938-0x00443AE4
		public void SendSceneLoadedMessage(); // 0x00443AE4-0x00443C64
		private void OnSceneLoaded(Scene scene, LoadSceneMode mode); // 0x00443C64-0x00443D54
		private NetworkLobbyManager GetLobbyManager(); // 0x004436B8-0x0044378C
		public void RemovePlayer(); // 0x00443D54-0x00443EB4
		public virtual void OnClientEnterLobby(); // 0x00443EB4-0x00443EB8
		public virtual void OnClientExitLobby(); // 0x00443EB8-0x00443EBC
		public virtual void OnClientReady(bool readyState); // 0x00443EBC-0x00443EC0
		public override bool OnSerialize(NetworkWriter writer, bool initialState); // 0x00443EC0-0x00443F58
		public override void OnDeserialize(NetworkReader reader, bool initialState); // 0x00443F58-0x00443FCC
		private void OnGUI(); // 0x00444108-0x00444644
	}

	public enum PlayerSpawnMethod // TypeDefIndex: 3127
	{
		Random = 0,
		RoundRobin = 1
	}

	[AddComponentMenu] // 0x001877D8-0x00187848
	[Obsolete] // 0x001877D8-0x00187848
	public class NetworkManager : MonoBehaviour // TypeDefIndex: 3128
	{
		// Fields
		[SerializeField] // 0x001882D0-0x001882E0
		private int m_NetworkPort; // 0x0C
		[SerializeField] // 0x001882E0-0x001882F0
		private bool m_ServerBindToIP; // 0x10
		[SerializeField] // 0x001882F0-0x00188300
		private string m_ServerBindAddress; // 0x14
		[SerializeField] // 0x00188300-0x00188310
		private string m_NetworkAddress; // 0x18
		[SerializeField] // 0x00188310-0x00188320
		private bool m_DontDestroyOnLoad; // 0x1C
		[SerializeField] // 0x00188320-0x00188330
		private bool m_RunInBackground; // 0x1D
		[SerializeField] // 0x00188330-0x00188340
		private bool m_ScriptCRCCheck; // 0x1E
		[SerializeField] // 0x00188340-0x00188350
		private float m_MaxDelay; // 0x20
		[SerializeField] // 0x00188350-0x00188360
		private LogFilter.FilterLevel m_LogLevel; // 0x24
		[SerializeField] // 0x00188360-0x00188370
		private GameObject m_PlayerPrefab; // 0x28
		[SerializeField] // 0x00188370-0x00188380
		private bool m_AutoCreatePlayer; // 0x2C
		[SerializeField] // 0x00188380-0x00188390
		private PlayerSpawnMethod m_PlayerSpawnMethod; // 0x30
		[SerializeField] // 0x00188390-0x001883A0
		private string m_OfflineScene; // 0x34
		[SerializeField] // 0x001883A0-0x001883B0
		private string m_OnlineScene; // 0x38
		[SerializeField] // 0x001883B0-0x001883C0
		private List<GameObject> m_SpawnPrefabs; // 0x3C
		[SerializeField] // 0x001883C0-0x001883D0
		private bool m_CustomConfig; // 0x40
		[SerializeField] // 0x001883D0-0x001883E0
		private int m_MaxConnections; // 0x44
		[SerializeField] // 0x001883E0-0x001883F0
		private ConnectionConfig m_ConnectionConfig; // 0x48
		[SerializeField] // 0x001883F0-0x00188400
		private GlobalConfig m_GlobalConfig; // 0x4C
		[SerializeField] // 0x00188400-0x00188410
		private List<QosType> m_Channels; // 0x50
		[SerializeField] // 0x00188410-0x00188420
		private bool m_UseWebSockets; // 0x54
		[SerializeField] // 0x00188420-0x00188430
		private bool m_UseSimulator; // 0x55
		[SerializeField] // 0x00188430-0x00188440
		private int m_SimulatedLatency; // 0x58
		[SerializeField] // 0x00188440-0x00188450
		private float m_PacketLossPercentage; // 0x5C
		[SerializeField] // 0x00188450-0x00188460
		private int m_MaxBufferedPackets; // 0x60
		[SerializeField] // 0x00188460-0x00188470
		private bool m_AllowFragmentation; // 0x64
		[SerializeField] // 0x00188470-0x00188480
		private string m_MatchHost; // 0x68
		[SerializeField] // 0x00188480-0x00188490
		private int m_MatchPort; // 0x6C
		[SerializeField] // 0x00188490-0x001884A0
		public string matchName; // 0x70
		[SerializeField] // 0x001884A0-0x001884B0
		public uint matchSize; // 0x74
		private NetworkMigrationManager m_MigrationManager; // 0x78
		private EndPoint m_EndPoint; // 0x7C
		private bool m_ClientLoadedScene; // 0x80
		private static INetworkTransport s_ActiveTransport; // 0x00
		public static string networkSceneName; // 0x04
		public bool isNetworkActive; // 0x81
		public NetworkClient client; // 0x84
		private static List<Transform> s_StartPositions; // 0x08
		private static int s_StartPositionIndex; // 0x0C
		public MatchInfo matchInfo; // 0x88
		public NetworkMatch matchMaker; // 0x8C
		public List<MatchInfoSnapshot> matches; // 0x90
		public static NetworkManager singleton; // 0x10
		private static AddPlayerMessage s_AddPlayerMessage; // 0x14
		private static RemovePlayerMessage s_RemovePlayerMessage; // 0x18
		private static UnityEngine.Networking.NetworkSystem.ErrorMessage s_ErrorMessage; // 0x1C
		private static AsyncOperation s_LoadingSceneAsync; // 0x20
		private static NetworkConnection s_ClientReadyConnection; // 0x24
		private static string s_Address; // 0x28
	
		// Properties
		public int networkPort { get; set; } // 0x00444644-0x0044464C 0x0044464C-0x00444654
		public bool serverBindToIP { get; set; } // 0x00444654-0x0044465C 0x0044465C-0x00444664
		public string serverBindAddress { get; set; } // 0x00444664-0x0044466C 0x0044466C-0x00444674
		public string networkAddress { get; set; } // 0x00444674-0x0044467C 0x0044467C-0x00444684
		public bool dontDestroyOnLoad { get; set; } // 0x00444684-0x0044468C 0x0044468C-0x00444694
		public bool runInBackground { get; set; } // 0x00444694-0x0044469C 0x0044469C-0x004446A4
		public bool scriptCRCCheck { get; set; } // 0x004446A4-0x004446AC 0x004446AC-0x004446B4
		[Obsolete] // 0x00188A58-0x00188AA8
		public bool sendPeerInfo { get; set; } // 0x004446B4-0x004446BC 0x004446BC-0x004446C0
		public float maxDelay { get; set; } // 0x004446C0-0x004446C8 0x004446C8-0x004446D0
		public LogFilter.FilterLevel logLevel { get; set; } // 0x004446D0-0x004446D8 0x004446D8-0x00444764
		public GameObject playerPrefab { get; set; } // 0x00444764-0x0044476C 0x0044476C-0x00444774
		public bool autoCreatePlayer { get; set; } // 0x00444774-0x0044477C 0x0044477C-0x00444784
		public PlayerSpawnMethod playerSpawnMethod { get; set; } // 0x00444784-0x0044478C 0x0044478C-0x00444794
		public string offlineScene { get; set; } // 0x00444794-0x0044479C 0x0043D598-0x0043D5A0
		public string onlineScene { get; set; } // 0x0044479C-0x004447A4 0x004447A4-0x004447AC
		public List<GameObject> spawnPrefabs { get; } // 0x004447AC-0x004447B4 
		public List<Transform> startPositions { get; } // 0x004447B4-0x00444840 
		public bool customConfig { get; set; } // 0x00444840-0x00444848 0x00444848-0x00444850
		public ConnectionConfig connectionConfig { get; } // 0x00444850-0x004448D0 
		public GlobalConfig globalConfig { get; } // 0x004448D0-0x00444950 
		public int maxConnections { get; set; } // 0x00444950-0x00444958 0x00444958-0x00444960
		public List<QosType> channels { get; } // 0x00444960-0x00444968 
		public EndPoint secureTunnelEndpoint { get; set; } // 0x00444968-0x00444970 0x00444970-0x00444978
		public bool useWebSockets { get; set; } // 0x00444978-0x00444980 0x00444980-0x00444988
		public bool useSimulator { get; set; } // 0x00444988-0x00444990 0x00444990-0x00444998
		public int simulatedLatency { get; set; } // 0x00444998-0x004449A0 0x004449A0-0x004449A8
		public float packetLossPercentage { get; set; } // 0x004449A8-0x004449B0 0x004449B0-0x004449B8
		public string matchHost { get; set; } // 0x004449B8-0x004449C0 0x004449C0-0x004449C8
		public int matchPort { get; set; } // 0x004449C8-0x004449D0 0x004449D0-0x004449D8
		public bool clientLoadedScene { get; set; } // 0x004449D8-0x004449E0 0x004449E0-0x004449E8
		public NetworkMigrationManager migrationManager { get; } // 0x004449E8-0x004449F0 
		public int numPlayers { get; } // 0x0043F204-0x0043F404 
		public static INetworkTransport defaultTransport { get; } // 0x004449F0-0x00444A5C 
		public static INetworkTransport activeTransport { get; set; } // 0x00444A5C-0x00444AE8 0x00444AE8-0x00444D30
	
		// Constructors
		public NetworkManager(); // 0x0043D3B8-0x0043D524
		static NetworkManager(); // 0x0044E91C-0x0044EA78
	
		// Methods
		private void Awake(); // 0x00444D30-0x00444D34
		private void InitializeSingleton(); // 0x00444D34-0x00445328
		private void OnValidate(); // 0x00445328-0x00445798
		internal void RegisterServerMessages(); // 0x00445798-0x00445964
		public void SetupMigrationManager(NetworkMigrationManager man); // 0x00445964-0x0044596C
		public bool StartServer(ConnectionConfig config, int maxConnections); // 0x0044596C-0x00445990
		public bool StartServer(); // 0x004460F0-0x00446114
		public bool StartServer(MatchInfo info); // 0x00446114-0x00446134
		private bool StartServer(MatchInfo info, ConnectionConfig config, int maxConnections); // 0x00445990-0x004460F0
		internal void RegisterClientMessages(NetworkClient client); // 0x00446B4C-0x00446EE4
		public void UseExternalClient(NetworkClient externalClient); // 0x00446EE4-0x0044706C
		public NetworkClient StartClient(MatchInfo info, ConnectionConfig config, int hostPort); // 0x00447354-0x00447D04
		public NetworkClient StartClient(MatchInfo matchInfo); // 0x00447F14-0x00447F34
		public NetworkClient StartClient(); // 0x00447F50-0x00447F74
		public NetworkClient StartClient(MatchInfo info, ConnectionConfig config); // 0x00447F34-0x00447F50
		public virtual NetworkClient StartHost(ConnectionConfig config, int maxConnections); // 0x00447F74-0x00448024
		public virtual NetworkClient StartHost(MatchInfo info); // 0x004481FC-0x00448278
		public virtual NetworkClient StartHost(); // 0x00448278-0x004482EC
		private NetworkClient ConnectLocalClient(); // 0x00448024-0x004481FC
		public void StopHost(); // 0x004482EC-0x004483F8
		public void StopServer(); // 0x004483F8-0x00448580
		public void StopClient(); // 0x00448580-0x00448710
		public virtual void ServerChangeScene(string newSceneName); // 0x00440924-0x00440BA0
		private void CleanupNetworkIdentities(); // 0x00448D74-0x00448E38
		internal void ClientChangeScene(string newSceneName, bool forceReload); // 0x0044706C-0x00447354
		private void FinishLoadScene(); // 0x004491A0-0x00449460
		internal static void UpdateScene(); // 0x00449478-0x00449774
		private void OnDestroy(); // 0x00449774-0x0044983C
		public static void RegisterStartPosition(Transform start); // 0x0044983C-0x00449BB4
		public static void UnRegisterStartPosition(Transform start); // 0x00449BB4-0x00449F2C
		public bool IsClientConnected(); // 0x00449460-0x00449478
		public static void Shutdown(); // 0x00449F2C-0x0044A0C4
		internal void OnServerConnectInternal(NetworkMessage netMsg); // 0x0044A0C4-0x0044A4B8
		internal void OnServerDisconnectInternal(NetworkMessage netMsg); // 0x0044B004-0x0044B160
		internal void OnServerReadyMessageInternal(NetworkMessage netMsg); // 0x0044B160-0x0044B258
		internal void OnServerAddPlayerMessageInternal(NetworkMessage netMsg); // 0x0044B258-0x0044B594
		internal void OnServerRemovePlayerMessageInternal(NetworkMessage netMsg); // 0x0044B61C-0x0044B8B8
		internal void OnServerErrorInternal(NetworkMessage netMsg); // 0x0044B8B8-0x0044BA68
		internal void OnClientConnectInternal(NetworkMessage netMsg); // 0x0044BA68-0x0044BC58
		internal void OnClientDisconnectInternal(NetworkMessage netMsg); // 0x0044BC58-0x0044BF6C
		internal void OnClientNotReadyMessageInternal(NetworkMessage netMsg); // 0x0044C378-0x0044C4A4
		internal void OnClientErrorInternal(NetworkMessage netMsg); // 0x0044C4A4-0x0044C654
		internal void OnClientSceneInternal(NetworkMessage netMsg); // 0x0044C654-0x0044C7BC
		public virtual void OnServerConnect(NetworkConnection conn); // 0x0043F404-0x0043F408
		public virtual void OnServerDisconnect(NetworkConnection conn); // 0x0043F5E0-0x0043F75C
		public virtual void OnServerReady(NetworkConnection conn); // 0x0044CEDC-0x0044D02C
		public virtual void OnServerAddPlayer(NetworkConnection conn, short playerControllerId, NetworkReader extraMessageReader); // 0x0044D0C0-0x0044D0C4
		public virtual void OnServerAddPlayer(NetworkConnection conn, short playerControllerId); // 0x0044D6E8-0x0044D6EC
		private void OnServerAddPlayerInternal(NetworkConnection conn, short playerControllerId); // 0x0044D0C4-0x0044D6E8
		public Transform GetStartPosition(); // 0x0043DFA8-0x0043E558
		public virtual void OnServerRemovePlayer(NetworkConnection conn, UnityEngine.Networking.PlayerController player); // 0x00440100-0x004401DC
		public virtual void OnServerError(NetworkConnection conn, int errorCode); // 0x0044D6EC-0x0044D6F0
		public virtual void OnServerSceneChanged(string sceneName); // 0x0044D6F0-0x0044D6F4
		public virtual void OnClientConnect(NetworkConnection conn); // 0x00441CC4-0x00441DA0
		public virtual void OnClientDisconnect(NetworkConnection conn); // 0x00441DD4-0x00441F28
		public virtual void OnClientError(NetworkConnection conn, int errorCode); // 0x0044D6F4-0x0044D6F8
		public virtual void OnClientNotReady(NetworkConnection conn); // 0x0044D6F8-0x0044D6FC
		public virtual void OnClientSceneChanged(NetworkConnection conn); // 0x00442000-0x00442274
		public void StartMatchMaker(); // 0x0044D6FC-0x0044D7F4
		public void StopMatchMaker(); // 0x00448B24-0x00448D74
		public void SetMatchHost(string newHost, int port, bool https); // 0x0044D7F4-0x0044DCC0
		public virtual void OnStartHost(); // 0x0044DCC0-0x0044DCC4
		public virtual void OnStartServer(); // 0x0044DCC4-0x0044DCC8
		public virtual void OnStartClient(NetworkClient client); // 0x0044DCC8-0x0044DCCC
		public virtual void OnStopServer(); // 0x0044DCCC-0x0044DCD0
		public virtual void OnStopClient(); // 0x0044DCD0-0x0044DCD4
		public virtual void OnStopHost(); // 0x0044DCD4-0x0044DCD8
		public virtual void OnMatchCreate(bool success, string extendedInfo, MatchInfo matchInfo); // 0x0044DCD8-0x0044DF18
		public virtual void OnMatchList(bool success, string extendedInfo, List<MatchInfoSnapshot> matchList); // 0x0044DF18-0x0044E188
		public virtual void OnMatchJoined(bool success, string extendedInfo, MatchInfo matchInfo); // 0x0044E188-0x0044E3C4
		public virtual void OnDestroyMatch(bool success, string extendedInfo); // 0x0044E3C4-0x0044E58C
		public virtual void OnDropConnection(bool success, string extendedInfo); // 0x0044E58C-0x0044E754
		public virtual void OnSetMatchAttributes(bool success, string extendedInfo); // 0x0044E754-0x0044E91C
	}

	[AddComponentMenu] // 0x00187848-0x00187938
	[EditorBrowsable] // 0x00187848-0x00187938
	[Obsolete] // 0x00187848-0x00187938
	[RequireComponent] // 0x00187848-0x00187938
	public class NetworkManagerHUD : MonoBehaviour // TypeDefIndex: 3129
	{
		// Fields
		public NetworkManager manager; // 0x0C
		[SerializeField] // 0x001884B0-0x001884C0
		public bool showGUI; // 0x10
		[SerializeField] // 0x001884C0-0x001884D0
		public int offsetX; // 0x14
		[SerializeField] // 0x001884D0-0x001884E0
		public int offsetY; // 0x18
		private bool m_ShowServer; // 0x1C
	
		// Constructors
		public NetworkManagerHUD(); // 0x0044EA78-0x0044EA88
	
		// Methods
		private void Awake(); // 0x0044EA88-0x0044EAF0
		private void Update(); // 0x0044EAF0-0x0044EDB0
		private void OnGUI(); // 0x0044EDB0-0x00450CD0
	}

	internal class NetworkMessageHandlers // TypeDefIndex: 3130
	{
		// Fields
		private Dictionary<short, NetworkMessageDelegate> m_MsgHandlers; // 0x08
	
		// Constructors
		public NetworkMessageHandlers(); // 0x00451538-0x004515C4
	
		// Methods
		internal void RegisterHandlerSafe(short msgType, NetworkMessageDelegate handler); // 0x004515C4-0x004519A0
		public void RegisterHandler(short msgType, NetworkMessageDelegate handler); // 0x004519A0-0x00451EFC
		internal NetworkMessageDelegate GetHandler(short msgType); // 0x00451EFC-0x00451FBC
		internal Dictionary<short, NetworkMessageDelegate> GetHandlers(); // 0x00451FBC-0x00451FC4
	}

	[AddComponentMenu] // 0x00187938-0x001879B0
	[Obsolete] // 0x00187938-0x001879B0
	public class NetworkMigrationManager : MonoBehaviour // TypeDefIndex: 3131
	{
		// Fields
		[SerializeField] // 0x001884E0-0x001884F0
		private bool m_HostMigration; // 0x0C
		[SerializeField] // 0x001884F0-0x00188500
		private bool m_ShowGUI; // 0x0D
		[SerializeField] // 0x00188500-0x00188510
		private int m_OffsetX; // 0x10
		[SerializeField] // 0x00188510-0x00188520
		private int m_OffsetY; // 0x14
		private NetworkClient m_Client; // 0x18
		private bool m_WaitingToBecomeNewHost; // 0x1C
		private bool m_WaitingReconnectToNewHost; // 0x1D
		private bool m_DisconnectedFromHost; // 0x1E
		private bool m_HostWasShutdown; // 0x1F
		private MatchInfo m_MatchInfo; // 0x20
		private int m_OldServerConnectionId; // 0x24
		private string m_NewHostAddress; // 0x28
		private PeerInfoMessage m_NewHostInfo; // 0x2C
		private PeerListMessage m_PeerListMessage; // 0x30
		private PeerInfoMessage[] m_Peers; // 0x34
		private Dictionary<int, ConnectionPendingPlayers> m_PendingPlayers; // 0x38
	
		// Properties
		public bool hostMigration { get; set; } // 0x00452494-0x0045249C 0x0045249C-0x004524A4
		public bool showGUI { get; set; } // 0x004524A4-0x004524AC 0x004524AC-0x004524B4
		public int offsetX { get; set; } // 0x004524B4-0x004524BC 0x004524BC-0x004524C4
		public int offsetY { get; set; } // 0x004524C4-0x004524CC 0x004524CC-0x004524D4
		public NetworkClient client { get; } // 0x004524D4-0x004524DC 
		public bool waitingToBecomeNewHost { get; set; } // 0x004524DC-0x004524E4 0x004524E4-0x004524EC
		public bool waitingReconnectToNewHost { get; set; } // 0x004524EC-0x004524F4 0x004524F4-0x004524FC
		public bool disconnectedFromHost { get; } // 0x004524FC-0x00452504 
		public bool hostWasShutdown { get; } // 0x00452504-0x0045250C 
		public MatchInfo matchInfo { get; } // 0x0045250C-0x00452514 
		public int oldServerConnectionId { get; } // 0x00452514-0x0045251C 
		public string newHostAddress { get; set; } // 0x0045251C-0x00452524 0x00452524-0x0045252C
		public PeerInfoMessage[] peers { get; } // 0x0045252C-0x00452534 
		public Dictionary<int, ConnectionPendingPlayers> pendingPlayers { get; } // 0x00452534-0x0045253C 
	
		// Nested types
		public enum SceneChangeOption // TypeDefIndex: 3132
		{
			StayInOnlineScene = 0,
			SwitchToOfflineScene = 1
		}
	
		public struct PendingPlayerInfo // TypeDefIndex: 3133
		{
			// Fields
			public NetworkInstanceId netId; // 0x00
			public short playerControllerId; // 0x04
			public GameObject obj; // 0x08
		}
	
		public struct ConnectionPendingPlayers // TypeDefIndex: 3134
		{
			// Fields
			public List<PendingPlayerInfo> players; // 0x00
		}
	
		// Constructors
		public NetworkMigrationManager(); // 0x00451FC4-0x004520B8
	
		// Methods
		private void AddPendingPlayer(GameObject obj, int connectionId, NetworkInstanceId netId, short playerControllerId); // 0x004520B8-0x00452228
		private GameObject FindPendingPlayer(int connectionId, NetworkInstanceId netId, short playerControllerId); // 0x00452228-0x00452414
		private void RemovePendingPlayer(int connectionId); // 0x00452414-0x00452494
		private void Start(); // 0x0045253C-0x00452544
		public void Reset(int reconnectId); // 0x00452544-0x004526C4
		internal void AssignAuthorityCallback(NetworkConnection conn, NetworkIdentity uv, bool authorityState); // 0x004526C4-0x0045294C
		public void Initialize(NetworkClient newClient, MatchInfo newMatchInfo); // 0x00447D04-0x00447F14
		public void DisablePlayerObjects(); // 0x0045294C-0x00453254
		public void SendPeerInfo(); // 0x0044A5A4-0x0044B004
		private void OnPeerClientAuthority(NetworkMessage netMsg); // 0x0045345C-0x004539E8
		private void OnPeerInfo(NetworkMessage netMsg); // 0x004539E8-0x00453F48
		private void OnServerReconnectPlayerMessage(NetworkMessage netMsg); // 0x00453F48-0x0045495C
		public bool ReconnectObjectForConnection(NetworkConnection newConnection, GameObject oldObject, int oldConnectionId); // 0x0045495C-0x00454FD0
		public bool ReconnectPlayerForConnection(NetworkConnection newConnection, GameObject oldPlayer, int oldConnectionId, short playerControllerId); // 0x00455170-0x004557DC
		public bool LostHostOnClient(NetworkConnection conn); // 0x0044BF6C-0x0044C378
		public void LostHostOnHost(); // 0x00448710-0x00448918
		public bool BecomeNewHost(int port); // 0x00455934-0x00455D14
		protected virtual void OnClientDisconnectedFromHost(NetworkConnection conn, out SceneChangeOption sceneChange); // 0x00455DD4-0x00455DE0
		protected virtual void OnServerHostShutdown(); // 0x00455DE0-0x00455DE4
		protected virtual void OnServerReconnectPlayer(NetworkConnection newConnection, GameObject oldPlayer, int oldConnectionId, short playerControllerId); // 0x00455DE4-0x00455E04
		protected virtual void OnServerReconnectPlayer(NetworkConnection newConnection, GameObject oldPlayer, int oldConnectionId, short playerControllerId, NetworkReader extraMessageReader); // 0x00455E04-0x00455E24
		protected virtual void OnServerReconnectObject(NetworkConnection newConnection, GameObject oldObject, int oldConnectionId); // 0x00455E24-0x00455E3C
		protected virtual void OnPeersUpdated(PeerListMessage peers); // 0x00455E3C-0x00455F68
		protected virtual void OnAuthorityUpdated(GameObject go, int connectionId, bool authorityState); // 0x00455F68-0x004562E8
		public virtual bool FindNewHost(out PeerInfoMessage newHostInfo, out bool youAreNewHost); // 0x004562E8-0x00456690
		private void OnGUIHost(); // 0x00456690-0x00456E64
		private void OnGUIClient(); // 0x00456E64-0x00457840
		private void OnGUI(); // 0x00457840-0x00457930
	}

	[AddComponentMenu] // 0x001879B0-0x00187A90
	[Obsolete] // 0x001879B0-0x00187A90
	[RequireComponent] // 0x001879B0-0x00187A90
	public class NetworkProximityChecker : NetworkBehaviour // TypeDefIndex: 3135
	{
		// Fields
		[Tooltip] // 0x00188520-0x00188580
		public int visRange; // 0x1C
		[Tooltip] // 0x00188580-0x001885B4
		public float visUpdateInterval; // 0x20
		[Tooltip] // 0x001885B4-0x001885E8
		public CheckMethod checkMethod; // 0x24
		[Tooltip] // 0x001885E8-0x0018864C
		public bool forceHidden; // 0x28
		private float m_VisUpdateTime; // 0x2C
	
		// Nested types
		public enum CheckMethod // TypeDefIndex: 3136
		{
			Physics3D = 0,
			Physics2D = 1
		}
	
		// Constructors
		public NetworkProximityChecker(); // 0x00457930-0x004579D0
	
		// Methods
		private void Update(); // 0x004579D0-0x00457AC0
		public override bool OnCheckObserver(NetworkConnection newObserver); // 0x00457AC0-0x00457D90
		public override bool OnRebuildObservers(HashSet<NetworkConnection> observers, bool initial); // 0x00457D90-0x00458220
		public override void OnSetLocalVisibility(bool vis); // 0x00458220-0x00458240
		private static void SetVis(GameObject go, bool vis); // 0x00458240-0x004583DC
	}

	[Obsolete] // 0x00187A90-0x00187AC4
	public class NetworkReader // TypeDefIndex: 3137
	{
		// Fields
		private NetBuffer m_buf; // 0x08
		private static byte[] s_StringReaderBuffer; // 0x00
		private static Encoding s_Encoding; // 0x04
	
		// Properties
		public uint Position { get; } // 0x00458548-0x00458574 
		public int Length { get; } // 0x00458574-0x004585A0 
	
		// Constructors
		public NetworkReader(NetworkWriter writer); // 0x004583DC-0x00458484
		public NetworkReader(byte[] buffer); // 0x0044B594-0x0044B61C
	
		// Methods
		private static void Initialize(); // 0x00458484-0x00458548
		public void SeekZero(); // 0x004585A0-0x004585CC
		internal void Replace(byte[] buffer); // 0x004585CC-0x00458600
		public uint ReadPackedUInt32(); // 0x00443FCC-0x004440A8
		public NetworkInstanceId ReadNetworkId(); // 0x00458600-0x00458604
		public NetworkSceneId ReadSceneId(); // 0x00458604-0x00458610
		public byte ReadByte(); // 0x004440A8-0x004440D4
		public short ReadInt16(); // 0x00458610-0x0045866C
		public ushort ReadUInt16(); // 0x0045866C-0x004586C4
		public int ReadInt32(); // 0x004586C4-0x00458764
		public uint ReadUInt32(); // 0x00458764-0x00458804
		public float ReadSingle(); // 0x00458804-0x0045881C
		public string ReadString(); // 0x0044C7BC-0x0044C9FC
		public bool ReadBoolean(); // 0x004440D4-0x00444108
		public byte[] ReadBytes(int count); // 0x0045881C-0x00458948
		public byte[] ReadBytesAndSize(); // 0x00458948-0x004589CC
		public Vector2 ReadVector2(); // 0x004589CC-0x00458A34
		public Vector3 ReadVector3(); // 0x00458A34-0x00458ADC
		public Quaternion ReadQuaternion(); // 0x00458ADC-0x00458B94
		public NetworkHash128 ReadNetworkHash128(); // 0x00458B94-0x00458CD4
		public override string ToString(); // 0x00458CD4-0x00458D08
	}

	internal class NetworkScene // TypeDefIndex: 3138
	{
		// Fields
		private Dictionary<NetworkInstanceId, NetworkIdentity> m_LocalObjects; // 0x08
		private static Dictionary<NetworkHash128, GameObject> s_GuidToPrefab; // 0x00
		private static Dictionary<NetworkHash128, SpawnDelegate> s_SpawnHandlers; // 0x04
		private static Dictionary<NetworkHash128, UnSpawnDelegate> s_UnspawnHandlers; // 0x08
	
		// Properties
		internal Dictionary<NetworkInstanceId, NetworkIdentity> localObjects { get; } // 0x00458D94-0x00458D9C 
	
		// Constructors
		public NetworkScene(); // 0x00458D08-0x00458D94
		static NetworkScene(); // 0x0045A56C-0x0045A674
	
		// Methods
		internal void SetLocalObject(NetworkInstanceId netId, GameObject obj, bool isClient, bool isServer); // 0x00458D9C-0x004591EC
		internal GameObject FindLocalObject(NetworkInstanceId netId); // 0x004591EC-0x00459310
		internal bool GetNetworkIdentity(NetworkInstanceId netId, out NetworkIdentity uv); // 0x00459310-0x00459460
		internal bool RemoveLocalObject(NetworkInstanceId netId); // 0x00459460-0x004594E0
		internal void ClearLocalObjects(); // 0x004594E0-0x00459558
		internal static void RegisterPrefab(GameObject prefab); // 0x00459558-0x00459B10
		internal static bool GetPrefab(NetworkHash128 assetId, out GameObject prefab); // 0x00459B10-0x00459DA8
		internal static bool GetSpawnHandler(NetworkHash128 assetId, out SpawnDelegate handler); // 0x00459DA8-0x00459F2C
		internal static bool InvokeUnSpawnHandler(NetworkHash128 assetId, GameObject obj); // 0x00459F2C-0x0045A150
		internal void DestroyAllClientObjects(); // 0x0045A150-0x0045A56C
	}

	[Serializable]
	[Obsolete] // 0x00187AC4-0x00187AF8
	public struct NetworkSceneId : IEquatable<NetworkSceneId> // TypeDefIndex: 3139
	{
		// Fields
		[SerializeField] // 0x0018864C-0x0018865C
		private uint m_Value; // 0x00
	
		// Properties
		public uint Value { get; } // 0x0045A78C-0x0045A794 
	
		// Constructors
		public NetworkSceneId(uint value); // 0x0045A674-0x0045A67C
	
		// Methods
		public bool IsEmpty(); // 0x0045A67C-0x0045A698
		public override int GetHashCode(); // 0x0045A698-0x0045A748
		public override bool Equals(object obj); // 0x0045A748-0x0045A750
		public bool Equals(NetworkSceneId other); // 0x0045A764-0x0045A778
		public static bool operator ==(NetworkSceneId c1, NetworkSceneId c2); // 0x0045A750-0x0045A764
		public override string ToString(); // 0x0045A778-0x0045A78C
	}

	[Obsolete] // 0x00187AF8-0x00187B2C
	public sealed class NetworkServer // TypeDefIndex: 3140
	{
		// Fields
		private static bool s_Active; // 0x00
		private static NetworkServer s_Instance; // 0x04
		private static object s_Sync; // 0x08
		private static bool m_DontListen; // 0x0C
		private bool m_LocalClientActive; // 0x08
		private List<NetworkConnection> m_LocalConnectionsFakeList; // 0x0C
		private ULocalConnectionToClient m_LocalConnection; // 0x10
		private NetworkScene m_NetworkScene; // 0x14
		private HashSet<int> m_ExternalConnections; // 0x18
		private ServerSimpleWrapper m_SimpleServerSimple; // 0x1C
		private float m_MaxDelay; // 0x20
		private HashSet<NetworkInstanceId> m_RemoveList; // 0x24
		private int m_RemoveListCount; // 0x28
		internal static ushort maxPacketSize; // 0x0E
		private static RemovePlayerMessage s_RemovePlayerMessage; // 0x10
		[CompilerGenerated] // 0x0018865C-0x0018866C
		private static NetworkMessageDelegate <>f__mg$cache0; // 0x14
		[CompilerGenerated] // 0x0018866C-0x0018867C
		private static NetworkMessageDelegate <>f__mg$cache1; // 0x18
		[CompilerGenerated] // 0x0018867C-0x0018868C
		private static NetworkMessageDelegate <>f__mg$cache2; // 0x1C
		[CompilerGenerated] // 0x0018868C-0x0018869C
		private static NetworkMessageDelegate <>f__mg$cache3; // 0x20
		[CompilerGenerated] // 0x0018869C-0x001886AC
		private static NetworkMessageDelegate <>f__mg$cache4; // 0x24
		[CompilerGenerated] // 0x001886AC-0x001886BC
		private static NetworkMessageDelegate <>f__mg$cache5; // 0x28
		[CompilerGenerated] // 0x001886BC-0x001886CC
		private static NetworkMessageDelegate <>f__mg$cache6; // 0x2C
		[CompilerGenerated] // 0x001886CC-0x001886DC
		private static NetworkMessageDelegate <>f__mg$cache7; // 0x30
		[CompilerGenerated] // 0x001886DC-0x001886EC
		private static NetworkMessageDelegate <>f__mg$cache8; // 0x34
	
		// Properties
		public static List<NetworkConnection> localConnections { get; } // 0x0045AA5C-0x0045AAEC 
		public static int listenPort { get; } // 0x00453300-0x004533AC 
		public static int serverHostId { get; } // 0x00453254-0x00453300 
		public static ReadOnlyCollection<NetworkConnection> connections { get; } // 0x0043E9C0-0x0043EA6C 
		public static Dictionary<short, NetworkMessageDelegate> handlers { get; } // 0x0045AD30-0x0045ADDC 
		public static HostTopology hostTopology { get; } // 0x0045ADDC-0x0045AE88 
		public static Dictionary<NetworkInstanceId, NetworkIdentity> objects { get; } // 0x0045AE88-0x0045AF2C 
		public static bool useWebSockets { set; } // 0x00446134-0x004461E8
		internal static NetworkServer instance { get; } // 0x0045AAEC-0x0045AD30 
		public static bool active { get; } // 0x0043EB50-0x0043EBDC 
		public static bool localClientActive { get; } // 0x004558A4-0x00455934 
		public static int numChannels { get; } // 0x0044A4B8-0x0044A5A4 
	
		// Nested types
		private class ServerSimpleWrapper : NetworkServerSimple // TypeDefIndex: 3141
		{
			// Fields
			private NetworkServer m_Server; // 0x38
	
			// Constructors
			public ServerSimpleWrapper(NetworkServer server); // 0x00AC5F5C-0x00AC5F78
	
			// Methods
			public override void OnConnectError(int connectionId, byte error); // 0x00AC60CC-0x00AC6100
			public override void OnDataError(NetworkConnection conn, byte error); // 0x00AC6100-0x00AC613C
			public override void OnDisconnectError(NetworkConnection conn, byte error); // 0x00AC613C-0x00AC6178
			public override void OnConnected(NetworkConnection conn); // 0x00AC6178-0x00AC61AC
			public override void OnDisconnected(NetworkConnection conn); // 0x00AC61AC-0x00AC61E0
			public override void OnData(NetworkConnection conn, int receivedSize, int channelId); // 0x00AC61E0-0x00AC6230
		}
	
		// Constructors
		private NetworkServer(); // 0x0045A794-0x0045AA5C
		static NetworkServer(); // 0x0046472C-0x004647D8
	
		// Methods
		public static bool Configure(ConnectionConfig config, int maxConnections); // 0x004461E8-0x004462A4
		public static bool Configure(HostTopology topology); // 0x0045AF2C-0x0045AFE0
		public static void Shutdown(); // 0x00448918-0x00448B24
		public static bool Listen(MatchInfo matchInfo, int listenPort); // 0x004462A4-0x004464AC
		internal void RegisterMessageHandlers(); // 0x0045B2FC-0x0045BCAC
		public static void ListenRelay(string relayIp, int relayPort, NetworkID netGuid, SourceID sourceId, NodeID nodeId); // 0x0045BCAC-0x0045BD7C
		private void InternalListenRelay(string relayIp, int relayPort, NetworkID netGuid, SourceID sourceId, NodeID nodeId); // 0x0045B1E0-0x0045B2FC
		public static bool Listen(int serverPort); // 0x00446550-0x004465F0
		public static bool Listen(string ipAddress, int serverPort); // 0x004464AC-0x00446550
		internal bool InternalListen(string ipAddress, int serverPort); // 0x0045B054-0x0045B1E0
		public static NetworkClient BecomeHost(NetworkClient oldClient, int port, MatchInfo matchInfo, int oldConnectionId, PeerInfoMessage[] peers); // 0x00455D14-0x00455DD4
		internal NetworkClient BecomeHostInternal(NetworkClient oldClient, int port, MatchInfo matchInfo, int oldConnectionId, PeerInfoMessage[] peers); // 0x0045BD7C-0x0045C858
		internal int AddLocalClient(LocalClient localClient); // 0x0045C858-0x0045C9F0
		internal void RemoveLocalClient(NetworkConnection localClientConnection); // 0x0045C9F0-0x0045CB80
		internal void SetLocalObjectOnServer(NetworkInstanceId netId, GameObject obj); // 0x0045CB80-0x0045CE54
		internal void ActivateLocalClientScene(); // 0x0045CE54-0x0045D3C0
		public static bool SendToAll(short msgType, MessageBase msg); // 0x00448F98-0x004491A0
		private static bool SendToObservers(GameObject contextObj, short msgType, MessageBase msg); // 0x0045D3C0-0x0045D660
		public static bool SendToReady(GameObject contextObj, short msgType, MessageBase msg); // 0x004401DC-0x004405C8
		public static void SendWriterToReady(GameObject contextObj, NetworkWriter writer, int channelId); // 0x0045D660-0x0045D864
		public static void SendBytesToReady(GameObject contextObj, byte[] buffer, int numBytes, int channelId); // 0x0045D864-0x0045DDB0
		internal void InternalDisconnectAll(); // 0x0045AFE0-0x0045B054
		internal static void Update(); // 0x0045DDB0-0x0045DEA8
		private void UpdateServerObjects(); // 0x0045DF88-0x0045E23C
		private void CheckForNullObjects(); // 0x0045E23C-0x0045E714
		internal void InternalUpdate(); // 0x0045DEA8-0x0045DF88
		private void OnConnected(NetworkConnection conn); // 0x0045E714-0x0045E8C4
		private void OnDisconnected(NetworkConnection conn); // 0x0045EBE4-0x0045EEF0
		private void OnData(NetworkConnection conn, int receivedSize, int channelId); // 0x0045EEF0-0x0045EF68
		private void GenerateConnectError(int error); // 0x0045EF68-0x0045F078
		private void GenerateDataError(NetworkConnection conn, int error); // 0x0045F200-0x0045F314
		private void GenerateDisconnectError(NetworkConnection conn, int error); // 0x0045F314-0x0045F6B0
		private void GenerateError(NetworkConnection conn, int error); // 0x0045F078-0x0045F200
		public static void RegisterHandler(short msgType, NetworkMessageDelegate handler); // 0x004417B8-0x00441874
		public static bool ReplacePlayerForConnection(NetworkConnection conn, GameObject player, short playerControllerId); // 0x0043E558-0x0043E60C
		public static bool AddPlayerForConnection(NetworkConnection conn, GameObject player, short playerControllerId); // 0x0043FD14-0x0043FDC8
		internal bool InternalAddPlayerForConnection(NetworkConnection conn, GameObject playerGameObject, short playerControllerId); // 0x0045FE00-0x0046052C
		private static bool CheckPlayerControllerIdForConnection(NetworkConnection conn, short playerControllerId); // 0x00460680-0x00460AF8
		private bool SetupLocalPlayerForConnection(NetworkConnection conn, NetworkIdentity uv, UnityEngine.Networking.PlayerController newPlayerController); // 0x00460AF8-0x00460E20
		private static void FinishPlayerForConnection(NetworkConnection conn, NetworkIdentity uv, GameObject playerGameObject); // 0x00460E20-0x00460F6C
		internal bool InternalReplacePlayerForConnection(NetworkConnection conn, GameObject playerGameObject, short playerControllerId); // 0x0045F6B0-0x0045FE00
		private static bool GetNetworkIdentity(GameObject go, out NetworkIdentity view); // 0x0046052C-0x00460680
		public static void SetClientReady(NetworkConnection conn); // 0x0044D02C-0x0044D0C0
		internal void SetClientReadyInternal(NetworkConnection conn); // 0x004613D4-0x004623F0
		internal static void ShowForConnection(NetworkIdentity uv, NetworkConnection conn); // 0x004623F0-0x004624A8
		internal static void HideForConnection(NetworkIdentity uv, NetworkConnection conn); // 0x004624A8-0x00462578
		public static void SetAllClientsNotReady(); // 0x00448E38-0x00448F98
		public static void SetClientNotReady(NetworkConnection conn); // 0x00462578-0x0046260C
		internal void InternalSetClientNotReady(NetworkConnection conn); // 0x0046260C-0x00462758
		private static void OnClientReadyMessage(NetworkMessage netMsg); // 0x00462758-0x00462894
		private static void OnRemovePlayerMessage(NetworkMessage netMsg); // 0x00462894-0x00462B9C
		private static void OnCommandMessage(NetworkMessage netMsg); // 0x00462B9C-0x0046339C
		internal void SpawnObject(GameObject obj); // 0x0046339C-0x00463A30
		internal void SendSpawnMessage(NetworkIdentity uv, NetworkConnection conn); // 0x00460F6C-0x004613D4
		public static void DestroyPlayersForConnection(NetworkConnection conn); // 0x0044C9FC-0x0044CEDC
		private static void DestroyObject(GameObject obj); // 0x00463A30-0x00463BD0
		private static void DestroyObject(NetworkIdentity uv, bool destroyServerObject); // 0x00463BD0-0x00464094
		public static void Spawn(GameObject obj); // 0x004557DC-0x004558A4
		private static bool CheckForPrefab(GameObject obj); // 0x0046410C-0x00464114
		private static bool VerifyCanSpawn(GameObject obj); // 0x00464094-0x0046410C
		public static bool SpawnWithClientAuthority(GameObject obj, NetworkConnection conn); // 0x00454FD0-0x00455170
		public static void Destroy(GameObject obj); // 0x0043F75C-0x0043F7DC
		internal bool InvokeBytes(ULocalConnectionToServer conn, byte[] buffer, int numBytes, int channelId); // 0x00464114-0x00464260
		internal bool InvokeHandlerOnServer(ULocalConnectionToServer conn, short msgType, MessageBase msg, int channelId); // 0x00464260-0x00464660
		public static GameObject FindLocalObject(NetworkInstanceId netId); // 0x004533AC-0x0045345C
		private static bool ValidateSceneObject(NetworkIdentity netId); // 0x00464660-0x0046472C
		public static bool SpawnObjects(); // 0x004465F0-0x00446B4C
		private static void SendCrc(NetworkConnection targetConnection); // 0x0045E8C4-0x0045EBE4
	}

	[Obsolete] // 0x00187B2C-0x00187B60
	public class NetworkServerSimple // TypeDefIndex: 3142
	{
		// Fields
		private bool m_Initialized; // 0x08
		private int m_ListenPort; // 0x0C
		private int m_ServerHostId; // 0x10
		private int m_RelaySlotId; // 0x14
		private bool m_UseWebSockets; // 0x18
		private byte[] m_MsgBuffer; // 0x1C
		private NetworkReader m_MsgReader; // 0x20
		private Type m_NetworkConnectionClass; // 0x24
		private HostTopology m_HostTopology; // 0x28
		private List<NetworkConnection> m_Connections; // 0x2C
		private ReadOnlyCollection<NetworkConnection> m_ConnectionsReadOnly; // 0x30
		private NetworkMessageHandlers m_MessageHandlers; // 0x34
	
		// Properties
		public int listenPort { get; } // 0x00AC6230-0x00AC6238 
		public int serverHostId { get; } // 0x00AC6238-0x00AC6240 
		public HostTopology hostTopology { get; } // 0x00AC6240-0x00AC6248 
		public bool useWebSockets { set; } // 0x00AC6248-0x00AC6250
		public ReadOnlyCollection<NetworkConnection> connections { get; } // 0x00AC6250-0x00AC6258 
		public Dictionary<short, NetworkMessageDelegate> handlers { get; } // 0x00AC6258-0x00AC6284 
		public byte[] messageBuffer { get; } // 0x00AC6284-0x00AC628C 
	
		// Constructors
		public NetworkServerSimple(); // 0x00AC5F78-0x00AC60CC
	
		// Methods
		public virtual void Initialize(); // 0x00AC628C-0x00AC651C
		public bool Configure(ConnectionConfig config, int maxConnections); // 0x00AC651C-0x00AC65A0
		public bool Configure(HostTopology topology); // 0x00AC65A0-0x00AC65AC
		public bool Listen(string ipAddress, int serverListenPort); // 0x00AC65AC-0x00AC6A44
		public void ListenRelay(string relayIp, int relayPort, NetworkID netGuid, SourceID sourceId, NodeID nodeId); // 0x00AC6A44-0x00AC6E20
		public void Stop(); // 0x00AC7740-0x00AC78DC
		internal void RegisterHandlerSafe(short msgType, NetworkMessageDelegate handler); // 0x00AC78DC-0x00AC7918
		public void RegisterHandler(short msgType, NetworkMessageDelegate handler); // 0x00AC7918-0x00AC7954
		public void UpdateConnections(); // 0x00AC7954-0x00AC7A20
		public void Update(); // 0x00AC6E20-0x00AC7740
		public NetworkConnection FindConnection(int connectionId); // 0x00AC8500-0x00AC85C8
		public bool SetConnectionAtIndex(NetworkConnection conn); // 0x00AC85C8-0x00AC8720
		public bool RemoveConnectionAtIndex(int connectionId); // 0x00AC8720-0x00AC87EC
		private void HandleConnect(int connectionId, byte error); // 0x00AC7A20-0x00AC7E4C
		private void HandleDisconnect(int connectionId, byte error); // 0x00AC7FFC-0x00AC8500
		private void HandleData(int connectionId, int channelId, int receivedSize, byte error); // 0x00AC7E4C-0x00AC7FFC
		public void DisconnectAllConnections(); // 0x00AC87EC-0x00AC88CC
		public virtual void OnConnectError(int connectionId, byte error); // 0x00AC88CC-0x00AC8994
		public virtual void OnDataError(NetworkConnection conn, byte error); // 0x00AC8994-0x00AC8A5C
		public virtual void OnDisconnectError(NetworkConnection conn, byte error); // 0x00AC8A5C-0x00AC8B24
		public virtual void OnConnected(NetworkConnection conn); // 0x00AC8B24-0x00AC8B54
		public virtual void OnDisconnected(NetworkConnection conn); // 0x00AC8B54-0x00AC8B84
		public virtual void OnData(NetworkConnection conn, int receivedSize, int channelId); // 0x00AC8B84-0x00AC8BDC
	}

	[AddComponentMenu] // 0x00187B60-0x00187BE8
	[DisallowMultipleComponent] // 0x00187B60-0x00187BE8
	[Obsolete] // 0x00187B60-0x00187BE8
	public class NetworkStartPosition : MonoBehaviour // TypeDefIndex: 3143
	{
		// Constructors
		public NetworkStartPosition(); // 0x00AC8BDC-0x00AC8BE4
	
		// Methods
		public void Awake(); // 0x00AC8BE4-0x00AC8C78
		public void OnDestroy(); // 0x00AC8C78-0x00AC8D0C
	}

	[AddComponentMenu] // 0x00187BE8-0x00187C60
	[Obsolete] // 0x00187BE8-0x00187C60
	public class NetworkTransformChild : NetworkBehaviour // TypeDefIndex: 3144
	{
		// Fields
		[SerializeField] // 0x001886EC-0x001886FC
		private Transform m_Target; // 0x1C
		[SerializeField] // 0x001886FC-0x0018870C
		private uint m_ChildIndex; // 0x20
		private NetworkTransform m_Root; // 0x24
		[SerializeField] // 0x0018870C-0x0018871C
		private float m_SendInterval; // 0x28
		[SerializeField] // 0x0018871C-0x0018872C
		private NetworkTransform.AxisSyncMode m_SyncRotationAxis; // 0x2C
		[SerializeField] // 0x0018872C-0x0018873C
		private NetworkTransform.CompressionSyncMode m_RotationSyncCompression; // 0x30
		[SerializeField] // 0x0018873C-0x0018874C
		private float m_MovementThreshold; // 0x34
		[SerializeField] // 0x0018874C-0x0018875C
		private float m_InterpolateRotation; // 0x38
		[SerializeField] // 0x0018875C-0x0018876C
		private float m_InterpolateMovement; // 0x3C
		[SerializeField] // 0x0018876C-0x0018877C
		private NetworkTransform.ClientMoveCallback3D m_ClientMoveCallback3D; // 0x40
		private Vector3 m_TargetSyncPosition; // 0x44
		private Quaternion m_TargetSyncRotation3D; // 0x50
		private float m_LastClientSyncTime; // 0x60
		private float m_LastClientSendTime; // 0x64
		private Vector3 m_PrevPosition; // 0x68
		private Quaternion m_PrevRotation; // 0x74
		private const float k_LocalMovementThreshold = 1E-05f; // Metadata: 0x0021BAAE
		private const float k_LocalRotationThreshold = 1E-05f; // Metadata: 0x0021BAB2
		private NetworkWriter m_LocalTransformWriter; // 0x84
	
		// Properties
		public Transform target { get; set; } // 0x00AD1FB8-0x00AD1FC0 0x00AD1FC0-0x00AD1FC8
		public uint childIndex { get; } // 0x00AD2534-0x00AD253C 
		public float sendInterval { get; set; } // 0x00AD253C-0x00AD2544 0x00AD2544-0x00AD254C
		public NetworkTransform.AxisSyncMode syncRotationAxis { get; set; } // 0x00AD254C-0x00AD2554 0x00AD2554-0x00AD255C
		public NetworkTransform.CompressionSyncMode rotationSyncCompression { get; set; } // 0x00AD255C-0x00AD2564 0x00AD2564-0x00AD256C
		public float movementThreshold { get; set; } // 0x00AD256C-0x00AD2574 0x00AD2574-0x00AD257C
		public float interpolateRotation { get; set; } // 0x00AD257C-0x00AD2584 0x00AD2584-0x00AD258C
		public float interpolateMovement { get; set; } // 0x00AD258C-0x00AD2594 0x00AD2594-0x00AD259C
		public NetworkTransform.ClientMoveCallback3D clientMoveCallback3D { get; set; } // 0x00AD259C-0x00AD25A4 0x00AD25A4-0x00AD25AC
		public float lastSyncTime { get; } // 0x00AD25AC-0x00AD25B4 
		public Vector3 targetSyncPosition { get; } // 0x00AD25B4-0x00AD25C8 
		public Quaternion targetSyncRotation3D { get; } // 0x00AD25C8-0x00AD25D8 
	
		// Constructors
		public NetworkTransformChild(); // 0x00AD1F00-0x00AD1FB8
	
		// Methods
		private void OnValidate(); // 0x00AD1FC8-0x00AD2534
		private void Awake(); // 0x00AD25D8-0x00AD26CC
		public override bool OnSerialize(NetworkWriter writer, bool initialState); // 0x00AD26CC-0x00AD2744
		private void SerializeModeTransform(NetworkWriter writer); // 0x00AD2744-0x00AD2864
		public override void OnDeserialize(NetworkReader reader, bool initialState); // 0x00AD2864-0x00AD2950
		private void UnserializeModeTransform(NetworkReader reader, bool initialState); // 0x00AD2950-0x00AD2BDC
		private void FixedUpdate(); // 0x00AD2BDC-0x00AD2C1C
		private void FixedUpdateServer(); // 0x00AD2C1C-0x00AD2E58
		private void FixedUpdateClient(); // 0x00AD2E58-0x00AD31AC
		private void Update(); // 0x00AD31AC-0x00AD32B4
		private bool HasMoved(); // 0x00AD34EC-0x00AD3698
		[Client] // 0x00188A28-0x00188A38
		private void SendTransform(); // 0x00AD32B4-0x00AD34EC
		internal static void HandleChildTransform(NetworkMessage netMsg); // 0x00AD3698-0x00AD3D40
		public override int GetNetworkChannel(); // 0x00AD3D40-0x00AD3D48
		public override float GetNetworkSendInterval(); // 0x00AD3D48-0x00AD3D50
	}

	[AddComponentMenu] // 0x00187C60-0x00187CE4
	[DisallowMultipleComponent] // 0x00187C60-0x00187CE4
	[Obsolete] // 0x00187C60-0x00187CE4
	public class NetworkTransform : NetworkBehaviour // TypeDefIndex: 3145
	{
		// Fields
		[SerializeField] // 0x0018877C-0x0018878C
		private TransformSyncMode m_TransformSyncMode; // 0x1C
		[SerializeField] // 0x0018878C-0x0018879C
		private float m_SendInterval; // 0x20
		[SerializeField] // 0x0018879C-0x001887AC
		private AxisSyncMode m_SyncRotationAxis; // 0x24
		[SerializeField] // 0x001887AC-0x001887BC
		private CompressionSyncMode m_RotationSyncCompression; // 0x28
		[SerializeField] // 0x001887BC-0x001887CC
		private bool m_SyncSpin; // 0x2C
		[SerializeField] // 0x001887CC-0x001887DC
		private float m_MovementTheshold; // 0x30
		[SerializeField] // 0x001887DC-0x001887EC
		private float m_VelocityThreshold; // 0x34
		[SerializeField] // 0x001887EC-0x001887FC
		private float m_SnapThreshold; // 0x38
		[SerializeField] // 0x001887FC-0x0018880C
		private float m_InterpolateRotation; // 0x3C
		[SerializeField] // 0x0018880C-0x0018881C
		private float m_InterpolateMovement; // 0x40
		[SerializeField] // 0x0018881C-0x0018882C
		private ClientMoveCallback3D m_ClientMoveCallback3D; // 0x44
		[SerializeField] // 0x0018882C-0x0018883C
		private ClientMoveCallback2D m_ClientMoveCallback2D; // 0x48
		private Rigidbody m_RigidBody3D; // 0x4C
		private Rigidbody2D m_RigidBody2D; // 0x50
		private CharacterController m_CharacterController; // 0x54
		private bool m_Grounded; // 0x58
		private Vector3 m_TargetSyncPosition; // 0x5C
		private Vector3 m_TargetSyncVelocity; // 0x68
		private Vector3 m_FixedPosDiff; // 0x74
		private Quaternion m_TargetSyncRotation3D; // 0x80
		private Vector3 m_TargetSyncAngularVelocity3D; // 0x90
		private float m_TargetSyncRotation2D; // 0x9C
		private float m_TargetSyncAngularVelocity2D; // 0xA0
		private float m_LastClientSyncTime; // 0xA4
		private float m_LastClientSendTime; // 0xA8
		private Vector3 m_PrevPosition; // 0xAC
		private Quaternion m_PrevRotation; // 0xB8
		private float m_PrevRotation2D; // 0xC8
		private float m_PrevVelocity; // 0xCC
		private const float k_LocalMovementThreshold = 1E-05f; // Metadata: 0x0021BAB6
		private const float k_LocalRotationThreshold = 1E-05f; // Metadata: 0x0021BABA
		private const float k_LocalVelocityThreshold = 1E-05f; // Metadata: 0x0021BABE
		private const float k_MoveAheadRatio = 0.1f; // Metadata: 0x0021BAC2
		private NetworkWriter m_LocalTransformWriter; // 0xD0
	
		// Properties
		public TransformSyncMode transformSyncMode { get; set; } // 0x00ACB5D8-0x00ACB5E0 0x00ACB5E0-0x00ACB5E8
		public float sendInterval { get; set; } // 0x00ACB5E8-0x00ACB5F0 0x00ACB5F0-0x00ACB5F8
		public AxisSyncMode syncRotationAxis { get; set; } // 0x00ACB5F8-0x00ACB600 0x00ACB600-0x00ACB608
		public CompressionSyncMode rotationSyncCompression { get; set; } // 0x00ACB608-0x00ACB610 0x00ACB610-0x00ACB618
		public bool syncSpin { get; set; } // 0x00ACB618-0x00ACB620 0x00ACB620-0x00ACB628
		public float movementTheshold { get; set; } // 0x00ACB628-0x00ACB630 0x00ACB630-0x00ACB638
		public float velocityThreshold { get; set; } // 0x00ACB638-0x00ACB640 0x00ACB640-0x00ACB648
		public float snapThreshold { get; set; } // 0x00ACB648-0x00ACB650 0x00ACB650-0x00ACB658
		public float interpolateRotation { get; set; } // 0x00ACB658-0x00ACB660 0x00ACB660-0x00ACB668
		public float interpolateMovement { get; set; } // 0x00ACB668-0x00ACB670 0x00ACB670-0x00ACB678
		public ClientMoveCallback3D clientMoveCallback3D { get; set; } // 0x00ACB678-0x00ACB680 0x00ACB680-0x00ACB688
		public ClientMoveCallback2D clientMoveCallback2D { get; set; } // 0x00ACB688-0x00ACB690 0x00ACB690-0x00ACB698
		public CharacterController characterContoller { get; } // 0x00ACB698-0x00ACB6A0 
		public Rigidbody rigidbody3D { get; } // 0x00ACB6A0-0x00ACB6A8 
		public Rigidbody2D rigidbody2D { get; } // 0x00ACB6A8-0x00ACB6B0 
		public float lastSyncTime { get; } // 0x00ACB6B0-0x00ACB6B8 
		public Vector3 targetSyncPosition { get; } // 0x00ACB6B8-0x00ACB6CC 
		public Vector3 targetSyncVelocity { get; } // 0x00ACB6CC-0x00ACB6E0 
		public Quaternion targetSyncRotation3D { get; } // 0x00ACB6E0-0x00ACB6F0 
		public float targetSyncRotation2D { get; } // 0x00ACB6F0-0x00ACB6F8 
		public bool grounded { get; set; } // 0x00ACB6F8-0x00ACB700 0x00ACB700-0x00ACB708
	
		// Nested types
		public enum TransformSyncMode // TypeDefIndex: 3146
		{
			SyncNone = 0,
			SyncTransform = 1,
			SyncRigidbody2D = 2,
			SyncRigidbody3D = 3,
			SyncCharacterController = 4
		}
	
		public enum AxisSyncMode // TypeDefIndex: 3147
		{
			None = 0,
			AxisX = 1,
			AxisY = 2,
			AxisZ = 3,
			AxisXY = 4,
			AxisXZ = 5,
			AxisYZ = 6,
			AxisXYZ = 7
		}
	
		public enum CompressionSyncMode // TypeDefIndex: 3148
		{
			None = 0,
			Low = 1,
			High = 2
		}
	
		public delegate bool ClientMoveCallback3D(ref Vector3 position, ref Vector3 velocity, ref Quaternion rotation); // TypeDefIndex: 3149; 0x00ACEA30-0x00ACEEEC
	
		public delegate bool ClientMoveCallback2D(ref Vector2 position, ref Vector2 velocity, ref float rotation); // TypeDefIndex: 3150; 0x00ACF14C-0x00ACF608
	
		// Constructors
		public NetworkTransform(); // 0x00ACB500-0x00ACB5D8
	
		// Methods
		private void OnValidate(); // 0x00ACB708-0x00ACB7B0
		private void Awake(); // 0x00ACB7B0-0x00ACB918
		public override void OnStartServer(); // 0x00ACBA10-0x00ACBA1C
		public override bool OnSerialize(NetworkWriter writer, bool initialState); // 0x00ACBA1C-0x00ACBAF8
		private void SerializeModeTransform(NetworkWriter writer); // 0x00ACBAF8-0x00ACBC4C
		private void VerifySerializeComponentExists(); // 0x00ACC5E4-0x00ACC97C
		private void SerializeMode3D(NetworkWriter writer); // 0x00ACBC4C-0x00ACBF14
		private void SerializeModeCharacterController(NetworkWriter writer); // 0x00ACC26C-0x00ACC43C
		private void SerializeMode2D(NetworkWriter writer); // 0x00ACBF14-0x00ACC26C
		public override void OnDeserialize(NetworkReader reader, bool initialState); // 0x00ACCAE0-0x00ACCC38
		private void UnserializeModeTransform(NetworkReader reader, bool initialState); // 0x00ACCC38-0x00ACCF8C
		private void UnserializeMode3D(NetworkReader reader, bool initialState); // 0x00ACCF8C-0x00ACD764
		private void UnserializeMode2D(NetworkReader reader, bool initialState); // 0x00ACD764-0x00ACE014
		private void UnserializeModeCharacterController(NetworkReader reader, bool initialState); // 0x00ACE014-0x00ACE758
		private void FixedUpdate(); // 0x00ACF608-0x00ACF648
		private void FixedUpdateServer(); // 0x00ACF648-0x00ACF8AC
		private bool CheckVelocityChanged(); // 0x00ACFA20-0x00ACFC3C
		private void FixedUpdateClient(); // 0x00ACF8AC-0x00ACFA20
		private void InterpolateTransformMode3D(); // 0x00ACFC3C-0x00ACFF4C
		private void InterpolateTransformModeCharacterController(); // 0x00AD0370-0x00AD0780
		private void InterpolateTransformMode2D(); // 0x00ACFF4C-0x00AD0370
		private void Update(); // 0x00AD0780-0x00AD0888
		private bool HasMoved(); // 0x00AD0D3C-0x00AD13D4
		[Client] // 0x00188A38-0x00188A48
		private void SendTransform(); // 0x00AD0888-0x00AD0D3C
		public static void HandleTransform(NetworkMessage netMsg); // 0x00AD144C-0x00AD19B4
		private static void WriteAngle(NetworkWriter writer, float angle, CompressionSyncMode compression); // 0x00AD19B4-0x00AD1A30
		private static float ReadAngle(NetworkReader reader, CompressionSyncMode compression); // 0x00AD1A68-0x00AD1AE0
		public static void SerializeVelocity3D(NetworkWriter writer, Vector3 velocity, CompressionSyncMode compression); // 0x00ACC97C-0x00ACC9C4
		public static void SerializeVelocity2D(NetworkWriter writer, Vector2 velocity, CompressionSyncMode compression); // 0x00ACCA98-0x00ACCAD8
		public static void SerializeRotation3D(NetworkWriter writer, Quaternion rot, AxisSyncMode mode, CompressionSyncMode compression); // 0x00ACC43C-0x00ACC5E4
		public static void SerializeRotation2D(NetworkWriter writer, float rot, CompressionSyncMode compression); // 0x00ACCAD8-0x00ACCADC
		public static void SerializeSpin3D(NetworkWriter writer, Vector3 angularVelocity, AxisSyncMode mode, CompressionSyncMode compression); // 0x00ACC9C4-0x00ACCA74
		public static void SerializeSpin2D(NetworkWriter writer, float angularVelocity, CompressionSyncMode compression); // 0x00ACCADC-0x00ACCAE0
		public static Vector3 UnserializeVelocity3D(NetworkReader reader, CompressionSyncMode compression); // 0x00AD1AE0-0x00AD1B4C
		public static Vector3 UnserializeVelocity2D(NetworkReader reader, CompressionSyncMode compression); // 0x00AD1B4C-0x00AD1C34
		public static Quaternion UnserializeRotation3D(NetworkReader reader, AxisSyncMode mode, CompressionSyncMode compression); // 0x00ACE758-0x00ACEA30
		public static float UnserializeRotation2D(NetworkReader reader, CompressionSyncMode compression); // 0x00ACF144-0x00ACF148
		public static Vector3 UnserializeSpin3D(NetworkReader reader, AxisSyncMode mode, CompressionSyncMode compression); // 0x00ACEEEC-0x00ACF144
		public static float UnserializeSpin2D(NetworkReader reader, CompressionSyncMode compression); // 0x00ACF148-0x00ACF14C
		public override int GetNetworkChannel(); // 0x00AD1C34-0x00AD1C3C
		public override float GetNetworkSendInterval(); // 0x00AD1C3C-0x00AD1C44
		public override void OnStartAuthority(); // 0x00AD1C44-0x00AD1C7C
	}

	[AddComponentMenu] // 0x00187CE4-0x00187DEC
	[DisallowMultipleComponent] // 0x00187CE4-0x00187DEC
	[EditorBrowsable] // 0x00187CE4-0x00187DEC
	[Obsolete] // 0x00187CE4-0x00187DEC
	[RequireComponent] // 0x00187CE4-0x00187DEC
	public class NetworkTransformVisualizer : NetworkBehaviour // TypeDefIndex: 3151
	{
		// Fields
		[SerializeField] // 0x0018883C-0x001888AC
		[Tooltip] // 0x0018883C-0x001888AC
		private GameObject m_VisualizerPrefab; // 0x1C
		private NetworkTransform m_NetworkTransform; // 0x20
		private GameObject m_Visualizer; // 0x24
		private static Material s_LineMaterial; // 0x00
	
		// Properties
		public GameObject visualizerPrefab { get; set; } // 0x00AD3DD4-0x00AD3DDC 0x00AD3DDC-0x00AD3DE4
	
		// Constructors
		public NetworkTransformVisualizer(); // 0x00AD3D50-0x00AD3DD4
	
		// Methods
		public override void OnStartClient(); // 0x00AD3DE4-0x00AD3F7C
		public override void OnStartLocalPlayer(); // 0x00AD4170-0x00AD4280
		private void OnDestroy(); // 0x00AD4280-0x00AD4350
		[ClientCallback] // 0x00188A48-0x00188A58
		private void FixedUpdate(); // 0x00AD4350-0x00AD4A00
		private void OnRenderObject(); // 0x00AD4A00-0x00AD4C88
		private void DrawRotationInterpolation(); // 0x00AD4C88-0x00AD521C
		private static void CreateLineMaterial(); // 0x00AD3F7C-0x00AD4170
	}

	[Obsolete] // 0x00187DEC-0x00187E20
	public class NetworkWriter // TypeDefIndex: 3152
	{
		// Fields
		private const int k_MaxStringLength = 32768; // Metadata: 0x0021BB06
		private NetBuffer m_Buffer; // 0x08
		private static Encoding s_Encoding; // 0x00
		private static byte[] s_StringWriteBuffer; // 0x04
		private static UIntFloat s_FloatConverter; // 0x08
	
		// Properties
		public short Position { get; } // 0x00AD531C-0x00AD534C 
	
		// Constructors
		public NetworkWriter(); // 0x00ACB918-0x00ACBA10
		public NetworkWriter(byte[] buffer); // 0x00AD521C-0x00AD531C
	
		// Methods
		public byte[] ToArray(); // 0x00AD534C-0x00AD54E4
		public byte[] AsArray(); // 0x00AD54E4-0x00AD5570
		internal ArraySegment<byte> AsArraySegment(); // 0x00AD5570-0x00AD55DC
		public void WritePackedUInt32(uint value); // 0x00AC9174-0x00AC9258
		public void Write(NetworkInstanceId value); // 0x00AC9140-0x00AC9174
		public void Write(NetworkSceneId value); // 0x00ACA4A4-0x00ACA4D8
		public void Write(byte value); // 0x00AC9960-0x00AC9A04
		public void Write(short value); // 0x00AD1A30-0x00AD1A68
		public void Write(ushort value); // 0x00AC8DE0-0x00AC8E18
		public void Write(int value); // 0x00AD55DC-0x00AD562C
		public void Write(uint value); // 0x00AD562C-0x00AD567C
		public void Write(float value); // 0x00AC9258-0x00AC92D8
		public void Write(string value); // 0x00AC9728-0x00AC9960
		public void Write(bool value); // 0x00AC9AE0-0x00AC9B1C
		public void WriteBytesAndSize(byte[] buffer, int count); // 0x00AC8E18-0x00AC8F9C
		public void WriteBytesFull(byte[] buffer); // 0x00ACA158-0x00ACA2D8
		public void Write(Vector2 value); // 0x00ACCA74-0x00ACCA98
		public void Write(Vector3 value); // 0x00ACA124-0x00ACA158
		public void Write(Quaternion value); // 0x00ACA2D8-0x00ACA318
		public void Write(NetworkHash128 value); // 0x00ACA048-0x00ACA124
		public void SeekZero(); // 0x00AD567C-0x00AD56A8
		public void StartMessage(short msgType); // 0x00AD13D4-0x00AD1420
		public void FinishMessage(); // 0x00AD1420-0x00AD144C
	}

	[Obsolete] // 0x00187E20-0x00187E54
	public class PlayerController // TypeDefIndex: 3153
	{
		// Fields
		public short playerControllerId; // 0x08
		public NetworkIdentity unetView; // 0x0C
		public GameObject gameObject; // 0x10
	
		// Properties
		public bool IsValid { get; } // 0x00AD5754-0x00AD576C 
	
		// Constructors
		public PlayerController(); // 0x00AD56A8-0x00AD56B8
		internal PlayerController(GameObject go, short playerControllerId); // 0x00AD56B8-0x00AD5754
	
		// Methods
		public override string ToString(); // 0x00AD576C-0x00AD5A38
	}

	public delegate void NetworkMessageDelegate(NetworkMessage netMsg); // TypeDefIndex: 3154; 0x00450CD8-0x00451500

	public delegate GameObject SpawnDelegate(Vector3 position, NetworkHash128 assetId); // TypeDefIndex: 3155; 0x00AD5A4C-0x00AD6080

	public delegate void UnSpawnDelegate(GameObject spawned); // TypeDefIndex: 3156; 0x00AD6628-0x00AD6E50

	[Obsolete] // 0x00187E54-0x00187E88
	public class MsgType // TypeDefIndex: 3157
	{
		// Fields
		internal static string[] msgLabels; // 0x00
	
		// Constructors
		static MsgType(); // 0x003B2264-0x003B3734
	
		// Methods
		public static string MsgTypeToString(short value); // 0x003B210C-0x003B2264
	}

	[Obsolete] // 0x00187E88-0x00187EBC
	public class NetworkMessage // TypeDefIndex: 3158
	{
		// Fields
		public short msgType; // 0x08
		public NetworkConnection conn; // 0x0C
		public NetworkReader reader; // 0x10
		public int channelId; // 0x14
	
		// Constructors
		public NetworkMessage(); // 0x00450CD0-0x00450CD8
	
		// Methods
		public TMsg ReadMessage<TMsg>()
			where TMsg : MessageBase, new();
		public void ReadMessage<TMsg>(TMsg msg)
			where TMsg : MessageBase;
	}

	public enum Version // TypeDefIndex: 3159
	{
		Current = 1
	}

	public enum ChannelOption // TypeDefIndex: 3160
	{
		MaxPendingBuffers = 1,
		AllowFragmentation = 2,
		MaxPacketSize = 3
	}
}

public class DefaultModelRecoEventHandlerPlaceHolder : MonoBehaviour // TypeDefIndex: 3162
{
	// Constructors
	public DefaultModelRecoEventHandlerPlaceHolder(); // 0x003CEF0C-0x003CEF14
}

internal class DefaultInitializationErrorHandlerInternal : VuforiaMonoBehaviour // TypeDefIndex: 3163
{
	// Fields
	private string mErrorText; // 0x0C
	private bool mErrorOccurred; // 0x10
	private const string headerLabel = "Vuforia Engine Initialization Error"; // Metadata: 0x0021BB1A
	private GUIStyle bodyStyle; // 0x14
	private GUIStyle headerStyle; // 0x18
	private GUIStyle footerStyle; // 0x1C
	private Texture2D bodyTexture; // 0x20
	private Texture2D headerTexture; // 0x24
	private Texture2D footerTexture; // 0x28

	// Constructors
	public DefaultInitializationErrorHandlerInternal(); // 0x003CEE98-0x003CEF04

	// Methods
	public void OnVuforiaInitializationError(VuforiaUnity.InitError initError); // 0x003CD640-0x003CD668
	private void Awake(); // 0x003CDB50-0x003CDC38
	private void Start(); // 0x003CDC38-0x003CDC3C
	private void OnGUI(); // 0x003CE23C-0x003CE384
	private void OnDestroy(); // 0x003CE384-0x003CE46C
	private void DrawWindowContent(int id); // 0x003CE46C-0x003CE6D0
	private void SetErrorCode(VuforiaUnity.InitError errorCode); // 0x003CD668-0x003CDB48
	private void SetErrorOccurred(bool errorOccurred); // 0x003CDB48-0x003CDB50
	private string getKeyInfo(); // 0x003CE6D0-0x003CED98
	private void SetupGUIStyles(); // 0x003CDC3C-0x003CE23C
	private Texture2D CreateSinglePixelTexture(Color color); // 0x003CED98-0x003CEE98
}

public class DefaultInitializationErrorHandlerPlaceHolder : VuforiaMonoBehaviour // TypeDefIndex: 3164
{
	// Constructors
	public DefaultInitializationErrorHandlerPlaceHolder(); // 0x003CEF04-0x003CEF0C
}

public class DefaultTrackableBehaviourPlaceholder : VuforiaMonoBehaviour // TypeDefIndex: 3165
{
	// Constructors
	public DefaultTrackableBehaviourPlaceholder(); // 0x003CEF14-0x003CEF1C
}

public class VuforiaMonoBehaviour : MonoBehaviour // TypeDefIndex: 3166
{
	// Constructors
	public VuforiaMonoBehaviour(); // 0x00B01F3C-0x00B01F44
}

namespace Vuforia
{
	public abstract class ARController // TypeDefIndex: 3167
	{
		// Fields
		private VuforiaBehaviour mVuforiaBehaviour; // 0x08
	
		// Properties
		protected VuforiaBehaviour VuforiaBehaviour { get; } // 0x003CEF5C-0x003CEF64 
	
		// Nested types
		[CompilerGenerated] // 0x00188F4C-0x00188F5C
		private sealed class <>c__DisplayClass11_0 // TypeDefIndex: 3168
		{
			// Fields
			public ARController controller; // 0x08
	
			// Constructors
			public <>c__DisplayClass11_0(); // 0x003CF0B0-0x003CF0B8
	
			// Methods
			internal void <Register>b__0(VuforiaBehaviour bhvr); // 0x003CF568-0x003CF598
			internal void <Register>b__1(VuforiaBehaviour bhvr); // 0x003CF598-0x003CF5C8
		}
	
		// Constructors
		protected ARController(); // 0x003CF560-0x003CF568
	
		// Methods
		protected virtual void Awake(); // 0x003CEF3C-0x003CEF40
		protected virtual void OnEnable(); // 0x003CEF40-0x003CEF44
		protected virtual void Start(); // 0x003CEF44-0x003CEF48
		protected virtual void Update(); // 0x003CEF48-0x003CEF4C
		protected virtual void OnLevelWasLoaded(); // 0x003CEF4C-0x003CEF50
		protected virtual void OnApplicationPause(bool pause); // 0x003CEF50-0x003CEF54
		protected virtual void OnDisable(); // 0x003CEF54-0x003CEF58
		protected virtual void OnDestroy(); // 0x003CEF58-0x003CEF5C
		protected static void Register(ARController controller); // 0x003CEF64-0x003CF0B0
		private void RegisterCamera(VuforiaBehaviour bhvr); // 0x003CF0B8-0x003CF428
		private void UnregisterCamera(VuforiaBehaviour bhvr); // 0x003CF428-0x003CF560
	}

	internal static class EulaRuntimeUtility // TypeDefIndex: 3169
	{
		// Fields
		private const string VERSIONS_KEY = "Values"; // Metadata: 0x0021BB41
	
		// Methods
		public static IEnumerable<string> JsonToVersionStrings(string json); // 0x002FA128-0x002FA484
		public static System.Version ConvertToMajorMinorVersion(string versionString); // 0x002FA484-0x002FA62C
	}

	internal abstract class AMigratableVideoBackgroundConfigProperty // TypeDefIndex: 3170
	{
		// Fields
		protected readonly VuforiaConfiguration.VideoBackgroundConfiguration Config; // 0x08
	
		// Constructors
		protected AMigratableVideoBackgroundConfigProperty(VuforiaConfiguration.VideoBackgroundConfiguration config); // 0x003CEF1C-0x003CEF3C
	
		// Methods
		public abstract bool Migrate();
	}

	internal class MatteShaderPropertyMigration : AMigratableVideoBackgroundConfigProperty // TypeDefIndex: 3171
	{
		// Fields
		private readonly string mOldShaderName; // 0x0C
		private readonly string mNewShaderName; // 0x10
	
		// Constructors
		public MatteShaderPropertyMigration(VuforiaConfiguration.VideoBackgroundConfiguration config, string oldShaderName, string newShaderName); // 0x0030E9B0-0x0030E9D8
	
		// Methods
		public override bool Migrate(); // 0x0030E9D8-0x0030EC38
	}

	internal class VideoBackgroundConfigMigrator // TypeDefIndex: 3172
	{
		// Fields
		private readonly List<AMigratableVideoBackgroundConfigProperty> mMigratableProperties; // 0x08
	
		// Nested types
		[Serializable]
		[CompilerGenerated] // 0x00188F5C-0x00188F6C
		private sealed class <>c // TypeDefIndex: 3173
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static Func<AMigratableVideoBackgroundConfigProperty, bool> <>9__2_0; // 0x04
			public static Func<bool, bool> <>9__2_1; // 0x08
	
			// Constructors
			static <>c(); // 0x00226A7C-0x00226AF0
			public <>c(); // 0x00226AF0-0x00226AF8
	
			// Methods
			internal bool <MigrateAll>b__2_0(AMigratableVideoBackgroundConfigProperty p); // 0x00226AF8-0x00226B2C
			internal bool <MigrateAll>b__2_1(bool migrationPerformed); // 0x00226B2C-0x00226B34
		}
	
		// Constructors
		public VideoBackgroundConfigMigrator(VuforiaConfiguration.VideoBackgroundConfiguration config); // 0x00226684-0x00226810
	
		// Methods
		public bool MigrateAll(); // 0x00226838-0x00226A7C
	}

	internal class VideoBackgroundShaderPropertyMigration : AMigratableVideoBackgroundConfigProperty // TypeDefIndex: 3174
	{
		// Fields
		private readonly string mOldShaderName; // 0x0C
		private readonly string mNewShaderName; // 0x10
	
		// Constructors
		public VideoBackgroundShaderPropertyMigration(VuforiaConfiguration.VideoBackgroundConfiguration config, string oldShaderName, string newShaderName); // 0x00226810-0x00226838
	
		// Methods
		public override bool Migrate(); // 0x002281C8-0x00228428
	}

	public class ImageTargetFinder : TargetFinder // TypeDefIndex: 3175
	{
		// Nested types
		private struct CloudRecoSearchResultData // TypeDefIndex: 3176
		{
			// Fields
			public IntPtr TargetNamePtr; // 0x00
			public IntPtr UniqueTargetIdPtr; // 0x04
			public IntPtr MetaDataPtr; // 0x08
			public IntPtr TargetSearchResultPtr; // 0x0C
			public float TargetSize; // 0x10
			public int TrackingRating; // 0x14
		}
	
		// Constructors
		public ImageTargetFinder(IntPtr targetFinderPtr); // 0x0030A8A4-0x0030A8AC
	
		// Methods
		public bool StartInit(string userAuth, string secretAuth); // 0x0030A8AC-0x0030A9F0
		protected override TrackableBehaviour CreateObjectTarget(string targetName, TargetFinderObjectTargetData objTargetData, GameObject gameObj); // 0x0030A9F0-0x0030AB50
		protected override void DeleteObsoleteTargets(List<int> newTargetIds); // 0x0030AB50-0x0030AEC8
		internal override List<TargetSearchResult> ParseSearchResults(TrackerData.StructList resultList); // 0x0030AEC8-0x0030B1DC
		internal override void FreeResultList(IntPtr listPtr); // 0x0030B1DC-0x0030B2F0
	}

	internal class GuideViewContainer // TypeDefIndex: 3177
	{
		// Fields
		private readonly IntPtr mTrackablePtr; // 0x08
		private readonly Dictionary<int, GuideView> mLoadedGuideViews; // 0x0C
	
		// Constructors
		internal GuideViewContainer(IntPtr trackablePtr); // 0x00301FE4-0x00302078
	
		// Methods
		internal void Clear(); // 0x00302078-0x00302228
		internal int GetNumGuideViews(); // 0x00302228-0x00302340
		internal GuideView GetGuideView(int index); // 0x00302340-0x0030256C
		internal bool SetActiveGuideViewIndex(int index); // 0x0030256C-0x00302694
		internal int GetActiveGuideViewIndex(); // 0x00302694-0x003027A8
	}

	internal class ModelRecoModelTargetImpl : ObjectTargetImpl, InternalModelTarget // TypeDefIndex: 3178
	{
		// Fields
		private readonly Vector3 mCenter; // 0x14
		private readonly Vector3 mSize; // 0x20
		private readonly IntPtr mTrackablePtr; // 0x2C
		private readonly GuideViewContainer mGuideViewContainer; // 0x30
	
		// Constructors
		internal ModelRecoModelTargetImpl(string name, int id, Vector3 center, Vector3 size, IntPtr trackablePtr); // 0x00311F24-0x00312024
	
		// Methods
		public OrientedBoundingBox3D GetBoundingBox(); // 0x00312044-0x00312118
		public int GetNumGuideViews(); // 0x00312118-0x00312140
		public GuideView GetGuideView(int index); // 0x00312140-0x00312170
		public bool SetActiveGuideViewIndex(int index); // 0x00312170-0x003121A0
		public int GetActiveGuideViewIndex(); // 0x003121A0-0x003121C8
		public void ClearGuideViews(); // 0x003121C8-0x003121F0
	}

	public class ModelRecoBehaviour : ObjectRecoBehaviour // TypeDefIndex: 3179
	{
		// Fields
		[Tooltip] // 0x00189114-0x00189164
		public string Database; // 0x20
	
		// Properties
		public bool ModelRecoEnabled { get; set; } // 0x00311438-0x00311440 0x00311448-0x00311458
		public bool ModelRecoInitialized { get; } // 0x00311468-0x00311470 
	
		// Constructors
		public ModelRecoBehaviour(); // 0x00311E28-0x00311E90
	
		// Methods
		protected override void Initialize(); // 0x00311478-0x00311944
		protected override void Deinitialize(); // 0x00311A8C-0x00311B4C
		protected override bool IsRecoAvailable(); // 0x00311B4C-0x00311B54
		protected void Awake(); // 0x00311B54-0x00311C8C
		private void OnValidate(); // 0x00311C8C-0x00311CD4
		private void OnVuforiaInitialized(); // 0x00311CD4-0x00311CD8
		private static void InitPositionalDeviceTracker(); // 0x00311CD8-0x00311D6C
		private static bool ShouldDeviceTrackerStartAutomatically(); // 0x00311D6C-0x00311E28
	}

	public class ModelTargetFinder : TargetFinder // TypeDefIndex: 3180
	{
		// Fields
		private ModelTargetBehaviour mLastEnabledMTBehaviour; // 0x20
	
		// Nested types
		private struct ModelTargetRecoSearchResultData // TypeDefIndex: 3181
		{
			// Fields
			public IntPtr TargetNamePtr; // 0x00
			public IntPtr UniqueTargetIdPtr; // 0x04
			public IntPtr GuideViewNamePtr; // 0x08
			public IntPtr TargetSearchResultPtr; // 0x0C
			public float Confidence; // 0x10
			public int unused; // 0x14
		}
	
		// Constructors
		public ModelTargetFinder(IntPtr targetFinderPtr); // 0x00314968-0x00314988
	
		// Methods
		public bool StartInit(string deviceDatabasePath, VuforiaUnity.StorageType storageType); // 0x00311944-0x00311A8C
		protected override TrackableBehaviour CreateObjectTarget(string targetName, TargetFinderObjectTargetData objTargetData, GameObject gameObj); // 0x00314988-0x00314CC0
		protected override void DeleteObsoleteTargets(List<int> newTargetIds); // 0x00314CC0-0x0031500C
		protected override void ClearAdditionalGameObjects(); // 0x0031500C-0x003151EC
		internal override List<TargetSearchResult> ParseSearchResults(TrackerData.StructList resultList); // 0x003151EC-0x003154E0
		internal override void FreeResultList(IntPtr listPtr); // 0x003154E0-0x003155F0
	}

	public abstract class ObjectRecoBehaviour : VuforiaMonoBehaviour // TypeDefIndex: 3182
	{
		// Fields
		protected ObjectTracker mObjectTracker; // 0x0C
		protected TargetFinder mTargetFinder; // 0x10
		protected bool mCurrentlyInitializing; // 0x14
		protected bool mInitSuccess; // 0x15
		private bool mRecoStarted; // 0x16
		private bool mOnInitializedCalled; // 0x17
		private readonly List<IObjectRecoEventHandler> mHandlers; // 0x18
		private bool mTargetFinderStartedBeforeDisable; // 0x1C
	
		// Properties
		public bool RecoEnabled { get; set; } // 0x00311440-0x00311448 0x00311458-0x00311468
		public bool RecoInitialized { get; } // 0x00311470-0x00311478 
	
		// Constructors
		protected ObjectRecoBehaviour(); // 0x00311E90-0x00311F24
	
		// Methods
		protected abstract void Initialize();
		protected abstract void Deinitialize();
		protected abstract bool IsRecoAvailable();
		private void CheckInitialization(); // 0x0031943C-0x00319804
		private void StartReco(); // 0x00318FE4-0x003191E4
		private void StopReco(); // 0x003191E4-0x0031943C
		public void RegisterEventHandler(IObjectRecoEventHandler eventHandler); // 0x00319804-0x00319924
		public bool UnregisterEventHandler(IObjectRecoEventHandler eventHandler); // 0x00319924-0x003199A4
		private void OnEnable(); // 0x003199A4-0x003199C0
		private void OnDisable(); // 0x003199C0-0x00319A88
		private void Start(); // 0x00319A88-0x00319B64
		private void Update(); // 0x00319B64-0x0031A288
		private void OnDestroy(); // 0x0031A288-0x0031A504
		internal void OnVuforiaStarted(); // 0x0031A504-0x0031A640
	}

	internal class CameraCalibrationComparer // TypeDefIndex: 3183
	{
		// Fields
		private const float TOLERANCE = 0.0001f; // Metadata: 0x0021BB4B
		private Vector4 mLastCameraCalibrationValues; // 0x08
	
		// Constructors
		public CameraCalibrationComparer(); // 0x003D5B2C-0x003D5BD8
	
		// Methods
		public bool HasCameraCalibrationChanged(Vector4 currentCameraCalib); // 0x003D5A14-0x003D5B2C
	}

	public class IlluminationManager // TypeDefIndex: 3184
	{
		// Fields
		private const float UNAVAILABLE = -1f; // Metadata: 0x0021BB4F
		private TrackerData.IlluminationData mIlluminationData; // 0x08
	
		// Properties
		public float? AmbientIntensity { get; } // 0x003063C8-0x00306454 
		public float? AmbientColorTemperature { get; } // 0x0030652C-0x003065B8 
	
		// Constructors
		internal IlluminationManager(); // 0x003063B0-0x003063C8
	
		// Methods
		internal void UpdateIlluminationData(TrackerData.IlluminationData illuminationData); // 0x003065B8-0x003065C4
		private static float? GetValueOrDefault(float? value); // 0x00306454-0x0030652C
	}

	internal interface IUnityRenderEventBroadcaster // TypeDefIndex: 3185
	{
		// Events
		event Action PreRenderEvent {
			add; // 0x00000000-0x00000000
			remove; // 0x00000000-0x00000000
		}
		event Action PostRenderEvent {
			add; // 0x00000000-0x00000000
			remove; // 0x00000000-0x00000000
		}
	}

	internal class UnityRenderEventBroadcaster : IUnityRenderEventBroadcaster, IDisposable // TypeDefIndex: 3186
	{
		// Fields
		private readonly IUnityRenderPipeline mRenderPipeline; // 0x08
		private RenderEventBehaviour mRenderEventBehaviour; // 0x0C
		[CompilerGenerated] // 0x00189164-0x00189174
		private Action PreRenderEvent; // 0x10
		[CompilerGenerated] // 0x00189174-0x00189184
		private Action PostRenderEvent; // 0x14
	
		// Events
		public event Action PreRenderEvent {
			add; // 0x00220A58-0x00220B64
			remove; // 0x00220B64-0x00220C70
		}
		public event Action PostRenderEvent {
			add; // 0x00220C70-0x00220D7C
			remove; // 0x00220D7C-0x00220E88
		}
	
		// Nested types
		[RequireComponent] // 0x00188F6C-0x00188FE4
		private class RenderEventBehaviour : VuforiaMonoBehaviour, IUnityRenderEventBroadcaster // TypeDefIndex: 3187
		{
			// Fields
			[CompilerGenerated] // 0x0018A328-0x0018A338
			private Action PreRenderEvent; // 0x0C
			[CompilerGenerated] // 0x0018A338-0x0018A348
			private Action PostRenderEvent; // 0x10
	
			// Events
			public event Action PreRenderEvent {
				add; // 0x002211F0-0x002212FC
				remove; // 0x002215D4-0x002216E0
			}
			public event Action PostRenderEvent {
				add; // 0x002216E0-0x002217EC
				remove; // 0x002217EC-0x002218F8
			}
	
			// Constructors
			public RenderEventBehaviour(); // 0x00221920-0x00221928
	
			// Methods
			private void OnPreRender(); // 0x002218F8-0x0022190C
			private void OnPostRender(); // 0x0022190C-0x00221920
		}
	
		// Constructors
		public UnityRenderEventBroadcaster(IUnityRenderPipeline renderPipeline); // 0x00220E88-0x00220EB0
	
		// Methods
		public void RegisterCameraGameObject(GameObject gameObject); // 0x002210A4-0x002211F0
		private void RegisterScriptableRenderPipeline(); // 0x00220EB0-0x002210A4
		private void BeginFrameRendering(Camera[] obj); // 0x002212FC-0x00221310
		private void BeginCameraRendering(Camera obj); // 0x00221324-0x00221338
		private void OnPostRender(); // 0x00221338-0x0022134C
		private void OnPreRender(); // 0x00221310-0x00221324
		public void Dispose(); // 0x0022134C-0x00221368
		private void UnregisterScriptableRenderPipeline(); // 0x002214E8-0x002215D4
		private void UnregisterCameraGameObject(); // 0x00221368-0x002214E8
	}

	internal class VideoTextureUpdaterFactory // TypeDefIndex: 3188
	{
		// Fields
		private readonly VuforiaRenderer mRenderer; // 0x08
		private readonly IUnityRenderEventBroadcaster mRenderEventBroadcaster; // 0x0C
	
		// Constructors
		public VideoTextureUpdaterFactory(VuforiaRenderer renderer, IUnityRenderEventBroadcaster renderEventBroadcaster); // 0x0022639C-0x002263C4
	
		// Methods
		public IVideoTextureUpdater CreateTextureUpdater(Camera camera, BackgroundPlaneBehaviour bgPlaneBehaviour); // 0x002263C4-0x00226514
	}

	internal static class LegacyRenderingConfiguration // TypeDefIndex: 3189
	{
		// Fields
		private static readonly Dictionary<GraphicsDeviceType, bool> sUseLegacyRendering; // 0x00
		private static readonly HashSet<PIXEL_FORMAT> sCommandBufferSupportedPixelFormats; // 0x04
	
		// Nested types
		internal class RendererApiNotSupportedException : Exception // TypeDefIndex: 3190
		{
			// Constructors
			public RendererApiNotSupportedException(string message); // 0x0030E12C-0x0030E1B8
		}
	
		// Constructors
		static LegacyRenderingConfiguration(); // 0x0030E1B8-0x0030E4DC
	
		// Methods
		public static bool IsLegacyRenderingEnabled(GraphicsDeviceType rendererApi, PIXEL_FORMAT format); // 0x0030DE98-0x0030DFE4
		private static void Guard(GraphicsDeviceType rendererApi); // 0x0030DFE4-0x0030E12C
	}

	public class PreviewModelTurnOffBehaviour : VuforiaMonoBehaviour // TypeDefIndex: 3191
	{
		// Fields
		internal const string GameObjectPrefix = "EditorPreview"; // Metadata: 0x0021BB53
	
		// Constructors
		public PreviewModelTurnOffBehaviour(); // 0x00209B30-0x00209B38
	
		// Methods
		private void Awake(); // 0x0020966C-0x00209B2C
		private void Start(); // 0x00209B2C-0x00209B30
	}

	public interface Anchor : Trackable // TypeDefIndex: 3192
	{
	}

	internal interface IPlayModeDeviceTracker // TypeDefIndex: 3193
	{
		// Properties
		Vector3 Rotation { get; set; }
		Vector3 Position { get; set; }
	
		// Methods
		TrackerData.TrackableResultData GetTrackable();
		TrackableBehaviour.StatusInfo GetStatusInfo();
	}

	internal class PositionalDeviceTrackerImpl : PositionalDeviceTracker // TypeDefIndex: 3194
	{
		// Fields
		[CompilerGenerated] // 0x00189184-0x00189194
		private Action<Anchor> mAnchorRemovedEvent; // 0x0C
	
		// Events
		private event Action<Anchor> mAnchorRemovedEvent {
			add; // 0x00206D34-0x00206E40
			remove; // 0x00206E40-0x00206F4C
		}
	
		// Nested types
		[Serializable]
		[CompilerGenerated] // 0x00188FE4-0x00188FF4
		private sealed class <>c // TypeDefIndex: 3195
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static Func<TrackableBehaviour, bool> <>9__12_0; // 0x04
	
			// Constructors
			static <>c(); // 0x0020870C-0x00208780
			public <>c(); // 0x00208780-0x00208788
	
			// Methods
			internal bool <ResetAnchors>b__12_0(TrackableBehaviour t); // 0x00208788-0x0020881C
		}
	
		// Constructors
		public PositionalDeviceTrackerImpl(); // 0x00208670-0x00208678
	
		// Methods
		public override bool Start(); // 0x00206F4C-0x002073C0
		public override void Stop(); // 0x00207484-0x00207738
		public override bool Reset(); // 0x00207738-0x0020788C
		private Anchor CreateMidAirAnchorInternal(string name, Vector3 position, Quaternion rotation); // 0x0020788C-0x00207EC8
		private Anchor CreatePlaneAnchorInternal(string name, HitTestResult hitTestResult); // 0x00207EC8-0x002081B4
		public override Anchor CreateMidAirAnchor(string name, Vector3 position, Quaternion rotation); // 0x002081B4-0x002081F0
		public override Anchor CreatePlaneAnchor(string name, HitTestResult hitTestResult); // 0x002081F0-0x002081F4
		public override void RegisterAnchorRemovedCallback(Action<Anchor> onAnchorRemovedAction); // 0x002081F4-0x002081F8
		public override void UnregisterAnchorRemovedCallback(Action<Anchor> onAnchorRemovedAction); // 0x002081F8-0x002081FC
		public override void ResetAnchors(); // 0x002081FC-0x00208454
		protected void RemoveAnchor(Anchor anchor); // 0x00208454-0x002084C8
		internal override bool DestroyAnchor(Anchor anchor); // 0x002084C8-0x00208670
		[CompilerGenerated] // 0x0018A68C-0x0018A69C
		private void <ResetAnchors>b__12_1(TrackableBehaviour a); // 0x00208678-0x0020870C
	}

	internal class PositionalPlayModeDeviceTrackerImpl : PositionalDeviceTrackerImpl // TypeDefIndex: 3196
	{
		// Fields
		private DataSet mEmulatorDataset; // 0x10
	
		// Constructors
		public PositionalPlayModeDeviceTrackerImpl(); // 0x00208E60-0x00208E68
	
		// Methods
		public override bool Start(); // 0x0020881C-0x0020885C
		private bool StartDeviceTracker(); // 0x0020885C-0x00208878
		private void SetupDebugTrackable(); // 0x00208878-0x00208B2C
		private void CleanUpDebugTrackable(); // 0x00208B2C-0x00208C44
		public override void Stop(); // 0x00208C44-0x00208C80
		public override Anchor CreateMidAirAnchor(string name, Vector3 position, Quaternion rotation); // 0x00208C80-0x00208CF8
		public override Anchor CreatePlaneAnchor(string name, HitTestResult hitTestResult); // 0x00208CF8-0x00208D70
		public override void ResetAnchors(); // 0x00208D70-0x00208E60
		[CompilerGenerated] // 0x0018A69C-0x0018A6AC
		private void <ResetAnchors>b__8_0(AnchorBehaviour a); // 0x00208E68-0x00208EFC
	}

	public abstract class PositionalDeviceTracker : DeviceTracker // TypeDefIndex: 3197
	{
		// Constructors
		protected PositionalDeviceTracker(); // 0x00206D2C-0x00206D34
	
		// Methods
		public abstract bool Reset();
		public abstract Anchor CreateMidAirAnchor(string name, Vector3 position, Quaternion rotation);
		public abstract Anchor CreatePlaneAnchor(string name, HitTestResult hitTestResult);
		public abstract void RegisterAnchorRemovedCallback(Action<Anchor> onAnchorRemovedAction);
		public abstract void UnregisterAnchorRemovedCallback(Action<Anchor> onAnchorRemovedAction);
		public abstract void ResetAnchors();
		internal abstract bool DestroyAnchor(Anchor anchor);
	}

	internal class StaticWebCamTexAdaptor : IWebCamTexAdaptor // TypeDefIndex: 3198
	{
		// Fields
		[CompilerGenerated] // 0x00189194-0x001891A4
		private Texture <Texture>k__BackingField; // 0x08
	
		// Properties
		public bool DidUpdateThisFrame { get; } // 0x00218C7C-0x00218C84 
		public bool IsPlaying { get; } // 0x00218C84-0x00218C8C 
		public Texture Texture { [CompilerGenerated] /* 0x0018A6AC-0x0018A6BC */ get; [CompilerGenerated] /* 0x0018A6BC-0x0018A6CC */ private set; } // 0x00218C8C-0x00218C94 0x00218C94-0x00218C9C
	
		// Constructors
		public StaticWebCamTexAdaptor(Texture texture); // 0x00218C9C-0x00218CBC
	
		// Methods
		public void Play(); // 0x00218CBC-0x00218CC0
		public void Stop(); // 0x00218CC0-0x00218CC4
		public void CheckPermissions(); // 0x00218CC4-0x00218CC8
	}

	public class AnchorBehaviour : TrackableBehaviour // TypeDefIndex: 3199
	{
		// Fields
		[HideInInspector] // 0x001891A4-0x001891D4
		[SerializeField] // 0x001891A4-0x001891D4
		private StageType mSelectedStageType; // 0x38
		[HideInInspector] // 0x001891D4-0x00189204
		[SerializeField] // 0x001891D4-0x00189204
		private GameObject mPlaneReference; // 0x3C
		[HideInInspector] // 0x00189204-0x00189234
		[SerializeField] // 0x00189204-0x00189234
		private GameObject mMidAirReference; // 0x40
		private Anchor mAnchor; // 0x44
	
		// Constructors
		public AnchorBehaviour(); // 0x003CFA54-0x003CFA5C
	
		// Methods
		public void ConfigureAnchor(Anchor anchor); // 0x003CF5F0-0x003CF758
		public void UnConfigureAnchor(); // 0x003CF758-0x003CF788
		private void OnDestroy(); // 0x003CFA40-0x003CFA44
		private void DestroyAnchor(); // 0x003CF788-0x003CFA40
		protected override void InternalUnregisterTrackable(); // 0x003CFA44-0x003CFA54
	}

	[RequireComponent] // 0x00188D54-0x00188DCC
	public class GuideViewCameraBehaviour : VuforiaMonoBehaviour // TypeDefIndex: 3200
	{
		// Constructors
		public GuideViewCameraBehaviour(); // 0x00301FDC-0x00301FE4
	
		// Methods
		private void Update(); // 0x00301F30-0x00301FDC
	}

	internal class ModelTargetBoundingBoxImpl : IBoundingBox // TypeDefIndex: 3201
	{
		// Fields
		private readonly DataSet mDataSet; // 0x08
		private readonly string mName; // 0x0C
	
		// Constructors
		public ModelTargetBoundingBoxImpl(DataSet dataset, string name); // 0x0031467C-0x003146A4
	
		// Methods
		public OrientedBoundingBox3D GetBoundingBox(); // 0x003146A4-0x00314968
	}

	public static class AndroidDatasets // TypeDefIndex: 3202
	{
		// Methods
		public static void AddExternalDatasetSearchDirs(); // 0x003D0020-0x003D0354
	}

	internal class AndroidUnityPlayer : IUnityPlayer // TypeDefIndex: 3203
	{
		// Fields
		private const int NUM_FRAMES_TO_QUERY_ORIENTATION = 25; // Metadata: 0x0021BB64
		private const int JAVA_ORIENTATION_CHECK_FRM_INTERVAL = 60; // Metadata: 0x0021BB68
		private ScreenOrientation mScreenOrientation; // 0x08
		private ScreenOrientation mJavaScreenOrientation; // 0x0C
		private int mFramesSinceLastOrientationReset; // 0x10
		private int mFramesSinceLastJavaOrientationCheck; // 0x14
		private AndroidJavaObject mCurrentActivity; // 0x18
		private AndroidJavaClass mJavaOrientationUtility; // 0x1C
		private AndroidJavaClass mVuforiaInitializer; // 0x20
	
		// Constructors
		public AndroidUnityPlayer(); // 0x003D10A8-0x003D10B0
	
		// Methods
		public void LoadNativeLibraries(); // 0x003D0654-0x003D0658
		public void InitializePlatform(); // 0x003D07B8-0x003D07BC
		public VuforiaUnity.InitError InitializeVuforia(string licenseKey); // 0x003D0854-0x003D091C
		public void ResetPlatformCoordinateSystem(); // 0x003D0C4C-0x003D0C50
		public void Update(); // 0x003D0C50-0x003D0D20
		public void OnPause(); // 0x003D0ED8-0x003D0F54
		public void OnResume(); // 0x003D0F54-0x003D0FD0
		public void OnDestroy(); // 0x003D0FD0-0x003D104C
		public void Dispose(); // 0x003D104C-0x003D10A8
		private void LoadNativeLibrariesFromJava(); // 0x003D0658-0x003D07B8
		private void InitAndroidPlatform(); // 0x003D07BC-0x003D0854
		private int InitVuforia(int rendererAPI, string licenseKey); // 0x003D091C-0x003D0B00
		private void InitializeSurface(); // 0x003D0B00-0x003D0C4C
		private void ResetUnityScreenOrientation(); // 0x003D0D20-0x003D0D44
		private void CheckOrientation(); // 0x003D0D44-0x003D0ED8
	}

	internal class IOSUnityPlayer : IUnityPlayer // TypeDefIndex: 3204
	{
		// Fields
		private ScreenOrientation mScreenOrientation; // 0x08
	
		// Constructors
		public IOSUnityPlayer(); // 0x003063A8-0x003063B0
	
		// Methods
		public void LoadNativeLibraries(); // 0x00306380-0x00306384
		public void InitializePlatform(); // 0x00306384-0x00306388
		public VuforiaUnity.InitError InitializeVuforia(string licenseKey); // 0x00306388-0x00306390
		public void ResetPlatformCoordinateSystem(); // 0x00306390-0x00306394
		public void Update(); // 0x00306394-0x00306398
		public void Dispose(); // 0x00306398-0x0030639C
		public void OnPause(); // 0x0030639C-0x003063A0
		public void OnResume(); // 0x003063A0-0x003063A4
		public void OnDestroy(); // 0x003063A4-0x003063A8
	}

	public static class PlatformRuntimeInitialization // TypeDefIndex: 3205
	{
		// Methods
		[RuntimeInitializeOnLoadMethod] // 0x0018A6CC-0x0018A6E0
		public static void InitPlatform(); // 0x00204528-0x00204900
	}

	public class PlayModeUnityPlayer : IUnityPlayer // TypeDefIndex: 3206
	{
		// Constructors
		public PlayModeUnityPlayer(); // 0x00204900-0x00204908
	
		// Methods
		public void LoadNativeLibraries(); // 0x00205208-0x0020520C
		public void InitializePlatform(); // 0x0020520C-0x0020534C
		private void InitializeSurface(); // 0x002053DC-0x00205454
		public VuforiaUnity.InitError InitializeVuforia(string licenseKey); // 0x002054F4-0x00205608
		public void ResetPlatformCoordinateSystem(); // 0x00205608-0x0020560C
		public void Update(); // 0x0020560C-0x00205690
		public void Dispose(); // 0x002057A0-0x002057A4
		public void OnPause(); // 0x002057A4-0x002057A8
		public void OnResume(); // 0x002057A8-0x002057AC
		public void OnDestroy(); // 0x002057AC-0x00205828
	}

	internal class WSAUnityPlayer : IUnityPlayer // TypeDefIndex: 3207
	{
		// Constructors
		public WSAUnityPlayer(); // 0x00AFEB08-0x00AFEB10
	
		// Methods
		public void LoadNativeLibraries(); // 0x00AFEAE0-0x00AFEAE4
		public void InitializePlatform(); // 0x00AFEAE4-0x00AFEAE8
		public VuforiaUnity.InitError InitializeVuforia(string licenseKey); // 0x00AFEAE8-0x00AFEAF0
		public void ResetPlatformCoordinateSystem(); // 0x00AFEAF0-0x00AFEAF4
		public void Update(); // 0x00AFEAF4-0x00AFEAF8
		public void Dispose(); // 0x00AFEAF8-0x00AFEAFC
		public void OnPause(); // 0x00AFEAFC-0x00AFEB00
		public void OnResume(); // 0x00AFEB00-0x00AFEB04
		public void OnDestroy(); // 0x00AFEB04-0x00AFEB08
	}

	internal class VideoBackgroundDefaultProvider // TypeDefIndex: 3208
	{
		// Fields
		private const string VIDEO_BACKGROUND_SHADER = "Custom/VideoBackground"; // Metadata: 0x0021BB6C
		private const string CLIPPING_MASK_SHADER = "Custom/ClippingMask"; // Metadata: 0x0021BB86
		private const int DEFAULT_NUM_DIVISIONS = 2; // Metadata: 0x0021BB9D
	
		// Properties
		public int DefaultNumDivisions { get; } // 0x00226E1C-0x00226E24 
	
		// Constructors
		public VideoBackgroundDefaultProvider(); // 0x00227000-0x00227008
	
		// Methods
		public Shader GetDefaultMatteShader(HideExcessAreaUtility.CLIPPING_MODE mode); // 0x00226E24-0x00226FA0
		public Shader GetDefaultVideoBackgroundShader(); // 0x00226FA0-0x00227000
	}

	internal class PlanesHideExcessAreaClipping : IExcessAreaClipping // TypeDefIndex: 3209
	{
		// Fields
		private const float TOLERANCE = 0.02f; // Metadata: 0x0021BBA1
		private Shader mMatteShader; // 0x08
		private GameObject[] mClippingPlanes; // 0x0C
		private bool mPlanesActivated; // 0x10
		private Vector2 mClippingScale; // 0x14
	
		// Nested types
		private enum PlanePos // TypeDefIndex: 3210
		{
			TOP = 0,
			BOTTOM = 1,
			LEFT = 2,
			RIGHT = 3
		}
	
		// Constructors
		public PlanesHideExcessAreaClipping(Shader matteShader); // 0x00304B58-0x00304C04
	
		// Methods
		private GameObject CreateQuad(GameObject parent, string name, Vector3 position, Quaternion rotation, Vector3 scale, int layer); // 0x0031E094-0x0031E3D8
		public void SetPlanesRenderingActive(bool activeflag); // 0x0031E3D8-0x0031E45C
		public bool IsPlanesRenderingActive(); // 0x0031E45C-0x0031E464
		public void Start(GameObject gameObject); // 0x0031E464-0x0031E7C8
		public void OnDestroy(); // 0x0031E7C8-0x0031E898
		public void Update(Vector2 halfScale); // 0x0031E898-0x0031EF08
	}

	internal class VuforiaVRDeviceCameraConfiguration : VRDeviceCameraConfiguration, ICameraConfiguration // TypeDefIndex: 3211
	{
		// Fields
		private const string CLASS_NAME = "VUFORIA_VRDEVICE_CAMERA_CONFIGURAION"; // Metadata: 0x0021BBB5
		private float mStereoOffset; // 0xA8
		private bool mDelayedVideoBackgroundEnabledChanged; // 0xAC
	
		// Constructors
		public VuforiaVRDeviceCameraConfiguration(Camera cam, VRDeviceController vrDeviceController, float stereoOffset); // 0x00AFD0B0-0x00AFD158
	
		// Methods
		public override void Init(); // 0x00AFD158-0x00AFD610
		public override void CheckForSurfaceChanges(); // 0x00AFD610-0x00AFD660
		public override void OnAfterUpdateState(Transform trackingReference); // 0x00AFD770-0x00AFD7C4
		public override void OnVideoBackGroundEnabledChanged(); // 0x00AFD7C4-0x00AFD818
		public override void Destroy(); // 0x00AFD818-0x00AFD8A0
		protected override void UpdateProjection(); // 0x00AFD8A0-0x00AFE318
		protected override bool ProjectionParamsChanged(); // 0x00AFE318-0x00AFE59C
		protected override float GetStereoEyeDistance(); // 0x00AFE59C-0x00AFE5A4
		private static bool IsVuforiaVRDeviceReady(); // 0x00AFD660-0x00AFD770
	}

	internal class CommandBufferVideoTextureUpdater : IVideoTextureUpdater // TypeDefIndex: 3212
	{
		// Fields
		private const string RGB_KEYWORD = "VUFORIA_RGB"; // Metadata: 0x0021BBDD
		private const string YUVN21_KEYWORD = "VUFORIA_YUVNV21"; // Metadata: 0x0021BBEC
		private const string YUVN12_KEYWORD = "VUFORIA_YUVNV12"; // Metadata: 0x0021BBFF
		private const PIXEL_FORMAT DEFAULT_NATIVE_PIXEL_FORMAT = PIXEL_FORMAT.RGB565; // Metadata: 0x0021BC12
		private readonly CommandBuffer mCommandBuffer; // 0x08
		private readonly Material mVideoBackgroundMaterial; // 0x0C
		private readonly BackgroundPlaneBehaviour mBgPlaneBehaviour; // 0x10
		private readonly IUnityRenderEventBroadcaster mRenderEventBroadcaster; // 0x14
		private bool mCommandBufferInitialized; // 0x18
		private static readonly Dictionary<PIXEL_FORMAT, TextureFormat> mTextureFormatLookup; // 0x00
		private static readonly Dictionary<PIXEL_FORMAT, string> mShaderWordLookup; // 0x04
	
		// Nested types
		[CompilerGenerated] // 0x00188FF4-0x00189004
		private sealed class <>c__DisplayClass22_0 // TypeDefIndex: 3213
		{
			// Fields
			public string keyword; // 0x08
	
			// Constructors
			public <>c__DisplayClass22_0(); // 0x003E2714-0x003E271C
	
			// Methods
			internal bool <EnableShaderKeyword>b__0(string k); // 0x003E2A20-0x003E2A34
			internal bool <EnableShaderKeyword>b__1(string k); // 0x003E2A34-0x003E2A48
		}
	
		// Constructors
		public CommandBufferVideoTextureUpdater(BackgroundPlaneBehaviour bgPlaneBehaviour, IUnityRenderEventBroadcaster renderEventBroadcaster); // 0x003E10C8-0x003E122C
		static CommandBufferVideoTextureUpdater(); // 0x003E2720-0x003E2A20
	
		// Methods
		public void OnPreRender(); // 0x003E13A4-0x003E142C
		public void OnPostRender(); // 0x003E142C-0x003E1430
		public void Dispose(); // 0x003E1430-0x003E14F0
		private void InitializeCommandBuffer(); // 0x003E1614-0x003E1B98
		private void DeInitializeCommandBuffer(); // 0x003E14F0-0x003E1614
		private static void SetupRGBTextureUpdating(int imageWidth, int imageHeight, PIXEL_FORMAT nativePixelFormat, Material backgroundMaterial, CommandBuffer commandBuffer); // 0x003E1B98-0x003E1D7C
		private static void SetupYUVTextureUpdating(int imageWidth, int imageHeight, PIXEL_FORMAT nativePixelFormat, Material backgroundMaterial, CommandBuffer commandBuffer); // 0x003E1D7C-0x003E1F8C
		private static void SetDefaultTextureUpdating(int imageWidth, int imageHeight, Material videoBackgroundMaterial, CommandBuffer commandBuffer); // 0x003E2670-0x003E2714
		private static void SetVideoBackgroundRenderingData(PIXEL_FORMAT format, int width, int height); // 0x003E25B0-0x003E2670
		private static void IssueCustomTextureUpdate(CommandBuffer cb, Texture texture, uint textureId); // 0x003E2460-0x003E25B0
		private static void EnableShaderKeyword(Material mat, string keyword); // 0x003E20AC-0x003E2460
		private static Texture2D CreateTexture(int width, int height, TextureFormat textureFormat); // 0x003E1F8C-0x003E20AC
		private static Material CreateMaterial(); // 0x003E122C-0x003E13A4
		public void OnVideoBackgroundConfigChanged(); // 0x003E271C-0x003E2720
	}

	internal interface IVideoTextureUpdater : IVideoBackgroundEventHandler, IDisposable // TypeDefIndex: 3214
	{
		// Methods
		void OnPreRender();
		void OnPostRender();
	}

	internal class NativeVideoTextureUpdater : IVideoTextureUpdater // TypeDefIndex: 3215
	{
		// Fields
		private readonly Camera mCamera; // 0x08
		private readonly BackgroundPlaneBehaviour mBgPlaneBehaviour; // 0x0C
		private readonly Material mVideoBackgroundMaterial; // 0x10
		private readonly IUnityRenderEventBroadcaster mRenderEventBroadcaster; // 0x14
		private static int sFrameCounter; // 0x00
		private static int sRenderCounter; // 0x04
		private Action<IntPtr> mNativeTextureCreationCallback; // 0x18
		private int mScheduledBgPlaneUpdates; // 0x1C
	
		// Nested types
		[CompilerGenerated] // 0x00189004-0x00189014
		private sealed class <>c__DisplayClass23_0 // TypeDefIndex: 3216
		{
			// Fields
			public NativeVideoTextureUpdater <>4__this; // 0x08
			public int width; // 0x0C
			public int height; // 0x10
	
			// Constructors
			public <>c__DisplayClass23_0(); // 0x00318B3C-0x00318B44
	
			// Methods
			internal void <CreateTextureNative>b__0(IntPtr ptr); // 0x00318D40-0x00318D84
		}
	
		// Constructors
		public NativeVideoTextureUpdater(Camera camera, BackgroundPlaneBehaviour bgPlaneBehaviour, IUnityRenderEventBroadcaster renderEventBroadcaster); // 0x00316C68-0x00316F68
		static NativeVideoTextureUpdater(); // 0x00318CD8-0x00318D40
	
		// Methods
		public Material GetVideoMaterial(); // 0x00316F68-0x00316F70
		public void OnPreRender(); // 0x00316F70-0x00317090
		public void OnPostRender(); // 0x003177E0-0x003178F0
		public void OnVideoBackgroundConfigChanged(); // 0x00317D1C-0x00317E78
		public void Dispose(); // 0x003182A8-0x00318530
		private void TextureCreationUpdate(); // 0x003172AC-0x00317410
		private bool IsNewVideoTextureRequired(); // 0x00317E78-0x0031806C
		private static void StartNativeVideoUpdate(); // 0x00317410-0x003175B8
		private static void FinishNativeVideoUpdate(); // 0x00317C24-0x00317D1C
		private static void OnPreRenderSetupMetal(Camera camera); // 0x00317090-0x003172AC
		private static void OnPostRenderSetupMetal(Camera camera); // 0x003178F0-0x00317C24
		private void RequestNativeTextureCreation(int width, int height, Action<IntPtr> onTextureCreated); // 0x003186CC-0x00318860
		private void OnNativeTextureCreated(int textureWidth, int imageHeight, IntPtr nativeTexturePtr); // 0x00318860-0x0031891C
		private void ScheduleBgPlaneUpdates(); // 0x0031806C-0x00318078
		private void CreateTextureNative(int width, int height); // 0x0031816C-0x003182A8
		private void CreateTexturePlaymode(int width, int height); // 0x00318078-0x0031816C
		private static Texture2D CreateUnityTexture(int width, int height, IntPtr nativeTexturePtr); // 0x0031891C-0x003189E0
		private static void ConfigureUnityTexture(Texture texture); // 0x00318B44-0x00318BC8
		private void SetUnityTextureForMaterial(Texture texture); // 0x003189E0-0x00318A14
		private static void SetNativeExternalTexture(Texture texture); // 0x00318A14-0x00318B3C
		private static bool SetNativeExternalTextureInWrapper(VuforiaRenderer.RendererAPI api, Texture texture); // 0x00318BC8-0x00318CD8
		private void ResetNativeExternalTexture(); // 0x00318530-0x003186CC
		private void UpdateBackgroundPlaneBehaviour(); // 0x003175B8-0x003177E0
	}

	internal class NullVideoTextureUpdater : IVideoTextureUpdater // TypeDefIndex: 3217
	{
		// Constructors
		public NullVideoTextureUpdater(); // 0x00318F48-0x00318F50
	
		// Methods
		public void OnPreRender(); // 0x00318F38-0x00318F3C
		public void OnPostRender(); // 0x00318F3C-0x00318F40
		public void OnVideoBackgroundConfigChanged(); // 0x00318F40-0x00318F44
		public void Dispose(); // 0x00318F44-0x00318F48
	}

	public interface IProjectMatrixProvider // TypeDefIndex: 3218
	{
		// Properties
		Matrix4x4 MainProjectionMatrix { get; }
	}

	internal class StereoProjMatrixStore // TypeDefIndex: 3219
	{
		// Fields
		private readonly Camera mCamera; // 0x08
		private readonly Dictionary<Camera.StereoscopicEye, Matrix4x4> mProjectionMatrices; // 0x0C
		private readonly Dictionary<Camera.StereoscopicEye, float> mAppliedVerticalFoVs; // 0x10
		private readonly Dictionary<Camera.StereoscopicEye, float> mCurrentVerticalFoVs; // 0x14
		private readonly Dictionary<Camera.StereoscopicEye, float> mAppliedHorizontalFoVs; // 0x18
		private readonly Dictionary<Camera.StereoscopicEye, float> mCurrentHorizontalFoVs; // 0x1C
		private Matrix4x4 mSharedCullingProjectionMatrix; // 0x20
		private Matrix4x4 mSharedCullingViewMatrix; // 0x60
		private Matrix4x4 mLeftEyeOffsetMatrix; // 0xA0
		private Matrix4x4 mRightEyeOffsetMatrix; // 0xE0
		private Mode mMode; // 0x120
	
		// Nested types
		internal enum Mode // TypeDefIndex: 3220
		{
			VUFORIA_VRDEVICE = 0,
			EXTERNAL_VRDEVICE = 1
		}
	
		// Constructors
		public StereoProjMatrixStore(Camera cam, Mode mode); // 0x00218CC8-0x0021914C
	
		// Methods
		public bool UpdateMatrices(); // 0x0021914C-0x00219BB8
		public Matrix4x4 GetMatrix(Camera.StereoscopicEye eye); // 0x00219DC4-0x00219E4C
		public void SetMatrix(Camera.StereoscopicEye eye, Matrix4x4 matrix); // 0x00219E4C-0x00219F80
		public void SetMatrix(Camera.StereoscopicEye eye, Matrix4x4 matrix, float verticalFoV, float horizontalFoV); // 0x00219BB8-0x00219DC4
		public float GetCurrentVerticalFov(Camera.StereoscopicEye eye); // 0x00219F80-0x0021A000
		public float GetCurrentHorizontalFov(Camera.StereoscopicEye eye); // 0x0021A000-0x0021A080
		public float GetLastAppliedVerticalFov(Camera.StereoscopicEye eye); // 0x0021A080-0x0021A100
		public float GetLastAppliedHorizontalFov(Camera.StereoscopicEye eye); // 0x0021A100-0x0021A180
		public Matrix4x4 GetLastAppliedSharedCullingMatrix(); // 0x0021A180-0x0021A1A8
		public void ApplyMatrices(); // 0x0021A1A8-0x0021A834
		public void SetDeviceOffset(Vector3 leftEyeOffsetPos, Quaternion leftEyeOffsetRot, Vector3 rightEyeOffsetPos, Quaternion rightEyeOffsetRot); // 0x0021B028-0x0021B158
		private void computeSharedCullingMatrix(); // 0x0021A834-0x0021B028
	}

	internal class ExternalVRDeviceCameraConfiguration : VRDeviceCameraConfiguration, ICameraConfiguration // TypeDefIndex: 3221
	{
		// Fields
		private const string CLASS_NAME = "EXTERNAL_VRDEVICE_CAMERA_CONFIGURAION"; // Metadata: 0x0021BC1E
		private VuforiaARController.WorldCenterMode mLastWorldCenterMode; // 0xA8
	
		// Constructors
		public ExternalVRDeviceCameraConfiguration(Camera cam, VRDeviceController vrDeviceController); // 0x002FA62C-0x002FA6C4
	
		// Methods
		public override void Init(); // 0x002FA6C4-0x002FA6E4
		public override void OnVideoBackGroundEnabledChanged(); // 0x002FA8C0-0x002FA980
		public override void Destroy(); // 0x002FA980-0x002FAA78
		public override void OnAfterUpdateState(Transform trackingReference); // 0x002FAA88-0x002FAB50
		protected override void UpdateProjection(); // 0x002FAB50-0x002FB534
		protected override bool ProjectionParamsChanged(); // 0x002FB534-0x002FB7B8
		protected override float GetStereoEyeDistance(); // 0x002FB7B8-0x002FB9A0
		private void ToggleHeadTrackingFromWCM(); // 0x002FA6E4-0x002FA8C0
	}

	internal abstract class VRDeviceCameraConfiguration : BaseCameraConfiguration // TypeDefIndex: 3222
	{
		// Fields
		protected const float TOLERANCE = 0.01f; // Metadata: 0x0021BC47
		protected readonly Camera mCamera; // 0x34
		protected StereoProjMatrixStore mMatrixStore; // 0x38
		protected Matrix4x4 mLeftMatrixUsedForVBPlacement; // 0x3C
		protected float mLastAppliedNearClipPlane; // 0x7C
		protected float mLastAppliedFarClipPlane; // 0x80
		protected float mMaxDepthForVideoBackground; // 0x84
		protected float mMinDepthForVideoBackground; // 0x88
		private int mScreenWidth; // 0x8C
		private int mScreenHeight; // 0x90
		protected float mStereoDepth; // 0x94
		protected bool mResetMatrix; // 0x98
		protected Dictionary<Camera.StereoscopicEye, Vector2> mVuforiaFrustumSkew; // 0x9C
		protected Dictionary<Camera.StereoscopicEye, Vector2> mCenterToEyeAxis; // 0xA0
		protected readonly VRDeviceController mVrDeviceController; // 0xA4
	
		// Properties
		public override Matrix4x4 MainProjectionMatrix { get; } // 0x00225198-0x002251C0 
	
		// Constructors
		public VRDeviceCameraConfiguration(Camera cam, VRDeviceController vrDeviceController); // 0x00224218-0x002243D8
	
		// Methods
		public override void Init(); // 0x002243D8-0x00224428
		protected override void ConfigureVideoBackground(); // 0x002245D0-0x002249E0
		public virtual void CheckForSurfaceChanges(); // 0x002249E0-0x00224B70
		public virtual void OnAfterUpdateState(Transform trackingReference); // 0x00224B70-0x00224FF4
		public bool IsStereo(); // 0x00225160-0x00225168
		public virtual void OnVideoBackGroundEnabledChanged(); // 0x00225168-0x00225198
		public Matrix4x4 GetVideoBackgroundProjectionMatrix(float near, float far, ScreenOrientation screenOrientation); // 0x002251C0-0x00225298
		public override void FinalizeRenderingSettings(); // 0x00225298-0x0022529C
		public override void Destroy(); // 0x002252F4-0x002253E8
		protected void ResetStereoProjectionMatrices(); // 0x00224428-0x002245A8
		private void SetStereoDepth(float depth); // 0x00224FF4-0x00225160
		protected void ApplyStereoDepthToMatrices(); // 0x0022541C-0x002254F4
		protected abstract float GetStereoEyeDistance();
		private void ApplyStereoDepthToMatrix(Camera.StereoscopicEye eye, float offset); // 0x002254F4-0x00225800
		protected void RestoreVuforiaFrustumSkewInMatrices(); // 0x0022529C-0x002252F4
		private void RestoreVuforiaFrustumSkewInMatrix(Camera.StereoscopicEye eye); // 0x00225800-0x00225AA8
		private static bool IsValidDepth(float depth); // 0x002253E8-0x0022541C
	}

	public class DigitalEyewearARController : ARController, IVideoBackgroundEventHandler // TypeDefIndex: 3223
	{
		// Fields
		internal const string LEFT_CAMERA_NAME = "StereoCameraLeft"; // Metadata: 0x0021BC4B
		internal const string RIGHT_CAMERA_NAME = "StereoCameraRight"; // Metadata: 0x0021BC5F
		public const float DEFAULT_CAMERA_OFFSET = 0.06f; // Metadata: 0x0021BC74
		public const float DEFAULT_VR_FOV = 60f; // Metadata: 0x0021BC78
		private float mCameraOffset; // 0x0C
		private int mDistortionRenderingLayer; // 0x10
		private EyewearType mEyewearType; // 0x14
		private StereoFramework mStereoFramework; // 0x18
		private SeeThroughConfiguration mSeeThroughConfiguration; // 0x1C
		private string mViewerName; // 0x20
		private string mViewerManufacturer; // 0x24
		private bool mUseCustomViewer; // 0x28
		private SerializableViewerParameters mCustomViewer; // 0x2C
		private Transform mCentralAnchorPoint; // 0x30
		private Camera mPrimaryCamera; // 0x34
		private VuforiaARController mVuforiaBehaviour; // 0x38
		private bool mSetFocusPlaneAutomatically; // 0x3C
		private VRDeviceController mVRDeviceController; // 0x40
		private static DigitalEyewearARController mInstance; // 0x00
		private static object mPadlock; // 0x04
	
		// Properties
		public float CameraOffset { get; private set; } // 0x003F5A4C-0x003F5A54 0x003F5A54-0x003F5A5C
		public Transform CentralAnchorPoint { get; } // 0x003F5A5C-0x003F5B10 
		public bool IsStereoRendering { get; } // 0x003F5B10-0x003F5C00 
		public Camera PrimaryCamera { get; } // 0x003F5C18-0x003F5C20 
		public int DistortionRenderingLayer { get; set; } // 0x003F5C20-0x003F5C28 0x003F5C28-0x003F5C30
		public static DigitalEyewearARController Instance { get; } // 0x003F5CBC-0x003F5EC8 
		internal VRDeviceController VRDeviceController { get; } // 0x003F7108-0x003F7110 
		private ICameraConfiguration CameraConfiguration { get; set; } // 0x003F5C00-0x003F5C18 0x003F80EC-0x003F8234
	
		// Nested types
		public enum EyewearType // TypeDefIndex: 3224
		{
			None = 0,
			OpticalSeeThrough = 1,
			VideoSeeThrough = 2
		}
	
		public enum StereoFramework // TypeDefIndex: 3225
		{
			Vuforia = 0
		}
	
		public enum SeeThroughConfiguration // TypeDefIndex: 3226
		{
			Vuforia = 0,
			HoloLens = 1
		}
	
		[Serializable]
		public class SerializableViewerParameters // TypeDefIndex: 3227
		{
			// Fields
			public float Version; // 0x08
			public string Name; // 0x0C
			public string Manufacturer; // 0x10
			public ViewerButtonType ButtonType; // 0x14
			public float ScreenToLensDistance; // 0x18
			public float InterLensDistance; // 0x1C
			public ViewerTrayAlignment TrayAlignment; // 0x20
			public float LensCenterToTrayDistance; // 0x24
			public Vector2 DistortionCoefficients; // 0x28
			public Vector4 FieldOfView; // 0x30
			public bool ContainsMagnet; // 0x40
	
			// Constructors
			public SerializableViewerParameters(); // 0x002F9FA8-0x002F9FB0
		}
	
		// Constructors
		private DigitalEyewearARController(); // 0x003F5C30-0x003F5CBC
		static DigitalEyewearARController(); // 0x003F8234-0x003F82B4
	
		// Methods
		[RuntimeInitializeOnLoadMethod] // 0x0018A6E0-0x0018A6F4
		public static void RegisterARController(); // 0x003F5EC8-0x003F5F44
		protected override void Awake(); // 0x003F5F44-0x003F62B8
		protected override void Start(); // 0x003F62B8-0x003F62EC
		protected override void Update(); // 0x003F62EC-0x003F6320
		protected override void OnDestroy(); // 0x003F6320-0x003F6448
		public void OnVideoBackgroundConfigChanged(); // 0x003F6448-0x003F644C
		public void SetCameraOffset(float Offset); // 0x003F644C-0x003F6454
		public void SetViewerActive(bool isActive, bool reinitializeCamera); // 0x003F6454-0x003F6510
		public void SetViewerActive(bool isActive); // 0x003F66D0-0x003F6794
		public void SetMode(Device.Mode mode); // 0x003F6794-0x003F698C
		public EyewearType GetEyewearType(); // 0x003F698C-0x003F6994
		public void SetEyewearType(EyewearType type); // 0x003F6994-0x003F699C
		public StereoFramework GetStereoCameraConfig(); // 0x003F699C-0x003F69A4
		public void SetStereoCameraConfiguration(StereoFramework config); // 0x003F69A4-0x003F69AC
		public SeeThroughConfiguration GetSeeThroughConfiguration(); // 0x003F69AC-0x003F69B4
		public void SetSeeThroughConfiguration(SeeThroughConfiguration config); // 0x003F69B4-0x003F69BC
		public void EnableAutomaticFocusPointSelection(bool enable); // 0x003F69BC-0x003F69C4
		internal void SetFocusPoint(); // 0x003F69C4-0x003F70D4
		internal void UpdateVRDeviceController(); // 0x003F70D4-0x003F7108
		internal bool NoVuforiaCameraControl(); // 0x003F7110-0x003F7134
		private void OnVuforiaInitialized(); // 0x003F7134-0x003F7B7C
		private void OnVuforiaStarted(); // 0x003F7CEC-0x003F7CF0
		private void SetViewerActive(bool isActive, bool deinitCam, bool initCam, CameraDevice.CameraDeviceMode mode); // 0x003F6510-0x003F66D0
		private void CorrectCameraConfiguration(); // 0x003F7B7C-0x003F7CEC
		private void ConfigureView(); // 0x003F7CF0-0x003F80EC
	}

	public static class UnityComponentExtensions // TypeDefIndex: 3228
	{
		// Extension methods
		public static T[] GetComponentsOnlyInChildren<T>(this Component obj)
			where T : Component;
		public static T[] GetComponentsOnlyInChildren<T>(this Component obj, bool includeInactive)
			where T : Component;
	}

	internal abstract class AValidatableVideoBackgroundConfigProperty // TypeDefIndex: 3229
	{
		// Fields
		protected readonly VuforiaConfiguration.VideoBackgroundConfiguration Config; // 0x08
		protected readonly VideoBackgroundDefaultProvider DefaultProvider; // 0x0C
	
		// Constructors
		protected AValidatableVideoBackgroundConfigProperty(VuforiaConfiguration.VideoBackgroundConfiguration config, VideoBackgroundDefaultProvider defaultProvider); // 0x003CF5C8-0x003CF5F0
	
		// Methods
		public abstract bool Validate();
	}

	internal class MatteShaderProperty : AValidatableVideoBackgroundConfigProperty // TypeDefIndex: 3230
	{
		// Constructors
		public MatteShaderProperty(VuforiaConfiguration.VideoBackgroundConfiguration config, VideoBackgroundDefaultProvider defaultProvider); // 0x0030E854-0x0030E85C
	
		// Methods
		public override bool Validate(); // 0x0030E85C-0x0030E9B0
	}

	internal class NumDivisionsProperty : AValidatableVideoBackgroundConfigProperty // TypeDefIndex: 3231
	{
		// Fields
		private const int MinNumDivisions = 2; // Metadata: 0x0021BC94
	
		// Constructors
		public NumDivisionsProperty(VuforiaConfiguration.VideoBackgroundConfiguration config, VideoBackgroundDefaultProvider defaultProvider); // 0x00318F50-0x00318F58
	
		// Methods
		public override bool Validate(); // 0x00318F58-0x00318FE4
	}

	internal class VideoBackgroundConfigValidator // TypeDefIndex: 3232
	{
		// Fields
		private readonly List<AValidatableVideoBackgroundConfigProperty> mValidatableProperties; // 0x08
	
		// Nested types
		[CompilerGenerated] // 0x00189014-0x00189024
		private sealed class <>c__DisplayClass2_0 // TypeDefIndex: 3233
		{
			// Fields
			public bool res; // 0x08
	
			// Constructors
			public <>c__DisplayClass2_0(); // 0x00226DC8-0x00226DD0
	
			// Methods
			internal void <ValidateAll>b__0(AValidatableVideoBackgroundConfigProperty p); // 0x00226DD0-0x00226E1C
		}
	
		// Constructors
		public VideoBackgroundConfigValidator(VuforiaConfiguration.VideoBackgroundConfiguration config, VideoBackgroundDefaultProvider defaultProvider); // 0x00226B34-0x00226CC4
	
		// Methods
		public bool ValidateAll(); // 0x00226CCC-0x00226DC8
	}

	internal class VideoBackgroundShaderProperty : AValidatableVideoBackgroundConfigProperty // TypeDefIndex: 3234
	{
		// Constructors
		public VideoBackgroundShaderProperty(VuforiaConfiguration.VideoBackgroundConfiguration config, VideoBackgroundDefaultProvider defaultProvider); // 0x00226CC4-0x00226CCC
	
		// Methods
		public override bool Validate(); // 0x002280C8-0x002281C8
	}

	public abstract class EyewearDevice : Device // TypeDefIndex: 3235
	{
		// Nested types
		public enum EyeID // TypeDefIndex: 3236
		{
			EYEID_MONOCULAR = 0,
			EYEID_LEFT = 1,
			EYEID_RIGHT = 2
		}
	
		public struct EyewearCalibrationReading // TypeDefIndex: 3237
		{
			// Fields
			public float[] pose; // 0x00
			public float scale; // 0x04
			public float centerX; // 0x08
			public float centerY; // 0x0C
			public AlignmentType type; // 0x10
	
			// Nested types
			public enum AlignmentType // TypeDefIndex: 3238
			{
				RECTANGLE = 0,
				HORIZONTAL_LINE = 1,
				VERTICAL_LINE = 2
			}
		}
	
		// Constructors
		protected EyewearDevice(); // 0x002FCEE0-0x002FD120
	
		// Methods
		public abstract bool IsSeeThru();
		public abstract bool IsDualDisplay();
		public abstract bool SetDisplayExtended(bool enable);
		public abstract bool IsDisplayExtended();
		public abstract bool IsDisplayExtendedGLOnly();
		public abstract ScreenOrientation GetScreenOrientation();
		public abstract bool SetPredictiveTracking(bool enable);
		public abstract bool IsPredictiveTrackingEnabled();
		public abstract EyewearCalibrationProfileManager GetCalibrationProfileManager();
		public abstract EyewearUserCalibrator GetUserCalibrator();
	}

	public class GuideView : INotifyPropertyChanged // TypeDefIndex: 3239
	{
		// Fields
		private readonly IntPtr mInstancePtr; // 0x08
		private Matrix4x4 mPose; // 0x0C
		private string mName; // 0x4C
		private bool mCustomPose; // 0x50
		private Texture2D mImage; // 0x54
		[CompilerGenerated] // 0x00189234-0x00189244
		private PropertyChangedEventHandler PropertyChanged; // 0x58
	
		// Properties
		public string Name { get; } // 0x002FED64-0x002FED6C 
		public Matrix4x4 Pose { get; set; } // 0x002FED6C-0x002FED94 0x002FED94-0x002FEEF0
		public Texture2D Image { get; } // 0x002FF47C-0x002FF658 
	
		// Events
		public event PropertyChangedEventHandler PropertyChanged {
			add; // 0x002FE4C8-0x002FE5D4
			remove; // 0x002FE5D4-0x002FE6E0
		}
	
		// Constructors
		public GuideView(IntPtr nativeGuideView); // 0x002FE6E0-0x002FE710
	
		// Methods
		internal void DestroyTexture(); // 0x002FF3A4-0x002FF47C
		private void LoadName(); // 0x002FE710-0x002FE864
		private void LoadPose(); // 0x002FE864-0x002FED64
		private void SavePose(); // 0x002FEEF0-0x002FF3A4
		private bool CallNativeGetInstanceImage(ref TrackerData.ImageHeaderData imageHeader); // 0x002FF900-0x002FFBF0
		protected virtual void RaisePropertyChanged(string propertyName); // 0x002FFBF0-0x002FFC84
	}

	[RequireComponent] // 0x00188DDC-0x00188E54
	public class GuideView2DBehaviour : VuforiaMonoBehaviour // TypeDefIndex: 3240
	{
		// Fields
		private float mCameraAspect; // 0x0C
		private float mCameraFOV; // 0x10
		private float mCameraNearPlane; // 0x14
		private Texture2D mGuideViewTexture; // 0x18
		private bool mFlipImageVertically; // 0x1C
	
		// Constructors
		public GuideView2DBehaviour(); // 0x0030095C-0x00300964
	
		// Methods
		private void Update(); // 0x002FFC84-0x002FFD80
		public void UpdateView(ModelTargetBehaviour modelTarget, GuideView guideView); // 0x00300430-0x0030071C
		private void UpdateTransform(Material material, Texture2D guideViewTexture); // 0x002FFF24-0x00300430
		private static void ApplyTexture(MeshRenderer meshRenderer, Texture2D guideViewTexture); // 0x0030071C-0x00300850
		private static float GetTextureAspect(Texture2D texture); // 0x00300850-0x0030095C
		private bool HasCameraChanged(Camera camera); // 0x002FFD80-0x002FFF24
	}

	public class GuideView3DBehaviour : VuforiaMonoBehaviour // TypeDefIndex: 3241
	{
		// Fields
		private GuideView mCurrentGuideView; // 0x0C
		private GameObject m3DModel; // 0x10
	
		// Constructors
		public GuideView3DBehaviour(); // 0x00301F28-0x00301F30
	
		// Methods
		public void UpdateGuideViewPose(Matrix4x4 newPose); // 0x00300964-0x00300CC8
		public void UpdateFromGuideViewPose(); // 0x00301120-0x003012E4
		public void UpdateView(ModelTargetBehaviour modelTarget, GuideView guideView); // 0x003012E4-0x00301A98
		private void UpdateDetectionPoseFromMatrix(Matrix4x4 matrix); // 0x00300E84-0x00300F54
		private static Quaternion GetRotation(Matrix4x4 matrix); // 0x00300F88-0x00301120
		private static Vector3 GetPosition(Matrix4x4 matrix); // 0x00300F54-0x00300F88
		private static bool MatricesAreEqual(Matrix4x4 ma, Matrix4x4 mb); // 0x00300CC8-0x00300E84
		private void LoadGuideViewModel(ModelTargetBehaviour modelTarget); // 0x00301A98-0x00301F20
	}

	public class GuideViewRenderingBehaviour : VuforiaMonoBehaviour // TypeDefIndex: 3242
	{
		// Fields
		[Tooltip] // 0x00189244-0x00189278
		public float guideReappearanceDelay; // 0x0C
		private const float INITIAL_GUIDEVIEW_2D_SCALE = 0.1f; // Metadata: 0x0021BCB0
		private ModelTargetBehaviour mTrackedTarget; // 0x10
		private ModelTargetBehaviour.GuideViewDisplayMode mGuideViewDisplayMode; // 0x14
		private GuideView mGuideView; // 0x18
		private int mLastActiveGuideViewIndex; // 0x1C
		private bool mGuideViewInitialized; // 0x20
		private IEnumerator mShowGuideViewCoroutine; // 0x24
		private GameObject mGuideViewGameObject; // 0x28
		private bool mGuideViewShown; // 0x2C
		private DepthTextureMode mPrevDepthTextureMode; // 0x30
	
		// Nested types
		[CompilerGenerated] // 0x00189024-0x00189034
		private sealed class <ShowGuideViewAfter>d__23 : IEnumerator<object> // TypeDefIndex: 3243
		{
			// Fields
			private int <>1__state; // 0x08
			private object <>2__current; // 0x0C
			public float seconds; // 0x10
			public GuideViewRenderingBehaviour <>4__this; // 0x14
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018AEA8-0x0018AEB8 */ get; } // 0x00304948-0x00304950 
			object IEnumerator.Current { [DebuggerHidden] /* 0x0018AEC8-0x0018AED8 */ get; } // 0x003049D8-0x003049E0 
	
			// Constructors
			[DebuggerHidden] // 0x0018AE88-0x0018AE98
			public <ShowGuideViewAfter>d__23(int <>1__state); // 0x0030414C-0x0030416C
	
			// Methods
			[DebuggerHidden] // 0x0018AE98-0x0018AEA8
			void IDisposable.Dispose(); // 0x00304874-0x00304878
			private bool MoveNext(); // 0x00304878-0x00304948
			[DebuggerHidden] // 0x0018AEB8-0x0018AEC8
			void IEnumerator.Reset(); // 0x00304950-0x003049D8
		}
	
		[CompilerGenerated] // 0x00189034-0x00189044
		private sealed class <SetChildOfVuforiaAnchor>d__24 : IEnumerator<object> // TypeDefIndex: 3244
		{
			// Fields
			private int <>1__state; // 0x08
			private object <>2__current; // 0x0C
			public GuideViewRenderingBehaviour <>4__this; // 0x10
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018AEF8-0x0018AF08 */ get; } // 0x003047DC-0x003047E4 
			object IEnumerator.Current { [DebuggerHidden] /* 0x0018AF18-0x0018AF28 */ get; } // 0x0030486C-0x00304874 
	
			// Constructors
			[DebuggerHidden] // 0x0018AED8-0x0018AEE8
			public <SetChildOfVuforiaAnchor>d__24(int <>1__state); // 0x003041F8-0x00304218
	
			// Methods
			[DebuggerHidden] // 0x0018AEE8-0x0018AEF8
			void IDisposable.Dispose(); // 0x00304458-0x0030445C
			private bool MoveNext(); // 0x0030445C-0x003047DC
			[DebuggerHidden] // 0x0018AF08-0x0018AF18
			void IEnumerator.Reset(); // 0x003047E4-0x0030486C
		}
	
		// Constructors
		public GuideViewRenderingBehaviour(); // 0x00304440-0x00304458
	
		// Methods
		private void Update(); // 0x003027A8-0x003027B8
		private void CreateTargetGuideView(string guideViewName, bool use3DGuideView, Material guideView2DMaterial); // 0x00302B0C-0x00302B88
		public void DeleteTargetGuideView(); // 0x00303154-0x003037AC
		public void DetachEvents(); // 0x003037AC-0x00303848
		private GameObject CreateGuideView2D(string name, Material guideViewMaterial, Transform parent); // 0x00302B88-0x00302EE4
		private GameObject CreateGuideView3D(string name, Transform parent); // 0x00302EE4-0x00303154
		private string GetGuideViewName(string TrackableName, int GuideViewIndex); // 0x00303848-0x003038DC
		private void UpdateTrackedTarget(); // 0x003027B8-0x00302B0C
		private void StartGuideViewCoroutine(); // 0x00303BCC-0x00303BF8
		private void StopGuideViewCoroutine(); // 0x00303B9C-0x00303BCC
		private void GuideViewPropertyChanged(object sender, PropertyChangedEventArgs e); // 0x00303F58-0x0030414C
		private void ShowGuideView(bool show); // 0x003038DC-0x00303A84
		private IEnumerator ShowGuideViewAfter(float seconds); // 0x00303EA4-0x00303F58
		private IEnumerator SetChildOfVuforiaAnchor(); // 0x0030416C-0x003041F8
		private void SetChildOfModelTarget(); // 0x00303A84-0x00303B9C
		public void Initialize(ModelTargetBehaviour modelTarget); // 0x00304218-0x00304438
		private void PrepareAndCreateGuideView(int guideViewIndex); // 0x00303BF8-0x00303EA4
	}

	internal interface IBoundingBox // TypeDefIndex: 3245
	{
		// Methods
		OrientedBoundingBox3D GetBoundingBox();
	}

	internal class ModelTargetImpl : DataSetObjectTargetImpl, InternalModelTarget // TypeDefIndex: 3246
	{
		// Fields
		private readonly IBoundingBox mBoundingBoxImpl; // 0x18
		private readonly GuideViewContainer mGuideViewContainer; // 0x1C
	
		// Constructors
		internal ModelTargetImpl(string name, int id, DataSet dataSet); // 0x003155F0-0x003157D4
	
		// Methods
		public OrientedBoundingBox3D GetBoundingBox(); // 0x003157D4-0x003158B4
		public int GetNumGuideViews(); // 0x003158B4-0x003158DC
		public GuideView GetGuideView(int index); // 0x003158DC-0x0031590C
		public bool SetActiveGuideViewIndex(int index); // 0x0031590C-0x0031593C
		public int GetActiveGuideViewIndex(); // 0x0031593C-0x00315964
		public void ClearGuideViews(); // 0x00315964-0x0031598C
	}

	public interface ModelTarget : ObjectTarget // TypeDefIndex: 3247
	{
		// Methods
		OrientedBoundingBox3D GetBoundingBox();
		int GetNumGuideViews();
		GuideView GetGuideView(int index);
		bool SetActiveGuideViewIndex(int index);
		int GetActiveGuideViewIndex();
	}

	internal interface InternalModelTarget : ModelTarget // TypeDefIndex: 3248
	{
		// Methods
		void ClearGuideViews();
	}

	public class ModelTargetBehaviour : DataSetTrackableBehaviour // TypeDefIndex: 3249
	{
		// Fields
		internal static readonly string GUIDE_VIEW_RENDERER_NAME; // 0x00
		private InternalModelTarget mModelTarget; // 0x3C
		private GameObject mGuideViewRenderer; // 0x40
		private PositionalDeviceTracker mDeviceTracker; // 0x44
		[HideInInspector] // 0x00189278-0x001892A8
		[SerializeField] // 0x00189278-0x001892A8
		private float mBaseSize; // 0x48
		[HideInInspector] // 0x001892A8-0x001892D8
		[SerializeField] // 0x001892A8-0x001892D8
		private float mAspectRatioXY; // 0x4C
		[HideInInspector] // 0x001892D8-0x00189308
		[SerializeField] // 0x001892D8-0x00189308
		private float mAspectRatioXZ; // 0x50
		[HideInInspector] // 0x00189308-0x00189338
		[SerializeField] // 0x00189308-0x00189338
		private bool mShowBoundingBox; // 0x54
		[HideInInspector] // 0x00189338-0x00189368
		[SerializeField] // 0x00189338-0x00189368
		private bool mOverrideSnappingPose; // 0x55
		[HideInInspector] // 0x00189368-0x00189398
		[SerializeField] // 0x00189368-0x00189398
		private Vector3 mBBoxMin; // 0x58
		[HideInInspector] // 0x00189398-0x001893C8
		[SerializeField] // 0x00189398-0x001893C8
		private Vector3 mBBoxMax; // 0x64
		[HideInInspector] // 0x001893C8-0x001893F8
		[SerializeField] // 0x001893C8-0x001893F8
		private Texture2D mPreviewImage; // 0x70
		[HideInInspector] // 0x001893F8-0x00189428
		[SerializeField] // 0x001893F8-0x00189428
		private float mLength; // 0x74
		[HideInInspector] // 0x00189428-0x00189458
		[SerializeField] // 0x00189428-0x00189458
		private float mWidth; // 0x78
		[HideInInspector] // 0x00189458-0x00189488
		[SerializeField] // 0x00189458-0x00189488
		private float mHeight; // 0x7C
		[HideInInspector] // 0x00189488-0x001894B8
		[SerializeField] // 0x00189488-0x001894B8
		public GameObject m3DGuideViewModel; // 0x80
		[HideInInspector] // 0x001894B8-0x001894E8
		[SerializeField] // 0x001894B8-0x001894E8
		public Texture2D m2DGuideViewImage; // 0x84
		[HideInInspector] // 0x001894E8-0x00189518
		[SerializeField] // 0x001894E8-0x00189518
		private GuideViewDisplayMode mGuideViewDisplayMode; // 0x88
		[HideInInspector] // 0x00189518-0x00189548
		[SerializeField] // 0x00189518-0x00189548
		public Material m2DGuideViewMaterial; // 0x8C
		[HideInInspector] // 0x00189548-0x00189578
		[SerializeField] // 0x00189548-0x00189578
		public Material m3DGuideViewMaterial; // 0x90
		[HideInInspector] // 0x00189578-0x001895A8
		[SerializeField] // 0x00189578-0x001895A8
		private string mSelectedGuideView; // 0x94
		private Vector3 mLastTransformScale; // 0x98
		private Vector3 mLastSize; // 0xA4
		private bool mDataSetIsActive; // 0xB0
		private ModelRecoBehaviour mModelRecoBehaviour; // 0xB4
	
		// Properties
		public ModelTarget ModelTarget { get; } // 0x00301F20-0x00301F28 
		public GuideViewDisplayMode GuideViewMode { get; set; } // 0x00304438-0x00304440 0x003122F4-0x00312330
	
		// Nested types
		public enum GuideViewDisplayMode // TypeDefIndex: 3250
		{
			NoGuideView = 0,
			GuideView2D = 1,
			GuideView3D = 2
		}
	
		// Constructors
		public ModelTargetBehaviour(); // 0x003121F0-0x003122F4
		static ModelTargetBehaviour(); // 0x00314608-0x0031467C
	
		// Methods
		protected override void Awake(); // 0x00312540-0x003128E8
		private void OnDestroy(); // 0x003128E8-0x00312AAC
		private void OnDrawGizmos(); // 0x00312AAC-0x00313028
		private void OnValidate(); // 0x00313028-0x00313604
		protected override bool CorrectScaleImpl(); // 0x003138B4-0x003138C8
		protected override bool SetScale(Vector3 scale); // 0x003138C8-0x00313924
		protected override void InternalUnregisterTrackable(); // 0x00313924-0x00313934
		public void SetBoundingBox(Vector3 minBBox, Vector3 maxBBox); // 0x00313934-0x00313958
		public Vector3 GetSize(); // 0x003137A4-0x003138B4
		public void SetLength(float length); // 0x00313604-0x0031368C
		public void SetWidth(float width); // 0x0031368C-0x00313718
		public void SetHeight(float height); // 0x00313718-0x003137A4
		internal override bool InitializeTarget(Trackable trackable, bool applyTargetScaleToBehaviour); // 0x00313958-0x003140B4
		internal override void OnTrackableEnabledChanged(bool trackableEnabled); // 0x003140B4-0x00314250
		private void OnVuforiaInitialized(); // 0x00314250-0x003142C8
		private void OnVuforiaStarted(); // 0x00314388-0x0031454C
		private void UpdateGuideViews(); // 0x00312330-0x00312540
		private static void InitPositionalDeviceTracker(); // 0x003142C8-0x00314388
		private static bool ShouldDeviceTrackerStartAutomatically(); // 0x0031454C-0x00314608
	}

	public class GLErrorHandler : VuforiaMonoBehaviour // TypeDefIndex: 3251
	{
		// Fields
		private static string mErrorText; // 0x00
		private static bool mErrorOccurred; // 0x04
		private const string WINDOW_TITLE = "Sample Error"; // Metadata: 0x0021BCC0
	
		// Constructors
		public GLErrorHandler(); // 0x002FE3C0-0x002FE3C8
		static GLErrorHandler(); // 0x002FE3C8-0x002FE44C
	
		// Methods
		public static void SetError(string errorText); // 0x002FDFC0-0x002FE06C
		private void OnGUI(); // 0x002FE06C-0x002FE1F4
		private void DrawWindowContent(int id); // 0x002FE1F4-0x002FE3C0
	}

	public class MaskOutBehaviour : VuforiaMonoBehaviour // TypeDefIndex: 3252
	{
		// Fields
		public Material maskMaterial; // 0x0C
	
		// Constructors
		public MaskOutBehaviour(); // 0x0030E84C-0x0030E854
	
		// Methods
		private void Start(); // 0x0030E674-0x0030E84C
	}

	internal struct AnchorData // TypeDefIndex: 3253
	{
		// Fields
		public int id; // 0x00
		internal int unused; // 0x04
	}

	public class SmartTerrainARController : ARController // TypeDefIndex: 3254
	{
		// Fields
		private static SmartTerrainARController mInstance; // 0x00
		private bool mAutoInitAndStartTracker; // 0x0C
		private State mState; // 0x10
	
		// Properties
		public static SmartTerrainARController Instance { get; } // 0x0020B32C-0x0020B3C0 
		public bool AutoInitAndStartTracker { set; } // 0x0020B3C8-0x0020B3D0
	
		// Nested types
		private enum State // TypeDefIndex: 3255
		{
			STOPPED = 0,
			PAUSED = 1,
			RUNNING = 2
		}
	
		// Constructors
		public SmartTerrainARController(); // 0x0020B3C0-0x0020B3C8
	
		// Methods
		[RuntimeInitializeOnLoadMethod] // 0x0018A734-0x0018A748
		public static void RegisterARController(); // 0x0020B3D0-0x0020B3E8
		protected override void Awake(); // 0x0020B3E8-0x0020B5EC
		protected override void OnEnable(); // 0x0020B5EC-0x0020B5FC
		protected override void OnApplicationPause(bool pause); // 0x0020B734-0x0020B770
		private void OnResume(); // 0x0020B78C-0x0020B79C
		private void OnPause(); // 0x0020B770-0x0020B78C
		protected override void OnDisable(); // 0x0020B8C8-0x0020B8E4
		protected override void OnDestroy(); // 0x0020B8E4-0x0020BA24
		private void OnVuforiaStarted(); // 0x0020BA24-0x0020BA34
		private void OnVuforiaInitialized(); // 0x0020BA34-0x0020BA44
		private void StartTracker(); // 0x0020B5FC-0x0020B734
		private void StopTracker(); // 0x0020B79C-0x0020B8C8
		private void InitTracker(); // 0x0020BA44-0x0020BBDC
	}

	internal enum StageType // TypeDefIndex: 3256
	{
		Plane = 0,
		MidAir = 1
	}

	[Serializable]
	public class ContentPlacedEvent : UnityEvent<GameObject> // TypeDefIndex: 3257
	{
		// Constructors
		public ContentPlacedEvent(); // 0x003E2A48-0x003E2AAC
	}

	public class ContentPositioningBehaviour : VuforiaMonoBehaviour // TypeDefIndex: 3258
	{
		// Fields
		[Tooltip] // 0x001895A8-0x00189608
		public AnchorBehaviour AnchorStage; // 0x0C
		[Tooltip] // 0x00189608-0x0018963C
		public bool DuplicateStage; // 0x10
		[Tooltip] // 0x0018963C-0x00189670
		public ContentPlacedEvent OnContentPlaced; // 0x14
		[HideInInspector] // 0x00189670-0x001896A0
		[SerializeField] // 0x00189670-0x001896A0
		private bool mDisplayAdvanced; // 0x18
		private const string ERROR_NO_STAGE = "There is no content to place at the anchor. Set the \"Anchor Stage\" field to the content you wish to place."; // Metadata: 0x0021BCE4
		private const string ERROR_TRACKER_NOT_INITIALIZED = "PositionalDeviceTracker has not been Initialized correctly, unable to create anchors"; // Metadata: 0x0021BD52
		private PositionalDeviceTracker mDeviceTracker; // 0x1C
		private ICollection<AnchorBehaviour> mInstantiatedAnchors; // 0x20
	
		// Nested types
		[CompilerGenerated] // 0x00189044-0x00189054
		private sealed class <>c__DisplayClass9_0 // TypeDefIndex: 3259
		{
			// Fields
			public ContentPositioningBehaviour <>4__this; // 0x08
			public Transform pose; // 0x0C
	
			// Constructors
			public <>c__DisplayClass9_0(); // 0x003E2D58-0x003E2D60
	
			// Methods
			internal Anchor <PositionContentAtMidAirAnchor>b__0(string anchor); // 0x003E3E1C-0x003E3EEC
		}
	
		[CompilerGenerated] // 0x00189054-0x00189064
		private sealed class <>c__DisplayClass10_0 // TypeDefIndex: 3260
		{
			// Fields
			public ContentPositioningBehaviour <>4__this; // 0x08
			public HitTestResult hitTestResult; // 0x0C
	
			// Constructors
			public <>c__DisplayClass10_0(); // 0x003E34EC-0x003E34F4
	
			// Methods
			internal Anchor <PositionContentAtPlaneAnchor>b__0(string anchor); // 0x003E3D50-0x003E3DAC
		}
	
		[CompilerGenerated] // 0x00189064-0x00189074
		private sealed class <>c__DisplayClass14_0 // TypeDefIndex: 3261
		{
			// Fields
			public Anchor anchor; // 0x08
	
			// Constructors
			public <>c__DisplayClass14_0(); // 0x003E399C-0x003E39A4
	
			// Methods
			internal bool <OnAnchorRemoved>b__0(AnchorBehaviour a); // 0x003E3DAC-0x003E3E1C
		}
	
		// Constructors
		public ContentPositioningBehaviour(); // 0x003E3CBC-0x003E3D50
	
		// Methods
		private void Awake(); // 0x003E2AAC-0x003E2BEC
		public void PositionContentAtMidAirAnchor(Transform pose); // 0x003E2BEC-0x003E2D58
		public void PositionContentAtPlaneAnchor(HitTestResult hitTestResult); // 0x003E3350-0x003E34EC
		private void CreateAnchorAndPlaceContent(Func<string, Anchor> anchorCreator, Vector3 position, Quaternion rotation); // 0x003E2D60-0x003E3350
		private void OnVuforiaInitialized(); // 0x003E34F4-0x003E34F8
		private void OnVuforiaStarted(); // 0x003E3580-0x003E3778
		private void OnAnchorRemoved(Anchor anchor); // 0x003E3778-0x003E399C
		private void OnDestroy(); // 0x003E39A4-0x003E3B50
		private static void InitPositionalDeviceTracker(); // 0x003E34F8-0x003E3580
		private static void StopAndDeinitPositionalDeviceTracker(); // 0x003E3B50-0x003E3CBC
	}

	internal class AnchorImpl : Anchor // TypeDefIndex: 3262
	{
		// Fields
		private readonly string mName; // 0x08
		private readonly int mId; // 0x0C
	
		// Properties
		public string Name { get; } // 0x003CFA5C-0x003CFA64 
		public int ID { get; } // 0x003CFA64-0x003CFA6C 
	
		// Constructors
		public AnchorImpl(int id, string name); // 0x003CFA6C-0x003CFA94
	}

	public class MidAirPositionerBehaviour : VuforiaMonoBehaviour // TypeDefIndex: 3263
	{
		// Fields
		[Tooltip] // 0x001896A0-0x0018970C
		public float DistanceToCamera; // 0x0C
		[Tooltip] // 0x0018970C-0x00189778
		public GameObject MidAirIndicator; // 0x10
		[Tooltip] // 0x00189778-0x001897DC
		public AnchorPositionConfirmedEvent OnAnchorPositionConfirmed; // 0x14
		private Camera mCamera; // 0x18
		[HideInInspector] // 0x001897DC-0x0018980C
		[SerializeField] // 0x001897DC-0x0018980C
		private bool mDisplayAdvanced; // 0x1C
	
		// Nested types
		[Serializable]
		public class AnchorPositionConfirmedEvent : UnityEvent<Transform> // TypeDefIndex: 3264
		{
			// Constructors
			public AnchorPositionConfirmedEvent(); // 0x0030FDCC-0x0030FE30
		}
	
		// Constructors
		public MidAirPositionerBehaviour(); // 0x0030FDBC-0x0030FDCC
	
		// Methods
		public void ConfirmAnchorPosition(Vector2 screenPosition); // 0x0030F908-0x0030F99C
		private bool IsPrefab(GameObject go); // 0x0030F99C-0x0030F9F0
		private void SetupIndicator(); // 0x0030F9F0-0x0030FD00
		private void OnDisable(); // 0x0030FD00-0x0030FDB8
		private void OnEnable(); // 0x0030FDB8-0x0030FDBC
	}

	public class AnchorInputListenerBehaviour : VuforiaMonoBehaviour // TypeDefIndex: 3265
	{
		// Fields
		public InputReceivedEvent OnInputReceivedEvent; // 0x0C
		[HideInInspector] // 0x0018980C-0x0018983C
		[SerializeField] // 0x0018980C-0x0018983C
		private bool mDisplayAdvanced; // 0x10
	
		// Nested types
		[Serializable]
		public class InputReceivedEvent : UnityEvent<Vector2> // TypeDefIndex: 3266
		{
			// Constructors
			public InputReceivedEvent(); // 0x003CFFBC-0x003D0020
		}
	
		// Constructors
		public AnchorInputListenerBehaviour(); // 0x003CFFB4-0x003CFFBC
	
		// Methods
		private void Update(); // 0x003CFA94-0x003CFB38
		private static bool TryGetMouseDownPosition(out Vector2 screenPosition); // 0x003CFD8C-0x003CFFB4
		private static bool TryGetScreenTappedPosition(out Vector2 screenPosition); // 0x003CFB38-0x003CFD8C
	}

	[Serializable]
	public class HitTestEvent : UnityEvent<HitTestResult> // TypeDefIndex: 3267
	{
		// Constructors
		public HitTestEvent(); // 0x003055E8-0x0030564C
	}

	public enum HitTestMode // TypeDefIndex: 3268
	{
		AUTOMATIC = 0,
		INTERACTIVE = 1
	}

	internal struct HitTestResultData // TypeDefIndex: 3269
	{
		// Fields
		public IntPtr HitTestResultPtr; // 0x00
		public float[] Orientation; // 0x04
		public float[] Position; // 0x08
		internal float Unused; // 0x0C
	}

	internal class PlaymodeSmartTerrainImpl : SmartTerrain // TypeDefIndex: 3270
	{
		// Fields
		private const int HIT_TEST_LAYER = 31; // Metadata: 0x0021BDB2
		private const string EMULATOR_PLANE_NAME = "Emulator Ground Plane"; // Metadata: 0x0021BDB6
		private readonly Vector3 mEmulatorPlaneSize; // 0x0C
		private GameObject mEmulatorGroundPlane; // 0x18
		private GameObject mGroundPlaneImageTarget; // 0x1C
	
		// Properties
		private GameObject GroundPlaneImageTarget { get; } // 0x00205828-0x00205848 
	
		// Nested types
		[Serializable]
		[CompilerGenerated] // 0x00189074-0x00189084
		private sealed class <>c // TypeDefIndex: 3271
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static Func<TrackableBehaviour, bool> <>9__7_0; // 0x04
			public static Func<ImageTargetBehaviour, bool> <>9__7_1; // 0x08
	
			// Constructors
			static <>c(); // 0x00206A40-0x00206AB4
			public <>c(); // 0x00206AB4-0x00206ABC
	
			// Methods
			internal bool <FindGroundPlaneImageTarget>b__7_0(TrackableBehaviour b); // 0x00206ABC-0x00206B50
			internal bool <FindGroundPlaneImageTarget>b__7_1(ImageTargetBehaviour b); // 0x00206B50-0x00206D2C
		}
	
		// Constructors
		public PlaymodeSmartTerrainImpl(); // 0x002069D8-0x00206A38
	
		// Methods
		private GameObject FindGroundPlaneImageTarget(); // 0x00205848-0x00205B68
		public override bool Start(); // 0x0020608C-0x002060C0
		private bool StartSmartTerrain(); // 0x002060C0-0x00206174
		private void CreateEmulatorGroundPlane(); // 0x00206174-0x00206494
		public override void Stop(); // 0x00206494-0x002065C0
		public override bool HitTest(Vector2 imageSpacePos, float defaultHeight, out HitTestResult hitTestResult); // 0x002065C0-0x002068B4
		public override bool HitTest(Vector2 imageSpacePos, float defaultHeight, out HitTestResult[] hitTestResults); // 0x002068B4-0x002069D8
	}

	public abstract class SmartTerrain : Tracker // TypeDefIndex: 3272
	{
		// Constructors
		protected SmartTerrain(); // 0x00206A38-0x00206A40
	
		// Methods
		public abstract bool HitTest(Vector2 imageSpacePos, float defaultHeight, out HitTestResult hitTestResult);
		public abstract bool HitTest(Vector2 imageSpacePos, float defaultHeight, out HitTestResult[] hitTestResults);
	}

	public class HitTestResult // TypeDefIndex: 3273
	{
		// Fields
		private readonly IntPtr mPtr; // 0x08
		private readonly Vector3 mPosition; // 0x0C
		private readonly Quaternion mOrientation; // 0x18
	
		// Properties
		public IntPtr HitTestPtr { get; } // 0x0030564C-0x00305654 
		public Vector3 Position { get; } // 0x00305654-0x00305668 
		public Quaternion Rotation { get; } // 0x00305668-0x00305678 
	
		// Constructors
		internal HitTestResult(Vector3 position, Quaternion orientation, IntPtr ptr); // 0x00305678-0x003056C8
	
		// Methods
		public override string ToString(); // 0x003056C8-0x0030578C
		public override bool Equals(object obj); // 0x0030578C-0x003058C8
		private bool Equals(HitTestResult other); // 0x003058C8-0x003059EC
		public override int GetHashCode(); // 0x003059EC-0x00305C64
	}

	public class PlaneFinderBehaviour : VuforiaMonoBehaviour // TypeDefIndex: 3274
	{
		// Fields
		[Tooltip] // 0x0018983C-0x00189870
		public GameObject PlaneIndicator; // 0x0C
		[Tooltip] // 0x00189870-0x001898D4
		public float Height; // 0x10
		[Tooltip] // 0x001898D4-0x00189928
		public HitTestEvent OnInteractiveHitTest; // 0x14
		[Tooltip] // 0x00189928-0x00189978
		public HitTestEvent OnAutomaticHitTest; // 0x18
		private SmartTerrain mSmartTerrain; // 0x1C
		private readonly Vector2 mViewportCenter; // 0x20
		private float mLastUpdate; // 0x28
		private bool mPreviouslyVisible; // 0x2C
		private const float MARKER_UPDATE_DELTA = 0f; // Metadata: 0x0021BDCF
		[HideInInspector] // 0x00189978-0x001899A8
		[SerializeField] // 0x00189978-0x001899A8
		private bool mDisplayAdvanced; // 0x2D
		[SerializeField] // 0x001899A8-0x001899B8
		private HitTestMode mHitTestMode; // 0x30
	
		// Properties
		public HitTestMode HitTestMode { get; set; } // 0x0031CAA4-0x0031CAAC 0x0031CAAC-0x0031CAB8
	
		// Nested types
		[CompilerGenerated] // 0x00189084-0x00189094
		private sealed class <>c__DisplayClass29_0 // TypeDefIndex: 3275
		{
			// Fields
			public bool isVisible; // 0x08
	
			// Constructors
			public <>c__DisplayClass29_0(); // 0x0031DF7C-0x0031DF84
	
			// Methods
			internal void <SetIndicatorVisible>b__0(Renderer c); // 0x0031DFE0-0x0031E01C
			internal void <SetIndicatorVisible>b__1(Collider c); // 0x0031E01C-0x0031E058
			internal void <SetIndicatorVisible>b__2(UnityEngine.Canvas c); // 0x0031E058-0x0031E094
		}
	
		// Constructors
		public PlaneFinderBehaviour(); // 0x0031DF84-0x0031DFE0
	
		// Methods
		public void PerformHitTest(Vector2 screenPosition); // 0x0031CAC0-0x0031CBC0
		private static Vector2 ConvertScreenToImageSpace(Vector2 screenPosition); // 0x0031CBC0-0x0031CEF4
		private void Awake(); // 0x0031CEF4-0x0031D134
		private static void OnVuforiaInitialized(); // 0x0031D134-0x0031D138
		private void OnVuforiaStarted(); // 0x0031D1C0-0x0031D1C4
		private void Update(); // 0x0031D304-0x0031D308
		private void OnDisable(); // 0x0031D308-0x0031D3C0
		private void OnEnable(); // 0x0031D3C0-0x0031D45C
		private void SetupPreviewObject(); // 0x0031D45C-0x0031D5D0
		private void OnStatusChanged(TrackableBehaviour.Status status); // 0x0031D6F0-0x0031D6F8
		private void UpdatePreview(); // 0x0031D6F8-0x0031D984
		private void OnHitTestModeChanged(); // 0x0031CAB8-0x0031CAC0
		private void UpdateSurfaceIndicatorVisibility(bool visible); // 0x0031D624-0x0031D6F0
		private bool IsSurfaceIndicatorPrefab(); // 0x0031D5D0-0x0031D624
		private void OnDestroy(); // 0x0031DBCC-0x0031DE10
		private void SetIndicatorVisible(bool isVisible); // 0x0031D984-0x0031DBCC
		private static void InitializeSmartTerrain(); // 0x0031D138-0x0031D1C0
		private static void StopAndDeinitializeSmartTerrain(); // 0x0031DE10-0x0031DF7C
		private void StartSmartTerrain(); // 0x0031D1C4-0x0031D304
	}

	internal class SmartTerrainImpl : SmartTerrain // TypeDefIndex: 3276
	{
		// Constructors
		public SmartTerrainImpl(); // 0x0020C96C-0x0020C974
	
		// Methods
		public override bool Start(); // 0x0020BBDC-0x0020BC14
		private bool StartSmartTerrain(); // 0x0020BC14-0x0020BE24
		public override void Stop(); // 0x0020BE24-0x0020C030
		public override bool HitTest(Vector2 imageSpacePos, float defaultHeight, out HitTestResult hitTestResult); // 0x0020C030-0x0020C0FC
		public override bool HitTest(Vector2 imageSpacePos, float defaultHeight, out HitTestResult[] hitTestResults); // 0x0020C0FC-0x0020C600
		private static HitTestResult ConvertToHitTestResult(HitTestResultData resultData); // 0x0020C600-0x0020C96C
	}

	public interface IHoloLensApiAbstraction // TypeDefIndex: 3277
	{
		// Methods
		void SetFocusPoint(Vector3 point, Vector3 normal);
	}

	internal class NullHoloLensApiAbstraction : IHoloLensApiAbstraction // TypeDefIndex: 3278
	{
		// Constructors
		public NullHoloLensApiAbstraction(); // 0x00318F00-0x00318F08
	
		// Methods
		public void SetFocusPoint(Vector3 point, Vector3 normal); // 0x00318EFC-0x00318F00
	}

	public interface ICustomViewerParameters : IViewerParameters // TypeDefIndex: 3279
	{
		// Methods
		void SetButtonType(ViewerButtonType val);
		void SetScreenToLensDistance(float val);
		void SetInterLensDistance(float val);
		void SetTrayAlignment(ViewerTrayAlignment val);
		void SetLensCentreToTrayDistance(float val);
		void ClearDistortionCoefficients();
		void AddDistortionCoefficient(float val);
		void SetFieldOfView(Vector4 val);
		void SetContainsMagnet(bool val);
	}

	public abstract class DeviceTracker : Tracker // TypeDefIndex: 3280
	{
		// Nested types
		public enum TRACKING_MODE // TypeDefIndex: 3281
		{
			ROTATIONAL = 0,
			POSITIONAL = 1
		}
	
		// Constructors
		protected DeviceTracker(); // 0x003F2138-0x003F2140
	
		// Methods
		internal virtual bool GetGlobalPoseOffset(out Vector3 positionalOffset, out Quaternion rotationalOffset); // 0x003F2050-0x003F2138
	}

	public class DeviceTrackerARController : ARController // TypeDefIndex: 3282
	{
		// Fields
		public static readonly Vector3 DEFAULT_HEAD_PIVOT; // 0x00
		public static readonly Vector3 DEFAULT_HANDHELD_PIVOT; // 0x0C
		private DeviceTracker.TRACKING_MODE mTrackingMode; // 0x0C
		private bool mAutoInitTracker; // 0x10
		private bool mAutoStartTracker; // 0x11
		private bool mPosePrediction; // 0x12
		private RotationalDeviceTracker.MODEL_CORRECTION_MODE mModelCorrectionMode; // 0x14
		private bool mModelTransformEnabled; // 0x18
		private Vector3 mModelTransform; // 0x1C
		private Action mTrackerStarted; // 0x28
		private bool mTrackerWasActiveBeforePause; // 0x2C
		private bool mTrackerWasActiveBeforeDisabling; // 0x2D
		private float mEmulatorPositionVelocity; // 0x30
		private VuforiaConfiguration.DeviceTrackerConfiguration mDeviceTrackerConfiguration; // 0x34
		private static DeviceTrackerARController mInstance; // 0x18
		private static object mPadlock; // 0x1C
	
		// Properties
		public static DeviceTrackerARController Instance { get; } // 0x003F21AC-0x003F23B8 
		internal DeviceTracker.TRACKING_MODE TrackingMode { get; } // 0x003F2434-0x003F243C 
		internal bool AutoInitTracker { get; } // 0x003F243C-0x003F2444 
		internal bool AutoStartTracker { get; } // 0x003F2444-0x003F244C 
		internal RotationalDeviceTracker.MODEL_CORRECTION_MODE ModelCorrectionMode { get; } // 0x003F244C-0x003F2454 
		internal bool ModelTransformEnabled { get; } // 0x003F2454-0x003F245C 
		internal Vector3 ModelTransform { get; } // 0x003F245C-0x003F2470 
	
		// Constructors
		private DeviceTrackerARController(); // 0x003F2140-0x003F21AC
		static DeviceTrackerARController(); // 0x003F4DBC-0x003F4EC8
	
		// Methods
		[RuntimeInitializeOnLoadMethod] // 0x0018A748-0x0018A75C
		public static void RegisterARController(); // 0x003F23B8-0x003F2434
		internal void SetDeviceTrackerConfiguration(VuforiaConfiguration.DeviceTrackerConfiguration config); // 0x003F2470-0x003F2478
		protected override void Awake(); // 0x003F25A4-0x003F27E8
		private void ConfigureDeviceTracker(VuforiaConfiguration.DeviceTrackerConfiguration config); // 0x003F2478-0x003F25A4
		protected override void OnEnable(); // 0x003F27E8-0x003F27F8
		protected override void OnDisable(); // 0x003F29CC-0x003F2B08
		protected override void OnDestroy(); // 0x003F2C58-0x003F2DF0
		protected override void Update(); // 0x003F2DF0-0x003F30B8
		public void RegisterTrackerStartedCallback(Action callback); // 0x003F3334-0x003F3504
		public void UnregisterTrackerStartedCallback(Action callback); // 0x003F3504-0x003F35F0
		public void RegisterBeforeDevicePoseUpdateCallback(Action callback); // 0x003F35F0-0x003F3710
		public void UnregisterBeforeDevicePoseUpdateCallback(Action callback); // 0x003F37FC-0x003F391C
		public void RegisterDevicePoseUpdatedCallback(Action callback); // 0x003F3A08-0x003F3B28
		public void UnregisterDevicePoseUpdatedCallback(Action callback); // 0x003F3C14-0x003F3D34
		public void RegisterDevicePoseStatusChangedCallback(Action<TrackableBehaviour.Status> callback); // 0x003F3E20-0x003F3F40
		public void UnregisterDevicePoseStatusChangedCallback(Action<TrackableBehaviour.Status> callback); // 0x003F402C-0x003F414C
		public void RegisterDevicePoseStatusChangedCallback(Action<TrackableBehaviour.Status, TrackableBehaviour.StatusInfo> callback); // 0x003F4238-0x003F4358
		public void UnregisterDevicePoseStatusChangedCallback(Action<TrackableBehaviour.Status, TrackableBehaviour.StatusInfo> callback); // 0x003F4444-0x003F4564
		private void StartDeviceTracker(); // 0x003F27F8-0x003F29CC
		private void StopDeviceTracker(); // 0x003F2B08-0x003F2C58
		private void InitDeviceTracker(); // 0x003F4650-0x003F4920
		private void ApplySettings(); // 0x003F4920-0x003F4A9C
		private void GetEmulatorRotation(ref Vector3 rotation); // 0x003F30B8-0x003F3334
		internal void OnVuforiaInitialized(); // 0x003F4A9C-0x003F4C3C
		internal void OnVuforiaStarted(); // 0x003F4C3C-0x003F4C4C
		internal void OnPause(bool pause); // 0x003F4C4C-0x003F4DBC
	}

	internal abstract class ObjectTargetImpl : TrackableImpl, ObjectTarget // TypeDefIndex: 3283
	{
		// Fields
		private ITargetSize mTargetSizeImpl; // 0x10
	
		// Properties
		internal ITargetSize TargetSize { get; set; } // 0x0031B954-0x0031B95C 0x0031B95C-0x0031B964
	
		// Constructors
		internal ObjectTargetImpl(string name, int id, ITargetSize sizeImpl); // 0x00312024-0x00312044
	
		// Methods
		public Vector3 GetSize(); // 0x0031B6A0-0x0031B780
		public float GetLargestSizeComponent(); // 0x0031B87C-0x0031B954
		public bool SetSize(Vector3 size); // 0x0031B780-0x0031B87C
	}

	internal interface ITargetSize // TypeDefIndex: 3284
	{
		// Methods
		Vector3 GetSize();
		float GetLargestSizeComponent();
		bool SetSize(Vector3 size);
	}

	internal class DataSetTargetSize : ITargetSize // TypeDefIndex: 3285
	{
		// Fields
		protected Vector3 mSize; // 0x08
		private string mName; // 0x14
		private readonly DataSet mDataSet; // 0x18
	
		// Constructors
		public DataSetTargetSize(string name, DataSet dataSet); // 0x003E3F10-0x003E415C
	
		// Methods
		public virtual Vector3 GetSize(); // 0x003EA858-0x003EA86C
		public virtual float GetLargestSizeComponent(); // 0x003EA86C-0x003EA910
		public virtual bool SetSize(Vector3 size); // 0x003E4274-0x003E44B4
	}

	internal class CustomDataSetTargetSize : DataSetTargetSize // TypeDefIndex: 3286
	{
		// Fields
		private bool mInvokeBeforeNativeCall; // 0x1C
		private Action<Vector3> mSetSizeAction; // 0x20
	
		// Constructors
		public CustomDataSetTargetSize(string name, DataSet dataSet, Action<Vector3> setSizeAction, bool invokeBeforeNativeCall); // 0x003E3EEC-0x003E3F10
	
		// Methods
		public override bool SetSize(Vector3 size); // 0x003E415C-0x003E4274
		internal void SetCachedSize(Vector3 size); // 0x003E44B4-0x003E44C0
	}

	internal class DisabledSetTargetSize : ITargetSize // TypeDefIndex: 3287
	{
		// Fields
		private Vector3 mSize; // 0x08
	
		// Constructors
		public DisabledSetTargetSize(Vector3 size); // 0x002F9FB0-0x002F9FE0
	
		// Methods
		public virtual Vector3 GetSize(); // 0x002F9FE0-0x002F9FF4
		public virtual float GetLargestSizeComponent(); // 0x002F9FF4-0x002FA098
		public bool SetSize(Vector3 size); // 0x002FA098-0x002FA128
	}

	public class TurnOffBehaviour : VuforiaMonoBehaviour // TypeDefIndex: 3288
	{
		// Constructors
		public TurnOffBehaviour(); // 0x0021FBC8-0x0021FBD0
	
		// Methods
		private void Awake(); // 0x0021FAB0-0x0021FBC4
		private void Start(); // 0x0021FBC4-0x0021FBC8
	}

	[Flags] // 0x00188E54-0x00188E64
	public enum FusionProviderType // TypeDefIndex: 3289
	{
		INVALID_OPERATION = -1,
		VUFORIA_VISION_ONLY = 1,
		VUFORIA_SENSOR_FUSION = 2,
		PLATFORM_SENSOR_FUSION = 4,
		ALL = 7
	}

	public static class GameObjectExtensionMethods // TypeDefIndex: 3290
	{
		// Extension methods
		public static GameObject PositionAt(this GameObject go, Vector3 position); // 0x002FE44C-0x002FE4C0
	}

	public enum PIXEL_FORMAT // TypeDefIndex: 3291
	{
		UNKNOWN_FORMAT = 0,
		RGB565 = 1,
		RGB888 = 2,
		GRAYSCALE = 4,
		RGBA8888 = 16,
		NV21 = 64,
		NV12 = 128,
		YV12 = 256,
		YUV420P = 512,
		YUYV = 1024
	}

	public class ImageDescription // TypeDefIndex: 3292
	{
		// Fields
		[CompilerGenerated] // 0x001899B8-0x001899C8
		private int <Width>k__BackingField; // 0x08
		[CompilerGenerated] // 0x001899C8-0x001899D8
		private int <Height>k__BackingField; // 0x0C
		[CompilerGenerated] // 0x001899D8-0x001899E8
		private int <Stride>k__BackingField; // 0x10
		[CompilerGenerated] // 0x001899E8-0x001899F8
		private int <BufferWidth>k__BackingField; // 0x14
		[CompilerGenerated] // 0x001899F8-0x00189A08
		private int <BufferHeight>k__BackingField; // 0x18
		[CompilerGenerated] // 0x00189A08-0x00189A18
		private PIXEL_FORMAT <PixelFormat>k__BackingField; // 0x1C
	
		// Properties
		public int Width { [CompilerGenerated] /* 0x0018A76C-0x0018A77C */ get; [CompilerGenerated] /* 0x0018A77C-0x0018A78C */ private set; } // 0x003069D8-0x003069E0 0x0030746C-0x00307474
		public int Height { [CompilerGenerated] /* 0x0018A78C-0x0018A79C */ get; [CompilerGenerated] /* 0x0018A79C-0x0018A7AC */ private set; } // 0x003069E0-0x003069E8 0x00307474-0x0030747C
		public int Stride { [CompilerGenerated] /* 0x0018A7AC-0x0018A7BC */ get; [CompilerGenerated] /* 0x0018A7BC-0x0018A7CC */ private set; } // 0x00306A0C-0x00306A14 0x0030747C-0x00307484
		public int BufferWidth { [CompilerGenerated] /* 0x0018A7CC-0x0018A7DC */ get; [CompilerGenerated] /* 0x0018A7DC-0x0018A7EC */ private set; } // 0x00306A38-0x00306A40 0x00307484-0x0030748C
		public int BufferHeight { [CompilerGenerated] /* 0x0018A7EC-0x0018A7FC */ get; [CompilerGenerated] /* 0x0018A7FC-0x0018A80C */ private set; } // 0x00306A64-0x00306A6C 0x0030748C-0x00307494
		public PIXEL_FORMAT PixelFormat { [CompilerGenerated] /* 0x0018A80C-0x0018A81C */ get; [CompilerGenerated] /* 0x0018A81C-0x0018A82C */ private set; } // 0x00306A6C-0x00306A74 0x00307494-0x0030749C
		public static ImageDescription Zero { get; } // 0x003068D4-0x00306958 
	
		// Constructors
		public ImageDescription(int width, int height, int stride, int bufferWidth, int bufferHeight, PIXEL_FORMAT format); // 0x00306808-0x00306850
		internal ImageDescription(TrackerData.ImageHeaderData src); // 0x0030749C-0x003074DC
	
		// Methods
		public override bool Equals(object obj); // 0x003074DC-0x00307618
		protected bool Equals(ImageDescription other); // 0x00307618-0x003076A4
		public override int GetHashCode(); // 0x003076A4-0x003076E8
	}

	internal static class PixelFormatExtensions // TypeDefIndex: 3293
	{
		// Extension methods
		public static TextureFormat ToTextureFormat(this PIXEL_FORMAT input); // 0x002FF78C-0x002FF7D0
		public static int GetChannelCount(this PIXEL_FORMAT input); // 0x003073C0-0x00307408
		public static int GetBitsPerPixel(this PIXEL_FORMAT input); // 0x00307408-0x0030746C
	}

	internal static class IEnumerableExtensionMethods // TypeDefIndex: 3294
	{
		// Extension methods
		public static void ForEach<T>(this IEnumerable<T> enumerable, Action<T> action);
		public static bool ContainsAll<T>(this IEnumerable<T> enumerable, IEnumerable<T> subset);
	}

	internal static class DelegateHelper // TypeDefIndex: 3295
	{
		// Methods
		private static void InvokeDelegate(Delegate action, params /* 0x0018AF98-0x0018AFA8 */ object[] args); // 0x003EFBE8-0x003EFDE8
	
		// Extension methods
		public static void InvokeWithExceptionHandling(this Action action); // 0x003EFB78-0x003EFBE8
		public static void InvokeWithExceptionHandling<T>(this Action<T> action, T arg);
		public static void InvokeWithExceptionHandling<T1, T2>(this Action<T1, T2> action, T1 arg1, T2 arg2);
	}

	internal class PlayModeEyewearUserCalibratorImpl : EyewearUserCalibrator // TypeDefIndex: 3296
	{
		// Constructors
		public PlayModeEyewearUserCalibratorImpl(); // 0x00205100-0x00205108
	
		// Methods
		public override bool init(int surfaceWidth, int surfaceHeight, int targetWidth, int targetHeight); // 0x00205110-0x00205118
		public override float getMinScaleHint(); // 0x00205118-0x00205120
		public override float getMaxScaleHint(); // 0x00205120-0x00205128
		public override bool isStereoStretched(); // 0x00205128-0x00205130
		public override bool getProjectionMatrix(EyewearDevice.EyewearCalibrationReading[] readings, out Matrix4x4 cameraToEyeMatrix, out Matrix4x4 projectionMatrix); // 0x00205130-0x00205208
	}

	internal class PlayModeEyewearCalibrationProfileManagerImpl : EyewearCalibrationProfileManager // TypeDefIndex: 3297
	{
		// Constructors
		public PlayModeEyewearCalibrationProfileManagerImpl(); // 0x00204E4C-0x00204E54
	
		// Methods
		public override int getMaxCount(); // 0x00204C98-0x00204CA0
		public override int getUsedCount(); // 0x00204CA0-0x00204CA8
		public override bool isProfileUsed(int profileID); // 0x00204CA8-0x00204CB0
		public override int getActiveProfile(); // 0x00204CB0-0x00204CB8
		public override bool setActiveProfile(int profileID); // 0x00204CB8-0x00204CC0
		public override Matrix4x4 getCameraToEyePose(int profileID, EyewearDevice.EyeID eyeID); // 0x00204CC0-0x00204D44
		public override Matrix4x4 getEyeProjection(int profileID, EyewearDevice.EyeID eyeID); // 0x00204D44-0x00204DC8
		public override bool setCameraToEyePose(int profileID, EyewearDevice.EyeID eyeID, Matrix4x4 projectionMatrix); // 0x00204DC8-0x00204DD0
		public override bool setEyeProjection(int profileID, EyewearDevice.EyeID eyeID, Matrix4x4 projectionMatrix); // 0x00204DD0-0x00204DD8
		public override string getProfileName(int profileID); // 0x00204DD8-0x00204E3C
		public override bool setProfileName(int profileID, string name); // 0x00204E3C-0x00204E44
		public override bool clearProfile(int profileID); // 0x00204E44-0x00204E4C
	}

	internal class PlayModeEyewearDevice : EyewearDevice // TypeDefIndex: 3298
	{
		// Fields
		private EyewearCalibrationProfileManager mProfileManager; // 0x08
		private EyewearUserCalibrator mCalibrator; // 0x0C
		private bool mDummyPredictiveTracking; // 0x10
	
		// Constructors
		public PlayModeEyewearDevice(); // 0x00205108-0x00205110
	
		// Methods
		public override bool IsSeeThru(); // 0x00204E54-0x00204E5C
		public override bool IsDualDisplay(); // 0x00204E5C-0x00204E64
		public override bool SetDisplayExtended(bool enable); // 0x00204E64-0x00204E6C
		public override bool IsDisplayExtended(); // 0x00204E6C-0x00204E74
		public override bool IsDisplayExtendedGLOnly(); // 0x00204E74-0x00204E7C
		public override ScreenOrientation GetScreenOrientation(); // 0x00204E7C-0x00204E84
		public override bool SetPredictiveTracking(bool enable); // 0x00204E84-0x00204E90
		public override bool IsPredictiveTrackingEnabled(); // 0x00204E90-0x00204E98
		public override EyewearCalibrationProfileManager GetCalibrationProfileManager(); // 0x00204E98-0x00204FCC
		public override EyewearUserCalibrator GetUserCalibrator(); // 0x00204FCC-0x00205100
	}

	internal class DedicatedEyewearDevice : EyewearDevice // TypeDefIndex: 3299
	{
		// Fields
		private EyewearCalibrationProfileManager mProfileManager; // 0x08
		private EyewearUserCalibrator mCalibrator; // 0x0C
	
		// Constructors
		public DedicatedEyewearDevice(); // 0x003EF764-0x003EF76C
	
		// Methods
		public override bool IsSeeThru(); // 0x003EECDC-0x003EEDEC
		public override bool IsDualDisplay(); // 0x003EEDEC-0x003EEEFC
		public override bool SetDisplayExtended(bool enable); // 0x003EEEFC-0x003EF014
		public override bool IsDisplayExtended(); // 0x003EF014-0x003EF124
		public override bool IsDisplayExtendedGLOnly(); // 0x003EF124-0x003EF234
		public override ScreenOrientation GetScreenOrientation(); // 0x003EF234-0x003EF35C
		public override bool SetPredictiveTracking(bool enable); // 0x003EF35C-0x003EF474
		public override bool IsPredictiveTrackingEnabled(); // 0x003EF474-0x003EF584
		public override EyewearCalibrationProfileManager GetCalibrationProfileManager(); // 0x003EF584-0x003EF674
		public override EyewearUserCalibrator GetUserCalibrator(); // 0x003EF674-0x003EF764
	}

	internal static class CameraConfigurationUtility // TypeDefIndex: 3300
	{
		// Fields
		private static readonly Vector4 MIN_CENTER; // 0x00
		private static readonly Vector4 MAX_CENTER; // 0x10
		private static readonly Vector4 MIN_BOTTOM; // 0x20
		private static readonly Vector4 MIN_TOP; // 0x30
		private static readonly Vector4 MIN_LEFT; // 0x40
		private static readonly Vector4 MIN_RIGHT; // 0x50
		private static readonly Vector4 MAX_BOTTOM; // 0x60
		private static readonly Vector4 MAX_TOP; // 0x70
		private static readonly Vector4 MAX_LEFT; // 0x80
		private static readonly Vector4 MAX_RIGHT; // 0x90
		private const float MAX_FAR_PLANE_FACTOR = 0.99f; // Metadata: 0x0021BE19
		private const float MIN_NEAR_PLANE_FACTOR = 1.01f; // Metadata: 0x0021BE1D
	
		// Constructors
		static CameraConfigurationUtility(); // 0x003DCA08-0x003DCC88
	
		// Methods
		public static void ExtractCameraClippingPlanes(Matrix4x4 inverseProjMatrix, out float near, out float far); // 0x003D5BD8-0x003D5EA0
		public static void ExtractCenterEyeRay(Matrix4x4 inverseProjMatrix, out Vector3 from, out Vector3 to); // 0x003D4A88-0x003D4DA0
		public static float ExtractVerticalCameraFoV(Matrix4x4 inverseProjMatrix); // 0x003D4498-0x003D4790
		public static float ExtractHorizontalCameraFoV(Matrix4x4 inverseProjMatrix); // 0x003D4790-0x003D4A88
		public static Matrix4x4 ScalePerspectiveProjectionMatrix(Matrix4x4 inputMatrix, float targetVerticalFoVDeg, float targetHorizontalFoVDeg); // 0x003D5EF4-0x003D62DC
		public static float CalculateHorizontalFoVFromViewPortAspect(float verticalFoVDeg, float viewportAspect); // 0x003D62DC-0x003D63A8
		public static float CalculateVerticalFoVFromViewPortAspect(float horizontalFoVDeg, float viewportAspect); // 0x003D63A8-0x003D6474
		public static void SetFovForCustomProjection(Camera camera); // 0x003D6474-0x003D65BC
		public static float GetMaxDepthForVideoBackground(Matrix4x4 inverseProjMatrix); // 0x003D4DA0-0x003D4FA4
		public static float GetMinDepthForVideoBackground(Matrix4x4 inverseProjMatrix); // 0x003D65BC-0x003D67BC
		public static void SetVRDeviceStereoOffset(Vector3 leftCameraPosition, Quaternion leftCameraRotation, Vector3 rightCameraPosition, Quaternion rightCameraRotation); // 0x003D67BC-0x003D6B24
		public static void SetVRDeviceStereoProjectionMatrix(int eyeId, Matrix4x4 projectionMatrix); // 0x003D6B24-0x003D6D84
		public static void SetVRDeviceSingleCullingMatrix(Matrix4x4 projectionMatrix, Matrix4x4 viewMatrix); // 0x003D6D84-0x003D70B0
		public static void ExtractViewFrustumCorners(Matrix4x4 inverseProjMatrix, out Vector3[] nearCorners, out Vector3[] farCorners); // 0x003D70B0-0x003D7C8C
		public static void ExtractFittingTwoViewFrustumCorners(Vector3[] firstNearCorners, Vector3[] firstFarCorners, Vector3[] secondNearCorners, Vector3[] secondFarCorners, out Vector3[] nearResultCorners, out Vector3[] farResultCorners); // 0x003D7C8C-0x003D90AC
		public static void ExtractCameraInfoFromViewFrustumCorners(Vector3[] nearCorners, Vector3[] farCorners, out Vector3 cameraPos, out Matrix4x4 projectionMatrix, out float nearPlane, out float farPlane); // 0x003D947C-0x003DA0F4
		public static void ExtractViewFrustumPlanesFromCamera(Camera camera, out Plane[] planes); // 0x003DACAC-0x003DAD9C
		public static void ExtractViewFrustumCornersFromViewFustumPlanes(Plane[] planes, out Vector3[] nearCorners, out Vector3[] farCorners); // 0x003D90AC-0x003D947C
		public static Vector3 Plane3Intersect(Plane p1, Plane p2, Plane p3); // 0x003DA758-0x003DAA6C
		public static void ExtractViewFrustumPlanesFromViewFustumCorners(Vector3[] nearCorners, Vector3[] farCorners, out Plane[] planes); // 0x003DA0F4-0x003DA758
		public static Matrix4x4 CreateSymmetricProjectionMatrix(float right, float top, float near, float far); // 0x003DAD9C-0x003DAFBC
		public static Matrix4x4 CreateAsymmetricProjectionMatrixWithSkew(float right, float top, float skewX, float skewY, float near, float far); // 0x003DAFBC-0x003DB1E0
		public static Matrix4x4 CreateAsymmetricProjectionMatrix(float left, float right, float bottom, float top, float near, float far); // 0x003DAA6C-0x003DACAC
		public static string GetMatrixString(Matrix4x4 m); // 0x003DB1E0-0x003DBB58
		private static Vector3 HomogenizedVec3(Vector4 vec4); // 0x003D5EA0-0x003D5EF4
		internal static void DrawViewFrustum(Vector3[] nearCorners, Vector3[] farCorners, bool overrideColor = false /* Metadata: 0x0021BE17 */, Color colorIn = default); // 0x003DBB58-0x003DC490
		internal static void DrawCross(Vector3 point, bool overrideColor = false /* Metadata: 0x0021BE18 */, Color colorIn = default); // 0x003DC490-0x003DC85C
		internal static string MatrixToString(Matrix4x4 mat); // 0x003DC85C-0x003DCA08
	}

	internal abstract class BaseCameraConfiguration : IProjectMatrixProvider // TypeDefIndex: 3301
	{
		// Fields
		protected CameraDevice.CameraDeviceMode mCameraDeviceMode; // 0x08
		protected Action mOnVideoBackgroundConfigChanged; // 0x0C
		private VideoBackgroundBehaviour mVideoBackgroundBehaviour; // 0x10
		protected Rect mVideoBackgroundViewportRect; // 0x14
		protected bool mRenderVideoBackground; // 0x24
		protected ScreenOrientation mProjectionOrientation; // 0x28
		protected BackgroundPlaneBehaviour mBackgroundPlaneBehaviour; // 0x2C
		private bool mDeviceModeChanged; // 0x30
		private bool mProjectionParamsChanged; // 0x31
	
		// Properties
		public virtual Rect VideoBackgroundViewportRect { get; } // 0x003D5670-0x003D5680 
		public virtual Matrix4x4 MainProjectionMatrix { get; } // 0x003D5988-0x003D5A0C 
	
		// Constructors
		protected BaseCameraConfiguration(BackgroundPlaneBehaviour bgpBehaviour, VideoBackgroundBehaviour vbBehaviour); // 0x003D5250-0x003D5284
	
		// Methods
		public void InitCameraDevice(CameraDevice.CameraDeviceMode cameraDeviceMode, Action onVideoBackgroundConfigChanged); // 0x003D5284-0x003D5290
		public virtual void Init(); // 0x003D5290-0x003D541C
		public virtual void ResetBackgroundPlane(bool disable); // 0x003D55B4-0x003D5670
		public void SetDeviceModeChanged(); // 0x003D5680-0x003D568C
		public void SetProjectionParamsChanged(); // 0x003D568C-0x003D5698
		protected abstract void ConfigureVideoBackground();
		protected abstract void UpdateProjection();
		protected void CheckUpdateRendering(bool rendererDirty); // 0x003D5698-0x003D57B8
		private void EnableObjectRenderer(GameObject go, bool enabled); // 0x003D54D0-0x003D55B4
		protected bool DeviceModeChanged(); // 0x003D596C-0x003D5974
		protected virtual bool ProjectionParamsChanged(); // 0x003D5980-0x003D5988
		protected bool IsVideoBackgroundEnabled(); // 0x003D541C-0x003D54D0
		public virtual void FinalizeRenderingSettings(); // 0x003D5A0C-0x003D5A10
		public virtual void Destroy(); // 0x003D5A10-0x003D5A14
	}

	public interface IWebCam // TypeDefIndex: 3302
	{
		// Properties
		bool DidUpdateThisFrame { get; }
		bool IsPlaying { get; }
		int ActualWidth { get; }
		int ActualHeight { get; }
		bool IsTextureSizeAvailable { get; }
		VuforiaRenderer.Vec2I ResampledTextureSize { get; }
	
		// Methods
		void StartCamera();
		void StopCamera();
		void ResetPlaying();
		Color32[] GetPixels32AndBufferFrame();
		void RenderFrame(int frameIndex);
		CameraDevice.VideoModeData GetVideoMode();
		bool IsRendererDirty();
		void Update();
	}

	internal interface IExtendedTrackingManager // TypeDefIndex: 3303
	{
		// Methods
		void ApplyTrackingState(TrackableBehaviour trackableBehaviour, TrackableBehaviour.Status vuforiaStatus);
		IEnumerable<VuforiaManager.TrackableIdPair> GetExtendedTrackedBehaviours();
	}

	internal class VuforiaExtendedTrackingManager : IExtendedTrackingManager // TypeDefIndex: 3304
	{
		// Constructors
		public VuforiaExtendedTrackingManager(); // 0x00513E00-0x00513E08
	
		// Methods
		public void ApplyTrackingState(TrackableBehaviour trackableBehaviour, TrackableBehaviour.Status vuforiaStatus); // 0x00513D68-0x00513DA4
		public IEnumerable<VuforiaManager.TrackableIdPair> GetExtendedTrackedBehaviours(); // 0x00513DA4-0x00513E00
	}

	internal static class Log // TypeDefIndex: 3305
	{
		// Methods
		[Conditional] // 0x0018A8AC-0x0018A8E0
		public static void Debug(string message); // 0x0030E4DC-0x0030E560
		[Conditional] // 0x0018A8E0-0x0018A914
		public static void Debug(string message, params /* 0x0018AFA8-0x0018AFB8 */ object[] parameters); // 0x0030E560-0x0030E564
		[Conditional] // 0x0018A914-0x0018A948
		public static void Warn(string message); // 0x0030E564-0x0030E5E8
		[Conditional] // 0x0018A948-0x0018A97C
		public static void Warn(string message, params /* 0x0018AFB8-0x0018AFC8 */ object[] parameters); // 0x0030E5E8-0x0030E5EC
		[Conditional] // 0x0018A97C-0x0018A9B0
		public static void Error(string message); // 0x0030E5EC-0x0030E670
		[Conditional] // 0x0018A9B0-0x0018A9E4
		public static void Error(string message, params /* 0x0018AFC8-0x0018AFD8 */ object[] parameters); // 0x0030E670-0x0030E674
	}

	internal class GlobalStrings // TypeDefIndex: 3306
	{
		// Fields
		internal const string DIGITAL_EYEWEAR_MT_WARNING_MESSAGE = "Model Targets are not supported by Digital Eyewear."; // Metadata: 0x0021BE21
	
		// Constructors
		public GlobalStrings(); // 0x002FE4C0-0x002FE4C8
	}

	internal static class TrackerData // TypeDefIndex: 3307
	{
		// Nested types
		internal struct PoseData // TypeDefIndex: 3308
		{
			// Fields
			internal Vector3 position; // 0x00
			internal Quaternion orientation; // 0x0C
			internal int unused; // 0x1C
		}
	
		internal struct TrackableResultData // TypeDefIndex: 3309
		{
			// Fields
			internal PoseData pose; // 0x00
			internal double timeStamp; // 0x20
			internal int statusInteger; // 0x28
			internal int id; // 0x2C
	
			// Properties
			internal TrackableBehaviour.Status status { get; set; } // 0x0021E7F0-0x0021E7F8 0x0021E7F8-0x0021E800
		}
	
		internal struct VirtualButtonData // TypeDefIndex: 3310
		{
			// Fields
			internal int id; // 0x00
			internal int isPressed; // 0x04
		}
	
		internal struct Obb2D // TypeDefIndex: 3311
		{
			// Fields
			internal Vector2 center; // 0x00
			internal Vector2 halfExtents; // 0x08
			internal float rotation; // 0x10
			internal int unused; // 0x14
		}
	
		internal struct Obb3D // TypeDefIndex: 3312
		{
			// Fields
			internal Vector3 center; // 0x00
			internal Vector3 halfExtents; // 0x0C
			internal float rotationZ; // 0x18
			internal int unused; // 0x1C
		}
	
		internal struct ImageHeaderData // TypeDefIndex: 3313
		{
			// Fields
			internal IntPtr data; // 0x00
			internal int width; // 0x04
			internal int height; // 0x08
			internal int stride; // 0x0C
			internal int bufferWidth; // 0x10
			internal int bufferHeight; // 0x14
			internal int format; // 0x18
			internal int reallocate; // 0x1C
			internal int updated; // 0x20
		}
	
		internal struct MeshData // TypeDefIndex: 3314
		{
			// Fields
			internal IntPtr positionsArray; // 0x00
			internal IntPtr normalsArray; // 0x04
			internal IntPtr texCoordsArray; // 0x08
			internal IntPtr triangleIdxArray; // 0x0C
			internal int numVertexValues; // 0x10
			internal int hasNormals; // 0x14
			internal int hasTexCoords; // 0x18
			internal int numTriangleIndices; // 0x1C
		}
	
		internal struct InstanceIdData // TypeDefIndex: 3315
		{
			// Fields
			public ulong numericValue; // 0x00
			public IntPtr buffer; // 0x08
			internal IntPtr reserved; // 0x0C
			public uint dataLength; // 0x10
			public int dataType; // 0x14
		}
	
		internal struct VuMarkTargetData // TypeDefIndex: 3316
		{
			// Fields
			public InstanceIdData instanceId; // 0x00
			public int id; // 0x18
			public int templateId; // 0x1C
			public Vector3 size; // 0x20
			public int unused; // 0x2C
		}
	
		internal struct VuMarkTargetResultData // TypeDefIndex: 3317
		{
			// Fields
			internal PoseData pose; // 0x00
			internal double timeStamp; // 0x20
			internal int statusInteger; // 0x28
			internal int targetID; // 0x2C
			internal int resultID; // 0x30
			internal int unused; // 0x34
	
			// Properties
			internal TrackableBehaviour.Status status { get; set; } // 0x0021E800-0x0021E810 0x0021E810-0x0021E818
		}
	
		internal struct IlluminationData // TypeDefIndex: 3318
		{
			// Fields
			internal float ambientIntensity; // 0x00
			internal float ambientColorTemperature; // 0x04
		}
	
		internal struct FrameState // TypeDefIndex: 3319
		{
			// Fields
			internal IntPtr trackableDataArray; // 0x00
			internal IntPtr vbDataArray; // 0x04
			internal IntPtr vuMarkResultArray; // 0x08
			internal IntPtr newVuMarkDataArray; // 0x0C
			internal IntPtr illuminationData; // 0x10
			internal int numTrackableResults; // 0x14
			internal int numVirtualButtonResults; // 0x18
			internal int frameIndex; // 0x1C
			internal int numVuMarkResults; // 0x20
			internal int numNewVuMarks; // 0x24
			internal int deviceTrackableId; // 0x28
			internal int deviceTrackableStatusInfo; // 0x2C
			internal Vector4 minCameraCalibration; // 0x30
		}
	
		internal struct StructList // TypeDefIndex: 3320
		{
			// Fields
			internal IntPtr arrayPtr; // 0x00
			internal int numResults; // 0x04
			internal int unused; // 0x08
		}
	}

	internal class InstanceIdImpl : InstanceId // TypeDefIndex: 3321
	{
		// Fields
		private InstanceIdType mDataType; // 0x08
		private byte[] mBuffer; // 0x0C
		private ulong mNumericValue; // 0x10
		private uint mDataLength; // 0x18
		private string mCachedStringValue; // 0x1C
	
		// Properties
		public InstanceIdType DataType { get; } // 0x0030D910-0x0030D918 
		public byte[] Buffer { get; } // 0x0030D918-0x0030D920 
		public string HexStringValue { get; } // 0x0030D920-0x0030DA70 
		public string StringValue { get; } // 0x0030DA70-0x0030DA78 
		public ulong NumericValue { get; } // 0x0030DA78-0x0030DA80 
	
		// Constructors
		public InstanceIdImpl(byte[] buffer, ulong numericValue, InstanceIdType dataType, uint dataLength); // 0x0030D7DC-0x0030D910
	
		// Methods
		public override string ToString(); // 0x0030DA80-0x0030DB38
	}

	internal class VuMarkTargetImpl : ObjectTargetImpl, VuMarkTarget // TypeDefIndex: 3322
	{
		// Fields
		private readonly VuMarkTemplateImpl mVuMarkTemplate; // 0x14
		private readonly InstanceIdImpl mInstanceId; // 0x18
		private Vuforia.Image mInstanceImage; // 0x1C
	
		// Properties
		public InstanceId InstanceId { get; } // 0x0050986C-0x00509874 
		public VuMarkTemplate Template { get; } // 0x00509874-0x0050987C 
		public Vuforia.Image InstanceImage { get; } // 0x0050987C-0x00509920 
	
		// Nested types
		internal class VuMarkSetTargetSize : DisabledSetTargetSize // TypeDefIndex: 3323
		{
			// Fields
			private VuMarkTemplate mTemplate; // 0x14
	
			// Constructors
			public VuMarkSetTargetSize(VuMarkTemplate template); // 0x005097C4-0x0050986C
	
			// Methods
			public override Vector3 GetSize(); // 0x00509DAC-0x00509E8C
			public override float GetLargestSizeComponent(); // 0x00509E8C-0x00509F64
		}
	
		// Constructors
		public VuMarkTargetImpl(int id, byte[] buffer, ulong numericValue, InstanceIdType dataType, uint dataLength, VuMarkTemplateImpl template); // 0x005096C4-0x005097C4
	
		// Methods
		private bool CallNativeGetInstanceImage(ref TrackerData.ImageHeaderData imageHeaderData); // 0x00509B44-0x00509DAC
		private void CreateInstanceImage(); // 0x00509AB0-0x00509B44
	}

	internal class VuMarkTemplateImpl : DataSetObjectTargetImpl, VuMarkTemplate // TypeDefIndex: 3324
	{
		// Fields
		private string mUserData; // 0x18
		private Vector2 mOrigin; // 0x1C
		private bool mTrackingFromRuntimeAppearance; // 0x24
	
		// Properties
		public string VuMarkUserData { get; } // 0x0050A068-0x0050A374 
		public bool TrackingFromRuntimeAppearance { get; set; } // 0x0050A374-0x0050A37C 0x0050A37C-0x0050A4E8
		public virtual Vector2 Origin { get; } // 0x0050A4E8-0x0050A4FC 
	
		// Constructors
		public VuMarkTemplateImpl(string name, int id, DataSet dataSet); // 0x00509F64-0x0050A068
	
		// Methods
		private void UpdateOrigin(Vector3 newSize); // 0x0050A4FC-0x0050A818
	}

	public class MixedRealityController // TypeDefIndex: 3325
	{
		// Fields
		private const string CLASS_NAME = "MIXED_REALITY_CONTROLLER"; // Metadata: 0x0021BE58
		private static MixedRealityController mInstance; // 0x00
		private VuforiaARController mVuforiaBehaviour; // 0x08
		private DigitalEyewearARController mDigitalEyewearBehaviour; // 0x0C
		private VideoBackgroundManager mVideoBackgroundManager; // 0x10
		private bool mViewerHasBeenSetExternally; // 0x14
		private IViewerParameters mViewerParameters; // 0x18
		private bool mFrameWorkHasBeenSetExternally; // 0x1C
		private DigitalEyewearARController.StereoFramework mStereoFramework; // 0x20
		private bool mObjectTrackerStopped; // 0x24
		private bool mAutoStopCameraIfNotRequired; // 0x25
	
		// Properties
		public static MixedRealityController Instance { get; } // 0x0030FE30-0x0030FFA8 
		public bool AutoStopCameraIfNotRequired { get; set; } // 0x00310694-0x0031069C 0x0031069C-0x003106A4
	
		// Nested types
		public enum Mode // TypeDefIndex: 3326
		{
			HANDHELD_AR = 0,
			ROTATIONAL_HANDHELD_AR = 1,
			HANDHELD_AR_DEVICETRACKER = 2,
			HANDHELD_VR = 3,
			VIEWER_AR = 4,
			ROTATIONAL_VIEWER_AR = 5,
			VIEWER_AR_DEVICETRACKER = 6,
			VIEWER_VR = 7
		}
	
		// Constructors
		public MixedRealityController(); // 0x0030FFA8-0x0030FFB8
		static MixedRealityController(); // 0x00311434-0x00311438
	
		// Methods
		public bool SetMode(Mode mode); // 0x0030FFB8-0x003101E4
		public void SetViewerParameters(IViewerParameters viewerParameters); // 0x00310674-0x00310684
		public void ConfigureForDifferentStereoFramework(DigitalEyewearARController.StereoFramework stereoFramework); // 0x00310684-0x00310694
		private void ResolveMembers(); // 0x003101E4-0x003104EC
		private void SetVideoBackgroundEnabled(bool enabled); // 0x003106A4-0x003106D8
		private void SetViewer(bool viewerPresent); // 0x003106D8-0x0031094C
		private void SetTargetFPS(bool isVR); // 0x0031094C-0x00310A44
		private void StopDeviceTracker(); // 0x00310A44-0x00310C08
		private void StartDeviceTracker(bool enablePosePrediction, RotationalDeviceTracker.MODEL_CORRECTION_MODE modelCorrectionMode); // 0x00310C08-0x0031108C
		private static void StartDeviceTracker(Tracker deviceTracker); // 0x0031108C-0x00311158
		private static void ConfigureRotationalDeviceTracker(RotationalDeviceTracker deviceTracker, bool enablePosePrediction, RotationalDeviceTracker.MODEL_CORRECTION_MODE mode); // 0x00311158-0x003111C0
		private static T InitializeDeviceTracker<T>()
			where T : DeviceTracker;
		private void StopCameraAndTrackersIfNotRequired(); // 0x003111C0-0x00311254
		private void StartCameraAndTrackersIfStopped(); // 0x00311254-0x00311434
		private void SetHandheldAR(); // 0x003104EC-0x00310528
		private void SetHandheldARDeviceTracker(); // 0x00310528-0x0031056C
		private void SetHandheldVR(); // 0x0031056C-0x003105B0
		private void SetViewerAR(); // 0x003105B0-0x003105EC
		private void SetViewerARDeviceTracker(); // 0x003105EC-0x00310630
		private void SetViewerVR(); // 0x00310630-0x00310674
	}

	public abstract class RotationalDeviceTracker : DeviceTracker // TypeDefIndex: 3327
	{
		// Nested types
		public enum MODEL_CORRECTION_MODE // TypeDefIndex: 3328
		{
			NONE = 0,
			HEAD = 1,
			HANDHELD = 2
		}
	
		// Constructors
		protected RotationalDeviceTracker(); // 0x00209B38-0x00209B40
	
		// Methods
		public abstract void RecenterPose();
		public abstract void RecenterPose(bool resetToCurrentPose);
		public abstract void SetPosePrediction(bool mode);
		public abstract bool GetPosePrediction();
		public abstract void SetModelCorrectionMode(MODEL_CORRECTION_MODE mode);
		public abstract MODEL_CORRECTION_MODE GetModelCorrectionMode();
		public abstract void SetModelCorrectionModeWithTransform(MODEL_CORRECTION_MODE mode, Vector3 transform);
		public abstract Vector3 GetModelCorrectionTransform();
	}

	internal class CustomViewerParameters : ViewerParameters, ICustomViewerParameters // TypeDefIndex: 3329
	{
		// Fields
		private float mVersion; // 0x0C
		private string mName; // 0x10
		private string mManufacturer; // 0x14
		private ViewerButtonType mButtonType; // 0x18
		private float mScreenToLensDistance; // 0x1C
		private ViewerTrayAlignment mTrayAlignment; // 0x20
		private bool mMagnet; // 0x24
	
		// Constructors
		public CustomViewerParameters(float version, string viewerName, string manufacturer); // 0x003E44C0-0x003E4600
	
		// Methods
		~CustomViewerParameters(); // 0x003E4600-0x003E4774
		public void SetButtonType(ViewerButtonType val); // 0x003E4774-0x003E489C
		public void SetScreenToLensDistance(float val); // 0x003E489C-0x003E49B8
		public void SetInterLensDistance(float val); // 0x003E49B8-0x003E4AD4
		public void SetTrayAlignment(ViewerTrayAlignment val); // 0x003E4AD4-0x003E4C04
		public void SetLensCentreToTrayDistance(float val); // 0x003E4C04-0x003E4D20
		public void ClearDistortionCoefficients(); // 0x003E4D20-0x003E4E34
		public void AddDistortionCoefficient(float val); // 0x003E4E34-0x003E4F50
		public void SetFieldOfView(Vector4 val); // 0x003E4F50-0x003E5154
		public void SetContainsMagnet(bool val); // 0x003E5154-0x003E5270
	}

	internal class DeviceTrackingManager // TypeDefIndex: 3330
	{
		// Fields
		private Vector3 mDeviceTrackerPositonOffset; // 0x08
		private Quaternion mDeviceTrackerRotationOffset; // 0x14
		private Action mBeforeDevicePoseUpdated; // 0x24
		private Action mAfterDevicePoseUpdated; // 0x28
		private Action<TrackableBehaviour.Status> mStatusChanged; // 0x2C
		private Action<TrackableBehaviour.Status, TrackableBehaviour.StatusInfo> mStatusOrInfoChanged; // 0x30
		private TrackableBehaviour.Status mCurrentTrackableStatus; // 0x34
		private TrackableBehaviour.StatusInfo mCurrentTrackableStatusInfo; // 0x38
	
		// Constructors
		public DeviceTrackingManager(); // 0x003F5950-0x003F5A4C
	
		// Methods
		public void OnDeviceTrackerStopped(); // 0x003F4EC8-0x003F4EDC
		public void RecenterPose(Transform cameraTransform, Vector3 modelCorrectionTransform); // 0x003F4EDC-0x003F51C8
		public void SetReferenceOffset(Vector3 positionalOffset, Quaternion rotationalOffset); // 0x003F51C8-0x003F5200
		public void GetReferenceOffset(out Vector3 positionalOffset, out Quaternion rotationalOffset); // 0x003F5200-0x003F5428
		public void UpdateStatus(TrackerData.TrackableResultData trackableData, TrackableBehaviour.StatusInfo deviceTrackableStatusInfo); // 0x003F5428-0x003F5570
		public void UpdateCamera(Transform cameraTransform, Vector3 positionalOffset, Quaternion rotationalOffset, TrackerData.TrackableResultData trackableData); // 0x003F5570-0x003F56BC
		public void RegisterTrackerStatusChangeCallback(Action<TrackableBehaviour.Status> callback); // 0x003F3F40-0x003F402C
		public void UnRegisterTrackerStatusChangeCallback(Action<TrackableBehaviour.Status> callback); // 0x003F414C-0x003F4238
		public void RegisterTrackerStatusChangeCallback(Action<TrackableBehaviour.Status, TrackableBehaviour.StatusInfo> callback); // 0x003F4358-0x003F4444
		public void UnRegisterTrackerStatusChangeCallback(Action<TrackableBehaviour.Status, TrackableBehaviour.StatusInfo> callback); // 0x003F4564-0x003F4650
		public void RegisterBeforeDevicePoseUpdateCallback(Action callback); // 0x003F3710-0x003F37FC
		public void UnregisterBeforeDevicePoseUpdateCallback(Action callback); // 0x003F391C-0x003F3A08
		public void RegisterDevicePoseUpdatedCallback(Action callback); // 0x003F3B28-0x003F3C14
		public void UnregisterDevicePoseUpdatedCallback(Action callback); // 0x003F3D34-0x003F3E20
		public static TrackerData.PoseData GetIdentityDevicePoseForScreenOrientation(ScreenOrientation screenOrientation); // 0x003F56BC-0x003F5950
	}

	public class FactorySetter : Attribute // TypeDefIndex: 3331
	{
		// Constructors
		public FactorySetter(); // 0x002FDFB8-0x002FDFC0
	}

	internal class EyewearCalibrationProfileManagerImpl : EyewearCalibrationProfileManager // TypeDefIndex: 3332
	{
		// Constructors
		public EyewearCalibrationProfileManagerImpl(); // 0x002FCED8-0x002FCEE0
	
		// Methods
		public override int getMaxCount(); // 0x002FB9A8-0x002FBAB0
		public override int getUsedCount(); // 0x002FBAB0-0x002FBBB8
		public override bool isProfileUsed(int profileID); // 0x002FBBB8-0x002FBCD0
		public override int getActiveProfile(); // 0x002FBCD0-0x002FBDD8
		public override bool setActiveProfile(int profileID); // 0x002FBDD8-0x002FBEF0
		public override Matrix4x4 getCameraToEyePose(int profileID, EyewearDevice.EyeID eyeID); // 0x002FBEF0-0x002FC228
		public override Matrix4x4 getEyeProjection(int profileID, EyewearDevice.EyeID eyeID); // 0x002FC228-0x002FC560
		public override bool setCameraToEyePose(int profileID, EyewearDevice.EyeID eyeID, Matrix4x4 projectionMatrix); // 0x002FC560-0x002FC83C
		public override bool setEyeProjection(int profileID, EyewearDevice.EyeID eyeID, Matrix4x4 projectionMatrix); // 0x002FC83C-0x002FCB18
		public override string getProfileName(int profileID); // 0x002FCB18-0x002FCC64
		public override bool setProfileName(int profileID, string name); // 0x002FCC64-0x002FCDC0
		public override bool clearProfile(int profileID); // 0x002FCDC0-0x002FCED8
	}

	public class BackgroundPlaneBehaviour : VuforiaMonoBehaviour // TypeDefIndex: 3333
	{
		// Fields
		private Vector2 mTextureSize; // 0x0C
		private Vector2 mImageSize; // 0x14
		private Transform mCameraTransform; // 0x1C
		private static float maxDisplacement; // 0x00
		private Mesh mMesh; // 0x20
		private float mStereoDepth; // 0x24
		private bool mProjectionMatrixSetExternally; // 0x28
		private Vector3 mBackgroundOffset; // 0x2C
		private VuforiaARController mVuforiaBehaviour; // 0x38
		private Action mBackgroundPlacedCallback; // 0x3C
		private VideoBackgroundConfigValidator mValidator; // 0x40
		private IProjectMatrixProvider mProjectMatrixProvider; // 0x44
		private int mNumFramesToUpdateVideoBg; // 0x48
		private ProjectionMatrixData mLastUsedProjectioMatrix; // 0x4C
		private int mNumDivisions; // 0xF0
		private HideExcessAreaUtility mHideExcessAreaUtility; // 0xF4
	
		// Properties
		public Material Material { get; set; } // 0x003D10B0-0x003D1134 0x003D1134-0x003D11C0
		public int NumDivisions { get; } // 0x003D11C0-0x003D11C8 
		internal HideExcessAreaUtility HideExcessUtility { get; } // 0x003D3680-0x003D3688 
		internal static Quaternion DefaultRotationTowardsCamera { get; } // 0x003D3688-0x003D3764 
		internal Vector3 LocalBackgroundOffset { get; set; } // 0x003D3774-0x003D3788 0x003D3788-0x003D3794
	
		// Nested types
		private struct ProjectionMatrixData // TypeDefIndex: 3334
		{
			// Fields
			public Matrix4x4 ProjectionMatrix; // 0x00
			public Matrix4x4 InverseMatrix; // 0x40
			public float HorizontalFoV; // 0x80
			public float VerticalFoV; // 0x84
			public Vector3 CenterEyeRayFrom; // 0x88
			public Vector3 CenterEyeRayTo; // 0x94
			public float MaxDepth; // 0xA0
		}
	
		// Constructors
		public BackgroundPlaneBehaviour(); // 0x003D4FD0-0x003D51E4
		static BackgroundPlaneBehaviour(); // 0x003D51E4-0x003D5250
	
		// Methods
		public void SetStereoDepth(float depth); // 0x003D11C8-0x003D136C
		private void Awake(); // 0x003D2720-0x003D27E4
		internal void InitializeFromConfig(VuforiaConfiguration.VideoBackgroundConfiguration videoBackgroundConfiguration); // 0x003D27E4-0x003D2818
		private void Start(); // 0x003D2818-0x003D29A4
		private void OnDestroy(); // 0x003D29A4-0x003D2AB4
		private void OnVuforiaStarted(); // 0x003D2AB4-0x003D2AF0
		private void OnTrackablesUpdated(); // 0x003D2AF0-0x003D2BA0
		private void UpdateVideoBackground(); // 0x003D2BA0-0x003D2DAC
		internal void SetBackgroundPlacedCallback(Action backgroundPlacedCallback); // 0x003D3764-0x003D376C
		internal void SetProjectionMatrixProvider(IProjectMatrixProvider provider); // 0x003D376C-0x003D3774
		private void CreateAndSetVideoMesh(); // 0x003D2DAC-0x003D3680
		private Quaternion CalculateAdjustmentTransformation(ScreenOrientation screenOrientation); // 0x003D3794-0x003D3AF4
		private void PositionVideoMesh(); // 0x003D19D0-0x003D2720
		private Vector2 ScaleFromFoVRad(float horizFoV, float vertFoV); // 0x003D43B0-0x003D4498
		private bool UpdateChangedProjectionMatrix(Matrix4x4 newMatrix); // 0x003D136C-0x003D19D0
		public void OnVideoBackgroundConfigChanged(Vector2 imageSize, Vector2 textureSize); // 0x003D4FA4-0x003D4FD0
	}

	internal class EyewearUserCalibratorImpl : EyewearUserCalibrator // TypeDefIndex: 3335
	{
		// Nested types
		private struct EyewearCalibrationReadingData // TypeDefIndex: 3336
		{
			// Fields
			public float[] pose; // 0x00
			public float scale; // 0x04
			public float centerX; // 0x08
			public float centerY; // 0x0C
			public int type; // 0x10
		}
	
		// Constructors
		public EyewearUserCalibratorImpl(); // 0x002FDDF4-0x002FDFB8
	
		// Methods
		public override bool init(int surfaceWidth, int surfaceHeight, int targetWidth, int targetHeight); // 0x002FD128-0x002FD26C
		public override float getMinScaleHint(); // 0x002FD26C-0x002FD374
		public override float getMaxScaleHint(); // 0x002FD374-0x002FD47C
		public override bool isStereoStretched(); // 0x002FD47C-0x002FD58C
		public override bool getProjectionMatrix(EyewearDevice.EyewearCalibrationReading[] readings, out Matrix4x4 cameraToEyeMatrix, out Matrix4x4 projectionMatrix); // 0x002FD58C-0x002FDDF4
	}

	internal class RotationalPlayModeDeviceTrackerImpl : RotationalDeviceTracker, IPlayModeDeviceTracker // TypeDefIndex: 3337
	{
		// Fields
		private readonly Vector3 mVectorZero; // 0x0C
		private Vector3 mModelCorrectionTransform; // 0x18
		private MODEL_CORRECTION_MODE mModelCorrection; // 0x24
		[CompilerGenerated] // 0x00189A18-0x00189A28
		private Vector3 <Rotation>k__BackingField; // 0x28
	
		// Properties
		public Vector3 Position { get; set; } // 0x0020B150-0x0020B164 0x0020B164-0x0020B168
		public Vector3 Rotation { [CompilerGenerated] /* 0x0018A9E4-0x0018A9F4 */ get; [CompilerGenerated] /* 0x0018A9F4-0x0018AA04 */ set; } // 0x0020AE1C-0x0020AE30 0x0020AE30-0x0020AE3C
	
		// Constructors
		public RotationalPlayModeDeviceTrackerImpl(); // 0x0020B280-0x0020B324
	
		// Methods
		public override bool Start(); // 0x0020AAB0-0x0020AAE4
		public override void Stop(); // 0x0020AC80-0x0020ADA8
		public override void RecenterPose(); // 0x0020ADA8-0x0020ADBC
		public override void RecenterPose(bool resetToCurrentPose); // 0x0020ADBC-0x0020AE1C
		public override void SetPosePrediction(bool mode); // 0x0020AE3C-0x0020AE40
		public override bool GetPosePrediction(); // 0x0020AE40-0x0020AE48
		public override void SetModelCorrectionMode(MODEL_CORRECTION_MODE mode); // 0x0020AE48-0x0020AF5C
		public override MODEL_CORRECTION_MODE GetModelCorrectionMode(); // 0x0020AF5C-0x0020AF64
		public override void SetModelCorrectionModeWithTransform(MODEL_CORRECTION_MODE mode, Vector3 transform); // 0x0020AF64-0x0020AF7C
		public override Vector3 GetModelCorrectionTransform(); // 0x0020AF7C-0x0020AFA8
		public TrackerData.TrackableResultData GetTrackable(); // 0x0020AFA8-0x0020B148
		public TrackableBehaviour.StatusInfo GetStatusInfo(); // 0x0020B148-0x0020B150
		internal override bool GetGlobalPoseOffset(out Vector3 positionalOffset, out Quaternion rotationalOffset); // 0x0020B168-0x0020B280
		private void RecenterPoseToCurrentAnchorPointPosition(); // 0x0020AAE4-0x0020AC80
	}

	internal class RotationalDeviceTrackerImpl : RotationalDeviceTracker // TypeDefIndex: 3338
	{
		// Constructors
		public RotationalDeviceTrackerImpl(); // 0x0020AAA8-0x0020AAB0
	
		// Methods
		public override bool Start(); // 0x00209B40-0x00209D70
		public override void Stop(); // 0x00209FD8-0x0020A248
		public override void RecenterPose(); // 0x0020A248-0x0020A250
		public override void RecenterPose(bool resetToCurrentPose); // 0x0020A250-0x0020A254
		public override void SetPosePrediction(bool mode); // 0x0020A254-0x0020A368
		public override bool GetPosePrediction(); // 0x0020A368-0x0020A47C
		public override void SetModelCorrectionMode(MODEL_CORRECTION_MODE mode); // 0x0020A47C-0x0020A590
		public override MODEL_CORRECTION_MODE GetModelCorrectionMode(); // 0x0020A590-0x0020A69C
		public override void SetModelCorrectionModeWithTransform(MODEL_CORRECTION_MODE mode, Vector3 transform); // 0x0020A69C-0x0020A8A4
		public override Vector3 GetModelCorrectionTransform(); // 0x0020A8A4-0x0020AAA8
		private void RecenterPoseToCurrentAnchorPointPosition(bool resetToCurrentPose); // 0x00209D70-0x00209FD8
	}

	internal interface IExcessAreaClipping // TypeDefIndex: 3339
	{
		// Methods
		void SetPlanesRenderingActive(bool activeflag);
		bool IsPlanesRenderingActive();
		void Start(GameObject gameObject);
		void OnDestroy();
		void Update(Vector2 halfScale);
	}

	internal static class IOSCamRecoveringHelper // TypeDefIndex: 3340
	{
		// Fields
		private const int CHECKED_FAILED_FRAME_MAX = 15; // Metadata: 0x0021BEA0
		private const int WAITED_FRAME_RECOVER_MAX = 20; // Metadata: 0x0021BEA4
		private const int RECOVER_ATTEMPT_MAX = 10; // Metadata: 0x0021BEA8
		private static bool sHasJustResumed; // 0x00
		private static bool sCheckFailedFrameAfterResume; // 0x01
		private static int sCheckedFailedFrameCounter; // 0x04
		private static bool sWaitToRecoverCameraRestart; // 0x08
		private static int sWaitedFrameRecoverCounter; // 0x0C
		private static int sRecoveryAttemptCounter; // 0x10
	
		// Constructors
		static IOSCamRecoveringHelper(); // 0x003062E4-0x00306380
	
		// Methods
		public static void SetHasJustResumed(); // 0x00305C64-0x00305D04
		public static bool TryToRecover(); // 0x00305D04-0x00306154
		public static void SetSuccessfullyRecovered(); // 0x00306154-0x003062E4
	}

	internal class MeshUtils // TypeDefIndex: 3341
	{
		// Constructors
		public MeshUtils(); // 0x0030F900-0x0030F908
	
		// Methods
		public static Mesh UpdateMesh(TrackerData.MeshData meshData, Mesh oldMesh, bool setNormalsUpwards, bool swapYZ); // 0x0030EC38-0x0030EFB0
		private static void CopyPositions(IntPtr positionsArray, int numVertexValues, Mesh mesh, bool swapYZ); // 0x0030EFB0-0x0030F22C
		private static void CopyNormals(IntPtr normalsArray, int numVertexValues, Mesh mesh, bool swapYZ); // 0x0030F440-0x0030F6BC
		private static void CopyTexCoords(IntPtr texCoordsArray, int numTexCoordValues, Mesh mesh); // 0x0030F6BC-0x0030F900
		private static void CopyTriangles(IntPtr triangleIdxArray, int numTriangleIndices, Mesh mesh); // 0x0030F22C-0x0030F440
	}

	internal class NullHideExcessAreaClipping : IExcessAreaClipping // TypeDefIndex: 3342
	{
		// Constructors
		public NullHideExcessAreaClipping(); // 0x00304C04-0x00304C0C
	
		// Methods
		public void SetPlanesRenderingActive(bool activeflag); // 0x00318EE4-0x00318EE8
		public bool IsPlanesRenderingActive(); // 0x00318EE8-0x00318EF0
		public void Start(GameObject gameObject); // 0x00318EF0-0x00318EF4
		public void OnDestroy(); // 0x00318EF4-0x00318EF8
		public void Update(Vector2 halfScale); // 0x00318EF8-0x00318EFC
	}

	internal interface ICameraConfiguration // TypeDefIndex: 3343
	{
		// Properties
		Rect VideoBackgroundViewportRect { get; }
	
		// Methods
		void Init();
		void InitCameraDevice(CameraDevice.CameraDeviceMode cameraDeviceMode, Action onVideoBackgroundConfigChanged);
		void CheckForSurfaceChanges();
		void OnAfterUpdateState(Transform trackingReference);
		bool IsStereo();
		void ResetBackgroundPlane(bool disable);
		void OnVideoBackGroundEnabledChanged();
		void SetDeviceModeChanged();
		void SetProjectionParamsChanged();
		Matrix4x4 GetVideoBackgroundProjectionMatrix(float near, float far, ScreenOrientation screenOrientation);
		void FinalizeRenderingSettings();
		void Destroy();
	}

	internal class DedicatedEyewearCameraConfiguration : BaseCameraConfiguration, ICameraConfiguration // TypeDefIndex: 3344
	{
		// Fields
		private const string CLASS_NAME = "EYEWEAR_CAMERA_CONFIGURAION"; // Metadata: 0x0021BEAC
		private const float TOLERANCE = 0.01f; // Metadata: 0x0021BECB
		private const float PLAY_MODE_DUMMY_FOV = 50f; // Metadata: 0x0021BECF
		private readonly Camera mCamera; // 0x34
		private int mScreenWidth; // 0x38
		private int mScreenHeight; // 0x3C
		private bool mNeedToCheckStereo; // 0x40
		private float mLastAppliedNearClipPlane; // 0x44
		private float mLastAppliedFarClipPlane; // 0x48
		private Matrix4x4 mLeftProjectionMatrix; // 0x4C
		private int mPlayModeEyeTextureWidth; // 0x8C
		private int mPlayModeEyeTextureHeight; // 0x90
		private EyewearDevice mEyewearDevice; // 0x94
		private readonly StereoProjMatrixStore mMatrixStore; // 0x98
		private readonly VRDeviceController mVrDeviceController; // 0x9C
	
		// Properties
		public override Matrix4x4 MainProjectionMatrix { get; } // 0x003EE5F8-0x003EE620 
	
		// Nested types
		private struct EyeData // TypeDefIndex: 3345
		{
			// Fields
			public Vector3 OffsetPosition; // 0x00
			public Quaternion OffsetRotation; // 0x0C
			public Matrix4x4 ProjectionMatrix; // 0x1C
		}
	
		// Constructors
		public DedicatedEyewearCameraConfiguration(Camera camera, VRDeviceController vrDeviceController); // 0x003EB938-0x003EBB50
	
		// Methods
		public override void Init(); // 0x003EBB50-0x003EC204
		protected override void ConfigureVideoBackground(); // 0x003EC33C-0x003EC69C
		public void CheckForSurfaceChanges(); // 0x003EC7A8-0x003EC9A8
		public void OnAfterUpdateState(Transform trackingReference); // 0x003EC9A8-0x003EC9AC
		public bool IsStereo(); // 0x003EC9AC-0x003EC9B4
		protected override bool ProjectionParamsChanged(); // 0x003EC9B4-0x003ECB00
		protected override void UpdateProjection(); // 0x003ECB00-0x003EDCD4
		private static EyeData GetProjectionAndOffset(Matrix4x4 projMatrixGL, Matrix4x4 eyeAdjustmentMatrixGL); // 0x003EE354-0x003EE5F4
		public void OnVideoBackGroundEnabledChanged(); // 0x003EE5F4-0x003EE5F8
		public Matrix4x4 GetVideoBackgroundProjectionMatrix(float near, float far, ScreenOrientation screenOrientation); // 0x003EE620-0x003EE7A4
		public override void Destroy(); // 0x003EEAFC-0x003EECDC
		private void ResetStereoProjectionMatrices(); // 0x003EC204-0x003EC33C
	}

	internal class NullCameraConfiguration : ICameraConfiguration // TypeDefIndex: 3346
	{
		// Fields
		private ScreenOrientation mProjectionOrientation; // 0x08
	
		// Properties
		public Rect VideoBackgroundViewportRect { get; } // 0x00318E30-0x00318E3C 
		public int EyewearUserCalibrationProfileId { get; set; } // 0x00318E3C-0x00318E44 0x00318E44-0x00318E48
	
		// Constructors
		public NullCameraConfiguration(); // 0x00318EDC-0x00318EE4
	
		// Methods
		public void Init(); // 0x00318D84-0x00318D88
		public void InitCameraDevice(CameraDevice.CameraDeviceMode cameraDeviceMode, Action onVideoBackgroundConfigChanged); // 0x00318D88-0x00318D8C
		public void UpdatePlayModeParameters(WebCamARController webCamBehaviour, float cameraOffset); // 0x00318D8C-0x00318D90
		public void CheckForSurfaceChanges(); // 0x00318D90-0x00318E1C
		public void OnAfterUpdateState(Transform trackingReference); // 0x00318E1C-0x00318E20
		public bool IsStereo(); // 0x00318E20-0x00318E28
		public void ResetBackgroundPlane(bool disable); // 0x00318E28-0x00318E2C
		public void OnVideoBackGroundEnabledChanged(); // 0x00318E2C-0x00318E30
		public void SetDeviceModeChanged(); // 0x00318E48-0x00318E4C
		public void SetProjectionParamsChanged(); // 0x00318E4C-0x00318E50
		public Matrix4x4 GetVideoBackgroundProjectionMatrix(float near, float far, ScreenOrientation screenOrientation); // 0x00318E50-0x00318ED4
		public void FinalizeRenderingSettings(); // 0x00318ED4-0x00318ED8
		public void Destroy(); // 0x00318ED8-0x00318EDC
	}

	internal class MonoCameraConfiguration : BaseCameraConfiguration, ICameraConfiguration // TypeDefIndex: 3347
	{
		// Fields
		private const float TOLERANCE = 0.01f; // Metadata: 0x0021BED3
		private readonly Camera mPrimaryCamera; // 0x34
		private int mCameraViewPortWidth; // 0x38
		private int mCameraViewPortHeight; // 0x3C
		private float mLastAppliedNearClipPlane; // 0x40
		private float mLastAppliedFarClipPlane; // 0x44
		private float mLastAppliedFoV; // 0x48
		private readonly VRDeviceController mVrDeviceController; // 0x4C
	
		// Properties
		public override Matrix4x4 MainProjectionMatrix { get; } // 0x003161F8-0x0031622C 
	
		// Constructors
		public MonoCameraConfiguration(Camera leftCamera, VRDeviceController vrDeviceController); // 0x0031598C-0x00315A70
	
		// Methods
		public override void Init(); // 0x00315A70-0x00315BB0
		protected override void ConfigureVideoBackground(); // 0x00315BB0-0x00315FC4
		public void CheckForSurfaceChanges(); // 0x00315FC4-0x00316110
		public void OnAfterUpdateState(Transform trackingReference); // 0x00316110-0x00316114
		public bool IsStereo(); // 0x00316114-0x0031611C
		public void OnVideoBackGroundEnabledChanged(); // 0x0031611C-0x00316120
		public Matrix4x4 GetVideoBackgroundProjectionMatrix(float near, float far, ScreenOrientation screenOrientation); // 0x00316120-0x003161F8
		protected override void UpdateProjection(); // 0x0031622C-0x003166BC
		protected override bool ProjectionParamsChanged(); // 0x003166BC-0x0031687C
	}

	internal static class UnityCameraExtensions // TypeDefIndex: 3348
	{
		// Extension methods
		internal static int GetPixelHeightInt(this Camera camera); // 0x0022006C-0x002200D4
		internal static int GetPixelWidthInt(this Camera camera); // 0x002200D4-0x0022013C
	}

	internal enum View // TypeDefIndex: 3349
	{
		VIEW_SINGULAR = 0,
		VIEW_LEFTEYE = 1,
		VIEW_RIGHTEYE = 2,
		VIEW_POSTPROCESS = 3,
		VIEW_COUNT = 4
	}

	internal class ViewerParameters : IViewerParameters // TypeDefIndex: 3350
	{
		// Fields
		protected IntPtr mNativeVP; // 0x08
	
		// Properties
		internal IntPtr NativePtr { get; } // 0x00228780-0x00228788 
	
		// Constructors
		internal ViewerParameters(IntPtr nativePtr); // 0x00228428-0x002284E0
	
		// Methods
		~ViewerParameters(); // 0x002284E0-0x00228668
		public float GetVersion(); // 0x00228668-0x00228780
		public string GetName(); // 0x00228788-0x002288DC
		public string GetManufacturer(); // 0x002288DC-0x00228A2C
		public ViewerButtonType GetButtonType(); // 0x00228A2C-0x00228B94
		public ViewerTrayAlignment GetTrayAlignment(); // 0x00228B94-0x00228CF8
		public float GetScreenToLensDistance(); // 0x00228CF8-0x00228E10
		public float GetInterLensDistance(); // 0x00228E10-0x00228F24
		public float GetLensCentreToTrayDistance(); // 0x00228F24-0x0022903C
		public int GetNumDistortionCoefficients(); // 0x0022903C-0x00229150
		public float GetDistortionCoefficient(int idx); // 0x00229150-0x0022926C
		public Vector4 GetFieldOfView(); // 0x0022926C-0x00229574
		public bool ContainsMagnet(); // 0x00229574-0x00229690
	}

	internal class ViewerParametersList : IViewerParametersList // TypeDefIndex: 3351
	{
		// Fields
		private IntPtr mNativeVPL; // 0x08
		private static ViewerParametersList mListForAuthoringTools; // 0x00
	
		// Properties
		internal static ViewerParametersList ListForAuthoringTools { get; } // 0x00229690-0x002298E8 
	
		// Constructors
		internal ViewerParametersList(IntPtr intPtr); // 0x002298E8-0x00229908
	
		// Methods
		public void SetSDKFilter(string filter); // 0x00229908-0x00229A28
		public int Size(); // 0x00229A28-0x00229B3C
		public IViewerParameters Get(int idx); // 0x00229B3C-0x00229C9C
		public IViewerParameters Get(string name, string manufacturer); // 0x00229C9C-0x00229E0C
		public IEnumerable<IViewerParameters> GetAllViewers(); // 0x00229E0C-0x0022A184
	}

	public interface IViewerParametersList // TypeDefIndex: 3352
	{
		// Methods
		int Size();
		IViewerParameters Get(int idx);
		IViewerParameters Get(string name, string manufacturer);
		void SetSDKFilter(string filter);
		IEnumerable<IViewerParameters> GetAllViewers();
	}

	public class ObjectTargetBehaviour : DataSetTrackableBehaviour // TypeDefIndex: 3353
	{
		// Fields
		private ObjectTarget mObjectTarget; // 0x3C
		[HideInInspector] // 0x00189A28-0x00189A58
		[SerializeField] // 0x00189A28-0x00189A58
		private float mAspectRatioXY; // 0x40
		[HideInInspector] // 0x00189A58-0x00189A88
		[SerializeField] // 0x00189A58-0x00189A88
		private float mAspectRatioXZ; // 0x44
		[HideInInspector] // 0x00189A88-0x00189AB8
		[SerializeField] // 0x00189A88-0x00189AB8
		private bool mShowBoundingBox; // 0x48
		[HideInInspector] // 0x00189AB8-0x00189AE8
		[SerializeField] // 0x00189AB8-0x00189AE8
		private Vector3 mBBoxMin; // 0x4C
		[HideInInspector] // 0x00189AE8-0x00189B18
		[SerializeField] // 0x00189AE8-0x00189B18
		private Vector3 mBBoxMax; // 0x58
		[HideInInspector] // 0x00189B18-0x00189B48
		[SerializeField] // 0x00189B18-0x00189B48
		private Texture2D mPreviewImage; // 0x64
		[HideInInspector] // 0x00189B48-0x00189B78
		[SerializeField] // 0x00189B48-0x00189B78
		private float mLength; // 0x68
		[HideInInspector] // 0x00189B78-0x00189BA8
		[SerializeField] // 0x00189B78-0x00189BA8
		private float mWidth; // 0x6C
		[HideInInspector] // 0x00189BA8-0x00189BD8
		[SerializeField] // 0x00189BA8-0x00189BD8
		private float mHeight; // 0x70
		private float mLastTransformScale; // 0x74
		private Vector3 mLastSize; // 0x78
	
		// Properties
		public ObjectTarget ObjectTarget { get; } // 0x0031A6B8-0x0031A6C0 
	
		// Constructors
		public ObjectTargetBehaviour(); // 0x0031A640-0x0031A6B8
	
		// Methods
		private void OnDrawGizmos(); // 0x0031A6C0-0x0031AD78
		protected override bool CorrectScaleImpl(); // 0x0031AD78-0x0031ADAC
		protected override void InternalUnregisterTrackable(); // 0x0031B060-0x0031B070
		public void SetBoundingBox(Vector3 minBBox, Vector3 maxBBox); // 0x0031B070-0x0031B094
		public Vector3 GetSize(); // 0x0031B094-0x0031B228
		public void SetLength(float length); // 0x0031B228-0x0031B2A8
		public void SetWidth(float width); // 0x0031B2A8-0x0031B330
		public void SetHeight(float height); // 0x0031B330-0x0031B3B8
		internal override bool InitializeTarget(Trackable trackable, bool applyTargetScaleToBehaviour); // 0x0031B3B8-0x0031B6A0
		private void OnValidate(); // 0x0031ADAC-0x0031B060
	}

	public class CameraDevice // TypeDefIndex: 3354
	{
		// Fields
		private static CameraDevice mInstance; // 0x00
		private Dictionary<PIXEL_FORMAT, Vuforia.Image> mCameraImages; // 0x08
		private List<PIXEL_FORMAT> mForcedCameraFormats; // 0x0C
		private static IWebCam mWebCam; // 0x04
		private bool mCameraReady; // 0x10
		private bool mIsDirty; // 0x11
		private CameraDeviceMode mCameraDeviceMode; // 0x14
		private VideoModeData mVideoModeData; // 0x18
		private bool mVideoModeDataNeedsUpdate; // 0x28
		private bool mHasCameraDeviceModeBeenSet; // 0x29
		private bool mCameraActive; // 0x2A
		private bool mIsCameraMocked; // 0x2B
	
		// Properties
		public static CameraDevice Instance { get; } // 0x003D3E58-0x003D4078 
		internal IWebCam WebCam { get; } // 0x003DE47C-0x003DE508 
		internal bool CameraReady { get; } // 0x003D57B8-0x003D596C 
	
		// Nested types
		public enum CameraDeviceMode // TypeDefIndex: 3355
		{
			MODE_OPTIMIZE_QUALITY = -3,
			MODE_OPTIMIZE_SPEED = -2,
			MODE_DEFAULT = -1
		}
	
		public enum FocusMode // TypeDefIndex: 3356
		{
			FOCUS_MODE_NORMAL = 0,
			FOCUS_MODE_TRIGGERAUTO = 1,
			FOCUS_MODE_CONTINUOUSAUTO = 2,
			FOCUS_MODE_INFINITY = 3,
			FOCUS_MODE_MACRO = 4
		}
	
		public struct VideoModeData // TypeDefIndex: 3357
		{
			// Fields
			public int width; // 0x00
			public int height; // 0x04
			public float frameRate; // 0x08
			public int format; // 0x0C
		}
	
		public struct CameraField // TypeDefIndex: 3358
		{
			// Fields
			public DataType Type; // 0x00
			public string Key; // 0x04
	
			// Nested types
			public enum DataType // TypeDefIndex: 3359
			{
				TypeString = 0,
				TypeInt64 = 1,
				TypeFloat = 2,
				TypeBool = 3,
				TypeInt64Range = 4,
				TypeUnknown = 5
			}
		}
	
		public struct Int64Range // TypeDefIndex: 3360
		{
			// Fields
			public long fromInt; // 0x00
			public long toInt; // 0x08
		}
	
		private struct CameraFieldData // TypeDefIndex: 3361
		{
			// Fields
			public string KeyValue; // 0x00
			public int DataType; // 0x04
			public int Unused; // 0x08
		}
	
		// Constructors
		private CameraDevice(); // 0x003DCC88-0x003DCD58
		static CameraDevice(); // 0x003E0754-0x003E0840
	
		// Methods
		public bool Init(); // 0x003DCD58-0x003DCE34
		public bool Deinit(); // 0x003DD3F4-0x003DD420
		public bool Start(); // 0x003DD798-0x003DD8E0
		public bool Stop(); // 0x003DDD5C-0x003DDE10
		public bool IsActive(); // 0x003DE134-0x003DE13C
		public VideoModeData GetVideoMode(); // 0x003DE13C-0x003DE19C
		public VideoModeData GetVideoMode(CameraDeviceMode mode); // 0x003DE19C-0x003DE47C
		public bool SelectVideoMode(CameraDeviceMode mode); // 0x003DE508-0x003DE634
		public bool GetSelectedVideoMode(out CameraDeviceMode mode); // 0x003DE634-0x003DE644
		public bool SetFlashTorchMode(bool on); // 0x003DE644-0x003DE814
		public bool SetFocusMode(FocusMode mode); // 0x003DE814-0x003DE9D0
		public bool SetFrameFormat(PIXEL_FORMAT format, bool enabled); // 0x003DE9D0-0x003DED74
		internal bool EnableNativeFrameFormat(PIXEL_FORMAT format, bool enabled); // 0x003DED74-0x003DEEE4
		public Vuforia.Image GetCameraImage(PIXEL_FORMAT format); // 0x003DEEE4-0x003DF020
		public Vector2 GetCameraFieldOfViewRads(); // 0x003D4078-0x003D43B0
		public IEnumerable<CameraField> GetCameraFields(); // 0x003DF020-0x003DF424
		public bool SetField(string key, string value); // 0x003DF424-0x003DF544
		public bool SetField(string key, long value); // 0x003DF544-0x003DF678
		public bool SetField(string key, float value); // 0x003DF678-0x003DF798
		public bool SetField(string key, bool value); // 0x003DF798-0x003DF8B8
		public bool SetField(string key, Int64Range value); // 0x003DF8B8-0x003DFA0C
		public bool GetField(string key, out string value); // 0x003DFA0C-0x003DFB90
		public bool GetField(string key, out long value); // 0x003DFB90-0x003DFDD8
		public bool GetField(string key, out float value); // 0x003DFDD8-0x003E0084
		public bool GetField(string key, out bool value); // 0x003E0084-0x003E02CC
		public bool GetField(string key, out Int64Range value); // 0x003E02CC-0x003E057C
		internal void SetMockedWebcam(IWebCam webCam); // 0x003E057C-0x003E0618
		internal Dictionary<PIXEL_FORMAT, Vuforia.Image> GetAllImages(); // 0x003E0618-0x003E0620
		internal bool IsDirty(); // 0x003E0620-0x003E0754
		internal void ResetDirtyFlag(); // 0x003D5974-0x003D5980
		private void ForceFrameFormat(PIXEL_FORMAT format, bool enabled); // 0x003DDC04-0x003DDD5C
		private int InitCameraDevice(); // 0x003DCE34-0x003DD3F4
		private int DeinitCameraDevice(); // 0x003DD420-0x003DD798
		private int StartCameraDevice(); // 0x003DD8E0-0x003DDC04
		private int StopCameraDevice(); // 0x003DDE10-0x003DE134
	}

	public class CloudRecoBehaviour : ObjectRecoBehaviour // TypeDefIndex: 3362
	{
		// Fields
		public string AccessKey; // 0x20
		public string SecretKey; // 0x24
	
		// Properties
		public bool CloudRecoEnabled { get; set; } // 0x003E0840-0x003E0848 0x003E0848-0x003E0850
		public bool CloudRecoInitialized { get; } // 0x003E0850-0x003E0858 
	
		// Constructors
		public CloudRecoBehaviour(); // 0x003E0C94-0x003E0D04
	
		// Methods
		protected override void Initialize(); // 0x003E0858-0x003E0A68
		protected override void Deinitialize(); // 0x003E0A68-0x003E0B28
		protected override bool IsRecoAvailable(); // 0x003E0B28-0x003E0C3C
		private void OnValidate(); // 0x003E0C3C-0x003E0C94
	}

	public class HideExcessAreaUtility // TypeDefIndex: 3363
	{
		// Fields
		private IExcessAreaClipping mClippingImpl; // 0x08
		private CLIPPING_MODE mClippingMode; // 0x0C
		private VideoBackgroundManager mVideoBgMgr; // 0x10
		private bool mSceneScaledDown; // 0x14
		private bool mStarted; // 0x15
		private bool mEnabled; // 0x16
		private GameObject mParentGameObject; // 0x18
	
		// Nested types
		public enum CLIPPING_MODE // TypeDefIndex: 3364
		{
			CLIP = 0,
			NONE = 1
		}
	
		// Constructors
		public HideExcessAreaUtility(); // 0x00305560-0x003055E8
	
		// Methods
		private void CheckForChangedClippingMode(); // 0x003049E0-0x00304B58
		public void SetEnabled(bool enabled); // 0x00304C0C-0x00304DA0
		internal void Start(); // 0x00304DA0-0x00304E2C
		internal void OnDestroy(); // 0x00304E2C-0x00304F04
		internal void UpdateClipping(Vector2 halfScale); // 0x00304F04-0x003050C0
		internal void OnVuforiaStarted(GameObject parent); // 0x003050C0-0x00305258
		internal void SetPlanesRenderingActive(bool activeflag); // 0x003053A8-0x00305488
		internal bool IsPlanesRenderingActive(); // 0x00305488-0x00305560
		internal void OnConfigurationChanged(); // 0x00305258-0x003053A8
	}

	internal class DataSetObjectTargetImpl : ObjectTargetImpl // TypeDefIndex: 3365
	{
		// Fields
		protected readonly DataSet mDataSet; // 0x14
	
		// Properties
		internal DataSet DataSet { get; } // 0x003E5BE0-0x003E5BE8 
	
		// Constructors
		public DataSetObjectTargetImpl(string name, int id, DataSet dataSet); // 0x003EA7B4-0x003EA858
		public DataSetObjectTargetImpl(string name, int id, DataSet dataSet, ITargetSize targetSize); // 0x003E6168-0x003E619C
	}

	internal static class UnityPlayer // TypeDefIndex: 3366
	{
		// Fields
		private static IUnityPlayer sPlayer; // 0x00
	
		// Properties
		public static IUnityPlayer Instance { get; } // 0x00220888-0x002209C4 
	
		// Constructors
		static UnityPlayer(); // 0x00220A54-0x00220A58
	
		// Methods
		public static void SetImplementation(IUnityPlayer implementation); // 0x002209C4-0x00220A54
	}

	public class NullUnityPlayer : IUnityPlayer // TypeDefIndex: 3367
	{
		// Constructors
		public NullUnityPlayer(); // 0x00318F30-0x00318F38
	
		// Methods
		public void LoadNativeLibraries(); // 0x00318F08-0x00318F0C
		public void InitializePlatform(); // 0x00318F0C-0x00318F10
		public VuforiaUnity.InitError InitializeVuforia(string licenseKey); // 0x00318F10-0x00318F18
		public void ResetPlatformCoordinateSystem(); // 0x00318F18-0x00318F1C
		public void Update(); // 0x00318F1C-0x00318F20
		public void Dispose(); // 0x00318F20-0x00318F24
		public void OnPause(); // 0x00318F24-0x00318F28
		public void OnResume(); // 0x00318F28-0x00318F2C
		public void OnDestroy(); // 0x00318F2C-0x00318F30
	}

	public class Device // TypeDefIndex: 3368
	{
		// Fields
		private static Device mInstance; // 0x00
	
		// Properties
		public static Device Instance { get; } // 0x003D3AF4-0x003D3E58 
	
		// Nested types
		public enum Mode // TypeDefIndex: 3369
		{
			MODE_AR = 0,
			MODE_VR = 1
		}
	
		// Constructors
		public Device(); // 0x003EFDE8-0x003EFDF0
		static Device(); // 0x003F204C-0x003F2050
	
		// Methods
		public Mode GetMode(); // 0x003EFDF0-0x003EFEF8
		public bool IsViewerActive(); // 0x003EFEF8-0x003F0008
		public IViewerParametersList GetViewerList(); // 0x003F0008-0x003F0154
		public bool SelectViewer(IViewerParameters vp); // 0x003F0154-0x003F0604
		public IViewerParameters GetSelectedViewer(); // 0x003F0604-0x003F0750
		public ICustomViewerParameters CreateCustomViewerParameters(float version, string name, string manufacturer); // 0x003F0750-0x003F07D8
		internal static void SetPlayModeEyewearDevice(); // 0x003F07D8-0x003F0930
		internal static void UnsetDevice(); // 0x003F0930-0x003F0A64
		internal void DeleteRenderingPrimitives(); // 0x003EC69C-0x003EC7A8
		internal void SetViewerActive(bool isActive); // 0x003F0A64-0x003F0B74
		internal bool SetMode(Mode m); // 0x003F0B74-0x003F0C8C
		internal Mesh GetDistortionMesh(View viewId, Mesh oldMesh); // 0x003F0C8C-0x003F0ED4
		internal void GetTextureSize(View viewId, out int textureWidth, out int textureHeight); // 0x003F0ED4-0x003F1170
		internal Matrix4x4 GetProjectionMatrix(View viewId, float near, float far, ScreenOrientation screenOrientation); // 0x003EDCD4-0x003EE028
		internal Matrix4x4 GetVideoBackgroundProjectionMatrix(View viewId, float near, float far, ScreenOrientation screenOrientation); // 0x003EE7A4-0x003EEAFC
		internal Rect GetDistortionTextureViewport(View viewId); // 0x003F1170-0x003F147C
		internal Rect GetViewport(View viewId); // 0x003F147C-0x003F1788
		internal Rect GetNormalizedViewport(View viewId); // 0x003F1788-0x003F1A8C
		internal Matrix4x4 GetEyeDisplayAdjustmentMatrix(View viewId); // 0x003EE028-0x003EE354
		internal Vector4 GetEffectiveFovRads(View viewId); // 0x003F1A8C-0x003F1D90
		internal Vector2 GetViewportCentreToEyeAxis(View viewId); // 0x003F1D90-0x003F204C
	}

	public enum ViewerButtonType // TypeDefIndex: 3370
	{
		BUTTON_TYPE_NONE = 0,
		BUTTON_TYPE_MAGNET = 1,
		BUTTON_TYPE_FINGER_TOUCH = 2,
		BUTTON_TYPE_BUTTON_TOUCH = 3
	}

	public enum ViewerTrayAlignment // TypeDefIndex: 3371
	{
		TRAY_ALIGN_BOTTOM = 0,
		TRAY_ALIGN_CENTRE = 1,
		TRAY_ALIGN_TOP = 2
	}

	public interface IViewerParameters // TypeDefIndex: 3372
	{
		// Methods
		float GetVersion();
		string GetName();
		string GetManufacturer();
		ViewerButtonType GetButtonType();
		float GetScreenToLensDistance();
		float GetInterLensDistance();
		ViewerTrayAlignment GetTrayAlignment();
		float GetLensCentreToTrayDistance();
		int GetNumDistortionCoefficients();
		float GetDistortionCoefficient(int idx);
		Vector4 GetFieldOfView();
		bool ContainsMagnet();
	}

	public class Image // TypeDefIndex: 3373
	{
		// Fields
		private byte[] mData; // 0x08
		private ImageDescription mDescription; // 0x0C
	
		// Properties
		public ImageDescription Description { get; } // 0x003069D0-0x003069D8 
		public int Width { get; } // 0x002FF720-0x002FF744 
		public int Height { get; } // 0x002FF744-0x002FF768 
		public int Stride { get; } // 0x003069E8-0x00306A0C 
		public int BufferWidth { get; } // 0x00306A14-0x00306A38 
		public int BufferHeight { get; } // 0x00306A40-0x00306A64 
		public PIXEL_FORMAT PixelFormat { get; } // 0x002FF768-0x002FF78C 
		public byte[] Pixels { get; } // 0x00306A74-0x00306A7C 
	
		// Constructors
		public Image(ImageDescription description); // 0x003065C4-0x00306648
		public Image(ImageDescription description, byte[] data); // 0x00306728-0x00306750
		public Image(PIXEL_FORMAT format); // 0x00306750-0x00306808
		public Image(); // 0x00306850-0x003068D4
	
		// Methods
		public void Resize(ImageDescription description); // 0x00306958-0x003069D0
		[Obsolete] // 0x0018AA24-0x0018AA84
		public bool IsValid(); // 0x00306A7C-0x00306B20
		public static bool IsNullOrEmpty(Image image); // 0x00306B20-0x00306BD4
		public void CopyBufferToTexture(Texture2D texture); // 0x002FF7D0-0x002FF900
		public void CopyToTexture(Texture2D texture2D); // 0x00306C74-0x00306C7C
		public void CopyToTexture(Texture2D texture2D, bool flipY); // 0x00306C7C-0x003073C0
		internal static Image CopyNativeImage(UnmanagedImageExtensions.GetImageSizeAndDataDelegate getImageSizeAndDataFunc); // 0x002FF658-0x002FF720
		private static void ResizeTexture(Texture2D texture, int width, int height, TextureFormat format); // 0x00306BD4-0x00306C74
		private int GetBufferSize(); // 0x00306648-0x00306728
	}

	internal class UnmanagedImage : IDisposable // TypeDefIndex: 3374
	{
		// Fields
		private IntPtr mUnmanagedData; // 0x08
		private ImageDescription mDescription; // 0x0C
	
		// Properties
		public ImageDescription Description { get; } // 0x00221CA8-0x00221CB0 
	
		// Constructors
		public UnmanagedImage(); // 0x00221928-0x0022195C
		public UnmanagedImage(int width, int height, int stride, int bufferWidth, int bufferHeight, PIXEL_FORMAT format); // 0x00221984-0x00221A48
		public UnmanagedImage(PIXEL_FORMAT format); // 0x00221A48-0x00221AF4
		public UnmanagedImage(ImageDescription description); // 0x0022195C-0x00221984
	
		// Methods
		~UnmanagedImage(); // 0x00221B88-0x00221BEC
		public void Dispose(); // 0x00221CA4-0x00221CA8
		public void Resize(ImageDescription description); // 0x00221CB0-0x00221CD4
		public TrackerData.ImageHeaderData CreateImageHeaderData(); // 0x00221CD4-0x00221DF8
		public Vuforia.Image CreateManagedImage(); // 0x00221DF8-0x00221EF0
		public void UpdateImageDataHeader(ref TrackerData.ImageHeaderData imageDataHeader); // 0x00222080-0x00222180
		public void UpdateManagedImage(Vuforia.Image image); // 0x00222180-0x002222C8
		private void AllocateUnmanagedData(); // 0x00221AF4-0x00221B88
		private int GetBufferSize(); // 0x00221EF0-0x00222080
		private void Clear(); // 0x00221BEC-0x00221CA4
	}

	internal static class UnmanagedImageExtensions // TypeDefIndex: 3375
	{
		// Nested types
		internal delegate bool GetImageSizeAndDataDelegate(ref TrackerData.ImageHeaderData imageHeader); // TypeDefIndex: 3376; 0x0022247C-0x00222920
	
		// Extension methods
		internal static void ReallocateAndCopyData(this UnmanagedImage image, GetImageSizeAndDataDelegate getImageSizeAndDataFunc); // 0x002222C8-0x002222F4
		internal static bool ReallocateOrCopyData(this UnmanagedImage image, GetImageSizeAndDataDelegate getImageSizeAndDataFunc); // 0x002222F4-0x0022247C
		internal static void MarshalImageListToPtr(this ICollection<UnmanagedImage> images, IntPtr imageHeaderDataPtr); // 0x00222920-0x00222D58
		internal static void MarshalPtrToImageList(this ICollection<UnmanagedImage> images, IntPtr imageHeaderDataPtr); // 0x00222D58-0x002232F4
	}

	internal static class PosixPath // TypeDefIndex: 3377
	{
		// Nested types
		public class InvalidPathException : Exception // TypeDefIndex: 3378
		{
			// Constructors
			public InvalidPathException(string message); // 0x00209230-0x002092BC
		}
	
		[Serializable]
		[CompilerGenerated] // 0x00189094-0x001890A4
		private sealed class <>c // TypeDefIndex: 3379
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static Func<string, bool> <>9__1_0; // 0x04
			public static Func<string, int, string> <>9__1_1; // 0x08
	
			// Constructors
			static <>c(); // 0x002094B0-0x00209524
			public <>c(); // 0x00209524-0x0020952C
	
			// Methods
			internal bool <Join>b__1_0(string p); // 0x0020952C-0x0020953C
			internal string <Join>b__1_1(string s, int index); // 0x0020953C-0x0020954C
		}
	
		// Methods
		public static string Join(params /* 0x0018AFD8-0x0018AFE8 */ string[] subPaths); // 0x00208EFC-0x00209230
		private static string TrimLeadingSlashes(string subPath); // 0x002092BC-0x002093CC
		private static string TrimTrailingSlashes(string subPath); // 0x002093CC-0x002094B0
	}

	internal class LateLatchingManager // TypeDefIndex: 3380
	{
		// Fields
		private bool mInitialized; // 0x08
		private bool mEnabled; // 0x09
		private bool mUpdated; // 0x0A
		private Vector3 mCachedPositionalOffset; // 0x0C
		private Quaternion mCachedRotationalOffset; // 0x18
		private TrackerData.TrackableResultData[] mCachedTrackableResultDataArray; // 0x28
		private TrackerData.VuMarkTargetResultData[] mCachedVuMarkResultDataArray; // 0x2C
		private VuforiaManager.TrackableIdPair mCachedOriginTrackableID; // 0x30
		private int mCachedFrameIndex; // 0x38
	
		// Constructors
		public LateLatchingManager(); // 0x0030DE90-0x0030DE98
	
		// Methods
		public void Init(); // 0x0030DB38-0x0030DBD8
		public void Deinit(); // 0x0030DBD8-0x0030DC80
		public void SetEnableLateLatching(bool enable); // 0x002FAA78-0x002FAA88
		public void UpdateLateLatchingInformation(Vector3 positionalOffset, Quaternion rotationalOffset, TrackerData.TrackableResultData[] trackableResultDataArray, TrackerData.VuMarkTargetResultData[] vuMarkResultDataArray, VuforiaManager.TrackableIdPair originTrackableID, int frameIndex); // 0x0030DC80-0x0030DCE8
		private void OnBeforeRender(); // 0x0030DCE8-0x0030DE90
	}

	internal class VRDeviceController // TypeDefIndex: 3381
	{
		// Fields
		private HashSet<string> mHeadPoseDisablingClasses; // 0x08
		private bool mHeadPosesEnabledOnce; // 0x0C
	
		// Constructors
		public VRDeviceController(); // 0x00225D40-0x00225DD4
	
		// Methods
		public void EnableVRDevice(); // 0x002245A8-0x002245D0
		public void DisableVRDevice(); // 0x00225AA8-0x00225AD0
		public void EnableHeadPoseUpdates(string requestingClass); // 0x00225AD0-0x00225B50
		public void DisableHeadPoseUpdates(string requestingClass); // 0x00225B50-0x00225BD0
		public void UpdateState(Camera camera); // 0x00225BD0-0x00225D40
	}

	public class VuforiaBehaviour : VuforiaMonoBehaviour // TypeDefIndex: 3382
	{
		// Fields
		private static VuforiaBehaviour mVuforiaBehaviour; // 0x00
		[HideInInspector] // 0x00189BD8-0x00189C08
		[SerializeField] // 0x00189BD8-0x00189C08
		private VuforiaARController.WorldCenterMode mWorldCenterMode; // 0x0C
		[HideInInspector] // 0x00189C08-0x00189C38
		[SerializeField] // 0x00189C08-0x00189C38
		private TrackableBehaviour mWorldCenter; // 0x10
		private bool mAppIsQuitting; // 0x14
		[CompilerGenerated] // 0x00189C38-0x00189C48
		private static Action<VuforiaBehaviour> BehaviourCreated; // 0x04
		[CompilerGenerated] // 0x00189C48-0x00189C58
		private static Action<VuforiaBehaviour> BehaviourDestroyed; // 0x08
		[CompilerGenerated] // 0x00189C58-0x00189C68
		private Action AwakeEvent; // 0x18
		[CompilerGenerated] // 0x00189C68-0x00189C78
		private Action OnEnableEvent; // 0x1C
		[CompilerGenerated] // 0x00189C78-0x00189C88
		private Action StartEvent; // 0x20
		[CompilerGenerated] // 0x00189C88-0x00189C98
		private Action UpdateEvent; // 0x24
		[CompilerGenerated] // 0x00189C98-0x00189CA8
		private Action OnLevelWasLoadedEvent; // 0x28
		[CompilerGenerated] // 0x00189CA8-0x00189CB8
		private Action<bool> OnApplicationPauseEvent; // 0x2C
		[CompilerGenerated] // 0x00189CB8-0x00189CC8
		private Action OnDisableEvent; // 0x30
		[CompilerGenerated] // 0x00189CC8-0x00189CD8
		private Action OnDestroyEvent; // 0x34
	
		// Properties
		public static VuforiaBehaviour Instance { get; } // 0x0050FDB4-0x0050FF50 
		internal VuforiaARController.WorldCenterMode WorldCenterMode { get; } // 0x0050DD2C-0x0050DD34 
		internal TrackableBehaviour WorldCenter { get; } // 0x0050DD34-0x0050DD3C 
	
		// Events
		public static event Action<VuforiaBehaviour> BehaviourCreated {
			add; // 0x00511D5C-0x00511EF0
			remove; // 0x00511EF0-0x00512084
		}
		public static event Action<VuforiaBehaviour> BehaviourDestroyed {
			add; // 0x00512084-0x00512218
			remove; // 0x00512218-0x005123AC
		}
		public event Action AwakeEvent {
			add; // 0x005123AC-0x005124B8
			remove; // 0x005124B8-0x005125C4
		}
		public event Action OnEnableEvent {
			add; // 0x005125C4-0x005126D0
			remove; // 0x005126D0-0x005127DC
		}
		public event Action StartEvent {
			add; // 0x005127DC-0x005128E8
			remove; // 0x005128E8-0x005129F4
		}
		public event Action UpdateEvent {
			add; // 0x005129F4-0x00512B00
			remove; // 0x00512B00-0x00512C0C
		}
		public event Action OnLevelWasLoadedEvent {
			add; // 0x00512C0C-0x00512D18
			remove; // 0x00512D18-0x00512E24
		}
		public event Action<bool> OnApplicationPauseEvent {
			add; // 0x00512E24-0x00512F30
			remove; // 0x00512F30-0x0051303C
		}
		public event Action OnDisableEvent {
			add; // 0x0051303C-0x00513148
			remove; // 0x00513148-0x00513254
		}
		public event Action OnDestroyEvent {
			add; // 0x00513254-0x00513360
			remove; // 0x00513360-0x0051346C
		}
	
		// Constructors
		public VuforiaBehaviour(); // 0x0051346C-0x0051347C
		static VuforiaBehaviour(); // 0x0051347C-0x00513480
	
		// Methods
		protected virtual void Awake(); // 0x00511938-0x00511A88
		private void AdaptCameraObject(); // 0x00511A88-0x00511B3C
		private void OnEnable(); // 0x00511B3C-0x00511B50
		private void Start(); // 0x00511B50-0x00511B64
		private void Update(); // 0x00511B64-0x00511B78
		private void OnSceneLoaded(Scene scene, LoadSceneMode mode); // 0x00511B78-0x00511B8C
		private void OnApplicationPause(bool pause); // 0x00511B8C-0x00511C00
		private void OnDisable(); // 0x00511C00-0x00511C14
		private void OnDestroy(); // 0x00511C14-0x00511D5C
	}

	public class VuforiaConfiguration : ScriptableObject // TypeDefIndex: 3383
	{
		// Fields
		private static VuforiaConfiguration mInstance; // 0x00
		private static object mPadlock; // 0x04
		[SerializeField] // 0x00189CD8-0x00189CE8
		private GenericVuforiaConfiguration vuforia; // 0x0C
		[SerializeField] // 0x00189CE8-0x00189CF8
		private DigitalEyewearConfiguration digitalEyewear; // 0x10
		[SerializeField] // 0x00189CF8-0x00189D08
		private DatabaseConfiguration database; // 0x14
		[SerializeField] // 0x00189D08-0x00189D18
		private VideoBackgroundConfiguration videoBackground; // 0x18
		[SerializeField] // 0x00189D18-0x00189D28
		private DeviceTrackerConfiguration deviceTracker; // 0x1C
		[SerializeField] // 0x00189D28-0x00189D38
		private SmartTerrainConfiguration smartTerrain; // 0x20
		[SerializeField] // 0x00189D38-0x00189D48
		private WebCamConfiguration webcam; // 0x24
	
		// Properties
		public static VuforiaConfiguration Instance { get; } // 0x0050DAF4-0x0050DD04 
		public GenericVuforiaConfiguration Vuforia { get; } // 0x0050DD04-0x0050DD0C 
		public DigitalEyewearConfiguration DigitalEyewear { get; } // 0x0051370C-0x00513714 
		public DatabaseConfiguration Database { get; } // 0x00513714-0x0051371C 
		public VideoBackgroundConfiguration VideoBackground { get; } // 0x00513520-0x00513528 
		public DeviceTrackerConfiguration DeviceTracker { get; } // 0x0051371C-0x00513724 
		public SmartTerrainConfiguration SmartTerrain { get; } // 0x00513724-0x0051372C 
		public WebCamConfiguration WebCam { get; } // 0x0051372C-0x00513734 
	
		// Nested types
		[Serializable]
		public class GenericVuforiaConfiguration // TypeDefIndex: 3384
		{
			// Fields
			internal const string DEFAULT_UFO_LICENSE_KEY = "QVhiM0Y1Ly8vLy8vQUFBQUtPbnFIeHJFSGs1N3VrMlg4U050eVBzK2pkOFZxMDhrazlwYjBsYS9aZUIxQlV1ckZWcWt0ZllSQWpnT2tIRlY2VzdOMDRTRjNYRUhmbTF5L1BnYlB4eWdHWEF6RUNheXowc3dyNVNYa2ozdERuRjhka1FpOHRscHdkMDcrcEJEY1FjTjNJcUM1bEgwOTYzQkdZdjRsQStRb0hSQU9nRGthelp5TlY0WHVwWU9EaE05NWw5bXAzbnBDMjM5MWZBWXBFdEdiL2loTDNab3N4b25ZblhjK1JtSS9wLzRoTDIwVGhmTXR6WFJNYkpUTXZLZzJoQ0N0TEJXNEptZ0pSOUtSdStzQWM3QjVNOWFFMGVHQ1dUT1VRSUUweEpiZC9ZL2cvS29iNDhBRXdQOGFwbWR5NmRWU0FHU2psVzRZY2FEU2Zud3J1ZHhucVNmSUZiajNTUnIzM0lKVlFIaW1rL0oyOGNFeDdyekcySXg="; // Metadata: 0x0021BF4F
			[SerializeField] // 0x0018A348-0x0018A358
			private string vuforiaLicenseKey; // 0x08
			[SerializeField] // 0x0018A358-0x0018A368
			private string ufoLicenseKey; // 0x0C
			[SerializeField] // 0x0018A368-0x0018A378
			private bool delayedInitialization; // 0x10
			[SerializeField] // 0x0018A378-0x0018A388
			private CameraDevice.CameraDeviceMode cameraDeviceModeSetting; // 0x14
			[SerializeField] // 0x0018A388-0x0018A398
			private int maxSimultaneousImageTargets; // 0x18
			[SerializeField] // 0x0018A398-0x0018A3A8
			private int maxSimultaneousObjectTargets; // 0x1C
			[SerializeField] // 0x0018A3A8-0x0018A3B8
			private bool useDelayedLoadingObjectTargets; // 0x20
			[SerializeField] // 0x0018A3B8-0x0018A3C8
			private string version; // 0x24
			[SerializeField] // 0x0018A3C8-0x0018A3D8
			private string eulaAcceptedVersions; // 0x28
	
			// Properties
			public string LicenseKey { get; set; } // 0x00513BA4-0x00513BAC 0x00513BAC-0x00513BB4
			internal string UfoLicenseKey { get; set; } // 0x00513BB4-0x00513BBC 0x00513BBC-0x00513BC4
			public bool DelayedInitialization { get; set; } // 0x00513BC4-0x00513BCC 0x00513BCC-0x00513BD4
			public CameraDevice.CameraDeviceMode CameraDeviceMode { get; set; } // 0x0050DD0C-0x0050DD14 0x00513BD4-0x00513BDC
			public int MaxSimultaneousImageTargets { get; set; } // 0x0050DD14-0x0050DD1C 0x00513BDC-0x00513BE4
			public int MaxSimultaneousObjectTargets { get; set; } // 0x0050DD1C-0x0050DD24 0x00513BE4-0x00513BEC
			public bool UseDelayedLoadingObjectTargets { get; set; } // 0x0050DD24-0x0050DD2C 0x00513BEC-0x00513BF4
			public string Version { get; set; } // 0x00513BF4-0x00513BFC 0x00513BFC-0x00513C04
			internal string EULAAcceptedVersions { get; set; } // 0x00513C04-0x00513C0C 0x00513C0C-0x00513C14
	
			// Constructors
			public GenericVuforiaConfiguration(); // 0x005138B8-0x00513964
	
			// Methods
			internal bool IsUFOEnabled(); // 0x00513C14-0x00513CB8
		}
	
		[Serializable]
		public class DigitalEyewearConfiguration // TypeDefIndex: 3385
		{
			// Fields
			[SerializeField] // 0x0018A3D8-0x0018A3E8
			private float cameraOffset; // 0x08
			[SerializeField] // 0x0018A3E8-0x0018A3F8
			private int distortionRenderingLayer; // 0x0C
			[SerializeField] // 0x0018A3F8-0x0018A408
			private DigitalEyewearARController.EyewearType eyewearType; // 0x10
			[SerializeField] // 0x0018A408-0x0018A418
			private DigitalEyewearARController.StereoFramework stereoFramework; // 0x14
			[SerializeField] // 0x0018A418-0x0018A428
			private DigitalEyewearARController.SeeThroughConfiguration seeThroughConfiguration; // 0x18
			[SerializeField] // 0x0018A428-0x0018A438
			private string viewerName; // 0x1C
			[SerializeField] // 0x0018A438-0x0018A448
			private string viewerManufacturer; // 0x20
			[SerializeField] // 0x0018A448-0x0018A458
			private bool useCustomViewer; // 0x24
			[SerializeField] // 0x0018A458-0x0018A468
			private DigitalEyewearARController.SerializableViewerParameters customViewer; // 0x28
	
			// Properties
			public float CameraOffset { get; set; } // 0x00513B14-0x00513B1C 0x00513B1C-0x00513B24
			public int DistortionRenderingLayer { get; set; } // 0x00513B24-0x00513B2C 0x00513B2C-0x00513B34
			public DigitalEyewearARController.EyewearType EyewearType { get; set; } // 0x00513B34-0x00513B3C 0x00513B3C-0x00513B44
			public DigitalEyewearARController.StereoFramework StereoFramework { get; set; } // 0x00513B44-0x00513B4C 0x00513B4C-0x00513B54
			public DigitalEyewearARController.SeeThroughConfiguration SeeThroughConfiguration { get; set; } // 0x00513B54-0x00513B5C 0x00513B5C-0x00513B64
			public string ViewerName { get; set; } // 0x00513B64-0x00513B6C 0x00513B6C-0x00513B74
			public string ViewerManufacturer { get; set; } // 0x00513B74-0x00513B7C 0x00513B7C-0x00513B84
			public bool UseCustomViewer { get; set; } // 0x00513B84-0x00513B8C 0x00513B8C-0x00513B94
			public DigitalEyewearARController.SerializableViewerParameters CustomViewer { get; set; } // 0x00513B94-0x00513B9C 0x00513B9C-0x00513BA4
	
			// Constructors
			public DigitalEyewearConfiguration(); // 0x00513964-0x00513980
		}
	
		[Serializable]
		public class DatabaseConfiguration // TypeDefIndex: 3386
		{
			// Fields
			[SerializeField] // 0x0018A468-0x0018A478
			private bool disableModelExtraction; // 0x08
	
			// Properties
			public bool DisableModelExtraction { get; } // 0x00513AA4-0x00513AAC 
	
			// Constructors
			public DatabaseConfiguration(); // 0x00513980-0x00513988
		}
	
		[Serializable]
		public class VideoBackgroundConfiguration // TypeDefIndex: 3387
		{
			// Fields
			[SerializeField] // 0x0018A478-0x0018A488
			private HideExcessAreaUtility.CLIPPING_MODE clippingMode; // 0x08
			[SerializeField] // 0x0018A488-0x0018A498
			private int numDivisions; // 0x0C
			[SerializeField] // 0x0018A498-0x0018A4A8
			private Shader videoBackgroundShader; // 0x10
			[SerializeField] // 0x0018A4A8-0x0018A4B8
			private Shader matteShader; // 0x14
			[SerializeField] // 0x0018A4B8-0x0018A4C8
			private bool videoBackgroundEnabled; // 0x18
	
			// Properties
			public HideExcessAreaUtility.CLIPPING_MODE ClippingMode { get; set; } // 0x00513D00-0x00513D08 0x00513D08-0x00513D10
			public int NumDivisions { get; set; } // 0x00513D10-0x00513D18 0x00513D18-0x00513D20
			public Shader VideoBackgroundShader { get; set; } // 0x00513D20-0x00513D28 0x00513D28-0x00513D30
			public Shader MatteShader { get; set; } // 0x00513D30-0x00513D38 0x00513D38-0x00513D40
			public bool VideoBackgroundEnabled { get; set; } // 0x00513D40-0x00513D48 0x00513D48-0x00513D50
	
			// Constructors
			public VideoBackgroundConfiguration(); // 0x00513988-0x005139A0
		}
	
		public abstract class TrackerConfiguration // TypeDefIndex: 3388
		{
			// Fields
			[SerializeField] // 0x0018A4C8-0x0018A4D8
			private bool autoInitTracker; // 0x08
			[SerializeField] // 0x0018A4D8-0x0018A4E8
			private bool autoStartTracker; // 0x09
	
			// Properties
			public bool AutoInitAndStartTracker { get; set; } // 0x00513CEC-0x00513CF4 0x00513CF4-0x00513D00
	
			// Constructors
			protected TrackerConfiguration(); // 0x00513B0C-0x00513B14
		}
	
		[Serializable]
		public class DeviceTrackerConfiguration : TrackerConfiguration // TypeDefIndex: 3389
		{
			// Fields
			[SerializeField] // 0x0018A4E8-0x0018A4F8
			private DeviceTracker.TRACKING_MODE trackingMode; // 0x0C
			[SerializeField] // 0x0018A4F8-0x0018A508
			private bool posePrediction; // 0x10
			[SerializeField] // 0x0018A508-0x0018A518
			private RotationalDeviceTracker.MODEL_CORRECTION_MODE modelCorrectionMode; // 0x14
			[SerializeField] // 0x0018A518-0x0018A528
			private bool modelTransformEnabled; // 0x18
			[SerializeField] // 0x0018A528-0x0018A538
			private Vector3 modelTransform; // 0x1C
	
			// Properties
			public DeviceTracker.TRACKING_MODE TrackingMode { get; set; } // 0x00513AAC-0x00513AB4 0x00513AB4-0x00513ABC
			public bool PosePrediction { get; set; } // 0x00513ABC-0x00513AC4 0x00513AC4-0x00513ACC
			public RotationalDeviceTracker.MODEL_CORRECTION_MODE ModelCorrectionMode { get; set; } // 0x00513ACC-0x00513AD4 0x00513AD4-0x00513ADC
			public bool ModelTransformEnabled { get; set; } // 0x00513ADC-0x00513AE4 0x00513AE4-0x00513AEC
			public Vector3 ModelTransform { get; set; } // 0x00513AEC-0x00513B00 0x00513B00-0x00513B0C
	
			// Constructors
			public DeviceTrackerConfiguration(); // 0x005139A0-0x00513A0C
		}
	
		[Serializable]
		public class SmartTerrainConfiguration : TrackerConfiguration // TypeDefIndex: 3390
		{
			// Constructors
			public SmartTerrainConfiguration(); // 0x00513A0C-0x00513A14
		}
	
		[Serializable]
		public class WebCamConfiguration // TypeDefIndex: 3391
		{
			// Fields
			[SerializeField] // 0x0018A538-0x0018A548
			private string deviceNameSetInEditor; // 0x08
			[SerializeField] // 0x0018A548-0x0018A558
			private bool turnOffWebCam; // 0x0C
			[SerializeField] // 0x0018A558-0x0018A568
			private int renderTextureLayer; // 0x10
	
			// Properties
			public string DeviceNameSetInEditor { get; } // 0x00513D50-0x00513D58 
			public bool TurnOffWebCam { get; } // 0x00513D58-0x00513D60 
			public int RenderTextureLayer { get; } // 0x00513D60-0x00513D68 
	
			// Constructors
			public WebCamConfiguration(); // 0x00513A14-0x00513A24
		}
	
		// Constructors
		public VuforiaConfiguration(); // 0x00513734-0x005138B8
		static VuforiaConfiguration(); // 0x00513A24-0x00513AA4
	
		// Methods
		private static void MigrateConfiguration(VuforiaConfiguration configuration); // 0x00513480-0x00513520
		private static void ValidateConfiguration(VuforiaConfiguration configuration); // 0x00513528-0x005135EC
		internal static VuforiaConfiguration Create(); // 0x005135EC-0x0051370C
	}

	public class VuforiaRuntime // TypeDefIndex: 3392
	{
		// Fields
		internal const string VUFORIA_XR_NAME = "Vuforia"; // Metadata: 0x0021C14F
		private Action<VuforiaUnity.InitError> mOnVuforiaInitError; // 0x08
		private bool mFailedToInitialize; // 0x0C
		private VuforiaUnity.InitError mInitError; // 0x10
		private InitState mInitState; // 0x14
		private bool mInitThreadReturned; // 0x18
		private VuforiaUnity.InitError mReturnedError; // 0x1C
		private static VuforiaRuntime mInstance; // 0x00
		private static object mPadlock; // 0x04
		private bool mAppIsQuitting; // 0x20
	
		// Properties
		public static VuforiaRuntime Instance { get; internal set; } // 0x0050C84C-0x0050CA5C 0x0052B9D0-0x0052BA60
		public InitState InitializationState { get; } // 0x0050E0E0-0x0050E0E8 
	
		// Nested types
		public enum InitState // TypeDefIndex: 3393
		{
			NOT_INITIALIZED = 0,
			INITIALIZING = 1,
			INITIALIZED = 2
		}
	
		// Constructors
		private VuforiaRuntime(); // 0x0052B9C8-0x0052B9D0
		static VuforiaRuntime(); // 0x0052CE10-0x0052CE90
	
		// Methods
		public void InitPlatform(IUnityPlayer player); // 0x0052BA60-0x0052BB78
		public void InitVuforia(); // 0x0052BB78-0x0052BCCC
		private static void LogVersions(); // 0x0052BCCC-0x0052BE54
		private void InitInternal(); // 0x0052BE54-0x0052C0C4
		public void Deinit(); // 0x0052C180-0x0052C36C
		public void RegisterVuforiaInitErrorCallback(Action<VuforiaUnity.InitError> callback); // 0x0052C36C-0x0052C494
		public void UnregisterVuforiaInitErrorCallback(Action<VuforiaUnity.InitError> callback); // 0x0052C494-0x0052C580
		internal bool HasInitializationCompleted(); // 0x0050CA5C-0x0050CC20
		internal void AttachVuforiaToMainCamera(Scene scene, LoadSceneMode loadSceneMode); // 0x0052C580-0x0052CA54
		internal static bool IsVuforiaEnabledInPlayerSettings(); // 0x0050E004-0x0050E0E0
		internal static bool IsVuforiaActiveAndEULAAccepted(); // 0x0050DF28-0x0050E004
		[RuntimeInitializeOnLoadMethod] // 0x0018AC04-0x0018AC18
		private static void VuforiaInitialization(); // 0x0052CAF0-0x0052CC24
		private static bool AreVuforiaMonoBehavioursInScene(); // 0x0052CA54-0x0052CAF0
		private void OnApplicationQuit(); // 0x0052CC24-0x0052CCD0
		private void DeinitVuforia(); // 0x0052CCD0-0x0052CE10
	}

	public class VuMarkBehaviour : DataSetTrackableBehaviour // TypeDefIndex: 3394
	{
		// Fields
		[HideInInspector] // 0x00189D48-0x00189D78
		[SerializeField] // 0x00189D48-0x00189D78
		private float mAspectRatio; // 0x3C
		[HideInInspector] // 0x00189D78-0x00189DA8
		[SerializeField] // 0x00189D78-0x00189DA8
		private float mWidth; // 0x40
		[HideInInspector] // 0x00189DA8-0x00189DD8
		[SerializeField] // 0x00189DA8-0x00189DD8
		private float mHeight; // 0x44
		[HideInInspector] // 0x00189DD8-0x00189E08
		[SerializeField] // 0x00189DD8-0x00189E08
		private string mPreviewImage; // 0x48
		[HideInInspector] // 0x00189E08-0x00189E38
		[SerializeField] // 0x00189E08-0x00189E38
		private InstanceIdType mIdType; // 0x4C
		[HideInInspector] // 0x00189E38-0x00189E68
		[SerializeField] // 0x00189E38-0x00189E68
		private int mIdLength; // 0x50
		[HideInInspector] // 0x00189E68-0x00189E98
		[SerializeField] // 0x00189E68-0x00189E98
		private Rect mBoundingBox; // 0x54
		[HideInInspector] // 0x00189E98-0x00189EC8
		[SerializeField] // 0x00189E98-0x00189EC8
		private Vector2 mOrigin; // 0x64
		[HideInInspector] // 0x00189EC8-0x00189EF8
		[SerializeField] // 0x00189EC8-0x00189EF8
		private bool mTrackingFromRuntimeAppearance; // 0x6C
		private VuMarkTemplate mVuMarkTemplate; // 0x70
		private VuMarkTarget mVuMarkTarget; // 0x74
		private int mVuMarkResultId; // 0x78
		private Action mOnTargetAssigned; // 0x7C
		private Action mOnTargetLost; // 0x80
		private float mLastTransformScale; // 0x84
		private Vector2 mLastSize; // 0x88
	
		// Properties
		public VuMarkTemplate VuMarkTemplate { get; } // 0x0022C420-0x0022C428 
		public VuMarkTarget VuMarkTarget { get; } // 0x0022C428-0x0022C430 
		public Vector2 Origin { get; } // 0x0022C430-0x0022C680 
		internal int VuMarkResultId { get; set; } // 0x00213520-0x00213528 0x0022CF08-0x0022CF10
	
		// Constructors
		public VuMarkBehaviour(); // 0x0022C794-0x0022C7FC
	
		// Methods
		protected override bool CorrectScaleImpl(); // 0x0022C7FC-0x0022C82C
		protected override void InternalUnregisterTrackable(); // 0x0022CA90-0x0022CAA4
		public Vector2 GetSize(); // 0x0022C680-0x0022C794
		public void SetWidth(float width); // 0x0022CAA4-0x0022CACC
		public void SetHeight(float height); // 0x0022CACC-0x0022CAF4
		public void RegisterVuMarkTargetAssignedCallback(Action callback); // 0x0022CAF4-0x0022CC08
		public void UnregisterVuMarkTargetAssignedCallback(Action callback); // 0x0022CC08-0x0022CCF4
		public void RegisterVuMarkTargetLostCallback(Action callback); // 0x0022CCF4-0x0022CDE0
		public void UnregisterVuMarkTargetLostCallback(Action callback); // 0x0022CDE0-0x0022CECC
		internal void UnregisterVuMarkTarget(); // 0x0022CECC-0x0022CEEC
		internal void RegisterVuMarkTarget(VuMarkTarget target); // 0x0022CEEC-0x0022CF08
		internal override bool InitializeTarget(Trackable trackable, bool applyTargetScaleToBehaviour); // 0x0022CF10-0x0022D350
		private void OnValidate(); // 0x0022C82C-0x0022CA90
	}

	public class VuMarkManager // TypeDefIndex: 3395
	{
		// Fields
		private Dictionary<int, List<VuMarkBehaviour>> mBehaviours; // 0x08
		private List<VuMarkTarget> mActiveVuMarkTargets; // 0x0C
		private List<VuMarkBehaviour> mDestroyedBehaviours; // 0x10
		private Action<VuMarkTarget> mOnVuMarkDetected; // 0x14
		private Action<VuMarkTarget> mOnVuMarkLost; // 0x18
		private Action<VuMarkBehaviour> mOnVuMarkBehaviourDetected; // 0x1C
	
		// Constructors
		internal VuMarkManager(); // 0x0020CB0C-0x0020CC00
	
		// Methods
		public IEnumerable<VuMarkTarget> GetActiveVuMarks(); // 0x0022D350-0x0022D358
		public IEnumerable<VuMarkBehaviour> GetActiveBehaviours(VuMarkTarget vuMark); // 0x0022D358-0x0022D6B8
		public IEnumerable<VuMarkBehaviour> GetActiveBehaviours(); // 0x00214EFC-0x00215264
		public IEnumerable<VuMarkBehaviour> GetAllBehaviours(); // 0x0020CCB0-0x0020CFE4
		public void RegisterVuMarkDetectedCallback(Action<VuMarkTarget> callback); // 0x0022D6B8-0x0022D7A4
		public void UnregisterVuMarkDetectedCallback(Action<VuMarkTarget> callback); // 0x0022D7A4-0x0022D890
		public void RegisterVuMarkLostCallback(Action<VuMarkTarget> callback); // 0x0022D890-0x0022D97C
		public void UnregisterVuMarkLostCallback(Action<VuMarkTarget> callback); // 0x0022D97C-0x0022DA68
		public void RegisterVuMarkBehaviourDetectedCallback(Action<VuMarkBehaviour> callback); // 0x0022DA68-0x0022DB54
		public void UnregisterVuMarkBehaviourDetectedCallback(Action<VuMarkBehaviour> callback); // 0x0022DB54-0x0022DC40
		internal void UpdateVuMarks(TrackerData.VuMarkTargetData[] newVuMarks, TrackerData.VuMarkTargetResultData[] vuMarkResults); // 0x002142B0-0x002143D8
		internal void UpdateVuMarkPoses(Vector3 positionalOffset, Quaternion rotationalOffset, TrackerData.VuMarkTargetResultData[] vuMarkResults, int originTrackableResultId); // 0x0021329C-0x00213520
		internal bool AddTemplateBehaviour(VuMarkBehaviour behaviour); // 0x00210354-0x00210518
		internal bool ContainsVuMarkTemplate(int templateId); // 0x00216F00-0x0021709C
		internal void ClearBehaviours(); // 0x00211AD4-0x00211B80
		internal void DestroyBehaviourCopies(); // 0x0020DE58-0x0020E344
		internal void RemoveDestroyedTrackables(); // 0x0020DAAC-0x0020DE58
		internal bool IsBehaviourMarkedForDeletion(TrackableBehaviour behaviour); // 0x00210238-0x0021034C
		internal VuMarkBehaviour GetBehaviourWithResultID(int resultId); // 0x0022E9CC-0x0022ECEC
		private void UpdateNewVuMarks(TrackerData.VuMarkTargetData[] newVuMarks); // 0x0022DC40-0x0022DDB0
		private void UpdateLostVuMarks(HashSet<int> trackedIndices); // 0x0022DDB0-0x0022E19C
		private VuMarkTarget CreateVuMarkTarget(TrackerData.VuMarkTargetData newVuMark); // 0x0022ECEC-0x0022EEC0
		private VuMarkBehaviour CreateOrGetUnusedBehaviour(int templateId); // 0x0022F058-0x0022F3E0
		private VuMarkTemplate GetVuMarkTemplate(int templateId); // 0x0022EEC0-0x0022F058
		private VuMarkBehaviour CopyGameObject(VuMarkBehaviour bhvr); // 0x0022F3E0-0x0022F504
		private void MarkBehaviourUntracked(VuMarkBehaviour behaviour); // 0x0022F504-0x0022F5A8
		private void AssociateTargetWithBehaviour(VuMarkTarget vuMark, VuMarkBehaviour bhvr); // 0x0022F5A8-0x0022F624
		private void UpdateVuMarkResults(TrackerData.VuMarkTargetResultData[] vuMarkResults); // 0x0022E19C-0x0022E80C
		private VuMarkBehaviour GetActiveBehaviour(int targetId, int resultId); // 0x0022E80C-0x0022E9CC
		private VuMarkTarget GetVuMarkTarget(int targetId); // 0x0022F624-0x0022F9BC
		private Dictionary<int, List<int>> GroupResultsByTargetId(TrackerData.VuMarkTargetResultData[] vuMarkResults); // 0x0022F9BC-0x0022FBA8
	}

	public enum InstanceIdType // TypeDefIndex: 3396
	{
		BYTES = 0,
		STRING = 1,
		NUMERIC = 2
	}

	public interface InstanceId // TypeDefIndex: 3397
	{
		// Properties
		InstanceIdType DataType { get; }
		byte[] Buffer { get; }
		string HexStringValue { get; }
		string StringValue { get; }
		ulong NumericValue { get; }
	}

	public interface VuMarkTarget : ObjectTarget // TypeDefIndex: 3398
	{
		// Properties
		InstanceId InstanceId { get; }
		VuMarkTemplate Template { get; }
		Vuforia.Image InstanceImage { get; }
	}

	public interface VuMarkTemplate : ObjectTarget // TypeDefIndex: 3399
	{
		// Properties
		string VuMarkUserData { get; }
		Vector2 Origin { get; }
		bool TrackingFromRuntimeAppearance { get; set; }
	}

	public interface WorldCenterTrackableBehaviour // TypeDefIndex: 3400
	{
		// Properties
		Trackable Trackable { get; }
	}

	public interface CylinderTarget : ObjectTarget // TypeDefIndex: 3401
	{
		// Methods
		float GetSideLength();
		float GetTopDiameter();
		float GetBottomDiameter();
		bool SetSideLength(float sideLength);
		bool SetTopDiameter(float topDiameter);
		bool SetBottomDiameter(float bottomDiameter);
	}

	public class CylinderTargetBehaviour : DataSetTrackableBehaviour // TypeDefIndex: 3402
	{
		// Fields
		private CylinderTarget mCylinderTarget; // 0x3C
		[HideInInspector] // 0x00189EF8-0x00189F28
		[SerializeField] // 0x00189EF8-0x00189F28
		private float mTopDiameterRatio; // 0x40
		[HideInInspector] // 0x00189F28-0x00189F58
		[SerializeField] // 0x00189F28-0x00189F58
		private float mBottomDiameterRatio; // 0x44
		[HideInInspector] // 0x00189F58-0x00189F88
		[SerializeField] // 0x00189F58-0x00189F88
		private float mSideLength; // 0x48
		[HideInInspector] // 0x00189F88-0x00189FB8
		[SerializeField] // 0x00189F88-0x00189FB8
		private float mTopDiameter; // 0x4C
		[HideInInspector] // 0x00189FB8-0x00189FE8
		[SerializeField] // 0x00189FB8-0x00189FE8
		private float mBottomDiameter; // 0x50
		private int mFrameIndex; // 0x54
		private int mUpdateFrameIndex; // 0x58
		private float mFutureScale; // 0x5C
		private float mLastTransformScale; // 0x60
	
		// Properties
		public CylinderTarget CylinderTarget { get; } // 0x003E5270-0x003E5278 
		public float SideLength { get; } // 0x003E5278-0x003E527C 
		public float TopDiameter { get; } // 0x003E52C0-0x003E52E8 
		public float BottomDiameter { get; } // 0x003E52E8-0x003E5310 
	
		// Constructors
		public CylinderTargetBehaviour(); // 0x003E5D88-0x003E5DA4
	
		// Methods
		public bool SetSideLength(float value); // 0x003E5310-0x003E5314
		public bool SetTopDiameter(float value); // 0x003E5478-0x003E553C
		public bool SetBottomDiameter(float value); // 0x003E553C-0x003E5600
		public override void OnFrameIndexUpdate(int newFrameIndex); // 0x003E5600-0x003E5640
		protected override bool CorrectScaleImpl(); // 0x003E56B0-0x003E56E4
		protected override void InternalUnregisterTrackable(); // 0x003E5980-0x003E5990
		internal override bool InitializeTarget(Trackable trackable, bool applyTargetScaleToBehaviour); // 0x003E5990-0x003E5BD8
		private float GetScale(); // 0x003E527C-0x003E52C0
		private bool SetScale(float value); // 0x003E5314-0x003E5478
		private void ApplyScale(float value); // 0x003E5640-0x003E56B0
		private void OnValidate(); // 0x003E56E4-0x003E5980
	}

	public class DataSet // TypeDefIndex: 3403
	{
		// Fields
		private IntPtr mDataSetPtr; // 0x08
		private string mPath; // 0x0C
		private VuforiaUnity.StorageType mStorageType; // 0x10
		private readonly Dictionary<int, Trackable> mTrackablesDict; // 0x14
		private const int mMaxTrackableNameLength = 128; // Metadata: 0x0021C172
	
		// Properties
		public string Path { get; } // 0x003E5BE8-0x003E5BF0 
		public VuforiaUnity.StorageType FileStorageType { get; } // 0x003E66F4-0x003E66FC 
		internal IntPtr DataSetPtr { get; } // 0x003E619C-0x003E61A4 
	
		// Nested types
		public enum StorageType // TypeDefIndex: 3404
		{
			STORAGE_APP = 0,
			STORAGE_APPRESOURCE = 1,
			STORAGE_ABSOLUTE = 2
		}
	
		// Constructors
		internal DataSet(IntPtr dataSetPtr); // 0x003E663C-0x003E66F4
	
		// Methods
		public static bool Exists(string name); // 0x003E66FC-0x003E67BC
		public static bool Exists(string path, VuforiaUnity.StorageType storageType); // 0x003E67BC-0x003E691C
		public bool Load(string name); // 0x003E691C-0x003E69A8
		public bool Load(string path, VuforiaUnity.StorageType storageType); // 0x003E69A8-0x003E6D88
		public IEnumerable<Trackable> GetTrackables(); // 0x003E9A0C-0x003E9A84
		public DataSetTrackableBehaviour CreateTrackable(TrackableSource trackableSource, string gameObjectName); // 0x003E9A84-0x003E9B0C
		public DataSetTrackableBehaviour CreateTrackable(TrackableSource trackableSource, GameObject gameObject); // 0x003E9B0C-0x003E9FF8
		public bool Destroy(Trackable trackable, bool destroyGameObject); // 0x003E9FF8-0x003EA468
		public bool HasReachedTrackableLimit(); // 0x003EA468-0x003EA584
		public bool Contains(Trackable trackable); // 0x003EA584-0x003EA604
		public void DestroyAllTrackables(bool destroyGameObject); // 0x003EA604-0x003EA7B4
		private bool CreateImageTargets(); // 0x003E6D88-0x003E74F8
		private bool CreateMultiTargets(); // 0x003E74F8-0x003E7C64
		private bool CreateCylinderTargets(); // 0x003E7C64-0x003E83C4
		private bool CreateVuMarkTemplates(); // 0x003E83C4-0x003E8B30
		private bool CreateModelTargets(); // 0x003E8B30-0x003E92AC
		private bool CreateObjectTargets(); // 0x003E92AC-0x003E9A0C
	}

	public class DatabaseLoadARController : ARController // TypeDefIndex: 3405
	{
		// Fields
		private bool mDatasetsLoaded; // 0x0C
		private List<string> mExternalDatasetRoots; // 0x10
		private readonly HashSet<string> mDataSetsToLoad; // 0x14
		private readonly HashSet<string> mDataSetsToNOTLoad; // 0x18
		private readonly HashSet<string> mDataSetsToActivate; // 0x1C
		private static DatabaseLoadARController mInstance; // 0x00
		private static object mPadlock; // 0x04
	
		// Properties
		public static DatabaseLoadARController Instance { get; } // 0x003D0354-0x003D0560 
	
		// Constructors
		private DatabaseLoadARController(); // 0x003EAC24-0x003EAD14
		static DatabaseLoadARController(); // 0x003EB8B8-0x003EB938
	
		// Methods
		[RuntimeInitializeOnLoadMethod] // 0x0018AC18-0x0018AC2C
		public static void RegisterARController(); // 0x003EAD14-0x003EAD90
		public void LoadDatasets(); // 0x003EAD90-0x003EB69C
		public void AddExternalDatasetSearchDir(string searchDir); // 0x003D0560-0x003D0654
		internal void RegisterDataSetToLoad(string datasetToLoad); // 0x003EAA60-0x003EAB18
		internal void DoNotLoadDataset(string datasetToLoad); // 0x003EB69C-0x003EB74C
		internal void RegisterDataSetToActivate(string datasetToActivate); // 0x003EAB18-0x003EAB98
		protected override void Start(); // 0x003EB74C-0x003EB80C
		protected override void OnDestroy(); // 0x003EB80C-0x003EB8B8
	}

	public abstract class DataSetTrackableBehaviour : TrackableBehaviour, WorldCenterTrackableBehaviour // TypeDefIndex: 3406
	{
		// Fields
		[HideInInspector] // 0x00189FE8-0x0018A018
		[SerializeField] // 0x00189FE8-0x0018A018
		protected string mDataSetPath; // 0x38
	
		// Properties
		internal string DataSetPath { get; } // 0x003EAB98-0x003EABA0 
		internal string DataSetName { get; } // 0x003EAA58-0x003EAA60 
	
		// Constructors
		protected DataSetTrackableBehaviour(); // 0x003E5DA4-0x003E5E10
	
		// Methods
		protected virtual void Awake(); // 0x003EA910-0x003EAA58
		internal virtual bool InitializeTarget(Trackable trackable, bool applyTargetScaleToBehaviour); // 0x003E5BD8-0x003E5BE0
		internal static string GetDataSetName(string datasetPath); // 0x003EABA0-0x003EAC24
	}

	public struct ObjectTargetData // TypeDefIndex: 3407
	{
		// Fields
		public int id; // 0x00
		public Vector3 size; // 0x04
	}

	public interface ObjectTarget : Trackable // TypeDefIndex: 3408
	{
		// Methods
		Vector3 GetSize();
		float GetLargestSizeComponent();
		bool SetSize(Vector3 size);
	}

	public struct RectangleData // TypeDefIndex: 3409
	{
		// Fields
		public float leftTopX; // 0x00
		public float leftTopY; // 0x04
		public float rightBottomX; // 0x08
		public float rightBottomY; // 0x0C
	}

	public struct RectangleIntData // TypeDefIndex: 3410
	{
		// Fields
		public int leftTopX; // 0x00
		public int leftTopY; // 0x04
		public int rightBottomX; // 0x08
		public int rightBottomY; // 0x0C
	}

	public struct OrientedBoundingBox // TypeDefIndex: 3411
	{
		// Fields
		[CompilerGenerated] // 0x0018A018-0x0018A028
		private Vector2 <Center>k__BackingField; // 0x00
		[CompilerGenerated] // 0x0018A028-0x0018A038
		private Vector2 <HalfExtents>k__BackingField; // 0x08
		[CompilerGenerated] // 0x0018A038-0x0018A048
		private float <Rotation>k__BackingField; // 0x10
	
		// Properties
		public Vector2 Center { [CompilerGenerated] /* 0x0018AC2C-0x0018AC3C */ get; [CompilerGenerated] /* 0x0018AC3C-0x0018AC4C */ private set; } // 0x0031C9BC-0x0031C9D0 0x0031C9D0-0x0031C9F0
		public Vector2 HalfExtents { [CompilerGenerated] /* 0x0018AC4C-0x0018AC5C */ get; [CompilerGenerated] /* 0x0018AC5C-0x0018AC6C */ private set; } // 0x0031C9F0-0x0031CA04 0x0031CA04-0x0031CA18
		public float Rotation { [CompilerGenerated] /* 0x0018AC6C-0x0018AC7C */ get; [CompilerGenerated] /* 0x0018AC7C-0x0018AC8C */ private set; } // 0x0031CA18-0x0031CA20 0x0031CA20-0x0031CA28
	
		// Constructors
		public OrientedBoundingBox(Vector2 center, Vector2 halfExtents, float rotation); // 0x0031C988-0x0031C9BC
	}

	public struct OrientedBoundingBox3D // TypeDefIndex: 3412
	{
		// Fields
		[CompilerGenerated] // 0x0018A048-0x0018A058
		private Vector3 <Center>k__BackingField; // 0x00
		[CompilerGenerated] // 0x0018A058-0x0018A068
		private Vector3 <HalfExtents>k__BackingField; // 0x0C
		[CompilerGenerated] // 0x0018A068-0x0018A078
		private float <RotationY>k__BackingField; // 0x18
	
		// Properties
		public Vector3 Center { [CompilerGenerated] /* 0x0018AC8C-0x0018AC9C */ get; [CompilerGenerated] /* 0x0018AC9C-0x0018ACAC */ private set; } // 0x0031CA54-0x0031CA68 0x0031CA68-0x0031CA74
		public Vector3 HalfExtents { [CompilerGenerated] /* 0x0018ACAC-0x0018ACBC */ get; [CompilerGenerated] /* 0x0018ACBC-0x0018ACCC */ private set; } // 0x0031CA74-0x0031CA88 0x0031CA88-0x0031CA94
		public float RotationY { [CompilerGenerated] /* 0x0018ACCC-0x0018ACDC */ get; [CompilerGenerated] /* 0x0018ACDC-0x0018ACEC */ private set; } // 0x0031CA94-0x0031CA9C 0x0031CA9C-0x0031CAA4
	
		// Constructors
		public OrientedBoundingBox3D(Vector3 center, Vector3 halfExtents, float rotationY); // 0x0031CA28-0x0031CA54
	}

	public interface IObjectRecoEventHandler // TypeDefIndex: 3413
	{
		// Methods
		void OnInitialized(TargetFinder targetFinder);
		void OnInitError(TargetFinder.InitState initError);
		void OnUpdateError(TargetFinder.UpdateState updateError);
		void OnStateChanged(bool scanning);
		void OnNewSearchResult(TargetFinder.TargetSearchResult targetSearchResult);
	}

	public interface IUnityPlayer : IDisposable // TypeDefIndex: 3414
	{
		// Methods
		void LoadNativeLibraries();
		void InitializePlatform();
		VuforiaUnity.InitError InitializeVuforia(string licenseKey);
		void ResetPlatformCoordinateSystem();
		void Update();
		void OnPause();
		void OnResume();
		void OnDestroy();
	}

	internal class CloudRecoImageTargetImpl : ObjectTargetImpl, ImageTarget // TypeDefIndex: 3415
	{
		// Fields
		private readonly Vector3 mSize; // 0x14
	
		// Properties
		public ImageTargetType ImageTargetType { get; } // 0x003E0DC0-0x003E0DC8 
	
		// Constructors
		public CloudRecoImageTargetImpl(string name, int id, Vector3 size); // 0x003E0D04-0x003E0DC0
	
		// Methods
		public new bool SetSize(Vector3 size); // 0x003E0DC8-0x003E0E58
		public VirtualButton CreateVirtualButton(string name, RectangleData area); // 0x003E0E58-0x003E0EE8
		public VirtualButton GetVirtualButtonByName(string name); // 0x003E0EE8-0x003E0F78
		public IEnumerable<VirtualButton> GetVirtualButtons(); // 0x003E0F78-0x003E1038
		public bool DestroyVirtualButton(VirtualButton vb); // 0x003E1038-0x003E10C8
	}

	internal class CylinderTargetImpl : DataSetObjectTargetImpl, CylinderTarget // TypeDefIndex: 3416
	{
		// Fields
		private float mSideLength; // 0x18
		private float mTopDiameter; // 0x1C
		private float mBottomDiameter; // 0x20
		private readonly CustomDataSetTargetSize mCustomTargetSize; // 0x24
	
		// Constructors
		public CylinderTargetImpl(string name, int id, DataSet dataSet); // 0x003E5E10-0x003E6168
	
		// Methods
		public float GetSideLength(); // 0x003E5BF8-0x003E5C00
		public float GetTopDiameter(); // 0x003E5BF0-0x003E5BF8
		public float GetBottomDiameter(); // 0x003E5C00-0x003E5C08
		public bool SetSideLength(float sideLength); // 0x003E5C08-0x003E5D88
		public bool SetTopDiameter(float topDiameter); // 0x003E62A8-0x003E6428
		public bool SetBottomDiameter(float bottomDiameter); // 0x003E6428-0x003E65A8
		private void SetNewSize(Vector3 newSize); // 0x003E65A8-0x003E663C
		private void ScaleCylinder(float scale); // 0x003E61A4-0x003E62A8
	}

	public enum ImageTargetType // TypeDefIndex: 3417
	{
		PREDEFINED = 0,
		USER_DEFINED = 1,
		CLOUD_RECO = 2
	}

	public struct ImageTargetData // TypeDefIndex: 3418
	{
		// Fields
		public int id; // 0x00
		public Vector3 size; // 0x04
	}

	public interface ImageTarget : ObjectTarget // TypeDefIndex: 3419
	{
		// Properties
		ImageTargetType ImageTargetType { get; }
	
		// Methods
		VirtualButton CreateVirtualButton(string name, RectangleData area);
		VirtualButton GetVirtualButtonByName(string name);
		IEnumerable<VirtualButton> GetVirtualButtons();
		bool DestroyVirtualButton(VirtualButton vb);
	}

	public class ImageTargetBuilder // TypeDefIndex: 3420
	{
		// Fields
		private TrackableSource mTrackableSource; // 0x08
		private bool mIsScanning; // 0x0C
	
		// Nested types
		public enum FrameQuality // TypeDefIndex: 3421
		{
			FRAME_QUALITY_NONE = -1,
			FRAME_QUALITY_LOW = 0,
			FRAME_QUALITY_MEDIUM = 1,
			FRAME_QUALITY_HIGH = 2
		}
	
		// Constructors
		internal ImageTargetBuilder(); // 0x0030A258-0x0030A260
	
		// Methods
		public bool Build(string targetName, float screenSizeWidth); // 0x0030A260-0x0030A404
		public void StartScan(); // 0x0030A404-0x0030A518
		public void StopScan(); // 0x0030A518-0x0030A62C
		public FrameQuality GetFrameQuality(); // 0x0030A62C-0x0030A734
		public TrackableSource GetTrackableSource(); // 0x0030A734-0x0030A89C
		internal bool IsScanning(); // 0x0030A89C-0x0030A8A4
	}

	internal class ImageTargetImpl : DataSetObjectTargetImpl, ImageTarget // TypeDefIndex: 3422
	{
		// Fields
		private readonly ImageTargetType mImageTargetType; // 0x18
		private readonly Dictionary<int, VirtualButton> mVirtualButtons; // 0x1C
	
		// Properties
		public ImageTargetType ImageTargetType { get; } // 0x0030BC90-0x0030BC98 
	
		// Constructors
		public ImageTargetImpl(string name, int id, ImageTargetType imageTargetType, DataSet dataSet); // 0x0030B2F0-0x0030B3B0
	
		// Methods
		public VirtualButton CreateVirtualButton(string name, RectangleData area); // 0x0030BC98-0x0030BDA8
		public VirtualButton GetVirtualButtonByName(string name); // 0x0030C288-0x0030C454
		public IEnumerable<VirtualButton> GetVirtualButtons(); // 0x0030C454-0x0030C4CC
		public bool DestroyVirtualButton(VirtualButton vb); // 0x0030C4CC-0x0030C9AC
		private VirtualButton CreateNewVirtualButtonInNative(string name, RectangleData rectangleData); // 0x0030BDA8-0x0030C288
		private bool UnregisterVirtualButtonInNative(VirtualButton vb); // 0x0030CF6C-0x0030D280
		private void CreateVirtualButtonsFromNative(); // 0x0030B3B0-0x0030BC90
	}

	internal interface IPremiumObjectFactory // TypeDefIndex: 3423
	{
	}

	internal class MultiTargetImpl : DataSetObjectTargetImpl, MultiTarget // TypeDefIndex: 3424
	{
		// Nested types
		internal class MultiSetTargetSize : DisabledSetTargetSize // TypeDefIndex: 3425
		{
			// Fields
			private IntPtr mDataSetPtr; // 0x14
			private string mName; // 0x18
	
			// Constructors
			public MultiSetTargetSize(IntPtr dataSetPtr, string name); // 0x00316A8C-0x00316B48
	
			// Methods
			public override float GetLargestSizeComponent(); // 0x00316B48-0x00316C68
		}
	
		// Constructors
		public MultiTargetImpl(string name, int id, DataSet dataSet); // 0x003169CC-0x00316A8C
	}

	internal class DefaultWebCamTexAdaptor : IWebCamTexAdaptor // TypeDefIndex: 3426
	{
		// Fields
		private readonly Texture2D mTexture; // 0x08
		private bool mPseudoPlaying; // 0x0C
		private readonly double mMsBetweenFrames; // 0x10
		private DateTime mLastFrame; // 0x18
		private const string ERROR_MSG = "No camera connected!\nTo run your application using Play Mode, please connect a webcam to your computer."; // Metadata: 0x0021C19E
	
		// Properties
		public bool DidUpdateThisFrame { get; } // 0x003EF76C-0x003EF89C 
		public bool IsPlaying { get; } // 0x003EF89C-0x003EF8A4 
		public Texture Texture { get; } // 0x003EF8A4-0x003EF8B0 
	
		// Constructors
		public DefaultWebCamTexAdaptor(int requestedFPS, VuforiaRenderer.Vec2I requestedTextureSize); // 0x003EF8B0-0x003EFB5C
	
		// Methods
		public void Play(); // 0x003EFB5C-0x003EFB68
		public void Stop(); // 0x003EFB68-0x003EFB74
		public void CheckPermissions(); // 0x003EFB74-0x003EFB78
	}

	internal class PlayModeEditorUtility // TypeDefIndex: 3427
	{
		// Fields
		private static IPlayModeEditorUtility sInstance; // 0x00
	
		// Properties
		public static IPlayModeEditorUtility Instance { get; set; } // 0x00204908-0x002049B4 0x002049BC-0x00204A20
	
		// Nested types
		private class NullPlayModeEditorUtility : IPlayModeEditorUtility // TypeDefIndex: 3428
		{
			// Constructors
			public NullPlayModeEditorUtility(); // 0x002049B4-0x002049BC
	
			// Methods
			public void DisplayDialog(string title, string message, string ok); // 0x00204A28-0x00204A2C
			public WebCamProfile.ProfileCollection LoadAndParseWebcamProfiles(); // 0x00204A2C-0x00204A44
			public void RestartPlayMode(); // 0x00204A44-0x00204A48
			public void ShowErrorInMouseOverWindow(string error); // 0x00204A48-0x00204A4C
			public bool IsVuforiaEnabledInPlayerSettings(); // 0x00204A4C-0x00204A54
			public bool IsVuforiaActiveAndEULAAccepted(); // 0x00204A54-0x00204C34
			public string GetEmulatorDatabasePath(); // 0x00204C34-0x00204C98
		}
	
		// Constructors
		public PlayModeEditorUtility(); // 0x00204A20-0x00204A28
	}

	internal class PremiumObjectFactory // TypeDefIndex: 3429
	{
		// Fields
		private static IPremiumObjectFactory sInstance; // 0x00
	
		// Properties
		internal static IPremiumObjectFactory Instance { get; set; } // 0x0020954C-0x002095F8 0x00209600-0x00209664
	
		// Nested types
		private class NullPremiumObjectFactory : IPremiumObjectFactory // TypeDefIndex: 3430
		{
			// Constructors
			public NullPremiumObjectFactory(); // 0x002095F8-0x00209600
		}
	
		// Constructors
		public PremiumObjectFactory(); // 0x00209664-0x0020966C
	}

	internal static class TypeMapping // TypeDefIndex: 3431
	{
		// Fields
		private static Dictionary<Type, ushort> sTypes; // 0x00
	
		// Constructors
		static TypeMapping(); // 0x0021FBD0-0x0022006C
	
		// Methods
		internal static ushort GetTypeID(Type type); // 0x002073C0-0x0020747C
	}

	internal interface IWebCamTexAdaptor // TypeDefIndex: 3432
	{
		// Properties
		bool DidUpdateThisFrame { get; }
		bool IsPlaying { get; }
		Texture Texture { get; }
	
		// Methods
		void Play();
		void Stop();
		void CheckPermissions();
	}

	internal class WebCamTexAdaptor : IWebCamTexAdaptor // TypeDefIndex: 3433
	{
		// Fields
		private WebCamTexture mWebCamTexture; // 0x08
		private AsyncOperation mCheckCameraPermissions; // 0x0C
	
		// Properties
		public bool DidUpdateThisFrame { get; } // 0x00B01044-0x00B01070 
		public bool IsPlaying { get; } // 0x00B01070-0x00B0109C 
		public Texture Texture { get; } // 0x00B0109C-0x00B010A4 
	
		// Constructors
		public WebCamTexAdaptor(string deviceName, WebCamProfile.ProfileData profile); // 0x00B00E04-0x00B00F24
	
		// Methods
		public void Play(); // 0x00B010A4-0x00B010FC
		public void Stop(); // 0x00B010FC-0x00B01128
		public void CheckPermissions(); // 0x00B01128-0x00B01278
	}

	internal class VuforiaNullWrapper : IVuforiaWrapper // TypeDefIndex: 3434
	{
		// Constructors
		public VuforiaNullWrapper(); // 0x0052A1A8-0x0052A1B0
	
		// Methods
		public int CameraDeviceDeinitCamera(); // 0x005293EC-0x005293F4
		public void CameraDeviceGetCameraField(IntPtr cameraField, int idx); // 0x005293F4-0x005293F8
		public int CameraDeviceGetCameraFieldOfViewRads(IntPtr fovVectorContainer); // 0x005293F8-0x00529400
		public int CameraDeviceGetFieldBool(string key, IntPtr value); // 0x00529400-0x00529408
		public int CameraDeviceGetFieldFloat(string key, IntPtr value); // 0x00529408-0x00529410
		public int CameraDeviceGetFieldInt64(string key, IntPtr value); // 0x00529410-0x00529418
		public int CameraDeviceGetFieldInt64Range(string key, IntPtr intRange); // 0x00529418-0x00529420
		public int CameraDeviceGetFieldString(string key, StringBuilder value, int maxLength); // 0x00529420-0x00529428
		public int CameraDeviceGetNumCameraFields(); // 0x00529428-0x00529430
		public int CameraDeviceGetNumVideoModes(); // 0x00529430-0x00529438
		public void CameraDeviceGetVideoMode(int idx, IntPtr videoMode); // 0x00529438-0x0052943C
		public int CameraDeviceInitCamera(); // 0x0052943C-0x00529444
		public int CameraDeviceSelectVideoMode(int idx); // 0x00529444-0x0052944C
		public void CameraDeviceSetCameraConfiguration(int width, int height); // 0x0052944C-0x00529450
		public int CameraDeviceSetFieldBool(string key, bool value); // 0x00529450-0x00529458
		public int CameraDeviceSetFieldFloat(string key, float value); // 0x00529458-0x00529460
		public int CameraDeviceSetFieldInt64(string key, long value); // 0x00529460-0x00529468
		public int CameraDeviceSetFieldInt64Range(string key, long intRangeFrom, long intRangeTo); // 0x00529468-0x00529470
		public int CameraDeviceSetFieldString(string key, string value); // 0x00529470-0x00529478
		public int CameraDeviceSetFlashTorchMode(int on); // 0x00529478-0x00529480
		public int CameraDeviceSetFocusMode(int focusMode); // 0x00529480-0x00529488
		public int CameraDeviceStartCamera(); // 0x00529488-0x00529490
		public int CameraDeviceStopCamera(); // 0x00529490-0x00529498
		public void CustomViewerParameters_AddDistortionCoefficient(IntPtr obj, float val); // 0x00529498-0x0052949C
		public void CustomViewerParameters_ClearDistortionCoefficients(IntPtr obj); // 0x0052949C-0x005294A0
		public void CustomViewerParameters_delete(IntPtr obj); // 0x005294A0-0x005294A4
		public IntPtr CustomViewerParameters_new(float version, string name, string manufacturer); // 0x005294A4-0x005294F0
		public void CustomViewerParameters_SetButtonType(IntPtr obj, int val); // 0x005294F0-0x005294F4
		public void CustomViewerParameters_SetContainsMagnet(IntPtr obj, bool val); // 0x005294F4-0x005294F8
		public void CustomViewerParameters_SetFieldOfView(IntPtr obj, IntPtr val); // 0x005294F8-0x005294FC
		public void CustomViewerParameters_SetInterLensDistance(IntPtr obj, float val); // 0x005294FC-0x00529500
		public void CustomViewerParameters_SetLensCentreToTrayDistance(IntPtr obj, float val); // 0x00529500-0x00529504
		public void CustomViewerParameters_SetScreenToLensDistance(IntPtr obj, float val); // 0x00529504-0x00529508
		public void CustomViewerParameters_SetTrayAlignment(IntPtr obj, int val); // 0x00529508-0x0052950C
		public int CylinderTargetGetDimensions(IntPtr dataSetPtr, string trackableName, IntPtr dimensionPtr); // 0x0052950C-0x00529514
		public int CylinderTargetSetBottomDiameter(IntPtr dataSetPtr, string trackableName, float bottomDiameter); // 0x00529514-0x0052951C
		public int CylinderTargetSetSideLength(IntPtr dataSetPtr, string trackableName, float sideLength); // 0x0052951C-0x00529524
		public int CylinderTargetSetTopDiameter(IntPtr dataSetPtr, string trackableName, float topDiameter); // 0x00529524-0x0052952C
		public int DataSetCreateTrackable(IntPtr dataSetPtr, IntPtr trackableSourcePtr, StringBuilder trackableName, int nameMaxLength, IntPtr trackableData); // 0x0052952C-0x00529534
		public int DataSetDestroyTrackable(IntPtr dataSetPtr, int trackableId); // 0x00529534-0x0052953C
		public int DataSetExists(string relativePath, int storageType); // 0x0052953C-0x00529544
		public int DataSetGetNumTrackableType(int trackableType, IntPtr dataSetPtr); // 0x00529544-0x0052954C
		public int DataSetGetTrackableName(IntPtr dataSetPtr, int trackableId, StringBuilder trackableName, int nameMaxLength); // 0x0052954C-0x00529554
		public IntPtr DataSetGetTrackablePtr(IntPtr dataSetPtr, int trackableId); // 0x00529554-0x005295A4
		public int DataSetGetTrackablesOfType(int trackableType, IntPtr trackableDataArray, int trackableDataArrayLength, IntPtr dataSetPtr); // 0x005295A4-0x005295AC
		public int DataSetHasReachedTrackableLimit(IntPtr dataSetPtr); // 0x005295AC-0x005295B4
		public int DataSetLoad(string relativePath, int storageType, IntPtr dataSetPtr); // 0x005295B4-0x005295BC
		public void DeinitFrameState(IntPtr frameState); // 0x005295BC-0x005295C0
		public int Device_GetMode(); // 0x005295C0-0x005295C8
		public IntPtr Device_GetSelectedViewer(); // 0x005295C8-0x00529618
		public IntPtr Device_GetViewerList(); // 0x00529618-0x00529668
		public int Device_IsViewerPresent(); // 0x00529668-0x00529670
		public int Device_SelectViewer(IntPtr vp); // 0x00529670-0x00529678
		public int Device_SetMode(int mode); // 0x00529678-0x00529680
		public void Device_SetViewerPresent(bool present); // 0x00529680-0x00529684
		public int DeviceIsEyewearDevice(); // 0x00529684-0x0052968C
		public int DiagnosticsRecorderAddScreenshot(string imageFilePath, int storageType); // 0x0052968C-0x00529694
		public int DiagnosticsRecorderAddUserComment(string comment); // 0x00529694-0x0052969C
		public int DiagnosticsRecorderClearAll(); // 0x0052969C-0x005296A4
		public int DiagnosticsRecorderClearUnpinned(); // 0x005296A4-0x005296AC
		public int DiagnosticsRecorderDeinit(); // 0x005296AC-0x005296B4
		public IntPtr DiagnosticsRecorderGenerateDiagnostics(string fileNamePrefix); // 0x005296B4-0x00529704
		public int DiagnosticsRecorderInit(string diagnosticsDirectory, int storageType); // 0x00529704-0x0052970C
		public int DiagnosticsRecorderStart(); // 0x0052970C-0x00529714
		public int DiagnosticsRecorderStop(); // 0x00529714-0x0052971C
		public int EyewearCPMClearProfile(int profileID); // 0x0052971C-0x00529724
		public int EyewearCPMGetActiveProfile(); // 0x00529724-0x0052972C
		public int EyewearCPMGetCameraToEyePose(int profileID, int eyeID, IntPtr matrix); // 0x0052972C-0x00529734
		public int EyewearCPMGetEyeProjection(int profileID, int eyeID, IntPtr matrix); // 0x00529734-0x0052973C
		public int EyewearCPMGetMaxCount(); // 0x0052973C-0x00529744
		public IntPtr EyewearCPMGetProfileName(int profileID); // 0x00529744-0x00529794
		public int EyewearCPMGetUsedCount(); // 0x00529794-0x0052979C
		public int EyewearCPMIsProfileUsed(int profileID); // 0x0052979C-0x005297A4
		public int EyewearCPMSetActiveProfile(int profileID); // 0x005297A4-0x005297AC
		public int EyewearCPMSetCameraToEyePose(int profileID, int eyeID, IntPtr matrix); // 0x005297AC-0x005297B4
		public int EyewearCPMSetEyeProjection(int profileID, int eyeID, IntPtr matrix); // 0x005297B4-0x005297BC
		public int EyewearCPMSetProfileName(int profileID, IntPtr name); // 0x005297BC-0x005297C4
		public int EyewearDeviceGetScreenOrientation(); // 0x005297C4-0x005297CC
		public int EyewearDeviceIsDisplayExtended(); // 0x005297CC-0x005297D4
		public int EyewearDeviceIsDisplayExtendedGLOnly(); // 0x005297D4-0x005297DC
		public int EyewearDeviceIsDualDisplay(); // 0x005297DC-0x005297E4
		public int EyewearDeviceIsPredictiveTrackingEnabled(); // 0x005297E4-0x005297EC
		public int EyewearDeviceIsSeeThru(); // 0x005297EC-0x005297F4
		public int EyewearDeviceSetDisplayExtended(bool enable); // 0x005297F4-0x005297FC
		public int EyewearDeviceSetPredictiveTracking(bool enable); // 0x005297FC-0x00529804
		public float EyewearUserCalibratorGetMaxScaleHint(); // 0x00529804-0x0052980C
		public float EyewearUserCalibratorGetMinScaleHint(); // 0x0052980C-0x00529814
		public int EyewearUserCalibratorGetProjectionMatrix(IntPtr readingsDataArray, int numReadings, IntPtr cameraToEyeContainer, IntPtr projectionContainer); // 0x00529814-0x0052981C
		public int EyewearUserCalibratorInit(int surfaceWidth, int surfaceHeight, int targetWidth, int targetHeight); // 0x0052981C-0x00529824
		public int EyewearUserCalibratorIsStereoStretched(); // 0x00529824-0x0052982C
		public void FrameCounterGetBenchmarkingData(IntPtr benchmarkingData); // 0x0052982C-0x00529830
		public int GetCameraThreadID(); // 0x00529830-0x00529838
		public void GetVuforiaLibraryVersion(StringBuilder value, int maxLength); // 0x00529838-0x0052983C
		public int GuideViewGetImage(IntPtr guideViewPtr, IntPtr imageDataPtr); // 0x0052983C-0x00529844
		public IntPtr GuideViewGetName(IntPtr guideViewPtr); // 0x00529844-0x00529894
		public int GuideViewGetPose(IntPtr guideViewPtr, IntPtr position, IntPtr quaternion); // 0x00529894-0x0052989C
		public void GuideViewSetPose(IntPtr guideViewPtr, IntPtr position, IntPtr quaternion); // 0x0052989C-0x005298A0
		public int HasSurfaceBeenRecreated(); // 0x005298A0-0x005298A8
		public int ImageTargetBuilderBuild(string name, float screenSizeWidth); // 0x005298A8-0x005298B0
		public int ImageTargetBuilderGetFrameQuality(); // 0x005298B0-0x005298B8
		public IntPtr ImageTargetBuilderGetTrackableSource(); // 0x005298B8-0x00529908
		public void ImageTargetBuilderStartScan(); // 0x00529908-0x0052990C
		public void ImageTargetBuilderStopScan(); // 0x0052990C-0x00529910
		public int ImageTargetCreateVirtualButton(IntPtr dataSetPtr, string trackableName, string virtualButtonName, IntPtr rectData); // 0x00529910-0x00529918
		public int ImageTargetDestroyVirtualButton(IntPtr dataSetPtr, string trackableName, string virtualButtonName); // 0x00529918-0x00529920
		public int ImageTargetGetNumVirtualButtons(IntPtr dataSetPtr, string trackableName); // 0x00529920-0x00529928
		public int ImageTargetGetVirtualButtonName(IntPtr dataSetPtr, string trackableName, int idx, StringBuilder vbName, int nameMaxLength); // 0x00529928-0x00529930
		public int ImageTargetGetVirtualButtons(IntPtr virtualButtonDataArray, IntPtr rectangleDataArray, int virtualButtonDataArrayLength, IntPtr dataSetPtr, string trackableName); // 0x00529930-0x00529938
		public void InitFrameState(IntPtr frameState); // 0x00529938-0x0052993C
		public void InitPlatformNative(); // 0x0052993C-0x00529940
		public int ModelTargetGetActiveGuideViewIndexFromTrackable(IntPtr trackablePtr); // 0x00529940-0x00529948
		public int ModelTargetGetBoundingBox(IntPtr dataSetPtr, string trackableName, IntPtr centerPtr, IntPtr halfExtents); // 0x00529948-0x00529950
		public IntPtr ModelTargetGetGuideViewFromTrackable(IntPtr trackablePtr, int index); // 0x00529950-0x005299A0
		public int ModelTargetGetNumGuideViewsFromTrackable(IntPtr trackablePtr); // 0x005299A0-0x005299A8
		public int ModelTargetGetSize(IntPtr dataSetPtr, string trackableName, IntPtr sizePtr); // 0x005299A8-0x005299B0
		public int ModelTargetSetActiveGuideViewIndexFromTrackable(IntPtr trackablePtr, int idx); // 0x005299B0-0x005299B8
		public int ModelTargetSetSize(IntPtr dataSetPtr, string trackableName, IntPtr sizePtr); // 0x005299B8-0x005299C0
		public float MultiTargetGetLargestSizeComponent(IntPtr dataSetPtr, string trackableName); // 0x005299C0-0x005299C8
		public void NativeUnity_disableDistortion(bool disable); // 0x005299C8-0x005299CC
		public void NativeUnity_DisableEyeTextureOverride(); // 0x005299CC-0x005299D0
		public void NativeUnity_EnableEyeTextureOverride(int eyeTextureWidth, int eyeTextureHeight, float vertFoVRad); // 0x005299D0-0x005299D4
		public int NativeUnity_IsVuforiaVRDeviceReady(); // 0x005299D4-0x005299DC
		public void NativeUnity_ResetStereoProjectionMatrices(); // 0x005299DC-0x005299E0
		public void NativeUnity_SetDeviceConnected(bool connected); // 0x005299E0-0x005299E4
		public void NativeUnity_SetDistortionMeshNeedsRefresh(bool enabled); // 0x005299E4-0x005299E8
		public void NativeUnity_SetEyeOffsets(IntPtr leftEyePosition, IntPtr leftEyeRotation, IntPtr rightEyePosition, IntPtr rightEyeRotation); // 0x005299E8-0x005299EC
		public void NativeUnity_SetSingleCullingMatrix(IntPtr projectionMatrix, IntPtr viewMatrix); // 0x005299EC-0x005299F0
		public void NativeUnity_SetStereoProjectionMatrix(int eyeId, IntPtr projectionMatrix); // 0x005299F0-0x005299F4
		public void NativeUnity_SetVuforiaVRDeviceReady(bool isReady); // 0x005299F4-0x005299F8
		public int ObjectTargetGetSize(IntPtr dataSetPtr, string trackableName, IntPtr sizePtr); // 0x005299F8-0x00529A00
		public int ObjectTargetSetSize(IntPtr dataSetPtr, string trackableName, IntPtr sizePtr); // 0x00529A00-0x00529A08
		public int ObjectTrackerActivateDataSet(IntPtr dataSetPtr); // 0x00529A08-0x00529A10
		public IntPtr ObjectTrackerCreateDataSet(); // 0x00529A10-0x00529A60
		public int ObjectTrackerDeactivateDataSet(IntPtr dataSetPtr); // 0x00529A60-0x00529A68
		public int ObjectTrackerDestroyDataSet(IntPtr dataSetPtr); // 0x00529A68-0x00529A70
		public IntPtr ObjectTrackerGetTargetFinder(int targetFinderType); // 0x00529A70-0x00529AC0
		public void OnPause(); // 0x00529AC0-0x00529AC4
		public void OnResume(); // 0x00529AC4-0x00529AC8
		public void OnSurfaceChanged(int width, int height); // 0x00529AC8-0x00529ACC
		public int PositionalDeviceTracker_CreateAnchorFromHitTestResult(string name, IntPtr hitTestResult, IntPtr anchorData); // 0x00529ACC-0x00529AD4
		public int PositionalDeviceTracker_CreateAnchorFromPose(string name, IntPtr unityPosition, IntPtr unityOrientation, IntPtr anchorData); // 0x00529AD4-0x00529ADC
		public int PositionalDeviceTracker_DestroyAnchor(int anchor); // 0x00529ADC-0x00529AE4
		public int PositionalDeviceTracker_Reset(); // 0x00529AE4-0x00529AEC
		public void QcarAddCameraFrame(IntPtr pixels, int width, int height, int format, int stride, int frameIdx, int flipHorizontally); // 0x00529AEC-0x00529AF0
		public void QcarDeinit(); // 0x00529AF0-0x00529AF4
		public int QcarGetActiveFusionProvider(); // 0x00529AF4-0x00529AFC
		public int QcarGetBufferSize(int width, int height, int format); // 0x00529AFC-0x00529B04
		public int QcarInit(string licenseKey); // 0x00529B04-0x00529B0C
		public int QcarSetAllowedFusionProviders(int providerTypes); // 0x00529B0C-0x00529B14
		public int QcarSetDriverLibrary(string libraryName, IntPtr userData); // 0x00529B14-0x00529B1C
		public int QcarSetFrameFormat(int format, int enabled); // 0x00529B1C-0x00529B24
		public int QcarSetHint(uint hint, int value); // 0x00529B24-0x00529B2C
		public int RecorderInit(string filePath); // 0x00529B2C-0x00529B34
		public int RecorderStart(); // 0x00529B34-0x00529B3C
		public int RecorderStop(); // 0x00529B3C-0x00529B44
		public IntPtr RendererCreateNativeTexture(uint width, uint height, int format); // 0x00529B44-0x00529B90
		public int RendererGetGraphicsAPI(); // 0x00529B90-0x00529B98
		public int RendererGetRecommendedFps(int flags); // 0x00529B98-0x00529BA0
		public IntPtr RendererGetRenderEventCallback(); // 0x00529BA0-0x00529BF0
		public void RendererGetVideoBackgroundCfg(IntPtr bgCfg); // 0x00529BF0-0x00529BF4
		public int RendererGetVideoBackgroundTextureInfo(IntPtr texInfo); // 0x00529BF4-0x00529BFC
		public IntPtr RendererGetVideoTextureUpdateCallback(); // 0x00529BFC-0x00529C4C
		public int RendererIsVideoBackgroundTextureInfoAvailable(); // 0x00529C4C-0x00529C54
		public void RendererRequestNativeTextureCreation(uint width, uint height, int format); // 0x00529C54-0x00529C58
		public void RendererSetVideoBackgroundCfg(IntPtr bgCfg); // 0x00529C58-0x00529C5C
		public void RendererSetVideoBackgroundRenderingInfo(int format, int width, int height); // 0x00529C5C-0x00529C60
		public int RendererSetVideoBackgroundTextureID(int textureID); // 0x00529C60-0x00529C68
		public int RendererSetVideoBackgroundTexturePtr(IntPtr texturePtr); // 0x00529C68-0x00529C70
		public IntPtr RendererTryGetVideoBackgroundTexturePtr(); // 0x00529C70-0x00529CC0
		public void RenderingPrimitives_DeleteCopy(); // 0x00529CC0-0x00529CC4
		public void RenderingPrimitives_GetDistortionMesh(int viewId, IntPtr meshData); // 0x00529CC4-0x00529CC8
		public void RenderingPrimitives_GetDistortionMeshSize(int viewId, IntPtr size); // 0x00529CC8-0x00529CCC
		public void RenderingPrimitives_GetDistortionTextureViewport(int viewID, IntPtr viewportContainer); // 0x00529CCC-0x00529CD0
		public void RenderingPrimitives_GetEffectiveFov(int viewID, IntPtr fovContainer); // 0x00529CD0-0x00529CD4
		public void RenderingPrimitives_GetEyeDisplayAdjustmentMatrix(int viewID, IntPtr matrixContainer); // 0x00529CD4-0x00529CD8
		public void RenderingPrimitives_GetNormalizedViewport(int viewID, IntPtr viewportContainer); // 0x00529CD8-0x00529CDC
		public void RenderingPrimitives_GetProjectionMatrix(int viewID, float near, float far, IntPtr projectionContainer, int screenOrientation); // 0x00529CDC-0x00529CE0
		public void RenderingPrimitives_GetVideoBackgroundProjectionMatrix(int viewID, float near, float far, IntPtr projectionContainer, int screenOrientation); // 0x00529CE0-0x00529CE4
		public void RenderingPrimitives_GetViewport(int viewID, IntPtr viewportContainer); // 0x00529CE4-0x00529CE8
		public void RenderingPrimitives_GetViewportCentreToEyeAxis(int viewID, IntPtr vectorContainer); // 0x00529CE8-0x00529CEC
		public void RenderingPrimitives_UpdateCopy(); // 0x00529CEC-0x00529CF0
		public int RotationalDeviceTracker_GetModelCorrectionMode(); // 0x00529CF0-0x00529CF8
		public void RotationalDeviceTracker_GetModelCorrectionTransform(IntPtr pivot); // 0x00529CF8-0x00529CFC
		public int RotationalDeviceTracker_GetPosePrediction(); // 0x00529CFC-0x00529D04
		public int RotationalDeviceTracker_Recenter(); // 0x00529D04-0x00529D0C
		public int RotationalDeviceTracker_SetModelCorrectionMode(int mode); // 0x00529D0C-0x00529D14
		public int RotationalDeviceTracker_SetModelCorrectionModeWithTransform(int mode, IntPtr pivot); // 0x00529D14-0x00529D1C
		public int RotationalDeviceTracker_SetPosePrediction(bool mode); // 0x00529D1C-0x00529D24
		public void SetApplicationEnvironment(string unityVersionString, int sdkWrapperType); // 0x00529D24-0x00529D28
		public int SetHolographicAppCS(IntPtr appSpecifiedCS); // 0x00529D28-0x00529D30
		public void SetRenderBuffers(IntPtr colorBuffer); // 0x00529D30-0x00529D34
		public void SetStateBufferSize(int size); // 0x00529D34-0x00529D38
		public void SmartTerrain_free_hitTest_list(IntPtr listPtr); // 0x00529D38-0x00529D3C
		public IntPtr SmartTerrain_hitTest(IntPtr unityViewPortPosition, float deviceHeight, int orientation); // 0x00529D3C-0x00529D88
		public void TargetFinderClearTrackables(IntPtr targetFinderPtr); // 0x00529D88-0x00529D8C
		public int TargetFinderDeinit(IntPtr targetFinderPtr); // 0x00529D8C-0x00529D94
		public int TargetFinderEnableTracking(IntPtr searchResult, IntPtr trackableData, IntPtr targetFinderPtr); // 0x00529D94-0x00529D9C
		public void TargetFinderFreeCloudRecoResultList(IntPtr listPtr); // 0x00529D9C-0x00529DA0
		public void TargetFinderFreeModelRecoResultList(IntPtr listPtr); // 0x00529DA0-0x00529DA4
		public int TargetFinderGetInitState(IntPtr targetFinderPtr); // 0x00529DA4-0x00529DAC
		public IntPtr TargetFinderGetObjectTarget(IntPtr targetFinderPtr, int index); // 0x00529DAC-0x00529DFC
		public void TargetFinderGetObjectTargets(IntPtr trackableIdArray, int trackableIdArrayLength, IntPtr targetFinderPtr); // 0x00529DFC-0x00529E00
		public int TargetFinderStartInitCloudReco(IntPtr targetFinderPtr, string userAuth, string secretAuth); // 0x00529E00-0x00529E08
		public int TargetFinderStartInitModelReco(IntPtr targetFinderPtr, string localDatabasePath, int storageType); // 0x00529E08-0x00529E10
		public int TargetFinderStartRecognition(IntPtr targetFinderPtr); // 0x00529E10-0x00529E18
		public int TargetFinderStop(IntPtr targetFinderPtr); // 0x00529E18-0x00529E20
		public IntPtr TargetFinderUpdate(IntPtr targetFinderState, int filterMode, IntPtr targetFinderPtr); // 0x00529E20-0x00529E6C
		public int TrackerManagerDeinitTracker(int trackerTypeID); // 0x00529E6C-0x00529E74
		public int TrackerManagerInitTracker(int trackerTypeID); // 0x00529E74-0x00529E7C
		public int TrackerStart(int trackerTypeID); // 0x00529E7C-0x00529E84
		public void TrackerStop(int trackerTypeID); // 0x00529E84-0x00529E88
		public int UpdateQCAR(IntPtr imageHeaderDataArray, int imageHeaderArrayLength, IntPtr frameState, int screenOrientation); // 0x00529E88-0x00529E90
		public int ViewerParameters_ContainsMagnet(IntPtr obj); // 0x00529E90-0x00529E98
		public IntPtr ViewerParameters_copy(IntPtr obj); // 0x00529E98-0x00529EE8
		public void ViewerParameters_delete(IntPtr obj); // 0x00529EE8-0x00529EEC
		public int ViewerParameters_GetButtonType(IntPtr obj); // 0x00529EEC-0x00529EF4
		public float ViewerParameters_GetDistortionCoefficient(IntPtr obj, int idx); // 0x00529EF4-0x00529EFC
		public void ViewerParameters_GetFieldOfView(IntPtr obj, IntPtr result); // 0x00529EFC-0x00529F00
		public float ViewerParameters_GetInterLensDistance(IntPtr obj); // 0x00529F00-0x00529F08
		public float ViewerParameters_GetLensCentreToTrayDistance(IntPtr obj); // 0x00529F08-0x00529F10
		public IntPtr ViewerParameters_GetManufacturer(IntPtr obj); // 0x00529F10-0x00529F60
		public IntPtr ViewerParameters_GetName(IntPtr obj); // 0x00529F60-0x00529FB0
		public int ViewerParameters_GetNumDistortionCoefficients(IntPtr obj); // 0x00529FB0-0x00529FB8
		public float ViewerParameters_GetScreenToLensDistance(IntPtr obj); // 0x00529FB8-0x00529FC0
		public int ViewerParameters_GetTrayAlignment(IntPtr obj); // 0x00529FC0-0x00529FC8
		public float ViewerParameters_GetVersion(IntPtr obj); // 0x00529FC8-0x00529FD0
		public IntPtr ViewerParametersList_Begin(IntPtr vpList); // 0x00529FD0-0x0052A020
		public IntPtr ViewerParametersList_GetByIndex(IntPtr vpList, int idx); // 0x0052A020-0x0052A070
		public IntPtr ViewerParametersList_GetByNameManufacturer(IntPtr vpList, string name, string manufacturer); // 0x0052A070-0x0052A0BC
		public IntPtr ViewerParametersList_GetListForAuthoringTools(); // 0x0052A0BC-0x0052A10C
		public IntPtr ViewerParametersList_Next(IntPtr vpList, IntPtr vpLast); // 0x0052A10C-0x0052A15C
		public void ViewerParametersList_SetSDKFilter(IntPtr vpList, string filter); // 0x0052A15C-0x0052A160
		public int ViewerParametersList_Size(IntPtr vpList); // 0x0052A160-0x0052A168
		public int VirtualButtonGetId(IntPtr dataSetPtr, string trackableName, string virtualButtonName); // 0x0052A168-0x0052A170
		public int VirtualButtonSetAreaRectangle(IntPtr dataSetPtr, string trackableName, string virtualButtonName, IntPtr rectData); // 0x0052A170-0x0052A178
		public int VirtualButtonSetEnabled(IntPtr dataSetPtr, string trackableName, string virtualButtonName, int enabled); // 0x0052A178-0x0052A180
		public int VirtualButtonSetSensitivity(IntPtr dataSetPtr, string trackableName, string virtualButtonName, int sensitivity); // 0x0052A180-0x0052A188
		public int VuMarkTargetGetInstanceImage(int vuMarkTargetID, IntPtr instanceImage); // 0x0052A188-0x0052A190
		public int VuMarkTemplateGetOrigin(IntPtr dataSetPtr, string trackableName, IntPtr originPtr); // 0x0052A190-0x0052A198
		public int VuMarkTemplateGetVuMarkUserData(IntPtr dataSetPtr, string trackableName, StringBuilder data, uint dataLength); // 0x0052A198-0x0052A1A0
		public int VuMarkTemplateSetTrackingFromRuntimeAppearance(IntPtr dataSetPtr, string trackableName, bool enable); // 0x0052A1A0-0x0052A1A8
	}

	public interface IVuforiaWrapper // TypeDefIndex: 3435
	{
		// Methods
		int CameraDeviceDeinitCamera();
		void CameraDeviceGetCameraField(IntPtr cameraField, int idx);
		int CameraDeviceGetCameraFieldOfViewRads(IntPtr fovVectorContainer);
		int CameraDeviceGetFieldBool(string key, IntPtr value);
		int CameraDeviceGetFieldFloat(string key, IntPtr value);
		int CameraDeviceGetFieldInt64(string key, IntPtr value);
		int CameraDeviceGetFieldInt64Range(string key, IntPtr intRange);
		int CameraDeviceGetFieldString(string key, StringBuilder value, int maxLength);
		int CameraDeviceGetNumCameraFields();
		int CameraDeviceGetNumVideoModes();
		void CameraDeviceGetVideoMode(int idx, IntPtr videoMode);
		int CameraDeviceInitCamera();
		int CameraDeviceSelectVideoMode(int idx);
		void CameraDeviceSetCameraConfiguration(int width, int height);
		int CameraDeviceSetFieldBool(string key, bool value);
		int CameraDeviceSetFieldFloat(string key, float value);
		int CameraDeviceSetFieldInt64(string key, long value);
		int CameraDeviceSetFieldInt64Range(string key, long intRangeFrom, long intRangeTo);
		int CameraDeviceSetFieldString(string key, string value);
		int CameraDeviceSetFlashTorchMode(int on);
		int CameraDeviceSetFocusMode(int focusMode);
		int CameraDeviceStartCamera();
		int CameraDeviceStopCamera();
		void CustomViewerParameters_AddDistortionCoefficient(IntPtr obj, float val);
		void CustomViewerParameters_ClearDistortionCoefficients(IntPtr obj);
		void CustomViewerParameters_delete(IntPtr obj);
		IntPtr CustomViewerParameters_new(float version, string name, string manufacturer);
		void CustomViewerParameters_SetButtonType(IntPtr obj, int val);
		void CustomViewerParameters_SetContainsMagnet(IntPtr obj, bool val);
		void CustomViewerParameters_SetFieldOfView(IntPtr obj, IntPtr val);
		void CustomViewerParameters_SetInterLensDistance(IntPtr obj, float val);
		void CustomViewerParameters_SetLensCentreToTrayDistance(IntPtr obj, float val);
		void CustomViewerParameters_SetScreenToLensDistance(IntPtr obj, float val);
		void CustomViewerParameters_SetTrayAlignment(IntPtr obj, int val);
		int CylinderTargetGetDimensions(IntPtr dataSetPtr, string trackableName, IntPtr dimensionPtr);
		int CylinderTargetSetBottomDiameter(IntPtr dataSetPtr, string trackableName, float bottomDiameter);
		int CylinderTargetSetSideLength(IntPtr dataSetPtr, string trackableName, float sideLength);
		int CylinderTargetSetTopDiameter(IntPtr dataSetPtr, string trackableName, float topDiameter);
		int DataSetCreateTrackable(IntPtr dataSetPtr, IntPtr trackableSourcePtr, StringBuilder trackableName, int nameMaxLength, IntPtr trackableData);
		int DataSetDestroyTrackable(IntPtr dataSetPtr, int trackableId);
		int DataSetExists(string relativePath, int storageType);
		int DataSetGetNumTrackableType(int trackableType, IntPtr dataSetPtr);
		int DataSetGetTrackableName(IntPtr dataSetPtr, int trackableId, StringBuilder trackableName, int nameMaxLength);
		IntPtr DataSetGetTrackablePtr(IntPtr dataSetPtr, int trackableId);
		int DataSetGetTrackablesOfType(int trackableType, IntPtr trackableDataArray, int trackableDataArrayLength, IntPtr dataSetPtr);
		int DataSetHasReachedTrackableLimit(IntPtr dataSetPtr);
		int DataSetLoad(string relativePath, int storageType, IntPtr dataSetPtr);
		void DeinitFrameState(IntPtr frameState);
		int Device_GetMode();
		IntPtr Device_GetSelectedViewer();
		IntPtr Device_GetViewerList();
		int Device_IsViewerPresent();
		int Device_SelectViewer(IntPtr vp);
		int Device_SetMode(int mode);
		void Device_SetViewerPresent(bool present);
		int DeviceIsEyewearDevice();
		int DiagnosticsRecorderAddScreenshot(string imageFilePath, int storageType);
		int DiagnosticsRecorderAddUserComment(string comment);
		int DiagnosticsRecorderClearAll();
		int DiagnosticsRecorderClearUnpinned();
		int DiagnosticsRecorderDeinit();
		IntPtr DiagnosticsRecorderGenerateDiagnostics(string fileNamePrefix);
		int DiagnosticsRecorderInit(string diagnosticsDirectory, int storageType);
		int DiagnosticsRecorderStart();
		int DiagnosticsRecorderStop();
		int EyewearCPMClearProfile(int profileID);
		int EyewearCPMGetActiveProfile();
		int EyewearCPMGetCameraToEyePose(int profileID, int eyeID, IntPtr matrix);
		int EyewearCPMGetEyeProjection(int profileID, int eyeID, IntPtr matrix);
		int EyewearCPMGetMaxCount();
		IntPtr EyewearCPMGetProfileName(int profileID);
		int EyewearCPMGetUsedCount();
		int EyewearCPMIsProfileUsed(int profileID);
		int EyewearCPMSetActiveProfile(int profileID);
		int EyewearCPMSetCameraToEyePose(int profileID, int eyeID, IntPtr matrix);
		int EyewearCPMSetEyeProjection(int profileID, int eyeID, IntPtr matrix);
		int EyewearCPMSetProfileName(int profileID, IntPtr name);
		int EyewearDeviceGetScreenOrientation();
		int EyewearDeviceIsDisplayExtended();
		int EyewearDeviceIsDisplayExtendedGLOnly();
		int EyewearDeviceIsDualDisplay();
		int EyewearDeviceIsPredictiveTrackingEnabled();
		int EyewearDeviceIsSeeThru();
		int EyewearDeviceSetDisplayExtended(bool enable);
		int EyewearDeviceSetPredictiveTracking(bool enable);
		float EyewearUserCalibratorGetMaxScaleHint();
		float EyewearUserCalibratorGetMinScaleHint();
		int EyewearUserCalibratorGetProjectionMatrix(IntPtr readingsDataArray, int numReadings, IntPtr cameraToEyeContainer, IntPtr projectionContainer);
		int EyewearUserCalibratorInit(int surfaceWidth, int surfaceHeight, int targetWidth, int targetHeight);
		int EyewearUserCalibratorIsStereoStretched();
		void FrameCounterGetBenchmarkingData(IntPtr benchmarkingData);
		int GetCameraThreadID();
		void GetVuforiaLibraryVersion(StringBuilder value, int maxLength);
		int GuideViewGetImage(IntPtr guideViewPtr, IntPtr imageDataPtr);
		IntPtr GuideViewGetName(IntPtr guideViewPtr);
		int GuideViewGetPose(IntPtr guideViewPtr, IntPtr position, IntPtr quaternion);
		void GuideViewSetPose(IntPtr guideViewPtr, IntPtr position, IntPtr quaternion);
		int HasSurfaceBeenRecreated();
		int ImageTargetBuilderBuild(string name, float screenSizeWidth);
		int ImageTargetBuilderGetFrameQuality();
		IntPtr ImageTargetBuilderGetTrackableSource();
		void ImageTargetBuilderStartScan();
		void ImageTargetBuilderStopScan();
		int ImageTargetCreateVirtualButton(IntPtr dataSetPtr, string trackableName, string virtualButtonName, IntPtr rectData);
		int ImageTargetDestroyVirtualButton(IntPtr dataSetPtr, string trackableName, string virtualButtonName);
		int ImageTargetGetNumVirtualButtons(IntPtr dataSetPtr, string trackableName);
		int ImageTargetGetVirtualButtonName(IntPtr dataSetPtr, string trackableName, int idx, StringBuilder vbName, int nameMaxLength);
		int ImageTargetGetVirtualButtons(IntPtr virtualButtonDataArray, IntPtr rectangleDataArray, int virtualButtonDataArrayLength, IntPtr dataSetPtr, string trackableName);
		void InitFrameState(IntPtr frameState);
		void InitPlatformNative();
		int ModelTargetGetActiveGuideViewIndexFromTrackable(IntPtr trackablePtr);
		int ModelTargetGetBoundingBox(IntPtr dataSetPtr, string trackableName, IntPtr centerPtr, IntPtr halfExtents);
		IntPtr ModelTargetGetGuideViewFromTrackable(IntPtr trackablePtr, int index);
		int ModelTargetGetNumGuideViewsFromTrackable(IntPtr trackablePtr);
		int ModelTargetGetSize(IntPtr dataSetPtr, string trackableName, IntPtr sizePtr);
		int ModelTargetSetActiveGuideViewIndexFromTrackable(IntPtr trackablePtr, int idx);
		int ModelTargetSetSize(IntPtr dataSetPtr, string trackableName, IntPtr sizePtr);
		float MultiTargetGetLargestSizeComponent(IntPtr dataSetPtr, string trackableName);
		void NativeUnity_disableDistortion(bool disable);
		void NativeUnity_DisableEyeTextureOverride();
		void NativeUnity_EnableEyeTextureOverride(int eyeTextureWidth, int eyeTextureHeight, float vertFoVRad);
		int NativeUnity_IsVuforiaVRDeviceReady();
		void NativeUnity_ResetStereoProjectionMatrices();
		void NativeUnity_SetDeviceConnected(bool connected);
		void NativeUnity_SetDistortionMeshNeedsRefresh(bool enabled);
		void NativeUnity_SetEyeOffsets(IntPtr leftEyePosition, IntPtr leftEyeRotation, IntPtr rightEyePosition, IntPtr rightEyeRotation);
		void NativeUnity_SetSingleCullingMatrix(IntPtr projectionMatrix, IntPtr viewMatrix);
		void NativeUnity_SetStereoProjectionMatrix(int eyeId, IntPtr projectionMatrix);
		void NativeUnity_SetVuforiaVRDeviceReady(bool isReady);
		int ObjectTargetGetSize(IntPtr dataSetPtr, string trackableName, IntPtr sizePtr);
		int ObjectTargetSetSize(IntPtr dataSetPtr, string trackableName, IntPtr sizePtr);
		int ObjectTrackerActivateDataSet(IntPtr dataSetPtr);
		IntPtr ObjectTrackerCreateDataSet();
		int ObjectTrackerDeactivateDataSet(IntPtr dataSetPtr);
		int ObjectTrackerDestroyDataSet(IntPtr dataSetPtr);
		IntPtr ObjectTrackerGetTargetFinder(int targetFinderType);
		void OnPause();
		void OnResume();
		void OnSurfaceChanged(int width, int height);
		int PositionalDeviceTracker_CreateAnchorFromHitTestResult(string name, IntPtr hitTestResult, IntPtr anchorData);
		int PositionalDeviceTracker_CreateAnchorFromPose(string name, IntPtr unityPosition, IntPtr unityOrientation, IntPtr anchorData);
		int PositionalDeviceTracker_DestroyAnchor(int anchor);
		int PositionalDeviceTracker_Reset();
		void QcarAddCameraFrame(IntPtr pixels, int width, int height, int format, int stride, int frameIdx, int flipHorizontally);
		void QcarDeinit();
		int QcarGetActiveFusionProvider();
		int QcarGetBufferSize(int width, int height, int format);
		int QcarInit(string licenseKey);
		int QcarSetAllowedFusionProviders(int providerTypes);
		int QcarSetDriverLibrary(string libraryName, IntPtr userData);
		int QcarSetFrameFormat(int format, int enabled);
		int QcarSetHint(uint hint, int value);
		int RecorderInit(string filePath);
		int RecorderStart();
		int RecorderStop();
		IntPtr RendererCreateNativeTexture(uint width, uint height, int format);
		int RendererGetGraphicsAPI();
		int RendererGetRecommendedFps(int flags);
		IntPtr RendererGetRenderEventCallback();
		void RendererGetVideoBackgroundCfg(IntPtr bgCfg);
		int RendererGetVideoBackgroundTextureInfo(IntPtr texInfo);
		IntPtr RendererGetVideoTextureUpdateCallback();
		int RendererIsVideoBackgroundTextureInfoAvailable();
		void RendererRequestNativeTextureCreation(uint width, uint height, int format);
		void RendererSetVideoBackgroundCfg(IntPtr bgCfg);
		void RendererSetVideoBackgroundRenderingInfo(int format, int width, int height);
		int RendererSetVideoBackgroundTextureID(int textureID);
		int RendererSetVideoBackgroundTexturePtr(IntPtr texturePtr);
		IntPtr RendererTryGetVideoBackgroundTexturePtr();
		void RenderingPrimitives_DeleteCopy();
		void RenderingPrimitives_GetDistortionMesh(int viewId, IntPtr meshData);
		void RenderingPrimitives_GetDistortionMeshSize(int viewId, IntPtr size);
		void RenderingPrimitives_GetDistortionTextureViewport(int viewID, IntPtr viewportContainer);
		void RenderingPrimitives_GetEffectiveFov(int viewID, IntPtr fovContainer);
		void RenderingPrimitives_GetEyeDisplayAdjustmentMatrix(int viewID, IntPtr matrixContainer);
		void RenderingPrimitives_GetNormalizedViewport(int viewID, IntPtr viewportContainer);
		void RenderingPrimitives_GetProjectionMatrix(int viewID, float near, float far, IntPtr projectionContainer, int screenOrientation);
		void RenderingPrimitives_GetVideoBackgroundProjectionMatrix(int viewID, float near, float far, IntPtr projectionContainer, int screenOrientation);
		void RenderingPrimitives_GetViewport(int viewID, IntPtr viewportContainer);
		void RenderingPrimitives_GetViewportCentreToEyeAxis(int viewID, IntPtr vectorContainer);
		void RenderingPrimitives_UpdateCopy();
		int RotationalDeviceTracker_GetModelCorrectionMode();
		void RotationalDeviceTracker_GetModelCorrectionTransform(IntPtr pivot);
		int RotationalDeviceTracker_GetPosePrediction();
		int RotationalDeviceTracker_Recenter();
		int RotationalDeviceTracker_SetModelCorrectionMode(int mode);
		int RotationalDeviceTracker_SetModelCorrectionModeWithTransform(int mode, IntPtr pivot);
		int RotationalDeviceTracker_SetPosePrediction(bool mode);
		void SetApplicationEnvironment(string unityVersionString, int sdkWrapperType);
		int SetHolographicAppCS(IntPtr appSpecifiedCS);
		void SetRenderBuffers(IntPtr colorBuffer);
		void SetStateBufferSize(int size);
		void SmartTerrain_free_hitTest_list(IntPtr listPtr);
		IntPtr SmartTerrain_hitTest(IntPtr unityViewPortPosition, float deviceHeight, int orientation);
		void TargetFinderClearTrackables(IntPtr targetFinderPtr);
		int TargetFinderDeinit(IntPtr targetFinderPtr);
		int TargetFinderEnableTracking(IntPtr searchResult, IntPtr trackableData, IntPtr targetFinderPtr);
		void TargetFinderFreeCloudRecoResultList(IntPtr listPtr);
		void TargetFinderFreeModelRecoResultList(IntPtr listPtr);
		int TargetFinderGetInitState(IntPtr targetFinderPtr);
		IntPtr TargetFinderGetObjectTarget(IntPtr targetFinderPtr, int index);
		void TargetFinderGetObjectTargets(IntPtr trackableIdArray, int trackableIdArrayLength, IntPtr targetFinderPtr);
		int TargetFinderStartInitCloudReco(IntPtr targetFinderPtr, string userAuth, string secretAuth);
		int TargetFinderStartInitModelReco(IntPtr targetFinderPtr, string localDatabasePath, int storageType);
		int TargetFinderStartRecognition(IntPtr targetFinderPtr);
		int TargetFinderStop(IntPtr targetFinderPtr);
		IntPtr TargetFinderUpdate(IntPtr targetFinderState, int filterMode, IntPtr targetFinderPtr);
		int TrackerManagerDeinitTracker(int trackerTypeID);
		int TrackerManagerInitTracker(int trackerTypeID);
		int TrackerStart(int trackerTypeID);
		void TrackerStop(int trackerTypeID);
		int UpdateQCAR(IntPtr imageHeaderDataArray, int imageHeaderArrayLength, IntPtr frameState, int screenOrientation);
		int ViewerParameters_ContainsMagnet(IntPtr obj);
		IntPtr ViewerParameters_copy(IntPtr obj);
		void ViewerParameters_delete(IntPtr obj);
		int ViewerParameters_GetButtonType(IntPtr obj);
		float ViewerParameters_GetDistortionCoefficient(IntPtr obj, int idx);
		void ViewerParameters_GetFieldOfView(IntPtr obj, IntPtr result);
		float ViewerParameters_GetInterLensDistance(IntPtr obj);
		float ViewerParameters_GetLensCentreToTrayDistance(IntPtr obj);
		IntPtr ViewerParameters_GetManufacturer(IntPtr obj);
		IntPtr ViewerParameters_GetName(IntPtr obj);
		int ViewerParameters_GetNumDistortionCoefficients(IntPtr obj);
		float ViewerParameters_GetScreenToLensDistance(IntPtr obj);
		int ViewerParameters_GetTrayAlignment(IntPtr obj);
		float ViewerParameters_GetVersion(IntPtr obj);
		IntPtr ViewerParametersList_Begin(IntPtr vpList);
		IntPtr ViewerParametersList_GetByIndex(IntPtr vpList, int idx);
		IntPtr ViewerParametersList_GetByNameManufacturer(IntPtr vpList, string name, string manufacturer);
		IntPtr ViewerParametersList_GetListForAuthoringTools();
		IntPtr ViewerParametersList_Next(IntPtr vpList, IntPtr vpLast);
		void ViewerParametersList_SetSDKFilter(IntPtr vpList, string filter);
		int ViewerParametersList_Size(IntPtr vpList);
		int VirtualButtonGetId(IntPtr dataSetPtr, string trackableName, string virtualButtonName);
		int VirtualButtonSetAreaRectangle(IntPtr dataSetPtr, string trackableName, string virtualButtonName, IntPtr rectData);
		int VirtualButtonSetEnabled(IntPtr dataSetPtr, string trackableName, string virtualButtonName, int enabled);
		int VirtualButtonSetSensitivity(IntPtr dataSetPtr, string trackableName, string virtualButtonName, int sensitivity);
		int VuMarkTargetGetInstanceImage(int vuMarkTargetID, IntPtr instanceImage);
		int VuMarkTemplateGetOrigin(IntPtr dataSetPtr, string trackableName, IntPtr originPtr);
		int VuMarkTemplateGetVuMarkUserData(IntPtr dataSetPtr, string trackableName, StringBuilder data, uint dataLength);
		int VuMarkTemplateSetTrackingFromRuntimeAppearance(IntPtr dataSetPtr, string trackableName, bool enable);
	}

	internal class VuforiaNativeWrapper : IVuforiaWrapper // TypeDefIndex: 3436
	{
		// Constructors
		public VuforiaNativeWrapper(); // 0x005293E4-0x005293EC
	
		// Methods
		public int CameraDeviceDeinitCamera(); // 0x005193FC-0x00519400
		public void CameraDeviceGetCameraField(IntPtr cameraField, int idx); // 0x00519508-0x00519518
		public int CameraDeviceGetCameraFieldOfViewRads(IntPtr fovVectorContainer); // 0x005195FC-0x00519608
		public int CameraDeviceGetFieldBool(string key, IntPtr value); // 0x005196F0-0x00519700
		public int CameraDeviceGetFieldFloat(string key, IntPtr value); // 0x00519844-0x00519850
		public int CameraDeviceGetFieldInt64(string key, IntPtr value); // 0x00519994-0x005199A0
		public int CameraDeviceGetFieldInt64Range(string key, IntPtr intRange); // 0x00519AE4-0x00519AF0
		public int CameraDeviceGetFieldString(string key, StringBuilder value, int maxLength); // 0x00519BFC-0x00519C10
		public int CameraDeviceGetNumCameraFields(); // 0x00519D40-0x00519D48
		public int CameraDeviceGetNumVideoModes(); // 0x00519E20-0x00519E28
		public void CameraDeviceGetVideoMode(int idx, IntPtr videoMode); // 0x00519F00-0x00519F10
		public int CameraDeviceInitCamera(); // 0x0051A030-0x0051A038
		public int CameraDeviceSelectVideoMode(int idx); // 0x0051A13C-0x0051A148
		public void CameraDeviceSetCameraConfiguration(int width, int height); // 0x0051A224-0x0051A230
		public int CameraDeviceSetFieldBool(string key, bool value); // 0x0051A31C-0x0051A328
		public int CameraDeviceSetFieldFloat(string key, float value); // 0x0051A46C-0x0051A478
		public int CameraDeviceSetFieldInt64(string key, long value); // 0x0051A5BC-0x0051A5D8
		public int CameraDeviceSetFieldInt64Range(string key, long intRangeFrom, long intRangeTo); // 0x0051A724-0x0051A750
		public int CameraDeviceSetFieldString(string key, string value); // 0x0051A874-0x0051A880
		public int CameraDeviceSetFlashTorchMode(int on); // 0x0051A9A0-0x0051A9A8
		public int CameraDeviceSetFocusMode(int focusMode); // 0x0051AA88-0x0051AA90
		public int CameraDeviceStartCamera(); // 0x0051ABA8-0x0051ABB0
		public int CameraDeviceStopCamera(); // 0x0051ACB4-0x0051ACB8
		public void CustomViewerParameters_AddDistortionCoefficient(IntPtr obj, float val); // 0x0051ADBC-0x0051ADC8
		public void CustomViewerParameters_ClearDistortionCoefficients(IntPtr obj); // 0x0051AEC0-0x0051AEC8
		public void CustomViewerParameters_delete(IntPtr obj); // 0x0051AFBC-0x0051AFC8
		public IntPtr CustomViewerParameters_new(float version, string name, string manufacturer); // 0x0051B0A8-0x0051B0B8
		public void CustomViewerParameters_SetButtonType(IntPtr obj, int val); // 0x0051B1E0-0x0051B1F0
		public void CustomViewerParameters_SetContainsMagnet(IntPtr obj, bool val); // 0x0051B2E0-0x0051B2F0
		public void CustomViewerParameters_SetFieldOfView(IntPtr obj, IntPtr val); // 0x0051B3E4-0x0051B3F0
		public void CustomViewerParameters_SetInterLensDistance(IntPtr obj, float val); // 0x0051B4E0-0x0051B4F0
		public void CustomViewerParameters_SetLensCentreToTrayDistance(IntPtr obj, float val); // 0x0051B5E4-0x0051B5F0
		public void CustomViewerParameters_SetScreenToLensDistance(IntPtr obj, float val); // 0x0051B6EC-0x0051B6F8
		public void CustomViewerParameters_SetTrayAlignment(IntPtr obj, int val); // 0x0051B7F0-0x0051B800
		public int CylinderTargetGetDimensions(IntPtr dataSetPtr, string trackableName, IntPtr dimensionPtr); // 0x0051B8F0-0x0051B900
		public int CylinderTargetSetBottomDiameter(IntPtr dataSetPtr, string trackableName, float bottomDiameter); // 0x0051BA10-0x0051BA20
		public int CylinderTargetSetSideLength(IntPtr dataSetPtr, string trackableName, float sideLength); // 0x0051BB34-0x0051BB48
		public int CylinderTargetSetTopDiameter(IntPtr dataSetPtr, string trackableName, float topDiameter); // 0x0051BC58-0x0051BC68
		public int DataSetCreateTrackable(IntPtr dataSetPtr, IntPtr trackableSourcePtr, StringBuilder trackableName, int nameMaxLength, IntPtr trackableData); // 0x0051BD7C-0x0051BDB0
		public int DataSetDestroyTrackable(IntPtr dataSetPtr, int trackableId); // 0x0051BF10-0x0051BF20
		public int DataSetExists(string relativePath, int storageType); // 0x0051C03C-0x0051C048
		public int DataSetGetNumTrackableType(int trackableType, IntPtr dataSetPtr); // 0x0051C174-0x0051C180
		public int DataSetGetTrackableName(IntPtr dataSetPtr, int trackableId, StringBuilder trackableName, int nameMaxLength); // 0x0051C264-0x0051C290
		public IntPtr DataSetGetTrackablePtr(IntPtr dataSetPtr, int trackableId); // 0x0051C3E8-0x0051C3F8
		public int DataSetGetTrackablesOfType(int trackableType, IntPtr trackableDataArray, int trackableDataArrayLength, IntPtr dataSetPtr); // 0x0051C514-0x0051C540
		public int DataSetHasReachedTrackableLimit(IntPtr dataSetPtr); // 0x0051C634-0x0051C640
		public int DataSetLoad(string relativePath, int storageType, IntPtr dataSetPtr); // 0x0051C720-0x0051C730
		public void DeinitFrameState(IntPtr frameState); // 0x0051C860-0x0051C868
		public int Device_GetMode(); // 0x0051C970-0x0051C978
		public IntPtr Device_GetSelectedViewer(); // 0x0051CA6C-0x0051CA70
		public IntPtr Device_GetViewerList(); // 0x0051CB78-0x0051CB80
		public int Device_IsViewerPresent(); // 0x0051CC80-0x0051CC88
		public int Device_SelectViewer(IntPtr vp); // 0x0051CD8C-0x0051CD98
		public int Device_SetMode(int mode); // 0x0051CEA4-0x0051CEB0
		public void Device_SetViewerPresent(bool present); // 0x0051CFB4-0x0051CFC0
		public int DeviceIsEyewearDevice(); // 0x0051D0D4-0x0051D0D8
		public int DiagnosticsRecorderAddScreenshot(string imageFilePath, int storageType); // 0x0051D1D8-0x0051D1E8
		public int DiagnosticsRecorderAddUserComment(string comment); // 0x0051D2F8-0x0051D300
		public int DiagnosticsRecorderClearAll(); // 0x0051D408-0x0051D410
		public int DiagnosticsRecorderClearUnpinned(); // 0x0051D4E4-0x0051D4E8
		public int DiagnosticsRecorderDeinit(); // 0x0051D5C4-0x0051D5C8
		public IntPtr DiagnosticsRecorderGenerateDiagnostics(string fileNamePrefix); // 0x0051D6D0-0x0051D6D8
		public int DiagnosticsRecorderInit(string diagnosticsDirectory, int storageType); // 0x0051D7E4-0x0051D7F0
		public int DiagnosticsRecorderStart(); // 0x0051D930-0x0051D938
		public int DiagnosticsRecorderStop(); // 0x0051DA40-0x0051DA48
		public int EyewearCPMClearProfile(int profileID); // 0x0051DB4C-0x0051DB58
		public int EyewearCPMGetActiveProfile(); // 0x0051DC6C-0x0051DC70
		public int EyewearCPMGetCameraToEyePose(int profileID, int eyeID, IntPtr matrix); // 0x0051DD44-0x0051DD58
		public int EyewearCPMGetEyeProjection(int profileID, int eyeID, IntPtr matrix); // 0x0051DE48-0x0051DE58
		public int EyewearCPMGetMaxCount(); // 0x0051DF44-0x0051DF48
		public IntPtr EyewearCPMGetProfileName(int profileID); // 0x0051E048-0x0051E050
		public int EyewearCPMGetUsedCount(); // 0x0051E168-0x0051E170
		public int EyewearCPMIsProfileUsed(int profileID); // 0x0051E274-0x0051E280
		public int EyewearCPMSetActiveProfile(int profileID); // 0x0051E394-0x0051E3A0
		public int EyewearCPMSetCameraToEyePose(int profileID, int eyeID, IntPtr matrix); // 0x0051E47C-0x0051E490
		public int EyewearCPMSetEyeProjection(int profileID, int eyeID, IntPtr matrix); // 0x0051E580-0x0051E590
		public int EyewearCPMSetProfileName(int profileID, IntPtr name); // 0x0051E67C-0x0051E688
		public int EyewearDeviceGetScreenOrientation(); // 0x0051E7A8-0x0051E7B0
		public int EyewearDeviceIsDisplayExtended(); // 0x0051E88C-0x0051E890
		public int EyewearDeviceIsDisplayExtendedGLOnly(); // 0x0051E968-0x0051E970
		public int EyewearDeviceIsDualDisplay(); // 0x0051EA50-0x0051EA58
		public int EyewearDeviceIsPredictiveTrackingEnabled(); // 0x0051EB2C-0x0051EB30
		public int EyewearDeviceIsSeeThru(); // 0x0051EC14-0x0051EC18
		public int EyewearDeviceSetDisplayExtended(bool enable); // 0x0051ED1C-0x0051ED28
		public int EyewearDeviceSetPredictiveTracking(bool enable); // 0x0051EE08-0x0051EE10
		public float EyewearUserCalibratorGetMaxScaleHint(); // 0x0051EEF4-0x0051EEF8
		public float EyewearUserCalibratorGetMinScaleHint(); // 0x0051EFD8-0x0051EFE0
		public int EyewearUserCalibratorGetProjectionMatrix(IntPtr readingsDataArray, int numReadings, IntPtr cameraToEyeContainer, IntPtr projectionContainer); // 0x0051F0C0-0x0051F0F0
		public int EyewearUserCalibratorInit(int surfaceWidth, int surfaceHeight, int targetWidth, int targetHeight); // 0x0051F1F4-0x0051F220
		public int EyewearUserCalibratorIsStereoStretched(); // 0x0051F350-0x0051F358
		public void FrameCounterGetBenchmarkingData(IntPtr benchmarkingData); // 0x0051F438-0x0051F440
		public int GetCameraThreadID(); // 0x0051F520-0x0051F528
		public void GetVuforiaLibraryVersion(StringBuilder value, int maxLength); // 0x0051F620-0x0051F630
		public int GuideViewGetImage(IntPtr guideViewPtr, IntPtr imageDataPtr); // 0x0051F774-0x0051F780
		public IntPtr GuideViewGetName(IntPtr guideViewPtr); // 0x0051F890-0x0051F898
		public int GuideViewGetPose(IntPtr guideViewPtr, IntPtr position, IntPtr quaternion); // 0x0051F9A0-0x0051F9B0
		public void GuideViewSetPose(IntPtr guideViewPtr, IntPtr position, IntPtr quaternion); // 0x0051FAC8-0x0051FAD8
		public int HasSurfaceBeenRecreated(); // 0x0051FBF0-0x0051FBF8
		public int ImageTargetBuilderBuild(string name, float screenSizeWidth); // 0x0051FCFC-0x0051FD08
		public int ImageTargetBuilderGetFrameQuality(); // 0x0051FE48-0x0051FE50
		public IntPtr ImageTargetBuilderGetTrackableSource(); // 0x0051FF2C-0x0051FF30
		public void ImageTargetBuilderStartScan(); // 0x00520010-0x00520018
		public void ImageTargetBuilderStopScan(); // 0x005200EC-0x005200F0
		public int ImageTargetCreateVirtualButton(IntPtr dataSetPtr, string trackableName, string virtualButtonName, IntPtr rectData); // 0x005201C4-0x005201F0
		public int ImageTargetDestroyVirtualButton(IntPtr dataSetPtr, string trackableName, string virtualButtonName); // 0x00520324-0x00520338
		public int ImageTargetGetNumVirtualButtons(IntPtr dataSetPtr, string trackableName); // 0x00520464-0x00520470
		public int ImageTargetGetVirtualButtonName(IntPtr dataSetPtr, string trackableName, int idx, StringBuilder vbName, int nameMaxLength); // 0x0052057C-0x005205B0
		public int ImageTargetGetVirtualButtons(IntPtr virtualButtonDataArray, IntPtr rectangleDataArray, int virtualButtonDataArrayLength, IntPtr dataSetPtr, string trackableName); // 0x005206F4-0x00520728
		public void InitFrameState(IntPtr frameState); // 0x0052084C-0x00520858
		public void InitPlatformNative(); // 0x0052095C-0x00520960
		public int ModelTargetGetActiveGuideViewIndexFromTrackable(IntPtr trackablePtr); // 0x00520A5C-0x00520A68
		public int ModelTargetGetBoundingBox(IntPtr dataSetPtr, string trackableName, IntPtr centerPtr, IntPtr halfExtents); // 0x00520B58-0x00520B88
		public IntPtr ModelTargetGetGuideViewFromTrackable(IntPtr trackablePtr, int index); // 0x00520CDC-0x00520CE8
		public int ModelTargetGetNumGuideViewsFromTrackable(IntPtr trackablePtr); // 0x00520DD8-0x00520DE0
		public int ModelTargetGetSize(IntPtr dataSetPtr, string trackableName, IntPtr sizePtr); // 0x00520ECC-0x00520EE0
		public int ModelTargetSetActiveGuideViewIndexFromTrackable(IntPtr trackablePtr, int idx); // 0x00521020-0x00521030
		public int ModelTargetSetSize(IntPtr dataSetPtr, string trackableName, IntPtr sizePtr); // 0x00521128-0x00521138
		public float MultiTargetGetLargestSizeComponent(IntPtr dataSetPtr, string trackableName); // 0x00521278-0x00521288
		public void NativeUnity_disableDistortion(bool disable); // 0x00521398-0x005213A0
		public void NativeUnity_DisableEyeTextureOverride(); // 0x00521480-0x00521488
		public void NativeUnity_EnableEyeTextureOverride(int eyeTextureWidth, int eyeTextureHeight, float vertFoVRad); // 0x00521568-0x00521578
		public int NativeUnity_IsVuforiaVRDeviceReady(); // 0x00521670-0x00521678
		public void NativeUnity_ResetStereoProjectionMatrices(); // 0x00521754-0x00521758
		public void NativeUnity_SetDeviceConnected(bool connected); // 0x0052183C-0x00521848
		public void NativeUnity_SetDistortionMeshNeedsRefresh(bool enabled); // 0x00521928-0x00521930
		public void NativeUnity_SetEyeOffsets(IntPtr leftEyePosition, IntPtr leftEyeRotation, IntPtr rightEyePosition, IntPtr rightEyeRotation); // 0x00521A1C-0x00521A48
		public void NativeUnity_SetSingleCullingMatrix(IntPtr projectionMatrix, IntPtr viewMatrix); // 0x00521B78-0x00521B88
		public void NativeUnity_SetStereoProjectionMatrix(int eyeId, IntPtr projectionMatrix); // 0x00521C74-0x00521C80
		public void NativeUnity_SetVuforiaVRDeviceReady(bool isReady); // 0x00521D70-0x00521D78
		public int ObjectTargetGetSize(IntPtr dataSetPtr, string trackableName, IntPtr sizePtr); // 0x00521E5C-0x00521E70
		public int ObjectTargetSetSize(IntPtr dataSetPtr, string trackableName, IntPtr sizePtr); // 0x00521FB0-0x00521FC0
		public int ObjectTrackerActivateDataSet(IntPtr dataSetPtr); // 0x00522100-0x00522108
		public IntPtr ObjectTrackerCreateDataSet(); // 0x005221E8-0x005221F0
		public int ObjectTrackerDeactivateDataSet(IntPtr dataSetPtr); // 0x005222C4-0x005222D0
		public int ObjectTrackerDestroyDataSet(IntPtr dataSetPtr); // 0x005223B0-0x005223B8
		public IntPtr ObjectTrackerGetTargetFinder(int targetFinderType); // 0x00522494-0x005224A0
		public void OnPause(); // 0x00522580-0x00522588
		public void OnResume(); // 0x0052266C-0x00522670
		public void OnSurfaceChanged(int width, int height); // 0x00522758-0x00522768
		public int PositionalDeviceTracker_CreateAnchorFromHitTestResult(string name, IntPtr hitTestResult, IntPtr anchorData); // 0x00522878-0x00522888
		public int PositionalDeviceTracker_CreateAnchorFromPose(string name, IntPtr unityPosition, IntPtr unityOrientation, IntPtr anchorData); // 0x005229B4-0x005229E0
		public int PositionalDeviceTracker_DestroyAnchor(int anchor); // 0x00522B0C-0x00522B18
		public int PositionalDeviceTracker_Reset(); // 0x00522C00-0x00522C08
		public void QcarAddCameraFrame(IntPtr pixels, int width, int height, int format, int stride, int frameIdx, int flipHorizontally); // 0x00522CE0-0x00522D20
		public void QcarDeinit(); // 0x00522E5C-0x00522E60
		public int QcarGetActiveFusionProvider(); // 0x00522F4C-0x00522F50
		public int QcarGetBufferSize(int width, int height, int format); // 0x00523024-0x00523038
		public int QcarInit(string licenseKey); // 0x00523150-0x00523158
		public int QcarSetAllowedFusionProviders(int providerTypes); // 0x00523274-0x00523280
		public int QcarSetDriverLibrary(string libraryName, IntPtr userData); // 0x00523360-0x00523370
		public int QcarSetFrameFormat(int format, int enabled); // 0x005234AC-0x005234B8
		public int QcarSetHint(uint hint, int value); // 0x005235CC-0x005235D8
		public int RecorderInit(string filePath); // 0x005236DC-0x005236E8
		public int RecorderStart(); // 0x0052380C-0x00523810
		public int RecorderStop(); // 0x00523900-0x00523908
		public IntPtr RendererCreateNativeTexture(uint width, uint height, int format); // 0x005239F8-0x00523A08
		public int RendererGetGraphicsAPI(); // 0x00523AF4-0x00523AF8
		public int RendererGetRecommendedFps(int flags); // 0x00523BFC-0x00523C08
		public IntPtr RendererGetRenderEventCallback(); // 0x00523D20-0x00523D28
		public void RendererGetVideoBackgroundCfg(IntPtr bgCfg); // 0x00523E00-0x00523E08
		public int RendererGetVideoBackgroundTextureInfo(IntPtr texInfo); // 0x00523EE8-0x00523EF0
		public IntPtr RendererGetVideoTextureUpdateCallback(); // 0x00523FD8-0x00523FE0
		public int RendererIsVideoBackgroundTextureInfoAvailable(); // 0x005240C0-0x005240C8
		public void RendererRequestNativeTextureCreation(uint width, uint height, int format); // 0x005241B0-0x005241C0
		public void RendererSetVideoBackgroundCfg(IntPtr bgCfg); // 0x005242B8-0x005242C0
		public void RendererSetVideoBackgroundRenderingInfo(int format, int width, int height); // 0x005243A0-0x005243B0
		public int RendererSetVideoBackgroundTextureID(int textureID); // 0x005244A8-0x005244B0
		public int RendererSetVideoBackgroundTexturePtr(IntPtr texturePtr); // 0x00524594-0x005245A0
		public IntPtr RendererTryGetVideoBackgroundTexturePtr(); // 0x00524688-0x00524690
		public void RenderingPrimitives_DeleteCopy(); // 0x00524770-0x00524778
		public void RenderingPrimitives_GetDistortionMesh(int viewId, IntPtr meshData); // 0x00524850-0x00524860
		public void RenderingPrimitives_GetDistortionMeshSize(int viewId, IntPtr size); // 0x00524950-0x00524960
		public void RenderingPrimitives_GetDistortionTextureViewport(int viewID, IntPtr viewportContainer); // 0x00524A54-0x00524A60
		public void RenderingPrimitives_GetEffectiveFov(int viewID, IntPtr fovContainer); // 0x00524B5C-0x00524B68
		public void RenderingPrimitives_GetEyeDisplayAdjustmentMatrix(int viewID, IntPtr matrixContainer); // 0x00524C54-0x00524C60
		public void RenderingPrimitives_GetNormalizedViewport(int viewID, IntPtr viewportContainer); // 0x00524D5C-0x00524D68
		public void RenderingPrimitives_GetProjectionMatrix(int viewID, float near, float far, IntPtr projectionContainer, int screenOrientation); // 0x00524E5C-0x00524E90
		public void RenderingPrimitives_GetVideoBackgroundProjectionMatrix(int viewID, float near, float far, IntPtr projectionContainer, int screenOrientation); // 0x00524F98-0x00524FD0
		public void RenderingPrimitives_GetViewport(int viewID, IntPtr viewportContainer); // 0x005250E8-0x005250F8
		public void RenderingPrimitives_GetViewportCentreToEyeAxis(int viewID, IntPtr vectorContainer); // 0x005251E0-0x005251F0
		public void RenderingPrimitives_UpdateCopy(); // 0x005252E8-0x005252F0
		public int RotationalDeviceTracker_GetModelCorrectionMode(); // 0x005253C8-0x005253D0
		public void RotationalDeviceTracker_GetModelCorrectionTransform(IntPtr pivot); // 0x005254B8-0x005254C0
		public int RotationalDeviceTracker_GetPosePrediction(); // 0x005255B4-0x005255B8
		public int RotationalDeviceTracker_Recenter(); // 0x0052569C-0x005256A0
		public int RotationalDeviceTracker_SetModelCorrectionMode(int mode); // 0x0052577C-0x00525788
		public int RotationalDeviceTracker_SetModelCorrectionModeWithTransform(int mode, IntPtr pivot); // 0x00525878-0x00525888
		public int RotationalDeviceTracker_SetPosePrediction(bool mode); // 0x0052598C-0x00525998
		public void SetApplicationEnvironment(string unityVersionString, int sdkWrapperType); // 0x00525A84-0x00525A90
		public int SetHolographicAppCS(IntPtr appSpecifiedCS); // 0x00525BCC-0x00525BD8
		public void SetRenderBuffers(IntPtr colorBuffer); // 0x00525CE4-0x00525CF0
		public void SetStateBufferSize(int size); // 0x00525DF8-0x00525E00
		public void SmartTerrain_free_hitTest_list(IntPtr listPtr); // 0x00525F0C-0x00525F18
		public IntPtr SmartTerrain_hitTest(IntPtr unityViewPortPosition, float deviceHeight, int orientation); // 0x00525FF8-0x00526008
		public void TargetFinderClearTrackables(IntPtr targetFinderPtr); // 0x00526128-0x00526130
		public int TargetFinderDeinit(IntPtr targetFinderPtr); // 0x0052620C-0x00526218
		public int TargetFinderEnableTracking(IntPtr searchResult, IntPtr trackableData, IntPtr targetFinderPtr); // 0x00526324-0x00526338
		public void TargetFinderFreeCloudRecoResultList(IntPtr listPtr); // 0x00526424-0x00526430
		public void TargetFinderFreeModelRecoResultList(IntPtr listPtr); // 0x00526514-0x00526520
		public int TargetFinderGetInitState(IntPtr targetFinderPtr); // 0x00526604-0x00526610
		public IntPtr TargetFinderGetObjectTarget(IntPtr targetFinderPtr, int index); // 0x00526728-0x00526738
		public void TargetFinderGetObjectTargets(IntPtr trackableIdArray, int trackableIdArrayLength, IntPtr targetFinderPtr); // 0x0052681C-0x00526830
		public int TargetFinderStartInitCloudReco(IntPtr targetFinderPtr, string userAuth, string secretAuth); // 0x00526920-0x00526930
		public int TargetFinderStartInitModelReco(IntPtr targetFinderPtr, string localDatabasePath, int storageType); // 0x00526A5C-0x00526A70
		public int TargetFinderStartRecognition(IntPtr targetFinderPtr); // 0x00526B84-0x00526B90
		public int TargetFinderStop(IntPtr targetFinderPtr); // 0x00526C70-0x00526C78
		public IntPtr TargetFinderUpdate(IntPtr targetFinderState, int filterMode, IntPtr targetFinderPtr); // 0x00526D80-0x00526D90
		public int TrackerManagerDeinitTracker(int trackerTypeID); // 0x00526EAC-0x00526EB8
		public int TrackerManagerInitTracker(int trackerTypeID); // 0x00526F94-0x00526FA0
		public int TrackerStart(int trackerTypeID); // 0x005270B8-0x005270C0
		public void TrackerStop(int trackerTypeID); // 0x005271C0-0x005271C8
		public int UpdateQCAR(IntPtr imageHeaderDataArray, int imageHeaderArrayLength, IntPtr frameState, int screenOrientation); // 0x005272C4-0x005272F0
		public int ViewerParameters_ContainsMagnet(IntPtr obj); // 0x00527404-0x00527410
		public IntPtr ViewerParameters_copy(IntPtr obj); // 0x005274F0-0x005274F8
		public void ViewerParameters_delete(IntPtr obj); // 0x00527608-0x00527610
		public int ViewerParameters_GetButtonType(IntPtr obj); // 0x00527724-0x00527730
		public float ViewerParameters_GetDistortionCoefficient(IntPtr obj, int idx); // 0x00527810-0x00527820
		public void ViewerParameters_GetFieldOfView(IntPtr obj, IntPtr result); // 0x00527914-0x00527920
		public float ViewerParameters_GetInterLensDistance(IntPtr obj); // 0x00527A08-0x00527A10
		public float ViewerParameters_GetLensCentreToTrayDistance(IntPtr obj); // 0x00527AF8-0x00527B00
		public IntPtr ViewerParameters_GetManufacturer(IntPtr obj); // 0x00527BF0-0x00527BF8
		public IntPtr ViewerParameters_GetName(IntPtr obj); // 0x00527CDC-0x00527CE8
		public int ViewerParameters_GetNumDistortionCoefficients(IntPtr obj); // 0x00527E00-0x00527E08
		public float ViewerParameters_GetScreenToLensDistance(IntPtr obj); // 0x00527EF8-0x00527F00
		public int ViewerParameters_GetTrayAlignment(IntPtr obj); // 0x00527FEC-0x00527FF8
		public float ViewerParameters_GetVersion(IntPtr obj); // 0x005280DC-0x005280E8
		public IntPtr ViewerParametersList_Begin(IntPtr vpList); // 0x005281C4-0x005281D0
		public IntPtr ViewerParametersList_GetByIndex(IntPtr vpList, int idx); // 0x005282AC-0x005282B8
		public IntPtr ViewerParametersList_GetByNameManufacturer(IntPtr vpList, string name, string manufacturer); // 0x005283A0-0x005283B0
		public IntPtr ViewerParametersList_GetListForAuthoringTools(); // 0x005284E8-0x005284F0
		public IntPtr ViewerParametersList_Next(IntPtr vpList, IntPtr vpLast); // 0x005285D8-0x005285E8
		public void ViewerParametersList_SetSDKFilter(IntPtr vpList, string filter); // 0x00528708-0x00528718
		public int ViewerParametersList_Size(IntPtr vpList); // 0x00528820-0x00528828
		public int VirtualButtonGetId(IntPtr dataSetPtr, string trackableName, string virtualButtonName); // 0x00528940-0x00528950
		public int VirtualButtonSetAreaRectangle(IntPtr dataSetPtr, string trackableName, string virtualButtonName, IntPtr rectData); // 0x00528AA0-0x00528AD0
		public int VirtualButtonSetEnabled(IntPtr dataSetPtr, string trackableName, string virtualButtonName, int enabled); // 0x00528C04-0x00528C30
		public int VirtualButtonSetSensitivity(IntPtr dataSetPtr, string trackableName, string virtualButtonName, int sensitivity); // 0x00528D90-0x00528DC0
		public int VuMarkTargetGetInstanceImage(int vuMarkTargetID, IntPtr instanceImage); // 0x00528EF0-0x00528F00
		public int VuMarkTemplateGetOrigin(IntPtr dataSetPtr, string trackableName, IntPtr originPtr); // 0x00528FE8-0x00528FF8
		public int VuMarkTemplateGetVuMarkUserData(IntPtr dataSetPtr, string trackableName, StringBuilder data, uint dataLength); // 0x00529140-0x00529170
		public int VuMarkTemplateSetTrackingFromRuntimeAppearance(IntPtr dataSetPtr, string trackableName, bool enable); // 0x005292AC-0x005292C0
		private static extern int cameraDeviceDeinitCamera(); // 0x00519400-0x00519508
		private static extern void cameraDeviceGetCameraField(IntPtr cameraField, int idx); // 0x00519518-0x005195FC
		private static extern int cameraDeviceGetCameraFieldOfViewRads(IntPtr fovVectorContainer); // 0x00519608-0x005196F0
		private static extern int cameraDeviceGetFieldBool(string key, IntPtr value); // 0x00519700-0x00519844
		private static extern int cameraDeviceGetFieldFloat(string key, IntPtr value); // 0x00519850-0x00519994
		private static extern int cameraDeviceGetFieldInt64(string key, IntPtr value); // 0x005199A0-0x00519AE4
		private static extern int cameraDeviceGetFieldInt64Range(string key, IntPtr intRange); // 0x00519AF0-0x00519BFC
		private static extern int cameraDeviceGetFieldString(string key, StringBuilder value, int maxLength); // 0x00519C10-0x00519D40
		private static extern int cameraDeviceGetNumCameraFields(); // 0x00519D48-0x00519E20
		private static extern int cameraDeviceGetNumVideoModes(); // 0x00519E28-0x00519F00
		private static extern void cameraDeviceGetVideoMode(int idx, IntPtr videoMode); // 0x00519F10-0x0051A030
		private static extern int cameraDeviceInitCamera(); // 0x0051A038-0x0051A13C
		private static extern int cameraDeviceSelectVideoMode(int idx); // 0x0051A148-0x0051A224
		private static extern void cameraDeviceSetCameraConfiguration(int width, int height); // 0x0051A230-0x0051A31C
		private static extern int cameraDeviceSetFieldBool(string key, bool value); // 0x0051A328-0x0051A46C
		private static extern int cameraDeviceSetFieldFloat(string key, float value); // 0x0051A478-0x0051A5BC
		private static extern int cameraDeviceSetFieldInt64(string key, long value); // 0x0051A5D8-0x0051A724
		private static extern int cameraDeviceSetFieldInt64Range(string key, long intRangeFrom, long intRangeTo); // 0x0051A750-0x0051A874
		private static extern int cameraDeviceSetFieldString(string key, string value); // 0x0051A880-0x0051A9A0
		private static extern int cameraDeviceSetFlashTorchMode(int on); // 0x0051A9A8-0x0051AA88
		private static extern int cameraDeviceSetFocusMode(int focusMode); // 0x0051AA90-0x0051ABA8
		private static extern int cameraDeviceStartCamera(); // 0x0051ABB0-0x0051ACB4
		private static extern int cameraDeviceStopCamera(); // 0x0051ACB8-0x0051ADBC
		private static extern void customViewerParameters_AddDistortionCoefficient(IntPtr obj, float val); // 0x0051ADC8-0x0051AEC0
		private static extern void customViewerParameters_ClearDistortionCoefficients(IntPtr obj); // 0x0051AEC8-0x0051AFBC
		private static extern void customViewerParameters_delete(IntPtr obj); // 0x0051AFC8-0x0051B0A8
		private static extern IntPtr customViewerParameters_new(float version, string name, string manufacturer); // 0x0051B0B8-0x0051B1E0
		private static extern void customViewerParameters_SetButtonType(IntPtr obj, int val); // 0x0051B1F0-0x0051B2E0
		private static extern void customViewerParameters_SetContainsMagnet(IntPtr obj, bool val); // 0x0051B2F0-0x0051B3E4
		private static extern void customViewerParameters_SetFieldOfView(IntPtr obj, IntPtr val); // 0x0051B3F0-0x0051B4E0
		private static extern void customViewerParameters_SetInterLensDistance(IntPtr obj, float val); // 0x0051B4F0-0x0051B5E4
		private static extern void customViewerParameters_SetLensCentreToTrayDistance(IntPtr obj, float val); // 0x0051B5F0-0x0051B6EC
		private static extern void customViewerParameters_SetScreenToLensDistance(IntPtr obj, float val); // 0x0051B6F8-0x0051B7F0
		private static extern void customViewerParameters_SetTrayAlignment(IntPtr obj, int val); // 0x0051B800-0x0051B8F0
		private static extern int cylinderTargetGetDimensions(IntPtr dataSetPtr, string trackableName, IntPtr dimensionPtr); // 0x0051B900-0x0051BA10
		private static extern int cylinderTargetSetBottomDiameter(IntPtr dataSetPtr, string trackableName, float bottomDiameter); // 0x0051BA20-0x0051BB34
		private static extern int cylinderTargetSetSideLength(IntPtr dataSetPtr, string trackableName, float sideLength); // 0x0051BB48-0x0051BC58
		private static extern int cylinderTargetSetTopDiameter(IntPtr dataSetPtr, string trackableName, float topDiameter); // 0x0051BC68-0x0051BD7C
		private static extern int dataSetCreateTrackable(IntPtr dataSetPtr, IntPtr trackableSourcePtr, StringBuilder trackableName, int nameMaxLength, IntPtr trackableData); // 0x0051BDB0-0x0051BF10
		private static extern int dataSetDestroyTrackable(IntPtr dataSetPtr, int trackableId); // 0x0051BF20-0x0051C03C
		private static extern int dataSetExists(string relativePath, int storageType); // 0x0051C048-0x0051C174
		private static extern int dataSetGetNumTrackableType(int trackableType, IntPtr dataSetPtr); // 0x0051C180-0x0051C264
		private static extern int dataSetGetTrackableName(IntPtr dataSetPtr, int trackableId, StringBuilder trackableName, int nameMaxLength); // 0x0051C290-0x0051C3E8
		private static extern IntPtr dataSetGetTrackablePtr(IntPtr dataSetPtr, int trackableId); // 0x0051C3F8-0x0051C514
		private static extern int dataSetGetTrackablesOfType(int trackableType, IntPtr trackableDataArray, int trackableDataArrayLength, IntPtr dataSetPtr); // 0x0051C540-0x0051C634
		private static extern int dataSetHasReachedTrackableLimit(IntPtr dataSetPtr); // 0x0051C640-0x0051C720
		private static extern int dataSetLoad(string relativePath, int storageType, IntPtr dataSetPtr); // 0x0051C730-0x0051C860
		private static extern void deinitFrameState(IntPtr frameState); // 0x0051C868-0x0051C970
		private static extern int device_GetMode(); // 0x0051C978-0x0051CA6C
		private static extern IntPtr device_GetSelectedViewer(); // 0x0051CA70-0x0051CB78
		private static extern IntPtr device_GetViewerList(); // 0x0051CB80-0x0051CC80
		private static extern int device_IsViewerPresent(); // 0x0051CC88-0x0051CD8C
		private static extern int device_SelectViewer(IntPtr vp); // 0x0051CD98-0x0051CEA4
		private static extern int device_SetMode(int mode); // 0x0051CEB0-0x0051CFB4
		private static extern void device_SetViewerPresent(bool present); // 0x0051CFC0-0x0051D0D4
		private static extern int deviceIsEyewearDevice(); // 0x0051D0D8-0x0051D1D8
		private static extern int diagnosticsRecorderAddScreenshot(string imageFilePath, int storageType); // 0x0051D1E8-0x0051D2F8
		private static extern int diagnosticsRecorderAddUserComment(string comment); // 0x0051D300-0x0051D408
		private static extern int diagnosticsRecorderClearAll(); // 0x0051D410-0x0051D4E4
		private static extern int diagnosticsRecorderClearUnpinned(); // 0x0051D4E8-0x0051D5C4
		private static extern int diagnosticsRecorderDeinit(); // 0x0051D5C8-0x0051D6D0
		private static extern IntPtr diagnosticsRecorderGenerateDiagnostics(string fileNamePrefix); // 0x0051D6D8-0x0051D7E4
		private static extern int diagnosticsRecorderInit(string diagnosticsDirectory, int storageType); // 0x0051D7F0-0x0051D930
		private static extern int diagnosticsRecorderStart(); // 0x0051D938-0x0051DA40
		private static extern int diagnosticsRecorderStop(); // 0x0051DA48-0x0051DB4C
		private static extern int eyewearCPMClearProfile(int profileID); // 0x0051DB58-0x0051DC6C
		private static extern int eyewearCPMGetActiveProfile(); // 0x0051DC70-0x0051DD44
		private static extern int eyewearCPMGetCameraToEyePose(int profileID, int eyeID, IntPtr matrix); // 0x0051DD58-0x0051DE48
		private static extern int eyewearCPMGetEyeProjection(int profileID, int eyeID, IntPtr matrix); // 0x0051DE58-0x0051DF44
		private static extern int eyewearCPMGetMaxCount(); // 0x0051DF48-0x0051E048
		private static extern IntPtr eyewearCPMGetProfileName(int profileID); // 0x0051E050-0x0051E168
		private static extern int eyewearCPMGetUsedCount(); // 0x0051E170-0x0051E274
		private static extern int eyewearCPMIsProfileUsed(int profileID); // 0x0051E280-0x0051E394
		private static extern int eyewearCPMSetActiveProfile(int profileID); // 0x0051E3A0-0x0051E47C
		private static extern int eyewearCPMSetCameraToEyePose(int profileID, int eyeID, IntPtr matrix); // 0x0051E490-0x0051E580
		private static extern int eyewearCPMSetEyeProjection(int profileID, int eyeID, IntPtr matrix); // 0x0051E590-0x0051E67C
		private static extern int eyewearCPMSetProfileName(int profileID, IntPtr name); // 0x0051E688-0x0051E7A8
		private static extern int eyewearDeviceGetScreenOrientation(); // 0x0051E7B0-0x0051E88C
		private static extern int eyewearDeviceIsDisplayExtended(); // 0x0051E890-0x0051E968
		private static extern int eyewearDeviceIsDisplayExtendedGLOnly(); // 0x0051E970-0x0051EA50
		private static extern int eyewearDeviceIsDualDisplay(); // 0x0051EA58-0x0051EB2C
		private static extern int eyewearDeviceIsPredictiveTrackingEnabled(); // 0x0051EB30-0x0051EC14
		private static extern int eyewearDeviceIsSeeThru(); // 0x0051EC18-0x0051ED1C
		private static extern int eyewearDeviceSetDisplayExtended(bool enable); // 0x0051ED28-0x0051EE08
		private static extern int eyewearDeviceSetPredictiveTracking(bool enable); // 0x0051EE10-0x0051EEF4
		private static extern float eyewearUserCalibratorGetMaxScaleHint(); // 0x0051EEF8-0x0051EFD8
		private static extern float eyewearUserCalibratorGetMinScaleHint(); // 0x0051EFE0-0x0051F0C0
		private static extern int eyewearUserCalibratorGetProjectionMatrix(IntPtr readingsDataArray, int numReadings, IntPtr cameraToEyeContainer, IntPtr projectionContainer); // 0x0051F0F0-0x0051F1F4
		private static extern int eyewearUserCalibratorInit(int surfaceWidth, int surfaceHeight, int targetWidth, int targetHeight); // 0x0051F220-0x0051F350
		private static extern int eyewearUserCalibratorIsStereoStretched(); // 0x0051F358-0x0051F438
		private static extern void frameCounterGetBenchmarkingData(IntPtr benchmarkingData); // 0x0051F440-0x0051F520
		private static extern int getCameraThreadID(); // 0x0051F528-0x0051F620
		private static extern void getVuforiaLibraryVersion(StringBuilder value, int maxLength); // 0x0051F630-0x0051F774
		private static extern int guideViewGetImage(IntPtr guideViewPtr, IntPtr imageDataPtr); // 0x0051F780-0x0051F890
		private static extern IntPtr guideViewGetName(IntPtr guideViewPtr); // 0x0051F898-0x0051F9A0
		private static extern int guideViewGetPose(IntPtr guideViewPtr, IntPtr position, IntPtr quaternion); // 0x0051F9B0-0x0051FAC8
		private static extern void guideViewSetPose(IntPtr guideViewPtr, IntPtr position, IntPtr quaternion); // 0x0051FAD8-0x0051FBF0
		private static extern int hasSurfaceBeenRecreated(); // 0x0051FBF8-0x0051FCFC
		private static extern int imageTargetBuilderBuild(string name, float screenSizeWidth); // 0x0051FD08-0x0051FE48
		private static extern int imageTargetBuilderGetFrameQuality(); // 0x0051FE50-0x0051FF2C
		private static extern IntPtr imageTargetBuilderGetTrackableSource(); // 0x0051FF30-0x00520010
		private static extern void imageTargetBuilderStartScan(); // 0x00520018-0x005200EC
		private static extern void imageTargetBuilderStopScan(); // 0x005200F0-0x005201C4
		private static extern int imageTargetCreateVirtualButton(IntPtr dataSetPtr, string trackableName, string virtualButtonName, IntPtr rectData); // 0x005201F0-0x00520324
		private static extern int imageTargetDestroyVirtualButton(IntPtr dataSetPtr, string trackableName, string virtualButtonName); // 0x00520338-0x00520464
		private static extern int imageTargetGetNumVirtualButtons(IntPtr dataSetPtr, string trackableName); // 0x00520470-0x0052057C
		private static extern int imageTargetGetVirtualButtonName(IntPtr dataSetPtr, string trackableName, int idx, StringBuilder vbName, int nameMaxLength); // 0x005205B0-0x005206F4
		private static extern int imageTargetGetVirtualButtons(IntPtr virtualButtonDataArray, IntPtr rectangleDataArray, int virtualButtonDataArrayLength, IntPtr dataSetPtr, string trackableName); // 0x00520728-0x0052084C
		private static extern void initFrameState(IntPtr frameState); // 0x00520858-0x0052095C
		private static extern void initPlatformNative(); // 0x00520960-0x00520A5C
		private static extern int modelTargetGetActiveGuideViewIndexFromTrackable(IntPtr trackablePtr); // 0x00520A68-0x00520B58
		private static extern int modelTargetGetBoundingBox(IntPtr dataSetPtr, string trackableName, IntPtr centerPtr, IntPtr halfExtents); // 0x00520B88-0x00520CDC
		private static extern IntPtr modelTargetGetGuideViewFromTrackable(IntPtr trackablePtr, int index); // 0x00520CE8-0x00520DD8
		private static extern int modelTargetGetNumGuideViewsFromTrackable(IntPtr trackablePtr); // 0x00520DE0-0x00520ECC
		private static extern int modelTargetGetSize(IntPtr dataSetPtr, string trackableName, IntPtr sizePtr); // 0x00520EE0-0x00521020
		private static extern int modelTargetSetActiveGuideViewIndexFromTrackable(IntPtr trackablePtr, int idx); // 0x00521030-0x00521128
		private static extern int modelTargetSetSize(IntPtr dataSetPtr, string trackableName, IntPtr sizePtr); // 0x00521138-0x00521278
		private static extern float multiTargetGetLargestSizeComponent(IntPtr dataSetPtr, string trackableName); // 0x00521288-0x00521398
		private static extern void nativeUnity_disableDistortion(bool disable); // 0x005213A0-0x00521480
		private static extern void nativeUnity_DisableEyeTextureOverride(); // 0x00521488-0x00521568
		private static extern void nativeUnity_EnableEyeTextureOverride(int eyeTextureWidth, int eyeTextureHeight, float vertFoVRad); // 0x00521578-0x00521670
		private static extern int nativeUnity_IsVuforiaVRDeviceReady(); // 0x00521678-0x00521754
		private static extern void nativeUnity_ResetStereoProjectionMatrices(); // 0x00521758-0x0052183C
		private static extern void nativeUnity_SetDeviceConnected(bool connected); // 0x00521848-0x00521928
		private static extern void nativeUnity_SetDistortionMeshNeedsRefresh(bool enabled); // 0x00521930-0x00521A1C
		private static extern void nativeUnity_SetEyeOffsets(IntPtr leftEyePosition, IntPtr leftEyeRotation, IntPtr rightEyePosition, IntPtr rightEyeRotation); // 0x00521A48-0x00521B78
		private static extern void nativeUnity_SetSingleCullingMatrix(IntPtr projectionMatrix, IntPtr viewMatrix); // 0x00521B88-0x00521C74
		private static extern void nativeUnity_SetStereoProjectionMatrix(int eyeId, IntPtr projectionMatrix); // 0x00521C80-0x00521D70
		private static extern void nativeUnity_SetVuforiaVRDeviceReady(bool isReady); // 0x00521D78-0x00521E5C
		private static extern int objectTargetGetSize(IntPtr dataSetPtr, string trackableName, IntPtr sizePtr); // 0x00521E70-0x00521FB0
		private static extern int objectTargetSetSize(IntPtr dataSetPtr, string trackableName, IntPtr sizePtr); // 0x00521FC0-0x00522100
		private static extern int objectTrackerActivateDataSet(IntPtr dataSetPtr); // 0x00522108-0x005221E8
		private static extern IntPtr objectTrackerCreateDataSet(); // 0x005221F0-0x005222C4
		private static extern int objectTrackerDeactivateDataSet(IntPtr dataSetPtr); // 0x005222D0-0x005223B0
		private static extern int objectTrackerDestroyDataSet(IntPtr dataSetPtr); // 0x005223B8-0x00522494
		private static extern IntPtr objectTrackerGetTargetFinder(int targetFinderType); // 0x005224A0-0x00522580
		private static extern void onPause(); // 0x00522588-0x0052266C
		private static extern void onResume(); // 0x00522670-0x00522758
		private static extern void onSurfaceChanged(int width, int height); // 0x00522768-0x00522878
		private static extern int positionalDeviceTracker_CreateAnchorFromHitTestResult(string name, IntPtr hitTestResult, IntPtr anchorData); // 0x00522888-0x005229B4
		private static extern int positionalDeviceTracker_CreateAnchorFromPose(string name, IntPtr unityPosition, IntPtr unityOrientation, IntPtr anchorData); // 0x005229E0-0x00522B0C
		private static extern int positionalDeviceTracker_DestroyAnchor(int anchor); // 0x00522B18-0x00522C00
		private static extern int positionalDeviceTracker_Reset(); // 0x00522C08-0x00522CE0
		private static extern void qcarAddCameraFrame(IntPtr pixels, int width, int height, int format, int stride, int frameIdx, int flipHorizontally); // 0x00522D20-0x00522E5C
		private static extern void qcarDeinit(); // 0x00522E60-0x00522F4C
		private static extern int qcarGetActiveFusionProvider(); // 0x00522F50-0x00523024
		private static extern int qcarGetBufferSize(int width, int height, int format); // 0x00523038-0x00523150
		private static extern int qcarInit(string licenseKey); // 0x00523158-0x00523274
		private static extern int qcarSetAllowedFusionProviders(int providerTypes); // 0x00523280-0x00523360
		private static extern int qcarSetDriverLibrary(string libraryName, IntPtr userData); // 0x00523370-0x005234AC
		private static extern int qcarSetFrameFormat(int format, int enabled); // 0x005234B8-0x005235CC
		private static extern int qcarSetHint(uint hint, int value); // 0x005235D8-0x005236DC
		private static extern int recorderInit(string filePath); // 0x005236E8-0x0052380C
		private static extern int recorderStart(); // 0x00523810-0x00523900
		private static extern int recorderStop(); // 0x00523908-0x005239F8
		private static extern IntPtr rendererCreateNativeTexture(uint width, uint height, int format); // 0x00523A08-0x00523AF4
		private static extern int rendererGetGraphicsAPI(); // 0x00523AF8-0x00523BFC
		private static extern int rendererGetRecommendedFps(int flags); // 0x00523C08-0x00523D20
		private static extern IntPtr rendererGetRenderEventCallback(); // 0x00523D28-0x00523E00
		private static extern void rendererGetVideoBackgroundCfg(IntPtr bgCfg); // 0x00523E08-0x00523EE8
		private static extern int rendererGetVideoBackgroundTextureInfo(IntPtr texInfo); // 0x00523EF0-0x00523FD8
		private static extern IntPtr rendererGetVideoTextureUpdateCallback(); // 0x00523FE0-0x005240C0
		private static extern int rendererIsVideoBackgroundTextureInfoAvailable(); // 0x005240C8-0x005241B0
		private static extern void rendererRequestNativeTextureCreation(uint width, uint height, int format); // 0x005241C0-0x005242B8
		private static extern void rendererSetVideoBackgroundCfg(IntPtr bgCfg); // 0x005242C0-0x005243A0
		private static extern void rendererSetVideoBackgroundRenderingInfo(int format, int width, int height); // 0x005243B0-0x005244A8
		private static extern int rendererSetVideoBackgroundTextureID(int textureID); // 0x005244B0-0x00524594
		private static extern int rendererSetVideoBackgroundTexturePtr(IntPtr texturePtr); // 0x005245A0-0x00524688
		private static extern IntPtr rendererTryGetVideoBackgroundTexturePtr(); // 0x00524690-0x00524770
		private static extern void renderingPrimitives_DeleteCopy(); // 0x00524778-0x00524850
		private static extern void renderingPrimitives_GetDistortionMesh(int viewId, IntPtr meshData); // 0x00524860-0x00524950
		private static extern void renderingPrimitives_GetDistortionMeshSize(int viewId, IntPtr size); // 0x00524960-0x00524A54
		private static extern void renderingPrimitives_GetDistortionTextureViewport(int viewID, IntPtr viewportContainer); // 0x00524A60-0x00524B5C
		private static extern void renderingPrimitives_GetEffectiveFov(int viewID, IntPtr fovContainer); // 0x00524B68-0x00524C54
		private static extern void renderingPrimitives_GetEyeDisplayAdjustmentMatrix(int viewID, IntPtr matrixContainer); // 0x00524C60-0x00524D5C
		private static extern void renderingPrimitives_GetNormalizedViewport(int viewID, IntPtr viewportContainer); // 0x00524D68-0x00524E5C
		private static extern void renderingPrimitives_GetProjectionMatrix(int viewID, float near, float far, IntPtr projectionContainer, int screenOrientation); // 0x00524E90-0x00524F98
		private static extern void renderingPrimitives_GetVideoBackgroundProjectionMatrix(int viewID, float near, float far, IntPtr projectionContainer, int screenOrientation); // 0x00524FD0-0x005250E8
		private static extern void renderingPrimitives_GetViewport(int viewID, IntPtr viewportContainer); // 0x005250F8-0x005251E0
		private static extern void renderingPrimitives_GetViewportCentreToEyeAxis(int viewID, IntPtr vectorContainer); // 0x005251F0-0x005252E8
		private static extern void renderingPrimitives_UpdateCopy(); // 0x005252F0-0x005253C8
		private static extern int rotationalDeviceTracker_GetModelCorrectionMode(); // 0x005253D0-0x005254B8
		private static extern void rotationalDeviceTracker_GetModelCorrectionTransform(IntPtr pivot); // 0x005254C0-0x005255B4
		private static extern int rotationalDeviceTracker_GetPosePrediction(); // 0x005255B8-0x0052569C
		private static extern int rotationalDeviceTracker_Recenter(); // 0x005256A0-0x0052577C
		private static extern int rotationalDeviceTracker_SetModelCorrectionMode(int mode); // 0x00525788-0x00525878
		private static extern int rotationalDeviceTracker_SetModelCorrectionModeWithTransform(int mode, IntPtr pivot); // 0x00525888-0x0052598C
		private static extern int rotationalDeviceTracker_SetPosePrediction(bool mode); // 0x00525998-0x00525A84
		private static extern void setApplicationEnvironment(string unityVersionString, int sdkWrapperType); // 0x00525A90-0x00525BCC
		private static extern int setHolographicAppCS(IntPtr appSpecifiedCS); // 0x00525BD8-0x00525CE4
		private static extern void setRenderBuffers(IntPtr colorBuffer); // 0x00525CF0-0x00525DF8
		private static extern void setStateBufferSize(int size); // 0x00525E00-0x00525F0C
		private static extern void smartTerrain_free_hitTest_list(IntPtr listPtr); // 0x00525F18-0x00525FF8
		private static extern IntPtr smartTerrain_hitTest(IntPtr unityViewPortPosition, float deviceHeight, int orientation); // 0x00526008-0x00526128
		private static extern void targetFinderClearTrackables(IntPtr targetFinderPtr); // 0x00526130-0x0052620C
		private static extern int targetFinderDeinit(IntPtr targetFinderPtr); // 0x00526218-0x00526324
		private static extern int targetFinderEnableTracking(IntPtr searchResult, IntPtr trackableData, IntPtr targetFinderPtr); // 0x00526338-0x00526424
		private static extern void targetFinderFreeCloudRecoResultList(IntPtr listPtr); // 0x00526430-0x00526514
		private static extern void targetFinderFreeModelRecoResultList(IntPtr listPtr); // 0x00526520-0x00526604
		private static extern int targetFinderGetInitState(IntPtr targetFinderPtr); // 0x00526610-0x00526728
		private static extern IntPtr targetFinderGetObjectTarget(IntPtr targetFinderPtr, int index); // 0x00526738-0x0052681C
		private static extern void targetFinderGetObjectTargets(IntPtr trackableIdArray, int trackableIdArrayLength, IntPtr targetFinderPtr); // 0x00526830-0x00526920
		private static extern int targetFinderStartInitCloudReco(IntPtr targetFinderPtr, string userAuth, string secretAuth); // 0x00526930-0x00526A5C
		private static extern int targetFinderStartInitModelReco(IntPtr targetFinderPtr, string localDatabasePath, int storageType); // 0x00526A70-0x00526B84
		private static extern int targetFinderStartRecognition(IntPtr targetFinderPtr); // 0x00526B90-0x00526C70
		private static extern int targetFinderStop(IntPtr targetFinderPtr); // 0x00526C78-0x00526D80
		private static extern IntPtr targetFinderUpdate(IntPtr targetFinderState, int filterMode, IntPtr targetFinderPtr); // 0x00526D90-0x00526EAC
		private static extern int trackerManagerDeinitTracker(int trackerTypeID); // 0x00526EB8-0x00526F94
		private static extern int trackerManagerInitTracker(int trackerTypeID); // 0x00526FA0-0x005270B8
		private static extern int trackerStart(int trackerTypeID); // 0x005270C0-0x005271C0
		private static extern void trackerStop(int trackerTypeID); // 0x005271C8-0x005272C4
		private static extern int updateQCAR(IntPtr imageHeaderDataArray, int imageHeaderArrayLength, IntPtr frameState, int screenOrientation); // 0x005272F0-0x00527404
		private static extern int viewerParameters_ContainsMagnet(IntPtr obj); // 0x00527410-0x005274F0
		private static extern IntPtr viewerParameters_copy(IntPtr obj); // 0x005274F8-0x00527608
		private static extern void viewerParameters_delete(IntPtr obj); // 0x00527610-0x00527724
		private static extern int viewerParameters_GetButtonType(IntPtr obj); // 0x00527730-0x00527810
		private static extern float viewerParameters_GetDistortionCoefficient(IntPtr obj, int idx); // 0x00527820-0x00527914
		private static extern void viewerParameters_GetFieldOfView(IntPtr obj, IntPtr result); // 0x00527920-0x00527A08
		private static extern float viewerParameters_GetInterLensDistance(IntPtr obj); // 0x00527A10-0x00527AF8
		private static extern float viewerParameters_GetLensCentreToTrayDistance(IntPtr obj); // 0x00527B00-0x00527BF0
		private static extern IntPtr viewerParameters_GetManufacturer(IntPtr obj); // 0x00527BF8-0x00527CDC
		private static extern IntPtr viewerParameters_GetName(IntPtr obj); // 0x00527CE8-0x00527E00
		private static extern int viewerParameters_GetNumDistortionCoefficients(IntPtr obj); // 0x00527E08-0x00527EF8
		private static extern float viewerParameters_GetScreenToLensDistance(IntPtr obj); // 0x00527F00-0x00527FEC
		private static extern int viewerParameters_GetTrayAlignment(IntPtr obj); // 0x00527FF8-0x005280DC
		private static extern float viewerParameters_GetVersion(IntPtr obj); // 0x005280E8-0x005281C4
		private static extern IntPtr viewerParametersList_Begin(IntPtr vpList); // 0x005281D0-0x005282AC
		private static extern IntPtr viewerParametersList_GetByIndex(IntPtr vpList, int idx); // 0x005282B8-0x005283A0
		private static extern IntPtr viewerParametersList_GetByNameManufacturer(IntPtr vpList, string name, string manufacturer); // 0x005283B0-0x005284E8
		private static extern IntPtr viewerParametersList_GetListForAuthoringTools(); // 0x005284F0-0x005285D8
		private static extern IntPtr viewerParametersList_Next(IntPtr vpList, IntPtr vpLast); // 0x005285E8-0x00528708
		private static extern void viewerParametersList_SetSDKFilter(IntPtr vpList, string filter); // 0x00528718-0x00528820
		private static extern int viewerParametersList_Size(IntPtr vpList); // 0x00528828-0x00528940
		private static extern int virtualButtonGetId(IntPtr dataSetPtr, string trackableName, string virtualButtonName); // 0x00528950-0x00528AA0
		private static extern int virtualButtonSetAreaRectangle(IntPtr dataSetPtr, string trackableName, string virtualButtonName, IntPtr rectData); // 0x00528AD0-0x00528C04
		private static extern int virtualButtonSetEnabled(IntPtr dataSetPtr, string trackableName, string virtualButtonName, int enabled); // 0x00528C30-0x00528D90
		private static extern int virtualButtonSetSensitivity(IntPtr dataSetPtr, string trackableName, string virtualButtonName, int sensitivity); // 0x00528DC0-0x00528EF0
		private static extern int vuMarkTargetGetInstanceImage(int vuMarkTargetID, IntPtr instanceImage); // 0x00528F00-0x00528FE8
		private static extern int vuMarkTemplateGetOrigin(IntPtr dataSetPtr, string trackableName, IntPtr originPtr); // 0x00528FF8-0x00529140
		private static extern int vuMarkTemplateGetVuMarkUserData(IntPtr dataSetPtr, string trackableName, StringBuilder data, uint dataLength); // 0x00529170-0x005292AC
		private static extern int vuMarkTemplateSetTrackingFromRuntimeAppearance(IntPtr dataSetPtr, string trackableName, bool enable); // 0x005292C0-0x005293E4
	}

	internal static class VuforiaWrapper // TypeDefIndex: 3437
	{
		// Fields
		private static IVuforiaWrapper sWrapper; // 0x00
		private static IVuforiaWrapper sCamIndependentWrapper; // 0x04
	
		// Properties
		public static IVuforiaWrapper Instance { get; } // 0x00AFC1F0-0x00AFC3B8 
		public static IVuforiaWrapper CamIndependentInstance { get; } // 0x00AFE6BC-0x00AFE934 
	
		// Constructors
		static VuforiaWrapper(); // 0x00AFEADC-0x00AFEAE0
	
		// Methods
		public static void CreateRuntimeInstance(); // 0x00AFE5A4-0x00AFE6BC
		private static void CreateCamIndependentInstance(); // 0x00AFE934-0x00AFEA4C
		public static void SetImplementation(IVuforiaWrapper implementation); // 0x00AFEA4C-0x00AFEADC
	}

	internal interface IPlayModeEditorUtility // TypeDefIndex: 3438
	{
		// Methods
		void DisplayDialog(string title, string message, string ok);
		WebCamProfile.ProfileCollection LoadAndParseWebcamProfiles();
		void RestartPlayMode();
		void ShowErrorInMouseOverWindow(string error);
		bool IsVuforiaEnabledInPlayerSettings();
		bool IsVuforiaActiveAndEULAAccepted();
		string GetEmulatorDatabasePath();
	}

	public interface IUserDefinedTargetEventHandler // TypeDefIndex: 3439
	{
		// Methods
		void OnInitialized();
		void OnFrameQualityChanged(ImageTargetBuilder.FrameQuality frameQuality);
		void OnNewTrackableSource(TrackableSource trackableSource);
	}

	public interface IVideoBackgroundEventHandler // TypeDefIndex: 3440
	{
		// Methods
		void OnVideoBackgroundConfigChanged();
	}

	public class StateManager // TypeDefIndex: 3441
	{
		// Fields
		private readonly Dictionary<int, TrackableBehaviour> mTrackableBehaviours; // 0x08
		private readonly List<int> mAutomaticallyCreatedBehaviours; // 0x0C
		private readonly List<TrackableBehaviour> mBehavioursMarkedForDeletion; // 0x10
		private readonly List<TrackableBehaviour> mActiveTrackableBehaviours; // 0x14
		private readonly VuMarkManager mVuMarkManager; // 0x18
		private readonly DeviceTrackingManager mDeviceTrackingManager; // 0x1C
		private GameObject mCameraPositioningHelper; // 0x20
		private IExtendedTrackingManager mExtendedTrackingManager; // 0x24
		private readonly IlluminationManager mIlluminationManager; // 0x28
	
		// Constructors
		internal StateManager(); // 0x0020C974-0x0020CB0C
	
		// Methods
		public IEnumerable<TrackableBehaviour> GetActiveTrackableBehaviours(); // 0x0020CC00-0x0020CCB0
		public IEnumerable<TrackableBehaviour> GetTrackableBehaviours(); // 0x00205CD8-0x0020608C
		public void DestroyTrackableBehavioursForTrackable(Trackable trackable, bool destroyGameObjects = true /* Metadata: 0x0021C209 */); // 0x0020CFE4-0x0020D408
		public void ReassociateTrackables(); // 0x0020D418-0x0020D8D4
		public VuMarkManager GetVuMarkManager(); // 0x0020DAA4-0x0020DAAC
		public IlluminationManager GetIlluminationManager(); // 0x0020FF34-0x0020FF3C
		internal void SetExtendedTrackingManager(IExtendedTrackingManager extendedTrackingManager); // 0x0020FF3C-0x0020FF44
		internal IExtendedTrackingManager GetExtendedTrackingManager(); // 0x0020FF44-0x0020FF4C
		internal void AddTrackableBehaviour(TrackableBehaviour trackableBehaviour); // 0x0020FF4C-0x00210180
		internal void RemoveTrackableBehaviour(int id); // 0x00210180-0x00210238
		internal void AssociateTrackableBehavioursForDataSet(DataSet dataSet); // 0x0020E344-0x0020FF34
		internal void RemoveDestroyedTrackables(); // 0x0020D8D4-0x0020DAA4
		internal void ClearTrackableBehaviours(); // 0x002119BC-0x00211AD4
		internal ImageTargetBehaviour FindOrCreateImageTargetBehaviourForTrackable(ImageTarget trackable, GameObject gameObject); // 0x00211B80-0x00211B98
		internal ImageTargetBehaviour FindOrCreateImageTargetBehaviourForTrackable(ImageTarget trackable, GameObject gameObject, DataSet dataSet); // 0x00211B98-0x00211E64
		internal ModelTargetBehaviour FindOrCreateModelTargetBehaviourForTrackable(ModelTarget trackable, GameObject gameObject); // 0x00211E64-0x00212130
		internal void SetTrackableBehavioursForTrackableToNotFound(Trackable trackable); // 0x00212130-0x00212284
		internal void EnableTrackableBehavioursForTrackable(Trackable trackable, bool enabled); // 0x00212284-0x00212448
		internal void RemoveDisabledTrackablesFromQueue(ref LinkedList<VuforiaManager.TrackableIdPair> trackableIDs); // 0x00212448-0x002125AC
		internal void UpdateTrackablePoses(Vector3 positionalOffset, Quaternion rotationalOffset, TrackerData.TrackableResultData[] trackableResultDataArray, TrackerData.VuMarkTargetResultData[] vuMarkResultDataArray, VuforiaManager.TrackableIdPair originTrackableID, int frameIndex); // 0x002127B0-0x00212808
		internal void UpdateTrackablePoses(Vector3 positionalOffset, Quaternion rotationalOffset, TrackerData.TrackableResultData[] trackableResultDataArray, TrackerData.VuMarkTargetResultData[] vuMarkResultDataArray, VuforiaManager.TrackableIdPair originTrackableID, int frameIndex, bool updateTrackableStates); // 0x00212808-0x00213028
		internal void UpdateVirtualButtons(int numVirtualButtons, IntPtr virtualButtonPtr); // 0x00213530-0x00213EA0
		internal void UpdateVuMarks(TrackerData.VuMarkTargetData[] vuMarkData, TrackerData.VuMarkTargetResultData[] vuMarkResultData); // 0x00214278-0x002142B0
		internal void UpdateIlluminationManager(TrackerData.IlluminationData illuminationData); // 0x002143D8-0x00214414
		internal DeviceTrackingManager GetDeviceTrackingManager(); // 0x0020747C-0x00207484
		internal static void PositionTrackable(TrackableBehaviour trackableBehaviour, Vector3 positionalOffset, Quaternion rotationalOffset, TrackerData.PoseData targetPose, double timeStamp); // 0x00213028-0x0021329C
		internal static void PositionCamera(Vector3 localRefPosition, Quaternion localRefRotation, Transform cameraTransform, TrackerData.PoseData camToTargetPose); // 0x00214630-0x00214824
		internal bool CalculateTransformOffset(VuforiaManager.TrackableIdPair trackableID, TrackerData.PoseData vuforiaPose, out Vector3 positionalOffset, out Quaternion rotationalOffset); // 0x00214824-0x00214E24
		private static Quaternion RotationAdjustForTrackableCSVuforiaToUnity(TrackableBehaviour trackableBehaviour); // 0x00214414-0x00214620
		internal static Vector3 ExtractTranslationFromMatrix(Matrix4x4 matrix); // 0x00214E24-0x00214E3C
		internal static Quaternion ExtractRotationFromMatrix(Matrix4x4 matrix); // 0x00214E3C-0x00214EFC
		private bool TryGetBehaviour(VuforiaManager.TrackableIdPair trackableId, out TrackableBehaviour trackableBehaviour); // 0x002125AC-0x002127B0
		private void AssociateVirtualButtonBehaviours(VirtualButtonBehaviour[] vbBehaviours, DataSet dataSet); // 0x00210518-0x0021078C
		private void CreateMissingDataSetTrackableBehaviours(DataSet dataSet); // 0x0021078C-0x002119BC
		private ImageTargetBehaviour CreateImageTargetBehaviour(ImageTarget imageTarget); // 0x00215528-0x00215E48
		private MultiTargetBehaviour CreateMultiTargetBehaviour(MultiTarget multiTarget); // 0x00215E48-0x00216470
		private CylinderTargetBehaviour CreateCylinderTargetBehaviour(CylinderTarget cylinderTarget); // 0x00216470-0x00216F00
		private VuMarkBehaviour CreateVuMarkBehaviour(VuMarkTemplate target); // 0x0021709C-0x002176C4
		private ObjectTargetBehaviour CreateObjectTargetBehaviour(ObjectTarget objectTarget); // 0x002181E0-0x00218C7C
		private ModelTargetBehaviour CreateModelTargetBehaviour(ModelTarget modelTarget); // 0x002176C4-0x002181E0
	}

	internal class TextureRenderer // TypeDefIndex: 3442
	{
		// Fields
		private Camera mTextureBufferCamera; // 0x08
		private int mTextureWidth; // 0x0C
		private int mTextureHeight; // 0x10
	
		// Properties
		public int Width { get; } // 0x0021C970-0x0021C978 
		public int Height { get; } // 0x0021C978-0x0021C980 
	
		// Constructors
		public TextureRenderer(Texture textureToRender, int renderTextureLayer, VuforiaRenderer.Vec2I requestedTextureSize); // 0x0021C980-0x0021D408
	
		// Methods
		public RenderTexture Render(); // 0x0021D408-0x0021D478
		public void Destroy(); // 0x0021D478-0x0021D568
	}

	internal abstract class TrackableImpl : Trackable // TypeDefIndex: 3443
	{
		// Fields
		[CompilerGenerated] // 0x0018A078-0x0018A088
		private string <Name>k__BackingField; // 0x08
		[CompilerGenerated] // 0x0018A088-0x0018A098
		private int <ID>k__BackingField; // 0x0C
	
		// Properties
		public string Name { [CompilerGenerated] /* 0x0018ACEC-0x0018ACFC */ get; [CompilerGenerated] /* 0x0018ACFC-0x0018AD0C */ protected set; } // 0x0021E7A0-0x0021E7A8 0x0021E790-0x0021E798
		public int ID { [CompilerGenerated] /* 0x0018AD0C-0x0018AD1C */ get; [CompilerGenerated] /* 0x0018AD1C-0x0018AD2C */ protected set; } // 0x0021E7A8-0x0021E7B0 0x0021E798-0x0021E7A0
	
		// Constructors
		protected TrackableImpl(string name, int id); // 0x0021E768-0x0021E790
	}

	internal class WebCam : IWebCam // TypeDefIndex: 3444
	{
		// Fields
		private readonly Camera[] mARCameras; // 0x08
		private readonly int[] mOriginalCameraCullMask; // 0x0C
		private readonly IWebCamTexAdaptor mWebCamTexture; // 0x10
		private CameraDevice.VideoModeData mVideoModeData; // 0x14
		private TextureRenderer mTextureRenderer; // 0x24
		private Texture2D mBufferReadTexture; // 0x28
		private Rect mReadPixelsRect; // 0x2C
		private WebCamProfile.ProfileData mWebCamProfile; // 0x3C
		private bool mIsDirty; // 0x50
		private int mLastFrameIdx; // 0x54
		private readonly int mRenderTextureLayer; // 0x58
		private bool mWebcamPlaying; // 0x5C
		[CompilerGenerated] // 0x0018A098-0x0018A0A8
		private bool <IsTextureSizeAvailable>k__BackingField; // 0x5D
	
		// Properties
		public bool DidUpdateThisFrame { get; } // 0x00AFEB10-0x00AFEBFC 
		public bool IsPlaying { get; } // 0x00AFEC04-0x00AFECDC 
		public int ActualWidth { get; } // 0x00AFECDC-0x00AFED08 
		public int ActualHeight { get; } // 0x00AFED08-0x00AFED34 
		public bool IsTextureSizeAvailable { [CompilerGenerated] /* 0x0018AD2C-0x0018AD3C */ get; [CompilerGenerated] /* 0x0018AD3C-0x0018AD4C */ private set; } // 0x00AFEBFC-0x00AFEC04 0x00AFED34-0x00AFED3C
		public VuforiaRenderer.Vec2I ResampledTextureSize { get; } // 0x00AFED3C-0x00AFED50 
	
		// Constructors
		public WebCam(Camera[] arCameras, int renderTextureLayer, string webcamDeviceName, Func<string, WebCamProfile.ProfileData, IWebCamTexAdaptor> webCamTexProvider); // 0x00AFF018-0x00AFF4E4
	
		// Methods
		private void ComputeResampledTextureSize(); // 0x00AFED50-0x00AFF018
		public void StartCamera(); // 0x00AFF704-0x00AFF878
		public void StopCamera(); // 0x00AFF878-0x00AFF958
		public void ResetPlaying(); // 0x00AFF958-0x00AFF96C
		public Color32[] GetPixels32AndBufferFrame(); // 0x00AFF96C-0x00AFFA34
		public void RenderFrame(int frameIndex); // 0x00AFFA34-0x00AFFBBC
		public CameraDevice.VideoModeData GetVideoMode(); // 0x00AFFBBC-0x00AFFBCC
		public bool IsRendererDirty(); // 0x00AFFBCC-0x00AFFBF8
		public void OnDestroy(); // 0x00AFFBF8-0x00AFFDD0
		public void Update(); // 0x00AFFDD0-0x00B004BC
	}

	public class WebCamProfile // TypeDefIndex: 3445
	{
		// Fields
		private readonly ProfileCollection mProfileCollection; // 0x08
	
		// Properties
		public ProfileData Default { get; } // 0x00AFF6EC-0x00AFF704 
	
		// Nested types
		public struct ProfileData // TypeDefIndex: 3446
		{
			// Fields
			public VuforiaRenderer.Vec2I RequestedTextureSize; // 0x00
			public VuforiaRenderer.Vec2I ResampledTextureSize; // 0x08
			public int RequestedFPS; // 0x10
		}
	
		public struct ProfileCollection // TypeDefIndex: 3447
		{
			// Fields
			public readonly ProfileData DefaultProfile; // 0x00
			public readonly Dictionary<string, ProfileData> Profiles; // 0x14
	
			// Constructors
			public ProfileCollection(ProfileData defaultProfile, Dictionary<string, ProfileData> profiles); // 0x00B01020-0x00B01044
		}
	
		// Constructors
		public WebCamProfile(); // 0x00AFF4E4-0x00AFF5FC
	
		// Methods
		internal ProfileData GetProfile(string webcamName); // 0x00AFF5FC-0x00AFF6EC
		internal bool ProfileAvailable(string webcamName); // 0x00B00F24-0x00B01020
	}

	public interface ITrackableEventHandler // TypeDefIndex: 3448
	{
		// Methods
		void OnTrackableStateChanged(TrackableBehaviour.Status previousStatus, TrackableBehaviour.Status newStatus);
	}

	public interface IVirtualButtonEventHandler // TypeDefIndex: 3449
	{
		// Methods
		void OnButtonPressed(VirtualButtonBehaviour vb);
		void OnButtonReleased(VirtualButtonBehaviour vb);
	}

	public class ImageTargetBehaviour : DataSetTrackableBehaviour // TypeDefIndex: 3450
	{
		// Fields
		[HideInInspector] // 0x0018A0A8-0x0018A0D8
		[SerializeField] // 0x0018A0A8-0x0018A0D8
		private float mAspectRatio; // 0x3C
		[HideInInspector] // 0x0018A0D8-0x0018A108
		[SerializeField] // 0x0018A0D8-0x0018A108
		private ImageTargetType mImageTargetType; // 0x40
		[HideInInspector] // 0x0018A108-0x0018A138
		[SerializeField] // 0x0018A108-0x0018A138
		private float mWidth; // 0x44
		[HideInInspector] // 0x0018A138-0x0018A168
		[SerializeField] // 0x0018A138-0x0018A168
		private float mHeight; // 0x48
		private ImageTarget mImageTarget; // 0x4C
		private Dictionary<int, VirtualButtonBehaviour> mVirtualButtonBehaviours; // 0x50
		private float mLastTransformScale; // 0x54
		private Vector2 mLastSize; // 0x58
	
		// Properties
		public ImageTarget ImageTarget { get; } // 0x003076E8-0x003076F0 
		internal ImageTargetType ImageTargetType { get; } // 0x00308724-0x0030872C 
	
		// Constructors
		public ImageTargetBehaviour(); // 0x003076F0-0x00307750
	
		// Methods
		protected override bool CorrectScaleImpl(); // 0x00307750-0x00307784
		protected override void InternalUnregisterTrackable(); // 0x003079F8-0x00307A08
		public VirtualButtonBehaviour CreateVirtualButton(string vbName, Vector2 position, Vector2 size); // 0x00307A08-0x00307C90
		public static VirtualButtonBehaviour CreateVirtualButton(string vbName, Vector2 localScale, GameObject immediateParent); // 0x00307ED4-0x00308264
		public IEnumerable<VirtualButtonBehaviour> GetVirtualButtonBehaviours(); // 0x00308264-0x003082DC
		public void DestroyVirtualButton(string vbName); // 0x003082DC-0x003085B8
		public Vector2 GetSize(); // 0x003085B8-0x003086CC
		public void SetWidth(float width); // 0x003086CC-0x003086F8
		public void SetHeight(float height); // 0x003086F8-0x00308724
		internal override bool InitializeTarget(Trackable trackable, bool applyTargetScaleToBehaviour); // 0x0030872C-0x00308D08
		internal void AssociateExistingVirtualButtonBehaviour(VirtualButtonBehaviour virtualButtonBehaviour); // 0x00308D08-0x0030951C
		internal void CreateMissingVirtualButtonBehaviours(); // 0x0030951C-0x0030988C
		internal bool TryGetVirtualButtonBehaviourByID(int id, out VirtualButtonBehaviour virtualButtonBehaviour); // 0x0030A1D0-0x0030A258
		private void CreateVirtualButtonFromNative(VirtualButton virtualButton); // 0x0030988C-0x0030A1D0
		private bool CreateNewVirtualButtonFromBehaviour(VirtualButtonBehaviour newVBB); // 0x00307C90-0x00307ED4
		private void OnValidate(); // 0x00307784-0x003079F8
	}

	public class ObjectTracker : Tracker // TypeDefIndex: 3451
	{
		// Fields
		private List<DataSet> mActiveDataSets; // 0x0C
		private List<DataSet> mDataSets; // 0x10
		private Dictionary<Type, TargetFinder> mTargetFinders; // 0x14
		private ImageTargetBuilder mImageTargetBuilder; // 0x18
	
		// Properties
		public ImageTargetBuilder ImageTargetBuilder { get; } // 0x0031B964-0x0031B96C 
	
		// Constructors
		internal ObjectTracker(); // 0x0031B96C-0x0031BA68
	
		// Methods
		public override bool Start(); // 0x0031BA68-0x0031BC84
		public override void Stop(); // 0x0031BC84-0x0031C2FC
		public DataSet CreateDataSet(); // 0x0031C2FC-0x0031C4C4
		public bool DestroyDataSet(DataSet dataSet, bool destroyTrackables); // 0x0031C4C4-0x0031C6DC
		public bool ActivateDataSet(DataSet dataSet); // 0x0030D280-0x0030D7DC
		public bool DeactivateDataSet(DataSet dataSet); // 0x0030CA10-0x0030CF6C
		public IEnumerable<DataSet> GetActiveDataSets(); // 0x0030C9AC-0x0030CA10
		public IEnumerable<DataSet> GetDataSets(); // 0x0031C6DC-0x0031C6E4
		public void DestroyAllDataSets(bool destroyTrackables); // 0x0031C6E4-0x0031C8FC
		public TargetFinder GetTargetFinder<T>()
			where T : TargetFinder;
		public IEnumerable<TargetFinder> GetTargetFinders(); // 0x0031C8FC-0x0031C988
	}

	public interface MultiTarget : ObjectTarget // TypeDefIndex: 3452
	{
	}

	public class MultiTargetBehaviour : DataSetTrackableBehaviour // TypeDefIndex: 3453
	{
		// Fields
		private MultiTarget mMultiTarget; // 0x3C
	
		// Properties
		public MultiTarget MultiTarget { get; } // 0x0031687C-0x00316884 
	
		// Constructors
		public MultiTargetBehaviour(); // 0x003169C4-0x003169CC
	
		// Methods
		protected override void InternalUnregisterTrackable(); // 0x00316884-0x00316894
		internal override bool InitializeTarget(Trackable trackable, bool applyTargetScaleToBehaviour); // 0x00316894-0x003169C4
	}

	public static class VuforiaUnity // TypeDefIndex: 3454
	{
		// Fields
		private static IHoloLensApiAbstraction mHoloLensApiAbstraction; // 0x00
		private const int UNITY_SDK_WRAPPER_UFO = 3914683; // Metadata: 0x0021C20A
		private static bool mRendererDirty; // 0x04
		private static int mWrapperType; // 0x08
	
		// Nested types
		public enum InitError // TypeDefIndex: 3455
		{
			INIT_VUFORIA_DRIVER_FAILED = -11,
			INIT_EXTERNAL_DEVICE_NOT_DETECTED = -10,
			INIT_LICENSE_ERROR_PRODUCT_TYPE_MISMATCH = -9,
			INIT_LICENSE_ERROR_CANCELED_KEY = -8,
			INIT_LICENSE_ERROR_NO_NETWORK_TRANSIENT = -7,
			INIT_LICENSE_ERROR_NO_NETWORK_PERMANENT = -6,
			INIT_LICENSE_ERROR_INVALID_KEY = -5,
			INIT_LICENSE_ERROR_MISSING_KEY = -4,
			INIT_NO_CAMERA_ACCESS = -3,
			INIT_DEVICE_NOT_SUPPORTED = -2,
			INIT_ERROR = -1,
			INIT_SUCCESS = 0
		}
	
		public enum VuforiaHint // TypeDefIndex: 3456
		{
			HINT_MAX_SIMULTANEOUS_IMAGE_TARGETS = 0,
			HINT_MAX_SIMULTANEOUS_OBJECT_TARGETS = 1,
			HINT_DELAYED_LOADING_OBJECT_DATASETS = 2,
			HINT_ASYNC_FETCH_OF_LATEST_CALIBRATION = 3
		}
	
		public enum StorageType // TypeDefIndex: 3457
		{
			STORAGE_APP = 0,
			STORAGE_APPRESOURCE = 1,
			STORAGE_ABSOLUTE = 2
		}
	
		// Constructors
		static VuforiaUnity(); // 0x00AFD010-0x00AFD0B0
	
		// Methods
		public static void Deinit(); // 0x00AFC0EC-0x00AFC1F0
		public static bool IsRendererDirty(); // 0x00AFC3B8-0x00AFC4AC
		public static bool SetHint(VuforiaHint hint, int value); // 0x00AFC4AC-0x00AFC5CC
		public static bool SetHint(uint hint, int value); // 0x00AFC5CC-0x00AFC6EC
		public static void OnPause(); // 0x00AFC6EC-0x00AFC7F0
		public static void OnResume(); // 0x00AFC7F0-0x00AFC8F8
		public static void SetRendererDirty(); // 0x00AFC8F8-0x00AFC988
		public static string GetVuforiaLibraryVersion(); // 0x00AFC988-0x00AFCADC
		public static bool SetDriverLibrary(string libraryName, IntPtr userData); // 0x00AFCADC-0x00AFCBFC
		public static bool SetDriverLibrary(string libraryName); // 0x00AFCBFC-0x00AFCC80
		public static bool SetHolographicAppCoordinateSystem(IntPtr appSpecifiedCS); // 0x00AFCC80-0x00AFCD98
		public static void SetHoloLensApiAbstraction(IHoloLensApiAbstraction holoLensApiAbstraction); // 0x00AFCD98-0x00AFCE28
		internal static IHoloLensApiAbstraction GetHoloLensApiAbstraction(); // 0x00AFCE28-0x00AFCEB4
		internal static void SetApplicationEnvironment(); // 0x00AFCEB4-0x00AFD010
	}

	public class VuforiaARController : ARController // TypeDefIndex: 3458
	{
		// Fields
		private CameraDevice.CameraDeviceMode CameraDeviceModeSetting; // 0x0C
		private int MaxSimultaneousImageTargets; // 0x10
		private int MaxSimultaneousObjectTargets; // 0x14
		private bool UseDelayedLoadingObjectTargets; // 0x18
		private WorldCenterMode mWorldCenterMode; // 0x1C
		private TrackableBehaviour mWorldCenter; // 0x20
		private List<IVideoBackgroundEventHandler> mVideoBgEventHandlers; // 0x24
		private Action mOnBeforeVuforiaTrackersInitialized; // 0x28
		private Action mOnVuforiaInitialized; // 0x2C
		private Action mOnVuforiaStarted; // 0x30
		private Action mOnVuforiaDeinitialized; // 0x34
		private Action mOnTrackablesUpdated; // 0x38
		private Action mRenderOnUpdate; // 0x3C
		private Action<bool> mOnPause; // 0x40
		private bool mPaused; // 0x44
		private Action mOnBackgroundTextureChanged; // 0x48
		private bool mStartHasBeenInvoked; // 0x4C
		private bool mHasStarted; // 0x4D
		private ICameraConfiguration mCameraConfiguration; // 0x50
		private DigitalEyewearARController mEyewearBehaviour; // 0x54
		private bool mCheckStopCamera; // 0x58
		private Material mClearMaterial; // 0x5C
		private bool mMetalRendering; // 0x60
		private bool mHasStartedOnce; // 0x61
		private bool mWasEnabledBeforePause; // 0x62
		private bool mObjectTrackerWasActiveBeforePause; // 0x63
		private bool mObjectTrackerWasActiveBeforeDisabling; // 0x64
		private int mLastUpdatedFrame; // 0x68
		private static VuforiaARController mInstance; // 0x00
		private static object mPadlock; // 0x04
	
		// Properties
		public WorldCenterMode WorldCenterModeSetting { get; } // 0x0050A818-0x0050A8C8 
		public TrackableBehaviour WorldCenter { get; } // 0x0050AAF0-0x0050ABE4 
		public CameraDevice.CameraDeviceMode CameraDeviceMode { get; } // 0x0050ABEC-0x0050ACC8 
		public bool HasStarted { get; } // 0x0050ACC8-0x0050ACD0 
		public static VuforiaARController Instance { get; } // 0x0050AD98-0x0050AFA4 
		internal ICameraConfiguration CameraConfiguration { get; set; } // 0x0050D4DC-0x0050D4E4 0x0050D4E4-0x0050D4EC
	
		// Nested types
		public enum WorldCenterMode // TypeDefIndex: 3459
		{
			SPECIFIC_TARGET = 0,
			FIRST_TARGET = 1,
			DEVICE = 2
		}
	
		// Constructors
		private VuforiaARController(); // 0x0050ACD0-0x0050AD98
		static VuforiaARController(); // 0x005118B8-0x00511938
	
		// Methods
		[RuntimeInitializeOnLoadMethod] // 0x0018AD4C-0x0018AD60
		public static void RegisterARController(); // 0x0050AFA4-0x0050B024
		public void RegisterBeforeVuforiaTrackersInitializedCallback(Action callback); // 0x0050B024-0x0050B138
		public void RegisterVuforiaInitializedCallback(Action callback); // 0x0050B138-0x0050B24C
		public void UnregisterBeforeVuforiaTrackersInitializedCallback(Action callback); // 0x0050B24C-0x0050B338
		public void UnregisterVuforiaInitializedCallback(Action callback); // 0x0050B338-0x0050B424
		public void RegisterVuforiaStartedCallback(Action callback); // 0x0050B424-0x0050B538
		public void UnregisterVuforiaStartedCallback(Action callback); // 0x0050B538-0x0050B624
		public void RegisterTrackablesUpdatedCallback(Action callback); // 0x0050B624-0x0050B710
		public void UnregisterTrackablesUpdatedCallback(Action callback); // 0x0050B710-0x0050B7FC
		public void RegisterOnPauseCallback(Action<bool> callback); // 0x0050B7FC-0x0050B8E8
		public void UnregisterOnPauseCallback(Action<bool> callback); // 0x0050B8E8-0x0050B9D4
		public void RegisterBackgroundTextureChangedCallback(Action callback); // 0x0050B9D4-0x0050BAC0
		public void UnregisterBackgroundTextureChangedCallback(Action callback); // 0x0050BAC0-0x0050BBAC
		public void RegisterVideoBgEventHandler(IVideoBackgroundEventHandler videoBgEventHandler); // 0x0050BBAC-0x0050BC2C
		public bool UnregisterVideoBgEventHandler(IVideoBackgroundEventHandler videoBgEventHandler); // 0x0050BC2C-0x0050BCAC
		public void SetWorldCenterMode(WorldCenterMode value); // 0x0050BCAC-0x0050BD60
		public void SetWorldCenter(TrackableBehaviour trackable); // 0x0050BD68-0x0050BED8
		public Rect GetVideoBackgroundRectInViewPort(); // 0x0050BEE0-0x0050BFC0
		public ScreenOrientation GetSurfaceOrientation(); // 0x0050BFC0-0x0050C038
		public void UpdateState(bool forceUpdate, bool reapplyOldState); // 0x0050C0B4-0x0050C1C8
		internal void RegisterVuforiaDeinitializedCallback(Action callback); // 0x0050D304-0x0050D3F0
		internal void UnregisterVuforiaDeinitializedCallback(Action callback); // 0x0050D3F0-0x0050D4DC
		internal void InitCameraConfiguration(); // 0x0050D4EC-0x0050D610
		internal void ResetBackgroundPlane(bool disable); // 0x0050D610-0x0050D6F0
		internal void RegisterRenderOnUpdateCallback(Action callback); // 0x0050D6F0-0x0050D7DC
		internal void UnregisterRenderOnUpdateCallback(Action callback); // 0x0050D7DC-0x0050D8C8
		protected override void Awake(); // 0x0050D8C8-0x0050DAF4
		protected override void Start(); // 0x0050DD3C-0x0050DF28
		protected override void OnEnable(); // 0x0050E0E8-0x0050E198
		protected override void OnApplicationPause(bool pause); // 0x0050E4EC-0x0050E93C
		protected override void OnDisable(); // 0x0050EC48-0x0050ED88
		protected override void OnDestroy(); // 0x0050ED88-0x0050F37C
		private void StartAfterInitializationCompleted(); // 0x0050CC20-0x0050D304
		private static void CreateVideoBackground(); // 0x0050F92C-0x0050FA8C
		private void UpdateStatePrivate(bool forceUpdate, bool reapplyOldState); // 0x0050C1D0-0x0050C84C
		private bool StartVuforia(bool startObjectTracker); // 0x0050E198-0x0050E4EC
		private bool StopVuforia(); // 0x0050E944-0x0050EC48
		private void DisableCameraIfNotNeeded(); // 0x0050FF50-0x00510280
		private void OnVideoBackgroundConfigChanged(); // 0x005114AC-0x005117D4
		private void EnableObjectRenderer(GameObject go, bool enabled); // 0x005117D4-0x005118B8
	}

	internal struct VuforiaMacros // TypeDefIndex: 3460
	{
		// Fields
		public const string PLATFORM_DLL = "VuforiaWrapper"; // Metadata: 0x0021C266
	}

	public class VuforiaManager // TypeDefIndex: 3461
	{
		// Fields
		private static VuforiaManager sInstance; // 0x00
		private VuforiaARController.WorldCenterMode mWorldCenterMode; // 0x08
		private WorldCenterTrackableBehaviour mWorldCenter; // 0x0C
		private VuMarkBehaviour mVuMarkWorldCenter; // 0x10
		private Transform mARCameraTransform; // 0x14
		private Transform mCentralAnchorPoint; // 0x18
		private TrackerData.TrackableResultData[] mTrackableResultDataArray; // 0x1C
		private TrackerData.VuMarkTargetData[] mVuMarkDataArray; // 0x20
		private TrackerData.VuMarkTargetResultData[] mVuMarkResultDataArray; // 0x24
		private LinkedList<TrackableIdPair> mWCTrackableFoundQueue; // 0x28
		private Dictionary<PIXEL_FORMAT, UnmanagedImage> mCameraImages; // 0x2C
		private IntPtr mImageData; // 0x30
		private int mInjectedFrameIdx; // 0x34
		private IntPtr mLastProcessedFrameStatePtr; // 0x38
		private bool mInitialized; // 0x3C
		private bool mPaused; // 0x3D
		private TrackerData.FrameState mFrameState; // 0x3E
		private AutoRotationState mAutoRotationState; // 0x7E
		private int mLastFrameIdx; // 0x84
		private bool mIsSeeThroughDevice; // 0x88
		private LateLatchingManager mLateLatchingManager; // 0x8C
		private CameraCalibrationComparer mCameraCalibrationComparer; // 0x90
		private Vector3 mPosePositionalOffset; // 0x94
		private Quaternion mPoseRotationalOffset; // 0xA0
	
		// Properties
		public static VuforiaManager Instance { get; } // 0x0050A8C8-0x0050AAE8 
		public VuforiaARController.WorldCenterMode WorldCenterMode { get; set; } // 0x0050AAE8-0x0050AAF0 0x0050BD60-0x0050BD68
		public WorldCenterTrackableBehaviour WorldCenter { get; set; } // 0x0050ABE4-0x0050ABEC 0x0050BED8-0x0050BEE0
		public VuMarkBehaviour VuMarkWorldCenter { get; set; } // 0x00513FC0-0x00513FC8 0x0050F6A8-0x0050F6B0
		public Transform ARCameraTransform { get; internal set; } // 0x00513FC8-0x00513FD0 0x0050F6B0-0x0050F6B8
		public Transform CentralAnchorPoint { get; internal set; } // 0x00510E34-0x00510E3C 0x0050F6B8-0x0050F6C0
		public bool Initialized { get; } // 0x0050C1C8-0x0050C1D0 
		public int CurrentFrameIndex { get; } // 0x00513FD0-0x00513FD8 
		internal LateLatchingManager LateLatchingManager { get; } // 0x00513FD8-0x00513FE0 
		internal Vector3 PosePositionalOffset { get; } // 0x00513FE0-0x00513FF4 
		internal Quaternion PoseRotationalOffset { get; } // 0x00513FF4-0x00514004 
	
		// Nested types
		public struct TrackableIdPair // TypeDefIndex: 3462
		{
			// Fields
			public int TrackableId; // 0x00
			public int ResultId; // 0x04
	
			// Methods
			internal static TrackableIdPair FromTrackableId(int trackableId); // 0x005191C0-0x005191CC
			internal static TrackableIdPair FromResultId(int resultId); // 0x0051930C-0x0051931C
			internal static TrackableIdPair FromTrackableAndResultId(int trackableId, int resultId); // 0x005193F4-0x005193FC
		}
	
		private struct AutoRotationState // TypeDefIndex: 3463
		{
			// Fields
			internal bool setOnPause; // 0x00
			internal bool autorotateToPortrait; // 0x01
			internal bool autorotateToPortraitUpsideDown; // 0x02
			internal bool autorotateToLandscapeLeft; // 0x03
			internal bool autorotateToLandscapeRight; // 0x04
		}
	
		[CompilerGenerated] // 0x001890A4-0x001890B4
		private sealed class <>c__DisplayClass60_0 // TypeDefIndex: 3464
		{
			// Fields
			public TrackerData.FrameState frameState; // 0x08
	
			// Constructors
			public <>c__DisplayClass60_0(); // 0x00515FB0-0x00515FB8
	
			// Methods
			internal bool <UpdateTrackers>b__0(TrackerData.TrackableResultData trd); // 0x00519328-0x00519340
		}
	
		[CompilerGenerated] // 0x001890B4-0x001890C4
		private sealed class <>c__DisplayClass71_0 // TypeDefIndex: 3465
		{
			// Fields
			public TrackableIdPair id; // 0x08
	
			// Constructors
			public <>c__DisplayClass71_0(); // 0x0051931C-0x00519324
	
			// Methods
			internal bool <UpdateWCTrackableFoundQueue>b__0(TrackerData.TrackableResultData tr); // 0x00519340-0x00519358
			internal bool <UpdateWCTrackableFoundQueue>b__1(TrackerData.VuMarkTargetResultData tr); // 0x00519358-0x005193F4
		}
	
		// Constructors
		internal VuforiaManager(); // 0x00513E08-0x00513FC0
		static VuforiaManager(); // 0x00519324-0x00519328
	
		// Methods
		public bool Init(); // 0x0050F6C0-0x0050F92C
		public void Deinit(); // 0x0050F37C-0x0050F6A8
		internal bool Update(ScreenOrientation counterRotation, ref bool reapplyOldState); // 0x00510280-0x00510E34
		internal void Pause(bool pause); // 0x00515EC4-0x00515F90
		internal static bool IsDetectedOrTrackedorExtendedTracked(TrackableBehaviour.Status status); // 0x00515F90-0x00515FB0
		private void InitializeTrackableContainer(int numTrackableResults); // 0x00514004-0x00514090
		private void UpdateTrackers(TrackerData.FrameState frameState); // 0x00514D5C-0x00515EC4
		private void UpdateCameraPose(bool dtPoseAvailable, TrackerData.TrackableResultData deviceTrackableResult, TrackerData.PoseData cameraPose); // 0x00518998-0x00518E5C
		private void GetPoseOffsets(TrackableIdPair originTrackableID, bool dtPoseAvailable, TrackerData.PoseData cameraPose, out Vector3 posePositionalOffset, out Quaternion poseRotationalOffset); // 0x0051848C-0x00518998
		private void UpdateIlluminationData(StateManager stateManager, IntPtr frameStatePtr); // 0x00518E5C-0x00518F2C
		private void UpdateTrackablesEditor(); // 0x00514090-0x00514288
		private void UnmarshalTrackables(TrackerData.FrameState frameState); // 0x00515FB8-0x00516210
		private void UnmarshalVuMarkTrackables(TrackerData.FrameState frameState); // 0x00516210-0x00516688
		private static TrackerData.IlluminationData UnmarshalIlluminationData(IntPtr frameStatePtr); // 0x005190C4-0x005191C0
		private void UpdateImageContainer(); // 0x00514288-0x00514738
		private void UpdateCameraFrame(); // 0x00514B00-0x00514D5C
		private void InjectCameraFrame(); // 0x00514738-0x00514B00
		private void UpdateWCTrackableFoundQueue(); // 0x00516688-0x00516B18
		private void UpdateWCTrackableFoundQueue(TrackableBehaviour.Status status, TrackableIdPair trackableId); // 0x005191CC-0x0051930C
		private TrackerData.TrackableResultData GetTrackableResultData(TrackableIdPair trackableId, bool includeVuMarks); // 0x00518F2C-0x005190C4
		private VuMarkBehaviour GetVuMarkWorldCenter(int vuMarkTemplateId); // 0x00517F24-0x0051848C
		private void UpdateExtendedTrackedVuMarks(); // 0x00516B18-0x00517F24
	}

	public class VuforiaRenderer // TypeDefIndex: 3466
	{
		// Fields
		private static VuforiaRenderer sInstance; // 0x00
		private VideoBGCfgData mVideoBGConfig; // 0x08
		private bool mVideoBGConfigSet; // 0x18
		private Texture mVideoBackgroundTexture; // 0x1C
		private IntPtr mNativeRenderingCallback; // 0x20
		private bool mBackgroundTextureHasChanged; // 0x24
		private Func<bool> mLegacyRenderingCondition; // 0x28
	
		// Properties
		public static VuforiaRenderer Instance { get; } // 0x0050FA8C-0x0050FCAC 
		public Texture VideoBackgroundTexture { get; } // 0x0052A2F0-0x0052A2F8 
	
		// Nested types
		[Flags] // 0x001890C4-0x001890D4
		public enum FpsHint // TypeDefIndex: 3467
		{
			NONE = 0,
			NO_VIDEOBACKGROUND = 1,
			POWEREFFICIENCY = 2,
			FAST = 4
		}
	
		public struct VideoBGCfgData // TypeDefIndex: 3468
		{
			// Fields
			public Vec2I position; // 0x00
			public Vec2I size; // 0x08
		}
	
		public struct Vec2I // TypeDefIndex: 3469
		{
			// Fields
			public int x; // 0x00
			public int y; // 0x04
	
			// Constructors
			public Vec2I(int v1, int v2); // 0x0052B9BC-0x0052B9C8
		}
	
		public struct VideoTextureInfo // TypeDefIndex: 3470
		{
			// Fields
			public Vec2I textureSize; // 0x00
			public Vec2I imageSize; // 0x08
		}
	
		public enum RendererAPI // TypeDefIndex: 3471
		{
			GL_20 = 1,
			METAL = 2,
			DIRECTX3D11 = 4,
			GL_30 = 8
		}
	
		internal enum RenderEvent // TypeDefIndex: 3472
		{
			NO_OP = 100,
			SURFACE_CREATED = 101,
			RENDERER_BEGIN = 102,
			RENDERER_BEGIN_AND_BIND = 103,
			RENDERER_END = 104,
			RENDERER_DEINIT = 105,
			RENDERER_CREATE_TEXTURE = 106
		}
	
		[Serializable]
		[CompilerGenerated] // 0x001890D4-0x001890E4
		private sealed class <>c // TypeDefIndex: 3473
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static Func<bool> <>9__18_0; // 0x04
	
			// Constructors
			static <>c(); // 0x0052B80C-0x0052B880
			public <>c(); // 0x0052B880-0x0052B888
	
			// Methods
			internal bool <.ctor>b__18_0(); // 0x0052B888-0x0052B9BC
		}
	
		// Constructors
		internal VuforiaRenderer(); // 0x0052A1B0-0x0052A2F0
		static VuforiaRenderer(); // 0x0052B808-0x0052B80C
	
		// Methods
		public void SetLegacyRenderingEnabledCondition(Func<bool> condition); // 0x0052A2F8-0x0052A300
		public VideoBGCfgData GetVideoBackgroundConfig(); // 0x0052A300-0x0052A544
		public void ClearVideoBackgroundConfig(); // 0x00510E50-0x00510EDC
		public void SetVideoBackgroundConfig(VideoBGCfgData config); // 0x0052A544-0x0052A5F4
		public IntPtr createNativeTexture(int width, int height, int format); // 0x0052A840-0x0052A970
		public bool SetVideoBackgroundTexture(Texture texture); // 0x0052A970-0x0052AC08
		public bool SetVideoBackgroundTexturePtr(Texture texture); // 0x0052AC08-0x0052AE84
		public bool IsVideoBackgroundInfoAvailable(); // 0x0052AE84-0x0052AFF4
		public VideoTextureInfo GetVideoTextureInfo(); // 0x0052B06C-0x0052B324
		public void Pause(bool pause); // 0x0052B324-0x0052B3C0
		public int GetRecommendedFps(FpsHint flags); // 0x0052B3C0-0x0052B4D4
		public RendererAPI GetRendererAPI(); // 0x0050FCAC-0x0050FDB4
		internal void UnityRenderEvent(RenderEvent renderEvent); // 0x0052B4D4-0x0052B6D8
		internal bool HasBackgroundTextureChanged(); // 0x00510E3C-0x00510E50
		internal void SetVideoBackgroundConfigInternal(VideoBGCfgData config); // 0x0052A5F4-0x0052A840
		internal bool IsLegacyRenderingEnabled(); // 0x0052AFF4-0x0052B06C
		internal void SetNativeTextureData(PIXEL_FORMAT format, int width, int height); // 0x0052B6D8-0x0052B808
	}

	public class VuforiaRuntimeUtilities // TypeDefIndex: 3474
	{
		// Fields
		private static InitializableBool sWebCamUsed; // 0x00
		private static InitializableBool sNativePluginSupport; // 0x04
	
		// Properties
		public static ScreenOrientation ScreenOrientation { get; } // 0x0050C038-0x0050C0B4 
		public static bool IsLandscapeOrientation { get; } // 0x0052D158-0x0052D1E0 
		public static bool IsPortraitOrientation { get; } // 0x0052D1E0-0x0052D25C 
	
		// Nested types
		private enum InitializableBool // TypeDefIndex: 3475
		{
			UNKNOWN = 0,
			TRUE = 1,
			FALSE = 2
		}
	
		internal static class GlobalVars // TypeDefIndex: 3476
		{
			// Fields
			public const string DEFAULT_TRACKABLE_NAME = "--- EMPTY ---"; // Metadata: 0x0021C2C1
			public const string DEFAULT_DATA_SET_NAME = "--- EMPTY ---"; // Metadata: 0x0021C2D2
			public const string EMULATOR_IMAGE_TARGET = "emulator_ground_plane"; // Metadata: 0x0021C2E3
			internal const string UNITY_RESOURCES_LOCATION = "Resources"; // Metadata: 0x0021C2FC
			internal const string UNITY_MATERIALS_FOLDER_NAME = "Materials"; // Metadata: 0x0021C309
			internal const string UNITY_MESHES_FOLDER_NAME = "Meshes"; // Metadata: 0x0021C316
			internal static readonly string GLTF_ASSET_LOCATION; // 0x00
			internal const string PREFAB_EXT = ".prefab"; // Metadata: 0x0021C320
			internal const PIXEL_FORMAT DEFAULT_WEBCAM_PIXEL_FORMAT = PIXEL_FORMAT.RGBA8888; // Metadata: 0x0021C32B
	
			// Constructors
			static GlobalVars(); // 0x00AFBF7C-0x00AFC0EC
		}
	
		private struct CameraState // TypeDefIndex: 3477
		{
			// Fields
			[CompilerGenerated] // 0x0018A568-0x0018A578
			private readonly bool <Initialized>k__BackingField; // 0x00
			[CompilerGenerated] // 0x0018A578-0x0018A588
			private readonly bool <Active>k__BackingField; // 0x01
			[CompilerGenerated] // 0x0018A588-0x0018A598
			private readonly CameraDevice.CameraDeviceMode <DeviceMode>k__BackingField; // 0x04
	
			// Properties
			public bool Initialized { [CompilerGenerated] /* 0x0018AF28-0x0018AF38 */ get; } // 0x00AFBF24-0x00AFBF34 
			public bool Active { [CompilerGenerated] /* 0x0018AF38-0x0018AF48 */ get; } // 0x00AFBF34-0x00AFBF44 
			public CameraDevice.CameraDeviceMode DeviceMode { [CompilerGenerated] /* 0x0018AF48-0x0018AF58 */ get; } // 0x00AFBF44-0x00AFBF5C 
			public static CameraState UnInitialized { get; } // 0x00AFBF6C-0x00AFBF7C 
	
			// Constructors
			public CameraState(bool initialized, bool active, CameraDevice.CameraDeviceMode deviceMode); // 0x00AFBF5C-0x00AFBF6C
		}
	
		[Serializable]
		[CompilerGenerated] // 0x001890E4-0x001890F4
		private sealed class <>c // TypeDefIndex: 3478
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static Func<TargetFinder, bool> <>9__31_0; // 0x04
			public static Func<TargetFinder, bool> <>9__31_1; // 0x08
	
			// Constructors
			static <>c(); // 0x00AFBD88-0x00AFBDFC
			public <>c(); // 0x00AFBDFC-0x00AFBE04
	
			// Methods
			internal bool <StopCameraIfPossible>b__31_0(TargetFinder tf); // 0x00AFBE04-0x00AFBE44
			internal bool <StopCameraIfPossible>b__31_1(TargetFinder tf); // 0x00AFBE44-0x00AFBF24
		}
	
		// Constructors
		public VuforiaRuntimeUtilities(); // 0x0052F43C-0x0052F444
		static VuforiaRuntimeUtilities(); // 0x0052F444-0x0052F448
	
		// Methods
		public static string GetStoragePath(string path, VuforiaUnity.StorageType storageType); // 0x0052CE90-0x0052CFA8
		public static string StripStreamingAssetsFromPath(string fullPath); // 0x0052CFF4-0x0052D158
		public static void ForceDisableTrackables(); // 0x0052D25C-0x0052D41C
		public static bool IsPlayMode(); // 0x0050E93C-0x0050E944
		public static bool IsWSARuntime(); // 0x0052CFA8-0x0052CFF4
		public static bool IsVuforiaEnabled(); // 0x00509920-0x00509AB0
		public static bool IsWebCamUsed(); // 0x0052D41C-0x0052D530
		public static Vector2 ScreenSpaceToCameraFrameCoordinatesNormalized(Vector2 screenSpaceCoordinate, Rect bgTextureViewPortRect); // 0x0052D680-0x0052D744
		public static Vector2 ViewPortToCameraFrameCoordinatesNormalized(Vector2 unityViewPortCoordinates, Rect bgTextureViewPortRect); // 0x0052D744-0x0052D9E8
		public static VuforiaRenderer.Vec2I ScreenSpaceToCameraFrameCoordinates(Vector2 screenSpaceCoordinate, Rect bgTextureViewPortRect, bool isTextureMirrored, CameraDevice.VideoModeData videoModeData); // 0x0052D9E8-0x0052DBDC
		public static Vector2 CameraFrameToScreenSpaceCoordinates(Vector2 cameraFrameCoordinate, Rect bgTextureViewPortRect, bool isTextureMirrored, CameraDevice.VideoModeData videoModeData); // 0x0052DD28-0x0052DF1C
		public static OrientedBoundingBox CameraFrameToScreenSpaceCoordinates(OrientedBoundingBox cameraFrameObb, Rect bgTextureViewPortRect, bool isTextureMirrored, CameraDevice.VideoModeData videoModeData); // 0x0052DF1C-0x0052E1D8
		public static void SelectRectTopLeftAndBottomRightForLandscapeLeft(Rect screenSpaceRect, bool isMirrored, out Vector2 topLeft, out Vector2 bottomRight); // 0x0052E1D8-0x0052E490
		public static void DisableSleepMode(); // 0x0052E490-0x0052E49C
		public static void ResetSleepMode(); // 0x0052E49C-0x0052E4A8
		public static bool MatrixIsNaN(Matrix4x4 matrix); // 0x0052E4A8-0x0052E770
		public static bool IsUfoEnabled(string licenseKey, string ufoKey); // 0x00513CB8-0x00513CEC
		public static FusionProviderType SetAllowedFusionProviders(FusionProviderType providerTypes); // 0x0052E770-0x0052E880
		public static FusionProviderType GetActiveFusionProvider(); // 0x0052E880-0x0052E990
		internal static bool CheckNativePluginSupport(); // 0x0052D530-0x0052D680
		internal static bool IsNativePluginSupportAvailable(); // 0x0052EA68-0x0052EBF0
		internal static bool StopCameraIfPossible(out bool objectTrackerWasStopped); // 0x00510EDC-0x005114AC
		internal static string DecodeUfoLicenseKey(string ufoKey); // 0x0052C0C4-0x0052C180
		internal static string EncodeUfoLicenseKey(string ufoKey); // 0x0052ED00-0x0052EDBC
		internal static string GetModelPath(string dataSetName, string targetName, bool isResource = false /* Metadata: 0x0021C2B4 */); // 0x0052EDBC-0x0052F044
		private static CameraState GetCameraState(); // 0x0052F044-0x0052F174
		private static void StopAndDeinitCamera(); // 0x0052F174-0x0052F2D8
		private static void ReInitAndStartCamera(CameraState stateToRestore); // 0x0052F2D8-0x0052F43C
		internal static T SafeInitTracker<T>()
			where T : Tracker;
		internal static bool SafeDeinitTracker<T>()
			where T : Tracker;
		private static void PrepareCoordinateConversion(bool isTextureMirrored, ref float prefixX, ref float prefixY, ref float inversionMultiplierX, ref float inversionMultiplierY, ref bool isPortrait); // 0x0052DBDC-0x0052DD28
		private static bool IsPositionalDeviceTrackerActive(); // 0x0052EBF0-0x0052ED00
		private static extern int qcarCheckNativePluginSupport(); // 0x0052E990-0x0052EA68
	}

	public static class SurfaceUtilities // TypeDefIndex: 3479
	{
		// Fields
		private static ScreenOrientation mScreenOrientation; // 0x00
	
		// Constructors
		static SurfaceUtilities(); // 0x0021B3D0-0x0021B3D4
	
		// Methods
		public static void OnSurfaceCreated(); // 0x00205454-0x002054F4
		public static void OnSurfaceDeinit(); // 0x0021B158-0x0021B1F8
		public static bool HasSurfaceBeenRecreated(); // 0x00205690-0x002057A0
		public static void OnSurfaceChanged(int screenWidth, int screenHeight); // 0x0021B1F8-0x0021B344
		public static void SetSurfaceOrientation(ScreenOrientation screenOrientation); // 0x0020534C-0x002053DC
		public static ScreenOrientation GetSurfaceOrientation(); // 0x0021B344-0x0021B3D0
	}

	public abstract class TargetFinder // TypeDefIndex: 3480
	{
		// Fields
		protected IntPtr mTargetFinderPtr; // 0x08
		protected Dictionary<int, ObjectTarget> mTargets; // 0x0C
		private IntPtr mTargetFinderStatePtr; // 0x10
		private TargetFinderState mTargetFinderState; // 0x14
		private List<TargetSearchResult> mNewResults; // 0x1C
	
		// Properties
		internal IntPtr TargetFinderPtr { get; } // 0x0021B628-0x0021B630 
	
		// Nested types
		protected struct TargetFinderObjectTargetData // TypeDefIndex: 3481
		{
			// Fields
			public int id; // 0x00
			public int type; // 0x04
			public Vector3 center; // 0x08
			public Vector3 size; // 0x14
		}
	
		public enum InitState // TypeDefIndex: 3482
		{
			INIT_ERROR_DEVICE_DATABASE_ERROR = -3,
			INIT_ERROR_SERVICE_NOT_AVAILABLE = -2,
			INIT_ERROR_NO_NETWORK_CONNECTION = -1,
			INIT_DEFAULT = 0,
			INIT_RUNNING = 1,
			INIT_SUCCESS = 2
		}
	
		public enum UpdateState // TypeDefIndex: 3483
		{
			UPDATE_ERROR_REQUEST_TIMEOUT = -8,
			UPDATE_ERROR_TIMESTAMP_OUT_OF_RANGE = -7,
			UPDATE_ERROR_UPDATE_SDK = -6,
			UPDATE_ERROR_BAD_FRAME_QUALITY = -5,
			UPDATE_ERROR_SERVICE_NOT_AVAILABLE = -4,
			UPDATE_ERROR_NO_NETWORK_CONNECTION = -3,
			UPDATE_ERROR_PROJECT_SUSPENDED = -2,
			UPDATE_ERROR_AUTHORIZATION_FAILED = -1,
			UPDATE_NO_MATCH = 0,
			UPDATE_NO_REQUEST = 1,
			UPDATE_RESULTS_AVAILABLE = 2
		}
	
		public enum FilterMode // TypeDefIndex: 3484
		{
			FILTER_NONE = 0,
			FILTER_CURRENTLY_TRACKED = 1
		}
	
		public abstract class TargetSearchResult // TypeDefIndex: 3485
		{
			// Fields
			public string TargetName; // 0x08
			public string UniqueTargetId; // 0x0C
			public IntPtr TargetSearchResultPtr; // 0x10
	
			// Constructors
			protected TargetSearchResult(); // 0x0021C960-0x0021C968
		}
	
		public class CloudRecoSearchResult : TargetSearchResult // TypeDefIndex: 3486
		{
			// Fields
			public string MetaData; // 0x14
			[Obsolete] // 0x0018A598-0x0018A5CC
			public float TargetSize; // 0x18
			public byte TrackingRating; // 0x1C
	
			// Constructors
			public CloudRecoSearchResult(); // 0x0021C958-0x0021C960
		}
	
		public class ModelRecoSearchResult : TargetSearchResult // TypeDefIndex: 3487
		{
			// Fields
			public string GuideViewName; // 0x14
			public float Confidence; // 0x18
	
			// Constructors
			public ModelRecoSearchResult(); // 0x0021C968-0x0021C970
		}
	
		private struct TargetFinderState // TypeDefIndex: 3488
		{
			// Fields
			public int IsRequesting; // 0x00
			public int UpdateState; // 0x04
		}
	
		// Constructors
		internal TargetFinder(IntPtr targetFinderPtr); // 0x0021B3D4-0x0021B544
	
		// Methods
		~TargetFinder(); // 0x0021B544-0x0021B628
		public InitState GetInitState(); // 0x0021B630-0x0021B748
		public bool Deinit(); // 0x0021B748-0x0021B868
		public bool StartRecognition(); // 0x0021B868-0x0021B984
		public bool Stop(); // 0x0021B984-0x0021BAA4
		public bool IsRequesting(); // 0x0021BAA4-0x0021BAB4
		public UpdateState Update(); // 0x0021BAB4-0x0021BABC
		public UpdateState Update(FilterMode filterMode); // 0x0021BABC-0x0021BD28
		public IEnumerable<TargetSearchResult> GetResults(); // 0x0021BD28-0x0021BD30
		public TrackableBehaviour EnableTracking(TargetSearchResult result, string gameObjectName); // 0x0021BD30-0x0021BDB8
		public TrackableBehaviour EnableTracking(TargetSearchResult result, GameObject gameObject); // 0x0021BDB8-0x0021C5B0
		public void ClearTrackables(bool destroyGameObjects = true /* Metadata: 0x0021C32F */); // 0x0021C5B0-0x0021C8DC
		public IEnumerable<ObjectTarget> GetObjectTargets(); // 0x0021C8DC-0x0021C954
		internal abstract List<TargetSearchResult> ParseSearchResults(TrackerData.StructList resultList);
		internal abstract void FreeResultList(IntPtr listPtr);
		protected abstract TrackableBehaviour CreateObjectTarget(string targetName, TargetFinderObjectTargetData objTargetData, GameObject gameObj);
		protected abstract void DeleteObsoleteTargets(List<int> newTargetIds);
		protected virtual void ClearAdditionalGameObjects(); // 0x0021C954-0x0021C958
	}

	internal struct SimpleTargetData // TypeDefIndex: 3489
	{
		// Fields
		public int id; // 0x00
		internal int unused; // 0x04
	}

	public interface Trackable // TypeDefIndex: 3490
	{
		// Properties
		string Name { get; }
		int ID { get; }
	}

	public abstract class TrackableBehaviour : VuforiaMonoBehaviour // TypeDefIndex: 3491
	{
		// Fields
		[CompilerGenerated] // 0x0018A168-0x0018A178
		private double <TimeStamp>k__BackingField; // 0x10
		[HideInInspector] // 0x0018A178-0x0018A1A8
		[SerializeField] // 0x0018A178-0x0018A1A8
		protected string mTrackableName; // 0x18
		[HideInInspector] // 0x0018A1A8-0x0018A1D8
		[SerializeField] // 0x0018A1A8-0x0018A1D8
		protected bool mPreserveChildSize; // 0x1C
		[HideInInspector] // 0x0018A1D8-0x0018A208
		[SerializeField] // 0x0018A1D8-0x0018A208
		protected bool mInitializedInEditor; // 0x1D
		protected Vector3 mPreviousScale; // 0x20
		protected Status mStatus; // 0x2C
		protected Trackable mTrackable; // 0x30
		private List<ITrackableEventHandler> mTrackableEventHandlers; // 0x34
	
		// Properties
		public Status CurrentStatus { get; } // 0x00213528-0x00213530 
		public virtual Trackable Trackable { get; } // 0x0021D568-0x0021D570 
		public string TrackableName { get; } // 0x0021034C-0x00210354 
		internal double TimeStamp { [CompilerGenerated] /* 0x0018AD60-0x0018AD70 */ get; [CompilerGenerated] /* 0x0018AD70-0x0018AD80 */ set; } // 0x0021D570-0x0021D57C 0x00214620-0x00214630
	
		// Nested types
		public enum Status // TypeDefIndex: 3492
		{
			NO_POSE = 0,
			LIMITED = 1,
			DETECTED = 2,
			TRACKED = 3,
			EXTENDED_TRACKED = 4
		}
	
		public enum StatusInfo // TypeDefIndex: 3493
		{
			NORMAL = 0,
			UNKNOWN = 1,
			INITIALIZING = 2,
			RELOCALIZING = 3,
			EXCESSIVE_MOTION = 4,
			INSUFFICIENT_FEATURES = 5
		}
	
		// Constructors
		protected TrackableBehaviour(); // 0x0021E67C-0x0021E768
	
		// Methods
		public void RegisterTrackableEventHandler(ITrackableEventHandler trackableEventHandler); // 0x0021D57C-0x0021D690
		public bool UnregisterTrackableEventHandler(ITrackableEventHandler trackableEventHandler); // 0x0021D690-0x0021D710
		public virtual void OnTrackerUpdate(Status newStatus); // 0x0021D710-0x0021D90C
		public virtual void OnFrameIndexUpdate(int newFrameIndex); // 0x0021D90C-0x0021D910
		private void OnDisable(); // 0x0021D910-0x0021DB04
		internal bool CorrectScale(); // 0x0021DB04-0x0021DB14
		internal void UnregisterTrackable(); // 0x0020D408-0x0020D418
		internal virtual void OnTrackableEnabledChanged(bool trackableEnabled); // 0x0021DB14-0x0021DB18
		protected abstract void InternalUnregisterTrackable();
		protected virtual bool CorrectScaleImpl(); // 0x0021DB18-0x0021DB20
		protected bool EnforceUniformScaling(); // 0x0021DB20-0x0021DD88
		protected bool SetScaleFromWidth(float width, float aspectRatio); // 0x0021DD88-0x0021E060
		protected bool SetScaleFromHeight(float height, float aspectRatio); // 0x0021E060-0x0021E338
		protected virtual bool SetScale(Vector3 size); // 0x0021E338-0x0021E67C
	}

	public class TrackableSource // TypeDefIndex: 3494
	{
		// Fields
		[CompilerGenerated] // 0x0018A208-0x0018A218
		private IntPtr <TrackableSourcePtr>k__BackingField; // 0x08
	
		// Properties
		internal IntPtr TrackableSourcePtr { [CompilerGenerated] /* 0x0018AD80-0x0018AD90 */ get; [CompilerGenerated] /* 0x0018AD90-0x0018ADA0 */ private set; } // 0x0021E7B0-0x0021E7B8 0x0021E7B8-0x0021E7C0
	
		// Constructors
		internal TrackableSource(IntPtr trackableSourcePtr); // 0x0021E7C0-0x0021E7E0
	}

	public abstract class Tracker // TypeDefIndex: 3495
	{
		// Fields
		[CompilerGenerated] // 0x0018A218-0x0018A228
		private bool <IsActive>k__BackingField; // 0x08
	
		// Properties
		public virtual bool IsActive { [CompilerGenerated] /* 0x0018ADA0-0x0018ADB0 */ get; [CompilerGenerated] /* 0x0018ADB0-0x0018ADC0 */ protected set; } // 0x0021E7E0-0x0021E7E8 0x0021E7E8-0x0021E7F0
	
		// Constructors
		protected Tracker(); // 0x0020B324-0x0020B32C
	
		// Methods
		public abstract bool Start();
		public abstract void Stop();
	}

	public class TrackerManager : ITrackerManager // TypeDefIndex: 3496
	{
		// Fields
		private static ITrackerManager mInstance; // 0x00
		private readonly StateManager mStateManager; // 0x08
		private readonly Dictionary<Type, Tracker> mTrackers; // 0x0C
		private readonly Dictionary<Type, Func<Type, Tracker>> mTrackerCreators; // 0x10
		private readonly Dictionary<Type, Func<Tracker, bool>> mTrackerNativeDeinitializers; // 0x14
	
		// Properties
		public static ITrackerManager Instance { get; } // 0x00205B68-0x00205CD8 
	
		// Nested types
		[Serializable]
		[CompilerGenerated] // 0x001890F4-0x00189104
		private sealed class <>c // TypeDefIndex: 3497
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static Func<Type, Tracker> <>9__8_0; // 0x04
			public static Func<Type, Tracker> <>9__8_1; // 0x08
			public static Func<Tracker, bool> <>9__8_2; // 0x0C
			public static Func<Tracker, bool> <>9__8_3; // 0x10
	
			// Constructors
			static <>c(); // 0x0021F89C-0x0021F910
			public <>c(); // 0x0021F910-0x0021F918
	
			// Methods
			internal Tracker <.ctor>b__8_0(Type t); // 0x0021F918-0x0021F984
			internal Tracker <.ctor>b__8_1(Type t); // 0x0021F984-0x0021F988
			internal bool <.ctor>b__8_2(Tracker t); // 0x0021F988-0x0021FA1C
			internal bool <.ctor>b__8_3(Tracker t); // 0x0021FA1C-0x0021FAB0
		}
	
		// Constructors
		internal TrackerManager(); // 0x0021E818-0x0021F090
	
		// Methods
		internal static void SetInstance(ITrackerManager trackerManager); // 0x0021F090-0x0021F0F4
		public T GetTracker<T>()
			where T : Tracker;
		public T InitTracker<T>()
			where T : Tracker;
		public bool DeinitTracker<T>()
			where T : Tracker;
		public StateManager GetStateManager(); // 0x0021F0F4-0x0021F0FC
		private static Type GetMappableType<T>()
			where T : Tracker;
		private static bool DeInitializeDeviceTrackerNative(object deviceTracker); // 0x0021F0FC-0x0021F26C
		private static bool IsTrackerSupportedNatively<T>()
			where T : Tracker;
		private static bool DeinitializeTrackerNative(Type type); // 0x0021F26C-0x0021F3C0
		private static bool InitializeTrackerNative(Type type); // 0x0021F3C0-0x0021F510
		private static SmartTerrain CreateSmartTerrain(); // 0x0021F510-0x0021F5D8
		private static DeviceTracker CreateDeviceTracker(Type type); // 0x0021F5D8-0x0021F71C
		private static DeviceTracker CreatePositionalDeviceTracker(); // 0x0021F7E4-0x0021F89C
		private static DeviceTracker CreateRotationalDeviceTracker(); // 0x0021F71C-0x0021F7E4
	}

	public interface ITrackerManager // TypeDefIndex: 3498
	{
		// Methods
		T GetTracker<T>()
			where T : Tracker;
		T InitTracker<T>()
			where T : Tracker;
		bool DeinitTracker<T>()
			where T : Tracker;
		StateManager GetStateManager();
	}

	public class UserDefinedTargetBuildingBehaviour : VuforiaMonoBehaviour // TypeDefIndex: 3499
	{
		// Fields
		private ObjectTracker mObjectTracker; // 0x0C
		private ImageTargetBuilder.FrameQuality mLastFrameQuality; // 0x10
		private bool mCurrentlyScanning; // 0x14
		private bool mWasScanningBeforeDisable; // 0x15
		private bool mCurrentlyBuilding; // 0x16
		private bool mWasBuildingBeforeDisable; // 0x17
		private bool mOnInitializedCalled; // 0x18
		private readonly List<IUserDefinedTargetEventHandler> mHandlers; // 0x1C
		public bool StopTrackerWhileScanning; // 0x20
		public bool StartScanningAutomatically; // 0x21
		public bool StopScanningWhenFinshedBuilding; // 0x22
	
		// Constructors
		public UserDefinedTargetBuildingBehaviour(); // 0x00224184-0x00224218
	
		// Methods
		public void RegisterEventHandler(IUserDefinedTargetEventHandler eventHandler); // 0x002233E8-0x002234FC
		public bool UnregisterEventHandler(IUserDefinedTargetEventHandler eventHandler); // 0x002234FC-0x0022357C
		public void StartScanning(); // 0x0022357C-0x00223610
		public void BuildNewTarget(string targetName, float screenSizeWidth); // 0x0022380C-0x00223870
		public void StopScanning(); // 0x00223870-0x00223908
		private void SetFrameQuality(ImageTargetBuilder.FrameQuality frameQuality); // 0x00223610-0x0022380C
		private void Start(); // 0x00223908-0x00223A48
		private void Update(); // 0x00223A48-0x00223CF8
		private void OnEnable(); // 0x00223CF8-0x00223D24
		private void OnDisable(); // 0x00223D24-0x00223D50
		private void OnDestroy(); // 0x00223D50-0x00223E90
		internal void OnVuforiaStarted(); // 0x00223E90-0x0022412C
		internal void OnPause(bool pause); // 0x0022412C-0x00224184
	}

	[RequireComponent] // 0x00188EC4-0x00188F3C
	public class VideoBackgroundBehaviour : VuforiaMonoBehaviour // TypeDefIndex: 3500
	{
		// Fields
		private int mClearBuffers; // 0x0C
		private int mSkipStateUpdates; // 0x10
		private Camera mCamera; // 0x14
		private BackgroundPlaneBehaviour mBackgroundPlaneBehaviour; // 0x18
		private IVideoTextureUpdater mVideoTextureUpdater; // 0x1C
	
		// Constructors
		public VideoBackgroundBehaviour(); // 0x0022667C-0x00226684
	
		// Methods
		public void ResetBackgroundPlane(bool disable); // 0x00225DD4-0x00225FC0
		public void SetVideoBackgroundMaterial(Material videoBackgroundMaterial); // 0x00225FC0-0x00226060
		private void Awake(); // 0x00226060-0x00226268
		private void Start(); // 0x00226514-0x0022651C
		private void OnPostRender(); // 0x0022651C-0x002265A4
		private void OnDestroy(); // 0x002265A4-0x0022667C
		private BackgroundPlaneBehaviour CreateBackgroundPlane(); // 0x00226268-0x0022639C
	}

	public class VideoBackgroundManager : ARController // TypeDefIndex: 3501
	{
		// Fields
		private HideExcessAreaUtility.CLIPPING_MODE mClippingMode; // 0x0C
		private Shader mMatteShader; // 0x10
		private bool mVideoBackgroundEnabled; // 0x14
		private bool mVideoBackgroundNeedsRedrawing; // 0x15
		private int mDiscardStatesForRendering; // 0x18
		private bool mIsSeeThroughDevice; // 0x1C
		private static VideoBackgroundManager mInstance; // 0x00
		private static object mPadlock; // 0x04
		[CompilerGenerated] // 0x0018A228-0x0018A238
		private bool <VideoBackgroundTextureSet>k__BackingField; // 0x1D
	
		// Properties
		public static VideoBackgroundManager Instance { get; } // 0x00227018-0x00227230 
		public bool VideoBackgroundEnabled { get; } // 0x002272B0-0x002272B8 
		public HideExcessAreaUtility.CLIPPING_MODE ClippingMode { get; } // 0x002272B8-0x002272C0 
		public Shader MatteShader { get; } // 0x002272C0-0x002272C8 
		internal bool VideoBackgroundTextureSet { [CompilerGenerated] /* 0x0018ADE4-0x0018ADF4 */ private get; [CompilerGenerated] /* 0x0018ADD4-0x0018ADE4 */ set; } // 0x002272D0-0x002272D8 0x002272C8-0x002272D0
	
		// Constructors
		private VideoBackgroundManager(); // 0x00227008-0x00227018
		static VideoBackgroundManager(); // 0x00228048-0x002280C8
	
		// Methods
		[RuntimeInitializeOnLoadMethod] // 0x0018ADC0-0x0018ADD4
		public static void RegisterARController(); // 0x00227230-0x002272B0
		public void SetVideoBackgroundEnabled(bool value); // 0x002272D8-0x00227304
		public void SetClippingMode(HideExcessAreaUtility.CLIPPING_MODE value); // 0x00227A10-0x00227A18
		public void SetMatteShader(Shader value); // 0x00227A18-0x00227A20
		internal void Initialize(); // 0x00227A20-0x00227B08
		internal void StartNativeVideoUpdate(); // 0x00227B08-0x00227C3C
		internal void FinishNativeVideoUpdate(); // 0x00227C3C-0x00227D28
		internal void NeedsRedrawing(); // 0x00227D28-0x00227D34
		internal void SetRenderingStatesToDiscard(); // 0x00227D34-0x00227D40
		internal int GetRenderingStatesToDiscard(); // 0x00227D40-0x00227D48
		internal bool IsDiscardingRenderingStates(); // 0x00227D48-0x00227D5C
		internal void DiscardRenderingState(); // 0x00227D5C-0x00227D70
		protected override void Awake(); // 0x00227D70-0x00227E88
		protected override void Start(); // 0x00227E88-0x00227F64
		protected override void Update(); // 0x00227F64-0x00227F68
		protected override void OnDestroy(); // 0x00227F68-0x00228044
		private void OnVuforiaInitialized(); // 0x00228044-0x00228048
		private void UpdateVideoBackgroundEnabled(); // 0x00227304-0x00227A10
	}

	public class VirtualButton // TypeDefIndex: 3502
	{
		// Fields
		private string mName; // 0x08
		private int mID; // 0x0C
		private RectangleData mArea; // 0x10
		private bool mIsEnabled; // 0x20
		private ImageTarget mParentImageTarget; // 0x24
		private DataSet mParentDataSet; // 0x28
		public const Sensitivity DEFAULT_SENSITIVITY = Sensitivity.LOW; // Metadata: 0x0021C3A8
	
		// Properties
		public string Name { get; } // 0x0022A184-0x0022A18C 
		public int ID { get; } // 0x00213EA8-0x00213EB0 
		public bool Enabled { get; } // 0x0022A18C-0x0022A194 
		public RectangleData Area { get; } // 0x0022A194-0x0022A1A4 
	
		// Nested types
		public enum Sensitivity // TypeDefIndex: 3503
		{
			HIGH = 0,
			MEDIUM = 1,
			LOW = 2
		}
	
		// Constructors
		internal VirtualButton(string name, int id, RectangleData area, ImageTarget imageTarget, DataSet dataSet); // 0x0022A1A4-0x0022A1FC
	
		// Methods
		public bool SetArea(RectangleData area); // 0x0022A1FC-0x0022A524
		public bool SetSensitivity(Sensitivity sensitivity); // 0x0022A524-0x0022A764
		public bool SetEnabled(bool enabled); // 0x0022A764-0x0022A9B4
	}

	public class VirtualButtonBehaviour : VuforiaMonoBehaviour // TypeDefIndex: 3504
	{
		// Fields
		public const float TARGET_OFFSET = 0.001f; // Metadata: 0x0021C3B8
		[HideInInspector] // 0x0018A238-0x0018A268
		[SerializeField] // 0x0018A238-0x0018A268
		private string mName; // 0x0C
		[HideInInspector] // 0x0018A268-0x0018A298
		[SerializeField] // 0x0018A268-0x0018A298
		private VirtualButton.Sensitivity mSensitivity; // 0x10
		[HideInInspector] // 0x0018A298-0x0018A2C8
		[SerializeField] // 0x0018A298-0x0018A2C8
		private bool mHasUpdatedPose; // 0x14
		[HideInInspector] // 0x0018A2C8-0x0018A2F8
		[SerializeField] // 0x0018A2C8-0x0018A2F8
		private Matrix4x4 mPrevTransform; // 0x18
		[HideInInspector] // 0x0018A2F8-0x0018A328
		[SerializeField] // 0x0018A2F8-0x0018A328
		private GameObject mPrevParent; // 0x58
		private bool mSensitivityDirty; // 0x5C
		private VirtualButton.Sensitivity mPreviousSensitivity; // 0x60
		private bool mPreviouslyEnabled; // 0x64
		private bool mPressed; // 0x65
		private List<IVirtualButtonEventHandler> mHandlers; // 0x68
		private Vector2 mLeftTop; // 0x6C
		private Vector2 mRightBottom; // 0x74
		private bool mUnregisterOnDestroy; // 0x7C
		private VirtualButton mVirtualButton; // 0x80
	
		// Properties
		public string VirtualButtonName { get; } // 0x00215264-0x0021526C 
		public bool Pressed { get; } // 0x0022A9B4-0x0022A9BC 
		public bool HasUpdatedPose { get; } // 0x0022A9BC-0x0022A9C4 
		public bool UnregisterOnDestroy { get; set; } // 0x0022A9C4-0x0022A9CC 0x0022A9CC-0x0022A9D4
		public VirtualButton VirtualButton { get; } // 0x00213EA0-0x00213EA8 
		internal VirtualButton.Sensitivity Sensitivity { get; set; } // 0x0022B938-0x0022B940 0x0022B940-0x0022B948
		internal Matrix4x4 PreviousTransform { get; set; } // 0x0022B948-0x0022B970 0x0022B970-0x0022B9E8
		internal GameObject PreviousParent { get; set; } // 0x0022B9E8-0x0022B9F0 0x0022B9F0-0x0022B9F8
	
		// Constructors
		public VirtualButtonBehaviour(); // 0x0022C2F0-0x0022C420
	
		// Methods
		public void RegisterEventHandler(IVirtualButtonEventHandler eventHandler); // 0x0022A9D4-0x0022AA54
		public bool UnregisterEventHandler(IVirtualButtonEventHandler eventHandler); // 0x0022AA54-0x0022AAD4
		public bool CalculateButtonArea(out Vector2 topLeft, out Vector2 bottomRight); // 0x0022AAD4-0x0022AEDC
		public bool UpdateAreaRectangle(); // 0x0022AEDC-0x0022AF14
		public bool UpdateSensitivity(); // 0x0022AF14-0x0022AF30
		private bool UpdateEnabled(); // 0x0022AF30-0x0022AF64
		public bool UpdatePose(); // 0x0022AF64-0x0022B7EC
		public void OnTrackerUpdated(bool pressed); // 0x00213EB0-0x00214278
		public ImageTargetBehaviour GetImageTargetBehaviour(); // 0x0021526C-0x00215528
		internal void SetVirtualButtonName(string name); // 0x0022B930-0x0022B938
		internal void InitializeVirtualButton(VirtualButton virtualButton); // 0x0022B9F8-0x0022BA00
		internal bool SetPosAndScaleFromButtonArea(Vector2 topLeft, Vector2 bottomRight); // 0x0022BA00-0x0022BED0
		private void LateUpdate(); // 0x0022BED0-0x0022BF18
		private void OnDisable(); // 0x0022BF18-0x0022C16C
		private void OnDestroy(); // 0x0022C16C-0x0022C2D4
		private void OnValidate(); // 0x0022C2D4-0x0022C2F0
		private static bool Equals(Vector2 vec1, Vector2 vec2, float threshold); // 0x0022B7EC-0x0022B930
	}

	public class WebCamARController : ARController // TypeDefIndex: 3505
	{
		// Fields
		public int RenderTextureLayer; // 0x0C
		private string mDeviceNameSetInEditor; // 0x10
		private WebCam mWebCamImpl; // 0x14
		private Func<string, WebCamProfile.ProfileData, IWebCamTexAdaptor> mWebCamTexAdaptorProvider; // 0x18
		private static WebCamARController mInstance; // 0x00
		private static object mPadlock; // 0x04
	
		// Properties
		public static WebCamARController Instance { get; } // 0x00B00604-0x00B00810 
		public string DeviceName { get; set; } // 0x00B00890-0x00B00898 0x00B00898-0x00B008A0
		public bool IsPlaying { get; } // 0x00B008A0-0x00B008C8 
		internal WebCam ImplementationClass { get; } // 0x00B008C8-0x00B008D0 
	
		// Nested types
		[Serializable]
		[CompilerGenerated] // 0x00189104-0x00189114
		private sealed class <>c // TypeDefIndex: 3506
		{
			// Fields
			public static readonly <>c <>9; // 0x00
			public static Func<string, WebCamProfile.ProfileData, IWebCamTexAdaptor> <>9__6_0; // 0x04
	
			// Constructors
			static <>c(); // 0x00B00CE8-0x00B00D5C
			public <>c(); // 0x00B00D5C-0x00B00D64
	
			// Methods
			internal IWebCamTexAdaptor <.ctor>b__6_0(string name, WebCamProfile.ProfileData profileData); // 0x00B00D64-0x00B00E04
		}
	
		// Constructors
		private WebCamARController(); // 0x00B004BC-0x00B00604
		static WebCamARController(); // 0x00B00C68-0x00B00CE8
	
		// Methods
		[RuntimeInitializeOnLoadMethod] // 0x0018ADF4-0x0018AE08
		public static void RegisterARController(); // 0x00B00810-0x00B00890
		internal void InitCamera(); // 0x00B008D0-0x00B0099C
		internal void SetWebCamTexAdaptorProvider(Func<string, WebCamProfile.ProfileData, IWebCamTexAdaptor> provider); // 0x00B0099C-0x00B009A4
		protected override void Awake(); // 0x00B009A4-0x00B00A94
		protected override void OnLevelWasLoaded(); // 0x00B00A94-0x00B00B30
		protected override void OnDestroy(); // 0x00B00B30-0x00B00BCC
		protected override void Update(); // 0x00B00BCC-0x00B00C68
	}

	public abstract class EyewearCalibrationProfileManager // TypeDefIndex: 3507
	{
		// Constructors
		protected EyewearCalibrationProfileManager(); // 0x002FB9A0-0x002FB9A8
	
		// Methods
		public abstract int getMaxCount();
		public abstract int getUsedCount();
		public abstract bool isProfileUsed(int profileID);
		public abstract int getActiveProfile();
		public abstract bool setActiveProfile(int profileID);
		public abstract Matrix4x4 getCameraToEyePose(int profileID, EyewearDevice.EyeID eyeID);
		public abstract Matrix4x4 getEyeProjection(int profileID, EyewearDevice.EyeID eyeID);
		public abstract bool setCameraToEyePose(int profileID, EyewearDevice.EyeID eyeID, Matrix4x4 projectionMatrix);
		public abstract bool setEyeProjection(int profileID, EyewearDevice.EyeID eyeID, Matrix4x4 projectionMatrix);
		public abstract string getProfileName(int profileID);
		public abstract bool setProfileName(int profileID, string name);
		public abstract bool clearProfile(int profileID);
	}

	public abstract class EyewearUserCalibrator // TypeDefIndex: 3508
	{
		// Constructors
		protected EyewearUserCalibrator(); // 0x002FD120-0x002FD128
	
		// Methods
		public abstract bool init(int surfaceWidth, int surfaceHeight, int targetWidth, int targetHeight);
		public abstract float getMinScaleHint();
		public abstract float getMaxScaleHint();
		public abstract bool isStereoStretched();
		public abstract bool getProjectionMatrix(EyewearDevice.EyewearCalibrationReading[] readings, out Matrix4x4 cameraToEyeMatrix, out Matrix4x4 projectionMatrix);
	}

	public class WireframeBehaviour : VuforiaMonoBehaviour // TypeDefIndex: 3509
	{
		// Fields
		public Material lineMaterial; // 0x0C
		public bool ShowLines; // 0x10
		public Color LineColor; // 0x14
		private Material mLineMaterial; // 0x24
	
		// Constructors
		public WireframeBehaviour(); // 0x00B01EF0-0x00B01F3C
	
		// Methods
		private void Start(); // 0x00B01278-0x00B01380
		private void OnRenderObject(); // 0x00B01380-0x00B0199C
		private void OnDrawGizmos(); // 0x00B0199C-0x00B01EF0
	}

	public class WireframeTrackableEventHandler : VuforiaMonoBehaviour, ITrackableEventHandler // TypeDefIndex: 3510
	{
		// Fields
		private TrackableBehaviour mTrackableBehaviour; // 0x0C
	
		// Constructors
		public WireframeTrackableEventHandler(); // 0x00B02510-0x00B02534
	
		// Methods
		private void Start(); // 0x00B01F44-0x00B02014
		public void OnTrackableStateChanged(TrackableBehaviour.Status previousStatus, TrackableBehaviour.Status newStatus); // 0x00B02014-0x00B02028
		private void OnTrackingFound(); // 0x00B02028-0x00B0229C
		private void OnTrackingLost(); // 0x00B0229C-0x00B02510
	}
}

namespace Vuforia.UnityCompiled
{
	public interface IUnityRenderPipeline // TypeDefIndex: 3511
	{
		// Events
		event Action<Camera[]> BeginFrameRendering {
			add; // 0x00000000-0x00000000
			remove; // 0x00000000-0x00000000
		}
		event Action<Camera> BeginCameraRendering {
			add; // 0x00000000-0x00000000
			remove; // 0x00000000-0x00000000
		}
	}

	public class UnityCompiledFacade : IUnityCompiledFacade // TypeDefIndex: 3512
	{
		// Fields
		private static IUnityCompiledFacade sInstance; // 0x00
	
		// Properties
		public IUnityRenderPipeline UnityRenderPipeline { get; } // 0x002206A4-0x0022077C 
		public static IUnityCompiledFacade Instance { get; set; } // 0x0022077C-0x0022081C 0x0022081C-0x00220880
	
		// Constructors
		public UnityCompiledFacade(); // 0x00220880-0x00220888
	}

	public interface IUnityCompiledFacade // TypeDefIndex: 3513
	{
		// Properties
		IUnityRenderPipeline UnityRenderPipeline { get; }
	}

	internal class NullUnityCompiledFacade : IUnityCompiledFacade // TypeDefIndex: 3514
	{
		// Fields
		private readonly IUnityRenderPipeline mUnityRenderPipeline; // 0x08
	
		// Properties
		public IUnityRenderPipeline UnityRenderPipeline { get; } // 0x0022013C-0x002201F0 
	
		// Nested types
		private class NullUnityRenderPipeline : IUnityRenderPipeline // TypeDefIndex: 3515
		{
			// Fields
			[CompilerGenerated] // 0x0018A5CC-0x0018A5DC
			private Action<Camera[]> BeginFrameRendering; // 0x08
			[CompilerGenerated] // 0x0018A5DC-0x0018A5EC
			private Action<Camera> BeginCameraRendering; // 0x0C
	
			// Events
			public event Action<Camera[]> BeginFrameRendering {
				add; // 0x00220274-0x00220380
				remove; // 0x00220380-0x0022048C
			}
			public event Action<Camera> BeginCameraRendering {
				add; // 0x0022048C-0x00220598
				remove; // 0x00220598-0x002206A4
			}
	
			// Constructors
			public NullUnityRenderPipeline(); // 0x0022026C-0x00220274
		}
	
		// Constructors
		public NullUnityCompiledFacade(); // 0x002201F0-0x0022026C
	}
}

[CompilerGenerated] // 0x00188F3C-0x00188F4C
internal sealed class <PrivateImplementationDetails> // TypeDefIndex: 3516
{
	// Fields
	internal static readonly __StaticArrayInitTypeSize=24 898C2022A0C02FCE602BF05E1C09BD48301606E5; // 0x00 // Starts with: 00 00 00 00 01 00 00 00 - Metadata: 0x0021C3BC

	// Nested types
	private struct __StaticArrayInitTypeSize=24 // TypeDefIndex: 3517
	{
	}
}

namespace Facebook.Unity.Android
{
	internal class AndroidWrapper : IAndroidWrapper // TypeDefIndex: 3519
	{
		// Fields
		private const string FacebookJavaClassName = "com.facebook.unity.FB"; // Metadata: 0x0021C3D4
		private AndroidJavaClass facebookJavaClass; // 0x08
	
		// Constructors
		public AndroidWrapper(); // 0x00B83438-0x00B8C6FC
	
		// Methods
		public T CallStatic<T>(string methodName);
		public void CallStatic(string methodName, params /* 0x0018B1EC-0x0018B1FC */ object[] args); // 0x00B833FC-0x00B83438
	}
}

namespace Facebook.Unity.IOS
{
	public class IOSWrapper // TypeDefIndex: 3521
	{
		// Constructors
		public IOSWrapper(); // 0x00B9C138-0x00BB5D64
	}
}

public class PlayerPrefsController : MonoBehaviour // TypeDefIndex: 3523
{
	// Constructors
	public PlayerPrefsController(); // 0x00B7BB2C-0x00B8014C

	// Methods
	public void AddTestStrings(); // 0x00B7B844-0x00B7B8E4
	public void AddTestInt(); // 0x00B7B8E4-0x00B7B950
	public void AddTestFloat(); // 0x00B7B950-0x00B7B9C0
	public void RemoveTestStrings(); // 0x00B7B9C0-0x00B7BA40
	public void RemoveTestInt(); // 0x00B7BA40-0x00B7BAA8
	public void RemoveTestFloat(); // 0x00B7BAA8-0x00B7BB10
	public void DeleteAll(); // 0x00B7BB10-0x00B7BB2C
}

public class BoundingBoxRenderer : MonoBehaviour // TypeDefIndex: 3525
{
	// Fields
	private Material mLineMaterial; // 0x0C

	// Constructors
	public BoundingBoxRenderer(); // 0x00B094B4-0x00B094BC

	// Methods
	private void OnRenderObject(); // 0x00B09004-0x00B094B4
}

public class DefaultInitializationErrorHandler : VuforiaMonoBehaviour // TypeDefIndex: 3526
{
	// Fields
	private string mErrorText; // 0x0C
	private bool mErrorOccurred; // 0x10
	private const string headerLabel = "Vuforia Engine Initialization Error"; // Metadata: 0x0021C3ED
	private GUIStyle bodyStyle; // 0x14
	private GUIStyle headerStyle; // 0x18
	private GUIStyle footerStyle; // 0x1C
	private Texture2D bodyTexture; // 0x20
	private Texture2D headerTexture; // 0x24
	private Texture2D footerTexture; // 0x28

	// Constructors
	public DefaultInitializationErrorHandler(); // 0x00B0AD3C-0x00B0ADA8

	// Methods
	public void OnVuforiaInitializationError(VuforiaUnity.InitError initError); // 0x00B094BC-0x00B094E4
	private void Awake(); // 0x00B099F4-0x00B09ADC
	private void Start(); // 0x00B09ADC-0x00B09AE0
	private void OnGUI(); // 0x00B0A0E0-0x00B0A228
	private void OnDestroy(); // 0x00B0A228-0x00B0A310
	private void DrawWindowContent(int id); // 0x00B0A310-0x00B0A574
	private void SetErrorCode(VuforiaUnity.InitError errorCode); // 0x00B094E4-0x00B099EC
	private void SetErrorOccurred(bool errorOccurred); // 0x00B099EC-0x00B099F4
	private string getKeyInfo(); // 0x00B0A574-0x00B0AC3C
	private void SetupGUIStyles(); // 0x00B09AE0-0x00B0A0E0
	private Texture2D CreateSinglePixelTexture(Color color); // 0x00B0AC3C-0x00B0AD3C
}

public class DefaultModelRecoEventHandler : MonoBehaviour, IObjectRecoEventHandler // TypeDefIndex: 3527
{
	// Fields
	private ModelTargetBehaviour mLastRecoModelTarget; // 0x0C
	private bool mSearching; // 0x10
	private float mLastStatusCheckTime; // 0x14
	protected ModelRecoBehaviour mModelRecoBehaviour; // 0x18
	protected TargetFinder mTargetFinder; // 0x1C
	[Tooltip] // 0x0018B310-0x0018B368
	public UnityEngine.UI.Text ModelRecoErrorText; // 0x20
	[Tooltip] // 0x0018B368-0x0018B39C
	public bool StopSearchWhenModelFound; // 0x24
	[Tooltip] // 0x0018B39C-0x0018B3D0
	public bool StopSearchWhileTracking; // 0x25

	// Constructors
	public DefaultModelRecoEventHandler(); // 0x00B0C278-0x00B0C288

	// Methods
	private void Start(); // 0x00B0ADA8-0x00B0AE74
	private void Update(); // 0x00B0AE74-0x00B0B030
	private void OnDestroy(); // 0x00B0B1D4-0x00B0B294
	public void OnInitialized(TargetFinder targetFinder); // 0x00B0B294-0x00B0B32C
	public void OnInitError(TargetFinder.InitState initError); // 0x00B0B32C-0x00B0B4B8
	public void OnUpdateError(TargetFinder.UpdateState updateError); // 0x00B0B578-0x00B0B6FC
	public void OnStateChanged(bool searching); // 0x00B0B6FC-0x00B0B7E4
	public virtual void OnNewSearchResult(TargetFinder.TargetSearchResult searchResult); // 0x00B0B7E4-0x00B0BB0C
	private ModelTargetBehaviour FindExistingModelTarget(TargetFinder.ModelRecoSearchResult searchResult); // 0x00B0BB0C-0x00B0BC60
	private void ShowErrorMessageInUI(string text); // 0x00B0B4B8-0x00B0B578
	public static Bounds GetModelTargetWorldBounds(ModelTargetBehaviour mtb); // 0x00B0BC60-0x00B0C050
	private bool IsModelTrackedInView(ModelTargetBehaviour modelTarget); // 0x00B0B030-0x00B0B1D4
	public TargetFinder GetTargetFinder(); // 0x00B0C050-0x00B0C058
	public void ResetModelReco(bool destroyGameObjects); // 0x00B0C058-0x00B0C278
}

public class DefaultTrackableEventHandler : MonoBehaviour, ITrackableEventHandler // TypeDefIndex: 3528
{
	// Fields
	protected TrackableBehaviour mTrackableBehaviour; // 0x0C
	protected TrackableBehaviour.Status m_PreviousStatus; // 0x10
	protected TrackableBehaviour.Status m_NewStatus; // 0x14

	// Constructors
	public DefaultTrackableEventHandler(); // 0x00B0C97C-0x00B0C984

	// Methods
	protected virtual void Start(); // 0x00B0C288-0x00B0C358
	protected virtual void OnDestroy(); // 0x00B0C358-0x00B0C40C
	public void OnTrackableStateChanged(TrackableBehaviour.Status previousStatus, TrackableBehaviour.Status newStatus); // 0x00B0C40C-0x00B0C5B4
	protected virtual void OnTrackingFound(); // 0x00B0C5B4-0x00B0C798
	protected virtual void OnTrackingLost(); // 0x00B0C798-0x00B0C97C
}

namespace Vuforia.UnityCompiled
{
	public class RuntimeOpenSourceInitializer // TypeDefIndex: 3529
	{
		// Fields
		private static IUnityCompiledFacade sFacade; // 0x00
	
		// Nested types
		private class OpenSourceUnityCompiledFacade : IUnityCompiledFacade // TypeDefIndex: 3530
		{
			// Fields
			private readonly IUnityRenderPipeline mUnityRenderPipeline; // 0x08
	
			// Properties
			public IUnityRenderPipeline UnityRenderPipeline { get; } // 0x00B0CAB8-0x00B0CAC0 
	
			// Constructors
			public OpenSourceUnityCompiledFacade(); // 0x00B0CA38-0x00B0CAB0
		}
	
		private class UnityRenderPipeline : IUnityRenderPipeline // TypeDefIndex: 3531
		{
			// Fields
			[CompilerGenerated] // 0x0018B3D0-0x0018B3E0
			private Action<Camera[]> BeginFrameRendering; // 0x08
			[CompilerGenerated] // 0x0018B3E0-0x0018B3F0
			private Action<Camera> BeginCameraRendering; // 0x0C
	
			// Events
			public event Action<Camera[]> BeginFrameRendering {
				add; // 0x00B0CBB8-0x00B0CCC4
				remove; // 0x00B0CCC4-0x00B0CDD0
			}
			public event Action<Camera> BeginCameraRendering {
				add; // 0x00B0CDD0-0x00B0CEDC
				remove; // 0x00B0CEDC-0x00B0CFE8
			}
	
			// Constructors
			public UnityRenderPipeline(); // 0x00B0CAC0-0x00B0CBB8
	
			// Methods
			private void OnBeginCameraRendering(Camera camera); // 0x00B0CFE8-0x00B0D05C
			private void OnBeginFrameRendering(Camera[] cameras); // 0x00B0D05C-0x00B0D0D0
		}
	
		// Constructors
		public RuntimeOpenSourceInitializer(); // 0x00B0CAB0-0x00B0CAB8
	
		// Methods
		[RuntimeInitializeOnLoadMethod] // 0x0018B3F0-0x0018B404
		private static void OnRuntimeMethodLoad(); // 0x00B0C984-0x00B0C988
		private static void InitializeFacade(); // 0x00B0C988-0x00B0CA38
	}
}

public class AFInAppEvents // TypeDefIndex: 3533
{
	// Fields
	public const string LEVEL_ACHIEVED = "af_level_achieved"; // Metadata: 0x0021C414
	public const string ADD_PAYMENT_INFO = "af_add_payment_info"; // Metadata: 0x0021C429
	public const string ADD_TO_CART = "af_add_to_cart"; // Metadata: 0x0021C440
	public const string ADD_TO_WISH_LIST = "af_add_to_wishlist"; // Metadata: 0x0021C452
	public const string COMPLETE_REGISTRATION = "af_complete_registration"; // Metadata: 0x0021C468
	public const string TUTORIAL_COMPLETION = "af_tutorial_completion"; // Metadata: 0x0021C484
	public const string INITIATED_CHECKOUT = "af_initiated_checkout"; // Metadata: 0x0021C49E
	public const string PURCHASE = "af_purchase"; // Metadata: 0x0021C4B7
	public const string RATE = "af_rate"; // Metadata: 0x0021C4C6
	public const string SEARCH = "af_search"; // Metadata: 0x0021C4D1
	public const string SPENT_CREDIT = "af_spent_credits"; // Metadata: 0x0021C4DE
	public const string ACHIEVEMENT_UNLOCKED = "af_achievement_unlocked"; // Metadata: 0x0021C4F2
	public const string CONTENT_VIEW = "af_content_view"; // Metadata: 0x0021C50D
	public const string TRAVEL_BOOKING = "af_travel_booking"; // Metadata: 0x0021C520
	public const string SHARE = "af_share"; // Metadata: 0x0021C535
	public const string INVITE = "af_invite"; // Metadata: 0x0021C541
	public const string LOGIN = "af_login"; // Metadata: 0x0021C54E
	public const string RE_ENGAGE = "af_re_engage"; // Metadata: 0x0021C55A
	public const string UPDATE = "af_update"; // Metadata: 0x0021C56A
	public const string OPENED_FROM_PUSH_NOTIFICATION = "af_opened_from_push_notification"; // Metadata: 0x0021C577
	public const string LOCATION_CHANGED = "af_location_changed"; // Metadata: 0x0021C59B
	public const string LOCATION_COORDINATES = "af_location_coordinates"; // Metadata: 0x0021C5B2
	public const string ORDER_ID = "af_order_id"; // Metadata: 0x0021C5CD
	public const string LEVEL = "af_level"; // Metadata: 0x0021C5DC
	public const string SCORE = "af_score"; // Metadata: 0x0021C5E8
	public const string SUCCESS = "af_success"; // Metadata: 0x0021C5F4
	public const string PRICE = "af_price"; // Metadata: 0x0021C602
	public const string CONTENT_TYPE = "af_content_type"; // Metadata: 0x0021C60E
	public const string CONTENT_ID = "af_content_id"; // Metadata: 0x0021C621
	public const string CONTENT_LIST = "af_content_list"; // Metadata: 0x0021C632
	public const string CURRENCY = "af_currency"; // Metadata: 0x0021C645
	public const string QUANTITY = "af_quantity"; // Metadata: 0x0021C654
	public const string REGSITRATION_METHOD = "af_registration_method"; // Metadata: 0x0021C663
	public const string PAYMENT_INFO_AVAILIBLE = "af_payment_info_available"; // Metadata: 0x0021C67D
	public const string MAX_RATING_VALUE = "af_max_rating_value"; // Metadata: 0x0021C69A
	public const string RATING_VALUE = "af_rating_value"; // Metadata: 0x0021C6B1
	public const string SEARCH_STRING = "af_search_string"; // Metadata: 0x0021C6C4
	public const string DATE_A = "af_date_a"; // Metadata: 0x0021C6D8
	public const string DATE_B = "af_date_b"; // Metadata: 0x0021C6E5
	public const string DESTINATION_A = "af_destination_a"; // Metadata: 0x0021C6F2
	public const string DESTINATION_B = "af_destination_b"; // Metadata: 0x0021C706
	public const string DESCRIPTION = "af_description"; // Metadata: 0x0021C71A
	public const string CLASS = "af_class"; // Metadata: 0x0021C72C
	public const string EVENT_START = "af_event_start"; // Metadata: 0x0021C738
	public const string EVENT_END = "af_event_end"; // Metadata: 0x0021C74A
	public const string LATITUDE = "af_lat"; // Metadata: 0x0021C75A
	public const string LONGTITUDE = "af_long"; // Metadata: 0x0021C764
	public const string CUSTOMER_USER_ID = "af_customer_user_id"; // Metadata: 0x0021C76F
	public const string VALIDATED = "af_validated"; // Metadata: 0x0021C786
	public const string REVENUE = "af_revenue"; // Metadata: 0x0021C796
	public const string RECEIPT_ID = "af_receipt_id"; // Metadata: 0x0021C7A4
	public const string PARAM_1 = "af_param_1"; // Metadata: 0x0021C7B5
	public const string PARAM_2 = "af_param_2"; // Metadata: 0x0021C7C3
	public const string PARAM_3 = "af_param_3"; // Metadata: 0x0021C7D1
	public const string PARAM_4 = "af_param_4"; // Metadata: 0x0021C7DF
	public const string PARAM_5 = "af_param_5"; // Metadata: 0x0021C7ED
	public const string PARAM_6 = "af_param_6"; // Metadata: 0x0021C7FB
	public const string PARAM_7 = "af_param_7"; // Metadata: 0x0021C809
	public const string PARAM_8 = "af_param_8"; // Metadata: 0x0021C817
	public const string PARAM_9 = "af_param_9"; // Metadata: 0x0021C825
	public const string PARAM_10 = "af_param_10"; // Metadata: 0x0021C833

	// Constructors
	public AFInAppEvents(); // 0x00B0D0D0-0x00B0D0D8
}

public class AppsFlyer : MonoBehaviour // TypeDefIndex: 3534
{
	// Fields
	private static AndroidJavaClass obj; // 0x00
	private static AndroidJavaObject cls_AppsFlyer; // 0x04
	private static AndroidJavaClass propertiesClass; // 0x08
	private static AndroidJavaClass cls_AppsFlyerHelper; // 0x0C
	private static string devKey; // 0x10
	private static AndroidJavaClass cls_UnityShareHelper; // 0x14
	private static AndroidJavaObject ShareHelperInstance; // 0x18
	private static AndroidJavaClass cls_AndroidShare; // 0x1C

	// Constructors
	public AppsFlyer(); // 0x00B129D4-0x00B129DC
	static AppsFlyer(); // 0x00B129DC-0x00B12C44

	// Methods
	public static void trackEvent(string eventName, string eventValue); // 0x00B0D0D8-0x00B0D138
	public static void setCurrencyCode(string currencyCode); // 0x00B0D138-0x00B0D274
	public static void setCustomerUserID(string customerUserID); // 0x00B0D274-0x00B0D3B0
	public static void loadConversionData(string callbackObject); // 0x00B0D3B0-0x00B0D758
	[Obsolete] // 0x0018B4A0-0x0018B4FC
	public static void loadConversionData(string callbackObject, string callbackMethod, string callbackFailedMethod); // 0x00B0D758-0x00B0D7D8
	public static void setCollectIMEI(bool shouldCollect); // 0x00B0D7D8-0x00B0D93C
	public static void setCollectAndroidID(bool shouldCollect); // 0x00B0D93C-0x00B0DAB8
	public static void init(string key, string callbackObject); // 0x00B0DAB8-0x00B0DB78
	public static void init(string key); // 0x00B0DB78-0x00B0DF1C
	private static void init_cb(); // 0x00B0DF1C-0x00B0DFAC
	public static void setAppsFlyerKey(string key); // 0x00B0E518-0x00B0E578
	public static void trackAppLaunch(); // 0x00B0DFAC-0x00B0E518
	public static void setAppID(string packageName); // 0x00B0E578-0x00B0E6B4
	public static void createValidateInAppListener(string aObject, string callbackMethod, string callbackFailedMethod); // 0x00B0E6B4-0x00B0EB24
	public static void validateReceipt(string publicKey, string purchaseData, string signature, string price, string currency, Dictionary<string, string> extraParams); // 0x00B0EB24-0x00B0F3AC
	public static void trackRichEvent(string eventName, Dictionary<string, string> eventValues); // 0x00B0FB1C-0x00B0FF34
	private static AndroidJavaObject ConvertHashMap(Dictionary<string, string> dict); // 0x00B0F3AC-0x00B0FB1C
	public static void setImeiData(string imeiData); // 0x00B0FF34-0x00B10088
	public static void setAndroidIdData(string androidIdData); // 0x00B10088-0x00B101DC
	public static void setIsDebug(bool isDebug); // 0x00B101DC-0x00B10358
	public static void setIsSandbox(bool isSandbox); // 0x00B10358-0x00B1035C
	public static void getConversionData(); // 0x00B1035C-0x00B10360
	public static void handleOpenUrl(string url, string sourceApplication, string annotation); // 0x00B10360-0x00B10364
	public static string getAppsFlyerId(); // 0x00B10364-0x00B106E0
	public static void setGCMProjectNumber(string googleGCMNumber); // 0x00B106E0-0x00B1081C
	public static void updateServerUninstallToken(string token); // 0x00B1081C-0x00B10C1C
	public static void enableUninstallTracking(string senderId); // 0x00B10C1C-0x00B10DA0
	public static void setDeviceTrackingDisabled(bool state); // 0x00B10DA0-0x00B10F04
	public static void setAdditionalData(Dictionary<string, string> extraData); // 0x00B10F04-0x00B11264
	public static void stopTracking(bool isStopTracking); // 0x00B11264-0x00B11690
	public static void setAppInviteOneLinkID(string oneLinkID); // 0x00B11690-0x00B117CC
	public static void generateUserInviteLink(Dictionary<string, string> parameters, string callbackObject, string callbackMethod, string callbackFailedMethod); // 0x00B117CC-0x00B11D10
	public static void trackCrossPromoteImpression(string appId, string campaign); // 0x00B11D10-0x00B1217C
	public static void trackAndOpenStore(string promotedAppId, string campaign, Dictionary<string, string> customParams); // 0x00B1217C-0x00B1268C
	public static void setPreinstallAttribution(string mediaSource, string campaign, string siteId); // 0x00B1268C-0x00B12870
	public static void setMinTimeBetweenSessions(int seconds); // 0x00B12870-0x00B129D4
}

public class AppsFlyerTrackerCallbacks : MonoBehaviour // TypeDefIndex: 3535
{
	// Fields
	public UnityEngine.UI.Text callbacks; // 0x0C

	// Constructors
	public AppsFlyerTrackerCallbacks(); // 0x00B13114-0x00B1311C

	// Methods
	private void Start(); // 0x00B12C44-0x00B12CA4
	private void Update(); // 0x00B12CA4-0x00B12CA8
	public void didReceiveConversionData(string conversionData); // 0x00B12CA8-0x00B12D18
	public void didReceiveConversionDataWithError(string error); // 0x00B12D9C-0x00B12E0C
	public void didFinishValidateReceipt(string validateResult); // 0x00B12E0C-0x00B12E7C
	public void didFinishValidateReceiptWithError(string error); // 0x00B12E7C-0x00B12EEC
	public void onAppOpenAttribution(string validateResult); // 0x00B12EEC-0x00B12F5C
	public void onAppOpenAttributionFailure(string error); // 0x00B12F5C-0x00B12FCC
	public void onInAppBillingSuccess(); // 0x00B12FCC-0x00B13028
	public void onInAppBillingFailure(string error); // 0x00B13028-0x00B13098
	public void onInviteLinkGenerated(string link); // 0x00B13098-0x00B13108
	public void onOpenStoreLinkGenerated(string link); // 0x00B13108-0x00B13114
	private void printCallback(string str); // 0x00B12D18-0x00B12D9C
}

public class DeeplinkingExample : MonoBehaviour // TypeDefIndex: 3536
{
	// Fields
	public GameObject Panel; // 0x0C
	public GameObject Reference; // 0x10
	public GameObject obj; // 0x14
	public GameObject InstructionText; // 0x18

	// Constructors
	public DeeplinkingExample(); // 0x00B13628-0x00B13630

	// Methods
	private void Start(); // 0x00B1311C-0x00B13200
	private void SetupUi(); // 0x00B13200-0x00B13230
	private void Instance_LinkActivated(LinkActivation s); // 0x00B13230-0x00B13508
	private void UpdateContentSize(); // 0x00B13508-0x00B13628
}

public class OpenLinkBehaviour : MonoBehaviour // TypeDefIndex: 3537
{
	// Fields
	public string Url; // 0x0C

	// Constructors
	public OpenLinkBehaviour(); // 0x00B14750-0x00B14758

	// Methods
	private void Start(); // 0x00B14664-0x00B14744
	public void Open(); // 0x00B14744-0x00B14750
}

public class NativeShare // TypeDefIndex: 3538
{
	// Fields
	private static AndroidJavaClass m_ajc; // 0x00
	private static AndroidJavaObject m_context; // 0x04
	private string subject; // 0x08
	private string text; // 0x0C
	private string title; // 0x10
	private string targetPackage; // 0x14
	private string targetClass; // 0x18
	private List<string> files; // 0x1C
	private List<string> mimes; // 0x20

	// Properties
	private static AndroidJavaClass AJC { get; } // 0x00B13630-0x00B13780 
	private static AndroidJavaObject Context { get; } // 0x00B13780-0x00B139D8 

	// Constructors
	public NativeShare(); // 0x00B139D8-0x00B13AD0
	static NativeShare(); // 0x00B14660-0x00B14664

	// Methods
	public NativeShare SetSubject(string subject); // 0x00B13AD0-0x00B13ADC
	public NativeShare SetText(string text); // 0x00B13ADC-0x00B13AE8
	public NativeShare SetTitle(string title); // 0x00B13AE8-0x00B13AF4
	public NativeShare SetTarget(string androidPackageName, string androidClassName = null); // 0x00B13AF4-0x00B13B30
	public NativeShare AddFile(string filePath, string mime = null); // 0x00B13B30-0x00B13C8C
	public void Share(); // 0x00B13C8C-0x00B14130
	public static bool TargetExists(string androidPackageName, string androidClassName = null); // 0x00B14130-0x00B14350
	public static bool FindTarget(out string androidPackageName, out string androidClassName, string packageNameRegex, string classNameRegex = null); // 0x00B14350-0x00B14660
}

public class CameraBehaviour : MonoBehaviour // TypeDefIndex: 3540
{
	// Fields
	public VuforiaBehaviour config; // 0x0C
	private bool isRear; // 0x10

	// Constructors
	public CameraBehaviour(); // 0x001F0350-0x001F0358

	// Methods
	private void Start(); // 0x001F00BC-0x001F01FC
	private void Update(); // 0x001F01FC-0x001F0200
	private void OnVuforiaStarted(); // 0x001F0200-0x001F02A0
	private void OnPaused(bool paused); // 0x001F02A0-0x001F034C
	public void SwapCamera(); // 0x001F034C-0x001F0350
}

public class AR_Obstacle : MonoBehaviour // TypeDefIndex: 3541
{
	// Fields
	private Transform mTransform; // 0x0C
	private int mSpawnTicks; // 0x10
	private int mRemoveTicks; // 0x14
	private float mSmoothStep; // 0x18
	private Vector3 mLocalScale; // 0x1C

	// Constructors
	public AR_Obstacle(); // 0x001E61C8-0x001E61D0

	// Methods
	private void Awake(); // 0x001E5D78-0x001E5DDC
	public void SpawnOB(); // 0x001E5DDC-0x001E5EA8
	public void RemoveOB(); // 0x001E5EA8-0x001E5EBC
	private void FixedUpdate(); // 0x001E5EBC-0x001E61C8
}

public class ARFPSChecker : MonoBehaviour // TypeDefIndex: 3542
{
	// Fields
	public bool debug; // 0x0C
	public float fpsthresh; // 0x10
	private float deltaTime; // 0x14
	public CanvasGroup FPSNotification; // 0x18

	// Constructors
	public ARFPSChecker(); // 0x001DFE54-0x001DFE68

	// Methods
	private void Update(); // 0x001DFB70-0x001DFBF0
	private void OnGUI(); // 0x001DFBF0-0x001DFE54
}

public class ARGameController : MonoBehaviour // TypeDefIndex: 3543
{
	// Fields
	[Header] // 0x0018BB8C-0x0018BBC8
	public GameObject environment1; // 0x0C
	public GameObject environment2; // 0x10
	public float swtichPointFromX; // 0x14
	public float swtichPointToX; // 0x18
	public GameObject CharacterRoot; // 0x1C
	public Transform PositionLeft; // 0x20
	public Transform PositionRight; // 0x24
	public GameObject bomb; // 0x28
	public GameObject bombIcon; // 0x2C
	public GameObject[] Obstacles; // 0x30
	public Transform ObstacleLeft; // 0x34
	public Transform ObstacleRight; // 0x38
	public Transform SpawnParent; // 0x3C
	public Transform ATMSpawner; // 0x40
	public GameObject ATMPrefab; // 0x44
	public GameObject BombPrefab; // 0x48
	public GameObject DiamondPrefab; // 0x4C
	public Transform[] CharacterAry; // 0x50
	public Animator RunAni; // 0x54
	private int CharacterPosition; // 0x58
	[Header] // 0x0018BBC8-0x0018BC08
	public static float speed; // 0x00
	public static float spawnTime; // 0x04
	public static bool isPlaying; // 0x08
	[Header] // 0x0018BC08-0x0018BC48
	public AudioManager audiomanager; // 0x5C
	public GameController gameController; // 0x60
	public UnityEngine.UI.Text counter; // 0x64
	public UnityEngine.UI.Text scoreTxt; // 0x68
	public UnityEngine.UI.Text BombText; // 0x6C
	public GameObject BtnGameSTart; // 0x70
	public ARTracking ARHandler; // 0x74
	[Header] // 0x0018BC48-0x0018BC80
	public Transform mainGame; // 0x78
	private float boolRandom; // 0x7C
	private bool isWheel; // 0x80
	[Header] // 0x0018BC80-0x0018BCB8
	public int ATMRandom1; // 0x84
	public int ATMRandom2; // 0x88
	public int ATMRandom3; // 0x8C
	public int ATMRandom4; // 0x90
	[Header] // 0x0018BCB8-0x0018BCEC
	public int scoreLimit; // 0x94
	public float minSpeed; // 0x98
	public float maxSpeed; // 0x9C
	public float minAnimSpeed; // 0xA0
	public float maxAnimSpeed; // 0xA4
	public float minSpawnTime; // 0xA8
	public float maxSpawnTime; // 0xAC
	public float maxSpawnRandomness; // 0xB0
	private IEnumerator GameCoroutine; // 0xB4
	private IEnumerator GameStartRoutine; // 0xB8
	private int score; // 0xBC
	private float currentAnimationSpeed; // 0xC0
	private bool isDead; // 0xC4
	private int firstATMTime; // 0xC8
	private int bombs; // 0xCC
	private int diamonds; // 0xD0
	private bool isCount; // 0xD4
	private bool prevRandomBool; // 0xD5
	private bool isFlat; // 0xD6

	// Nested types
	[CompilerGenerated] // 0x0018B558-0x0018B568
	private sealed class <SpawnObjects>d__68 : IEnumerator<object> // TypeDefIndex: 3544
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public ARGameController <>4__this; // 0x10

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018BF70-0x0018BF80 */ get; } // 0x001E38B4-0x001E38BC 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018BF90-0x0018BFA0 */ get; } // 0x001E3944-0x001E394C 

		// Constructors
		[DebuggerHidden] // 0x0018BF50-0x0018BF60
		public <SpawnObjects>d__68(int <>1__state); // 0x001E1D28-0x001E1D48

		// Methods
		[DebuggerHidden] // 0x0018BF60-0x0018BF70
		void IDisposable.Dispose(); // 0x001E2C78-0x001E2C7C
		private bool MoveNext(); // 0x001E2C7C-0x001E38B4
		[DebuggerHidden] // 0x0018BF80-0x0018BF90
		void IEnumerator.Reset(); // 0x001E38BC-0x001E3944
	}

	[CompilerGenerated] // 0x0018B568-0x0018B578
	private sealed class <GameStarter>d__71 : IEnumerator<object> // TypeDefIndex: 3545
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public ARGameController <>4__this; // 0x10

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018BFC0-0x0018BFD0 */ get; } // 0x001E2BE0-0x001E2BE8 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018BFE0-0x0018BFF0 */ get; } // 0x001E2C70-0x001E2C78 

		// Constructors
		[DebuggerHidden] // 0x0018BFA0-0x0018BFB0
		public <GameStarter>d__71(int <>1__state); // 0x001E1DD4-0x001E1DF4

		// Methods
		[DebuggerHidden] // 0x0018BFB0-0x0018BFC0
		void IDisposable.Dispose(); // 0x001E277C-0x001E2780
		private bool MoveNext(); // 0x001E2780-0x001E2BE0
		[DebuggerHidden] // 0x0018BFD0-0x0018BFE0
		void IEnumerator.Reset(); // 0x001E2BE8-0x001E2C70
	}

	// Constructors
	public ARGameController(); // 0x001E2698-0x001E26FC
	static ARGameController(); // 0x001E26FC-0x001E277C

	// Methods
	private void Start(); // 0x001DFE68-0x001E0214
	public void spawnBomb(); // 0x001E0578-0x001E082C
	public void getBomb(); // 0x001E082C-0x001E08FC
	public void getBomb(int add); // 0x001E09B8-0x001E0A70
	public void getDiamond(); // 0x001E0A70-0x001E0AA4
	public int getCollectedDiamonds(); // 0x001E0B0C-0x001E0B14
	private void Awake(); // 0x001E0B14-0x001E0B38
	private void Update(); // 0x001E0B38-0x001E1390
	public int getScore(); // 0x001E1500-0x001E1508
	public void CheckScore(); // 0x001E1508-0x001E1774
	public void SwitchCharacterPosition(); // 0x001E1390-0x001E1500
	public void MarkerFound(); // 0x001E1830-0x001E1938
	public void StartPlay(); // 0x001E1938-0x001E1A0C
	public void PlayWithMarker(); // 0x001E1A44-0x001E1AA0
	public void MarkerLost(); // 0x001E1AA0-0x001E1C9C
	[IteratorStateMachine] // 0x0018BE60-0x0018BED8
	public IEnumerator SpawnObjects(); // 0x001E1C9C-0x001E1D28
	public void StartGame(); // 0x001E1A0C-0x001E1A44
	[IteratorStateMachine] // 0x0018BED8-0x0018BF50
	public IEnumerator GameStarter(); // 0x001E1D48-0x001E1DD4
	public void MidGame(); // 0x001E1DF4-0x001E2038
	public void EndGame(); // 0x001E21D8-0x001E2400
	public bool RandomnBoolGenerator(float randomness); // 0x001E24EC-0x001E2564
	public void SwitchOrientation(); // 0x001E2564-0x001E2698
}

public class ARTracking : MonoBehaviour, ITrackableEventHandler // TypeDefIndex: 3546
{
	// Fields
	public ARGameController ARgameController; // 0x0C
	public bool isMarkerFound; // 0x10
	protected TrackableBehaviour mTrackableBehaviour; // 0x14
	protected TrackableBehaviour.Status m_PreviousStatus; // 0x18
	protected TrackableBehaviour.Status m_NewStatus; // 0x1C

	// Constructors
	public ARTracking(); // 0x001E49C4-0x001E49CC

	// Methods
	protected virtual void Start(); // 0x001E4278-0x001E4348
	protected virtual void OnDestroy(); // 0x001E4348-0x001E43FC
	public void OnTrackableStateChanged(TrackableBehaviour.Status previousStatus, TrackableBehaviour.Status newStatus); // 0x001E43FC-0x001E45A4
	protected virtual void OnTrackingFound(); // 0x001E45A4-0x001E47B4
	protected virtual void OnTrackingLost(); // 0x001E47B4-0x001E49C4
}

public class CountDownAR : MonoBehaviour // TypeDefIndex: 3547
{
	// Fields
	public UnityEngine.UI.Text CounterLBL; // 0x0C
	public GameController inputManager; // 0x10
	private int mCount; // 0x14
	private int mTm; // 0x18
	private float mSmoothStep; // 0x1C
	private bool mPlay; // 0x20

	// Constructors
	public CountDownAR(); // 0x001F22A4-0x001F22AC

	// Methods
	private void Awake(); // 0x001F1D98-0x001F1E60
	[DoNotRename] // 0x0018BFF0-0x0018C000
	public void SetTimer(); // 0x001F1E60-0x001F1F40
	private void FixedUpdate(); // 0x001F1F40-0x001F2124
	private void LateUpdate(); // 0x001F2128-0x001F213C
	public void StartCount(); // 0x001F213C-0x001F2210
	public void StopCount(); // 0x001F2210-0x001F22A4
}

public class DataFill : MonoBehaviour // TypeDefIndex: 3548
{
	// Fields
	private const string FILE_NAME = "MyFile.txt"; // Metadata: 0x0021C842
	private int mTicks; // 0x0C
	private float mX; // 0x10
	private float mY; // 0x14
	private float mAng; // 0x18
	private StreamWriter sr; // 0x1C

	// Constructors
	public DataFill(); // 0x001F49E0-0x001F49E8

	// Methods
	private void Start(); // 0x001F455C-0x001F460C
	private void FixedUpdate(); // 0x001F460C-0x001F49E0
}

public class EnvManager : MonoBehaviour // TypeDefIndex: 3549
{
	// Fields
	public GameObject[] objsToHide; // 0x0C
	public UnityEngine.UI.Text TimerLBL; // 0x10
	public Transform RootT; // 0x14
	public GameController gameController; // 0x18
	public Material RoadMat; // 0x1C
	public bool Run; // 0x20
	public Transform Point_0; // 0x24
	public Transform Point_1; // 0x28
	public Transform Point_2; // 0x2C
	public Transform Point_3; // 0x30
	public float Speed; // 0x34
	public int TickLimit; // 0x38
	private int mTicks; // 0x3C
	private int mOffset; // 0x40
	private float mOffSetVal; // 0x44
	public Transform Ob_1; // 0x48
	public Transform Ob_3; // 0x4C
	public Transform Atm_T; // 0x50
	private int mSide_1; // 0x54
	private int mSide_3; // 0x58
	private bool mIsSide_1_Atm; // 0x5C
	private bool mIsSide_3_Atm; // 0x5D
	public int HitLimitOffset; // 0x60
	private int mSecondsTick; // 0x64
	private int mRunTime; // 0x68
	private int mAtmTicks; // 0x6C
	public int NewTickLimit; // 0x70

	// Constructors
	public EnvManager(); // 0x001F60D0-0x001F60D8

	// Methods
	private void Awake(); // 0x001F5028-0x001F5210
	private void Update(); // 0x001F5210-0x001F5260
	private void FixedUpdate(); // 0x001F552C-0x001F5F58
	public void HideATMonHit(); // 0x001F5F7C-0x001F5FE0
	private bool IsAtm(); // 0x001F5F58-0x001F5F78
	public void Init(int i); // 0x001F5FE0-0x001F60D0
	public void SetOrientation(bool isFlat); // 0x001F5260-0x001F552C
}

public enum AR_GiftIDs // TypeDefIndex: 3550
{
	DATA = 0,
	MAGNET = 1,
	SHIELD = 2,
	COINS = 3,
	BOOST = 4
}

public enum AR_STATUS // TypeDefIndex: 3551
{
	MARKER_NOT_FOUND = 0
}

public class GameController : MonoBehaviour // TypeDefIndex: 3552
{
	// Fields
	public AudioManager audiomanager; // 0x0C
	public ARGameController arController; // 0x10
	public GameObject InstructionsDialog; // 0x14
	public UnityEngine.UI.Text ArStatusText; // 0x18
	private static GameController mInstance; // 0x00
	public GameObject SpinButton; // 0x1C
	public GameObject GameWheel; // 0x20
	public GameObject GameWheelPanel; // 0x24
	public VuforiaBehaviour vuforiaBehaviour; // 0x28
	public GameObject LoadingPanel; // 0x2C
	public GameObject ServiceErrorDialog; // 0x30
	public Font SinhalaFont; // 0x34
	public Font EnglishFont; // 0x38
	public Font TamilFont; // 0x3C
	public UnityEngine.UI.Text ServiceErrorMsgTXT; // 0x40
	public string URL_TXT; // 0x44
	public GameObject LoadingAnimation; // 0x48
	public UnityEngine.UI.Text text; // 0x4C
	public EnvManager envManager; // 0x50
	public GameObject GameOverPanel; // 0x54
	private string mPlay_ID; // 0x58
	private string mToken; // 0x5C
	private ServiceNames mSerNm; // 0x60
	public AR_GiftIDs ID_Gift; // 0x64
	public int HasAtmGift; // 0x68
	public bool validationEnabled; // 0x6C
	private float mCharacterY; // 0x70
	private float mCharacterZ; // 0x74
	private int i; // 0x78
	private bool mDied; // 0x7C
	private float mScreenX_half; // 0x80

	// Properties
	public static GameController Instance { get; } // 0x001E3C80-0x001E3CE4 

	// Nested types
	private enum ErrorCodes // TypeDefIndex: 3553
	{
		Network = 0,
		Worng = 1,
		noCoins = 2,
		noDrawpoints = 3,
		noMoney = 4,
		badPin = 5
	}

	private enum ServiceNames // TypeDefIndex: 3554
	{
		undefined = 0,
		StartService = 1
	}

	[Serializable]
	private struct FromJsonOBStart // TypeDefIndex: 3555
	{
		// Fields
		public string play_session; // 0x00
	}

	[Serializable]
	private struct FromJsonOBRewardHit // TypeDefIndex: 3556
	{
		// Fields
		public string type; // 0x00
		public int size; // 0x04
	}

	[Serializable]
	private struct FromJsonOBEnd // TypeDefIndex: 3557
	{
		// Fields
		public int status; // 0x00
		public string error; // 0x04
		public ResS response; // 0x08

		// Nested types
		[Serializable]
		public struct ResS // TypeDefIndex: 3558
		{
			// Fields
			public string msg; // 0x00
		}
	}

	[CompilerGenerated] // 0x0018B578-0x0018B588
	private sealed class <StartServiceCall>d__47 : IEnumerator<object> // TypeDefIndex: 3559
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public GameController <>4__this; // 0x10
		private UnityWebRequest <w>5__2; // 0x14

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018C2A8-0x0018C2B8 */ get; } // 0x00201C84-0x00201C8C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018C2C8-0x0018C2D8 */ get; } // 0x00201D14-0x00201ED0 

		// Constructors
		[DebuggerHidden] // 0x0018C288-0x0018C298
		public <StartServiceCall>d__47(int <>1__state); // 0x001FE334-0x001FE354

		// Methods
		[DebuggerHidden] // 0x0018C298-0x0018C2A8
		void IDisposable.Dispose(); // 0x002016EC-0x002016F0
		private bool MoveNext(); // 0x002016F0-0x00201C84
		[DebuggerHidden] // 0x0018C2B8-0x0018C2C8
		void IEnumerator.Reset(); // 0x00201C8C-0x00201D14
	}

	[CompilerGenerated] // 0x0018B588-0x0018B598
	private sealed class <RewardHitServiceCall>d__51 : IEnumerator<object> // TypeDefIndex: 3560
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public GameController <>4__this; // 0x10
		private UnityWebRequest <w>5__2; // 0x14

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018C2F8-0x0018C308 */ get; } // 0x00200578-0x00200580 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018C318-0x0018C328 */ get; } // 0x00200608-0x00200610 

		// Constructors
		[DebuggerHidden] // 0x0018C2D8-0x0018C2E8
		public <RewardHitServiceCall>d__51(int <>1__state); // 0x001FE82C-0x001FE84C

		// Methods
		[DebuggerHidden] // 0x0018C2E8-0x0018C2F8
		void IDisposable.Dispose(); // 0x001FFA88-0x001FFA8C
		private bool MoveNext(); // 0x001FFA8C-0x00200578
		[DebuggerHidden] // 0x0018C308-0x0018C318
		void IEnumerator.Reset(); // 0x00200580-0x00200608
	}

	[CompilerGenerated] // 0x0018B598-0x0018B5A8
	private sealed class <RewardHitServiceCallNewKey>d__52 : IEnumerator<object> // TypeDefIndex: 3561
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public GameController <>4__this; // 0x10
		private UnityWebRequest <w>5__2; // 0x14

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018C348-0x0018C358 */ get; } // 0x00201060-0x00201068 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018C368-0x0018C378 */ get; } // 0x002010F0-0x002010F8 

		// Constructors
		[DebuggerHidden] // 0x0018C328-0x0018C338
		public <RewardHitServiceCallNewKey>d__52(int <>1__state); // 0x001FE8D8-0x001FE8F8

		// Methods
		[DebuggerHidden] // 0x0018C338-0x0018C348
		void IDisposable.Dispose(); // 0x00200610-0x00200614
		private bool MoveNext(); // 0x00200614-0x00201060
		[DebuggerHidden] // 0x0018C358-0x0018C368
		void IEnumerator.Reset(); // 0x00201068-0x002010F0
	}

	[CompilerGenerated] // 0x0018B5A8-0x0018B5B8
	private sealed class <RewardHitServiceCallWithoutValidation>d__53 : IEnumerator<object> // TypeDefIndex: 3562
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public GameController <>4__this; // 0x10
		private UnityWebRequest <w>5__2; // 0x14

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018C398-0x0018C3A8 */ get; } // 0x00201654-0x0020165C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018C3B8-0x0018C3C8 */ get; } // 0x002016E4-0x002016EC 

		// Constructors
		[DebuggerHidden] // 0x0018C378-0x0018C388
		public <RewardHitServiceCallWithoutValidation>d__53(int <>1__state); // 0x001FE984-0x001FE9A4

		// Methods
		[DebuggerHidden] // 0x0018C388-0x0018C398
		void IDisposable.Dispose(); // 0x002010F8-0x002010FC
		private bool MoveNext(); // 0x002010FC-0x00201654
		[DebuggerHidden] // 0x0018C3A8-0x0018C3B8
		void IEnumerator.Reset(); // 0x0020165C-0x002016E4
	}

	[CompilerGenerated] // 0x0018B5B8-0x0018B5C8
	private sealed class <EndServiceCall>d__56 : IEnumerator<object> // TypeDefIndex: 3563
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public GameController <>4__this; // 0x10
		public int level; // 0x14
		private int <score>5__2; // 0x18
		private UnityWebRequest <w>5__3; // 0x1C

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018C3E8-0x0018C3F8 */ get; } // 0x001FF9F0-0x001FF9F8 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018C408-0x0018C418 */ get; } // 0x001FFA80-0x001FFA88 

		// Constructors
		[DebuggerHidden] // 0x0018C3C8-0x0018C3D8
		public <EndServiceCall>d__56(int <>1__state); // 0x001FEBA8-0x001FEBC8

		// Methods
		[DebuggerHidden] // 0x0018C3D8-0x0018C3E8
		void IDisposable.Dispose(); // 0x001FF504-0x001FF508
		private bool MoveNext(); // 0x001FF508-0x001FF9F0
		[DebuggerHidden] // 0x0018C3F8-0x0018C408
		void IEnumerator.Reset(); // 0x001FF9F8-0x001FFA80
	}

	// Constructors
	public GameController(); // 0x001FF4F4-0x001FF504

	// Methods
	private void Start(); // 0x001FE110-0x001FE13C
	public void StartGame(); // 0x001F2124-0x001F2128
	public void StopGame(); // 0x001FE1C8-0x001FE1CC
	public void SetAR_statusText(bool show, AR_STATUS state = AR_STATUS.MARKER_NOT_FOUND /* Metadata: 0x0021C868 */); // 0x001E02DC-0x001E0578
	public void ShowInstructions(); // 0x001E0214-0x001E0244
	public void HideInstructions(); // 0x001E0244-0x001E02DC
	private bool HasAtmTest(); // 0x001FE1CC-0x001FE1D4
	public void CheckForHit(int obSide, bool isAtm); // 0x001F5F78-0x001F5F7C
	public void GameOver(); // 0x001E24BC-0x001E24EC
	public void Replay(); // 0x001FE1D4-0x001FE1E0
	public void MainMenu(); // 0x001FE1E0-0x001FE1EC
	[DoNotRename] // 0x0018C000-0x0018C010
	public void Click_MainMenu(); // 0x001FE1EC-0x001FE23C
	[DoNotRename] // 0x0018C010-0x0018C020
	public void Click_Relpay(); // 0x001FE2E4-0x001FE334
	[IteratorStateMachine] // 0x0018C020-0x0018C098
	private IEnumerator StartServiceCall(); // 0x001FE13C-0x001FE1C8
	public string Md5SumString(string strToEncrypt); // 0x001FE354-0x001FE524
	private static string ComputeSha256Hash(string rawData); // 0x001FE524-0x001FE7A0
	[IteratorStateMachine] // 0x0018C098-0x0018C110
	private IEnumerator RewardHitServiceCall(); // 0x001FE7A0-0x001FE82C
	[IteratorStateMachine] // 0x0018C110-0x0018C188
	private IEnumerator RewardHitServiceCallNewKey(); // 0x001FE84C-0x001FE8D8
	[IteratorStateMachine] // 0x0018C188-0x0018C200
	private IEnumerator RewardHitServiceCallWithoutValidation(); // 0x001FE8F8-0x001FE984
	public void selectInAppGift(); // 0x001FE9A4-0x001FEBA8
	[IteratorStateMachine] // 0x0018C200-0x0018C278
	private IEnumerator EndServiceCall(int level); // 0x001FE23C-0x001FE2E4
	private void CallServiceErrorDialog(ErrorCodes er, ServiceNames sn = ServiceNames.undefined /* Metadata: 0x0021C86C */); // 0x001FEBC8-0x001FF444
	[DoNotRename] // 0x0018C278-0x0018C288
	public void RefreshService(); // 0x001FF444-0x001FF478
	public void HitATM(); // 0x001E2038-0x001E2150
	public void RewardHit(); // 0x001E4FC0-0x001E4FE4
	private void HitObstacle(); // 0x001FF478-0x001FF47C
	public void CloseInstructionsDialog(); // 0x001FF47C-0x001FF488
	public void ClickBackButton(); // 0x001FF488-0x001FF494
	public void OpenDialogLink(); // 0x001FF494-0x001FF4F4
}

public class ItemDestroyer : MonoBehaviour // TypeDefIndex: 3564
{
	// Constructors
	public ItemDestroyer(); // 0x0062CCE4-0x0062CCEC

	// Methods
	private void OnCollisionEnter(Collision collisionInfo); // 0x0062C8BC-0x0062CAD0
	private void OnTriggerEnter(Collider other); // 0x0062CAD0-0x0062CCE4
}

public class ObjectLoad : MonoBehaviour // TypeDefIndex: 3565
{
	// Fields
	private int mSpawnTicks; // 0x0C
	private float mSmoothStep; // 0x10
	private Transform mTransform; // 0x14
	private Vector3 mLocalScale; // 0x18

	// Constructors
	public ObjectLoad(); // 0x00BB7010-0x00BB7018

	// Methods
	private void Awake(); // 0x00BB6E9C-0x00BB6EA0
	private void FixedUpdate(); // 0x00BB6EA0-0x00BB7010
}

public class ObstacleMover : MonoBehaviour // TypeDefIndex: 3566
{
	// Fields
	public bool isCustom; // 0x0C
	public Vector3 direction; // 0x10

	// Constructors
	public ObstacleMover(); // 0x00BB7324-0x00BB73C8

	// Methods
	private void Update(); // 0x00BB709C-0x00BB7324
}

public class PlayerController : MonoBehaviour // TypeDefIndex: 3567
{
	// Fields
	public ARGameController gameController; // 0x0C

	// Constructors
	public PlayerController(); // 0x00BB7AE8-0x00BB7AF0

	// Methods
	private void OnTriggerEnter(Collider other); // 0x00BB76A0-0x00BB7AE8
}

public class CFX_Demo : MonoBehaviour // TypeDefIndex: 3568
{
	// Fields
	public bool orderedSpawns; // 0x0C
	public float step; // 0x10
	public float range; // 0x14
	private float order; // 0x18
	public Material groundMat; // 0x1C
	public Material waterMat; // 0x20
	public GameObject[] ParticleExamples; // 0x24
	private Dictionary<string, float> ParticlesYOffsetD; // 0x28
	private int exampleIndex; // 0x2C
	private string randomSpawnsDelay; // 0x30
	private bool randomSpawns; // 0x34
	private bool slowMo; // 0x35

	// Nested types
	[CompilerGenerated] // 0x0018B5C8-0x0018B5D8
	private sealed class <RandomSpawnsCoroutine>d__15 : IEnumerator<object> // TypeDefIndex: 3569
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public CFX_Demo <>4__this; // 0x10

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018C4B0-0x0018C4C0 */ get; } // 0x001EDEE0-0x001EDEE8 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018C4D0-0x0018C4E0 */ get; } // 0x001EDF70-0x001EDF78 

		// Constructors
		[DebuggerHidden] // 0x0018C490-0x0018C4A0
		public <RandomSpawnsCoroutine>d__15(int <>1__state); // 0x001ED22C-0x001ED24C

		// Methods
		[DebuggerHidden] // 0x0018C4A0-0x0018C4B0
		void IDisposable.Dispose(); // 0x001EDB18-0x001EDB1C
		private bool MoveNext(); // 0x001EDB1C-0x001EDEE0
		[DebuggerHidden] // 0x0018C4C0-0x0018C4D0
		void IEnumerator.Reset(); // 0x001EDEE8-0x001EDF70
	}

	// Constructors
	public CFX_Demo(); // 0x001ED298-0x001EDB18

	// Methods
	private void OnMouseDown(); // 0x001EBCD8-0x001EBEFC
	private GameObject spawnParticle(); // 0x001EBEFC-0x001EC2F4
	private void OnGUI(); // 0x001EC2F4-0x001ECCE0
	[IteratorStateMachine] // 0x0018C418-0x0018C490
	private IEnumerator RandomSpawnsCoroutine(); // 0x001ED1A0-0x001ED22C
	private void Update(); // 0x001ED24C-0x001ED298
	private void prevParticle(); // 0x001ECCE0-0x001ECF40
	private void nextParticle(); // 0x001ECF40-0x001ED1A0
}

public class CFX_Demo_RandomDir : MonoBehaviour // TypeDefIndex: 3570
{
	// Fields
	public Vector3 min; // 0x0C
	public Vector3 max; // 0x18

	// Constructors
	public CFX_Demo_RandomDir(); // 0x001EE020-0x001EE0B4

	// Methods
	private void Start(); // 0x001EDF78-0x001EE020
}

public class CFX_Demo_RandomDirectionTranslate : MonoBehaviour // TypeDefIndex: 3571
{
	// Fields
	public float speed; // 0x0C
	public Vector3 baseDir; // 0x10
	public Vector3 axis; // 0x1C
	public bool gravity; // 0x28
	private Vector3 dir; // 0x2C

	// Constructors
	public CFX_Demo_RandomDirectionTranslate(); // 0x001EE3F0-0x001EE4BC

	// Methods
	private void Start(); // 0x001EE0B4-0x001EE23C
	private void Update(); // 0x001EE23C-0x001EE3F0
}

public class CFX_Demo_RotateCamera : MonoBehaviour // TypeDefIndex: 3572
{
	// Fields
	public static bool rotating; // 0x00
	public float speed; // 0x0C
	public Transform rotationCenter; // 0x10

	// Constructors
	public CFX_Demo_RotateCamera(); // 0x001EE61C-0x001EE630
	static CFX_Demo_RotateCamera(); // 0x001EE630-0x001EE698

	// Methods
	private void Update(); // 0x001EE4BC-0x001EE61C
}

[RequireComponent] // 0x0018B5D8-0x0018B650
public class CFX_AutoDestructShuriken : MonoBehaviour // TypeDefIndex: 3573
{
	// Fields
	public bool OnlyDeactivate; // 0x0C

	// Nested types
	[CompilerGenerated] // 0x0018B650-0x0018B660
	private sealed class <CheckIfAlive>d__2 : IEnumerator<object> // TypeDefIndex: 3574
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public CFX_AutoDestructShuriken <>4__this; // 0x10

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018C578-0x0018C588 */ get; } // 0x001EBA60-0x001EBA68 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018C598-0x0018C5A8 */ get; } // 0x001EBAF0-0x001EBAF8 

		// Constructors
		[DebuggerHidden] // 0x0018C558-0x0018C568
		public <CheckIfAlive>d__2(int <>1__state); // 0x001EB888-0x001EB8A8

		// Methods
		[DebuggerHidden] // 0x0018C568-0x0018C578
		void IDisposable.Dispose(); // 0x001EB8B0-0x001EB8B4
		private bool MoveNext(); // 0x001EB8B4-0x001EBA60
		[DebuggerHidden] // 0x0018C588-0x0018C598
		void IEnumerator.Reset(); // 0x001EBA68-0x001EBAF0
	}

	// Constructors
	public CFX_AutoDestructShuriken(); // 0x001EB8A8-0x001EB8B0

	// Methods
	private void OnEnable(); // 0x001EB794-0x001EB7FC
	[IteratorStateMachine] // 0x0018C4E0-0x0018C558
	private IEnumerator CheckIfAlive(); // 0x001EB7FC-0x001EB888
}

public class CFX_AutodestructWhenNoChildren : MonoBehaviour // TypeDefIndex: 3575
{
	// Constructors
	public CFX_AutodestructWhenNoChildren(); // 0x001EBCD0-0x001EBCD8

	// Methods
	private void Update(); // 0x001EBC08-0x001EBCD0
}

public class CFX_AutoRotate : MonoBehaviour // TypeDefIndex: 3576
{
	// Fields
	public Vector3 rotation; // 0x0C
	public Space space; // 0x18

	// Constructors
	public CFX_AutoRotate(); // 0x001EBBF8-0x001EBC08

	// Methods
	private void Update(); // 0x001EBAF8-0x001EBBF8
}

[RequireComponent] // 0x0018B660-0x0018B6D8
public class CFX_LightIntensityFade : MonoBehaviour // TypeDefIndex: 3577
{
	// Fields
	public float duration; // 0x0C
	public float delay; // 0x10
	public float finalIntensity; // 0x14
	private float baseIntensity; // 0x18
	public bool autodestruct; // 0x1C
	private float p_lifetime; // 0x20
	private float p_delay; // 0x24

	// Constructors
	public CFX_LightIntensityFade(); // 0x001EE9B8-0x001EE9C8

	// Methods
	private void Start(); // 0x001EE698-0x001EE720
	private void OnEnable(); // 0x001EE720-0x001EE7C8
	private void Update(); // 0x001EE7C8-0x001EE9B8
}

public class CFX_ShurikenThreadFix : MonoBehaviour // TypeDefIndex: 3578
{
	// Fields
	private ParticleSystem[] systems; // 0x0C

	// Nested types
	[CompilerGenerated] // 0x0018B6D8-0x0018B6E8
	private sealed class <WaitFrame>d__2 : IEnumerator<object> // TypeDefIndex: 3579
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public CFX_ShurikenThreadFix <>4__this; // 0x10

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018C640-0x0018C650 */ get; } // 0x001EEC68-0x001EEC70 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018C660-0x0018C670 */ get; } // 0x001EECF8-0x001EED00 

		// Constructors
		[DebuggerHidden] // 0x0018C620-0x0018C630
		public <WaitFrame>d__2(int <>1__state); // 0x001EEB44-0x001EEB64

		// Methods
		[DebuggerHidden] // 0x0018C630-0x0018C640
		void IDisposable.Dispose(); // 0x001EEB6C-0x001EEB70
		private bool MoveNext(); // 0x001EEB70-0x001EEC68
		[DebuggerHidden] // 0x0018C650-0x0018C660
		void IEnumerator.Reset(); // 0x001EEC70-0x001EECF8
	}

	// Constructors
	public CFX_ShurikenThreadFix(); // 0x001EEB64-0x001EEB6C

	// Methods
	private void OnEnable(); // 0x001EE9C8-0x001EEAB8
	[IteratorStateMachine] // 0x0018C5A8-0x0018C620
	private IEnumerator WaitFrame(); // 0x001EEAB8-0x001EEB44
}

public class CFX_SpawnSystem : MonoBehaviour // TypeDefIndex: 3580
{
	// Fields
	private static CFX_SpawnSystem instance; // 0x00
	public GameObject[] objectsToPreload; // 0x0C
	public int[] objectsToPreloadTimes; // 0x10
	public bool hideObjectsInHierarchy; // 0x14
	private bool allObjectsLoaded; // 0x15
	private Dictionary<int, List<GameObject>> instantiatedObjects; // 0x18
	private Dictionary<int, int> poolCursors; // 0x1C

	// Properties
	public static bool AllObjectsLoaded { get; } // 0x001EFD8C-0x001EFE00 

	// Constructors
	public CFX_SpawnSystem(); // 0x001EFFC4-0x001F00BC

	// Methods
	public static GameObject GetNextObject(GameObject sourceObj, bool activateObject = true /* Metadata: 0x0021C890 */); // 0x001EED00-0x001EF378
	public static void PreloadObject(GameObject sourceObj, int poolSize = 1 /* Metadata: 0x0021C891 */); // 0x001EF378-0x001EF400
	public static void UnloadObjects(GameObject sourceObj); // 0x001EF7E4-0x001EF864
	private void addObjectToPool(GameObject sourceObject, int number); // 0x001EF400-0x001EF7E4
	private void removeObjectsFromPool(GameObject sourceObject); // 0x001EF864-0x001EFD8C
	private void Awake(); // 0x001EFE00-0x001EFF04
	private void Start(); // 0x001EFF04-0x001EFFC4
}

[RequireComponent] // 0x0018B6E8-0x0018B760
public class CFX3_AutoStopLoopedEffect : MonoBehaviour // TypeDefIndex: 3581
{
	// Fields
	public float effectDuration; // 0x0C
	private float d; // 0x10

	// Constructors
	public CFX3_AutoStopLoopedEffect(); // 0x001E974C-0x001E9760

	// Methods
	private void OnEnable(); // 0x001E95D8-0x001E95E4
	private void Update(); // 0x001E95E4-0x001E974C
}

public class CFX3_Demo : MonoBehaviour // TypeDefIndex: 3582
{
	// Fields
	public bool orderedSpawns; // 0x0C
	public float step; // 0x10
	public float range; // 0x14
	private float order; // 0x18
	public Renderer groundRenderer; // 0x1C
	public Collider groundCollider; // 0x20
	private GameObject[] ParticleExamples; // 0x24
	private int exampleIndex; // 0x28
	private string randomSpawnsDelay; // 0x2C
	private bool randomSpawns; // 0x30
	private bool slowMo; // 0x31
	private List<GameObject> onScreenParticles; // 0x34

	// Nested types
	[CompilerGenerated] // 0x0018B760-0x0018B770
	private sealed class <CheckForDeletedParticles>d__16 : IEnumerator<object> // TypeDefIndex: 3583
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public CFX3_Demo <>4__this; // 0x10

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018C780-0x0018C790 */ get; } // 0x001EAFC8-0x001EAFD0 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018C7A0-0x0018C7B0 */ get; } // 0x001EB058-0x001EB060 

		// Constructors
		[DebuggerHidden] // 0x0018C760-0x0018C770
		public <CheckForDeletedParticles>d__16(int <>1__state); // 0x001EAC7C-0x001EAC9C

		// Methods
		[DebuggerHidden] // 0x0018C770-0x0018C780
		void IDisposable.Dispose(); // 0x001EAE10-0x001EAE14
		private bool MoveNext(); // 0x001EAE14-0x001EAFC8
		[DebuggerHidden] // 0x0018C790-0x0018C7A0
		void IEnumerator.Reset(); // 0x001EAFD0-0x001EB058
	}

	[CompilerGenerated] // 0x0018B770-0x0018B780
	private sealed class <RandomSpawnsCoroutine>d__17 : IEnumerator<object> // TypeDefIndex: 3584
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public CFX3_Demo <>4__this; // 0x10

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018C7D0-0x0018C7E0 */ get; } // 0x001EB428-0x001EB430 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018C7F0-0x0018C800 */ get; } // 0x001EB4B8-0x001EB4C0 

		// Constructors
		[DebuggerHidden] // 0x0018C7B0-0x0018C7C0
		public <RandomSpawnsCoroutine>d__17(int <>1__state); // 0x001EAD28-0x001EAD48

		// Methods
		[DebuggerHidden] // 0x0018C7C0-0x0018C7D0
		void IDisposable.Dispose(); // 0x001EB060-0x001EB064
		private bool MoveNext(); // 0x001EB064-0x001EB428
		[DebuggerHidden] // 0x0018C7E0-0x0018C7F0
		void IEnumerator.Reset(); // 0x001EB430-0x001EB4B8
	}

	// Constructors
	public CFX3_Demo(); // 0x001EAD48-0x001EAE10

	// Methods
	private void Awake(); // 0x001E9760-0x001E98EC
	private void Update(); // 0x001E98EC-0x001E9BC8
	private void OnGUI(); // 0x001EA1D0-0x001EABF0
	private GameObject spawnParticle(); // 0x001E9E00-0x001EA1D0
	[IteratorStateMachine] // 0x0018C670-0x0018C6E8
	private IEnumerator CheckForDeletedParticles(); // 0x001EABF0-0x001EAC7C
	[IteratorStateMachine] // 0x0018C6E8-0x0018C760
	private IEnumerator RandomSpawnsCoroutine(); // 0x001EAC9C-0x001EAD28
	private void prevParticle(); // 0x001E9BC8-0x001E9C0C
	private void nextParticle(); // 0x001E9C0C-0x001E9C4C
	private void destroyParticles(); // 0x001E9C4C-0x001E9E00
}

public class CFX3_Demo_Translate : MonoBehaviour // TypeDefIndex: 3585
{
	// Fields
	public float speed; // 0x0C
	public Vector3 rotation; // 0x10
	public Vector3 axis; // 0x1C
	public bool gravity; // 0x28
	private Vector3 dir; // 0x2C

	// Constructors
	public CFX3_Demo_Translate(); // 0x001EB6C8-0x001EB794

	// Methods
	private void Start(); // 0x001EB4C0-0x001EB5B4
	private void Update(); // 0x001EB5B4-0x001EB6C8
}

[RequireComponent] // 0x0018B780-0x0018B7F8
public class FPSWalkerEnhanced : MonoBehaviour // TypeDefIndex: 3586
{
	// Fields
	public float walkSpeed; // 0x0C
	public float runSpeed; // 0x10
	public bool limitDiagonalSpeed; // 0x14
	public bool toggleRun; // 0x15
	public float jumpSpeed; // 0x18
	public float gravity; // 0x1C
	public float fallingDamageThreshold; // 0x20
	public bool slideWhenOverSlopeLimit; // 0x24
	public bool slideOnTaggedObjects; // 0x25
	public float slideSpeed; // 0x28
	public bool airControl; // 0x2C
	public float antiBumpFactor; // 0x30
	public int antiBunnyHopFactor; // 0x34
	private Vector3 moveDirection; // 0x38
	private bool grounded; // 0x44
	private CharacterController controller; // 0x48
	private Transform myTransform; // 0x4C
	private float speed; // 0x50
	private RaycastHit hit; // 0x54
	private float fallStartLevel; // 0x80
	private bool falling; // 0x84
	private float slideLimit; // 0x88
	private float rayDistance; // 0x8C
	private Vector3 contactPoint; // 0x90
	private bool playerControl; // 0x9C
	private int jumpTimer; // 0xA0

	// Constructors
	public FPSWalkerEnhanced(); // 0x001F6C68-0x001F6D64

	// Methods
	private void Start(); // 0x001F6234-0x001F6350
	private void FixedUpdate(); // 0x001F6350-0x001F6ADC
	private void Update(); // 0x001F6B88-0x001F6C20
	private void OnControllerColliderHit(ControllerColliderHit hit); // 0x001F6C20-0x001F6C68
	private void FallingDamageAlert(float fallDistance); // 0x001F6ADC-0x001F6B88
}

[AddComponentMenu] // 0x0018B7F8-0x0018B848
public class SmoothMouseLook : MonoBehaviour // TypeDefIndex: 3587
{
	// Fields
	public RotationAxes axes; // 0x0C
	public float sensitivityX; // 0x10
	public float sensitivityY; // 0x14
	public float minimumX; // 0x18
	public float maximumX; // 0x1C
	public float minimumY; // 0x20
	public float maximumY; // 0x24
	private float rotationX; // 0x28
	private float rotationY; // 0x2C
	private List<float> rotArrayX; // 0x30
	private float rotAverageX; // 0x34
	private List<float> rotArrayY; // 0x38
	private float rotAverageY; // 0x3C
	public float frameCounter; // 0x40
	private Quaternion originalRotation; // 0x44
	private Quaternion parentOriginalRotation; // 0x54

	// Nested types
	public enum RotationAxes // TypeDefIndex: 3588
	{
		MouseXAndY = 0,
		MouseX = 1,
		MouseY = 2
	}

	// Constructors
	public SmoothMouseLook(); // 0x00BCC068-0x00BCC154

	// Methods
	private void Update(); // 0x00BCB2E8-0x00BCBDF8
	private void Start(); // 0x00BCBEF0-0x00BCC068
	public static float ClampAngle(float angle, float min, float max); // 0x00BCBDF8-0x00BCBEF0
}

public class SkyboxChanger : MonoBehaviour // TypeDefIndex: 3589
{
	// Fields
	public Material[] Skyboxes; // 0x0C
	private Dropdown _dropdown; // 0x10

	// Constructors
	public SkyboxChanger(); // 0x00BCB208-0x00BCB210

	// Methods
	public void Awake(); // 0x00BCB0B4-0x00BCB11C
	public void ChangeSkybox(); // 0x00BCB11C-0x00BCB208
}

public class SkyboxRotator : MonoBehaviour // TypeDefIndex: 3590
{
	// Fields
	public float RotationPerSecond; // 0x0C
	private bool _rotate; // 0x10

	// Constructors
	public SkyboxRotator(); // 0x00BCB2D8-0x00BCB2E8

	// Methods
	protected void Update(); // 0x00BCB210-0x00BCB2C8
	public void ToggleSkyboxRotation(); // 0x00BCB2C8-0x00BCB2D8
}

[ExecuteInEditMode] // 0x0018B848-0x0018B858
public class Renamer : MonoBehaviour // TypeDefIndex: 3591
{
	// Constructors
	public Renamer(); // 0x00BB8530-0x00BB8538

	// Methods
	private void Start(); // 0x00BB80DC-0x00BB8100
	private void Renamer_Rec(Transform t); // 0x00BB8100-0x00BB8530
}

public class Goal : MonoBehaviour // TypeDefIndex: 3592
{
	// Fields
	public AudioManager audioManager; // 0x0C
	public UnityEngine.UI.Text text; // 0x10
	private float mTimeLimit; // 0x14
	private float mSmoothStep; // 0x18

	// Constructors
	public Goal(); // 0x00202750-0x00202758

	// Methods
	private void OnEnable(); // 0x00202024-0x00202118
	[DoNotRename] // 0x0018C800-0x0018C810
	public void SetMessgage(InGameNotification Msg); // 0x00202118-0x002024F0
	private void Update(); // 0x002024F0-0x00202750
}

public enum InGameNotification // TypeDefIndex: 3593
{
	GoalCompleted = 0,
	NoGifts = 1
}

public class LoadingAnimation : MonoBehaviour // TypeDefIndex: 3594
{
	// Fields
	public GameObject EventSystem; // 0x0C

	// Constructors
	public LoadingAnimation(); // 0x0063FF04-0x0063FF0C

	// Methods
	private void OnEnable(); // 0x0063FD10-0x0063FDC8
	private void OnDisable(); // 0x0063FDC8-0x0063FE80
	private void Update(); // 0x0063FE80-0x0063FF04
}

public class PreferencesManager : MonoBehaviour // TypeDefIndex: 3595
{
	// Fields
	private string score; // 0x0C
	private string coins; // 0x10

	// Constructors
	public PreferencesManager(); // 0x00BB7AF0-0x00BB7AF8
}

public class ReviveLBL : MonoBehaviour // TypeDefIndex: 3596
{
	// Fields
	public int RevVal; // 0x0C
	public UnityEngine.UI.Text text; // 0x10
	private float mTimeLimit; // 0x14
	private float mSmoothStep; // 0x18

	// Constructors
	public ReviveLBL(); // 0x00BB87CC-0x00BB87D4

	// Methods
	private void OnEnable(); // 0x00BB8538-0x00BB8624
	private void Update(); // 0x00BB8624-0x00BB87CC
}

public class ServicesManager : MonoBehaviour // TypeDefIndex: 3597
{
	// Fields
	public Button NxtDateBtn; // 0x0C
	public Button PrevDateBtn; // 0x10
	public Button NxtDataBtn; // 0x14
	public Button PrevDataBtn; // 0x18
	private int mDailyLBDate; // 0x1C
	private int mDailyLBPG; // 0x20
	public GameObject ProfileBtn; // 0x24
	public GameObject SettingsBtn; // 0x28
	public GameObject LeaderBoardBtn; // 0x2C
	public GameObject DailyLeaderBoardBtn; // 0x30
	public GameObject ProfilePanel; // 0x34
	public GameObject DailyChallengePanel; // 0x38
	public GameObject LoadingAnimation; // 0x3C
	public UnityEngine.UI.Text DailyChallengeTXT; // 0x40
	public UnityEngine.UI.Text DailyChallengeLBDate; // 0x44
	public UnityEngine.UI.Text DailyChallengeLB_Reward; // 0x48
	public UnityEngine.UI.Text CurrentUserName; // 0x4C
	public UnityEngine.UI.Text CurrentUserHighScore; // 0x50
	public Transform Panel; // 0x54
	public ScrollRect scrollRect; // 0x58
	public Transform DailyPanel; // 0x5C
	public ScrollRect DailyscrollRect; // 0x60
	public UnityEngine.UI.Text MegaPointsTXT; // 0x64
	public GameObject ServiceErrorDialog; // 0x68
	public GameObject PanelEnterPin; // 0x6C
	public GameObject PanelEnterName; // 0x70
	public GameObject PanelLanguage; // 0x74
	public UnityEngine.UI.Text ServiceErrorMsgTXT; // 0x78
	public string URL_TXT; // 0x7C
	public string URL_TXT_Debug; // 0x80
	public OTPManager oTPManager; // 0x84
	private static ServicesManager mInstance; // 0x00
	private string mNickName; // 0x88
	private string mMobileNumber; // 0x8C
	private string mToken; // 0x90
	private bool mTemBoolVal_0; // 0x94
	private ServiceNames mSerNm; // 0x98

	// Properties
	public static ServicesManager Instance { get; } // 0x00BBB094-0x00BBB0F8 

	// Nested types
	private enum ErrorCodes // TypeDefIndex: 3598
	{
		Network = 0,
		Worng = 1,
		WrongNumber = 2,
		UnacceptedName = 3,
		NameAlreadyTaken = 4,
		CopPack = 5,
		wrongCode = 6,
		UserBlocked = 7,
		RateLimit = 8,
		IncorrectPIN = 9,
		TEST = 10
	}

	private enum ServiceNames // TypeDefIndex: 3599
	{
		undefined = 0,
		versionChk = 1
	}

	[Serializable]
	private struct FromJsonOBLeaderBoard // TypeDefIndex: 3600
	{
		// Fields
		public LeaderBoardS[] leaderboard; // 0x00
		public int currentScore; // 0x04

		// Nested types
		[Serializable]
		public struct UserOB // TypeDefIndex: 3601
		{
			// Fields
			public string name; // 0x00
			public string location; // 0x04
		}

		[Serializable]
		public struct LeaderBoardS // TypeDefIndex: 3602
		{
			// Fields
			public UserOB user; // 0x00
			public int score; // 0x08
		}
	}

	[Serializable]
	private struct FromJsonOBHealth // TypeDefIndex: 3603
	{
		// Fields
		public string version; // 0x00
		public string newest_version; // 0x04
		public bool force_update; // 0x08
	}

	[Serializable]
	private struct FromJsonOBDaily // TypeDefIndex: 3604
	{
		// Fields
		public challengeS challenge; // 0x00
		public bool price; // 0x18

		// Nested types
		[Serializable]
		public struct challengeS // TypeDefIndex: 3605
		{
			// Fields
			public string _id; // 0x00
			public string type; // 0x04
			public int goal; // 0x08
			public int restrict; // 0x0C
			public int amount; // 0x10
			public string rewardType; // 0x14
		}
	}

	[Serializable]
	private struct FromJsonOBMobile // TypeDefIndex: 3606
	{
		// Fields
		public string mobile; // 0x00
		public bool isPrepaid; // 0x04
		public bool isPostpaid; // 0x05
	}

	[Serializable]
	private struct RateLimitCheck // TypeDefIndex: 3607
	{
		// Fields
		public int status; // 0x00
		public string message; // 0x04
	}

	[Serializable]
	private struct FromJsonOBtoken // TypeDefIndex: 3608
	{
		// Fields
		public string _id; // 0x00
		public string mobile; // 0x04
		public string name; // 0x08
		public string token; // 0x0C
	}

	[Serializable]
	private struct FromJsonOBMegaPoints // TypeDefIndex: 3609
	{
		// Fields
		public int drawpoints; // 0x00
	}

	[Serializable]
	private struct testJson // TypeDefIndex: 3610
	{
		// Fields
		public int userId; // 0x00
		public int id; // 0x04
		public string title; // 0x08
		public string body; // 0x0C
	}

	[Serializable]
	private struct FromJsonOBDailyLeaderBoard // TypeDefIndex: 3611
	{
		// Fields
		public LeaderBoardS[] dailyLeaderBoard; // 0x00
		public ChallengeS challenge; // 0x04
		public int count; // 0x14

		// Nested types
		[Serializable]
		public struct UserOB // TypeDefIndex: 3612
		{
			// Fields
			public string name; // 0x00
			public string location; // 0x04
		}

		[Serializable]
		public struct LeaderBoardS // TypeDefIndex: 3613
		{
			// Fields
			public UserOB user; // 0x00
			public string time; // 0x08
		}

		[Serializable]
		public struct ChallengeS // TypeDefIndex: 3614
		{
			// Fields
			public string type; // 0x00
			public string rewardType; // 0x04
			public int amount; // 0x08
			public string date; // 0x0C
		}
	}

	[CompilerGenerated] // 0x0018B858-0x0018B868
	private sealed class <LeaderBoardServiceCall>d__51 : IEnumerator<object> // TypeDefIndex: 3615
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public ServicesManager <>4__this; // 0x10
		private UnityWebRequest <w>5__2; // 0x14

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018CD60-0x0018CD70 */ get; } // 0x00BC11AC-0x00BC11B4 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018CD80-0x0018CD90 */ get; } // 0x00BC123C-0x00BC1244 

		// Constructors
		[DebuggerHidden] // 0x0018CD40-0x0018CD50
		public <LeaderBoardServiceCall>d__51(int <>1__state); // 0x00BBB908-0x00BBB928

		// Methods
		[DebuggerHidden] // 0x0018CD50-0x0018CD60
		void IDisposable.Dispose(); // 0x00BC03E0-0x00BC03E4
		private bool MoveNext(); // 0x00BC03E4-0x00BC11AC
		[DebuggerHidden] // 0x0018CD70-0x0018CD80
		void IEnumerator.Reset(); // 0x00BC11B4-0x00BC123C
	}

	[CompilerGenerated] // 0x0018B868-0x0018B878
	private sealed class <UserHealthServiceCall>d__53 : IEnumerator<object> // TypeDefIndex: 3616
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public ServicesManager <>4__this; // 0x10
		public bool st; // 0x14
		private UnityWebRequest <w>5__2; // 0x18

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018CDB0-0x0018CDC0 */ get; } // 0x00BC19D4-0x00BC19DC 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018CDD0-0x0018CDE0 */ get; } // 0x00BC1A64-0x00BC1A6C 

		// Constructors
		[DebuggerHidden] // 0x0018CD90-0x0018CDA0
		public <UserHealthServiceCall>d__53(int <>1__state); // 0x00BBB928-0x00BBB948

		// Methods
		[DebuggerHidden] // 0x0018CDA0-0x0018CDB0
		void IDisposable.Dispose(); // 0x00BC153C-0x00BC1540
		private bool MoveNext(); // 0x00BC1540-0x00BC19D4
		[DebuggerHidden] // 0x0018CDC0-0x0018CDD0
		void IEnumerator.Reset(); // 0x00BC19DC-0x00BC1A64
	}

	[CompilerGenerated] // 0x0018B878-0x0018B888
	private sealed class <DailyChallengeServiceCall>d__55 : IEnumerator<object> // TypeDefIndex: 3617
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public ServicesManager <>4__this; // 0x10
		private UnityWebRequest <w>5__2; // 0x14

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018CE00-0x0018CE10 */ get; } // 0x00BBD544-0x00BBD54C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018CE20-0x0018CE30 */ get; } // 0x00BBD5D4-0x00BBD5DC 

		// Constructors
		[DebuggerHidden] // 0x0018CDE0-0x0018CDF0
		public <DailyChallengeServiceCall>d__55(int <>1__state); // 0x00BBB9D4-0x00BBB9F4

		// Methods
		[DebuggerHidden] // 0x0018CDF0-0x0018CE00
		void IDisposable.Dispose(); // 0x00BBCC9C-0x00BBCCA0
		private bool MoveNext(); // 0x00BBCCA0-0x00BBD544
		[DebuggerHidden] // 0x0018CE10-0x0018CE20
		void IEnumerator.Reset(); // 0x00BBD54C-0x00BBD5D4
	}

	[CompilerGenerated] // 0x0018B888-0x0018B898
	private sealed class <UserLoginServiceCall>d__58 : IEnumerator<object> // TypeDefIndex: 3618
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public ServicesManager <>4__this; // 0x10
		public string mobile; // 0x14
		private UnityWebRequest <w>5__2; // 0x18

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018CE50-0x0018CE60 */ get; } // 0x00BC2260-0x00BC2268 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018CE70-0x0018CE80 */ get; } // 0x00BC22F0-0x00BC22F8 

		// Constructors
		[DebuggerHidden] // 0x0018CE30-0x0018CE40
		public <UserLoginServiceCall>d__58(int <>1__state); // 0x00BBB9F4-0x00BBBA14

		// Methods
		[DebuggerHidden] // 0x0018CE40-0x0018CE50
		void IDisposable.Dispose(); // 0x00BC1A6C-0x00BC1A70
		private bool MoveNext(); // 0x00BC1A70-0x00BC2260
		[DebuggerHidden] // 0x0018CE60-0x0018CE70
		void IEnumerator.Reset(); // 0x00BC2268-0x00BC22F0
	}

	[CompilerGenerated] // 0x0018B898-0x0018B8A8
	private sealed class <UserNameServiceCall>d__59 : IEnumerator<object> // TypeDefIndex: 3619
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public ServicesManager <>4__this; // 0x10
		public string name; // 0x14
		private UnityWebRequest <w>5__2; // 0x18

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018CEA0-0x0018CEB0 */ get; } // 0x00BC2938-0x00BC2940 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018CEC0-0x0018CED0 */ get; } // 0x00BC29C8-0x00BC29D0 

		// Constructors
		[DebuggerHidden] // 0x0018CE80-0x0018CE90
		public <UserNameServiceCall>d__59(int <>1__state); // 0x00BBBA14-0x00BBBA34

		// Methods
		[DebuggerHidden] // 0x0018CE90-0x0018CEA0
		void IDisposable.Dispose(); // 0x00BC22F8-0x00BC22FC
		private bool MoveNext(); // 0x00BC22FC-0x00BC2938
		[DebuggerHidden] // 0x0018CEB0-0x0018CEC0
		void IEnumerator.Reset(); // 0x00BC2940-0x00BC29C8
	}

	[CompilerGenerated] // 0x0018B8A8-0x0018B8B8
	private sealed class <UserReNameServiceCall>d__60 : IEnumerator<object> // TypeDefIndex: 3620
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public ServicesManager <>4__this; // 0x10
		public string name; // 0x14
		private UnityWebRequest <w>5__2; // 0x18

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018CEF0-0x0018CF00 */ get; } // 0x00BC2E84-0x00BC2E8C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018CF10-0x0018CF20 */ get; } // 0x00BC2F14-0x00BC376C 

		// Constructors
		[DebuggerHidden] // 0x0018CED0-0x0018CEE0
		public <UserReNameServiceCall>d__60(int <>1__state); // 0x00BBBA34-0x00BBBA54

		// Methods
		[DebuggerHidden] // 0x0018CEE0-0x0018CEF0
		void IDisposable.Dispose(); // 0x00BC29D0-0x00BC29D4
		private bool MoveNext(); // 0x00BC29D4-0x00BC2E84
		[DebuggerHidden] // 0x0018CF00-0x0018CF10
		void IEnumerator.Reset(); // 0x00BC2E8C-0x00BC2F14
	}

	[CompilerGenerated] // 0x0018B8B8-0x0018B8C8
	private sealed class <EnterPinServiceCall>d__62 : IEnumerator<object> // TypeDefIndex: 3621
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public ServicesManager <>4__this; // 0x10
		public string code; // 0x14
		private UnityWebRequest <w>5__2; // 0x18

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018CF40-0x0018CF50 */ get; } // 0x00BBFCA8-0x00BBFCB0 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018CF60-0x0018CF70 */ get; } // 0x00BBFD38-0x00BBFD40 

		// Constructors
		[DebuggerHidden] // 0x0018CF20-0x0018CF30
		public <EnterPinServiceCall>d__62(int <>1__state); // 0x00BBBA54-0x00BBBA74

		// Methods
		[DebuggerHidden] // 0x0018CF30-0x0018CF40
		void IDisposable.Dispose(); // 0x00BBF344-0x00BBF348
		private bool MoveNext(); // 0x00BBF348-0x00BBFCA8
		[DebuggerHidden] // 0x0018CF50-0x0018CF60
		void IEnumerator.Reset(); // 0x00BBFCB0-0x00BBFD38
	}

	[CompilerGenerated] // 0x0018B8C8-0x0018B8D8
	private sealed class <GetDrawMegaPointsServiceCall>d__64 : IEnumerator<object> // TypeDefIndex: 3622
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public ServicesManager <>4__this; // 0x10
		private UnityWebRequest <w>5__2; // 0x14

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018CF90-0x0018CFA0 */ get; } // 0x00BC0348-0x00BC0350 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018CFB0-0x0018CFC0 */ get; } // 0x00BC03D8-0x00BC03E0 

		// Constructors
		[DebuggerHidden] // 0x0018CF70-0x0018CF80
		public <GetDrawMegaPointsServiceCall>d__64(int <>1__state); // 0x00BBBB00-0x00BBBB20

		// Methods
		[DebuggerHidden] // 0x0018CF80-0x0018CF90
		void IDisposable.Dispose(); // 0x00BBFD40-0x00BBFD44
		private bool MoveNext(); // 0x00BBFD44-0x00BC0348
		[DebuggerHidden] // 0x0018CFA0-0x0018CFB0
		void IEnumerator.Reset(); // 0x00BC0350-0x00BC03D8
	}

	[CompilerGenerated] // 0x0018B8D8-0x0018B8E8
	private sealed class <TestJason>d__66 : IEnumerator<object> // TypeDefIndex: 3623
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public ServicesManager <>4__this; // 0x10
		private UnityWebRequest <w>5__2; // 0x14

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018CFE0-0x0018CFF0 */ get; } // 0x00BC14A4-0x00BC14AC 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018D000-0x0018D010 */ get; } // 0x00BC1534-0x00BC153C 

		// Constructors
		[DebuggerHidden] // 0x0018CFC0-0x0018CFD0
		public <TestJason>d__66(int <>1__state); // 0x00BBBBAC-0x00BBBBCC

		// Methods
		[DebuggerHidden] // 0x0018CFD0-0x0018CFE0
		void IDisposable.Dispose(); // 0x00BC1244-0x00BC1248
		private bool MoveNext(); // 0x00BC1248-0x00BC14A4
		[DebuggerHidden] // 0x0018CFF0-0x0018D000
		void IEnumerator.Reset(); // 0x00BC14AC-0x00BC1534
	}

	[CompilerGenerated] // 0x0018B8E8-0x0018B8F8
	private sealed class <DailyLeaderBoardServiceCall>d__69 : IEnumerator<object> // TypeDefIndex: 3624
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public int date; // 0x10
		public ServicesManager <>4__this; // 0x14
		public int pg; // 0x18
		private int <currentOffset>5__2; // 0x1C
		private UnityWebRequest <w>5__3; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018D030-0x0018D040 */ get; } // 0x00BBF2AC-0x00BBF2B4 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018D050-0x0018D060 */ get; } // 0x00BBF33C-0x00BBF344 

		// Constructors
		[DebuggerHidden] // 0x0018D010-0x0018D020
		public <DailyLeaderBoardServiceCall>d__69(int <>1__state); // 0x00BBCC74-0x00BBCC94

		// Methods
		[DebuggerHidden] // 0x0018D020-0x0018D030
		void IDisposable.Dispose(); // 0x00BBD5DC-0x00BBD5E0
		private bool MoveNext(); // 0x00BBD5E0-0x00BBF2AC
		[DebuggerHidden] // 0x0018D040-0x0018D050
		void IEnumerator.Reset(); // 0x00BBF2B4-0x00BBF33C
	}

	// Constructors
	public ServicesManager(); // 0x00BBCC94-0x00BBCC9C

	// Methods
	private void Awake(); // 0x00BBB0F8-0x00BBB28C
	[DoNotRename] // 0x0018C810-0x0018C820
	public void UserLogin(string mobile); // 0x00BBB28C-0x00BBB364
	[DoNotRename] // 0x0018C820-0x0018C830
	public void UserName(string name); // 0x00BBB40C-0x00BBB430
	[DoNotRename] // 0x0018C830-0x0018C840
	public void UserReName(string name); // 0x00BBB4D8-0x00BBB4FC
	[DoNotRename] // 0x0018C840-0x0018C850
	public void EnterPin(string pin); // 0x00BBB5A4-0x00BBB5C8
	[DoNotRename] // 0x0018C850-0x0018C860
	public void CheckVersion(bool st); // 0x00BBB670-0x00BBB694
	[DoNotRename] // 0x0018C860-0x0018C870
	public void GetLeaderBoard(); // 0x00BBB73C-0x00BBB760
	[DoNotRename] // 0x0018C870-0x0018C880
	public void GetDailyLeaderBoard(int date = 0 /* Metadata: 0x0021C8A9 */, int pg = 0 /* Metadata: 0x0021C8AD */); // 0x00BBB7EC-0x00BBB810
	[DoNotRename] // 0x0018C880-0x0018C890
	public void RefreshService(); // 0x00BBB8D0-0x00BBB908
	[IteratorStateMachine] // 0x0018C890-0x0018C908
	private IEnumerator LeaderBoardServiceCall(); // 0x00BBB760-0x00BBB7EC
	[IteratorStateMachine] // 0x0018C908-0x0018C980
	private IEnumerator UserHealthServiceCall(bool st); // 0x00BBB694-0x00BBB73C
	[IteratorStateMachine] // 0x0018C980-0x0018C9F8
	private IEnumerator DailyChallengeServiceCall(); // 0x00BBB948-0x00BBB9D4
	[IteratorStateMachine] // 0x0018C9F8-0x0018CA70
	private IEnumerator UserLoginServiceCall(string mobile); // 0x00BBB364-0x00BBB40C
	[IteratorStateMachine] // 0x0018CA70-0x0018CAE8
	private IEnumerator UserNameServiceCall(string name); // 0x00BBB430-0x00BBB4D8
	[IteratorStateMachine] // 0x0018CAE8-0x0018CB60
	private IEnumerator UserReNameServiceCall(string name); // 0x00BBB4FC-0x00BBB5A4
	[IteratorStateMachine] // 0x0018CB60-0x0018CBD8
	private IEnumerator EnterPinServiceCall(string code); // 0x00BBB5C8-0x00BBB670
	[IteratorStateMachine] // 0x0018CBD8-0x0018CC50
	private IEnumerator GetDrawMegaPointsServiceCall(); // 0x00BBBA74-0x00BBBB00
	[IteratorStateMachine] // 0x0018CC50-0x0018CCC8
	private IEnumerator TestJason(); // 0x00BBBB20-0x00BBBBAC
	private void CallServiceErrorDialog(ErrorCodes er, ServiceNames sn = ServiceNames.undefined /* Metadata: 0x0021C8B1 */); // 0x00BBBBCC-0x00BBCC74
	[IteratorStateMachine] // 0x0018CCC8-0x0018CD40
	private IEnumerator DailyLeaderBoardServiceCall(int date, int pg); // 0x00BBB810-0x00BBB8D0
}

public class TestVal : MonoBehaviour // TypeDefIndex: 3625
{
	// Fields
	public UnityEngine.UI.Text LBL_0; // 0x0C
	public UnityEngine.UI.Text LBL_1; // 0x10
	private int mShiftVal; // 0x14
	private int mRealVal; // 0x18

	// Properties
	public int ShiftVal { get; set; } // 0x00BCC204-0x00BCC20C 0x00BCC274-0x00BCC28C
	public int RealVal { get; set; } // 0x00BCC2F4-0x00BCC2FC 0x00BCC2FC-0x00BCC304

	// Constructors
	public TestVal(); // 0x00BCC548-0x00BCC550

	// Methods
	private int Shuffle(int x); // 0x00BCC28C-0x00BCC2F4
	private int Unshuffle(int x); // 0x00BCC20C-0x00BCC274
	private void Start(); // 0x00BCC304-0x00BCC31C
	private void Update(); // 0x00BCC31C-0x00BCC41C
	public void IncVal(); // 0x00BCC41C-0x00BCC548
}

public class TuteManager : MonoBehaviour // TypeDefIndex: 3626
{
	// Fields
	public LerpMover lerp; // 0x0C
	public UnityEngine.UI.Text Tute_TXT; // 0x10
	private int InstructionState; // 0x14
	private int I; // 0x18
	private int C_t; // 0x1C
	private float mSmoothStep; // 0x20

	// Constructors
	public TuteManager(); // 0x00A946A8-0x00A946B8

	// Methods
	private void OnEnable(); // 0x00A9435C-0x00A943AC
	private void FixedUpdate(); // 0x00A943AC-0x00A946A8
}

public class UIManager : MonoBehaviour // TypeDefIndex: 3627
{
	// Fields
	public Toggle tuteAR; // 0x0C
	public UnityEngine.UI.Text LivesTxt; // 0x10
	private string m_Pin; // 0x14
	public GameObject PanelFin; // 0x18
	public GameObject ShareCharacterDialog; // 0x1C
	public GameObject PanelLoading; // 0x20
	public GameObject MsgChaDialog; // 0x24
	public UnityEngine.UI.Text MsgChaTXT; // 0x28
	public GameObject BlackPanel; // 0x2C
	public BuyCharacterEnable BuyingDialog; // 0x30
	public GameObject CloseButton; // 0x34
	public GameObject SettingsBtn; // 0x38
	public GameObject LeaderboardBtn; // 0x3C
	public GameObject DailyLeaderboardBtn; // 0x40
	public GameObject ARGameButton; // 0x44
	public GameObject MegawasanaButton; // 0x48
	public GameObject ProfileBtn; // 0x4C
	public GameObject BlockkerDialog; // 0x50
	public UnityEngine.UI.Text BlockkerTXT; // 0x54
	public GameObject EventSystemOB; // 0x58
	private GameObject mCurrentDialog; // 0x5C
	private GameObject mCurrentPanel; // 0x60
	public GameObject Panelpaly; // 0x64
	public UnityEngine.UI.Text CoinCountLBL; // 0x68
	public UnityEngine.UI.Text DiamondCountLBL; // 0x6C
	public string[] MsgList; // 0x70
	private static UIManager mInstance; // 0x00
	public Font SinhalaFont; // 0x74
	public Font EnglishFont; // 0x78
	public Font TamilFont; // 0x7C
	public UnityEngine.UI.Text invaliedMobile; // 0x80
	public UnityEngine.UI.Text enterNickName; // 0x84
	public UnityEngine.UI.Text enterReNickName; // 0x88
	public Transform ob; // 0x8C
	public Transform[] obAry; // 0x90
	private bool mIsMobileValied; // 0x94
	private bool mIsNameFilled; // 0x95
	private bool mIsReNameFilled; // 0x96
	private string mMobileNumber; // 0x98
	private string mNickName; // 0x9C
	private string mPinNumber; // 0xA0
	private string mTempNickName; // 0xA4
	public GameObject PanelEnterPin; // 0xA8
	public UnityEngine.UI.Text PinText; // 0xAC
	public GameObject PanelInit; // 0xB0
	public GameObject PanelLanguage; // 0xB4
	public GameObject PanelCharacterSelect; // 0xB8
	public GameObject MsgDialog; // 0xBC
	public UnityEngine.UI.Text MsgTXT; // 0xC0
	public UnityEngine.UI.Image MultiplyBar; // 0xC4
	public UnityEngine.UI.Image ShieldBar; // 0xC8
	public UnityEngine.UI.Image MagnetBar; // 0xCC
	public UnityEngine.UI.Image BoostBar; // 0xD0
	private int mPanel_ID; // 0xD4
	private ServicesManager mServicesmanager; // 0xD8
	public static string GameMode; // 0x04
	private bool AR_Selected; // 0xDC
	public GameObject ImageScreen; // 0xE0
	public UnityEngine.UI.Image ImageScreenIm; // 0xE4
	public Sprite ChandiS; // 0xE8
	public Sprite DinS; // 0xEC
	private bool mCharacter; // 0xF0
	public GameObject LBImageScreen; // 0xF4
	public UnityEngine.UI.Image CloseBtnImg; // 0xF8
	public GameObject LBShareBtn; // 0xFC
	private NativeShare nativeshare; // 0x100

	// Properties
	public static UIManager Instance { get; } // 0x00A946B8-0x00A94744 

	// Nested types
	private enum Ch_ID // TypeDefIndex: 3628
	{
		CHA = 0,
		DIN = 1,
		ROB = 2,
		SWG = 3
	}

	[CompilerGenerated] // 0x0018B8F8-0x0018B908
	private sealed class <SaveAndShare>d__122 : IEnumerator<object> // TypeDefIndex: 3629
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public UIManager <>4__this; // 0x10
		private string <screenShotPath>5__2; // 0x14

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018D398-0x0018D3A8 */ get; } // 0x00A9AD9C-0x00A9ADA4 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018D3B8-0x0018D3C8 */ get; } // 0x00A9AE2C-0x00A9AE34 

		// Constructors
		[DebuggerHidden] // 0x0018D378-0x0018D388
		public <SaveAndShare>d__122(int <>1__state); // 0x00A9A0FC-0x00A9A11C

		// Methods
		[DebuggerHidden] // 0x0018D388-0x0018D398
		void IDisposable.Dispose(); // 0x00A9AB34-0x00A9AB38
		private bool MoveNext(); // 0x00A9AB38-0x00A9AD9C
		[DebuggerHidden] // 0x0018D3A8-0x0018D3B8
		void IEnumerator.Reset(); // 0x00A9ADA4-0x00A9AE2C
	}

	// Constructors
	public UIManager(); // 0x00A9AA44-0x00A9AAC0
	static UIManager(); // 0x00A9AAC0-0x00A9AB34

	// Methods
	private void Awake(); // 0x00A94744-0x00A94D70
	private void Start(); // 0x00A95544-0x00A9567C
	private void FillScoreMangerData(); // 0x00A94D70-0x00A95544
	public void switchARTute(); // 0x00A9567C-0x00A95780
	[DoNotRename] // 0x0018D060-0x0018D070
	public void SelectCharacter(int i); // 0x00A95780-0x00A9591C
	[DoNotRename] // 0x0018D070-0x0018D080
	public void InitialOpenOK(); // 0x00A9591C-0x00A95C38
	[DoNotRename] // 0x0018D080-0x0018D090
	public void EnterNameOK(); // 0x00A95C38-0x00A95E78
	[DoNotRename] // 0x0018D090-0x0018D0A0
	public void ValidateMobileNumber(string input); // 0x00A95E78-0x00A95F80
	[DoNotRename] // 0x0018D0A0-0x0018D0B0
	public void ValidateNickName(string input); // 0x00A95F80-0x00A96298
	[DoNotRename] // 0x0018D0B0-0x0018D0C0
	public void OkButtonPin(); // 0x00A96298-0x00A96350
	[DoNotRename] // 0x0018D0C0-0x0018D0D0
	public void ValidatePin(string input); // 0x00A96350-0x00A963E8
	[DoNotRename] // 0x0018D0D0-0x0018D0E0
	public void SelectCharacterPanelButton(bool AR); // 0x00A963E8-0x00A96628
	[DoNotRename] // 0x0018D0E0-0x0018D0F0
	public void SelectCharacterPanelButtonAR(); // 0x00A96628-0x00A967A0
	[DoNotRename] // 0x0018D0F0-0x0018D100
	public void CharacterPanelBack(); // 0x00A967A0-0x00A96894
	[DoNotRename] // 0x0018D100-0x0018D110
	public void CharacterPanelRest(); // 0x00A96894-0x00A9698C
	[DoNotRename] // 0x0018D110-0x0018D120
	public void MultiplyBtn(); // 0x00A9698C-0x00A96DB4
	public void ConvertDiamonds(); // 0x00A96DB4-0x00A96F58
	[DoNotRename] // 0x0018D120-0x0018D130
	public void ShieldBtn(); // 0x00A96F58-0x00A97380
	[DoNotRename] // 0x0018D130-0x0018D140
	public void MagnetBtn(); // 0x00A97380-0x00A977A8
	[DoNotRename] // 0x0018D140-0x0018D150
	public void BoostBtn(); // 0x00A977A8-0x00A97BD0
	[DoNotRename] // 0x0018D150-0x0018D160
	public void SelectSinhala(bool select); // 0x00A97BD0-0x00A97D68
	[DoNotRename] // 0x0018D160-0x0018D170
	public void SelectEnglish(bool select); // 0x00A97D68-0x00A97F00
	[DoNotRename] // 0x0018D170-0x0018D180
	public void SelectTamil(bool select); // 0x00A97F00-0x00A98098
	[DoNotRename] // 0x0018D180-0x0018D190
	public void PlayGame(); // 0x00A98098-0x00A98374
	private void LastPanel(); // 0x00A98374-0x00A9849C
	[DoNotRename] // 0x0018D190-0x0018D1A0
	public void PlayMain(); // 0x00A9849C-0x00A984D8
	[DoNotRename] // 0x0018D1A0-0x0018D1B0
	public void PlayAR_0(); // 0x00A984D8-0x00A98514
	[DoNotRename] // 0x0018D1B0-0x0018D1C0
	public void PlayAR_1(); // 0x00A98514-0x00A98550
	[DoNotRename] // 0x0018D1C0-0x0018D1D0
	public void EnablePanel(int i); // 0x00A98550-0x00A98558
	public void SaveValuesSettings(); // 0x00A98558-0x00A98808
	[DoNotRename] // 0x0018D1D0-0x0018D1E0
	public void CallDialog(GameObject ob); // 0x00A98A2C-0x00A98B58
	[DoNotRename] // 0x0018D1E0-0x0018D1F0
	public void CallBlock(); // 0x00A98B58-0x00A98B88
	[DoNotRename] // 0x0018D1F0-0x0018D200
	public void CallPanel(GameObject ob); // 0x00A98B88-0x00A98B90
	private string Md5Sum(int val); // 0x00A98808-0x00A98A2C
	[DoNotRename] // 0x0018D200-0x0018D210
	public void CallBlockker(string Msg); // 0x00A98B90-0x00A98C18
	[DoNotRename] // 0x0018D210-0x0018D220
	public void SpendCoinsForCharacters_Click(int id, int coinCount = 10000 /* Metadata: 0x0021C8E9 */); // 0x00A98C18-0x00A9923C
	[DoNotRename] // 0x0018D220-0x0018D230
	public void ShareAndPlay(); // 0x00A9923C-0x00A992D8
	[DoNotRename] // 0x0018D230-0x0018D240
	public void BurnMegaPointsForCharacters_Click(int id); // 0x00A992D8-0x00A992DC
	[DoNotRename] // 0x0018D240-0x0018D250
	public void SpendCoinsForAbilities_Click(int id); // 0x00A992DC-0x00A99314
	[DoNotRename] // 0x0018D250-0x0018D260
	public void BurnMegaPointsForAbilities_Click(int id); // 0x00A99314-0x00A99318
	[DoNotRename] // 0x0018D260-0x0018D270
	public void GetScratchPin(string pin); // 0x00A99318-0x00A99320
	[DoNotRename] // 0x0018D270-0x0018D280
	public void PayCharacterFormScratchCard(); // 0x00A99320-0x00A99398
	[DoNotRename] // 0x0018D280-0x0018D290
	public void PayAbilitiesFormScratchCard(); // 0x00A99398-0x00A99410
	private void OnApplicationPause(bool pauseStatus); // 0x00A99410-0x00A99484
	private void ScheduleNotification(); // 0x00A998A0-0x00A9994C
	private void Update(); // 0x00A9994C-0x00A99974
	[DoNotRename] // 0x0018D290-0x0018D2A0
	public void AppClose(); // 0x00A99974-0x00A9997C
	[DoNotRename] // 0x0018D2A0-0x0018D2B0
	public void ClearData(); // 0x00A9997C-0x00A9999C
	[DoNotRename] // 0x0018D2B0-0x0018D2C0
	public void Rename_Click(); // 0x00A9999C-0x00A99BAC
	[DoNotRename] // 0x0018D2C0-0x0018D2D0
	public void ValidateReNickName(string input); // 0x00A99BAC-0x00A99EC4
	private string Md5Sum(); // 0x00A99484-0x00A998A0
	[DoNotRename] // 0x0018D2D0-0x0018D2E0
	public void CallNativeShare(); // 0x00A99EC4-0x00A99FD4
	[DoNotRename] // 0x0018D2E0-0x0018D2F0
	public void CallLB_NativeShare(); // 0x00A9A060-0x00A9A0FC
	[IteratorStateMachine] // 0x0018D2F0-0x0018D368
	private IEnumerator SaveAndShare(); // 0x00A99FD4-0x00A9A060
	private void InitFB(); // 0x00A9A11C-0x00A9A120
	private void OnInitComplete(); // 0x00A9A120-0x00A9A124
	private void OnHideUnity(bool isGameShown); // 0x00A9A124-0x00A9A128
	[DoNotRename] // 0x0018D368-0x0018D378
	public void Share(int characterID, string url = "" /* Metadata: 0x0021C8ED */); // 0x00A9A128-0x00A9AA44
}

public class HiScore : MonoBehaviour // TypeDefIndex: 3630
{
	// Fields
	public GameObject PanelLoading; // 0x0C
	private static HiScore mInstance; // 0x00
	public Button SkipRewardAnimation; // 0x10
	public Font SinhalaFont; // 0x14
	public Font EnglishFont; // 0x18
	public Font TamilFont; // 0x1C
	public GameObject PanelReward; // 0x20
	public GameObject PanelScore; // 0x24
	public UnityEngine.UI.Text RewardTXT; // 0x28
	public GameObject ShareButtonOB; // 0x2C
	public GameObject PlayButtonOB; // 0x30
	public GameObject MenuButtonOB; // 0x34
	private NativeShare nativeshare; // 0x38

	// Properties
	public static HiScore Instance { get; } // 0x00202A88-0x00202AEC 

	// Nested types
	[CompilerGenerated] // 0x0018B908-0x0018B918
	private sealed class <SaveAndShare>d__23 : IEnumerator<object> // TypeDefIndex: 3631
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public HiScore <>4__this; // 0x10
		private string <screenShotPath>5__2; // 0x14

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018D4E0-0x0018D4F0 */ get; } // 0x0061F140-0x0061F148 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018D500-0x0018D510 */ get; } // 0x0061F1D0-0x0061F1D8 

		// Constructors
		[DebuggerHidden] // 0x0018D4C0-0x0018D4D0
		public <SaveAndShare>d__23(int <>1__state); // 0x0061EE74-0x0061EE94

		// Methods
		[DebuggerHidden] // 0x0018D4D0-0x0018D4E0
		void IDisposable.Dispose(); // 0x0061EE94-0x0061EE98
		private bool MoveNext(); // 0x0061EE98-0x0061F140
		[DebuggerHidden] // 0x0018D4F0-0x0018D500
		void IEnumerator.Reset(); // 0x0061F148-0x0061F1D0
	}

	// Constructors
	public HiScore(); // 0x002044AC-0x00204528

	// Methods
	private void Awake(); // 0x00202AEC-0x00202B74
	[DoNotRename] // 0x0018D3C8-0x0018D3D8
	public void Click_ShowScore(); // 0x00202B74-0x00202C58
	[DoNotRename] // 0x0018D3D8-0x0018D3E8
	public void Click_Skip(); // 0x00202C58-0x00202C64
	[DoNotRename] // 0x0018D3E8-0x0018D3F8
	public void Click_MainMenu(); // 0x00202C64-0x00202CA0
	[DoNotRename] // 0x0018D3F8-0x0018D408
	public void ReplayGame(); // 0x00202CA0-0x00202D6C
	private void OnApplicationPause(bool pauseStatus); // 0x00202D6C-0x00202D70
	private void ScheduleNotification(); // 0x00202D70-0x00202E1C
	[DoNotRename] // 0x0018D408-0x0018D418
	public void CallNativeShare(); // 0x00202E1C-0x00202E40
	[IteratorStateMachine] // 0x0018D418-0x0018D490
	private IEnumerator SaveAndShare(); // 0x00202E40-0x00202EC8
	private void InitFB(); // 0x00202EC8-0x00202ECC
	private void OnInitComplete(); // 0x00202ECC-0x00202ED0
	private void OnHideUnity(bool isGameShown); // 0x00202ED4-0x00202ED8
	[DoNotRename] // 0x0018D490-0x0018D4A0
	public void ShareDialog(); // 0x00202ED0-0x00202ED4
	private string Md5Sum(); // 0x00202ED8-0x002032F4
	[DoNotRename] // 0x0018D4A0-0x0018D4B0
	public void ShareTest(); // 0x002032F4-0x00203BD0
	[DoNotRename] // 0x0018D4B0-0x0018D4C0
	public void ShareNative(); // 0x00203BD0-0x002044AC
}

public class ScoreAnimator : MonoBehaviour // TypeDefIndex: 3632
{
	// Fields
	public UnityEngine.UI.Text[] LblAry; // 0x0C
	public Animator p; // 0x10
	public int m_i; // 0x14
	private int m_index; // 0x18
	private int m_AddVAl; // 0x1C
	private int m_TotalVAL; // 0x20
	private int m_CurrentVAl; // 0x24
	public int HighS; // 0x28

	// Constructors
	public ScoreAnimator(); // 0x00BBA0F4-0x00BBA0FC

	// Methods
	private void Awake(); // 0x00BB97B4-0x00BB99B4
	private void Start(); // 0x00BB9B70-0x00BB9C48
	private void FixedUpdate(); // 0x00BB9C48-0x00BB9E04
	private void UpdateVals(); // 0x00BB9E04-0x00BBA04C
	[DoNotRename] // 0x0018D510-0x0018D520
	public void StartAnimation(); // 0x00BBA0E8-0x00BBA0F4
}

public class StartRot : MonoBehaviour // TypeDefIndex: 3633
{
	// Constructors
	public StartRot(); // 0x00BCC1C4-0x00BCC1CC

	// Methods
	private void FixedUpdate(); // 0x00BCC154-0x00BCC1C4
}

public class AnalyticsTool : MonoBehaviour // TypeDefIndex: 3634
{
	// Nested types
	[Serializable]
	[CompilerGenerated] // 0x0018B918-0x0018B928
	private sealed class <>c // TypeDefIndex: 3635
	{
		// Fields
		public static readonly <>c <>9; // 0x00
		public static InitDelegate <>9__0_0; // 0x04

		// Constructors
		static <>c(); // 0x001E6D18-0x001E6D8C
		public <>c(); // 0x001E6D8C-0x001E6D94

		// Methods
		internal void <Start>b__0_0(); // 0x001E6D94-0x001E6E10
	}

	// Constructors
	public AnalyticsTool(); // 0x001E6D10-0x001E6D18

	// Methods
	private void Start(); // 0x001E67B4-0x001E6ACC
	public static void CallAnalyticsEvent(string category, string eventname); // 0x001E6ACC-0x001E6D10
}

public class AnimAct : MonoBehaviour // TypeDefIndex: 3636
{
	// Fields
	public int Gap; // 0x0C
	private int speed; // 0x10

	// Constructors
	public AnimAct(); // 0x001E712C-0x001E7138

	// Methods
	public int configureAni(int id); // 0x001E6E10-0x001E6EDC
	private void OnEnable(); // 0x001E6EDC-0x001E7014
	private void OnDisable(); // 0x001E7014-0x001E712C
}

public class AudioManager : MonoBehaviour // TypeDefIndex: 3637
{
	// Fields
	public VolumeController volumeCon; // 0x0C
	public AudioClip[] BG_ClipAry; // 0x10
	public AudioSource[] audio_SourceAry; // 0x14
	private int mHitGoodSourceTop; // 0x18
	private int mHitBadSourceTop; // 0x1C
	private int mInputSourceTop; // 0x20
	private int mHitCoinTop; // 0x24
	private bool mSFX_off; // 0x28
	private bool mBG_off; // 0x29

	// Constructors
	public AudioManager(); // 0x001E7B90-0x001E7B98

	// Methods
	private void Awake(); // 0x001E7138-0x001E7224
	[DoNotRename] // 0x0018D520-0x0018D530
	public void ChangeBgClip(int level); // 0x001E7224-0x001E73D0
	public void PlayHitObstacle(); // 0x001E73D0-0x001E7458
	public void PlayHitReward(); // 0x001E2150-0x001E21D8
	public void PlayHitPositivePortal(); // 0x001E7458-0x001E74C0
	public void PlayHitNegativePortal(); // 0x001E74C0-0x001E7528
	[DoNotRename] // 0x0018D530-0x0018D540
	public void PlayInput(); // 0x001E7528-0x001E75B0
	[DoNotRename] // 0x0018D540-0x0018D550
	public void PlayButtonInput(); // 0x001E75B0-0x001E766C
	[DoNotRename] // 0x0018D550-0x0018D560
	public void BG_turnOn(bool state); // 0x001E766C-0x001E7738
	[DoNotRename] // 0x0018D560-0x0018D570
	public void SFX_turnOn(bool state); // 0x001E7738-0x001E77D4
	[DoNotRename] // 0x0018D570-0x0018D580
	public void Help_turnOn(bool state); // 0x001E77D4-0x001E7864
	[DoNotRename] // 0x0018D580-0x0018D590
	public void Help_turnOnAR(bool state); // 0x001E7864-0x001E78F4
	public void Play_Jump(); // 0x001E1774-0x001E1830
	public void Play_Bomb(); // 0x001E78F4-0x001E79B0
	public void Play_Thud(); // 0x001E2400-0x001E24BC
	public void Play_Slide(); // 0x001E08FC-0x001E09B8
	public void PowerUp_Hit(); // 0x001E79B0-0x001E7A38
	public void Coin_Hit(); // 0x001E7A38-0x001E7AC0
	public void Spin_Hit(); // 0x001E7AC0-0x001E7B28
	public void PlayDailyChallenge(); // 0x001E0AA4-0x001E0B0C
	public void PlayNogifts(); // 0x001E7B28-0x001E7B90
}

public class AutoRotatePortal : MonoBehaviour // TypeDefIndex: 3638
{
	// Fields
	public LerpMover lerpMover; // 0x0C

	// Constructors
	public AutoRotatePortal(); // 0x001E7C20-0x001E7C28

	// Methods
	private void OnTriggerEnter(Collider other); // 0x001E7B98-0x001E7C20
}

public class BlockCall : MonoBehaviour // TypeDefIndex: 3639
{
	// Constructors
	public BlockCall(); // 0x001E7CC4-0x001E7CCC

	// Methods
	private void OnEnable(); // 0x001E7C28-0x001E7CC4
}

public class Bomb : MonoBehaviour // TypeDefIndex: 3640
{
	// Fields
	public GameObject particle; // 0x0C
	private int t; // 0x10
	private bool die; // 0x14
	private GameObject audioManager; // 0x18
	private AudioManager man; // 0x1C

	// Nested types
	[CompilerGenerated] // 0x0018B928-0x0018B938
	private sealed class <bomb>d__6 : IEnumerator<object> // TypeDefIndex: 3641
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public Bomb <>4__this; // 0x10

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018D628-0x0018D638 */ get; } // 0x001E81B0-0x001E81B8 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018D648-0x0018D658 */ get; } // 0x001E8240-0x001E8248 

		// Constructors
		[DebuggerHidden] // 0x0018D608-0x0018D618
		public <bomb>d__6(int <>1__state); // 0x001E7FB4-0x001E7FD4

		// Methods
		[DebuggerHidden] // 0x0018D618-0x0018D628
		void IDisposable.Dispose(); // 0x001E808C-0x001E8090
		private bool MoveNext(); // 0x001E8090-0x001E81B0
		[DebuggerHidden] // 0x0018D638-0x0018D648
		void IEnumerator.Reset(); // 0x001E81B8-0x001E8240
	}

	// Constructors
	public Bomb(); // 0x001E8084-0x001E808C

	// Methods
	private void OnTriggerEnter(Collider collisionInfo); // 0x001E7CCC-0x001E7F28
	[IteratorStateMachine] // 0x0018D590-0x0018D608
	public IEnumerator bomb(); // 0x001E7F28-0x001E7FB4
	private void Start(); // 0x001E7FD4-0x001E8080
	private void FixedUpdate(); // 0x001E8080-0x001E8084
}

public class ButtonEffect : MonoBehaviour // TypeDefIndex: 3642
{
	// Fields
	private float mSmoothStep; // 0x0C
	private Color mBaseColor; // 0x10
	public Button button; // 0x20
	public UnityEngine.UI.Image image; // 0x24
	private float mTimeLimit; // 0x28

	// Constructors
	public ButtonEffect(); // 0x001E854C-0x001E8554

	// Methods
	private void OnEnable(); // 0x001E8248-0x001E8354
	private void OnDisable(); // 0x001E8354-0x001E83D8
	private void Update(); // 0x001E83D8-0x001E854C
}

public class ButtonEffectUnScaled : MonoBehaviour // TypeDefIndex: 3643
{
	// Fields
	private float mSmoothStep; // 0x0C
	private Color mBaseColor; // 0x10
	public Button button; // 0x20
	public UnityEngine.UI.Image image; // 0x24
	private float mTimeLimit; // 0x28

	// Constructors
	public ButtonEffectUnScaled(); // 0x001E88DC-0x001E88E4

	// Methods
	private void OnEnable(); // 0x001E8554-0x001E8638
	private void OnDisable(); // 0x001E8638-0x001E8690
	private void Update(); // 0x001E8690-0x001E88DC
}

[ExecuteInEditMode] // 0x0018B938-0x0018B9C0
[RequireComponent] // 0x0018B938-0x0018B9C0
public class CameraFog : MonoBehaviour // TypeDefIndex: 3644
{
	// Fields
	public bool Enabled; // 0x0C
	public float StartDistance; // 0x10
	public float EndDistance; // 0x14
	public FogMode Mode; // 0x18
	public float Density; // 0x1C
	public Color Color; // 0x20
	private float _startDistance; // 0x30
	private float _endDistance; // 0x34
	private FogMode _mode; // 0x38
	private float _density; // 0x3C
	private Color _color; // 0x40
	private bool _enabled; // 0x50

	// Constructors
	public CameraFog(); // 0x001F0488-0x001F0490

	// Methods
	private void OnPreRender(); // 0x001F0358-0x001F0420
	private void OnPostRender(); // 0x001F0420-0x001F0488
}

public class Coins : MonoBehaviour // TypeDefIndex: 3645
{
	// Constructors
	public Coins(); // 0x001F1874-0x001F187C

	// Methods
	private void OnEnable(); // 0x001F16C0-0x001F17A0
	private void FixedUpdate(); // 0x001F1804-0x001F1874
}

public class CoinsRef : MonoBehaviour // TypeDefIndex: 3646
{
	// Fields
	private static CoinsRef mInstance; // 0x00

	// Properties
	public static CoinsRef Instance { get; } // 0x001F17A0-0x001F1804 

	// Constructors
	public CoinsRef(); // 0x001F19C8-0x001F19D0

	// Methods
	private void Awake(); // 0x001F18F4-0x001F1958
	private void FixedUpdate(); // 0x001F1958-0x001F19C8
}

public class CurveDrawer : MonoBehaviour // TypeDefIndex: 3647
{
	// Fields
	public GameObject Tute; // 0x0C
	public UnityEngine.UI.Text MUL_LBL; // 0x10
	public float Debug_Gap; // 0x14
	public Transform PointTree; // 0x18
	private List<Vector2> mP_V; // 0x1C
	private Vector3 mPrevPo; // 0x20
	private Vector3 mNextPo; // 0x2C
	private List<Vector2> P_V; // 0x38
	public int StepLimit; // 0x3C
	private int StepsCount; // 0x40
	private float H0; // 0x44
	private float H1; // 0x48
	private float H2; // 0x4C
	private float H3; // 0x50
	private float t1; // 0x54
	private float t2; // 0x58
	private float t3; // 0x5C
	private Vector2 mP0; // 0x60
	private Vector2 mP1; // 0x68
	private Vector2 mV0; // 0x70
	private Vector2 mV1; // 0x78
	private int CurveID; // 0x80
	private bool Run; // 0x84
	private Vector2 mTempPrevPoint; // 0x88
	private int mPointCount; // 0x90
	public LerpMover mLerpTest; // 0x94
	public TextEffect textEffect; // 0x98
	public StartScript startScript; // 0x9C
	public Transform[] CharacterAry; // 0xA0
	public SkinnedMeshRenderer[] CharacterRendererAry; // 0xA4

	// Constructors
	public CurveDrawer(); // 0x001F4490-0x001F4498

	// Methods
	private void Awake(); // 0x001F310C-0x001F33E8
	private void Start(); // 0x001F33E8-0x001F3530
	private void FillData(); // 0x001F3530-0x001F3F70
	private void FillCurveData(); // 0x001F3F70-0x001F4464
	[DoNotRename] // 0x0018D658-0x0018D668
	public void StartRuninButton(); // 0x001F4464-0x001F4490
}

public class DyanmicObs : MonoBehaviour // TypeDefIndex: 3648
{
	// Fields
	public Transform[] ob_Ary; // 0x0C
	public TrackAssetManager trackAssetManager; // 0x10
	private int mOb_Timer; // 0x14
	private int i; // 0x18
	private bool isStaticOB; // 0x1C

	// Constructors
	public DyanmicObs(); // 0x001F4F04-0x001F4F0C

	// Methods
	private void OnEnable(); // 0x001F4AA4-0x001F4AE0
	private void FixedUpdate(); // 0x001F4AE0-0x001F4F04
}

public class DynamicPortal : MonoBehaviour // TypeDefIndex: 3649
{
	// Fields
	public int ID; // 0x0C

	// Constructors
	public DynamicPortal(); // 0x001F4F0C-0x001F4F14
}

public class Cipher // TypeDefIndex: 3650
{
	// Fields
	public static string DEFAULT_NETWORKHASH; // 0x00
	public static string DEFAULT_IV_128; // 0x04
	private const string KEY_FACTORY_ALGORITHM = "RSA"; // Metadata: 0x0021C901
	private const string SIGNATURE_ALGORITHM = "Sha256WithRSA"; // Metadata: 0x0021C908
	private const string PUBLIC_KEY_STRING = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAytwW/1jarl9pOzhWLYn4rLO5TQAY3FLj/smhQRqyQTU2Kn8+Xqg6d5+392dlFziZUFhBivmAJKuf+i5nyE3bxfsgXwN5auea1sanDO0AsKT62Cqb9aUzYObOhkcObK2QHsW2WP7e9pQvrg+J+DVvr+JXwH60xsjFSSte5gq+zCKtlhceSEZ6OTghufGgNGtASODKsVtiu/iFvCkH6bVJ3JYXsfSsy7Oj1/Ov7cbrCgUM49Qhv0r68DvpAiBSSr715gkWcZcWoJ54ZKWWsaBvrIA2Y+qHP8FwqPX8m5Uh0dbh8fznXprjdbtQUPPPR6z6TIc+ESI4K/D/AyJigtsuOwIDAQAB"; // Metadata: 0x0021C919

	// Constructors
	static Cipher(); // 0x001F0490-0x001F0520
	public Cipher(); // 0x001F16B8-0x001F16C0

	// Methods
	public static string EncryptRJ128(string prm_key, string prm_iv, string prm_text_to_encrypt); // 0x001F0520-0x001F05E8
	public static string EncryptRJ128Byte(string prm_key, string prm_iv, byte[] toEncrypt); // 0x001F05E8-0x001F08A8
	public static string DecryptRJ128(string prm_key, string prm_iv, string prm_text_to_decrypt); // 0x001F08A8-0x001F097C
	public static byte[] DecryptRJ128Byte(string prm_key, string prm_iv, string prm_text_to_decrypt); // 0x001F097C-0x001F0C64
	public static bool verify(string signedData, string base64Signature); // 0x001F0C64-0x001F0DD4
	public static byte[] SHA256Hash(string text); // 0x001F1464-0x001F15F0
	private static RSACryptoServiceProvider DecodeX509PublicKey(byte[] x509key); // 0x001F0DD4-0x001F1464
	private static bool CompareBytearrays(byte[] a, byte[] b); // 0x001F15F0-0x001F16B8
}

public class CryptoPrefs // TypeDefIndex: 3651
{
	// Fields
	private static string sKEY; // 0x00
	private static string sIV; // 0x04

	// Constructors
	public CryptoPrefs(); // 0x001F3074-0x001F307C
	static CryptoPrefs(); // 0x001F307C-0x001F310C

	// Methods
	public static void SetInt(string key, int val); // 0x001F22AC-0x001F235C
	public static int GetInt(string key, int defaultValue = 0 /* Metadata: 0x0021CAA5 */); // 0x001F2808-0x001F28C8
	public static void SetFloat(string key, float val); // 0x001F29E8-0x001F2A98
	public static float GetFloat(string key, float defaultValue = 0f /* Metadata: 0x0021CAA9 */); // 0x001F2A98-0x001F2B58
	public static void SetString(string key, string val); // 0x001F2B58-0x001F2BF8
	public static string GetString(string key, string defaultValue = "" /* Metadata: 0x0021CAAD */); // 0x001F28C8-0x001F29E8
	public static bool HasKey(string key); // 0x001F2F54-0x001F2FDC
	public static void DeleteKey(string key); // 0x001F2FDC-0x001F3064
	public static void DeleteAll(); // 0x001F3064-0x001F306C
	public static void Save(); // 0x001F306C-0x001F3074
	private static string Decrypt(string encString); // 0x001F2BF8-0x001F2F54
	private static string Encrypt(string rawString); // 0x001F24EC-0x001F2808
	private static string GetHash(string key); // 0x001F235C-0x001F24EC
}

public class SampleSha256 : MonoBehaviour // TypeDefIndex: 3652
{
	// Constructors
	public SampleSha256(); // 0x00BB97AC-0x00BB97B4

	// Methods
	private void Start(); // 0x00BB9478-0x00BB952C
	private void Update(); // 0x00BB97A8-0x00BB97AC
	private static string ComputeSha256Hash(string rawData); // 0x00BB952C-0x00BB97A8
}

public class XorFloat // TypeDefIndex: 3653
{
	// Fields
	private byte[] key; // 0x08
	private byte[] bytes; // 0x0C

	// Properties
	public float value { get; set; } // 0x00A9CC04-0x00A9CC08 0x00A9CEEC-0x00A9CEF0

	// Constructors
	public XorFloat(); // 0x00A9C87C-0x00A9C884
	public XorFloat(float value); // 0x00A9C884-0x00A9C920

	// Methods
	private void GenerateKey(); // 0x00A9C920-0x00A9C9B8
	private void Xor(float x); // 0x00A9C9B8-0x00A9CC04
	private float Xor(); // 0x00A9CC08-0x00A9CEEC
	public static implicit operator float(XorFloat xor); // 0x00A9CEF0-0x00A9CF00
	public static implicit operator XorFloat(float val); // 0x00A9CF00-0x00A9CF70
	public override string ToString(); // 0x00A9CF70-0x00A9CF98
	public string ToString(string format); // 0x00A9CF98-0x00A9CFC8
	public string ToString(IFormatProvider provider); // 0x00A9CFC8-0x00A9CFF8
	public string ToString(string format, IFormatProvider provider); // 0x00A9CFF8-0x00A9D030
}

public class XorInt // TypeDefIndex: 3654
{
	// Fields
	private int key; // 0x08
	[CompilerGenerated] // 0x0018BCEC-0x0018BCFC
	private int <rawValue>k__BackingField; // 0x0C

	// Properties
	public int rawValue { [CompilerGenerated] /* 0x0018D668-0x0018D678 */ get; [CompilerGenerated] /* 0x0018D678-0x0018D688 */ private set; } // 0x00A9D18C-0x00A9D194 0x00A9D184-0x00A9D18C
	public int value { get; set; } // 0x00A9D194-0x00A9D1A4 0x00A9D1A4-0x00A9D1B4

	// Constructors
	public XorInt(); // 0x00A9D030-0x00A9D058
	public XorInt(int value); // 0x00A9D058-0x00A9D088

	// Methods
	private void GenerateKey(); // 0x00A9D088-0x00A9D178
	private int Xor(int x); // 0x00A9D178-0x00A9D184
	public static implicit operator int(XorInt xor); // 0x00A9D1B4-0x00A9D1CC
	public static implicit operator XorInt(int val); // 0x00A9D1CC-0x00A9D250
	public static XorInt operator ++(XorInt val); // 0x00A9D250-0x00A9D26C
	public static XorInt operator --(XorInt val); // 0x00A9D26C-0x00A9D288
	public override string ToString(); // 0x00A9D288-0x00A9D2B8
	public string ToString(string format); // 0x00A9D2B8-0x00A9D2E8
	public string ToString(IFormatProvider provider); // 0x00A9D2E8-0x00A9D318
	public string ToString(string format, IFormatProvider provider); // 0x00A9D318-0x00A9D348
}

public class FacebookManager : MonoBehaviour // TypeDefIndex: 3655
{
	// Nested types
	[Serializable]
	[CompilerGenerated] // 0x0018B9C0-0x0018B9D0
	private sealed class <>c // TypeDefIndex: 3656
	{
		// Fields
		public static readonly <>c <>9; // 0x00
		public static InitDelegate <>9__0_0; // 0x04
		public static InitDelegate <>9__1_0; // 0x08

		// Constructors
		static <>c(); // 0x001FD9D4-0x001FDA48
		public <>c(); // 0x001FDA48-0x001FDA50

		// Methods
		internal void <Awake>b__0_0(); // 0x001FDA50-0x001FDAFC
		internal void <OnApplicationPause>b__1_0(); // 0x001FDAFC-0x001FDBA8
	}

	// Constructors
	public FacebookManager(); // 0x001FD9CC-0x001FD9D4

	// Methods
	private void Awake(); // 0x001FD5C0-0x001FD7C0
	private void OnApplicationPause(bool pauseStatus); // 0x001FD7C0-0x001FD9CC
}

public class FPSDisplay : MonoBehaviour // TypeDefIndex: 3657
{
	// Fields
	public UnityEngine.UI.Text FPS_LBL; // 0x0C
	public float updateInterval; // 0x10
	private float accum; // 0x14
	private int frames; // 0x18
	private float timeleft; // 0x1C

	// Constructors
	public FPSDisplay(); // 0x001F6224-0x001F6234

	// Methods
	private void Start(); // 0x001F60D8-0x001F60E4
	private void Update(); // 0x001F60E4-0x001F6224
}

public class Glow : MonoBehaviour // TypeDefIndex: 3658
{
	// Fields
	public Transform CamT; // 0x0C

	// Constructors
	public Glow(); // 0x0020201C-0x00202024

	// Methods
	private void Update(); // 0x00201ED0-0x0020201C
}

public class GravityEffect : MonoBehaviour // TypeDefIndex: 3659
{
	// Fields
	private Vector2 mCenter; // 0x0C
	private float mRadius; // 0x14
	public float K; // 0x18

	// Constructors
	public GravityEffect(); // 0x00202A10-0x00202A18

	// Methods
	private void Start(); // 0x00202758-0x0020282C
	public Vector2 EffectPoints(Vector2 Po); // 0x0020282C-0x00202A10
}

public class IllusionObs : MonoBehaviour // TypeDefIndex: 3660
{
	// Fields
	public Transform[] ob_Ary; // 0x0C
	public int Limit; // 0x10
	private int ind; // 0x14
	private int jth; // 0x18

	// Constructors
	public IllusionObs(); // 0x0061F684-0x0061F68C

	// Methods
	private void OnEnable(); // 0x0061F1D8-0x0061F3E8
	private void OnDisable(); // 0x0061F3E8-0x0061F684
}

public enum GiftIDs // TypeDefIndex: 3661
{
	DATA = 0,
	MAGNET = 1,
	SHIELD = 2,
	COINS = 3,
	BOOST = 4
}

public class InputManager : MonoBehaviour // TypeDefIndex: 3662
{
	// Fields
	public Goal GoalTxt; // 0x0C
	public GameObject reviveLBL; // 0x10
	public UnityEngine.UI.Text reviveCoutShowTxt; // 0x14
	public GameObject PanelDrawpointDialog; // 0x18
	public GameObject PanelEnterPinDialog; // 0x1C
	public GameObject PanelEnterPackDialog; // 0x20
	public UnityEngine.UI.Text RevivePointsTxt; // 0x24
	public int Got_Reward_ID; // 0x28
	public GameObject RevivePanel; // 0x2C
	public UnityEngine.UI.Text ReveivTxt; // 0x30
	public UnityEngine.UI.Text CoinLBL; // 0x34
	public Button PackageButton; // 0x38
	public Button ScratchCardButton; // 0x3C
	private string m_PinNumber; // 0x40
	public GameObject LoadingAnimation; // 0x44
	public GameObject LoadingPanel; // 0x48
	public int HasAtmGift; // 0x4C
	public GiftIDs ID_Gift; // 0x50
	public CountDown countDown; // 0x54
	private string mPlay_ID; // 0x58
	private string mReward_Nonce; // 0x5C
	private string mToken; // 0x60
	private string Revivals; // 0x64
	private const int MaxRevivals = 2; // Metadata: 0x0021CAC9
	public string URL_TXT; // 0x68
	public string Debug_URL_TXT; // 0x6C
	public GameObject ServiceErrorDialog; // 0x70
	public UnityEngine.UI.Text ServiceErrorMsgTXT; // 0x74
	public GameObject MsgDialog; // 0x78
	public UnityEngine.UI.Text MsgTXT; // 0x7C
	public bool lockInput; // 0x80
	public Toggle SFX_BT; // 0x84
	public Toggle MUSIC_BT; // 0x88
	public UnityEngine.UI.Text text; // 0x8C
	public LerpMover Lerp; // 0x90
	public TextureAnimator textureAnimator; // 0x94
	public AudioManager audioManager; // 0x98
	public ButtonEffect AdPlayButton; // 0x9C
	public ButtonEffect playButton; // 0xA0
	public ButtonEffect pauseButton; // 0xA4
	public ButtonEffect settingsButton; // 0xA8
	public ButtonEffect shareButton; // 0xAC
	private int mTick; // 0xB0
	private Vector2 mScreenPo; // 0xB4
	private Vector2 mBeginScreenPo; // 0xBC
	private int X_Mul; // 0xC4
	private int Y_Mul; // 0xC8
	private bool mLeft; // 0xCC
	private bool mRight; // 0xCD
	private bool mUp; // 0xCE
	private bool mPlay; // 0xCF
	private float mNewAcc_X; // 0xD0
	private bool mTouchSenses; // 0xD4
	private bool mJumpedlastTime; // 0xD5
	private int mMoveTicks; // 0xD8
	private int mServiceID; // 0xDC
	private ServiceNames mSerNm; // 0xE0
	private int mPackageValue; // 0xE4
	private bool mHasLiftFinger; // 0xE8
	public bool validationEnabled; // 0xE9
	public GameObject ShareButtonOB; // 0xEC
	public GameObject RunButtonOB; // 0xF0
	private NativeShare nativeshare; // 0xF4
	private RevType revType; // 0xF8

	// Nested types
	private enum ErrorCodes // TypeDefIndex: 3663
	{
		Network = 0,
		Worng = 1,
		noCoins = 2,
		noDrawpoints = 3,
		noMoney = 4,
		badPin = 5,
		maxrevives = 6
	}

	private enum ServiceNames // TypeDefIndex: 3664
	{
		undefined = 0,
		StartService = 1
	}

	[Serializable]
	private struct FromJsonOBStart // TypeDefIndex: 3665
	{
		// Fields
		public string play_session; // 0x00
	}

	[Serializable]
	private struct FromJsonOBEnd // TypeDefIndex: 3666
	{
		// Fields
		public int status; // 0x00
		public string error; // 0x04
		public ResS response; // 0x08

		// Nested types
		[Serializable]
		public struct ResS // TypeDefIndex: 3667
		{
			// Fields
			public string msg; // 0x00
		}
	}

	[Serializable]
	private struct FromJsonOBDraw // TypeDefIndex: 3668
	{
		// Fields
		public int multiplier; // 0x00
	}

	[Serializable]
	private struct FromJsonOBAddPack // TypeDefIndex: 3669
	{
		// Fields
		public int multiplier; // 0x00
		public string signature; // 0x04
	}

	[Serializable]
	private struct FromJsonOBRewardHit // TypeDefIndex: 3670
	{
		// Fields
		public string type; // 0x00
		public int size; // 0x04
	}

	[Serializable]
	private struct FromJsonOBNonceRequest // TypeDefIndex: 3671
	{
		// Fields
		public string nonce; // 0x00
	}

	private enum RevType // TypeDefIndex: 3672
	{
		ScratchCard = 0,
		DataPack = 1,
		DrawPoints = 2
	}

	[CompilerGenerated] // 0x0018B9D0-0x0018B9E0
	private sealed class <StartServiceCall>d__99 : IEnumerator<object> // TypeDefIndex: 3673
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public InputManager <>4__this; // 0x10
		private UnityWebRequest <w>5__2; // 0x14

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018DDA8-0x0018DDB8 */ get; } // 0x0062BEC8-0x0062BED0 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018DDC8-0x0018DDD8 */ get; } // 0x0062BF58-0x0062C1D4 

		// Constructors
		[DebuggerHidden] // 0x0018DD88-0x0018DD98
		public <StartServiceCall>d__99(int <>1__state); // 0x006246D8-0x006246F8

		// Methods
		[DebuggerHidden] // 0x0018DD98-0x0018DDA8
		void IDisposable.Dispose(); // 0x0062B918-0x0062B91C
		private bool MoveNext(); // 0x0062B91C-0x0062BEC8
		[DebuggerHidden] // 0x0018DDB8-0x0018DDC8
		void IEnumerator.Reset(); // 0x0062BED0-0x0062BF58
	}

	[CompilerGenerated] // 0x0018B9E0-0x0018B9F0
	private sealed class <EndServiceCall>d__101 : IEnumerator<object> // TypeDefIndex: 3674
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public InputManager <>4__this; // 0x10
		public int level; // 0x14
		private UnityWebRequest <w>5__2; // 0x18

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018DDF8-0x0018DE08 */ get; } // 0x0062A038-0x0062A040 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018DE18-0x0018DE28 */ get; } // 0x0062A0C8-0x0062A0D0 

		// Constructors
		[DebuggerHidden] // 0x0018DDD8-0x0018DDE8
		public <EndServiceCall>d__101(int <>1__state); // 0x006246F8-0x00624718

		// Methods
		[DebuggerHidden] // 0x0018DDE8-0x0018DDF8
		void IDisposable.Dispose(); // 0x00629A40-0x00629A44
		private bool MoveNext(); // 0x00629A44-0x0062A038
		[DebuggerHidden] // 0x0018DE08-0x0018DE18
		void IEnumerator.Reset(); // 0x0062A040-0x0062A0C8
	}

	[CompilerGenerated] // 0x0018B9F0-0x0018BA00
	private sealed class <BurnMegaDrawPointService>d__103 : IEnumerator<object> // TypeDefIndex: 3675
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public InputManager <>4__this; // 0x10
		private UnityWebRequest <w>5__2; // 0x14

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018DE48-0x0018DE58 */ get; } // 0x006292B8-0x006292C0 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018DE68-0x0018DE78 */ get; } // 0x00629348-0x00629350 

		// Constructors
		[DebuggerHidden] // 0x0018DE28-0x0018DE38
		public <BurnMegaDrawPointService>d__103(int <>1__state); // 0x00624718-0x00624738

		// Methods
		[DebuggerHidden] // 0x0018DE38-0x0018DE48
		void IDisposable.Dispose(); // 0x00628C9C-0x00628CA0
		private bool MoveNext(); // 0x00628CA0-0x006292B8
		[DebuggerHidden] // 0x0018DE58-0x0018DE68
		void IEnumerator.Reset(); // 0x006292C0-0x00629348
	}

	[CompilerGenerated] // 0x0018BA00-0x0018BA10
	private sealed class <BurnCoinsService>d__104 : IEnumerator<object> // TypeDefIndex: 3676
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public InputManager <>4__this; // 0x10
		private UnityWebRequest <w>5__2; // 0x14

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018DE98-0x0018DEA8 */ get; } // 0x00628C04-0x00628C0C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018DEB8-0x0018DEC8 */ get; } // 0x00628C94-0x00628C9C 

		// Constructors
		[DebuggerHidden] // 0x0018DE78-0x0018DE88
		public <BurnCoinsService>d__104(int <>1__state); // 0x00624738-0x00624758

		// Methods
		[DebuggerHidden] // 0x0018DE88-0x0018DE98
		void IDisposable.Dispose(); // 0x00628820-0x00628824
		private bool MoveNext(); // 0x00628824-0x00628C04
		[DebuggerHidden] // 0x0018DEA8-0x0018DEB8
		void IEnumerator.Reset(); // 0x00628C0C-0x00628C94
	}

	[CompilerGenerated] // 0x0018BA10-0x0018BA20
	private sealed class <RechargeServiceCall>d__106 : IEnumerator<object> // TypeDefIndex: 3677
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public InputManager <>4__this; // 0x10
		public string pin; // 0x14
		private string <timestamp>5__2; // 0x18
		private UnityWebRequest <w>5__3; // 0x1C

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018DEE8-0x0018DEF8 */ get; } // 0x0062ACB0-0x0062ACB8 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018DF08-0x0018DF18 */ get; } // 0x0062AD40-0x0062AD48 

		// Constructors
		[DebuggerHidden] // 0x0018DEC8-0x0018DED8
		public <RechargeServiceCall>d__106(int <>1__state); // 0x00624758-0x00624778

		// Methods
		[DebuggerHidden] // 0x0018DED8-0x0018DEE8
		void IDisposable.Dispose(); // 0x0062A52C-0x0062A530
		private bool MoveNext(); // 0x0062A530-0x0062ACB0
		[DebuggerHidden] // 0x0018DEF8-0x0018DF08
		void IEnumerator.Reset(); // 0x0062ACB8-0x0062AD40
	}

	[CompilerGenerated] // 0x0018BA20-0x0018BA30
	private sealed class <AddPackServiceCall>d__107 : IEnumerator<object> // TypeDefIndex: 3678
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public InputManager <>4__this; // 0x10
		public int package; // 0x14
		private string <timestamp>5__2; // 0x18
		private UnityWebRequest <w>5__3; // 0x1C

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018DF38-0x0018DF48 */ get; } // 0x00628788-0x00628790 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018DF58-0x0018DF68 */ get; } // 0x00628818-0x00628820 

		// Constructors
		[DebuggerHidden] // 0x0018DF18-0x0018DF28
		public <AddPackServiceCall>d__107(int <>1__state); // 0x00624778-0x00624798

		// Methods
		[DebuggerHidden] // 0x0018DF28-0x0018DF38
		void IDisposable.Dispose(); // 0x00627FD0-0x00627FD4
		private bool MoveNext(); // 0x00627FD4-0x00628788
		[DebuggerHidden] // 0x0018DF48-0x0018DF58
		void IEnumerator.Reset(); // 0x00628790-0x00628818
	}

	[CompilerGenerated] // 0x0018BA30-0x0018BA40
	private sealed class <GetNonceforRedeem>d__112 : IEnumerator<object> // TypeDefIndex: 3679
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public InputManager <>4__this; // 0x10
		private UnityWebRequest <w>5__2; // 0x14

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018DF88-0x0018DF98 */ get; } // 0x0062A494-0x0062A49C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018DFA8-0x0018DFB8 */ get; } // 0x0062A524-0x0062A52C 

		// Constructors
		[DebuggerHidden] // 0x0018DF68-0x0018DF78
		public <GetNonceforRedeem>d__112(int <>1__state); // 0x00624BE4-0x00624C04

		// Methods
		[DebuggerHidden] // 0x0018DF78-0x0018DF88
		void IDisposable.Dispose(); // 0x0062A0D0-0x0062A0D4
		private bool MoveNext(); // 0x0062A0D4-0x0062A494
		[DebuggerHidden] // 0x0018DF98-0x0018DFA8
		void IEnumerator.Reset(); // 0x0062A49C-0x0062A524
	}

	[CompilerGenerated] // 0x0018BA40-0x0018BA50
	private sealed class <RewardHitServiceCall>d__113 : IEnumerator<object> // TypeDefIndex: 3680
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public InputManager <>4__this; // 0x10
		private UnityWebRequest <w>5__2; // 0x14

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018DFD8-0x0018DFE8 */ get; } // 0x0062B584-0x0062B58C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018DFF8-0x0018E008 */ get; } // 0x0062B614-0x0062B61C 

		// Constructors
		[DebuggerHidden] // 0x0018DFB8-0x0018DFC8
		public <RewardHitServiceCall>d__113(int <>1__state); // 0x00624C90-0x00624CB0

		// Methods
		[DebuggerHidden] // 0x0018DFC8-0x0018DFD8
		void IDisposable.Dispose(); // 0x0062AD48-0x0062AD4C
		private bool MoveNext(); // 0x0062AD4C-0x0062B584
		[DebuggerHidden] // 0x0018DFE8-0x0018DFF8
		void IEnumerator.Reset(); // 0x0062B58C-0x0062B614
	}

	[CompilerGenerated] // 0x0018BA50-0x0018BA60
	private sealed class <DailyChallegeCompleteServiceCall>d__115 : IEnumerator<object> // TypeDefIndex: 3681
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public InputManager <>4__this; // 0x10
		private UnityWebRequest <w>5__2; // 0x14

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018E028-0x0018E038 */ get; } // 0x006299A8-0x006299B0 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018E048-0x0018E058 */ get; } // 0x00629A38-0x00629A40 

		// Constructors
		[DebuggerHidden] // 0x0018E008-0x0018E018
		public <DailyChallegeCompleteServiceCall>d__115(int <>1__state); // 0x006253C4-0x006253E4

		// Methods
		[DebuggerHidden] // 0x0018E018-0x0018E028
		void IDisposable.Dispose(); // 0x00629350-0x00629354
		private bool MoveNext(); // 0x00629354-0x006299A8
		[DebuggerHidden] // 0x0018E038-0x0018E048
		void IEnumerator.Reset(); // 0x006299B0-0x00629A38
	}

	[CompilerGenerated] // 0x0018BA60-0x0018BA70
	private sealed class <SaveAndShare>d__122 : IEnumerator<object> // TypeDefIndex: 3682
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public InputManager <>4__this; // 0x10
		private string <screenShotPath>5__2; // 0x14

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018E078-0x0018E088 */ get; } // 0x0062B880-0x0062B888 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018E098-0x0018E0A8 */ get; } // 0x0062B910-0x0062B918 

		// Constructors
		[DebuggerHidden] // 0x0018E058-0x0018E068
		public <SaveAndShare>d__122(int <>1__state); // 0x006254C8-0x006254E8

		// Methods
		[DebuggerHidden] // 0x0018E068-0x0018E078
		void IDisposable.Dispose(); // 0x0062B61C-0x0062B620
		private bool MoveNext(); // 0x0062B620-0x0062B880
		[DebuggerHidden] // 0x0018E088-0x0018E098
		void IEnumerator.Reset(); // 0x0062B888-0x0062B910
	}

	// Constructors
	public InputManager(); // 0x00627F54-0x00627FD0

	// Methods
	private void Awake(); // 0x006214F0-0x00621708
	private void Start(); // 0x00621708-0x00621830
	private void Update(); // 0x006218BC-0x00621C9C
	[DoNotRename] // 0x0018D688-0x0018D698
	public void PlayButton(); // 0x0062210C-0x0062221C
	[DoNotRename] // 0x0018D698-0x0018D6A8
	public void PauseButton(); // 0x00622330-0x00622370
	[DoNotRename] // 0x0018D6A8-0x0018D6B8
	public void RepalyButton(); // 0x0062237C-0x006223AC
	[DoNotRename] // 0x0018D6B8-0x0018D6C8
	public void ExitGame(); // 0x006223B8-0x006223C0
	[DoNotRename] // 0x0018D6C8-0x0018D6D8
	public void ResetGame(); // 0x006223C0-0x006223E8
	[DoNotRename] // 0x0018D6D8-0x0018D6E8
	public void SFX_Button(bool st); // 0x00622424-0x006224C0
	[DoNotRename] // 0x0018D6E8-0x0018D6F8
	public void Music_Button(bool st); // 0x006224C0-0x0062255C
	[DoNotRename] // 0x0018D6F8-0x0018D708
	public void Help_Button(bool st); // 0x0062255C-0x0062258C
	[DoNotRename] // 0x0018D708-0x0018D718
	public void SettingsBack(); // 0x0062271C-0x00622770
	[DoNotRename] // 0x0018D718-0x0018D728
	public void AdsPlayButton(); // 0x00622770-0x00622774
	[DoNotRename] // 0x0018D728-0x0018D738
	public void Share_Button(); // 0x00622778-0x0062277C
	private void ShowRewardedAd(); // 0x00622774-0x00622778
	private void HandleShowResult(); // 0x00623058-0x0062305C
	private void ShareScreenshot(); // 0x0062277C-0x00623058
	[DoNotRename] // 0x0018D738-0x0018D748
	public void Click_Replay(); // 0x0062305C-0x00623068
	[DoNotRename] // 0x0018D748-0x0018D758
	public void Click_MainMenu(); // 0x00623068-0x006230A8
	[DoNotRename] // 0x0018D758-0x0018D768
	public void Click_SkipToScore(); // 0x00623170-0x00623174
	[DoNotRename] // 0x0018D768-0x0018D778
	public void Click_HOME(); // 0x00623174-0x0062319C
	[DoNotRename] // 0x0018D778-0x0018D788
	public void Click_SpendAndReplay(); // 0x0062319C-0x006234DC
	[DoNotRename] // 0x0018D788-0x0018D798
	public void Click_MegapointsAndReplay(); // 0x0062418C-0x006241B0
	[DoNotRename] // 0x0018D798-0x0018D7A8
	public void Enter_PackageValue(); // 0x0062423C-0x00624264
	[DoNotRename] // 0x0018D7A8-0x0018D7B8
	public void Get_PackageValue_29(bool st); // 0x0062430C-0x0062431C
	[DoNotRename] // 0x0018D7B8-0x0018D7C8
	public void Get_PackageValue_49(bool st); // 0x0062431C-0x0062432C
	[DoNotRename] // 0x0018D7C8-0x0018D7D8
	public void Get_PackageValue_99(bool st); // 0x0062432C-0x0062433C
	[DoNotRename] // 0x0018D7D8-0x0018D7E8
	public void Get_PackageValue_199(bool st); // 0x0062433C-0x0062434C
	[DoNotRename] // 0x0018D7E8-0x0018D7F8
	public void Get_PackageValue_449(bool st); // 0x0062434C-0x0062435C
	[DoNotRename] // 0x0018D7F8-0x0018D808
	public void Get_PackageValue_649(bool st); // 0x0062435C-0x0062436C
	[DoNotRename] // 0x0018D808-0x0018D818
	public void GetpinNumber(string pin); // 0x0062436C-0x00624374
	[DoNotRename] // 0x0018D818-0x0018D828
	public void Enter_RechargePin(); // 0x00624374-0x0062439C
	public void RewardHit(); // 0x00624444-0x00624468
	private string Md5Sum(int val); // 0x00623568-0x0062378C
	public void EndgameService(int l); // 0x006230A8-0x00623170
	public void CompleteDailyChallenge(); // 0x0062459C-0x0062464C
	[IteratorStateMachine] // 0x0018D828-0x0018D8A0
	private IEnumerator StartServiceCall(); // 0x00621830-0x006218BC
	[IteratorStateMachine] // 0x0018D8A0-0x0018D918
	private IEnumerator EndServiceCall(int level); // 0x006244F4-0x0062459C
	[IteratorStateMachine] // 0x0018D918-0x0018D990
	private IEnumerator BurnMegaDrawPointService(); // 0x006241B0-0x0062423C
	[IteratorStateMachine] // 0x0018D990-0x0018DA08
	private IEnumerator BurnCoinsService(); // 0x006234DC-0x00623568
	[IteratorStateMachine] // 0x0018DA08-0x0018DA80
	private IEnumerator RechargeServiceCall(string pin); // 0x0062439C-0x00624444
	[IteratorStateMachine] // 0x0018DA80-0x0018DAF8
	private IEnumerator AddPackServiceCall(int package); // 0x00624264-0x0062430C
	public string Md5SumString(string strToEncrypt); // 0x00624798-0x00624968
	private static string ComputeSha256Hash(string rawData); // 0x00624968-0x00624BE4
	[IteratorStateMachine] // 0x0018DAF8-0x0018DB70
	private IEnumerator GetNonceforRedeem(); // 0x00624468-0x006244F4
	[IteratorStateMachine] // 0x0018DB70-0x0018DBE8
	private IEnumerator RewardHitServiceCall(); // 0x00624C04-0x00624C90
	private int SelectInAppGifts(); // 0x00624CB0-0x006253C4
	[IteratorStateMachine] // 0x0018DBE8-0x0018DC60
	private IEnumerator DailyChallegeCompleteServiceCall(); // 0x0062464C-0x006246D8
	private void CallServiceErrorDialog(ErrorCodes er, ServiceNames sn = ServiceNames.undefined /* Metadata: 0x0021CAC5 */); // 0x0062378C-0x0062418C
	[DoNotRename] // 0x0018DC60-0x0018DC70
	public void RefreshService(); // 0x006253E4-0x00625418
	[DoNotRename] // 0x0018DC70-0x0018DC80
	public void CallNativeShare(); // 0x00625418-0x0062543C
	[IteratorStateMachine] // 0x0018DC80-0x0018DCF8
	private IEnumerator SaveAndShare(); // 0x0062543C-0x006254C8
	[DoNotRename] // 0x0018DCF8-0x0018DD08
	public void CallReward(); // 0x006254E8-0x00625578
	[DoNotRename] // 0x0018DD08-0x0018DD18
	public void FilterMegaWasana(); // 0x00625860-0x00625890
	[DoNotRename] // 0x0018DD18-0x0018DD28
	public void FilterCoins(); // 0x00625890-0x00625894
	[DoNotRename] // 0x0018DD28-0x0018DD38
	public void FilterDataPackage(); // 0x00625894-0x006258C4
	[DoNotRename] // 0x0018DD38-0x0018DD48
	public void FilterRechargeCard(); // 0x006258C4-0x006258F4
	[DoNotRename] // 0x0018DD48-0x0018DD58
	public void ReviveWithPoints(); // 0x006258F4-0x00625BF4
	[DoNotRename] // 0x0018DD58-0x0018DD68
	public void CallRevive(); // 0x00625BF4-0x00625C1C
	[DoNotRename] // 0x0018DD68-0x0018DD78
	public void ReviveText(RevieType t); // 0x00625C1C-0x006274B4
	[DoNotRename] // 0x0018DD78-0x0018DD88
	public void ReviveShowText(RevieType t); // 0x006274B4-0x00627F54
}

public enum RevieType // TypeDefIndex: 3683
{
	ScratchRevive = 0,
	DataCardRrevive = 1,
	MegaWasanaRevive = 2
}

public class InstructionText : MonoBehaviour // TypeDefIndex: 3684
{
	// Fields
	public InputManager inputManager; // 0x0C
	public UnityEngine.UI.Text text; // 0x10
	private float mTimeLimit; // 0x14
	private float mSmoothStep; // 0x18
	private Color mColor; // 0x1C
	private int mI; // 0x2C
	private bool mSkipIns; // 0x30
	private bool mDissapear; // 0x31

	// Constructors
	public InstructionText(); // 0x0062C8B4-0x0062C8BC

	// Methods
	public void SetInstruction(int i); // 0x0062C1D4-0x0062C370
	private void OnEnable(); // 0x0062C370-0x0062C3B0
	private void Update(); // 0x0062C3B0-0x0062C7A8
}

public class int_ : MonoBehaviour // TypeDefIndex: 3685
{
	// Fields
	private static int_ mInstance; // 0x00
	public Collider other; // 0x0C

	// Properties
	public static int_ Instance { get; } // 0x00A9D348-0x00A9D3AC 

	// Constructors
	public int_(); // 0x00A9D410-0x00A9D418

	// Methods
	private void Awake(); // 0x00A9D3AC-0x00A9D410
}

public class LerpMover : MonoBehaviour // TypeDefIndex: 3686
{
	// Fields
	public Goal GoalTxt; // 0x0C
	public GameObject SpinButton; // 0x10
	public int InstructionID; // 0x14
	private Collider tempOther; // 0x18
	public Material ShieldMaterial; // 0x1C
	public SkinnedMeshRenderer CharacterRenderer; // 0x20
	private Material CharacterMaterial; // 0x24
	private string mToken; // 0x28
	public ButtonEffect PauseButtonEffect; // 0x2C
	public GameObject GameWheel; // 0x30
	public GameObject GameWheelPanel; // 0x34
	public Font SinhalaFont; // 0x38
	public Font EnglishFont; // 0x3C
	public Font TamilFont; // 0x40
	public GameObject CoinPrefab; // 0x44
	public UnityEngine.UI.Text SCoreLBL; // 0x48
	public UnityEngine.UI.Text CoinLBL; // 0x4C
	public UnityEngine.UI.Image PowerBarMagnet; // 0x50
	public UnityEngine.UI.Image PowerBarBoost; // 0x54
	public UnityEngine.UI.Image PowerBarShield; // 0x58
	public InputManager inputManager; // 0x5C
	public GameObject GameOverPanel; // 0x60
	public GameObject GameOverPanelRevive; // 0x64
	private GameObject GameOverPanelTemp; // 0x68
	public GameObject MagnetRoot; // 0x6C
	public Transform MagnetT; // 0x70
	public Transform ShieldT; // 0x74
	public Transform BoostT; // 0x78
	public Transform ATM_T; // 0x7C
	public Transform Gate; // 0x80
	public Transform[] TCoinSets; // 0x84
	public Transform RotHndleT; // 0x88
	public Transform[] ObsList; // 0x8C
	public float mCamX; // 0x90
	public float mCamZ; // 0x94
	public Transform ShadowT; // 0x98
	public InstructionText instructionText; // 0x9C
	public UnityEngine.UI.Image AdButtonImage; // 0xA0
	public Material Bg_Mat; // 0xA4
	public int RotID; // 0xA8
	public int TrackID; // 0xAC
	public Renderer Portal_1; // 0xB0
	public Material PositivePortalMat; // 0xB4
	public Material NegetivePortalMat; // 0xB8
	public UnityEngine.UI.Text DebugLBL; // 0xBC
	public int UnitsToGOLIMIT; // 0xC0
	public ParticleSystem Sfx; // 0xC4
	public ParticleSystem Sfx_Ripple; // 0xC8
	public SFX_C SfxCharacter; // 0xCC
	public AudioManager mAudioManager; // 0xD0
	public TextureAnimator mTextureAnimator; // 0xD4
	private static LerpMover mInstance; // 0x00
	public Transform PortalTree; // 0xD8
	public Transform AutoRotPrtal; // 0xDC
	public Transform RunnerRoot; // 0xE0
	public Material RunMat; // 0xE4
	public CameraFog camFog; // 0xE8
	public int PortalWaitCounterLIMIT; // 0xEC
	public int PortalWaitCounter; // 0xF0
	public PathPatch[] PathAryPaches; // 0xF4
	public Transform[] EnvObs; // 0xF8
	public Transform RunnerT; // 0xFC
	public float MAX_VEL; // 0x100
	private float mMAX_VEL_Tick; // 0x104
	private float TempMAX_VEL; // 0x108
	public Animator RunAni; // 0x10C
	public List<Vector2> PoAry_2; // 0x110
	public Transform V; // 0x114
	public float Vel; // 0x118
	private Vector2 St; // 0x11C
	private Vector2 Ed; // 0x124
	private float t; // 0x12C
	private float minAngle; // 0x130
	private float maxAngle; // 0x134
	private float angle; // 0x138
	private float mStepSiz; // 0x13C
	private float mTStepSiz; // 0x140
	private int mLen; // 0x144
	private int mIndex; // 0x148
	private Vector3 AngVec; // 0x14C
	private float mSign; // 0x158
	private float mA; // 0x15C
	private int mWalkToRunTicks; // 0x160
	private int mRunToJumpTicks; // 0x164
	private int mRunToChangeLaneTicks; // 0x168
	private int mRunToRotTicks; // 0x16C
	private int mRunToRotTicksLIMIT; // 0x170
	private int mSkyToGroundTicks; // 0x174
	private int mSKY_GROUND_LIMIT; // 0x178
	private float mCurrentLane; // 0x17C
	private float mLaneChangeSign; // 0x180
	private int mAnimationStateID; // 0x184
	private int mRayFrontLayerMask; // 0x188
	private int mRayDownLayerMask; // 0x18C
	private int mMiddleTurn; // 0x190
	private int mMiddleTurnLIMIT; // 0x194
	private int mJumpDownTicks; // 0x198
	private int mJumpDownTicksLIMIT; // 0x19C
	private int mRollForwardTicks; // 0x1A0
	private Vector3 mP_AngVec; // 0x1A4
	private float mP_Sign; // 0x1B0
	private float mP_maxAngle; // 0x1B4
	private float mSmoothStep; // 0x1B8
	public PathPatch[] mRunningPatches; // 0x1BC
	public int CurPathId; // 0x1C0
	public int NxtPathID; // 0x1C4
	private int mCurrentRotationID; // 0x1C8
	private int mTempRotationID; // 0x1CC
	private int mfINTempRotationID; // 0x1D0
	private int mAutoRotInd; // 0x1D4
	private int mNextRot; // 0x1D8
	private float mAngleEffect; // 0x1DC
	private float mSpeedFactor; // 0x1E0
	private float mExternalSpeedFactor; // 0x1E4
	private float mExternalSpeedMagnatude; // 0x1E8
	private int mRangeStart; // 0x1EC
	private int mRangeEnd; // 0x1F0
	private bool mSpeedUp; // 0x1F4
	private bool mOnRide; // 0x1F5
	private bool mFlying; // 0x1F6
	private ObData mTempObData; // 0x1F8
	private int mLevelID; // 0x1FC
	public int mMaxLevelID; // 0x200
	private int mEnvPart_0_Top; // 0x204
	private int mEnvPart_1_Top; // 0x208
	private int mEnvPart_2_Top; // 0x20C
	private bool mCriticalStep; // 0x210
	private Transform mCamT; // 0x214
	private int mFilledUnits; // 0x218
	private int UnitsToGo; // 0x21C
	private int[] mPeddleCounts; // 0x220
	private float mTurnVal; // 0x224
	private float mJumpVal; // 0x228
	private int mTurnMag; // 0x22C
	private int mBufferTurn; // 0x230
	private bool mIsTurning; // 0x234
	private bool mBufferJump; // 0x235
	private Transform mTempT; // 0x238
	private float mNewExternalSpeed; // 0x23C
	private float mOldExternalSpeed; // 0x240
	private float mCamMoveVal; // 0x244
	private float mCamMoveValT; // 0x248
	private bool mDoResetRotationAndPath; // 0x24C
	private float mCamOffset; // 0x250
	private float mCamOffsetT; // 0x254
	private bool mOkToChange; // 0x258
	private float mSlowDownValue; // 0x25C
	private bool mCanSlow; // 0x260
	private int mStopTicks; // 0x264
	private int mRestartTicks; // 0x268
	private bool mCanCaptureScreen; // 0x26C
	private bool mInHelpAds; // 0x26D
	private bool mInHelpNormal; // 0x26E
	private bool mInHelpForward; // 0x26F
	private bool mInHelpBack; // 0x270
	private Transform mObT; // 0x274
	private float mPar_0; // 0x278
	private int mPar_1; // 0x27C
	private int mObsTopIndex; // 0x280
	private int mPrevObsIndex; // 0x284
	public int mCurrObsIndex; // 0x288
	private bool mBufferSlide; // 0x28C
	private int mStepCount; // 0x290
	private int mGateID; // 0x294
	private int mMagnetCount; // 0x298
	private int mMagnetCountLimit; // 0x29C
	private int mShieldCount; // 0x2A0
	private int mShieldCountLimit; // 0x2A4
	private int mBoostCount; // 0x2A8
	private int mBoostCountLimit; // 0x2AC
	private int mATM_Count; // 0x2B0
	private int mATM_CountLimit; // 0x2B4
	private int mMagnetTicks; // 0x2B8
	private int mMagnetTicksLimit; // 0x2BC
	private int mBoostTicks; // 0x2C0
	private int mBoostTicksLimit; // 0x2C4
	private int mShieldTicks; // 0x2C8
	private int mShieldTicksLimit; // 0x2CC
	private int mDieBounce; // 0x2D0
	private int mRiseUp; // 0x2D4
	private int mEnvIndex; // 0x2D8
	public int mObsLock_0; // 0x2DC
	public int mObsLock_1; // 0x2E0
	private int mLap; // 0x2E4
	private bool mIsATM_Captured; // 0x2E8
	private int mTempStepper; // 0x2EC
	private int_ CollHandler; // 0x2F0
	public WheelKeyHandler keyhandler; // 0x2F4

	// Properties
	public static LerpMover Instance { get; } // 0x0061F950-0x0061F9B4 

	// Constructors
	public LerpMover(); // 0x0063FD08-0x0063FD10

	// Methods
	private void Awake(); // 0x0062CE18-0x0062D3F8
	private void Start(); // 0x0062F340-0x0062FB70
	private void SetEnv(); // 0x0062D3F8-0x0062F340
	private void FixedUpdate(); // 0x0062FB70-0x00631CEC
	private void PositionForFuture(int index); // 0x00631F14-0x00638CB0
	private int UpdateCurrentOb(); // 0x00638FEC-0x0063901C
	public float GetFacingAngle(int index); // 0x0063901C-0x0063927C
	public void TrackChangeL(); // 0x00621DB0-0x00621ECC
	public void TrackChangeR(); // 0x00621ECC-0x0062201C
	public void Jump(); // 0x0062201C-0x006220F8
	public void JumpDown(); // 0x0063927C-0x00639330
	public void RollDown(); // 0x00631CEC-0x00631DD8
	public void MoveDown(); // 0x006220F8-0x0062210C
	public void RotateTrack(int i); // 0x00631DD8-0x00631F14
	public void AutoRotateTrack(); // 0x00639330-0x00639394
	public void SpeedUp(float SpeedMagnatude, int EffectiveTime); // 0x00639394-0x0063942C
	public void HitSheild(); // 0x0062563C-0x00625748
	[DoNotRename] // 0x0018E0A8-0x0018E0B8
	public void ResetCurrentPath(); // 0x0063942C-0x00639F1C
	public void FallBackCurrentPath(); // 0x00639F1C-0x0063A0C0
	private void DynamicFallBackCurrentPath(int l); // 0x0063B8AC-0x0063B968
	private void ResetRotationAndPath(); // 0x0063B968-0x0063C464
	public void ResetToRotPaths(); // 0x0063C464-0x0063CEB8
	[DoNotRename] // 0x0018E0B8-0x0018E0C8
	public void ResetGame(); // 0x0063CEB8-0x0063E550
	[DoNotRename] // 0x0018E0C8-0x0018E0D8
	public void StratFromMax(); // 0x0063E550-0x0063E58C
	private void ResetGame(int id, bool buttonReset = true /* Metadata: 0x0021CB09 */); // 0x0063A0C0-0x0063B8AC
	[DoNotRename] // 0x0018E0D8-0x0018E0E8
	public void ReplayGame(); // 0x006222FC-0x00622330
	[DoNotRename] // 0x0018E0E8-0x0018E0F8
	public void PlayFromBeginning(); // 0x006223E8-0x00622424
	[DoNotRename] // 0x0018E0F8-0x0018E108
	public void PlayGame(); // 0x0062221C-0x006222FC
	[DoNotRename] // 0x0018E108-0x0018E118
	public void ResetPlayerPosition(); // 0x0063E58C-0x0063E840
	[DoNotRename] // 0x0018E118-0x0018E128
	public void UNpause(); // 0x006223AC-0x006223B8
	[DoNotRename] // 0x0018E128-0x0018E138
	public void PauseGame(); // 0x00622370-0x0062237C
	public void ShowRewardedAd(); // 0x0062C7A8-0x0062C7AC
	[DoNotRename] // 0x0018E138-0x0018E148
	public void HelpActivate(bool st); // 0x0062258C-0x0062271C
	public void HitMagnet(); // 0x00625578-0x0062563C
	public void TutePortalHit(); // 0x0062C828-0x0062C8B4
	public void TuteSpeedChange(); // 0x0062C7AC-0x0062C828
	public void FillAllPoints(); // 0x0063E840-0x0063ED60
	public void HitCoin(); // 0x0063ED60-0x0063F018
	public void HitObstacle(); // 0x0063F018-0x0063F23C
	public void HitObstacleUnder(); // 0x0063F23C-0x0063F3B8
	public void HitObstacleOverOrUnder(); // 0x0063F3B8-0x0063F530
	public void HitBoost(); // 0x00625748-0x00625860
	public void SpeedUpNew(float SpeedMagnatude, int EffectiveTime); // 0x00638FE8-0x00638FEC
	public void UpdateScores(); // 0x00638E6C-0x00638FE8
	public bool CallMegaWheel(); // 0x0063F754-0x0063F7EC
	private string Md5Sum(int val); // 0x0063F530-0x0063F754
	public void LetThereBeLife(); // 0x00621C9C-0x00621DB0
	private void OnApplicationPause(bool pauseStatus); // 0x0063F7EC-0x0063F860
	private void ScheduleNotification(); // 0x0063FC7C-0x0063FC80
	private string Md5Sum(); // 0x0063F860-0x0063FC7C
	private void GameOverUI(); // 0x00638CB0-0x00638E6C
	public void HitATM(); // 0x0063FC80-0x0063FD08
}

public class Magnet : MonoBehaviour // TypeDefIndex: 3687
{
	// Fields
	public Transform T; // 0x0C
	public int i; // 0x10
	public Vector3 S_po; // 0x14

	// Constructors
	public Magnet(); // 0x00640210-0x00640218

	// Methods
	private void FixedUpdate(); // 0x0063FF0C-0x00640210
}

public class MegaWasana : MonoBehaviour // TypeDefIndex: 3688
{
	// Fields
	[Header] // 0x0018BCFC-0x0018BD30
	public Font SinhalaFont; // 0x0C
	public Font EnglishFont; // 0x10
	public Font TamilFont; // 0x14
	[Header] // 0x0018BD30-0x0018BD64
	public string host; // 0x18
	public string getInfo; // 0x1C
	public string getNumbers; // 0x20
	public string checkPrizes; // 0x24
	public string largePrizeRedeem; // 0x28
	public string smallPrizeReload; // 0x2C
	public string smallPrizeCash; // 0x30
	[Header] // 0x0018BD64-0x0018BD98
	public UnityEngine.UI.Text[] currentNumbers; // 0x34
	public UnityEngine.UI.Text[] winningNumbers; // 0x38
	public UnityEngine.UI.Text[] lastWeekNumbers; // 0x3C
	[Header] // 0x0018BD98-0x0018BDD8
	public UnityEngine.UI.Text weeklabel; // 0x40
	public UnityEngine.UI.Text reloadBillButtonText; // 0x44
	public UnityEngine.UI.Text reloadBillText; // 0x48
	[Header] // 0x0018BDD8-0x0018BE10
	public GameObject txt_Congratulations; // 0x4C
	public GameObject txt_winning1; // 0x50
	public GameObject txt_winning2; // 0x54
	public GameObject panelEzCash; // 0x58
	public GameObject panelNormal; // 0x5C
	public GameObject panelLarge; // 0x60
	public GameObject panelNormalRedeemPINSuccess; // 0x64
	public GameObject panelNormalRedeemBill; // 0x68
	public GameObject redeemPrizesButton; // 0x6C
	public GameObject loadingPanel; // 0x70
	public GameObject errorPanel; // 0x74
	public GameObject ComingSoonPanel; // 0x78
	public static string isPrepaid; // 0x00
	private static bool isEzCash; // 0x04
	private static bool isLargePrize; // 0x05
	private static bool isSmallPrize; // 0x06
	private string mToken; // 0x7C
	[Header] // 0x0018BE10-0x0018BE50
	public UnityEngine.UI.Image logo; // 0x80
	public Sprite sinhalalogo; // 0x84
	public Sprite tamillogo; // 0x88

	// Nested types
	[CompilerGenerated] // 0x0018BA70-0x0018BA80
	private sealed class <getUserDetails>d__39 : IEnumerator<object> // TypeDefIndex: 3689
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public MegaWasana <>4__this; // 0x10
		private UnityWebRequest <www>5__2; // 0x14

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018E438-0x0018E448 */ get; } // 0x00642CF8-0x00642D00 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018E458-0x0018E468 */ get; } // 0x00642D88-0x00642D90 

		// Constructors
		[DebuggerHidden] // 0x0018E418-0x0018E428
		public <getUserDetails>d__39(int <>1__state); // 0x00640760-0x00640780

		// Methods
		[DebuggerHidden] // 0x0018E428-0x0018E438
		void IDisposable.Dispose(); // 0x00642508-0x0064250C
		private bool MoveNext(); // 0x0064250C-0x00642CF8
		[DebuggerHidden] // 0x0018E448-0x0018E458
		void IEnumerator.Reset(); // 0x00642D00-0x00642D88
	}

	[CompilerGenerated] // 0x0018BA80-0x0018BA90
	private sealed class <getUserNumbers>d__40 : IEnumerator<object> // TypeDefIndex: 3690
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public MegaWasana <>4__this; // 0x10
		private UnityWebRequest <www>5__2; // 0x14

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018E488-0x0018E498 */ get; } // 0x00643628-0x00643630 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018E4A8-0x0018E4B8 */ get; } // 0x006436B8-0x006436C0 

		// Constructors
		[DebuggerHidden] // 0x0018E468-0x0018E478
		public <getUserNumbers>d__40(int <>1__state); // 0x0064080C-0x0064082C

		// Methods
		[DebuggerHidden] // 0x0018E478-0x0018E488
		void IDisposable.Dispose(); // 0x00642D90-0x00642D94
		private bool MoveNext(); // 0x00642D94-0x00643628
		[DebuggerHidden] // 0x0018E498-0x0018E4A8
		void IEnumerator.Reset(); // 0x00643630-0x006436B8
	}

	[CompilerGenerated] // 0x0018BA90-0x0018BAA0
	private sealed class <checkUserPrizes>d__41 : IEnumerator<object> // TypeDefIndex: 3691
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public MegaWasana <>4__this; // 0x10
		private UnityWebRequest <www>5__2; // 0x14

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018E4D8-0x0018E4E8 */ get; } // 0x00642470-0x00642478 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018E4F8-0x0018E508 */ get; } // 0x00642500-0x00642508 

		// Constructors
		[DebuggerHidden] // 0x0018E4B8-0x0018E4C8
		public <checkUserPrizes>d__41(int <>1__state); // 0x006408B8-0x006408D8

		// Methods
		[DebuggerHidden] // 0x0018E4C8-0x0018E4D8
		void IDisposable.Dispose(); // 0x00640F80-0x00640F84
		private bool MoveNext(); // 0x00640F84-0x00642470
		[DebuggerHidden] // 0x0018E4E8-0x0018E4F8
		void IEnumerator.Reset(); // 0x00642478-0x00642500
	}

	[CompilerGenerated] // 0x0018BAA0-0x0018BAB0
	private sealed class <sendLargePrizeRedeem>d__42 : IEnumerator<object> // TypeDefIndex: 3692
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public MegaWasana <>4__this; // 0x10
		private UnityWebRequest <www>5__2; // 0x14

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018E528-0x0018E538 */ get; } // 0x006439F0-0x006439F8 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018E548-0x0018E558 */ get; } // 0x00643A80-0x00643A88 

		// Constructors
		[DebuggerHidden] // 0x0018E508-0x0018E518
		public <sendLargePrizeRedeem>d__42(int <>1__state); // 0x00640964-0x00640984

		// Methods
		[DebuggerHidden] // 0x0018E518-0x0018E528
		void IDisposable.Dispose(); // 0x006436C0-0x006436C4
		private bool MoveNext(); // 0x006436C4-0x006439F0
		[DebuggerHidden] // 0x0018E538-0x0018E548
		void IEnumerator.Reset(); // 0x006439F8-0x00643A80
	}

	[CompilerGenerated] // 0x0018BAB0-0x0018BAC0
	private sealed class <sendNormalPrizeRedeem>d__43 : IEnumerator<object> // TypeDefIndex: 3693
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public MegaWasana <>4__this; // 0x10
		private UnityWebRequest <www>5__2; // 0x14

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018E578-0x0018E588 */ get; } // 0x0064417C-0x00644184 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018E598-0x0018E5A8 */ get; } // 0x0064420C-0x00644214 

		// Constructors
		[DebuggerHidden] // 0x0018E558-0x0018E568
		public <sendNormalPrizeRedeem>d__43(int <>1__state); // 0x00640A10-0x00640A30

		// Methods
		[DebuggerHidden] // 0x0018E568-0x0018E578
		void IDisposable.Dispose(); // 0x00643E4C-0x00643E50
		private bool MoveNext(); // 0x00643E50-0x0064417C
		[DebuggerHidden] // 0x0018E588-0x0018E598
		void IEnumerator.Reset(); // 0x00644184-0x0064420C
	}

	[CompilerGenerated] // 0x0018BAC0-0x0018BAD0
	private sealed class <sendNormalPrizeCashPIN>d__44 : IEnumerator<object> // TypeDefIndex: 3694
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public MegaWasana <>4__this; // 0x10
		private UnityWebRequest <www>5__2; // 0x14

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018E5C8-0x0018E5D8 */ get; } // 0x00643DB4-0x00643DBC 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018E5E8-0x0018E5F8 */ get; } // 0x00643E44-0x00643E4C 

		// Constructors
		[DebuggerHidden] // 0x0018E5A8-0x0018E5B8
		public <sendNormalPrizeCashPIN>d__44(int <>1__state); // 0x00640ABC-0x00640ADC

		// Methods
		[DebuggerHidden] // 0x0018E5B8-0x0018E5C8
		void IDisposable.Dispose(); // 0x00643A88-0x00643A8C
		private bool MoveNext(); // 0x00643A8C-0x00643DB4
		[DebuggerHidden] // 0x0018E5D8-0x0018E5E8
		void IEnumerator.Reset(); // 0x00643DBC-0x00643E44
	}

	// Constructors
	public MegaWasana(); // 0x00640EE4-0x00640EEC
	static MegaWasana(); // 0x00640EEC-0x00640F80

	// Methods
	private void Start(); // 0x00640218-0x0064021C
	private void Awake(); // 0x0064021C-0x0064034C
	public void populateContentStart(); // 0x0064034C-0x00640508
	[IteratorStateMachine] // 0x0018E148-0x0018E1C0
	public IEnumerator getUserDetails(); // 0x006406D4-0x00640760
	[IteratorStateMachine] // 0x0018E1C0-0x0018E238
	public IEnumerator getUserNumbers(); // 0x00640780-0x0064080C
	[IteratorStateMachine] // 0x0018E238-0x0018E2B0
	public IEnumerator checkUserPrizes(); // 0x0064082C-0x006408B8
	[IteratorStateMachine] // 0x0018E2B0-0x0018E328
	public IEnumerator sendLargePrizeRedeem(); // 0x006408D8-0x00640964
	[IteratorStateMachine] // 0x0018E328-0x0018E3A0
	public IEnumerator sendNormalPrizeRedeem(); // 0x00640984-0x00640A10
	[IteratorStateMachine] // 0x0018E3A0-0x0018E418
	public IEnumerator sendNormalPrizeCashPIN(); // 0x00640A30-0x00640ABC
	public void clearNumbers(); // 0x00640508-0x006406D4
	public void redeemPrizes(); // 0x00640ADC-0x00640D04
	public void largePrize(); // 0x00640D04-0x00640D28
	public void reloadBill(); // 0x00640D28-0x00640D4C
	public void sendPin(); // 0x00640D4C-0x00640D70
	public void setText(UnityEngine.UI.Text label, string sin, string eng, string tam); // 0x00640D70-0x00640EE4
}

public class ObATM : MonoBehaviour // TypeDefIndex: 3695
{
	// Fields
	private bool mHit; // 0x0C
	private LerpMover Lerp; // 0x10

	// Constructors
	public ObATM(); // 0x00BB5E14-0x00BB5E1C

	// Methods
	private void Start(); // 0x00BB5D64-0x00BB5D80
	private void OnTriggerEnter(Collider other); // 0x00BB5D80-0x00BB5E14
}

public class ObBoost : MonoBehaviour // TypeDefIndex: 3696
{
	// Fields
	private bool mHit; // 0x0C
	private LerpMover Lerp; // 0x10

	// Constructors
	public ObBoost(); // 0x00BB5F50-0x00BB5F58

	// Methods
	private void Start(); // 0x00BB5E1C-0x00BB5E38
	private void OnTriggerEnter(Collider other); // 0x00BB5E38-0x00BB5F50
}

public class ObData : MonoBehaviour // TypeDefIndex: 3697
{
	// Fields
	public float SpeedMagnitude; // 0x0C
	public int EffectiveTime; // 0x10

	// Constructors
	public ObData(); // 0x00BB5F58-0x00BB5F60
}

public class ObMagnet : MonoBehaviour // TypeDefIndex: 3698
{
	// Fields
	private bool mHit; // 0x0C
	private LerpMover Lerp; // 0x10

	// Constructors
	public ObMagnet(); // 0x00BB6010-0x00BB6018

	// Methods
	private void Start(); // 0x00BB5F60-0x00BB5F7C
	private void OnTriggerEnter(Collider other); // 0x00BB5F7C-0x00BB6010
}

public class ObShield : MonoBehaviour // TypeDefIndex: 3699
{
	// Fields
	private bool mHit; // 0x0C
	private LerpMover Lerp; // 0x10

	// Constructors
	public ObShield(); // 0x00BB614C-0x00BB6154

	// Methods
	private void Start(); // 0x00BB6018-0x00BB6034
	private void OnTriggerEnter(Collider other); // 0x00BB6034-0x00BB614C
}

public class ObsManager : MonoBehaviour // TypeDefIndex: 3700
{
	// Fields
	public int Count; // 0x0C

	// Constructors
	public ObsManager(); // 0x00BB7018-0x00BB7020
}

public class Obstacle : MonoBehaviour // TypeDefIndex: 3701
{
	// Fields
	private bool mHit; // 0x0C
	private LerpMover Lerp; // 0x10
	private int_ otherHandeler; // 0x14

	// Constructors
	public Obstacle(); // 0x00BB7094-0x00BB709C

	// Methods
	private void Start(); // 0x00BB7020-0x00BB7048
	private void OnTriggerEnter(Collider other); // 0x00BB7048-0x00BB7094
}

public class ObstacleOverOrUnder : MonoBehaviour // TypeDefIndex: 3702
{
	// Fields
	private bool mHit; // 0x0C
	private LerpMover Lerp; // 0x10
	private int_ otherHandeler; // 0x14

	// Constructors
	public ObstacleOverOrUnder(); // 0x00BB7490-0x00BB7498

	// Methods
	private void Start(); // 0x00BB73C8-0x00BB73F0
	private void OnTriggerEnter(Collider other); // 0x00BB73F0-0x00BB7490
}

public class ObstacleUnder : MonoBehaviour // TypeDefIndex: 3703
{
	// Fields
	private bool mHit; // 0x0C
	private LerpMover Lerp; // 0x10
	private int_ otherHandeler; // 0x14

	// Constructors
	public ObstacleUnder(); // 0x00BB7560-0x00BB7568

	// Methods
	private void Start(); // 0x00BB7498-0x00BB74C0
	private void OnTriggerEnter(Collider other); // 0x00BB74C0-0x00BB7560
}

public class PathPatch : MonoBehaviour // TypeDefIndex: 3704
{
	// Fields
	public int ID; // 0x0C
	public int[] PathData; // 0x10

	// Constructors
	public PathPatch(); // 0x00BB7698-0x00BB76A0

	// Methods
	public void SetPatch(int StInd, int EdInt, bool StoE, int pathOri = 0 /* Metadata: 0x0021CB0A */); // 0x00BB7624-0x00BB7628
	public void ResetPatch(); // 0x00BB7628-0x00BB7698
}

public class RayHeadHit : MonoBehaviour // TypeDefIndex: 3705
{
	// Constructors
	public RayHeadHit(); // 0x00BB80D4-0x00BB80DC

	// Methods
	private void Start(); // 0x00BB80CC-0x00BB80D0
	private void Update(); // 0x00BB80D0-0x00BB80D4
}

public class Rewards : MonoBehaviour // TypeDefIndex: 3706
{
	// Fields
	public Magnet magnet; // 0x0C
	private bool mHit; // 0x10
	private LerpMover Lerp; // 0x14

	// Constructors
	public Rewards(); // 0x00BB8988-0x00BB8990

	// Methods
	private void Start(); // 0x00BB87D4-0x00BB8848
	private void OnTriggerEnter(Collider other); // 0x00BB8848-0x00BB8988
}

public class RhythumObs : MonoBehaviour // TypeDefIndex: 3707
{
	// Fields
	public Transform[] ob_Ary; // 0x0C
	private int mOb_Timer; // 0x10

	// Constructors
	public RhythumObs(); // 0x00BB8B54-0x00BB8B5C

	// Methods
	private void OnEnable(); // 0x00BB8990-0x00BB899C
	private void FixedUpdate(); // 0x00BB899C-0x00BB8B54
}

public class RunEvents : MonoBehaviour // TypeDefIndex: 3708
{
	// Fields
	public Animator RunAni; // 0x0C

	// Constructors
	public RunEvents(); // 0x00BB9170-0x00BB9178

	// Methods
	public void EndTurn(); // 0x00BB90F0-0x00BB9170
}

public class SFX : MonoBehaviour // TypeDefIndex: 3709
{
	// Fields
	public Material RefMat; // 0x0C
	public Material Mat; // 0x10
	public bool Positive; // 0x14
	private int mStartToFinishTicks; // 0x18
	private float mSmoothStep; // 0x1C

	// Constructors
	public SFX(); // 0x00BB9184-0x00BB918C

	// Methods
	private void OnEnable(); // 0x00BB9178-0x00BB9184
}

public class SFX_C : MonoBehaviour // TypeDefIndex: 3710
{
	// Fields
	public Material Mat; // 0x0C
	private int mStartToFinishTicks; // 0x10
	private float mSmoothStep; // 0x14

	// Constructors
	public SFX_C(); // 0x00BB9470-0x00BB9478

	// Methods
	private void Start(); // 0x00BB918C-0x00BB9204
	private void OnEnable(); // 0x00BB9204-0x00BB9278
	private void FixedUpdate(); // 0x00BB9278-0x00BB9470
}

public class SkelitonData : MonoBehaviour // TypeDefIndex: 3711
{
	// Fields
	public Material BG_MAT; // 0x0C
	private int mOb_Timer; // 0x10
	private Transform[] mTrackAssetAry; // 0x14
	private Transform[] mModifyAry; // 0x18
	private Transform mRootT; // 0x1C
	private int i; // 0x20
	private int r_i; // 0x24
	private int mObTop; // 0x28
	private FixedUpdateDelegate fixedUpdateDelegate; // 0x2C
	private OnDisableDelegate onDisableDelegate; // 0x30
	private TrackAssetManager mTrackAssetManager; // 0x34
	private LerpMover mLerpMover; // 0x38
	private int[] mObIDs; // 0x3C
	private int mLastTrackID; // 0x40
	private int mLastRotID; // 0x44
	private ParticleSystem mParticleEffect; // 0x48

	// Nested types
	private delegate void FixedUpdateDelegate(); // TypeDefIndex: 3712; 0x00BC6300-0x00BC673C

	private delegate void OnDisableDelegate(); // TypeDefIndex: 3713; 0x00BC5E9C-0x00BC62D8

	// Constructors
	public SkelitonData(); // 0x00BCB024-0x00BCB038

	// Methods
	private void Awake(); // 0x00BC3A44-0x00BC3B58
	private void Start(); // 0x00BC3B58-0x00BC3B70
	public void SetVal(int l, int m, int r, int id, int obTop); // 0x00BC3B70-0x00BC4738
	public void SetCirculeVal(int[] ObIds, int id, int obTop); // 0x00BC4760-0x00BC5E50
	private void OnDisable(); // 0x00BC5E50-0x00BC5E9C
	private void FixedUpdate(); // 0x00BC62D8-0x00BC6300
	private void StaticObjectFixedUpdate(); // 0x00BC673C-0x00BC6740
	private void RythumObjectFixedUpdate(); // 0x00BC6740-0x00BC6A34
	private void DynamicObjectFixedUpdate(); // 0x00BC6A34-0x00BC6E54
	private void ReactObjectFixedUpdate(); // 0x00BC6E54-0x00BC745C
	private void StaticObjectOnDisable(); // 0x00BC745C-0x00BC7460
	private void DynamicObjectOnDisable(); // 0x00BC7460-0x00BC7938
	private void DynamicCirculreObjectFixedUpdate(); // 0x00BC7938-0x00BC89C4
	private void DynamicCirculreObjectOnDisable(); // 0x00BC89C4-0x00BC93C8
	private void RythumCirculreObjectFixedUpdate(); // 0x00BC93C8-0x00BC9D40
	private void ReactCirculreObjectFixedUpdate(); // 0x00BC9D40-0x00BCB024
}

public class StartScript : MonoBehaviour // TypeDefIndex: 3714
{
	// Fields
	public ButtonEffect PlayButton; // 0x0C
	public ButtonEffect SettingsButton; // 0x10
	public UnityEngine.UI.Text Quote_Text; // 0x14
	public UnityEngine.UI.Text Instruction_Text; // 0x18
	private int mStopTicks; // 0x1C
	private float mSmoothStep; // 0x20

	// Constructors
	public StartScript(); // 0x00BCC1FC-0x00BCC204

	// Methods
	private void OnEnable(); // 0x00BCC1CC-0x00BCC1DC
	private void FixedUpdate(); // 0x00BCC1DC-0x00BCC1FC
}

public class TextEffect : MonoBehaviour // TypeDefIndex: 3715
{
	// Fields
	public UnityEngine.UI.Text text; // 0x0C
	private float mSmoothStep; // 0x10
	private float mTimeLimit; // 0x14
	private bool mEnable; // 0x18
	private Color mColor; // 0x1C
	private bool mTurn; // 0x2C

	// Constructors
	public TextEffect(); // 0x00BCC738-0x00BCC740

	// Methods
	private void OnEnable(); // 0x00BCC550-0x00BCC554
	public void Dissapear(); // 0x00BCC554-0x00BCC558
	private void OnDisable(); // 0x00BCC558-0x00BCC55C
	private void Update(); // 0x00BCC55C-0x00BCC738
}

public class TextureAnimator : MonoBehaviour // TypeDefIndex: 3716
{
	// Fields
	public Material SigiriyaMat; // 0x0C
	public Material PolonnnaruwaMat; // 0x10
	public Material ColomboMat; // 0x14
	public Material KandyMat; // 0x18
	public Material YapahuwaMat; // 0x1C
	public Material KurunagalaMat; // 0x20
	public Renderer CityBoardRenderer; // 0x24
	public Renderer VillageBoardRenderer; // 0x28
	public GameObject CityBoard; // 0x2C
	public GameObject VillageBoard; // 0x30
	public Material[] SkyBox; // 0x34
	public Material HeadMat; // 0x38
	public Texture BlackTexture; // 0x3C
	public Texture WhiteTexture; // 0x40
	public AudioManager audioManager; // 0x44
	public AudioSource BG_AudioSource; // 0x48
	public ParticleSystem EnvParticleSystem; // 0x4C
	public ButtonEffect PlayButton; // 0x50
	public ButtonEffect PauseButton; // 0x54
	public ButtonEffect SettingsButton; // 0x58
	public ButtonEffect AdPlayButton; // 0x5C
	public ButtonEffect shareButton; // 0x60
	public Camera CamBG; // 0x64
	public CameraFog CamFog; // 0x68
	public SkinnedMeshRenderer[] WingRendererAry; // 0x6C
	public Transform[] WingAry; // 0x70
	public Material CharacterMat; // 0x74
	public Material noiseMat; // 0x78
	public Renderer HeadGlow; // 0x7C
	public SkinnedMeshRenderer HeadRender; // 0x80
	public Material ObsMat; // 0x84
	public Material RewMat; // 0x88
	public Material PortalOutlineMat; // 0x8C
	public Material BackGroundMat; // 0x90
	public Material BackGroundDecoMat_0; // 0x94
	public Material BackGroundDecoMat_1; // 0x98
	public Material BackGroundDecoMat_2; // 0x9C
	public Material BackGroundDecoMat_3; // 0xA0
	public Material BackGroundDecoMat_4; // 0xA4
	public Material BackGroundDecoMat_5; // 0xA8
	public Material NegetivePortal; // 0xAC
	public Material PitMat; // 0xB0
	public Material RotPitMat; // 0xB4
	public Material SFX_Mat; // 0xB8
	private int i; // 0xBC
	private int mColorChangeTicks; // 0xC0
	private int mReverseColorChangeTicks; // 0xC4
	private int mForwardColorChangeTicks; // 0xC8
	private int mDeadColorChange; // 0xCC
	private int mDissapearTicks; // 0xD0
	private int mLiveColorChange; // 0xD4
	private int mAppearTicks; // 0xD8
	private int mWingChangeTicks; // 0xDC
	private int mReverseWingChangeTicks; // 0xE0
	private int mPauseTicks; // 0xE4
	private int mReplayTicks; // 0xE8
	private float mSmoothStep; // 0xEC
	private float mCurveStep; // 0xF0
	public Vector2[] colorHVals; // 0xF4
	private int mChakra; // 0xF8
	private int mEnvBeatTicks; // 0xFC
	private bool mIndicateDeath; // 0x100
	private int mTempLevel; // 0x104
	private int mMistChangeTicks; // 0x108
	public Vector3[] mistColorValue; // 0x10C
	private int mMistID; // 0x110
	private Vector3 mCurrentMistColor; // 0x114
	private Vector3 mTempMistColor; // 0x120
	private Color mBaseColor; // 0x12C

	// Constructors
	public TextureAnimator(); // 0x00BE1D98-0x00BE1D98

	// Methods
	private void Awake(); // 0x00BCC740-0x00BCD164
	private void FixedUpdate(); // 0x00BCD164-0x00BD926C
	public void ReverseChangeColor(); // 0x00BD926C-0x00BD92A0
	public void ForwardChangeColor(int l); // 0x00BD9830-0x00BD9848
	public void DeadColorChange(); // 0x00BD9848-0x00BD985C
	public void PlayColorChange(); // 0x00BD985C-0x00BD9880
	public void ChangeColor(); // 0x00BD9880-0x00BD98B8
	private void GrowWing(); // 0x00BD98B8-0x00BD98D4
	public void ChangeMat(int i, int level); // 0x00BD98D4-0x00BDEEC0
	private void ResetAllMats(); // 0x00BD92A0-0x00BD9830
	[DoNotRename] // 0x0018E5F8-0x0018E608
	public void IndicateDeath(bool Turn_on); // 0x00BDEEC0-0x00BDEEE8
	[DoNotRename] // 0x0018E608-0x0018E618
	public void CallPause(); // 0x00BDEEE8-0x00BDEEF4
	[DoNotRename] // 0x0018E618-0x0018E628
	public void CallRepaly(); // 0x00BDEEF4-0x00BDEF18
	public void Reset(); // 0x00BDEF18-0x00BDF810
	public void Reset(int id); // 0x00BDF810-0x00BE16F4
	public Color GetLevelColor(int l); // 0x00BE16F4-0x00BE1768
	public void SetChangeMist(int mst); // 0x00BE1768-0x00BE1778
	public void SetSkyBox(int i); // 0x00BE1778-0x00BE1D98
}

public class ToggleButtonEffect : MonoBehaviour // TypeDefIndex: 3717
{
	// Fields
	private float mSmoothStep; // 0x0C
	private Color mBgColor; // 0x10
	private Color mFgColor; // 0x20
	public Toggle button; // 0x30
	public UnityEngine.UI.Image Bgimage; // 0x34
	public UnityEngine.UI.Image Fgimage; // 0x38
	private float mTimeLimit; // 0x3C

	// Constructors
	public ToggleButtonEffect(); // 0x00A88A94-0x00A88A9C

	// Methods
	private void Awake(); // 0x00A885E8-0x00A88638
	private void OnEnable(); // 0x00A88638-0x00A887CC
	private void OnDisable(); // 0x00A887CC-0x00A88844
	private void Update(); // 0x00A88844-0x00A88A94
}

public class TrackAssetManager : MonoBehaviour // TypeDefIndex: 3718
{
	// Fields
	public Color[] RainbowColor; // 0x0C
	public Material BoundlessMat; // 0x10
	private int mBoundlessID; // 0x14
	public bool isStaticObs; // 0x18
	public bool CanSetPortal; // 0x19
	public Transform[] DyAssetAry; // 0x1C
	public Transform[] RedBlockAry; // 0x20
	public SkelitonData[] SkelitonAry; // 0x24
	public LerpMover mLerpMover; // 0x28
	private static TrackAssetManager mInstance; // 0x00
	private Transform RotHndleT; // 0x2C
	private int[] mAllIDs; // 0x30
	private int[] mAllPOs; // 0x34
	private int mUsingIdTop; // 0x38
	private int mUsingPo_IdTop; // 0x3C
	private int mLastFilledTop; // 0x40
	private int mDyAssetAryTop; // 0x44
	private bool mResetAssets; // 0x48
	private int mAssetAryStartI; // 0x4C
	private int mAssetAryTempI; // 0x50
	private bool mSetNextAssets; // 0x54
	private int[] mPathDataRef; // 0x58
	private int mPathPointIndex; // 0x5C
	private int mPathPointIndexEnd; // 0x60
	private int mPathDataIndexIncVal; // 0x64
	private int mReturnIncVal; // 0x68
	private int mPathCurrntOri; // 0x6C
	private int mPathDataIndex; // 0x70
	private int mObSt; // 0x74
	private int mObEd; // 0x78
	private int[] mObsTops; // 0x7C
	private int mPathStartIndex; // 0x80
	private int mLeftObID; // 0x84
	private int mMiddleObID; // 0x88
	private int mRightObID; // 0x8C
	private int mSkelitonTop; // 0x90
	private int mRedBlockTop; // 0x94
	private int mRedCirculerBlockTop; // 0x98
	private int mObstacleType; // 0x9C
	private int mObstacaleCount; // 0xA0
	public int ObstacleLIMIT; // 0xA4
	private int mPatternTop; // 0xA8
	private int[,] mPatternDataAry; // 0xAC
	private int mLevel; // 0xB0
	private int mPortalID; // 0xB4
	private ObstacleLoadDelegate obstacleLoadDelegate; // 0xB8
	private int[] mObsIdCircule; // 0xBC
	private bool mBoundlessMode; // 0xC0

	// Properties
	public static TrackAssetManager Instance { get; } // 0x00A88A9C-0x00A88B00 
	public int PortalID { set; } // 0x00A88B00-0x00A88B08

	// Nested types
	private delegate void ObstacleLoadDelegate(); // TypeDefIndex: 3719; 0x00A8B238-0x00A8B674

	// Constructors
	public TrackAssetManager(); // 0x00A93560-0x00A93574

	// Methods
	private void Awake(); // 0x00A88B08-0x00A88D28
	private int SetAsset(int po_ind, int ori, int pathState); // 0x00A88D3C-0x00A8B238
	private void LoadStaticPattern(); // 0x00A8B674-0x00A8C5BC
	private void LoadDynamicPattern(); // 0x00A8C5BC-0x00A8CB90
	private void LoadFocusPattern(); // 0x00A8CB90-0x00A8DA54
	private void LoadStaticCirculerPattern(); // 0x00A8DA54-0x00A8FE64
	private void LoadDynamicCirculerPattern(); // 0x00A8FE64-0x00A90920
	private void LoadFocusCirculerPattern(); // 0x00A90920-0x00A92D18
	public void ResetPrevAssets(); // 0x00A92D18-0x00A92D6C
	public void ResetAllAssets(); // 0x00A92D6C-0x00A92FB8
	private void FixedUpdate(); // 0x00A92FB8-0x00A931E0
	public void SetAssetInit(int StInd, int EdInt, bool StoE, int PathOrientation, PathPatch patch); // 0x00A931E0-0x00A93260
	public void SetHardness(int i); // 0x00A93260-0x00A93370
	public void DeactivateNextAnimation(int Po_i); // 0x00A93370-0x00A934E4
	public void RestForFallBack(); // 0x00A934E4-0x00A93518
	public void ResetGame(int i = 0 /* Metadata: 0x0021CB0E */); // 0x00A93518-0x00A93560
}

public class AbilitiesEnable : MonoBehaviour // TypeDefIndex: 3720
{
	// Fields
	public UnityEngine.UI.Image[] ImageAry; // 0x0C
	public UnityEngine.UI.Text[] TextAry; // 0x10
	public Button[] BtnAry; // 0x14

	// Constructors
	public AbilitiesEnable(); // 0x001E6774-0x001E677C

	// Methods
	private void OnEnable(); // 0x001E61D0-0x001E6774
}

public class AddBlockScreen : MonoBehaviour // TypeDefIndex: 3721
{
	// Fields
	public GameObject BlockPanel; // 0x0C

	// Constructors
	public AddBlockScreen(); // 0x001E67AC-0x001E67B4

	// Methods
	private void OnEnable(); // 0x001E677C-0x001E67AC
}

public class ARGameUniCoder : MonoBehaviour // TypeDefIndex: 3722
{
	// Fields
	public string sinhalaTxt; // 0x0C
	public string EnglishTxt; // 0x10
	public string TamilTxt; // 0x14

	// Constructors
	public ARGameUniCoder(); // 0x001E3CE4-0x001E3CEC

	// Methods
	private void OnEnable(); // 0x001E394C-0x001E3C80
}

public class ARInGameFontChanger : MonoBehaviour // TypeDefIndex: 3723
{
	// Fields
	public GameController gameController; // 0x0C
	public bool isAward; // 0x10

	// Constructors
	public ARInGameFontChanger(); // 0x001E3EFC-0x001E3F04

	// Methods
	private void OnEnable(); // 0x001E3CEC-0x001E3EFC
}

public class ARMegaWheelEnable : MonoBehaviour // TypeDefIndex: 3724
{
	// Fields
	public UnityEngine.UI.Text RewardTXT; // 0x0C
	public UnityEngine.UI.Image Reward_Image; // 0x10
	public Sprite RewardSprite; // 0x14
	public Sprite BombSprite; // 0x18

	// Constructors
	public ARMegaWheelEnable(); // 0x001E4270-0x001E4278

	// Methods
	private void OnEnable(); // 0x001E3F04-0x001E4220
	public void setGift(int gift); // 0x001E4220-0x001E4270
}

public class ARUniCoder : MonoBehaviour // TypeDefIndex: 3725
{
	// Fields
	public string sinhalaTxt; // 0x0C
	public string EnglishTxt; // 0x10
	public string TamilTxt; // 0x14
	public GameController controller; // 0x18

	// Constructors
	public ARUniCoder(); // 0x001E4C10-0x001E4C18

	// Methods
	private void OnEnable(); // 0x001E49CC-0x001E4C10
}

public class BuyAbilitiesEnable : MonoBehaviour // TypeDefIndex: 3726
{
	// Fields
	public UnityEngine.UI.Text LBL; // 0x0C
	public GameObject PinPanel; // 0x10
	public Button PinBtn; // 0x14
	private int m_id; // 0x18

	// Constructors
	public BuyAbilitiesEnable(); // 0x001E8FF8-0x001E9000

	// Methods
	[DoNotRename] // 0x0018E628-0x0018E638
	public void OpenBuyDialog(int id); // 0x001E88E4-0x001E8C6C
	[DoNotRename] // 0x0018E638-0x0018E648
	public void Click_BuyFormCoins(); // 0x001E8C6C-0x001E8D44
	[DoNotRename] // 0x0018E648-0x0018E658
	public void Click_BuyFormDrawPoints(); // 0x001E8D44-0x001E8E1C
	[DoNotRename] // 0x0018E658-0x0018E668
	public void Click_BuyFormScratchCard(); // 0x001E8E1C-0x001E8FF8
}

public class BuyCharacterEnable : MonoBehaviour // TypeDefIndex: 3727
{
	// Fields
	public UnityEngine.UI.Text LBL; // 0x0C
	public GameObject PinPanel; // 0x10
	public Button PinBtn; // 0x14
	private int m_id; // 0x18
	private int m_Coins; // 0x1C

	// Constructors
	public BuyCharacterEnable(); // 0x001E95D0-0x001E95D8

	// Methods
	[DoNotRename] // 0x0018E668-0x0018E678
	public void OpenBuyDialog(int id); // 0x001E9000-0x001E923C
	[DoNotRename] // 0x0018E678-0x0018E688
	public void Click_BuyFormCoins(); // 0x001E923C-0x001E931C
	[DoNotRename] // 0x0018E688-0x0018E698
	public void Click_BuyFormDrawPoints(); // 0x001E931C-0x001E93F4
	[DoNotRename] // 0x0018E698-0x0018E6A8
	public void Click_BuyFormScratchCard(); // 0x001E93F4-0x001E95D0
}

public class CountDown : MonoBehaviour // TypeDefIndex: 3728
{
	// Fields
	public ButtonEffect PauseButton; // 0x0C
	public UnityEngine.UI.Text CounterLBL; // 0x10
	public InputManager inputManager; // 0x14
	private int mCount; // 0x18
	private int mTm; // 0x1C
	private float mSmoothStep; // 0x20
	private bool mPlay; // 0x24

	// Constructors
	public CountDown(); // 0x001F1D90-0x001F1D98

	// Methods
	private void Awake(); // 0x001F19D0-0x001F1A98
	[DoNotRename] // 0x0018E6A8-0x0018E6B8
	public void SetTimer(); // 0x001F1A98-0x001F1B78
	private void FixedUpdate(); // 0x001F1B78-0x001F1D7C
	private void LateUpdate(); // 0x001F1D7C-0x001F1D90
}

public class DailyLeaderBoardEnable : MonoBehaviour // TypeDefIndex: 3729
{
	// Constructors
	public DailyLeaderBoardEnable(); // 0x001F4554-0x001F455C

	// Methods
	private void OnEnable(); // 0x001F4498-0x001F44D4
	[DoNotRename] // 0x0018E6B8-0x0018E6C8
	public void ChangeDay(int i); // 0x001F44D4-0x001F4514
	[DoNotRename] // 0x0018E6C8-0x0018E6D8
	public void ChangeData(int i); // 0x001F4514-0x001F4554
}

public class DialogManager : MonoBehaviour // TypeDefIndex: 3730
{
	// Constructors
	public DialogManager(); // 0x001F4A9C-0x001F4AA4

	// Methods
	private void OnEnable(); // 0x001F49E8-0x001F4A9C
}

public class EnableCoinVal : MonoBehaviour // TypeDefIndex: 3731
{
	// Constructors
	public EnableCoinVal(); // 0x001F5020-0x001F5028

	// Methods
	private void OnEnable(); // 0x001F4F14-0x001F5020
}

public class InGameFontChanger : MonoBehaviour // TypeDefIndex: 3732
{
	// Constructors
	public InGameFontChanger(); // 0x0061F9B4-0x0061F9BC

	// Methods
	private void OnEnable(); // 0x0061F68C-0x0061F950
}

public class InGameSettingsEnable : MonoBehaviour // TypeDefIndex: 3733
{
	// Fields
	public Toggle[] ToggleAry; // 0x0C

	// Constructors
	public InGameSettingsEnable(); // 0x0061FB1C-0x0061FB24

	// Methods
	private void OnEnable(); // 0x0061F9BC-0x0061FB1C
}

public class InGameUniCoder : MonoBehaviour // TypeDefIndex: 3734
{
	// Fields
	public string sinhalaTxt; // 0x0C
	public string EnglishTxt; // 0x10
	public string TamilTxt; // 0x14

	// Constructors
	public InGameUniCoder(); // 0x0061FE58-0x0061FE60

	// Methods
	private void OnEnable(); // 0x0061FB24-0x0061FE58
}

public class InitLoader : MonoBehaviour // TypeDefIndex: 3735
{
	// Fields
	public string URL_TXT; // 0x0C
	public string TestURL_TXT; // 0x10
	public GameObject ServicesPanel; // 0x14
	public GameObject rootPanel; // 0x18
	private int i; // 0x1C

	// Nested types
	[Serializable]
	private struct FromJsonOBHealth // TypeDefIndex: 3736
	{
		// Fields
		public string version; // 0x00
		public string newest_version; // 0x04
		public bool force_update; // 0x08
	}

	[Serializable]
	private struct FromJsonOBTest // TypeDefIndex: 3737
	{
		// Fields
		public string version; // 0x00
		public string newest_version; // 0x04
		public bool force_update; // 0x08
	}

	[CompilerGenerated] // 0x0018BAD0-0x0018BAE0
	private sealed class <UserReveiwServiceCall>d__9 : IEnumerator<object> // TypeDefIndex: 3738
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public InitLoader <>4__this; // 0x10
		private UnityWebRequest <w>5__2; // 0x14

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018E870-0x0018E880 */ get; } // 0x00621320-0x00621328 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018E890-0x0018E8A0 */ get; } // 0x006213B0-0x006214F0 

		// Constructors
		[DebuggerHidden] // 0x0018E850-0x0018E860
		public <UserReveiwServiceCall>d__9(int <>1__state); // 0x00620068-0x00620088

		// Methods
		[DebuggerHidden] // 0x0018E860-0x0018E870
		void IDisposable.Dispose(); // 0x00620FB8-0x00620FBC
		private bool MoveNext(); // 0x00620FBC-0x00621320
		[DebuggerHidden] // 0x0018E880-0x0018E890
		void IEnumerator.Reset(); // 0x00621328-0x006213B0
	}

	[CompilerGenerated] // 0x0018BAE0-0x0018BAF0
	private sealed class <TestCall>d__14 : IEnumerator<object> // TypeDefIndex: 3739
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public InitLoader <>4__this; // 0x10
		private UnityWebRequest <w>5__2; // 0x14

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018E8C0-0x0018E8D0 */ get; } // 0x00620F20-0x00620F28 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018E8E0-0x0018E8F0 */ get; } // 0x00620FB0-0x00620FB8 

		// Constructors
		[DebuggerHidden] // 0x0018E8A0-0x0018E8B0
		public <TestCall>d__14(int <>1__state); // 0x00620740-0x00620760

		// Methods
		[DebuggerHidden] // 0x0018E8B0-0x0018E8C0
		void IDisposable.Dispose(); // 0x00620B60-0x00620B64
		private bool MoveNext(); // 0x00620B64-0x00620F20
		[DebuggerHidden] // 0x0018E8D0-0x0018E8E0
		void IEnumerator.Reset(); // 0x00620F28-0x00620FB0
	}

	[CompilerGenerated] // 0x0018BAF0-0x0018BB00
	private sealed class <OldTestCall>d__15 : IEnumerator<object> // TypeDefIndex: 3740
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public InitLoader <>4__this; // 0x10
		private UnityWebRequest <w>5__2; // 0x14

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018E910-0x0018E920 */ get; } // 0x00620AC8-0x00620AD0 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018E930-0x0018E940 */ get; } // 0x00620B58-0x00620B60 

		// Constructors
		[DebuggerHidden] // 0x0018E8F0-0x0018E900
		public <OldTestCall>d__15(int <>1__state); // 0x006207EC-0x0062080C

		// Methods
		[DebuggerHidden] // 0x0018E900-0x0018E910
		void IDisposable.Dispose(); // 0x00620814-0x00620818
		private bool MoveNext(); // 0x00620818-0x00620AC8
		[DebuggerHidden] // 0x0018E920-0x0018E930
		void IEnumerator.Reset(); // 0x00620AD0-0x00620B58
	}

	// Constructors
	public InitLoader(); // 0x0062080C-0x00620814

	// Methods
	private void Awake(); // 0x0061FE60-0x0061FE64
	private void Start(); // 0x0061FE64-0x0061FF50
	private void FixedUpdate(); // 0x0061FF74-0x0061FFDC
	[IteratorStateMachine] // 0x0018E6D8-0x0018E750
	private IEnumerator UserReveiwServiceCall(); // 0x0061FFDC-0x00620068
	[DoNotRename] // 0x0018E750-0x0018E760
	public void CallService(); // 0x0061FF50-0x0061FF74
	private void Chk(); // 0x00620088-0x00620298
	private string Md5Sum(); // 0x00620298-0x006206B4
	[IteratorStateMachine] // 0x0018E760-0x0018E7D8
	private IEnumerator TestCall(); // 0x006206B4-0x00620740
	[IteratorStateMachine] // 0x0018E7D8-0x0018E850
	private IEnumerator OldTestCall(); // 0x00620760-0x006207EC
}

public class LanEnable : MonoBehaviour // TypeDefIndex: 3741
{
	// Fields
	public Toggle[] ToggleAry; // 0x0C

	// Constructors
	public LanEnable(); // 0x0062CDD4-0x0062CDDC

	// Methods
	private void OnEnable(); // 0x0062CCEC-0x0062CDD4
}

public class LeaderBoardEnable : MonoBehaviour // TypeDefIndex: 3742
{
	// Constructors
	public LeaderBoardEnable(); // 0x0062CE10-0x0062CE18

	// Methods
	private void OnEnable(); // 0x0062CDDC-0x0062CE10
}

public class MegaWheelEnable : MonoBehaviour // TypeDefIndex: 3743
{
	// Fields
	public InputManager inputmanager; // 0x0C
	public UnityEngine.UI.Text CoinLBL; // 0x10
	public UnityEngine.UI.Text RewardTXT; // 0x14
	public UnityEngine.UI.Image Reward_Image; // 0x18
	public Sprite[] RewardSprites; // 0x1C

	// Constructors
	public MegaWheelEnable(); // 0x006445FC-0x00644604

	// Methods
	private void OnEnable(); // 0x00644214-0x006445FC
}

public class OTPManager : MonoBehaviour // TypeDefIndex: 3744
{
	// Fields
	private int timer; // 0x0C
	private int attempts; // 0x10
	private bool isTimer; // 0x14
	private WaitForSeconds secs; // 0x18
	public UnityEngine.UI.Text timerText; // 0x1C
	public UnityEngine.UI.Text attemptsText; // 0x20
	public GameObject PINSubmitButton; // 0x24
	private Coroutine timerRoutine; // 0x28

	// Nested types
	[CompilerGenerated] // 0x0018BB00-0x0018BB10
	private sealed class <OTPTimer>d__10 : IEnumerator<object> // TypeDefIndex: 3745
	{
		// Fields
		private int <>1__state; // 0x08
		private object <>2__current; // 0x0C
		public OTPManager <>4__this; // 0x10

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018E9D8-0x0018E9E8 */ get; } // 0x00644BAC-0x00644BB4 
		object IEnumerator.Current { [DebuggerHidden] /* 0x0018E9F8-0x0018EA08 */ get; } // 0x00644C3C-0x00644C44 

		// Constructors
		[DebuggerHidden] // 0x0018E9B8-0x0018E9C8
		public <OTPTimer>d__10(int <>1__state); // 0x006446EC-0x0064470C

		// Methods
		[DebuggerHidden] // 0x0018E9C8-0x0018E9D8
		void IDisposable.Dispose(); // 0x006449F4-0x006449F8
		private bool MoveNext(); // 0x006449F8-0x00644BAC
		[DebuggerHidden] // 0x0018E9E8-0x0018E9F8
		void IEnumerator.Reset(); // 0x00644BB4-0x00644C3C
	}

	// Constructors
	public OTPManager(); // 0x00644974-0x006449F4

	// Methods
	private void Start(); // 0x00644604-0x00644608
	private void Update(); // 0x00644608-0x00644630
	[IteratorStateMachine] // 0x0018E940-0x0018E9B8
	public IEnumerator OTPTimer(); // 0x00644660-0x006446EC
	public void startTimer(); // 0x0064470C-0x00644870
	public void expireTimer(); // 0x00644630-0x00644660
	public void reduceAttempt(); // 0x00644870-0x00644974
}

public class PanelLanguageManager : MonoBehaviour // TypeDefIndex: 3746
{
	// Constructors
	public PanelLanguageManager(); // 0x00BB761C-0x00BB7624

	// Methods
	private void OnEnable(); // 0x00BB7568-0x00BB761C
}

public class ProfileEnable : MonoBehaviour // TypeDefIndex: 3747
{
	// Fields
	public UnityEngine.UI.Text[] LblAry; // 0x0C

	// Constructors
	public ProfileEnable(); // 0x00BB80C4-0x00BB80CC

	// Methods
	private void OnEnable(); // 0x00BB7AF8-0x00BB7F14
}

public class RootChecker : MonoBehaviour // TypeDefIndex: 3748
{
	// Constructors
	public RootChecker(); // 0x00BB90E8-0x00BB90F0

	// Methods
	private void Start(); // 0x00BB8B5C-0x00BB8B60
	private void Update(); // 0x00BB8B60-0x00BB8B64
	public static bool isRooted(); // 0x00BB8B64-0x00BB8C5C
	public static bool IsEmulator(); // 0x00BB8C64-0x00BB90E8
	public static bool isRootedPrivate(string path); // 0x00BB8C5C-0x00BB8C64
}

public static class ScoreManager // TypeDefIndex: 3749
{
	// Fields
	private static int mCoinReviveCount; // 0x00
	private static int mDrawPointReviveCount; // 0x04
	private static int mDataPackReviveCount; // 0x08
	private static int mScractchCardReviveCount; // 0x0C
	private static int mRemainingCoinCount; // 0x10
	private static int mRemainingDiamonds; // 0x14
	private static int mCoinCount; // 0x18
	private static int mDistance; // 0x1C
	private static int mMultiplyVal; // 0x20
	private static int mShieldVal; // 0x24
	private static int mMagnetVal; // 0x28
	public static int mBoostVal; // 0x2C
	public static int LanID; // 0x30
	public static int CharacterID; // 0x34
	public static bool SFX_OFF; // 0x38
	public static bool MUSIC_OFF; // 0x39
	public static bool IsATM_available; // 0x3A
	private static int mHighScore; // 0x3C
	private static int mHighScoreAR; // 0x40
	public static int MegaDrawPoints; // 0x44
	public static string TempString; // 0x48
	public static bool Show_Reward; // 0x4C
	public static bool Show_Wheel_Reward; // 0x4D
	public static int DailyChallengeID; // 0x50
	public static int DailyChallengeAmount; // 0x54
	public static string DailyChallengeServiceID; // 0x58
	public static bool tuteOn; // 0x5C
	public static bool tuteOnAR; // 0x5D
	public static int TempInt; // 0x60
	public static bool isPrepaid; // 0x64
	public static bool isPostpaid; // 0x65
	public static bool isReview; // 0x66

	// Properties
	public static int CoinReviveCount { get; set; } // 0x00BBA0FC-0x00BBA18C 0x00BBA1F4-0x00BBA290
	public static int DrawPointReviveCount { get; set; } // 0x00BBA2F8-0x00BBA388 0x00BBA388-0x00BBA424
	public static int DataPackReviveCount { get; set; } // 0x00BBA424-0x00BBA4B4 0x00BBA4B4-0x00BBA550
	public static int ScractchCardReviveCount { get; set; } // 0x00BBA550-0x00BBA5E0 0x00BBA5E0-0x00BBA67C
	public static int RemainingCoinCount { get; set; } // 0x00BB7F14-0x00BB7FA4 0x00BB9AD4-0x00BB9B70
	public static int RemainingDiamonds { get; set; } // 0x00BBA67C-0x00BBA70C 0x00BBA70C-0x00BBA7A8
	public static int CoinCount { get; set; } // 0x00BB9A44-0x00BB9AD4 0x00BBA7A8-0x00BBA844
	public static int Distance { get; set; } // 0x00BB99B4-0x00BB9A44 0x00BBA844-0x00BBA8E0
	public static int MultiplyVal { get; set; } // 0x00BBA8E0-0x00BBA970 0x00BBA970-0x00BBAA0C
	public static int ShieldVal { get; set; } // 0x00BBAA0C-0x00BBAA9C 0x00BBAA9C-0x00BBAB38
	public static int MagnetVal { get; set; } // 0x00BBAB38-0x00BBABC8 0x00BBABC8-0x00BBAC64
	public static int BoostVal { get; set; } // 0x00BBAC64-0x00BBACF4 0x00BBACF4-0x00BBAD90
	public static int HighScore { get; set; } // 0x00BB7FA4-0x00BB8034 0x00BBA04C-0x00BBA0E8
	public static int HighScoreAR { get; set; } // 0x00BB8034-0x00BB80C4 0x00BBAD90-0x00BBAE2C

	// Constructors
	static ScoreManager(); // 0x00BBAE2C-0x00BBAE30

	// Methods
	private static int Shuffle(int x); // 0x00BBA290-0x00BBA2F8
	private static int Unshuffle(int x); // 0x00BBA18C-0x00BBA1F4
}

public class ScoreUniCoder : MonoBehaviour // TypeDefIndex: 3750
{
	// Fields
	public string sinhalaTxt; // 0x0C
	public string EnglishTxt; // 0x10
	public string TamilTxt; // 0x14

	// Constructors
	public ScoreUniCoder(); // 0x00BBB08C-0x00BBB094

	// Methods
	private void OnEnable(); // 0x00BBAE30-0x00BBB08C
}

public class SettingsEnable : MonoBehaviour // TypeDefIndex: 3751
{
	// Fields
	public Toggle[] ToggleAry; // 0x0C

	// Constructors
	public SettingsEnable(); // 0x00BC3A3C-0x00BC3A44

	// Methods
	private void OnEnable(); // 0x00BC376C-0x00BC3A3C
}

public class UniCoder : MonoBehaviour // TypeDefIndex: 3752
{
	// Fields
	public string sinhalaTxt; // 0x0C
	public string EnglishTxt; // 0x10
	public string TamilTxt; // 0x14
	private int mLanID; // 0x18

	// Constructors
	public UniCoder(); // 0x00A9B130-0x00A9B138

	// Methods
	private void Awake(); // 0x00A9AE34-0x00A9AE38
	private void OnEnable(); // 0x00A9AE38-0x00A9B130
}

public class VolumeController : MonoBehaviour // TypeDefIndex: 3753
{
	// Fields
	public AudioSource audioSource; // 0x0C
	private bool mVolUp; // 0x10
	private float mTimeLimit; // 0x14
	private float mSmoothStep; // 0x18

	// Constructors
	public VolumeController(); // 0x00A9B2D4-0x00A9B2DC

	// Methods
	public void VolumeUp(bool st); // 0x00A9B138-0x00A9B1A8
	private void OnEnable(); // 0x00A9B1A8-0x00A9B1B4
	private void Update(); // 0x00A9B1B4-0x00A9B2D4
}

public class ARWheel : MonoBehaviour // TypeDefIndex: 3754
{
	// Fields
	public UnityEngine.UI.Text WheelTXT; // 0x0C
	public Animator RewardAni; // 0x10
	public GameController gameController; // 0x14
	public GameObject SkipButton; // 0x18
	public GameObject SpinButton; // 0x1C
	public GameObject RewardPanel; // 0x20
	private float mAngle; // 0x24
	private float mSmoothStep; // 0x28
	private int mI; // 0x2C
	private int mIlimit; // 0x30
	private int mS; // 0x34
	private bool mSpeedUp; // 0x38
	private bool mSpeedDown; // 0x39
	private bool mStop; // 0x3A
	private int gift; // 0x3C

	// Constructors
	public ARWheel(); // 0x001E5888-0x001E5890

	// Methods
	[DoNotRename] // 0x0018EA08-0x0018EA18
	public void SetWheel(bool win); // 0x001E4C18-0x001E4CA0
	[DoNotRename] // 0x0018EA18-0x0018EA28
	public void SpinWheel(); // 0x001E4CA0-0x001E4FC0
	private void FixedUpdate(); // 0x001E4FE4-0x001E5888
}

public class Wheel : MonoBehaviour // TypeDefIndex: 3755
{
	// Fields
	public UnityEngine.UI.Text WheelTXT; // 0x0C
	public Animator RewardAni; // 0x10
	public InputManager inputManager; // 0x14
	public GameObject SkipButton; // 0x18
	public GameObject SpinButton; // 0x1C
	public GameObject RewardPanel; // 0x20
	private float mAngle; // 0x24
	private float mSmoothStep; // 0x28
	private int mI; // 0x2C
	private int mIlimit; // 0x30
	private int mS; // 0x34
	private bool mSpeedUp; // 0x38
	private bool mSpeedDown; // 0x39
	private bool mStop; // 0x3A

	// Constructors
	public Wheel(); // 0x00A9BE30-0x00A9BE38

	// Methods
	[DoNotRename] // 0x0018EA28-0x0018EA38
	public void SetWheel(bool win); // 0x00A9B2DC-0x00A9B364
	[DoNotRename] // 0x0018EA38-0x0018EA48
	public void SpinWheel(); // 0x00A9B364-0x00A9B688
	private void FixedUpdate(); // 0x00A9B688-0x00A9BE30
}

public class WheelKeyHand : MonoBehaviour // TypeDefIndex: 3756
{
	// Fields
	public Transform startMarker; // 0x0C
	public Transform endMarker; // 0x10
	public float speed; // 0x14
	private float startTime; // 0x18
	private float journeyLength; // 0x1C

	// Constructors
	public WheelKeyHand(); // 0x00A9C174-0x00A9C184

	// Methods
	private void Start(); // 0x00A9BE38-0x00A9BF2C
	private void Update(); // 0x00A9BF2C-0x00A9C174
}

public class WheelKeyHandler : MonoBehaviour, IBeginDragHandler, IDragHandler, IEndDragHandler // TypeDefIndex: 3757
{
	// Fields
	public GameObject locker; // 0x0C
	public Transform minY; // 0x10
	public Transform maxY; // 0x14
	private Vector3 startPos; // 0x18
	public UnityEvent successEvents; // 0x24
	public UnityEvent InitEvents; // 0x28
	public GameObject guideText; // 0x2C

	// Constructors
	public WheelKeyHandler(); // 0x00A9C874-0x00A9C87C

	// Methods
	private void Start(); // 0x00A9C184-0x00A9C188
	public void ResetPositions(); // 0x00A9C188-0x00A9C41C
	private void Update(); // 0x00A9C41C-0x00A9C420
	public void OnDrag(PointerEventData eventData); // 0x00A9C420-0x00A9C470
	public void OnEndDrag(PointerEventData eventData); // 0x00A9C470-0x00A9C604
	public void OnBeginDrag(PointerEventData eventData); // 0x00A9C700-0x00A9C750
	public void HideButtons(); // 0x00A9C604-0x00A9C700
	public void ShowButtons(); // 0x00A9C750-0x00A9C874
}

public class HSV : MonoBehaviour // TypeDefIndex: 3758
{
	// Fields
	public float H; // 0x0C
	public Material HSV_MAT; // 0x10
	private float mH; // 0x14
	private float mS; // 0x18
	private float mV; // 0x1C

	// Constructors
	public HSV(); // 0x00202A80-0x00202A88

	// Methods
	private void Start(); // 0x00202A18-0x00202A1C
	private void Update(); // 0x00202A1C-0x00202A20
	public void ChangeColor(float i); // 0x00202A20-0x00202A80
}

public class AR_Counter_2 : MonoBehaviour // TypeDefIndex: 3759
{
	// Fields
	public UnityEngine.UI.Text CounterLBL; // 0x0C
	public TriGameController inputManager; // 0x10
	private int mCount; // 0x14
	private int mTm; // 0x18
	private float mSmoothStep; // 0x1C

	// Constructors
	public AR_Counter_2(); // 0x001E5D70-0x001E5D78

	// Methods
	private void Awake(); // 0x001E5890-0x001E592C
	[DoNotRename] // 0x0018EA48-0x0018EA58
	public void SetTimer(); // 0x001E592C-0x001E5A08
	private void FixedUpdate(); // 0x001E5A08-0x001E5BF8
	private void LateUpdate(); // 0x001E5BF8-0x001E5C0C
	public void StartCount(); // 0x001E5C0C-0x001E5CDC
	public void StopCount(); // 0x001E5CDC-0x001E5D70
}

public class Coins1 : MonoBehaviour // TypeDefIndex: 3760
{
	// Constructors
	public Coins1(); // 0x001F18EC-0x001F18F4

	// Methods
	private void FixedUpdate(); // 0x001F187C-0x001F18EC
}

public class Faller : MonoBehaviour // TypeDefIndex: 3761
{
	// Fields
	public TriGameController triGameController; // 0x0C
	public OB_T ob_T; // 0x10
	public Vector3[] SpawnPoints; // 0x14
	public int TickLimit; // 0x18
	private float mSmoothStep; // 0x1C
	private int mTicks; // 0x20
	private float mStepFac; // 0x24
	private Vector3 mStartPoint; // 0x28
	private Vector3 mEndOffsetV; // 0x34
	private int DecVal; // 0x40

	// Nested types
	public enum OB_T // TypeDefIndex: 3762
	{
		type_1 = 0,
		type_2 = 1,
		type_3 = 2,
		bomb = 3
	}

	// Constructors
	public Faller(); // 0x001FE108-0x001FE110

	// Methods
	private void Awake(); // 0x001FDBA8-0x001FDC9C
	private void FixedUpdate(); // 0x001FDC9C-0x001FDE4C
	public void Spawn(int poID); // 0x001FDF64-0x001FE02C
	public void End(); // 0x001FDE4C-0x001FDF64
	public void ShootHit(); // 0x001FE02C-0x001FE108
}

public class TriGameController : MonoBehaviour // TypeDefIndex: 3763
{
	// Fields
	public GameObject GameOverPanel; // 0x0C
	public UnityEngine.UI.Image EnergyValImage; // 0x10
	public AudioManager audioManager; // 0x14
	public bool Playing; // 0x18
	public AR_Counter_2 Counter_2; // 0x1C
	public ParticleSystem SpawnParticleSystem; // 0x20
	public ParticleSystem[] ParticleAry; // 0x24
	private int mSpawnParticleIndex; // 0x28
	private int mHitParticleIndex; // 0x2C
	public int EnergyVAl; // 0x30
	public Faller[] mFallerAry; // 0x34
	private int[] mObsTypeIDAry; // 0x38
	public Camera Cam; // 0x3C
	private int mMaxDistance; // 0x40
	private int mLayerMask; // 0x44
	private int mTicks; // 0x48
	private int mLastTicks; // 0x4C
	private int mFinishedOBs; // 0x50
	private bool mGameOver; // 0x54

	// Constructors
	public TriGameController(); // 0x00A94354-0x00A9435C

	// Methods
	private void Start(); // 0x00A935AC-0x00A9364C
	private void Update(); // 0x00A9364C-0x00A936DC
	private void FixedUpdate(); // 0x00A93A10-0x00A93B48
	private void Shoot(Vector3 po); // 0x00A936DC-0x00A939C0
	public void ShowFX(Vector3 po); // 0x00A940F8-0x00A94230
	public void FinishedCount(); // 0x00A94230-0x00A9424C
	private void SpawnObjects(); // 0x00A93B48-0x00A940F8
	public void SetEnergyValue(int Val); // 0x00A9424C-0x00A9431C
	public void StartGame(); // 0x00A9431C-0x00A9433C
	public void StopGame(); // 0x00A939EC-0x00A93A10
	public void StartCounter(); // 0x00A939C0-0x00A939EC
	public void Replay(); // 0x00A9433C-0x00A94348
	public void MainMenu(); // 0x00A94348-0x00A94354
}

namespace Obfuscator.Demo
{
	public class DemoGui : MonoBehaviour // TypeDefIndex: 3764
	{
		// Constructors
		public DemoGui(); // 0x00BB63DC-0x00BB63E4
	
		// Methods
		[DoNotRename] // 0x0018EA58-0x0018EA68
		public void GameStart_OnClick(); // 0x00BB616C-0x00BB6210
		public void GameStart_WithoutAttribute_OnClick(); // 0x00BB6210-0x00BB62B4
		[DoNotRename] // 0x0018EA68-0x0018EA78
		public void EndGame_OnClick(); // 0x00BB62B4-0x00BB6348
		public void EndGame_WithoutAttribute_OnClick(); // 0x00BB6348-0x00BB63DC
	}

	public class DemoMonoBehaviour : MonoBehaviour // TypeDefIndex: 3765
	{
		// Fields
		private string methodName; // 0x0C
	
		// Nested types
		[CompilerGenerated] // 0x0018BB10-0x0018BB20
		private sealed class <MyCoroutine>d__2 : IEnumerator<object> // TypeDefIndex: 3766
		{
			// Fields
			private int <>1__state; // 0x08
			private object <>2__current; // 0x0C
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018EB88-0x0018EB98 */ get; } // 0x00BB66B8-0x00BB66C0 
			object IEnumerator.Current { [DebuggerHidden] /* 0x0018EBA8-0x0018EBB8 */ get; } // 0x00BB6748-0x00BB6750 
	
			// Constructors
			[DebuggerHidden] // 0x0018EB68-0x0018EB78
			public <MyCoroutine>d__2(int <>1__state); // 0x00BB65C4-0x00BB65E4
	
			// Methods
			[DebuggerHidden] // 0x0018EB78-0x0018EB88
			void IDisposable.Dispose(); // 0x00BB6670-0x00BB6674
			private bool MoveNext(); // 0x00BB6674-0x00BB66B8
			[DebuggerHidden] // 0x0018EB98-0x0018EBA8
			void IEnumerator.Reset(); // 0x00BB66C0-0x00BB6748
		}
	
		[CompilerGenerated] // 0x0018BB20-0x0018BB30
		private sealed class <MyCoroutine>d__3 : IEnumerator<object> // TypeDefIndex: 3767
		{
			// Fields
			private int <>1__state; // 0x08
			private object <>2__current; // 0x0C
			public float _Parameter; // 0x10
			private float <f>5__2; // 0x14
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018EBD8-0x0018EBE8 */ get; } // 0x00BB67C8-0x00BB67D0 
			object IEnumerator.Current { [DebuggerHidden] /* 0x0018EBF8-0x0018EC08 */ get; } // 0x00BB6858-0x00BB6860 
	
			// Constructors
			[DebuggerHidden] // 0x0018EBB8-0x0018EBC8
			public <MyCoroutine>d__3(int <>1__state); // 0x00BB65E4-0x00BB6604
	
			// Methods
			[DebuggerHidden] // 0x0018EBC8-0x0018EBD8
			void IDisposable.Dispose(); // 0x00BB6750-0x00BB6754
			private bool MoveNext(); // 0x00BB6754-0x00BB67C8
			[DebuggerHidden] // 0x0018EBE8-0x0018EBF8
			void IEnumerator.Reset(); // 0x00BB67D0-0x00BB6858
		}
	
		// Constructors
		public DemoMonoBehaviour(); // 0x00BB6604-0x00BB6670
	
		// Methods
		private void Awake(); // 0x00BB63E4-0x00BB64B8
		[IteratorStateMachine] // 0x0018EA78-0x0018EAF0
		private IEnumerator MyCoroutine(); // 0x00BB64B8-0x00BB652C
		[IteratorStateMachine] // 0x0018EAF0-0x0018EB68
		private IEnumerator MyCoroutine(float _Parameter); // 0x00BB652C-0x00BB65C4
	}

	public class DemoNetworkBehaviour : NetworkBehaviour // TypeDefIndex: 3768
	{
		// Fields
		private static int kCmdCmd_NetworkMethod; // 0x00
	
		// Constructors
		public DemoNetworkBehaviour(); // 0x00BB6AB0-0x00BB6B34
		static DemoNetworkBehaviour(); // 0x00BB6D30-0x00BB6E90
	
		// Methods
		private void Awake(); // 0x00BB6860-0x00BB6864
		[Command] // 0x0018EC08-0x0018EC18
		private void Cmd_NetworkMethod(); // 0x00BB6AAC-0x00BB6AB0
		private void CallCmd_MyMethod(); // 0x00BB6AA8-0x00BB6AAC
		private void UNetVersion(); // 0x00BB6B34-0x00BB6B38
		protected static void InvokeCmdCmd_NetworkMethod(NetworkBehaviour obj, NetworkReader reader); // 0x00BB6B38-0x00BB6D30
		public void CallCmd_NetworkMethod(); // 0x00BB6864-0x00BB6AA8
		public override bool OnSerialize(NetworkWriter writer, bool forceAll); // 0x00BB6E90-0x00BB6E98
		public override void OnDeserialize(NetworkReader reader, bool initialState); // 0x00BB6E98-0x00BB6E9C
	}
}

namespace Obfuscator.Attribute
{
	[AttributeUsage] // 0x0018BB30-0x0018BB44
	public class DoNotObfuscateClassAttribute : global::System.Attribute // TypeDefIndex: 3769
	{
		// Constructors
		public DoNotObfuscateClassAttribute(); // 0x00BB6154-0x00BB615C
	}

	[AttributeUsage] // 0x0018BB44-0x0018BB58
	public class DoNotObfuscateMethodBodyAttribute : global::System.Attribute // TypeDefIndex: 3770
	{
		// Constructors
		public DoNotObfuscateMethodBodyAttribute(); // 0x00BB615C-0x00BB6164
	}

	[AttributeUsage] // 0x0018BB58-0x0018BB6C
	public class DoNotRenameAttribute : global::System.Attribute // TypeDefIndex: 3771
	{
		// Constructors
		public DoNotRenameAttribute(); // 0x00BB6164-0x00BB616C
	}
}

namespace Facebook.Unity.Example
{
	internal class ConsoleBase : MonoBehaviour // TypeDefIndex: 3772
	{
		// Fields
		private const int DpiScalingFactor = 160; // Metadata: 0x0021CB22
		private static Stack<string> menuStack; // 0x00
		private string status; // 0x0C
		private string lastResponse; // 0x10
		private Vector2 scrollPosition; // 0x14
		private float? scaleFactor; // 0x1C
		private GUIStyle textStyle; // 0x24
		private GUIStyle buttonStyle; // 0x28
		private GUIStyle textInputStyle; // 0x2C
		private GUIStyle labelStyle; // 0x30
		[CompilerGenerated] // 0x0018BE50-0x0018BE60
		private Texture2D <LastResponseTexture>k__BackingField; // 0x34
	
		// Properties
		protected static int ButtonHeight { get; } // 0x001F871C-0x001F8740 
		protected static int MainWindowWidth { get; } // 0x001F8740-0x001F8770 
		protected static int MainWindowFullWidth { get; } // 0x001F8DA4-0x001F8DCC 
		protected static int MarginFix { get; } // 0x001F8DCC-0x001F8DF0 
		protected static Stack<string> MenuStack { get; set; } // 0x001F8DF0-0x001F8E7C 0x001F8E7C-0x001F8F0C
		protected string Status { get; set; } // 0x001F8F0C-0x001F8F14 0x001F7244-0x001F724C
		protected Texture2D LastResponseTexture { [CompilerGenerated] /* 0x0018EC18-0x0018EC28 */ get; [CompilerGenerated] /* 0x0018EC28-0x0018EC38 */ set; } // 0x001F8F14-0x001F8F1C 0x001F8F1C-0x001F8F24
		protected string LastResponse { get; set; } // 0x001F8F24-0x001F8F2C 0x001F8F2C-0x001F8F34
		protected Vector2 ScrollPosition { get; set; } // 0x001F8F34-0x001F8F48 0x001F8F48-0x001F8F54
		protected float ScaleFactor { get; } // 0x001F8538-0x001F8614 
		protected int FontSize { get; } // 0x001F8F54-0x001F9088 
		protected GUIStyle TextStyle { get; } // 0x001F9088-0x001F9284 
		protected GUIStyle ButtonStyle { get; } // 0x001F8614-0x001F871C 
		protected GUIStyle TextInputStyle { get; } // 0x001F9284-0x001F938C 
		protected GUIStyle LabelStyle { get; } // 0x001F8430-0x001F8538 
	
		// Constructors
		public ConsoleBase(); // 0x001F95FC-0x001F96D0
		static ConsoleBase(); // 0x001F96D0-0x001F9760
	
		// Methods
		protected virtual void Awake(); // 0x001F938C-0x001F9398
		protected bool Button(string label); // 0x001F6E20-0x001F700C
		protected void LabelAndTextField(string label, ref string text); // 0x001F81E4-0x001F8430
		protected bool IsHorizontalLayout(); // 0x001F9398-0x001F93BC
		protected void SwitchMenu(Type menuClass); // 0x001F93BC-0x001F94E0
		protected void GoBack(); // 0x001F94E0-0x001F95FC
	}

	internal class LogView : ConsoleBase // TypeDefIndex: 3773
	{
		// Fields
		private static string datePatt; // 0x00
		private static IList<string> events; // 0x04
	
		// Constructors
		public LogView(); // 0x001FB4E8-0x001FB568
		static LogView(); // 0x001FB568-0x001FB614
	
		// Methods
		public static void AddLog(string log); // 0x001F724C-0x001F740C
		protected void OnGUI(); // 0x001FB0CC-0x001FB4E8
	}

	internal abstract class MenuBase : ConsoleBase // TypeDefIndex: 3774
	{
		// Fields
		private static ShareDialogMode shareDialogMode; // 0x00
	
		// Constructors
		protected MenuBase(); // 0x001F7010-0x001F7090
	
		// Methods
		protected abstract void GetGui();
		protected virtual bool ShowDialogModeSelector(); // 0x001FC5E8-0x001FC5F0
		protected virtual bool ShowBackButton(); // 0x001FC5F0-0x001FC5F8
		protected void HandleResult(IResult result); // 0x001FA828-0x001FACAC
		protected void OnGUI(); // 0x001FC5F8-0x001FCAC8
		private void AddStatus(); // 0x001FCAC8-0x001FCC4C
		private void AddBackButton(); // 0x001FCC4C-0x001FCD70
		private void AddLogButton(); // 0x001FCD70-0x001FCE30
		private void AddDialogModeButtons(); // 0x001FCE30-0x001FD1FC
		private void AddDialogModeButton(ShareDialogMode mode); // 0x001FD1FC-0x001FD3D4
	}

	internal class AccessTokenMenu : MenuBase // TypeDefIndex: 3775
	{
		// Constructors
		public AccessTokenMenu(); // 0x001F700C-0x001F7010
	
		// Methods
		protected override void GetGui(); // 0x001F6D64-0x001F6E20
	}

	internal class AppEvents : MenuBase // TypeDefIndex: 3776
	{
		// Constructors
		public AppEvents(); // 0x001F740C-0x001F7410
	
		// Methods
		protected override void GetGui(); // 0x001F7090-0x001F7244
	}

	internal class AppLinks : MenuBase // TypeDefIndex: 3777
	{
		// Constructors
		public AppLinks(); // 0x001F757C-0x001F7580
	
		// Methods
		protected override void GetGui(); // 0x001F7410-0x001F757C
	}

	internal class AppRequests : MenuBase // TypeDefIndex: 3778
	{
		// Fields
		private string requestMessage; // 0x38
		private string requestTo; // 0x3C
		private string requestFilter; // 0x40
		private string requestExcludes; // 0x44
		private string requestMax; // 0x48
		private string requestData; // 0x4C
		private string requestTitle; // 0x50
		private string requestObjectID; // 0x54
		private int selectedAction; // 0x58
		private string[] actionTypeStrings; // 0x5C
	
		// Constructors
		public AppRequests(); // 0x001F8A00-0x001F8DA4
	
		// Methods
		protected override void GetGui(); // 0x001F7580-0x001F81E4
		private OGActionType? GetSelectedOGActionType(); // 0x001F8770-0x001F8A00
	}

	internal class DialogShare : MenuBase // TypeDefIndex: 3779
	{
		// Fields
		private string shareLink; // 0x38
		private string shareTitle; // 0x3C
		private string shareDescription; // 0x40
		private string shareImage; // 0x44
		private string feedTo; // 0x48
		private string feedLink; // 0x4C
		private string feedTitle; // 0x50
		private string feedCaption; // 0x54
		private string feedDescription; // 0x58
		private string feedImage; // 0x5C
		private string feedMediaSource; // 0x60
	
		// Constructors
		public DialogShare(); // 0x001FA004-0x001FA124
	
		// Methods
		protected override bool ShowDialogModeSelector(); // 0x001F9760-0x001F9768
		protected override void GetGui(); // 0x001F9768-0x001FA004
	}

	internal class GraphRequest : MenuBase // TypeDefIndex: 3780
	{
		// Fields
		private string apiQuery; // 0x38
		private Texture2D profilePic; // 0x3C
	
		// Nested types
		[CompilerGenerated] // 0x0018BB6C-0x0018BB7C
		private sealed class <TakeScreenshot>d__4 : IEnumerator<object> // TypeDefIndex: 3781
		{
			// Fields
			private int <>1__state; // 0x08
			private object <>2__current; // 0x0C
			public GraphRequest <>4__this; // 0x10
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0018ECD0-0x0018ECE0 */ get; } // 0x001FB034-0x001FB03C 
			object IEnumerator.Current { [DebuggerHidden] /* 0x0018ECF0-0x0018ED00 */ get; } // 0x001FB0C4-0x001FB0CC 
	
			// Constructors
			[DebuggerHidden] // 0x0018ECB0-0x0018ECC0
			public <TakeScreenshot>d__4(int <>1__state); // 0x001FACAC-0x001FACCC
	
			// Methods
			[DebuggerHidden] // 0x0018ECC0-0x0018ECD0
			void IDisposable.Dispose(); // 0x001FAD3C-0x001FAD40
			private bool MoveNext(); // 0x001FAD40-0x001FB034
			[DebuggerHidden] // 0x0018ECE0-0x0018ECF0
			void IEnumerator.Reset(); // 0x001FB03C-0x001FB0C4
		}
	
		// Constructors
		public GraphRequest(); // 0x001FACCC-0x001FAD3C
	
		// Methods
		protected override void GetGui(); // 0x001FA124-0x001FA54C
		private void ProfilePhotoCallback(IGraphResult result); // 0x001FA5D8-0x001FA828
		[IteratorStateMachine] // 0x0018EC38-0x0018ECB0
		private IEnumerator TakeScreenshot(); // 0x001FA54C-0x001FA5D8
	}

	internal sealed class MainMenu : MenuBase // TypeDefIndex: 3782
	{
		// Constructors
		public MainMenu(); // 0x001FC5E4-0x001FC5E8
	
		// Methods
		protected override bool ShowBackButton(); // 0x001FB614-0x001FB61C
		protected override void GetGui(); // 0x001FB61C-0x001FBFA0
		private void CallFBLogin(); // 0x001FBFA0-0x001FC168
		private void CallFBLoginForPublish(); // 0x001FC168-0x001FC29C
		private void CallFBLogout(); // 0x001FC29C-0x001FC318
		private void OnInitComplete(); // 0x001FC318-0x001FC4D8
		private void OnHideUnity(bool isGameShown); // 0x001FC4D8-0x001FC5E4
	}

	internal class Pay : MenuBase // TypeDefIndex: 3783
	{
		// Fields
		private string payProduct; // 0x38
	
		// Constructors
		public Pay(); // 0x001FD550-0x001FD5C0
	
		// Methods
		protected override void GetGui(); // 0x001FD3D4-0x001FD470
		private void CallFBPay(); // 0x001FD470-0x001FD550
	}
}

[CompilerGenerated] // 0x0018BB7C-0x0018BB8C
internal sealed class <PrivateImplementationDetails> // TypeDefIndex: 3784
{
	// Fields
	internal static readonly __StaticArrayInitTypeSize=15 B1128A96753C0B0A4F2FF1F2E92017EC4F6D9973; // 0x00 // Starts with: 30 0d 06 09 2a 86 48 86 - Metadata: 0x0021CB26

	// Nested types
	private struct __StaticArrayInitTypeSize=15 // TypeDefIndex: 3785
	{
	}
}

